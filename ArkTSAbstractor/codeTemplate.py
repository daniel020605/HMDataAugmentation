import os

TEMPLATE = """// Generated by CodeGenTool
{imports}

@Entry
@Component
struct Index {{
{variables}
  {build}
  {solution}
}}
"""


def generate_files(output_dir="generated"):
    # Create output directories
    os.makedirs(f"{output_dir}/src", exist_ok=True)
    os.makedirs(f"{output_dir}/test", exist_ok=True)
    os.makedirs(f"{output_dir}/src/entryability", exist_ok=True)

    # Generate main component
    with open(f"{output_dir}/src/TextDemoPage.ets", "w") as f:
        imports = [
            "import { font, router } from '@kit.ArkUI';",
            "import { JSON } from '@kit.ArkTS';",
            "import TopTitle from '../entryability/EntryAbility';"
        ]
        variables = [
            "private title: string = (router.getParams() as Record<string, string>)?.title as string",
            "@State sysFontList: string[] = ['宋体','楷体']"
        ]
        solution = "build() {\n    Column({ space: 20 }) {\n      \n    }\n  }"
        f.write(TEMPLATE.format(
            imports="\n".join(imports),
            variables="\n".join(v + ";" for v in variables),
            solution=solution
        ))

    # Generate stub implementation
    with open(f"{output_dir}/src/entryability/EntryAbility.ets", "w") as f:
        f.write(STUB_TEMPLATE)

    # Generate test file
    with open(f"{output_dir}/test/TextDemoPage.test.ets", "w") as f:
        f.write(TEST_TEMPLATE)


if __name__ == "__main__":
    generate_files()