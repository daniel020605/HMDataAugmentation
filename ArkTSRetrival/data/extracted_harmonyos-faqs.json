[
    {
        "id": 1,
        "pre": "import { buffer } from '@kit.ArkTS';\\nimport { cryptoFramework } from '@kit.CryptoArchitectureKit';\\nimport { http } from '@kit.NetworkKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\ndecodeBase64(data: string): string {\\n  return buffer.from(data, 'base64').toString('utf8');\\n}\\n// 解析ID Token并验证\\ndecodeIdToken(idToken: string): void {\\n  const parts = idToken.split('.');\\n  if (parts.length !== 3) {\\n    return;\\n  }\\n  const idTokenObj: Record<string, Object> = {};\\n  // ID Token头部\\n  idTokenObj['header'] = JSON.parse(this.decodeBase64(parts[0]));\\n  // ID Token负载\\n  idTokenObj['payload'] = JSON.parse(this.decodeBase64(parts[1]));\\n  // ID Token签名\\n  idTokenObj['signature'] = parts[2];\\n  const header: Record<string, string> = idTokenObj['header'] as Record<string, string>;\\n  // 从负载中解析出nonce等数据\\n  const payLoad: Record<string, string> = idTokenObj['payload'] as Record<string, string>;\\n  const nonce: string = payLoad['nonce'];\\n  // 应用Client ID，使用前请替换\\n  const CLIENT_ID: string = '<应用Client ID>';\\n  const ID_TOKEN_ISSUE: string = 'https://accounts.huawei.com';\\n  const iss: string = payLoad['iss'];\\n  const aud: string = payLoad['aud'];\\n  if(iss !== ID_TOKEN_ISSUE){\\n    // 验证失败，开发者处理失败场景\\n    hilog.error(0x0000, 'testTag', 'Failed to check iss');\\n    return;\\n  }\\n  if(aud !== CLIENT_ID){\\n    // 验证失败，开发者处理失败场景\\n    hilog.error(0x0000, 'testTag', 'Failed to check aud');\\n    return;\\n  }\\n  // 验证签名\\n  this.checkSignature(idToken, header['kid'], header['alg']);\\n}\\n\\nprivate stringToUint8Array(str: string): Uint8Array {\\n  const arr: number[] = [];\\n  for (let i = 0, j = str.length; i < j; ++i) {\\n    arr.push(str.charCodeAt(i));\\n  }\\n  const tmpUint8Array: Uint8Array = new Uint8Array(arr);\\n  return tmpUint8Array;\\n}\\n// 验签方法\\nprivate checkSignature(idToken: string, kid: string, alg: string) {\\n  if (!idToken) {\\n    return;\\n  }\\n  const parts = idToken.split('.');\\n  if (parts.length !== 3) {\\n    return;\\n  }\\n  const url = 'https://oauth-login.cloud.huawei.com/oauth2/v3/certs';\\n  // 创建http请求，应用需在module.json5文件中先申请“ohos.permission.INTERNET”网络权限，请求才能发送成功\\n  const httpRequest = http.createHttp();\\n  httpRequest.request(url, (err, data) => {\\n    if (err) {\\n      hilog.error(0x0000, 'testTag', `Failed to httpRequest. Code: ${err.code}, message: ${err.message}`);\\n      httpRequest.destroy();\\n      return;\\n    }\\n    let nStr = '';\\n    let eStr = '';\\n    const keys: object[] = JSON.parse(data.result as string)[\\\"keys\\\"];\\n    for (let item of keys) {\\n      if (kid === item['kid']) {\\n        nStr = item['n'];\\n        eStr = item['e'];\\n        break;\\n      }\\n    }\\n    const nBigInt = '0x' + buffer.from(nStr, \\\"base64url\\\").toString('hex');\\n    const eBigInt = '0x' + buffer.from(eStr, \\\"base64url\\\").toString('hex');\\n    const dsaCommonSpec: cryptoFramework.RSACommonParamsSpec = {\\n      algName: \\\"RSA\\\",\\n      specType: cryptoFramework.AsyKeySpecType.COMMON_PARAMS_SPEC,\\n      n: BigInt(nBigInt),\\n    }\\n    const rsaKeyPairSpec: cryptoFramework.RSAPubKeySpec = {\\n      algName: \\\"RSA\\\",\\n      specType: cryptoFramework.AsyKeySpecType.PUBLIC_KEY_SPEC,\\n      params: dsaCommonSpec,\\n      pk: BigInt(eBigInt),\\n    }\\n    const asyKeyGeneratorBySpec = cryptoFramework.createAsyKeyGeneratorBySpec(rsaKeyPairSpec);\\n    asyKeyGeneratorBySpec.generatePubKey(async (error, publicKey) => {\\n      if (error) {\\n        return;\\n      }\\n      if (publicKey === null) {\\n        return;\\n      }\\n      const idTokenSign = parts[2];\\n      const idTokenSignArr: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(idTokenSign, \\\"base64url\\\").buffer) };\\n      const idToken = parts[0] + '.' + parts[1];\\n      const idTokenArr: cryptoFramework.DataBlob = { data: this.stringToUint8Array(idToken) };\\n      const verifier = alg === 'PS256' ? cryptoFramework.createVerify(\\\"RSA2048|PSS|SHA256|MGF1_SHA256\\\")\\n        : cryptoFramework.createVerify(\\\"RSA2048|PKCS1|SHA256\\\");\\n      verifier.init(publicKey, (initErr, result) => {\\n        verifier.verify(idTokenArr, idTokenSignArr, (verifyErr, data) => {\\n          // 打印验签结果，结果为true则验签通过\\n          hilog.info(0x0000, 'testTag', 'verify result is: %{public}s', data);\\n        });\\n      });\\n    })\\n    httpRequest.destroy();\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      对于无服务器应用，可在客户端获取ID Token后，进行本地解析与验证，解析后可获取用户数据，并验证签名，具体参考如下ArkTS代码示例，将获取的ID Token作为方法入参，并将代码中的CLIENT_ID替换为应用真实的Client ID：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      对于无服务器应用，可在客户端获取ID Token后，进行本地解析与验证，解析后可获取用户数据，并验证签名，具体参考如下ArkTS代码示例，将获取的ID Token作为方法入参，并将代码中的CLIENT_ID替换为应用真实的Client ID：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-faqs/account-faq-7.html"
    }
]
