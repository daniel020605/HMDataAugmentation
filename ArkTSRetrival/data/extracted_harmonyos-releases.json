[
    {
        "id": 1,
        "pre": "const strData = `{\\\"k1\\\": \\\"hello\\\", \\\"k2\\\": 3}`;\\nconst strErr = strData.substring(0, strData.length - 2); // `{\\\"k1\\\": \\\"hello\\\", \\\"k2\\\": `\\nJSON.parse(strErr);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]JSON.parse解析非法字符串行为变更",
        "parent_text": "[h2]JSON.parse解析非法字符串行为变更变更原因 JSON.parse解析非法字符串未抛JS异常，表现与预期及ECMA规范不一致 变更影响 此变更涉及应用适配。  变更前：JSON.parse解析非法字符串strErr能够正常解析，未抛出JS异常。 变更后：JSON.parse解析非法字符串strErr抛出JS异常。 起始API Level 12 变更的接口/组件 JSON.parse/ASON.parse/util.json.parse 适配指导 针对JSON.parse解析非法字符串的异常场景，开发者需要保证传入的字符串为合法字符串，或者使用try-catch捕获异常。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"jsonparse解析非法字符串行为变更\\\"'><a name='\\\"ZH-CN_TOPIC_0000001969925848__jsonparse%E8%A7%A3%E6%9E%90%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4\\\"'></a><a name='\\\"jsonparse%E8%A7%A3%E6%9E%90%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4\\\"'></a><h4>[h2]JSON.parse解析非法字符串行为变更</h4><p><strong>变更原因</strong></p> <p>JSON.parse解析非法字符串未抛JS异常，表现与预期及ECMA规范不一致</p> <p><strong>变更影响</strong></p> <p>此变更涉及应用适配。</p>  <p>变更前：JSON.parse解析非法字符串strErr能够正常解析，未抛出JS异常。</p> <p>变更后：JSON.parse解析非法字符串strErr抛出JS异常。</p> <p><strong>起始API Level</strong></p> <p>12</p> <p><strong>变更的接口/组件</strong></p> <p>JSON.parse/ASON.parse/util.json.parse</p> <p><strong>适配指导</strong></p> <p>针对JSON.parse解析非法字符串的异常场景，开发者需要保证传入的字符串为合法字符串，或者使用try-catch捕获异常。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-targeting-api12-b035.html"
    },
    {
        "id": 2,
        "pre": "@Entry\\n@Component\\nstruct barHeightTest {\\n  build() {\\n    Column() {\\n      Tabs() {\\n        TabContent() {\\n          Column().width('100%').width('100%').height('100%').backgroundColor(Color.Pink)\\n        }\\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \\\"Pink\\\"))\\n\\n        TabContent() {\\n          Column().width('100%').width('100%').height('100%').backgroundColor(Color.Green)\\n        }\\n        .tabBar(new BottomTabBarStyle($r('sys.media.ohos_app_icon'), \\\"Green\\\"))\\n      }\\n      .barHeight(52)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "Tabs组件底部页签默认高度由52vp变更为48vp",
        "parent_text": "Tabs组件底部页签默认高度由52vp变更为48vp变更原因 Tabs组件底部页签默认高度由52vp调整到48vp，优化用户体验。 变更影响 此变更涉及应用适配。 变更前：设置BottomTabBarStyle样式且vertical属性为false时，barHeight的默认值为52vp。 变更后：设置BottomTabBarStyle样式且vertical属性为false时，barHeight的默认值为48vp。 变更前  变更后           起始API Level 11 变更的接口/组件 barHeight 适配指导 若发现组件高度变化导致界面内容出现留白，可通过修改内容区高度或自适应内容区高度。 若组件高度发生变化，开发者期望保持原有高度样式。示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"tabs组件底部页签默认高度由52vp变更为48vp\\\"'><a name='\\\"ZH-CN_TOPIC_0000002117767837__tabs%E7%BB%84%E4%BB%B6%E5%BA%95%E9%83%A8%E9%A1%B5%E7%AD%BE%E9%BB%98%E8%AE%A4%E9%AB%98%E5%BA%A6%E7%94%B152vp%E5%8F%98%E6%9B%B4%E4%B8%BA48vp\\\"'></a><a name='\\\"tabs%E7%BB%84%E4%BB%B6%E5%BA%95%E9%83%A8%E9%A1%B5%E7%AD%BE%E9%BB%98%E8%AE%A4%E9%AB%98%E5%BA%A6%E7%94%B152vp%E5%8F%98%E6%9B%B4%E4%B8%BA48vp\\\"'></a><h4>Tabs组件底部页签默认高度由52vp变更为48vp</h4><p><strong>变更原因</strong></p> <p>Tabs组件底部页签默认高度由52vp调整到48vp，优化用户体验。</p> <p><strong>变更影响</strong></p> <p>此变更涉及应用适配。</p> <p>变更前：设置BottomTabBarStyle样式且vertical属性为false时，barHeight的默认值为52vp。</p> <p>变更后：设置BottomTabBarStyle样式且vertical属性为false时，barHeight的默认值为48vp。</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.8.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更前</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.8.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更后</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"835\\\"' originwidth='\\\"1440\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182013.49065187163768640570568890106497:50001231000000:2800:BB89884B613FF91B37F14A1D13B00C1141AEB2E8DEBA6856A20AB212128CF5B3.jpg\\\"'/></span></p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"835\\\"' originwidth='\\\"1440\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182013.16738789192489423017541183057354:50001231000000:2800:11CF9B64FF1187802CBE49071DCC41A857DEC134E6D8B5C529FA7BCFBAD69936.jpg\\\"'/></span></p> </td> </tr> </tbody></table> </div> <p><strong>起始API Level</strong></p> <p>11</p> <p><strong>变更的接口/组件</strong></p> <p>barHeight</p> <p><strong>适配指导</strong></p> <p>若发现组件高度变化导致界面内容出现留白，可通过修改内容区高度或自适应内容区高度。</p> <p>若组件高度发生变化，开发者期望保持原有高度样式。示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-ux-b112.html"
    },
    {
        "id": 3,
        "pre": "// xxx.ets\\n@Entry\\n@Component\\nstruct FillText {\\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\\n\\n  build() {\\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\\n      Canvas(this.context)\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor('#ffff00')\\n        .onReady(() =>{\\n          this.context.fillRect(0, 0, 150, 150)\\n          this.context.globalCompositeOperation = 'source-out'\\n          this.context.fillRect(50, 50, 50, 50) // 生效'source-out'模式\\n          this.context.globalCompositeOperation = 'source-over' // globalCompositeOperation默认值\\n          this.context.fillText('Hello World', 50, 50) // 生效'source-over'模式\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的globalCompositeOperation属性变更为在绘制文本时生效",
        "parent_text": "CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的globalCompositeOperation属性变更为在绘制文本时生效变更原因 画布绘制的globalCompositeOperation属性在绘制文本时未生效，导致绘制效果与W3C有差异，故需要做绘制行为变更。 变更影响 变更前：CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的globalCompositeOperation属性在绘制文本时不生效。 变更后：CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的globalCompositeOperation属性在绘制文本时生效。 变更前  变更后           起始API Level 8 变更的接口/组件 CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillText和strokeText接口。 适配指导 如果希望在绘制文本时globalCompositeOperation属性保持默认值，需要在fillText/strokeText方法前显式声明context.globalCompositeOperation = 'source-over'。 示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"canvasrenderingcontext2d和offscreencanvasrenderingcontext2d的globalcompositeoperation属性变更为在绘制文本时生效\\\"'><a name='\\\"ZH-CN_TOPIC_0000002117767837__canvasrenderingcontext2d%E5%92%8Coffscreencanvasrenderingcontext2d%E7%9A%84globalcompositeoperation%E5%B1%9E%E6%80%A7%E5%8F%98%E6%9B%B4%E4%B8%BA%E5%9C%A8%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC%E6%97%B6%E7%94%9F%E6%95%88\\\"'></a><a name='\\\"canvasrenderingcontext2d%E5%92%8Coffscreencanvasrenderingcontext2d%E7%9A%84globalcompositeoperation%E5%B1%9E%E6%80%A7%E5%8F%98%E6%9B%B4%E4%B8%BA%E5%9C%A8%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC%E6%97%B6%E7%94%9F%E6%95%88\\\"'></a><h4>CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的globalCompositeOperation属性变更为在绘制文本时生效</h4><p><strong>变更原因</strong></p> <p>画布绘制的globalCompositeOperation属性在绘制文本时未生效，导致绘制效果与W3C有差异，故需要做绘制行为变更。</p> <p><strong>变更影响</strong></p> <p>变更前：CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的globalCompositeOperation属性在绘制文本时不生效。</p> <p>变更后：CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的globalCompositeOperation属性在绘制文本时生效。</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.2.7.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更前</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.2.7.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更后</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"141\\\"' originwidth='\\\"277\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182013.38251279569920744168898882445279:50001231000000:2800:C8C4C837D33E714961457CD652950A2663CC9E0CF7ECF23C379A76E6791028C4.png\\\"'/></span></p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"141\\\"' originwidth='\\\"279\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182013.71748618262693897830081820146637:50001231000000:2800:2FE5AFAC743EA4E29676650C7C2079ACB903E646DAC40BEE2E62E20E8FA009C7.png\\\"'/></span></p> </td> </tr> </tbody></table> </div> <p><strong>起始API Level</strong></p> <p>8</p> <p><strong>变更的接口/组件</strong></p> <p>CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillText和strokeText接口。</p> <p><strong>适配指导</strong></p> <p>如果希望在绘制文本时globalCompositeOperation属性保持默认值，需要在fillText/strokeText方法前显式声明context.globalCompositeOperation = 'source-over'。</p> <p>示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-ux-b112.html"
    },
    {
        "id": 4,
        "pre": "// xxx.ets\\n@Entry\\n@Component\\nstruct CreatePattern {\\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\\n  private img:ImageBitmap = new ImageBitmap(\\\"common/images/icon.jpg\\\")\\n\\n  build() {\\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\\n      Canvas(this.context)\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor('#ffff00')\\n        .onReady(() =>{\\n          this.context.font = '30vp sans-serif'\\n          let pattern = this.context.createPattern(this.img, 'repeat')\\n          if (pattern) {\\n            this.context.fillStyle = pattern\\n          }\\n          this.context.fillText('Hello World', 50, 50)\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的pattern样式变更为在fillText时生效",
        "parent_text": "CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的pattern样式变更为在fillText时生效变更原因 画布绘制的pattern样式在fillText时未生效，导致绘制效果与W3C有差异，故需要做绘制行为变更。 变更影响 变更前：画布绘制设置fillStyle属性为pattern样式，在fillText时不生效。 变更后：画布绘制设置fillStyle属性为pattern样式，在fillText时生效。 变更前  变更后           起始API Level 8 变更的接口/组件 CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillText接口。 适配指导 无需适配，变更后设置fillStyle属性为pattern样式，可以在fillText时生效。 示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"canvasrenderingcontext2d和offscreencanvasrenderingcontext2d的pattern样式变更为在filltext时生效\\\"'><a name='\\\"ZH-CN_TOPIC_0000002117767837__canvasrenderingcontext2d%E5%92%8Coffscreencanvasrenderingcontext2d%E7%9A%84pattern%E6%A0%B7%E5%BC%8F%E5%8F%98%E6%9B%B4%E4%B8%BA%E5%9C%A8filltext%E6%97%B6%E7%94%9F%E6%95%88\\\"'></a><a name='\\\"canvasrenderingcontext2d%E5%92%8Coffscreencanvasrenderingcontext2d%E7%9A%84pattern%E6%A0%B7%E5%BC%8F%E5%8F%98%E6%9B%B4%E4%B8%BA%E5%9C%A8filltext%E6%97%B6%E7%94%9F%E6%95%88\\\"'></a><h4>CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的pattern样式变更为在fillText时生效</h4><p><strong>变更原因</strong></p> <p>画布绘制的pattern样式在fillText时未生效，导致绘制效果与W3C有差异，故需要做绘制行为变更。</p> <p><strong>变更影响</strong></p> <p>变更前：画布绘制设置fillStyle属性为pattern样式，在fillText时不生效。</p> <p>变更后：画布绘制设置fillStyle属性为pattern样式，在fillText时生效。</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.7.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更前</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.7.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更后</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"104\\\"' originwidth='\\\"262\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182014.39534001065873561687808877898251:50001231000000:2800:9D5D411094648CE4DCAB2672A22686C24B41A998347F023177F1871BCD48FD5D.png\\\"'/></span></p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"99\\\"' originwidth='\\\"257\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182014.28028791649746750560016619155924:50001231000000:2800:7EE350CBAAEBEF815728345D7BEAB13F81A26BA27D595F0324EDE403D9925D86.png\\\"'/></span></p> </td> </tr> </tbody></table> </div> <p><strong>起始API Level</strong></p> <p>8</p> <p><strong>变更的接口/组件</strong></p> <p>CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillText接口。</p> <p><strong>适配指导</strong></p> <p>无需适配，变更后设置fillStyle属性为pattern样式，可以在fillText时生效。</p> <p>示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-ux-b112.html"
    },
    {
        "id": 5,
        "pre": "// xxx.ets\\n@Entry\\n@Component\\nstruct FillText {\\n  private settings: RenderingContextSettings = new RenderingContextSettings(true)\\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings)\\n\\n  build() {\\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\\n      Canvas(this.context)\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor('#ffff00')\\n        .onReady(() =>{\\n          this.context.font = '30vp sans-serif'\\n          this.context.fillStyle = '#88FF0000' // 设置带透明度颜色\\n          this.context.globalAlpha = 0.5 // 设置画布透明度\\n          this.context.fillText('Hello World', 50, 50)\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度变更为颜色透明度×globalAlpha",
        "parent_text": "CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度变更为颜色透明度×globalAlpha变更原因 画布绘制的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度为globalAlpha，未计算颜色透明度，导致颜色效果不正确。 变更影响 变更前：画布绘制的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度为globalAlpha属性值。 变更后：画布绘制的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度为颜色透明度×globalAlpha。 变更前  变更后           起始API Level 8 变更的接口/组件 CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillText接口。 适配指导 无需适配，变更后fillText颜色效果正确。 示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"canvasrenderingcontext2d和offscreencanvasrenderingcontext2d的fillstyle属性设置带透明度颜色并设置globalalpha属性时filltext绘制文本的透明度变更为颜色透明度globalalpha\\\"'><a name='\\\"ZH-CN_TOPIC_0000002117767837__canvasrenderingcontext2d%E5%92%8Coffscreencanvasrenderingcontext2d%E7%9A%84fillstyle%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E5%B8%A6%E9%80%8F%E6%98%8E%E5%BA%A6%E9%A2%9C%E8%89%B2%E5%B9%B6%E8%AE%BE%E7%BD%AEglobalalpha%E5%B1%9E%E6%80%A7%E6%97%B6filltext%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC%E7%9A%84%E9%80%8F%E6%98%8E%E5%BA%A6%E5%8F%98%E6%9B%B4%E4%B8%BA%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6globalalpha\\\"'></a><a name='\\\"canvasrenderingcontext2d%E5%92%8Coffscreencanvasrenderingcontext2d%E7%9A%84fillstyle%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E5%B8%A6%E9%80%8F%E6%98%8E%E5%BA%A6%E9%A2%9C%E8%89%B2%E5%B9%B6%E8%AE%BE%E7%BD%AEglobalalpha%E5%B1%9E%E6%80%A7%E6%97%B6filltext%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC%E7%9A%84%E9%80%8F%E6%98%8E%E5%BA%A6%E5%8F%98%E6%9B%B4%E4%B8%BA%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6globalalpha\\\"'></a><h4>CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度变更为颜色透明度×globalAlpha</h4><p><strong>变更原因</strong></p> <p>画布绘制的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度为globalAlpha，未计算颜色透明度，导致颜色效果不正确。</p> <p><strong>变更影响</strong></p> <p>变更前：画布绘制的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度为globalAlpha属性值。</p> <p>变更后：画布绘制的fillStyle属性设置带透明度颜色并设置globalAlpha属性时，fillText绘制文本的透明度为颜色透明度×globalAlpha。</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.7.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更前</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.7.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更后</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"98\\\"' originwidth='\\\"251\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182014.13888724501133553495013167210686:50001231000000:2800:7554A1D282271FEFD5494CDE9E8B87AE7F76A25632195DFF2461388CE74C45F9.png\\\"'/></span></p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"95\\\"' originwidth='\\\"250\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182014.55648342447841997615222802746772:50001231000000:2800:2136DCA8E39D9D9929BE5989CD43E9691B1FE96B8F6BA8907E49AD29B992183C.png\\\"'/></span></p> </td> </tr> </tbody></table> </div> <p><strong>起始API Level</strong></p> <p>8</p> <p><strong>变更的接口/组件</strong></p> <p>CanvasRenderingContext2D和OffscreenCanvasRenderingContext2D的fillText接口。</p> <p><strong>适配指导</strong></p> <p>无需适配，变更后fillText颜色效果正确。</p> <p>示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-ux-b112.html"
    },
    {
        "id": 6,
        "pre": "{\\n  buildOption:{\\n    nativeLib:{\\n      filter:{\\n        select:[ // select的优先级高于excludes、pickFirsts等配置项\\n          {\\n            package: \\\"@ohos/curl\\\", // 包名\\n            version： \\\"1.3.5\\\", // 包版本\\n            include： [\\\"libcurl.so\\\"], // 选择打包的native产物\\n            exclude： [\\\"libc++shared.so\\\"], // 排除的native产物\\n          },\\n        ];\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]应用编译构建harA链接harB的so，导致hap包so冲突",
        "parent_text": "[h2]应用编译构建harA链接harB的so，导致hap包so冲突变更原因 cmake从3.16.5版本升级到3.28.2版本，引入了该项变更。 变更影响 cmake版本升级到3.28.2之后，当某har模块（如harA）的CMakeLists.txt中链接了 ”依赖har模块（如harB）中的so” 时，此so会被打包到harA中，可能导致最终打HAP包时so版本冲突。 该能力起始支持的API Level 不涉及API 变更的接口/组件 不涉及 适配指导 如果so版本冲突，请在工程级或者模块级build-profile.json5文件中buildOption下添加nativeLib/filter/select字段，根据包名、版本、产物名称等，选择打包或排除so文件到HAP产物。具体请参考关于select的使用。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"应用编译构建hara链接harb的so导致hap包so冲突\\\"'><a name='\\\"ZH-CN_TOPIC_0000001979520181__%E5%BA%94%E7%94%A8%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BAhara%E9%93%BE%E6%8E%A5harb%E7%9A%84so%E5%AF%BC%E8%87%B4hap%E5%8C%85so%E5%86%B2%E7%AA%81\\\"'></a><a name='\\\"%E5%BA%94%E7%94%A8%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BAhara%E9%93%BE%E6%8E%A5harb%E7%9A%84so%E5%AF%BC%E8%87%B4hap%E5%8C%85so%E5%86%B2%E7%AA%81\\\"'></a><h4>[h2]应用编译构建harA链接harB的so，导致hap包so冲突</h4><p><strong>变更原因</strong></p> <p>cmake从3.16.5版本升级到3.28.2版本，引入了该项变更。</p> <p><strong>变更影响</strong></p> <p>cmake版本升级到3.28.2之后，当某har模块（如harA）的CMakeLists.txt中链接了 ”依赖har模块（如harB）中的so” 时，此so会被打包到harA中，可能导致最终打HAP包时so版本冲突。</p> <p><strong>该能力起始支持的API Level</strong></p> <p>不涉及API</p> <p><strong>变更的接口/组件</strong></p> <p>不涉及</p> <p><strong>适配指导</strong></p> <p>如果so版本冲突，请在工程级或者模块级build-profile.json5文件中buildOption下添加nativeLib/filter/select字段，根据包名、版本、产物名称等，选择打包或排除so文件到HAP产物。具体请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-hvigor-cpp-V5#section14491810432\\\"' target='\\\"_blank\\\"'>关于select的使用</a>。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-for-all-apps-b031.html"
    },
    {
        "id": 7,
        "pre": "// myLog.ets\\nexport class MyLog {\\n    static log(s:string) {\\n        console.log(s);\\n    }\\n}\\n\\n// test.ets\\nimport lazy { MyLog } from './myLog'\\n\\nasync function asyncFunc(f?:string): Promise<number> {\\n    MyLog.log(\\\"asyncFunc start\\\");\\n    return new Promise(resolve => {\\n        resolve(0);\\n    });\\n}\\nexport async function taskTest() {\\n    MyLog.log(\\\"taskTest start\\\");\\n    asyncFunc().then((res) => {\\n        MyLog.log(\\\"asyncFunc then\\\");\\n    });\\n    MyLog.log(\\\"taskTest end\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]延迟加载（lazy import）影响异步任务执行时序变更为不影响异步任务执行时序",
        "parent_text": "[h2]延迟加载（lazy import）影响异步任务执行时序变更为不影响异步任务执行时序变更原因 延迟加载（lazy import）特性在测试过程中发现问题，使用lazy import的变量，会改变异步任务的运行时序。  该变更在2024年12月8日发布的patch版本引入，对应开发工具DevEco Studio版本为5.0.5.306。  变更影响 该变更为不兼容变更。 变更前： 使用lazy import的变量，会改变异步任务的运行时序。 变更后： 使用lazy import的变量，不会改变异步任务的运行时序。 起始 API Level 12 变更的接口/组件 不涉及 适配指导 排查使用lazy import变量的场景，该功能的时序可能会发生改变。 例如：  【提示】修改之前，lazy import会影响异步任务的运行时序，该用例的输出为： taskTest start\\nasyncFunc start\\nasyncFunc then\\ntaskTest end 修复问题之后，该用例的输出为： taskTest start\\nasyncFunc start\\ntaskTest end\\nasyncFunc then 本变更修复该问题，使得lazy import不会影响异步任务运行时序。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"延迟加载lazy-import影响异步任务执行时序变更为不影响异步任务执行时序\\\"'><a name='\\\"ZH-CN_TOPIC_0000002082231476__%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDlazy-import%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F%E5%8F%98%E6%9B%B4%E4%B8%BA%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F\\\"'></a><a name='\\\"%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDlazy-import%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F%E5%8F%98%E6%9B%B4%E4%B8%BA%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F\\\"'></a><h4>[h2]延迟加载（lazy import）影响异步任务执行时序变更为不影响异步任务执行时序</h4><p><strong>变更原因</strong></p> <p>延迟加载（lazy import）特性在测试过程中发现问题，使用lazy import的变量，会改变异步任务的运行时序。</p> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182013.17308139738471329931033909591973:50001231000000:2800:CC3E5F9969FD3AE7B4E827EF779D33EAD49AF6F664EA5A151E869BE1EF8066EC.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>该变更在2024年12月8日发布的patch版本引入，对应开发工具DevEco Studio版本为5.0.5.306。</p> </div></div> <p><strong>变更影响</strong></p> <p>该变更为不兼容变更。</p> <p>变更前： 使用lazy import的变量，会改变异步任务的运行时序。</p> <p>变更后： 使用lazy import的变量，不会改变异步任务的运行时序。</p> <p><strong>起始 API Level</strong></p> <p>12</p> <p><strong>变更的接口/组件</strong></p> <p>不涉及</p> <p><strong>适配指导</strong></p> <p>排查使用lazy import变量的场景，该功能的时序可能会发生改变。</p> <p>例如：</p>  <p>【提示】修改之前，lazy import会影响异步任务的运行时序，该用例的输出为：</p> <pre class='\\\"screen\\\"'>taskTest start\\nasyncFunc start\\nasyncFunc then\\ntaskTest end</pre> <p>修复问题之后，该用例的输出为：</p> <pre class='\\\"screen\\\"'>taskTest start\\nasyncFunc start\\ntaskTest end\\nasyncFunc then</pre> <p>本变更修复该问题，使得lazy import不会影响异步任务运行时序。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-for-all-apps-b112.html"
    },
    {
        "id": 8,
        "pre": "@Extend(SymbolSpan) function style() {\\n  .fontWeight(FontWeight.Lighter)\\n  .fontSize(96)\\n}\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Column() {\\n      Text() {\\n        SymbolSpan($r('sys.symbol.ohos_wifi')).style()\\n        SymbolSpan($r('sys.symbol.ohos_trash')).style()\\n        SymbolSpan($r('sys.symbol.ohos_trash_circle')).style()\\n        SymbolSpan($r('sys.symbol.ohos_photo')).style()\\n        SymbolSpan($r('sys.symbol.ohos_folder_badge_plus')).style()\\n        SymbolSpan($r('sys.symbol.ohos_lungs')).style()\\n        SymbolSpan($r('sys.symbol.ohos_mic')).style()\\n        SymbolSpan($r('sys.symbol.ohos_circle')).style()\\n\\n        SymbolSpan($r('sys.symbol.ohos_lock')).style()\\n        SymbolSpan($r('sys.symbol.ohos_star')).style()\\n        SymbolSpan($r('sys.symbol.ohos_arrow_up')).style()\\n      }\\n    }.width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "Symbol系统资源变更",
        "parent_text": "Symbol系统资源变更变更原因 默认UX样式变更。 变更影响 此变更涉及应用适配。  下表例举资源变更前后对比效果： 变更前  变更后           变更的接口/组件 涉及Symbol资源的组件：SymbolSpan、SymbolGlyph。 适配指导 默认UX样式变更，无需适配。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"symbol系统资源变更\\\"'><a name='\\\"ZH-CN_TOPIC_0000001979640037__symbol%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E5%8F%98%E6%9B%B4\\\"'></a><a name='\\\"symbol%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E5%8F%98%E6%9B%B4\\\"'></a><h4>Symbol系统资源变更</h4><p><strong>变更原因</strong></p> <p>默认UX样式变更。</p> <p><strong>变更影响</strong></p> <p>此变更涉及应用适配。</p>  <p>下表例举资源变更前后对比效果：</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.8.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更前</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.8.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>变更后</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"554\\\"' originwidth='\\\"720\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182032.19577646907677862420509145907912:50001231000000:2800:9C50751A81E23DBD832CCFB71AE7B1FF0108C6131B158397BC5590C78A78DB5A.png\\\"'/></span></p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p><span><img originheight='\\\"483\\\"' originwidth='\\\"720\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182032.04098479204613291293393464484431:50001231000000:2800:CCC959A82DF55F2D5185FCC5963E5330BA01873FBEFD858ED8C799B9FC20A6E9.png\\\"'/></span></p> </td> </tr> </tbody></table> </div> <p><strong>变更的接口/组件</strong></p> <p>涉及Symbol资源的组件：SymbolSpan、SymbolGlyph。</p> <p><strong>适配指导</strong></p> <p>默认UX样式变更，无需适配。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-ux-b031.html"
    },
    {
        "id": 9,
        "pre": "import {MainPage} from '../../../../../library/src/main/ets/MainPage'  // 相对路径跨模块导入，编译报错",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "如果工程级build-profile.json5文件的useNormalizedOHMUrl字段为true，则默认将noExternalImportByPath设置为true，即通过相对路径跨模块或绝对路径导入文件，编译会报错。 ",
        "import_module": null,
        "parent": "<li>如果工程级build-profile.json5文件的useNormalizedOHMUrl字段为true，则默认将<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-hvigor-build-profile-V5\\\"' target='\\\"_blank\\\"'>noExternalImportByPath</a>设置为true，即通过相对路径跨模块或绝对路径导入文件，编译会报错。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/ide-changelogs-nb1.html"
    },
    {
        "id": 10,
        "pre": "\\\"buildOption\\\": {\\n  \\\"nativeLib\\\": {\\n    \\\"debugSymbol\\\": {\\n      \\\"strip\\\": false\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]strip字段缺省默认值变更",
        "parent_text": "[h2]strip字段缺省默认值变更工程级和模块级build-profile.json5文件中的strip字段缺省默认值由false改为true。 变更影响 升级到DevEco Studio NEXT Developer Beta2（5.0.3.502）及以上版本： 打包到har包的.so文件默认不带调试信息，har包内的.so文件无法进行调试。打包的.so文件默认不带符号表，导致DevEco Profiler工具的基础耗时分析和内存分析可能采集不到符号名称。 适配指导 如需对har包内的.so文件进行CPP代码调试或采集完整的符号名称，请在模块打包之前，在工程级或模块级build-profile.json5文件中buildOption下添加nativeLib/debugSymbol/strip字段并设置为false。具体请参考build-profile.json5。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10138145155116\\\"'><a name='\\\"section10138145155116\\\"'></a><a name='\\\"section10138145155116\\\"'></a><h4>[h2]strip字段缺省默认值变更</h4><p>工程级和模块级build-profile.json5文件中的strip字段缺省默认值由false改为true。</p> <p><strong>变更影响</strong></p> <p>升级到DevEco Studio NEXT Developer Beta2（5.0.3.502）及以上版本：</p> <ul><li>打包到har包的.so文件默认不带调试信息，har包内的.so文件无法进行调试。</li><li>打包的.so文件默认不带符号表，导致DevEco Profiler工具的基础耗时分析和内存分析可能采集不到符号名称。</li></ul> <p><strong>适配指导</strong></p> <p>如需对har包内的.so文件进行CPP代码调试或采集完整的符号名称，请在模块打包之前，在工程级或模块级build-profile.json5文件中buildOption下添加nativeLib/debugSymbol/strip字段并设置为false。具体请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-hvigor-build-profile-V5\\\"' target='\\\"_blank\\\"'>build-profile.json5</a>。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/ide-changelogs-db2.html"
    },
    {
        "id": 11,
        "pre": "// myLog.ets\\nexport class MyLog {\\n    static log(s:string) {\\n        console.log(s);\\n    }\\n}\\n\\n// test.ets\\nimport lazy { MyLog } from './myLog'\\n\\nasync function asyncFunc(f?:string): Promise<number> {\\n    MyLog.log(\\\"asyncFunc start\\\");\\n    return new Promise(resolve => {\\n        resolve(0);\\n    });\\n}\\nexport async function taskTest() {\\n    MyLog.log(\\\"taskTest start\\\");\\n    asyncFunc().then((res) => {\\n        MyLog.log(\\\"asyncFunc then\\\");\\n    });\\n    MyLog.log(\\\"taskTest end\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]延迟加载（lazy import）影响异步任务执行时序变更为不影响异步任务执行时序",
        "parent_text": "[h2]延迟加载（lazy import）影响异步任务执行时序变更为不影响异步任务执行时序变更原因 延迟加载（lazy import）特性在测试过程中发现问题，使用lazy import的变量，会改变异步任务的运行时序。 变更影响 此变更涉及应用适配。 变更前： 使用lazy import的变量，会改变异步任务的运行时序。 变更后： 使用lazy import的变量，不会改变异步任务的运行时序。 起始 API Level 12 变更的接口/组件 不涉及 适配指导 排查使用lazy import变量的场景，该功能的时序可能会发生改变。 例如：  【提示】修改之前，lazy import会影响异步任务的运行时序，该用例的输出为： taskTest start\\nasyncFunc start\\nasyncFunc then\\ntaskTest end 修复问题之后，该用例的输出为： taskTest start\\nasyncFunc start\\ntaskTest end\\nasyncFunc then 本变更修复该问题，使得lazy import不会影响异步任务运行时序。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"延迟加载lazy-import影响异步任务执行时序变更为不影响异步任务执行时序\\\"'><a name='\\\"ZH-CN_TOPIC_0000002186301505__%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDlazy-import%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F%E5%8F%98%E6%9B%B4%E4%B8%BA%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F\\\"'></a><a name='\\\"%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDlazy-import%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F%E5%8F%98%E6%9B%B4%E4%B8%BA%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%97%B6%E5%BA%8F\\\"'></a><h4>[h2]延迟加载（lazy import）影响异步任务执行时序变更为不影响异步任务执行时序</h4><p><strong>变更原因</strong></p> <p>延迟加载（lazy import）特性在测试过程中发现问题，使用lazy import的变量，会改变异步任务的运行时序。</p> <p><strong>变更影响</strong></p> <p>此变更涉及应用适配。</p> <p>变更前： 使用lazy import的变量，会改变异步任务的运行时序。</p> <p>变更后： 使用lazy import的变量，不会改变异步任务的运行时序。</p> <p><strong>起始 API Level</strong></p> <p>12</p> <p><strong>变更的接口/组件</strong></p> <p>不涉及</p> <p><strong>适配指导</strong></p> <p>排查使用lazy import变量的场景，该功能的时序可能会发生改变。</p> <p>例如：</p>  <p>【提示】修改之前，lazy import会影响异步任务的运行时序，该用例的输出为：</p> <pre class='\\\"screen\\\"'>taskTest start\\nasyncFunc start\\nasyncFunc then\\ntaskTest end</pre> <p>修复问题之后，该用例的输出为：</p> <pre class='\\\"screen\\\"'>taskTest start\\nasyncFunc start\\ntaskTest end\\nasyncFunc then</pre> <p>本变更修复该问题，使得lazy import不会影响异步任务运行时序。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-for-all-apps-b123sp16.html"
    },
    {
        "id": 12,
        "pre": "console.log((1 ** NaN).toString())",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]执行幂运算（**）当底数是1，指数是NaN或ToNumber之后是NaN的情况的返回值变更",
        "parent_text": "[h2]执行幂运算（**）当底数是1，指数是NaN或ToNumber之后是NaN的情况的返回值变更变更原因 ArkTS执行幂运算时，当底数为1，指数为NaN或ToNumber之后是NaN,返回值为1，与ECMAScript® 2021 Language Specification描述不符。 变更影响 该变更为不兼容变更。 变更前： 执行幂运算，当底数为1，指数为NaN或ToNumber之后是NaN，返回值为1。 变更后： 执行幂运算，当底数为1，指数为NaN或ToNumber之后是NaN，返回值为NaN。 起始 API Level 6 变更的接口/组件 不涉及 适配指导 排查是否对 **（幂运算）有如下情况的使用 例如：  未变更前该用例输出为： 1 变更后该用例输出为: NaN  对于类似 1 ** \\\"test\\\" 的用法，在ets文件中不能使用，但是可能在三方库中有使用，该行为同样会变化。  本变更修复该问题，** （幂运算）对于底数是1，指数为NaN或ToNumber之后是NaN的情况会返回NaN。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"执行幂运算当底数是1指数是nan或tonumber之后是nan的情况的返回值变更\\\"'><a name='\\\"ZH-CN_TOPIC_0000002186301505__%E6%89%A7%E8%A1%8C%E5%B9%82%E8%BF%90%E7%AE%97%E5%BD%93%E5%BA%95%E6%95%B0%E6%98%AF1%E6%8C%87%E6%95%B0%E6%98%AFnan%E6%88%96tonumber%E4%B9%8B%E5%90%8E%E6%98%AFnan%E7%9A%84%E6%83%85%E5%86%B5%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%8F%98%E6%9B%B4\\\"'></a><a name='\\\"%E6%89%A7%E8%A1%8C%E5%B9%82%E8%BF%90%E7%AE%97%E5%BD%93%E5%BA%95%E6%95%B0%E6%98%AF1%E6%8C%87%E6%95%B0%E6%98%AFnan%E6%88%96tonumber%E4%B9%8B%E5%90%8E%E6%98%AFnan%E7%9A%84%E6%83%85%E5%86%B5%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%8F%98%E6%9B%B4\\\"'></a><h4>[h2]执行幂运算（**）当底数是1，指数是NaN或ToNumber之后是NaN的情况的返回值变更</h4><p><strong>变更原因</strong></p> <p>ArkTS执行幂运算时，当底数为1，指数为NaN或ToNumber之后是NaN,返回值为1，与<a href='\\\"https://262.ecma-international.org/12.0/index.html#sec-numeric-types-number-exponentiate\\\"' target='\\\"_blank\\\"'>ECMAScript® 2021 Language Specification</a>描述不符。</p> <p><strong>变更影响</strong></p> <p>该变更为不兼容变更。</p> <p>变更前： 执行幂运算，当底数为1，指数为NaN或ToNumber之后是NaN，返回值为1。</p> <p>变更后： 执行幂运算，当底数为1，指数为NaN或ToNumber之后是NaN，返回值为NaN。</p> <p><strong>起始 API Level</strong></p> <p>6</p> <p><strong>变更的接口/组件</strong></p> <p>不涉及</p> <p><strong>适配指导</strong></p> <p>排查是否对 **（幂运算）有如下情况的使用</p> <p>例如：</p>  <p>未变更前该用例输出为：</p> <pre class='\\\"screen\\\"'>1</pre> <p>变更后该用例输出为:</p> <pre class='\\\"screen\\\"'>NaN</pre> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182009.24760365898613647136640855062426:50001231000000:2800:60A38AC5BFD4D9D9E8E458FE942F54A3CE8253C7C0F0FBC9982A03BA40A49511.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>对于类似 1 ** \\\"test\\\" 的用法，在ets文件中不能使用，但是可能在三方库中有使用，该行为同样会变化。</p> </div></div> <p>本变更修复该问题，** （幂运算）对于底数是1，指数为NaN或ToNumber之后是NaN的情况会返回NaN。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-for-all-apps-b123sp16.html"
    },
    {
        "id": 13,
        "pre": "console.log(\\\"abcde\\\".lastIndexOf(\\\"\\\"))",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]String.prototype.lastIndexOf 接口查找空字符串行为变更",
        "parent_text": "[h2]String.prototype.lastIndexOf 接口查找空字符串行为变更变更原因 String.prototype.lastIndexOf 接口查找空字符串时返回值为-1，与ECMAScript® 2021 Language Specification描述不符。 变更影响 该变更为不兼容变更。 变更前：String.prototype.lastIndexOf接口查找字符串为空时返回值为-1。 变更后：String.prototype.lastIndexOf接口查找字符串为空时返回值为最后一个字符的位置加1。 起始 API Level 6 变更的接口/组件 String.prototype.lastIndexOf 适配指导 排查是否有使用 String.prototype.lastIndexOf 接口查找空字符串的场景。 例如：  未变更前该用例输出为： -1 变更后该用例输出为: 5 本变更修复该问题，String.prototype.lastIndexOf 查找空串的结果是最后一个字符的位置加1。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"stringprototypelastindexof-接口查找空字符串行为变更\\\"'><a name='\\\"ZH-CN_TOPIC_0000002186301505__stringprototypelastindexof-%E6%8E%A5%E5%8F%A3%E6%9F%A5%E6%89%BE%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4\\\"'></a><a name='\\\"stringprototypelastindexof-%E6%8E%A5%E5%8F%A3%E6%9F%A5%E6%89%BE%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%8C%E4%B8%BA%E5%8F%98%E6%9B%B4\\\"'></a><h4>[h2]String.prototype.lastIndexOf 接口查找空字符串行为变更</h4><p><strong>变更原因</strong></p> <p>String.prototype.lastIndexOf 接口查找空字符串时返回值为-1，与<a href='\\\"https://262.ecma-international.org/12.0/index.html#sec-string.prototype.lastindexof\\\"' target='\\\"_blank\\\"'>ECMAScript® 2021 Language Specification</a>描述不符。</p> <p><strong>变更影响</strong></p> <p>该变更为不兼容变更。</p> <p>变更前：String.prototype.lastIndexOf接口查找字符串为空时返回值为-1。</p> <p>变更后：String.prototype.lastIndexOf接口查找字符串为空时返回值为最后一个字符的位置加1。</p> <p><strong>起始 API Level</strong></p> <p>6</p> <p><strong>变更的接口/组件</strong></p> <p>String.prototype.lastIndexOf</p> <p><strong>适配指导</strong></p> <p>排查是否有使用 String.prototype.lastIndexOf 接口查找空字符串的场景。</p> <p>例如：</p>  <p>未变更前该用例输出为：</p> <pre class='\\\"screen\\\"'>-1</pre> <p>变更后该用例输出为:</p> <pre class='\\\"screen\\\"'>5</pre> <p>本变更修复该问题，String.prototype.lastIndexOf 查找空串的结果是最后一个字符的位置加1。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-for-all-apps-b123sp16.html"
    },
    {
        "id": 14,
        "pre": "const myIcon: NavigationMenuItem = { value: \\\"图标\\\", icon: \\\"https://example.png\\\"}\\nconst myString: string = myIcon.value",
        "type": "Reference",
        "function_call": "nNavDestination()",
        "function_name": "[h2]Navigation、NavDestination的title和menus接口支持Resource类型资源",
        "parent_text": "[h2]Navigation、NavDestination的title和menus接口支持Resource类型资源变更原因 基础能力增强，Navigation、navdestination的title和menus接口支持Resource类型。 变更影响 由于NavigationMenuItem变量类型变更为 string | Resource，不再与单一变量类型string相匹配，因此将NavigationMenuItem赋值给一个string类型变量，程序会编译报错。  起始API Level 9 变更的接口/组件 Navigation/NavDestination 适配指导 // navigation.ets\\n// 使用resource类型资源赋值给Navigation/NavDestination的title及menu接口\\nNavigation() {\\n    // xxx\\n}\\n.title($r('app.string.MyTestNavigationTitle'))  // 可直接将resource类型资源传递给title接口\\n// menus内的item设置可直接支持resource类型资源\\n.menus([\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue1\\\"),\\n    icon: $r(\\\"app.media.1\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue2\\\"),\\n    icon: $r(\\\"app.media.2\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue3\\\"),\\n    icon: $r(\\\"app.media.3\\\")\\n  }\\n]) // navDestination.ets\\n// Navigation及NavDestination的CommonTitle类型，支持设置resource资源\\n@State commonTitle: NavDestinationCommonTitle = { main: $r('app.string.MyTestNavigationTitle'), sub: $r('app.string.MyTestNavigationTitle')}\\nNavDestination() {\\n    // xxx\\n}\\n.menus([\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue1\\\"),\\n    icon: $r(\\\"app.media.4\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue2\\\"),\\n    icon: $r(\\\"app.media.5\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue3\\\"),\\n    icon: $r(\\\"app.media.6\\\")\\n  }\\n])\\n.title(this.commonTitle) ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"navigationnavdestination的title和menus接口支持resource类型资源\\\"'><a name='\\\"ZH-CN_TOPIC_0000002186301505__navigationnavdestination%E7%9A%84title%E5%92%8Cmenus%E6%8E%A5%E5%8F%A3%E6%94%AF%E6%8C%81resource%E7%B1%BB%E5%9E%8B%E8%B5%84%E6%BA%90\\\"'></a><a name='\\\"navigationnavdestination%E7%9A%84title%E5%92%8Cmenus%E6%8E%A5%E5%8F%A3%E6%94%AF%E6%8C%81resource%E7%B1%BB%E5%9E%8B%E8%B5%84%E6%BA%90\\\"'></a><h4>[h2]Navigation、NavDestination的title和menus接口支持Resource类型资源</h4><p><strong>变更原因</strong></p> <p>基础能力增强，Navigation、navdestination的title和menus接口支持Resource类型。</p> <p><strong>变更影响</strong></p> <p>由于NavigationMenuItem变量类型变更为 string | Resource，不再与单一变量类型string相匹配，因此将NavigationMenuItem赋值给一个string类型变量，程序会编译报错。</p>  <p><strong>起始API Level</strong></p> <p>9</p> <p><strong>变更的接口/组件</strong></p> <p>Navigation/NavDestination</p> <p><strong>适配指导</strong></p> <pre class='\\\"ts\\\"'>// navigation.ets\\n// 使用resource类型资源赋值给Navigation/NavDestination的title及menu接口\\nNavigation() {\\n    // xxx\\n}\\n.title($r('app.string.MyTestNavigationTitle'))  // 可直接将resource类型资源传递给title接口\\n// menus内的item设置可直接支持resource类型资源\\n.menus([\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue1\\\"),\\n    icon: $r(\\\"app.media.1\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue2\\\"),\\n    icon: $r(\\\"app.media.2\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue3\\\"),\\n    icon: $r(\\\"app.media.3\\\")\\n  }\\n])</pre> <pre class='\\\"ts\\\"'>// navDestination.ets\\n// Navigation及NavDestination的CommonTitle类型，支持设置resource资源\\n@State commonTitle: NavDestinationCommonTitle = { main: $r('app.string.MyTestNavigationTitle'), sub: $r('app.string.MyTestNavigationTitle')}\\nNavDestination() {\\n    // xxx\\n}\\n.menus([\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue1\\\"),\\n    icon: $r(\\\"app.media.4\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue2\\\"),\\n    icon: $r(\\\"app.media.5\\\")\\n  },\\n  {\\n    value: $r(\\\"app.string.MyTestMenuValue3\\\"),\\n    icon: $r(\\\"app.media.6\\\")\\n  }\\n])\\n.title(this.commonTitle)</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/changelogs-for-all-apps-b123sp16.html"
    },
    {
        "id": 15,
        "pre": "async onRun() {\\n    ...\\n    abilityDelegator.startAbility(want, (err: BusinessError, data: void) => {\\n      hilog.info(0x0000, tag, 'startAbility : err : %{public}s', JSON.stringify(err) ?? '');\\n      hilog.info(0x0000, tag, 'startAbility : data : %{public}s', JSON.stringify(data) ?? '');\\n    })\\n    ...\\n}",
        "type": "Reference",
        "function_call": "function attachAbility(bundleName: string)",
        "function_name": "[h2]OpenHarmonyTestRunner.ets文件onRun接口内容变更",
        "parent_text": "[h2]OpenHarmonyTestRunner.ets文件onRun接口内容变更变更原因 受startAbility锁屏时限制拉起行为影响，测试框架原先调用abilityDelegator.startAbility接口拉起的TestAbility应用无法在锁屏状态下拉起，需要对工程进行适配。 变更影响 此变更涉及应用适配。 变更前：锁屏时可调用abilityDelegator.startAbility接口正常拉起TestAbility应用并正常保持应用窗口为前台状态，可以正常测试。 变更后：锁屏时调用abilityDelegator.startAbility接口拉起TestAbility应用时，当应用窗口到前台状态时会被窗口管理阻止进而关闭窗口和应用，无法正常测试。 起始API Level 6 适配指导 对于DevEco Studio NEXT Developer Beta1（5.0.3.403）之前版本创建的历史工程，在使用了版本配套的新镜像（NEXT.0.0.71）后，如果遇到测试框架没有正确测试结果返回或者运行异常的问题，可以尝试将“模块名称/src/ohosTest/ets/testrunner/OpenHarmonyTestRunner.ets”文件的以下代码：  修改为： // 新增全局变量\\nconst UNLOCK_ERROR = -3; // 替换函数\\nasync onRun() {\\n    ...\\n    await startAbility(bundleName, testAbilityName);\\n    ...\\n} // 新增函数实现\\nasync function startAbility(bundleName: string, abilityName: string) {\\n  await abilityDelegator.executeShellCommand(`aa start -b ${bundleName} -a ${abilityName}`).then(result => {\\n    if (result.stdResult.includes(\\\"error: unlock screen failed in developer mode\\\")) {\\n      hilog.info(0x0000, tag, '%{public}s', `startAbility failed ${result.stdResult}`);\\n      abilityDelegator.finishTest(\\\"\\\", UNLOCK_ERROR, () => {});\\n      return;\\n    }\\n    attachAbility(bundleName);\\n  }).catch((err: string) => {\\n    hilog.info(0x0000, tag, '%{public}s', `startAbility error: ${err}`);\\n  })\\n}\\n \\nasync function attachAbility(bundleName: string) {\\n  await abilityDelegator.executeShellCommand(`aa attach -b ${bundleName}`).then(result => {\\n    hilog.info(0x0000, tag, '%{public}s', `attachAbility ${result.stdResult}`);\\n  }).catch((err: string) => {\\n    hilog.error(0x0000, tag, `%{public}s`, `attachAbility error: ${err}`);\\n  })\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section85491123321\\\"'><a name='\\\"section85491123321\\\"'></a><a name='\\\"section85491123321\\\"'></a><h4>[h2]OpenHarmonyTestRunner.ets文件onRun接口内容变更</h4><p><strong>变更原因</strong></p> <p>受<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-releases/changelogs-for-all-apps-b071#startabilityopenlink锁屏时限制拉起行\\\"'>startAbility锁屏时限制拉起行为</a>影响，测试框架原先调用abilityDelegator.startAbility接口拉起的TestAbility应用无法在锁屏状态下拉起，需要对工程进行适配。</p> <p><strong>变更影响</strong></p> <p>此变更涉及应用适配。</p> <p>变更前：锁屏时可调用abilityDelegator.startAbility接口正常拉起TestAbility应用并正常保持应用窗口为前台状态，可以正常测试。</p> <p>变更后：锁屏时调用abilityDelegator.startAbility接口拉起TestAbility应用时，当应用窗口到前台状态时会被窗口管理阻止进而关闭窗口和应用，无法正常测试。</p> <p><strong>起始API Level</strong></p> <p>6</p> <p><strong>适配指导</strong></p> <p>对于DevEco Studio NEXT Developer Beta1（5.0.3.403）之前版本创建的历史工程，在使用了版本配套的新镜像（NEXT.0.0.71）后，如果遇到测试框架没有正确测试结果返回或者运行异常的问题，可以尝试将“模块名称/src/ohosTest/ets/testrunner/OpenHarmonyTestRunner.ets”文件的以下代码：</p>  <p>修改为：</p> <pre class='\\\"screen\\\"'>// 新增全局变量\\nconst UNLOCK_ERROR = -3;</pre> <pre class='\\\"screen\\\"'>// 替换函数\\nasync onRun() {\\n    ...\\n    await startAbility(bundleName, testAbilityName);\\n    ...\\n}</pre> <pre class='\\\"screen\\\"'>// 新增函数实现\\nasync function startAbility(bundleName: string, abilityName: string) {\\n  await abilityDelegator.executeShellCommand(`aa start -b ${bundleName} -a ${abilityName}`).then(result =&gt; {\\n    if (result.stdResult.includes(\\\"error: unlock screen failed in developer mode\\\")) {\\n      hilog.info(0x0000, tag, '%{public}s', `startAbility failed ${result.stdResult}`);\\n      abilityDelegator.finishTest(\\\"\\\", UNLOCK_ERROR, () =&gt; {});\\n      return;\\n    }\\n    attachAbility(bundleName);\\n  }).catch((err: string) =&gt; {\\n    hilog.info(0x0000, tag, '%{public}s', `startAbility error: ${err}`);\\n  })\\n}\\n \\nasync function attachAbility(bundleName: string) {\\n  await abilityDelegator.executeShellCommand(`aa attach -b ${bundleName}`).then(result =&gt; {\\n    hilog.info(0x0000, tag, '%{public}s', `attachAbility ${result.stdResult}`);\\n  }).catch((err: string) =&gt; {\\n    hilog.error(0x0000, tag, `%{public}s`, `attachAbility error: ${err}`);\\n  })\\n}</pre> <p><span><img originheight='\\\"698\\\"' originwidth='\\\"1414\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250401182018.64013429193540978273524216005543:50001231000000:2800:10944284E7E790449761B517BA13E4B17079956859B9B23F53395A12E7C30FFE.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-releases/ide-changelogs-release.html"
    }
]
