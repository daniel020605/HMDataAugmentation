[
    {
        "id": 1,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/brace-style\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_brace-style.html"
    },
    {
        "id": 2,
        "pre": "function foo(): boolean {\\n  return true;\\n}\\n\\nclass C {\\n  static {\\n    foo();\\n  }\\n\\n  public meth() {\\n    foo();\\n  }\\n}\\n\\nexport { C };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_brace-style.html"
    },
    {
        "id": 3,
        "pre": "function foo(): boolean \\n{\\n  return true;\\n}\\n\\nclass C {\\n  static \\n  {\\n    foo();\\n  }\\n\\n  public meth() \\n  {\\n    foo();\\n  }\\n}\\n\\nexport { C };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_brace-style.html"
    },
    {
        "id": 4,
        "pre": "\\\"module\\\": {\\n  \\\"name\\\": \\\"entry\\\",\\n  \\\"type\\\": \\\"xxx\\\",\\n  \\\"description\\\": \\\"xxxx\\\",\\n  \\\"mainElement\\\": \\\"xxxx\\\",\\n  \\\"deviceTypes\\\": [],\\n  \\\"pages\\\": \\\"xxxx\\\",\\n  \\\"abilities\\\": [],\\n  \\\"metadata\\\": [ // 配置如下信息\\n    {\\n      \\\"name\\\": \\\"client_id\\\",\\n      \\\"value\\\": \\\"xxxxxx\\\"  // 配置为前面步骤中获取的Client ID\\n    },\\n    {\\n      \\\"name\\\": \\\"app_id\\\",\\n      \\\"value\\\": \\\"xxxxxx\\\"  // 配置为前面步骤中获取的APP ID\\n    }\\n  ],\\n  \\\"requestPermissions\\\": [   // 配置网络权限\\n    {\\n        \\\"name\\\": \\\"ohos.permission.INTERNET\\\"\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程的entry模块module.json5文件中，新增metadata并配置client_id和app_id，同时新增requestPermissions并配置网络权限。如下所示：",
        "import_module": null,
        "parent": "<li>在工程的entry模块module.json5文件中，新增metadata并配置client_id和app_id，同时新增requestPermissions并配置网络权限。如下所示：</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-config-agc.html"
    },
    {
        "id": 5,
        "pre": "hvigorw --mode module -p module={moduleName@productName} -p product={productName} -p buildMode=test -p ohos-test-coverage=true -p coverage-mode=black assembleHap --parallel --incremental --daemon",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "执行hvigor插桩编译命令，编译后在{projectPath}/{moduleName}/.test/default/intermediates/ohosTest路径下会生成init_coverage.json文件，供后续生成覆盖率报告使用。 moduleName：执行测试的模块。productName：当前生效的product，可以通过点击DevEco Studio右上方图标进行查看。 ",
        "import_module": null,
        "parent": "<li id='\\\"li15441012153518\\\"'><span>执行hvigor插桩编译命令，编译后在{projectPath}/{moduleName}/.test/default/intermediates/ohosTest路径下会生成init_coverage.json文件，供后续生成覆盖率报告使用。</span><p></p> <ul id='\\\"ZH-CN_TOPIC_0000002166808084__ul14441312113517\\\"'><li id='\\\"li16312121155411\\\"'>moduleName：执行测试的模块。</li><li id='\\\"li13441111219355\\\"'>productName：当前生效的product，可以通过点击DevEco Studio右上方<span><img originheight='\\\"14\\\"' originwidth='\\\"15\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180610.19579703960340050802338014828552:50001231000000:2800:B3E974AFA5D251376D600C623A379B4C52C81DAF13D163C446B60CD40A8EBCFC.png\\\"'/></span>图标进行查看。</li></ul> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ui-test.html"
    },
    {
        "id": 6,
        "pre": "import { window } from '@kit.ArkUI';  // +0  方法外不统计\\nlet filePath :string;               // +0  方法外不统计\\nconst fileName = 'a.txt';          // +0  方法外不统计\\n \\nexport function doTheThing ()  // +1\\n{                              // +1\\n  let s1: string;              // +1\\n  const str = 'aaa';           // +1\\n  console.log(str);            // +1\\n}                              // +0\\n \\nexport class Person {         // +0  方法外不统计\\n  name: string = ''           // +0  方法外不统计\\n  constructor (n:string) {    // +1 构造函数\\n    this.name = n;            // +1\\n  }                           // +0\\n \\n  static sayHello () {        // +1  类静态方法\\n    console.log('hello');     // +1\\n  }                           // +0\\n \\n  walk () {                   // +1  类实例方法\\n    for (                     // +1              \\n      let i=0;                // +1\\n      i < 10;                 // +1\\n      i++)                    // +1\\n    {                         // +1\\n    }                         // +0\\n  }                           // +0\\n}                             // +0\\n\\nfunction func ():object {    // +1\\n  return Object({        // +1      一个语句被拆分为多行\\n    a: 1,                // +1\\n    b: 2,                // +1\\n  })                     // +0\\n}                        // +0\\n \\nfunc();                  // +0  方法外不统计\\n \\nfunction foo(n:number, m:number){}   // +1\\n\\nfunction bar():number {              // +1\\n  return 1;                          // +1\\n}\\n\\nfoo(1, bar());                       // +0  方法外不统计",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "对于DevEco Studio的覆盖率测试引擎来说，只会统计方法内的语句，方法外的语句都不会被统计覆盖率。方法内，如果某行存在可执行代码，则这一整行会被视为可执行代码行（+1）。方法内，如果某行只包含标点符号{，会被视为可执行行（+1）。方法内，如果某行只包含标点符号}、}) 或 }); ，会被视为非可执行行（+0）。 示例如下：  ",
        "import_module": null,
        "parent": "<li id='\\\"li162582963112\\\"'>对于DevEco Studio的覆盖率测试引擎来说，只会统计方法内的语句，方法外的语句都不会被统计覆盖率。<ul id='\\\"ZH-CN_TOPIC_0000002166808084__ul117781405544\\\"'><li id='\\\"li197781740155416\\\"'>方法内，如果某行存在可执行代码，则这一整行会被视为可执行代码行（+1）。</li><li id='\\\"li1283415416227\\\"'>方法内，如果某行只包含标点符号<strong>{</strong>，会被视为可执行行（+1）。</li><li id='\\\"li177781409543\\\"'>方法内，如果某行只包含标点符号<strong>}</strong>、<strong>}) </strong>或<strong> </strong><strong>});</strong> ，会被视为非可执行行（+0）。</li></ul> <p id='\\\"ZH-CN_TOPIC_0000002166808084__p67781040175410\\\"'>示例如下：</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ui-test.html"
    },
    {
        "id": 7,
        "pre": "import { securityAudit } from '@kit.DeviceSecurityKit';\\nimport { BusinessError} from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { common} from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Device Security Kit模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Device Security Kit模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-selectfraudcalllog.html"
    },
    {
        "id": 8,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/array-type\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_array-type.html"
    },
    {
        "id": 9,
        "pre": "const x: string[] = ['a', 'b'];\\nconst y: readonly string[] = ['a', 'b'];\\n\\nexport { x, y };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_array-type.html"
    },
    {
        "id": 10,
        "pre": "const x: Array<string> = ['a', 'b'];\\nconst y: ReadonlyArray<string> = ['a', 'b'];\\n\\nexport { x, y };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_array-type.html"
    },
    {
        "id": 11,
        "pre": "import { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nasync queryAll() {\\n  try {\\n    let resultArray = await databaseZone.query(condition);\\n    hilog.info(0x0000, 'testTag', `Succeeded in querying data, result: ${JSON.stringify(resultArray)}`);\\n  } catch (err) {\\n    hilog.error(0x0000, 'testTag', `Failed to query data, code: ${err.code}, message: ${err.message}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "查询对象类型BookInfo的所有数据。     后续hilog都需要从@kit.PerformanceAnalysisKit中引入，将不在示例代码中呈现。  ",
        "import_module": null,
        "parent": "<li>查询对象类型BookInfo的所有数据。 <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120100.60144268397331733805010746348755:50001231000000:2800:EE6A7739BC3E0C275FDDD4F72760873D886BCE3A6B07BE5202EB35AD9651FDC9.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>后续hilog都需要从@kit.PerformanceAnalysisKit中引入，将不在示例代码中呈现。</p> </div> </div></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-database-query.html"
    },
    {
        "id": 12,
        "pre": "condition.contains('bookName', '数据库')\\n         .greaterThan('price', 20.0)\\n         .and()\\n         .lessThan('price', 50.0);\\nlet resultArray = await databaseZone.query(condition);",
        "type": "Reference",
        "function_call": "query()",
        "function_name": null,
        "parent_text": "构造查询条件，并调用query()方法，查询“bookName”包含“数据库”，“price”大于20.0并且小于50.0的书籍。",
        "import_module": null,
        "parent": "<li>构造查询条件，并调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-clouddatabase#section390417613213\\\"' target='\\\"_blank\\\"'>query()</a>方法，查询“bookName”包含“数据库”，“price”大于20.0并且小于50.0的书籍。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-database-query.html"
    },
    {
        "id": 13,
        "pre": "condition.lessThan('price', 50.0)\\n         .orderByDesc('price');\\nlet resultArray = await databaseZone.query(condition);",
        "type": "Reference",
        "function_call": "orderByDesc()",
        "function_name": "数据排序",
        "parent_text": "  数据排序 开发者可以通过orderByAsc()或者orderByDesc()实现对查询结果集中的对象按某个字段进行升序或者降序排列，排序谓词需要在其它查询谓词之后且在限定数据查询数量谓词之前。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section73561349102520\\\"'> <a name='\\\"section73561349102520\\\"'></a><a name='\\\"section73561349102520\\\"'></a> <h4>数据排序</h4> <p>开发者可以通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-clouddatabase#section0344144315513\\\"' target='\\\"_blank\\\"'>orderByAsc()</a>或者<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-clouddatabase#section1754544435111\\\"' target='\\\"_blank\\\"'>orderByDesc()</a>实现对查询结果集中的对象按某个字段进行升序或者降序排列，排序谓词需要在其它查询谓词之后且在限定数据查询数量谓词之前。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-database-query.html"
    },
    {
        "id": 14,
        "pre": "condition.lessThan('price', 50.0)\\n         .limit(10);\\nlet resultArray = await databaseZone.query(condition);",
        "type": "Reference",
        "function_call": "query()",
        "function_name": null,
        "parent_text": "构造查询条件，并调用query()方法，查询所有价格小于50.0的书籍，并且只显示最开始10条记录。",
        "import_module": null,
        "parent": "<li>构造查询条件，并调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-clouddatabase#section390417613213\\\"' target='\\\"_blank\\\"'>query()</a>方法，查询所有价格小于50.0的书籍，并且只显示最开始10条记录。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-database-query.html"
    },
    {
        "id": 15,
        "pre": "async calculateQuery() {\\n  try {\\n    condition.lessThan('price', 50.0);\\n    let resultNum = await databaseZone.calculateQuery(condition, 'price', cloudDatabase.QueryCalculate.AVERAGE);\\n    hilog.info(0x0000, 'testTag', `Succeeded in calculating queried data, result: ${JSON.stringify(resultNum)}`);\\n  } catch (err) {\\n    hilog.error(0x0000, 'testTag', `Failed to calculate queried data, code: ${err.code}, message: ${err.message}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": "calculateQuery()",
        "function_name": "对查询结果进行算数计算",
        "parent_text": "  对查询结果进行算数计算 在查询数据时，可以通过calculateQuery()对查询结果对象中的某个字段进行算术计算并返回计算的结果。 构造查询条件，并调用calculateQuery()方法，查询所有价格小与50.0的书籍，并且计算所有书籍价格的平均值。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1751320231296\\\"'> <a name='\\\"section1751320231296\\\"'></a><a name='\\\"section1751320231296\\\"'></a> <h4>对查询结果进行算数计算</h4> <p>在查询数据时，可以通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-clouddatabase#section1248132432017\\\"' target='\\\"_blank\\\"'>calculateQuery()</a>对查询结果对象中的某个字段进行算术计算并返回计算的结果。</p> <p>构造查询条件，并调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-clouddatabase#section1248132432017\\\"' target='\\\"_blank\\\"'>calculateQuery()</a>方法，查询所有价格小与50.0的书籍，并且计算所有书籍价格的平均值。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-database-query.html"
    },
    {
        "id": 16,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unsafe-return\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-return.html"
    },
    {
        "id": 17,
        "pre": "export function foo1(): string {\\n  return '1';\\n}\\n\\nexport function foo2(): object {\\n  return Object.create(null) as Record<string, unknown>;\\n}\\n\\nexport const foo3 = (): object[] => [];\\nexport const foo4 = (): string[] => ['a'];\\n\\nexport function assignability1(): Set<string> {\\n  return new Set<string>(['foo']);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-return.html"
    },
    {
        "id": 18,
        "pre": "export function foo1(): string {\\n  return '1' as any;\\n}\\n\\nexport function foo2(): string {\\n  return Object.create(null) as any;\\n}\\n\\nexport const foo3 = (): object[] => [] as any;\\nexport const foo4 = (): string[] => ['a'] as any;\\n\\nexport function assignability1(): Set<string> {\\n  return new Set<string>(['foo']) as any;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-return.html"
    },
    {
        "id": 19,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-polyline.html"
    },
    {
        "id": 20,
        "pre": "let polylineOption: mapCommon.MapPolylineOptions = {\\n  points: [{longitude:118.78,latitude:31.975}, {longitude:118.78,latitude:31.982}, {longitude:118.79,latitude:31.985}],\\n  clickable: true,\\n  startCap: mapCommon.CapStyle.BUTT,\\n  endCap: mapCommon.CapStyle.BUTT,\\n  geodesic: false,\\n  jointType: mapCommon.JointType.BEVEL,\\n  visible: true,\\n  width: 10,\\n  zIndex: 10,\\n  // 设置颜色\\n  colors: [0xffffff00, 0xff000000],\\n  gradient: false\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]设置折线分段颜色",
        "parent_text": "  [h2]设置折线分段颜色 方法一：新建折线时在MapPolylineOptions的colors属性中设置折线分段颜色值。  方法二：调用MapPolyline的setColors()方法。 let colors = [0xffffff00, 0xff000000];\\nthis.mapPolyline.setColors(colors);  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section31675819331\\\"'> <a name='\\\"section31675819331\\\"'></a><a name='\\\"section31675819331\\\"'></a> <h4>[h2]设置折线分段颜色</h4> <p>方法一：新建折线时在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section113246334153\\\"' target='\\\"_blank\\\"'>MapPolylineOptions</a>的colors属性中设置折线分段颜色值。</p>  <p>方法二：调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section5201165010417\\\"' target='\\\"_blank\\\"'>MapPolyline</a>的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section205821994815\\\"' target='\\\"_blank\\\"'>setColors</a>()方法。</p> <pre class='\\\"typescript\\\"'>let colors = [0xffffff00, 0xff000000];\\nthis.mapPolyline.setColors(colors);</pre> <p><span><img height='\\\"478.825935\\\"' originheight='\\\"409\\\"' originwidth='\\\"334\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120156.54617475695704525072238226098124:50001231000000:2800:13201D0AE2725432B7D8E11D932CDA8A20ABFF88F4F83FCCE5AB3E383C19930B.png\\\"' title='\\\"点击放大\\\"' width='\\\"391.02000000000004\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-polyline.html"
    },
    {
        "id": 21,
        "pre": "let polylineOption: mapCommon.MapPolylineOptions = {\\n  points: [{longitude:118.78,latitude:31.975}, {longitude:118.78,latitude:31.982}, {longitude:118.79,latitude:31.985}],\\n  clickable: true,\\n  startCap: mapCommon.CapStyle.BUTT,\\n  endCap: mapCommon.CapStyle.BUTT,\\n  geodesic: false,\\n  jointType: mapCommon.JointType.BEVEL,\\n  visible: true,\\n  width: 10,\\n  zIndex: 10,\\n  colors: [0xffffff00, 0xff000000],\\n  // 设置颜色折线可渐变\\n  gradient: true\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]设置折线可渐变",
        "parent_text": "  [h2]设置折线可渐变 方法一：MapPolylineOptions的gradient属性设置为true。  方法二：调用MapPolyline的setGradient()方法。 this.mapPolyline.setGradient(true);  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section129164518330\\\"'> <a name='\\\"section129164518330\\\"'></a><a name='\\\"section129164518330\\\"'></a> <h4>[h2]设置折线可渐变</h4> <p>方法一：<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section113246334153\\\"' target='\\\"_blank\\\"'>MapPolylineOptions</a>的gradient属性设置为true。</p>  <p>方法二：调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section5201165010417\\\"' target='\\\"_blank\\\"'>MapPolyline</a>的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section690415431896\\\"' target='\\\"_blank\\\"'>setGradient</a>()方法。</p> <pre class='\\\"typescript\\\"'>this.mapPolyline.setGradient(true);</pre> <p><span><img height='\\\"463.60102600000005\\\"' originheight='\\\"413\\\"' originwidth='\\\"335\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120156.25577320081932890217627148839675:50001231000000:2800:DAFEB645BB335D966ABA502F012EB14FC8845CB295502222ED63EC94BA46EF83.png\\\"' title='\\\"点击放大\\\"' width='\\\"376.0575\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-polyline.html"
    },
    {
        "id": 22,
        "pre": "let polylineOption: mapCommon.MapPolylineOptions = {\\n  points: [\\n    { latitude: 32.220750, longitude: 118.788765 },\\n    { latitude: 32.120750, longitude: 118.788765 },\\n    { latitude: 32.020750, longitude: 118.788765 },\\n    { latitude: 31.920750, longitude: 118.788765 },\\n    { latitude: 31.820750, longitude: 118.788765 }\\n  ],\\n  clickable: true,\\n  jointType: mapCommon.JointType.DEFAULT,\\n  width: 20,\\n  customTexture: \\\"icon/naviline_arrow.png\\\"\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]绘制纹理",
        "parent_text": "  [h2]绘制纹理 方法一：新建折线时在MapPolylineOptions的customTexture属性设置折线纹理。  方法二：调用MapPolyline的setCustomTexture方法。 await this.mapPolyline.setCustomTexture(\\\"icon/naviline_arrow.png\\\", true);  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section11177142112378\\\"'> <a name='\\\"section11177142112378\\\"'></a><a name='\\\"section11177142112378\\\"'></a> <h4>[h2]绘制纹理</h4> <p>方法一：新建折线时在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section113246334153\\\"' target='\\\"_blank\\\"'>MapPolylineOptions</a>的customTexture属性设置折线纹理。</p>  <p>方法二：调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section5201165010417\\\"' target='\\\"_blank\\\"'>MapPolyline</a>的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section18866126111212\\\"' target='\\\"_blank\\\"'>setCustomTexture</a>方法。</p> <pre class='\\\"typescript\\\"'>await this.mapPolyline.setCustomTexture(\\\"icon/naviline_arrow.png\\\", true);</pre> <p><span><img originheight='\\\"651\\\"' originwidth='\\\"302\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120156.06378676684166889894436166863282:50001231000000:2800:67A84195101DA475736457210C9D1A3C41B9BD81CDF650770359BECCF271623F.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-polyline.html"
    },
    {
        "id": 23,
        "pre": "import { image } from '@kit.ImageKit';\\n\\n// 数组存放图片内容\\nlet customTextures: Array<ResourceStr | image.PixelMap> = new Array();\\ncustomTextures.push('icon/img.png');\\ncustomTextures.push('icon/img_1.png');\\nlet cusIndexNumber: Array<number> = new Array();\\n// cusIndexNumber数组长度与折线点数量必须相同，数组元素内容与customTextures下标相对应，图片从数组第二个元素开始选择\\ncusIndexNumber.push(0, 0, 1);\\n// polyline初始化参数\\nlet polylineOption: mapCommon.MapPolylineOptions = {\\n  points: [\\n    { longitude: 118.78, latitude: 31.975 },\\n    { longitude: 118.78, latitude: 31.982 },\\n    { longitude: 118.79, latitude: 31.985 }],\\n  clickable: true,\\n  startCap: mapCommon.CapStyle.BUTT,\\n  endCap: mapCommon.CapStyle.BUTT,\\n  jointType: mapCommon.JointType.BEVEL,\\n  width: 30,\\n  customTextures: customTextures,\\n  customTextureIndexes: cusIndexNumber\\n};\\nlet mapPolyline = await this.mapController.addPolyline(polylineOption);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]折线设置分段纹理",
        "parent_text": "  [h2]折线设置分段纹理 新建折线时利用在MapPolylineOptions的customTextures和customTextureIndexes属性设置折线分段纹理。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section657871102318\\\"'> <a name='\\\"section657871102318\\\"'></a><a name='\\\"section657871102318\\\"'></a> <h4>[h2]折线设置分段纹理</h4> <p>新建折线时利用在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section113246334153\\\"' target='\\\"_blank\\\"'>MapPolylineOptions</a>的customTextures和customTextureIndexes属性设置折线分段纹理。</p>  <p><span><img height='\\\"662.422726\\\"' originheight='\\\"928\\\"' originwidth='\\\"429\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120156.16603157116562719219696066713359:50001231000000:2800:A1DEAEA202B7BAB417B447841FF262BF81D66462030C64E4063839FAB4FCAE9C.png\\\"' title='\\\"点击放大\\\"' width='\\\"306.2325\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-polyline.html"
    },
    {
        "id": 24,
        "pre": "// 卡证识别开发实例分两页实现，一页为卡证识别入口页，一页为卡证识别实现页\\n// 卡证识别入口页，需引入卡证识别实现页，以下文实例为例，实现页文件名为CardDemoPage\\nimport { CardDemoPage } from './CardDemoPage'\\n\\n@Entry\\n@Component\\nstruct MainPage {\\n  @Provide('pathStack') pathStack: NavPathStack = new NavPathStack()\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'cardRecognition') {\\n      CardDemoPage()\\n    }\\n  }\\n\\n  //卡证识别入口按钮\\n  build() {\\n    Navigation(this.pathStack) {\\n      Button('CardRecognition', { stateEffect: true, type: ButtonType.Capsule })\\n        .width('50%')\\n        .height(40)\\n        .onClick(() => {\\n          this.pathStack.pushPath({ name: 'cardRecognition' })\\n        })\\n    }.title('卡证识别控件demo').navDestination(this.PageMap)\\n    .mode(NavigationMode.Stack)\\n  }\\n}",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "开发实例",
        "parent_text": "开发实例  //卡证识别实现页，文件名为CardDemoPage，需被引入至入口页\\nimport { CardRecognition, CallbackParam, CardType, CardSide, ShootingMode } from \\\"@kit.VisionKit\\\"\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nconst TAG: string = 'CardRecognitionPage'\\n\\n//卡证识别页，用于加载uiExtensionAbility\\n@Entry\\n@Component\\nexport struct CardDemoPage {\\n  @State cardDataSource: Record<string, string>[] = []\\n  @Consume('pathStack') pathStack: NavPathStack\\n\\n  build() {\\n    NavDestination() {\\n      Stack({ alignContent: Alignment.Top }) {\\n        Stack() {\\n          this.cardDataShowBuilder()\\n        }\\n        .width('80%')\\n        .height('80%')\\n\\n        CardRecognition({\\n          // 此处选择身份证类型作为示例\\n          supportType: CardType.CARD_ID,\\n          cardSide: CardSide.DEFAULT,\\n          cardRecognitionConfig: {\\n            defaultShootingMode: ShootingMode.MANUAL,\\n            isPhotoSelectionSupported: true\\n          },\\n          callback: ((params: CallbackParam) => {\\n            hilog.info(0x0001, TAG, `params code: ${params.code}`)\\n            if (params.code === -1) {\\n              this.pathStack.pop()\\n            }\\n            hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\\n            if (params.cardInfo?.front !== undefined) {\\n              this.cardDataSource.push(params.cardInfo?.front)\\n            }\\n\\n            if (params.cardInfo?.back !== undefined) {\\n              this.cardDataSource.push(params.cardInfo?.back)\\n            }\\n\\n            if (params.cardInfo?.main !== undefined) {\\n              this.cardDataSource.push(params.cardInfo?.main)\\n            }\\n            hilog.info(0x0001, TAG, `params cardInfo front: ${JSON.stringify(params.cardInfo?.front)}`)\\n            hilog.info(0x0001, TAG, `params cardInfo back: ${JSON.stringify(params.cardInfo?.back)}`)\\n          })\\n        })\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .hideTitleBar(true)\\n  }\\n\\n  @Builder\\n  cardDataShowBuilder() {\\n    List() {\\n      ForEach(this.cardDataSource, (cardData: Record<string, string>) => {\\n        ListItem() {\\n          Column() {\\n            Image(cardData.cardImageUri)\\n              .objectFit(ImageFit.Contain)\\n              .width(100)\\n              .height(100)\\n\\n            Text(JSON.stringify(cardData))\\n              .width('100%')\\n              .fontSize(12)\\n          }\\n        }\\n      })\\n    }\\n    .listDirection(Axis.Vertical)\\n    .alignListItem(ListItemAlign.Center)\\n    .margin({\\n      top: 50\\n    })\\n    .width('100%')\\n    .height('100%')\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section12918203941611\\\"'><a name='\\\"section12918203941611\\\"'></a><a name='\\\"section12918203941611\\\"'></a><h4>开发实例</h4> <p></p> <pre class='\\\"typescript\\\"'>//卡证识别实现页，文件名为CardDemoPage，需被引入至入口页\\nimport { CardRecognition, CallbackParam, CardType, CardSide, ShootingMode } from \\\"@kit.VisionKit\\\"\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nconst TAG: string = 'CardRecognitionPage'\\n\\n//卡证识别页，用于加载uiExtensionAbility\\n@Entry\\n@Component\\nexport struct CardDemoPage {\\n  @State cardDataSource: Record&lt;string, string&gt;[] = []\\n  @Consume('pathStack') pathStack: NavPathStack\\n\\n  build() {\\n    NavDestination() {\\n      Stack({ alignContent: Alignment.Top }) {\\n        Stack() {\\n          this.cardDataShowBuilder()\\n        }\\n        .width('80%')\\n        .height('80%')\\n\\n        CardRecognition({\\n          // 此处选择身份证类型作为示例\\n          supportType: CardType.CARD_ID,\\n          cardSide: CardSide.DEFAULT,\\n          cardRecognitionConfig: {\\n            defaultShootingMode: ShootingMode.MANUAL,\\n            isPhotoSelectionSupported: true\\n          },\\n          callback: ((params: CallbackParam) =&gt; {\\n            hilog.info(0x0001, TAG, `params code: ${params.code}`)\\n            if (params.code === -1) {\\n              this.pathStack.pop()\\n            }\\n            hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\\n            if (params.cardInfo?.front !== undefined) {\\n              this.cardDataSource.push(params.cardInfo?.front)\\n            }\\n\\n            if (params.cardInfo?.back !== undefined) {\\n              this.cardDataSource.push(params.cardInfo?.back)\\n            }\\n\\n            if (params.cardInfo?.main !== undefined) {\\n              this.cardDataSource.push(params.cardInfo?.main)\\n            }\\n            hilog.info(0x0001, TAG, `params cardInfo front: ${JSON.stringify(params.cardInfo?.front)}`)\\n            hilog.info(0x0001, TAG, `params cardInfo back: ${JSON.stringify(params.cardInfo?.back)}`)\\n          })\\n        })\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .hideTitleBar(true)\\n  }\\n\\n  @Builder\\n  cardDataShowBuilder() {\\n    List() {\\n      ForEach(this.cardDataSource, (cardData: Record&lt;string, string&gt;) =&gt; {\\n        ListItem() {\\n          Column() {\\n            Image(cardData.cardImageUri)\\n              .objectFit(ImageFit.Contain)\\n              .width(100)\\n              .height(100)\\n\\n            Text(JSON.stringify(cardData))\\n              .width('100%')\\n              .fontSize(12)\\n          }\\n        }\\n      })\\n    }\\n    .listDirection(Axis.Vertical)\\n    .alignListItem(ListItemAlign.Center)\\n    .margin({\\n      top: 50\\n    })\\n    .width('100%')\\n    .height('100%')\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/vision-cardrecognition.html"
    },
    {
        "id": 25,
        "pre": "{\\n  \\\"module\\\": {\\n    // ...\\n    \\\"querySchemes\\\": [ \\n      \\\"wallet\\\" \\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      在构建的开发者应用/元服务“entry/src/main/module.json5”文件中添加钱包schemes配置信息，配置内容示例如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      在构建的开发者应用/元服务<span class='\\\"filepath\\\"'>“entry/src/main/module.json5”</span>文件中添加钱包schemes配置信息，配置内容示例如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-digital-cny-pay-preparations.html"
    },
    {
        "id": 26,
        "pre": "import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-button-invoice-title.html"
    },
    {
        "id": 27,
        "pre": "import { mapCommon, map, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-display-order.html"
    },
    {
        "id": 28,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/ban-tslint-comment\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_ban-tslint-comment.html"
    },
    {
        "id": 29,
        "pre": "import { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { systemShare, harmonyShare } from '@kit.ShareKit';\\nimport { fileUri } from '@kit.CoreFileKit';",
        "type": "Reference",
        "function_call": "aboutToAppear(): void",
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 1. 导入相关模块  2. 进入需要分享的页面，注册碰一碰分享事件。当回调触发时，可通过sharableTarget.reject()拒绝本次分享，并提供拒绝的原因。 aboutToAppear(): void {\\n  harmonyShare.on('knockShare', (sharableTarget: harmonyShare.SharableTarget) => {\\n    sharableTarget.reject(harmonyShare.SharableErrorCode.NO_CONTENT_ERROR);\\n  });\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section124773285612\\\"'> <a name='\\\"section124773285612\\\"'></a><a name='\\\"section124773285612\\\"'></a> <h4>开发步骤</h4> <p>1. 导入相关模块</p>  <p>2. 进入需要分享的页面，注册碰一碰分享事件。当回调触发时，可通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/share-harmony-share#section063111381379\\\"' target='\\\"_blank\\\"'>sharableTarget.reject()</a>拒绝本次分享，并提供拒绝的原因。</p> <pre class='\\\"screen\\\"'>aboutToAppear(): void {\\n  harmonyShare.on('knockShare', (sharableTarget: harmonyShare.SharableTarget) =&gt; {\\n    sharableTarget.reject(harmonyShare.SharableErrorCode.NO_CONTENT_ERROR);\\n  });\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/knock-share-reject.html"
    },
    {
        "id": 30,
        "pre": "import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-button-ship-to.html"
    },
    {
        "id": 31,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-loop-func\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-loop-func.html"
    },
    {
        "id": 32,
        "pre": "const a = function(): void {\\n  console.info('hello');\\n};\\n\\nfor (let i = 10; i; i--) {\\n  a();\\n}\\n\\nfor (let i = 10; i; i--) {\\n  const b = function(): void {\\n    a();\\n  }; // OK, no references to variables in the outer scopes.\\n  b();\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-loop-func.html"
    },
    {
        "id": 33,
        "pre": "const num = 10;\\nfor (let i = num; i; i--) {\\n  // 变量i是不安全的引用\\n  (function(): number {\\n    return i;\\n  })();\\n}\\n\\nlet i1 = 0;\\nwhile (i1 < num) {\\n  // 变量i是不安全的引用\\n  const a = function(): number {\\n    return i1;\\n  };\\n  a();\\n\\n  i1++;\\n}\\n\\nlet i2 = 0;\\ndo {\\n  // 变量i是不安全的引用\\n  function a(): number {\\n    return i2;\\n  }\\n  a();\\n\\n  i2++;\\n} while (i2 < num);",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-loop-func.html"
    },
    {
        "id": 34,
        "pre": "import pasteboard from '@ohos.pasteboard';\\nimport { BusinessError } from '@ohos.base';\\n\\nexport async function setPasteDataTest(): Promise<void> {\\n  let text: string = 'hello world';\\n  let pasteData: pasteboard.PasteData = pasteboard.createData(pasteboard.MIMETYPE_TEXT_PLAIN, text);\\n  let systemPasteBoard: pasteboard.SystemPasteboard = pasteboard.getSystemPasteboard();\\n  await systemPasteBoard.setData(pasteData).catch((err: BusinessError) => {\\n    console.error(`Failed to set pastedata. Code: ${err.code}, message: ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "设备A复制数据，写入到剪贴板服务。 ",
        "import_module": null,
        "parent": "<li>设备A复制数据，写入到剪贴板服务。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/distributed-pasteboard-guide.html"
    },
    {
        "id": 35,
        "pre": "import { updateManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport type { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入updateManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入updateManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-update.html"
    },
    {
        "id": 36,
        "pre": "import { updateManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport type { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入updateManager 模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入updateManager 模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-update.html"
    },
    {
        "id": 37,
        "pre": "import { staticMap } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": "import { staticMap } from '@kit.MapKit';",
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-static-diagram.html"
    },
    {
        "id": 38,
        "pre": "export default {  \\n    system: hapTasks,  \\n    config: {  \\n        ohos: {\\n            ...\\n        }    \\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "在hvigorfile.ts中通过overrides关键字导出动态配置",
        "parent_text": "  在hvigorfile.ts中通过overrides关键字导出动态配置 在hvigorfile.ts中，我们约定在导出的对象中的config.ohos属性里接收编译的配置：  目前可以在工程级的hvigorfile.ts的config.ohos中配置的字段：  overrides：定义起覆盖作用的字段的位置，会在构建过程中覆盖原有的对应配置项。        signingConfig：签名配置，对应build-profile.json5里的signingConfig配置项。          type material            certpath storePassword keyAlias keyPassword profile signAlg storeFile   appOpt：对应app.json5里的配置项字段。          bundleName bundleType icon label vendor versionCode versionName    目前可以在模块级的hvigorfile.ts的config.ohos中配置的字段：  overrides：定义起覆盖作用的字段的位置，会在构建过程中覆盖原有的对应配置项。        buildOption：对应build-profile.json5里的buildOption配置项。          arkOptions externalNativeOptions napiLibFilterOption nativeLib resOptions sourceOption    配置在overrides项中的参数，其优先级会高于在配置项中的对应字段。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section19588121902\\\"'> <a name='\\\"section19588121902\\\"'></a><a name='\\\"section19588121902\\\"'></a> <h4>在hvigorfile.ts中通过overrides关键字导出动态配置</h4> <p id='\\\"ZH-CN_TOPIC_0000002166648560__p1975975418\\\"'>在hvigorfile.ts中，我们约定在导出的对象中的config.ohos属性里接收编译的配置：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648560__p1995912110442\\\"'>目前可以在工程级的hvigorfile.ts的config.ohos中配置的字段：</p> <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul79593118442\\\"'> <li id='\\\"li395961174412\\\"'>overrides：定义起覆盖作用的字段的位置，会在构建过程中覆盖原有的对应配置项。       <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul2959117448\\\"'> <li id='\\\"li18960317442\\\"'>signingConfig：签名配置，对应build-profile.json5里的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-profile#table768251311557\\\"'>signingConfig配置项</a>。         <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul139601517443\\\"'> <li id='\\\"li196041114419\\\"'>type</li> <li id='\\\"li89608117446\\\"'>material           <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul496013194410\\\"'> <li id='\\\"li189608111444\\\"'>certpath</li> <li id='\\\"li596019144417\\\"'>storePassword</li> <li id='\\\"li109608118448\\\"'>keyAlias</li> <li id='\\\"li196018144414\\\"'>keyPassword</li> <li id='\\\"li1196016113448\\\"'>profile</li> <li id='\\\"li1196001154418\\\"'>signAlg</li> <li id='\\\"li1896041104410\\\"'>storeFile</li> </ul></li> </ul></li> <li id='\\\"li12960319440\\\"'>appOpt：对应<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-configuration-file\\\"' target='\\\"_blank\\\"'>app.json5</a>里的配置项字段。         <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul8960131154415\\\"'> <li id='\\\"li12960012443\\\"'>bundleName</li> <li id='\\\"li6960111104415\\\"'>bundleType</li> <li id='\\\"li199601614444\\\"'>icon</li> <li id='\\\"li6960161154419\\\"'>label</li> <li id='\\\"li09609124419\\\"'>vendor</li> <li id='\\\"li596010114418\\\"'>versionCode</li> <li id='\\\"li5960117442\\\"'>versionName</li> </ul></li> </ul></li> </ul> <p id='\\\"ZH-CN_TOPIC_0000002166648560__p1396031134412\\\"'>目前可以在模块级的hvigorfile.ts的config.ohos中配置的字段：</p> <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul18100185711446\\\"'> <li id='\\\"li7198811174514\\\"'>overrides：定义起覆盖作用的字段的位置，会在构建过程中覆盖原有的对应配置项。       <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul8695811154512\\\"'> <li id='\\\"li19101125719446\\\"'>buildOption：对应build-profile.json5里的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-profile#table146954413148\\\"'>buildOption配置项</a>。         <ul id='\\\"ZH-CN_TOPIC_0000002166648560__ul15033434516\\\"'> <li id='\\\"li154516317459\\\"'>arkOptions</li> <li id='\\\"li24512031144515\\\"'>externalNativeOptions</li> <li id='\\\"li6451631194518\\\"'>napiLibFilterOption</li> <li id='\\\"li6452163114510\\\"'>nativeLib</li> <li id='\\\"li8452631174514\\\"'>resOptions</li> <li id='\\\"li9452731184517\\\"'>sourceOption</li> </ul></li> </ul></li> </ul> <p id='\\\"ZH-CN_TOPIC_0000002166648560__p29624154420\\\"'>配置在overrides项中的参数，其优先级会高于在配置项中的对应字段。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-config-ohos-guide.html"
    },
    {
        "id": 39,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/color-value\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_color-value.html"
    },
    {
        "id": 40,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    RelativeContainer() {\\n      // 通过'sys.color.xxx'引用的颜色值，默认支持dark和light颜色模式\\n      Text()\\n        .fontColor($r('sys.color.ohos_id_color_activated'));\\n      // 通过'app.color.xxx'引用的颜色值，需要分别在dark和light颜色模式的color.json中配置\\n      Text()\\n        .fontColor($r('app.color.text_color'));\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_color-value.html"
    },
    {
        "id": 41,
        "pre": "@Entry\\n@Component\\nstruct Index1 {\\n  build() {\\n    RelativeContainer() {\\n      Text('message').fontColor('#000000')\\n      Text('message').fontColor('rgb(0, 0, 0)')\\n      Text('message').fontColor(Color.Black)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_color-value.html"
    },
    {
        "id": 42,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-regexp-exec\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-regexp-exec.html"
    },
    {
        "id": 43,
        "pre": "SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\\nSET(CMAKE_INSTALL_RPATH \\\"\\\\${ORIGIN}/module\\\")",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]rpath机制",
        "parent_text": "  [h2]rpath机制 rpath（run-time path）是在运行时指定共享库搜索路径的机制。该机制允许在可执行文件或共享库中嵌入一个用于在运行时指定库的搜索路径的信息。 由于上文介绍的命名空间隔离机制，应用仅允许加载对应安装目录拼接native库路径下（例如arm64平台上为libs/arm64）的应用native库，当应用程序涉及加载较多的native库，期望创建多个native库加载路径方便管理，但是会导致无法加载新创建目录下的native库，这种情况可以通过rpath机制编译时指定搜索路径。 例如，应用安装目录lib/arm64下的libhello.so依赖新创建路径lib/arm64/module下的libworld.so，那么在应用的CMakeList.txt里设置上rpath编译选项后编译，使用readelf查看libhello.so的rpath配置如图所示，$ORIGIN为libhello.so所在路径，运行时即可正常加载module目录下的libworld.so。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"rpath机制\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178054000__rpath%E6%9C%BA%E5%88%B6\\\"'></a><a name='\\\"rpath%E6%9C%BA%E5%88%B6\\\"'></a> <h4>[h2]rpath机制</h4> <p>rpath（run-time path）是在运行时指定共享库搜索路径的机制。该机制允许在可执行文件或共享库中嵌入一个用于在运行时指定库的搜索路径的信息。</p> <p>由于上文介绍的命名空间隔离机制，应用仅允许加载对应安装目录拼接native库路径下（例如arm64平台上为libs/arm64）的应用native库，当应用程序涉及加载较多的native库，期望创建多个native库加载路径方便管理，但是会导致无法加载新创建目录下的native库，这种情况可以通过rpath机制编译时指定搜索路径。</p> <p>例如，应用安装目录lib/arm64下的libhello.so依赖新创建路径lib/arm64/module下的libworld.so，那么在应用的CMakeList.txt里设置上rpath编译选项后编译，使用readelf查看libhello.so的rpath配置如图所示，$ORIGIN为libhello.so所在路径，运行时即可正常加载module目录下的libworld.so。</p>  <p><span><img originheight='\\\"80\\\"' originwidth='\\\"582\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115750.80370119961167407484670705800762:50001231000000:2800:B6E7E3CD44182F91AE82B68ECE4DC73A696798CA2C5D4F66143BB1F9D704A0EF.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/c-cpp-overview.html"
    },
    {
        "id": 44,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    this.pdfDocument.loadDocument(filePath);\\n  }\\n\\n  build() {\\n    Column() {\\n      // 插入单个空白页\\n      Button('insertBankPage').onClick(async () => {\\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n        let page2: pdfService.PdfPage = this.pdfDocument.insertBlankPage(2, page.getWidth(), page.getHeight());\\n        let outPdfPath = this.context.filesDir + '/testInsertBankPage.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'insertBankPage %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 插入多个空白页\\n      Button('insertSomeBankPage').onClick(async () => {\\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n        for (let i = 0; i < 3; i++) {\\n          this.pdfDocument.insertBlankPage(2, page.getWidth(), page.getHeight());\\n        }\\n        let outPdfPath = this.context.filesDir + '/testInsertSomeBankPage.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'insertSomeBankPage %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 将input2.pdf文档的索引1,2,3页插入到input.pdf索引0的位置，并另存文档\\n      Button('insertPageFromDocument').onClick(async () => {\\n        let pdfDoc: pdfService.PdfDocument = new pdfService.PdfDocument();\\n        // 确保该沙箱目录下有 input2.pdf文档\\n        pdfDoc.loadDocument(this.context.filesDir + '/input2.pdf');\\n        this.pdfDocument.insertPageFromDocument(pdfDoc, 1, 3, 0);\\n        let outPdfPath = this.context.filesDir + '/testInsertPageFromDocument.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'insertPageFromDocument %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 删除单个或多个索引页\\n      Button('deletePage').onClick(async () => {\\n        this.pdfDocument.deletePage(2, 2);\\n        let outPdfPath = this.context.filesDir + '/testDeletePage.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'deletePage %{public}s!', result ? 'success' : 'fail');\\n      })      \\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法，加载PDF文档。 调用getPage方法获取当前页，用于获取页面宽高。 调用insertBlankPage和insertPageFromDocument方法实现如下功能。        插入单个空白页。 插入多个空白页。 将input2.pdf文档的索引1、2、3页插入到input.pdf索引0的位置，并另存文档。  调用deletePage方法删除单个或多个索引页。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section133241461334\\\"'> <a name='\\\"section133241461334\\\"'></a><a name='\\\"section133241461334\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>调用getPage方法获取当前页，用于获取页面宽高。</li> <li>调用insertBlankPage和insertPageFromDocument方法实现如下功能。       <ol> <li>插入单个空白页。</li> <li>插入多个空白页。</li> <li>将input2.pdf文档的索引1、2、3页插入到input.pdf索引0的位置，并另存文档。</li> </ol></li> <li>调用deletePage方法删除单个或多个索引页。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-add-delete-page.html"
    },
    {
        "id": 45,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/waterflow-data-preload-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-waterflow-data-preload-check.html"
    },
    {
        "id": 46,
        "pre": "// WaterFlowDataSource.ets\\n\\n// 实现IDataSource接口的对象，用于瀑布流组件加载数据\\nexport class WaterFlowDataSource implements IDataSource {\\n  private dataArray: number[] = []\\n  private listeners: DataChangeListener[] = []\\n\\n  constructor() {\\n    for (let i = 0; i < 100; i++) {\\n      this.dataArray.push(i)\\n    }\\n  }\\n\\n  // 获取索引对应的数据\\n  public getData(index: number): number {\\n    return this.dataArray[index]\\n  }\\n\\n  // 通知控制器数据重新加载\\n  notifyDataReload(): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataReloaded()\\n    })\\n  }\\n\\n  // 通知控制器数据增加\\n  notifyDataAdd(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataAdd(index)\\n    })\\n  }\\n\\n  // 通知控制器数据变化\\n  notifyDataChange(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataChange(index)\\n    })\\n  }\\n\\n  // 通知控制器数据删除\\n  notifyDataDelete(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataDelete(index)\\n    })\\n  }\\n\\n  // 通知控制器数据位置变化\\n  notifyDataMove(from: number, to: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataMove(from, to)\\n    })\\n  }\\n\\n  // 获取数据总数\\n  public totalCount(): number {\\n    return this.dataArray.length\\n  }\\n\\n  // 注册改变数据的控制器\\n  registerDataChangeListener(listener: DataChangeListener): void {\\n    if (this.listeners.indexOf(listener) < 0) {\\n      this.listeners.push(listener)\\n    }\\n  }\\n\\n  // 注销改变数据的控制器\\n  unregisterDataChangeListener(listener: DataChangeListener): void {\\n    const pos = this.listeners.indexOf(listener)\\n    if (pos >= 0) {\\n      this.listeners.splice(pos, 1)\\n    }\\n  }\\n\\n  // 增加数据\\n  public add1stItem(): void {\\n    this.dataArray.splice(0, 0, this.dataArray.length)\\n    this.notifyDataAdd(0)\\n  }\\n\\n  // 在数据尾部增加一个元素\\n  public addLastItem(): void {\\n    this.dataArray.splice(this.dataArray.length, 0, this.dataArray.length)\\n    this.notifyDataAdd(this.dataArray.length - 1)\\n  }\\n\\n  // 在指定索引位置增加一个元素\\n  public addItem(index: number): void {\\n    this.dataArray.splice(index, 0, this.dataArray.length)\\n    this.notifyDataAdd(index)\\n  }\\n\\n  // 删除第一个元素\\n  public delete1stItem(): void {\\n    this.dataArray.splice(0, 1)\\n    this.notifyDataDelete(0)\\n  }\\n\\n  // 删除第二个元素\\n  public delete2ndItem(): void {\\n    this.dataArray.splice(1, 1)\\n    this.notifyDataDelete(1)\\n  }\\n\\n  // 删除最后一个元素\\n  public deleteLastItem(): void {\\n    this.dataArray.splice(-1, 1)\\n    this.notifyDataDelete(this.dataArray.length)\\n  }\\n\\n  // 重新加载数据\\n  public reload(): void {\\n    this.dataArray.splice(1, 1)\\n    this.dataArray.splice(3, 2)\\n    this.notifyDataReload()\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "正例",
        "parent_text": "正例下文中WaterFlowDataSource.ets为依赖代码：  下文中Index.ets为正例测试代码，依赖上文中WaterFlowDataSource.ets： // Index.ets\\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\\n\\n@Entry\\n@Component\\nstruct WaterFlowDemo {\\n  @State minSize: number = 80\\n  @State maxSize: number = 180\\n  @State fontSize: number = 24\\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\\n  scroller: Scroller = new Scroller()\\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\\n  private itemWidthArray: number[] = []\\n  private itemHeightArray: number[] = []\\n\\n  // 计算FlowItem宽/高\\n  getSize() {\\n    let ret = Math.floor(Math.random() * this.maxSize)\\n    return (ret > this.minSize ? ret : this.minSize)\\n  }\\n\\n  // 设置FlowItem的宽/高数组\\n  setItemSizeArray() {\\n    for (let i = 0; i < 100; i++) {\\n      this.itemWidthArray.push(this.getSize())\\n      this.itemHeightArray.push(this.getSize())\\n    }\\n  }\\n\\n  aboutToAppear() {\\n    this.setItemSizeArray()\\n  }\\n\\n  @Builder\\n  itemFoot() {\\n    Text(`Footer`)\\n      .fontSize(10)\\n    \\n      .width(50)\\n      .height(50)\\n      .align(Alignment.Center)\\n      .margin({ top: 2 })\\n  }\\n\\n  build() {\\n    Column({ space: 2 }) {\\n      WaterFlow() {\\n        LazyForEach(this.dataSource, (item: number) => {\\n          FlowItem() {\\n            ReusableFlowItem({ item: item })\\n          }\\n          .onAppear(() => {\\n            // 即将触底时提前增加数据，即执行数据预加载\\n            if (item + 20 == this.dataSource.totalCount()) {\\n              for (let i = 0; i < 100; i++) {\\n                this.dataSource.addLastItem()\\n              }\\n            }\\n          })\\n          .width('100%')\\n          .height(this.itemHeightArray[item % 100])\\n          .backgroundColor(this.colors[item % 5])\\n        }, (item: string) => item)\\n      }\\n      .columnsTemplate('1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(5)\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nstruct ReusableFlowItem {\\n  @State item: number = 0\\n\\n  // 从复用缓存中加入到组件树之前调用，可在此处更新组件的状态变量以展示正确的内容\\n  aboutToReuse(params: Record<string, ESObject>) {\\n    this.item = params.item;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('N' + this.item).fontSize(12).height('16')\\n      Image('res/waterFlowTest (' + this.item % 5 + ').jpg')\\n        .objectFit(ImageFit.Fill)\\n        .width('100%')\\n        .layoutWeight(1)\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4><p id='\\\"ZH-CN_TOPIC_0000002166648588__p1721921102716\\\"'>下文中WaterFlowDataSource.ets为依赖代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648588__p202626584181\\\"'>下文中Index.ets为正例测试代码，依赖上文中WaterFlowDataSource.ets：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648588__screen2337144282120\\\"'>// Index.ets\\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\\n\\n@Entry\\n@Component\\nstruct WaterFlowDemo {\\n  @State minSize: number = 80\\n  @State maxSize: number = 180\\n  @State fontSize: number = 24\\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\\n  scroller: Scroller = new Scroller()\\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\\n  private itemWidthArray: number[] = []\\n  private itemHeightArray: number[] = []\\n\\n  // 计算FlowItem宽/高\\n  getSize() {\\n    let ret = Math.floor(Math.random() * this.maxSize)\\n    return (ret &gt; this.minSize ? ret : this.minSize)\\n  }\\n\\n  // 设置FlowItem的宽/高数组\\n  setItemSizeArray() {\\n    for (let i = 0; i &lt; 100; i++) {\\n      this.itemWidthArray.push(this.getSize())\\n      this.itemHeightArray.push(this.getSize())\\n    }\\n  }\\n\\n  aboutToAppear() {\\n    this.setItemSizeArray()\\n  }\\n\\n  @Builder\\n  itemFoot() {\\n    Text(`Footer`)\\n      .fontSize(10)\\n    \\n      .width(50)\\n      .height(50)\\n      .align(Alignment.Center)\\n      .margin({ top: 2 })\\n  }\\n\\n  build() {\\n    Column({ space: 2 }) {\\n      WaterFlow() {\\n        LazyForEach(this.dataSource, (item: number) =&gt; {\\n          FlowItem() {\\n            ReusableFlowItem({ item: item })\\n          }\\n          .onAppear(() =&gt; {\\n            // 即将触底时提前增加数据，即执行数据预加载\\n            if (item + 20 == this.dataSource.totalCount()) {\\n              for (let i = 0; i &lt; 100; i++) {\\n                this.dataSource.addLastItem()\\n              }\\n            }\\n          })\\n          .width('100%')\\n          .height(this.itemHeightArray[item % 100])\\n          .backgroundColor(this.colors[item % 5])\\n        }, (item: string) =&gt; item)\\n      }\\n      .columnsTemplate('1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(5)\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nstruct ReusableFlowItem {\\n  @State item: number = 0\\n\\n  // 从复用缓存中加入到组件树之前调用，可在此处更新组件的状态变量以展示正确的内容\\n  aboutToReuse(params: Record&lt;string, ESObject&gt;) {\\n    this.item = params.item;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('N' + this.item).fontSize(12).height('16')\\n      Image('res/waterFlowTest (' + this.item % 5 + ').jpg')\\n        .objectFit(ImageFit.Fill)\\n        .width('100%')\\n        .layoutWeight(1)\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-waterflow-data-preload-check.html"
    },
    {
        "id": 47,
        "pre": "// WaterFlowDataSource.ets\\n\\n// 实现IDataSource接口的对象，用于瀑布流组件加载数据\\nexport class WaterFlowDataSource implements IDataSource {\\n  private dataArray: number[] = []\\n  private listeners: DataChangeListener[] = []\\n\\n  constructor() {\\n    for (let i = 0; i < 100; i++) {\\n      this.dataArray.push(i)\\n    }\\n  }\\n\\n  // 获取索引对应的数据\\n  public getData(index: number): number {\\n    return this.dataArray[index]\\n  }\\n\\n  // 通知控制器数据重新加载\\n  notifyDataReload(): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataReloaded()\\n    })\\n  }\\n\\n  // 通知控制器数据增加\\n  notifyDataAdd(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataAdd(index)\\n    })\\n  }\\n\\n  // 通知控制器数据变化\\n  notifyDataChange(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataChange(index)\\n    })\\n  }\\n\\n  // 通知控制器数据删除\\n  notifyDataDelete(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataDelete(index)\\n    })\\n  }\\n\\n  // 通知控制器数据位置变化\\n  notifyDataMove(from: number, to: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataMove(from, to)\\n    })\\n  }\\n\\n  // 获取数据总数\\n  public totalCount(): number {\\n    return this.dataArray.length\\n  }\\n\\n  // 注册改变数据的控制器\\n  registerDataChangeListener(listener: DataChangeListener): void {\\n    if (this.listeners.indexOf(listener) < 0) {\\n      this.listeners.push(listener)\\n    }\\n  }\\n\\n  // 注销改变数据的控制器\\n  unregisterDataChangeListener(listener: DataChangeListener): void {\\n    const pos = this.listeners.indexOf(listener)\\n    if (pos >= 0) {\\n      this.listeners.splice(pos, 1)\\n    }\\n  }\\n\\n  // 增加数据\\n  public add1stItem(): void {\\n    this.dataArray.splice(0, 0, this.dataArray.length)\\n    this.notifyDataAdd(0)\\n  }\\n\\n  // 在数据尾部增加一个元素\\n  public addLastItem(): void {\\n    this.dataArray.splice(this.dataArray.length, 0, this.dataArray.length)\\n    this.notifyDataAdd(this.dataArray.length - 1)\\n  }\\n\\n  // 在指定索引位置增加一个元素\\n  public addItem(index: number): void {\\n    this.dataArray.splice(index, 0, this.dataArray.length)\\n    this.notifyDataAdd(index)\\n  }\\n\\n  // 删除第一个元素\\n  public delete1stItem(): void {\\n    this.dataArray.splice(0, 1)\\n    this.notifyDataDelete(0)\\n  }\\n\\n  // 删除第二个元素\\n  public delete2ndItem(): void {\\n    this.dataArray.splice(1, 1)\\n    this.notifyDataDelete(1)\\n  }\\n\\n  // 删除最后一个元素\\n  public deleteLastItem(): void {\\n    this.dataArray.splice(-1, 1)\\n    this.notifyDataDelete(this.dataArray.length)\\n  }\\n\\n  // 重新加载数据\\n  public reload(): void {\\n    this.dataArray.splice(1, 1)\\n    this.dataArray.splice(3, 2)\\n    this.notifyDataReload()\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "反例",
        "parent_text": "反例下文中WaterFlowDataSource.ets为依赖代码：  下文中Index.ets为反例测试代码，依赖上文中WaterFlowDataSource.ets： // Index.ets\\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\\n\\n@Entry\\n@Component\\nstruct WaterFlowDemo {\\n  @State minSize: number = 80\\n  @State maxSize: number = 180\\n  @State fontSize: number = 24\\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\\n  scroller: Scroller = new Scroller()\\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\\n  private itemWidthArray: number[] = []\\n  private itemHeightArray: number[] = []\\n\\n  // 计算FlowItem宽/高\\n  getSize() {\\n    let ret = Math.floor(Math.random() * this.maxSize)\\n    return (ret > this.minSize ? ret : this.minSize)\\n  }\\n\\n  // 设置FlowItem的宽/高数组\\n  setItemSizeArray() {\\n    for (let i = 0; i < 100; i++) {\\n      this.itemWidthArray.push(this.getSize())\\n      this.itemHeightArray.push(this.getSize())\\n    }\\n  }\\n\\n  aboutToAppear() {\\n    this.setItemSizeArray()\\n  }\\n\\n  @Builder\\n  itemFoot() {\\n    Text(`Footer`)\\n      .fontSize(10)\\n      .backgroundColor(Color.Red)\\n      .width(50)\\n      .height(50)\\n      .align(Alignment.Center)\\n      .margin({ top: 2 })\\n  }\\n\\n  build() {\\n    Column({ space: 2 }) {\\n      WaterFlow() {\\n        LazyForEach(this.dataSource, (item: number) => {\\n          FlowItem() {\\n            ReusableFlowItem({ item: item })\\n          }\\n          .width('100%')\\n          .height(this.itemHeightArray[item % 100])\\n          .backgroundColor(this.colors[item % 5])\\n        }, (item: string) => item)\\n      }\\n      .onReachEnd(() => {\\n        console.info(\\\"onReachEnd\\\")\\n        setTimeout(() => {\\n          for (let i = 0; i < 100; i++) {\\n            this.datasource.AddLastItem()\\n          }\\n        }, 1000)\\n      })\\n      .columnsTemplate(\\\"1fr 1fr\\\")\\n      .columnsGap(10)\\n      .rowsGap(5)\\n      .backgroundColor(0xFAEEE0)\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nstruct ReusableFlowItem {\\n  @State item: number = 0\\n\\n  // 从复用缓存中加入到组件树之前调用，可在此处更新组件的状态变量以展示正确的内容\\n  aboutToReuse(params: Record<string, ESObject>) {\\n    this.item = params.item;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text(\\\"N\\\" + this.item).fontSize(12).height('16')\\n      Image('res/waterFlowTest (' + this.item % 5 + ').jpg')\\n        .objectFit(ImageFit.Fill)\\n        .width('100%')\\n        .layoutWeight(1)\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4><p id='\\\"ZH-CN_TOPIC_0000002166648588__p3373122573014\\\"'>下文中WaterFlowDataSource.ets为依赖代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648588__p13743259308\\\"'>下文中Index.ets为反例测试代码，依赖上文中WaterFlowDataSource.ets：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648588__screen2374172519306\\\"'>// Index.ets\\nimport { WaterFlowDataSource } from './WaterFlowDataSource'\\n\\n@Entry\\n@Component\\nstruct WaterFlowDemo {\\n  @State minSize: number = 80\\n  @State maxSize: number = 180\\n  @State fontSize: number = 24\\n  @State colors: number[] = [0xFFC0CB, 0xDA70D6, 0x6B8E23, 0x6A5ACD, 0x00FFFF, 0x00FF7F]\\n  scroller: Scroller = new Scroller()\\n  dataSource: WaterFlowDataSource = new WaterFlowDataSource()\\n  private itemWidthArray: number[] = []\\n  private itemHeightArray: number[] = []\\n\\n  // 计算FlowItem宽/高\\n  getSize() {\\n    let ret = Math.floor(Math.random() * this.maxSize)\\n    return (ret &gt; this.minSize ? ret : this.minSize)\\n  }\\n\\n  // 设置FlowItem的宽/高数组\\n  setItemSizeArray() {\\n    for (let i = 0; i &lt; 100; i++) {\\n      this.itemWidthArray.push(this.getSize())\\n      this.itemHeightArray.push(this.getSize())\\n    }\\n  }\\n\\n  aboutToAppear() {\\n    this.setItemSizeArray()\\n  }\\n\\n  @Builder\\n  itemFoot() {\\n    Text(`Footer`)\\n      .fontSize(10)\\n      .backgroundColor(Color.Red)\\n      .width(50)\\n      .height(50)\\n      .align(Alignment.Center)\\n      .margin({ top: 2 })\\n  }\\n\\n  build() {\\n    Column({ space: 2 }) {\\n      WaterFlow() {\\n        LazyForEach(this.dataSource, (item: number) =&gt; {\\n          FlowItem() {\\n            ReusableFlowItem({ item: item })\\n          }\\n          .width('100%')\\n          .height(this.itemHeightArray[item % 100])\\n          .backgroundColor(this.colors[item % 5])\\n        }, (item: string) =&gt; item)\\n      }\\n      .onReachEnd(() =&gt; {\\n        console.info(\\\"onReachEnd\\\")\\n        setTimeout(() =&gt; {\\n          for (let i = 0; i &lt; 100; i++) {\\n            this.datasource.AddLastItem()\\n          }\\n        }, 1000)\\n      })\\n      .columnsTemplate(\\\"1fr 1fr\\\")\\n      .columnsGap(10)\\n      .rowsGap(5)\\n      .backgroundColor(0xFAEEE0)\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nstruct ReusableFlowItem {\\n  @State item: number = 0\\n\\n  // 从复用缓存中加入到组件树之前调用，可在此处更新组件的状态变量以展示正确的内容\\n  aboutToReuse(params: Record&lt;string, ESObject&gt;) {\\n    this.item = params.item;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text(\\\"N\\\" + this.item).fontSize(12).height('16')\\n      Image('res/waterFlowTest (' + this.item % 5 + ').jpg')\\n        .objectFit(ImageFit.Fill)\\n        .width('100%')\\n        .layoutWeight(1)\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-waterflow-data-preload-check.html"
    },
    {
        "id": 48,
        "pre": "import { cloud } from '@hw-agconnect/cloud-server'; \\nimport { BookInfo } from './BookInfo'; // BookInfo是Server Model \\n\\n// default是BookInfo对象类型使用的存储区名\\nconst collection = cloud.database({ zoneName: 'default' }).collection(BookInfo);\\n\\n// BookStore云对象，实现了对BookInfo对象的查询和更新\\nexport class BookStore {\\n  query() {\\n    return collection.query().get();\\n  }\\n\\n  upset(bookInfos: BookInfo[]) {\\n    return new Promise((resolve, reject) => {\\n      collection.upsert(bookInfos.map(book => BookInfo.parseFrom(book)))\\n        .then(result => resolve({ result }))\\n        .catch(err => reject(err))\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "引入@hw-agconnect/cloud-server依赖，实现云函数访问云数据库。  如果定义的云数据库表字段中包含ByteArray或Date类型的字段，在插入或者更新云数据库时需要使用Server Model的parseFrom方法将入参转化成API识别的类型，例如上述示例中的BookInfo.parseFrom方法。  ",
        "import_module": null,
        "parent": "<li id='\\\"li1184020197183\\\"'>引入@hw-agconnect/cloud-server依赖，实现云函数访问云数据库。 <div class='\\\"caution\\\"' id='\\\"ZH-CN_TOPIC_0000002179338344__note48224471164\\\"'><span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180445.22739330511558782116822031448627:50001231000000:2800:C5C3D28C8992989A06F86CC051519791D618B9284B4C1523B7814C0DA370BC04.png\\\"'/> </span><div class='\\\"cautionbody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338344__p628417492617\\\"'>如果定义的云数据库表字段中包含ByteArray或Date类型的字段，在插入或者更新云数据库时需要使用Server Model的parseFrom方法将入参转化成API识别的类型，例如上述示例中的BookInfo.parseFrom方法。</p> </div></div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/agc-harmonyos-clouddev-modelclass.html"
    },
    {
        "id": 49,
        "pre": "// EntryAbility Index.ets\\nimport { common, Want } from '@kit.AbilityKit';\\n@Entry\\n@Component\\nstruct Index {\\n  @StorageLink('count') count: number = 0;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility count: ${this.count}`)\\n        .fontSize(50)\\n        .onClick(() => {\\n          this.count++;\\n        })\\n      Button('Jump to EntryAbility1').onClick(() => {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility1'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "[h2]AppStorage->AppStorageV2",
        "parent_text": "  [h2]AppStorage->AppStorageV2 上一小节中，对于全局的@ObserveV2/@Trace的改造并不适合跨Ability的数据共享，该场景可以使用AppStorageV2来替换。 V1: AppStorage是和应用进程绑定了，可以跨Ability实现数据共享。 在下面的示例中，使用@StorageLink，可以使得开发者本地的修改同步回AppStorage中。  // EntryAbility1 Index1.ets\\nimport { common, Want } from '@kit.AbilityKit';\\n@Entry\\n@Component\\nstruct Index1 {\\n  @StorageLink('count') count: number = 0;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(50)\\n        .onClick(() => {\\n          this.count++;\\n        })\\n      Button('Jump to EntryAbility').onClick(() => {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n} V2: 可以使用AppStorageV2实现跨Ability共享。 如下面示例： import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () => new MyStorage())!;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.storage.count}`)\\n        .fontSize(50)\\n        .onClick(() => {\\n          this.storage.count++;\\n        })\\n      Button('Jump to EntryAbility1').onClick(() => {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility1'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n} import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index1 {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () => new MyStorage())!;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n    build() {\\n      Column() {\\n        Text(`EntryAbility1 count: ${this.storage.count}`)\\n          .fontSize(50)\\n          .onClick(() => {\\n            this.storage.count++;\\n          })\\n        Button('Jump to EntryAbility').onClick(() => {\\n          let wantInfo: Want = {\\n            bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n            abilityName: 'EntryAbility'\\n          };\\n          this.context.startAbility(wantInfo);\\n        })\\n      }\\n    }\\n} 如果开发者需要实现类似于@StorageProp的效果，希望本地的修改不要同步回AppStorage中，而AppStorage的变化又可以通知给使用@StorageProp装饰器的组件，可以参考以下示例对比。 V1： // EntryAbility Index.ets\\nimport { common, Want } from '@kit.AbilityKit';\\n@Entry\\n@Component\\nstruct Index {\\n  @StorageProp('count') count: number = 0;\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility count: ${this.count}`)\\n        .fontSize(25)\\n        .onClick(() => {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() => {\\n          AppStorage.setOrCreate('count', AppStorage.get<number>('count') as number + 100);\\n        })\\n      Button('Jump to EntryAbility1').onClick(() => {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility1'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n} // EntryAbility1 Index1.ets\\nimport { common, Want } from '@kit.AbilityKit';\\n@Entry\\n@Component\\nstruct Index1 {\\n  @StorageProp('count') count: number = 0;\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(50)\\n        .onClick(() => {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() => {\\n          AppStorage.setOrCreate('count', AppStorage.get<number>('count') as number + 100);\\n        })\\n      Button('Jump to EntryAbility').onClick(() => {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n} V2: 开发者可以借助@Monitor和@Local来实现类似的效果，示例如下。 import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0;\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () => new MyStorage())!;\\n  @Local count: number = this.storage.count;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n\\n  @Monitor('storage.count')\\n  onCountChange(mon: IMonitor) {\\n    console.log(`Index1 ${mon.value()?.before} to ${mon.value()?.now}`);\\n    this.count = this.storage.count;\\n  }\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(25)\\n        .onClick(() => {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() => {\\n          this.storage.count += 100;\\n        })\\n      Button('Jump to EntryAbility1').onClick(() => {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility1'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n} import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0;\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index1 {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () => new MyStorage())!;\\n  @Local count: number = this.storage.count;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n\\n  @Monitor('storage.count')\\n  onCountChange(mon: IMonitor) {\\n    console.log(`Index1 ${mon.value()?.before} to ${mon.value()?.now}`);\\n    this.count = this.storage.count;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(25)\\n        .onClick(() => {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() => {\\n          this.storage.count += 100;\\n        })\\n      Button('Jump to EntryAbility').onClick(() => {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"appstorage-appstoragev2\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413097__appstorage-appstoragev2\\\"'></a><a name='\\\"appstorage-appstoragev2\\\"'></a> <h4>[h2]AppStorage-&gt;AppStorageV2</h4> <p>上一小节中，对于全局的@ObserveV2/@Trace的改造并不适合跨Ability的数据共享，该场景可以使用AppStorageV2来替换。</p> <p>V1:</p> <p>AppStorage是和应用进程绑定了，可以跨Ability实现数据共享。</p> <p>在下面的示例中，使用@StorageLink，可以使得开发者本地的修改同步回AppStorage中。</p>  <pre class='\\\"screen\\\"'>// EntryAbility1 Index1.ets\\nimport { common, Want } from '@kit.AbilityKit';\\n@Entry\\n@Component\\nstruct Index1 {\\n  @StorageLink('count') count: number = 0;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(50)\\n        .onClick(() =&gt; {\\n          this.count++;\\n        })\\n      Button('Jump to EntryAbility').onClick(() =&gt; {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n}</pre> <p>V2:</p> <p>可以使用AppStorageV2实现跨Ability共享。</p> <p>如下面示例：</p> <pre class='\\\"screen\\\"'>import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () =&gt; new MyStorage())!;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.storage.count}`)\\n        .fontSize(50)\\n        .onClick(() =&gt; {\\n          this.storage.count++;\\n        })\\n      Button('Jump to EntryAbility1').onClick(() =&gt; {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility1'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n}</pre> <pre class='\\\"screen\\\"'>import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index1 {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () =&gt; new MyStorage())!;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n    build() {\\n      Column() {\\n        Text(`EntryAbility1 count: ${this.storage.count}`)\\n          .fontSize(50)\\n          .onClick(() =&gt; {\\n            this.storage.count++;\\n          })\\n        Button('Jump to EntryAbility').onClick(() =&gt; {\\n          let wantInfo: Want = {\\n            bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n            abilityName: 'EntryAbility'\\n          };\\n          this.context.startAbility(wantInfo);\\n        })\\n      }\\n    }\\n}</pre> <p>如果开发者需要实现类似于@StorageProp的效果，希望本地的修改不要同步回AppStorage中，而AppStorage的变化又可以通知给使用@StorageProp装饰器的组件，可以参考以下示例对比。</p> <p>V1：</p> <pre class='\\\"ts\\\"'>// EntryAbility Index.ets\\nimport { common, Want } from '@kit.AbilityKit';\\n@Entry\\n@Component\\nstruct Index {\\n  @StorageProp('count') count: number = 0;\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility count: ${this.count}`)\\n        .fontSize(25)\\n        .onClick(() =&gt; {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() =&gt; {\\n          AppStorage.setOrCreate('count', AppStorage.get&lt;number&gt;('count') as number + 100);\\n        })\\n      Button('Jump to EntryAbility1').onClick(() =&gt; {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility1'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n}</pre> <pre class='\\\"ts\\\"'>// EntryAbility1 Index1.ets\\nimport { common, Want } from '@kit.AbilityKit';\\n@Entry\\n@Component\\nstruct Index1 {\\n  @StorageProp('count') count: number = 0;\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(50)\\n        .onClick(() =&gt; {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() =&gt; {\\n          AppStorage.setOrCreate('count', AppStorage.get&lt;number&gt;('count') as number + 100);\\n        })\\n      Button('Jump to EntryAbility').onClick(() =&gt; {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n}</pre> <p>V2:</p> <p>开发者可以借助@Monitor和@Local来实现类似的效果，示例如下。</p> <pre class='\\\"ts\\\"'>import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0;\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () =&gt; new MyStorage())!;\\n  @Local count: number = this.storage.count;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n\\n  @Monitor('storage.count')\\n  onCountChange(mon: IMonitor) {\\n    console.log(`Index1 ${mon.value()?.before} to ${mon.value()?.now}`);\\n    this.count = this.storage.count;\\n  }\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(25)\\n        .onClick(() =&gt; {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() =&gt; {\\n          this.storage.count += 100;\\n        })\\n      Button('Jump to EntryAbility1').onClick(() =&gt; {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility1'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n}</pre> <pre class='\\\"ts\\\"'>import { common, Want } from '@kit.AbilityKit';\\nimport { AppStorageV2 } from '@kit.ArkUI';\\n\\n@ObservedV2\\nexport class MyStorage {\\n  @Trace count: number = 0;\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index1 {\\n  @Local storage: MyStorage = AppStorageV2.connect(MyStorage, 'storage', () =&gt; new MyStorage())!;\\n  @Local count: number = this.storage.count;\\n  private context: common.UIAbilityContext= getContext(this) as common.UIAbilityContext;\\n\\n  @Monitor('storage.count')\\n  onCountChange(mon: IMonitor) {\\n    console.log(`Index1 ${mon.value()?.before} to ${mon.value()?.now}`);\\n    this.count = this.storage.count;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text(`EntryAbility1 count: ${this.count}`)\\n        .fontSize(25)\\n        .onClick(() =&gt; {\\n          this.count++;\\n        })\\n      Button('change Storage Count')\\n        .onClick(() =&gt; {\\n          this.storage.count += 100;\\n        })\\n      Button('Jump to EntryAbility').onClick(() =&gt; {\\n        let wantInfo: Want = {\\n          bundleName: 'com.example.myapplication', // 替换成AppScope/app.json5里的bundleName\\n          abilityName: 'EntryAbility'\\n        };\\n        this.context.startAbility(wantInfo);\\n      })\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-v1-v2-migration.html"
    },
    {
        "id": 50,
        "pre": "// Env.ts\\nimport { ConfigurationConstant } from '@kit.AbilityKit';\\n\\nexport class Env {\\n  language: string | undefined;\\n  colorMode: ConfigurationConstant.ColorMode | undefined;\\n  fontSizeScale: number | undefined;\\n  fontWeightScale: number | undefined;\\n}\\n\\nexport let env: Env = new Env();",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "[h2]Environment->调用Ability接口直接获取系统环境变量",
        "parent_text": "  [h2]Environment->调用Ability接口直接获取系统环境变量 V1中，开发者可以通过Environment来获取环境变量，但Environment获取的结果无法直接使用，需要配合AppStorage才能得到对应环境变量的值。 在切换V2的过程中，开发者无需再通过Environment来获取环境变量，可以直接通过UIAbilityContext的config属性获取系统环境变量。 V1: 以languageCode为例。 // 将设备languageCode存入AppStorage中\\nEnvironment.envProp('languageCode', 'en');\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @StorageProp('languageCode') languageCode: string = 'en';\\n  build() {\\n    Row() {\\n      Column() {\\n        // 输出当前设备的languageCode\\n        Text(this.languageCode)\\n      }\\n    }\\n  }\\n} V2: 封装Env类型来传递多个系统环境变量。  在onCreate里获得需要的系统环境变量： // EntryAbility.ets\\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { env } from '../pages/Env';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\\n    env.language = this.context.config.language;\\n    env.colorMode = this.context.config.colorMode;\\n    env.fontSizeScale = this.context.config.fontSizeScale;\\n    env.fontWeightScale = this.context.config.fontWeightScale;\\n  }\\n\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    windowStage.loadContent('pages/Index');\\n  }\\n} 在页面中获得当前Env的值。 // Index.ets\\nimport { env } from '../pages/Env';\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  build() {\\n    Row() {\\n      Column() {\\n        // 输出当前设备的环境变量\\n        Text(`languageCode: ${env.language}`).fontSize(20)\\n        Text(`colorMode: ${env.colorMode}`).fontSize(20)\\n        Text(`fontSizeScale: ${env.fontSizeScale}`).fontSize(20)\\n        Text(`fontWeightScale: ${env.fontWeightScale}`).fontSize(20)\\n      }\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"environment-调用ability接口直接获取系统环境变量\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413097__environment-%E8%B0%83%E7%94%A8ability%E6%8E%A5%E5%8F%A3%E7%9B%B4%E6%8E%A5%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\\\"'></a><a name='\\\"environment-%E8%B0%83%E7%94%A8ability%E6%8E%A5%E5%8F%A3%E7%9B%B4%E6%8E%A5%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\\\"'></a> <h4>[h2]Environment-&gt;调用Ability接口直接获取系统环境变量</h4> <p>V1中，开发者可以通过Environment来获取环境变量，但Environment获取的结果无法直接使用，需要配合AppStorage才能得到对应环境变量的值。</p> <p>在切换V2的过程中，开发者无需再通过Environment来获取环境变量，可以直接通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-inner-application-uiabilitycontext#属性\\\"' target='\\\"_blank\\\"'>UIAbilityContext的config属性</a>获取系统环境变量。</p> <p>V1:</p> <p>以languageCode为例。</p> <pre class='\\\"ts\\\"'>// 将设备languageCode存入AppStorage中\\nEnvironment.envProp('languageCode', 'en');\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @StorageProp('languageCode') languageCode: string = 'en';\\n  build() {\\n    Row() {\\n      Column() {\\n        // 输出当前设备的languageCode\\n        Text(this.languageCode)\\n      }\\n    }\\n  }\\n}</pre> <p>V2:</p> <p>封装Env类型来传递多个系统环境变量。</p>  <p>在onCreate里获得需要的系统环境变量：</p> <pre class='\\\"screen\\\"'>// EntryAbility.ets\\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { env } from '../pages/Env';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\\n    env.language = this.context.config.language;\\n    env.colorMode = this.context.config.colorMode;\\n    env.fontSizeScale = this.context.config.fontSizeScale;\\n    env.fontWeightScale = this.context.config.fontWeightScale;\\n  }\\n\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    windowStage.loadContent('pages/Index');\\n  }\\n}</pre> <p>在页面中获得当前Env的值。</p> <pre class='\\\"screen\\\"'>// Index.ets\\nimport { env } from '../pages/Env';\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  build() {\\n    Row() {\\n      Column() {\\n        // 输出当前设备的环境变量\\n        Text(`languageCode: ${env.language}`).fontSize(20)\\n        Text(`colorMode: ${env.colorMode}`).fontSize(20)\\n        Text(`fontSizeScale: ${env.fontSizeScale}`).fontSize(20)\\n        Text(`fontWeightScale: ${env.fontWeightScale}`).fontSize(20)\\n      }\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-v1-v2-migration.html"
    },
    {
        "id": 51,
        "pre": "PersistentStorage.persistProp('aProp', 47);\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @StorageLink('aProp') aProp: number = 48;\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        // 应用退出时会保存当前结果。重新启动后，会显示上一次的保存结果\\n        Text(`${this.aProp}`)\\n          .onClick(() => {\\n            this.aProp += 1;\\n          })\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "[h2]PersistentStorage->PersistenceV2",
        "parent_text": "  [h2]PersistentStorage->PersistenceV2 V1中PersistentStorage提供了持久化UI数据的能力，而V2则提供了更加方便使用的PersistenceV2接口来替代它。  PersistentStorage持久化的触发时机依赖AppStorage的观察能力，且与AppStorage耦合，开发者无法自主选择写入或读取持久化数据的时机。 PersistentStorage使用序列化和反序列化，并没有传入类型，所以在持久化后，会丢失其类型，且对象的属性方法不能持久化。  对于PersistenceV2：  与PersistenceV2关联的@ObservedV2对象，其@Trace属性的变化，会触发整个关联对象的自动持久化。 开发者也可以调用PersistenceV2.save和PersistenceV2.connect接口来手动触发持久化写入和读取。  V1:  V2: 下面的案例展示了：  对标V1的PersistentStorage能力：aProp的改变自动触发PersistenceV2的持久化。 对比V1的PersistentStorage能力增强：bProp是非状态变量，其变化不能被观察和监听，但是开发者仍然可以主动调用PersistenceV2.save接口，进行持久化。        点击aProp，UI刷新。 点击bProp，UI没有刷新。 点击save storage，触发PersistentStorage链接数据的落盘。 退出重启应用，Text组件显示的aProp和bProp为上次改变的值。   import { PersistenceV2 } from '@kit.ArkUI';\\n// 数据中心\\n@ObservedV2\\nclass Storage {\\n  @Trace aProp: number = 0;\\n  bProp: number = 10;\\n}\\n\\n// 接受序列化失败的回调\\nPersistenceV2.notifyOnError((key: string, reason: string, msg: string) => {\\n  console.error(`error key: ${key}, reason: ${reason}, message: ${msg}`);\\n});\\n\\n@Entry\\n@ComponentV2\\nstruct Page1 {\\n  // 在PersistenceV2中创建一个key为Sample的键值对（如果存在，则返回PersistenceV2中的数据），并且和prop关联\\n  @Local storage: Storage = PersistenceV2.connect(Storage, () => new Storage())!;\\n\\n  build() {\\n    Column() {\\n      Text(`@Trace aProp: ${this.storage.aProp}`)\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.storage.aProp++;\\n        })\\n\\n      Text(`bProp:: ${this.storage.bProp}`)\\n        .fontSize(30)\\n        .onClick(() => {\\n          // 页面不刷新，但是bProp的值改变了\\n          this.storage.bProp++;\\n        })\\n\\n      Button('save storage')\\n        .onClick(() => {\\n          // 和V1不同，PersistenceV2不依赖状态变量的观察能力，开发者可以主动持久化\\n          PersistenceV2.save(Storage);\\n        })\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"persistentstorage-persistencev2\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413097__persistentstorage-persistencev2\\\"'></a><a name='\\\"persistentstorage-persistencev2\\\"'></a> <h4>[h2]PersistentStorage-&gt;PersistenceV2</h4> <p>V1中PersistentStorage提供了持久化UI数据的能力，而V2则提供了更加方便使用的PersistenceV2接口来替代它。</p> <ul> <li>PersistentStorage持久化的触发时机依赖AppStorage的观察能力，且与AppStorage耦合，开发者无法自主选择写入或读取持久化数据的时机。</li> <li>PersistentStorage使用序列化和反序列化，并没有传入类型，所以在持久化后，会丢失其类型，且对象的属性方法不能持久化。</li> </ul> <p>对于PersistenceV2：</p> <ul> <li>与PersistenceV2关联的@ObservedV2对象，其@Trace属性的变化，会触发整个关联对象的自动持久化。</li> <li>开发者也可以调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-new-persistencev2#save手动持久化数据\\\"'>PersistenceV2.save</a>和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-new-persistencev2#connect创建或获取储存的数据\\\"'>PersistenceV2.connect</a>接口来手动触发持久化写入和读取。</li> </ul> <p>V1:</p>  <p>V2:</p> <p>下面的案例展示了：</p> <ul> <li>对标V1的PersistentStorage能力：aProp的改变自动触发PersistenceV2的持久化。</li> <li>对比V1的PersistentStorage能力增强：bProp是非状态变量，其变化不能被观察和监听，但是开发者仍然可以主动调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-new-persistencev2#save手动持久化数据\\\"'>PersistenceV2.save</a>接口，进行持久化。       <ul> <li>点击aProp，UI刷新。</li> <li>点击bProp，UI没有刷新。</li> <li>点击save storage，触发PersistentStorage链接数据的落盘。</li> <li>退出重启应用，Text组件显示的aProp和bProp为上次改变的值。</li> </ul></li> </ul> <pre class='\\\"screen\\\"'>import { PersistenceV2 } from '@kit.ArkUI';\\n// 数据中心\\n@ObservedV2\\nclass Storage {\\n  @Trace aProp: number = 0;\\n  bProp: number = 10;\\n}\\n\\n// 接受序列化失败的回调\\nPersistenceV2.notifyOnError((key: string, reason: string, msg: string) =&gt; {\\n  console.error(`error key: ${key}, reason: ${reason}, message: ${msg}`);\\n});\\n\\n@Entry\\n@ComponentV2\\nstruct Page1 {\\n  // 在PersistenceV2中创建一个key为Sample的键值对（如果存在，则返回PersistenceV2中的数据），并且和prop关联\\n  @Local storage: Storage = PersistenceV2.connect(Storage, () =&gt; new Storage())!;\\n\\n  build() {\\n    Column() {\\n      Text(`@Trace aProp: ${this.storage.aProp}`)\\n        .fontSize(30)\\n        .onClick(() =&gt; {\\n          this.storage.aProp++;\\n        })\\n\\n      Text(`bProp:: ${this.storage.bProp}`)\\n        .fontSize(30)\\n        .onClick(() =&gt; {\\n          // 页面不刷新，但是bProp的值改变了\\n          this.storage.bProp++;\\n        })\\n\\n      Button('save storage')\\n        .onClick(() =&gt; {\\n          // 和V1不同，PersistenceV2不依赖状态变量的观察能力，开发者可以主动持久化\\n          PersistenceV2.save(Storage);\\n        })\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-v1-v2-migration.html"
    },
    {
        "id": 52,
        "pre": "let storage: LocalStorage = new LocalStorage();\\n\\n@ObservedV2\\nclass V1StorageData {\\n  @Trace title: string = 'V1OldComponent'\\n  @Monitor('title')\\n  onStrChange(monitor: IMonitor) {\\n    monitor.dirty.forEach((path: string) => {\\n      console.log(`${path} changed from ${monitor.value(path)?.before} to ${monitor.value(path)?.now}`)\\n      if (path === 'title') {\\n        storage.setOrCreate('title', this.title);\\n      }\\n    })\\n  }\\n}\\nlet v1Data: V1StorageData = new V1StorageData();\\n\\n@Entry(storage)\\n@Component\\nstruct V1OldComponent {\\n  @LocalStorageLink('title') title: string = 'V1OldComponent';\\n\\n  build() {\\n    Column() {\\n      Text(`V1OldComponent: ${this.title}`)\\n        .fontSize(20)\\n        .onClick(() => {\\n          this.title = 'new value from V1OldComponent';\\n        })\\n      Bridge()\\n    }\\n  }\\n}\\n\\n\\n@Component\\nstruct Bridge {\\n  @LocalStorageLink('title')@Watch('titleWatch') title: string = 'Bridge';\\n  titleWatch() {\\n    v1Data.title = this.title;\\n  }\\n\\n  build() {\\n    NewV2Component()\\n  }\\n}\\n@ComponentV2\\nstruct NewV2Component {\\n  build() {\\n    Column() {\\n      Text(`NewV2Component: ${v1Data.title}`)\\n        .fontSize(20)\\n        .onClick(() => {\\n          v1Data.title = 'NewV2Component';\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "存量迁移场景",
        "parent_text": "  存量迁移场景 对于已经使用V1开发的大型应用，一般不太可能做到一次性的从V1迁移到V2，而是分批次和分组件的部分迁移，这就必然会带来V1和V2的混用。 这种场景，一般是父组件是状态管理V1，而迁移的子组件为状态管理V2。为了模拟这种场景，我们举出下面的示例：  父组件是@Component，数据源是@LocalStorageLink。 子组件是@ComponentV2，使用@Param接受数据源的数据。  这种情况，我们可以通过以下策略进行迁移：  声明一个@ObservedV2装饰的class来封装V1的数据。 在@Component和@ComponentV2之间，定义一个桥接的@Component自定义组件。 在桥接层：        V1->V2的数据同步，可通过@Watch的监听触发@ObservedV2装饰的class的属性的赋值。 V2->V1的数据同步，可通过在@ObservedV2装饰的class里声明Monitor，通过LocalStorage的API反向通知给V1状态变量。   具体示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"存量迁移场景\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413097__%E5%AD%98%E9%87%8F%E8%BF%81%E7%A7%BB%E5%9C%BA%E6%99%AF\\\"'></a><a name='\\\"%E5%AD%98%E9%87%8F%E8%BF%81%E7%A7%BB%E5%9C%BA%E6%99%AF\\\"'></a> <h4>存量迁移场景</h4> <p>对于已经使用V1开发的大型应用，一般不太可能做到一次性的从V1迁移到V2，而是分批次和分组件的部分迁移，这就必然会带来V1和V2的混用。</p> <p>这种场景，一般是父组件是状态管理V1，而迁移的子组件为状态管理V2。为了模拟这种场景，我们举出下面的示例：</p> <ul> <li>父组件是@Component，数据源是@LocalStorageLink。</li> <li>子组件是@ComponentV2，使用@Param接受数据源的数据。</li> </ul> <p>这种情况，我们可以通过以下策略进行迁移：</p> <ul> <li>声明一个@ObservedV2装饰的class来封装V1的数据。</li> <li>在@Component和@ComponentV2之间，定义一个桥接的@Component自定义组件。</li> <li>在桥接层：       <ul> <li>V1-&gt;V2的数据同步，可通过@Watch的监听触发@ObservedV2装饰的class的属性的赋值。</li> <li>V2-&gt;V1的数据同步，可通过在@ObservedV2装饰的class里声明Monitor，通过LocalStorage的API反向通知给V1状态变量。</li> </ul></li> </ul> <p>具体示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-v1-v2-migration.html"
    },
    {
        "id": 53,
        "pre": "import { site } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      导入相关模块。       ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      导入相关模块。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-search.html"
    },
    {
        "id": 54,
        "pre": "let params: site.SearchByTextParams = {\\n  // 根据指定关键字进行搜索\\n  query: \\\"Piazzale Dante, 41, 55049 Viareggio, Tuscany, Italy\\\",\\n  // 经纬度坐标\\n  location: {\\n    latitude: 31.984,\\n    longitude: 118.76625\\n  },\\n  // 指定地理位置的范围半径\\n  radius: 10000,\\n  // 搜索结果的语言\\n  language: \\\"en\\\"\\n};\\n// 返回关键字搜索结果\\nconst result = await site.searchByText(params);\\nconsole.info(\\\"Succeeded in searching by text.\\\");",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过指定的关键字和可选的地理范围，查询诸如旅游景点、企业和学校之类的地点。       ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      通过指定的关键字和可选的地理范围，查询诸如旅游景点、企业和学校之类的地点。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-search.html"
    },
    {
        "id": 55,
        "pre": "let params: site.NearbySearchParams = {\\n  // 指定关键字\\n  query: \\\"stazione di pomezia\\\",\\n  // 经纬度坐标\\n  location: {\\n    latitude: 31.984410259206815,\\n    longitude: 118.76625379397866\\n  },\\n  // 指定地理位置的范围半径\\n  radius: 5000,\\n  // 指定需要展示的poi类别\\n  poiTypes: [\\\"NATIONAL_RAILWAY_STATION\\\"],\\n  language: \\\"en\\\",\\n  pageIndex: 1,\\n  pageSize: 1\\n};\\n// 返回周边搜索结果\\nconst result = await site.nearbySearch(params);\\nconsole.info(\\\"Succeeded in searching nearby.\\\");",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过用户传入自己的位置，可以返回周边地点列表。您可以通过提供关键字或指定要搜索的地点的类型来优化搜索结果。       ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      通过用户传入自己的位置，可以返回周边地点列表。您可以通过提供关键字或指定要搜索的地点的类型来优化搜索结果。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-search.html"
    },
    {
        "id": 56,
        "pre": "let params: site.QueryAutoCompleteParams = {\\n  // 指定关键字\\n  query: \\\"hotel\\\",\\n  // 经纬度坐标\\n  location: {\\n    latitude: 31.984410259206815,\\n    longitude: 118.76625379397866\\n  },\\n  language: \\\"en\\\",\\n  // 返回子节点\\n  isChildren: true\\n};\\n// 返回自动补全结果\\nconst result = await site.queryAutoComplete(params);\\nconsole.info(\\\"Succeeded in querying.\\\");",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      根据输入的关键字，将最有可能的搜索词呈现给用户，以减少用户输入信息，提升用户体验。如：输入“北京”，提示“北京市”、“北京站”、“北京西站”等。       ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      根据输入的关键字，将最有可能的搜索词呈现给用户，以减少用户输入信息，提升用户体验。如：输入“北京”，提示“北京市”、“北京站”、“北京西站”等。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-search.html"
    },
    {
        "id": 57,
        "pre": "let params: site.SearchByIdParams = {\\n  // 指定主键地点ID\\n  siteId: \\\"144129739873977856\\\",\\n  language: \\\"en\\\",\\n  // 返回子节点\\n  isChildren: true\\n};\\n// 返回地点详情结果\\nconst result = await site.searchById(params);\\nconsole.info(\\\"Succeeded in searching.\\\");",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      根据地点的唯一主键地点ID（siteId）获取地点详情。地点详细信息请求返回有关指定地点的更全面的信息，如地点名称、地址详细信息、经纬度等。siteId可通过其他接口（关键字搜索、周边搜索、地点详情、自动补全、正地理编码）的返回结果中获取。       ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      根据地点的唯一主键地点ID（siteId）获取地点详情。地点详细信息请求返回有关指定地点的更全面的信息，如地点名称、地址详细信息、经纬度等。siteId可通过其他接口（关键字搜索、周边搜索、地点详情、自动补全、正地理编码）的返回结果中获取。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-search.html"
    },
    {
        "id": 58,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/dot-notation\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_dot-notation.html"
    },
    {
        "id": 59,
        "pre": "const foo = {\\n  bar: 'hello'\\n};\\n\\nexport const x = foo.bar;",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "const foo = {\\n  bar: 'hello'\\n};\\n\\nexport const x = foo.bar;",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_dot-notation.html"
    },
    {
        "id": 60,
        "pre": "const foo = {\\n  bar: 'hello'\\n};\\n\\nexport const x = foo['bar'];",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "const foo = {\\n  bar: 'hello'\\n};\\n\\nexport const x = foo.bar;",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_dot-notation.html"
    },
    {
        "id": 61,
        "pre": "\\\"targets\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"resource\\\": {\\n      \\\"directories\\\": [\\\"./src/main/resources\\\"]\\n    },\\n    \\\"output\\\": {\\n      \\\"artifactName\\\": \\\"customizedTargetOutputName-1.0.0\\\"\\n    }\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "targets",
        "parent_text": "  targets targets用于给模块配置多目标产物，可配置多个；若配置，数组长度至少为1。    表2 targets          字段名称 类型 是否必选 含义    name 字符串 必选 target名称。   runtimeOS 字符串 可选 target的目标运行环境：  HarmonyOS OpenHarmony    config 对象 可选 target相关配置。   source 对象 可选 target的源码范围。   resource 对象 可选 target包含的资源目录。   output 对象 可选 定制产品生成的应用包的配置。        表3 resource          字段名称 类型 是否必选 含义    directories array 可选 资源目录地址。        表4 output          字段名称 类型 是否必选 含义    artifactName string 必选 自定义产品生成的应用包名称，可由数字、英文字母、中划线、下划线和英文句号（.）组成，支持输入版本号。    targets字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section517483765814\\\"'> <a name='\\\"section517483765814\\\"'></a><a name='\\\"section517483765814\\\"'></a> <h4>targets</h4> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p141321412205916\\\"'>targets用于给模块配置<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products\\\"'>多目标产物</a>，可配置多个；若配置，数组长度至少为1。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table133470791714\\\"'> <caption> <b>表2 </b>targets       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row1934757191712\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p855523710177\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p165552037201714\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"14.000000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p13555337181719\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"44.89%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p655543711715\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row634797111713\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p167231849144111\\\"'>name</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p63325510527\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.000000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p18355126\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.89%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p20723174916410\\\"'>target名称。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row33472712171\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p5723149184120\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>runtimeOS</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1872314912415\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.000000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1888517126\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.89%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1272417498419\\\"'>target的目标运行环境：</p> <ul id='\\\"ZH-CN_TOPIC_0000002231219589__ul17610101855218\\\"'> <li id='\\\"li196101187525\\\"'>HarmonyOS</li> <li id='\\\"li6913722155216\\\"'>OpenHarmony</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row1334711719176\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p27241649144112\\\"'><a href='\\\"#section1967714835919\\\"'>config</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p13724184964111\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.000000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p69658121\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.89%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p4724164919419\\\"'>target相关配置。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row234717751714\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p034714719172\\\"'><a href='\\\"#section1838814817017\\\"'>source</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1472512490416\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.000000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p6913501220\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.89%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p0725549104118\\\"'>target的源码范围。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row73484791716\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p33482781714\\\"'><a href='\\\"#table2065415762214\\\"'>resource</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p172614491413\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.000000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p13913551213\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.89%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p14778192411266\\\"'>target包含的资源目录。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row2348075173\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p10348187111710\\\"'><a href='\\\"#table965613111225\\\"'>output</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p41511223461\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.000000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p8914512125\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.89%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p13151222164618\\\"'>定制产品生成的应用包的配置。</p></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002231219589__table2065415762214\\\"'></a><a name='\\\"table2065415762214\\\"'></a> <table id='\\\"table2065415762214\\\"'> <caption> <b>表3 </b>resource       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row965437102211\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.4.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p9918121552213\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.4.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.989999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p79181915162218\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.4.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"15.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1691821562215\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.4.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"43.76%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p12918151522211\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row565497142216\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p6726184944110\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>directories</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.989999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p7726144916414\\\"'>array</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p791457124\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.76%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17726204916417\\\"'>资源目录地址。</p></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002231219589__table965613111225\\\"'></a><a name='\\\"table965613111225\\\"'></a> <table id='\\\"table965613111225\\\"'> <caption> <b>表4 </b>output       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row1265614113223\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.5.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p101419142215\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.5.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p191151910224\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.5.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"15.629999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p16121910221\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.5.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"43.51%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p71111942219\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row365661111228\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p205901064719\\\"'>artifactName</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p6591310174715\\\"'>string</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.629999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1396515127\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.51%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p4591410114711\\\"'>自定义产品生成的应用包名称，可由数字、英文字母、中划线、下划线和英文句号（.）组成，支持输入版本号。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p14881163111019\\\"'>targets字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 62,
        "pre": "\\\"targets\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"source\\\": {\\n       \\\"pages\\\": [         // Stage模型\\n        \\\"pages/Index\\\"\\n      ],\\n      \\\"abilities\\\": [     // FA模型\\n        {\\n          \\\"name\\\": \\\".MainAbility\\\",\\n          \\\"pages\\\": [\\n            \\\"pages/index\\\"\\n          ]\\n        }\\n      ],\\n      \\\"sourceRoots\\\": [\\n        \\\"./src/default\\\"\\n      ]\\n    }\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "source",
        "parent_text": "  source source用于指定target的源码范围。    表6 source          字段名称 类型 是否必选 含义    abilities 对象数组 可选 自定义target的能力范围。 在FA模型工程中支持对Ability源码目录下的page页面进行定制。   pages 字符串数组 可选 Stage模型工程中支持对pages源码目录的page页面进行定制，数组长度至少为1。   sourceRoots 字符串数组 可选 Stage模型工程中支持对差异化代码空间进行定制，数组长度至少为1。数组中的值有以下限制：  必须唯一； 必须为相对路径； 类型必须为文件夹； 文件夹必须真实存在； 文件夹必须与src/main同级；  当数组中存在多个值时，寻址的优先级为数组中值的顺序。    source字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1838814817017\\\"'> <a name='\\\"section1838814817017\\\"'></a><a name='\\\"section1838814817017\\\"'></a> <h4>source</h4> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p19565331152018\\\"'>source用于指定target的源码范围。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table328123144515\\\"'> <caption> <b>表6 </b>source       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row428217314451\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p63841164457\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.49%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p11384101611452\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"15.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p43853163451\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"44.26%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p938517165455\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row192822364512\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1772514974113\\\"'><a href='\\\"#section1281869320\\\"'>abilities</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.49%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p072654917412\\\"'>对象数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p14915510129\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.26%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p955161912274\\\"'>自定义target的能力范围。</p> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p16726949124114\\\"'>在FA模型工程中支持对Ability源码目录下的page页面进行定制。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row528283114514\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p2072644914110\\\"'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section73018336472\\\"'>pages</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.49%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p57261449174114\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1797516129\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.26%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p18726249134117\\\"'>Stage模型工程中支持对pages源码目录的page页面进行定制，数组长度至少为1。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row12282133144511\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p991014472212\\\"'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section18668905913\\\"'>sourceRoots</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.49%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1122535142618\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1491064782116\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.26%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p13762652195514\\\"'>Stage模型工程中支持对差异化代码空间进行定制，数组长度至少为1。数组中的值有以下限制：</p> <ol id='\\\"ZH-CN_TOPIC_0000002231219589__ol111015575559\\\"'> <li id='\\\"li52831812185710\\\"'>必须唯一；</li> <li id='\\\"li667553105614\\\"'>必须为相对路径；</li> <li id='\\\"li10843101012564\\\"'>类型必须为文件夹；</li> <li id='\\\"li12464103016568\\\"'>文件夹必须真实存在；</li> <li id='\\\"li9721124711562\\\"'>文件夹必须与src/main同级；</li> </ol> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p16737185355618\\\"'>当数组中存在多个值时，寻址的优先级为数组中值的顺序。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p102191650155119\\\"'>source字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 63,
        "pre": "\\\"targets\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"config\\\": {\\n      \\\"distributionFilter\\\": {\\n        \\\"apiVersion\\\": {\\n          \\\"policy\\\": \\\"include\\\",\\n          \\\"value\\\": [12]\\n        },\\n        \\\"screenShape\\\": {\\n          \\\"policy\\\": \\\"include\\\",\\n          \\\"value\\\": [\\n            \\\"circle\\\",\\n            \\\"rect\\\"\\n          ]\\n        },\\n        \\\"screenWindow\\\": {\\n          \\\"policy\\\": \\\"include\\\",\\n          \\\"value\\\": [\\n            \\\"454*454\\\",\\n            \\\"466*466\\\"\\n          ]\\n        },\\n        \\\"screenDensity\\\": {\\n          \\\"policy\\\": \\\"exclude\\\",\\n          \\\"value\\\": [\\n            \\\"ldpi\\\",\\n            \\\"xldpi\\\"\\n          ]\\n        },\\n        \\\"countryCode\\\": {\\n          \\\"policy\\\": \\\"include\\\",\\n          \\\"value\\\": [\\n            \\\"CN\\\"\\n          ]\\n        }\\n      }\\n    },\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]countryCode",
        "parent_text": "  [h2]countryCode    表12 countryCode          字段名称 类型 是否必选 含义    policy 字符串 必选 取值规则：  include：需要包含的value属性。 exclude：需要排除的value属性。    value 字符串数组 必选 国家地区码取值，具体值以ISO-3166-1标准为准。支持多个国家和地区枚举定义。    distroFilter/distributionFilter字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section04873351417\\\"'> <a name='\\\"section04873351417\\\"'></a><a name='\\\"section04873351417\\\"'></a> <h4>[h2]countryCode</h4> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table15521183410252\\\"'> <caption> <b>表12 </b>countryCode       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row19521634102510\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.2.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p143736512255\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.2.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p173731251142510\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.2.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p537395142515\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.2.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"43.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17373115112511\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row125221344258\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1639165412186\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>policy</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p11392544185\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1315172061510\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p174202595913\\\"'>取值规则：</p> <ul id='\\\"ZH-CN_TOPIC_0000002231219589__ul1242925185911\\\"'> <li id='\\\"li1342102515910\\\"'>include：需要包含的value属性。</li> <li id='\\\"li1542725125920\\\"'>exclude：需要排除的value属性。</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row4522234142520\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17401454141818\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>value</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p549741633214\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p173151420161520\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p183151934105911\\\"'>国家地区码取值，具体值以ISO-3166-1标准为准。支持多个国家和地区枚举定义。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p123091929162914\\\"'>distroFilter/distributionFilter字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 64,
        "pre": "\\\"targets\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"config\\\": {\\n      \\\"atomicService\\\": {\\n        \\\"preloads\\\": [\\n          {\\n            \\\"moduleName\\\": \\\"preloadSharedLibrary\\\"\\n          }\\n        ]\\n      }\\n    }\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "atomicService",
        "parent_text": "  atomicService    表13 atomicService          字段名称 类型 是否必选 含义    preloads 对象数组 可选 定义当前模块运行时预加载的模块。       表14 preloads          字段名称 类型 是否必选 含义    moduleName 字符串 可选 预加载的模块名称。    atomicService字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section106753237212\\\"'> <a name='\\\"section106753237212\\\"'></a><a name='\\\"section106753237212\\\"'></a> <h4>atomicService</h4> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table269263004116\\\"'> <caption> <b>表13 </b>atomicService       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row15692133084118\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.2.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1483663734110\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.2.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1783623712413\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.2.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1483616378418\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.2.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"43.15%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1683623710410\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row86921730124120\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p6692133011419\\\"'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section206461457101917\\\"'>preloads</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p768185885714\\\"'>对象数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p139081146166\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.15%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1833616815117\\\"'>定义当前模块运行时预加载的模块。</p></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table210917349414\\\"'> <caption> <b>表14 </b>preloads       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row1710993414120\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p48061738194111\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p19806193844116\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"17.22%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p188061938144118\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"42.79%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p980663812414\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row16109193474115\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1814910406015\\\"'>moduleName</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p201491240807\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.22%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p10908114181611\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.79%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p714912401505\\\"'>预加载的模块名称。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p1638313111574\\\"'>atomicService字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 65,
        "pre": "\\\"targets\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"source\\\": {\\n      \\\"abilities\\\": [\\n        {\\n          \\\"name\\\": \\\"EntryAbility\\\",\\n          \\\"icon\\\": \\\"$media:layered_image\\\",\\n          \\\"label\\\": \\\"$string:EntryAbility_label\\\",\\n          \\\"launchType\\\": \\\"singleton\\\"\\n        }\\n      ]\\n    }\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "abilities",
        "parent_text": "  abilities abilities用于自定义target的能力范围。    表15 abilities          字段名称 类型 是否必选 含义    name 字符串 必选 指定target选择的ability的名称。   pages 字符串数组 可选 FA模型中，指定target选择的ability的page。   res 字符串数组 可选 指定资源目录。   icon 字符串 可选 指定ability图标文件的索引，格式为\\\"$media:ability_icon\\\"。   label 字符串 可选 指定对用户可见的名称，要求采用该名称的资源索引，以支持多语言。   launchType 字符串 可选 指定ability的启动模式：  multiton：多实例模式，每次启动创建一个新实例。   standard：同multiton，建议使用multiton替代。 singleton（缺省默认值）：单实例模式，仅第一次启动创建新实例。 specified：指定实例模式，运行时由开发者决定是否创建新实例。     abilities字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1281869320\\\"'> <a name='\\\"section1281869320\\\"'></a><a name='\\\"section1281869320\\\"'></a> <h4>abilities</h4> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p1650483712819\\\"'>abilities用于自定义target的能力范围。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table01511639154810\\\"'> <caption> <b>表15 </b>abilities       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row14152103913488\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p869351911497\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p6693151924918\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"15.45%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p7693101914490\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"44.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p469311194495\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row1115283924817\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17895948122214\\\"'>name</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p11498174152217\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.45%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p74981746228\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p164983492219\\\"'>指定target选择的ability的名称。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row915253964816\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p69441222182311\\\"'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section73018336472\\\"'>pages</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1944182219231\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.45%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p15944112282311\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p29441622122315\\\"'>FA模型中，指定target选择的ability的page。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row0152439144811\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1296672752312\\\"'>res</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p12491358103316\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.45%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1096692732313\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p14966172713231\\\"'>指定资源目录。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row2152193914487\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p18197520112016\\\"'>icon</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17197192072010\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.45%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p7197620172012\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p12197112012011\\\"'>指定ability图标文件的索引，格式为\\\"$media:ability_icon\\\"。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row11526396488\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17422192517200\\\"'>label</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p134228256205\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.45%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p12422102520206\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1442212515209\\\"'>指定对用户可见的名称，要求采用该名称的资源索引，以支持多语言。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row151521639194817\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1333019333207\\\"'>launchType</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p8330203311204\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.45%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p10330143318208\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p4330183311206\\\"'>指定ability的启动模式：</p> <ul id='\\\"ZH-CN_TOPIC_0000002231219589__ul182399577352\\\"'> <li id='\\\"li735462615236\\\"'>multiton：多实例模式，每次启动创建一个新实例。</li> </ul> <ul id='\\\"ZH-CN_TOPIC_0000002231219589__ul12252165082215\\\"'> <li id='\\\"li1725205010220\\\"'>standard：同multiton，建议使用multiton替代。</li> <li id='\\\"li432215172310\\\"'>singleton（缺省默认值）：单实例模式，仅第一次启动创建新实例。</li> <li id='\\\"li2913820192313\\\"'>specified：指定实例模式，运行时由开发者决定是否创建新实例。</li> </ul></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p1955385465415\\\"'>abilities字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 66,
        "pre": "\\\"buildOption\\\": {\\n  \\\"sourceOption\\\": {\\n    \\\"workers\\\": [\\n      \\\"./src/main/ets/common/constants/CommonConstants.ets\\\"\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]sourceOption",
        "parent_text": "  [h2]sourceOption sourceOption是源码相关配置，使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理。    表17 sourceOption          字段名称 类型 是否必选 含义    workers 字符串数组 可选 指定使用node.js工作器的JS/TS源代码，源代码在构建过程中单独处理。    sourceOption字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2611239115413\\\"'> <a name='\\\"section2611239115413\\\"'></a><a name='\\\"section2611239115413\\\"'></a> <h4>[h2]sourceOption</h4> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p61863331616\\\"'>sourceOption是源码相关配置，使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table1079816310620\\\"'> <caption> <b>表17 </b>sourceOption       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row679916317611\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.15.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p237811137611\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.15.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.610000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p163791113863\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.15.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"14.510000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p12379131318617\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.15.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"45.879999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p437918131069\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row87990310610\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17995316619\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>workers</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.610000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p8698746143\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.510000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p866415214327\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"45.879999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p106980416147\\\"'>指定使用node.js工作器的JS/TS源代码，源代码在构建过程中单独处理。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p20110174365817\\\"'>sourceOption字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 67,
        "pre": "# 编译生成的BuildProfile文件\\nexport const DEBUG = false;\\nexport const VERSION_CODE = 100;\\n# 开发者自定义的ets文件\\nimport { DEBUG } from 'BuildProfile';\\nimport { VERSION_CODE } from 'BuildProfile';\\nif (DEBUG)\\n  {XXX} // 该分支会被裁剪掉\\nelse\\n  {XXX}\\nif (VERSION_CODE){XXX} // 该语法发生了类型转换，不支持代码裁剪。\\nif (VERSION_CODE === 100){XXX} // 若需要裁剪代码，使用该方式，显式指定判断条件为boolean类型。",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "是否启用代码分支裁剪，减少编译产物大小，开启后，在release编译模式下，不会被执行到的代码分支会被裁剪掉，示例如下：   true：启用（将导致使用\\\"ApplyChanges\\\"功能时，对const声明的常量的值进行的修改可能不生效）。 false（缺省默认值）：不启用。    说明：    仅支持API 11及以上的Stage模型。 HAR模块仅字节码HAR配置生效，非字节码HAR配置不生效。 仅支持const声明的bool类型常量和const声明的string/number类型常量的判断表达式。 不支持间接导入，例如A文件中定义const变量A1，B文件导入A1，导出B1，ets导入B1进行判断，无法进行裁剪。   ",
        "import_module": null,
        "parent": "<td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.879999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p13187173951415\\\"'>是否启用代码分支裁剪，减少编译产物大小，开启后，在release编译模式下，不会被执行到的代码分支会被裁剪掉，示例如下：</p>  <ul id='\\\"ZH-CN_TOPIC_0000002231219589__ul79731546181514\\\"'> <li id='\\\"li1497324617157\\\"'>true：启用（将导致使用\\\"ApplyChanges\\\"功能时，对const声明的常量的值进行的修改可能不生效）。</li> <li id='\\\"li12340175213158\\\"'>false（缺省默认值）：不启用。</li> </ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231219589__note61871615191514\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <ul id='\\\"ZH-CN_TOPIC_0000002231219589__ul1230203412257\\\"'> <li id='\\\"li530383462514\\\"'>仅支持API 11及以上的Stage模型。</li> <li id='\\\"li194513175319\\\"'>HAR模块仅字节码HAR配置生效，非字节码HAR配置不生效。</li> <li id='\\\"li142810523254\\\"'>仅支持const声明的bool类型常量和const声明的string/number类型常量的判断表达式。</li> <li id='\\\"li524615313118\\\"'>不支持间接导入，例如A文件中定义const变量A1，B文件导入A1，导出B1，ets导入B1进行判断，无法进行裁剪。</li> </ul> </div> </div></td>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 68,
        "pre": "\\\"buildOption\\\": {\\n  \\\"removePermissions\\\": [\\n    {\\n      \\\"name\\\": \\\"ohos.permission.ABILITY_BACKGROUND_COMMUNICATION\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"ohos.permission.ACCELEROMETER\\\"\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]removePermissions",
        "parent_text": "  [h2]removePermissions removePermissions是一个对象数组，用于编译HAP/HSP模块时，指定需要删除的依赖包中的冗余权限，模块本身的权限不会被删除。    表21 removePermissions          字段名称 类型 是否必选 含义    name 字符串 必选 待删除的权限名称，需要包含在依赖包的module.json的requestPermissions中。    removePermissions字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section155111918175715\\\"'> <a name='\\\"section155111918175715\\\"'></a><a name='\\\"section155111918175715\\\"'></a> <h4>[h2]removePermissions</h4> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p185319691419\\\"'>removePermissions是一个对象数组，用于编译HAP/HSP模块时，指定需要删除的依赖包中的冗余权限，模块本身的权限不会被删除。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table84201926101217\\\"'> <caption> <b>表21 </b>removePermissions       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row6420162612127\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p28101730141215\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.610000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1481023013121\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.76%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1781023011212\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"43.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1810930101211\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row342062619127\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17420162616122\\\"'>name</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.610000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1075916512576\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.76%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p12759185195717\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1375955155715\\\"'>待删除的权限名称，需要包含在依赖包的module.json的requestPermissions中。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p10988123431416\\\"'>removePermissions字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 69,
        "pre": "\\\"buildOption\\\": {\\n  \\\"resOptions\\\": {\\n    \\\"copyCodeResource\\\": {\\n      \\\"enable\\\": true,\\n      \\\"excludes\\\": ['./entry/src/main/ets/component/big_picture.png', '**/*.yml', '**/subDir/**'],\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "resOptions",
        "parent_text": "  resOptions resOptions是资源编译配置项。    表22 resOptions          字段名称 类型 是否必选 含义    compression 对象 可选 对工程预置图片资源进行纹理压缩的编译配置参数。   copyCodeResource 对象 可选 对模块的src/main/ets目录下的资源文件（非源码文件）拷贝的编译配置参数。   说明：   该字段对不开启混淆的源码HAR不生效。          表23 copyCodeResource          字段名称 类型 是否必选 含义    enable 布尔值 可选 是否将ets目录下的资源文件打包到产物中。  true（缺省默认值）：打包。 false：不打包。    excludes 字符串数组 可选 根据glob语法排除匹配到的文件，匹配到的文件不会被打包到产物中。当enable配置为false时excludes不生效。    copyCodeResource字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section590873417510\\\"'> <a name='\\\"section590873417510\\\"'></a><a name='\\\"section590873417510\\\"'></a> <h4>resOptions</h4> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p8309611507\\\"'>resOptions是资源编译配置项。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table4607649151111\\\"'> <caption> <b>表22 </b>resOptions       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row460744951120\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p18319637161211\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"12.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p103191637171212\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"13.389999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p3319537101215\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"48.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p14319337141215\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row1960814911117\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p12287842202611\\\"'><a href='\\\"#section2095319147103\\\"'>compression</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1972362618\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.389999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p15915234268\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"48.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1797233267\\\"'>对工程预置图片资源进行纹理压缩的编译配置参数。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row10608154981116\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1766816481933\\\"'><a href='\\\"#table65731476505\\\"'>copyCodeResource</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p206681348734\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.389999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p146683483315\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"48.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1166894811310\\\"'>对模块的src/main/ets目录下的资源文件（非源码文件）拷贝的编译配置参数。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231219589__note67264713111\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p67261276119\\\"'>该字段对<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-har#section197792874110\\\"'>不开启混淆的源码HAR</a>不生效。</p> </div> </div></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002231219589__table65731476505\\\"'></a><a name='\\\"table65731476505\\\"'></a> <table id='\\\"table65731476505\\\"'> <caption> <b>表23 </b>copyCodeResource       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row12573204719508\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.4.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p4381125419502\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.4.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"17.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1238145485018\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.4.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.009999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p738215418501\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.4.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"41.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p838216547501\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row14574147125013\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p811953142\\\"'>enable</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p131194319414\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.009999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p61191436418\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"41.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p151193310411\\\"'>是否将ets目录下的资源文件打包到产物中。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231219589__ul10883167175112\\\"'> <li id='\\\"li4883272516\\\"'>true（缺省默认值）：打包。</li> <li id='\\\"li208833712512\\\"'>false：不打包。</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row45741647155016\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p201191631345\\\"'>excludes</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p2012020317419\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.009999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p41201438415\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"41.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p181201531040\\\"'>根据glob语法排除匹配到的文件，匹配到的文件不会被打包到产物中。当enable配置为false时excludes不生效。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p9969105319542\\\"'>copyCodeResource字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 70,
        "pre": "\\\"buildModeBinder\\\": [\\n  {\\n    \\\"buildModeName\\\": \\\"debug\\\",\\n    \\\"mappings\\\": [\\n      {\\n        \\\"targetName\\\": \\\"default\\\",\\n        \\\"buildOptionName\\\": \\\"release\\\"\\n      }\\n    ]\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "buildModeBinder",
        "parent_text": "  buildModeBinder buildModeBinder是构建模式（debug、release 等）与构建配置（buildOption）的关联配置。通过该配置可以将不同的构建配置和target进行组合，并绑定到对应的构建模式上。如果没有配置buildModeBinder，默认的绑定策略请参考合并编译选项规则。    表30 buildModeBinder          字段名称 类型 是否必选 含义    buildModeName 字符串 可选 构建模式名称，需要在工程级别的buildModeSet中定义。   mappings 对象数组 可选 target和buildOption之间的一对一映射关系。        表31 mappings          字段名称 类型 是否必选 含义    targetName 字符串 可选 target名称。   buildOptionName 字符串 可选 构建配置buildOption名称。    buildModeBinder字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section642017215409\\\"'> <a name='\\\"section642017215409\\\"'></a><a name='\\\"section642017215409\\\"'></a> <h4>buildModeBinder</h4> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p334516362152\\\"'>buildModeBinder是构建模式（debug、release 等）与构建配置（buildOption）的关联配置。通过该配置可以将不同的构建配置和target进行组合，并绑定到对应的构建模式上。如果没有配置buildModeBinder，默认的绑定策略请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-compilation-options-customizing-guide#section1727865610255\\\"'>合并编译选项规则</a>。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table13341642195513\\\"'> <caption> <b>表30 </b>buildModeBinder       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row03584275516\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p16515144710550\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.610000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p8515747205514\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"15.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p17515124714550\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"44.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p351513478556\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row535154225514\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p3727134974117\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>buildModeName</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.610000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1772704914411\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p5752181716327\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1372704974118\\\"'>构建模式名称，需要在工程级别的buildModeSet中定义。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row135134218553\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p2063813874511\\\"'><a href='\\\"#table4672142011561\\\"'>mappings</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.610000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p116381285455\\\"'>对象数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p759113185328\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p263858204510\\\"'>target和buildOption之间的一对一映射关系。</p></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002231219589__table4672142011561\\\"'></a><a name='\\\"table4672142011561\\\"'></a> <table id='\\\"table4672142011561\\\"'> <caption> <b>表31 </b>mappings       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row567232014564\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.4.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p7431182413564\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.4.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p3431122411564\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.4.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"17.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p143102485620\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.4.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"43.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p74318241562\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231219589__row1967217206562\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p16179363455\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>targetName</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p017956144520\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1366141915329\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1317919604515\\\"'>target名称。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231219589__row14672132055612\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p137271649154111\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>buildOptionName</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.56%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p14727349124115\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p3585131923212\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231219589__p1372704954118\\\"'>构建配置buildOption名称。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231219589__p1963724413159\\\"'>buildModeBinder字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile.html"
    },
    {
        "id": 71,
        "pre": "import { safetyDetect } from '@kit.DeviceSecurityKit';\\nimport { BusinessError} from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Device Security Kit模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Device Security Kit模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-urlthreat-check.html"
    },
    {
        "id": 72,
        "pre": "{\\n  \\\"app\\\": {\\n    // bundleName需要与开发者在AppGallery Connect中创建应用时的包名保持一致\\n    \\\"bundleName\\\": \\\"com.huawei.***.***.demo\\\",\\n    // ...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "bundleName配置",
        "parent_text": "bundleName配置工程“AppScope/app.json5”下的bundleName需要与开发者在应用开发准备中创建应用时的包名保持一致。 配置内容示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section196681135122713\\\"'><a name='\\\"section196681135122713\\\"'></a><a name='\\\"section196681135122713\\\"'></a><h4>bundleName配置</h4><p>工程<span class='\\\"filepath\\\"'>“AppScope/app.json5”</span>下的<strong>bundleName</strong>需要与开发者在应用开发准备中<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/application-dev-overview#section13566816173114\\\"' target='\\\"_blank\\\"'>创建应用</a>时的包名保持一致。</p> <p>配置内容示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-config-app-identity-info.html"
    },
    {
        "id": 73,
        "pre": "\\\"module\\\":{\\n    \\\"type\\\": \\\"***\\\",\\n    \\\"name\\\": \\\"***\\\",\\n    \\\"description\\\": \\\"***\\\",\\n    \\\"mainElement\\\": \\\"***\\\",\\n    \\\"deviceTypes\\\": [***],\\n    // ...\\n    \\\"metadata\\\": [\\n      {\\n        \\\"name\\\": \\\"client_id\\\",\\n        \\\"value\\\": \\\"***\\\"\\n      }\\n      // ...\\n    ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程“entry/src/main/module.json5”的module节点增加如下client_id属性配置，用于IAP Kit接口的应用身份鉴权。 ",
        "import_module": null,
        "parent": "<li>在工程<span class='\\\"filepath\\\"'>“entry/src/main/module.json5”</span>的<strong>module</strong>节点增加如下<strong>client_id</strong>属性配置，用于IAP Kit接口的应用身份鉴权。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-config-app-identity-info.html"
    },
    {
        "id": 74,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/no-tabs\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-tabs.html"
    },
    {
        "id": 75,
        "pre": "import { camera } from '@kit.CameraKit';\\nimport { trustedAppService } from '@kit.DeviceSecurityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入camera模块、trustedAppService模块和相关依赖模块。 ",
        "import_module": null,
        "parent": "<li><span>导入camera模块、trustedAppService模块和相关依赖模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-taas-securecamera.html"
    },
    {
        "id": 76,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/unbound-method\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_unbound-method.html"
    },
    {
        "id": 77,
        "pre": "class MyClass {\\n  public logUnbound(): void {\\n    this.logUnbound();\\n  }\\n\\n  public logBound = () => {\\n    this.logUnbound();\\n  };\\n}\\n\\nconst instance = new MyClass();\\n\\n// logBound will always be bound with the correct scope\\nconst logBound = instance.logBound;\\nlogBound();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_unbound-method.html"
    },
    {
        "id": 78,
        "pre": "class MyClass {\\n  public logUnbound(): void {\\n    this.logUnbound();\\n  }\\n\\n  public logBound = () => {\\n    this.logUnbound();\\n  };\\n}\\n\\nconst instance = new MyClass();\\n\\n// logBound will always be bound with the correct scope\\nconst logUnbound = instance.logUnbound;\\nlogUnbound();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_unbound-method.html"
    },
    {
        "id": 79,
        "pre": "@Entry\\n@Component\\nstruct RegisterExample {\\n  pathInfos: NavPathStack = new NavPathStack();\\n  @State ReserveAccount: string = '';\\n  @State ReservePassword: string = '';\\n  @State enAbleAutoFill: boolean = true;\\n\\n  onBackPress() {\\n    // 当非成功登录、返回等页面跳转时将enAbleAutoFill设置为false，密码保险箱不使能\\n    this.enAbleAutoFill = false;\\n    return false;\\n  }\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'register_result_page') {\\n      RegisterResultPage()\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pathInfos) {\\n      Column() {\\n        Text(\\\"注册账号\\\")\\n          .commonTitleStyles()\\n\\n        TextInput({ placeholder: '用户名' })\\n          .commonInputStyles()\\n          .type(InputType.USER_NAME) // 账号框使用USER_NAME属性\\n          .onChange((value: string) => {\\n            this.ReserveAccount = value;\\n          })\\n\\n        TextInput({ placeholder: '新密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.NEW_PASSWORD) // 密码框使用 new Password 属性,可以触发生成强密码\\n          .enableAutoFill(this.enAbleAutoFill)\\n          .passwordRules('begin:[upper],special:[yes],len:[maxlen:32,minlen:12]')\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        Button('页面跳转')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n\\n        Button('页面跳转(跳转前关闭autofill）')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.enAbleAutoFill = false;\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n      }\\n    }\\n    .navDestination(this.PageMap)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}\\n\\n@Component\\nstruct RegisterResultPage {\\n  pathInfos: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text(\\\"Result Page\\\").commonTitleStyles()\\n      }.width('100%').height('100%')\\n    }.title(\\\"Result Page\\\")\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathInfos = context.pathStack;\\n    })\\n  }\\n}\\n\\n@Extend(Text)\\nfunction commonTitleStyles() {\\n  .fontSize(24)\\n  .fontColor('#000000')\\n  .fontWeight(FontWeight.Medium)\\n  .margin({ top: 24, bottom: 16 })\\n}\\n\\n@Extend(TextInput)\\nfunction commonInputStyles() {\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .opacity(0.6)\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n  .margin({ top: 16 })\\n}\\n\\n@Extend(Button)\\nfunction commonButtonStyles() {\\n  .width('100%')\\n  .height(40)\\n  .borderRadius(20)\\n  .margin({ top: 24 })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "注册",
        "parent_text": "注册 示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section176891288111\\\"'><a name='\\\"section176891288111\\\"'></a><a name='\\\"section176891288111\\\"'></a><h4>注册</h4><p><span><img height='\\\"731.2339999999999\\\"' originheight='\\\"791\\\"' originwidth='\\\"368\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120958.16417881470588511044479189116137:50001231000000:2800:7045A9B981B5B1DB301811BEB163938C4E66334DCBC88796DF124633C62D1015.png\\\"' title='\\\"点击放大\\\"' width='\\\"343.14000000000004\\\"'/></span></p> <p>示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-autofill-strong-password.html"
    },
    {
        "id": 80,
        "pre": "@Component\\nstruct RegisterExample {\\n  pathInfos: NavPathStack = new NavPathStack();\\n  @State ReserveAccount: string = '';\\n  @State ReservePassword: string = '';\\n  @State enAbleAutoFill: boolean = true;\\n\\n  onBackPress() {\\n    // 当非成功登录、返回等页面跳转时将enAbleAutoFill设置为false，密码保险箱不使能\\n    this.enAbleAutoFill = false;\\n    return false;\\n  }\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'register_result_page') {\\n      RegisterResultPage()\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pathInfos) {\\n      Column() {\\n        Text(\\\"注册账号\\\")\\n          .commonTitleStyles()\\n\\n        TextInput({ placeholder: '用户名' })\\n          .commonInputStyles()\\n          .type(InputType.USER_NAME) // 账号框使用USER_NAME属性\\n          .onChange((value: string) => {\\n            this.ReserveAccount = value;\\n          })\\n\\n        TextInput({ placeholder: '密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.Password)\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        TextInput({ placeholder: '新密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.NEW_PASSWORD) // 密码框使用 new Password 属性,可以触发生成强密码\\n          .enableAutoFill(this.enAbleAutoFill)\\n          .passwordRules('begin:[upper],special:[yes],len:[maxlen:32,minlen:12]')\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        Button('页面跳转')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n\\n        Button('页面跳转(跳转前关闭autofill）')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.enAbleAutoFill = false;\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n      }\\n    }\\n    .navDestination(this.PageMap)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}\\n\\n@Component\\nstruct RegisterResultPage {\\n  pathInfos: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text(\\\"Result Page\\\").commonTitleStyles()\\n      }.width('100%').height('100%')\\n    }.title(\\\"Result Page\\\")\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathInfos = context.pathStack;\\n    })\\n  }\\n}\\n\\n@Extend(Text)\\nfunction commonTitleStyles() {\\n  .fontSize(24)\\n  .fontColor('#000000')\\n  .fontWeight(FontWeight.Medium)\\n  .margin({ top: 24, bottom: 16 })\\n}\\n\\n@Extend(TextInput)\\nfunction commonInputStyles() {\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .opacity(0.6)\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n  .margin({ top: 16 })\\n}\\n\\n@Extend(Button)\\nfunction commonButtonStyles() {\\n  .width('100%')\\n  .height(40)\\n  .borderRadius(20)\\n  .margin({ top: 24 })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "修改密码",
        "parent_text": "修改密码 示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1960675218114\\\"'><a name='\\\"section1960675218114\\\"'></a><a name='\\\"section1960675218114\\\"'></a><h4>修改密码</h4><p><span><img height='\\\"724.6106000000001\\\"' originheight='\\\"788\\\"' originwidth='\\\"370\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120958.30077424741722328153749096842773:50001231000000:2800:25E1992B8E2820A8B649FB8C129AAE4A936567FC37955E388E1B1EAAB62A6D30.png\\\"' title='\\\"点击放大\\\"' width='\\\"343.14000000000004\\\"'/></span></p> <p>示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-autofill-strong-password.html"
    },
    {
        "id": 81,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-3des\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section124603105118\\\"'><a name='\\\"section124603105118\\\"'></a><a name='\\\"zh-cn_topic_0000002176362197_section124603105118\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-no-unsafe-3des.html"
    },
    {
        "id": 82,
        "pre": "\\\"requestPermissions\\\": [\\n  {\\n    \\\"name\\\": \\\"ohos.permission.INTERNET\\\"\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      在“entry/src/main/module.json5”文件中添加网络权限。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      在“entry/src/main/module.json5”文件中添加网络权限。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-call-function.html"
    },
    {
        "id": 83,
        "pre": "import { cloudFunction } from '@kit.CloudFoundationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在项目中导入cloudFunction组件。",
        "import_module": null,
        "parent": "<li>在项目中导入cloudFunction组件。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-call-function.html"
    },
    {
        "id": 84,
        "pre": "onWindowStageCreate(windowStage: window.WindowStage) {\\n  windowStage.loadContent(\\\"pages/index\\\", (err, data) => {\\n    try {\\n      gamePlayer.init(this.context,()=>{\\n        hilog.info(0x0000, 'testTag', `Succeeded in initing.`);\\n      });\\n    } catch (error) {\\n      let err = error as BusinessError;\\n      hilog.error(0x0000, 'testTag', `Failed to init. Code: ${err.code}, message: ${err.message}`);\\n    }\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 调用init接口初始化Game Service Kit。初始化后，Game Service Kit弹出华为隐私协议，玩家签署协议后，则继续往下执行。     调用init接口时严格要求继承UIAbility，并且获取上下文的时机是onWindowStageCreate生命周期中页面加载成功后。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section3656131977\\\"'> <a name='\\\"section3656131977\\\"'></a><a name='\\\"section3656131977\\\"'></a> <h4>开发步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameplayer#section131971556806\\\"' target='\\\"_blank\\\"'>init</a>接口初始化Game Service Kit。初始化后，Game Service Kit弹出华为隐私协议，玩家签署协议后，则继续往下执行。</p> <div class='\\\"caution\\\"'> <span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120107.13596550185195378986212630552093:50001231000000:2800:8ADC6A218F536E72A051933F210E5DB77523698DF70A6F70D621FB157A963854.png\\\"'/> </span> <div class='\\\"cautionbody\\\"'> <p>调用init接口时严格要求继承UIAbility，并且获取上下文的时机是onWindowStageCreate生命周期中页面加载成功后。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameplayer-init.html"
    },
    {
        "id": 85,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-limit-refresh-scope\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-limit-refresh-scope.html"
    },
    {
        "id": 86,
        "pre": "@Entry\\n@Component\\nstruct StackExample6 {\\n  @State isVisible : boolean = false;\\n  build() {\\n    Column() {\\n      Stack({alignContent: Alignment.Top}) {\\n        Text().width('100%').height('70%').backgroundColor(0xd2cab3)\\n          .align(Alignment.Center).textAlign(TextAlign.Center);\\n        // 此处省略100个相同的背景Text组件\\n        Stack() {\\n          if (this.isVisible) {\\n            Text('New Page').height(\\\"100%\\\").height(\\\"70%\\\").backgroundColor(0xd2cab3)\\n              .align(Alignment.Center).textAlign(TextAlign.Center);\\n          }\\n        }.width('100%').height('70%')\\n      }\\n      Button(\\\"press\\\").onClick(() => {\\n        this.isVisible = !(this.isVisible);\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-limit-refresh-scope.html"
    },
    {
        "id": 87,
        "pre": "@Entry\\n@Component\\nstruct StackExample5 {\\n  @State isVisible : boolean = false;\\n  build() {\\n    Column() {\\n      Stack({alignContent: Alignment.Top}) {\\n        Text().width('100%').height('70%').backgroundColor(0xd2cab3)\\n          .align(Alignment.Center).textAlign(TextAlign.Center);\\n        // 此处省略100个相同的背景Text组件\\n        if (this.isVisible) {\\n          Text('New Page').height(\\\"100%\\\").height(\\\"70%\\\").backgroundColor(0xd2cab3)\\n            .align(Alignment.Center).textAlign(TextAlign.Center);\\n        }\\n      }\\n      Button(\\\"press\\\").onClick(() => {\\n        this.isVisible = !(this.isVisible);\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-limit-refresh-scope.html"
    },
    {
        "id": 88,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-word-break-to-replace-zero-width-space\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-word-break-in-space.html"
    },
    {
        "id": 89,
        "pre": "@Component\\nexport struct MyComponent {\\n  private diskName: string = '';\\n\\n  build() {\\n    Text(this.diskName)\\n      .textAlign(TextAlign.Start)\\n      .wordBreak(WordBreak.BREAK_ALL)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-word-break-in-space.html"
    },
    {
        "id": 90,
        "pre": "@Component\\nexport struct MyComponent {\\n  private diskName: string = '';\\n\\n  build() {\\n    Text(this.diskName.split(\\\"\\\").join(\\\"\\\\u200B\\\"))\\n      .textAlign(TextAlign.Start)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-word-break-in-space.html"
    },
    {
        "id": 91,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netclose-arkts.html"
    },
    {
        "id": 92,
        "pre": "import { scan } from '@kit.NearLinkKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/nearlink-start-scan.html"
    },
    {
        "id": 93,
        "pre": "@Entry\\n@Component\\nstruct FocusOnclickExample {\\n  @State count: number = 0\\n  @State name: string = 'Button'\\n\\n  build() {\\n    Column() {\\n      Button(this.name)\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.count++\\n          if (this.count <= 0) {\\n            this.name = \\\"count is negative number\\\"\\n          } else if (this.count % 2 === 0) {\\n            this.name = \\\"count is even number\\\"\\n          } else {\\n            this.name = \\\"count is odd number\\\"\\n          }\\n        }).height(60)\\n    }.height('100%').width('100%').justifyContent(FlexAlign.Center)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "焦点与按键事件",
        "parent_text": "  焦点与按键事件 当组件获焦且存在点击事件（onClick）或单指单击事件（TapGesture）时，回车和空格会触发对应的事件回调。      点击事件（onClick）或单指单击事件（TapGesture）在回车、空格触发对应事件回调时，默认不冒泡传递，即父组件对应按键事件不会被同步触发。 按键事件（onKeyEvent）默认冒泡传递，即同时会触发父组件的按键事件回调。 组件同时存在点击事件（onClick）和按键事件（onKeyEvent），在回车、空格触发时，两者都会响应。 获焦组件响应点击事件（onClick），与焦点激活态无关。      ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"焦点与按键事件\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459005__%E7%84%A6%E7%82%B9%E4%B8%8E%E6%8C%89%E9%94%AE%E4%BA%8B%E4%BB%B6\\\"'></a><a name='\\\"%E7%84%A6%E7%82%B9%E4%B8%8E%E6%8C%89%E9%94%AE%E4%BA%8B%E4%BB%B6\\\"'></a> <h4>焦点与按键事件</h4> <p>当组件获焦且存在点击事件（onClick）或单指单击事件（TapGesture）时，回车和空格会触发对应的事件回调。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120417.27936816426976480115444394859090:50001231000000:2800:3FF980A661FCA2B8A00DC189A934250F71DEA7011711271B1EF8047A39A61D52.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ol> <li>点击事件（onClick）或单指单击事件（TapGesture）在回车、空格触发对应事件回调时，默认不冒泡传递，即父组件对应<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-universal-events-key\\\"' target='\\\"_blank\\\"'>按键事件</a>不会被同步触发。</li> <li>按键事件（onKeyEvent）默认冒泡传递，即同时会触发父组件的按键事件回调。</li> <li>组件同时存在点击事件（onClick）和按键事件（onKeyEvent），在回车、空格触发时，两者都会响应。</li> <li>获焦组件响应点击事件（onClick），与焦点激活态无关。</li> </ol> </div> </div>  <p><span><img originheight='\\\"235\\\"' originwidth='\\\"340\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120417.31809772321952206015841125716600:50001231000000:2800:EA6BB7F20CB0B278FB3154FFCBAFFEFBF2D61AF74726A04AD9605FE4384FC39A.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-common-events-focus-event.html"
    },
    {
        "id": 94,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-ecdsa\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section5750215396\\\"'><a name='\\\"section5750215396\\\"'></a><a name='\\\"section5750215396\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-ecdsa.html"
    },
    {
        "id": 95,
        "pre": "{               \\n  \\\"scripts\\\": {\\n    \\\"scriptName1\\\": \\\"echo hello\\\",\\n    \\\" scriptName 2\\\": \\\"ohpm run scriptName 1\\\",\\n    \\\" scriptName 3\\\": \\\"node test.js -- -paramKey1 paramValue1 -paramKey2=paramValue2 --paramKey3 paramValue3\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "指定运行定义在模块的 oh-package.json5 文件中 scripts 对象内的脚本。scripts对象内部支持\\\"key\\\":\\\"value\\\"方式配置多个待执行脚本。如以下示例所示，scriptName 1、scriptName 2、scriptName 3为脚本别名（scriptName）；“echo hello”等为（scriptContent），后续内容均参考此说明。 oh-package.json5中scripts配置示例：  ",
        "import_module": null,
        "parent": "<li id='\\\"li12437174644612\\\"'>指定运行定义在模块的 oh-package.json5 文件中 scripts 对象内的脚本。<p id='\\\"ZH-CN_TOPIC_0000002166648832__p09481247164612\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648832__li12437174644612\\\"'></a><a name='\\\"li12437174644612\\\"'></a>scripts对象内部支持\\\"key\\\":\\\"value\\\"方式配置多个待执行脚本。如以下示例所示，scriptName 1、scriptName 2、scriptName 3为脚本别名（scriptName）；“echo hello”等为（scriptContent），后续内容均参考此说明。</p> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166648832__p171123424520\\\"'>oh-package.json5中scripts配置示例： </div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-run.html"
    },
    {
        "id": 96,
        "pre": "{\\n  \\\"name\\\": \\\"example\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"this is an example for ohpm run.\\\",\\n  \\\"main\\\": \\\"./src/index.ets\\\",\\n  \\\"author\\\": \\\"oh\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"scripts\\\": {\\n    \\\"testLogic\\\": \\\"ohpm run testFail || ohpm run testSuc && ohpm run testSuc\\\",\\n    \\\"testFail\\\": \\\"test1\\\",\\n    \\\"testSuc\\\": \\\"echo hello\\\"\\n  }\\n  ...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "oh-package.json5配置如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"zh-cn_topic_0000001792216413_示例\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648832__zh-cn_topic_0000001792216413_%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"zh-cn_topic_0000001792216413_%E7%A4%BA%E4%BE%8B\\\"'></a><p id='\\\"ZH-CN_TOPIC_0000002166648832__zh-cn_topic_0000001792216413_p1144143393204137\\\"'>oh-package.json5配置如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-run.html"
    },
    {
        "id": 97,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-update-policy.html"
    },
    {
        "id": 98,
        "pre": "import {har} from 'Har'\\n@Entry\\n@Component\\nstruct Index {\\n  @State har: string = 'Har';\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.har)\\n          .fontSize(50)\\n          .fontWeight(FontWeight.Bold)\\n          .onClick(() => {\\n            let entryClass = new EntryClass();\\n            entryClass.callHarFunction();\\n          })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n\\nclass EntryClass {\\n  callHarFunction() {\\n    har()\\n  }\\n}",
        "type": "Reference",
        "function_call": "function har()",
        "function_name": "堆栈解析方案说明",
        "parent_text": "  堆栈解析方案说明 以如下代码为例。 Entry模块通过独立har包形式引用har模块中的har方法：  @Component\\nexport struct MainPage {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n          .fontSize(50)\\n          .fontWeight(FontWeight.Bold)\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n\\nexport function har() {\\n  BigInt(1.1)\\n} 生成的crash如下： at har (entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js:58:58)\\nat i (entry|entry|1.0.0|src/main/ets/pages/Index.ts:71:71)\\nat anonymous (entry|entry|1.0.0|src/main/ets/pages/Index.ts:55:55) crash中，包含混淆后的方法名（或属性名）、路径信息以及混淆后的行列号信息，其中：  方法名在配置相应混淆规则后，会进行混淆处理（例如上述例子中EntryClass的callHarFunction被混淆为i）。方法名混淆前后的映射关系保存在对应模块编译产物的nameCache文件中。 路径信息格式为：引用方entry-packageName|被引用方packageName|version|源码相对路径，其中packageName以及version保存在对应模块编译产物的sourcemap文件中。 行列号混淆前后的映射关系保存在对应模块编译产物的sourcemap文件中，可利用文件对应的mappings字段进行解析还原。  在对堆栈进行还原时，可分为以下三步：  根据路径信息，找到引用方模块sourcemap。例如第一条堆栈：at har (entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js:58:58) 根据路径信息entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js，可在entry模块sourcemap文件中找到如下字段： \\\"entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js\\\": {\\n    \\\"version\\\": 3,\\n    \\\"file\\\": \\\"MainPage.js\\\",\\n    \\\"sources\\\": [\\n      \\\"oh_modules/.ohpm/Har@ue9rwlwgmslvadnmypsedjcin6a=/oh_modules/Har/src/main/ets/components/mainpage/MainPage.js\\\"\\n    ],\\n    \\\"names\\\": [],\\n    \\\"mappings\\\": \\\"AAAA,IAAA,CAAA,CAAA,sBAAA,IAAA,MAAA,CAAA,SAAA,CAAA,EAAA;IACA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,SAAA,EAAA,sBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA,CAAA;CACA;AACA,MAAA,OAAA,QAAA,SAAA,MAAA;IACA,YAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,SAAA,EAAA,CAAA;QACA,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QACA,IAAA,OAAA,CAAA,KAAA,UAAA,EAAA;YACA,IAAA,CAAA,gBAAA,GAAA,CAAA,CAAA;SACA;QACA,IAAA,EAAA,GAAA,IAAA,wBAAA,CAAA,aAAA,EAAA,IAAA,EAAA,SAAA,CAAA,CAAA;QACA,IAAA,CAAA,yBAAA,IAAA,CAAA;QACA,IAAA,CAAA,oBAAA,EAAA,CAAA;IACA,CAAA;IACA,yBAAA,CAAA,EAAA;QACA,IAAA,GAAA,OAAA,KAAA,SAAA,EAAA;YACA,IAAA,CAAA,OAAA,GAAA,GAAA,OAAA,CAAA;SACA;IACA,CAAA;IACA,eAAA,CAAA,CAAA;IACA,CAAA;IACA,iCAAA,CAAA,CAAA;QACA,IAAA,EAAA,CAAA,uBAAA,CAAA,CAAA,CAAA,CAAA;IACA,CAAA;IACA,gBAAA;QACA,IAAA,EAAA,CAAA,gBAAA,EAAA,CAAA;QACA,iBAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;QACA,IAAA,CAAA,wBAAA,EAAA,CAAA;IACA,CAAA;IACA,IAAA,OAAA;QACA,OAAA,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA;IACA,CAAA;IACA,IAAA,OAAA,CAAA,EAAA;QACA,IAAA,EAAA,CAAA,GAAA,IAAA,CAAA;IACA,CAAA;IACA,aAAA;QACA,IAAA,CAAA,yBAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA;YACA,GAAA,CAAA,MAAA,EAAA,CAAA;YACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;QACA,CAAA,EAAA,GAAA,CAAA,CAAA;QACA,IAAA,CAAA,yBAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;YACA,MAAA,CAAA,MAAA,EAAA,CAAA;YACA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;QACA,CAAA,EAAA,MAAA,CAAA,CAAA;QACA,IAAA,CAAA,yBAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;YACA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;YACA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAAA;YACA,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA;QACA,CAAA,EAAA,IAAA,CAAA,CAAA;QACA,IAAA,CAAA,GAAA,EAAA,CAAA;QACA,MAAA,CAAA,GAAA,EAAA,CAAA;QACA,GAAA,CAAA,GAAA,EAAA,CAAA;IACA,CAAA;IACA,QAAA;QACA,IAAA,CAAA,mBAAA,EAAA,CAAA;IACA,CAAA;CACA;AACA,MAAA,UAAA,GAAA;IACA,MAAA,CAAA,GAAA,CAAA,CAAA;AACA,CAAA\\\",\\n    \\\"entry-package-info\\\": \\\"entry|1.0.0\\\",\\n    \\\"package-info\\\": \\\"har|1.0.0\\\"\\n  }  利用对应sourcemap信息进行堆栈路径以及行列号还原：基于步骤1找到的sourcemap信息，根据sources及mappings字段进行解析，可以将路径以及行列号还原如下： at har (oh_modules/.ohpm/Har@ue9rwlwgmslvadnmypsedjcin6a=/oh_modules/Har/src/main/ets/components/mainpage/MainPage.js:58:58) 该文件位于entry模块oh_modules路径下。 如果对应sourcemap中包含package-info字段，则可以利用package-info中对应模块的sourcemap，对该条堆栈进行二次解析。例如该堆栈中包package-info为har|1.0.0，可利用har中的sourcemap对该堆栈进行再次解析，方案如下：  由路径中最后一个oh_modules起，向下两级，截断上述第一次解析结果路径，结果如下：src/main/ets/components/mainpage/MainPage.js 上述路径拼接package-info， 拼接方式为：packageName|packageName|version|截断路径，得到拼接路径如下：har|har|1.0.0|src/main/ets/components/mainpage/MainPage.js 利用拼接后的路径，在har模块sourcemap文件中找到如下字段：\\\"har|har|1.0.0|src/main/ets/components/mainpage/MainPage.js\\\": {\\n  \\\"version\\\": 3,\\n  \\\"file\\\": \\\"MainPage.ets\\\",\\n  \\\"sources\\\": [\\n    \\\"har/src/main/ets/components/mainpage/MainPage.ets\\\"\\n  ],\\n  \\\"names\\\": [],\\n  \\\"mappings\\\": \\\";;;AAEA,MAAA,OAAA,QAAA,SAAA,MAAA;IADA,YAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA,CAAA,EAAA,IAAA,SAAA,EAAA,CAAA;;;;;;;;IADyB,CAAA;;;;;;;;;;;;;;;;;;;;;;IAKvB,aAAA;;;;;;;;;;;;YAGM,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA;;;;;IAOL,CAAA;;;;;AAGH,MAAA,UAAA,GAAA;;AAEA,CAAA\\\",\\n  \\\"entry-package-info\\\": \\\"har|1.0.0\\\"\\n} 根据该sourcemap的sources及mappings字段进行再次解析，可得到该堆栈对应的源码信息为：at har (har/src/main/ets/components/mainpage/MainPage.ets:20:1)   利用nameCache文件，对方法名进行解析还原。以第二条堆栈为例： at i (entry|entry|1.0.0|src/main/ets/pages/Index.ts:71:71) 通过步骤1与步骤2，将该堆栈路径以及行列号信息进行解析，结果如下： at i (entry/src/main/ets/pages/Index.ets:25:3) 在对应模块编译产物中的nameCache文件中，通过解析后的文件路径找到如下字段： \\\"entry/src/main/ets/pages/Index.ets\\\": {\\n  \\\"IdentifierCache\\\": {\\n    \\\"Index#initialRender#__function\\\": \\\"o\\\",\\n    \\\"Index#initialRender#$2#__function\\\": \\\"t\\\",\\n    \\\"Index#initialRender#$2#$0#entryClass\\\": \\\"u\\\",\\n    \\\"$0#__function\\\": \\\"a1\\\"\\n  },\\n  \\\"MemberMethodCache\\\": {\\n    \\\"initialRender:6:20\\\": \\\"initialRender\\\",\\n    \\\"callHarFunction:24:26\\\": \\\"i\\\"\\n  },\\n  \\\"obfName\\\": \\\"entry/src/main/ets/pages/Index.ets\\\"\\n} 该字段的IdentifierCache与MemberMethodCache中保存了方法名混淆前后的映射关系，对应格式为： \\\"源码方法名:该方法起始行号:该方法结束行号\\\":\\\"混淆后方法名\\\"。 第二条堆栈混淆后的方法名为\\\"i\\\"，利用上述字段对该方法名进行还原：  在上述字段中找出所有混淆后方法名为\\\"i\\\"的条目，可能存在多个，该字段中为：\\\"callHarFunction:24:26\\\": \\\"i\\\" 找到行号范围包含步骤2中还原后行号的条目，根据步骤2得到还原后的行号为25，包含在24-26之内，因此可以得到源码对应方法名为\\\"callHarFunction\\\"。  通过上述方式，可以得到源码的方法名。  步骤2与步骤3所得结果进行整合，得到最终堆栈结果如下：at har (har/src/main/ets/components/mainpage/MainPage.ets:20:1)\\nat callHarFunction (entry/src/main/ets/pages/Index.ets:25:3)\\nat anonymous (entry/src/main/ets/pages/Index.ets:14:47)   通过上述方式，即可利用编译产物对release应用的crash信息进行解析还原。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section3259141085218\\\"'> <a name='\\\"section3259141085218\\\"'></a><a name='\\\"section3259141085218\\\"'></a> <h4>堆栈解析方案说明</h4> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p0256141011520\\\"'>以如下代码为例。</p> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p0256171011523\\\"'>Entry模块通过独立har包形式引用har模块中的har方法：</p>  <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen0259910175218\\\"'>@Component\\nexport struct MainPage {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n          .fontSize(50)\\n          .fontWeight(FontWeight.Bold)\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n\\nexport function har() {\\n  BigInt(1.1)\\n}</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p9259161018523\\\"'>生成的crash如下：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen15259110125214\\\"'>at har (entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js:58:58)\\nat i (entry|entry|1.0.0|src/main/ets/pages/Index.ts:71:71)\\nat anonymous (entry|entry|1.0.0|src/main/ets/pages/Index.ts:55:55)</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p3780161284112\\\"'>crash中，包含混淆后的方法名（或属性名）、路径信息以及混淆后的行列号信息，其中：</p> <ul id='\\\"ZH-CN_TOPIC_0000002166648684__ul041984816559\\\"'> <li id='\\\"li84191548205510\\\"'>方法名在配置相应混淆规则后，会进行混淆处理（例如上述例子中EntryClass的callHarFunction被混淆为i）。方法名混淆前后的映射关系保存在对应模块编译产物的nameCache文件中。</li> <li id='\\\"li9369088569\\\"'>路径信息格式为：引用方entry-packageName|被引用方packageName|version|源码相对路径，其中packageName以及version保存在对应模块编译产物的sourcemap文件中。</li> <li id='\\\"li2320183165811\\\"'>行列号混淆前后的映射关系保存在对应模块编译产物的sourcemap文件中，可利用文件对应的mappings字段进行解析还原。</li> </ul> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p11779201015155\\\"'>在对堆栈进行还原时，可分为以下三步：</p> <ol id='\\\"ZH-CN_TOPIC_0000002166648684__ol8268115641512\\\"'> <li id='\\\"li526885681520\\\"'><span>根据路径信息，找到引用方模块sourcemap。例如第一条堆栈：</span><p></p><pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen13578234111712\\\"'>at har (entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js:58:58)</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p189861759183\\\"'>根据路径信息entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js，可在entry模块sourcemap文件中找到如下字段：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen534397171911\\\"'>\\\"entry|har|1.0.0|src/main/ets/components/mainpage/MainPage.js\\\": {\\n    \\\"version\\\": 3,\\n    \\\"file\\\": \\\"MainPage.js\\\",\\n    \\\"sources\\\": [\\n      \\\"oh_modules/.ohpm/Har@ue9rwlwgmslvadnmypsedjcin6a=/oh_modules/Har/src/main/ets/components/mainpage/MainPage.js\\\"\\n    ],\\n    \\\"names\\\": [],\\n    \\\"mappings\\\": \\\"AAAA,IAAA,CAAA,CAAA,sBAAA,IAAA,MAAA,CAAA,SAAA,CAAA,EAAA;IACA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,SAAA,EAAA,sBAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA,CAAA;CACA;AACA,MAAA,OAAA,QAAA,SAAA,MAAA;IACA,YAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,SAAA,EAAA,CAAA;QACA,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;QACA,IAAA,OAAA,CAAA,KAAA,UAAA,EAAA;YACA,IAAA,CAAA,gBAAA,GAAA,CAAA,CAAA;SACA;QACA,IAAA,EAAA,GAAA,IAAA,wBAAA,CAAA,aAAA,EAAA,IAAA,EAAA,SAAA,CAAA,CAAA;QACA,IAAA,CAAA,yBAAA,IAAA,CAAA;QACA,IAAA,CAAA,oBAAA,EAAA,CAAA;IACA,CAAA;IACA,yBAAA,CAAA,EAAA;QACA,IAAA,GAAA,OAAA,KAAA,SAAA,EAAA;YACA,IAAA,CAAA,OAAA,GAAA,GAAA,OAAA,CAAA;SACA;IACA,CAAA;IACA,eAAA,CAAA,CAAA;IACA,CAAA;IACA,iCAAA,CAAA,CAAA;QACA,IAAA,EAAA,CAAA,uBAAA,CAAA,CAAA,CAAA,CAAA;IACA,CAAA;IACA,gBAAA;QACA,IAAA,EAAA,CAAA,gBAAA,EAAA,CAAA;QACA,iBAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;QACA,IAAA,CAAA,wBAAA,EAAA,CAAA;IACA,CAAA;IACA,IAAA,OAAA;QACA,OAAA,IAAA,EAAA,CAAA,GAAA,EAAA,CAAA;IACA,CAAA;IACA,IAAA,OAAA,CAAA,EAAA;QACA,IAAA,EAAA,CAAA,GAAA,IAAA,CAAA;IACA,CAAA;IACA,aAAA;QACA,IAAA,CAAA,yBAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA;YACA,GAAA,CAAA,MAAA,EAAA,CAAA;YACA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;QACA,CAAA,EAAA,GAAA,CAAA,CAAA;QACA,IAAA,CAAA,yBAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;YACA,MAAA,CAAA,MAAA,EAAA,CAAA;YACA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;QACA,CAAA,EAAA,MAAA,CAAA,CAAA;QACA,IAAA,CAAA,yBAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;YACA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;YACA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAAA;YACA,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA;QACA,CAAA,EAAA,IAAA,CAAA,CAAA;QACA,IAAA,CAAA,GAAA,EAAA,CAAA;QACA,MAAA,CAAA,GAAA,EAAA,CAAA;QACA,GAAA,CAAA,GAAA,EAAA,CAAA;IACA,CAAA;IACA,QAAA;QACA,IAAA,CAAA,mBAAA,EAAA,CAAA;IACA,CAAA;CACA;AACA,MAAA,UAAA,GAAA;IACA,MAAA,CAAA,GAAA,CAAA,CAAA;AACA,CAAA\\\",\\n    \\\"entry-package-info\\\": \\\"entry|1.0.0\\\",\\n    \\\"package-info\\\": \\\"har|1.0.0\\\"\\n  }</pre> <p></p></li> <li id='\\\"li55836253246\\\"'><span>利用对应sourcemap信息进行堆栈路径以及行列号还原：</span><p></p><p id='\\\"ZH-CN_TOPIC_0000002166648684__p576631272520\\\"'>基于步骤1找到的sourcemap信息，根据sources及mappings字段进行解析，可以将路径以及行列号还原如下：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen3862202943610\\\"'>at har (oh_modules/.ohpm/Har@ue9rwlwgmslvadnmypsedjcin6a=/oh_modules/Har/src/main/ets/components/mainpage/MainPage.js:58:58)</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p55251749103612\\\"'>该文件位于entry模块oh_modules路径下。</p> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p716116234388\\\"'>如果对应sourcemap中包含package-info字段，则可以利用package-info中对应模块的sourcemap，对该条堆栈进行二次解析。例如该堆栈中包package-info为har|1.0.0，可利用har中的sourcemap对该堆栈进行再次解析，方案如下：</p> <ol id='\\\"ZH-CN_TOPIC_0000002166648684__ol9613255133817\\\"'> <li id='\\\"li86139551385\\\"'>由路径中最后一个oh_modules起，向下两级，截断上述第一次解析结果路径，结果如下：<pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen1272171614547\\\"'>src/main/ets/components/mainpage/MainPage.js</pre></li> <li id='\\\"li136131355133811\\\"'>上述路径拼接package-info， 拼接方式为：packageName|packageName|version|截断路径，得到拼接路径如下：<pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen17377111715811\\\"'>har|har|1.0.0|src/main/ets/components/mainpage/MainPage.js</pre></li> <li id='\\\"li1561315513818\\\"'>利用拼接后的路径，在har模块sourcemap文件中找到如下字段：<pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen916319194486\\\"'>\\\"har|har|1.0.0|src/main/ets/components/mainpage/MainPage.js\\\": {\\n  \\\"version\\\": 3,\\n  \\\"file\\\": \\\"MainPage.ets\\\",\\n  \\\"sources\\\": [\\n    \\\"har/src/main/ets/components/mainpage/MainPage.ets\\\"\\n  ],\\n  \\\"names\\\": [],\\n  \\\"mappings\\\": \\\";;;AAEA,MAAA,OAAA,QAAA,SAAA,MAAA;IADA,YAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA,CAAA,EAAA,IAAA,SAAA,EAAA,CAAA;;;;;;;;IADyB,CAAA;;;;;;;;;;;;;;;;;;;;;;IAKvB,aAAA;;;;;;;;;;;;YAGM,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA;;;;;IAOL,CAAA;;;;;AAGH,MAAA,UAAA,GAAA;;AAEA,CAAA\\\",\\n  \\\"entry-package-info\\\": \\\"har|1.0.0\\\"\\n}</pre></li> <li id='\\\"li3538115803818\\\"'>根据该sourcemap的sources及mappings字段进行再次解析，可得到该堆栈对应的源码信息为：<pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen2096211984917\\\"'>at har (har/src/main/ets/components/mainpage/MainPage.ets:20:1)</pre></li> </ol> <p></p></li> <li id='\\\"li178006299817\\\"'><span>利用nameCache文件，对方法名进行解析还原。</span><p></p><p id='\\\"ZH-CN_TOPIC_0000002166648684__p381912351011\\\"'>以第二条堆栈为例：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen11668122121211\\\"'>at i (entry|entry|1.0.0|src/main/ets/pages/Index.ts:71:71)</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p4532233105\\\"'>通过步骤1与步骤2，将该堆栈路径以及行列号信息进行解析，结果如下：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen17910319141316\\\"'>at i (entry/src/main/ets/pages/Index.ets:25:3)</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p12648124711134\\\"'>在对应模块编译产物中的nameCache文件中，通过解析后的文件路径找到如下字段：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen92531357111519\\\"'>\\\"entry/src/main/ets/pages/Index.ets\\\": {\\n  \\\"IdentifierCache\\\": {\\n    \\\"Index#initialRender#__function\\\": \\\"o\\\",\\n    \\\"Index#initialRender#$2#__function\\\": \\\"t\\\",\\n    \\\"Index#initialRender#$2#$0#entryClass\\\": \\\"u\\\",\\n    \\\"$0#__function\\\": \\\"a1\\\"\\n  },\\n  \\\"MemberMethodCache\\\": {\\n    \\\"initialRender:6:20\\\": \\\"initialRender\\\",\\n    \\\"callHarFunction:24:26\\\": \\\"i\\\"\\n  },\\n  \\\"obfName\\\": \\\"entry/src/main/ets/pages/Index.ets\\\"\\n}</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p12343102161\\\"'>该字段的IdentifierCache与MemberMethodCache中保存了方法名混淆前后的映射关系，对应格式为：</p> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p1623533216207\\\"'>\\\"源码方法名:该方法起始行号:该方法结束行号\\\":\\\"混淆后方法名\\\"。</p> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p782162922517\\\"'>第二条堆栈混淆后的方法名为\\\"i\\\"，利用上述字段对该方法名进行还原：</p> <ol id='\\\"ZH-CN_TOPIC_0000002166648684__ol2015714294119\\\"'> <li id='\\\"li1515711294117\\\"'>在上述字段中找出所有混淆后方法名为\\\"i\\\"的条目，可能存在多个，该字段中为：<pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen227084820269\\\"'>\\\"callHarFunction:24:26\\\": \\\"i\\\"</pre></li> <li id='\\\"li20157182104116\\\"'>找到行号范围包含步骤2中还原后行号的条目，根据步骤2得到还原后的行号为25，包含在24-26之内，因此可以得到源码对应方法名为\\\"callHarFunction\\\"。</li> </ol> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p1382334217311\\\"'>通过上述方式，可以得到源码的方法名。</p> <p></p></li> <li id='\\\"li99213633413\\\"'><span>步骤2与步骤3所得结果进行整合，得到最终堆栈结果如下：</span><p></p><pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648684__screen18216103817335\\\"'>at har (har/src/main/ets/components/mainpage/MainPage.ets:20:1)\\nat callHarFunction (entry/src/main/ets/pages/Index.ets:25:3)\\nat anonymous (entry/src/main/ets/pages/Index.ets:14:47)</pre> <p></p></li> </ol> <p id='\\\"ZH-CN_TOPIC_0000002166648684__p1924928153517\\\"'>通过上述方式，即可利用编译产物对release应用的crash信息进行解析还原。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-command-line-hstack.html"
    },
    {
        "id": 99,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/file-naming-convention\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-file-naming-convention.html"
    },
    {
        "id": 100,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/file-naming-convention\\\": [\\\"error\\\", { \\\"selector\\\": \\\"code\\\" }]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "选项",
        "parent_text": "选项该规则默认检查代码文件和资源文件的命名风格，也可以接受一个对象作为参数{selector: string}，来指定只检查代码文件或者资源文件。\\\"selector\\\"支持配置为\\\"resources\\\"或者\\\"code\\\"。 示例： 1.以下配置只检查代码文件命名风格：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section182418564158\\\"'><a name='\\\"section182418564158\\\"'></a><a name='\\\"section182418564158\\\"'></a><h4>选项</h4><p id='\\\"ZH-CN_TOPIC_0000002202129149__p157697119168\\\"'>该规则默认检查代码文件和资源文件的命名风格，也可以接受一个对象作为参数{selector: string}，来指定只检查代码文件或者资源文件。\\\"selector\\\"支持配置为\\\"resources\\\"或者\\\"code\\\"。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129149__p15384152922212\\\"'>示例：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129149__p4190169203\\\"'>1.以下配置只检查代码文件命名风格：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-file-naming-convention.html"
    },
    {
        "id": 101,
        "pre": "import { BackupExtensionAbility, BundleVersion } from '@kit.CoreFileKit';\\n\\nconst TAG = `BackupExtensionAbility`;\\n\\n/**\\n * serviceExt进程入口\\n */\\nexport default class BackupExtension extends  BackupExtensionAbility {\\n  onBackup () {\\n    console.log(TAG,`onBackup ok`);\\n  }\\n\\n  /**\\n   * 数据恢复处理接口。接口是同步接口，其内部所有的异步操作请进行同步等待。\\n   *\\n   * @param bundleVersion 版本信息\\n   */\\n  async onRestore (bundleVersion : BundleVersion): Promise<void> {\\n    console.log(TAG, `onRestore ok ${JSON.stringify(bundleVersion)}`);\\n    //bundleVersion.name的前缀为“0.0.0.0”时，表示终端设备从HarmonyOS升级到HarmonyOS NEXT数据迁移场景\\n    if (bundleVersion.name.startsWith(\\\"0.0.0.0\\\")){\\n      // 在此处实现终端设备从HarmonyOS 4.x升级到HarmonyOS NEXT后，应用数据的转换和迁移\\n      // 涉及异步操作请进行同步等待\\n      console.log(TAG, `HarmonyOS to HarmonyOS NEXT scenario`);\\n    } else {\\n      // 在此处实现从HarmonyOS NEXT设备迁移到HarmonyOS NEXT设备后，应用数据的处理。无特殊要求，可以空实现\\n      // 涉及异步操作请进行同步等待\\n      console.log(TAG, `Other scenario`);\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "终端设备从HarmonyOS升级到HarmonyOS NEXT中，会将原有APK应用沙箱目录中文件放置到HarmonyOS备份恢复目录。对应关系详见APK应用沙箱目录与备份恢复目录映射关系。  1、单个应用设定的最长数据迁移时间为十五分钟，超过十五分钟还未完成应用数据迁移的应用，应用数据迁移会失败。 2、应用的“BackupExtensionAbility”执行完后，“备份恢复框架”会清空备份恢复目录，开发者请在应用的“BackupExtensionAbility”执行结束前，完成所有所需数据的转换和迁移。  ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>终端设备从HarmonyOS升级到HarmonyOS NEXT中，会将原有APK应用沙箱目录中文件放置到HarmonyOS备份恢复目录。对应关系详见<a href='\\\"#section14434142512513\\\"'>APK应用沙箱目录与备份恢复目录映射关系</a>。 <div class='\\\"caution\\\"'><span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120502.00515909069891865837571598345556:50001231000000:2800:80A9339792E5BE8ACFF21A1D7A51B3C83810066F010B1266DDBA5A2C6842C336.png\\\"'/> </span><div class='\\\"cautionbody\\\"'><p>1、单个应用设定的最长数据迁移时间为十五分钟，超过十五分钟还未完成应用数据迁移的应用，应用数据迁移会失败。</p> <p>2、应用的“BackupExtensionAbility”执行完后，“备份恢复框架”会清空备份恢复目录，开发者请在应用的“BackupExtensionAbility”执行结束前，完成所有所需数据的转换和迁移。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-data-migration-adaptation.html"
    },
    {
        "id": 102,
        "pre": "{\\n  \\\"allowToBackupRestore\\\": true,\\n  \\\"extraInfo\\\": {\\n    \\\"supportScene\\\": [\\n      \\\"hmos2next\\\"\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "参考示例代码实现元数据资源文件配置。 ",
        "import_module": null,
        "parent": "<li><span>参考示例代码实现元数据资源文件配置。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-data-migration-adaptation.html"
    },
    {
        "id": 103,
        "pre": "\\\"extensionAbilities\\\": [\\n  {\\n    \\\"description\\\": \\\"DemoBackupExtension\\\",\\n    \\\"icon\\\": \\\"$media:app_icon\\\",\\n    \\\"name\\\": \\\"BackupExtensionAbility\\\",\\n    \\\"srcEntry\\\": \\\"./ets/backupExtension/BackupExtension.ets\\\",  // 对应BackupExtension.ets在代码仓中的位置\\n    \\\"type\\\": \\\"backup\\\",                                         // 类型需要选择backup\\n    \\\"exported\\\": false,\\n    \\\"metadata\\\": [                                             // 对应注册的元数据资源\\n      {\\n        \\\"name\\\": \\\"ohos.extension.backup\\\",\\n        \\\"resource\\\": \\\"$profile:backup_config\\\"\\n      }\\n    ]\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "开发者需要在entry内的module.json5里面进行注册,参考示例代码实现元数据资源文件配置。  ",
        "import_module": null,
        "parent": "<li><span>开发者需要在entry内的module.json5里面进行注册,参考示例代码实现元数据资源文件配置。</span><p></p><p></p>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-data-migration-adaptation.html"
    },
    {
        "id": 104,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-extraneous-class\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extraneous-class.html"
    },
    {
        "id": 105,
        "pre": "export const version = 42;\\n\\nexport function isProduction() {\\n  return version === 'production'.length;\\n}\\n\\nexport function logHelloWorld() {\\n  console.log('Hello, world!');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extraneous-class.html"
    },
    {
        "id": 106,
        "pre": "export class StaticConstants {\\n  public static readonly version = 'development'.length;\\n\\n  public static isProduction() {\\n    return StaticConstants.version === 'production'.length;\\n  }\\n}\\n\\nexport class HelloWorldLogger {\\n  public constructor() {\\n    console.log('Hello, world!');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extraneous-class.html"
    },
    {
        "id": 107,
        "pre": "private onPlayerChangedEventCallback(result: gamePlayer.PlayerChangedResult) {\\n  if (result.event === gamePlayer.PlayerChangedEvent.SWITCH_GAME_ACCOUNT) {\\n     // ...\\n    // 游戏号已切换，完成本地缓存清理工作后，再次调用unionLogin接口等\\n  }\\n}\\n// ...\\n// 调用on接口注册playerChanged事件监听\\ntry {\\n  gamePlayer.on('playerChanged', this.onPlayerChangedEventCallback);\\n  hilog.info(0x0000, 'testTag', `Succeeded in registering.`);\\n} catch (error) {\\n  let err = error as BusinessError;\\n  hilog.error(0x0000, 'testTag', `Failed to register. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 调用on接口注册playerChanged监听事件。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section171692054877\\\"'> <a name='\\\"section171692054877\\\"'></a><a name='\\\"section171692054877\\\"'></a> <h4>开发步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameplayer#section1097616266227\\\"' target='\\\"_blank\\\"'>on</a>接口注册playerChanged监听事件。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameplayer-on.html"
    },
    {
        "id": 108,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/switch-exhaustiveness-check\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_switch-exhaustiveness-check.html"
    },
    {
        "id": 109,
        "pre": "type Day =\\n  | 'Monday'\\n  | 'Tuesday'\\n  | 'Wednesday'\\n  | 'Thursday'\\n  | 'Friday'\\n  | 'Saturday'\\n  | 'Sunday';\\n\\ndeclare const day1: Day;\\n\\nlet result = '0';\\n\\nswitch (day1) {\\n  case 'Monday':\\n    result = '1';\\n    break;\\n  case 'Tuesday':\\n    result = '2';\\n    break;\\n  case 'Wednesday':\\n    result = '3';\\n    break;\\n  case 'Thursday':\\n    result = '4';\\n    break;\\n  case 'Friday':\\n    result = '5';\\n    break;\\n  case 'Saturday':\\n    result = '6';\\n    break;\\n  case 'Sunday':\\n    result = '7';\\n    break;\\n}\\n\\ndeclare const day2: Day;\\n\\nresult = '0';\\n\\nswitch (day2) {\\n  case 'Monday':\\n    result = '1';\\n    break;\\n  default:\\n    result = '42';\\n}\\nconsole.info(result);\\n\\nenum Fruit {\\n  apple = 'apple',\\n  banana = 'banana',\\n  cherry = 'cherry'\\n}\\n\\ndeclare const fruit: Fruit;\\n\\nswitch (fruit) {\\n  case Fruit.apple:\\n    console.log('an apple');\\n    break;\\n\\n  case Fruit.banana:\\n    console.log('a banana');\\n    break;\\n\\n  case Fruit.cherry:\\n    console.log('a cherry');\\n    break;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_switch-exhaustiveness-check.html"
    },
    {
        "id": 110,
        "pre": "type Day =\\n  | 'Monday'\\n  | 'Tuesday'\\n  | 'Wednesday'\\n  | 'Thursday'\\n  | 'Friday'\\n  | 'Saturday'\\n  | 'Sunday';\\n\\ndeclare const day: Day;\\nlet result = '0';\\n\\nswitch (day) {\\n  // 只处理了'Monday'，缺少其他值的判断，并且也没有default分支\\n  case 'Monday':\\n    result = '1';\\n    break;\\n}\\nconsole.info(result);",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_switch-exhaustiveness-check.html"
    },
    {
        "id": 111,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-redeclare\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-redeclare.html"
    },
    {
        "id": 112,
        "pre": "let a = '3';\\na = '10';\\nconsole.info(a);\\n\\nexport class C {\\n  static {\\n    let c = '3';\\n    c = '10';\\n    console.info(c);\\n  }\\n\\n  public foo() {\\n    let b = '3';\\n    b = '10';\\n    console.info(b);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-redeclare.html"
    },
    {
        "id": 113,
        "pre": "// 不允许重复声明变量a\\nconst a = '3';\\nconst a = '10';\\n\\nexport class C {\\n  static {\\n    // 不允许重复声明变量c\\n    const c = '3';\\n    const c = '10';\\n  }\\n\\n  public foo() {\\n    // 不允许重复声明变量b\\n    const b = '3';\\n    const b = '10';\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-redeclare.html"
    },
    {
        "id": 114,
        "pre": "import { InstantShapeGenerator, ShapeInfo} from '@kit.Penkit';",
        "type": "Import",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 1.导入相关模块。  2.构造包含一笔成型能力，下面以控件为例： @Component\\nstruct InstantShapeDemo {\\n  private instantShapeGenerator: InstantShapeGenerator = new InstantShapeGenerator();\\n\\n  private shapeString: string = \\\"\\\";\\n\\n  private points: DrawPathPointModel[] = [];\\n  // 绘制路径\\n  private drawPath = new Path2D();\\n\\n  private shapePath = new Path2D();\\n\\n  private mShapeSuccess = false;\\n\\n  private shapeType: number = -1;\\n\\n  private settings: RenderingContextSettings = new RenderingContextSettings(true);\\n\\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);\\n\\n  // 通过回调方法获取识别结果\\n  private shapeInfoCallback = (shapeInfo: ShapeInfo) => {\\n    this.shapeString = shapeInfo.shapeString;\\n    this.shapePath = shapeInfo.shapePath;\\n    this.shapeType = shapeInfo.shapeType;\\n    this.mShapeSuccess = true;\\n    this.context.beginPath();\\n    this.context.reset();\\n    this.drawCurrentPathModel(this.shapePath);\\n  }\\n\\n  aboutToAppear() {\\n    console.info('InstantShapeGenerator aboutToAppear');\\n    // 设置触发识别的暂停时间\\n    this.instantShapeGenerator?.setPauseTime(280);\\n    // 注册完成时的回调方法\\n    this.instantShapeGenerator?.onShapeRecognized(this.shapeInfoCallback);\\n  }\\n  aboutToDisappear(){\\n    console.info('InstantShapeGenerator aboutToDisappear')\\n    this.instantShapeGenerator?.release();\\n  }\\n  build() {\\n    Stack({ alignContent: Alignment.TopEnd }) {\\n      Canvas(this.context)\\n        .width('100%')\\n        .height('100%')\\n        .onAreaChange((oldValue: Area, newValue: Area) => {\\n          // 通知组件大小更改。形状的大小（例如圆的半径）根据组件尺寸而变化\\n          this.instantShapeGenerator?.notifyAreaChange(Number(newValue.width), Number(newValue.height));\\n        }).onTouch((event: TouchEvent) => {\\n        // 传递触摸事件\\n        this.instantShapeGenerator?.processTouchEvent(event);\\n        switch (event.type) {\\n          case TouchType.Down:\\n            this.moveStart(event.touches[0]?.x, event.touches[0]?.y);\\n            break;\\n          case TouchType.Move:\\n            this.moveUpdate(event.touches[0]?.x, event.touches[0]?.y);\\n            break;\\n          case TouchType.Up:\\n            this.moveEnd();\\n            break;\\n        }\\n      })\\n    }.height('100%').width('100%')\\n  }\\n\\n  moveStart(x: number, y: number) {\\n    this.points.push({x: x, y: y})\\n    this.drawPath.moveTo(x, y);\\n    this.drawCurrentPathModel(this.drawPath);\\n    this.mShapeSuccess = false;\\n  }\\n\\n  moveUpdate(x: number, y: number) {\\n    let lastPoint = this.points[this.points.length - 1];\\n    this.points.push({x: x, y: y});\\n    this.drawPath.quadraticCurveTo((x + lastPoint?.x) / 2, (y + lastPoint?.y) / 2, x, y);\\n    if (!this.mShapeSuccess) {\\n      this.drawCurrentPathModel(this.drawPath);\\n    }\\n  }\\n\\n  moveEnd() {\\n    this.points = [];\\n    this.drawPath = new Path2D();\\n    this.shapePath = new Path2D();\\n  }\\n\\n  private drawCurrentPathModel(path : Path2D) {\\n    this.context.globalCompositeOperation = 'source-over';\\n    this.context.lineWidth = 8;\\n    this.context.strokeStyle = \\\"#ED1B1B\\\";\\n    this.context.lineJoin = 'round';\\n    this.context.stroke(path);\\n  }\\n}\\n\\nexport class DrawPathPointModel {\\n  x: number = 0;\\n  y: number = 0;\\n} ",
        "import_module": "import { InstantShapeGenerator, ShapeInfo} from '@kit.Penkit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section9378192011914\\\"'> <a name='\\\"section9378192011914\\\"'></a><a name='\\\"section9378192011914\\\"'></a> <h4>开发步骤</h4> <p>1.导入相关模块。</p>  <p>2.构造包含一笔成型能力，下面以控件为例：</p> <pre class='\\\"screen\\\"'><span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@Component</span>\\nstruct <span rgb(80,120,116);\\\"=\"\" style='\\\"color:'>InstantShapeDemo </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>instantShapeGenerator</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>InstantShapeGenerator </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>InstantShapeGenerator</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeString</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>string </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>\\\"\\\"</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>points</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>DrawPathPointModel</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[] </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[]</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>绘制路径</span>\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>drawPath </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Path2D</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapePath </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Path2D</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>mShapeSuccess </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>false<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= -</span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>1</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>settings</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>RenderingContextSettings </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>RenderingContextSettings</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>true<span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>CanvasRenderingContext2D </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>CanvasRenderingContext2D</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>settings</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>通过回调方法获取识别结果</span>\\n  private <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeInfoCallback </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeInfo</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>ShapeInfo</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeString </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeInfo</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeString</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapePath </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeInfo</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapePath</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeType </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeInfo</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>mShapeSuccess </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>true<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>beginPath</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>reset</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>drawCurrentPathModel</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapePath</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>aboutToAppear</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>console</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>info</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'InstantShapeGenerator aboutToAppear'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>    // </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>设置触发识别的暂停时间</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>instantShapeGenerator</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>setPauseTime</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>280</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>    // </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>注册完成时的回调方法</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>instantShapeGenerator</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>onShapeRecognized</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapeInfoCallback</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>aboutToDisappear</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>console</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>info</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'InstantShapeGenerator aboutToDisappear'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>instantShapeGenerator</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>release</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>build</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Stack</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>alignContent</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Alignment</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TopEnd </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Canvas</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>onAreaChange</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>((</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>oldValue</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>Area</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>newValue</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>Area</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>          // </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>通知组件大小更改。形状的大小（例如圆的半径）根据组件尺寸而变化</span>\\n          this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>instantShapeGenerator</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>notifyAreaChange</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Number</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>newValue</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Number</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>newValue</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>))</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n        <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>onTouch</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>((</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>TouchEvent</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>        // </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>传递触摸事件</span>\\n        this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>instantShapeGenerator</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>processTouchEvent</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n        switch <span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>type</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n          case <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TouchType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Down</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>:</span>\\n            this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>moveStart</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>touches</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[</span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>0</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>]</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>touches</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[</span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>0</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>]</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n            break<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n          case <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TouchType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Move</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>:</span>\\n            this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>moveUpdate</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>touches</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[</span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>0</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>]</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>touches</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[</span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>0</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>]</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n            break<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n          case <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TouchType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Up</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>:</span>\\n            this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>moveEnd</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n            break<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n        <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>      }</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n    <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>moveStart</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>points</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>push</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>drawPath</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>moveTo</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>drawCurrentPathModel</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>drawPath</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>mShapeSuccess </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>false<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>moveUpdate</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    let <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>lastPoint </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>points</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>points</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>length </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>- </span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>1</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>]</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>points</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>push</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>drawPath</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>quadraticCurveTo</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>((</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>+ </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>lastPoint</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>/ </span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>2</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>+ </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>lastPoint</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>/ </span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>2</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    if <span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>!</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>mShapeSuccess</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n      this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>drawCurrentPathModel</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>drawPath</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>  }</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>moveEnd</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>points </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>[]</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>drawPath </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Path2D</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>shapePath </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Path2D</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  private <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>drawCurrentPathModel</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>path </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>Path2D</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>globalCompositeOperation </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'source-over'</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>lineWidth </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>8</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>strokeStyle </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>\\\"#ED1B1B\\\"</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>lineJoin </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'round'</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>context</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>stroke</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>path</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\nexport class <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>DrawPathPointModel </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>x</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>0</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>y</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>0</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span></pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pen-instant-shape.html"
    },
    {
        "id": 115,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-rsa-encrypt\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section6106133813226\\\"'><a name='\\\"section6106133813226\\\"'></a><a name='\\\"section6106133813226\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-rsa-encrypt.html"
    },
    {
        "id": 116,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-includes\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-includes.html"
    },
    {
        "id": 117,
        "pre": "const str: string = 'hello';\\nconst array: string[] = ['hello'];\\nconst readonlyArray: readonly string[] = ['hello'];\\n\\nconst num = -1;\\nlet vv = str.indexOf('h') !== num;\\nvv = vv && array.indexOf('h') !== num;\\nvv = vv && readonlyArray.indexOf('h') !== num;\\nexport { vv };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-includes.html"
    },
    {
        "id": 118,
        "pre": "import { insightIntent } from '@kit.IntentsKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n// 根据实际代码上下文自行传入合适的context\\ninsightIntent.getSid(context, false) // 优先获取缓存SID，改为true则强制从云侧获取新SID\\n  .then((sid: string) => {\\n    // 获取SID成功\\n    console.info('getSid succeed!');\\n  }).catch((error: BusinessError) => {\\n  // 获取SID失败\\n  console.error(`getSid failed! error=${error.code} reason=${error.message}`);\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      云侧事件捐赠凭证SID（Service OpenID）优先从缓存获取，当缓存获取失败可以强制从云侧获取新的SID。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      云侧事件捐赠凭证SID（Service OpenID）优先从缓存获取，当缓存获取失败可以强制从云侧获取新的SID。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/intents-event-rec-access-programme.html"
    },
    {
        "id": 119,
        "pre": "import { insightIntent, InsightIntentExecutor } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n/**\\n * 意图调用样例 */\\nexport default class InsightIntentExecutorImpl extends InsightIntentExecutor {\\n  private static readonly VIEW_REPAYMENT = 'ViewRepayment';\\n  /**\\n   * override 执行前台UIAbility意图\\n   *\\n   * @param name 意图名称\\n   * @param param 意图参数\\n   * @param pageLoader 窗口\\n   * @returns 意图调用结果\\n   */\\n  onExecuteInUIAbilityForegroundMode(intentName: string, param: Record<string, Object>, pageLoader: window.WindowStage):\\n    Promise<insightIntent.ExecuteResult> {\\n    // 根据意图名称分发处理逻辑。接入方可根据实际业务实现页面跳转\\n    switch (intentName) {\\n      case InsightIntentExecutorImpl.VIEW_REPAYMENT:\\n        return this.viewRepayment(param, pageLoader);\\n      default:\\n        break;\\n    }\\n    return Promise.resolve({\\n      code: -1,\\n      result: {\\n        message: 'unknown intent'\\n      }\\n    } as insightIntent.ExecuteResult)\\n  }\\n\\n  /**\\n   * 实现调用查看还款功能\\n   *\\n   * @param param 意图参数\\n   * @param pageLoader 窗口\\n   */\\n  private viewRepayment(param: Record<string, Object>, pageLoader: window.WindowStage): Promise<insightIntent.ExecuteResult> {\\n    return new Promise((resolve, reject) => {\\n      let para: Record<string, string> = {\\n        'result': JSON.stringify(param)\\n      };\\n      let localStorage: LocalStorage = new LocalStorage(para);\\n      // TODO 实现意图调用，loadContent的入参为查看还款落地页路径，例如：'pages/Index'\\n      pageLoader.loadContent('pages/Index', localStorage)\\n        .then(() => {\\n          let entityId: string = (param.items as Array<object>)?.[0]?.['entityId'];\\n          // TODO 调用成功的情况，此处可以打印日志\\n          resolve({\\n            code: 0,\\n            result: {\\n              message: 'Intent execute succeed'\\n            }\\n          });\\n        })\\n        .catch((err: BusinessError) => {\\n          // TODO 调用失败的情况\\n          resolve({\\n            code: -1,\\n            result: {\\n              message: 'Intent execute failed'\\n            }\\n          })\\n        });\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在对应的方法中传递意图参数（param），并拉起对应落地页（如还款页面）。",
        "import_module": null,
        "parent": "<li>在对应的方法中传递意图参数（param），并拉起对应落地页（如还款页面）。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/intents-event-rec-access-programme.html"
    },
    {
        "id": 120,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]插入数据源",
        "parent_text": "  [h2]插入数据源 1.导入运动健康服务功能模块及相关公共模块。  2.创建数据源。 let dataSource: healthStore.DataSourceBase = {\\n  deviceInfo: {\\n    uniqueId: 'test',\\n    name: 'test', // 插入数据源时此字段必填\\n    category: healthStore.DeviceCategory.WEARABLE_BAND, // 插入数据源时此字段必填\\n    productId: '0554', // 插入数据源时此字段必填\\n    model: 'lotana',\\n    manufacturer: 'HUAWEI',\\n    mac: 'testDeviceMac',\\n    sn: 'testDeviceSn',\\n    hardwareVersion: '1',\\n    softwareVersion: '2',\\n    firmwareVersion: '3',\\n    udid: ''\\n  }\\n}       3.调用insertDataSource方法执行插入请求，并处理返回结果。      try {\\n  const dataSourceId = await healthStore.insertDataSource(dataSource);\\n  hilog.info(0x0000, 'testTag', `Succeeded in inserting dataSource, the dataSourceId is ${dataSourceId}.`);\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to insert dataSource. Code: ${err.code}, message: ${err.message}`);\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section132511914154611\\\"'> <a name='\\\"section132511914154611\\\"'></a><a name='\\\"section132511914154611\\\"'></a> <h4>[h2]插入数据源</h4> <p>1.导入运动健康服务功能模块及相关公共模块。</p>  <p>2.创建数据源。</p> <pre class='\\\"typescript\\\"'>let dataSource: healthStore.DataSourceBase = {\\n  deviceInfo: {\\n    uniqueId: 'test',\\n    name: 'test', // 插入数据源时此字段必填\\n    category: healthStore.DeviceCategory.WEARABLE_BAND, // 插入数据源时此字段必填\\n    productId: '0554', // 插入数据源时此字段必填\\n    model: 'lotana',\\n    manufacturer: 'HUAWEI',\\n    mac: 'testDeviceMac',\\n    sn: 'testDeviceSn',\\n    hardwareVersion: '1',\\n    softwareVersion: '2',\\n    firmwareVersion: '3',\\n    udid: ''\\n  }\\n}</pre> <div class='\\\"p\\\"'>      3.调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/health-api-healthstore#section127081351115614\\\"' target='\\\"_blank\\\"'>insertDataSource</a>方法执行插入请求，并处理返回结果。      <pre class='\\\"typescript\\\"'>try {\\n  const dataSourceId = await healthStore.insertDataSource(dataSource);\\n  hilog.info(0x0000, 'testTag', `Succeeded in inserting dataSource, the dataSourceId is ${dataSourceId}.`);\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to insert dataSource. Code: ${err.code}, message: ${err.message}`);\\n}</pre> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-datasource-manage.html"
    },
    {
        "id": 121,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]读取数据源",
        "parent_text": "  [h2]读取数据源 1.导入运动健康服务功能模块及相关公共模块。  2.创建数据源读取请求。 let readSourceRequest: healthStore.DataSourceReadRequest = {\\n  deviceUniqueId: 'testudidupdate'\\n}       3.调用readDataSource方法执行查询请求，并处理返回结果。      try {\\n  let dataSources = await healthStore.readDataSource(readSourceRequest);\\n  dataSources.forEach((dataSource) => {\\n    hilog.info(0x0000, 'testTag', `Succeeded in reading dataSource, the dataSourceId is ${dataSource.dataSourceId}.`);\\n  });\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to read dataSource. Code: ${err.code}, message: ${err.message}`);\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section16754185118545\\\"'> <a name='\\\"section16754185118545\\\"'></a><a name='\\\"section16754185118545\\\"'></a> <h4>[h2]读取数据源</h4> <p>1.导入运动健康服务功能模块及相关公共模块。</p>  <p>2.创建数据源读取请求。</p> <pre class='\\\"typescript\\\"'>let readSourceRequest: healthStore.DataSourceReadRequest = {\\n  deviceUniqueId: 'testudidupdate'\\n}</pre> <div class='\\\"p\\\"'>      3.调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/health-api-healthstore#section1275644314589\\\"' target='\\\"_blank\\\"'>readDataSource</a>方法执行查询请求，并处理返回结果。      <pre class='\\\"typescript\\\"'>try {\\n  let dataSources = await healthStore.readDataSource(readSourceRequest);\\n  dataSources.forEach((dataSource) =&gt; {\\n    hilog.info(0x0000, 'testTag', `Succeeded in reading dataSource, the dataSourceId is ${dataSource.dataSourceId}.`);\\n  });\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to read dataSource. Code: ${err.code}, message: ${err.message}`);\\n}</pre> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-datasource-manage.html"
    },
    {
        "id": 122,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]更新数据源",
        "parent_text": "  [h2]更新数据源 1.导入运动健康服务功能模块及相关公共模块。  2.创建数据源。 let newDataSource: healthStore.DataSource = {\\n  deviceInfo: {\\n    uniqueId: 'test',\\n    name: 'test',\\n    category: healthStore.DeviceCategory.WEARABLE_BAND,\\n    productId: '0554',\\n    model: 'lotana',\\n    manufacturer: 'HUAWEI',\\n    mac: 'testDeviceMac',\\n    sn: 'testDeviceSn',\\n    hardwareVersion: '1',\\n    softwareVersion: '2',\\n    firmwareVersion: '3',\\n    // 修改udid\\n    udid: 'updateudid'\\n  },\\n  // 此处dataSourceId值为开发步骤插入数据源时，返回的dataSourceId\\n  dataSourceId: 'xxx'\\n}       3.调用updateDataSource方法执行更新请求，并处理返回结果。      try {\\n  await healthStore.updateDataSource(newDataSource);\\n  hilog.info(0x0000, 'testTag', 'Succeeded in updating dataSource.');\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to update dataSource. Code: ${err.code}, message: ${err.message}`);\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section0955142718247\\\"'> <a name='\\\"section0955142718247\\\"'></a><a name='\\\"section0955142718247\\\"'></a> <h4>[h2]更新数据源</h4> <p>1.导入运动健康服务功能模块及相关公共模块。</p>  <p>2.创建数据源。</p> <pre class='\\\"typescript\\\"'>let newDataSource: healthStore.DataSource = {\\n  deviceInfo: {\\n    uniqueId: 'test',\\n    name: 'test',\\n    category: healthStore.DeviceCategory.WEARABLE_BAND,\\n    productId: '0554',\\n    model: 'lotana',\\n    manufacturer: 'HUAWEI',\\n    mac: 'testDeviceMac',\\n    sn: 'testDeviceSn',\\n    hardwareVersion: '1',\\n    softwareVersion: '2',\\n    firmwareVersion: '3',\\n    // 修改udid\\n    udid: 'updateudid'\\n  },\\n  // 此处dataSourceId值为开发步骤插入数据源时，返回的dataSourceId\\n  dataSourceId: 'xxx'\\n}</pre> <div class='\\\"p\\\"'>      3.调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/health-api-healthstore#section7156914939\\\"' target='\\\"_blank\\\"'>updateDataSource</a>方法执行更新请求，并处理返回结果。      <pre class='\\\"typescript\\\"'>try {\\n  await healthStore.updateDataSource(newDataSource);\\n  hilog.info(0x0000, 'testTag', 'Succeeded in updating dataSource.');\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to update dataSource. Code: ${err.code}, message: ${err.message}`);\\n}</pre> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-datasource-manage.html"
    },
    {
        "id": 123,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nqueryEnvironmentStatus() {\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.queryEnvironmentStatus(context).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in querying environment status.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query environment status. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "检查应用引入IAP Kit的可用性。在使用应用内支付之前，应用客户端需要向IAP Kit发送queryEnvironmentStatus请求，以此判断用户当前登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，则隐藏相关IAP功能入口。     当前IAP Kit支持结算的国家/地区仅有中国大陆。   ",
        "import_module": null,
        "parent": "<li id='\\\"li10155114713258\\\"'>检查应用引入IAP Kit的可用性。<p id='\\\"ZH-CN_TOPIC_0000002239886709__p151551747192517\\\"'><a name='\\\"ZH-CN_TOPIC_0000002239886709__li10155114713258\\\"'></a><a name='\\\"li10155114713258\\\"'></a>在使用应用内支付之前，应用客户端需要向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section192192415554\\\"' target='\\\"_blank\\\"'>queryEnvironmentStatus</a>请求，以此判断用户当前登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，则隐藏相关IAP功能入口。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002239886709__note15155194712259\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120120.88222982107228231625003058935641:50001231000000:2800:3B9BCC6E98DEAB68F0EFA37889C99D8D60725D715CF96826A69B26D711B6C979.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002239886709__p4155154782514\\\"'>当前IAP Kit支持结算的国家/地区仅有中国大陆。</p> </div> </div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-purchase.html"
    },
    {
        "id": 124,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ncreatePurchase() {\\n  const createPurchaseParam: iap.PurchaseParameter = {\\n    // iap.ProductType.CONSUMABLE：消耗型商品\\n    // iap.ProductType.NONCONSUMABLE：非消耗型商品\\n    productType: iap.ProductType.CONSUMABLE,\\n    // productId需要替换成开发者在AppGallery Connect网站配置商品信息时设置的“商品ID”\\n    productId: 'ohos_consume_001'\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.createPurchase(context, createPurchaseParam).then(async (result) => {\\n    console.info('Succeeded in creating purchase.');\\n    // 购买成功，处理购买结果\\n    // dealPurchaseResult实现请参见下一步\\n    this.dealPurchaseResult(result);\\n  }).catch((err: BusinessError) => {\\n    // 购买失败\\n    console.error(`Failed to create purchase. Code is ${err.code}, message is ${err.message}`);\\n    // dealPurchaseError实现请参见下一步\\n    this.dealPurchaseError(err);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]发起购买",
        "parent_text": "  [h2]发起购买 用户发起购买时，应用客户端向IAP Kit发送createPurchase请求来拉起IAP Kit收银台。发起请求时，需在请求参数PurchaseParameter中携带此前已在华为AppGallery Connect网站上配置并生效的商品ID，并根据实际配置指定其productType。 如需单次购买多个商品（仅消耗型商品），可在PurchaseParameter中拼接quantity参数，quantity取值范围1-10。     开发过程中易出现频繁调用接口的现象，建议控制接口调用频度，具体可参见1001860004 接口访问过频。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1019127147\\\"'> <a name='\\\"section1019127147\\\"'></a><a name='\\\"section1019127147\\\"'></a> <h4>[h2]发起购买</h4> <p>用户发起购买时，应用客户端向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section18798154545516\\\"' target='\\\"_blank\\\"'>createPurchase</a>请求来拉起IAP Kit收银台。发起请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1340120344598\\\"' target='\\\"_blank\\\"'>PurchaseParameter</a>中携带此前已在华为<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>网站上配置并生效的商品ID，并根据实际配置指定其productType。</p> <p>如需单次购买多个商品（仅消耗型商品），可在PurchaseParameter中拼接quantity参数，quantity取值范围1-10。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120120.91196650156386184691971427290142:50001231000000:2800:D46050F0CC7A7E7BB3C767F276988CDB97579121EDB862E09C5E95EB7C1F275E.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>开发过程中易出现频繁调用接口的现象，建议控制接口调用频度，具体可参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-error-code#section10919174355114\\\"' target='\\\"_blank\\\"'>1001860004 接口访问过频</a>。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-purchase.html"
    },
    {
        "id": 125,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n// JWSUtil为自定义类，可参见示例代码\\nimport { JWSUtil } from '../common/JWSUtil';\\n\\ndealPurchaseResult(result: iap.CreatePurchaseResult) {\\n  const jwsPurchaseOrder: string = JSON.parse(result.purchaseData).jwsPurchaseOrder;\\n  if (!jwsPurchaseOrder) {\\n    return;\\n  }\\n  // 对jwsPurchaseOrder进行解码验签\\n  const purchaseStr = JWSUtil.decodeJwsObj(jwsPurchaseOrder);\\n  // 需自定义PurchaseOrderPayload类，包含的信息请参见PurchaseOrderPayload\\n  const purchaseOrderPayload = JSON.parse(purchaseStr) as PurchaseOrderPayload;\\n  // 处理发货\\n  // ...\\n  // 发货成功后向IAP Kit发送finishPurchase请求，确认发货，完成购买\\n  // finishPurchase请求的参数来源于purchaseOrderPayload\\n  this.finishPurchase(purchaseOrderPayload);\\n}\\n\\n/**\\n * 确认发货，完成购买\\n *\\n * @param purchaseOrder 订单信息，来源于购买请求\\n */\\nfinishPurchase(purchaseOrder: PurchaseOrderPayload) {\\n  const finishPurchaseParam: iap.FinishPurchaseParameter = {\\n    productType: Number(purchaseOrder.productType),\\n    purchaseToken: purchaseOrder.purchaseToken,\\n    purchaseOrderId: purchaseOrder.purchaseOrderId\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.finishPurchase(context, finishPurchaseParam).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in finishing purchase.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to finish purchase. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "完成购买。发放权益后，应用客户端需要发送finishPurchase请求确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发送finishPurchase请求时，需在请求参数FinishPurchaseParameter中携带PurchaseOrderPayload中的productType、purchaseToken、purchaseOrderId。 应用成功执行此步骤后，IAP服务器会将相应商品标记为已发货状态。对于消耗型商品，IAP服务器会将相应商品重新设置为可购买状态，用户即可再次购买该商品。对于非消耗型商品，用户购买后永久拥有，无法再次购买该商品。 ",
        "import_module": null,
        "parent": "<li>完成购买。<p>发放权益后，应用客户端需要发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>请求确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section103714142118\\\"' target='\\\"_blank\\\"'>FinishPurchaseParameter</a>中携带<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>中的productType、purchaseToken、purchaseOrderId。</p> <p>应用成功执行此步骤后，IAP服务器会将相应商品标记为已发货状态。对于消耗型商品，IAP服务器会将相应商品重新设置为可购买状态，用户即可再次购买该商品。对于非消耗型商品，用户购买后永久拥有，无法再次购买该商品。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-purchase.html"
    },
    {
        "id": 126,
        "pre": "function createPhotoSession(cameraManager: camera.CameraManager): camera.Session | undefined {\\n  let session: camera.Session | undefined = undefined;\\n  try {\\n    // 创建Session会话并指定为NORMAL_PHOTO模式\\n    session = cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO) as camera.PhotoSession;\\n  } catch (error) {\\n    let err = error as BusinessError;\\n    console.error(`Failed to create the session instance. error: ${JSON.stringify(err)}`);\\n  }\\n  return session;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "创建Session会话并指定模式",
        "parent_text": "创建Session会话并指定模式相机使用预览等功能前，均需创建相机会话，调用CameraManager的createSession创建一个会话。 创建会话时需指定SceneMode为NORMAL_PHOTO或NORMAL_VIDEO，创建出的Session处于拍照或录像模式。 以创建Session会话并指定为NORMAL_PHOTO模式为例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section20428202912114\\\"'><a name='\\\"section20428202912114\\\"'></a><a name='\\\"section20428202912114\\\"'></a><h4>创建Session会话并指定模式</h4><p>相机使用预览等功能前，均需创建相机会话，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#cameramanager\\\"' target='\\\"_blank\\\"'>CameraManager</a>的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#createsession11\\\"' target='\\\"_blank\\\"'>createSession</a>创建一个会话。</p> <p>创建会话时需指定<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#scenemode11\\\"' target='\\\"_blank\\\"'>SceneMode</a>为NORMAL_PHOTO或NORMAL_VIDEO，创建出的Session处于拍照或录像模式。</p> <p>以创建Session会话并指定为NORMAL_PHOTO模式为例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-framerate.html"
    },
    {
        "id": 127,
        "pre": "async function sessionConfig(cameraManager: camera.CameraManager, cameraInput: camera.CameraInput,\\n  previewOutput: camera.PreviewOutput): Promise<void> {\\n  try {\\n    let session: camera.Session | undefined = undefined;\\n    // 创建CaptureSession实例\\n    session = createPhotoSession(cameraManager);\\n    if (session === undefined) {\\n      return;\\n    }\\n    // 开始配置会话\\n    session.beginConfig();\\n    // 把CameraInput加入到会话\\n    session.addInput(cameraInput);\\n    // 把previewOutput加入到会话\\n    session.addOutput(previewOutput);\\n    // 提交配置信息\\n    await session.commitConfig();\\n    // 获取当前支持的帧率范围\\n    let supportFrameRateArray: Array<camera.FrameRateRange> = getSupportedFrameRange(previewOutput);\\n\\n    console.info(`frame rate supported by previewOutput: ${JSON.stringify(supportFrameRateArray)}`);\\n    // 可在start前对帧率进行设置\\n    if (supportFrameRateArray.length !== 0) {\\n      // 将帧率设置为第一组帧率范围的最大值\\n      setFrameRate(previewOutput, supportFrameRateArray[0].max, supportFrameRateArray[0].max);\\n    }\\n    // 获取当前生效的帧率设置\\n    let activeFrameRateArray: camera.FrameRateRange = getActiveFrameRange(previewOutput);\\n    console.info(`current effective frame rate for this previewOutput: ${JSON.stringify(activeFrameRateArray)}`);\\n    // 开始会话工作并启动预览\\n    await session.start();\\n    // 可在start后对帧率进行设置\\n    if (supportFrameRateArray.length !== 0) {\\n      // 可将帧率设置为最大值的一半（能否设置成功取决于平台是否支持）\\n      setFrameRate(previewOutput, supportFrameRateArray[0].max / 2, supportFrameRateArray[0].max / 2);\\n    }\\n    // 获取当前生效的帧率设置\\n    activeFrameRateArray = getActiveFrameRange(previewOutput);\\n    console.info(`current effective frame rate for this previewOutput: ${JSON.stringify(activeFrameRateArray)}`);\\n  } catch (error) {\\n    let err = error as BusinessError;\\n    console.info(`sessionConfig fail : ${JSON.stringify(err)}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "完整流程",
        "parent_text": "完整流程根据上述开发流程，完整的session配流及previewOutput在session.start前后调整帧率示例代码如下。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"完整流程\\\"'><a name='\\\"ZH-CN_TOPIC_0000002185420216__%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B\\\"'></a><a name='\\\"%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B\\\"'></a><h4>完整流程</h4><p>根据上述开发流程，完整的session配流及previewOutput在session.start前后调整帧率示例代码如下。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-framerate.html"
    },
    {
        "id": 128,
        "pre": "import { BuilderNode, FrameNode, NodeController, UIContext } from '@kit.ArkUI';\\n\\n// 定义一个Params类，用于传递参数\\n@ObservedV2\\nclass Params {\\n  // 单例模式，确保只有一个Params实例\\n  static singleton_: Params;\\n\\n  // 获取Params实例的方法\\n  static instance() {\\n    if (!Params.singleton_) {\\n      Params.singleton_ = new Params(0);\\n    }\\n    return Params.singleton_;\\n  }\\n\\n  // 使用@Trace装饰器装饰message属性，以便跟踪其变化\\n  @Trace message: string = \\\"Hello\\\";\\n  index: number = 0;\\n\\n  constructor(index: number) {\\n    this.index = index;\\n  }\\n}\\n\\n// 定义一个buildNodeChild组件，它包含一个message属性和一个index属性\\n@ComponentV2\\nstruct buildNodeChild {\\n  // 使用Params实例作为storage属性\\n  storage: Params = Params.instance();\\n  @Param index: number = 0;\\n\\n  // 使用@Monitor装饰器监听storage.message的变化\\n  @Monitor(\\\"storage.message\\\")\\n  onMessageChange(monitor: IMonitor) {\\n    console.log(`FreezeBuildNode buildNodeChild message callback func ${this.storage.message}, index:${this.index}`);\\n  }\\n\\n  build() {\\n    Text(`buildNode Child message: ${this.storage.message}`).fontSize(30)\\n  }\\n}\\n\\n// 定义一个buildText函数，它接收一个Params参数并构建一个Column组件\\n@Builder\\nfunction buildText(params: Params) {\\n  Column() {\\n    buildNodeChild({ index: params.index })\\n  }\\n}\\n\\nclass TextNodeController extends NodeController {\\n  private textNode: BuilderNode<[Params]> | null = null;\\n  private index: number = 0;\\n  \\n  // 构造函数接收一个index参数\\n  constructor(index: number) {\\n    super();\\n    this.index = index;\\n  }\\n\\n  // 创建并返回一个FrameNode\\n  makeNode(context: UIContext): FrameNode | null {\\n    this.textNode = new BuilderNode(context);\\n    this.textNode.build(wrapBuilder<[Params]>(buildText), new Params(this.index));\\n    return this.textNode.getFrameNode();\\n  }\\n}\\n\\n// 定义一个Index组件，它包含一个message属性和一个data数组\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  // 使用Params实例作为storage属性\\n  storage: Params = Params.instance();\\n  private data: number[] = [0, 1];\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Button(\\\"change\\\").fontSize(30)\\n          .onClick(() => {\\n            this.storage.message += 'a';\\n          })\\n\\n        Tabs() {\\n          // 使用Repeat重复渲染TabContent组件\\n          Repeat<number>(this.data)\\n            .each((obj: RepeatItem<number>) => {\\n              TabContent() {\\n                FreezeBuildNode({ index: obj.item })\\n                  .margin({ top: 20 })\\n              }.tabBar(`tab${obj.item}`)\\n            })\\n            .key((item: number) => item.toString())\\n        }\\n      }\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}\\n\\n// 定义一个FreezeBuildNode组件，它包含一个message属性和一个index属性\\n@ComponentV2({ freezeWhenInactive: true })\\nstruct FreezeBuildNode {\\n  // 使用Params实例作为storage属性\\n  storage: Params = Params.instance();\\n  @Param index: number = 0;\\n\\n  // 使用@Monitor装饰器监听storage.message的变化\\n  @Monitor(\\\"storage.message\\\")\\n  onMessageChange(monitor: IMonitor) {\\n    console.log(`FreezeBuildNode message callback func ${this.storage.message}, index: ${this.index}`);\\n  }\\n\\n  build() {\\n    NodeContainer(new TextNodeController(this.index))\\n      .width('100%')\\n      .height('100%')\\n      .backgroundColor('#FFF0F0F0')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "限制条件",
        "parent_text": "  限制条件 如下面的例子所示，FreezeBuildNode中使用了自定义节点BuilderNode。BuilderNode可以通过命令式动态挂载组件，而组件冻结又是强依赖父子关系来通知是否开启组件冻结。如果父组件使用组件冻结，且组件树的中间层级上又启用了BuilderNode，则BuilderNode的子组件将无法被冻结。  点击Button(\\\"change\\\")。改变message的值，当前正在显示的TabContent组件中的@Watch中注册的方法onMessageUpdated被触发。未显示的TabContent中的BuilderNode节点下组件的@Watch方法onMessageUpdated也被触发，并没有被冻结。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"限制条件\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213458693__%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6\\\"'></a><a name='\\\"%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6\\\"'></a> <h4>限制条件</h4> <p>如下面的例子所示，FreezeBuildNode中使用了自定义节点<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-arkui-buildernode\\\"' target='\\\"_blank\\\"'>BuilderNode</a>。BuilderNode可以通过命令式动态挂载组件，而组件冻结又是强依赖父子关系来通知是否开启组件冻结。如果父组件使用组件冻结，且组件树的中间层级上又启用了BuilderNode，则BuilderNode的子组件将无法被冻结。</p>  <p>点击Button(\\\"change\\\")。改变message的值，当前正在显示的TabContent组件中的@Watch中注册的方法onMessageUpdated被触发。未显示的TabContent中的BuilderNode节点下组件的@Watch方法onMessageUpdated也被触发，并没有被冻结。</p> <p><span><img originheight='\\\"656\\\"' originwidth='\\\"1791\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115833.45941689711058830056695797539266:50001231000000:2800:F9626C4B8276FD566F3051E1EA9BE0F800580A0A8D4063820FBE6D413EA5F601.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-components-freezev2.html"
    },
    {
        "id": 129,
        "pre": "adTechId+ '\\\\u2063' + campaignId+ '\\\\u2063'  + destinationId+ '\\\\u2063' + serviceTag+ '\\\\u2063' + mmpIdStr + '\\\\u2063' + nonce + '\\\\u2063' + timestamp",
        "type": "Reference",
        "function_call": null,
        "function_name": "归因来源签名计算规则",
        "parent_text": "归因来源签名计算规则1.按照如下规则（字段顺序及分隔符）拼接待签名的字符串：  其中，mmpIdStr生成规则为： 若归因监测平台的数组不为空，则将归因监测平台中的元素以'\\\\u2063'为连接符进行拼接，假设mmpIds中有两个归因监测平台，拼接示例： mmpIdStr = mmpId1 + '\\\\u2063' + mmpId2 2.使用分发平台在应用归因服务云侧注册角色时，提供的公钥所对应的私钥，对步骤1拼接的字符串进行签名计算（签名算法：SHA256WithRSA/PSS；生成密钥位数：RSA3072）。 3.接口中字段不为空则参与签名/验签，否则不参与签名/验签。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section4208115642013\\\"'><a name='\\\"section4208115642013\\\"'></a><a name='\\\"section4208115642013\\\"'></a><h4>归因来源签名计算规则</h4><p>1.按照如下规则（字段顺序及分隔符）拼接待签名的字符串：</p>  <p>其中，mmpIdStr生成规则为：</p> <p>若归因监测平台的数组不为空，则将归因监测平台中的元素以'\\\\u2063'为连接符进行拼接，假设mmpIds中有两个归因监测平台，拼接示例：</p> <pre class='\\\"typescript\\\"'>mmpIdStr = mmpId1 + '\\\\u2063' + mmpId2</pre> <p>2.使用分发平台在应用归因服务云侧注册角色时，提供的公钥所对应的私钥，对步骤1拼接的字符串进行签名计算（签名算法：SHA256WithRSA/PSS；生成密钥位数：RSA3072）。</p> <p>3.接口中字段不为空则参与签名/验签，否则不参与签名/验签。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-appendix.html"
    },
    {
        "id": 130,
        "pre": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { promptAction } from '@kit.ArkUI';\\nimport { AegRsaSign } from \\\"@hms-security/agoh-crypto\\\";  //具体引用方法参考本示例代码底部说明\\n\\n\\nconst TAG: string = 'SignUtil';\\nconst SEPARATOR: string = '\\\\u2063';\\n\\nexport class SignUtil {\\n  public static genSignContent(adTechId: string, campaignId: string, destinationId: string, mmpIds: string[], serviceTag: string, nonce: string, timestamp: number) {\\n    // mmpIdStr = mmpId1 + '\\\\u2063' + mmpId2\\n    // signContent:string= adTechId+ '\\\\u2063' + campaignId+ '\\\\u2063'  + destinationId+ '\\\\u2063' + serviceTag+ '\\\\u2063' + mmpIdStr + '\\\\u2063' + nonce + '\\\\u2063' + timestamp\\n    let content = SignUtil.addSeparator(adTechId)\\n      + SignUtil.addSeparator(campaignId)\\n      + SignUtil.addSeparator(destinationId)\\n      + SignUtil.addSeparator(serviceTag)\\n      + SignUtil.genMmpIds(mmpIds)\\n      + SignUtil.addSeparator(nonce)\\n      + timestamp;\\n    hilog.info(0,TAG,`content = ${JSON.stringify(content)}`);\\n    return content;\\n  }\\n\\n  private static addSeparator(value: string | undefined): string {\\n    return value ? value + SEPARATOR : '';\\n  }\\n\\n  private static genMmpIds(mmpIds: string[]) {\\n    let result: string = '';\\n    for (let mmpId of mmpIds) {\\n      if (mmpId) {\\n        result += SignUtil.addSeparator(mmpId);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  public static getSign(content: string, privateKey: string): Promise<string> {\\n    return new Promise<string>((resolve) => {\\n      AegRsaSign.ohAegSignRSAWithPSSTextBase64(content, privateKey).then(async (sign: string) => {\\n        hilog.info(0, TAG, \\\"getSign success.\\\");\\n        resolve(sign);\\n      }).catch((error: BusinessError) => {\\n        hilog.error(0, TAG, `getSign failed. code is ${error.code}, message is ${error.message}`);\\n        promptAction.showToast({\\n          message: `getSign failed.`\\n        })\\n      });\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "生成签名方法",
        "parent_text": "生成签名方法您可以参考如下代码生成签名，也可以自行生成签名。   其中import {AegRsaSign} from \\\"@hms-security/agoh-crypto\\\" ， 使用AegRsaSign.ohAegSignRSAWithPSSTextBase64生成签名，使用方法如下: 执行安装命令：ohpm i @hms-security/agoh-crypto 具体的接口使用方法，请参见ohAegSignRSAWithPSSTextBase64  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section5203225132112\\\"'><a name='\\\"section5203225132112\\\"'></a><a name='\\\"section5203225132112\\\"'></a><h4>生成签名方法</h4><p>您可以参考如下代码生成签名，也可以自行生成签名。</p>  <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120050.84311812171435391021847464526889:50001231000000:2800:03D3D9B6E36FE137FB88B17C3CF85E880F32D019FCF18E5AA9BD5340E0790214.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>其中import {AegRsaSign} from \\\"@hms-security/agoh-crypto\\\" ， 使用AegRsaSign.ohAegSignRSAWithPSSTextBase64生成签名，使用方法如下:</p> <p>执行安装命令：ohpm i @hms-security/agoh-crypto</p> <p>具体的接口使用方法，请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/AppGallery-connect-References/ohaegsignrsawithpsstextbase64-0000001864508922\\\"' target='\\\"_blank\\\"'>ohAegSignRSAWithPSSTextBase64</a></p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-appendix.html"
    },
    {
        "id": 131,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { systemShare } from '@kit.ShareKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-mobilephone-app-share.html"
    },
    {
        "id": 132,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-dupe-class-members\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-dupe-class-members.html"
    },
    {
        "id": 133,
        "pre": "/*eslint no-dupe-class-members: \\\"error\\\"*/\\nexport class A {\\n  public bar() {\\n    console.info('bar');\\n  }\\n\\n  public qux() {\\n    console.info('qux');\\n  }\\n}\\n\\nexport class B {\\n  private name: string = 'bar';\\n\\n  public get bar() {\\n    return this.name;\\n  }\\n\\n  public set bar(value) {\\n    this.name = value;\\n  }\\n}\\n\\nexport class E {\\n  public static bar() {\\n    console.info('static bar');\\n  }\\n\\n  public bar() {\\n    console.info('method bar');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-dupe-class-members.html"
    },
    {
        "id": 134,
        "pre": "/*eslint no-dupe-class-members: \\\"error\\\"*/\\nexport class A {\\n  public bar() {\\n    console.info('bar');\\n  }\\n\\n  public bar() {\\n    console.info('bar');\\n  }\\n}\\n\\nexport class B {\\n  private readonly name: string = 'bar';\\n\\n  public get bar() {\\n    return this.name;\\n  }\\n\\n  public bar() {\\n    return this.name;\\n  }\\n}\\n\\nexport class E {\\n  public static bar() {\\n    console.info('static bar');\\n  }\\n\\n  public static bar() {\\n    console.info('static bar');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-dupe-class-members.html"
    },
    {
        "id": 135,
        "pre": "export const testHidebugNdk: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将TestHidebugNdk注册为ArkTS接口： 编辑\\\"napi_init.cpp\\\"文件，将TestHidebugNdk注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"testHidebugNdk\\\", nullptr, TestHidebugNdk, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n} 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>将TestHidebugNdk注册为ArkTS接口：</p> <p>编辑\\\"napi_init.cpp\\\"文件，将TestHidebugNdk注册为ArkTS接口：</p> <pre>static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"testHidebugNdk\\\", nullptr, TestHidebugNdk, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hidebug-guidelines-ndk.html"
    },
    {
        "id": 136,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  message?: string;\\n  @BuilderParam myBuilder: () => void;\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n        this.myBuilder()\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "myBuilder()",
        "function_name": "@previewer/mandatory-default-value-for-local-initialization",
        "parent_text": "@previewer/mandatory-default-value-for-local-initialization对于所有将被预览到的组件，如果组件的属性支持本地初始化，则都应当设置一个合法的不依赖运行时的默认值，以确保异常调用到该组件时，即使入参不完整，也能正常运行渲染。 反例  正例 @Builder function MyBuilderFunction(): void {}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  message?: string = 'message';\\n  @Provide messageA: string = 'messageA';\\n  @StorageLink('varA') varA: number = 2;\\n  @StorageProp('languageCode') lang: string = 'en';\\n  @LocalStorageLink('PropA') storageLink1: number = 1;\\n  @LocalStorageProp('PropB') storageLink2: number = 2;\\n  @BuilderParam myBuilder: () => void = MyBuilderFunction;\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n        this.myBuilder()\\n      }\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2419195511515\\\"'><a name='\\\"section2419195511515\\\"'></a><a name='\\\"section2419195511515\\\"'></a><h4>@previewer/mandatory-default-value-for-local-initialization</h4><p id='\\\"ZH-CN_TOPIC_0000002202129505__p8461311258\\\"'>对于所有将被预览到的组件，如果组件的属性支持本地初始化，则都应当设置一个合法的不依赖运行时的默认值，以确保异常调用到该组件时，即使入参不完整，也能正常运行渲染。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129505__p785121852519\\\"'><strong>反例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202129505__p954991322614\\\"'><strong>正例</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129505__screen11528132082610\\\"'><span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Builder</span> <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>function</span> <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>MyBuilderFunction</span>(): <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>void</span> {}\\n\\n<span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Entry</span>\\n<span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Component</span>\\nstruct <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Index</span> {\\n  message?: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span> = <span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'message'</span>;\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Provide</span> messageA: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span> = <span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'messageA'</span>;\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>StorageLink</span>(<span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'varA'</span>) varA: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>number</span> = <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span>;\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>StorageProp</span>(<span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'languageCode'</span>) lang: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span> = <span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'en'</span>;\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>LocalStorageLink</span>(<span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'PropA'</span>) storageLink1: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>number</span> = <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span>;\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>LocalStorageProp</span>(<span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'PropB'</span>) storageLink2: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>number</span> = <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span>;\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>BuilderParam</span> myBuilder: () =&gt; <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>void</span> = <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>MyBuilderFunction</span>;\\n\\n  build() {\\n    <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Row</span>() {\\n      <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Column</span>() {\\n        <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Text</span>(<span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>this</span>.message)\\n        <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>this</span>.myBuilder()\\n      }\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-previewchecker.html"
    },
    {
        "id": 137,
        "pre": "@Preview\\n@Component\\nstruct LinkSample {\\n  @Link message: string;\\n\\n  build() {\\n    Row() {\\n      Text(this.message)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "build()",
        "function_name": "@previewer/no-unallowed-decorator-on-root-component",
        "parent_text": "@previewer/no-unallowed-decorator-on-root-component对于@Entry组件，不允许使用@Consume、@Link、@ObjectLink、@Prop注解；对于@Preview组件，建议使用一个定义了完整的、合法的、不依赖运行时的默认值的父组件作为预览该组件的容器。 反例  正例 @Entry\\n@Component\\nstruct LinkSampleContainer {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Row() {\\n      LinkSample({message: this.message})\\n    }\\n  }\\n}\\n \\n@Component\\nstruct LinkSample {\\n  @Link message: string;\\n\\n  build() {\\n    Row() {\\n      Text(this.message)\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section927120363555\\\"'><a name='\\\"section927120363555\\\"'></a><a name='\\\"section927120363555\\\"'></a><h4>@previewer/no-unallowed-decorator-on-root-component</h4><p id='\\\"ZH-CN_TOPIC_0000002202129505__p12708201434\\\"'>对于@Entry组件，不允许使用@Consume、@Link、@ObjectLink、@Prop注解；对于@Preview组件，建议使用一个定义了完整的、合法的、不依赖运行时的默认值的父组件作为预览该组件的容器。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129505__p77010201438\\\"'><strong>反例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202129505__p97011206310\\\"'><strong>正例</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129505__screen157017209318\\\"'><span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span>Entry\\n<span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Component</span>\\nstruct <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>LinkSampleContainer</span> {\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>State</span> message: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span> = <span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'Hello World'</span>;\\n\\n  build() {\\n    <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Row</span>() {\\n      <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>LinkSample</span>({message: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>this</span>.message})\\n    }\\n  }\\n}\\n \\n<span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Component</span>\\nstruct <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>LinkSample</span> {\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Link</span> message: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span>;\\n\\n  build() {\\n    <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Row</span>() {\\n      <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Text</span>(<span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>this</span>.message)\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-previewchecker.html"
    },
    {
        "id": 138,
        "pre": "@Entry\\n@Component\\nstruct Parent {\\n  build() {\\n    Column() {\\n      Child()\\n    }\\n  }\\n}\\n \\n@Component\\nstruct Child {\\n  @Consume message: string;\\n \\n  build() {\\n    Text(this.message)\\n  }\\n}",
        "type": "Reference",
        "function_call": "build()",
        "function_name": "@previewer/paired-use-of-consume-and-provide",
        "parent_text": "@previewer/paired-use-of-consume-and-provide如果缺少@Provide定义，@Consume组件在预览时将无法获取有效值，且@Consume不支持本地初始化。建议被@Consume修饰的组件的祖先组件上应当有对应的@Provide属性，并且该属性应当有合法的不依赖运行时的默认值。 反例  正例 @Entry\\n@Component\\nstruct Parent {\\n  @Provide message: string = 'hello world';\\n \\n  build() {\\n    Column() {\\n      Child()\\n    }\\n  }\\n}\\n \\n@Component\\nstruct Child {\\n  @Consume message: string;\\n \\n  build() {\\n    Text(this.message)\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section54242313411\\\"'><a name='\\\"section54242313411\\\"'></a><a name='\\\"section54242313411\\\"'></a><h4>@previewer/paired-use-of-consume-and-provide</h4><p id='\\\"ZH-CN_TOPIC_0000002202129505__p2639101411515\\\"'>如果缺少@Provide定义，@Consume组件在预览时将无法获取有效值，且@Consume不支持本地初始化。建议被@Consume修饰的组件的祖先组件上应当有对应的@Provide属性，并且该属性应当有合法的不依赖运行时的默认值。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129505__p26395141651\\\"'><strong>反例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202129505__p1640101419517\\\"'><strong>正例</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129505__screen20640181416514\\\"'><span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Entry</span>\\n<span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Component</span>\\nstruct <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Parent</span> {\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Provide</span> message: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span> = <span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'hello world'</span>;\\n \\n  build() {\\n    <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Column</span>() {\\n      <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Child</span>()\\n    }\\n  }\\n}\\n \\n<span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Component</span>\\nstruct <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Child</span> {\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Consume</span> message: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span>;\\n \\n  build() {\\n    <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Text</span>(<span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>this</span>.message)\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-previewchecker.html"
    },
    {
        "id": 139,
        "pre": "@Preview\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  onPageShow(): void {}\\n  onPageHide(): void {}\\n  onBackPress(): void {}\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "build()",
        "function_name": "@previewer/no-page-method-on-preview-component",
        "parent_text": "@previewer/no-page-method-on-preview-component@Preview通常修饰在组件上，而非@Entry的页面入口。onPageShow、onPageHide、onBackPress仅在@Entry组件上生效。因此禁止在非路由组件上实例化onPageShow等页面级方法。 反例  正例 @Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  onPageShow(): void {}\\n  onPageHide(): void {}\\n  onBackPress(): void {}\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section5662651458\\\"'><a name='\\\"section5662651458\\\"'></a><a name='\\\"section5662651458\\\"'></a><h4>@previewer/no-page-method-on-preview-component</h4><p id='\\\"ZH-CN_TOPIC_0000002202129505__p277315951112\\\"'>@Preview通常修饰在组件上，而非@Entry的页面入口。onPageShow、onPageHide、onBackPress仅在@Entry组件上生效。因此禁止在非路由组件上实例化onPageShow等页面级方法。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129505__p065019441361\\\"'><strong>反例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202129505__p106511444664\\\"'><strong>正例</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129505__screen1965113447614\\\"'><span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Entry</span>\\n<span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Component</span>\\nstruct <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Index</span> {\\n  <span rgb(205,49,49);\\\"=\"\" style='\\\"color:'>@</span><span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>State</span> message: <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>string</span> = <span rgb(163,21,21);\\\"=\"\" style='\\\"color:'>'Hello World'</span>;\\n\\n  onPageShow(): <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>void</span> {}\\n  onPageHide(): <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>void</span> {}\\n  onBackPress(): <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>void</span> {}\\n\\n  build() {\\n    <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Column</span>() {\\n      <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>Text</span>(<span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>this</span>.message)\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-previewchecker.html"
    },
    {
        "id": 140,
        "pre": "import { add } from 'library'; // 该模块未配置自定义mock。\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Row() {\\n      Text(this.message)\\n        .onClick(() => add(1, 2))\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "function add(a: number, b: number): number",
        "function_name": "@previewer/no-page-import-unmocked-hsp",
        "parent_text": "@previewer/no-page-import-unmocked-hsp由于能力缺失，预览器无法确保HSP是可以正常运行的。界面代码调用HSP可能会在预览运行时无法按预期执行，未正确初始化的接口调用可能会导致运行异常，从而影响界面渲染结果。建议待预览的组件及其依赖的组件避免引用HSP，或为该HSP设置Mock实现。 反例  正例 import { add } from 'library'; // 该模块已配置自定义mock，配置方法见下文。\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Row() {\\n      Text(this.message)\\n        .onClick(() => add(1, 2))\\n    }\\n  }\\n} 自定义mock配置： // src/mock/mock-config.json5\\n{\\n  \\\"library\\\": {\\n    \\\"source\\\": \\\"src/mock/myhsp.mock.ets\\\"\\n  },\\n} // src/mock/myhsp.mock.ets\\nexport function add(a: number, b: number): number {\\n  return a + b;\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1161812252913\\\"'><a name='\\\"section1161812252913\\\"'></a><a name='\\\"section1161812252913\\\"'></a><h4>@previewer/no-page-import-unmocked-hsp</h4><p id='\\\"ZH-CN_TOPIC_0000002202129505__p1740533916128\\\"'>由于能力缺失，预览器无法确保HSP是可以正常运行的。界面代码调用HSP可能会在预览运行时无法按预期执行，未正确初始化的接口调用可能会导致运行异常，从而影响界面渲染结果。建议待预览的组件及其依赖的组件避免引用HSP，或为该HSP设置Mock实现。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129505__p748484618917\\\"'><strong>反例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202129505__p1845715611108\\\"'><strong>正例</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129505__screen13956155211129\\\"'>import { add } from 'library'; // 该模块已配置自定义mock，配置方法见下文。\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Row() {\\n      Text(this.message)\\n        .onClick(() =&gt; add(1, 2))\\n    }\\n  }\\n}</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129505__p177371346141211\\\"'>自定义mock配置：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129505__screen41406279146\\\"'>// src/mock/mock-config.json5\\n{\\n  \\\"library\\\": {\\n    \\\"source\\\": \\\"src/mock/myhsp.mock.ets\\\"\\n  },\\n}</pre> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129505__screen742095111517\\\"'>// src/mock/myhsp.mock.ets\\nexport function add(a: number, b: number): number {\\n  return a + b;\\n}</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129505__p1267231314145\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-previewchecker.html"
    },
    {
        "id": 141,
        "pre": "// 导入图片识码需要的日志和picker模块\\nimport { scanCore, scanBarcode, detectBarcode } from '@kit.ScanKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入图片识码接口和相关接口模块，该接口提供了图片识码参数和方法，导入方法如下。",
        "import_module": null,
        "parent": "<li>导入图片识码接口和相关接口模块，该接口提供了图片识码参数和方法，导入方法如下。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scan-detectbarcode.html"
    },
    {
        "id": 142,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Button('start link', { type: ButtonType.Capsule, stateEffect: true })\\n      .width('87%')\\n      .height('5%')\\n      .margin({ bottom: '12vp' })\\n      .onClick(() => {\\n        let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n        let link: string = \\\"https://www.example.com/product?pageName=productDetail\\\";\\n        context.openLink(link, { appLinkingOnly: false })\\n          .then(() => {\\n            hilog.info(0x0000, 'testTag', `Succeeded in opening link.`);\\n          })\\n          .catch((err: BusinessError) => {\\n            hilog.error(0x0000, 'testTag', `Failed to open link.`);\\n          });\\n      })\\n  }\\n}",
        "type": "Reference",
        "function_call": "openLink()",
        "function_name": "拉起方实现跳转开发指导",
        "parent_text": "拉起方实现跳转开发指导拉起方应用必须调用UIAbilityContext.openLink()接口，并将appLinkingOnly参数设为false或者不传，以App Linking优先的方式打开应用。若有App Linking相匹配的应用。当目标应用已安装时，用户点击链接直接打开应用。当目标应用未安装时，用户点击链接跳转应用市场下载详情页，引导用户下载安装应用。 若无App Linking相匹配的应用，则继续尝试以通过浏览器打开链接的方式打开应用。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section93961521541\\\"'><a name='\\\"section93961521541\\\"'></a><a name='\\\"section93961521541\\\"'></a><h4>拉起方实现跳转开发指导</h4><div class='\\\"p\\\"'>拉起方应用必须调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-inner-application-uiabilitycontext#uiabilitycontextopenlink12\\\"' target='\\\"_blank\\\"'>UIAbilityContext.openLink()</a>接口，并将appLinkingOnly参数设为false或者不传，以App Linking优先的方式打开应用。<ul><li>若有App Linking相匹配的应用。<ul><li>当目标应用已安装时，用户点击链接直接打开应用。</li><li>当目标应用未安装时，用户点击链接跳转应用市场下载详情页，引导用户下载安装应用。</li></ul> </li><li>若无App Linking相匹配的应用，则继续尝试以通过浏览器打开链接的方式打开应用。</li></ul> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/applinking-direct-to-ag.html"
    },
    {
        "id": 143,
        "pre": "import { smartMobilityCommon } from '@kit.CarKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": "import { smartMobilityCommon } from '@kit.CarKit';",
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-check-sys-events-detail.html"
    },
    {
        "id": 144,
        "pre": "{\\n  \\\"type\\\": \\\"http\\\",\\n  \\\"properties\\\": {\\n    \\\"enableUrlDecode\\\": true,\\n    \\\"authFlag\\\": \\\"true\\\",\\n    \\\"authAlgor\\\": \\\"HDA-SYSTEM\\\",\\n    \\\"authType\\\": \\\"apigw-client\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "配置函数",
        "parent_text": "配置函数函数创建完毕后，您可在配置文件“function-config.json”的“triggers”下配置触发器，通过触发器暴露的触发条件来实现函数调用。  “functionType”表示函数类型，“0”表示云函数，“1”表示云对象。“functionType”的值为创建时自动生成，不可手动修改，否则将导致云函数部署失败。    云函数当前仅支持HTTP触发器， “function-config.json”文件中已为您自动完成HTTP触发器配置。配置了HTTP触发器的函数被部署到云端后，您的应用即可通过Cloud Foundation Kit调用函数。关于如何使用HTTP触发器调用函数，请参见调用函数。  如您需在函数部署完成后更新触发器，请先删除之前的触发器配置，再添加新的触发器配置，否则您的更新将不生效。   type：触发器类型，配置为“http”。properties：触发器属性，属性参数如下表所示。 参数  说明    enableUrlDecode  通过HTTP触发器触发函数时，对于contentType为“application/x-www-form-urlencoded”的触发请求，是否使用URLDecoder对请求body进行解码再转发到函数中。 true：启用。false：不启用。   authFlag  是否鉴权，默认为true。   authAlgor  鉴权算法，默认为HDA-SYSTEM。   authType  HTTP触发器的认证类型。 apigw-client：端侧网关认证，适用于来自APP客户端侧（即本地应用或者项目）的函数调用。cloudgw-client：云侧网关认证，适用于来自APP服务器侧（即云函数）的函数调用。       ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section69561242360\\\"'><a name='\\\"section69561242360\\\"'></a><a name='\\\"section69561242360\\\"'></a><h4>配置函数</h4><p id='\\\"ZH-CN_TOPIC_0000002179338360__p916314457129\\\"'>函数创建完毕后，您可在配置文件“function-config.json”的“triggers”下配置触发器，通过触发器暴露的触发条件来实现函数调用。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002179338360__note1315016541516\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250407144015.61329230371756785763630470028605:50001231000000:2800:FF81660E19978A13828A52B68A381C7A8C28850E6BCBFD8466AF19A24742F724.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p17415194718547\\\"'>“functionType”表示函数类型，“0”表示云函数，“1”表示云对象。“functionType”的值为创建时自动生成，不可手动修改，否则将导致云函数部署失败。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002179338360__p135974461768\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002179338360__p171088282419\\\"'><span><img originheight='\\\"385\\\"' originwidth='\\\"643\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250407144015.58155151803371531798677530695131:50001231000000:2800:FCD50B37E0901C160E6BD9264686AA7915D5854694D5F8B852B12272CC387E8A.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002179338360__p117882571612\\\"'>云函数当前仅支持HTTP触发器， “function-config.json”文件中已为您自动完成HTTP触发器配置。配置了HTTP触发器的函数被部署到云端后，您的应用即可通过Cloud Foundation Kit调用函数。关于如何使用HTTP触发器调用函数，请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/cloudfoundation-call-function\\\"' target='\\\"_blank\\\"'>调用函数</a>。</p> <div class='\\\"caution\\\"' id='\\\"ZH-CN_TOPIC_0000002179338360__note85196181411\\\"'><span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250407144015.04213415225418597363304935241375:50001231000000:2800:DDB9FF237B14933A5125C29888897ECBDEAC1947F97270666DC066E74B4E1997.png\\\"'/> </span><div class='\\\"cautionbody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p12519131171412\\\"'>如您需在函数部署完成后更新触发器，请先删除之前的触发器配置，再添加新的触发器配置，否则您的更新将不生效。</p> </div></div>  <ul id='\\\"ZH-CN_TOPIC_0000002179338360__ul335142720911\\\"'><li id='\\\"li335132718911\\\"'>type：触发器类型，配置为“http”。</li><li id='\\\"li123527273910\\\"'>properties：触发器属性，属性参数如下表所示。 <div class='\\\"tablenoborder\\\"'><table id='\\\"table1135218278918\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002179338360__row635214271796\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.9.2.1.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"17.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p4352192713910\\\"'>参数</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.9.2.1.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"82.19999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p1735242719916\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002179338360__row93525272092\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p1535252716914\\\"'>enableUrlDecode</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"82.19999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p153526271992\\\"'>通过HTTP触发器触发函数时，对于contentType为“application/x-www-form-urlencoded”的触发请求，是否使用URLDecoder对请求body进行解码再转发到函数中。</p> <ul id='\\\"ZH-CN_TOPIC_0000002179338360__ul93529275916\\\"'><li id='\\\"li7352122716912\\\"'>true：启用。</li><li id='\\\"li83521227596\\\"'>false：不启用。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002179338360__row133520279919\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p11352327999\\\"'>authFlag</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"82.19999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p1235313272098\\\"'>是否鉴权，默认为true。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002179338360__row135312271997\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p1135311276911\\\"'>authAlgor</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"82.19999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p3353182710914\\\"'>鉴权算法，默认为HDA-SYSTEM。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002179338360__row03537271792\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p1635362711917\\\"'>authType</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"82.19999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002179338360__p53531273920\\\"'>HTTP触发器的认证类型。</p> <ul id='\\\"ZH-CN_TOPIC_0000002179338360__ul73537271692\\\"'><li id='\\\"li123535271799\\\"'>apigw-client：端侧网关认证，适用于来自APP客户端侧（即本地应用或者项目）的函数调用。</li><li id='\\\"li93539271914\\\"'>cloudgw-client：云侧网关认证，适用于来自APP服务器侧（即云函数）的函数调用。</li></ul> </td> </tr> </tbody></table> </div> </li></ul> <p id='\\\"ZH-CN_TOPIC_0000002179338360__p6693162033018\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/agc-harmonyos-clouddev-createfunc.html"
    },
    {
        "id": 145,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/lottie-animation-destroy-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lottie-animation-destroy-check.html"
    },
    {
        "id": 146,
        "pre": "import lottie from '@ohos/lottie';\\nimport { AnimationItem } from '@ohos/lottie';\\n\\nconst FRAME_START: number = 60;\\nconst FRAME_END: number = 120;\\n\\n@Entry\\n@Component\\nstruct LottieAnimation1 {\\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\\n  private politeChicky: string = 'politeChicky';\\n  private politeChickyPath: string = 'media/politeChicky.json';\\n  private animateItem?: AnimationItem;\\n\\n  build() {\\n    Canvas(this.politeChickyController)\\n      .width(160)\\n      .height(160)\\n      .borderRadius(3)\\n      .onReady(() => {\\n        this.animateItem = lottie.loadAnimation({\\n          container: this.politeChickyController,\\n          renderer: 'canvas',\\n          loop: true,\\n          autoplay: true,\\n          name: this.politeChicky,\\n          path: this.politeChickyPath,\\n          initialSegment: [FRAME_START, FRAME_END]\\n        })\\n      })\\n      .onDisAppear(() => {\\n        this.animateItem?.destroy();//只加载了一个Animation，可以使用animateItem的destroy接口\\n      })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例1",
        "parent_text": "正例1 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>正例1</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lottie-animation-destroy-check.html"
    },
    {
        "id": 147,
        "pre": "import lottie from '@ohos/lottie';\\nimport { AnimationItem } from '@ohos/lottie';\\n\\n// 动画播放的起始帧\\nconst FRAME_START: number = 60; \\n// 动画播放的终止帧\\nconst FRAME_END: number = 120; \\n\\n@Entry\\n@Component\\nstruct LottieAnimation2 {\\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\\n  // 动画名称\\n  private politeChicky: string = 'politeChicky'; \\n  // hap包内动画资源文件路径，仅支持json格式\\n  private politeChickyPath: string = 'media/politeChicky.json'; \\n  private animateItem: AnimationItem | null = null;\\n\\n  build() {\\n    Canvas(this.politeChickyController)\\n      .width(160)\\n      .height(160)\\n      .borderRadius(3)\\n      .onReady(() => {\\n        this.animateItem = lottie.loadAnimation({\\n          container: this.politeChickyController,\\n          renderer: 'canvas',\\n          loop: true,\\n          autoplay: true,\\n          name: 'anim_name1',\\n          path: this.politeChickyPath,\\n          initialSegment: [FRAME_START, FRAME_END]\\n        })\\n      })\\n      .onClick(() => {\\n        this.animateItem = lottie.loadAnimation({\\n          container: this.politeChickyController,\\n          renderer: 'canvas',\\n          loop: true,\\n          autoplay: true,\\n          name: 'anim_name2',\\n          path: this.politeChickyPath,\\n          initialSegment: [FRAME_START, FRAME_END]\\n        })\\n      })\\n  }\\n\\n  onPageHide(): void {\\n    lottie.destroy();\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例2",
        "parent_text": "正例2 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1099454213416\\\"'><a name='\\\"section1099454213416\\\"'></a><a name='\\\"section1099454213416\\\"'></a><h4>正例2</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lottie-animation-destroy-check.html"
    },
    {
        "id": 148,
        "pre": "import lottie from '@ohos/lottie';\\nimport { AnimationItem } from '@ohos/lottie';\\n\\nconst FRAME_START: number = 60;\\nconst FRAME_END: number = 120;\\n\\n@Entry\\n@Component\\nstruct LottieAnimation1 {\\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\\n  private politeChicky: string = 'politeChicky';\\n  private politeChickyPath: string = 'media/politeChicky.json';\\n  private animateItem?: AnimationItem;\\n\\n  build() {\\n    Canvas(this.politeChickyController)\\n      .width(160)\\n      .height(160)\\n      .backgroundColor(Color.Gray)\\n      .borderRadius(3)\\n      .onReady(() => {\\n        //告警\\n        this.animateItem = lottie.loadAnimation({\\n          container: this.politeChickyController,\\n          renderer: 'canvas',\\n          loop: true,\\n          autoplay: true,\\n          name: this.politeChicky,\\n          path: this.politeChickyPath,\\n          initialSegment: [FRAME_START, FRAME_END]\\n        })\\n      })\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例1",
        "parent_text": "反例1 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section283178123814\\\"'><a name='\\\"section283178123814\\\"'></a><a name='\\\"section283178123814\\\"'></a><h4>反例1</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lottie-animation-destroy-check.html"
    },
    {
        "id": 149,
        "pre": "import lottie from '@ohos/lottie';\\nimport { AnimationItem } from '@ohos/lottie';\\n\\n// 动画播放的起始帧\\nconst FRAME_START: number = 60; \\n// 动画播放的终止帧\\nconst FRAME_END: number = 120; \\n\\n//调用多次loadAnimation，但是只在onDisAppear销毁一次\\n@Entry\\n@Component\\nstruct LottieAnimation4 {\\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\\n  // 动画名称  \\n  private politeChicky: string = 'politeChicky'; \\n  // hap包内动画资源文件路径，仅支持json格式\\n  private politeChickyPath: string = 'media/politeChicky.json'; \\n  private animateItem: AnimationItem | null = null;\\n  // 初始化点击次数 \\n  @State times: number = 0; \\n\\n  build() {\\n    Stack({ alignContent: Alignment.TopStart }) {\\n      // 动画\\n      Canvas(this.politeChickyController)\\n        .width(160)\\n        .height(160)\\n        .backgroundColor(Color.Gray)\\n        .borderRadius(3)\\n        .onReady(() => {\\n          this.animateItem = lottie.loadAnimation({\\n            container: this.politeChickyController,\\n            renderer: 'canvas',\\n            loop: true,\\n            autoplay: true,\\n            name: this.politeChicky,\\n            path: this.politeChickyPath,\\n            initialSegment: [FRAME_START, FRAME_END]\\n          })\\n        })\\n        .onClick(() => {\\n          this.animateItem = lottie.loadAnimation({\\n            container: this.politeChickyController,\\n            renderer: 'canvas',\\n            loop: true,\\n            autoplay: true,\\n            name: this.politeChicky,\\n            path: this.politeChickyPath,\\n            initialSegment: [FRAME_START, FRAME_END]\\n          })\\n          this.times++;\\n        })\\n        .onDisAppear(()=> {\\n          //上报此处animateItem，描述description不一样，如果无法找到动画名称，则直接建议用lottie.destory\\n          this.animateItem?.destroy();\\n        })\\n      // 响应动画的文本\\n      Text('text')\\n        .fontSize(16)\\n        .margin(10)\\n        .fontColor(Color.White)\\n    }.margin({ top: 20 })\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例2",
        "parent_text": "反例2 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section44951828193810\\\"'><a name='\\\"section44951828193810\\\"'></a><a name='\\\"section44951828193810\\\"'></a><h4>反例2</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lottie-animation-destroy-check.html"
    },
    {
        "id": 150,
        "pre": "import lottie from '@ohos/lottie';\\nimport { AnimationItem } from '@ohos/lottie';\\n\\n// 动画播放的起始帧\\nconst FRAME_START: number = 60; \\n// 动画播放的终止帧\\nconst FRAME_END: number = 120; \\n\\n//调用了销毁，但是不是全部销毁，上报\\n@Entry\\n@Component\\nstruct LottieAnimation5 {\\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\\n  // 动画名称 \\n  private politeChicky: string = 'politeChicky'; \\n  // hap包内动画资源文件路径，仅支持json格式\\n  private politeChickyPath: string = 'media/politeChicky.json'; \\n  private animateItem: AnimationItem | null = null;\\n\\n  build() {\\n    Canvas(this.politeChickyController)\\n      .width(160)\\n      .height(160)\\n      .backgroundColor(Color.Gray)\\n      .borderRadius(3)\\n      .onReady(() => {\\n        this.animateItem = lottie.loadAnimation({\\n          container: this.politeChickyController,\\n          renderer: 'canvas',\\n          loop: true,\\n          autoplay: true,\\n          name: 'anim_name1',\\n          path: this.politeChickyPath,\\n          initialSegment: [FRAME_START, FRAME_END]\\n        })\\n      })\\n      .onClick(()=> {\\n        this.animateItem = lottie.loadAnimation({\\n          container: this.politeChickyController,\\n          renderer: 'canvas',\\n          loop: true,\\n          autoplay: true,\\n          name: 'anim_name2',\\n          path: this.politeChickyPath,\\n          initialSegment: [FRAME_START, FRAME_END]\\n        })\\n      })\\n      .onDisAppear(()=>{\\n        //上报lottie,只销毁一个\\n        lottie.destroy('anim_name2');\\n      })\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例3",
        "parent_text": "反例3 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section9591434143810\\\"'><a name='\\\"section9591434143810\\\"'></a><a name='\\\"section9591434143810\\\"'></a><h4>反例3</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lottie-animation-destroy-check.html"
    },
    {
        "id": 151,
        "pre": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": " 打开终端工具，执行以下命令。           ",
        "import_module": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202174641__zh-cn_topic_0000001056725590_p1427643612322\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002202174641__zh-cn_topic_0000001056725590_li1280371614303\\\"'></a><a name='\\\"zh-cn_topic_0000001056725590_li1280371614303\\\"'></a>打开终端工具，执行以下命令。           </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-commandline.html"
    },
    {
        "id": 152,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Map Kit相关模块。",
        "import_module": null,
        "parent": "<li>导入Map Kit相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-presenting.html"
    },
    {
        "id": 153,
        "pre": "this.mapOptions = {\\n  position: {\\n    target: {\\n      latitude: 39.9,\\n      longitude: 116.4\\n    },\\n    zoom: 10\\n  },\\n  myLocationControlsEnabled: true\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        也可通过调用MapComponentController对象的方法展示我的位置按钮，详情见显示我的位置章节。         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>        也可通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section816451553012\\\"' target='\\\"_blank\\\"'>MapComponentController</a>对象的方法展示我的位置按钮，详情见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/map-location\\\"'>显示我的位置</a>章节。         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-presenting.html"
    },
    {
        "id": 154,
        "pre": "this.mapController.setBuildingEnabled(true);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      调用MapComponentController对象的setBuildingEnabled方法开启3D建筑图层，将两个手指放在地图上，向上滑动倾斜地图可看到3D建筑图层的效果。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section816451553012\\\"' target='\\\"_blank\\\"'>MapComponentController</a>对象的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section15905291318\\\"' target='\\\"_blank\\\"'>setBuildingEnabled</a>方法开启3D建筑图层，<span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>将两个手指放在地图上，向上滑动倾斜地图可看到3D建筑图层的效果</span>。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-presenting.html"
    },
    {
        "id": 155,
        "pre": "// 页面每次显示时触发一次，包括路由过程、应用进入前台等场景，仅@Entry装饰的自定义组件生效\\nonPageShow(): void {\\n  // 建议页面切换到前台，调用地图组件的show方法 \\n  if (this.mapController) {\\n    this.mapController.show();\\n  }\\n}",
        "type": "Reference",
        "function_call": "hide()",
        "function_name": "[h2]地图前后台切换",
        "parent_text": "  [h2]地图前后台切换 您可以通过MapComponentController对象来控制地图页面前后台切换的生命周期。应用触发前后台切换时，可以在Page生命周期里调用show/hide，以便申请/释放资源。 地图切换至前台：  地图切换至后台： // 页面每次隐藏时触发一次，包括路由过程、应用进入后台等场景，仅@Entry装饰的自定义组件生效\\nonPageHide(): void {\\n  // 建议页面切换到后台，调用地图组件的hide方法\\n  if (this.mapController) {\\n    this.mapController.hide();\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section17793252830\\\"'> <a name='\\\"section17793252830\\\"'></a><a name='\\\"section17793252830\\\"'></a> <h4>[h2]地图前后台切换</h4> <p>您可以通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section816451553012\\\"' target='\\\"_blank\\\"'>MapComponentController</a>对象来控制地图页面前后台切换的生命周期。应用触发前后台切换时，可以在Page生命周期里调用show/hide，以便申请/释放资源。</p> <p><strong rgb(38,38,38);\\\"=\"\" style='\\\"color:'>地图切换至前台：</strong></p>  <p><strong rgb(38,38,38);\\\"=\"\" style='\\\"color:'>地图切换至后台：</strong></p> <pre class='\\\"screen\\\"'>// 页面每次隐藏时触发一次，包括路由过程、应用进入后台等场景，仅@Entry装饰的自定义组件生效\\nonPageHide(): void {\\n  // 建议页面切换到后台，调用地图组件的hide方法\\n  if (this.mapController) {\\n    this.mapController.hide();\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-presenting.html"
    },
    {
        "id": 156,
        "pre": "this.mapOptions = {\\n  position: {\\n    target: {\\n      latitude: 39.9,\\n      longitude: 116.4\\n    },\\n    zoom: 10\\n  },\\n  myLocationControlsEnabled: true,\\n  // 设置地图为夜间模式\\n  dayNightMode: mapCommon.DayNightMode.NIGHT\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      在地图初始化参数中设置dayNightMode参数，参数可选值包括DAY（日间模式）、NIGHT（夜间模式）、AUTO（自动模式）。如果将参数值设置为AUTO，地图的深色模式会跟随系统，打开系统深色开关，显示夜间模式，否则显示日间模式。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      在地图初始化参数中设置dayNightMode参数，参数可选值包括DAY（日间模式）、NIGHT（夜间模式）、AUTO（自动模式）。如果将参数值设置为AUTO，地图的深色模式会跟随系统，打开系统深色开关，显示夜间模式，否则显示日间模式。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-presenting.html"
    },
    {
        "id": 157,
        "pre": "this.mapOptions = {\\n  position: {\\n    target: {\\n      latitude: 39.9,\\n      longitude: 116.4\\n    },\\n    zoom: 10\\n  },\\n  myLocationControlsEnabled: true,\\n  // 设置logo缩放比例为0.9\\n  logoScale: 0.9\\n};",
        "type": "Reference",
        "function_call": "getLogoScale()",
        "function_name": "[h2]Logo缩放比例",
        "parent_text": "  [h2]Logo缩放比例 Map Kit提供2种方式设置地图的Logo缩放比例：初始化地图时和创建地图后。 方式一：初始化地图时 在地图初始化参数中设置logoScale参数，取值范围是[0.8, 1]，默认值是1。  方式二：创建地图后  创建地图后，调用MapComponentController对象的setLogoScale方法设置Logo缩放比例。this.mapController.setLogoScale(0.9); 获取Logo缩放比例。通过调用MapComponentController对象的getLogoScale方法获取当前Logo缩放比例。 let logoScale: number = this.mapController.getLogoScale();  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14596124816177\\\"'> <a name='\\\"section14596124816177\\\"'></a><a name='\\\"section14596124816177\\\"'></a> <h4>[h2]Logo缩放比例</h4> <p>Map Kit提供2种方式设置地图的Logo缩放比例：初始化地图时和创建地图后。</p> <p>方式一：初始化地图时</p> <p>在地图初始化参数中设置logoScale参数，取值范围是[0.8, 1]，默认值是1。</p>  <p>方式二：创建地图后</p> <ol> <li>创建地图后，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section816451553012\\\"' target='\\\"_blank\\\"'>MapComponentController</a>对象的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section205343210177\\\"' target='\\\"_blank\\\"'>setLogoScale</a>方法设置Logo缩放比例。<pre class='\\\"typescript\\\"'>this.mapController.setLogoScale(0.9);</pre></li> <li><span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>获取Logo缩放比例。</span><p>通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section816451553012\\\"' target='\\\"_blank\\\"'>MapComponentController</a>对象的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section18243711173212\\\"' target='\\\"_blank\\\"'>getLogoScale</a>方法获取当前Logo缩放比例。</p> <pre class='\\\"typescript\\\"'>let logoScale: number = this.mapController.getLogoScale();</pre></li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-presenting.html"
    },
    {
        "id": 158,
        "pre": "this.mapOptions = {\\n  position: {\\n    target: {\\n      latitude: 39.9,\\n      longitude: 116.4\\n    },\\n    zoom: 2\\n  },\\n  // 开启3D地球\\n  sphereEnabled: true\\n};",
        "type": "Reference",
        "function_call": "isSphereEnabled()",
        "function_name": "[h2]开启3D地球",
        "parent_text": "  [h2]开启3D地球 Map Kit提供2种方式开启3D地球：初始化地图时和创建地图后。 开启3D地球后，将地图缩放到5级及以下可看到3D地球的效果。 方式一：初始化地图时 在地图初始化参数中设置3D地球的开启状态，默认值是false。  方式二：创建地图后       创建地图后，调用MapComponentController对象的setSphereEnabled方法开启3D地球，通过调用MapComponentController对象的isSphereEnabled方法可获取3D地球的开启状态。      // 开启3D地球\\nthis.mapController.setSphereEnabled(true);\\n// 获取3D地球的开启状态\\nlet result: boolean = this.mapController.isSphereEnabled();  显示效果如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section143177134122\\\"'> <a name='\\\"section143177134122\\\"'></a><a name='\\\"section143177134122\\\"'></a> <h4>[h2]开启3D地球</h4> <p>Map Kit提供2种方式开启3D地球：初始化地图时和创建地图后。</p> <p><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>开启3D地球后，将地图缩放到5级及以下可看到3D地球的效果</span>。</p> <p>方式一：初始化地图时</p> <p>在地图初始化参数中设置3D地球的开启状态，默认值是false。</p>  <p>方式二：创建地图后</p> <div class='\\\"p\\\"'>      创建地图后，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section816451553012\\\"' target='\\\"_blank\\\"'>MapComponentController</a>对象的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section67801022102716\\\"' target='\\\"_blank\\\"'>setSphereEnabled</a>方法开启3D地球，通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section816451553012\\\"' target='\\\"_blank\\\"'>MapComponentController</a>对象的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1825143352110\\\"' target='\\\"_blank\\\"'>isSphereEnabled</a>方法可获取<span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>3D地球的开启状态</span>。      <pre class='\\\"typescript\\\"'>// 开启3D地球\\nthis.mapController.setSphereEnabled(true);\\n// 获取3D地球的开启状态\\nlet result: boolean = this.mapController.isSphereEnabled();</pre> </div> <p>显示效果如下：</p> <p><span><img height='\\\"513.310441\\\"' originheight='\\\"698\\\"' originwidth='\\\"392\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120136.81462467161879885423856488667713:50001231000000:2800:3262949D9B358FA2E3DDAC38C9C82F3B824153A9B1701936EAEFAEE93108DBEA.png\\\"' title='\\\"点击放大\\\"' width='\\\"288.27750000000003\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-presenting.html"
    },
    {
        "id": 159,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-hash\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section141521224133814\\\"'><a name='\\\"section141521224133814\\\"'></a><a name='\\\"section141521224133814\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-hash.html"
    },
    {
        "id": 160,
        "pre": "import cryptoFramework from '@ohos.security.cryptoFramework';\\ncryptoFramework.createMd('SHA256');\\n\\nimport { CryptoJS } from '@ohos/crypto-js';\\nCryptoJS.SHA256('Message').toString();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section112401357449\\\"'><a name='\\\"section112401357449\\\"'></a><a name='\\\"section112401357449\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-hash.html"
    },
    {
        "id": 161,
        "pre": "import cryptoFramework from '@ohos.security.cryptoFramework';\\ncryptoFramework.createMd('MD5');\\n\\nimport { CryptoJS } from '@ohos/crypto-js';\\nCryptoJS.MD5('Message').toString();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1320261874915\\\"'><a name='\\\"section1320261874915\\\"'></a><a name='\\\"section1320261874915\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-hash.html"
    },
    {
        "id": 162,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/naming-convention\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_naming-convention.html"
    },
    {
        "id": 163,
        "pre": "// 默认类名为大驼峰的命名风格，函数名为小驼峰的命名风格\\nexport class Bar {\\n  public meth() {\\n    console.info('method');\\n  }\\n}\\n\\nexport function foo() {\\n  console.info('function');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_naming-convention.html"
    },
    {
        "id": 164,
        "pre": "// 默认类名为大驼峰的命名风格，函数名为小驼峰的命名风格\\nexport class bar {\\n  public Meth() {\\n    console.info('method');\\n  }\\n}\\n\\nexport function Foo() {\\n  console.info('function');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_naming-convention.html"
    },
    {
        "id": 165,
        "pre": "\\\"requestPermissions\\\": [\\n  {\\n\\t\\\"name\\\": \\\"ohos.permission.FILE_GUARD_MANAGER\\\"\\n  },\\n  {\\n\\t\\\"name\\\": \\\"ohos.permission.SET_FILE_GUARD_POLICY\\\"\\n  },\\n  {\\n\\t\\\"name\\\": \\\"ohos.permission.ENTERPRISE_RECOVERY_KEY\\\" \\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "申明接口所需权限",
        "parent_text": "申明接口所需权限在申请权限前，请保证符合权限使用的基本原则。然后在工程Module对应的module.json5配置文件中\\\"requestPermissions\\\"标签下声明实际所需的权限。 应用能力  需要权限    文件分级管控  ohos.permission.FILE_GUARD_MANAGER   ohos.permission.SET_FILE_GUARD_POLICY   企业恢复密钥  ohos.permission.ENTERPRISE_RECOVERY_KEY     例如：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section29162917278\\\"'><a name='\\\"section29162917278\\\"'></a><a name='\\\"section29162917278\\\"'></a><h4>申明接口所需权限</h4><p>在申请权限前，请保证符合<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-permission-mgmt-overview\\\"' target='\\\"_blank\\\"'>权限使用的基本原则</a>。然后在工程Module对应的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file\\\"' target='\\\"_blank\\\"'>module.json5</a>配置文件中\\\"requestPermissions\\\"标签下声明实际所需的权限。</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>应用能力</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>需要权限</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' rowspan='\\\"2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>文件分级管控</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>ohos.permission.FILE_GUARD_MANAGER</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"'><p>ohos.permission.SET_FILE_GUARD_POLICY</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>企业恢复密钥</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>ohos.permission.ENTERPRISE_RECOVERY_KEY</p> </td> </tr> </tbody></table> </div> <p>例如：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/dataguard-preparations.html"
    },
    {
        "id": 166,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/consistent-type-imports\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-imports.html"
    },
    {
        "id": 167,
        "pre": "// 默认推荐使用import type Foo from '...'\\nimport type { Foo } from 'Foo';\\nimport type Bar from 'Bar';\\nexport type T = Foo;\\nexport const x: Bar = 1;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-imports.html"
    },
    {
        "id": 168,
        "pre": "// 默认推荐使用import type Foo from '...'\\nimport { Foo } from 'Foo';\\nimport Bar from 'Bar';\\nexport type T = Foo;\\nexport const x: Bar = 1;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-imports.html"
    },
    {
        "id": 169,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-no-state-var-access-in-loop\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-state-var-access-in-loop.html"
    },
    {
        "id": 170,
        "pre": "import hilog from '@ohos.hilog'\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  @State message: string = '';\\n  build() {\\n    Column() {\\n      Button('点击打印日志')\\n        .onClick(() => {\\n          this.message = 'click';\\n          let logMessage: string = this.message;\\n          for (let i = 0; i < 10; i++) {\\n            hilog.info(0x0000, 'TAG', '%{public}s', logMessage);\\n          }\\n        })\\n        .width('90%')\\n        .backgroundColor(Color.Blue)\\n        .fontColor(Color.White)\\n        .margin({\\n          top: 10\\n        })\\n    }\\n    .justifyContent(FlexAlign.Start)\\n    .alignItems(HorizontalAlign.Center)\\n    .margin({\\n      top: 15\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-state-var-access-in-loop.html"
    },
    {
        "id": 171,
        "pre": "import hilog from '@ohos.hilog'\\n@Entry\\n@Component\\nstruct MyComponent{\\n  @State message: string = '';\\n  build() {\\n    Column() {\\n      Button('点击打印日志')\\n        .onClick(() => {\\n          this.message = 'click';\\n          for (let i = 0; i < 10; i++) {\\n            hilog.info(0x0000, 'TAG', '%{public}s', this.message);\\n          }\\n        })\\n        .width('90%')\\n        .backgroundColor(Color.Blue)\\n        .fontColor(Color.White)\\n        .margin({\\n          top: 10\\n        })\\n    }\\n    .justifyContent(FlexAlign.Start)\\n    .alignItems(HorizontalAlign.Center)\\n    .margin({\\n      top: 15\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-state-var-access-in-loop.html"
    },
    {
        "id": 172,
        "pre": "\\\"requestPermissions\\\":[\\n    {\\n      \\\"name\\\" : \\\"ohos.permission.INTERNET\\\"\\n    }\\n  ]",
        "type": "Reference",
        "function_call": "backward()",
        "function_name": "历史记录导航",
        "parent_text": "  历史记录导航 在前端页面点击网页中的链接时，Web组件默认会自动打开并加载目标网址。当前端页面替换为新的加载链接时，会自动记录已经访问的网页地址。可以通过forward()和backward()接口向前/向后浏览上一个/下一个历史记录。 页面加载过程中，若涉及网络资源获取，需要在module.json5中配置网络访问权限，添加方法请参考在配置文件中声明权限。  在下面的示例中，点击应用的按钮来触发前端页面的后退操作。 // xxx.ets\\nimport { webview } from '@kit.ArkWeb';\\n\\n@Entry\\n@Component\\nstruct WebComponent {\\n  webviewController: webview.WebviewController = new webview.WebviewController();\\n  \\n  build() {\\n    Column() {\\n      Button('loadData')\\n        .onClick(() => {\\n          if (this.webviewController.accessBackward()) {\\n            this.webviewController.backward();\\n          }\\n        })\\n      Web({ src: 'https://www.example.com/cn/', controller: this.webviewController })\\n    }\\n  }\\n} 如果存在历史记录，accessBackward()接口会返回true。同样，您可以使用accessForward()接口检查是否存在前进的历史记录。如果您不执行检查，那么当用户浏览到历史记录的末尾时，调用forward()和backward()接口时将不执行任何操作。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"历史记录导航\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459165__%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E5%AF%BC%E8%88%AA\\\"'></a><a name='\\\"%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E5%AF%BC%E8%88%AA\\\"'></a> <h4>历史记录导航</h4> <p>在前端页面点击网页中的链接时，Web组件默认会自动打开并加载目标网址。当前端页面替换为新的加载链接时，会自动记录已经访问的网页地址。可以通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-webview#forward\\\"' target='\\\"_blank\\\"'>forward()</a>和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-webview#backward\\\"' target='\\\"_blank\\\"'>backward()</a>接口向前/向后浏览上一个/下一个历史记录。</p> <p>页面加载过程中，若涉及网络资源获取，需要在module.json5中配置网络访问权限，添加方法请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/declare-permissions\\\"'>在配置文件中声明权限</a>。</p>  <p>在下面的示例中，点击应用的按钮来触发前端页面的后退操作。</p> <pre class='\\\"ts\\\"'>// xxx.ets\\nimport { webview } from '@kit.ArkWeb';\\n\\n@Entry\\n@Component\\nstruct WebComponent {\\n  webviewController: webview.WebviewController = new webview.WebviewController();\\n  \\n  build() {\\n    Column() {\\n      Button('loadData')\\n        .onClick(() =&gt; {\\n          if (this.webviewController.accessBackward()) {\\n            this.webviewController.backward();\\n          }\\n        })\\n      Web({ src: 'https://www.example.com/cn/', controller: this.webviewController })\\n    }\\n  }\\n}</pre> <p>如果存在历史记录，<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-webview#accessbackward\\\"' target='\\\"_blank\\\"'>accessBackward()</a>接口会返回true。同样，您可以使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-webview#accessforward\\\"' target='\\\"_blank\\\"'>accessForward()</a>接口检查是否存在前进的历史记录。如果您不执行检查，那么当用户浏览到历史记录的末尾时，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-webview#forward\\\"' target='\\\"_blank\\\"'>forward()</a>和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-webview#backward\\\"' target='\\\"_blank\\\"'>backward()</a>接口时将不执行任何操作。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/web-redirection-and-browsing-history-mgmt.html"
    },
    {
        "id": 173,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n// JWSUtil为自定义类，可参见示例代码\\nimport { JWSUtil } from '../common/JWSUtil';\\n\\nqueryPurchases() {\\n  const param: iap.QueryPurchasesParameter = {\\n    productType: iap.ProductType.CONSUMABLE,\\n    queryType: iap.PurchaseQueryType.UNFINISHED\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.queryPurchases(context, param).then((res: iap.QueryPurchaseResult) => {\\n    console.info('Succeeded in querying purchases.');\\n    const purchaseDataList: string[] = res.purchaseDataList;\\n    if (purchaseDataList === undefined || purchaseDataList.length <= 0) {\\n      return;\\n    }\\n    for (let i = 0; i < purchaseDataList.length; i++) {\\n      const jwsPurchaseOrder: string = JSON.parse(purchaseDataList[i]).jwsPurchaseOrder;\\n      if (!jwsPurchaseOrder) {\\n        continue;\\n      }\\n      const purchaseStr = JWSUtil.decodeJwsObj(jwsPurchaseOrder);\\n      // 需自定义PurchaseOrderPayload类，包含的信息请参见PurchaseOrderPayload\\n      const purchaseOrderPayload = JSON.parse(purchaseStr) as PurchaseOrderPayload;\\n      // 处理发货\\n      // ...\\n      // 发货成功后向IAP Kit发送finishPurchase请求，确认发货，完成购买\\n      this.finishPurchase(purchaseOrderPayload);\\n    }\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query purchases. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}\\n\\nfinishPurchase(purchaseOrder: PurchaseOrderPayload) {\\n  const finishPurchaseParam: iap.FinishPurchaseParameter = {\\n    productType: Number(purchaseOrder.productType),\\n    purchaseToken: purchaseOrder.purchaseToken,\\n    purchaseOrderId: purchaseOrder.purchaseOrderId\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.finishPurchase(context, finishPurchaseParam).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in finishing purchase.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query purchases. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "发货成功后，应用需调用finishPurchase接口确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发起请求时，需在请求参数FinishPurchaseParameter中携带PurchaseOrderPayload中的productType、purchaseToken、purchaseOrderId。 请求成功后，IAP服务器会将相应商品标记为已发货状态。对于消耗型商品，IAP服务器会将相应商品重新设置为可购买状态，用户即可再次购买该商品。对于非消耗型商品，用户购买后永久拥有，无法再次购买该商品。 ",
        "import_module": null,
        "parent": "<li>发货成功后，应用需调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>接口确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。<p>发起请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section103714142118\\\"' target='\\\"_blank\\\"'>FinishPurchaseParameter</a>中携带<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>中的productType、purchaseToken、purchaseOrderId。</p> <p>请求成功后，IAP服务器会将相应商品标记为已发货状态。对于消耗型商品，IAP服务器会将相应商品重新设置为可购买状态，用户即可再次购买该商品。对于非消耗型商品，用户购买后永久拥有，无法再次购买该商品。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-delivering-products.html"
    },
    {
        "id": 174,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n// JWSUtil为自定义类，可参见示例代码\\nimport { JWSUtil } from '../common/JWSUtil';\\n\\nqueryPurchases() {\\n  const param: iap.QueryPurchasesParameter = {\\n    productType: iap.ProductType.NONCONSUMABLE,\\n    queryType: iap.PurchaseQueryType.CURRENT_ENTITLEMENT\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.queryPurchases(context, param).then((res: iap.QueryPurchaseResult) => {\\n    console.info('Succeeded in querying purchases.');\\n    const purchaseDataList: string[] = res.purchaseDataList;\\n    if (purchaseDataList === undefined || purchaseDataList.length <= 0) {\\n      return;\\n    }\\n    for (let i = 0; i < purchaseDataList.length; i++) {\\n      const jwsPurchaseOrder: string = JSON.parse(purchaseDataList[i]).jwsPurchaseOrder;\\n      if (!jwsPurchaseOrder) {\\n        continue;\\n      }\\n      // 对jwsPurchaseOrder进行解码验签\\n      const purchaseStr = JWSUtil.decodeJwsObj(jwsPurchaseOrder);\\n      // 需自定义PurchaseOrderPayload类，包含的信息请参见PurchaseOrderPayload\\n      const purchaseOrderPayload = JSON.parse(purchaseStr) as PurchaseOrderPayload;\\n      // 处理权益发放\\n      // ...\\n      // 发放权益后向IAP Kit发送finishPurchase请求，确认发货，完成购买\\n      if (purchaseOrderPayload && purchaseOrderPayload.finishStatus !== '1') {\\n        this.finishPurchase(purchaseOrderPayload);\\n      }\\n    }\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query purchases. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}\\n\\nfinishPurchase(purchaseOrder: PurchaseOrderPayload) {\\n  const finishPurchaseParam: iap.FinishPurchaseParameter = {\\n    productType: Number(purchaseOrder.productType),\\n    purchaseToken: purchaseOrder.purchaseToken,\\n    purchaseOrderId: purchaseOrder.purchaseOrderId\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.finishPurchase(context, finishPurchaseParam).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in finishing purchase.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query purchases. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]开发步骤",
        "parent_text": "  [h2]开发步骤  应用客户端向IAP Kit发起queryPurchases请求，获取用户已购非消耗型商品的订单状态信息。在请求参数QueryPurchasesParameter中指定productType为iap.ProductType.NONCONSUMABLE，同时指定queryType为iap.PurchaseQueryType.CURRENT_ENTITLEMENT。当接口请求成功时，IAP Kit将返回一个QueryPurchaseResult对象，该对象包含承载了订单信息的PurchaseData的列表。 对每个PurchaseData.jwsPurchaseOrder进行解码验签。 验证成功可得到对应的PurchaseOrderPayload的JSON字符串，此时需要发放相关权益。 发放权益后，应用需调用finishPurchase接口确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发起请求时，需在请求参数FinishPurchaseParameter中携带PurchaseOrderPayload中的productType、purchaseToken、purchaseOrderId。 请求成功后，IAP服务器会将相应商品标记为已发货。对于非消耗型商品，用户购买后永久拥有，无法再次购买该商品。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section18214541125\\\"'> <a name='\\\"section18214541125\\\"'></a><a name='\\\"section18214541125\\\"'></a> <h4>[h2]开发步骤</h4> <ol> <li>应用客户端向IAP Kit发起<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1147122418532\\\"' target='\\\"_blank\\\"'>queryPurchases</a>请求，获取用户已购非消耗型商品的订单状态信息。<p>在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section555872993213\\\"' target='\\\"_blank\\\"'>QueryPurchasesParameter</a>中指定productType为<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section59035422210\\\"' target='\\\"_blank\\\"'>iap.ProductType.NONCONSUMABLE</a>，同时指定queryType为<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1389262216514\\\"' target='\\\"_blank\\\"'>iap.PurchaseQueryType.CURRENT_ENTITLEMENT</a>。当接口请求成功时，IAP Kit将返回一个<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section820381425513\\\"' target='\\\"_blank\\\"'>QueryPurchaseResult</a>对象，该对象包含承载了订单信息的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section650794012482\\\"' target='\\\"_blank\\\"'>PurchaseData</a>的列表。</p></li> <li>对每个<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section650794012482\\\"' target='\\\"_blank\\\"'>PurchaseData</a>.jwsPurchaseOrder进行<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-verifying-signature\\\"' target='\\\"_blank\\\"'>解码验签</a>。</li> <li>验证成功可得到对应的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>的JSON字符串，此时需要发放相关权益。</li> <li>发放权益后，应用需调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>接口确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。<p>发起请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section103714142118\\\"' target='\\\"_blank\\\"'>FinishPurchaseParameter</a>中携带<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>中的productType、purchaseToken、purchaseOrderId。</p> <p>请求成功后，IAP服务器会将相应商品标记为已发货。对于非消耗型商品，用户购买后永久拥有，无法再次购买该商品。</p></li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-delivering-products.html"
    },
    {
        "id": 175,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n/**\\n * 拉起退款界面\\n */\\ncreateRefundRequest() {\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  // 调用iap.createRefundRequest拉起退款，传入context和purchaseOrderId\\n  iap.createRefundRequest(context, purchaseOrderId).then((result) => {\\n    // 退款成功\\n    console.info('Succeeded in create refund request.');\\n    // ...\\n  }).catch((err: BusinessError) => {\\n    // 退款失败\\n    console.error(`Failed to create refund request. Code is ${err.code}, message is ${err.message}`);\\n    // ...\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "应用内接入退款入口",
        "parent_text": "  应用内接入退款入口      仅支持非游戏类应用接入。 该退款入口仅支持应用本身所产生的订单的退款。    拉起退款 用户发起退款后，应用客户端向IAP Kit发送createRefundRequest请求拉起退款页面，请求中需携带待退款的订单号（purchaseOrderId）。 代码示例  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section13850184720182\\\"'> <a name='\\\"section13850184720182\\\"'></a><a name='\\\"section13850184720182\\\"'></a> <h4>应用内接入退款入口</h4> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120126.48961255488857642265337506881887:50001231000000:2800:19805F0C6DC134A6D37F1F3FAED6D26EA45FA220799812517CC6615BEC0B019B.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ul> <li>仅支持非游戏类应用接入。</li> <li>该退款入口仅支持应用本身所产生的订单的退款。</li> </ul> </div> </div> <p><strong>拉起退款</strong></p> <p>用户发起退款后，应用客户端向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section3308191561314\\\"' target='\\\"_blank\\\"'>createRefundRequest</a>请求拉起退款页面，请求中需携带待退款的订单号（purchaseOrderId）。</p> <p><strong>代码示例</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-refund.html"
    },
    {
        "id": 176,
        "pre": "{\\n  \\\"app\\\": {\\n    // bundleName需要与开发者在AppGallery Connect中创建应用时的包名保持一致\\n    \\\"bundleName\\\": \\\"com.huawei.******.******.demo\\\",\\n    // ...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "配置bundleName",
        "parent_text": "配置bundleName在HarmonyOS应用/元服务“AppScope/app.json5”下的bundleName配置需要与开发者在AppGallery Connect中创建应用时的包名保持一致。 配置内容示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section196681135122713\\\"'><a name='\\\"section196681135122713\\\"'></a><a name='\\\"section196681135122713\\\"'></a><h4>配置bundleName</h4><p>在HarmonyOS应用/元服务<span class='\\\"filepath\\\"'>“AppScope/app.json5”</span>下的<strong>bundleName</strong>配置需要与开发者在<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>中<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>创建应用</a>时的包名保持一致。</p> <p>配置内容示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-config-app-identity-info.html"
    },
    {
        "id": 177,
        "pre": "{\\n    \\\"module\\\": {\\n        // ...\\n        \\\"metadata\\\": [\\n            {\\n                \\\"name\\\": \\\"app_id\\\",\\n                \\\"value\\\": \\\"...\\\"\\n            },\\n            {\\n                \\\"name\\\": \\\"client_id\\\",\\n                \\\"value\\\": \\\"...\\\"\\n            },\\n            // ...\\n        ]\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "配置应用属性",
        "parent_text": "配置应用属性在HarmonyOS应用/元服务“entry/src/main/module.json5”文件中module的metadata节点下增加client_id和app_id属性配置。 配置内容示例如下：  其中app_id的“value”的值为应用的APP ID（在AppGallery Connect网站点击“我的项目”，在项目列表中找到项目，在“项目设置 > 常规”页面的“应用”区域获取“APP ID”的值），详见下图的标号1处。其中client_id的“value”的值为应用的OAuth 2.0客户端ID（在AppGallery Connect网站点击“我的项目”，在项目列表中找到项目，在“项目设置 > 常规”页面的“应用”区域获取“OAuth 2.0客户端ID（凭据）：Client ID”的值），详见下图的标号2处。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section288614234313\\\"'><a name='\\\"section288614234313\\\"'></a><a name='\\\"section288614234313\\\"'></a><h4>配置应用属性</h4><p>在HarmonyOS应用/元服务<span class='\\\"filepath\\\"'>“entry/src/main/module.json5”</span>文件中<strong>module</strong>的<strong>metadata</strong>节点下增加<strong>client_id</strong>和<strong>app_id</strong>属性配置。</p> <p>配置内容示例如下：</p>  <ul><li>其中<strong>app_id</strong>的<span class='\\\"parmname\\\"'>“value”</span>的值为应用的APP ID（在<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>网站点击“我的项目”，在项目列表中找到项目，在<span class='\\\"menucascade\\\"'>“<span class='\\\"uicontrol\\\"'>项目设置</span> &gt; <span class='\\\"uicontrol\\\"'>常规</span>”</span>页面的<span class='\\\"wintitle\\\"'>“应用”</span>区域获取“APP ID”的值），详见下图的<strong>标号1</strong>处。</li><li>其中<strong>client_id</strong>的<span class='\\\"parmname\\\"'>“value”</span>的值为应用的OAuth 2.0客户端ID（在<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>网站点击“我的项目”，在项目列表中找到项目，在<span class='\\\"menucascade\\\"'>“<span class='\\\"uicontrol\\\"'>项目设置</span> &gt; <span class='\\\"uicontrol\\\"'>常规</span>”</span>页面的<span class='\\\"wintitle\\\"'>“应用”</span>区域获取“OAuth 2.0客户端ID（凭据）：Client ID”的值），详见下图的<strong>标号2</strong>处。</li></ul> <p><span><img height='\\\"496.4225\\\"' originheight='\\\"631\\\"' originwidth='\\\"1208\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120203.97778523950476193570855489193444:50001231000000:2800:709865F0FDB636015141A4640CF751BDF0AD6FE67EB882DCE1E6EEC942544AB9.png\\\"' title='\\\"点击放大\\\"' width='\\\"957.6\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-config-app-identity-info.html"
    },
    {
        "id": 178,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/size-unit\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_size-unit.html"
    },
    {
        "id": 179,
        "pre": "const WIDTH_SIZE = 100;\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Row() {\\n      Column() {\\n        Button('btn').size({ width: 40, height: '20vp' })\\n      }.width(WIDTH_SIZE)\\n      .height('100vp')\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_size-unit.html"
    },
    {
        "id": 180,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Row() {\\n      Column() {\\n        Button('btn').size({ width: '40px', height: '20px' })\\n      }.width('100px')\\n      .height('100px')\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_size-unit.html"
    },
    {
        "id": 181,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/indent\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_indent.html"
    },
    {
        "id": 182,
        "pre": "enum E {\\n  a = 'a',\\n  b = 'b',\\n  c = 'c'\\n}\\n\\nexport function test(e: E) {\\n  switch (e) {\\n    case E.a:\\n      console.info('doSomething');\\n      break;\\n    case E.b:\\n    case E.c:\\n      console.info('doSomething');\\n      break;\\n    default:\\n      console.info('doSomething');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_indent.html"
    },
    {
        "id": 183,
        "pre": "enum E {\\n  a = 'a',\\n  b = 'b',\\n  c = 'c'\\n}\\n\\nexport function test(e: E) {\\n  switch (e) {\\n      // Expected indentation of 2 relative to switch.\\n      case E.a:\\n      // Expected indentation of 2 relative to case.\\n      console.info('hello');\\n      // Expected indentation of 2 relative to case.\\n      break;\\n    case E.b:\\n      console.info('hello');\\n      break;\\n    case E.c:\\n    // Expected indentation of 2 relative to case.\\n    console.info('hello');\\n      break;\\n    default:\\n    // Expected indentation of 2 relative to default.\\n    console.info('hello');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_indent.html"
    },
    {
        "id": 184,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-throw-literal\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-throw-literal.html"
    },
    {
        "id": 185,
        "pre": "// 抛出Error对象\\nthrow new Error();\\n\\nconst e = new Error('error');\\nthrow e;\\n\\nconst err1 = new Error();\\nthrow err1;\\n\\nfunction err2() {\\n  return new Error();\\n}\\nthrow err2();\\n\\nclass CustomError extends Error {\\n  // ...\\n}\\nthrow new CustomError();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-throw-literal.html"
    },
    {
        "id": 186,
        "pre": "throw 'error';\\n\\nthrow 0;\\n\\nthrow undefined;\\n\\nthrow null;\\n\\nconst err1 = new Error();\\nthrow 'an ' + err1;\\n\\nconst err2 = new Error();\\nthrow `${err2}`;\\n\\nconst err3 = '';\\nthrow err3;\\n\\nfunction err() {\\n  return '';\\n}\\nthrow err();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-throw-literal.html"
    },
    {
        "id": 187,
        "pre": "import { smartMobilityCommon } from '@kit.CarKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": "import { smartMobilityCommon } from '@kit.CarKit';",
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-get-connection-status.html"
    },
    {
        "id": 188,
        "pre": "import { map, mapCommon, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-arc.html"
    },
    {
        "id": 189,
        "pre": "import { CallerInfoQueryExtensionAbility, CallerInfo } from '@kit.CallServiceKit';\\nexport default class EntryCallerInfoQueryExtAbility extends CallerInfoQueryExtensionAbility {\\n  onQueryCallerInfo(phoneNumber: string): Promise<CallerInfo> {\\n    return new Promise<CallerInfo>((resolve, reject) => {\\n      let isSuccess = true;\\n      // 在此处实现根据号码查询企业联系人的业务逻辑\\n      if (isSuccess) {\\n        // 查询成功，返回结果\\n        resolve({\\n          contactName:\\\"xxxx\\\",\\n          employeeId:\\\"xxxx\\\",\\n          department:\\\"xxxx\\\",\\n          position:\\\"xxxx\\\"\\n        });\\n      } else {\\n        // 查询失败，返回错误原因\\n        reject(\\\"error reason\\\");\\n      }\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程内创建一个ExtensionAbility类型的自定义组件并继承CallerInfoQueryExtensionAbility，完成onQueryCallerInfo方法的复写。代码示例： ",
        "import_module": null,
        "parent": "<li>在工程内创建一个ExtensionAbility类型的自定义组件并继承<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/callservicekit-callerinfoquery-extension-ability\\\"' target='\\\"_blank\\\"'>CallerInfoQueryExtensionAbility</a>，完成onQueryCallerInfo方法的复写。<p>代码示例：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/callservice-enterprise-contact-display.html"
    },
    {
        "id": 190,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/init-declarations\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_init-declarations.html"
    },
    {
        "id": 191,
        "pre": "// 默认变量必须在声明时初始化\\nexport function foo() {\\n  console.info('hello');\\n}\\n\\nexport const bar = 1;\\nexport const qux = 3;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_init-declarations.html"
    },
    {
        "id": 192,
        "pre": "// 默认变量必须在声明时初始化\\nexport function foo() {\\n  console.info('hello');\\n}\\n\\nexport const bar: string;\\nexport const qux: number;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_init-declarations.html"
    },
    {
        "id": 193,
        "pre": "/**\\n * Prints \\\"log\\\" logs.\\n *\\n * @param { string } message - Text to print.\\n * @myTag\\n * @since 11\\n */",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "注释格式要求：当前仅支持“/** */”文档注释格式；支持param等JSDoc标准标签和myTag等自定义标签生成相应文档。 ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129341__p1744713447125\\\"'><strong>注释格式要求：</strong>当前仅支持“/** */”文档注释格式；支持param等JSDoc标准标签和myTag等自定义标签生成相应文档。 </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-arktsdoc.html"
    },
    {
        "id": 194,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-useless-constructor\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-useless-constructor.html"
    },
    {
        "id": 195,
        "pre": "class A {\\n  public name: string = 'hello';\\n}\\n\\nexport class B {\\n  public name: string = 'name';\\n\\n  public constructor() {\\n    console.info('hello');\\n  }\\n}\\n\\nexport class C extends A {\\n  public constructor() {\\n    super();\\n    console.info('hello');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-useless-constructor.html"
    },
    {
        "id": 196,
        "pre": "class A {\\n  public name: string = 'name';\\n\\n  constructor() {\\n\\n  }\\n}\\n\\nexport class B extends A {\\n  public name: string = 'name';\\n\\n  constructor() {\\n    super();\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-useless-constructor.html"
    },
    {
        "id": 197,
        "pre": "import { scanCore, scanBarcode } from '@kit.ScanKit';\\n// 导入默认界面需要的日志模块和错误码模块\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入默认界面扫码模块，scanCore提供扫码类型定义，scanBarcode提供拉起默认界面扫码的方法和参数，导入方法如下。",
        "import_module": null,
        "parent": "<li>导入默认界面扫码模块，<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/scan-scancore\\\"' target='\\\"_blank\\\"'>scanCore</a>提供扫码类型定义，<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/scan-scanbarcode-api\\\"' target='\\\"_blank\\\"'>scanBarcode</a>提供拉起默认界面扫码的方法和参数，导入方法如下。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scan-scanbarcode.html"
    },
    {
        "id": 198,
        "pre": "\\\"arkOptions\\\": {\\n  \\\"obfuscation\\\": {\\n    \\\"ruleOptions\\\": {\\n      \\\"enable\\\": true,\\n      \\\"files\\\": [\\\"./obfuscation-rules.txt\\\"],\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "开启混淆开关   在本模块build-profile.json5配置文件中的arkOptions.obfuscation.ruleOptions字段中，通过enable字段配置是否开启混淆。  ",
        "import_module": null,
        "parent": "<li><p>开启混淆开关</p> <p>  在本模块build-profile.json5配置文件中的arkOptions.obfuscation.ruleOptions字段中，通过enable字段配置是否开启混淆。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation-guide.html"
    },
    {
        "id": 199,
        "pre": "\\\"arkOptions\\\": {\\n  \\\"obfuscation\\\": {\\n    \\\"ruleOptions\\\": {\\n      \\\"enable\\\": true,\\n      \\\"files\\\": [\\\"./obfuscation-rules.txt\\\"],\\n    }\\n    \\\"consumerFiles\\\": [\\\"./consumer-rules.txt\\\"]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "consumer-rules.txt   对于HAR模块，在build-profile.json5中额外有一个arkOptions.obfuscation.consumerFiles字段，用于指定当本包被依赖时，期望在当前编译流程生效的混淆规则，新建HAR模块时会创建默认文件consumer-rules.txt。它与obfuscation-rules.txt的区别是：obfuscation-rules.txt在编译本模块时生效，consumer-rules.txt在编译依赖本模块的其他模块时生效。  ",
        "import_module": null,
        "parent": "<li><p>consumer-rules.txt</p> <p>  对于HAR模块，在build-profile.json5中额外有一个arkOptions.obfuscation.consumerFiles字段，<strong>用于指定当本包被依赖时，期望在当前编译流程生效的混淆规则</strong>，新建HAR模块时会创建默认文件consumer-rules.txt。它与obfuscation-rules.txt的区别是：<strong>obfuscation-rules.txt在编译本模块时生效，consumer-rules.txt在编译依赖本模块的其他模块时生效</strong>。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation-guide.html"
    },
    {
        "id": 200,
        "pre": "// 静态定义，动态访问：属性名在对象定义时是静态的，但访问时通过动态构建属性名（通常使用字符串拼接）来访问\\nconst obj = {\\n  staticName: value  // 静态定义属性\\n};\\nconst fieldName = 'static' + 'Name';  // 动态构建属性名\\nconsole.log(obj[fieldName]);  // 使用方括号语法动态访问属性",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "若代码中存在静态定义，动态访问的情况或者动态定义，静态访问的情况，需要使用-keep-property-name保留属性名称。示例： // 动态定义，静态访问：属性名通过动态表达式在对象定义时确定，但访问时直接使用点语法（假设你知道属性名的结果）\\nconst obj = {\\n  [dynamicExpression]: value  // 动态定义属性\\n};\\nconsole.log(obj.dynamicPropertyName);  // 使用点语法静态访问属性 ",
        "import_module": null,
        "parent": "<li>若代码中存在静态定义，动态访问的情况或者动态定义，静态访问的情况，需要使用-keep-property-name保留属性名称。示例： <pre class='\\\"screen\\\"'>// 动态定义，静态访问：属性名通过动态表达式在对象定义时确定，但访问时直接使用点语法（假设你知道属性名的结果）\\nconst obj = {\\n  [dynamicExpression]: value  // 动态定义属性\\n};\\nconsole.log(obj.dynamicPropertyName);  // 使用点语法静态访问属性</pre> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation-guide.html"
    },
    {
        "id": 201,
        "pre": "import { shippingAddress } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入shippingAddress模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-choose-address\\\"' target='\\\"_blank\\\"'>shippingAddress</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-choose-adress.html"
    },
    {
        "id": 202,
        "pre": "import { OhosPluginId } from '@ohos/hvigor-ohos-plugin';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 常量: ",
        "import_module": "import { OhosPluginId } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section7531132911469\\\"'><a name='\\\"section7531132911469\\\"'></a><a name='\\\"section7531132911469\\\"'></a><h4>[h2]导入模块</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p716410152557\\\"'>常量:</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 203,
        "pre": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1548835116312\\\"'><a name='\\\"section1548835116312\\\"'></a><a name='\\\"section1548835116312\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 204,
        "pre": "import { appTasks, OhosPluginId, OhosAppContext, AppJson } from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor, getNode, HvigorNode  } from '@ohos/hvigor';\\n\\nhvigor.nodesEvaluated(() => {\\n    const node: HvigorNode = getNode(__filename);\\n    const appContext = node.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\\n    console.log('projectName:', appContext.getProjectName());\\n    const appJson5: AppJson.AppOptObj = appContext.getAppJsonOpt();\\n    if (appContext.getBuildMode() === 'debug') {\\n        appJson5.app.versionName = '1.0.0-debug';\\n    } else {\\n        appJson5.app.versionName = '1.0.0-release';\\n    }\\n    appContext.setAppJsonOpt(appJson5);\\n});\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]setAppJsonOpt",
        "parent_text": "[h2]setAppJsonOptsetAppJsonOpt: (appJsonOpt) => void 修改当前构建的app.json5文件中内容的obj对象。 参数: 参数名  类型  必填  说明    appJsonOpt  any  是  设置当前构建的app.json5文件解析出来的obj对象     在工程级hvigorfile.ts中编写示例代码：    setAppJsonOpt会进行schema校验，如果传入的对象不符合校验规则则会抛出异常。  ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section14633161122119\\\"'><a name='\\\"section14633161122119\\\"'></a><a name='\\\"section14633161122119\\\"'></a><h4>[h2]setAppJsonOpt</h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p663361102112\\\"'>setAppJsonOpt: (appJsonOpt) =&gt; void</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p14633201172112\\\"'>修改当前构建的app.json5文件中内容的obj对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p133711011233\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table33719002310\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row12370042318\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.5.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p193740152317\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.5.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p15378018231\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.5.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1837503236\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.5.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p17378052317\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row14371804234\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p73730162316\\\"'>appJsonOpt</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p4816323202313\\\"'>any</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p12376013231\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p69546343237\\\"'>设置当前构建的app.json5文件解析出来的obj对象</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p188856116\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129105__p161971018375\\\"'></p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002202129105__note9707742192613\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180504.12575853556272885531447277829347:50001231000000:2800:74B4E5DEBF184D6BF56C2AF26A358E0D84E1AFCCDC0E7859F5D11E11E5AFB2DC.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p147071542112619\\\"'>setAppJsonOpt会进行schema校验，如果传入的对象不符合校验规则则会抛出异常。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 205,
        "pre": "import { hvigor, HvigorNode, HvigorPlugin } from '@ohos/hvigor';\\nimport { appTasks, OhosHapContext, OhosAppContext, OhosPluginId, Target } from '@ohos/hvigor-ohos-plugin';\\n// 实现自定义插件\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        context() {\\n            return {\\n                data: 'customPlugin xxx'\\n            };\\n        },\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            hvigor.nodesEvaluated(async () => {\\n                // 注册模块级任务\\n                hapTask(currentNode);\\n            });\\n        }\\n    };\\n}\\nfunction hapTask(currentNode: HvigorNode) {\\n    // 等待全部节点加载完成之后获取子节点信息\\n    currentNode.subNodes((node: HvigorNode) => {\\n        // 获取hap模块上下文信息\\n        const hapContext = node.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n        const moduleName = hapContext?.getModuleName();\\n        hapContext?.targets((target: Target) => {\\n            const targetName = target.getTargetName();\\n            node.registerTask({\\n                // 任务名称\\n                name: `${targetName}@getRemoteHspInfo`,\\n                // 任务执行逻辑主体函数\\n                run() {\\n                    const rootNodeContext = currentNode.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\\n                    if (!rootNodeContext) {\\n                        return;\\n                    }\\n                    // 获取未签名的远程hsp相关信息\\n                    const remoteHspInfo = rootNodeContext.getOhpmRemoteHspDependencyInfo();\\n                    console.log(remoteHspInfo)\\n                    // 获取已签名的远程hsp相关信息\\n                    const signedRemoteHspInfo = rootNodeContext.getOhpmRemoteHspDependencyInfo(true);\\n                    console.log(signedRemoteHspInfo)\\n                },\\n                // 配置前置任务依赖\\n                dependencies: [`${targetName}@PackageHap`],\\n                // 配置任务的后置任务依赖\\n                postDependencies: ['assembleHap']\\n            });\\n        });\\n    });\\n}\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]getOhpmRemoteHspDependencyInfo5.6.2+",
        "parent_text": "[h2]getOhpmRemoteHspDependencyInfo5.6.2+getOhpmRemoteHspDependencyInfo: (signed) => Record<string, OhpmDependencyInfo> | object 获取工程下oh-package.json5中配置的hsp包依赖信息。 参数值: 参数名  类型  必填  说明    signed  boolean  否  是否获取签名的hsp包路径，默认为false     返回值: 类型  说明    Record<string, OhpmDependencyInfo> | object  工程下oh-package.json5中配置的hsp包依赖信息     在工程级hvigorfile.ts中编写示例代码：  执行hvigorw assembleHap输出示例： // 工程下oh-package.json5中已配置hsp包依赖\\n// 获取无签名的hsp包路径\\n{\\n  integrated_hsp1_100: {\\n    name: 'integrated_hsp1_100',\\n    version: '1.0.0',\\n    dependencies: {},\\n    packagePath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\oh_modules\\\\\\\\.ohpm\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\oh_modules\\\\\\\\integrated_hsp1_100',\\n    remoteHspPath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\build\\\\\\\\cache\\\\\\\\default\\\\\\\\integrated_hsp\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\integrated_hsp1_100.hsp'\\n  }\\n}\\n// 获取已签名的hsp包路径\\n{\\n  integrated_hsp1_100: {\\n    name: 'integrated_hsp1_100',\\n    version: '1.0.0',\\n    dependencies: {},\\n    packagePath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\oh_modules\\\\\\\\.ohpm\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\oh_modules\\\\\\\\integrated_hsp1_100',\\n    signedRemoteHspPath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\build\\\\\\\\cache\\\\\\\\default\\\\\\\\remote_hsp\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\integrated_hsp1_100-signed.hsp'\\n  }\\n} ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section5378844143410\\\"'><a name='\\\"section5378844143410\\\"'></a><a name='\\\"section5378844143410\\\"'></a><h4>[h2]getOhpmRemoteHspDependencyInfo<sup>5.6.2+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p10378244133413\\\"'>getOhpmRemoteHspDependencyInfo: (signed) =&gt; Record&lt;string, OhpmDependencyInfo&gt; | object</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p1637818441345\\\"'>获取工程下oh-package.json5中配置的hsp包依赖信息。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p61201443386\\\"'>参数值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1512054413814\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row81201444193820\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.5.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1112074453815\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.5.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p61207448389\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.5.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p21201444123818\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.5.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p10120344123816\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row151202044103811\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p35791752154110\\\"'>signed</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p21207445389\\\"'>boolean</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p812084418388\\\"'>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p20121144413811\\\"'>是否获取签名的hsp包路径，默认为false</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p13378444173412\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table16378344123418\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row53781448345\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.7.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p837934418343\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.7.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1937917445346\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row2334205054011\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p52741553134019\\\"'>Record&lt;string, OhpmDependencyInfo&gt; | object</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p7274125319408\\\"'>工程下oh-package.json5中配置的hsp包依赖信息</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p18379174411341\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129105__p1420316511235\\\"'>执行hvigorw assembleHap输出示例：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129105__screen1841032582513\\\"'>// <span rgb(73,179,172);\\\"=\"\" style='\\\"color:'>工程下oh</span>-<span rgb(40,113,204);\\\"=\"\" style='\\\"color:'>package</span>.<span rgb(73,179,172);\\\"=\"\" style='\\\"color:'>json5中已配置hsp包依赖</span>\\n// 获取无签名的hsp包路径\\n{\\n  integrated_hsp1_100: {\\n    name: 'integrated_hsp1_100',\\n    version: '1.0.0',\\n    dependencies: {},\\n    packagePath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\oh_modules\\\\\\\\.ohpm\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\oh_modules\\\\\\\\integrated_hsp1_100',\\n    remoteHspPath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\build\\\\\\\\cache\\\\\\\\default\\\\\\\\integrated_hsp\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\integrated_hsp1_100.hsp'\\n  }\\n}\\n// 获取已签名的hsp包路径\\n{\\n  integrated_hsp1_100: {\\n    name: 'integrated_hsp1_100',\\n    version: '1.0.0',\\n    dependencies: {},\\n    packagePath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\oh_modules\\\\\\\\.ohpm\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\oh_modules\\\\\\\\integrated_hsp1_100',\\n    signedRemoteHspPath: 'D:\\\\\\\\code\\\\\\\\testproject\\\\\\\\dependenices\\\\\\\\build\\\\\\\\cache\\\\\\\\default\\\\\\\\remote_hsp\\\\\\\\integrated_hsp1_100@1.0.0\\\\\\\\integrated_hsp1_100-signed.hsp'\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 206,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport { OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\n\\n// 自定义插件代码\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            const rootNodeContext = currentNode.getContext(OhosPluginId.OHOS_APP_PLUGIN);\\n            if (!rootNodeContext) {\\n                return;\\n            }\\n            const dependenciesInfo = rootNodeContext.getDependenciesOpt()\\n            dependenciesInfo[\\\"har\\\"] = \\\"./har\\\";\\n            rootNodeContext.setDependenciesOpt(dependenciesInfo);   \\n      }\\n    };\\n}\\n\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程级hvigorfile.ts中编写示例代码： ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129105__p387834118127\\\"'>在工程级hvigorfile.ts中编写示例代码： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 207,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport { OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\n\\n// 自定义插件代码\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            const rootNodeContext = currentNode.getContext(OhosPluginId.OHOS_APP_PLUGIN);\\n            if (!rootNodeContext) {\\n                return;\\n            }\\n            const devDependenciesInfo = rootNodeContext.getDevDependenciesOpt();\\n            console.log(devDependenciesInfo)\\n        }\\n    };\\n}\\n\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]getDevDependenciesOpt5.0.10+",
        "parent_text": "[h2]getDevDependenciesOpt5.0.10+getDevDependenciesOpt: () => object 获取工程下oh-package.json5中配置的devDependencies依赖。 返回值: 类型  说明    object  获取工程级别下oh-package.json5中devDependencies信息     在工程级hvigorfile.ts中编写示例代码：  ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section192992531393\\\"'><a name='\\\"section192992531393\\\"'></a><a name='\\\"section192992531393\\\"'></a><h4>[h2]getDevDependenciesOpt<sup>5.0.10+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p429913537915\\\"'>getDevDependenciesOpt: () =&gt; object</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p13299135313916\\\"'>获取工程下oh-package.json5中配置的devDependencies依赖。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p15299165312916\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table22995532911\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row8300753493\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.31.5.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p33001353392\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.31.5.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1630015320913\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row133001453098\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p830045313913\\\"'>object</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p193007531910\\\"'>获取工程级别下oh-package.json5中devDependencies信息</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p1930095318919\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 208,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport { OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\n\\n// 自定义插件代码\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            const rootNodeContext = currentNode.getContext(OhosPluginId.OHOS_APP_PLUGIN);\\n            if (!rootNodeContext) {\\n                return;\\n            }\\n            const devDependenciesInfo = rootNodeContext.getDevDependenciesOpt()\\n            devDependenciesInfo[\\\"har\\\"] = \\\"./har\\\";\\n            rootNodeContext.setDevDependenciesOpt(devDependenciesInfo);   \\n      }\\n    };\\n}\\n\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程级hvigorfile.ts中编写示例代码： ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129105__p9534225151915\\\"'>在工程级hvigorfile.ts中编写示例代码： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 209,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport { OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\n\\n// 自定义插件代码\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            const rootNodeContext = currentNode.getContext(OhosPluginId.OHOS_APP_PLUGIN);\\n            if (!rootNodeContext) {\\n                return;\\n            }\\n            const dynamicDependenciesInfo = rootNodeContext.getDynamicDependenciesOpt();\\n            console.log(dynamicDependenciesInfo)\\n        }\\n    };\\n}\\n\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]getDynamicDependenciesOpt5.0.10+",
        "parent_text": "[h2]getDynamicDependenciesOpt5.0.10+getDynamicDependenciesOpt: () => object 获取工程下oh-package.json5中配置的dynamicDependencies依赖。 返回值: 类型  说明    object  获取工程级别下oh-package.json5中DynamicDependencies信息     在工程级hvigorfile.ts中编写示例代码：  ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section3891011201117\\\"'><a name='\\\"section3891011201117\\\"'></a><a name='\\\"section3891011201117\\\"'></a><h4>[h2]getDynamicDependenciesOpt<sup>5.0.10+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p6891011161111\\\"'>getDynamicDependenciesOpt: () =&gt; object</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p158921161120\\\"'>获取工程下oh-package.json5中配置的dynamicDependencies依赖。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p1789311121110\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table6899111115\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row689311151111\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.33.5.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p128931114118\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.33.5.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1189191111110\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row789171181120\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p178981117115\\\"'>object</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p68991181113\\\"'>获取工程级别下oh-package.json5中DynamicDependencies信息</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p168931131116\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 210,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport {OhosAppContext, OhosHapContext, OhosPluginId} from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor } from '@ohos/hvigor';\\nhvigor.afterNodeEvaluate(node => {\\n  const appContext = node.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\\n  if (appContext) {\\n    let dependency = appContext.getOverrides() ?? {};\\n    console.log(dependency)\\n  }\\n});\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]getOverrides5.10.3+",
        "parent_text": "[h2]getOverrides5.10.3+getOverrides:()=>object 获取工程下oh-package.json5中配置的overrides字段。 返回值： 类型  说明    object  获取工程下oh-package.json5中配置的overrides字段     在工程级hvigorfile.ts中编写示例代码：  ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section132674109325\\\"'><a name='\\\"section132674109325\\\"'></a><a name='\\\"section132674109325\\\"'></a><h4>[h2]getOverrides<sup>5.10.3</sup><sup>+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p11409112823515\\\"'>getOverrides:()=&gt;object</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p106371413193619\\\"'>获取工程下oh-package.json5中配置的overrides字段。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p1730419122376\\\"'>返回值：</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table13152112019381\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row1815219202386\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.36.5.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p161521220183816\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.36.5.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p2152102073819\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row121521320143815\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p5699525104010\\\"'>object</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p20152112015382\\\"'>获取工程下oh-package.json5中配置的overrides字段</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p815292020386\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 211,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport {OhosAppContext, OhosHapContext, OhosPluginId} from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor } from '@ohos/hvigor';\\nhvigor.afterNodeEvaluate(node => {\\n  const appContext = node.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\\n  if (appContext) {\\n    let dependency = appContext.getOverrides() ?? {};\\n    dependency['library'] = 'file:./library.har'; //在工程级oh-package.json5中动态添加工程内HAR包依赖\\n    appContext.setOverrides(dependency);\\n    return;\\n  }\\n  const hapContext = node.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n  if (hapContext) {\\n    const dependency = hapContext.getDependenciesOpt();\\n    dependency['library'] = 'file:./../library';    //在entry上动态添加工程内模块依赖\\n    hapContext.setDependenciesOpt(dependency);\\n  }\\n});\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]setOverrides5.10.3+",
        "parent_text": "[h2]setOverrides5.10.3+setOverrides:(overrides: any)=>void 设置工程下oh-package.json5中的overrides字段。 参数值： 参数名  类型  必填  说明    overrides  any  是  设置工程下oh-package.json5中的overrides字段     在工程级hvigorfile.ts中编写示例代码：  ",
        "import_module": "import { OhosAppContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section469812496459\\\"'><a name='\\\"section469812496459\\\"'></a><a name='\\\"section469812496459\\\"'></a><h4>[h2]setOverrides<sup>5.10.3</sup><sup>+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p175271126184711\\\"'>setOverrides:(overrides: any)=&gt;void</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p19527182694717\\\"'>设置工程下oh-package.json5中的overrides字段。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p55271326144720\\\"'>参数值：</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1216174810499\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row3161548154917\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.37.5.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p121611448194918\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.37.5.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1216119487492\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.37.5.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1916194812498\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.37.5.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p101611148134911\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row016214488493\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p191621248114919\\\"'>overrides</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p01621648184918\\\"'>any</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p916219489491\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p7162144815490\\\"'>设置工程下oh-package.json5中的overrides字段</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p75271526204713\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 212,
        "pre": "import { OhosHapContext } from '@ohos/hvigor-ohos-plugin';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { OhosHapContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section19918316479\\\"'><a name='\\\"section19918316479\\\"'></a><a name='\\\"section19918316479\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 213,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor } from '@ohos/hvigor';\\nimport { OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\n\\n// 实现自定义插件\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        context() {\\n            return {\\n                data: 'customPlugin xxx'\\n            };\\n        },\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            hvigor.nodesEvaluated(async () => {\\n                currentNode.subNodes((node: HvigorNode) => {\\n                    // 获取hap模块上下文信息\\n                    // 如果是HAR或HSP，使用OHOS_HAR_PLUGIN/OHOS_HSP_PLUGIN\\n                    const hapNodeContext = node.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n                    if (!hapNodeContext) {\\n                        return;\\n                    }\\n                    const moduleVersion = hapNodeContext.getVersion();\\n                    console.log(moduleVersion);\\n                });\\n            });\\n        }\\n    };\\n}\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]getVersion",
        "parent_text": "[h2]getVersiongetVersion: () => string 获取模块oh-package.json5中配置的版本号。 返回值： 类型  说明    string  模块oh-package.json5中配置的版本号     在工程级hvigorfile.ts中编写示例代码：  执行hvigorw --sync输出示例： 1.1.0 ",
        "import_module": "import { OhosHapContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1271317354814\\\"'><a name='\\\"section1271317354814\\\"'></a><a name='\\\"section1271317354814\\\"'></a><h4>[h2]getVersion</h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p181242519369\\\"'>getVersion: () =&gt; string</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p1579610378560\\\"'>获取模块oh-package.json5中配置的版本号。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p1222495715017\\\"'>返回值：</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1087417123012\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row128753128018\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.56.5.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1387514128015\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.56.5.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p887519127012\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row1187511121012\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1587513121301\\\"'>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p58755121207\\\"'>模块oh-package.json5中配置的版本号</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p93127530011\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129105__p14600171116565\\\"'>执行hvigorw --sync输出示例：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129105__screen15159183895616\\\"'>1.1.0</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 214,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor } from '@ohos/hvigor';\\nimport { OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\n\\n// 实现自定义插件\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        context() {\\n            return {\\n                data: 'customPlugin xxx'\\n            };\\n        },\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            hvigor.nodesEvaluated(async () => {\\n                currentNode.subNodes((node: HvigorNode) => {\\n                    // 获取hap模块上下文信息\\n                    // 如果是HAR或HSP，使用OHOS_HAR_PLUGIN/OHOS_HSP_PLUGIN\\n                    const hapNodeContext = node.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n                    if (!hapNodeContext) {\\n                        return;\\n                    }\\n                    hapNodeContext.setVersion('2.0.0');\\n                    const moduleVersion = hapNodeContext.getVersion();\\n                    console.log(moduleVersion);\\n                });\\n            });\\n        }\\n    };\\n}\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]setVersion",
        "parent_text": "[h2]setVersionsetVersion: (version: string) => void 修改模块oh-package.json5中的版本号。 参数： 参数名  类型  必填  说明    version  string  是  修改模块oh-package.json5中的版本号     在工程级hvigorfile.ts中编写示例代码：  执行hvigorw --sync输出： 2.0.0 ",
        "import_module": "import { OhosHapContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section209531486482\\\"'><a name='\\\"section209531486482\\\"'></a><a name='\\\"section209531486482\\\"'></a><h4>[h2]setVersion</h4><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1883114208574\\\"'>setVersion: (version: string) =&gt; void</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p7549254145710\\\"'>修改模块oh-package.json5中的版本号。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p7874354204318\\\"'>参数：</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table381482656\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row1081519213517\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.57.5.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p5815921757\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.57.5.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1281517215513\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.57.5.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p1981532954\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.57.5.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p208151821057\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002202129105__row158151121456\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p12815228519\\\"'>version</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p17815925518\\\"'>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p68151422513\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202129105__p6815621350\\\"'>修改模块oh-package.json5中的版本号</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002202129105__p145951541154215\\\"'>在工程级hvigorfile.ts中编写示例代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129105__p286615011910\\\"'>执行hvigorw --sync输出：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129105__screen168665502911\\\"'>2.0.0</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 215,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor } from '@ohos/hvigor';\\nimport { OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\n// 实现自定义插件\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        context() {\\n            return {\\n                data: 'customPlugin xxx'\\n            };\\n        },\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            hvigor.nodesEvaluated(async () => {\\n                currentNode.subNodes((node: HvigorNode) => {\\n                    // 获取hap模块上下文信息\\n                    const hapNodeContext = node.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n                    hapNodeContext?.targets((target: Target) => {\\n                        const targetName = target.getTargetName();\\n                        node.registerTask({\\n                            // 任务名称\\n                            name: `${targetName}@getRemoteHspInfo`,\\n                            // 任务执行逻辑主体函数\\n                            run() {\\n                                // 获取未签名的远程hsp相关信息\\n                                const remoteHspInfo = hapNodeContext.getOhpmRemoteHspDependencyInfo();\\n                                console.log(remoteHspInfo);\\n                                // 获取已签名的远程hsp相关信息\\n                                const signedRemoteHspInfo = hapNodeContext.getOhpmRemoteHspDependencyInfo(true);\\n                                console.log(signedRemoteHspInfo);\\n                            },\\n                            // 配置前置任务依赖\\n                            dependencies: [`${targetName}@PackageHap`],\\n                            // 配置任务的后置任务依赖\\n                            postDependencies: ['assembleHap']\\n                        });\\n                    });\\n                });\\n            });\\n        }\\n    };\\n}\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程级hvigorfile.ts中编写示例代码： ",
        "import_module": "import { OhosHapContext } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129105__p11359228123117\\\"'>在工程级hvigorfile.ts中编写示例代码： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-context.html"
    },
    {
        "id": 216,
        "pre": "{\\n  \\\"dependencies\\\": {\\n    \\\"@ohos/hypium\\\": \\\"1.0.18\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      在可访问网络的电脑上创建一个空文件夹（如命名为third_library），在文件夹中创建一个oh-package.json5文件，配置hypium依赖，配置如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808420__p485774113432\\\"'>      在可访问网络的电脑上创建一个空文件夹（如命名为third_library），在文件夹中创建一个oh-package.json5文件，配置hypium依赖，配置如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-no-network.html"
    },
    {
        "id": 217,
        "pre": "{\\n  \\\"dependencies\\\": {\\n    \\\"@ohos/hypium\\\": \\\"1.0.17\\\",\\n    \\\"@ohos/lottie\\\": \\\"^2.0.0\\\" \\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "方式二：在可访问网络的电脑上创建一个空文件夹（如命名为third_library），在文件夹中创建一个oh-package.json5文件，设置三方包依赖，配置示例如下： 打开命令行工具，执行 ohpm install 命令，会生成oh_modules文件夹和oh-package-lock.json5文件。  将oh_modules文件夹和oh-package-lock.json5文件拷贝到无网络电脑的工程根目录下。     使用方法二时，需要确保可访问网络的电脑与无网络电脑中ohpm版本是一致的，以避免因oh-package-lock.json5文件版本不匹配而导致oh-package-lock.json5文件失效的问题。  ",
        "import_module": null,
        "parent": "<li id='\\\"li175952116188\\\"'>方式二：在可访问网络的电脑上创建一个空文件夹（如命名为third_library），在文件夹中创建一个oh-package.json5文件，设置三方包依赖，配置示例如下： <p id='\\\"ZH-CN_TOPIC_0000002166808420__p259541110182\\\"'>打开命令行工具，执行 ohpm install 命令，会生成oh_modules文件夹和oh-package-lock.json5文件。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808420__p17595111114183\\\"'><span><img originheight='\\\"176\\\"' originwidth='\\\"476\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250410115610.76531978367608210874610365735964:50001231000000:2800:76B3273F750A42FAA5CC67567BF41C8A2E1C15CDFCC46A9AC2673407B23C18E7.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002166808420__p17595611121820\\\"'>将oh_modules文件夹和oh-package-lock.json5文件拷贝到无网络电脑的工程根目录下。</p> <div class='\\\"caution\\\"' id='\\\"ZH-CN_TOPIC_0000002166808420__note11476165732618\\\"'> <span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250410115611.44186375824848505508819035468228:50001231000000:2800:47885C27DD3714DC655EEE3E496733DEFFF087553B3E35C2009DD09FA32B4216.png\\\"'/> </span> <div class='\\\"cautionbody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002166808420__p114761574268\\\"'>使用方法二时，需要确保可访问网络的电脑与无网络电脑中ohpm版本是一致的，以避免因oh-package-lock.json5文件版本不匹配而导致oh-package-lock.json5文件失效的问题。</p> </div> </div></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-no-network.html"
    },
    {
        "id": 218,
        "pre": "{\\n  \\\"dependencies\\\": {\\n    \\\"pnpm\\\": \\\"8.13.1\\\"\\n  }\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "请在可访问网络的电脑上创建一个空文件夹，在文件夹中创建一个package.json文件，在文件中填写如下内容：",
        "import_module": "{\\n  \\\"dependencies\\\": {\\n    \\\"pnpm\\\": \\\"8.13.1\\\"\\n  }\\n}",
        "parent": "<li id='\\\"li15643940974\\\"'>请在可访问网络的电脑上创建一个空文件夹，在文件夹中创建一个package.json文件，在文件中填写如下内容：</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-no-network.html"
    },
    {
        "id": 219,
        "pre": "{\\n  \\\"dependencies\\\": {\\n    \\\"ajv\\\": \\\"latest\\\"\\n  }\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "请在可访问网络的电脑上创建一个空文件夹，在文件夹中创建一个package.json文件，配置npm依赖，示例如下：",
        "import_module": "{\\n  \\\"dependencies\\\": {\\n    \\\"ajv\\\": \\\"latest\\\"\\n  }\\n}",
        "parent": "<li id='\\\"li16764104532214\\\"'>请在可访问网络的电脑上创建一个空文件夹，在文件夹中创建一个package.json文件，配置npm依赖，示例如下：</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-no-network.html"
    },
    {
        "id": 220,
        "pre": "dpkg -i {package.dep}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "将安装包拷贝到无网络电脑中，执行以下命令安装，其中{package.dep}替换为实际下载的包名。",
        "import_module": "dpkg -i {package.dep}",
        "parent": "<li id='\\\"li763816495810\\\"'>将安装包拷贝到无网络电脑中，执行以下命令安装，其中{package.dep}替换为实际下载的包名。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-no-network.html"
    },
    {
        "id": 221,
        "pre": "{\\n  \\\"module\\\": {\\n    ...\\n    \\\"requestPermissions\\\": [{\\n      \\\"name\\\": \\\"ohos.permission.ACCESS_IDS\\\",\\n    }],\\n    ...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在需要使用权限的模块的module.json5/config.json文件中添加“requestPermissions”/“reqPermissions”字段，并在字段下添加对应的权限名等信息，以在Stage模型工程中增加权限“ohos.permission.ACCESS_IDS”为例。 ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202174737__p5154510249\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202174737__li85771940312\\\"'></a><a name='\\\"li85771940312\\\"'></a>在需要使用权限的模块的module.json5/config.json文件中添加“requestPermissions”/“reqPermissions”字段，并在字段下添加对应的权限名等信息，以在Stage模型工程中增加权限“ohos.permission.ACCESS_IDS”为例。 </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-signing.html"
    },
    {
        "id": 222,
        "pre": "let opts: image.InitializationOptions =\\n    { editable: true, pixelFormat: image.PixelMapFormat.RGBA_1010102, size: { height: imageInfo.size.height, width: imageInfo.size.width } }\\nlet hdrpixelMap: image.PixelMap | undefined = undefined;\\nhdrpixelMap= image.createPixelMapSync(opts);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建10 bit的PixelMap。 ",
        "import_module": null,
        "parent": "<li>创建10 bit的PixelMap。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hdr-dual-to-single.html"
    },
    {
        "id": 223,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-for-of\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-for-of.html"
    },
    {
        "id": 224,
        "pre": "declare const array: string[];\\n\\nfor (const x of array) {\\n  console.log(x);\\n}\\n\\nfor (let i = 0; i < array.length; i++) {\\n  // i is used, so for-of could not be used.\\n  console.log(`${i}-${array[i]}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-for-of.html"
    },
    {
        "id": 225,
        "pre": "declare const array: string[];\\n\\nfor (const x of array) {\\n  console.log(x);\\n}\\n\\nfor (let i = 0; i < array.length; i++) {\\n  console.log(array[i]);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-for-of.html"
    },
    {
        "id": 226,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-healthsequence-manage.html"
    },
    {
        "id": 227,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-healthsequence-manage.html"
    },
    {
        "id": 228,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-healthsequence-manage.html"
    },
    {
        "id": 229,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-healthsequence-manage.html"
    },
    {
        "id": 230,
        "pre": "{\\n  \\\"files\\\":   //用于表示配置适用的文件范围的 glob 模式数组。在没有指定的情况下，应用默认配置\\n  [\\n    \\\"**/*.js\\\", //字符串类型\\n    \\\"**/*.ts\\\"\\n  ],\\n  \\\"ignore\\\":  //一个表示配置对象不应适用的文件的 glob 模式数组。如果没有指定，配置对象将适用于所有由 files 匹配的文件\\n  [\\n    \\\"build/**/*\\\",    //字符串类型\\n    \\\"node_modules/**/*\\\"\\n  ],\\n  \\\"ruleSet\\\":       //设置检查待应用的规则集\\n  [\\n    \\\"plugin:@typescript-eslint/recommended\\\"    //快捷批量引入的规则集, 枚举类型：plugin:@typescript-eslint/all, plugin:@typescript-eslint/recommended, plugin:@cross-device-app-dev/all, plugin:@cross-device-app-dev/recommended等\\n  ],\\n  \\\"rules\\\":         //可以对ruleSet配置的规则集中特定的某些规则进行修改、去使能, 或者新增规则集以外的规则；ruleSet和rules共同确定了代码检查所应用的规则\\n  {\\n    \\\"@typescript-eslint/no-explicit-any\\\":  // ruleId后面跟数组时, 第一个元素为告警级别, 后面的对象元素为规则特定开关配置\\n    [\\n      \\\"error\\\",              //告警级别: 枚举类型, 支持配置为suggestion, error, warn, off\\n      {\\n        \\\"ignoreRestArgs\\\": true   //规则特定的开关配置, 为可选项, 不同规则其下层的配置项不同\\n      }\\n    ],\\n    \\\"@typescript-eslint/explicit-function-return-type\\\": 2,   // ruleId后面跟单独一个数字时, 表示仅设置告警级别, 枚举值为: 3(suggestion), 2(error), 1(warn), 0(off)\\n    \\\"@typescript-eslint/no-unsafe-return\\\": \\\"warn\\\"            // ruleId后面跟单独一个字符串时, 表示仅设置告警级别, 枚举值为: suggestion, error, warn, off\\n  },\\n  \\\"overrides\\\":      //针对特定的目录或文件采用定制化的规则配置\\n  [\\n    {\\n      \\\"files\\\":   //指定需要定制化配置规则的文件或目录\\n      [\\n        \\\"entry/**/*.ts\\\"   //字符串类型\\n      ],\\n      \\\"excluded\\\":\\n      [\\n        \\\"entry/**/*.test.js\\\" //指定需要排除的目录或文件, 被排除的目录或文件不会按照定制化的规则配置被检查; 字符串类型\\n      ],\\n      \\\"rules\\\":   //支持对overrides外公共配置的规则进行修改、去使能, 或者新增公共配置以外的规则; 该配置将覆盖公共配置\\n      {\\n        \\\"@typescript-eslint/explicit-function-return-type\\\":  // ruleId: 枚举类型\\n        [\\n          \\\"warn\\\",     //告警级别: 枚举类型, 支持配置为error, warn, off; 覆盖公共配置, explicit-function-return-type告警级别为warn\\n          {\\n             allowExpressions: true    //规则特定的开关配置, 为可选项, 不同规则其下层的配置项不同\\n          }\\n        ],\\n        \\\"@typescript-eslint/no-unsafe-return\\\": \\\"off\\\"   // 覆盖公共配置, 不检查no-unsafe-return规则\\n      }\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "配置代码检查规则",
        "parent_text": "配置代码检查规则新建工程时，工程根目录下默认创建code-linter.json5配置文件，可对代码检查的范围及对应生效的检查规则进行配置。若使用历史工程进行开发，可在工程中右键选择Code Linter > Generate Config File创建code-linter.json5配置文件。 其中files和ignore配置项共同确定了代码检查范围，ruleSet和rules配置项共同确定了生效的规则范围。具体配置项功能如下： files：配置待检查的文件名单，如未指定目录，将检查当前被选中的文件或文件夹中所有的.ets文件。 ignore：配置无需检查的文件目录，其指定的目录或文件需使用相对路径格式，相对于code-linter.json5所在工程根目录，例如：build/**/*。 ruleSet：配置检查使用的规则集，规则集支持一次导入多条规则。规则详情请参见Code Linter代码检查规则。目前支持的规则集包括： 通用规则@typescript-eslint安全规则@security性能规则@performance预览规则@previewer一次开发多端部署规则@cross-device-app-devArkTS代码风格规则@hw-stylistic正确性规则@correctness 以上规则集均分为all和recommended两种规则集。all规则集是规则全集，包含所有规则；recommended规则集是推荐使用的规则集合。all规则集包含recommended规则集。不在工程根目录新建code-linter.json5文件的情况下，Code Linter默认会检查@performance/recommended和@typescript-eslint/recommended规则集包含的规则。   rules：可以基于ruleSet配置的规则集，新增额外规则项，或修改ruleSet中规则默认配置，例如：将规则集中某条规则告警级别由warn改为error。 overrides：针对工程根目录下部分特定目录或文件，可配置定制化检查的规则。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1782903483817\\\"'><a name='\\\"section1782903483817\\\"'></a><a name='\\\"zh-cn_topic_0000001266884668_section1782903483817\\\"'></a><h4>配置代码检查规则</h4><p id='\\\"ZH-CN_TOPIC_0000002166808396__p182622567421\\\"'>新建工程时，工程根目录下默认创建code-linter.json5配置文件，可对代码检查的范围及对应生效的检查规则进行配置。若使用历史工程进行开发，可在工程中右键选择<strong>Code Linter &gt; Generate Config File</strong>创建code-linter.json5配置文件。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__zh-cn_topic_0000001266884668_p6504143122013\\\"'>其中files和ignore配置项共同确定了代码检查范围，ruleSet和rules配置项共同确定了生效的规则范围。具体配置项功能如下：</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__zh-cn_topic_0000001266884668_p32611238174614\\\"'><strong>files</strong>：配置待检查的文件名单，如未指定目录，将检查当前被选中的文件或文件夹中所有的.ets文件。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__zh-cn_topic_0000001266884668_p1261123844612\\\"'><strong>ignore</strong>：配置无需检查的文件目录，其指定的目录或文件需使用相对路径格式，相对于code-linter.json5所在工程根目录，例如：build/**/*。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__zh-cn_topic_0000001266884668_p770514116119\\\"'><strong>ruleSet</strong>：配置检查使用的规则集，规则集支持一次导入多条规则。规则详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-codelinter-rule\\\"'>Code Linter代码检查规则</a>。目前支持的规则集包括：</p> <ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul236313713320\\\"'><li id='\\\"li2364107113317\\\"'>通用规则@typescript-eslint</li><li id='\\\"li178841346141912\\\"'>安全规则@security</li><li id='\\\"li18885145813194\\\"'>性能规则@performance</li><li id='\\\"li1942275162019\\\"'>预览规则@previewer</li><li id='\\\"li2418121612333\\\"'>一次开发多端部署规则@cross-device-app-dev</li><li id='\\\"li18348201912916\\\"'>ArkTS代码风格规则@hw-stylistic</li><li id='\\\"li11887193371817\\\"'>正确性规则@correctness<div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808396__note11688558134720\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180422.53278125088775338151000864358538:50001231000000:2800:B20A702EDC60CCFCAE3C58E3B9F14C17965535ECC7685BF07F048DBDB6C712BE.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul19673103151214\\\"'><li id='\\\"li367303151211\\\"'>以上规则集均分为all和recommended两种规则集。all规则集是规则全集，包含所有规则；recommended规则集是推荐使用的规则集合。all规则集包含recommended规则集。</li><li id='\\\"li12673153111125\\\"'>不在工程根目录新建code-linter.json5文件的情况下，Code Linter默认会检查@performance/recommended和@typescript-eslint/recommended规则集包含的规则。</li></ul> </div></div> </li></ul> <p id='\\\"ZH-CN_TOPIC_0000002166808396__zh-cn_topic_0000001266884668_p10190123225817\\\"'><strong>rules</strong>：可以基于ruleSet配置的规则集，新增额外规则项，或修改ruleSet中规则默认配置，例如：将规则集中某条规则告警级别由warn改为error。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__zh-cn_topic_0000001266884668_p86411616186\\\"'><strong>overrides</strong>：针对工程根目录下部分特定目录或文件，可配置定制化检查的规则。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-code-linter.html"
    },
    {
        "id": 231,
        "pre": "class Foo {\\n  static bar() {}\\n}\\n\\nFoo.bar();",
        "type": "Import",
        "function_call": "bar()",
        "function_name": "[h2]示例1：调用类Foo下bar方法时，Code Linter告警",
        "parent_text": "[h2]示例1：调用类Foo下bar方法时，Code Linter告警在配置文件中定义规则 在ArkTS工程中，pages/Index.ets文件下增加以下用例：  在工程根目录下新建code-linter.json5文件（文件名不可修改），新增以下配置： {\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-restricted-syntax\\\": [\\n      // 告警级别: 枚举类型, 支持配置为error, warn, off\\n      \\\"error\\\",\\n      {\\n        // selector属性必选，配置要禁用的语法\\n        // 可通过特定DSL筛选待限制的语句，CallExpression表示方法调用表达式，后面的中括号里面是筛选条件（根据语法树Node节点来确定）\\n        // 其中callee.object.name根据指定的名称筛选调用方法的对象（class，namespace或module），以上示例中为\\\"Foo\\\"\\n        // callee.property.name则根据指定的名称筛选被调用的方法，以上示例中为\\\"bar\\\"\\n        \\\"selector\\\": \\\"CallExpression[callee.object.name='Foo'][callee.property.name='bar']\\\",\\n        // message属性可选，配置要展示的报错信息\\n        \\\"message\\\": \\\"Foo.bar() is not allowed\\\"\\n      }\\n    ]\\n  },\\n}  如需在code-linter.json5文件中配置其他字段，请参见配置代码检查规则。  执行代码检查 对pages/Index.ets文件执行代码检查，检查结果如下：  ",
        "import_module": "class Foo {\\n  static bar() {}\\n}\\n\\nFoo.bar();",
        "parent": "<div class='\\\"section\\\"' id='\\\"section37112517407\\\"'><a name='\\\"section37112517407\\\"'></a><a name='\\\"section37112517407\\\"'></a><h4>[h2]示例1：调用类Foo下bar方法时，Code Linter告警</h4><p id='\\\"ZH-CN_TOPIC_0000002166808396__p16125124019\\\"'><strong>在配置文件中定义规则</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p761251124012\\\"'>在ArkTS工程中，pages/Index.ets文件下增加以下用例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808396__p46265118406\\\"'>在工程根目录下新建code-linter.json5文件（文件名不可修改），新增以下配置：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808396__screen16632515402\\\"'>{\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"rules\\\"</span>: {\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"@typescript-eslint/no-restricted-syntax\\\"</span>: [\\n      // 告警级别: 枚举类型, 支持配置为error, warn, off\\n      <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"error\\\"</span>,\\n      {\\n        <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// selector</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>属性必选，配置要禁用的语法</span>\\n        <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// </span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>可通过特定</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>DSL</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>筛选待限制的语句，</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>CallExpression</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>表示方法调用表达式，后面的中括号里面是筛选条件（根据语法树</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>Node</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>节点来确定）</span>\\n        <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// </span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>其中</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>callee.object.name</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>根据指定的名称筛选调用方法的对象（</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>class</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>，</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>namespace</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>或</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>module</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>），以上示例中为</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>\\\"Foo\\\"</span>\\n<span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>        // callee.property.name</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>则根据指定的名称筛选被调用的方法，以上示例中为</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>\\\"bar\\\"</span>\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"selector\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"CallExpression[callee.object.name='Foo'][callee.property.name='bar']</span><span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"</span>,\\n        <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// message</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>属性可选，配置要展示的报错信息</span>\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"message\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"Foo.bar() is not allowed\\\"</span>\\n      }\\n    ]\\n  },\\n}</pre> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808396__note363145124015\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180423.50470326000655318285337195744316:50001231000000:2800:1288F2B02CEC1EA4FD8769810CD305D8F7143FE17419F6FA75604C137E04AAA2.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p363115119406\\\"'>如需在code-linter.json5文件中配置其他字段，请参见<a href='\\\"#section1782903483817\\\"'>配置代码检查规则</a>。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p186345112403\\\"'><strong>执行代码检查</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p1163135144016\\\"'>对pages/Index.ets文件执行代码检查，检查结果如下：</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p26395111405\\\"'><span><img originheight='\\\"141\\\"' originwidth='\\\"601\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180423.71803484924442231539061905761326:50001231000000:2800:9088420FEDF382C07969EDF9B0928DAEA4363F409C52CD0A5DC8F3973DEB23C2.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-code-linter.html"
    },
    {
        "id": 232,
        "pre": "class foo {    //此处构造一个命名风格错误的示例，foo为错误使用类名，正确类名应为Foo\\n  bar() {} \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]示例2：对类名Foo的命名风格校验",
        "parent_text": "[h2]示例2：对类名Foo的命名风格校验在配置文件中定义规则 在ArkTS工程中，pages/Index.ets文件下增加以下用例：  在工程根目录下新建code-linter.json5文件，新增以下配置： {\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/naming-convention\\\": [\\n      \\\"error\\\",\\n      {\\n        // selector属性必选，配置要检查的语法，这里配置的class表示检查自定义组件名\\n        \\\"selector\\\": \\\"class\\\",\\n        // format属性必选，配置期望的命名风格，支持枚举值，这里配置的PascalCase表示大驼峰风格\\n        \\\"format\\\": [\\\"PascalCase\\\"],\\n        // custom属性可选，配置用户自定义的命名风格\\n        \\\"custom\\\": {\\n          // regex属性必选，配置具体的正则\\n          \\\"regex\\\": \\\"^[a-zA-Z]+$\\\",\\n          // match属性必选，配置为true表示正则未命中时报错；配置为false表示正则命中时报错\\n          \\\"match\\\": true\\n        }\\n      }\\n    ]\\n  },\\n} 表1 字段说明字段名称  参数说明  是否必选  类型  支持配置的参数    selector  配置要检查的语法  是  字符串、字符串数组  variable：变量function：函数parameter：参数parameterProperty：参数属性accessor：get/set方法enumMember：枚举成员classMethod：类方法structMethod：自定义组件中的方法objectLiteralMethod：对象方法typeMethod：接口方法classProperty：类属性structProperty：自定义组件中的属性objectLiteralProperty：对象属性typeProperty：接口属性class：类struct：自定义组件interface：接口typeAlias：类型别名enum：枚举typeParameter：泛型参数default：包含以上所有的类型variableLike：包含variable，function，parametermemberLike：包含classProperty，structProperty，objectLiteralProperty，typeProperty，parameterProperty ，enumMember，classMethod，objectLiteralMethod，typeMethod，accessortypeLike：包含class，struct，interface，typeAlias，enum，typeParametermethod：包含classMethod，structMethod，objectLiteralMethod，typeMethodproperty：包含classProperty，objectLiteralProperty，typeProperty   format  配置期望的命名风格  是  字符串数组  camelCase：小驼峰命名风格，比如getName，getID（支持连续大写字母），不支持下划线strictCamelCase：严格小驼峰命名风格，除了不支持连续大写字母（getID），其他的和camelCase相同PascalCase：大驼峰命名风格，比如Foo，CC，除了要求第一个字母大写，其他的和camelCase相同StrictPascalCase：大驼峰命名风格，除了不支持连续大写字母（CC），其他的和PascalCase相同snake_case：小写字母+下划线+小写字母的命名风格，比如a_a，不支持_a，a_a_UPPER_CASE：大写字母+下划线+大写字母的命名风格，比如A_A，不支持_A，A_A_   custom  配置用户自定义的命名风格  否  对象  regex：属性必选，配置具体的正则match：属性必选，配置为true表示正则未命中时报错，配置为false表示正则命中时报错   leadingUnderscore/trailingUnderscore  配置是否允许以下划线开头/以下划线结尾的命名风格  否  字符串  allow：允许以一个下划线开头/结尾的命名风格，比如_nameallowDouble：允许以两个下划线开头/结尾的命名风格，比如__nameallowSingleOrDouble：允许以一个或者两个下划线开头/结尾的命名风格（allow+allowDouble）forbid：禁止以下划线开头/结尾的命名风格，比如_name，__namerequire：必须是以下划线开头/结尾的命名风格，比如_name，__namerequireDouble：必须是以两个下划线开头/结尾的命名风格，比如__name   prefix/suffix  配置固定前缀/后缀的命名风格。如果前缀/后缀未匹配则报错  否  字符串数组  用户自定义前缀/后缀   filter  过滤特定的命名风格，检查或者不检查正则命中的命名  否  对象  配置格式与custom相似 match：设置为true表示只检查正则命中的名字，设置为false表示不检查正则命中的名字 regex：设置过滤的正则  说明： 支持直接配置一个字符串，这个字符串配置的是regex，此时match相当于配置的是true。    modifiers  匹配修饰符，只有包含特定修饰符的命名才会检查  否  字符串数组  abstract：匹配abstract关键字override：匹配override关键字private：匹配private关键字protected：匹配protected关键字static：匹配static关键字async：匹配async关键字const：匹配const关键字destructured：匹配解构语法exported：匹配export关键字global：匹配全局声明#private：匹配私有符号#public：匹配public级别的访问修饰符requiresQuotes：匹配字符串类型的命名，并且 字符串中包含特殊字符unused：匹配未使用的声明   types  匹配类型，只有特定类型的名字才会检查  否  字符串数组  array：数组类型boolean：布尔类型function：函数类型number：数字类型string：字符串类型      以上配置的参数有校验优先级：filter > types > modifiers > validate leading underscore > validate trailing underscore > validate prefix > validate suffix > validate custom > validate format。  执行代码检查 对pages/Index.ets文件执行代码检查，检查结果如下：  ",
        "import_module": "class Foo {\\n  static bar() {}\\n}\\n\\nFoo.bar();",
        "parent": "<div class='\\\"section\\\"' id='\\\"section21641845194111\\\"'><a name='\\\"section21641845194111\\\"'></a><a name='\\\"section21641845194111\\\"'></a><h4>[h2]示例2：对类名Foo的命名风格校验</h4><p id='\\\"ZH-CN_TOPIC_0000002166808396__p01561745124118\\\"'><strong>在配置文件中定义规则</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p115616455415\\\"'>在ArkTS工程中，pages/Index.ets文件下增加以下用例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808396__p13156134594117\\\"'>在工程根目录下新建code-linter.json5文件，新增以下配置：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808396__screen111581451410\\\"'>{\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"rules\\\"</span>: {\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"@typescript-eslint/naming-convention\\\"</span>: [\\n      <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"error\\\"</span>,\\n      {\\n        <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// selector</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>属性必选，配置要检查的语法，这里配置的class</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>表示检查自定义组件名</span>\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"selector\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"class\\\"</span>,\\n        <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// format</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>属性必选，配置期望的命名风格，支持枚举值，这里配置的</span>PascalCase<span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>表示大驼峰风格</span>\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"format\\\"</span>: [<span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"PascalCase\\\"</span>],\\n        <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// custom</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>属性可选，配置用户自定义的命名风格</span>\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"custom\\\"</span>: {\\n          <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// regex</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>属性必选，配置具体的正则</span>\\n          <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"regex\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"^[a-zA-Z]+$\\\"</span>,\\n          <span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>// match</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>属性必选，配置为</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>true</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>表示正则未命中时报错；配置为</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>false</span><span rgb(140,140,140);\\\"=\"\" style='\\\"color:'>表示正则命中时报错</span>\\n          <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"match\\\"</span>: <span rgb(0,51,179);\\\"=\"\" style='\\\"color:'>true</span>\\n        }\\n      }\\n    ]\\n  },\\n}</pre> <div class='\\\"tablenoborder\\\"'><table id='\\\"table916324516412\\\"'><caption><b>表1 </b>字段说明</caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808396__row41581845124118\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.7.2.6.1.1\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1215844513418\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.7.2.6.1.2\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p515894513413\\\"'>参数说明</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.7.2.6.1.3\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p21586454415\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.7.2.6.1.4\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p171589459413\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.7.2.6.1.5\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p4158104510413\\\"'>支持配置的参数</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808396__row16160745154115\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p81583456413\\\"'>selector</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p111585457413\\\"'>配置要检查的语法</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p915864524114\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1159174515417\\\"'>字符串、字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul181601245164115\\\"'><li id='\\\"li5159194516418\\\"'>variable：变量</li><li id='\\\"li16159194504114\\\"'>function：函数</li><li id='\\\"li615914511415\\\"'>parameter：参数</li><li id='\\\"li715912459410\\\"'>parameterProperty：参数属性</li><li id='\\\"li2159204518411\\\"'>accessor：get/set方法</li><li id='\\\"li151591045154112\\\"'>enumMember：枚举成员</li><li id='\\\"li15159164544117\\\"'>classMethod：类方法</li><li id='\\\"li1715984594119\\\"'>structMethod：自定义组件中的方法</li><li id='\\\"li2015917456411\\\"'>objectLiteralMethod：对象方法</li><li id='\\\"li6159134594113\\\"'>typeMethod：接口方法</li><li id='\\\"li1715944516413\\\"'>classProperty：类属性</li><li id='\\\"li815974554110\\\"'>structProperty：自定义组件中的属性</li><li id='\\\"li13159184504119\\\"'>objectLiteralProperty：对象属性</li><li id='\\\"li515944517415\\\"'>typeProperty：接口属性</li><li id='\\\"li16159114519414\\\"'>class：类</li><li id='\\\"li1215924584116\\\"'>struct：自定义组件</li><li id='\\\"li015919456416\\\"'>interface：接口</li><li id='\\\"li415994510412\\\"'>typeAlias：类型别名</li><li id='\\\"li111591445164110\\\"'>enum：枚举</li><li id='\\\"li1116054574111\\\"'>typeParameter：泛型参数</li><li id='\\\"li11606453418\\\"'>default：包含以上所有的类型</li><li id='\\\"li5160114574115\\\"'>variableLike：包含variable，function，parameter</li><li id='\\\"li91601945114115\\\"'>memberLike：包含classProperty，structProperty，objectLiteralProperty，typeProperty，parameterProperty ，enumMember，classMethod，objectLiteralMethod，typeMethod，accessor</li><li id='\\\"li7160164544117\\\"'>typeLike：包含class，struct，interface，typeAlias，enum，typeParameter</li><li id='\\\"li12160134524114\\\"'>method：包含classMethod，structMethod，objectLiteralMethod，typeMethod</li><li id='\\\"li201601645124116\\\"'>property：包含classProperty，objectLiteralProperty，typeProperty</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808396__row416010456412\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p61601545124115\\\"'>format</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p516034514418\\\"'>配置期望的命名风格</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p316013459417\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p17160104594119\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul9160345164112\\\"'><li id='\\\"li31603451412\\\"'>camelCase：小驼峰命名风格，比如getName，getID（支持连续大写字母），不支持下划线</li><li id='\\\"li51605454416\\\"'>strictCamelCase：严格小驼峰命名风格，除了不支持连续大写字母（getID），其他的和camelCase相同</li><li id='\\\"li11160154544110\\\"'>PascalCase：大驼峰命名风格，比如Foo，CC，除了要求第一个字母大写，其他的和camelCase相同</li><li id='\\\"li16160445164111\\\"'>StrictPascalCase：大驼峰命名风格，除了不支持连续大写字母（CC），其他的和PascalCase相同</li><li id='\\\"li8160154534120\\\"'>snake_case：小写字母+下划线+小写字母的命名风格，比如a_a，不支持_a，a_a_</li><li id='\\\"li716011454411\\\"'>UPPER_CASE：大写字母+下划线+大写字母的命名风格，比如A_A，不支持_A，A_A_</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808396__row9161194517418\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p716015450417\\\"'>custom</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p16161124574115\\\"'>配置用户自定义的命名风格</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1916174574115\\\"'>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1016104512417\\\"'>对象</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul16161104524117\\\"'><li id='\\\"li616194564111\\\"'>regex：属性必选，配置具体的正则</li><li id='\\\"li19161145164113\\\"'>match：属性必选，配置为true表示正则未命中时报错，配置为false表示正则命中时报错</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808396__row1416174564112\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p716117454419\\\"'>leadingUnderscore/trailingUnderscore</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p161611145144112\\\"'>配置是否允许以下划线开头/以下划线结尾的命名风格</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p71612456412\\\"'>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p616104519414\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul416164574112\\\"'><li id='\\\"li916119454415\\\"'>allow：允许以一个下划线开头/结尾的命名风格，比如_name</li><li id='\\\"li12161194564111\\\"'>allowDouble：允许以两个下划线开头/结尾的命名风格，比如__name</li><li id='\\\"li51611445144116\\\"'>allowSingleOrDouble：允许以一个或者两个下划线开头/结尾的命名风格（allow+allowDouble）</li><li id='\\\"li1616134518411\\\"'>forbid：禁止以下划线开头/结尾的命名风格，比如_name，__name</li><li id='\\\"li31611345134118\\\"'>require：必须是以下划线开头/结尾的命名风格，比如_name，__name</li><li id='\\\"li1416104514113\\\"'>requireDouble：必须是以两个下划线开头/结尾的命名风格，比如__name</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808396__row7162545164118\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1516194520416\\\"'>prefix/suffix</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p19161154514410\\\"'>配置固定前缀/后缀的命名风格。如果前缀/后缀未匹配则报错</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p216184512418\\\"'>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p13162174513412\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p916214518412\\\"'>用户自定义前缀/后缀</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808396__row7162134518410\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p7162144518414\\\"'>filter</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p31621453414\\\"'>过滤特定的命名风格，检查或者不检查正则命中的命名</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p17162144511419\\\"'>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p14162545124116\\\"'>对象</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1460165915515\\\"'>配置格式与custom相似</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p18162124518417\\\"'>match：设置为true表示只检查正则命中的名字，设置为false表示不检查正则命中的名字</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p3162114514113\\\"'>regex：设置过滤的正则</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808396__note18580123016511\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p5774103419513\\\"'>支持直接配置一个字符串，这个字符串配置的是regex，此时match相当于配置的是true。</p> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808396__row1416320454414\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p191624455411\\\"'>modifiers</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1316254524117\\\"'>匹配修饰符，只有包含特定修饰符的命名才会检查</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p111627450411\\\"'>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1116274514111\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul18163164518412\\\"'><li id='\\\"li1116213452417\\\"'>abstract：匹配abstract关键字</li><li id='\\\"li416216451414\\\"'>override：匹配override关键字</li><li id='\\\"li1316214459411\\\"'>private：匹配private关键字</li><li id='\\\"li161621545124115\\\"'>protected：匹配protected关键字</li><li id='\\\"li716217453418\\\"'>static：匹配static关键字</li><li id='\\\"li1616218457415\\\"'>async：匹配async关键字</li><li id='\\\"li17163194512415\\\"'>const：匹配const关键字</li><li id='\\\"li8163124544112\\\"'>destructured：匹配解构语法</li><li id='\\\"li131631745164116\\\"'>exported：匹配export关键字</li><li id='\\\"li9163184519416\\\"'>global：匹配全局声明</li><li id='\\\"li6163174520416\\\"'>#private：匹配私有符号#</li><li id='\\\"li13163134554113\\\"'>public：匹配public级别的访问修饰符</li><li id='\\\"li116324512416\\\"'>requiresQuotes：匹配字符串类型的命名，并且 字符串中包含特殊字符</li><li id='\\\"li12163174511413\\\"'>unused：匹配未使用的声明</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808396__row13163194544114\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"19.77197719771977%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p101631145194112\\\"'>types</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.961896189618958%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p101634455415\\\"'>匹配类型，只有特定类型的名字才会检查</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"6.330633063306331%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p141631145174118\\\"'>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.36103610361036%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p1516320459411\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"44.57445744574458%\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808396__ul616311459415\\\"'><li id='\\\"li11163104516415\\\"'>array：数组类型</li><li id='\\\"li2016384544120\\\"'>boolean：布尔类型</li><li id='\\\"li816344516411\\\"'>function：函数类型</li><li id='\\\"li101634455415\\\"'>number：数字类型</li><li id='\\\"li19163104515412\\\"'>string：字符串类型</li></ul> </td> </tr> </tbody></table> </div> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808396__note101641645114118\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180423.04478146461141095796686522810979:50001231000000:2800:E7481D1CC41B2D03E95FABCAC302184EFA568AF065A1FDB41F4B6C71944F2908.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p181641645184113\\\"'>以上配置的参数有校验优先级：filter &gt; types &gt; modifiers &gt; validate leading underscore &gt; validate trailing underscore &gt; validate prefix &gt; validate suffix &gt; validate custom &gt; validate format。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p11641456413\\\"'><strong>执行代码检查</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p9164124534111\\\"'>对pages/Index.ets文件执行代码检查，检查结果如下：</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p8292123381418\\\"'><span><img originheight='\\\"169\\\"' originwidth='\\\"887\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180423.70604452131441554238708291091329:50001231000000:2800:084837C3BF349793E0D9798AF140C7D483AD10A555AB92CE98D8AEF70769005D.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-code-linter.html"
    },
    {
        "id": 233,
        "pre": "{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/file-naming-convention\\\": [\\n      // 告警级别：枚举类型，支持配置为error，warn，off\\n      \\\"error\\\",\\n      {\\n        // selector属性可选，支持配置为code或者resources\\n        // code表示检查代码文件的命名风格\\n        // resources表示检查资源文件的命名风格\\n        \\\"selector\\\": \\\"code\\\"\\n      }\\n    ]\\n  },\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]示例3：检查代码文件的命名风格",
        "parent_text": "[h2]示例3：检查代码文件的命名风格在配置文件中定义规则 在ArkTS工程中，pages目录下新建test.ets文件； 在工程根目录下新建code-linter.json5文件，新增以下配置：   如果selector属性不配置，默认检查代码文件和资源文件的命名风格。  执行代码检查 对pages/test.ets文件执行代码检查，检查结果如下：  ",
        "import_module": "class Foo {\\n  static bar() {}\\n}\\n\\nFoo.bar();",
        "parent": "<div class='\\\"section\\\"' id='\\\"section18601146164615\\\"'><a name='\\\"section18601146164615\\\"'></a><a name='\\\"section18601146164615\\\"'></a><h4>[h2]示例3：检查代码文件的命名风格</h4><p id='\\\"ZH-CN_TOPIC_0000002166808396__p3108118164710\\\"'><strong>在配置文件中定义规则</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p131081289471\\\"'>在ArkTS工程中，pages目录下新建test.ets文件；</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p1417915227555\\\"'>在工程根目录下新建code-linter.json5文件，新增以下配置：</p>  <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808396__note394320415611\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180423.43878921722334041242930662703107:50001231000000:2800:DEC388913B770541A3DEE7588755FFB4D360E197B0252E21880E72DCC36B7C07.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808396__p119431747614\\\"'>如果selector属性不配置，默认检查代码文件和资源文件的命名风格。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p10536946020\\\"'><strong>执行代码检查</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p15361546623\\\"'>对pages/test.ets文件执行代码检查，检查结果如下：</p> <p id='\\\"ZH-CN_TOPIC_0000002166808396__p716516612164\\\"'><span><img originheight='\\\"168\\\"' originwidth='\\\"886\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180423.71649366401650208701414257523524:50001231000000:2800:78F2177EA41AAFB92A5A2297FDD66DECB23A07FB28A6F645EB48F36596251F85.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-code-linter.html"
    },
    {
        "id": 234,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/lazyforeach-args-check\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lazyforeach-args-check.html"
    },
    {
        "id": 235,
        "pre": "class BasicDataSource implements IDataSource {\\n  private listeners: DataChangeListener[] = [];\\n  private originDataArray: string[] = [];\\n  public totalCount(): number {\\n    return 0;\\n  }\\n  public getData(index: number): string {\\n    return this.originDataArray[index];\\n  }\\n  registerDataChangeListener(listener: DataChangeListener): void {\\n    if (this.listeners.indexOf(listener) < 0) {\\n      console.info('add listener');\\n      this.listeners.push(listener);\\n    }\\n  }\\n  unregisterDataChangeListener(listener: DataChangeListener): void {\\n    const pos = this.listeners.indexOf(listener);\\n    if (pos >= 0) {\\n      console.info('remove listener');\\n      this.listeners.splice(pos, 1);\\n    }\\n  }\\n  notifyDataReload(): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataReloaded();\\n    })\\n  }\\n  notifyDataAdd(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataAdd(index);\\n    })\\n  }\\n  notifyDataChange(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataChange(index);\\n    })\\n  }\\n  notifyDataDelete(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataDelete(index);\\n    })\\n  }\\n}\\nclass MyDataSource extends BasicDataSource {\\n  private dataArray: string[] = [];\\n  public totalCount(): number {\\n    return this.dataArray.length;\\n  }\\n  public getData(index: number): string {\\n    return this.dataArray[index];\\n  }\\n  public addData(index: number, data: string): void {\\n    this.dataArray.splice(index, 0, data);\\n    this.notifyDataAdd(index);\\n  }\\n  public pushData(data: string): void {\\n    this.dataArray.push(data);\\n    this.notifyDataAdd(this.dataArray.length - 1);\\n  }\\n}\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource();\\n  aboutToAppear() {\\n    for (let i = 0; i <= 20; i++) {\\n      this.data.pushData(`Hello ${i}`)\\n    }\\n  }\\n  build() {\\n    Column({ space: 5 }) {\\n      Grid() {\\n        LazyForEach(this.data, (item: string) => {\\n          GridItem() {\\n            // 使用可复用自定义组件\\n            // 业务逻辑\\n          }\\n        }, (item: string) => item)\\n      }\\n      .cachedCount(2) // 设置GridItem的缓存数量\\n      .columnsTemplate('1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(10)\\n      .margin(10)\\n      .height(500)\\n      .backgroundColor(0xFAEEE0)\\n    }\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lazyforeach-args-check.html"
    },
    {
        "id": 236,
        "pre": "class BasicDataSource implements IDataSource {\\n  private listeners: DataChangeListener[] = [];\\n  private originDataArray: string[] = [];\\n  public totalCount(): number {\\n    return 0;\\n  }\\n  public getData(index: number): string {\\n    return this.originDataArray[index];\\n  }\\n  registerDataChangeListener(listener: DataChangeListener): void {\\n    if (this.listeners.indexOf(listener) < 0) {\\n      console.info('add listener');\\n      this.listeners.push(listener);\\n    }\\n  }\\n  unregisterDataChangeListener(listener: DataChangeListener): void {\\n    const pos = this.listeners.indexOf(listener);\\n    if (pos >= 0) {\\n      console.info('remove listener');\\n      this.listeners.splice(pos, 1);\\n    }\\n  }\\n  notifyDataReload(): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataReloaded();\\n    })\\n  }\\n  notifyDataAdd(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataAdd(index);\\n    })\\n  }\\n  notifyDataChange(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataChange(index);\\n    })\\n  }\\n  notifyDataDelete(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataDelete(index);\\n    })\\n  }\\n}\\nclass MyDataSource extends BasicDataSource {\\n  private dataArray: string[] = [];\\n  public totalCount(): number {\\n    return this.dataArray.length;\\n  }\\n  public getData(index: number): string {\\n    return this.dataArray[index];\\n  }\\n  public addData(index: number, data: string): void {\\n    this.dataArray.splice(index, 0, data);\\n    this.notifyDataAdd(index);\\n  }\\n  public pushData(data: string): void {\\n    this.dataArray.push(data);\\n    this.notifyDataAdd(this.dataArray.length - 1);\\n  }\\n}\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource();\\n  aboutToAppear() {\\n    for (let i = 0; i <= 20; i++) {\\n      this.data.pushData(`Hello ${i}`)\\n    }\\n  }\\n  build() {\\n    Column({ space: 5 }) {\\n      Grid() {\\n        LazyForEach(this.data, (item: string) => {\\n          GridItem() {\\n            // 使用可复用自定义组件\\n            // 业务逻辑\\n          }\\n        })\\n      }\\n      .cachedCount(2) // 设置GridItem的缓存数量\\n      .columnsTemplate('1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(10)\\n      .margin(10)\\n      .height(500)\\n      .backgroundColor(0xFAEEE0)\\n    }\\n  }\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-lazyforeach-args-check.html"
    },
    {
        "id": 237,
        "pre": "if (canIUse('SystemCapability.Collaboration.HarmonyShare')) {\\n  // 支持一碰分享的能力.\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "支持的手机系统：双端需HarmonyOS NEXT 5.0.0.102 SP6及以上版本，可使用canIUse进行判断。 ",
        "import_module": null,
        "parent": "<li>支持的手机系统：双端需HarmonyOS NEXT 5.0.0.102 SP6及以上版本，可使用canIUse进行判断。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/harmony-share-overview.html"
    },
    {
        "id": 238,
        "pre": "import { pdfService, PdfView, pdfViewManager } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\\n  private context = getContext() as common.UIAbilityContext;\\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    (async () => {\\n      this.loadResult = await this.controller.loadDocument(filePath);     \\n    })()\\n  }\\n\\n  build() {\\n    Column() {    \\n      // 保存Pdf文档\\n      Button('savePdfDocument').onClick(async () => {\\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let savePath = this.context.filesDir + '/savePdfDocument.pdf';\\n          let result = await this.controller.saveDocument(savePath);\\n          hilog.info(0x0000, 'PdfPage', 'savePdfDocument %{public}s!', result ? 'success' : 'fail');\\n        }\\n      })\\n      PdfView({\\n        controller: this.controller,\\n        pageFit: pdfService.PageFit.FIT_WIDTH,\\n        showScroll: true\\n      })\\n        .id('pdfview_app_view')\\n        .layoutWeight(1);\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  在aboutToAppear函数里面加载PDF文档。 调用PdfView预览组件，渲染显示。 在【savePdfDocument】按钮中调用saveDocument方法另存PDF文档。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section159621146123119\\\"'> <a name='\\\"section159621146123119\\\"'></a><a name='\\\"section159621146123119\\\"'></a> <h4>示例代码</h4> <ol> <li>在aboutToAppear函数里面加载PDF文档。</li> <li>调用PdfView预览组件，渲染显示。</li> <li>在【savePdfDocument】按钮中调用saveDocument方法另存PDF文档。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-pdfview-open.html"
    },
    {
        "id": 239,
        "pre": "await petalMaps.openMapHomePage(this.getUIContext().getHostContext());",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]打开Petal地图首页",
        "parent_text": "  [h2]打开Petal地图首页 通过openMapHomePage，打开Petal地图首页。    图1 打开Petal地图首页    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section19358151974410\\\"'> <a name='\\\"section19358151974410\\\"'></a><a name='\\\"section19358151974410\\\"'></a> <h4>[h2]打开Petal地图首页</h4> <p>通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-petal-maps#section1117619561413\\\"' target='\\\"_blank\\\"'>openMapHomePage</a>，打开Petal地图首页。</p>  <div class='\\\"p\\\"'> <div class='\\\"fignone\\\"'> <span class='\\\"figcap\\\"'><b>图1 </b>打开Petal地图首页</span> </div> </div> <p><span><img height='\\\"696.7537500000001\\\"' originheight='\\\"889\\\"' originwidth='\\\"420\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120159.21834334650408909125709018418038:50001231000000:2800:EFFFC984E2DCDA4459EA42E269BB77A8D5FA52060561C157B4782CFF5B766331.png\\\"' title='\\\"点击放大\\\"' width='\\\"329.175\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-petalmaps.html"
    },
    {
        "id": 240,
        "pre": "let params: petalMaps.TextSearchParams = {\\n  destinationName: '云谷'\\n};\\nawait petalMaps.openMapTextSearch(getContext(), params);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过openMapTextSearch，传入搜索目标名称，打开Petal地图进行地点搜索。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-petal-maps#section2098315915160\\\"' target='\\\"_blank\\\"'>openMapTextSearch</a>，传入搜索目标名称，打开Petal地图进行地点搜索。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-petalmaps.html"
    },
    {
        "id": 241,
        "pre": "let params: petalMaps.PoiDetailParams = {\\n    destinationPosition: {\\n      latitude: 32.02065982629459,\\n      longitude: 118.788899213002\\n    },\\n    destinationPoiId: '563233191438217472'\\n};\\nawait petalMaps.openMapPoiDetail(getContext(), params);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过openMapPoiDetail，传入地点的经纬度，打开Petal地图查看地点详情。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-petal-maps#section14159526181316\\\"' target='\\\"_blank\\\"'>openMapPoiDetail</a>，传入地点的经纬度，打开Petal地图查看地点详情。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-petalmaps.html"
    },
    {
        "id": 242,
        "pre": "let params: petalMaps.RoutePlanParams = {\\n  destinationPosition: {\\n    latitude: 31.983015468224288,\\n    longitude: 118.78058590757131\\n  }\\n};\\nawait petalMaps.openMapRoutePlan(getContext(), params);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过openMapRoutePlan，传入终点经纬度，打开Petal地图规划路线。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-petal-maps#section1765318218173\\\"' target='\\\"_blank\\\"'>openMapRoutePlan</a>，传入终点经纬度，打开Petal地图规划路线。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-petalmaps.html"
    },
    {
        "id": 243,
        "pre": "let params: petalMaps.NaviParams = {\\n  destinationPosition: {\\n    latitude: 31.983015468224288,\\n    longitude: 118.78058590757131\\n  }\\n};\\nawait petalMaps.openMapNavi(getContext(), params);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过openMapNavi，传入终点经纬度，打开Petal地图发起导航。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-petal-maps#section16894648175\\\"' target='\\\"_blank\\\"'>openMapNavi</a>，传入终点经纬度，打开Petal地图发起导航。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-petalmaps.html"
    },
    {
        "id": 244,
        "pre": "let recommendationOptions: photoAccessHelper.RecommendationOptions = {\\n  recommendationType: photoAccessHelper.RecommendationType.QR_CODE // 配置枚举类型，不同的枚举值，推荐不同种类的图片\\n};\\nthis.pickerOptions.recommendationOptions = recommendationOptions;// 将推荐参数赋值给 pickerOptions.recommendationOptions",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]根据特定类型推荐图片",
        "parent_text": "[h2]根据特定类型推荐图片当需要推荐特定类型的图片，如身份证、银行卡、驾驶证、行驶证、二维码等，可通过配置RecommendationOptions.recommendationType，指定推荐的图片类型。支持的图片类型可参考RecommendationType。   当前示例以通过Picker组件实现推荐图片为例。 如果使用Picker接口，需要将推荐参数赋值给 photoSelectOptions.recommendationOptions。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section839414137598\\\"'><a name='\\\"section839414137598\\\"'></a><a name='\\\"section839414137598\\\"'></a><h4>[h2]根据特定类型推荐图片</h4><p>当需要推荐特定类型的图片，如身份证、银行卡、驾驶证、行驶证、二维码等，可通过配置<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-photoaccesshelper#recommendationoptions11\\\"' target='\\\"_blank\\\"'>RecommendationOptions</a>.recommendationType，指定推荐的图片类型。支持的图片类型可参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-photoaccesshelper#recommendationtype11\\\"' target='\\\"_blank\\\"'>RecommendationType</a>。</p>  <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115946.18218034483535924123108988564780:50001231000000:2800:E7954824A7779A7A460055E5A5E6207136B03BFF98D8AD99421F343C943C58DA.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>当前示例以通过Picker组件实现推荐图片为例。</p> <p>如果使用Picker接口，需要将推荐参数赋值给 photoSelectOptions.recommendationOptions。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/smart-photopicker.html"
    },
    {
        "id": 245,
        "pre": "let textInfo: photoAccessHelper.TextContextInfo = {\\n  text: '国庆节，带着女儿去了上海野生动物园，看到了凶猛的大象，漂亮的火烈鸟，还有她心心念念的大熊猫，小家伙可开心了。'\\n};\\nlet recommendationOptions: photoAccessHelper.RecommendationOptions = {\\n  textContextInfo: textInfo\\n};\\nthis.pickerOptions.recommendationOptions = recommendationOptions;// 将推荐参数赋值给 pickerOptions.recommendationOptions",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]根据文本信息推荐图片",
        "parent_text": "[h2]根据文本信息推荐图片当需要在图文编辑时，根据文本信息推荐图片，可通过配置RecommendationOptions.textContextInfo。  如果RecommendationOptions同时配置了recommendationType和textContextInfo，仅textContextInfo生效。    当前示例以通过Picker组件实现推荐图片为例。 如果使用Picker接口，需要将推荐参数赋值给 photoSelectOptions.recommendationOptions。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section149595171668\\\"'><a name='\\\"section149595171668\\\"'></a><a name='\\\"section149595171668\\\"'></a><h4>[h2]根据文本信息推荐图片</h4><p>当需要在图文编辑时，根据文本信息推荐图片，可通过配置<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-photoaccesshelper#recommendationoptions11\\\"' target='\\\"_blank\\\"'>RecommendationOptions</a>.textContextInfo。</p> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115946.62775400934614150148652732159661:50001231000000:2800:0E28875E2E4206FCCFEB912A7DA9A603C0C6FD5E4E52375C78B964750448D245.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>如果RecommendationOptions同时配置了recommendationType和textContextInfo，仅textContextInfo生效。</p> </div></div>  <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115946.84054483974231294832305507003388:50001231000000:2800:7CA7520E5FE1F2002DEEFCEA17334AF3238F36E0678CDEDF472FACA3F5207D8D.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>当前示例以通过Picker组件实现推荐图片为例。</p> <p>如果使用Picker接口，需要将推荐参数赋值给 photoSelectOptions.recommendationOptions。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/smart-photopicker.html"
    },
    {
        "id": 246,
        "pre": "import { asset } from '@kit.AssetStoreKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nfunction stringToArray(str: string): Uint8Array {\\n  let textEncoder = new util.TextEncoder();\\n  return textEncoder.encodeInto(str);\\n}\\n\\nlet query: asset.AssetMap = new Map();\\nquery.set(asset.Tag.ALIAS, stringToArray('demo_alias')); // 此处指定别名删除单条数据，也可不指定别名删除多条数据\\ntry {\\n  asset.remove(query).then(() => {\\n    console.info(`Asset removed successfully.`);\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to remove Asset. Code is ${err.code}, message is ${err.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  console.error(`Failed to remove Asset. Code is ${err.code}, message is ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "代码示例",
        "parent_text": "  代码示例     本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见API文档。   删除一条别名是demo_alias的关键资产。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"代码示例\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213533709__%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a> <h4>代码示例</h4> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121001.59947145169395458375276057807135:50001231000000:2800:3ABD12C24F5CA3547DF43BED88DB562958506EA403ED35BEF8D6096EF0583A59.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-asset\\\"' target='\\\"_blank\\\"'>API文档</a>。</p> </div> </div> <p>删除一条别名是demo_alias的关键资产。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/asset-js-remove.html"
    },
    {
        "id": 247,
        "pre": "import { LoginWithHuaweiIDButton, loginComponentManager } from '@kit.AccountKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入LoginWithHuaweiIDButton模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-huawei-id-button\\\"' target='\\\"_blank\\\"'>LoginWithHuaweiIDButton</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-unionid-login-button.html"
    },
    {
        "id": 248,
        "pre": "let i = 99;\\nfunction show(){return i;}\\nshow();",
        "type": "Import",
        "function_call": null,
        "function_name": "使用示例",
        "parent_text": "使用示例假设已存在方舟字节码文件：test.abc，其源代码如下：  执行如下命令，就能生成反汇编文件：test.txt。生成的反汇编文件内带有操作码及格式等信息。 ark_disasm.exe test.abc test.txt 查看反汇编文件的内容。 cat test.txt 内容如下： # source binary: test.abc                                                    // 反汇编的方舟字节码文件\\n\\n.language ECMAScript\\n\\n# ====================\\n# LITERALS                                                                   // 字面量数据\\n\\n0 0x203 { 0 [\\n    MODULE_REQUEST_ARRAY: {\\n    };\\n]}\\n\\n# ====================\\n# RECORDS                                                                    // 模块定义数据\\n\\n.record _ESConcurrentModuleRequestsAnnotation {                              // _开头这些都是固定的模块数据\\n}\\n\\n.record test {                                                               // 一个js文件对应一个模块数据，包含了模块的相关信息（在方舟字节码文件中的位置，是否是commonjs ...）\\n    u8 isCommonjs = 0x0\\n    u32 moduleRecordIdx = 0x203\\n    ......\\n}\\n\\n# ====================\\n# METHODS                                                                    // 方法定义数据\\n\\nL_ESSlotNumberAnnotation:\\n    u32 slotNumberIdx { 0x0 }\\n.function any test.#*#show(any a0, any a1, any a2) <static> {                // 此方法源码中的show方法，同时这里也说明了，它属于test模块\\n    ldlexvar 0x0, 0x0\\n    ......\\n}\\n\\nL_ESSlotNumberAnnotation:\\n    u32 slotNumberIdx { 0x3 }\\n.function any test.func_main_0(any a0, any a1, any a2) <static> {            // 此方法是自动生成的，可以理解成整个js文件就是一个方法，方法名为func_main_0\\n    newlexenv 0x1\\n    ......\\n}\\n\\n# ====================\\n# STRING                                                                     // 符号表信息\\n\\n[offset:0x88, name_value:i] 使用参数--verbose，可打印偏移量等更多详细信息。 ark_disasm.exe --verbose test.abc test.txt 此处列出部分示例。 .record _ESSlotNumberAnnotation { # offset: 0x00cd, size: 0x0026 (38)                                  // 这里打印了模块在方舟字节码文件中具体的位置和大小\\n}\\n\\n.record test { # offset: 0x00f3, size: 0x0098 (152)                                                    // 这里打印了模块在方舟字节码文件中具体的位置\\n    u32 moduleRecordIdx = 0x203 # offset: 0x0144                                                   // 这里打印了模块信息的位置\\n}\\n......\\n.function any test.#*#show(any a0, any a1, any a2) <static> { # offset: 0x0153, code offset: 0x0245    // 这里打印了方法信息具体的位置和方法中指令的具体位置\\n#   CODE:\\n    ldlexvar 0x0, 0x0 # offset: 0x0249, [IMM4_IMM4].........[0x3c 0x00]                            // 这里打印了每条指令的具体位置\\n    ......\\n} ",
        "import_module": "let i = 99;\\nfunction show(){return i;}\\nshow();",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用示例\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212674__%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\\\"'></a><h4>使用示例</h4><p>假设已存在方舟字节码文件：test.abc，其源代码如下：</p>  <p>执行如下命令，就能生成反汇编文件：test.txt。生成的反汇编文件内带有操作码及格式等信息。</p> <pre class='\\\"screen\\\"'>ark_disasm.exe test.abc test.txt</pre> <p>查看反汇编文件的内容。</p> <pre class='\\\"screen\\\"'>cat test.txt</pre> <p>内容如下：</p> <pre class='\\\"screen\\\"'># source binary: test.abc                                                    // 反汇编的方舟字节码文件\\n\\n.language ECMAScript\\n\\n# ====================\\n# LITERALS                                                                   // 字面量数据\\n\\n0 0x203 { 0 [\\n    MODULE_REQUEST_ARRAY: {\\n    };\\n]}\\n\\n# ====================\\n# RECORDS                                                                    // 模块定义数据\\n\\n.record _ESConcurrentModuleRequestsAnnotation {                              // _开头这些都是固定的模块数据\\n}\\n\\n.record test {                                                               // 一个js文件对应一个模块数据，包含了模块的相关信息（在方舟字节码文件中的位置，是否是commonjs ...）\\n    u8 isCommonjs = 0x0\\n    u32 moduleRecordIdx = 0x203\\n    ......\\n}\\n\\n# ====================\\n# METHODS                                                                    // 方法定义数据\\n\\nL_ESSlotNumberAnnotation:\\n    u32 slotNumberIdx { 0x0 }\\n.function any test.#*#show(any a0, any a1, any a2) &lt;static&gt; {                // 此方法源码中的show方法，同时这里也说明了，它属于test模块\\n    ldlexvar 0x0, 0x0\\n    ......\\n}\\n\\nL_ESSlotNumberAnnotation:\\n    u32 slotNumberIdx { 0x3 }\\n.function any test.func_main_0(any a0, any a1, any a2) &lt;static&gt; {            // 此方法是自动生成的，可以理解成整个js文件就是一个方法，方法名为func_main_0\\n    newlexenv 0x1\\n    ......\\n}\\n\\n# ====================\\n# STRING                                                                     // 符号表信息\\n\\n[offset:0x88, name_value:i]</pre> <p>使用参数--verbose，可打印偏移量等更多详细信息。</p> <pre class='\\\"screen\\\"'>ark_disasm.exe --verbose test.abc test.txt</pre> <p>此处列出部分示例。</p> <pre class='\\\"screen\\\"'>.record _ESSlotNumberAnnotation { # offset: 0x00cd, size: 0x0026 (38)                                  // 这里打印了模块在方舟字节码文件中具体的位置和大小\\n}\\n\\n.record test { # offset: 0x00f3, size: 0x0098 (152)                                                    // 这里打印了模块在方舟字节码文件中具体的位置\\n    u32 moduleRecordIdx = 0x203 # offset: 0x0144                                                   // 这里打印了模块信息的位置\\n}\\n......\\n.function any test.#*#show(any a0, any a1, any a2) &lt;static&gt; { # offset: 0x0153, code offset: 0x0245    // 这里打印了方法信息具体的位置和方法中指令的具体位置\\n#   CODE:\\n    ldlexvar 0x0, 0x0 # offset: 0x0249, [IMM4_IMM4].........[0x3c 0x00]                            // 这里打印了每条指令的具体位置\\n    ......\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/tool-disassembler.html"
    },
    {
        "id": 249,
        "pre": "// entry/src/main/cpp/napi_init.cpp\\n\\n// 准备模块加载相关信息，将上述Init函数与本模块名等信息记录下来。\\nstatic napi_module demoModule = {\\n    .nm_version = 1,\\n    .nm_flags = 0,\\n    .nm_filename = nullptr,\\n    .nm_register_func = Init,\\n    .nm_modname = \\\"entry\\\",\\n    .nm_priv = nullptr,\\n    .reserved = {0},\\n};\\n\\n// 加载so时，该函数会自动被调用，将上述demoModule模块注册到系统中。\\nextern \\\"C\\\" __attribute__((constructor)) void RegisterDemoModule() { \\n    napi_module_register(&demoModule);\\n }",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "设置模块注册信息 ArkTS侧import native模块时，会加载其对应的so。加载so时，首先会调用napi_module_register方法，将模块注册到系统中，并调用模块初始化函数。 napi_module有两个关键属性：一个是.nm_register_func，定义模块初始化函数；另一个是.nm_modname，定义模块的名称，也就是ArkTS侧引入的so库的名称，模块系统会根据此名称来区分不同的so。  ",
        "import_module": null,
        "parent": "<li><p>设置模块注册信息</p> <p>ArkTS侧import native模块时，会加载其对应的so。加载so时，首先会调用napi_module_register方法，将模块注册到系统中，并调用模块初始化函数。</p> <p>napi_module有两个关键属性：一个是.nm_register_func，定义模块初始化函数；另一个是.nm_modname，定义模块的名称，也就是ArkTS侧引入的so库的名称，模块系统会根据此名称来区分不同的so。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/use-napi-process.html"
    },
    {
        "id": 250,
        "pre": "// entry/src/main/ets/pages/Index.ets\\n// 通过import的方式，引入Native能力。\\nimport nativeModule from 'libentry.so'\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Test Node-API callNative result: ';\\n  @State message2: string = 'Test Node-API nativeCallArkTS result: ';\\n  build() {\\n    Row() {\\n      Column() {\\n        // 第一个按钮，调用add方法，对应到Native侧的CallNative方法，进行两数相加。\\n        Text(this.message)\\n          .fontSize(50)\\n          .fontWeight(FontWeight.Bold)\\n          .onClick(() => {\\n            this.message += nativeModule.callNative(2, 3);\\n            })\\n        // 第二个按钮，调用nativeCallArkTS方法，对应到Native的NativeCallArkTS，在Native调用ArkTS function。\\n        Text(this.message2)\\n          .fontSize(50)\\n          .fontWeight(FontWeight.Bold)\\n          .onClick(() => {\\n            this.message2 += nativeModule.nativeCallArkTS((a: number)=> {\\n                return a * 2;\\n            });\\n          })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "ArkTS侧调用C/C++方法实现",
        "parent_text": "ArkTS侧调用C/C++方法实现ArkTS侧通过import引入Native侧包含处理逻辑的so来使用C/C++的方法。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts侧调用cc方法实现\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213534389__arkts%E4%BE%A7%E8%B0%83%E7%94%A8cc%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0\\\"'></a><a name='\\\"arkts%E4%BE%A7%E8%B0%83%E7%94%A8cc%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0\\\"'></a><h4>ArkTS侧调用C/C++方法实现</h4><p>ArkTS侧通过import引入Native侧包含处理逻辑的so来使用C/C++的方法。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/use-napi-process.html"
    },
    {
        "id": 251,
        "pre": "\\\"app\\\": {\\n  \\\"signingConfigs\\\": [],\\n  \\\"products\\\": [\\n    {\\n      \\\"name\\\": \\\"default\\\",\\n      \\\"signingConfig\\\": \\\"default\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"4.0.0(10)\\\",      //指定HarmonyOS应用/元服务兼容的最低版本。\\n      \\\"targetSdkVersion\\\": \\\"4.0.0(10)\\\",          //指定HarmonyOS应用/元服务目标版本。若没有设置，默认为compatibleSdkVersion\\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\",                 //指定为HarmonyOS\\n    }\\n  ],\\n  ...\\n}",
        "type": "Reference",
        "function_call": "和()",
        "function_name": null,
        "parent_text": "请将compatibleSdkVersion和targetSdkVersion（若已配置）从9改为4.0.0(10)，并配置runtimeOS。版本号需满足M.S.F(X)规则的字符串类型，使用英文.和()。  ",
        "import_module": null,
        "parent": "<li id='\\\"zh-cn_topic_0000001808962341_li10318182410522\\\"'><span>请将<strong>compatibleSdkVersion</strong>和<strong>targetSdkVersion</strong>（若已配置）从9改为4.0.0(10)，并配置<strong>runtimeOS</strong>。版本号需满足M.S.F(X)规则的字符串类型，使用英文.和()。</span><p></p> <p id='\\\"ZH-CN_TOPIC_0000002166808092__p613412155711\\\"'><span><img originheight='\\\"325\\\"' originwidth='\\\"868\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180415.20368627621810805902992138242945:50001231000000:2800:CB3042FD1294C31E69DE2CFCF5E6438C7538B544348968E0203704280D245EAE.png\\\"'/></span></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-integrated-project-migration.html"
    },
    {
        "id": 252,
        "pre": "import { advertising } from '@kit.AdsKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  // 步骤2中请求到的广告内容\\n  private ads: Array<advertising.Advertisement> = [];\\n  private displayOptions: advertising.AdDisplayOptions = {\\n    // 激励广告视频播放是否静音\\n    mute: true,\\n    // 设置自定义数据\\n    customData: 'CUSTOM_DATA',\\n    // 设置自定义数据\\n    userId: '1234567'\\n  };\\n\\n  build() {\\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\\n      Row() {\\n        Button('showAd').onClick(() => {\\n          this.showAd();\\n        }).width('45%')\\n      }\\n    }\\n  }\\n\\n  private showAd() {\\n    // 请在此处自行增加开发步骤3中的，注册激励广告状态监听器\\n    // ...\\n\\n    // 此处ads[0]表示请求到的第一个广告，用户根据实际情况选择\\n    advertising.showAd(this.ads[0], this.displayOptions, this.context);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "（可选）设置自定义数据customData和userId。ads为步骤2请求到的广告信息，调用showAd方法来展示广告。 您在App中展示激励广告之前设置自定义数据customData和userId。示例代码如下所示：   如果没有设置customData和userId，不影响发放奖励事件上报但是服务端验证的参数中没有这两个字段。如果设置customData和userId，必须在展示广告之前设置并且URLEncode之后，长度不超过1024个字符，否则影响服务端验证。  ",
        "import_module": null,
        "parent": "<li>（可选）设置自定义数据customData和userId。<p>ads为<a href='\\\"#li221591015171\\\"'>步骤2</a>请求到的广告信息，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-advertising#showad\\\"' target='\\\"_blank\\\"'>showAd</a>方法来展示广告。</p> <p>您在App中展示激励广告之前设置自定义数据customData和userId。示例代码如下所示：</p>  <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120040.59952789486741106155619723791419:50001231000000:2800:9CB36054BD95C9F7A0CE3F93A2E90F155178C754522C190E4F7F769E610207B7.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>如果没有设置customData和userId，不影响发放奖励事件上报但是服务端验证的参数中没有这两个字段。如果设置customData和userId，必须在展示广告之前设置并且URLEncode之后，长度不超过1024个字符，否则影响服务端验证。</p> </div></div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ads-publisher-service-reward.html"
    },
    {
        "id": 253,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/class-literal-property-style\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_class-literal-property-style.html"
    },
    {
        "id": 254,
        "pre": "class Mx {\\n  public readonly myField1 = 'hello';\\n\\n  public readonly myField2 = ['a', 'b'];\\n\\n  public readonly ['myField3'] = 'hello world';\\n\\n  public get myField4() {\\n    return `hello ${this.myField1}`;\\n  }\\n}\\n\\nexport { Mx };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_class-literal-property-style.html"
    },
    {
        "id": 255,
        "pre": "class Mx {\\n  public static get myField1() {\\n    return '1';\\n  }\\n\\n  public get ['myField2']() {\\n    return 'hello world';\\n  }\\n}\\n\\nexport { Mx };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_class-literal-property-style.html"
    },
    {
        "id": 256,
        "pre": "import { BuilderNode, FrameNode, NodeController, UIContext } from '@kit.ArkUI';\\n\\n// 定义一个Params类，用于传递参数\\nclass Params {\\n  index: number = 0;\\n\\n  constructor(index: number) {\\n    this.index = index;\\n  }\\n}\\n\\n// 定义一个buildNodeChild组件，它包含一个message属性和一个index属性\\n@Component\\nstruct buildNodeChild {\\n  @StorageProp(\\\"buildNodeTest\\\") @Watch(\\\"onMessageUpdated\\\") message: string = \\\"hello world\\\";\\n  @State index: number = 0;\\n\\n  // 当message更新时，调用此方法\\n  onMessageUpdated() {\\n    console.log(`FreezeBuildNode builderNodeChild message callback func ${this.message},index：${this.index}`);\\n  }\\n\\n  build() {\\n    Text(`buildNode Child message: ${this.message}`).fontSize(30)\\n  }\\n}\\n\\n// 定义一个buildText函数，它接收一个Params参数并构建一个Column组件\\n@Builder\\nfunction buildText(params: Params) {\\n  Column() {\\n    buildNodeChild({ index: params.index })\\n  }\\n}\\n\\n// 定义一个TextNodeController类，继承自NodeController\\nclass TextNodeController extends NodeController {\\n  private textNode: BuilderNode<[Params]> | null = null;\\n  private index: number = 0;\\n\\n  // 构造函数接收一个index参数\\n  constructor(index: number) {\\n    super();\\n    this.index = index;\\n  }\\n\\n  // 创建并返回一个FrameNode\\n  makeNode(context: UIContext): FrameNode | null {\\n    this.textNode = new BuilderNode(context);\\n    this.textNode.build(wrapBuilder<[Params]>(buildText), new Params(this.index));\\n    return this.textNode.getFrameNode();\\n  }\\n}\\n\\n// 定义一个Index组件，它包含一个message属性和一个data数组\\n@Entry\\n@Component\\nstruct Index {\\n  @StorageLink(\\\"buildNodeTest\\\") message: string = \\\"hello\\\";\\n  private data: number[] = [0, 1];\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Button(\\\"change\\\").fontSize(30)\\n          .onClick(() => {\\n            this.message += 'a';\\n          })\\n\\n        Tabs() {\\n          ForEach(this.data, (item: number) => {\\n            TabContent() {\\n              FreezeBuildNode({ index: item })\\n            }.tabBar(`tab${item}`)\\n          }, (item: number) => item.toString())\\n        }\\n      }\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}\\n\\n// 定义一个FreezeBuildNode组件，它包含一个message属性和一个index属性\\n@Component({ freezeWhenInactive: true })\\nstruct FreezeBuildNode {\\n  @StorageProp(\\\"buildNodeTest\\\") @Watch(\\\"onMessageUpdated\\\") message: string = \\\"1111\\\";\\n  @State index: number = 0;\\n\\n  // 当message更新时，调用此方法\\n  onMessageUpdated() {\\n    console.log(`FreezeBuildNode message callback func ${this.message}, index: ${this.index}`);\\n  }\\n\\n  build() {\\n    NodeContainer(new TextNodeController(this.index))\\n      .width('100%')\\n      .height('100%')\\n      .backgroundColor('#FFF0F0F0')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "限制条件",
        "parent_text": "  限制条件 如下面的例子所示，FreezeBuildNode中使用了自定义节点BuilderNode。BuilderNode可以通过命令式动态挂载组件，而组件冻结又是强依赖父子关系来通知是否开启组件冻结。如果父组件使用组件冻结，且组件树的中间层级上又启用了BuilderNode，则BuilderNode的子组件将无法被冻结。  在上面的示例中： 点击Button(\\\"change\\\")。改变message的值，当前正在显示的TabContent组件中的@Watch中注册的方法onMessageUpdated被触发。未显示的TabContent中的BuilderNode节点下组件的@Watch方法onMessageUpdated也被触发，并没有被冻结。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"限制条件\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213458673__%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6\\\"'></a><a name='\\\"%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6\\\"'></a> <h4>限制条件</h4> <p>如下面的例子所示，FreezeBuildNode中使用了自定义节点<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-arkui-buildernode\\\"' target='\\\"_blank\\\"'>BuilderNode</a>。BuilderNode可以通过命令式动态挂载组件，而组件冻结又是强依赖父子关系来通知是否开启组件冻结。如果父组件使用组件冻结，且组件树的中间层级上又启用了BuilderNode，则BuilderNode的子组件将无法被冻结。</p>  <p>在上面的示例中：</p> <p>点击Button(\\\"change\\\")。改变message的值，当前正在显示的TabContent组件中的@Watch中注册的方法onMessageUpdated被触发。未显示的TabContent中的BuilderNode节点下组件的@Watch方法onMessageUpdated也被触发，并没有被冻结。</p> <p><span><img originheight='\\\"656\\\"' originwidth='\\\"1791\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115828.91768155663364006399991229551531:50001231000000:2800:ADFD95B5ED4EF41EE68CB0F89969E350ECC09EB6FD843F89994383072D18976E.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-components-freeze.html"
    },
    {
        "id": 257,
        "pre": "// 1.导入跨包的路由页面\\nimport { PageInHSP } from 'library/src/main/ets/pages/PageInHSP'\\n\\n@Entry\\n@Component\\nstruct mainPage {\\n pageStack: NavPathStack = new NavPathStack()\\n\\n @Builder pageMap(name: string) {\\n   if (name === 'PageInHSP') {\\n        // 2.定义路由映射表\\n        PageInHSP()\\n   }\\n }\\n\\n build() {\\n   Navigation(this.pageStack) {\\n     Button(\\\"Push HSP Page\\\")\\n       .onClick(() => {\\n         // 3.跳转到Hsp中的页面\\n         this.pageStack.pushPath({ name: \\\"PageInHSP\\\" });\\n       })\\n   }\\n   .mode(NavigationMode.Stack)\\n   .navDestination(this.pageMap)\\n }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "配置好HSP（HAR）的项目依赖后，在mainPage中导入自定义组件，并添加到pageMap中，即可正常调用。 ",
        "import_module": null,
        "parent": "<li><p>配置好HSP（HAR）的项目依赖后，在mainPage中导入自定义组件，并添加到pageMap中，即可正常调用。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-router-to-navigation.html"
    },
    {
        "id": 258,
        "pre": "#include <iostream>\\nusing namespace std;\\nint main() {\\n    cout << \\\"hello world!\\\" <<endl;\\n    return 0;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]root镜像远程调试",
        "parent_text": "[h2]root镜像远程调试 支持调试的应用或二进制是aarch64-linux-ohos架构的native C++工程。为了方便调试建议调试时关闭SELinux。  源文件：hello.cpp  编译： <clang distribution>/bin/clang++ --target=aarch64-linux-ohos --sysroot=<sysroot distribution> -g hello.cpp -o a.out 打开命令行窗口1，关闭SELinux。hdc shell setenforce 0 在命令行窗口1，将lldb-server和可执行文件a.out推送到设备。hdc file send lldb-server /data/local/tmp\\nhdc file send a.out /data/local/tmp\\nhdc shell chmod 755 /data/local/tmp/lldb-server /data/local/tmp/a.out 运行lldb-server。(8080为有效且当前未被占用的端口号，用户可自定义）hdc shell ./data/local/tmp/lldb-server p --server --listen \\\"*:8080\\\" 打开命令行窗口2，运行二进制文件lldb。lldb 在LLDB命令行窗口进行远端选择与连接。(lldb) platform select remote-ohos\\n(lldb) platform connect connect://localhost:8080  指定要调试的设备上的二进制文件a.out。(lldb) target create /data/local/tmp/a.out 在代码中main函数处设置断点。(lldb) b main 启动应用。(lldb) run 查看当前目标进程的源码。(lldb) source list 按需执行调试命令进行后续调试操作。退出调试。(lldb) quit  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section111734955217\\\"'><a name='\\\"section111734955217\\\"'></a><a name='\\\"section111734955217\\\"'></a><h4>[h2]root镜像远程调试</h4><div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115757.49363065915778112911655000016901:50001231000000:2800:F824EC7739D38E0A735500B155EDDE78C18CE60C8F0FBB895276281A33A4845E.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ul><li>支持调试的应用或二进制是aarch64-linux-ohos架构的native C++工程。</li><li>为了方便调试建议调试时关闭SELinux。</li></ul> </div></div> <p>源文件：hello.cpp</p>  <p>编译：</p> <pre class='\\\"screen\\\"'>&lt;clang distribution&gt;/bin/clang++ --target=aarch64-linux-ohos --sysroot=&lt;sysroot distribution&gt; -g hello.cpp -o a.out</pre> <ol><li>打开命令行窗口1，关闭SELinux。<pre class='\\\"screen\\\"'>hdc shell setenforce 0</pre> </li><li>在命令行窗口1，将lldb-server和可执行文件a.out推送到设备。<pre class='\\\"screen\\\"'>hdc file send lldb-server /data/local/tmp\\nhdc file send a.out /data/local/tmp\\nhdc shell chmod 755 /data/local/tmp/lldb-server /data/local/tmp/a.out</pre> </li><li>运行lldb-server。(8080为有效且当前未被占用的端口号，用户可自定义）<pre class='\\\"screen\\\"'>hdc shell ./data/local/tmp/lldb-server p --server --listen \\\"*:8080\\\"</pre> </li><li>打开命令行窗口2，运行二进制文件lldb。<pre class='\\\"screen\\\"'>lldb</pre> </li><li>在LLDB命令行窗口进行远端选择与连接。<pre class='\\\"screen\\\"'>(lldb) platform select remote-ohos\\n(lldb) platform connect connect://localhost:8080 </pre> </li><li>指定要调试的设备上的二进制文件a.out。<pre class='\\\"screen\\\"'>(lldb) target create /data/local/tmp/a.out</pre> </li><li>在代码中main函数处设置断点。<pre class='\\\"screen\\\"'>(lldb) b main</pre> </li><li>启动应用。<pre class='\\\"screen\\\"'>(lldb) run</pre> </li><li>查看当前目标进程的源码。<pre class='\\\"screen\\\"'>(lldb) source list</pre> </li><li>按需执行调试命令进行后续调试操作。</li><li>退出调试。<pre class='\\\"screen\\\"'>(lldb) quit</pre> </li></ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/debug-lldb.html"
    },
    {
        "id": 259,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块，示例中除去发起请求以及响应错误处理，还需用到Core File Kit中的fileIo，所以需导入以下模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块，示例中除去发起请求以及响应错误处理，还需用到Core File Kit中的fileIo，所以需导入以下模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-filetransferfast.html"
    },
    {
        "id": 260,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块，示例中除去发起请求以及响应错误处理，还需用到CoreFileKit中的fileIo，需导入以下模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块，示例中除去发起请求以及响应错误处理，还需用到CoreFileKit中的fileIo，需导入以下模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-filetransferfast.html"
    },
    {
        "id": 261,
        "pre": "hdc shell bm compile -m partial {bundleName}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "使用hdc shell命令触发AOT编译，生成机器码文件。输入如下命令，待命令返回后，表示编译完成。   编译任务受整机资源状态管控，为提高编译成功率，请在设备熄屏状态下进行编译，并在避免设备发烫情况下开启编译。  ",
        "import_module": "hdc shell bm compile -m partial {bundleName}",
        "parent": "<li id='\\\"li18833583283\\\"'><span>使用hdc shell命令触发AOT编译，生成机器码文件。</span><p></p><p id='\\\"ZH-CN_TOPIC_0000002166648472__p9851106103110\\\"'>输入如下命令，待命令返回后，表示编译完成。</p>  <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166648472__note14556930193210\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180503.48339467938964158266949137133961:50001231000000:2800:84131A631B244C54A3FC727824F889480BA66843159F1D7AC9CFB2A95E3FFBA0.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166648472__p77048336436\\\"'>编译任务受整机资源状态管控，为提高编译成功率，请在设备熄屏状态下进行编译，并在避免设备发烫情况下开启编译。</p> </div></div> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-aot.html"
    },
    {
        "id": 262,
        "pre": "import { subjectSegmentation } from '@kit.CoreVisionKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "引用相关类添加至工程。 ",
        "import_module": "import { subjectSegmentation } from '@kit.CoreVisionKit';",
        "parent": "<li><span>引用相关类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-subject-segmentation.html"
    },
    {
        "id": 263,
        "pre": "import { subjectSegmentation } from '@kit.CoreVisionKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\n\\nconst TAG: string = \\\"ImageSegmentationSample\\\";\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State chooseImage: PixelMap | undefined = undefined\\n  @State dataValues: string = ''\\n  @State segmentedImage: PixelMap | undefined = undefined\\n  @State maxNum: string = '20'\\n\\n\\n  build() {\\n    Column() {\\n      Image(this.chooseImage)\\n        .objectFit(ImageFit.Fill)\\n        .height('30%')\\n        .accessibilityDescription(\\\"Image to be segmented\\\")\\n\\n      Scroll() {\\n        Text(this.dataValues)\\n          .copyOption(CopyOptions.LocalDevice)\\n          .margin(10)\\n          .width('100%')\\n      }\\n      .height('20%')\\n\\n      Image(this.segmentedImage)\\n        .objectFit(ImageFit.Fill)\\n        .height('30%')\\n        .accessibilityDescription(\\\"Segmented subject image\\\")\\n\\n      Row() {\\n        Text('Max subject count:')\\n          .fontSize(16)\\n        TextInput({ placeholder: 'Enter max subject count', text: this.maxNum })\\n          .type(InputType.Number)\\n          .placeholderColor(Color.Gray)\\n          .fontSize(16)\\n          .backgroundColor(Color.White)\\n          .onChange((value: string) => {\\n            this.maxNum = value\\n          })\\n      }\\n      .width('80%')\\n      .margin(10)\\n\\n      Button('Select Image')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          this.selectImage()\\n        })\\n\\n      Button('Image Segmentation')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          if (!this.chooseImage) {\\n            hilog.error(0x0000, TAG, \\\"imageSegmentation not have chooseImage\\\");\\n            return\\n          }\\n          let visionInfo: subjectSegmentation.VisionInfo = {\\n            pixelMap: this.chooseImage,\\n          };\\n          let config: subjectSegmentation.SegmentationConfig = {\\n            maxCount: parseInt(this.maxNum),\\n            enableSubjectDetails: true,\\n            enableSubjectForegroundImage: true,\\n          };\\n          subjectSegmentation.doSegmentation(visionInfo, config)\\n            .then((data: subjectSegmentation.SegmentationResult) => {\\n              let outputString = `Subject count: ${data.subjectCount}\\\\n`;\\n              outputString += `Max subject count: ${config.maxCount}\\\\n`;\\n              outputString += `Enable subject details: ${config.enableSubjectDetails ? 'Yes' : 'No'}\\\\n\\\\n`;\\n              let segBox : subjectSegmentation.Rectangle = data.fullSubject.subjectRectangle;\\n              let segBoxString = `Full subject box:\\\\nLeft: ${segBox.left}, Top: ${segBox.top}, Width: ${segBox.width}, Height: ${segBox.height}\\\\n\\\\n`;\\n              outputString += segBoxString;\\n\\n              if (config.enableSubjectDetails) {\\n                outputString += 'Individual subject boxes:\\\\n';\\n                if (data.subjectDetails) {\\n                  for (let i = 0; i < data.subjectDetails.length; i++) {\\n                    let detailSegBox: subjectSegmentation.Rectangle = data.subjectDetails[i].subjectRectangle;\\n                    outputString += `Subject ${i + 1}:\\\\nLeft: ${detailSegBox.left}, Top: ${detailSegBox.top}, Width: ${detailSegBox.width}, Height: ${detailSegBox.height}\\\\n\\\\n`;\\n                  }\\n                }\\n              }\\n\\n              hilog.info(0x0000, TAG, \\\"Segmentation result: \\\" + outputString);\\n              this.dataValues = outputString;\\n\\n              if (data.fullSubject && data.fullSubject.foregroundImage) {\\n                this.segmentedImage = data.fullSubject.foregroundImage;\\n              } else {\\n                hilog.warn(0x0000, TAG, \\\"No foreground image in segmentation result\\\");\\n              }\\n            })\\n            .catch((error: BusinessError) => {\\n              hilog.error(0x0000, TAG, `Image segmentation failed errCode: ${error.code}, errMessage: ${error.message}`);\\n              this.dataValues = `Error: ${error.message}`;\\n              this.segmentedImage = undefined;\\n            });\\n        })\\n    }\\n    .width('100%')\\n    .height('80%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  private async selectImage() {\\n    let uri = await this.openPhoto()\\n    if (uri === undefined) {\\n      hilog.error(0x0000, TAG, \\\"uri is undefined\\\");\\n    }\\n    this.loadImage(uri);\\n  }\\n\\n  private openPhoto(): Promise<Array<string>> {\\n    return new Promise<Array<string>>((resolve, reject) => {\\n      let PhotoSelectOptions = new photoAccessHelper.PhotoSelectOptions();\\n      PhotoSelectOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE;\\n      PhotoSelectOptions.maxSelectNumber = 1;\\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\\n      hilog.info(0x0000, TAG, 'PhotoViewPicker.select successfully, PhotoSelectResult uri: ');\\n      photoPicker.select(PhotoSelectOptions).then((PhotoSelectResult) => {\\n        hilog.info(0x0000, TAG, `PhotoViewPicker.select successfully, PhotoSelectResult uri: ${PhotoSelectResult.photoUris}`);\\n        resolve(PhotoSelectResult.photoUris)\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0000, TAG, `PhotoViewPicker.select failed with errCode: ${err.code}, errMessage: ${err.message}`);\\n        reject();\\n      });\\n    })\\n  }\\n\\n  private loadImage(names: string[]) {\\n    setTimeout(async () => {\\n      let imageSource: image.ImageSource | undefined = undefined\\n      let fileSource = await fileIo.open(names[0], fileIo.OpenMode.READ_ONLY)\\n      imageSource = image.createImageSource(fileSource.fd)\\n      this.chooseImage = await imageSource.createPixelMap()\\n      hilog.info(0x0000, TAG, `this.chooseImage===${this.chooseImage}`);\\n    }, 100\\n    )\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": "import { subjectSegmentation } from '@kit.CoreVisionKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section158910013336\\\"'> <a name='\\\"section158910013336\\\"'></a><a name='\\\"section158910013336\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-subject-segmentation.html"
    },
    {
        "id": 264,
        "pre": "import { pushCommon, RemoteNotificationExtensionAbility } from '@kit.PushKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { resourceManager } from '@kit.LocalizationKit';\\nimport { common } from '@kit.AbilityKit';\\n\\nexport default class RemoteNotificationExtAbility extends RemoteNotificationExtensionAbility {\\n  async onReceiveMessage(remoteNotificationInfo: pushCommon.RemoteNotificationInfo): Promise<pushCommon.RemoteNotificationContent> {\\n    hilog.info(0x0000, 'testTag', 'RemoteNotificationExtAbility onReceiveMessage, remoteNotificationInfo');\\n\\n    // Read the pixel map object\\n    const resourceMgr: resourceManager.ResourceManager = (this.context as common.UIExtensionContext).resourceManager;\\n    const fileData: Uint8Array = await resourceMgr.getMediaContent($r('app.media.icon'));\\n    const buffer = fileData.buffer;\\n    const imageSource: image.ImageSource = image.createImageSource(buffer as ArrayBuffer);\\n    const pixelMap: image.PixelMap = await imageSource.createPixelMap();\\n    if (pixelMap) {\\n      pixelMap.getImageInfo((err, imageInfo) => {\\n        if (imageInfo) {\\n          hilog.info(0x0000, 'testTag', `imageInfo ${imageInfo.size.width} * ${imageInfo.size.height}`);\\n        }\\n      });\\n    }\\n\\n    // Return the replaced message content.\\n    return {\\n      title: 'Default replace title.',\\n      text: 'Default replace text.',\\n      badgeNumber: 1,\\n      setBadgeNumber: 2,\\n      overlayIcon: pixelMap,\\n      wantAgent: {\\n        abilityName: 'DemoAbility',\\n        parameters: {\\n          key: 'Default value'\\n        }\\n      }\\n    }\\n  }\\n\\n  onDestroy(): void {\\n    hilog.info(0x0000, 'testTag', 'RemoteNotificationExtAbility onDestroy.');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在您的工程内创建一个ExtensionAbility类型的组件并且继承RemoteNotificationExtensionAbility，完成onReceiveMessage()方法的覆写，代码示例如下：  函数的返回值用于替换最终展示在终端的通知，title和text代表您要展示的通知标题与通知内容。 badgeNumber字段为展示通知时增加的角标数量，setBadgeNumber字段为展示通知时显示的角标数量，两者同时返回时，setBadgeNumber优先于badgeNumber。详情请参见RemoteNotificationContent。 overlayIcon字段为展示通知时的叠加图标。详情请参见RemoteNotificationContent。 wantAgent.abilityName字段为需要替换的点击拉起的落地页abilityName（例如DemoAbility），DemoAbility需要您自行适配开发。详情请参见RemoteWantAgent。 wantAgent.parameters字段表示拉起落地页透传参数。详情请参见RemoteWantAgent。  ",
        "import_module": null,
        "parent": "<li><span>在您的工程内创建一个ExtensionAbility类型的组件并且继承<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-remote-notification-extension-ability\\\"' target='\\\"_blank\\\"'>RemoteNotificationExtensionAbility</a>，完成<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-remote-notification-extension-ability#section455013322919\\\"' target='\\\"_blank\\\"'>onReceiveMessage</a>()方法的覆写，代码示例如下：</span><p></p> <ul> <li>函数的返回值用于替换最终展示在终端的通知，title和text代表您要展示的通知标题与通知内容。</li> <li>badgeNumber字段为展示通知时<strong>增加</strong>的角标数量，setBadgeNumber字段为展示通知时<strong>显示</strong>的角标数量，两者同时返回时，setBadgeNumber优先于badgeNumber。详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-pushcommon#section155703491918\\\"' target='\\\"_blank\\\"'>RemoteNotificationContent</a>。</li> <li>overlayIcon字段为展示通知时的叠加图标。详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-pushcommon#section155703491918\\\"' target='\\\"_blank\\\"'>RemoteNotificationContent</a>。</li> <li>wantAgent.abilityName字段为需要替换的点击拉起的落地页abilityName（例如DemoAbility），DemoAbility需要您自行适配开发。详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-pushcommon#section122049160211\\\"' target='\\\"_blank\\\"'>RemoteWantAgent</a>。</li> <li>wantAgent.parameters字段表示拉起落地页透传参数。详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-pushcommon#section122049160211\\\"' target='\\\"_blank\\\"'>RemoteWantAgent</a>。</li> </ul> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-send-extend-noti.html"
    },
    {
        "id": 265,
        "pre": "\\\"requestPermissions\\\":[\\n   {\\n     \\\"name\\\" : \\\"ohos.permission.INTERNET\\\"\\n   }\\n ]",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "开启调试功能需要在DevEco Studio应用工程hap模块的module.json5文件中增加如下权限，添加方法请参考在配置文件中声明权限。 ",
        "import_module": null,
        "parent": "<li><p>开启调试功能需要在DevEco Studio应用工程hap模块的module.json5文件中增加如下权限，添加方法请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/declare-permissions\\\"'>在配置文件中声明权限</a>。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/web-debugging-with-devtools.html"
    },
    {
        "id": 266,
        "pre": "#!/bin/bash\\n\\n# Get current fport rule list\\nCURRENT_FPORT_LIST=$(hdc fport ls)\\n\\n# Delete the existing fport rule one by one\\nwhile IFS= read -r line; do\\n    # Extract the taskline\\n    IFS=' ' read -ra parts <<< \\\"$line\\\"\\n    taskline=\\\"${parts[1]} ${parts[2]}\\\"\\n\\n    # Delete the corresponding fport rule\\n    echo \\\"Removing forward rule for $taskline\\\"\\n    hdc fport rm $taskline\\n    result=$?\\n\\n    if [ $result -eq 0 ]; then\\n        echo \\\"Remove forward rule success, taskline:$taskline\\\"\\n    else\\n        echo \\\"Failed to remove forward rule, taskline:$taskline\\\"\\n    fi\\n\\ndone <<< \\\"$CURRENT_FPORT_LIST\\\"\\n\\n# Initial port number\\nINITIAL_PORT=9222\\n\\n# Get the current port number, use initial port number if not set previously\\nCURRENT_PORT=${PORT:-$INITIAL_PORT}\\n\\n# Get the list of all PIDs that match the condition\\nPID_LIST=$(hdc shell cat /proc/net/unix | grep webview_devtools_remote_ | awk -F '_' '{print $NF}')\\n\\nif [ -z \\\"$PID_LIST\\\" ]; then\\n    echo \\\"Failed to retrieve PID from the device\\\"\\n    exit 1\\nfi\\n\\n# Increment the port number\\nPORT=$CURRENT_PORT\\n\\n# Forward ports for each application one by one\\nfor PID in $PID_LIST; do\\n    # Increment the port number\\n    PORT=$((PORT + 1))\\n\\n    # Execute the hdc fport command\\n    hdc fport tcp:$PORT localabstract:webview_devtools_remote_$PID\\n\\n    # Check if the command executed successfully\\n    if [ $? -ne 0 ]; then\\n        echo \\\"Failed to execute hdc fport command\\\"\\n        exit 1\\n    fi\\ndone\\n\\n# List all forwarded ports\\nhdc fport ls",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]Linux或Mac平台",
        "parent_text": "  [h2]Linux或Mac平台 请复制以下信息建立sh文件，注意chmod以及格式转换，开启调试应用后执行。 本脚本会先删除所有的端口转发，如果有其他的工具(如：DevEco Studio)也在使用端口转发功能，会受到影响。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"linux或mac平台\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213533565__linux%E6%88%96mac%E5%B9%B3%E5%8F%B0\\\"'></a><a name='\\\"linux%E6%88%96mac%E5%B9%B3%E5%8F%B0\\\"'></a> <h4>[h2]Linux或Mac平台</h4> <p>请复制以下信息建立sh文件，注意chmod以及格式转换，开启调试应用后执行。</p> <p>本脚本会先删除所有的端口转发，如果有其他的工具(如：DevEco Studio)也在使用端口转发功能，会受到影响。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/web-debugging-with-devtools.html"
    },
    {
        "id": 267,
        "pre": "import { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\nimport { objectDetection, visionBase } from '@kit.CoreVisionKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private imageSource: image.ImageSource | undefined = undefined;\\n  @State chooseImage: PixelMap | undefined = undefined\\n  @State dataValues: string = ''\\n\\n  build() {\\n    Column() {\\n      Image(this.chooseImage)\\n        .objectFit(ImageFit.Fill)\\n        .height('60%')\\n\\n      Text(this.dataValues)\\n        .copyOption(CopyOptions.LocalDevice)\\n        .height('15%')\\n        .margin(10)\\n        .width('60%')\\n\\n      Button('选择图片')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          // 拉起图库\\n          this.selectImage()\\n        })\\n\\n      Button('开始多目标识别')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(async () => {\\n          if(!this.chooseImage) {\\n            hilog.error(0x0000, 'objectDetectSample', `Failed to choose image. chooseImage: ${this.chooseImage}`);\\n            return;\\n          }\\n          let request: visionBase.Request = {\\n            inputData: { pixelMap: this.chooseImage }\\n          };\\n          let data: objectDetection.ObjectDetectionResponse = await (await objectDetection.ObjectDetector.create()).process(request);\\n          let objectJson = JSON.stringify(data);\\n          hilog.info(0x0000, 'objectDetectSample', `Succeeded in object detection：${objectJson}`);\\n          this.dataValues = objectJson;\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  private async selectImage() {\\n    try {\\n      let uri = await this.openPhoto();\\n      if (uri === undefined) {\\n        hilog.error(0x0000, 'objectDetectSample', \\\"Failed to defined uri.\\\");\\n        return;\\n      }\\n      this.loadImage(uri);\\n    } catch (err) {\\n      hilog.error(0x0000, 'objectDetectSample', `Failed to get photo image uri. code：${err.code}, message：${err.message}`);\\n    }\\n  }\\n\\n  private openPhoto(): Promise<string> {\\n    return new Promise<string>((resolve, reject) => {\\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\\n      photoPicker.select({\\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE, maxSelectNumber: 1\\n      }).then(res => {\\n        resolve(res.photoUris[0]);\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0000, 'objectDetectSample', `Failed to get photo image uri. code：${err.code}, message：${err.message}`);\\n        reject(err);\\n      })\\n    })\\n  }\\n\\n  private loadImage(name: string) {\\n    setTimeout(async () => {\\n      let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\\n      this.imageSource = image.createImageSource(fileSource.fd);\\n      this.chooseImage = await this.imageSource.createPixelMap();\\n    }, 100)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "开发实例点击“选择图片”按钮，触发AI多目标识别功能。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1985432404317\\\"'><a name='\\\"section1985432404317\\\"'></a><a name='\\\"section1985432404317\\\"'></a><h4>开发实例</h4><p>点击“选择图片”按钮，触发AI多目标识别功能。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-object-detection.html"
    },
    {
        "id": 268,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-for-in-array\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-for-in-array.html"
    },
    {
        "id": 269,
        "pre": "declare const array: string[];\\n\\nfor (const value of array) {\\n  console.log(value);\\n}\\n\\narray.forEach((value) => {\\n  console.log(value);\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-for-in-array.html"
    },
    {
        "id": 270,
        "pre": "declare const array: string[];\\n\\nfor (const i in array) {\\n  console.log(array[i]);\\n}\\n\\nfor (const i in array) {\\n  console.log(i, array[i]);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-for-in-array.html"
    },
    {
        "id": 271,
        "pre": "<!-- config.json -->\\n\\\"module\\\": {\\n  \\\"reqPermissions\\\": [{\\n    \\\"name\\\": \\\"ohos.permission.INTERNET\\\"\\n  }],\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "设置button类型",
        "parent_text": "  设置button类型 通过设置button的type属性来选择按钮类型，如定义button为圆形按钮、文本按钮等。 <!-- xxx.hml -->\\n<div class=\\\"container\\\">    \\n  <button class=\\\"circle\\\" type=\\\"circle\\\" >+</button>\\n  <button class=\\\"text\\\" type=\\\"text\\\"> button</button>\\n</div> /* xxx.css */\\n.container {  \\n  width: 100%;\\n  height: 100%;\\n  background-color: #F1F3F5;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.circle {\\n  font-size: 120px;\\n  background-color: blue;\\n  radius: 72px;\\n}\\n.text {\\n  margin-top: 30px;\\n  text-color: white;\\n  font-size: 30px;\\n  font-style: normal;\\n  background-color: blue;\\n  width: 50%;\\n  height: 100px;\\n}       button组件使用的icon图标如果来自云端路径，需要添加网络访问权限 ohos.permission.INTERNET。    如果需要添加ohos.permission.INTERNET权限，则在resources文件夹下的config.json文件里进行权限配置。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"设置button类型\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213533461__%E8%AE%BE%E7%BD%AEbutton%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E8%AE%BE%E7%BD%AEbutton%E7%B1%BB%E5%9E%8B\\\"'></a> <h4>设置button类型</h4> <p>通过设置button的type属性来选择按钮类型，如定义button为圆形按钮、文本按钮等。</p> <pre class='\\\"html\\\"'>&lt;!-- xxx.hml --&gt;\\n&lt;div class=\\\"container\\\"&gt;    \\n  &lt;button class=\\\"circle\\\" type=\\\"circle\\\" &gt;+&lt;/button&gt;\\n  &lt;button class=\\\"text\\\" type=\\\"text\\\"&gt; button&lt;/button&gt;\\n&lt;/div&gt;</pre> <pre class='\\\"css\\\"'>/* xxx.css */\\n.container {  \\n  width: 100%;\\n  height: 100%;\\n  background-color: #F1F3F5;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.circle {\\n  font-size: 120px;\\n  background-color: blue;\\n  radius: 72px;\\n}\\n.text {\\n  margin-top: 30px;\\n  text-color: white;\\n  font-size: 30px;\\n  font-style: normal;\\n  background-color: blue;\\n  width: 50%;\\n  height: 100px;\\n}</pre> <p><span><img originheight='\\\"817\\\"' originwidth='\\\"447\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120437.46349614832978392205551722688320:50001231000000:2800:BAF56C2566755D00C18B30F6EFA21D949C2239D790D8CDDAEB398FAD48275DB7.png\\\"'/></span></p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120437.85447622813772891909598002999854:50001231000000:2800:CA90126F4258CE22DDAED6B86ABC2B79AED66DF26444B912EAFC54F1A9A3DBE5.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ul> <li>button组件使用的icon图标如果来自云端路径，需要添加网络访问权限 ohos.permission.INTERNET。</li> </ul> </div> </div> <p>如果需要添加ohos.permission.INTERNET权限，则在resources文件夹下的config.json文件里进行权限配置。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ui-js-components-button.html"
    },
    {
        "id": 272,
        "pre": "import { fido } from '@kit.OnlineAuthenticationKit';\\nimport { BusinessError } from '@ohos.base';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/onlineauthentication-fido.html"
    },
    {
        "id": 273,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netsend-arkts.html"
    },
    {
        "id": 274,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netsend-arkts.html"
    },
    {
        "id": 275,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netsend-arkts.html"
    },
    {
        "id": 276,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netsend-arkts.html"
    },
    {
        "id": 277,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netsend-arkts.html"
    },
    {
        "id": 278,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netsend-arkts.html"
    },
    {
        "id": 279,
        "pre": "import { asset } from '@kit.AssetStoreKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nfunction stringToArray(str: string): Uint8Array {\\n  let textEncoder = new util.TextEncoder();\\n  return textEncoder.encodeInto(str);\\n}\\n\\nfunction arrayToString(arr: Uint8Array): string {\\n  let textDecoder = util.TextDecoder.create(\\\"utf-8\\\", { ignoreBOM: true });\\n  let str = textDecoder.decodeToString(arr, { stream: false })\\n  return str;\\n}\\n\\nlet query: asset.AssetMap = new Map();\\nquery.set(asset.Tag.ALIAS, stringToArray('demo_alias')); // 指定了关键资产别名，最多查询到一条满足条件的关键资产\\nquery.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ALL);  // 此处表示需要返回关键资产的所有信息，即属性+明文\\ntry {\\n  asset.query(query).then((res: Array<asset.AssetMap>) => {\\n    for (let i = 0; i < res.length; i++) {\\n      // parse the secret.\\n      let secret: Uint8Array = res[i].get(asset.Tag.SECRET) as Uint8Array;\\n      // parse uint8array to string\\n      let secretStr: string = arrayToString(secret);\\n    }\\n  }).catch ((err: BusinessError) => {\\n    console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]查询单条关键资产明文",
        "parent_text": "  [h2]查询单条关键资产明文 查询别名是demo_alias的关键资产明文。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"查询单条关键资产明文\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178053330__%E6%9F%A5%E8%AF%A2%E5%8D%95%E6%9D%A1%E5%85%B3%E9%94%AE%E8%B5%84%E4%BA%A7%E6%98%8E%E6%96%87\\\"'></a><a name='\\\"%E6%9F%A5%E8%AF%A2%E5%8D%95%E6%9D%A1%E5%85%B3%E9%94%AE%E8%B5%84%E4%BA%A7%E6%98%8E%E6%96%87\\\"'></a> <h4>[h2]查询单条关键资产明文</h4> <p>查询别名是demo_alias的关键资产明文。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/asset-js-query.html"
    },
    {
        "id": 280,
        "pre": "import { asset } from '@kit.AssetStoreKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nfunction stringToArray(str: string): Uint8Array {\\n  let textEncoder = new util.TextEncoder();\\n  return textEncoder.encodeInto(str);\\n}\\n\\nlet query: asset.AssetMap = new Map();\\nquery.set(asset.Tag.ALIAS, stringToArray('demo_alias'));       // 指定了关键资产别名，最多查询到一条满足条件的关键资产\\nquery.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ATTRIBUTES); // 此处表示仅返回关键资产属性，不包含关键资产明文\\ntry {\\n  asset.query(query).then((res: Array<asset.AssetMap>) => {\\n    for (let i = 0; i < res.length; i++) {\\n      // parse the attribute.\\n      let accessibility: number = res[i].get(asset.Tag.ACCESSIBILITY) as number;\\n    }\\n  }).catch ((err: BusinessError) => {\\n    console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]查询单条关键资产属性",
        "parent_text": "  [h2]查询单条关键资产属性 查询别名是demo_alias的关键资产属性。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"查询单条关键资产属性\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178053330__%E6%9F%A5%E8%AF%A2%E5%8D%95%E6%9D%A1%E5%85%B3%E9%94%AE%E8%B5%84%E4%BA%A7%E5%B1%9E%E6%80%A7\\\"'></a><a name='\\\"%E6%9F%A5%E8%AF%A2%E5%8D%95%E6%9D%A1%E5%85%B3%E9%94%AE%E8%B5%84%E4%BA%A7%E5%B1%9E%E6%80%A7\\\"'></a> <h4>[h2]查询单条关键资产属性</h4> <p>查询别名是demo_alias的关键资产属性。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/asset-js-query.html"
    },
    {
        "id": 281,
        "pre": "import { asset } from '@kit.AssetStoreKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nfunction stringToArray(str: string): Uint8Array {\\n  let textEncoder = new util.TextEncoder();\\n  return textEncoder.encodeInto(str);\\n}\\n\\nlet query: asset.AssetMap = new Map();\\nquery.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ATTRIBUTES); // 此处表示仅返回关键资产属性，不包含关键资产明文\\nquery.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray('demo_label'));\\nquery.set(asset.Tag.RETURN_OFFSET, 5); // 此处表示查询结果的偏移量，即从满足条件的第5条关键资产开始返回\\nquery.set(asset.Tag.RETURN_LIMIT, 10); // 此处表示查询10条满足条件的关键资产\\nquery.set(asset.Tag.RETURN_ORDERED_BY, asset.Tag.DATA_LABEL_NORMAL_1); // 此处查询结果以DATA_LABEL_NORMAL_1属性内容排序\\ntry {\\n  asset.query(query).then((res: Array<asset.AssetMap>) => {\\n    for (let i = 0; i < res.length; i++) {\\n      // parse the attribute.\\n      let accessibility: number = res[i].get(asset.Tag.ACCESSIBILITY) as number;\\n    }\\n  }).catch ((err: BusinessError) => {\\n    console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]批量查询关键资产属性",
        "parent_text": "  [h2]批量查询关键资产属性 批量查询标签1是demo_label的关键资产属性，从第5条满足条件的结果开始返回，一共返回10条，且返回结果以DATA_LABEL_NORMAL_1属性内容排序。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"批量查询关键资产属性\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178053330__%E6%89%B9%E9%87%8F%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AE%E8%B5%84%E4%BA%A7%E5%B1%9E%E6%80%A7\\\"'></a><a name='\\\"%E6%89%B9%E9%87%8F%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AE%E8%B5%84%E4%BA%A7%E5%B1%9E%E6%80%A7\\\"'></a> <h4>[h2]批量查询关键资产属性</h4> <p>批量查询标签1是demo_label的关键资产属性，从第5条满足条件的结果开始返回，一共返回10条，且返回结果以DATA_LABEL_NORMAL_1属性内容排序。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/asset-js-query.html"
    },
    {
        "id": 282,
        "pre": "{\\n  \\\"modules\\\": [\\n    {\\n      \\\"name\\\": \\\"entry\\\",\\n      \\\"srcPath\\\": \\\"./entry\\\",\\n      \\\"targets\\\": [\\n        {\\n          \\\"name\\\": \\\"default\\\",\\n          \\\"applyToProducts\\\": [  \\n            \\\"default\\\"    // 表示将该模块下的\\\"default\\\" Target打包到\\\"default\\\" Product中\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "modules",
        "parent_text": "  modules modules是一个对象数组，用于描述工程中包含的所有模块，数组长度至少为1。模块配置包括名称、路径和target-product关联配置。    表4 modules          字段名称 类型 是否必选 含义    name 字符串 必选 模块的名称。该名称需与module.json5文件中的module.name保持一致。 在FA模型中，对应的文件为config.json。   srcPath 字符串 必选 模块的源码路径，为模块根目录相对工程根目录的相对路径，允许模块根目录不在当前工程下，详情请参考导入Module。   说明：   当前支持引用其他工程下的HAR和HSP模块。     targets 对象数组 可选 模块的target信息，用于定制多目标构建产物时，配置模块target和应用product之间的关联关系。        表5 targets          字段名称 类型 是否必选 含义    name 字符串 必选 target名称，在各个模块级build-profile.json5中的targets字段定义。HAR模块无需配置。   applyToProducts 字符串数组 可选 target关联的product。HAR模块无需配置。    modules字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1961794812219\\\"'> <a name='\\\"section1961794812219\\\"'></a><a name='\\\"section1961794812219\\\"'></a> <h4>modules</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p829343418107\\\"'>modules是一个对象数组，用于描述工程中包含的所有模块，数组长度至少为1。模块配置包括名称、路径和target-product关联配置。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table9632115919182\\\"'> <caption> <b>表4 </b>modules       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row12633185914187\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p164525416199\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p134525411910\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"15.260000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p164521471918\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"43.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p24525401911\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1763310592182\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1263654310561\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>name</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p527962617284\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.260000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p169956490613\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2063616434563\\\"'>模块的名称。该名称需与module.json5文件中的module.name保持一致。</p> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p629412164134\\\"'>在FA模型中，对应的文件为config.json。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row19633105951814\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1234844619569\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>srcPath</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p112794264282\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.260000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p19995349568\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p634915467563\\\"'>模块的源码路径，为模块根目录相对工程根目录的相对路径，允许模块根目录不在当前工程下，详情请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-add-new-module\\\"'>导入Module</a>。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note1827815145420\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p266733075919\\\"'>当前支持引用其他工程下的HAR和HSP模块。</p> </div> </div></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1463335931812\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p81111325193318\\\"'><a href='\\\"#table1433185416814\\\"'>targets</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p7111122511331\\\"'>对象数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.260000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1099584919616\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1310654992816\\\"'>模块的target信息，用于<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products\\\"'>定制多目标构建产物</a>时，配置模块target和应用product之间的关联关系。</p></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002195699766__table1433185416814\\\"'></a><a name='\\\"table1433185416814\\\"'></a> <table id='\\\"table1433185416814\\\"'> <caption> <b>表5 </b>targets       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1143310542080\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.4.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2484401595\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.4.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"17.41%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p34841401496\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.4.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"15.73%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p174841601695\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.4.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"41.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p104841206912\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row243345411813\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p9111825193318\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>name</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.41%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p122822911333\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.73%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p169951491461\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"41.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p16229029103318\\\"'>target名称，在各个模块级build-profile.json5中的targets字段定义。HAR模块无需配置。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row14337542814\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p6228182915339\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>applyToProducts</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.41%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p162791426182819\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.73%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p79951749163\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"41.86%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p53647412567\\\"'>target关联的product。HAR模块无需配置。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p151013559812\\\"'>modules字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 283,
        "pre": "{\\n  \\\"app\\\": { \\n    \\\"signingConfigs\\\": [\\n      {\\n        \\\"name\\\": \\\"default\\\",\\n        \\\"type\\\": \\\"HarmonyOS\\\",\\n        \\\"material\\\": {  \\n          \\\"certpath\\\": \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.cer\\\",\\n          \\\"storePassword\\\": \\\"******\\\",\\n          \\\"keyAlias\\\": \\\"debugKey\\\",\\n          \\\"keyPassword\\\": \\\"******\\\",\\n          \\\"profile\\\": \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.p7b\\\", \\n          \\\"signAlg\\\": \\\"SHA256withECDSA\\\",\\n          \\\"storeFile\\\": \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.p12\\\"\\n        }\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "signingConfigs",
        "parent_text": "  signingConfigs signingConfigs是一个对象数组，用于配置签名方案，可配置多个。    表6 signingConfigs          字段名称 类型 是否必选 含义    name 字符串 必选 签名方案的名称，不允许为空字符串。   material 对象 必选 签名方案相关材料，如密码、证书等。 通过File > Project Structure... > Project > Signing Configs界面，进行自动签名后，material节点中的各配置项会自动填充。   type 字符串 可选 签名类型：  HarmonyOS OpenHarmony         表7 material          字段名称 类型 是否必选 含义    storePassword 字符串 必选 密钥库密码，以密文形式呈现。   certpath 字符串 必选 调试或发布证书文件地址，文件后缀为.cer。   keyAlias 字符串 必选 密钥别名信息。   keyPassword 字符串 必选 密钥密码，以密文形式呈现。   profile 字符串 必选 调试或发布证书Profile文件地址，文件后缀为.p7b。   signAlg 字符串 必选 密钥库signAlg参数。当前可配置值SHA256withECDSA。   storeFile 字符串 必选 密钥库文件地址，文件后缀为.p12。    signingConfigs字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section153288223224\\\"'> <a name='\\\"section153288223224\\\"'></a><a name='\\\"section153288223224\\\"'></a> <h4>signingConfigs</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p10253125175713\\\"'>signingConfigs是一个对象数组，用于配置签名方案，可配置多个。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table195891924172012\\\"'> <caption> <b>表6 </b>signingConfigs       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row0589122492011\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p144671037132013\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.950000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p34679377206\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.54%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1446720372202\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"42.51%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p15467133718206\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row558917245206\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p12265103152919\\\"'>name</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.950000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p22657313292\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.54%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p15994164910615\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.51%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1277311471916\\\"'>签名方案的名称，不允许为空字符串。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1558952492010\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p17965182462919\\\"'><a href='\\\"#table1269413811158\\\"'>material</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.950000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1896518243293\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.54%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p899494917614\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.51%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1285141512810\\\"'>签名方案相关材料，如密码、证书等。</p> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p139651724192914\\\"'>通过<strong>File &gt; Project Structure... &gt; Project &gt; Signing Configs</strong>界面，进行自动签名后，material节点中的各配置项会自动填充。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row105901024192012\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p61451714102916\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>type</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.950000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1814541402911\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.54%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p49941496611\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.51%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p3145131472912\\\"'>签名类型：</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul361331492417\\\"'> <li id='\\\"li1613514102413\\\"'>HarmonyOS</li> <li id='\\\"li128241182246\\\"'>OpenHarmony</li> </ul></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002195699766__table1269413811158\\\"'></a><a name='\\\"table1269413811158\\\"'></a> <table id='\\\"table1269413811158\\\"'> <caption> <b>表7 </b>material       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row14695580150\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p89568309316\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1720010224211\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1016116175115\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2069516801512\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row2695485159\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p16695138151514\\\"'>storePassword</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p820017224216\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p216114173114\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p146959815154\\\"'>密钥库密码，以密文形式呈现。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row7893108192212\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p3893128152210\\\"'>certpath</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p08931387223\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p916120171912\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2089312892210\\\"'>调试或发布证书文件地址，文件后缀为.cer。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1769588141515\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p26959819156\\\"'>keyAlias</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p82001522112111\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p816131712118\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2695118141512\\\"'>密钥别名信息。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row126951586151\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p11695158131517\\\"'>keyPassword</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1200172222113\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p7161017615\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p3695178181518\\\"'>密钥密码，以密文形式呈现。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1069588141519\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p96960813153\\\"'>profile</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p620011226219\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2161191710118\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p116967813158\\\"'>调试或发布证书Profile文件地址，文件后缀为.p7b。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row106969871511\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1569658181517\\\"'>signAlg</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p102006221214\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1716112176118\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p76961887159\\\"'>密钥库signAlg参数。当前可配置值SHA256withECDSA。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row56963817150\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.47%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p176961184154\\\"'>storeFile</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.920000000000002%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1420017227217\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.74%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p141618171411\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"42.870000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1969618861510\\\"'>密钥库文件地址，文件后缀为.p12。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p656214917517\\\"'>signingConfigs字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 284,
        "pre": "{\\n  \\\"products\\\": [\\n    {\\n      \\\"name\\\": \\\"default\\\",\\n      \\\"signingConfig\\\": \\\"default\\\",\\n      \\\"bundleName\\\": \\\"com.example.myapplication\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n      \\\"arkTSVersion\\\": \\\"1.1\\\",\\n      \\\"bundleType\\\": \\\"app\\\",\\n      \\\"label\\\": \\\"$string:app_name\\\",\\n      \\\"icon\\\": \\\"$media:application_icon\\\",\\n      \\\"versionCode\\\": 1000000,\\n      \\\"versionName\\\": \\\"1.0.0\\\",\\n      \\\"resource\\\": {\\n        \\\"directories\\\": [\\n          \\\"./AppScope/resources\\\"\\n        ]\\n      },\\n      \\\"output\\\": {\\n        \\\"artifactName\\\": \\\"customizedTargetOutputName-1.0.0\\\"\\n      },\\n      \\\"vendor\\\": \\\"customizedProductVendorName\\\",\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "products",
        "parent_text": "  products products是一个对象数组，用于配置产品品类信息，可配置多个，如通用默认版、付费版、免费版等。如需配置多个，相关说明请参见配置多目标产物章节。    表8 products          字段名称 类型 是否必选 含义    name 字符串 必选 产品的名称，必须存在name为\\\"default\\\"的product。   signingConfig 字符串 可选 当前产品品类的签名方案名称，需要在signingConfigs.name中定义。   bundleName 字符串 可选 产品的包名。   buildOption 对象 可选 产品的编译构建配置。   runtimeOS 字符串 可选 产品的运行环境：  HarmonyOS OpenHarmony    arkTSVersion 字符串 可选 ArkTS语法检查工具的版本号：1.0，1.1。 默认为当前ArkTS语法检查工具支持的最新版本。 仅API 11及以上版本工程支持。   compileSdkVersion 字符串/整型数值 可选 标识编译应用/元服务所使用的SDK版本。  运行环境是HarmonyOS时，字段类型为字符串，配置示例：5.0.3(15) 运行环境是OpenHarmony时，字段类型为整型数值，配置示例：15    说明：   从DevEco Studio NEXT Developer Beta1（5.0.3.403）版本开始，该字段不需要显性配置，编译时默认使用配套的SDK版本。如果配置，只能配置为当前DevEco Studio配套的SDK版本，不允许配置为其他SDK版本。     compatibleSdkVersion 字符串/整型数值 必选 标识应用/元服务运行所需兼容的最低SDK版本，应用/元服务不能安装在低于该版本的设备。   targetSdkVersion 字符串/整型数值 可选 标识应用/元服务运行所需目标SDK版本，是系统提供的前向兼容手段。如果新SDK版本中API行为发生变更，将应用/元服务安装到新系统后，可通过该字段提供向前兼容手段，在新系统版本保持老的API行为。如未配置，默认与compileSdkVersion保持一致。   bundleType 字符串 可选 包的类型：  app：应用 atomicService：元服务 shared：共享包    label 字符串 可选 应用/元服务名称。   说明：   配置products中的label、icon、versionCode、versionName、resource字段后，编译构建时将根据此处的配置替换app.json5中的相关配置，常用于应用和元服务可分可合构建打包场景。     icon 字符串 可选 应用/元服务图标。   versionCode 整型数值 可选 版本号。   versionName 字符串 可选 版本名称。   resource 对象 可选 名称和图标对应的资源所在目录。   output 对象 可选 定制产品生成的应用包的配置。   vendor 字符串 可选 供应商。        表9 resource          字段名称 类型 是否必选 含义    directories 字符串数组 必选 资源地址路径。        表10 output          字段名称 类型 是否必选 含义    artifactName 字符串 必选 自定义产品生成的应用包名称，可由数字、英文字母、中划线、下划线和英文句号（.）组成，支持输入版本号。    products字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section45865492619\\\"'> <a name='\\\"section45865492619\\\"'></a><a name='\\\"section45865492619\\\"'></a> <h4>products</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p03378655313\\\"'>products是一个对象数组，用于配置产品品类信息，可配置多个，如通用默认版、付费版、免费版等。如需配置多个，相关说明请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products\\\"'>配置多目标产物</a>章节。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table7805125172720\\\"'> <caption> <b>表8 </b>products       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1180510258275\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p13300115672912\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p130015682912\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1830055602910\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p7300175612291\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row580514252275\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p6416203320309\\\"'>name</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2879154172910\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1499454917615\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1887995462910\\\"'>产品的名称，必须存在name为\\\"default\\\"的product。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1580622542711\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p4416193310302\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>signingConfig</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p18129659102911\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p399419493618\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1112995913293\\\"'>当前产品品类的签名方案名称，需要在<a href='\\\"#section153288223224\\\"'>signingConfigs.name</a>中定义。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1480602562710\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p104161533183018\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>bundleName</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1790120643018\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1599411491263\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1290113612305\\\"'>产品的包名。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row980619256273\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1141753303015\\\"'><a href='\\\"#section14222051575\\\"'>buildOption</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p6901365304\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p12994204911617\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p16901146203011\\\"'>产品的编译构建配置。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1280662515278\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p124174330307\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>runtimeOS</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p17253103302\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1799454912616\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p17725161015308\\\"'>产品的运行环境：</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul1624819482455\\\"'> <li id='\\\"li324864814520\\\"'>HarmonyOS</li> <li id='\\\"li1024824854510\\\"'>OpenHarmony</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row980682517271\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1620324945510\\\"'>arkTSVersion</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p32034497552\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p3994194912619\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p20381194093111\\\"'>ArkTS语法检查工具的版本号：1.0，1.1。</p> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p1630394215352\\\"'>默认为当前ArkTS语法检查工具支持的最新版本。</p> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p420314995518\\\"'>仅API 11及以上版本工程支持。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row13807112512276\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p941763353015\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>compileSdkVersion</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1272691023013\\\"'>字符串/整型数值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p699420493611\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p572691012303\\\"'>标识编译应用/元服务所使用的SDK版本。</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul107594282112\\\"'> <li id='\\\"li18759128410\\\"'>运行环境是HarmonyOS时，字段类型为字符串，配置示例：<span id='\\\"ZH-CN_TOPIC_0000002195699766__ph20771055195015\\\"'>5.0.3(15)</span></li> <li id='\\\"li17598287116\\\"'>运行环境是OpenHarmony时，字段类型为整型数值，配置示例：15</li> </ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note168448523323\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p1784495283217\\\"'>从DevEco Studio NEXT Developer Beta1（5.0.3.403）版本开始，该字段不需要显性配置，编译时默认使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-releases/deveco-studio-new-features\\\"' target='\\\"_blank\\\"'>配套的SDK版本</a>。如果配置，只能配置为当前DevEco Studio配套的SDK版本，不允许配置为其他SDK版本。</p> </div> </div></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1559123592713\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1841743363018\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>compatibleSdkVersion</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p572617102304\\\"'>字符串/整型数值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1899413494613\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p5726191018303\\\"'>标识应用/元服务运行所需兼容的最低SDK版本，应用/元服务不能安装在低于该版本的设备。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row12601235112713\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p741723317305\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>targetSdkVersion</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p117261610173016\\\"'>字符串/整型数值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2099416491864\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p12726141016309\\\"'>标识应用/元服务运行所需目标SDK版本，是系统提供的前向兼容手段。如果新SDK版本中API行为发生变更，将应用/元服务安装到新系统后，可通过该字段提供向前兼容手段，在新系统版本保持老的API行为。如未配置，默认与<span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>compileSdkVersion</span>保持一致。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row5606355277\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1741783316303\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>bundleType</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p52612283014\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p199417491565\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p142610223309\\\"'>包的类型：</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul147411977411\\\"'> <li id='\\\"li10741197124119\\\"'>app：应用</li> <li id='\\\"li12589518114118\\\"'>atomicService：元服务</li> <li id='\\\"li18192517455\\\"'>shared：共享包</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1160635142718\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p114174334309\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>label</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p82622210300\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p199416497610\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p826102215304\\\"'>应用/元服务名称。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note17251105394\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p172511257919\\\"'>配置products中的label、icon、versionCode、versionName、resource字段后，编译构建时将根据此处的配置替换app.json5中的相关配置，常用于应用和元服务可分可合构建打包场景。</p> </div> </div></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row26053513273\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2417833193010\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>icon</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p42612212307\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p499434917613\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p727132216303\\\"'>应用/元服务图标。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row86113582717\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p741773393010\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>versionCode</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1088725231814\\\"'>整型数值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1799414910618\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1827162213019\\\"'>版本号。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row161163512712\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1441713333302\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>versionName</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p102722293010\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1799417491568\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p027152211306\\\"'>版本名称。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row166123542712\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p74175332309\\\"'><a href='\\\"#table49010413236\\\"'>resource</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1327142263018\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1499414491168\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p142752214302\\\"'>名称和图标对应的资源所在目录。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1684715448277\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p7736612113212\\\"'><a href='\\\"#table41925113333\\\"'>output</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p4736412173217\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1099415499610\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p17362128322\\\"'>定制产品生成的应用包的配置。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1784874412279\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p7362510171711\\\"'>vendor</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.2%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p236211019179\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p236212102179\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.529999999999994%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p73621910101716\\\"'>供应商。</p></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002195699766__table49010413236\\\"'></a><a name='\\\"table49010413236\\\"'></a> <table id='\\\"table49010413236\\\"'> <caption> <b>表9 </b>resource       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row16901141233\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.4.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"16.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1643316579586\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.4.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p7433155710588\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.4.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"14.729999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p14332057195817\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.4.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"53.949999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p543385705814\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row119194142310\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p261413172313\\\"'>directories</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.07%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p451713122317\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.729999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p18174549151\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"53.949999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p13516132231\\\"'>资源地址路径。</p></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002195699766__table41925113333\\\"'></a><a name='\\\"table41925113333\\\"'></a> <table id='\\\"table41925113333\\\"'> <caption> <b>表10 </b>output       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1019211113310\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.5.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"16.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1562114116594\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.5.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"15.6%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2621101185913\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.5.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"14.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1862114110599\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.5.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"53.61%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p146211110594\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row111935115335\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1719313113333\\\"'>artifactName</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"15.6%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p101936119339\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1477104313511\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"53.61%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1719317111334\\\"'>自定义产品生成的应用包名称，可由数字、英文字母、中划线、下划线和英文句号（.）组成，支持输入版本号。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p164726550141\\\"'>products字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 285,
        "pre": "\\\"buildOption\\\": {\\n  \\\"packOptions\\\": {\\n    \\\"buildAppSkipSignHap\\\": true\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]packOptions",
        "parent_text": "  [h2]packOptions packOptions是打包相关配置项。    表12 packOptions          字段名称 类型 是否必选 含义    buildAppSkipSignHap 布尔值 可选 是否跳过生成签名HAP：  true：跳过，即不生成签名HAP。 false（缺省默认值）：不跳过，即生成签名HAP。  编译构建APP时，无需生成签名HAP，可将此参数修改为true，从而提升编译构建性能。     ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section03812484215\\\"'> <a name='\\\"section03812484215\\\"'></a><a name='\\\"section03812484215\\\"'></a> <h4>[h2]packOptions</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p118513935914\\\"'>packOptions是打包相关配置项。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table177223261145\\\"'> <caption> <b>表12 </b>packOptions       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row972218269410\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"24.97%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p117520546412\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"10.879999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p975215414413\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"14.399999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p19752195414416\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"49.75%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p27521154444\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row8722112611416\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.97%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p18477113320356\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>buildAppSkipSignHap</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.879999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p214311463411\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.399999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2012920311717\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.75%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p11362184913257\\\"'>是否跳过生成签名HAP：</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul13708191511711\\\"'> <li id='\\\"li070881591719\\\"'>true：跳过，即不生成签名HAP。</li> <li id='\\\"li1123233451716\\\"'>false（缺省默认值）：不跳过，即生成签名HAP。</li> </ul> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p4595103711180\\\"'>编译构建APP时，无需生成签名HAP，可将此参数修改为true，从而提升编译构建性能。</p></td> </tr> </tbody></table> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 286,
        "pre": "\\\"buildOption\\\": {\\n  \\\"sourceOption\\\": {\\n    \\\"workers\\\": [\\n      \\\"./src/main/ets/common/constants/CommonConstants.ets\\\"\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]sourceOption",
        "parent_text": "  [h2]sourceOption sourceOption是源码相关配置，使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理。    表13 sourceOption          字段名称 类型 是否必选 含义    workers 字符串数组 可选 指定使用node.js工作器的JS/TS源代码，源代码在构建过程中单独处理。    sourceOption字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section15753419515\\\"'> <a name='\\\"section15753419515\\\"'></a><a name='\\\"section15753419515\\\"'></a> <h4>[h2]sourceOption</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p61863331616\\\"'>sourceOption是源码相关配置，使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table101301489227\\\"'> <caption> <b>表13 </b>sourceOption       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1813017810223\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.9.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p430715155223\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.9.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.35%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p6307171517227\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.9.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"14.02%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p183075154226\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.9.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"46.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p53071915132215\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row14131486220\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p413198122218\\\"'><span rgb(48,48,48);\\\"=\"\" style='\\\"color:'>workers</span></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.35%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p15363149172511\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.02%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p41294311713\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"46.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p3363184911250\\\"'>指定使用node.js工作器的JS/TS源代码，源代码在构建过程中单独处理。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p20110174365817\\\"'>sourceOption字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 287,
        "pre": "# 编译生成的BuildProfile文件\\nexport const DEBUG = false;\\nexport const VERSION_CODE = 100;\\n# 开发者自定义的ets文件\\nimport { DEBUG } from 'BuildProfile';\\nimport { VERSION_CODE } from 'BuildProfile';\\nif (DEBUG)\\n  {XXX} // 该分支会被裁剪掉\\nelse\\n  {XXX}\\nif (VERSION_CODE){XXX} // 该语法发生了类型转换，不支持代码裁剪。\\nif (VERSION_CODE === 100){XXX} // 若需要裁剪代码，使用该方式，显式指定判断条件为boolean类型。",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "是否启用代码分支裁剪，减少编译产物大小，开启后，在release编译模式下，不会被执行到的代码分支会被裁剪掉，示例如下：   true：启用（将导致使用\\\"ApplyChanges\\\"功能时，对const声明的常量的值进行的修改可能不生效）。 false（缺省默认值）：不启用。    说明：    仅支持API 11及以上的Stage模型。 HAR模块仅字节码HAR配置生效，非字节码HAR配置不生效。 仅支持const声明的bool类型常量和const声明的string/number类型常量的判断表达式。 不支持间接导入，例如A文件中定义const变量A1，B文件导入A1，导出B1，ets导入B1进行判断，无法进行裁剪。   ",
        "import_module": null,
        "parent": "<td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.79%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p413225617\\\"'>是否启用代码分支裁剪，减少编译产物大小，开启后，在release编译模式下，不会被执行到的代码分支会被裁剪掉，示例如下：</p>  <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul1231829568\\\"'> <li id='\\\"li337275617\\\"'>true：启用（将导致使用\\\"ApplyChanges\\\"功能时，对const声明的常量的值进行的修改可能不生效）。</li> <li id='\\\"li131129567\\\"'>false（缺省默认值）：不启用。</li> </ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note23926569\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul5316214562\\\"'> <li id='\\\"li20318219563\\\"'>仅支持API 11及以上的Stage模型。</li> <li id='\\\"li18646559902\\\"'>HAR模块仅字节码HAR配置生效，非字节码HAR配置不生效。</li> <li id='\\\"li1138275613\\\"'>仅支持const声明的bool类型常量和const声明的string/number类型常量的判断表达式。</li> <li id='\\\"li1931214567\\\"'>不支持间接导入，例如A文件中定义const变量A1，B文件导入A1，导出B1，ets导入B1进行判断，无法进行裁剪。</li> </ul> </div> </div></td>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 288,
        "pre": "\\\"buildOption\\\": {\\n  \\\"strictMode\\\": {\\n    \\\"noExternalImportByPath\\\": true,\\n    \\\"useNormalizedOHMUrl\\\": true,\\n    \\\"caseSensitiveCheck\\\": true,\\n    \\\"duplicateDependencyCheck\\\": true,\\n    \\\"harLocalDependencyCheck\\\": true,\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]strictMode",
        "parent_text": "  [h2]strictMode strictMode用于定义严格模式。    表17 strictMode          字段名称 类型 是否必选 含义    noExternalImportByPath 布尔值 可选 是否严格检查绝对路径导入方式和相对路径跨模块导入方式。  true：严格检查。 false：不严格检查。    说明：   从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，当工程级build-profile.json5中useNormalizedOHMUrl配置为true时，noExternalImportByPath缺省默认值为true；当useNormalizedOHMUrl配置为false时，noExternalImportByPath缺省默认值为false。     useNormalizedOHMUrl 布尔值 可选 是否使用标准化的OHMUrl（OHMUrl的定义参考以下说明）格式，标准化的OHMUrl统一了原有OHMUrl的格式。使用集成态HSP和字节码HAR需使用标准化的OHMUrl格式。  true：使用标准化的OHMUrl格式。 false（缺省默认值）：不使用标准化的OHMUrl格式。    说明：    从API 12开始支持。 一个ets文件在编译后会成为安装包的一部分，这个ets文件对应的字节码称为一个字节码段，OHMUrl是用来定位一个字节码段的标识。 若工程引用了HAR/HSP，需确保工程的useNormalizedOHMUrl配置和HAR/HSP的useNormalizedOHMUrl配置保持一致，同时配置为true或false。 从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，当useNormalizedOHMUrl设置为true时，不允许通过相对路径跨模块或绝对路径导入文件，oh-package.json5中依赖的包使用的别名需要和依赖包的oh-package.json5的name保持一致，具体的适配指导请参考变更说明。      caseSensitiveCheck 布尔值 可选 导入文件是否严格校验大小写，支持相对路径和软链接。  true：严格校验。 false（缺省默认值）：不严格校验。    duplicateDependencyCheck 布尔值 可选 是否校验本地HSP模块有无依赖相同的HAR。仅在Build App(s)起效。  true：如果本地HSP模块依赖了相同的HAR（包括本地/远程、直接/间接），则编译报错。（注意：当依赖链中存在远程HSP，则该远程HSP及其依赖链不参与校验）。 false（默认缺省值）：不启用校验。    harLocalDependencyCheck 布尔值 可选 是否对HAR产物启用本地依赖校验。  true：如果oh-package.json中的dependencies、dynamicDependencies存在本地依赖，则编译报错。 false（默认缺省值）：不启用校验。    说明：   除HAR模块外，HSP模块编译时也会生成HAR产物，该配置同样生效。      strictMode字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section13181758123312\\\"'> <a name='\\\"section13181758123312\\\"'></a><a name='\\\"section13181758123312\\\"'></a> <h4>[h2]strictMode</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p68071029173615\\\"'>strictMode用于定义严格模式。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table34921510340\\\"'> <caption> <b>表17 </b>strictMode       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1549161513419\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1374693717344\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"12.72%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p16746173723413\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p107461437133420\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"49.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p12746637153410\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row165071512341\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p172213311483\\\"'>noExternalImportByPath</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.72%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1040913169476\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1140912164472\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p64093167474\\\"'>是否严格检查绝对路径导入方式和相对路径跨模块导入方式。</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul1922641475519\\\"'> <li id='\\\"li132264141554\\\"'>true：严格检查。</li> <li id='\\\"li142271714115518\\\"'>false：不严格检查。</li> </ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note48611224145613\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p19861112465612\\\"'>从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，当工程级build-profile.json5中useNormalizedOHMUrl配置为true时，noExternalImportByPath缺省默认值为true；当useNormalizedOHMUrl配置为false时，noExternalImportByPath缺省默认值为false。</p> </div> </div></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row15014159347\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p18452182495817\\\"'>useNormalizedOHMUrl</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.72%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p5101132005810\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1310132010589\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2488105035918\\\"'>是否使用标准化的OHMUrl（OHMUrl的定义参考以下说明）格式，标准化的OHMUrl统一了原有OHMUrl的格式。使用集成态HSP和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-har#section16598338112415\\\"'>字节码HAR</a>需使用标准化的OHMUrl格式。</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul1489650155911\\\"'> <li id='\\\"li19490135045913\\\"'>true：使用标准化的OHMUrl格式。</li> <li id='\\\"li184901650125915\\\"'>false（缺省默认值）：不使用标准化的OHMUrl格式。</li> </ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note189161028406\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul691213215417\\\"'> <li id='\\\"li1325912344411\\\"'>从API 12开始支持。</li> <li id='\\\"li98801515442\\\"'>一个ets文件在编译后会成为安装包的一部分，这个ets文件对应的字节码称为一个字节码段，OHMUrl是用来定位一个字节码段的标识。</li> <li id='\\\"li164837443135\\\"'>若工程引用了HAR/HSP，需确保工程的useNormalizedOHMUrl配置和HAR/HSP的useNormalizedOHMUrl配置保持一致，同时配置为true或false。</li> <li id='\\\"li44834443135\\\"'>从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，当useNormalizedOHMUrl设置为true时，不允许通过相对路径跨模块或绝对路径导入文件，oh-package.json5中依赖的包使用的别名需要和依赖包的oh-package.json5的name保持一致，具体的适配指导请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-releases-V5/ide-changelogs-nb1-V5#section1130320228353\\\"' target='\\\"_blank\\\"'>变更说明</a>。</li> </ul> </div> </div></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row10501415193418\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p783414014468\\\"'>caseSensitiveCheck</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.72%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p13717114416455\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p12717184420454\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p13717944184519\\\"'>导入文件是否严格校验大小写，支持相对路径和软链接。</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul8782184934711\\\"'> <li id='\\\"li77825493471\\\"'>true：严格校验。</li> <li id='\\\"li206653134711\\\"'>false（缺省默认值）：不严格校验。</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row950101514346\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p51996112411\\\"'>duplicateDependencyCheck</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.72%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p18532849112317\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1153244962317\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p0532114992313\\\"'>是否校验本地HSP模块有无依赖相同的HAR。仅在Build App(s)起效。</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul1825972518298\\\"'> <li id='\\\"li62591625152915\\\"'>true：如果本地HSP模块依赖了相同的HAR（包括本地/远程、直接/间接），则编译报错。（注意：当依赖链中存在远程HSP，则该远程HSP及其依赖链不参与校验）。</li> <li id='\\\"li1716142612311\\\"'>false（默认缺省值）：不启用校验。</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row3506154349\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p153731771715\\\"'>harLocalDependencyCheck</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.72%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p888995081615\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p19889350171615\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.28%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p13889550141618\\\"'>是否对HAR产物启用本地依赖校验。</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul195613841713\\\"'> <li id='\\\"li5956638141718\\\"'>true：如果oh-package.json中的dependencies、dynamicDependencies存在本地依赖，则编译报错。</li> <li id='\\\"li0696104101719\\\"'>false（默认缺省值）：不启用校验。</li> </ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note1582030185710\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p18206025715\\\"'>除HAR模块外，HSP模块编译时也会生成HAR产物，该配置同样生效。</p> </div> </div></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p7913129124210\\\"'>strictMode字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 289,
        "pre": "\\\"buildOption\\\": {\\n  \\\"removePermissions\\\": [\\n    {\\n      \\\"name\\\": \\\"ohos.permission.ABILITY_BACKGROUND_COMMUNICATION\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"ohos.permission.ACCELEROMETER\\\"\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]removePermissions",
        "parent_text": "  [h2]removePermissions removePermissions是一个对象数组，用于编译HAP/HSP模块时，指定需要删除的依赖包中的冗余权限，模块本身的权限不会被删除。    表18 removePermissions          字段名称 类型 是否必选 含义    name 字符串 必选 待删除的权限名称，需要包含在依赖包的module.json的requestPermissions中。    removePermissions字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section99591415322\\\"'> <a name='\\\"section99591415322\\\"'></a><a name='\\\"section99591415322\\\"'></a> <h4>[h2]removePermissions</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p17487171493316\\\"'>removePermissions是一个对象数组，用于<span id='\\\"ZH-CN_TOPIC_0000002195699766__ph173701116123316\\\"'>编译<span id='\\\"ZH-CN_TOPIC_0000002195699766__ph5401154313230\\\"'><span id='\\\"ZH-CN_TOPIC_0000002195699766__ph2401154302312\\\"'>HAP/HSP</span><span id='\\\"ZH-CN_TOPIC_0000002195699766__ph940144382312\\\"'>模块</span></span>时，指定需要删除<span id='\\\"ZH-CN_TOPIC_0000002195699766__ph737013161335\\\"'>的</span>依赖包中的冗余权限，</span><span id='\\\"ZH-CN_TOPIC_0000002195699766__ph153701116113312\\\"'><span id='\\\"ZH-CN_TOPIC_0000002195699766__ph13701516123311\\\"'>模块本身的权限不会被删除</span></span><span id='\\\"ZH-CN_TOPIC_0000002195699766__ph237081663310\\\"'>。</span></p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table179251023164419\\\"'> <caption> <b>表18 </b>removePermissions       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row192510238443\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p197142375449\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"17.21%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p7714637144417\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"17.76%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p137141237204414\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"40.03%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2714437184414\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row3925623114410\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p12925223154413\\\"'>name</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.21%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1564914871910\\\"'>字符串</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.76%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p86494814191\\\"'>必选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.03%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p164913816195\\\"'>待删除的权限名称，需要包含在依赖包的module.json的requestPermissions中。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p450933914316\\\"'>removePermissions字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 290,
        "pre": "\\\"buildOption\\\": {\\n  \\\"resOptions\\\": {\\n    \\\"copyCodeResource\\\": {\\n      \\\"enable\\\": true,\\n      \\\"excludes\\\": ['./entry/src/main/ets/component/big_picture.png', '**/*.yml', '**/subDir/**'],\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "resOptions",
        "parent_text": "  resOptions resOptions是资源编译配置项。    表19 resOptions          字段名称 类型 是否必选 含义    compression 对象 可选 对工程预置图片资源进行纹理压缩的编译配置参数。   copyCodeResource 对象 可选 对模块的src/main/ets目录下的资源文件（非源码文件）拷贝的编译配置参数。   说明：   该字段对不开启混淆的源码HAR不生效。          表20 copyCodeResource          字段名称 类型 是否必选 含义    enable 布尔值 可选 是否将ets目录下的资源文件打包到产物中。  true（缺省默认值）：打包。 false：不打包。    excludes 字符串数组 可选 根据glob语法排除匹配到的文件，匹配到的文件不会被打包到产物中。当enable配置为false时excludes不生效。    copyCodeResource字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section15967535577\\\"'> <a name='\\\"section15967535577\\\"'></a><a name='\\\"section15967535577\\\"'></a> <h4>resOptions</h4> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p1415535755\\\"'>resOptions是资源编译配置项。</p> <div class='\\\"tablenoborder\\\"'> <table id='\\\"table4607649151111\\\"'> <caption> <b>表19 </b>resOptions       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row460744951120\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p18319637161211\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"12.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p103191637171212\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"13.389999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p3319537101215\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"48.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p14319337141215\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row1960814911117\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p12287842202611\\\"'><a href='\\\"#section2095319147103\\\"'>compression</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1972362618\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.389999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p15915234268\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"48.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1797233267\\\"'>对工程预置图片资源进行纹理压缩的编译配置参数。</p></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row10608154981116\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1766816481933\\\"'><a href='\\\"#table65731476505\\\"'>copyCodeResource</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p206681348734\\\"'>对象</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.389999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p146683483315\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"48.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1166894811310\\\"'>对模块的src/main/ets目录下的资源文件（非源码文件）拷贝的编译配置参数。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002195699766__note67264713111\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p67261276119\\\"'>该字段对<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-har#section197792874110\\\"'>不开启混淆的源码HAR</a>不生效。</p> </div> </div></td> </tr> </tbody></table> </div> <div class='\\\"tablenoborder\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002195699766__table65731476505\\\"'></a><a name='\\\"table65731476505\\\"'></a> <table id='\\\"table65731476505\\\"'> <caption> <b>表20 </b>copyCodeResource       </caption> <thead> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row12573204719508\\\"'> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.4.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p4381125419502\\\"'>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.4.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"17.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p1238145485018\\\"'>类型</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.4.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.009999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p738215418501\\\"'>是否必选</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.4.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"41.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p838216547501\\\"'>含义</p></th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002195699766__row14574147125013\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p811953142\\\"'>enable</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p131194319414\\\"'>布尔值</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.009999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p61191436418\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"41.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p151193310411\\\"'>是否将ets目录下的资源文件打包到产物中。</p> <ul id='\\\"ZH-CN_TOPIC_0000002195699766__ul10883167175112\\\"'> <li id='\\\"li4883272516\\\"'>true（缺省默认值）：打包。</li> <li id='\\\"li208833712512\\\"'>false：不打包。</li> </ul></td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002195699766__row45741647155016\\\"'> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p201191631345\\\"'>excludes</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"17.36%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p2012020317419\\\"'>字符串数组</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.009999999999998%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p41201438415\\\"'>可选</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"41.63%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002195699766__p181201531040\\\"'>根据glob语法排除匹配到的文件，匹配到的文件不会被打包到产物中。当enable配置为false时excludes不生效。</p></td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002195699766__p9969105319542\\\"'>copyCodeResource字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-profile-app.html"
    },
    {
        "id": 291,
        "pre": "import { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { SignUtil } from './SignUtil';\\n\\nasync function updateEnterpriseCertificate() {\\n  // 替换成企业的新证书\\n  const certificate =\\n    \\\"-----BEGIN CERTIFICATE-----\\\\n\\\" +\\n      \\\"****************************************************************\\\\n\\\" +\\n      \\\"*******\\\\n\\\" +\\n      \\\"-----END CERTIFICATE-----\\\\n\\\";\\n\\n  const challenge: Uint8Array = await recoveryKey.getAuthChallenge();\\n  const buffer = new ArrayBuffer(4);\\n  const view = new DataView(buffer);\\n  view.setUint32(0, 0x98010000);\\n  const command: Uint8Array = new Uint8Array(buffer);\\n  // 替换成企业的新公钥\\n  const ecPubNewStrBase64 =\\n    \\\"****************************************************************\\\\n\\\";\\n  let publicKey: Uint8Array = base64ToStringUint8Array(ecPubNewStrBase64);\\n  publicKey = publicKey.subarray(publicKey.length - 65, publicKey.length);\\n  let signData: Uint8Array = new Uint8Array(challenge.length + command.length + publicKey.length);\\n  signData.set(challenge, 0);\\n  signData.set(command, challenge.length);\\n  signData.set(publicKey, challenge.length + command.length);\\n  let signature: Uint8Array = await SignUtil.sign(signData);\\n\\n  const cert: Uint8Array = stringToUint8(certificate!);\\n  recoveryKey.updateEnterpriseCertificate(signature, cert).then((ret: number) => {\\n    console.info(`Succeeded in updating certificate.`);\\n  }).catch((error: BusinessError) => {\\n    console.error(`Failed to update certificate. Code: ${error.code}, message: ${error.message}.`);\\n  });\\n}\\n\\nfunction stringToUint8(str: string): Uint8Array {\\n  let result: Uint8Array = new Uint8Array([]);\\n  try {\\n    result = new util.TextEncoder('utf-8').encodeInto(str);\\n  } catch (error) {\\n    console.error(`Failed to encode to uint8. Code: ${error.code}, message: ${error.message}`);\\n  }\\n  return result;\\n}\\n\\nfunction base64ToStringUint8Array(base64String: string): Uint8Array {\\n  let base64 = new util.Base64Helper();\\n  let uint8Array = base64.decodeSync(base64String, util.Type.BASIC);\\n  return uint8Array;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      在更新企业公钥证书场景下，先获取挑战值，将下面方法中的certificate和ecPubNewStrBase64替换为企业的新证书和新公钥，然后调用自定义工具类SignUtil的sign签名方法生成挑战值的签名。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      在更新企业公钥证书场景下，先获取挑战值，将下面方法中的certificate和ecPubNewStrBase64替换为企业的新证书和新公钥，然后调用自定义工具类SignUtil的sign签名方法生成挑战值的签名。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/enterprise-recoverykey-signature.html"
    },
    {
        "id": 292,
        "pre": "import { BusinessError, osAccount } from '@kit.BasicServicesKit';\\nimport { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { SignUtil } from './SignUtil';\\n\\nasync function deleteEnterpriseRecoveryKey() {\\n  const challenge: Uint8Array = await recoveryKey.getAuthChallenge();\\n  let signResult = await SignUtil.sign(challenge);\\n  let accountManager: osAccount.AccountManager = osAccount.getAccountManager();\\n  let userId = await accountManager.getOsAccountLocalId();\\n  recoveryKey.deleteEnterpriseRecoveryKey(userId, signResult).then((ret: number) => {\\n    console.info(`Succeeded in deleting enterprise recovery key.`);\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to delete enterprise recovery key. Code: ${err.code}, message: ${err.message}.`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "生成挑战值的签名（删除企业恢复密钥）",
        "parent_text": "  生成挑战值的签名（删除企业恢复密钥） 在删除企业恢复密钥场景下，先获取挑战，然后调用自定义工具类SignUtil的sign签名方法生成挑战值的签名。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1641111819424\\\"'> <a name='\\\"section1641111819424\\\"'></a><a name='\\\"section1641111819424\\\"'></a> <h4>生成挑战值的签名（删除企业恢复密钥）</h4> <p>在删除企业恢复密钥场景下，先获取挑战，然后调用自定义工具类SignUtil的sign签名方法生成挑战值的签名。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/enterprise-recoverykey-signature.html"
    },
    {
        "id": 293,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-cycle\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section89692598167\\\"'><a name='\\\"section89692598167\\\"'></a><a name='\\\"section89692598167\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-cycle.html"
    },
    {
        "id": 294,
        "pre": "// foo.ets\\nimport {} from './bar';\\n\\n// bar.ets\\nimport {} from './index';",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section66566920185\\\"'><a name='\\\"section66566920185\\\"'></a><a name='\\\"section66566920185\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-cycle.html"
    },
    {
        "id": 295,
        "pre": "// foo.ets\\nimport {} from './bar';\\n\\n// bar.ets\\nimport {} from './foo';",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例  反例中foo.ets文件依赖了bar.ets文件，bar.ets文件同时依赖了foo.ets文件，造成了循环依赖。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10218949141914\\\"'><a name='\\\"section10218949141914\\\"'></a><a name='\\\"section10218949141914\\\"'></a><h4>反例</h4> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808228__note1895895122816\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180622.61504259535759044971869885474542:50001231000000:2800:928EC4BFF45F65346A233DB00108A66DCEDE66D67D0F11F89A87C95E1620586A.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808228__p49581055281\\\"'>反例中foo.ets文件依赖了bar.ets文件，bar.ets文件同时依赖了foo.ets文件，造成了循环依赖。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-cycle.html"
    },
    {
        "id": 296,
        "pre": "\\\"requestPermissions\\\": [\\n  {\\n    \\\"name\\\":\\\"ohos.permission.INTERNET\\\"\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "应用沙箱视图",
        "parent_text": "应用沙箱视图当需要以沙箱视图查看应用的文件结构时，需在module.json5文件内配置ohos.permission.INTERNET开启网络权限。   应用沙箱视图会展示所有debug类型的应用，按照应用的沙箱文件路径显示应用的沙箱文件结构，支持数据目录的文件或文件夹新增，删除，保存和上传等操作。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1689165819228\\\"'><a name='\\\"section1689165819228\\\"'></a><a name='\\\"section1689165819228\\\"'></a><h4>应用沙箱视图</h4><p id='\\\"ZH-CN_TOPIC_0000002202174661__zh-cn_topic_0000001558037338_p445172153419\\\"'>当需要以沙箱视图查看应用的文件结构时，需在module.json5文件内配置ohos.permission.INTERNET开启网络权限。</p>  <p id='\\\"ZH-CN_TOPIC_0000002202174661__zh-cn_topic_0000001558037338_p53611156341\\\"'><span><img originheight='\\\"865\\\"' originwidth='\\\"1063\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180545.87366375584011836518411159474919:50001231000000:2800:ACC05E1C51C0C40FD174AB34145E3426C266140BAE7DD398569DFECC86E1A1D4.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202174661__zh-cn_topic_0000001558037338_p1445203132315\\\"'>应用沙箱视图会展示所有debug类型的应用，按照应用的沙箱文件路径显示应用的沙箱文件结构，支持数据目录的文件或文件夹新增，删除，保存和上传等操作。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174661__zh-cn_topic_0000001558037338_p322123815235\\\"'><span><img originheight='\\\"529\\\"' originwidth='\\\"755\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180545.35349413456793271540172516108935:50001231000000:2800:BD3D87B0E18D1EF9E8EFD2AB8BBB930879F22A1B038739A1AA4B5C064F072585.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-device-file-explorer.html"
    },
    {
        "id": 297,
        "pre": "\\\"requestPermissions\\\": [\\n  {\\\"name\\\":  \\\"ohos.permission.INTERNET\\\"}\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程主模块下的module.json5文件下增加网络权限。 ",
        "import_module": null,
        "parent": "<li id='\\\"zh-cn_topic_0000001558037338_li10917204914614\\\"'>在工程主模块下的module.json5文件下增加网络权限。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-device-file-explorer.html"
    },
    {
        "id": 298,
        "pre": "# 打开.bashrc文件\\nvim ~/.bashrc\\n# 在文件最后添加cmake路径，该路径是自己的放置文件的路径，之后保存退出\\nexport PATH=${实际SDK路径}/native/build-tools/cmake/bin:$PATH\\n# 在命令行执行source ~/.bashrc使环境变量生效\\nsource ~/.bashrc",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "配置 linux 系统下环境变量  ",
        "import_module": null,
        "parent": "<li><p>配置 linux 系统下环境变量</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/build-with-ndk-cmake.html"
    },
    {
        "id": 299,
        "pre": "{\\n  \\\"module\\\": {\\n    \\\"name\\\": \\\"entry_test\\\",\\n    \\\"type\\\": \\\"feature\\\",\\n    \\\"description\\\": \\\"$string:module_test_desc\\\",\\n    \\\"mainElement\\\": \\\"TestAbility\\\",                                   // 对应下方abilities中的ability name。\\n    \\\"deviceTypes\\\": [\\n      \\\"phone\\\",\\n      \\\"tablet\\\",\\n      \\\"2in1\\\"\\n    ],\\n    \\\"deliveryWithInstall\\\": true,\\n    \\\"installationFree\\\": false,\\n    \\\"pages\\\": \\\"$profile:test_pages\\\",                                 // 对应resources目录 > base目录 > profile目录 > test_pages.json文件。\\n    \\\"abilities\\\": [                                                  // 添加的ability的配置信息。\\n      {\\n        \\\"name\\\": \\\"TestAbility\\\",\\n        \\\"srcEntry\\\": \\\"./ets/testability/TestAbility.ets\\\",\\n        \\\"description\\\": \\\"$string:TestAbility_desc\\\",\\n        \\\"icon\\\": \\\"$media:icon\\\",\\n        \\\"label\\\": \\\"$string:TestAbility_label\\\",\\n        \\\"exported\\\": true,\\n        \\\"startWindowIcon\\\": \\\"$media:icon\\\",\\n        \\\"startWindowBackground\\\": \\\"$color:start_window_background\\\"\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在module.json5文件中补充ability配置字段mainElement、pages、abilities，关于字段的具体说明请参考module.json5配置文件。 ",
        "import_module": null,
        "parent": "<li id='\\\"li039715281903\\\"'><span>在module.json5文件中补充ability配置字段mainElement、pages、abilities，关于字段的具体说明请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file\\\"' target='\\\"_blank\\\"'>module.json5配置文件</a>。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-instrument-test.html"
    },
    {
        "id": 300,
        "pre": "hvigorw onDeviceTest -p module={moduleName} -p coverage={true | false} -p scope={suiteName}#{methodName}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过命令行方式执行Instrument Test，在工程根目录下执行命令： module：执行测试的模块，缺省默认是执行所有模块的用例。coverage：是否生成覆盖率报告，缺省默认是true。覆盖率测试报告路径：<module-path>/.test/default/outputs/ohosTest/reports/index.html scope：格式为{suiteName}#{methodName}或{suiteName}，分别表示测试用例级别或测试套件级别的测试，缺省默认是执行当前模块的所有用例。 ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202174841__p2508373311\\\"'>通过命令行方式执行Instrument Test，在工程根目录下执行命令： <ul id='\\\"ZH-CN_TOPIC_0000002202174841__ul16352189265\\\"'><li id='\\\"li1839917584520\\\"'>module：执行测试的模块，缺省默认是执行所有模块的用例。</li><li id='\\\"li8995118154510\\\"'>coverage：是否生成覆盖率报告，缺省默认是true。<p id='\\\"ZH-CN_TOPIC_0000002202174841__p33379194456\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202174841__li8995118154510\\\"'></a><a name='\\\"li8995118154510\\\"'></a>覆盖率测试报告路径：&lt;module-path&gt;/.test/default/outputs/ohosTest/reports/index.html</p> </li><li id='\\\"li109871928616\\\"'>scope：格式为{suiteName}#{methodName}或{suiteName}，分别表示测试用例级别或测试套件级别的测试，缺省默认是执行当前模块的所有用例。</li></ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-instrument-test.html"
    },
    {
        "id": 301,
        "pre": "aa start -a {abilityName} -b {bundleName} -R",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "方式二通过命令行开启。  ",
        "import_module": "aa start -a {abilityName} -b {bundleName} -R",
        "parent": "<li id='\\\"li1638071717274\\\"'><strong>方式二</strong><p id='\\\"ZH-CN_TOPIC_0000002202129437__p45451718112710\\\"'>通过命令行开启。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-multi-thread-check.html"
    },
    {
        "id": 302,
        "pre": "aa start {abilityName} {bundleName} -E",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "方式二通过命令行开启。  ",
        "import_module": "aa start {abilityName} {bundleName} -E",
        "parent": "<li id='\\\"li148113525513\\\"'>方式二<p id='\\\"ZH-CN_TOPIC_0000002202129437__p01293541051\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202129437__li148113525513\\\"'></a><a name='\\\"li148113525513\\\"'></a>通过命令行开启。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-multi-thread-check.html"
    },
    {
        "id": 303,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/comma-dangle\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_comma-dangle.html"
    },
    {
        "id": 304,
        "pre": "// 默认不允许尾随逗号\\ninterface MyType {\\n  bar: string;\\n  qux: string;\\n}\\n\\nconst foo: MyType = {\\n  bar: 'baz',\\n  qux: 'qux'\\n};\\n\\nconst arr = ['1', '2'];\\n\\nexport { foo, arr };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_comma-dangle.html"
    },
    {
        "id": 305,
        "pre": "interface MyType {\\n  bar: string;\\n  qux: string;\\n}\\n\\nconst foo: MyType = {\\n  bar: 'baz',\\n  qux: 'qux',\\n};\\n\\nconst arr = ['1', '2',];\\n\\nexport { foo, arr, };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_comma-dangle.html"
    },
    {
        "id": 306,
        "pre": "import { UIAbility } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport GlobalContext from '../utils/ContextConfig';\\n\\nexport default class EntryAbility extends UIAbility {\\n\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    // 主窗口已创建，为此功能设置主页面\\n    windowStage.loadContent('pages/HandWritingDemo', (err) => {\\n      if (err.code) {\\n        return;\\n      }\\n    });\\n    GlobalContext.setContext(this.context);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 1.导入GlobalContext，以开发者自己声明的路径为准。  完整示例代码可参考手写笔服务（ArkTS）。 2.导入相关模块。 import { HandwriteComponent, HandwriteController} from '@kit.Penkit';       3.构造包含手写组件的控件/页面，下面以控件为例。      @Entry\\n@Component\\nstruct HandWritingComponent {\\n  controller: HandwriteController = new HandwriteController();\\n  // 根据应用存储规则，获取到手写文件保存的路径，此处仅为实例参考\\n  initPath: string = getContext(this).filesDir + '/aa';\\n\\n  aboutToAppear() {\\n    // 加载时设置保存动作完成后的回调。\\n    this.controller.onLoad(this.callback);\\n  }\\n\\n  // 手写文件内容加载完毕渲染上屏后的回调,通知接入用户,可在此处进行自定义行为\\n  callback = () => {\\n    // 自定义行为,例如文件加载完毕后展示用户操作指导\\n  }\\n\\n  aboutToDisappear() {\\n  }\\n\\n  build() {\\n    Row() {\\n      Stack({ alignContent: Alignment.TopStart }) {\\n        HandwriteComponent({\\n          handwriteController: this.controller,\\n          onInit: () => {\\n            // 画布初始化完成时的回调。此时可以调用接口加载和显示笔记内容\\n            this.controller?.load(this.initPath);\\n          },\\n          onScale: (scale: number) => {\\n            // 画布缩放时的回调方法，将返回当前手写控件的缩放比例，可在此处进行自定义行为。\\n          }\\n        })\\n        Button(\\\"save\\\")\\n          .onClick(async () => {\\n            // 需根据应用存储规则，获取到手写文件保存的路径，此处仅为实例参考\\n            const path = getContext(this).filesDir + '/aa';\\n            await this.controller?.save(path);\\n          })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section151484318552\\\"'> <a name='\\\"section151484318552\\\"'></a><a name='\\\"section151484318552\\\"'></a> <h4>开发步骤</h4> <p>1.导入GlobalContext，以开发者自己声明的路径为准。</p>  <p>完整示例代码可参考<a href='\\\"https://developer.huawei.com/consumer/cn/codelabsPortal/carddetails/tutorials_PenKit-Next-Easy\\\"' target='\\\"_blank\\\"'>手写笔服务（ArkTS）</a>。</p> <p>2.导入相关模块。</p> <pre class='\\\"typescript\\\"'>import { HandwriteComponent, HandwriteController} from '@kit.Penkit';</pre> <div class='\\\"p\\\"'>      3.构造包含手写组件的控件/页面，下面以控件为例。      <pre class='\\\"screen\\\"'><span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@Entry</span>\\n<span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@Component</span>\\nstruct <span rgb(80,120,116);\\\"=\"\" style='\\\"color:'>HandWritingComponent </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>controller</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>HandwriteController </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>HandwriteController</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>根据应用存储规则，获取到手写文件保存的路径，此处仅为实例参考</span>\\n  <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>initPath</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>string </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>getContext</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>filesDir </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>+ </span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'/aa'</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>aboutToAppear</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>加载时设置保存动作完成后的回调。</span>\\n    this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>controller</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>onLoad</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>callback</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>手写文件内容加载完毕渲染上屏后的回调</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>,</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>通知接入用户</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>,</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>可在此处进行自定义行为</span>\\n  <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>callback </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>自定义行为</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>,</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>例如文件加载完毕后展示用户操作指导</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>aboutToDisappear</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>  }</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>build</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Row</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Stack</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>alignContent</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Alignment</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TopStart </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n        <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>HandwriteComponent</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n          <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>handwriteController</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>controller</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>,</span>\\n          <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>onInit</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n            <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>画布初始化完成时的回调。此时可以调用接口加载和显示笔记内容</span>\\n            this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>controller</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>load</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>initPath</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n          <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>,</span>\\n          <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>onScale</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>scale</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>number</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n            <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>画布缩放时的回调方法，将返回当前手写控件的缩放比例，可在此处进行自定义行为。</span>\\n          <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>        }</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Button</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>\\\"save\\\"</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n          <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>onClick</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>async <span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n            <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>需根据应用存储规则，获取到手写文件保存的路径，此处仅为实例参考</span>\\n            const <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>path </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>getContext</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>filesDir </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>+ </span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'/aa'</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n            await this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>controller</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>save</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>path</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n          <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n      <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n      <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n    <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n    <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span></pre> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pen-suite.html"
    },
    {
        "id": 307,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/type-annotation-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_type-annotation-spacing.html"
    },
    {
        "id": 308,
        "pre": "// 默认冒号前无空格，冒号后有空格\\nexport const foo1: string = 'bar';\\n\\nexport declare function foo2(): string;\\n\\nexport class Foo3 {\\n  public name: string = 'hello';\\n}\\n// 默认箭头前后都有空格\\nexport declare type Foo4 = () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_type-annotation-spacing.html"
    },
    {
        "id": 309,
        "pre": "// 默认冒号前无空格，冒号后有空格\\nexport const foo1 :string = 'bar';\\n\\nexport declare function foo2() :string;\\n\\nexport class Foo3 {\\n  public name :string = 'hello';\\n}\\n// 默认箭头前后都有空格\\nexport declare type Foo4 = ()=>void;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_type-annotation-spacing.html"
    },
    {
        "id": 310,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nlet storageBucket: cloudStorage.StorageBucket = cloudStorage.bucket();\\n\\n@Component\\nexport struct testPage {\\n  build() {\\n  }\\n\\n  // 获取云侧文件下载地址\\n  getUrl() {\\n    // 获取云存储默认实例中screenshot/screenshot_20250115_155321.jpg文件的下载地址\\n    storageBucket.getDownloadURL('screenshot/screenshot_20250115_155321.jpg').then((downloadURL: string) => {\\n      hilog.info(0x0000, 'testTag', `Succeeded in getting download URL: ${downloadURL}`);\\n    }).catch((err: BusinessError) => {\\n      hilog.error(0x0000, 'testTag', `Failed to get download URL, code: ${err.code}, message: ${err.message}`);\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作步骤",
        "parent_text": "  操作步骤 调用StorageBucket.getDownloadURL接口获取云侧文件的下载地址。 完整示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section73802023191110\\\"'> <a name='\\\"section73802023191110\\\"'></a><a name='\\\"section73802023191110\\\"'></a> <h4>操作步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section9969145143317\\\"' target='\\\"_blank\\\"'>StorageBucket.getDownloadURL</a>接口获取云侧文件的下载地址。</p> <p>完整示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-getdownloadurl.html"
    },
    {
        "id": 311,
        "pre": "import { navi } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      导入相关模块。       ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      导入相关模块。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-matrix.html"
    },
    {
        "id": 312,
        "pre": "async testDrivingMatrix() {\\n  let params: navi.DrivingMatrixParams = {\\n    // 起点的经纬度\\n    \\\"origins\\\": [\\n      { \\\"latitude\\\": 31.9844, \\\"longitude\\\": 118.766253 },\\n      { \\\"latitude\\\": 31.9644, \\\"longitude\\\": 118.746253 }\\n    ],\\n    // 终点的经纬度\\n    \\\"destinations\\\": [\\n      { \\\"latitude\\\": 31.9344, \\\"longitude\\\": 118.706253 }\\n    ],\\n    // 时间预估模型\\n    \\\"trafficMode\\\": 2,\\n    \\\"language\\\": \\\"zh_CN\\\"\\n  };\\n  const result = await navi.getDrivingMatrix(params);\\n  console.info(\\\"Succeeded in getting driving matrix.\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]驾车批量算路",
        "parent_text": "  [h2]驾车批量算路 根据多组起终点坐标批量检索符合条件的驾车路径规划方案。支持以下功能：  支持未来出行规划。 支持根据实时路况进行合理路线规划。 支持多种路线偏好选择，如时间最短、避免经过收费的公路、避开高速公路、距离优先等。      限制：起点数乘以终点数需小于100。    ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section6999340171913\\\"'> <a name='\\\"section6999340171913\\\"'></a><a name='\\\"section6999340171913\\\"'></a> <h4>[h2]驾车批量算路</h4> <p>根据多组起终点坐标批量检索符合条件的驾车路径规划方案。支持以下功能：</p> <ul> <li>支持未来出行规划。</li> <li>支持根据实时路况进行合理路线规划。</li> <li>支持多种路线偏好选择，如时间最短、避免经过收费的公路、避开高速公路、距离优先等。</li> </ul> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120158.69613047299073419423794270642329:50001231000000:2800:AB58C12BA0AAB0734581C55E2CFA9B32962DC25B22848A8FCC3BCB09B2EB9659.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>限制：起点数乘以终点数需小于100。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-matrix.html"
    },
    {
        "id": 313,
        "pre": "async testWalkingMatrix() {\\n  let params: navi.MatrixParams = {\\n    // 起点的经纬度\\n    \\\"origins\\\": [\\n      { \\\"latitude\\\": 31.9844, \\\"longitude\\\": 118.766253 },\\n      { \\\"latitude\\\": 31.9644, \\\"longitude\\\": 118.746253 }\\n    ],\\n    // 终点的经纬度\\n    \\\"destinations\\\": [{ \\\"latitude\\\": 31.9344, \\\"longitude\\\": 118.706253 }],\\n    \\\"language\\\": \\\"zh_CN\\\"\\n  };\\n  const result = await navi.getWalkingMatrix(params);\\n  console.info(\\\"Succeeded in getting walking matrix.\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]步行批量算路",
        "parent_text": "  [h2]步行批量算路 根据多组起终点坐标批量检索符合条件的步行路径规划方案。支持以下功能：  支持150km以内的步行路径规划能力。 融入出行策略（时间最短、避免轮渡）。      限制：起点数乘以终点数需小于100。    ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section0606318202\\\"'> <a name='\\\"section0606318202\\\"'></a><a name='\\\"section0606318202\\\"'></a> <h4>[h2]步行批量算路</h4> <p>根据多组起终点坐标批量检索符合条件的步行路径规划方案。支持以下功能：</p> <ul> <li>支持150km以内的步行路径规划能力。</li> <li>融入出行策略（时间最短、避免轮渡）。</li> </ul> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120158.07708852796882059088668637258773:50001231000000:2800:34BE8EB05A0C487762A342A8FECE88064EB0C454ECE4A6CA6499B3B0A4C0B62C.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>限制：起点数乘以终点数需小于100。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-matrix.html"
    },
    {
        "id": 314,
        "pre": "async testCyclingMatrix() {\\n  let params: navi.MatrixParams = {\\n    // 起点的经纬度\\n    \\\"origins\\\": [\\n      { \\\"latitude\\\": 31.9844, \\\"longitude\\\": 118.766253 },\\n      { \\\"latitude\\\": 31.9644, \\\"longitude\\\": 118.746253 }\\n    ],\\n    // 终点的经纬度\\n    \\\"destinations\\\": [{ \\\"latitude\\\": 31.9344, \\\"longitude\\\": 118.706253 }],\\n    \\\"language\\\": \\\"zh_CN\\\"\\n  };\\n  const result = await navi.getCyclingMatrix(params);\\n  console.info(\\\"Succeeded in getting cycling matrix.\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]骑行批量算路",
        "parent_text": "  [h2]骑行批量算路 根据多组起终点坐标批量检索符合条件的骑行路径规划方案。支持以下功能：  支持500km以内的骑行路径规划能力。 融入出行策略（时间最短、避免轮渡）。      限制：起点数乘以终点数需小于100。    ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section101731928102010\\\"'> <a name='\\\"section101731928102010\\\"'></a><a name='\\\"section101731928102010\\\"'></a> <h4>[h2]骑行批量算路</h4> <p>根据多组起终点坐标批量检索符合条件的骑行路径规划方案。支持以下功能：</p> <ul> <li>支持500km以内的骑行路径规划能力。</li> <li>融入出行策略（时间最短、避免轮渡）。</li> </ul> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120158.60566633121016255227398295304762:50001231000000:2800:44F635E67EAEE1E0F596A753945FC66EA4C2CA5394A2E23675E90FA0B181AE2F.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>限制：起点数乘以终点数需小于100。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-matrix.html"
    },
    {
        "id": 315,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-exercisesequence-manage.html"
    },
    {
        "id": 316,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-exercisesequence-manage.html"
    },
    {
        "id": 317,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-exercisesequence-manage.html"
    },
    {
        "id": 318,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-exercisesequence-manage.html"
    },
    {
        "id": 319,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/func-call-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_func-call-spacing.html"
    },
    {
        "id": 320,
        "pre": "function fn() {\\n  console.log('hello');\\n}\\n\\n// 默认不允许函数名称和左括号之间有空格。\\nfn();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_func-call-spacing.html"
    },
    {
        "id": 321,
        "pre": "function fn() {\\n  console.log('hello');\\n}\\n\\n// 默认不允许函数名称和左括号之间有空格。\\nfn ();\\n\\nfn\\n();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_func-call-spacing.html"
    },
    {
        "id": 322,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/space-infix-ops\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_space-infix-ops.html"
    },
    {
        "id": 323,
        "pre": "import {bookParser} from '@kit.ReaderKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-catalog-list.html"
    },
    {
        "id": 324,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-readonly-parameter-types\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-readonly-parameter-types.html"
    },
    {
        "id": 325,
        "pre": "const index = 0;\\nexport function array1(arg: readonly string[]): void {\\n  console.info(`${arg[index]}`);\\n}\\n\\nexport function array2(arg: readonly (readonly string[])[]): void {\\n  console.info(`${arg[index][index]}`);\\n}\\nexport function array3(arg: readonly [string, number]): void {\\n  console.info(`${arg[index][index]}`);\\n}\\n\\nexport function array4(arg: readonly [readonly string[], number]): void {\\n  console.info(`${arg[index][index]}`);\\n}\\n\\nexport function primitive1(arg: string): void {\\n  console.info(`${arg}`);\\n}\\n\\nexport function primitive2(arg: number): void {\\n  console.info(`${arg}`);\\n}\\n\\nexport function primitive3(arg: boolean): void {\\n  console.info(`${arg}`);\\n}\\n\\nexport function primitive5(arg: null): void {\\n  console.info(`${arg}`);\\n}\\n\\nexport function primitive6(arg: undefined): void {\\n  console.info(`${arg}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-readonly-parameter-types.html"
    },
    {
        "id": 326,
        "pre": "const index = 0;\\nexport function array1(arg: string[]): void {\\n  console.info(`${arg[index]}`);\\n}\\n\\nexport function array2(arg: (string[])[]): void {\\n  console.info(`${arg[index][index]}`);\\n}\\nexport function array3(arg: [string, number]): void {\\n  console.info(`${arg[index][index]}`);\\n}\\n\\nexport function array4(arg: [string[], number]): void {\\n  console.info(`${arg[index][index]}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-readonly-parameter-types.html"
    },
    {
        "id": 327,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World'\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n          .fontSize(50)\\n          .fontWeight(FontWeight.Bold)\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "页面预览",
        "parent_text": "页面预览ArkTS应用/元服务支持页面预览。页面预览通过在工程的ets文件头部添加@Entry实现。 @Entry的使用参考如下示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section12597164113010\\\"'><a name='\\\"section12597164113010\\\"'></a><a name='\\\"section12597164113010\\\"'></a><h4>页面预览</h4><p id='\\\"ZH-CN_TOPIC_0000002166808156__p1511193119118\\\"'>ArkTS应用/元服务支持页面预览。页面预览通过在工程的ets文件头部添加@Entry实现。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808156__p5188205314718\\\"'>@Entry的使用参考如下示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-arkui.html"
    },
    {
        "id": 328,
        "pre": "@Preview({\\n  title: 'ContentTable'\\n})\\n@Component\\nstruct ContentTablePreview {\\n  build() {\\n    Flex() {\\n      ContentTable({ foodItem: getDefaultFoodData() })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "build()",
        "function_name": "组件预览",
        "parent_text": "组件预览ArkTS应用/元服务支持组件预览。组件预览支持实时预览，不支持动态图和动态预览。组件预览通过在组件前添加注解@Preview实现，在单个源文件中，最多可以使用10个@Preview装饰自定义组件。 @Preview的使用参考如下示例：  以上示例的组件预览效果如下图所示：  组件预览默认的预览设备为Phone，若您想查看不同的设备，或者不同的屏幕形状，或者不同设备语言等情况下的组件预览效果，可以通过设置@Preview的参数，指定预览设备的相关属性。若不设置@Preview的参数，默认的设备属性如下所示：@Preview({\\n  title: 'Component1',  //预览组件的名称\\n  deviceType: 'phone',  //指定当前组件预览渲染的设备类型，默认为Phone\\n  width: 1080,  //预览设备的宽度，单位：px\\n  height: 2340,  //预览设备的长度，单位：px\\n  colorMode: 'light',  //显示的亮暗模式，当前支持取值为light\\n  dpi: 480,  //预览设备的屏幕DPI值\\n  locale: 'zh_CN',  //预览设备的语言，如zh_CN、en_US等\\n  orientation: 'portrait',  //预览设备的横竖屏状态，取值为portrait或landscape\\n  roundScreen: false  //设备的屏幕形状是否为圆形\\n})  请注意，如果被预览的组件是依赖参数注入的组件，建议的预览方式是：定义一个组件片段，在该片段中声明将要预览的组件，以及该组件依赖的入参，并在组件片段上标注@Preview注解，以表明将预览该片段中的内容。例如，要预览如下组件： @Component\\nstruct Title {\\n  @Prop context: string; \\n  build() {\\n    Text(this.context)\\n  }\\n} 建议按如下方式预览： @Preview\\n@Component    //定义组件片段TitlePreview\\nstruct TitlePreview {\\n  build() {\\n    Title({ context: 'MyTitle' })    //在该片段中声明将要预览的组件Title，以及该组件依赖的入参 {context: 'MyTitle'}\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section52078221304\\\"'><a name='\\\"section52078221304\\\"'></a><a name='\\\"section52078221304\\\"'></a><h4>组件预览</h4><p id='\\\"ZH-CN_TOPIC_0000002166808156__zh-cn_topic_0000001250276017_p1037910583816\\\"'>ArkTS应用/元服务支持组件预览。组件预览支持实时预览，不支持动态图和动态预览。组件预览通过在组件前添加注解@Preview实现，在单个源文件中，最多可以使用10个@Preview装饰自定义组件。</p> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808156__p1578785192718\\\"'>@Preview的使用参考如下示例： </div> <p id='\\\"ZH-CN_TOPIC_0000002166808156__p1335881182020\\\"'>以上示例的组件预览效果如下图所示：</p> <p id='\\\"ZH-CN_TOPIC_0000002166808156__p1862380181111\\\"'><span><img originheight='\\\"711\\\"' originwidth='\\\"1033\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180426.79671404442367352287458416460496:50001231000000:2800:D28F4D0DC7CB25293A9FC14C3E0FC7EB3EE059F23A8B94ADD4BD7AA954FC898D.gif\\\"'/></span></p> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808156__p1448004844319\\\"'>组件预览默认的预览设备为Phone，若您想查看不同的设备，或者不同的屏幕形状，或者不同设备语言等情况下的组件预览效果，可以通过设置@Preview的参数，指定预览设备的相关属性。若不设置@Preview的参数，默认的设备属性如下所示：<pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808156__screen1063113511914\\\"'>@Preview({\\n  title: 'Component1',  //预览组件的名称\\n  deviceType: 'phone',  //指定当前组件预览渲染的设备类型，默认为Phone\\n  width: 1080,  //预览设备的宽度，单位：px\\n  height: 2340,  //预览设备的长度，单位：px\\n  colorMode: 'light',  //显示的亮暗模式，当前支持取值为light\\n  dpi: 480,  //预览设备的屏幕DPI值\\n  locale: 'zh_CN',  //预览设备的语言，如zh_CN、en_US等\\n  orientation: 'portrait',  //预览设备的横竖屏状态，取值为portrait或landscape\\n  roundScreen: false  //设备的屏幕形状是否为圆形\\n})</pre> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808156__p17556270254\\\"'>请注意，如果被预览的组件是依赖参数注入的组件，建议的预览方式是：定义一个组件片段，在该片段中声明将要预览的组件，以及该组件依赖的入参，并在组件片段上标注@Preview注解，以表明将预览该片段中的内容。例如，要预览如下组件：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808156__screen41822018113914\\\"'>@Component\\nstruct Title {\\n  @Prop context: string; \\n  build() {\\n    Text(this.context)\\n  }\\n}</pre> <p id='\\\"ZH-CN_TOPIC_0000002166808156__p873015474236\\\"'>建议按如下方式预览：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808156__screen376494234013\\\"'>@Preview\\n@Component    //定义组件片段TitlePreview\\nstruct TitlePreview {\\n  build() {\\n    Title({ context: 'MyTitle' })    //在该片段中声明将要预览的组件Title，以及该组件依赖的入参 {context: 'MyTitle'}\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-arkui.html"
    },
    {
        "id": 329,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-duplicate-imports\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-duplicate-imports.html"
    },
    {
        "id": 330,
        "pre": "// foo和bar代表两个文件\\nimport { foo } from './foo';\\nimport bar from './bar';",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-duplicate-imports.html"
    },
    {
        "id": 331,
        "pre": "// foo代表文件\\nimport { foo } from './foo';\\nimport { bar } from './foo';",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-duplicate-imports.html"
    },
    {
        "id": 332,
        "pre": "import { asset } from '@kit.AssetStoreKit';\\nimport { util } from '@kit.ArkTS';\\nimport userAuth from '@ohos.userIAM.userAuth';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nfunction stringToArray(str: string): Uint8Array {\\n  let textEncoder = new util.TextEncoder();\\n  return textEncoder.encodeInto(str);\\n}\\n\\nfunction arrayToString(arr: Uint8Array): string {\\n  let textDecoder = util.TextDecoder.create(\\\"utf-8\\\", { ignoreBOM: true });\\n  let str = textDecoder.decodeToString(arr, { stream: false })\\n  return str;\\n}\\n\\nasync function userAuthenticate(challenge: Uint8Array): Promise<Uint8Array> {\\n  return new Promise((resolve, reject) => {\\n    const authParam: userAuth.AuthParam = {\\n      challenge: challenge,\\n      authType: [userAuth.UserAuthType.PIN],\\n      authTrustLevel: userAuth.AuthTrustLevel.ATL1,\\n    };\\n    const widgetParam: userAuth.WidgetParam = { title: '请输入锁屏密码' };\\n    try {\\n      let userAuthInstance = userAuth.getUserAuthInstance(authParam, widgetParam);\\n      userAuthInstance.on('result', {\\n        onResult(result) {\\n          if (result.result == userAuth.UserAuthResultCode.SUCCESS) {\\n            console.info(`User identity authentication succeeded.`);\\n            resolve(result.token);\\n          } else {\\n            console.error(`User identity authentication failed.`);\\n            reject();\\n          }\\n        }\\n      });\\n      userAuthInstance.start();\\n    } catch (error) {\\n      let err = error as BusinessError;\\n      console.error(`User identity authentication failed. Code is ${err.code}, message is ${err.message}`);\\n      reject();\\n    }\\n  })\\n}\\n\\nfunction preQueryAsset(): Promise<Uint8Array> {\\n  return new Promise((resolve, reject) => {\\n    try {\\n      let query: asset.AssetMap = new Map();\\n      query.set(asset.Tag.ALIAS, stringToArray('demo_alias'));\\n      asset.preQuery(query).then((challenge: Uint8Array) => {\\n        resolve(challenge);\\n      }).catch(() => {\\n        reject();\\n      })\\n    } catch (error) {\\n      let err = error as BusinessError;\\n      console.error(`Failed to pre-query Asset. Code is ${err.code}, message is ${err.message}`);\\n      reject();\\n    }\\n  });\\n}\\n\\nasync function postQueryAsset(challenge: Uint8Array) {\\n  let handle: asset.AssetMap = new Map();\\n  handle.set(asset.Tag.AUTH_CHALLENGE, challenge);\\n  try {\\n    await asset.postQuery(handle);\\n    console.info(`Succeeded in post-querying Asset.`);\\n  } catch (error) {\\n    let err = error as BusinessError;\\n    console.error(`Failed to post-query Asset. Code is ${err.code}, message is ${err.message}`);\\n  }\\n}\\n\\nasync function queryAsset() {\\n  // step1. 调用asset.preQuery获取挑战值\\n  preQueryAsset().then(async (challenge: Uint8Array) => {\\n    try {\\n      // step2. 传入挑战值，拉起用户认证框\\n      let authToken: Uint8Array = await userAuthenticate(challenge);\\n      // step3 用户认证通过后，传入挑战值和授权令牌，查询关键资产明文\\n      let query: asset.AssetMap = new Map();\\n      query.set(asset.Tag.ALIAS, stringToArray('demo_alias'));\\n      query.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ALL);\\n      query.set(asset.Tag.AUTH_CHALLENGE, challenge);\\n      query.set(asset.Tag.AUTH_TOKEN, authToken);\\n      let res: Array<asset.AssetMap> = await asset.query(query);\\n      for (let i = 0; i < res.length; i++) {\\n        // parse the secret.\\n        let secret: Uint8Array = res[i].get(asset.Tag.SECRET) as Uint8Array;\\n        // parse uint8array to string\\n        let secretStr: string = arrayToString(secret);\\n      }\\n      // step4. 关键资产明文查询成功后，需要调用asset.postQuery进行查询的后置处理。\\n      postQueryAsset(challenge);\\n    } catch (error) {\\n      // step5. preQuery成功，后续操作失败，也需要调用asset.postQuery进行查询的后置处理。\\n      postQueryAsset(challenge);\\n    }\\n  }).catch ((err: BusinessError) => {\\n    console.error(`Failed to pre-query Asset. Code is ${err.code}, message is ${err.message}`);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "代码示例",
        "parent_text": "  代码示例     本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见API文档。   查询别名是demo_alias且需要用户认证的关键资产。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"代码示例\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178213098__%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a> <h4>代码示例</h4> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121001.24210949481637512571011166904318:50001231000000:2800:E545AD9E40FED8B71E9828F7364823118F7A3961E23B1C339F469A6F7744F5AD.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-asset\\\"' target='\\\"_blank\\\"'>API文档</a>。</p> </div> </div> <p>查询别名是demo_alias且需要用户认证的关键资产。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/asset-js-query-auth.html"
    },
    {
        "id": 333,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-extra-parens\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-parens.html"
    },
    {
        "id": 334,
        "pre": "// 默认不允许在任何表达式中使用不必要的括号\\n(0).toString();\\n\\nconst result = (() => {\\n  console.info('arrow function');\\n}) ? '1' : '2';\\n\\n(/^a$/).test(result);",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-parens.html"
    },
    {
        "id": 335,
        "pre": "import { authentication } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入authentication模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-authentication\\\"' target='\\\"_blank\\\"'>authentication</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-get-phonenumber.html"
    },
    {
        "id": 336,
        "pre": "// Index.ets\\n// 导入页面路由模块\\nimport { router } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n          .fontSize(50)\\n          .fontWeight(FontWeight.Bold)\\n        // 添加按钮，以响应用户点击\\n        Button() {\\n          Text('Next')\\n            .fontSize(30)\\n            .fontWeight(FontWeight.Bold)\\n        }\\n        .type(ButtonType.Capsule)\\n        .margin({\\n          top: 20\\n        })\\n        .backgroundColor('#0D9FFB')\\n        .width('40%')\\n        .height('5%')\\n        // 跳转按钮绑定onClick事件，点击时跳转到第二页\\n        .onClick(() => {\\n          console.info(`Succeeded in clicking the 'Next' button.`)\\n          // 跳转到第二页\\n          router.pushUrl({ url: 'pages/Second' }).then(() => {\\n            console.info('Succeeded in jumping to the second page.')\\n\\n          }).catch((err: BusinessError) => {\\n            console.error(`Failed to jump to the second page. Code is ${err.code}, message is ${err.message}`)\\n          })\\n        })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "第一个页面跳转到第二个页面。在第一个页面中，跳转按钮绑定onClick事件，点击按钮时跳转到第二页。Index.ets文件的示例如下：  ",
        "import_module": null,
        "parent": "<li><span>第一个页面跳转到第二个页面。</span><p></p><p>在第一个页面中，跳转按钮绑定onClick事件，点击按钮时跳转到第二页。<strong>Index.ets</strong>文件的示例如下：</p>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/start-with-ets-stage.html"
    },
    {
        "id": 337,
        "pre": "import {AuthPlugin} from '../libs/plugins/auth/AuthPlugin';  // 插件文件CustomAuth.ts存储在默认位置（ohpm-repo解压根目录的plugins文件夹内），默认引用地址\\nexport class CustomAuth implements AuthPlugin {\\n  /**\\n   * 用户认证:根据accessToken的值，返回用户的数据:用户的id，用户的名字，用户所属的组织，用户所创建的组织\\n   * @param accessToken 用户的accessToken\\n   */\\n  async auth(accessToken: string): Promise<{\\n    id: string;                         // 用户的id，保证唯一性\\n    name: string;                       // 用户的名字，保证唯一性\\n    belongGroupList: Array<string>;     // 用户所在的组织，具有发指定组织包的权限\\n    groupAdminList: Array<string>;      // 用户所管理的组织，具有删除指定组织内包的权限\\n  }> {\\n    let id: string, name: string, belongGroupList: Array<string>, groupAdminList: Array<string>;\\n    return {id, name, belongGroupList, groupAdminList};\\n  }\\n\\n  /**\\n   * 根据用户id,返回用户的名字\\n   * @param id 用户的id值\\n   */\\n  async getUserInfo(id: string): Promise<string> {\\n    let name: string;\\n    return name;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "插件模板CustomAuth.ts",
        "parent_text": "插件模板CustomAuth.ts ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14072085013\\\"'><a name='\\\"section14072085013\\\"'></a><a name='\\\"section14072085013\\\"'></a><h4>插件模板CustomAuth.ts</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-custom-auth-plugin-template.html"
    },
    {
        "id": 338,
        "pre": "// tsconfig.json 文件指定了编译项目所需的根目录下的文件以及编译选项，编译自定义插件文件.ts为.js文件。\\n{\\n  \\\"include\\\": [\\n    \\\"plugins/*\\\" // 插件文件的位置\\n  ],\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es2016\\\",\\n    \\\"experimentalDecorators\\\": true,\\n    \\\"emitDecoratorMetadata\\\": true,\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"rootDirs\\\": [\\n      \\\"./src\\\",\\n      \\\"./test\\\"\\n    ],\\n    \\\"typeRoots\\\": [\\n      \\\"./node_modules/@types\\\"\\n    ],\\n    \\\"types\\\": [\\n      \\\"node\\\",\\n    ],\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"outDir\\\": \\\"./plugins/outDir\\\",   // 编译后文件输出的位置\\n    \\\"esModuleInterop\\\": true,\\n    \\\"forceConsistentCasingInFileNames\\\": true,\\n    \\\"alwaysStrict\\\": true,\\n    \\\"noImplicitReturns\\\": true,\\n    \\\"skipLibCheck\\\": true\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "ts编译的配置文件tsconfig.json",
        "parent_text": "ts编译的配置文件tsconfig.json ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14188258114612\\\"'><a name='\\\"section14188258114612\\\"'></a><a name='\\\"section14188258114612\\\"'></a><h4>ts编译的配置文件tsconfig.json</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-custom-auth-plugin-template.html"
    },
    {
        "id": 339,
        "pre": "{\\n  \\\"module\\\" : {\\n    // ...\\n    \\\"requestPermissions\\\":[\\n      {\\n        // 允许应用在前台运行时获取位置信息\\n        \\\"name\\\" : \\\"ohos.permission.LOCATION\\\",\\n        // reason需要在/resources/base/element/string.json中新建\\n        \\\"reason\\\": \\\"$string:location_permission\\\",\\n        \\\"usedScene\\\": {\\n          \\\"abilities\\\": [\\n            \\\"EntryAbility\\\"\\n          ],\\n          \\\"when\\\":\\\"inuse\\\"\\n        }\\n      },\\n      {\\n        // 允许应用获取设备模糊位置信息\\n        \\\"name\\\" : \\\"ohos.permission.APPROXIMATELY_LOCATION\\\",\\n        // reason需要在/resources/base/element/string.json中新建\\n        \\\"reason\\\": \\\"$string:approximately_location_permission\\\",\\n        \\\"usedScene\\\": {\\n          \\\"abilities\\\": [\\n            \\\"EntryAbility\\\"\\n          ],\\n          \\\"when\\\":\\\"inuse\\\"\\n        }\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "启用“我的位置”之前，您需要确保您的应用可以获取用户定位。获取用户定位有两种方式：方式一（推荐）：使用安全控件LocationButton。 方式二：申请ohos.permission.LOCATION和ohos.permission.APPROXIMATELY_LOCATION权限，您需要在module.json5配置文件中声明所需要的权限，具体可参考声明权限。 ",
        "import_module": null,
        "parent": "<li>启用“我的位置”之前，您需要确保您的应用可以获取用户定位。获取用户定位有两种方式：<p>方式一（推荐）：使用安全控件<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-security-components-locationbutton\\\"' target='\\\"_blank\\\"'>LocationButton</a>。</p> <p>方式二：申请ohos.permission.LOCATION和ohos.permission.APPROXIMATELY_LOCATION权限，您需要在module.json5配置文件中声明所需要的权限，具体可参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/declare-permissions\\\"' target='\\\"_blank\\\"'>声明权限</a>。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-location.html"
    },
    {
        "id": 340,
        "pre": "let callback = () => {\\n  console.info(\\\"myLocationButtonClick\\\", `myLocationButtonClick`);\\n};\\nthis.mapEventManager.on(\\\"myLocationButtonClick\\\", callback);",
        "type": "Reference",
        "function_call": "on(type: 'myLocationButtonClick')",
        "function_name": "[h2]监听“我的位置”按钮点击事件",
        "parent_text": "  [h2]监听“我的位置”按钮点击事件 通过调用on(type: 'myLocationButtonClick')方法，设置'myLocationButtonClick'事件监听。设置监听后“我的位置按钮”点击事件自定义，反之不设置则由Map Kit执行点击后默认事件，即地图移动到当前用户位置。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section113474617342\\\"'> <a name='\\\"section113474617342\\\"'></a><a name='\\\"section113474617342\\\"'></a> <h4>[h2]监听“我的位置”按钮点击事件</h4> <p>通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1446539113513\\\"' target='\\\"_blank\\\"'>on(type: 'myLocationButtonClick')</a>方法，设置'myLocationButtonClick'事件监听。设置监听后“我的位置按钮”点击事件自定义，反之不设置则由Map Kit执行点击后默认事件，即地图移动到当前用户位置。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-location.html"
    },
    {
        "id": 341,
        "pre": "this.mapController.setMyLocationControlsEnabled(false);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      控制是否显示“我的位置”按钮。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      控制是否显示<span class='\\\"uicontrol\\\"'>“我的位置”</span>按钮。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-location.html"
    },
    {
        "id": 342,
        "pre": "let style: mapCommon.MyLocationStyle = {\\n  anchorU: 0.5,\\n  anchorV: 0.5,\\n  radiusFillColor: 0xffff0000,\\n  // icon为自定义图标资源，使用时需要替换\\n  // 图标存放在resources/rawfile，icon参数传入rawfile文件夹下的相对路径\\n  icon: 'test.png'\\n};\\nawait this.mapController.setMyLocationStyle(style);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过调用mapController.setMyLocationStyle(style: mapCommon.MyLocationStyle)方法，设置用户位置图标样式。效果如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      通过调用mapController.<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section126791641317\\\"' target='\\\"_blank\\\"'>setMyLocationStyle</a>(style: <a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section3713124215275\\\"' target='\\\"_blank\\\"'>mapCommon.MyLocationStyle</a>)方法，设置用户位置图标样式。效果如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-location.html"
    },
    {
        "id": 343,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/max-len\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_max-len.html"
    },
    {
        "id": 344,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  message: string = 'hello';\\n\\n  build() {\\n    Text(this.message)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_max-len.html"
    },
    {
        "id": 345,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/object-creation-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-object-creation-check.html"
    },
    {
        "id": 346,
        "pre": "// Test.ts\\n// 创建一个array\\nlet arr: number[] = [];\\n// 创建一个普通对象\\nlet obj = {};          \\n// 创建一个正则对象\\nlet reg = /../; ",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-object-creation-check.html"
    },
    {
        "id": 347,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-dynamic-delete\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-dynamic-delete.html"
    },
    {
        "id": 348,
        "pre": "const container: Record<string, number> = {\\n  /* ... */\\n};\\n\\n// Constant runtime lookups by string index\\ndelete container.aaa;\\n\\n// Constants that must be accessed by []\\ndelete container['7'];\\ndelete container['-Infinity'];",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-dynamic-delete.html"
    },
    {
        "id": 349,
        "pre": "const container: Record<string, number> = {\\n  /* ... */\\n};\\n\\n// Can be replaced with the constant equivalents, such as container.aaa\\ndelete container['aaa'];\\ndelete container['Infinity'];\\n\\n// Dynamic, difficult-to-reason-about lookups\\nconst name = 'name';\\ndelete container[name];\\ndelete container[name.toUpperCase()];",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-dynamic-delete.html"
    },
    {
        "id": 350,
        "pre": "import { advertising, identifier } from '@kit.AdsKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private ads: Array<advertising.Advertisement> = [];\\n  private context = getContext(this) as common.UIAbilityContext;\\n  private oaid: string = '';\\n\\n  aboutToAppear() {\\n    try {\\n      // 使用Promise回调方式获取OAID\\n      identifier.getOAID().then((data) => {\\n        this.oaid = data;\\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\\n      }).catch((error: BusinessError) => {\\n        hilog.error(0x0000, 'testTag', '%{public}s', `Failed to get adsIdentifierInfo, message: ${error.message}`);\\n      })\\n    } catch (error) {\\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\\n    }\\n  }\\n\\n  build() {\\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\\n      Row() {\\n        Button('requestAd').onClick(() => {\\n          let load: advertising.AdLoader = new advertising.AdLoader(this.context);\\n          this.requestAd(load);\\n        }).width('45%')\\n      }\\n    }\\n  }\\n\\n  private requestAd(adLoader: advertising.AdLoader): void {\\n    const adRequestParam: advertising.AdRequestParams = {\\n      // 广告类型：插屏广告\\n      adType: 12,\\n      // 'testb4znbuh3n2'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\\n      adId: 'testb4znbuh3n2',\\n      // 开放匿名设备标识符\\n      oaid: this.oaid\\n    };\\n    const adOption: advertising.AdOptions = {\\n      // 设置是否请求非个性化广告\\n      nonPersonalizedAd: 0,\\n      // 是否允许流量下载0：不允许，1：允许，不设置以广告主设置为准\\n      allowMobileTraffic: 0,\\n      // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\\n      tagForChildProtection: -1,\\n      // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\\n      tagForUnderAgeOfPromise: -1,\\n      // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\\n      adContentClassification: 'A'\\n    };\\n    const adLoaderListener: advertising.AdLoadListener = {\\n      onAdLoadFailure: (errorCode: number, errorMsg: string) => {\\n        hilog.error(0x0000, 'testTag', '%{public}s',\\n          `Failed to request ad, message: ${errorMsg}, error code: ${errorCode}`);\\n      },\\n      onAdLoadSuccess: (ads: Array<advertising.Advertisement>) => {\\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting ad!');\\n        this.ads = [];\\n        this.ads.push(...ads);\\n      },\\n    };\\n    adLoader.loadAd(adRequestParam, adOption, adLoaderListener);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "请求单广告位广告。需要先创建一个AdLoader对象，通过AdLoader的loadAd方法请求广告，最后通过AdLoadListener来监听广告的加载状态。 请求广告关键参数如下所示： 请求广告参数名  类型  必填  说明    adType  number  是  请求广告类型，插屏广告类型为12。   adId  string  是  广告位ID。 如果仅调测广告，可使用测试广告位ID：testb4znbuh3n2。如果要接入正式广告，则需要申请正式的广告位ID。可在应用发布前进入流量变现官网，点击“开始变现”，登录鲸鸿动能媒体服务平台进行申请，具体操作详情请参见展示位创建。   oaid  string  否  开放匿名设备标识符，用于精准推送广告。不填无法获取到个性化广告。     示例代码如下所示：  ",
        "import_module": null,
        "parent": "<li id='\\\"li18431144445710\\\"'><a name='\\\"ZH-CN_TOPIC_0000002203062670__li18431144445710\\\"'></a><a name='\\\"li18431144445710\\\"'></a><span>请求单广告位广告。</span><p></p><p>需要先创建一个AdLoader对象，通过AdLoader的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-advertising#loadad\\\"' target='\\\"_blank\\\"'>loadAd</a>方法请求广告，最后通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-advertising#adloadlistener\\\"' target='\\\"_blank\\\"'>AdLoadListener</a>来监听广告的加载状态。</p> <p>请求广告关键参数如下所示：</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.2.2.2.3.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"16.85%\\\"'><p>请求广告参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.2.2.2.3.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"11.26%\\\"'><p>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.2.2.2.3.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"9.9%\\\"'><p>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.2.2.2.3.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"61.99%\\\"'><p>说明</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.85%\\\"'><p>adType</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.26%\\\"'><p>number</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"9.9%\\\"'><p>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"61.99%\\\"'><p>请求广告类型，插屏广告类型为12。</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.85%\\\"'><p>adId</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.26%\\\"'><p>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"9.9%\\\"'><p>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"61.99%\\\"'><p>广告位ID。</p> <ul><li>如果仅调测广告，可使用测试广告位ID：testb4znbuh3n2。</li><li>如果要接入正式广告，则需要申请正式的广告位ID。可在应用发布前进入<a href='\\\"https://developer.huawei.com/consumer/cn/monetize\\\"' target='\\\"_blank\\\"'>流量变现官网</a>，点击“开始变现”，登录<a href='\\\"https://developer.huawei.com/consumer/cn/service/ads/publisher/html/index.html?lang=zh\\\"' target='\\\"_blank\\\"'>鲸鸿动能媒体服务平台</a>进行申请，具体操作详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/distribution/monetize/zhanshiweichuangjian-0000001132700049\\\"' target='\\\"_blank\\\"'>展示位创建</a>。</li></ul> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.85%\\\"'><p>oaid</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.26%\\\"'><p>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"9.9%\\\"'><p>否</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"61.99%\\\"'><p>开放匿名设备标识符，用于精准推送广告。不填无法获取到个性化广告。</p> </td> </tr> </tbody></table> </div> <p>示例代码如下所示：</p>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ads-publisher-service-interstitial.html"
    },
    {
        "id": 351,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nlet storageBucket: cloudStorage.StorageBucket = cloudStorage.bucket();\\n\\n@Component\\nexport struct testPage {\\n  build() {\\n  }\\n\\n  // 获取元数据\\n  getMetaData() {\\n    // 获取云存储默认实例中screenshot/screenshot_20250115_155321.jpg文件的元数据信息\\n    storageBucket.getMetadata('screenshot/screenshot_20250115_155321.jpg').then((metadata: cloudStorage.Metadata) => {\\n      hilog.info(0x0000, 'testTag', `Succeeded in getting metadata: ${JSON.stringify(metadata)}`);\\n    }).catch((err: BusinessError) => {\\n      hilog.error(0x0000, 'testTag', `Failed to get metadata, code: ${err.code}, message: ${err.message}`);\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作步骤",
        "parent_text": "  操作步骤 调用StorageBucket.getMetadata获取指定云侧文件的元数据信息。 完整示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section124151821122618\\\"'> <a name='\\\"section124151821122618\\\"'></a><a name='\\\"section124151821122618\\\"'></a> <h4>操作步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section2031534817364\\\"' target='\\\"_blank\\\"'>StorageBucket.getMetadata</a>获取指定云侧文件的元数据信息。</p> <p>完整示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-getmetadata.html"
    },
    {
        "id": 352,
        "pre": "import { productViewManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport type { common, Want } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入productViewManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入productViewManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-productview.html"
    },
    {
        "id": 353,
        "pre": "import { productViewManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport type { common, Want } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入productViewManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入productViewManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-productview.html"
    },
    {
        "id": 354,
        "pre": "https://appgallery.huawei.com/app/detail?id= + bundleName + &action=write-review",
        "type": "Reference",
        "function_call": "build()",
        "function_name": "[h2]通过App Linking拉起写评论页",
        "parent_text": "  [h2]通过App Linking拉起写评论页 构造拼接bundleName的App Linking链接，其中bundleName为需要拉起写评论页的应用包名，action隐式指定为write-review，表示进入详情页后，下一步将拉起写评论页，其格式为：  在应用中调用openLink()接口拉起App Linking链接： import { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport type { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Button('start app linking', { type: ButtonType.Capsule, stateEffect: true })\\n      .width('87%')\\n      .height('5%')\\n      .margin({ bottom: '12vp' })\\n      .onClick(() => {\\n        let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n        // 需要拼接不同的应用包名，用以打开不同的应用写评论页,例如：bundleName: 'com.huawei.hmsapp.books'\\n        let bundleName: string = 'xxxx';\\n        let link: string = 'https://appgallery.huawei.com/app/detail?id=' + bundleName + '&action=write-review';\\n        // 以App Linking优先的方式在应用市场打开指定包名的应用写评论页\\n        context.openLink(link, { appLinkingOnly: false })\\n          .then(() => {\\n            hilog.info(0x0001, 'TAG', 'openlink success.');\\n          })\\n          .catch((error: BusinessError) => {\\n            hilog.error(0x0001, 'TAG', `openlink failed. Code: ${error.code}, message is ${error.message}`);\\n          });\\n      })\\n  }\\n} 在网页中打开App Linking链接： <html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <title>跳转示例</title>\\n  </head>\\n  <body>\\n    <a href='https://appgallery.huawei.com/app/detail?id=bundleName&action=write-review'>通过AppLinking拉起应用市场写评论页</a>\\n  </body>\\n</html> ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section62754534235\\\"'> <a name='\\\"section62754534235\\\"'></a><a name='\\\"section62754534235\\\"'></a> <h4>[h2]通过App Linking拉起写评论页</h4> <p>构造拼接bundleName的App Linking链接，其中bundleName为需要拉起写评论页的应用包名，action隐式指定为write-review，表示进入详情页后，下一步将拉起写评论页，其格式为：</p>  <p>在应用中调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-inner-application-uiabilitycontext#uiabilitycontextopenlink12\\\"' target='\\\"_blank\\\"'>openLink()</a>接口拉起App Linking链接：</p> <pre class='\\\"typescript\\\"'>import { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport type { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Button('start app linking', { type: ButtonType.Capsule, stateEffect: true })\\n      .width('87%')\\n      .height('5%')\\n      .margin({ bottom: '12vp' })\\n      .onClick(() =&gt; {\\n        let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n        // 需要拼接不同的应用包名，用以打开不同的应用写评论页,例如：bundleName: 'com.huawei.hmsapp.books'\\n        let bundleName: string = 'xxxx';\\n        let link: string = 'https://appgallery.huawei.com/app/detail?id=' + bundleName + '&amp;action=write-review';\\n        // 以App Linking优先的方式在应用市场打开指定包名的应用写评论页\\n        context.openLink(link, { appLinkingOnly: false })\\n          .then(() =&gt; {\\n            hilog.info(0x0001, 'TAG', 'openlink success.');\\n          })\\n          .catch((error: BusinessError) =&gt; {\\n            hilog.error(0x0001, 'TAG', `openlink failed. Code: ${error.code}, message is ${error.message}`);\\n          });\\n      })\\n  }\\n}</pre> <p>在网页中打开App Linking链接：</p> <pre class='\\\"typescript\\\"'>&lt;html lang=\\\"en\\\"&gt;\\n  &lt;head&gt;\\n    &lt;meta charset=\\\"UTF-8\\\"&gt;\\n    &lt;title&gt;跳转示例&lt;/title&gt;\\n  &lt;/head&gt;\\n  &lt;body&gt;\\n    &lt;a href='https://appgallery.huawei.com/app/detail?id=bundleName&amp;action=write-review'&gt;通过AppLinking拉起应用市场写评论页&lt;/a&gt;\\n  &lt;/body&gt;\\n&lt;/html&gt;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-productview.html"
    },
    {
        "id": 355,
        "pre": "export const registerWatcher: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将RegisterWatcher注册为ArkTS接口： 编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n} 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>将RegisterWatcher注册为ArkTS接口：</p> <p>编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口：</p> <pre>static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hiappevent-watcher-mainthreadjank-events-ndk.html"
    },
    {
        "id": 356,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-row-column-to-replace-flex\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-row-column-to-replace-flex.html"
    },
    {
        "id": 357,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  build() {\\n    // Replace Flex with Column/Row\\n    Column() {\\n      Text('Replace Flex with Column/Row')\\n        .fontSize(12)\\n        .height('16')\\n        .margin({\\n          top: 5,\\n          bottom: 10\\n        })\\n      Flex().width(300).height(200).backgroundColor(Color.Pink)\\n      Flex().width(300).height(200).backgroundColor(Color.Yellow)\\n      Flex().width(300).height(200).backgroundColor(Color.Grey)\\n      Flex().width(300).height(200).backgroundColor(Color.Pink)\\n      Flex().width(300).height(200).backgroundColor(Color.Yellow)\\n      Flex().width(300).height(200).backgroundColor(Color.Grey)\\n    }.height(200)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-row-column-to-replace-flex.html"
    },
    {
        "id": 358,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  build() {\\n    // Flex Nesting\\n    Flex({ direction: FlexDirection.Column }) {\\n      Text('Replace Flex with Column/Row')\\n        .fontSize(12)\\n        .height('16')\\n        .margin({\\n          top: 5,\\n          bottom: 10\\n        })\\n      Flex().width(300).height(200).backgroundColor(Color.Pink)\\n      Flex().width(300).height(200).backgroundColor(Color.Yellow)\\n      Flex().width(300).height(200).backgroundColor(Color.Grey)\\n      Flex().width(300).height(200).backgroundColor(Color.Pink)\\n      Flex().width(300).height(200).backgroundColor(Color.Yellow)\\n      Flex().width(300).height(200).backgroundColor(Color.Grey)\\n    }.height(200)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-row-column-to-replace-flex.html"
    },
    {
        "id": 359,
        "pre": "{\\n   \\\"distributionFilter\\\": {\\n      \\\"screenShape\\\": {    //屏幕形状枚举\\n         \\\"policy\\\": \\\"include\\\",\\n         \\\"value\\\": [\\\"circle\\\", \\\"rect\\\"]\\n      },\\n      \\\"screenWindow\\\": {   //窗口分辨率\\n         \\\"policy\\\": \\\"include\\\",\\n         \\\"value\\\": [\\\"454*454\\\", \\\"466*466\\\"]\\n      },\\n      \\\"screenDensity\\\": {  //屏幕的像素密度\\n         \\\"policy\\\": \\\"exclude\\\",\\n         \\\"value\\\": [\\\"ldpi\\\", \\\"xldpi\\\"]\\n      },\\n      \\\"countryCode\\\": {   //国家地区\\n         \\\"policy\\\": \\\"include\\\",\\n         \\\"value\\\": [\\\"CN\\\", \\\"HK\\\"] \\n      }\\n   }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在entry > src > main > resources > profile文件夹中新建一个.json文件，并根据开发实际需要，配置如下代码信息。Stage模型下分发规则请参见distributionFilter标签。 ",
        "import_module": null,
        "parent": "<li id='\\\"li9506183011810\\\"'><span>在entry &gt; src &gt; main &gt; resources &gt; profile文件夹中新建一个.json文件，并根据开发实际需要，配置如下代码信息。Stage模型下分发规则请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file#distributionfilter标签\\\"' target='\\\"_blank\\\"'>distributionFilter标签</a>。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-add-new-module.html"
    },
    {
        "id": 360,
        "pre": "// 步骤3 获取SensorClient客户端\\nlet sensorClient: wearEngine.SensorClient = wearEngine.getSensorClient(getContext(this));\\n\\n// 步骤4 获取指定连接设备的传感器列表\\nsensorClient.getSensorList(targetDevice.randomId).then((sensorList) => {\\n  console.info(`Succeeded in getting sensor list, result is ${sensorList}`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to get sensor list. Code is ${error.code}, message is ${error.message}`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用getSensorList方法，获取指定连接设备的传感器列表。 ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section168854385238\\\"' target='\\\"_blank\\\"'>getSensorList</a>方法，获取指定连接设备的传感器列表。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device_sensor.html"
    },
    {
        "id": 361,
        "pre": "let sensorClient: wearEngine.SensorClient = wearEngine.getSensorClient(getContext(this));\\nlet sensorList: wearEngine.Sensor[] = await sensorClient.getSensorList(targetDevice.randomId);\\nsensorList.forEach((sensor, idx, arr) => {\\n  if (sensor.type === wearEngine.SensorType.ACCELEROMETER) {\\n    let callback = (sensorResult: wearEngine.SensorResult) => {\\n      console.info(`Succeeded in getting sensor result, result is ${sensorResult}`);\\n    }\\n    // 订阅传感器数据上报\\n    sensorClient.subscribeSensor(targetDevice.randomId, wearEngine.SensorType.ACCELEROMETER, callback).then(() => {\\n      console.info(`Succeeded in subscribing sensor data.`);\\n    }).catch((error: BusinessError) => {\\n      console.error(`Failed to subscribe sensor data. Code is ${error.code}, message is ${error.message}`);\\n    })\\n\\n    // 取消传感器数据上报\\n    sensorClient.unsubscribeSensor(targetDevice.randomId, wearEngine.SensorType.ACCELEROMETER, callback).then(() => {\\n      console.info(`Succeeded in unsubscribing sensor data.`);\\n    }).catch((error: BusinessError) => {\\n      console.error(`Failed to unsubscribe sensor data. Code is ${error.code}, message is ${error.message}`);\\n    })\\n  }\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "订阅或取消订阅传感器数据上报。       传感器成功打开后，会根据每个传感器的上报周期，连续不断的通过subscribeSensor方法入参的回调函数上报数据，数据上报时长可由开发者通过取消订阅传感器接口自行控制。每组数据都有时间戳属性，建议开发者根据时间戳进行数据对齐。不同的传感器上报的数据格式是不同的，具体可参见：穿戴设备传感器数据格式及样例。 传感器分为多通道传感器，如PPG、ECG，和非多通道传感器，如ACC。对于多通道传感器上报的数据，可以通过SensorData中的channel字段来区分通道。 设备连接状态断开，设备会停止传感器数据的上报，需要开发者主动订阅设备的连接状态，设备重新连接上后主动调用subscribeSensor方法订阅指定传感器数据上报。     ",
        "import_module": null,
        "parent": "<li><span>订阅或取消订阅传感器数据上报。</span><p></p> <div class='\\\"p\\\"'> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121040.23111014128725463013941637738848:50001231000000:2800:666FDE3616DFB7D786144DD15EEDE4AA8D48F3E98E5A39D8D38E0EE1DB2A73C2.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ul> <li>传感器成功打开后，会根据每个传感器的上报周期，连续不断的通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1043415982714\\\"' target='\\\"_blank\\\"'>subscribeSensor</a>方法入参的回调函数上报数据，数据上报时长可由开发者通过取消订阅传感器接口自行控制。每组数据都有时间戳属性，建议开发者根据时间戳进行数据对齐。不同的传感器上报的数据格式是不同的，具体可参见：<a href='\\\"#section18811142832216\\\"'>穿戴设备传感器数据格式及样例</a>。</li> <li>传感器分为多通道传感器，如PPG、ECG，和非多通道传感器，如ACC。对于多通道传感器上报的数据，可以通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1896124869\\\"' target='\\\"_blank\\\"'>SensorData</a>中的channel字段来区分通道。</li> <li>设备连接状态断开，设备会停止传感器数据的上报，需要开发者主动订阅设备的连接状态，设备重新连接上后主动调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1043415982714\\\"' target='\\\"_blank\\\"'>subscribeSensor</a>方法订阅指定传感器数据上报。</li> </ul> </div> </div> </div> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device_sensor.html"
    },
    {
        "id": 362,
        "pre": "import { ssap } from '@kit.NearLinkKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/nearlink-ssap-server-connect.html"
    },
    {
        "id": 363,
        "pre": "// 导入解析能力、页面组件和阅读器控制类\\nimport { bookParser, ReadPageComponent, readerCore } from '@kit.ReaderKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { display } from '@kit.ArkUI';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { common } from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-read-page.html"
    },
    {
        "id": 364,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nclass queryenvironmentstatus {\\n  queryEnvironmentStatus() {\\n    const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n    iap.queryEnvironmentStatus(context).then(() => {\\n      // 请求成功\\n      console.info('Succeeded in querying environment status.');\\n    }).catch((err: BusinessError) => {\\n      // 请求失败\\n      console.error(`Failed to query environment status. Code is ${err.code}, message is ${err.message}`);\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "判断当前登录的华为账号所在的服务地是否支持数字商品服务应用内支付。在使用应用内支付之前，应用需要向IAP Kit发送queryEnvironmentStatus请求，以此判断用户当前登录的华为账号所在服务地是否在IAP Kit支持结算的国家/地区中。  当前IAP Kit支持结算的国家/地区仅包括中国大陆。   ",
        "import_module": null,
        "parent": "<li>判断当前登录的华为账号所在的服务地是否支持数字商品服务应用内支付。<p>在使用应用内支付之前，应用需要向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section192192415554\\\"' target='\\\"_blank\\\"'>queryEnvironmentStatus</a>请求，以此判断用户当前登录的华为账号所在服务地是否在IAP Kit支持结算的国家/地区中。</p> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120042.05431181282615369031942078151552:50001231000000:2800:FFE09443BD0FA347557416D131B5BFB52817C93F4E459BE5B398185DAC9659EB.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>当前IAP Kit支持结算的国家/地区仅包括中国大陆。</p> </div></div>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-iap-distribute-query.html"
    },
    {
        "id": 365,
        "pre": "@Entry\\n@Component\\nstruct LoginExample {\\n  pathInfos: NavPathStack = new NavPathStack();\\n  @State ReserveAccount: string = '';\\n  @State ReservePassword: string = '';\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'home_page') {\\n      HomePage()\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pathInfos) {\\n      Column() {\\n        Text(\\\"账户登录\\\")\\n          .commonTitleStyles()\\n\\n        TextInput({ placeholder: '用户名' })\\n          .commonInputStyles()\\n          .type(InputType.USER_NAME)// 账号框使用USER_NAME属性\\n          .onChange((value: string) => {\\n            this.ReserveAccount = value;\\n          })\\n\\n        TextInput({ placeholder: '密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.Password)// 密码框使用Password属性\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        Button('登录')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.pathInfos.pushPathByName('home_page', null)\\n          })\\n      }\\n    }\\n    .navDestination(this.PageMap)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}\\n\\n@Component\\nstruct HomePage {\\n  pathInfos: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text(\\\"Home Page\\\").commonTitleStyles()\\n      }.width('100%').height('100%')\\n    }.title(\\\"Home Page\\\")\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathInfos = context.pathStack;\\n    })\\n  }\\n}\\n\\n@Extend(Text)\\nfunction commonTitleStyles() {\\n  .fontSize(24)\\n  .fontColor('#000000')\\n  .fontWeight(FontWeight.Medium)\\n  .margin({ top: 24, bottom: 16 })\\n}\\n\\n@Extend(TextInput)\\nfunction commonInputStyles() {\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .opacity(0.6)\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n  .margin({ top: 16 })\\n}\\n\\n@Extend(Button)\\nfunction commonButtonStyles() {\\n  .width('100%')\\n  .height(40)\\n  .borderRadius(20)\\n  .margin({ top: 24 })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "登录",
        "parent_text": "登录 示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8767438719\\\"'><a name='\\\"section8767438719\\\"'></a><a name='\\\"section8767438719\\\"'></a><h4>登录</h4><p><span><img height='\\\"730.3163000000001\\\"' originheight='\\\"790\\\"' originwidth='\\\"368\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120958.75294036799494212599686869561696:50001231000000:2800:F561610B29EFC03C6A15D75100F7263A0F5644C5C9E73B48BFED9D26E90AAAC4.png\\\"' title='\\\"点击放大\\\"' width='\\\"343.14000000000004\\\"'/></span></p> <p>示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-autofill-acc-password.html"
    },
    {
        "id": 366,
        "pre": "start time:2017/08/08-17:06:24:380\\nDOMAIN = AAFWK EVENTNAME THREAD_BLOCK_3S\\nTIMESTAMP = 2017/08/08-17:06:24:363\\nPID = 1561\\nUID = 20010039\\nTID = 1566\\nPACKAGE_NAME com.example.myapplication\\nPROCESS_NAME com.example.myapplication\\neventLog_action pb:1 eventLog_interval 10\\nMSG = App main thread is not response!EventHandler dump begin curTime:2017-08-08 05:06:24.362\\n  Event runner (Thread name =Thread ID 1561)is running\\n  Current Running:start at 2017-08-08 05:06:18.145,Event send thread 1561,send time =2017-08-08 05:06:18.145,handle time =2017-08-08 05:\\n  Immediate priority event queue information:\\n  Total size of Immediate events 0\\n  High priority event queue information:\\n  No.1 Event send thread 1561,send time 2017-08-08 05:06:18.039,handle time 2017-08-08 05:06:21.539,task name [anr_handler.cpp(Send Total size of High events 1)]\\n  Low priority event queue information:\\n  No.1:Event{send thread=1566,send time=2017-08-0805:06:21.062,handle time=2017-08-0805:06:21.062,id=1}\\n  Total size of Low events 1\\n  Idle priority event queue information:\\n  Total size of Idle events 0\\n  Total event size :2\\n\\n Timestamp: 2017-08-0817:06:24.4142447784\\n Pid: 1561\\n Uid: 20010039\\n Process name: com.example.myapplication\\n Tid:1561 Name:i.myapplication\\n   at anonymous entry (D:/project/MyApplication_test/entry/build/default/intermediates/loader_out/default/ets,pages/Index_.js:0:1)\\n   #00 pc 0017909c /system/lib/libark_jsruntime.so\\n   #01 pc 00177ebb /system/lib/libark_jsruntime.so\\n   #02 pc 0024b4bb /system/lib/libark_jsruntime.so\\n   #03 pc 00fbed23 /system/lib/libace.z.so\\n   #04 pc 00d8208f /system/lib/libace.z.so\\n   ...",
        "type": "Reference",
        "function_call": "anonymous entry (D:/project/MyApplication_test/entry/build/default/intermediates/loader_out/default/ets/pages/Index_.js:0:1)",
        "function_name": "[h2]日志主干特异性信息(应用主线程卡死超时)",
        "parent_text": "  [h2]日志主干特异性信息(应用主线程卡死超时) Reason是THREAD_BLOCK_6S的日志。根据前面的应用主线程卡死超时的原理可知，THREAD_BLOCK由THREAD_BLOCK_3S和THREAD_BLOCK_6S两部分组成。将两部分日志对比分析，可更准确的判断是卡死还是执行任务过多造成无法响应的情况。 THREAD_BLOCK_3S在日志的前部分，THREAD_BLOCK_6S在THREAD_BLOCK_3S后面写入。可以通过EVENTNAME字段搜索两个事件在日志中的位置。 两个事件中都包含MSG字段，该字段在应用主线程卡死超时故障中写入了当前主线程处理队列的信息，可查看在两个时间点中主线程事件处理队列排队情况。 示例日志显示了在Low priority的队列中05:06:18.145的事件一直在处理，THREAD_BLOCK_3S和THREAD_BLOCK_6S的队列都显示其存在。这说明主线程卡死不是任务过多情况。 由于THREAD_BLOCK_6S是主线程卡死，进程堆栈信息只需要关注主线程的堆栈(主线程线程号跟进程号相同)。当前示例日志主线程堆栈显示通过ArkUI控件到JS运行，说明卡死在Js代码中。3S和6S都是这个位置的堆栈，说明JS有卡死，但原因排除任务过多导致。 THREAD_BLOCK_3S：  THREAD_BLOCK_6S： start time: 2017/08/08-17:06:27:299\\nDOMAIN = AAFWK\\nEVENTNAME THREAD_BLOCK_6S\\nTIMESTAMP = 2017/08/08-17:06:27:292\\nPID = 1561\\nUID = 20010039\\nTID = 1566\\nPACKAGE_NAME com.example.myapplication\\nPROCESS NAME com.example.myapplication eventLog_action cmd:c,cmd:m,tr,k:SysRqFile\\neventLog_interval 10\\nMSG = App main thread is not response!EventHandler dump begin curTime:2017-08-08 05:06:27.291\\n  Event runner (Thread name =Thread ID =1561)is running\\n  Current Running:start at 2017-08-08 05:06:18.144, Event {send thread 1561,send time =2017-08-08 05:06:18.145,handle time =2017-08-08 05:\\n  Immediate priority event queue information:\\n  Total size of Immediate events 0\\n  High priority event queue information:\\n  No.1 Event send thread 1561,send time 2017-08-08 05:06:18.039,handle time 2017-08-08 05:06:21.539,task name [arr_handler.cpp(Se Total size of High events 1\\n  Low priority event queue information:\\n  No.1:Event{send thread=1566,send time=2017-08-0805:06:21.062,handle time=2017-08-0805:06:21.062,id=1}\\n  No.2 Event send thread 1566,send time 2017-08-08 05:06:24.369,handle time 2017-08-08 05:06:24.369,id =1\\n  Total size of Low events 2\\n  Idle priority event queue information:\\n  Total size of Idle events 0\\n  Total event size 3\\n\\nTimestamp:2017-08-0817:0k:27,4142447784\\nPid:1561\\nUid:20010039\\nProcess name:com.example.myapplication\\nTid:1561 Name:i.myapplication\\n  at anonymous entry (D:/project/MyApplication_test/entry/build/default/intermediates/loader_out/default/ets/pages/Index_.js:0:1)\\n  #00 pc 00178dcc /system/lib/libark_jsruntime.so\\n  #01 pc 00177ebb /system/lib/libark_jsruntime.so\\n  #02 pc 0024b4bb /system/lib/libark_jsruntime.so(panda:FunctionRef:Call(panda:ecmascript:EcmaVM const*,panda:Local<panda:JSValueRef>,par\\n  #03 pc 00fbed23 /system/lib/libace.z.so\\n  #04 pc 00d8208f /system/lib/libace.z.so\\n  #05 pc 00d7af1b /system/lib/libace.z.so 再结合流水日志查看当前应用侧是在执行哪块代码。 一般情况下可以查看以上通用日志信息内容，判断是否存在对端通信卡死，整机CPU消耗很高导致当前应用响应不过来，内存泄漏，内存非常多导致任务无法运行的情况。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"日志主干特异性信息应用主线程卡死超时\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459685__%E6%97%A5%E5%BF%97%E4%B8%BB%E5%B9%B2%E7%89%B9%E5%BC%82%E6%80%A7%E4%BF%A1%E6%81%AF%E5%BA%94%E7%94%A8%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%8D%A1%E6%AD%BB%E8%B6%85%E6%97%B6\\\"'></a><a name='\\\"%E6%97%A5%E5%BF%97%E4%B8%BB%E5%B9%B2%E7%89%B9%E5%BC%82%E6%80%A7%E4%BF%A1%E6%81%AF%E5%BA%94%E7%94%A8%E4%B8%BB%E7%BA%BF%E7%A8%8B%E5%8D%A1%E6%AD%BB%E8%B6%85%E6%97%B6\\\"'></a> <h4>[h2]日志主干特异性信息(应用主线程卡死超时)</h4> <p>Reason是THREAD_BLOCK_6S的日志。根据前面的<a href='\\\"#thread_block_6s-应用主线程卡死超时\\\"'>应用主线程卡死超时</a>的原理可知，THREAD_BLOCK由THREAD_BLOCK_3S和THREAD_BLOCK_6S两部分组成。将两部分日志对比分析，可更准确的判断是卡死还是执行任务过多造成无法响应的情况。</p> <p>THREAD_BLOCK_3S在日志的前部分，THREAD_BLOCK_6S在THREAD_BLOCK_3S后面写入。可以通过EVENTNAME字段搜索两个事件在日志中的位置。</p> <p>两个事件中都包含MSG字段，该字段在应用主线程卡死超时故障中写入了当前主线程处理队列的信息，可查看在两个时间点中主线程事件处理队列排队情况。</p> <p>示例日志显示了在Low priority的队列中05:06:18.145的事件一直在处理，THREAD_BLOCK_3S和THREAD_BLOCK_6S的队列都显示其存在。这说明主线程卡死不是任务过多情况。</p> <p>由于THREAD_BLOCK_6S是主线程卡死，进程堆栈信息只需要关注主线程的堆栈(主线程线程号跟进程号相同)。当前示例日志主线程堆栈显示通过ArkUI控件到JS运行，说明卡死在Js代码中。3S和6S都是这个位置的堆栈，说明JS有卡死，但原因排除任务过多导致。</p> <p>THREAD_BLOCK_3S：</p>  <p>THREAD_BLOCK_6S：</p> <pre class='\\\"screen\\\"'>start time: 2017/08/08-17:06:27:299\\nDOMAIN = AAFWK\\nEVENTNAME THREAD_BLOCK_6S\\nTIMESTAMP = 2017/08/08-17:06:27:292\\nPID = 1561\\nUID = 20010039\\nTID = 1566\\nPACKAGE_NAME com.example.myapplication\\nPROCESS NAME com.example.myapplication eventLog_action cmd:c,cmd:m,tr,k:SysRqFile\\neventLog_interval 10\\nMSG = App main thread is not response!EventHandler dump begin curTime:2017-08-08 05:06:27.291\\n  Event runner (Thread name =Thread ID =1561)is running\\n  Current Running:start at 2017-08-08 05:06:18.144, Event {send thread 1561,send time =2017-08-08 05:06:18.145,handle time =2017-08-08 05:\\n  Immediate priority event queue information:\\n  Total size of Immediate events 0\\n  High priority event queue information:\\n  No.1 Event send thread 1561,send time 2017-08-08 05:06:18.039,handle time 2017-08-08 05:06:21.539,task name [arr_handler.cpp(Se Total size of High events 1\\n  Low priority event queue information:\\n  No.1:Event{send thread=1566,send time=2017-08-0805:06:21.062,handle time=2017-08-0805:06:21.062,id=1}\\n  No.2 Event send thread 1566,send time 2017-08-08 05:06:24.369,handle time 2017-08-08 05:06:24.369,id =1\\n  Total size of Low events 2\\n  Idle priority event queue information:\\n  Total size of Idle events 0\\n  Total event size 3\\n\\nTimestamp:2017-08-0817:0k:27,4142447784\\nPid:1561\\nUid:20010039\\nProcess name:com.example.myapplication\\nTid:1561 Name:i.myapplication\\n  at anonymous entry (D:/project/MyApplication_test/entry/build/default/intermediates/loader_out/default/ets/pages/Index_.js:0:1)\\n  #00 pc 00178dcc /system/lib/libark_jsruntime.so\\n  #01 pc 00177ebb /system/lib/libark_jsruntime.so\\n  #02 pc 0024b4bb /system/lib/libark_jsruntime.so(panda:FunctionRef:Call(panda:ecmascript:EcmaVM const*,panda:Local&lt;panda:JSValueRef&gt;,par\\n  #03 pc 00fbed23 /system/lib/libace.z.so\\n  #04 pc 00d8208f /system/lib/libace.z.so\\n  #05 pc 00d7af1b /system/lib/libace.z.so</pre> <p>再结合流水日志查看当前应用侧是在执行哪块代码。</p> <p>一般情况下可以查看以上<a href='\\\"#日志主干通用信息\\\"'>通用日志信息</a>内容，判断是否存在对端通信卡死，整机CPU消耗很高导致当前应用响应不过来，内存泄漏，内存非常多导致任务无法运行的情况。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/appfreeze-guidelines.html"
    },
    {
        "id": 367,
        "pre": "mainHandler dump is:\\n EventHandler dump begin curTime: 2024-08-08 12:17:43.544      --> 开始 dump 时间\\n Event runner (Thread name = , Thread ID = 35854) is running   --> 正在运行的线程信息\\n Current Running: start at 2024-08-08 12:17:16.629, Event { send thread = 35882, send time = 2024-08-08 12:17:16.628,  handle time = 2024-08-08 12:17:16.629, trigger time = 2024-08-08 12:17:16.630, task name = , caller = xx }  \\n --> trigger time--> 任务开始运行的时间",
        "type": "Reference",
        "function_call": "cpp(Timer:156)",
        "function_name": "[h2]查看 eventHandler 信息",
        "parent_text": "  [h2]查看 eventHandler 信息 开发者可以通过 “mainHandler dump is” 关键字搜索日志中的 eventHandler dump 信息。 1、dump begin curTime & Current Running。  当前任务运行时长 = dump begin curTime - trigger time, 如示例中当前任务运行达到27s。 若任务运行时长 > 故障检测时长，表示当前正在运行的任务是导致应用卡死的任务，需对该任务进行排查。 若任务运行时长较小，表示当前任务仅是检测时间区间内主线程运行的任务之一，主要耗时不一定是该任务，建议优先查看近期耗时最长任务（History event queue information中）。该情形多为线程繁忙导致的watchdog无法调度执行。 2、 History event queue information。  Current Running: start at 2024-08-08 12:17:16.629, Event { send thread = 35882, send time = 2024-08-08 12:17:16.628, handle time = 2024-08-08 12:17:16.629, trigger time = 2024-08-08 12:17:16.630, task name = , caller = [extension_ability_thread.cpp(ScheduleAbilityTransaction:393)]}\\n History event queue information:\\n No. 0 : Event { send thread = 35854, send time = 2024-08-08 12:17:15.525, handle time = 2024-08-08 12:17:15.525, trigger time = 2024-08-08 12:17:15.527, completeTime time = 2024-08-08 12:17:15.528, priority = High, id = 1 }\\n No. 1 : Event { send thread = 35854, send time = 2024-08-08 12:17:15.525, handle time = 2024-08-08 12:17:15.525, trigger time = 2024-08-08 12:17:15.527, completeTime time = 2024-08-08 12:17:15.527, priority = Low, task name = MainThread:SetRunnerStarted }\\n No. 2 : Event { send thread = 35856, send time = 2024-08-08 12:17:15.765, handle time = 2024-08-08 12:17:15.765, trigger time = 2024-08-08 12:17:15.766, completeTime time = 2024-08-08 12:17:15.800, priority = Low, task name = MainThread:LaunchApplication }\\n No. 3 : Event { send thread = 35856, send time = 2024-08-08 12:17:15.767, handle time = 2024-08-08 12:17:15.767, trigger time = 2024-08-08 12:17:15.800, completeTime time = 2024-08-08 12:17:16.629, priority = Low, task name = MainThread:LaunchAbility }\\n No. 4 : Event { send thread = 35854, send time = 2024-08-08 12:17:15.794, handle time = 2024-08-08 12:17:15.794, trigger time = 2024-08-08 12:17:16.629, completeTime time = 2024-08-08 12:17:16.629, priority = IDEL, task name = IdleTime:PostTask }\\n No. 5 : Event { send thread = 35852, send time = 2024-08-08 12:17:16.629, handle time = 2024-08-08 12:17:16.629, trigger time = 2024-08-08 12:17:16.629, completeTime time = , priority = Low, task name =  } 可以从历史任务队列中寻找故障发生时间区间内较为耗时的任务。其中CompleteTime time 为空的任务是当前任务。 任务运行耗时 = CompleteTime time - trigger time。 筛选出耗时较高的任务，排查其运行情况。 3、VIP priority event queue information。  VIP priority event queue information:\\n No. 1 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.407, handle time = 2024-08-07 04:11:15.407, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 2 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.407, handle time = 2024-08-07 04:11:15.407, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 3 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.407, handle time = 2024-08-07 04:11:15.407, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 4 : Event { send thread = 3961, send time = 2024-08-07 04:11:15.408, handle time = 2024-08-07 04:11:15.408, task name = MMI::OnPointerEvent, caller = [input_manager_impl.cpp (OnPointerEvent:493)]}\\n No. 5 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.408, handle time = 2024-08-07 04:11:15.408, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 6 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.409, handle time = 2024-08-07 04:11:15.409, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 7 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.409, handle time = 2024-08-07 04:11:15.409, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 8 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.409, handle time = 2024-08-07 04:11:15.409, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 9 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.410, handle time = 2024-08-07 04:11:15.410, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n ... 为保障第一时间响应用户，用户输入事件传递链中的任务都属于高优先级任务。此任务事件队列均由系统创建，通常记录用户输入->屏幕->窗口->ArkUI->应用的传输过程，与三方应用事件无关，开发者无需额外关注。 4、High priority event queue information。  High priority event queue information:\\n No. 1 : Event { send thread = 35862, send time = 2024-08-08 12:17:25.526, handle time = 2024-08-08 12:17:25.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 2 : Event { send thread = 35862, send time = 2024-08-08 12:17:28.526, handle time = 2024-08-08 12:17:28.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 3 : Event { send thread = 35862, send time = 2024-08-08 12:17:31.526, handle time = 2024-08-08 12:17:31.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 4 : Event { send thread = 35862, send time = 2024-08-08 12:17:34.530, handle time = 2024-08-08 12:17:34.530, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 5 : Event { send thread = 35862, send time = 2024-08-08 12:17:37.526, handle time = 2024-08-08 12:17:37.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 6 : Event { send thread = 35862, send time = 2024-08-08 12:17:40.526, handle time = 2024-08-08 12:17:40.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 7 : Event { send thread = 35862, send time = 2024-08-08 12:17:43.544, handle time = 2024-08-08 12:17:43.544 ,id = 1, caller = [watchdog.cpp(Timer:156)]}\\n Total size of High events : 7 watchdog 任务位于此优先级队列中，观察 watchdog 任务队列发现其是每隔 3s 发送一次。 对比 warning/block 事件，观察 watchdog 任务在队列中的移动情况。 warning:  High priority event queue information:\\n No. 1 : Event { send thread = 35862, send time = 2024-08-08 12:17:25.526, handle time = 2024-08-08 12:17:25.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 2 : Event { send thread = 35862, send time = 2024-08-08 12:17:28.526, handle time = 2024-08-08 12:17:28.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 3 : Event { send thread = 35862, send time = 2024-08-08 12:17:31.526, handle time = 2024-08-08 12:17:31.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 4 : Event { send thread = 35862, send time = 2024-08-08 12:17:34.530, handle time = 2024-08-08 12:17:34.530, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n Total size of High events : 4 block:  High priority event queue information:\\n No. 1 : Event { send thread = 35862, send time = 2024-08-08 12:17:25.526, handle time = 2024-08-08 12:17:25.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 2 : Event { send thread = 35862, send time = 2024-08-08 12:17:28.526, handle time = 2024-08-08 12:17:28.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 3 : Event { send thread = 35862, send time = 2024-08-08 12:17:31.526, handle time = 2024-08-08 12:17:31.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 4 : Event { send thread = 35862, send time = 2024-08-08 12:17:34.530, handle time = 2024-08-08 12:17:34.530, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 5 : Event { send thread = 35862, send time = 2024-08-08 12:17:37.526, handle time = 2024-08-08 12:17:37.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n  Total size of High events : 5 以上示例中可发现 block 队列相比于 warning 队列更长了，而对应的第一个任务没有发生变化，可能存在两种情况：  当前正在运行的任务卡死阻塞，导致其他任务一直未被调度执行； 更高优先级队列中任务堆积，导致位于较低优先级队列中的 watchdog 任务未被调度执行。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"查看-eventhandler-信息\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459685__%E6%9F%A5%E7%9C%8B-eventhandler-%E4%BF%A1%E6%81%AF\\\"'></a><a name='\\\"%E6%9F%A5%E7%9C%8B-eventhandler-%E4%BF%A1%E6%81%AF\\\"'></a> <h4>[h2]查看 eventHandler 信息</h4> <p>开发者可以通过 “mainHandler dump is” 关键字搜索日志中的 eventHandler dump 信息。</p> <p>1、dump begin curTime &amp; Current Running。</p>  <p>当前任务运行时长 = dump begin curTime - trigger time, 如示例中当前任务运行达到27s。</p> <p>若任务运行时长 &gt; 故障检测时长，表示当前正在运行的任务是导致应用卡死的任务，需对该任务进行排查。</p> <p>若任务运行时长较小，表示当前任务仅是检测时间区间内主线程运行的任务之一，主要耗时不一定是该任务，建议优先查看近期耗时最长任务（History event queue information中）。该情形多为线程繁忙导致的watchdog无法调度执行。</p> <p>2、 History event queue information。</p> <pre class='\\\"screen\\\"'> Current Running: start at 2024-08-08 12:17:16.629, Event { send thread = 35882, send time = 2024-08-08 12:17:16.628, handle time = 2024-08-08 12:17:16.629, trigger time = 2024-08-08 12:17:16.630, task name = , caller = [extension_ability_thread.cpp(ScheduleAbilityTransaction:393)]}\\n History event queue information:\\n No. 0 : Event { send thread = 35854, send time = 2024-08-08 12:17:15.525, handle time = 2024-08-08 12:17:15.525, trigger time = 2024-08-08 12:17:15.527, completeTime time = 2024-08-08 12:17:15.528, priority = High, id = 1 }\\n No. 1 : Event { send thread = 35854, send time = 2024-08-08 12:17:15.525, handle time = 2024-08-08 12:17:15.525, trigger time = 2024-08-08 12:17:15.527, completeTime time = 2024-08-08 12:17:15.527, priority = Low, task name = MainThread:SetRunnerStarted }\\n No. 2 : Event { send thread = 35856, send time = 2024-08-08 12:17:15.765, handle time = 2024-08-08 12:17:15.765, trigger time = 2024-08-08 12:17:15.766, completeTime time = 2024-08-08 12:17:15.800, priority = Low, task name = MainThread:LaunchApplication }\\n No. 3 : Event { send thread = 35856, send time = 2024-08-08 12:17:15.767, handle time = 2024-08-08 12:17:15.767, trigger time = 2024-08-08 12:17:15.800, completeTime time = 2024-08-08 12:17:16.629, priority = Low, task name = MainThread:LaunchAbility }\\n No. 4 : Event { send thread = 35854, send time = 2024-08-08 12:17:15.794, handle time = 2024-08-08 12:17:15.794, trigger time = 2024-08-08 12:17:16.629, completeTime time = 2024-08-08 12:17:16.629, priority = IDEL, task name = IdleTime:PostTask }\\n No. 5 : Event { send thread = 35852, send time = 2024-08-08 12:17:16.629, handle time = 2024-08-08 12:17:16.629, trigger time = 2024-08-08 12:17:16.629, completeTime time = , priority = Low, task name =  }</pre> <p>可以从历史任务队列中寻找故障发生时间区间内较为耗时的任务。其中CompleteTime time 为空的任务是当前任务。</p> <p>任务运行耗时 = CompleteTime time - trigger time。</p> <p>筛选出耗时较高的任务，排查其运行情况。</p> <p>3、VIP priority event queue information。</p> <pre class='\\\"screen\\\"'> VIP priority event queue information:\\n No. 1 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.407, handle time = 2024-08-07 04:11:15.407, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 2 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.407, handle time = 2024-08-07 04:11:15.407, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 3 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.407, handle time = 2024-08-07 04:11:15.407, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 4 : Event { send thread = 3961, send time = 2024-08-07 04:11:15.408, handle time = 2024-08-07 04:11:15.408, task name = MMI::OnPointerEvent, caller = [input_manager_impl.cpp (OnPointerEvent:493)]}\\n No. 5 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.408, handle time = 2024-08-07 04:11:15.408, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 6 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.409, handle time = 2024-08-07 04:11:15.409, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 7 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.409, handle time = 2024-08-07 04:11:15.409, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 8 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.409, handle time = 2024-08-07 04:11:15.409, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n No. 9 : Event { send thread = 3205, send time = 2024-08-07 04:11:15.410, handle time = 2024-08-07 04:11:15.410, task name = ArkUIWindowInjectPointerEvent, caller = [task_runner_adapter_impl.cpp(PostTask:33)]}\\n ...</pre> <p>为保障第一时间响应用户，用户输入事件传递链中的任务都属于高优先级任务。此任务事件队列均由系统创建，通常记录用户输入-&gt;屏幕-&gt;窗口-&gt;ArkUI-&gt;应用的传输过程，与三方应用事件无关，开发者无需额外关注。</p> <p>4、High priority event queue information。</p> <pre class='\\\"screen\\\"'> High priority event queue information:\\n No. 1 : Event { send thread = 35862, send time = 2024-08-08 12:17:25.526, handle time = 2024-08-08 12:17:25.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 2 : Event { send thread = 35862, send time = 2024-08-08 12:17:28.526, handle time = 2024-08-08 12:17:28.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 3 : Event { send thread = 35862, send time = 2024-08-08 12:17:31.526, handle time = 2024-08-08 12:17:31.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 4 : Event { send thread = 35862, send time = 2024-08-08 12:17:34.530, handle time = 2024-08-08 12:17:34.530, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 5 : Event { send thread = 35862, send time = 2024-08-08 12:17:37.526, handle time = 2024-08-08 12:17:37.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 6 : Event { send thread = 35862, send time = 2024-08-08 12:17:40.526, handle time = 2024-08-08 12:17:40.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 7 : Event { send thread = 35862, send time = 2024-08-08 12:17:43.544, handle time = 2024-08-08 12:17:43.544 ,id = 1, caller = [watchdog.cpp(Timer:156)]}\\n Total size of High events : 7</pre> <p>watchdog 任务位于此优先级队列中，观察 watchdog 任务队列发现其是每隔 3s 发送一次。</p> <p>对比 warning/block 事件，观察 watchdog 任务在队列中的移动情况。</p> <p>warning:</p> <pre class='\\\"screen\\\"'> High priority event queue information:\\n No. 1 : Event { send thread = 35862, send time = 2024-08-08 12:17:25.526, handle time = 2024-08-08 12:17:25.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 2 : Event { send thread = 35862, send time = 2024-08-08 12:17:28.526, handle time = 2024-08-08 12:17:28.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 3 : Event { send thread = 35862, send time = 2024-08-08 12:17:31.526, handle time = 2024-08-08 12:17:31.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 4 : Event { send thread = 35862, send time = 2024-08-08 12:17:34.530, handle time = 2024-08-08 12:17:34.530, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n Total size of High events : 4</pre> <p>block:</p> <pre class='\\\"screen\\\"'> High priority event queue information:\\n No. 1 : Event { send thread = 35862, send time = 2024-08-08 12:17:25.526, handle time = 2024-08-08 12:17:25.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 2 : Event { send thread = 35862, send time = 2024-08-08 12:17:28.526, handle time = 2024-08-08 12:17:28.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 3 : Event { send thread = 35862, send time = 2024-08-08 12:17:31.526, handle time = 2024-08-08 12:17:31.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 4 : Event { send thread = 35862, send time = 2024-08-08 12:17:34.530, handle time = 2024-08-08 12:17:34.530, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n No. 5 : Event { send thread = 35862, send time = 2024-08-08 12:17:37.526, handle time = 2024-08-08 12:17:37.526, id = 1, caller = [watchdog.cpp(Timer:156)]}\\n  Total size of High events : 5</pre> <p>以上示例中可发现 block 队列相比于 warning 队列更长了，而对应的第一个任务没有发生变化，可能存在两种情况：</p> <ul> <li>当前正在运行的任务卡死阻塞，导致其他任务一直未被调度执行；</li> <li>更高优先级队列中任务堆积，导致位于较低优先级队列中的 watchdog 任务未被调度执行。</li> </ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/appfreeze-guidelines.html"
    },
    {
        "id": 368,
        "pre": "import { systemShare } from '@kit.ShareKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { common } from '@kit.AbilityKit';\\nimport { image } from '@kit.ImageKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Component\\nexport default struct Index {\\n  private async share() {\\n    // 生成应用图标缩略图\\n    const contextFaker: Context = getContext(this);\\n    let thumbnailPath = contextFaker.filesDir + '/exampleImage.jpg'; // 仅为示例 请替换正确的文件路径\\n    const imageSourceApi: image.ImageSource = image.createImageSource(thumbnailPath);\\n    let opts: image.InitializationOptions = { size: { height: 6, width: 6 } }\\n    const pixelMap: image.PixelMap = await imageSourceApi.createPixelMap(opts);\\n    const imagePackerApi: image.ImagePacker = image.createImagePacker();\\n    const buffer: ArrayBuffer = await imagePackerApi.packing(pixelMap, {\\n      // 当前只支持'image/jpeg','image/webp'和'image/png'类型图片.\\n      format: 'image/jpeg',\\n      // JPEG编码中设定输出图片质量的参数,取值范围为0-100.\\n      // 建议适当压缩,图片过大无法拉起分享.\\n      quality: 30\\n    });\\n    // 构造ShareData，需配置一条有效数据信息\\n    let shareData: systemShare.SharedData = new systemShare.SharedData({\\n      utd: utd.UniformDataType.HYPERLINK,\\n      // App Linking链接 仅为示例\\n      content: 'https://sharekitdemo.drcn.agconnect.link/ZB3p',\\n      title: '应用名称', // 不传title时 显示链接\\n      description: '应用描述', // 不传则不显示描述内容\\n      thumbnail: new Uint8Array(buffer) // 推荐传入应用图标 不传则显示默认html图标\\n    });\\n    // 进行分享面板显示\\n    let controller: systemShare.ShareController = new systemShare.ShareController(shareData);\\n    let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n    controller.show(context, {\\n      previewMode: systemShare.SharePreviewMode.DEFAULT,\\n      selectionMode: systemShare.SelectionMode.SINGLE\\n    }).then(() => {\\n      console.info('ShareController show success.');\\n    }).catch((error: BusinessError) => {\\n      console.error(`ShareController show error. code: ${error.code}, message: ${error.message}`);\\n    });\\n  }\\n\\n  build() {\\n    Button('分享')\\n      .onClick(() => this.share())\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "使用App Linking发起系统分享。 ",
        "import_module": null,
        "parent": "<li>使用App Linking发起系统分享。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-utd-link.html"
    },
    {
        "id": 369,
        "pre": "import { systemShare } from '@kit.ShareKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相关模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-utd-link.html"
    },
    {
        "id": 370,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-no-stringify-in-lazyforeach-key-generator\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-stringify-lazyforeach-key.html"
    },
    {
        "id": 371,
        "pre": "//源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n// 此处为复用的自定义组件\\n@Reusable\\n@Component\\nstruct ChildComponent {\\n  @State desc: string = '';\\n  @State sum: number = 0;\\n  @State avg: number = 0;\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.desc = params.desc as string;\\n    this.sum = params.sum as number;\\n    this.avg = params.avg as number;\\n  }\\n  build() {\\n    Column() {\\n      Text('子组件' + this.desc)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('结果' + this.sum)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('平均值' + this.avg)\\n        .fontSize(30)\\n        .fontWeight(30)\\n    }\\n  }\\n}\\nclass Item {\\n  advertInfos: Model[] = []\\n  productPrice: PriceInfo[] = []\\n  addresses: string[] = []\\n  id: string = ''\\n}\\nclass Model {\\n  pictureUrl: string = \\\"\\\"\\n  name: string = \\\"\\\"\\n  comments: string = \\\"\\\"\\n  desc: string = \\\"\\\"\\n  linkParam: string = \\\"\\\"\\n  mcInfo: string = \\\"\\\"\\n  label: string = \\\"\\\"\\n  cgType: string = \\\"\\\"\\n  constructor(pictureUrl: string, name: string, comments: string, desc: string, linkParam: string, mcInfo: string,\\n    label: string, cgType: string) {\\n    this.pictureUrl = pictureUrl;\\n    this.name = name;\\n    this.comments = comments;\\n    this.desc = desc;\\n    this.linkParam = linkParam;\\n    this.mcInfo = mcInfo;\\n    this.label = label;\\n    this.cgType = cgType;\\n  }\\n}\\nclass PriceInfo {\\n  price: number = 0;\\n  level: number = 1;\\n  constructor(price: number, level: number) {\\n    this.price = price;\\n    this.level = level;\\n  }\\n}\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource();\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 20; index++) {\\n      let item = new Item()\\n      for (let i = 0; i < 1000; i++) {\\n        item.advertInfos.push(new Model(\\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\"));\\n        item.productPrice.push(new PriceInfo(1.99, 123456));\\n        item.addresses.push(\\\"Beijing\\\")\\n      }\\n      item.id = index.toString();\\n      this.data.pushData(item)\\n    }\\n  }\\n  build() {\\n    Column() {\\n      Text('Use the unique ID of an item as the key')\\n        .fontSize(12)\\n        .height('16')\\n        .margin({\\n          top: 5,\\n          bottom: 10\\n        })\\n      List() {\\n        LazyForEach(this.data, (item: Item) => {\\n          ListItem() {\\n            ChildComponent({ desc: item.id, sum: 0, avg: 0 })\\n          }\\n          .width('100%')\\n          .height('10%')\\n          .border({ width: 1 })\\n          .borderStyle(BorderStyle.Dashed)\\n        }, (item: Item) => item.id.toString())\\n      }\\n      .height('100%')\\n      .width('100%')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-stringify-lazyforeach-key.html"
    },
    {
        "id": 372,
        "pre": "//源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n// 此处为复用的自定义组件\\n@Reusable\\n@Component\\nstruct ChildComponent {\\n  @State desc: string = '';\\n  @State sum: number = 0;\\n  @State avg: number = 0;\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.desc = params.desc as string;\\n    this.sum = params.sum as number;\\n    this.avg = params.avg as number;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('子组件' + this.desc)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('结果' + this.sum)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('平均值' + this.avg)\\n        .fontSize(30)\\n        .fontWeight(30)\\n    }\\n  }\\n}\\n\\nclass Item {\\n  advertInfos: Model[] = []\\n  productPrice: PriceInfo[] = []\\n  addresses: string[] = []\\n  id: string = ''\\n}\\n\\nclass Model {\\n  pictureUrl: string = \\\"\\\"\\n  name: string = \\\"\\\"\\n  comments: string = \\\"\\\"\\n  desc: string = \\\"\\\"\\n  linkParam: string = \\\"\\\"\\n  mcInfo: string = \\\"\\\"\\n  label: string = \\\"\\\"\\n  cgType: string = \\\"\\\"\\n\\n  constructor(pictureUrl: string, name: string, comments: string, desc: string, linkParam: string, mcInfo: string,\\n    label: string, cgType: string) {\\n    this.pictureUrl = pictureUrl;\\n    this.name = name;\\n    this.comments = comments;\\n    this.desc = desc;\\n    this.linkParam = linkParam;\\n    this.mcInfo = mcInfo;\\n    this.label = label;\\n    this.cgType = cgType;\\n  }\\n}\\n\\nclass PriceInfo {\\n  price: number = 0;\\n  level: number = 1;\\n\\n  constructor(price: number, level: number) {\\n    this.price = price;\\n    this.level = level;\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 20; index++) {\\n      let item = new Item()\\n      for (let i = 0; i < 1000; i++) {\\n        item.advertInfos.push(new Model(\\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\", \\\"Product A\\\"));\\n        item.productPrice.push(new PriceInfo(1.99, 123456));\\n        item.addresses.push(\\\"Beijing\\\")\\n      }\\n      item.id = index.toString();\\n      this.data.pushData(item)\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('Use the time-consuming function `JSON.stringify (item)` to generate a key')\\n        .fontSize(12)\\n        .height('16')\\n        .margin({\\n          top: 5,\\n          bottom: 10\\n        })\\n      List() {\\n        LazyForEach(this.data, (item: Item) => {\\n          ListItem() {\\n            ChildComponent({ desc: item.id, sum: 0, avg: 0 })\\n          }\\n          .width('100%')\\n          .height('10%')\\n          .border({ width: 1 })\\n          .borderStyle(BorderStyle.Dashed)\\n        }, (item: Item) => JSON.stringify(item))\\n      }\\n      .height('100%')\\n      .width('100%')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-stringify-lazyforeach-key.html"
    },
    {
        "id": 373,
        "pre": "import { pushService } from '@kit.PushKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { UIAbility, AbilityConstant, Want } from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入pushService模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入pushService模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-get-token.html"
    },
    {
        "id": 374,
        "pre": "import { pushService } from '@kit.PushKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入pushService模块 ",
        "import_module": "import { pushService } from '@kit.PushKit';",
        "parent": "<li><span>导入pushService模块</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-get-token.html"
    },
    {
        "id": 375,
        "pre": "import { ssap } from '@kit.NearLinkKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/nearlink-ssap-client-connect.html"
    },
    {
        "id": 376,
        "pre": "import { cloudFunction } from '@kit.CloudFoundationKit'\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在代码文件中引入Cloud Foundation Kit。 ",
        "import_module": null,
        "parent": "<li id='\\\"li278184415216\\\"'>在代码文件中引入Cloud Foundation Kit。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/agc-harmonyos-clouddev-invokecloudfunc.html"
    },
    {
        "id": 377,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-ts-expect-error\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-ts-expect-error.html"
    },
    {
        "id": 378,
        "pre": "// @ts-ignore\\nconst str: string = 1;\\n\\n/**\\n * Explaining comment\\n *\\n * @ts-ignore */\\nconst multiLine: number = 'value';\\n\\n/** @ts-ignore */\\nconst block: string = 1;\\n\\nconst isOptionEnabled = (key: string): boolean => {\\n  // @ts-ignore: if key isn't in globalOptions it'll be undefined which is false\\n  return !!globalOptions[key];\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-ts-expect-error.html"
    },
    {
        "id": 379,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/comma-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-comma-spacing-stylistic.html"
    },
    {
        "id": 380,
        "pre": "export {bar, arr};\\n\\nfunction bar(param1: string, param2: string) {\\n  return [param1, param2];\\n}\\nconst arr = ['s1', 's2', 's3', 's4'];",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-comma-spacing-stylistic.html"
    },
    {
        "id": 381,
        "pre": "export {arr};\\n// A space is required after ','.\\n// There should be no space before ','.\\nconst arr = ['s1' ,'s2' ,'s3'];",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-comma-spacing-stylistic.html"
    },
    {
        "id": 382,
        "pre": "// 在使用Wear Engine服务前，请导入WearEngine与相关模块\\nimport { wearEngine } from '@kit.WearEngine';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n// 步骤1：获取AuthClient对象\\nlet authClient: wearEngine.AuthClient = wearEngine.getAuthClient(getContext(this));\\n\\n// 步骤2：基于需要用户授权的权限定义权限请求类\\nlet request: wearEngine.AuthorizationRequest = {\\n  permissions: [wearEngine.Permission.USER_STATUS]\\n}\\n\\n// 步骤3：请求用户授权\\nauthClient.requestAuthorization(request).then(result => {\\n  console.info(`Succeeded in requesting authorize, authorized permissions is ${result.permissions}`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to request authorize. Code is ${error.code}, message is ${error.message}`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用requestAuthorization方法，向用户请求权限。执行成功后，会弹出授权界面，让用户选择授予权限（若未登录华为账号则会先弹出登录界面）。当用户允许后才能正常使用接口，否则会遇到错误码为201的提示。      请确保向用户请求的权限已在申请接入Wear Engine服务中审批通过，否则会遇到错误码为1008500004的提示。 该功能可以多次调用，如果申请的权限之前已经授予了，不会再弹出授权页面，接口会返回已经授权的权限。 通过入参的AuthorizationRequest对象，获取应用需要的权限。参见权限说明了解应用所需请求的权限类型。 通过AuthorizationResponse对象，返回用户的授权结果。     ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section172541457203810\\\"' target='\\\"_blank\\\"'>requestAuthorization</a>方法，向用户请求权限。执行成功后，会弹出授权界面，让用户选择授予权限（若未登录华为账号则会先弹出登录界面）。当用户允许后才能正常使用接口，否则会遇到错误码为201的提示。</span><p></p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121038.34018835894326053310999745677322:50001231000000:2800:463332EDEA6912FADA387E2156C95E023F84916A9BFFF259F98946BCB16B0B2B.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ul> <li>请确保向用户请求的权限已在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/wearengine_apply\\\"'>申请接入Wear Engine服务</a>中审批通过，否则会遇到错误码为1008500004的提示。</li> <li>该功能可以多次调用，如果申请的权限之前已经授予了，不会再弹出授权页面，接口会返回已经授权的权限。</li> <li>通过入参的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section12513135291215\\\"' target='\\\"_blank\\\"'>AuthorizationRequest</a>对象，获取应用需要的权限。参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/wearengine_apply#zh-cn_topic_0000001073008985_table99191256194614\\\"'>权限说明</a>了解应用所需请求的权限类型。</li> <li>通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1536013509131\\\"' target='\\\"_blank\\\"'>AuthorizationResponse</a>对象，返回用户的授权结果。</li> </ul> </div> </div>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/request_user_authorization.html"
    },
    {
        "id": 383,
        "pre": "// 在使用Wear Engine服务前，请导入WearEngine与相关模块\\nimport { wearEngine } from '@kit.WearEngine';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n// 步骤1：获取AuthClient对象\\nlet authClient: wearEngine.AuthClient = wearEngine.getAuthClient(getContext(this));\\n\\n// 步骤2：调用API查询已授权权限\\nauthClient.getAuthorization().then(result => {\\n  console.info(`Succeeded in getting authorized permissions, authorized permissions is ${result.permissions}`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to get authorized permissions. Code is ${error.code}, message is ${error.message}`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用getAuthorization方法，查询用户已授权的权限。 ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section36125238476\\\"' target='\\\"_blank\\\"'>getAuthorization</a>方法，查询用户已授权的权限。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/request_user_authorization.html"
    },
    {
        "id": 384,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit';\\nimport { paymentService } from '@kit.PaymentKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  requestContractPromise() {\\n    // use your own contractStr \\n    const contractStr = '{\\\"appId\\\":\\\"***\\\",\\\"preSignNo\\\":\\\"***\\\"}';\\n    paymentService.requestContract(this.context, contractStr)\\n      .then(() => {\\n        // succeeded in signing\\n        console.info('succeeded in signing');\\n      })\\n      .catch((error: BusinessError) => {\\n        // failed to sign\\n        console.error(`failed to sign, error.code: ${error.code}, error.message: ${error.message}`);\\n      });\\n  }\\n\\n  build() {\\n    Column() {\\n      Button('requestContractPromise')\\n        .type(ButtonType.Capsule)\\n        .width('50%')\\n        .margin(20)\\n        .onClick(() => {\\n          this.requestContractPromise();\\n        })\\n      }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": "catch()",
        "function_name": "[h2]拉起华为支付签约收银台（端侧开发）",
        "parent_text": "  [h2]拉起华为支付签约收银台（端侧开发） 商户客户端使用contractStr作为参数调用requestContract接口拉起Payment Kit签约收银台。 当接口通过.then()方法返回时，则表示当前订单支付成功，通过.catch()方法返回表示订单支付失败。当此次请求有异常时，可通过error.code获取错误码，错误码相关信息请参见错误码。示例代码如下：       如果用户没有提前登录，系统会自动拉起华为账号登录页面让用户登录。 签约成功，不建议以客户端返回作为用户的签约结果，需以服务器接收到的结果通知或者查询API返回为准。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section19371156173617\\\"'> <a name='\\\"section19371156173617\\\"'></a><a name='\\\"section19371156173617\\\"'></a> <h4>[h2]拉起华为支付签约收银台（端侧开发）</h4> <p>商户客户端使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/payment-model#section01944104716\\\"' target='\\\"_blank\\\"'>contractStr</a>作为参数调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/payment-paymentservice#section176908331459\\\"' target='\\\"_blank\\\"'>requestContract</a>接口拉起Payment Kit签约收银台。</p> <p>当接口通过.then()方法返回时，则表示当前订单支付成功，通过.catch()方法返回表示订单支付失败。当此次请求有异常时，可通过<strong>error.code</strong>获取错误码，错误码相关信息请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/payment-error-code\\\"' target='\\\"_blank\\\"'>错误码</a>。示例代码如下：</p>  <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120205.31712282701431956686115630545808:50001231000000:2800:ED0BD83B2EED60A896F3629E77ED716A32CCA130803FD6E9BD83C1A2576B3A8C.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ul> <li>如果用户没有提前登录，系统会自动拉起华为账号登录页面让用户登录。</li> <li>签约成功，不建议以客户端返回作为用户的签约结果，需以服务器接收到的结果通知或者查询API返回为准。</li> </ul> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-withhold-process.html"
    },
    {
        "id": 385,
        "pre": "import { map, mapCommon, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-coverings.html"
    },
    {
        "id": 386,
        "pre": "let photoSelectOptions = new picker.PhotoSelectOptions();\\nphotoSelectOptions.MIMEType = picker.PhotoViewMIMETypes.IMAGE_TYPE;\\nphotoSelectOptions.maxSelectNumber = 1;\\nlet hdrpixelMap : PixelMap|undefined = undefined;\\nlet photoPicker = new picker.PhotoViewPicker();\\nphotoPicker.select(photoSelectOptions).then((photoSelectResult: picker.PhotoSelectResult) => {\\n    console.info('PhotoViewPicker.select successfully, photoSelectResult uri: ' + JSON.stringify(photoSelectResult));\\n    console.info('PhotoViewPicker.select successfully, photoSelectResult 0 uri: ' + photoSelectResult.photoUris[0]);\\n    let fd = fs.openSync(photoSelectResult.photoUris[0], fs.OpenMode.READ_ONLY);\\n    const imageSource = image.createImageSource(fd.fd);\\n    let options:image.DecodingOptions = {};\\n    options.index = 0;\\n    options.desiredDynamicRange = image.DecodingDynamicRange.HDR;\\n    imageSource.createPixelMap(options).then(async (pixelMap) => {\\n        hdrpixelMap = pixelmap })\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过解码器获取10 bit的PixelMap。 ",
        "import_module": null,
        "parent": "<li>通过解码器获取10 bit的PixelMap。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hdr-single-to-dual.html"
    },
    {
        "id": 387,
        "pre": "import { formBindingData, formInfo, FormExtensionAbility } from '@kit.FormKit';\\nimport { Want } from '@kit.AbilityKit';\\n\\nexport default class EntryFormAbility extends FormExtensionAbility {\\n  onAddForm(want: Want): formBindingData.FormBindingData {\\n    // 获取formId\\n    const formId = want.parameters![formInfo.FormParam.IDENTITY_KEY] as string;\\n\\n    // 定义需要在WidgetCard中刷新的字段\\n    class CreateFormData {\\n      formId: string = '';\\n      text_key: string = '';\\n      image_key: string = '';\\n    }\\n\\n    const obj: CreateFormData = {\\n      formId: formId,\\n      text_key: '默认文本',\\n      image_key: ''\\n    }\\n    const bindingData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\\n\\n    // 定义需要通过Push Kit代理刷新的字段，每个key均需要在上面bindingData中定义\\n    const text_key: formBindingData.ProxyData = {\\n      key: 'text_key',\\n      subscriberId: formId\\n    };\\n    const image_key: formBindingData.ProxyData = {\\n      key: 'image_key',\\n      subscriberId: formId\\n    };\\n    bindingData.proxies = [text_key, image_key];\\n    return bindingData;\\n  }\\n}",
        "type": "Reference",
        "function_call": "onAddForm()",
        "function_name": null,
        "parent_text": "在卡片生命周期管理文件（下以EntryFormAbility为例）的onAddForm()回调中获取formId，定义需要在卡片页面文件（下以WidgetCard为例）中和通过Push Kit要刷新的字段，如下以text_key和image_key为例。 ",
        "import_module": null,
        "parent": "<li><span>在卡片生命周期管理文件（下以EntryFormAbility为例）的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-form-formextensionability#formextensionabilityonaddform\\\"' target='\\\"_blank\\\"'>onAddForm()</a>回调中获取<strong>formId</strong>，定义需要在卡片页面文件（下以WidgetCard为例）中和通过Push Kit要刷新的字段，如下以<strong>text_key</strong>和<strong>image_key</strong>为例。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-form-update.html"
    },
    {
        "id": 388,
        "pre": "// 以下为伪代码\\nimport { Want } from '@kit.AbilityKit';\\nimport { pushService } from '@kit.PushKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { formInfo } from '@kit.FormKit';\\n\\nasync function saveFormInfo(want: Want): Promise<void> {\\n  try {\\n    const formId = want.parameters![formInfo.FormParam.IDENTITY_KEY] as string;\\n    const moduleName = want.moduleName;\\n    const abilityName = want.abilityName;\\n    const formName = want.parameters![formInfo.FormParam.NAME_KEY] as string;\\n    const pushToken: string = await pushService.getToken();\\n\\n    // 将formId, moduleName, abilityName, formName, pushToken 上报到应用服务端\\n  } catch (err) {\\n    let e: BusinessError = err as BusinessError;\\n    hilog.error(0x0000, 'testTag', 'Failed to save form info: %{public}d %{public}s', e.code, e.message);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "（可选）建议您将formId、pushToken等信息上报到应用服务端，用于向应用发送卡片刷新消息。 ",
        "import_module": null,
        "parent": "<li><span>（可选）建议您将<strong>formId</strong>、<strong>pushToken</strong>等信息上报到应用服务端，用于向应用发送卡片刷新消息。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-form-update.html"
    },
    {
        "id": 389,
        "pre": "class LockWrapper {\\n public:\\n  // 构造函数，获取锁、VMScope、EnvScope\\n  LockWrapper(JSVM_Env env) : env(env) {\\n    OH_JSVM_IsLocked(env, &isLocked);\\n    if (!isLocked) {\\n      OH_JSVM_AcquireLock(env);\\n      OH_JSVM_GetVM(env, &vm);\\n      OH_JSVM_OpenVMScope(vm, &vmScope);\\n      OH_JSVM_OpenEnvScope(env, &envScope);\\n    }\\n  }\\n\\n  // 析构函数，释放EnvScope、VMScope、锁\\n  ~LockWrapper() {\\n    if (!isLocked) {\\n      OH_JSVM_CloseEnvScope(env, envScope);\\n      OH_JSVM_CloseVMScope(vm, vmScope);\\n      OH_JSVM_ReleaseLock(env);\\n    }\\n  }\\n\\n  LockWrapper(const LockWrapper&) = delete;\\n  LockWrapper& operator=(const LockWrapper&) = delete;\\n  LockWrapper(LockWrapper&&) = delete;\\n  void* operator new(size_t) = delete;\\n  void* operator new[](size_t) = delete;\\n\\n private:\\n  JSVM_Env env;\\n  JSVM_EnvScope envScope;\\n  JSVM_VMScope vmScope;\\n  JSVM_VM vm;\\n  bool isLocked;\\n};",
        "type": "Reference",
        "function_call": "detach()",
        "function_name": "多线程共享引擎实例",
        "parent_text": "多线程共享引擎实例【规则】多线程同时使用同一个引擎实例的场景下，需要加锁使用。保证一个引擎实例在同一时刻只能在一个线程执行。多线程同一时刻同时使用引擎实例可能造成应用崩溃。 注意事项： OH_JSVM_IsLocked的结果为当前线程是否持有引擎实例的锁，无需设置循环等待其他线程释放锁；OH_JSVM_AcquireLock在同一线程中嵌套使用不会造成死锁；使用OH_JSVM_ReleaseLock时需判断是否在最外层，避免同一线程中嵌套使用OH_JSVM_AcquireLock的场景下内层释放了整个线程的锁；OH_JSVM_AcquireLock后需调用OH_JSVM_OpenHandleScope让引擎实例进入线程；OH_JSVM_ReleaseLock后需调用OH_JSVM_ReleaseLock让引擎实例退出线程；不同线程禁止嵌套使用引擎实例，如需临时切换线程使用引擎实例，请确保JSVM_Value已保存为JSVM_Ref，释放锁后对JSVM_Value将不可访问；需注意资源获取的顺序为：锁 -> VMScope -> EnvScope -> HandleScope，释放资源的顺序正好相反，错误的顺序可能导致程序崩溃。 C++使用封装：  正确示例： // 该用例演示了多线程中使用vm\\n// t1线程先获取锁，并继续JSVM-API的调用\\n// t2线程会在获取锁处阻塞，直到t1线程执行结束释放锁后，t2线程继续执行，调用JSVM-API接口\\nstatic napi_value Add([[maybe_unused]] napi_env _env, [[maybe_unused]] napi_callback_info _info) {\\n    static JSVM_VM vm;\\n    static JSVM_Env env;\\n    if (aa == 0) {\\n        OH_JSVM_Init(nullptr);\\n        aa++;\\n        // create vm\\n        JSVM_CreateVMOptions options;\\n        memset(&options, 0, sizeof(options));\\n        OH_JSVM_CreateVM(&options, &vm);\\n        // create env\\n        OH_JSVM_CreateEnv(vm, 0, nullptr, &env);\\n    }\\n\\n    std::thread t1([]() {\\n        LockWrapper lock(env);\\n        JSVM_HandleScope handleScope;\\n        OH_JSVM_OpenHandleScope(env, &handleScope);\\n        JSVM_Value value;\\n        JSVM_Status rst = OH_JSVM_CreateInt32(env, 32, &value); // 32: numerical value\\n        if (rst == JSVM_OK) {\\n            OH_LOG_INFO(LOG_APP, \\\"JSVM:t1 OH_JSVM_CreateInt32 suc\\\");\\n        } else {\\n            OH_LOG_ERROR(LOG_APP, \\\"JSVM:t1 OH_JSVM_CreateInt32 fail\\\");\\n        }\\n        int32_t num1;\\n        OH_JSVM_GetValueInt32(env, value, &num1);\\n        OH_LOG_INFO(LOG_APP, \\\"JSVM:t1 num1 = %{public}d\\\", num1);\\n        OH_JSVM_CloseHandleScope(env, handleScope);\\n    });\\n    std::thread t2([]() {\\n        LockWrapper lock(env);\\n        JSVM_HandleScope handleScope;\\n        OH_JSVM_OpenHandleScope(env, &handleScope);\\n        JSVM_Value value;\\n        JSVM_Status rst = OH_JSVM_CreateInt32(env, 32, &value); // 32: numerical value\\n        if (rst == JSVM_OK) {\\n            OH_LOG_INFO(LOG_APP, \\\"JSVM:t2 OH_JSVM_CreateInt32 suc\\\");\\n        } else {\\n            OH_LOG_ERROR(LOG_APP, \\\"JSVM:t2 OH_JSVM_CreateInt32 fail\\\");\\n        }\\n        int32_t num1;\\n        OH_JSVM_GetValueInt32(env, value, &num1);\\n        OH_LOG_INFO(LOG_APP, \\\"JSVM:t2 num1 = %{public}d\\\", num1);\\n        OH_JSVM_CloseHandleScope(env, handleScope);\\n    });\\n    t1.detach();\\n    t2.detach();\\n    return nullptr;\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"多线程共享引擎实例\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178054048__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%BC%95%E6%93%8E%E5%AE%9E%E4%BE%8B\\\"'></a><a name='\\\"%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%BC%95%E6%93%8E%E5%AE%9E%E4%BE%8B\\\"'></a><h4>多线程共享引擎实例</h4><p>【规则】多线程同时使用同一个引擎实例的场景下，需要加锁使用。保证一个引擎实例在同一时刻只能在一个线程执行。多线程同一时刻同时使用引擎实例可能造成应用崩溃。</p> <p><strong>注意事项</strong>：</p> <ol><li>OH_JSVM_IsLocked的结果为<strong>当前线程</strong>是否持有引擎实例的锁，无需设置循环等待其他线程释放锁；</li><li>OH_JSVM_AcquireLock在同一线程中嵌套使用不会造成死锁；</li><li>使用OH_JSVM_ReleaseLock时需判断是否在最外层，避免同一线程中嵌套使用OH_JSVM_AcquireLock的场景下内层释放了整个线程的锁；</li><li>OH_JSVM_AcquireLock后需调用OH_JSVM_OpenHandleScope让引擎实例进入线程；OH_JSVM_ReleaseLock后需调用OH_JSVM_ReleaseLock让引擎实例退出线程；</li><li>不同线程禁止嵌套使用引擎实例，如需临时切换线程使用引擎实例，请确保JSVM_Value已保存为JSVM_Ref，释放锁后对JSVM_Value将不可访问；</li><li>需注意资源获取的顺序为：锁 -&gt; VMScope -&gt; EnvScope -&gt; HandleScope，释放资源的顺序正好相反，错误的顺序可能导致程序崩溃。</li></ol> <p><strong>C++使用封装</strong>：</p>  <p><strong>正确示例</strong>：</p> <pre class='\\\"screen\\\"'>// 该用例演示了多线程中使用vm\\n// t1线程先获取锁，并继续JSVM-API的调用\\n// t2线程会在获取锁处阻塞，直到t1线程执行结束释放锁后，t2线程继续执行，调用JSVM-API接口\\nstatic napi_value Add([[maybe_unused]] napi_env _env, [[maybe_unused]] napi_callback_info _info) {\\n    static JSVM_VM vm;\\n    static JSVM_Env env;\\n    if (aa == 0) {\\n        OH_JSVM_Init(nullptr);\\n        aa++;\\n        // create vm\\n        JSVM_CreateVMOptions options;\\n        memset(&amp;options, 0, sizeof(options));\\n        OH_JSVM_CreateVM(&amp;options, &amp;vm);\\n        // create env\\n        OH_JSVM_CreateEnv(vm, 0, nullptr, &amp;env);\\n    }\\n\\n    std::thread t1([]() {\\n        LockWrapper lock(env);\\n        JSVM_HandleScope handleScope;\\n        OH_JSVM_OpenHandleScope(env, &amp;handleScope);\\n        JSVM_Value value;\\n        JSVM_Status rst = OH_JSVM_CreateInt32(env, 32, &amp;value); // 32: numerical value\\n        if (rst == JSVM_OK) {\\n            OH_LOG_INFO(LOG_APP, \\\"JSVM:t1 OH_JSVM_CreateInt32 suc\\\");\\n        } else {\\n            OH_LOG_ERROR(LOG_APP, \\\"JSVM:t1 OH_JSVM_CreateInt32 fail\\\");\\n        }\\n        int32_t num1;\\n        OH_JSVM_GetValueInt32(env, value, &amp;num1);\\n        OH_LOG_INFO(LOG_APP, \\\"JSVM:t1 num1 = %{public}d\\\", num1);\\n        OH_JSVM_CloseHandleScope(env, handleScope);\\n    });\\n    std::thread t2([]() {\\n        LockWrapper lock(env);\\n        JSVM_HandleScope handleScope;\\n        OH_JSVM_OpenHandleScope(env, &amp;handleScope);\\n        JSVM_Value value;\\n        JSVM_Status rst = OH_JSVM_CreateInt32(env, 32, &amp;value); // 32: numerical value\\n        if (rst == JSVM_OK) {\\n            OH_LOG_INFO(LOG_APP, \\\"JSVM:t2 OH_JSVM_CreateInt32 suc\\\");\\n        } else {\\n            OH_LOG_ERROR(LOG_APP, \\\"JSVM:t2 OH_JSVM_CreateInt32 fail\\\");\\n        }\\n        int32_t num1;\\n        OH_JSVM_GetValueInt32(env, value, &amp;num1);\\n        OH_LOG_INFO(LOG_APP, \\\"JSVM:t2 num1 = %{public}d\\\", num1);\\n        OH_JSVM_CloseHandleScope(env, handleScope);\\n    });\\n    t1.detach();\\n    t2.detach();\\n    return nullptr;\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/jsvm-guidelines.html"
    },
    {
        "id": 390,
        "pre": "std::string sourcecodestr = R\\\"JS(\\n    throw Error('Error throw from js');\\n)JS\\\";\\nJSVM_Value sourcecodevalue = nullptr;\\nOH_JSVM_CreateStringUtf8(env, sourcecodestr.c_str(), sourcecodestr.size(), &sourcecodevalue);\\nJSVM_Script script;\\nauto status = OH_JSVM_CompileScript(env, sourcecodevalue, nullptr, 0, true, nullptr, &script);\\n// 异常处理分支\\nif (status != JSVM_OK) {\\n    JSVM_Value error = nullptr;\\n    // 获取并清理异常\\n    CALL_JSVM(OH_JSVM_GetAndClearLastException((env), &error));\\n    // 处理异常，如打印信息，省略\\n    // 抛出 C++ 异常或结束函数执行\\n    throw \\\"JS Compile Error\\\";\\n}\\nJSVM_Value result;\\n// 执行JS脚本，执行过程中抛出JS异常\\nstatus = OH_JSVM_RunScript(env, script, &result);\\n\\n// 异常分支处理\\nif (status != JSVM_OK) {\\n    JSVM_Value error = nullptr;\\n    // 获取并清理异常\\n    CALL_JSVM(OH_JSVM_GetAndClearLastException((env), &error));\\n    // 处理异常，如打印信息，省略\\n    // 抛出 C++ 异常或结束函数执行\\n    throw \\\"JS RunScript Error\\\";\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "C++调用JSVM-API（Native主，JS从）失败，需清理JSVM中等待处理的异常，避免影响后续JSVM-API的执行，并设置C++异常处理分支（或抛出C++异常）。  ",
        "import_module": null,
        "parent": "<li><p>C++调用JSVM-API（Native主，JS从）失败，需清理JSVM中等待处理的异常，避免影响后续JSVM-API的执行，并设置C++异常处理分支（或抛出C++异常）。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/jsvm-guidelines.html"
    },
    {
        "id": 391,
        "pre": "JSVM_Value JSFunc = nullptr;\\nconst char *name = \\\"NativeFunction\\\";\\nJSVM_CallbackStruct cb = {NativeFunction, nullptr};\\n// 创建JS函数，该函数的属性 \\\"name\\\" 为 \\\"NativeFunction\\\"\\nOH_JSVM_CreateFunction(env, name, strlen(name), &cb, &JSFunc);\\n// 绑定函数到上下文\\n// 获取上下文的global对象\\nJSVM_Value global = nullptr;\\nOH_JSVM_GetGlobal(env, &global);\\n// 创建JS字符串\\\"FunctionNameInJSContext\\\"\\nJSVM_Value key = nullptr;\\nOH_JSVM_CreateStringLatin1(env, \\\"FunctionNameInJSContext\\\", JSVM_AUTO_LENGTH, &key);\\n// 设置global的属性\\\"FunctionNameInJSContext\\\"为JSFunc，将函数绑定到上下文中\\nOH_JSVM_SetProperty(env, global, key, JSFunc);\\n// 在JS中调用函数\\nstd::string sourcecodestr = R\\\"JS(\\n    // consolelog需用户实现\\n    FunctionNameInJSContext() // 调用成功\\n    consolelog(FunctionNameInJSContext.name) // 打印 \\\"NativeFunction\\\"\\n    try {\\n        NativeFunction() // 无法找到该函数，抛出异常\\n    } catch (e) {\\n        consolelog(e.message)\\n    }\\n)JS\\\";",
        "type": "Reference",
        "function_call": null,
        "function_name": "上下文绑定对象",
        "parent_text": "上下文绑定对象【规则】：调用JSVM-API生成的JS函数、对象需绑定到上下文中才能从JS侧访问，OH_JSVM_CreateFunction接口中的const char *参数为创建函数的属性name，不代表上下文中指向该函数的函数名。调用JSVM-API生成的类、对象同理。 示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"上下文绑定对象\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178054048__%E4%B8%8A%E4%B8%8B%E6%96%87%E7%BB%91%E5%AE%9A%E5%AF%B9%E8%B1%A1\\\"'></a><a name='\\\"%E4%B8%8A%E4%B8%8B%E6%96%87%E7%BB%91%E5%AE%9A%E5%AF%B9%E8%B1%A1\\\"'></a><h4>上下文绑定对象</h4><p><strong>【规则】</strong>：调用JSVM-API生成的JS函数、对象需绑定到上下文中才能从JS侧访问，OH_JSVM_CreateFunction接口中的const char *参数为创建函数的属性name，不代表上下文中指向该函数的函数名。调用JSVM-API生成的类、对象同理。</p> <p><strong>示例</strong>：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/jsvm-guidelines.html"
    },
    {
        "id": 392,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit';\\nimport { paymentService } from '@kit.PaymentKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  requestPaymentPromise() {\\n    // use your own orderStr\\n    const orderStr = '{\\\"app_id\\\":\\\"***\\\",\\\"merc_no\\\":\\\"***\\\",\\\"prepay_id\\\":\\\"xxx\\\",\\\"timestamp\\\":\\\"1680259863114\\\",\\\"noncestr\\\":\\\"1487b8a60ed9f9ecc0ba759fbec23f4f\\\",\\\"sign\\\":\\\"****\\\",\\\"auth_id\\\":\\\"***\\\"}';\\n    paymentService.requestPayment(this.context, orderStr)\\n      .then(() => {\\n        // pay success\\n        console.info('succeeded in paying');\\n      })\\n      .catch((error: BusinessError) => {\\n        // failed to pay\\n        console.error(`failed to pay, error.code: ${error.code}, error.message: ${error.message}`);\\n      });\\n  }\\n\\n  build() {\\n    Column() {\\n      Button('requestPaymentPromise')\\n        .type(ButtonType.Capsule)\\n        .width('50%')\\n        .margin(20)\\n        .onClick(() => {\\n          this.requestPaymentPromise();\\n        })\\n      }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": "catch()",
        "function_name": null,
        "parent_text": "      当接口通过.then()方法返回时，则表示当前订单支付成功，通过.catch()方法返回表示订单支付失败。当此次请求有异常时，可通过error.code获取错误码，错误码相关信息请参见错误码。示例代码如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      当接口通过.then()方法返回时，则表示当前订单支付成功，通过.catch()方法返回表示订单支付失败。当此次请求有异常时，可通过<strong>error.code</strong>获取错误码，错误码相关信息请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/payment-error-code\\\"' target='\\\"_blank\\\"'>错误码</a>。示例代码如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-payment-process.html"
    },
    {
        "id": 393,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-readonly\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-readonly.html"
    },
    {
        "id": 394,
        "pre": "export class Container {\\n  // Public members might be modified externally\\n  public publicMember: boolean = true;\\n\\n  // Protected members might be modified by child classes\\n  protected protectedMember: number = Number.MAX_VALUE;\\n\\n  // This is modified later on by the class\\n  private modifiedLater = 'unchanged';\\n\\n  public mutate() {\\n    this.modifiedLater = 'mutated';\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-readonly.html"
    },
    {
        "id": 395,
        "pre": "export class Container {\\n  // These member variables could be marked as readonly\\n  private neverModifiedMember = true;\\n\\n  private onlyModifiedInConstructor: number;\\n\\n  // Private parameter properties can also be marked as readonly\\n  private neverModifiedParameter: string;\\n\\n  public constructor(\\n    onlyModifiedInConstructor: number,\\n    // Private parameter properties can also be marked as readonly\\n    neverModifiedParameter: string,\\n  ) {\\n    this.neverModifiedParameter = neverModifiedParameter;\\n    this.onlyModifiedInConstructor = onlyModifiedInConstructor;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-readonly.html"
    },
    {
        "id": 396,
        "pre": "{\\n \\\"applinking\\\": {\\n   \\\"apps\\\": [\\n     {\\n       \\\"appIdentifier\\\": \\\"1234567\\\"\\n     }\\n   ]\\n }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建域名配置文件applinking.json，内容如下：  appIdentifier填写创建应用时生成的APP ID。同一个网站域名可以关联多个应用，只需要在\\\"apps\\\"列表里放置多个\\\"appIdentifier\\\"元素即可，其中每个\\\"appIdentifier\\\"元素对应每个应用。  ",
        "import_module": null,
        "parent": "<li>创建域名配置文件applinking.json，内容如下： <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120323.22611300140291141658526853441439:50001231000000:2800:293EC4AE9B14D5FA0A8C6D842773E67603B2F3559CAA1B965EA9623D4C352285.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ul><li>appIdentifier填写创建应用时生成的<a href='\\\"#section189581229144811\\\"'>APP ID</a>。</li><li>同一个网站域名可以关联多个应用，只需要在\\\"apps\\\"列表里放置多个\\\"appIdentifier\\\"元素即可，其中每个\\\"appIdentifier\\\"元素对应每个应用。</li></ul> </div></div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-linking-startup.html"
    },
    {
        "id": 397,
        "pre": "{\\n  \\\"module\\\": {\\n    \\\"abilities\\\": [\\n      {\\n        \\\"name\\\": \\\"EntryAbility\\\",\\n        \\\"srcEntry\\\": \\\"./ets/entryability/EntryAbility.ts\\\",\\n        \\\"icon\\\": \\\"$media:icon\\\",\\n        \\\"label\\\": \\\"$string:EntryAbility_label\\\",\\n        // 请将exported配置为true；如果exported为false，仅具有权限的系统应用能够拉起该应用，否则无法拉起应用\\n        \\\"exported\\\": true,\\n        \\\"startWindowIcon\\\": \\\"$media:icon\\\",\\n        \\\"startWindowBackground\\\": \\\"$color:start_window_background\\\",\\n        \\\"skills\\\": [\\n          {\\n            \\\"entities\\\": [\\n              \\\"entity.system.home\\\"\\n            ],\\n            \\\"actions\\\": [\\n              \\\"action.system.home\\\"\\n            ]\\n          },\\n          {\\n            \\\"entities\\\": [\\n              // entities必须包含\\\"entity.system.browsable\\\"\\n              \\\"entity.system.browsable\\\"\\n            ],\\n            \\\"actions\\\": [\\n              // actions必须包含\\\"ohos.want.action.viewData\\\"\\n              \\\"ohos.want.action.viewData\\\"\\n            ],\\n            \\\"uris\\\": [\\n              {\\n                // scheme须配置为https\\n                \\\"scheme\\\": \\\"https\\\",\\n                // host须配置为关联的域名\\n                \\\"host\\\": \\\"www.example.com\\\",\\n                // path可选，表示域名服务器上的目录或文件路径，例如www.example.com/path1/中的path1\\n                // 如果应用只能处理部分特定的path，则此处应该配置应用所支持的path，避免出现应用不能处理的path链接也被引流到应用中的问题\\n                \\\"path\\\": \\\"path1\\\"\\n              }\\n            ],\\n            // domainVerify须设置为true\\n           \\\"domainVerify\\\": true\\n          }\\n          // 若有其他跳转能力，如推送消息跳转、NFC跳转，可新增一个skill对象，防止与App Linking业务冲突\\n        ]\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]在DevEco Studio中配置关联的网址域名",
        "parent_text": "[h2]在DevEco Studio中配置关联的网址域名在应用的module.json5文件中进行如下配置，以声明应用关联的域名地址，并开启域名校验开关。 \\\"entities\\\"列表中必须包含\\\"entity.system.browsable\\\"。\\\"actions\\\"列表中必须包含\\\"ohos.want.action.viewData\\\"。\\\"uris\\\"列表中必须包含\\\"scheme\\\"为\\\"https\\\"且\\\"host\\\"为域名地址的元素，可选属性包含\\\"path\\\"、\\\"pathStartWith\\\"和\\\"pathRegex\\\"，具体请参见“uris标签说明”。\\\"domainVerify\\\"设置为true，表示开启域名校验开关。  skills标签下默认包含一个skill对象，用于标识应用入口。应用跳转链接不能在该skill对象中配置，需要创建独立的skill对象。 如果存在多个跳转场景，需要在skills标签下创建不同的skill对象，否则会导致配置无法生效。  例如，声明应用关联的域名是www.example.com，则需进行如下配置。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section20408185114112\\\"'><a name='\\\"section20408185114112\\\"'></a><a name='\\\"section20408185114112\\\"'></a><h4>[h2]在DevEco Studio中配置关联的网址域名</h4><p>在应用的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file\\\"' target='\\\"_blank\\\"'>module.json5文件</a>中进行如下配置，以声明应用关联的域名地址，并开启域名校验开关。</p> <ul><li>\\\"entities\\\"列表中必须包含\\\"entity.system.browsable\\\"。</li><li>\\\"actions\\\"列表中必须包含\\\"ohos.want.action.viewData\\\"。</li><li>\\\"uris\\\"列表中必须包含\\\"scheme\\\"为\\\"https\\\"且\\\"host\\\"为域名地址的元素，可选属性包含\\\"path\\\"、\\\"pathStartWith\\\"和\\\"pathRegex\\\"，具体请参见“<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-uri-config#uris标签说明\\\"' target='\\\"_blank\\\"'>uris标签说明</a>”。</li><li>\\\"domainVerify\\\"设置为true，表示开启域名校验开关。</li></ul> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120324.15200884994647421673073871386381:50001231000000:2800:DB1CD04758DB7BFC565FBF66EDD157F7E2EFB8C06FD0C6AEAF68BF235DB874AD.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>skills标签下默认包含一个skill对象，用于标识应用入口。应用跳转链接不能在该skill对象中配置，需要创建独立的skill对象。</p> <p>如果存在多个跳转场景，需要在skills标签下创建不同的skill对象，否则会导致配置无法生效。</p> </div></div> <p>例如，声明应用关联的域名是www.example.com，则需进行如下配置。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-linking-startup.html"
    },
    {
        "id": 398,
        "pre": "import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { url } from '@kit.ArkTS';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\\n    // 从want中获取传入的链接信息。\\n    // 如传入的url为：https://www.example.com/programs?action=showall\\n    let uri = want?.uri \\n    if (uri) {\\n      // 从链接中解析query参数，拿到参数后，开发者可根据自己的业务需求进行后续的处理。\\n      let urlObject = url.URL.parseURL(want?.uri);\\n      let action = urlObject.params.get('action')\\n      // 例如，当action为showall时，展示所有的节目。\\n      if (action === \\\"showall\\\"){\\n         //...\\n      }\\n      //...\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "或者onNewWant()",
        "function_name": "[h2]处理传入的链接",
        "parent_text": "[h2]处理传入的链接在应用的Ability（如EntryAbility）的onCreate()或者onNewWant()生命周期回调中添加如下代码，以处理传入的链接。  若要根据链接参数启动UIAbility的指定页面组件，请参考“启动UIAbility的指定页面”。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1620481746\\\"'><a name='\\\"section1620481746\\\"'></a><a name='\\\"section1620481746\\\"'></a><h4>[h2]处理传入的链接</h4><p>在应用的Ability（如EntryAbility）的onCreate()或者onNewWant()生命周期回调中添加如下代码，以处理传入的链接。</p>  <p>若要根据链接参数启动UIAbility的指定页面组件，请参考“<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/uiability-intra-device-interaction#启动uiability的指定页面\\\"' target='\\\"_blank\\\"'>启动UIAbility的指定页面</a>”。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-linking-startup.html"
    },
    {
        "id": 399,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Button('start link', { type: ButtonType.Capsule, stateEffect: true })\\n      .width('87%')\\n      .height('5%')\\n      .margin({ bottom: '12vp' })\\n      .onClick(() => {\\n        let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n        let link: string = \\\"https://www.example.com/programs?action=showall\\\";\\n        // 仅以App Linking的方式打开应用\\n        context.openLink(link, { appLinkingOnly: true })\\n          .then(() => {\\n            console.info('openlink success.');\\n          })\\n          .catch((error: BusinessError) => {\\n            console.error(`openlink failed. error:${JSON.stringify(error)}`);\\n          });\\n      })\\n  }\\n}",
        "type": "Reference",
        "function_call": "openLink()",
        "function_name": null,
        "parent_text": "通过openLink接口拉起。拉起方应用通过UIAbilityContext.openLink()接口，传入目标应用的链接，拉起目标应用。 openLink接口提供了两种拉起目标应用的方式，开发者可根据业务需求进行选择。 方式一： 仅以App Linking的方式打开应用。将appLinkingOnly参数设为true，若有App Linking匹配的应用，则直接打开目标应用。若无App Linking匹配的应用，则抛异常给开发者进行处理。 适用于无法打开目标应用时，开发者做了相应的异常处理。例如：拉起方应用集成了ArkWeb，当目标应用不存在时，可通过ArkWeb打开链接。 方式二： 以App Linking优先的方式打开应用。将appLinkingOnly参数设为false或者不传，若有App Linking匹配的应用，则直接打开目标应用。若无App Linking匹配的应用，则尝试以浏览器打开链接的方式打开应用。 适用于无法打开目标应用时，开发者未做任何处理。此时目标应用不存在时，会通过系统浏览器打开链接。  本文为了方便验证App Linking的配置是否正确，选择方式一，示例如下。  在拉起方应用中执行上述代码，如果拉起方应用成功拉起目标应用，则成功配置App Linking。 ",
        "import_module": null,
        "parent": "<li>通过openLink接口拉起。<p>拉起方应用通过UIAbilityContext.openLink()接口，传入目标应用的链接，拉起目标应用。</p> <p>openLink接口提供了两种拉起目标应用的方式，开发者可根据业务需求进行选择。</p> <ul><li>方式一： 仅以App Linking的方式打开应用。<p>将appLinkingOnly参数设为true，若有App Linking匹配的应用，则直接打开目标应用。若无App Linking匹配的应用，则抛异常给开发者进行处理。</p> <p>适用于无法打开目标应用时，开发者做了相应的异常处理。例如：拉起方应用集成了ArkWeb，当目标应用不存在时，可通过ArkWeb打开链接。</p> </li><li>方式二： 以App Linking优先的方式打开应用。<p>将appLinkingOnly参数设为false或者不传，若有App Linking匹配的应用，则直接打开目标应用。若无App Linking匹配的应用，则尝试以浏览器打开链接的方式打开应用。</p> <p>适用于无法打开目标应用时，开发者未做任何处理。此时目标应用不存在时，会通过系统浏览器打开链接。</p> </li></ul> <p>本文为了方便验证App Linking的配置是否正确，选择方式一，示例如下。</p>  <p>在拉起方应用中执行上述代码，如果拉起方应用成功拉起目标应用，则成功配置App Linking。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-linking-startup.html"
    },
    {
        "id": 400,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/array-bracket-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_array-bracket-spacing.html"
    },
    {
        "id": 401,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/lines-between-class-members\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_lines-between-class-members.html"
    },
    {
        "id": 402,
        "pre": "// 默认要求类成员成员之间有空行分隔\\nexport class Foo {\\n  public baz() {\\n    console.info('baz');\\n  }\\n\\n  public qux() {\\n    console.info('qux');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_lines-between-class-members.html"
    },
    {
        "id": 403,
        "pre": "// 默认要求类成员成员之间有空行分隔\\nexport class Foo {\\n  public baz() {\\n    console.info('baz');\\n  }\\n  public qux() {\\n    console.info('qux');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1228618482198\\\"'><a name='\\\"section1228618482198\\\"'></a><a name='\\\"section1228618482198\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_lines-between-class-members.html"
    },
    {
        "id": 404,
        "pre": "import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-button-selecting-point.html"
    },
    {
        "id": 405,
        "pre": "import { MyCloudObject, importObject } from 'cloud_objects';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "在代码文件中引入云对象。 ",
        "import_module": "import { MyCloudObject, importObject } from 'cloud_objects';",
        "parent": "<li id='\\\"li17225854154914\\\"'>在代码文件中引入云对象。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/agc-harmonyos-clouddev-invokecloudobj.html"
    },
    {
        "id": 406,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/js-code-cache-by-precompile-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-js-code-cache-by-precompile-check.html"
    },
    {
        "id": 407,
        "pre": "import { webview } from '@kit.ArkWeb';\\ninterface Config {\\n  url: string,\\n  localPath: string,\\n  options: webview.CacheOptions\\n}\\n@Entry\\n@Component\\nstruct JsCodeCacheByPrecompileCheckNoReport {\\n  controller: webview.WebviewController = new webview.WebviewController();\\n  configs: Array<Config> = [\\n    {\\n      url: 'https://www.example.com/example.js',\\n      localPath: 'example.js',\\n      options: {\\n        responseHeaders: [\\n          { headerKey: 'E-Tag', headerValue: 'xxx' },\\n          { headerKey: 'Last-Modified', headerValue: 'Web, 21 Mar 2024 10:38:41 GMT' }\\n        ]\\n      }\\n    }\\n  ]\\n  build() {\\n    Column() {\\n      Web({ src: 'https://www.example.com/a.html', controller: this.controller })\\n        .onControllerAttached(async () => {\\n          for (const config of this.configs) {\\n            let content = getContext().resourceManager.getRawFileContentSync(config.localPath);\\n            try {\\n              this.controller.precompileJavaScript(config.url, content, config.options)\\n                .then((errCode: number) => {\\n                  console.log('precompile successfully!' );\\n                }).catch((errCode: number) => {\\n                console.error('precompile failed.' + errCode);\\n              })\\n            } catch (err) {\\n              console.error('precompile failed!.' + err.code + err.message);\\n            }\\n          }\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-js-code-cache-by-precompile-check.html"
    },
    {
        "id": 408,
        "pre": "import { webview } from '@kit.ArkWeb';\\nimport { hiTraceMeter } from '@kit.PerformanceAnalysisKit';\\n@Entry\\n@Component\\nstruct JsCodeCacheByPrecompileCheckReport {\\n  controller: webview.WebviewController = new webview.WebviewController();\\n  build() {\\n    Column() {\\n      Button('加载页面')\\n        .onClick(() => {\\n          hiTraceMeter.startTrace('unPrecompileJavaScript', 1);\\n          this.controller.loadUrl('https://www.example.com/b.html');\\n        })\\n      // warning line\\n      Web({ src: 'https://www.example.com/a.html', controller: this.controller })\\n        .fileAccess(true)\\n        .onPageBegin((event) => {\\n          console.log(`load page begin: ${event?.url}`);\\n        })\\n        .onPageEnd((event) => {\\n          hiTraceMeter.finishTrace('unPrecompileJavaScript', 1);\\n          console.log(`load page end: ${event?.url}`);\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-js-code-cache-by-precompile-check.html"
    },
    {
        "id": 409,
        "pre": "import { advertising, AutoAdComponent, identifier } from '@kit.AdsKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State adParam: advertising.AdRequestParams = {\\n    // 广告类型：横幅广告\\n    adType: 8,\\n    // 'testw6vs28auh3'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\\n    adId: 'testw6vs28auh3',\\n    // 广告位宽\\n    adWidth: 360,\\n    // 广告位高\\n    adHeight: 57,\\n    // 开放匿名设备标识符\\n    oaid: ''\\n  };\\n  private adOptions: advertising.AdOptions = {\\n    // 是否允许流量下载0：不允许，1：允许，不设置以广告主设置为准\\n    allowMobileTraffic: 0,\\n    // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\\n    tagForChildProtection: -1,\\n    // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\\n    tagForUnderAgeOfPromise: -1,\\n    // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\\n    adContentClassification: 'A'\\n  };\\n  private displayOptions: advertising.AdDisplayOptions = {\\n    // 广告轮播的时间间隔，单位ms，取值范围[30000, 120000]\\n    refreshTime: 30000\\n  }\\n  private ratio: number = 1;\\n  private adWidth: number = -1;\\n  private adHeight: number = -1;\\n  @State visibilityState: Visibility = Visibility.Visible;\\n\\n  aboutToAppear() {\\n    try {\\n      // 使用Promise回调方式获取OAID\\n      identifier.getOAID().then((data) => {\\n        this.adParam.oaid = data;\\n        hilog.info(0x0000, 'testTag', '%{public}s', `Succeeded in getting adsIdentifierInfo by promise`);\\n      }).catch((error: BusinessError) => {\\n        hilog.error(0x0000, 'testTag', '%{public}s',\\n          `Failed to get adsIdentifierInfo, code: ${error.code}, message: ${error.message}`);\\n      })\\n    } catch (error) {\\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\\n    }\\n\\n    if (this.adParam?.adWidth && typeof (this.adParam?.adWidth) === 'number' && this.adParam?.adWidth > 0) {\\n      this.adWidth = this.adParam?.adWidth;\\n    }\\n    if (this.adParam?.adHeight && typeof (this.adParam?.adHeight) === 'number' && this.adParam?.adHeight > 0) {\\n      this.adHeight = this.adParam?.adHeight;\\n    }\\n    if (this.adWidth > 0 && this.adHeight > 0) {\\n      this.ratio = this.adWidth / this.adHeight;\\n    }\\n  }\\n\\n  build() {\\n    if (this.adParam.oaid) {\\n      Stack({ alignContent: Alignment.Bottom }) {\\n        this.buildBannerView()\\n      }\\n    }\\n  }\\n\\n  @Builder\\n  buildBannerView() {\\n    Row() {\\n      AutoAdComponent({\\n        adParam: this.adParam,\\n        adOptions: this.adOptions,\\n        displayOptions: this.displayOptions,\\n        interactionListener: {\\n          onStatusChanged: (status: string, ad: advertising.Advertisement, data: string) => {\\n            hilog.info(0x0000, 'testTag', '%{public}s', `status is ${status}`);\\n            switch (status) {\\n              case AdStatus.AD_OPEN:\\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdOpen');\\n                break;\\n              case AdStatus.AD_CLICKED:\\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClick');\\n                break;\\n              case AdStatus.AD_CLOSED:\\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClose');\\n                this.visibilityState = Visibility.None;\\n                break;\\n              case AdStatus.AD_LOAD:\\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdLoad');\\n                break;\\n              case AdStatus.AD_FAIL:\\n                hilog.error(0x0000, 'testTag', '%{public}s', 'Status is onAdFail');\\n                this.visibilityState = Visibility.None;\\n                break;\\n            }\\n          }\\n        }\\n      })\\n    }\\n    .width('100%')\\n    .aspectRatio(this.ratio)\\n    .visibility(this.visibilityState)\\n  }\\n}\\n\\nenum AdStatus {\\n  AD_LOAD = 'onAdLoad',\\n  AD_FAIL = 'onAdFail',\\n  AD_OPEN = 'onAdOpen',\\n  AD_CLICKED = 'onAdClick',\\n  AD_CLOSED = 'onAdClose',\\n  AD_REWARDED = 'onAdReward',\\n  AD_VIDEO_START = 'onVideoPlayBegin',\\n  AD_COMPLETED = 'onVideoPlayEnd'\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "示例代码如下所示： ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>示例代码如下所示： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ads-publisher-service-banner.html"
    },
    {
        "id": 410,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nqueryEnvironmentStatus() {\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.queryEnvironmentStatus(context).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in querying environment status.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query environment status. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "检查应用引入IAP Kit的可用性。在使用应用内支付之前，应用客户端需要向IAP Kit发送queryEnvironmentStatus请求，以此判断用户当前登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，则隐藏相关IAP功能入口。     当前IAP Kit支持结算的国家/地区仅有中国大陆。   ",
        "import_module": null,
        "parent": "<li>检查应用引入IAP Kit的可用性。<p id='\\\"ZH-CN_TOPIC_0000002239886701__zh-cn_topic_0000002239886709_p151551747192517\\\"'>在使用应用内支付之前，应用客户端需要向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section192192415554\\\"' target='\\\"_blank\\\"'>queryEnvironmentStatus</a>请求，以此判断用户当前登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，则隐藏相关IAP功能入口。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002239886701__zh-cn_topic_0000002239886709_note15155194712259\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120121.68855727768788299218734994156459:50001231000000:2800:0021C3008B3A656AA5D3C5A919302995B3FC8906AA2C60CCB2B9C4F51D2FA641.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002239886701__zh-cn_topic_0000002239886709_p4155154782514\\\"'>当前IAP Kit支持结算的国家/地区仅有中国大陆。</p> </div> </div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-subscription.html"
    },
    {
        "id": 411,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nsubscribe() {\\n  const createPurchaseParam: iap.PurchaseParameter = {\\n    productType: iap.ProductType.AUTORENEWABLE,\\n    // productId需要替换成开发者在AppGallery Connect网站配置商品信息时设置的“商品ID”\\n    productId: 'test001'\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.createPurchase(context, createPurchaseParam).then(async (result) => {\\n    console.info('Succeeded in creating purchase.');\\n    // 购买成功，处理购买结果\\n    // dealPurchaseResult实现请参见下一步\\n    this.dealPurchaseResult(result);\\n  }).catch((err: BusinessError) => {\\n    // 购买失败\\n    console.error(`Failed to create purchase. Code is ${err.code}, message is ${err.message}`);\\n    // dealPurchaseError实现请参见下一步\\n    this.dealPurchaseError(err);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]发起购买",
        "parent_text": "  [h2]发起购买 用户发起购买时，应用可通过向IAP Kit发送createPurchase请求来拉起IAP Kit收银台。发起请求时，应用需在请求参数PurchaseParameter中携带此前已在华为AppGallery Connect网站上配置并生效的自动续期订阅的商品ID，并指定其productType为iap.ProductType.AUTORENEWABLE。     开发过程中易出现频繁调用接口的现象，建议控制接口调用频度，具体可参见1001860004 接口访问过频。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section962215253217\\\"'> <a name='\\\"section962215253217\\\"'></a><a name='\\\"section962215253217\\\"'></a> <h4>[h2]发起购买</h4> <p>用户发起购买时，应用可通过向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section18798154545516\\\"' target='\\\"_blank\\\"'>createPurchase</a>请求来拉起IAP Kit收银台。发起请求时，应用需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1340120344598\\\"' target='\\\"_blank\\\"'>PurchaseParameter</a>中携带此前已在华为<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>网站上配置并生效的自动续期订阅的商品ID，并指定其productType为<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section59035422210\\\"' target='\\\"_blank\\\"'>iap.ProductType.AUTORENEWABLE</a>。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120122.36800660372321804851487443836160:50001231000000:2800:913109B65CC3E4C5ED9BF758D2569AE3ED2D7F15B03FAE2A5F631DB8DD1E388B.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>开发过程中易出现频繁调用接口的现象，建议控制接口调用频度，具体可参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-error-code#section10919174355114\\\"' target='\\\"_blank\\\"'>1001860004 接口访问过频</a>。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-subscription.html"
    },
    {
        "id": 412,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n// JWSUtil为自定义类，可参见示例代码\\nimport { JWSUtil } from '../common/JWSUtil';\\n\\ndealPurchaseResult(result: iap.CreatePurchaseResult) {\\n  const jwsSubscriptionStatus: string = JSON.parse(result.purchaseData).jwsSubscriptionStatus;\\n  if (!jwsSubscriptionStatus) {\\n    return;\\n  }\\n  const subscriptionStatus: string = JWSUtil.decodeJwsObj(jwsSubscriptionStatus);\\n  if (!subscriptionStatus) {\\n    return;\\n  }\\n  // 需自定义SubGroupStatusPayload类，包含的信息请参见SubGroupStatusPayload\\n  const subGroupStatusPayload: SubGroupStatusPayload = JSON.parse(subscriptionStatus);\\n  const lastSubscriptionStatus = subGroupStatusPayload.lastSubscriptionStatus;\\n  if (!lastSubscriptionStatus || lastSubscriptionStatus.status !== '1') {\\n    return;\\n  }\\n  const purchaseOrderPayload = lastSubscriptionStatus.lastPurchaseOrder;\\n  if (purchaseOrderPayload === undefined) {\\n    return;\\n  }\\n  // 处理发货\\n  // ...\\n  // 发货成功后向IAP Kit发送finishPurchase请求，确认发货，完成购买\\n  this.finishPurchase(purchaseOrderPayload);\\n}\\n\\n/**\\n * 确认发货，完成购买\\n *\\n * @param purchaseOrder 订单信息，来源于购买请求\\n */\\nfinishPurchase(purchaseOrder: PurchaseOrderPayload) {\\n  const finishPurchaseParam: iap.FinishPurchaseParameter = {\\n    productType: Number(purchaseOrder.productType),\\n    purchaseToken: purchaseOrder.purchaseToken,\\n    purchaseOrderId: purchaseOrder.purchaseOrderId\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.finishPurchase(context, finishPurchaseParam).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in finishing purchase.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to finish purchase. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": "ndealPurchaseError(err: BusinessError)",
        "function_name": "[h2]购买结果处理",
        "parent_text": "  [h2]购买结果处理 【结果1：购买成功】      为了提高安全性，建议应用服务器接入服务端关键事件通知以接收购买成功结果并通过应用服务器来处理解码验签、完成购买等操作。 请务必确保发货成功后再执行完成购买步骤，本步骤可通过请求服务端订阅确认发货接口来确认发货，完成购买流程。    以下内容为通过客户端接收购买结果及处理的步骤说明。  当用户购买成功时，应用将接收到一个CreatePurchaseResult对象，其purchaseData字段包括了此次购买的结果信息。 对purchaseData.jwsSubscriptionStatus进行解码验签，验证成功可得到SubGroupStatusPayload的JSON字符串。建议应用客户端将purchaseData发送至应用服务器，在应用服务器执行此操作。 验签成功后，检查SubGroupStatusPayload.lastSubscriptionStatus.status是否为1（生效中），是则发放相关权益。建议先检查此笔订单权益的发放状态，未发放则发放权益，成功后记录SubGroupStatusPayload.lastSubscriptionStatus.lastPurchaseOrder等信息，用于后续检查权益发放状态。 完成购买。发放权益后，应用需发送finishPurchase请求确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发送finishPurchase请求时，需在请求参数FinishPurchaseParameter中携带PurchaseOrderPayload中的productType、purchaseToken、purchaseOrderId，其中PurchaseOrderPayload为SubGroupStatusPayload.lastSubscriptionStatus.lastPurchaseOrder。请求成功后，IAP服务器会将相应商品标记为已发货。   【结果2：购买失败】 当用户购买失败时，需要针对code为iap.IAPErrorCode.PRODUCT_OWNED和iap.IAPErrorCode.SYSTEM_ERROR的场景，检查是否需要补发货，确保权益发放，具体请参见确保权益发放。 import { iap } from '@kit.IAPKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ndealPurchaseError(err: BusinessError) {\\n  if (err.code === iap.IAPErrorCode.PRODUCT_OWNED || err.code === iap.IAPErrorCode.SYSTEM_ERROR) {\\n    // 参见确保权益发放检查是否需要补发货，确保权益发放\\n    // ...\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2012918318325\\\"'> <a name='\\\"section2012918318325\\\"'></a><a name='\\\"section2012918318325\\\"'></a> <h4>[h2]购买结果处理</h4> <p><strong>【结果1：购买成功】</strong></p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120122.15083252044953038022043042226687:50001231000000:2800:CC48873B67F835BD9ED0F58D7C78BAC94C35201B199B7C39F3CADF48435F5E77.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ol> <li>为了提高安全性，建议应用服务器接入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-key-event-notifications\\\"' target='\\\"_blank\\\"'>服务端关键事件通知</a>以接收购买成功结果并通过应用服务器来处理<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-verifying-signature\\\"' target='\\\"_blank\\\"'>解码验签</a>、完成购买等操作。</li> <li>请务必确保发货成功后再执行完成购买步骤，本步骤可通过请求服务端<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-confirm-purchase-for-sub\\\"' target='\\\"_blank\\\"'>订阅确认发货</a>接口来确认发货，完成购买流程。</li> </ol> </div> </div> <p>以下内容为<strong>通过客户端接收购买结果</strong>及处理的步骤说明。</p> <ol> <li>当用户购买成功时，应用将接收到一个<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section193852021105111\\\"' target='\\\"_blank\\\"'>CreatePurchaseResult</a>对象，其<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section650794012482\\\"' target='\\\"_blank\\\"'>purchaseData</a>字段包括了此次购买的结果信息。</li> <li>对<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section650794012482\\\"' target='\\\"_blank\\\"'>purchaseData</a>.jwsSubscriptionStatus进行<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-verifying-signature\\\"' target='\\\"_blank\\\"'>解码验签</a>，验证成功可得到<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section1311343185318\\\"' target='\\\"_blank\\\"'>SubGroupStatusPayload</a>的JSON字符串。建议应用客户端将<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section650794012482\\\"' target='\\\"_blank\\\"'>purchaseData</a>发送至应用服务器，在应用服务器执行此操作。</li> <li>验签成功后，检查<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section1311343185318\\\"' target='\\\"_blank\\\"'>SubGroupStatusPayload</a>.lastSubscriptionStatus.status是否为1（生效中），是则发放相关权益。<p>建议先检查此笔订单权益的发放状态，未发放则发放权益，成功后记录<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section1311343185318\\\"' target='\\\"_blank\\\"'>SubGroupStatusPayload</a>.lastSubscriptionStatus.lastPurchaseOrder等信息，用于后续检查权益发放状态。</p></li> <li>完成购买。<p>发放权益后，应用需发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>请求确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section103714142118\\\"' target='\\\"_blank\\\"'>FinishPurchaseParameter</a>中携带<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>中的productType、purchaseToken、purchaseOrderId，其中<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>为<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section1311343185318\\\"' target='\\\"_blank\\\"'>SubGroupStatusPayload</a>.lastSubscriptionStatus.lastPurchaseOrder。请求成功后，IAP服务器会将相应商品标记为已发货。</p></li> </ol>  <p><strong>【结果2：购买失败】</strong></p> <p>当用户购买失败时，需要针对code为<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1834394718429\\\"' target='\\\"_blank\\\"'>iap.IAPErrorCode.PRODUCT_OWNED</a>和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1834394718429\\\"' target='\\\"_blank\\\"'>iap.IAPErrorCode.SYSTEM_ERROR</a>的场景，检查是否需要补发货，确保权益发放，具体请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/iap-delivering-subscriptions#section1880231055910\\\"'>确保权益发放</a>。</p> <pre class='\\\"screen\\\"'>import { iap } from '@kit.IAPKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ndealPurchaseError(err: BusinessError) {\\n  if (err.code === iap.IAPErrorCode.PRODUCT_OWNED || err.code === iap.IAPErrorCode.SYSTEM_ERROR) {\\n    // 参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/iap-delivering-subscriptions#section1880231055910\\\"'>确保权益发放</a>检查是否需要补发货，确保权益发放\\n    // ...\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-subscription.html"
    },
    {
        "id": 413,
        "pre": "import { appTasks, OhosAppContext, OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor,getNode } from '@ohos/hvigor'\\n\\n// 获取根节点\\nconst rootNode = getNode(__filename);\\n// 为根节点添加一个afterNodeEvaluate hook 在hook中修改根目录下的build-profile.json5的内容并使能\\nrootNode.afterNodeEvaluate(node => {\\n    // 获取app插件的上下文对象\\n    const appContext = node.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\\n    // 通过上下文对象获取从根目录build-profile.json5文件中读出来的obj对象\\n    const buildProfileOpt = appContext.getBuildProfileOpt();\\n    // 修改obj对象为想要的，此处举例修改app中的signingConfigs\\n    buildProfileOpt['app']['signingConfigs'] = [\\n        {\\n            \\\"name\\\": \\\"default\\\",\\n            \\\"type\\\": \\\"HarmonyOS\\\",\\n            \\\"material\\\": {\\n                \\\"certpath\\\": \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.cer\\\",\\n                \\\"storePassword\\\": \\\"******\\\",\\n                \\\"keyAlias\\\": \\\"debugKey\\\",\\n                \\\"keyPassword\\\": \\\"******\\\",\\n                \\\"profile\\\": \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.p7b\\\",\\n                \\\"signAlg\\\": \\\"SHA256withECDSA\\\",\\n                \\\"storeFile\\\": \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.p12\\\"\\n            }\\n        }\\n    ];\\n    // 将obj对象设置回上下文对象以使能到构建的过程与结果中\\n    appContext.setBuildProfileOpt(buildProfileOpt);\\n})\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]修改每个hvigorNode中的build-profile.json5",
        "parent_text": "[h2]修改每个hvigorNode中的build-profile.json5此处只举例为单个node注册hook并修改build-profile.json5的信息。 例如需要修改根目录下的build-profile.json5的签名信息，则在项目根目录下的hvigorfile.ts中添加如下内容：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section973053620286\\\"'><a name='\\\"section973053620286\\\"'></a><a name='\\\"section973053620286\\\"'></a><h4>[h2]修改每个hvigorNode中的build-profile.json5</h4><p id='\\\"ZH-CN_TOPIC_0000002166808304__p9625731122911\\\"'>此处只举例为单个node注册hook并修改build-profile.json5的信息。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808304__p11625183182915\\\"'>例如需要修改根目录下的build-profile.json5的签名信息，则在项目根目录下的hvigorfile.ts中添加如下内容：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-config-ohos-sample.html"
    },
    {
        "id": 414,
        "pre": "import { hapTasks, OhosHapContext, OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\nimport { getNode } from '@ohos/hvigor'\\n\\nconst entryNode = getNode(__filename);\\n// 为此节点添加一个afterNodeEvaluate hook 在hook中修改module.json5的内容并使能\\nentryNode.afterNodeEvaluate(node => {\\n    // 获取此节点使用插件的上下文对象 此时为hap插件 获取hap插件上下文对象\\n    const hapContext = node.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n    // 通过上下文对象获取从module.json5文件中读出来的obj对象\\n    const moduleJsonOpt = hapContext.getModuleJsonOpt();\\n    // 修改obj对象为想要的，此处举例修改module中的deviceTypes\\n    moduleJsonOpt['module']['deviceTypes'] = [\\\"phone\\\", \\\"tablet\\\", \\\"2in1\\\", \\\"car\\\"];\\n    // 将obj对象设置回上下文对象以使能到构建的过程与结果中\\n    hapContext.setModuleJsonOpt(moduleJsonOpt);\\n})\\nexport default {\\n    system: hapTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]修改module.json5中的配置信息",
        "parent_text": "[h2]修改module.json5中的配置信息可以通过hvigor对象的hook能力快捷为所有的node创建hook，此处先举例为单一的node创建一个hook并修改其中的module.json5的配置信息。 例如此处需要修改entry下的module.json5配置，则在entry下的hvigorfile.ts中添加如下内容：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section6236108173016\\\"'><a name='\\\"section6236108173016\\\"'></a><a name='\\\"section6236108173016\\\"'></a><h4>[h2]修改module.json5中的配置信息</h4><p id='\\\"ZH-CN_TOPIC_0000002166808304__p1265904216307\\\"'>可以通过hvigor对象的hook能力快捷为所有的node创建hook，此处先举例为单一的node创建一个hook并修改其中的module.json5的配置信息。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808304__p465904216301\\\"'>例如此处需要修改entry下的module.json5配置，则在entry下的hvigorfile.ts中添加如下内容：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-config-ohos-sample.html"
    },
    {
        "id": 415,
        "pre": "import { appTasks, OhosAppContext, OhosPluginId } from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor } from '@ohos/hvigor'\\n\\n// 为根节点添加一个afterNodeEvaluate hook 在hook中修改app.json5的内容并使能\\nhvigor.getRootNode().afterNodeEvaluate(rootNode => {\\n    // 获取app插件的上下文对象\\n    const appContext = rootNode.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\\n    // 通过上下文对象获取从app.json5文件中读出来的obj对象\\n    const appJsonOpt = appContext.getAppJsonOpt();\\n    // 修改obj对象为想要的，此处举例修改app中的versionCode\\n    appJsonOpt['app']['versionCode'] = 1000001;\\n    // 将obj对象设置回上下文对象以使能到构建的过程与结果中\\n    appContext.setAppJsonOpt(appJsonOpt);\\n})\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]修改app.json5中的配置信息",
        "parent_text": "[h2]修改app.json5中的配置信息在项目的根目录下的hvigorfile.ts中添加如下代码内容：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section9435132933118\\\"'><a name='\\\"section9435132933118\\\"'></a><a name='\\\"section9435132933118\\\"'></a><h4>[h2]修改app.json5中的配置信息</h4><p id='\\\"ZH-CN_TOPIC_0000002166808304__p48531354183115\\\"'>在项目的根目录下的hvigorfile.ts中添加如下代码内容：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-config-ohos-sample.html"
    },
    {
        "id": 416,
        "pre": "// 工程级hvigorfile.ts\\nimport { appTasks, OhosAppContext, OhosPluginId, Target } from '@ohos/hvigor-ohos-plugin';\\nimport { HvigorNode, HvigorPlugin, TaskInput, TaskOutput } from '@ohos/hvigor';\\nexport function customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            const appContext = currentNode.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\\n            const dependency = appContext.getDependenciesOpt({});  //获取dependency依赖\\n            dependency[\\\"library\\\"]=\\\"file:library.har\\\"\\n            console.log(dependency);\\n            appContext.setDependenciesOpt(dependency );  //修改dependency依赖\\n        }\\n    };\\n}\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}\\n\\n// 模块级hvigorfile.ts\\nimport {hapTasks,OhosHapContext,OhosPluginId,Target} from '@ohos/hvigor-ohos-plugin';\\nimport { hvigor, HvigorNode, HvigorPlugin} from '@ohos/hvigor';\\nimport * as fs from 'fs';\\nexport function customPlugin(options: OnlineSignOptions): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        context() {\\n            return {\\n                signConfig: options\\n            };\\n        },\\n        async apply(currentNode: HvigorNode): Promise<void> {\\n            const hapContext = currentNode.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n            const dependency = hapContext.getDependenciesOpt();//获取dependency依赖\\n            dependency[\\\"library\\\"]=\\\"file:library.har\\\"\\n            hapContext.setDependenciesOpt(dependency);}\\n        }\\n    };\\nexport default {\\n    system: hapTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "可以通过hvigorfile.ts自定义插件修改工程级、模块级的oh-package.json5的依赖，例如在工程级hvigorfile.ts或模块级hvigorfile.ts分别添加以下内容： ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808304__p1290433643212\\\"'>可以通过hvigorfile.ts自定义插件修改工程级、模块级的oh-package.json5的依赖，例如在工程级hvigorfile.ts或模块级hvigorfile.ts分别添加以下内容： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-config-ohos-sample.html"
    },
    {
        "id": 417,
        "pre": "//工程级别hvigorfile.ts\\nimport { appTasks } from '@ohos/hvigor-ohos-plugin';\\nexport default {\\n  system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n  plugins: [],       /* Custom plugin to extend the functionality of Hvigor. */\\n  config: {\\n    ohos: {\\n      overrides:{\\n        signingConfig: getSigningConfig(), //签名配置对象 \\n        appOpt: {\\n          versionCode: getVersionCode(),\\n          versionName: getVersionName(),\\n        } //app.json中的内容 \\n      }\\n    }\\n  }\\n}\\n\\nfunction getSigningConfig() {\\n  return {\\n    type: \\\"HarmonyOS\\\",\\n    material: {\\n      certpath: \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.cer\\\",\\n      storePassword: \\\"******\\\",\\n      keyAlias: \\\"debugKey\\\",\\n      keyPassword: \\\"******\\\",\\n      profile: \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.p7b\\\",\\n      signAlg: \\\"SHA256withECDSA\\\",\\n      storeFile: \\\"D:\\\\\\\\SigningConfig\\\\\\\\debug_hos.p12\\\"\\n    }\\n  }\\n}\\n\\nfunction getVersionCode() {\\n  return 100000+new Date().getFullYear();\\n}\\n\\nfunction getVersionName() {\\n  return `1.0.0${new Date().getTime()}`;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "通过overrides动态配置签名材料和版本信息(不推荐使用)",
        "parent_text": "通过overrides动态配置签名材料和版本信息(不推荐使用)通过在hvigorfile.ts里使用函数方法，动态配置签名材料和版本号、版本名等信息：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section185161632473\\\"'><a name='\\\"section185161632473\\\"'></a><a name='\\\"section185161632473\\\"'></a><h4>通过overrides动态配置签名材料和版本信息(不推荐使用)</h4><p id='\\\"ZH-CN_TOPIC_0000002166808304__p16870143464117\\\"'>通过在hvigorfile.ts里使用函数方法，动态配置签名材料和版本号、版本名等信息：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-config-ohos-sample.html"
    },
    {
        "id": 418,
        "pre": "{\\n  \\\"apiType\\\": \\\"stageMode\\\",\\n  \\\"buildOption\\\": {\\n    \\\"externalNativeOptions\\\": {\\n      \\\"path\\\": \\\"./src/main/cpp/CMakeLists.txt\\\",\\n      \\\"arguments\\\": \\\"-DCMAKE_BUILD_TYPE=RelWithDebInfo\\\",\\n      \\\"cppFlags\\\": \\\"\\\",\\n    }\\n  },\\n  ...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]release编译带debug信息的so",
        "parent_text": "[h2]release编译带debug信息的so通常release的so会经过strip，strip后的so中的符号表、调试信息会被剥离。  若需要保留so文件中的符号表、调试信息，需要在build-profile.json5的buildOption/externalNativeOptions中配置参数：\\\"arguments\\\": \\\"-DCMAKE_BUILD_TYPE=RelWithDebInfo\\\"。  libs：带debug信息的so。stripped_native_libs：移除调试信息等冗余数据后的so。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section5147812132\\\"'><a name='\\\"section5147812132\\\"'></a><a name='\\\"section5147812132\\\"'></a><h4>[h2]release编译带debug信息的so</h4><p id='\\\"ZH-CN_TOPIC_0000002202129153__p14905151521318\\\"'>通常release的so会经过strip，strip后的so中的符号表、调试信息会被剥离。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129153__p63081634133215\\\"'><span><img originheight='\\\"351\\\"' originwidth='\\\"968\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180542.15142596088804393656336800554830:50001231000000:2800:FF0DAFCCEE8BAEF7BEDE6D60C30E67A5418A81BA0E1F337E0EAB2F82CF3E3D3F.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129153__p781736421\\\"'>若需要保留so文件中的符号表、调试信息，需要在build-profile.json5的buildOption/externalNativeOptions中配置参数：<span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"arguments\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"-DCMAKE_BUILD_TYPE=RelWithDebInfo\\\"</span>。</p>  <ul id='\\\"ZH-CN_TOPIC_0000002202129153__ul64902028835\\\"'><li id='\\\"li1949016281037\\\"'>libs：带debug信息的so。</li><li id='\\\"li44902028836\\\"'>stripped_native_libs：移除调试信息等冗余数据后的so。</li></ul> <p id='\\\"ZH-CN_TOPIC_0000002202129153__p33171215228\\\"'><span><img originheight='\\\"559\\\"' originwidth='\\\"350\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180542.15693251163156012708117461271712:50001231000000:2800:1A1D97A1D58C53A12AF6BE36F7EE0CA192C29078D41837C481293644C37651B8.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129153__p18936747183415\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002202129153__p108522478344\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-exception-stack-parsing-principle.html"
    },
    {
        "id": 419,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-style.html"
    },
    {
        "id": 420,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-style.html"
    },
    {
        "id": 421,
        "pre": "import { asset } from '@kit.AssetStoreKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nfunction stringToArray(str: string): Uint8Array {\\n  let textEncoder = new util.TextEncoder();\\n  return textEncoder.encodeInto(str);\\n}\\n\\nlet query: asset.AssetMap = new Map();\\nquery.set(asset.Tag.ALIAS, stringToArray('demo_alias'));\\nlet attrsToUpdate: asset.AssetMap = new Map();\\nattrsToUpdate.set(asset.Tag.SECRET, stringToArray('demo_pwd_new'));\\nattrsToUpdate.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray('demo_label_new'));\\ntry {\\n  asset.update(query, attrsToUpdate).then(() => {\\n    console.info(`Asset updated successfully.`);\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to update Asset. Code is ${err.code}, message is ${err.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  console.error(`Failed to update Asset. Code is ${err.code}, message is ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "代码示例",
        "parent_text": "  代码示例     本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见API文档。   更新别名是demo_alias的关键资产，将关键资产明文更新为demo_pwd_new，附属属性更新成demo_label_new。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"代码示例\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459337__%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a> <h4>代码示例</h4> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121001.26603569391938759036842939983109:50001231000000:2800:CADA6E9B1A40B4574B0E72680BF1A43719A096BAF20004D85E6CBB16A4F63E4A.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-asset\\\"' target='\\\"_blank\\\"'>API文档</a>。</p> </div> </div> <p>更新别名是demo_alias的关键资产，将关键资产明文更新为demo_pwd_new，附属属性更新成demo_label_new。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/asset-js-update.html"
    },
    {
        "id": 422,
        "pre": "\\\"arkOptions\\\": {\\n  \\\"obfuscation\\\": {\\n    \\\"ruleOptions\\\": {\\n      \\\"enable\\\": true  // 配置true，即可开启代码混淆功能\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "使能混淆",
        "parent_text": "使能混淆为保护代码资产，建议开启混淆，您可以在模块级的build-profile.json5配置文件中开启代码混淆功能：  从DevEco Studio NEXT Developer Beta3（5.0.3.600）版本开始，开启混淆后，混淆规则配置文件obfuscation-rules.txt中默认开启推荐的混淆规则，包含-enable-property-obfuscation、-enable-toplevel-obfuscation、-enable-filename-obfuscation、-enable-export-obfuscation四项混淆项。  使用release模式编译发布时，建议开启混淆，需要正确配置混淆规则，否则可能会有运行时问题。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section18326541833\\\"'><a name='\\\"section18326541833\\\"'></a><a name='\\\"section18326541833\\\"'></a><h4>使能混淆</h4><p id='\\\"ZH-CN_TOPIC_0000002166808288__p432564534\\\"'>为保护代码资产，建议开启混淆，您可以在模块级的build-profile.json5配置文件中开启代码混淆功能：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808288__p98561757143219\\\"'>从DevEco Studio NEXT Developer Beta3（5.0.3.600）版本开始，开启混淆后，混淆规则配置文件obfuscation-rules.txt中默认开启推荐的混淆规则，包含-enable-property-obfuscation、-enable-toplevel-obfuscation、-enable-filename-obfuscation、-enable-export-obfuscation四项混淆项。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808288__note1137117478317\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180504.53189410742998618689644308681691:50001231000000:2800:791D0E2C6E008FB8F44EEAEC48B72A52966AC63CB1E124E69C725C65EA9BD1AD.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808288__p1736819521239\\\"'>使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-compilation-options-customizing-guide#section192461528194916\\\"'>release模式</a>编译发布时，建议开启混淆，需要正确配置混淆规则，否则可能会有<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/source-obfuscation#faq\\\"' target='\\\"_blank\\\"'>运行时问题</a>。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-obfuscation.html"
    },
    {
        "id": 423,
        "pre": "{\\n  \\\"apiType\\\": \\\"stageMode\\\",\\n  ...\\n  \\\"buildOptionSet\\\": [\\n    {\\n      \\\"name\\\": \\\"release\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"obfuscation\\\": {\\n          \\\"ruleOptions\\\": {\\n            \\\"enable\\\": true,\\n            \\\"files\\\": [\\n              \\\"./obfuscation-rules.txt\\\"  // 混淆规则文件\\n            ]\\n          }\\n        }\\n      }\\n    },\\n  ],\\n  ...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "打开模块级build-profile.json5文件，在\\\"files\\\"字段下配置混淆规则文件的相对路径，支持配置多个文件，默认为./obfuscation-rules.txt。 ",
        "import_module": null,
        "parent": "<li id='\\\"li155251839123714\\\"'>打开模块级build-profile.json5文件，在\\\"files\\\"字段下配置混淆规则文件的相对路径，支持配置多个文件，默认为./obfuscation-rules.txt。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-obfuscation.html"
    },
    {
        "id": 424,
        "pre": "{\\n  \\\"apiType\\\": \\\"stageMode\\\",\\n  ...\\n  \\\"buildOptionSet\\\": [\\n    {\\n      \\\"name\\\": \\\"release\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"obfuscation\\\": {\\n          \\\"ruleOptions\\\": {\\n            \\\"enable\\\": true,\\n            \\\"files\\\": [\\n              \\\"./obfuscation-rules.txt\\\"   \\n            ]\\n          },\\n          \\\"consumerFiles\\\": [              // 该模块被依赖时的混淆规则\\n            \\\"./consumer-rules.txt\\\"   \\n          ]\\n        }\\n      }\\n    },\\n  ],\\n  ...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "打开模块级build-profile.json5文件，在\\\"consumerFiles\\\"字段下配置传递给集成方的混淆规则文件的相对路径，支持配置多个文件，默认为./consumer-rules.txt，对应编译后HAR包中的obfuscation.txt文件。 ",
        "import_module": null,
        "parent": "<li id='\\\"li494220511385\\\"'>打开模块级build-profile.json5文件，在\\\"consumerFiles\\\"字段下配置传递给集成方的混淆规则文件的相对路径，支持配置多个文件，默认为./consumer-rules.txt，对应编译后HAR包中的obfuscation.txt文件。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-obfuscation.html"
    },
    {
        "id": 425,
        "pre": "//index.ets\\nfunc() {\\n  let obj: NapiTestClassObj = { napiTestClassObjData: 0, napiTestClassObjMessage: \\\"hello world\\\" };\\n  let result: ESObject = testNapi.setProperty(obj, \\\"napiTestClassObjMessage\\\", \\\"100\\\");    // 根据napi_set_property接口排查到ArkTS中的属性napiTestClassObjMessage被修改，需要将napiTestClassObjMessage加入-keep-property-name白名单\\n  if (obj.napiTestClassObjMessage === \\\"100\\\") {\\n    console.log(\\\"setProperty success\\\");\\n    return true;\\n  }\\n  return false;\\n}\\n//napi_init.cpp\\nstatic napi_value SetProperty(napi_env env, napi_callback_info info) {\\n    size_t argc = 3;\\n    napi_value args[3];\\n    napi_status status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\\n    if (status != napi_ok) {\\n        napi_throw_error(env, nullptr, \\\"Node-API napi_get_cb_info fail\\\");\\n    }\\n    status = napi_set_property(env, args[0], args[1], args[2]);    // 扫描napi_set_property关键API\\n    if (status != napi_ok) {\\n        napi_throw_error(env, nullptr, \\\"Node-API napi_set_property fail\\\");\\n        return nullptr;\\n    }\\n    return args[0];\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "C++侧访问/操作ArkTS对象属性开发者需要根据C++接口来排查与其相关的ArkTS中的属性字符串，并手动加入白名单中，涉及的C++接口参考使用Node-API接口设置ArkTS对象的属性。  ",
        "import_module": null,
        "parent": "<li id='\\\"li7357933354\\\"'><strong>C++侧访问/操作ArkTS对象属性</strong><p id='\\\"ZH-CN_TOPIC_0000002166808288__p7357433450\\\"'>开发者需要根据C++接口来排查与其相关的ArkTS中的属性字符串，并手动加入白名单中，涉及的C++接口参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/use-napi-about-property\\\"' target='\\\"_blank\\\"'>使用Node-API接口设置ArkTS对象的属性</a>。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-obfuscation.html"
    },
    {
        "id": 426,
        "pre": "import { map, mapCommon } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": "import { map, mapCommon } from '@kit.MapKit';",
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-calculate-distance.html"
    },
    {
        "id": 427,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-literal-enum-member\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-literal-enum-member.html"
    },
    {
        "id": 428,
        "pre": "export enum Valid {\\n  a = 'hello',\\n  b = 'TestStr' // A regular string\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-literal-enum-member.html"
    },
    {
        "id": 429,
        "pre": "const str = 'Test';\\nexport enum Invalid {\\n  a = str, // Variable assignment\\n  b = {}, // Object assignment\\n  c = `A template literal string`, // Template literal\\n  d = new Set(1, 2, 3), // Constructor in assignment\\n  e = 2 + 2 // Expression assignment\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-literal-enum-member.html"
    },
    {
        "id": 430,
        "pre": "{\\n  \\\"execution\\\": {\\n    \\\"analyze\\\": \\\"normal\\\",\\n    \\\"daemon\\\": true,\\n    \\\"incremental\\\": true,\\n    \\\"parallel\\\": true,\\n    \\\"typeCheck\\\": false,\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "execution",
        "parent_text": "executionexecution是执行构建的相关配置参数，仅在命令行构建场景下生效。如果通过DevEco Studio菜单栏构建，需要在File > Settings > Build, Execution, Deployment > Build Tools > Hvigor中设置。 表2 execution字段说明字段名称  是否必选  类型  含义    analyze  可选  字符串/布尔值  构建分析模式。 normal（默认值）：普通模式，通过简单打点数据进行分析。原default模式已废弃。advanced：进阶模式，通过更加详细的打点数据进行分析。如果需要更详细的任务耗时数据，请选择该模式。原verbose模式已废弃。false：不启用构建分析。   daemon  可选  布尔值  是否启用守护进程编译。 true（缺省默认值）：启用。false：不启用。   incremental  可选  布尔值  是否启用增量编译。 true（缺省默认值）：启用。false：不启用。   parallel  可选  布尔值  是否启用并行编译。 true（缺省默认值）：启用。false：不启用。   typeCheck  可选  布尔值  是否启用构建脚本hvigorfile.ts文件的类型检查，启用后构建效率可能会有所降低。 true：启用。false（缺省默认值）：不启用。     execution字段示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section6901191119219\\\"'><a name='\\\"section6901191119219\\\"'></a><a name='\\\"section6901191119219\\\"'></a><h4>execution</h4><p id='\\\"ZH-CN_TOPIC_0000002231105081__p19943406567\\\"'>execution是执行构建的相关配置参数，仅在命令行构建场景下生效。如果通过DevEco Studio菜单栏构建，需要在<strong>File &gt; </strong><strong>Settings &gt; Build, Execution, Deployment &gt; Build Tools &gt; Hvigor</strong>中设置。</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table8894141119211\\\"'><caption><b>表2 </b>execution字段说明</caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row138939114219\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p6442113612412\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"10.82%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p544215360417\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"16.78%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1144215365412\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.3.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"47.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1944217361343\\\"'>含义</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row58939111220\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p2330162813415\\\"'>analyze</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.82%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p333018284412\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.78%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p13302281644\\\"'>字符串/布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"47.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p173301328246\\\"'>构建分析模式。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul1333011284417\\\"'><li id='\\\"li63301028843\\\"'>normal（默认值）：普通模式，通过简单打点数据进行分析。原default模式已废弃。</li><li id='\\\"li1933016281643\\\"'>advanced：进阶模式，通过更加详细的打点数据进行分析。如果需要更详细的任务耗时数据，请选择该模式。原verbose模式已废弃。</li><li id='\\\"li033012281045\\\"'>false：不启用构建分析。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row198934111121\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p43304281841\\\"'>daemon</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.82%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1933042811419\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.78%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p113309281444\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"47.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p123308281544\\\"'>是否启用守护进程编译。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul63309289410\\\"'><li id='\\\"li1233011282415\\\"'>true（缺省默认值）：启用。</li><li id='\\\"li033042818413\\\"'>false：不启用。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1089414111421\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p16331132817418\\\"'>incremental</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.82%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p63311828343\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.78%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p933115284416\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"47.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1331132818417\\\"'>是否启用增量编译。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul1833120281043\\\"'><li id='\\\"li8331172813412\\\"'>true（缺省默认值）：启用。</li><li id='\\\"li63317285411\\\"'>false：不启用。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row289481112211\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p333113289419\\\"'>parallel</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.82%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p933118281249\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.78%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p533119281349\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"47.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1833122820419\\\"'>是否启用并行编译。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul193314287419\\\"'><li id='\\\"li533113289419\\\"'>true（缺省默认值）：启用。</li><li id='\\\"li933117282048\\\"'>false：不启用。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row9894011228\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p433120281141\\\"'>typeCheck</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"10.82%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p183318281846\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"16.78%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p14331112814412\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"47.4%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p143311728045\\\"'>是否启用构建脚本hvigorfile.ts文件的类型检查，启用后构建效率可能会有所降低。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul833142817412\\\"'><li id='\\\"li183316287411\\\"'>true：启用。</li><li id='\\\"li333114289415\\\"'>false（缺省默认值）：不启用。</li></ul> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231105081__p111572321504\\\"'>execution字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-set-options.html"
    },
    {
        "id": 431,
        "pre": "{\\n  \\\"logging\\\": {\\n    \\\"level\\\": \\\"debug\\\"\\n  }\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "logging",
        "parent_text": "logginglogging是日志相关配置参数。 表3 logging字段说明字段名称  是否必选  类型  含义    level  可选  字符串  构建时打印日志的级别。 debug：调测日志。info（缺省默认值）：基本信息日志。warn：告警日志。error：错误日志。     logging字段示例：  ",
        "import_module": "{\\n  \\\"logging\\\": {\\n    \\\"level\\\": \\\"debug\\\"\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section85176471028\\\"'><a name='\\\"section85176471028\\\"'></a><a name='\\\"section85176471028\\\"'></a><h4>logging</h4><p id='\\\"ZH-CN_TOPIC_0000002231105081__p142872034417\\\"'>logging是日志相关配置参数。</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table851110471325\\\"'><caption><b>表3 </b>logging字段说明</caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1851116471217\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p058013411512\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"11.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p45807412520\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"13.38%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p8580146515\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.4.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"50.370000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p658020417517\\\"'>含义</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row2051124716213\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p4861183515516\\\"'>level</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p8862735458\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.38%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p16862135656\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.370000000000005%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1486215351858\\\"'>构建时打印日志的级别。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul108626351351\\\"'><li id='\\\"li1186214351555\\\"'>debug：调测日志。</li><li id='\\\"li786283512517\\\"'>info（缺省默认值）：基本信息日志。</li><li id='\\\"li886211351250\\\"'>warn：告警日志。</li><li id='\\\"li1486283519512\\\"'>error：错误日志。</li></ul> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231105081__p17271836210\\\"'>logging字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-set-options.html"
    },
    {
        "id": 432,
        "pre": "{\\n  \\\"debugging\\\": {\\n    \\\"stacktrace\\\": true\\n  }\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "debugging",
        "parent_text": "debuggingdebugging是调测相关配置参数。 表4 debugging字段说明字段名称  是否必选  类型  含义    stacktrace  可选  布尔值  是否启用堆栈跟踪。 true：启用。false（缺省默认值）：不启用。     debugging字段示例：  ",
        "import_module": "{\\n  \\\"debugging\\\": {\\n    \\\"stacktrace\\\": true\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section76575554217\\\"'><a name='\\\"section76575554217\\\"'></a><a name='\\\"section76575554217\\\"'></a><h4>debugging</h4><p id='\\\"ZH-CN_TOPIC_0000002231105081__p7738921720\\\"'>debugging是调测相关配置参数。</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1765220558212\\\"'><caption><b>表4 </b>debugging字段说明</caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row56521455523\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p91181672516\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"11.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p181181773520\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"13.13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p01181971756\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"50.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p61185713510\\\"'>含义</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row465205518216\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p18869541359\\\"'>stacktrace</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p686914411354\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.13%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1886954112516\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p8869341959\\\"'>是否启用堆栈跟踪。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul1186914411056\\\"'><li id='\\\"li1086934118510\\\"'>true：启用。</li><li id='\\\"li128694411654\\\"'>false（缺省默认值）：不启用。</li></ul> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231105081__p1277210185319\\\"'>debugging字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-set-options.html"
    },
    {
        "id": 433,
        "pre": "{\\n  \\\"nodeOptions\\\": {\\n    \\\"maxOldSpaceSize\\\": 8192\\n    \\\"exposeGC\\\": true\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "nodeOptions",
        "parent_text": "nodeOptionsnodeOptions是Node相关配置参数。 表5 nodeOptions字段说明字段名称  是否必选  类型  含义    maxOldSpaceSize  可选  整型数值  启用守护进程编译时，为守护进程设置最大的老生代内存大小，单位为MB，默认为8192MB。当工程代码量较大出现JS内存溢出时，可以调整该参数。   exposeGC  可选  布尔值  是否启用GC（Garbage Collection，内存回收），启用后会优化编译过程的峰值内存。 true（缺省默认值）：启用。false：不启用。     nodeOptions字段示例：  ",
        "import_module": "{\\n  \\\"debugging\\\": {\\n    \\\"stacktrace\\\": true\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section74431812314\\\"'><a name='\\\"section74431812314\\\"'></a><a name='\\\"section74431812314\\\"'></a><h4>nodeOptions</h4><p id='\\\"ZH-CN_TOPIC_0000002231105081__p74831433239\\\"'>nodeOptions是Node相关配置参数。</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1843811735\\\"'><caption><b>表5 </b>nodeOptions字段说明</caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row18438411739\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p78846819515\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p108842082511\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"12.620000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p118841811515\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"51.38%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p3884182058\\\"'>含义</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1243820115312\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p18286174816519\\\"'>maxOldSpaceSize</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p728634816514\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.620000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p22862481758\\\"'>整型数值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"51.38%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p32861048251\\\"'>启用守护进程编译时，为守护进程设置最大的老生代内存大小，单位为MB，默认为8192MB。当工程代码量较大出现JS内存溢出时，可以调整该参数。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row94381418314\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p528720485518\\\"'>exposeGC</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p182871248254\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"12.620000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p10287184815513\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"51.38%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1328744812515\\\"'>是否启用GC（Garbage Collection，内存回收），启用后会优化编译过程的峰值内存。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul172877486513\\\"'><li id='\\\"li142874484514\\\"'>true（缺省默认值）：启用。</li><li id='\\\"li52874487510\\\"'>false：不启用。</li></ul> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231105081__p158301021444\\\"'>nodeOptions字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-set-options.html"
    },
    {
        "id": 434,
        "pre": "{\\n  \\\"properties\\\": {\\n    \\\"hvigor.cacheDir\\\": \\\"D://tmp\\\",\\n    \\\"ohos.buildDir\\\": \\\"D://tmp\\\",\\n    \\\"enableSignTask\\\": true,\\n    \\\"ohos.arkCompile.maxSize\\\": 6,\\n    \\\"hvigor.pool.maxSize\\\": 8,\\n    \\\"ohos.pack.compressLevel\\\": \\\"standard\\\",\\n    \\\"hvigor.analyzeHtml\\\": true,\\n    \\\"hvigor.dependency.useNpm\\\": false,\\n    \\\"ohos.compile.lib.entryfile\\\": true,\\n    \\\"ohos.align.target\\\": \\\"target1\\\",\\n    \\\"ohos.fallback.target\\\": [\\\"target1\\\", \\\"target2\\\"],\\n    \\\"ohos.arkCompile.sourceMapDir\\\": \\\"D://MyProject\\\",\\n    \\\"ohos.collect.debugSymbol\\\": false,\\n    \\\"hvigor.enableMemoryCache\\\": true,\\n    \\\"hvigor.memoryThreshold\\\": 1000,\\n    \\\"ohos.nativeResolver\\\": true,\\n    \\\"ohos.arkCompile.noEmitJs\\\": true,\\n    \\\"ohos.sign.har\\\": true,\\n    \\\"hvigor.keepDependency\\\": false,\\n    \\\"ohos.arkCompile.emptyBundleName\\\": true,\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "properties",
        "parent_text": "propertiesproperties是额外配置参数。 表7 properties字段说明字段名称  是否必选  类型  含义    hvigor.cacheDir  可选  字符串  指定项目根目录下的.hvigor缓存文件夹的存放路径。  说明： 同名的不同工程不可指定相同的存放位置。    ohos.buildDir  可选  字符串  指定项目的构建产物目录（build目录）存放位置。  说明： 同名的不同工程不可指定相同的存放位置。    enableSignTask  可选  布尔值  是否启用HAP或HSP签名任务。 true（缺省默认值）：启用。false：不启用。   ohos.arkCompile.maxSize  可选  整型数值  指定编译ArkTS线程的数量，默认为5。   hvigor.pool.maxSize  可选  整型数值  指定编译过程中的线程数量，相比ohos.arkCompile.maxSize增加签名、打包等任务的线程。默认值为“工程的模块数”和“电脑虚拟核数-1”两者的较小值。   ohos.pack.compressLevel  可选  字符串  设置打包hap（压缩so）或app（压缩hap）时的压缩率等级。压缩率越高，压缩速度越慢。 fast（缺省默认值）：最低等级的压缩率，压缩速度最快。standard：适中等级的压缩率，压缩速度适中。ultimate：最高等级的压缩率，压缩速度最慢。   hvigor.analyzeHtml  可选  布尔值  是否生成构建可视化html文件。 true：生成构建可视化html文件。生成的html文件存放在工程的.hvigor/report目录下，该文件可直接在浏览器中打开。false（缺省默认值）：不生成构建可视化html文件。   hvigor.dependency.useNpm  可选  布尔值  指定是否使用npm下载hvigor依赖。 若未配置该字段，当Node.js版本 ≥ 16时，默认使用pnpm下载依赖。在某些特定场景，可以通过配置该字段指定使用npm下载依赖。 true：对于任意Node版本，都使用npm下载依赖。false（缺省默认值）：Node.js版本 ≥ 16时，使用pnpm下载依赖；Node.js版本 ＜ 16时，使用npm下载依赖。   ohos.compile.lib.entryfile  可选  布尔值  指定是否从入口文件开始编译： true：表示从模块的入口文件开始编译，将编译入口文件及被引用的文件，没被引用的文件不会参与编译流程。false（缺省默认值）：表示将src/main/ets下的ets和ts文件进行全量编译，涉及到以下场景：构建HSP时，存在于src/main/ets下的ets和ts文件都会被编译到产物中。release模式对HAR混淆或构建字节码HAR时，存在于src/main/ets下的ets和ts文件都会被编译到产物中。构建HAP/HSP时，存在于动态依赖的HAR模块src/main/ets下的ets和ts文件都会被编译到产物中。    ohos.align.target  可选  字符串  指定本次构建任务所有涉及到的模块及其依赖的模块的target。详情请参考多产物构建target。   ohos.fallback.target  可选  字符串数组  指定本次构建任务所有涉及到的模块及其依赖模块的fallback target，fallback target是一个特定优先级的target，各target的优先级顺序：align target > 命令行指定target > 被依赖的父模块target > fallback target > default target。详情请参考多产物构建target。   ohos.arkCompile.sourceMapDir  可选  字符串  指定sourceMap文件的生成路径，方便开发者进行堆栈的回栈与错误信息的定位，当前仅支持Stage模型。若没有指定路径，默认生成在build/{productName}/outputs/{targetName}/mapping下。  说明： 从API 12开始支持。    ohos.collect.debugSymbol  可选  布尔值  是否将sourceMap、nameCache和带调试信息的so文件归档到产物路径下，根据选择的构建模式，如果是构建HAP/HSP/HAR，会归档到模块的build/{productName}/outputs/{targetName}/symbol的release或debug目录下；如果是构建APP，会将HAP/HSP模块的文件归档到工程的build/outputs/{productName}/symbol的release或debug目录下。 true：归档。false：不归档。  说明： 如果不配置，release模式时默认值为true，debug模式时默认值为false。仅支持Stage模型。nameCache文件仅在release模式下且开启混淆后才会生成，release模式下不开启混淆以及debug模式下均不生成这个文件。    hvigor.enableMemoryCache  可选  布尔值  是否开启缓存，开启缓存会加快增量编译速度，关闭缓存能够节省内存占用，但是会增加增量编译时间。 true（缺省默认值）：开启。false：不开启。   hvigor.memoryThreshold  可选  整型数值  内存管理阈值，单位为MB，当编译构建占用内存超过此阈值时，新加入的编译任务会等待，直到正在进行的编译任务结束，新的编译任务才能开始，此配置将导致编译时间延长。  说明： 配置该字段后，即使hvigor.enableMemoryCache配置为true，也不进行缓存。该字段配置为很小的值时，构建任务会串行执行，等效于配置ohos.arkCompile.maxSize:1；配置为很大的值时，与不配置没有差异。    ohos.nativeResolver  可选  布尔值  ArkTS编译过程中是否使用高性能插件进行依赖寻址，使用高性能插件可以降低编译过程的峰值内存，加快编译速度。 true（缺省默认值）：使用。false：不使用。   ohos.arkCompile.noEmitJs  可选  布尔值  ArkTS编译过程中是否生成js中间产物，不生成js中间产物可以降低编译过程的峰值内存，加快编译速度。 true：不生成。false（缺省默认值）：生成。  说明： 以下场景均不支持该字段，配置后也会生成js中间产物： FA模型。覆盖率测试。在release模式下，开启混淆构建包含js中间码的HAR。LiteWearable设备对应的工程。    ohos.arkCompile.singleFileEmit  可选  布尔值  开启此能力后，ArkTS代码编译时将会在单文件解析完成后写入磁盘，可以降低编译过程的峰值内存。 true：开启。false（缺省默认值）：不开启。  说明： 仅在debug模式下生效。当进行代码覆盖率编译时，此能力不使能。    ohos.sign.har  可选  布尔值  是否启用HAR签名任务。详情请参考构建签名HAR。 true：启用。false（缺省默认值）：不启用。   hvigor.keepDependency  可选  布尔值  是否保持hsp中的所有依赖。如果保持则不对依赖进行处理，如果不保持，则只会保留hsp模块中的hsp相关依赖。 true（缺省默认值）：保持。false：不保持。   ohos.arkCompile.emptyBundleName  可选  布尔值  编译后的产物，bundleName字段是否为空值\\\"\\\"。 true：空值。false（缺省默认值）：应用的bundleName。  说明： 仅支持在EntryAbility中使用loadContentByName加载首页，同时使用Navigation导航进行页面跳转时设置为true，否则会导致应用闪退。    ohos.processLib.optimization  可选  布尔值  是否启用ProcessLibs任务性能优化，启用后可以减少ProcessLibs任务中so增量判定的耗时。 true：启用。false（缺省默认值）：不启用。     properties字段示例：  ",
        "import_module": "{\\n  \\\"javaOptions\\\": {\\n    \\\"Xmx\\\": 512\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section260315160319\\\"'><a name='\\\"section260315160319\\\"'></a><a name='\\\"section260315160319\\\"'></a><h4>properties</h4><p id='\\\"ZH-CN_TOPIC_0000002231105081__p138787587415\\\"'>properties是额外配置参数。</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table06034161031\\\"'><caption><b>表7 </b>properties字段说明</caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row35998166312\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1624731220516\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p224719121756\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p18247912154\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p122475122515\\\"'>含义</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1660015164316\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p182019014716\\\"'>hvigor.cacheDir</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p220702075\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1201101678\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p22090175\\\"'>指定项目根目录下的.hvigor缓存文件夹的存放路径。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note62060879\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p182090073\\\"'>同名的不同工程不可指定相同的存放位置。</p> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row260001612316\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1201108716\\\"'>ohos.buildDir</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p520605711\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p020902713\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p17201403713\\\"'>指定项目的构建产物目录（build目录）存放位置。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note2201501876\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p02012015712\\\"'>同名的不同工程不可指定相同的存放位置。</p> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row560021618316\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p132114013717\\\"'>enableSignTask</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p182111011712\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p921705716\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p621601778\\\"'>是否启用HAP或HSP签名任务。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul5211011716\\\"'><li id='\\\"li1821170772\\\"'>true（缺省默认值）：启用。</li><li id='\\\"li132111016710\\\"'>false：不启用。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row66001516330\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p8211204716\\\"'>ohos.arkCompile.maxSize</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p142119010713\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1421801714\\\"'>整型数值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1121803715\\\"'>指定编译ArkTS线程的数量，默认为5。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1360041617320\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p82113017713\\\"'>hvigor.pool.maxSize</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p172190172\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p142190170\\\"'>整型数值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p921301973\\\"'>指定编译过程中的线程数量，相比ohos.arkCompile.maxSize增加签名、打包等任务的线程。默认值为“工程的模块数”和“电脑虚拟核数-1”两者的较小值。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1060041616310\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1021130477\\\"'>ohos.pack.compressLevel</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p112110014710\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p9221101671\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p62270079\\\"'>设置打包hap（压缩so）或app（压缩hap）时的压缩率等级。压缩率越高，压缩速度越慢。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul102217010718\\\"'><li id='\\\"li122250679\\\"'>fast（缺省默认值）：最低等级的压缩率，压缩速度最快。</li><li id='\\\"li7229014713\\\"'>standard：适中等级的压缩率，压缩速度适中。</li><li id='\\\"li14227019718\\\"'>ultimate：最高等级的压缩率，压缩速度最慢。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row2601171613313\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p62220775\\\"'>hvigor.analyzeHtml</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p152250774\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p42216015717\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1922140373\\\"'>是否生成构建可视化html文件。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul1222600713\\\"'><li id='\\\"li522301770\\\"'>true：生成构建可视化html文件。生成的html文件存放在工程的.hvigor/report目录下，该文件可直接在浏览器中打开。</li><li id='\\\"li222120274\\\"'>false（缺省默认值）：不生成构建可视化html文件。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1360111617317\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p18221011717\\\"'>hvigor.dependency.useNpm</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p622120175\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p14221801978\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p7221401273\\\"'>指定是否使用npm下载hvigor依赖。</p> <p id='\\\"ZH-CN_TOPIC_0000002231105081__p11234010710\\\"'>若未配置该字段，当Node.js版本 ≥ 16时，默认使用pnpm下载依赖。在某些特定场景，可以通过配置该字段指定使用npm下载依赖。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul1423701370\\\"'><li id='\\\"li6238012718\\\"'>true：对于任意Node版本，都使用npm下载依赖。</li><li id='\\\"li223401478\\\"'>false（缺省默认值）：Node.js版本 ≥ 16时，使用pnpm下载依赖；Node.js版本 ＜ 16时，使用npm下载依赖。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row14601416331\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p15231001177\\\"'>ohos.compile.lib.entryfile</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p172320875\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p5234019714\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p223140678\\\"'>指定是否从入口文件开始编译：</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul102350573\\\"'><li id='\\\"li8231901971\\\"'>true：表示从模块的入口文件开始编译，将编译入口文件及被引用的文件，没被引用的文件不会参与编译流程。</li><li id='\\\"li52340473\\\"'>false（缺省默认值）：表示将src/main/ets下的ets和ts文件进行全量编译，涉及到以下场景：<ol id='\\\"ZH-CN_TOPIC_0000002231105081__ol172310020714\\\"'><li id='\\\"li323807719\\\"'>构建HSP时，存在于src/main/ets下的ets和ts文件都会被编译到产物中。</li><li id='\\\"li22315019718\\\"'>release模式对HAR混淆或构建字节码HAR时，存在于src/main/ets下的ets和ts文件都会被编译到产物中。</li><li id='\\\"li9231804718\\\"'>构建HAP/HSP时，存在于动态依赖的HAR模块src/main/ets下的ets和ts文件都会被编译到产物中。</li></ol> </li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row9601141619311\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p6231001474\\\"'>ohos.align.target</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p11231101272\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1624301578\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p52450577\\\"'>指定本次构建任务所有涉及到的模块及其依赖的模块的target。详情请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section7121513141619\\\"'>多产物构建target</a>。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row96011216737\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p92413015715\\\"'>ohos.fallback.target</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p16242020715\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1241601778\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p12480179\\\"'>指定本次构建任务所有涉及到的模块及其依赖模块的fallback target，fallback target是一个特定优先级的target，各target的优先级顺序：align target &gt; 命令行指定target &gt; 被依赖的父模块target &gt; fallback target &gt; default target。详情请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section7121513141619\\\"'>多产物构建target</a>。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row2060111163318\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p192416011718\\\"'>ohos.arkCompile.sourceMapDir</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p15241902078\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p12241017712\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p824401671\\\"'>指定sourceMap文件的生成路径，方便开发者进行堆栈的回栈与错误信息的定位，当前仅支持Stage模型。若没有指定路径，默认生成在build/{productName}/outputs/{targetName}/mapping下。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note1124107715\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1241201677\\\"'>从API 12开始支持。</p> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1960115161536\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p72419010719\\\"'>ohos.collect.debugSymbol</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p192570876\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p0252001574\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p132517016716\\\"'>是否将sourceMap、<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-exception-stack-parsing-principle\\\"'>nameCache</a>和带调试信息的so文件归档到产物路径下，根据选择的构建模式，如果是构建HAP/HSP/HAR，会归档到模块的build/{productName}/outputs/{targetName}/symbol的release或debug目录下；如果是构建APP，会将HAP/HSP模块的文件归档到工程的build/outputs/{productName}/symbol的release或debug目录下。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul19258017712\\\"'><li id='\\\"li192515016710\\\"'>true：归档。</li><li id='\\\"li1425305717\\\"'>false：不归档。</li></ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note9251101077\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul6252001270\\\"'><li id='\\\"li11251001675\\\"'>如果不配置，release模式时默认值为true，debug模式时默认值为false。</li><li id='\\\"li425001273\\\"'>仅支持Stage模型。</li><li id='\\\"li425501713\\\"'>nameCache文件仅在release模式下且开启混淆后才会生成，release模式下不开启混淆以及debug模式下均不生成这个文件。</li></ul> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row460213161133\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p5257015710\\\"'>hvigor.enableMemoryCache</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p225130477\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p025206720\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p625201471\\\"'>是否开启缓存，开启缓存会加快增量编译速度，关闭缓存能够节省内存占用，但是会增加增量编译时间。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul192500576\\\"'><li id='\\\"li1025130976\\\"'>true（缺省默认值）：开启。</li><li id='\\\"li92690476\\\"'>false：不开启。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row7602101615312\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p17261209719\\\"'>hvigor.memoryThreshold</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p4261901471\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p6261005711\\\"'>整型数值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p15261501478\\\"'>内存管理阈值，单位为MB，当编译构建占用内存超过此阈值时，新加入的编译任务会等待，直到正在进行的编译任务结束，新的编译任务才能开始，此配置将导致编译时间延长。</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note1426200276\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul8264015718\\\"'><li id='\\\"li192610870\\\"'>配置该字段后，即使hvigor.enableMemoryCache配置为true，也不进行缓存。</li><li id='\\\"li42614013715\\\"'>该字段配置为很小的值时，构建任务会串行执行，等效于配置ohos.arkCompile.maxSize:1；配置为很大的值时，与不配置没有差异。</li></ul> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row2602111610310\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p52680872\\\"'>ohos.nativeResolver</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1126201575\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p10261001478\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p9261601674\\\"'>ArkTS编译过程中是否使用高性能插件进行依赖寻址，使用高性能插件可以降低编译过程的峰值内存，加快编译速度。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul19261308716\\\"'><li id='\\\"li126201274\\\"'>true（缺省默认值）：使用。</li><li id='\\\"li9261809711\\\"'>false：不使用。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1360271616311\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1327601874\\\"'>ohos.arkCompile.noEmitJs</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p162718011712\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p727902074\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1727401719\\\"'>ArkTS编译过程中是否生成js中间产物，不生成js中间产物可以降低编译过程的峰值内存，加快编译速度。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul132710012710\\\"'><li id='\\\"li1274012719\\\"'>true：不生成。</li><li id='\\\"li9271006713\\\"'>false（缺省默认值）：生成。</li></ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note527003718\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p3271104715\\\"'>以下场景均不支持该字段，配置后也会生成js中间产物：</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul62730575\\\"'><li id='\\\"li6272001078\\\"'>FA模型。</li><li id='\\\"li62712015716\\\"'>覆盖率测试。</li><li id='\\\"li122770376\\\"'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-har#section19788284410\\\"'>在release模式下，开启混淆构建包含js中间码的HAR</a>。</li><li id='\\\"li3275014713\\\"'>LiteWearable设备对应的工程。</li></ul> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row15431142581718\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p72710019719\\\"'>ohos.arkCompile.singleFileEmit</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p627903716\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p102810010719\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p8866559145912\\\"'>开启此能力后，ArkTS代码编译时将会在单文件解析完成后写入磁盘，可以降低编译过程的峰值内存。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul15288020713\\\"'><li id='\\\"li11285010712\\\"'>true：开启。</li><li id='\\\"li22819014714\\\"'>false<span id='\\\"ZH-CN_TOPIC_0000002231105081__ph1727131345611\\\"'>（缺省默认值）</span>：不开启。</li></ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note17281704717\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul17431101119575\\\"'><li id='\\\"li16431101185720\\\"'>仅在debug模式下生效。</li><li id='\\\"li190761215719\\\"'>当进行代码覆盖率编译时，此能力不使能。</li></ul> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1760213161316\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p182840773\\\"'>ohos.sign.har</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p16281709719\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p028201476\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p162830072\\\"'>是否启用HAR签名任务。详情请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-har#section1295663315314\\\"'>构建签名HAR</a>。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul14280013715\\\"'><li id='\\\"li8281101578\\\"'>true：启用。</li><li id='\\\"li17283016719\\\"'>false（缺省默认值）：不启用。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row116032016432\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p9292000713\\\"'>hvigor.keepDependency</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p13291501876\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p1529803716\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p9296013715\\\"'>是否保持hsp中的所有依赖。如果保持则不对依赖进行处理，如果不保持，则只会保留hsp模块中的hsp相关依赖。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul162916010715\\\"'><li id='\\\"li0291405716\\\"'>true（缺省默认值）：保持。</li><li id='\\\"li11291804720\\\"'>false：不保持。</li></ul> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row1360341619312\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p10291802712\\\"'>ohos.arkCompile.emptyBundleName</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p7291013712\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p19291601712\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p15293020718\\\"'>编译后的产物，bundleName字段是否为空值\\\"\\\"。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul162918017719\\\"'><li id='\\\"li92912014714\\\"'>true：空值。</li><li id='\\\"li2301509711\\\"'>false（缺省默认值）：应用的bundleName。</li></ul> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002231105081__note5302001473\\\"'><span class='\\\"notetitle\\\"'> 说明： </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p113012017712\\\"'>仅支持在EntryAbility中使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-window#loadcontentbyname11\\\"' target='\\\"_blank\\\"'>loadContentByName</a>加载首页，同时使用Navigation导航进行页面跳转时设置为true，否则会导致应用闪退。</p> </div></div> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002231105081__row742905105815\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p3429175116582\\\"'>ohos.processLib.optimization</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"11.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p19134141325913\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"13.99%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p046671618597\\\"'>布尔值</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"49.39%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002231105081__p946118288553\\\"'>是否启用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-task-process#section185256319556\\\"'>ProcessLibs任务</a>性能优化，启用后可以减少ProcessLibs任务中so增量判定的耗时。</p> <ul id='\\\"ZH-CN_TOPIC_0000002231105081__ul1022917170816\\\"'><li id='\\\"li62305174812\\\"'>true：启用。</li><li id='\\\"li142301317780\\\"'>false（缺省默认值）：不启用。</li></ul> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002231105081__p157339312617\\\"'>properties字段示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-set-options.html"
    },
    {
        "id": 435,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-require-imports\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-require-imports.html"
    },
    {
        "id": 436,
        "pre": "// lib1 lib2 lib3为ArkTS文件\\nimport * as lib1 from './lib1';\\nimport { lib2 } from './lib2';\\nimport * as lib3 from './lib3';",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-require-imports.html"
    },
    {
        "id": 437,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-object-link-to-replace-prop\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-object-link-to-replace-prop.html"
    },
    {
        "id": 438,
        "pre": "@Observed\\nclass ClassA {\\n  public c: number = 0;\\n  constructor(c: number) {\\n    this.c = c;\\n  }\\n}\\n@Component\\nstruct PropChild {\\n  // @ObjectLink 装饰状态变量不会深拷贝\\n  // 当修饰为ObjectLink时 ClassA必须同时被Observed修饰\\n  @ObjectLink testNum: ClassA;\\n  build() {\\n    Text(`PropChild testNum ${this.testNum.c}`)\\n  }\\n}\\n@Entry\\n@Component\\nstruct Parent {\\n  @State testNum: ClassA[] = [new ClassA(1)];\\n  build() {\\n    Column() {\\n      Text(`Parent testNum ${this.testNum[0].c}`)\\n        .onClick(() => {\\n          this.testNum[0].c += 1;\\n        })\\n      // 当子组件不需要发生本地改变时，优先使用@ObjectLink，因为@Prop是会深拷贝数据，具有拷贝的性能开销，所以这个时候@ObjectLink是比@Link和@Prop更优的选择\\n      PropChild({ testNum: this.testNum[0] })\\n    }\\n  }}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-object-link-to-replace-prop.html"
    },
    {
        "id": 439,
        "pre": "@Observed\\nclass ClassA {\\n  public c: number = 0;\\n  constructor(c: number) {\\n    this.c = c;\\n  }\\n}\\n@Component\\nstruct PropChild {\\n  // @Prop 装饰状态变量会深拷贝\\n  @Prop testNum: ClassA;\\n  build() {\\n    Text(`PropChild testNum ${this.testNum.c}`)\\n  }\\n}\\n@Entry\\n@Component\\nstruct Parent {\\n  @State testNum: ClassA[] = [new ClassA(1)];\\n  build() {\\n    Column() {\\n      Text(`Parent testNum ${this.testNum[0].c}`)\\n        .onClick(() => {\\n          this.testNum[0].c += 1;\\n        })\\n      // PropChild没有改变@Prop testNum: ClassA的值，所以这时最优的选择是使用@ObjectLink\\n      PropChild({ testNum: this.testNum[0] })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-object-link-to-replace-prop.html"
    },
    {
        "id": 440,
        "pre": "#include \\\"napi/native_api.h\\\"\\n#include \\\"window_manager/oh_window_comm.h\\\"\\n#include \\\"window_manager/oh_window_event_filter.h\\\"\\n#include \\\"multimodalinput/oh_input_manager.h\\\"\\n#include \\\"multimodalinput/oh_key_code.h\\\"\\n\\n// 设置过滤函数\\nstatic bool filterFunc(Input_KeyEvent *event) {\\n  auto keyCode = OH_Input_GetKeyEventKeyCode(event);\\n  auto action = OH_Input_GetKeyEventAction(event);\\n  // case1: 过滤escape\\n  // return keyCode == Input_KeyCode::KEYCODE_ESCAPE;\\n\\n  // case2: 过滤数字键的按下，抬起不过滤\\n  // return keyCode >= Input_KeyCode::KEYCODE_0 && keyCode <= Input_KeyCode::KEYCODE_9\\n  //  && action == Input_KeyEventAction::KEY_ACTION_DOWN;\\n  \\n  // 过滤escape和数字键的按下(case1 || case2)\\n  return (keyCode >= Input_KeyCode::KEYCODE_0 && keyCode <= Input_KeyCode::KEYCODE_9\\n     && action == Input_KeyEventAction::KEY_ACTION_DOWN) || (keyCode == Input_KeyCode::KEYCODE_ESCAPE);\\n}\\n\\nstatic napi_value registerFilter(napi_env env, napi_callback_info info) {\\n  size_t argc = 1;\\n  napi_value args[1] = {nullptr};\\n  napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\\n  \\n  int32_t windowId;\\n  napi_get_value_int32(env, args[0], &windowId);\\n  \\n  // 向windowId对应的窗口注册filterFunc的过滤函数\\n  auto res = OH_NativeWindowManager_RegisterKeyEventFilter(windowId, filterFunc);\\n  \\n  napi_value errCode;\\n  napi_create_int32(env, res, &errCode);\\n  return errCode;\\n}\\n\\nstatic napi_value clearFilter(napi_env env, napi_callback_info info) {\\n  size_t argc = 1;\\n  napi_value args[1] = {nullptr};\\n  napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\\n\\n  int32_t windowId;\\n  napi_get_value_int32(env, args[0], &windowId);\\n\\n  auto res = OH_NativeWindowManager_UnregisterKeyEventFilter(windowId);\\n  napi_value errCode;\\n  napi_create_int32(env, res, &errCode);\\n  return errCode;\\n\\n}\\n\\nEXTERN_C_START\\nstatic napi_value Init(napi_env env, napi_value exports) {\\n  napi_property_descriptor desc[] = {\\n    {\\\"registerFilter\\\", nullptr, registerFilter, nullptr, nullptr, nullptr, napi_default, nullptr},\\n    {\\\"clearFilter\\\", nullptr, clearFilter, nullptr, nullptr, nullptr, napi_default, nullptr}};\\n  napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n  return exports;\\n}\\nEXTERN_C_END",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "示例代码以下示例代码中介绍了如何注册过滤函数和取消过滤函数，以过滤ESC退出按键和数字按键为例。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"示例代码\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178053122__%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\\\"'></a><a name='\\\"%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\\\"'></a><h4>示例代码</h4><p>以下示例代码中介绍了如何注册过滤函数和取消过滤函数，以过滤ESC退出按键和数字按键为例。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/native-window-event-filter.html"
    },
    {
        "id": 441,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-rsa-sign\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section0610155012289\\\"'><a name='\\\"section0610155012289\\\"'></a><a name='\\\"section0610155012289\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-rsa-sign.html"
    },
    {
        "id": 442,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-use-before-define\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-use-before-define.html"
    },
    {
        "id": 443,
        "pre": "const a = '10';\\nconsole.info(a);\\n\\nfunction ff(): void {\\n  console.info('function');\\n}\\nff();\\n\\nconst foo = '1';\\nexport { foo };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-use-before-define.html"
    },
    {
        "id": 444,
        "pre": "console.info(a);\\nconst a = '10';\\n\\nff();\\nfunction ff(): void {\\n  console.info('function');\\n}\\n\\nexport { foo };\\nconst foo = '1';",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-use-before-define.html"
    },
    {
        "id": 445,
        "pre": "ArkUI_NodeHandle CreateDialogContent() {\\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \\\"ArkUI_NativeNodeAPI_1\\\"));\\n    ArkUI_NodeHandle text = nodeAPI->createNode(ARKUI_NODE_TEXT);\\n    ArkUI_NumberValue textWidthValue[] = {{.f32 = 300}};\\n    ArkUI_AttributeItem textWidthItem = {.value = textWidthValue,\\n                                         .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(text, NODE_WIDTH, &textWidthItem);\\n    ArkUI_NumberValue textHeightValue[] = {{.f32 = 300}};\\n    ArkUI_AttributeItem textHeightItem = {.value = textHeightValue,\\n                                          .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(text, NODE_HEIGHT, &textHeightItem);\\n    ArkUI_NodeHandle span = nodeAPI->createNode(ARKUI_NODE_SPAN);\\n    ArkUI_AttributeItem spanItem = {.string = \\\"这是一个弹窗\\\"};\\n    nodeAPI->setAttribute(span, NODE_SPAN_CONTENT, &spanItem);\\n    ArkUI_NodeHandle imageSpan = nodeAPI->createNode(ARKUI_NODE_IMAGE_SPAN);\\n    ArkUI_AttributeItem imageSpanItem = {.string = \\\"/pages/common/sky.jpg\\\"};\\n    nodeAPI->setAttribute(imageSpan, NODE_IMAGE_SPAN_SRC, &imageSpanItem);\\n    ArkUI_NumberValue imageSpanWidthValue[] = {{.f32 = 300}};\\n    ArkUI_AttributeItem imageSpanWidthItem = {.value = imageSpanWidthValue,\\n                                              .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(imageSpan, NODE_WIDTH, &imageSpanWidthItem);\\n    ArkUI_NumberValue imageSpanHeightValue[] = {{.f32 = 200}};\\n    ArkUI_AttributeItem imageSpanHeightItem = {.value = imageSpanHeightValue,\\n                                               .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(imageSpan, NODE_HEIGHT, &imageSpanHeightItem);\\n    nodeAPI->addChild(text, span);\\n    nodeAPI->addChild(text, imageSpan);\\n    return text;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建弹窗内容节点。 ",
        "import_module": null,
        "parent": "<li><p>创建弹窗内容节点。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ndk-build-pop-up-window.html"
    },
    {
        "id": 446,
        "pre": "constexpr int32_t BUTTON_CLICK_ID = 1;\\nbool isShown = false;\\nArkUI_NativeDialogHandle dialogController;\\nArkUI_NodeHandle buttonNode;\\n\\nvoid MainViewMethod(ArkUI_NodeContentHandle handle) {\\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \\\"ArkUI_NativeNodeAPI_1\\\"));\\n    ArkUI_NodeHandle column = nodeAPI->createNode(ARKUI_NODE_COLUMN);\\n    ArkUI_NumberValue widthValue[] = {{.f32 = 300}};\\n    ArkUI_AttributeItem widthItem = {.value = widthValue, .size = sizeof(widthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(column, NODE_WIDTH, &widthItem);\\n    ArkUI_NumberValue heightValue[] = {{.f32 = 300}};\\n    ArkUI_AttributeItem heightItem = {.value = heightValue, .size = sizeof(heightValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(column, NODE_HEIGHT, &heightItem);\\n    \\n    buttonNode = nodeAPI->createNode(ARKUI_NODE_BUTTON);\\n    ArkUI_NumberValue buttonWidthValue[] = {{.f32 = 200}};\\n    ArkUI_AttributeItem buttonWidthItem = {.value = buttonWidthValue,\\n                                           .size = sizeof(buttonWidthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(buttonNode, NODE_WIDTH, &buttonWidthItem);\\n    ArkUI_NumberValue buttonHeightValue[] = {{.f32 = 50}};\\n    ArkUI_AttributeItem buttonHeightItem = {.value = buttonHeightValue,\\n                                            .size = sizeof(buttonHeightValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(buttonNode, NODE_HEIGHT, &buttonHeightItem);\\n    ArkUI_AttributeItem labelItem = {.string = \\\"点击弹窗\\\"};\\n    nodeAPI->setAttribute(buttonNode, NODE_BUTTON_LABEL, &labelItem);\\n    ArkUI_NumberValue buttonTypeValue[] = {{.i32 = static_cast<int32_t>(ARKUI_BUTTON_TYPE_NORMAL)}};\\n    ArkUI_AttributeItem buttonTypeItem = {.value = buttonTypeValue,\\n                                          .size = sizeof(buttonTypeValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(buttonNode, NODE_BUTTON_TYPE, &buttonTypeItem);\\n    nodeAPI->registerNodeEvent(buttonNode, NODE_ON_CLICK, BUTTON_CLICK_ID, nullptr);\\n    nodeAPI->addNodeEventReceiver(buttonNode, OnButtonClicked);\\n    nodeAPI->addChild(column, buttonNode);\\n    OH_ArkUI_NodeContent_AddNode(handle, column);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建一个可交互的界面，点击Button之后可以弹窗。其中 ArkUI_NodeContentHandle 类型节点的获取与使用可参考接入ArkTS页面。 ",
        "import_module": null,
        "parent": "<li><p>创建一个可交互的界面，点击Button之后可以弹窗。其中 ArkUI_NodeContentHandle 类型节点的获取与使用可参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ndk-access-the-arkts-page\\\"'>接入ArkTS页面</a>。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ndk-build-pop-up-window.html"
    },
    {
        "id": 447,
        "pre": "//开发实例分两页实现，一页为文档扫描入口页，一页为文档扫描实现页 \\n//文档扫描入口页，需引入文档扫描实现页，以下文实例为例，实现页文件名为DocDemoPage\\nimport { DocDemoPage } from './DocDemoPage'\\n\\n@Entry\\n@Component\\nstruct MainPage {\\n  @Provide('pathStack') pathStack: NavPathStack = new NavPathStack()\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'documentScanner') {\\n      DocDemoPage()\\n    }\\n  }\\n\\n  //文档扫描入口按钮，可替换为业务入口\\n  build() {\\n    Navigation(this.pathStack) {\\n      Button('DocumentScanner', { stateEffect: true, type: ButtonType.Capsule })\\n        .width('50%')\\n        .height(40)\\n        .onClick(() => {\\n          this.pathStack.pushPath({ name: 'documentScanner' })\\n        })\\n    }.title('文档扫描控件demo').navDestination(this.PageMap)\\n    .mode(NavigationMode.Stack)\\n  }\\n}",
        "type": "Reference",
        "function_call": "pop()",
        "function_name": "开发实例",
        "parent_text": "开发实例  //文档扫描实现页，文件名为DocDemoPage，需被引入至入口页\\nimport {\\n  DocType,\\n  DocumentScanner,\\n  DocumentScannerConfig,\\n  SaveOption,\\n  FilterId,\\n  ShootingMode\\n} from \\\"@kit.VisionKit\\\"\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nconst TAG: string = 'DocDemoPage'\\n\\n//文档扫描页，用于加载uiExtensionAbility\\n@Entry\\n@Component\\nexport struct DocDemoPage {\\n  @State docImageUris: string[] = []\\n  @Consume('pathStack') pathStack: NavPathStack\\n  private docScanConfig = new DocumentScannerConfig()\\n\\n  aboutToAppear() {\\n    this.docScanConfig.supportType = [DocType.DOC, DocType.SHEET]\\n    this.docScanConfig.isGallerySupported = true\\n    this.docScanConfig.editTabs = []\\n    this.docScanConfig.maxShotCount = 3\\n    this.docScanConfig.defaultFilterId = FilterId.ORIGINAL\\n    this.docScanConfig.defaultShootingMode = ShootingMode.MANUAL\\n    this.docScanConfig.isShareable = true\\n    this.docScanConfig.originalUris = []\\n  }\\n\\n  build() {\\n    NavDestination() {\\n      Stack({ alignContent: Alignment.Top }) {\\n      //展示文档扫描结果\\n        List() {\\n          ForEach(this.docImageUris, (uri: string) => {\\n            ListItem() {\\n              Image(uri)\\n                .objectFit(ImageFit.Contain)\\n                .width(100)\\n                .height(100)\\n            }\\n          })\\n        }\\n        .listDirection(Axis.Vertical)\\n        .alignListItem(ListItemAlign.Center)\\n        .margin({\\n          top: 50\\n        })\\n        .width('80%')\\n        .height('80%')\\n        \\n        //文档扫描\\n        DocumentScanner({\\n          scannerConfig: this.docScanConfig,\\n          onResult: (code: number, saveType: SaveOption, uris: string[]) => {\\n            hilog.info(0x0001, TAG, `result code: ${code}, save: ${saveType}`)\\n            if (code === -1) {\\n              this.pathStack.pop()\\n            }\\n            uris.forEach(uriString => {\\n              hilog.info(0x0001, TAG, `uri: ${uriString}`)\\n            })\\n            this.docImageUris = uris\\n          }\\n        })\\n          .size({ width: '100%', height: '100%' })\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .hideTitleBar(true)\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section12918203941611\\\"'><a name='\\\"section12918203941611\\\"'></a><a name='\\\"section12918203941611\\\"'></a><h4>开发实例</h4> <p></p> <pre class='\\\"typescript\\\"'>//文档扫描实现页，文件名为DocDemoPage，需被引入至入口页\\nimport {\\n  DocType,\\n  DocumentScanner,\\n  DocumentScannerConfig,\\n  SaveOption,\\n  FilterId,\\n  ShootingMode\\n} from \\\"@kit.VisionKit\\\"\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nconst TAG: string = 'DocDemoPage'\\n\\n//文档扫描页，用于加载uiExtensionAbility\\n@Entry\\n@Component\\nexport struct DocDemoPage {\\n  @State docImageUris: string[] = []\\n  @Consume('pathStack') pathStack: NavPathStack\\n  private docScanConfig = new DocumentScannerConfig()\\n\\n  aboutToAppear() {\\n    this.docScanConfig.supportType = [DocType.DOC, DocType.SHEET]\\n    this.docScanConfig.isGallerySupported = true\\n    this.docScanConfig.editTabs = []\\n    this.docScanConfig.maxShotCount = 3\\n    this.docScanConfig.defaultFilterId = FilterId.ORIGINAL\\n    this.docScanConfig.defaultShootingMode = ShootingMode.MANUAL\\n    this.docScanConfig.isShareable = true\\n    this.docScanConfig.originalUris = []\\n  }\\n\\n  build() {\\n    NavDestination() {\\n      Stack({ alignContent: Alignment.Top }) {\\n      //展示文档扫描结果\\n        List() {\\n          ForEach(this.docImageUris, (uri: string) =&gt; {\\n            ListItem() {\\n              Image(uri)\\n                .objectFit(ImageFit.Contain)\\n                .width(100)\\n                .height(100)\\n            }\\n          })\\n        }\\n        .listDirection(Axis.Vertical)\\n        .alignListItem(ListItemAlign.Center)\\n        .margin({\\n          top: 50\\n        })\\n        .width('80%')\\n        .height('80%')\\n        \\n        //文档扫描\\n        DocumentScanner({\\n          scannerConfig: this.docScanConfig,\\n          onResult: (code: number, saveType: SaveOption, uris: string[]) =&gt; {\\n            hilog.info(0x0001, TAG, `result code: ${code}, save: ${saveType}`)\\n            if (code === -1) {\\n              this.pathStack.pop()\\n            }\\n            uris.forEach(uriString =&gt; {\\n              hilog.info(0x0001, TAG, `uri: ${uriString}`)\\n            })\\n            this.docImageUris = uris\\n          }\\n        })\\n          .size({ width: '100%', height: '100%' })\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .hideTitleBar(true)\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/vision-documentscanner.html"
    },
    {
        "id": 448,
        "pre": "// 混淆前\\nimport { Want } from '@kit.AbilityKit';\\nlet petalMapWant: Want = {\\n  bundleName: 'com.example.myapplication',\\n  uri: 'maps://',\\n  parameters: {\\n    linkSource: 'com.other.app'\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用Record<string, Object>作为对象的类型时，属性被混淆",
        "parent_text": "[h2]使用Record<string, Object>作为对象的类型时，属性被混淆问题现象 parameters的类型为Record<string, Object>，在开启属性混淆后，parameters对象中的属性linkSource被混淆，进而导致功能异常。示例如下：  // 混淆后\\nimport type Want from \\\"@ohos:app.ability.Want\\\";\\nlet petalMapWant: Want = {\\n    bundleName: 'com.example.myapplication',\\n    uri: 'maps://',\\n    parameters: {\\n        i: 'com.other.app'\\n    }\\n}; 问题原因 在这个示例中，所创建的对象的内容需要传递给系统来加载某个页面，因此对象中的属性名称不能被混淆，否则会造成功能异常。示例中parameters的类型为Record<string, Object>，这只是一个表示以字符串为键的对象的泛型定义，并没有详细描述其内部结构和属性类型。因此，混淆工具无法识别该对象内部哪些属性不应被混淆，从而可能导致内部属性名linkSource被混淆。 解决方案 将混淆后会出现问题的属性名配置到属性白名单中，示例如下： -keep-property-name\\nlinkSource ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用recordstring-object作为对象的类型时属性被混淆\\\"'><a name='\\\"ZH-CN_TOPIC_0000002214189362__%E4%BD%BF%E7%94%A8recordstring-object%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%97%B6%E5%B1%9E%E6%80%A7%E8%A2%AB%E6%B7%B7%E6%B7%86\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8recordstring-object%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%97%B6%E5%B1%9E%E6%80%A7%E8%A2%AB%E6%B7%B7%E6%B7%86\\\"'></a><h4>[h2]使用Record&lt;string, Object&gt;作为对象的类型时，属性被混淆</h4><p><strong>问题现象</strong></p> <p>parameters的类型为Record&lt;string, Object&gt;，在开启属性混淆后，parameters对象中的属性linkSource被混淆，进而导致功能异常。示例如下：</p>  <pre class='\\\"screen\\\"'>// 混淆后\\nimport type Want from \\\"@ohos:app.ability.Want\\\";\\nlet petalMapWant: Want = {\\n    bundleName: 'com.example.myapplication',\\n    uri: 'maps://',\\n    parameters: {\\n        i: 'com.other.app'\\n    }\\n};</pre> <p><strong>问题原因</strong></p> <p>在这个示例中，所创建的对象的内容需要传递给系统来加载某个页面，因此对象中的属性名称不能被混淆，否则会造成功能异常。示例中parameters的类型为Record&lt;string, Object&gt;，这只是一个表示以字符串为键的对象的泛型定义，并没有详细描述其内部结构和属性类型。因此，混淆工具无法识别该对象内部哪些属性不应被混淆，从而可能导致内部属性名linkSource被混淆。</p> <p><strong>解决方案</strong></p> <p>将混淆后会出现问题的属性名配置到属性白名单中，示例如下：</p> <pre class='\\\"screen\\\"'>-keep-property-name\\nlinkSource</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation-questions.html"
    },
    {
        "id": 449,
        "pre": "// 混淆前\\n// file1.ts\\nexport class Test1 {}\\n// file2.ts\\nlet mytest = (await import('./file1')).Test1;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]动态导入某个类，类的定义处被混淆，调用处未被混淆",
        "parent_text": "[h2]动态导入某个类，类的定义处被混淆，调用处未被混淆问题现象 当不开启-enable-property-obfuscation，动态导入某个类时，类的定义处被混淆，调用处未被混淆，导致调用处报错。  // 混淆后\\n// file1.ts\\nexport class w1 {}\\n// file2.ts\\nlet mytest = (await import('./file1')).Test1; 问题原因 导出的类 \\\"Test1\\\" 是一个顶层作用域名，当 \\\"Test1\\\" 被动态使用时，它是一个属性。因为没有开启-enable-property-obfuscation选项，所以名称混淆了，但属性没有混淆。 解决方案 使用-keep-global-name选项将 \\\"Test1\\\" 配置到白名单。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"动态导入某个类类的定义处被混淆调用处未被混淆\\\"'><a name='\\\"ZH-CN_TOPIC_0000002214189362__%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5%E6%9F%90%E4%B8%AA%E7%B1%BB%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%A4%84%E8%A2%AB%E6%B7%B7%E6%B7%86%E8%B0%83%E7%94%A8%E5%A4%84%E6%9C%AA%E8%A2%AB%E6%B7%B7%E6%B7%86\\\"'></a><a name='\\\"%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5%E6%9F%90%E4%B8%AA%E7%B1%BB%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%A4%84%E8%A2%AB%E6%B7%B7%E6%B7%86%E8%B0%83%E7%94%A8%E5%A4%84%E6%9C%AA%E8%A2%AB%E6%B7%B7%E6%B7%86\\\"'></a><h4>[h2]动态导入某个类，类的定义处被混淆，调用处未被混淆</h4><p><strong>问题现象</strong></p> <p>当不开启-enable-property-obfuscation，动态导入某个类时，类的定义处被混淆，调用处未被混淆，导致调用处报错。</p>  <pre class='\\\"screen\\\"'>// 混淆后\\n// file1.ts\\nexport class w1 {}\\n// file2.ts\\nlet mytest = (await import('./file1')).Test1;</pre> <p><strong>问题原因</strong></p> <p>导出的类 \\\"Test1\\\" 是一个顶层作用域名，当 \\\"Test1\\\" 被动态使用时，它是一个属性。因为没有开启-enable-property-obfuscation选项，所以名称混淆了，但属性没有混淆。</p> <p><strong>解决方案</strong></p> <p>使用-keep-global-name选项将 \\\"Test1\\\" 配置到白名单。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation-questions.html"
    },
    {
        "id": 450,
        "pre": "// 混淆前\\n//file1.ts\\nexport namespace ns1 {\\n  export class person1 {}\\n}\\n//file2.ts\\nimport {ns1} from './file1';\\nlet person1 = new ns1.person1();",
        "type": "Reference",
        "function_call": "person1()",
        "function_name": "[h2]导出namespace中的方法时，该方法定义处被混淆，调用处未被混淆",
        "parent_text": "[h2]导出namespace中的方法时，该方法定义处被混淆，调用处未被混淆问题现象 当未开启-enable-property-obfuscation选项，导出namespace中的方法时，该方法定义处被混淆，调用处未被混淆，导致调用处报错。  // 混淆后\\n//file1.ts\\nexport namespace a3 {\\n  export class b2 {}\\n}\\n//file2.ts\\nimport {a3} from './file1';\\nlet person1 = new a3.person1(); 问题原因 namespace里的 \\\"person1\\\" 属于export元素，当通过 \\\"ns1.person1\\\" 调用时，它被视为一个属性。由于未开-enable-property-obfuscation选项，导致在使用时未对其进行混淆。 解决方案 方案一：开启-enable-property-obfuscation选项。 方案二：将namespace里导出的方法使用-keep-global-name选项添加到白名单。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"导出namespace中的方法时该方法定义处被混淆调用处未被混淆\\\"'><a name='\\\"ZH-CN_TOPIC_0000002214189362__%E5%AF%BC%E5%87%BAnamespace%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E6%97%B6%E8%AF%A5%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E5%A4%84%E8%A2%AB%E6%B7%B7%E6%B7%86%E8%B0%83%E7%94%A8%E5%A4%84%E6%9C%AA%E8%A2%AB%E6%B7%B7%E6%B7%86\\\"'></a><a name='\\\"%E5%AF%BC%E5%87%BAnamespace%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E6%97%B6%E8%AF%A5%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E5%A4%84%E8%A2%AB%E6%B7%B7%E6%B7%86%E8%B0%83%E7%94%A8%E5%A4%84%E6%9C%AA%E8%A2%AB%E6%B7%B7%E6%B7%86\\\"'></a><h4>[h2]导出namespace中的方法时，该方法定义处被混淆，调用处未被混淆</h4><p><strong>问题现象</strong></p> <p>当未开启-enable-property-obfuscation选项，导出namespace中的方法时，该方法定义处被混淆，调用处未被混淆，导致调用处报错。</p>  <pre class='\\\"screen\\\"'>// 混淆后\\n//file1.ts\\nexport namespace a3 {\\n  export class b2 {}\\n}\\n//file2.ts\\nimport {a3} from './file1';\\nlet person1 = new a3.person1();</pre> <p><strong>问题原因</strong></p> <p>namespace里的 \\\"person1\\\" 属于export元素，当通过 \\\"ns1.person1\\\" 调用时，它被视为一个属性。由于未开-enable-property-obfuscation选项，导致在使用时未对其进行混淆。</p> <p><strong>解决方案</strong></p> <p>方案一：开启-enable-property-obfuscation选项。</p> <p>方案二：将namespace里导出的方法使用-keep-global-name选项添加到白名单。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation-questions.html"
    },
    {
        "id": 451,
        "pre": "//混淆前\\nimport { MyHspClass } from \\\"myhsp\\\";\\nnew MyHspClass().myHspMethod();",
        "type": "Reference",
        "function_call": "a1()",
        "function_name": "[h2]主模块依赖HSP模块时，HSP模块导出接口被错误混淆问题",
        "parent_text": "[h2]主模块依赖HSP模块时，HSP模块导出接口被错误混淆问题问题现象 主模块中，使用的HSP导出接口被错误的混淆。  //混淆后\\nimport { t } from \\\"@normalized:N&myhsp&&myhsp/Index&\\\";\\nnew t().a1(); 问题原因 当开启-enable-export-obfuscation和-enable-toplevel-obfuscation时，主模块调用其他模块方法时涉及的方法名称混淆情况如下： 主模块 依赖模块 导入与导出的名称混淆情况   HAP/HSP HSP HSP和主模块是独立编译的，混淆后名称会不一致，因此都需要配置白名单。  HAP/HSP 本地HAR 本地HAR与主模块一起编译，混淆后名称一致。  HAP/HSP 三方库 三方库中导出的名称及其属性会被收集到白名单，因此导入和导出时都不会被混淆。    解决方案 为了让其他模块能够正常调用HSP模块的方法，需要在混淆配置中添加白名单。由于主模块和HSP模块需要保持相同的白名单配置，建议采用以下步骤： 在HSP模块的混淆配置文件（如 hsp-white-list.txt）中添加白名单。在依赖HSP的其他模块的混淆配置中，通过files字段引入该配置文件。 这样可以确保白名单配置的一致性，避免重复维护。配置方法参考下图：   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"主模块依赖hsp模块时hsp模块导出接口被错误混淆问题\\\"'><a name='\\\"ZH-CN_TOPIC_0000002214189362__%E4%B8%BB%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96hsp%E6%A8%A1%E5%9D%97%E6%97%B6hsp%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA%E6%8E%A5%E5%8F%A3%E8%A2%AB%E9%94%99%E8%AF%AF%E6%B7%B7%E6%B7%86%E9%97%AE%E9%A2%98\\\"'></a><a name='\\\"%E4%B8%BB%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96hsp%E6%A8%A1%E5%9D%97%E6%97%B6hsp%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA%E6%8E%A5%E5%8F%A3%E8%A2%AB%E9%94%99%E8%AF%AF%E6%B7%B7%E6%B7%86%E9%97%AE%E9%A2%98\\\"'></a><h4>[h2]主模块依赖HSP模块时，HSP模块导出接口被错误混淆问题</h4><p><strong>问题现象</strong></p> <p>主模块中，使用的HSP导出接口被错误的混淆。</p>  <pre class='\\\"screen\\\"'>//混淆后\\nimport { t } from \\\"@normalized:N&amp;myhsp&amp;&amp;myhsp/Index&amp;\\\";\\nnew t().a1();</pre> <p><strong>问题原因</strong></p> <p>当开启-enable-export-obfuscation和-enable-toplevel-obfuscation时，主模块调用其他模块方法时涉及的方法名称混淆情况如下：</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.8.1.4.1.1\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>主模块</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.8.1.4.1.2\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>依赖模块</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.8.1.4.1.3\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>导入与导出的名称混淆情况</th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>HAP/HSP</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>HSP</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>HSP和主模块是独立编译的，混淆后名称会不一致，因此都需要配置白名单。</td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>HAP/HSP</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>本地HAR</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>本地HAR与主模块一起编译，混淆后名称一致。</td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>HAP/HSP</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>三方库</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>三方库中导出的名称及其属性会被收集到白名单，因此导入和导出时都不会被混淆。</td> </tr> </tbody></table> </div> <p><strong>解决方案</strong></p> <p>为了让其他模块能够正常调用HSP模块的方法，需要在混淆配置中添加白名单。由于主模块和HSP模块需要保持相同的白名单配置，建议采用以下步骤：</p> <ol><li>在HSP模块的混淆配置文件（如 hsp-white-list.txt）中添加白名单。</li><li><p>在依赖HSP的其他模块的混淆配置中，通过files字段引入该配置文件。</p> <p>这样可以确保白名单配置的一致性，避免重复维护。配置方法参考下图：</p> </li></ol> <p><span><img originheight='\\\"285\\\"' originwidth='\\\"413\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120341.08586130623091450194847851363381:50001231000000:2800:5907B722501EA80478083DDC278D9417E532699B7E0813A90E18190C32D6C89C.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation-questions.html"
    },
    {
        "id": 452,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n      \\\"@typescript-eslint/no-restricted-syntax\\\": [\\n         \\\"error\\\",\\n         {\\n             \\\"selector\\\": \\\"FunctionExpression\\\",\\n             \\\"message\\\": \\\"Function expressions are not allowed.\\\"\\n         },\\n         {\\n             \\\"selector\\\": \\\"CallExpression[callee.name='setTimeout'][arguments.length!=2]\\\",\\n             \\\"message\\\": \\\"setTimeout must always be invoked with two arguments.\\\"\\n         }\\n     ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-restricted-syntax.html"
    },
    {
        "id": 453,
        "pre": "/* eslint no-restricted-syntax: [\\\"error\\\", \\\"ClassDeclaration\\\"] */\\nexport function doSomething() {\\n  console.info('doSomething');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-restricted-syntax.html"
    },
    {
        "id": 454,
        "pre": "/* eslint no-restricted-syntax: [\\\"error\\\", \\\"ClassDeclaration\\\"] */\\nexport class CC {\\n  public name: string;\\n\\n  public constructor(name: string) {\\n    this.name = name;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-restricted-syntax.html"
    },
    {
        "id": 455,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/member-ordering\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_member-ordering.html"
    },
    {
        "id": 456,
        "pre": "// 默认排序规则：field-constructor-method\\nexport class Foo2 {\\n  // -> field\\n  protected static e: string = '';\\n\\n  public d: string = '';\\n\\n  private readonly c: string = '';\\n\\n  // -> constructor\\n  public constructor() {\\n    console.info('constructor');\\n  }\\n\\n  // -> method\\n  public static a(): void {\\n    console.info('static method');\\n  }\\n\\n  public b(): void {\\n    console.info(this.c);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_member-ordering.html"
    },
    {
        "id": 457,
        "pre": "// 默认排序规则：field-constructor-method\\nexport class Foo2 {\\n  // -> method\\n  public static a(): void {\\n    console.info('static method');\\n  }\\n\\n  public b(): void {\\n    console.info(this.c);\\n  }\\n\\n  // -> field\\n  protected static e: string = '';\\n\\n  private readonly c: string = '';\\n\\n  public d: string = '';\\n\\n  // -> constructor\\n  public constructor() {\\n    console.info('constructor');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_member-ordering.html"
    },
    {
        "id": 458,
        "pre": "import { WindowManager } from '@kit.SpeechKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "首先从项目根目录进入/src/main/ets/entryability/EntryAbility.ets文件，将WindowManager添加至工程。 ",
        "import_module": "import { WindowManager } from '@kit.SpeechKit';",
        "parent": "<li><span>首先从项目根目录进入/src/main/ets/entryability/EntryAbility.ets文件，将WindowManager添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/speech-textreader-guide.html"
    },
    {
        "id": 459,
        "pre": "import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { WindowManager } from '@kit.SpeechKit';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\\n    console.info('Ability onCreate');\\n  }\\n\\n  onDestroy(): void {\\n    console.info('Ability onDestroy');\\n  }\\n\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    console.info('Ability onWindowStageCreate');\\n    WindowManager.setWindowStage(windowStage);\\n\\n    windowStage.loadContent('pages/Index', (err, data) => {\\n      if (err.code) {\\n        console.error(`Failed to load the content. Code: ${err.code}, message: ${err.message}`);\\n        return;\\n      }\\n      console.info(`Succeeded in loading the content. Data: ${JSON.stringify(data)}.` );\\n    });\\n  }\\n\\n  onWindowStageDestroy(): void {\\n    console.info('Ability onWindowStageDestroy');\\n  }\\n\\n  onForeground(): void {\\n    console.info('Ability onForeground');\\n  }\\n\\n  onBackground(): void {\\n    console.info('Ability onBackground');\\n  }\\n}",
        "type": "Reference",
        "function_call": "setActionListener()",
        "function_name": "开发实例",
        "parent_text": "  开发实例 EntryAbility.ets  Index.ets import { TextReader, TextReaderIcon, ReadStateCode } from '@kit.SpeechKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n\\n  /**\\n   * 待加载的文章\\n   */\\n  @State readInfoList: TextReader.ReadInfo[] = [];\\n  @State selectedReadInfo: TextReader.ReadInfo = this.readInfoList[0];\\n\\n  /**\\n   * 播放状态\\n   */\\n  @State readState: ReadStateCode = ReadStateCode.WAITING;\\n\\n  /**\\n   * 用于显示当前页的按钮状态\\n   */\\n  @State isInit: boolean = false;\\n\\n  async aboutToAppear(){\\n    /**\\n     * 加载数据\\n     */\\n    let readInfoList: TextReader.ReadInfo[] = [{\\n      id: '001',\\n      title: {\\n        text:'水调歌头.明月几时有',\\n        isClickable:true\\n      },\\n      author:{\\n        text:'宋.苏轼',\\n        isClickable:true\\n      },\\n      date: {\\n        text:'2024/01/01',\\n        isClickable:false\\n      },\\n      bodyInfo: '明月几时有？把酒问青天。'\\n    }];\\n    this.readInfoList = readInfoList;\\n    this.selectedReadInfo = this.readInfoList[0];\\n    this.init();\\n  }\\n\\n  /**\\n   * 初始化\\n   */\\n  async init() {\\n    const readerParam: TextReader.ReaderParam = {\\n      isVoiceBrandVisible: true,\\n      businessBrandInfo: {\\n        panelName: '小艺朗读',\\n        panelIcon: $r('app.media.startIcon')\\n      }\\n    }\\n    try{\\n      await TextReader.init(getContext(this), readerParam);\\n      this.isInit = true;\\n    } catch (err) {\\n      console.error(`TextReader failed to init. Code: ${err.code}, message: ${err.message}`);\\n    }\\n  }\\n\\n  // 设置操作监听\\n  setActionListener() {\\n    TextReader.on('stateChange', (state: TextReader.ReadState) => {\\n      this.onStateChanged(state)\\n    });\\n    TextReader.on('requestMore', () => this.onStateChanged);\\n  }\\n\\n  onStateChanged = (state: TextReader.ReadState) => {\\n    if (this.selectedReadInfo?.id === state.id) {\\n      this.readState = state.state;\\n    } else {\\n      this.readState = ReadStateCode.WAITING;\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      TextReaderIcon({ readState: this.readState })\\n        .margin({ right: 20 })\\n        .width(32)\\n        .height(32)\\n        .onClick(async () => {\\n          try {\\n            this.setActionListener();\\n            await TextReader.start(this.readInfoList, this.selectedReadInfo?.id);\\n          } catch (err) {\\n            console.error(`TextReader failed to start. Code: ${err.code}, message: ${err.message}`);\\n          }\\n        })\\n    }\\n    .height('100%')\\n  }\\n} ",
        "import_module": "import { WindowManager } from '@kit.SpeechKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section22701210512\\\"'> <a name='\\\"section22701210512\\\"'></a><a name='\\\"section22701210512\\\"'></a> <h4>开发实例</h4> <p>EntryAbility.ets</p>  <p>Index.ets</p> <pre class='\\\"typescript\\\"'>import { TextReader, TextReaderIcon, ReadStateCode } from '@kit.SpeechKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n\\n  /**\\n   * 待加载的文章\\n   */\\n  @State readInfoList: TextReader.ReadInfo[] = [];\\n  @State selectedReadInfo: TextReader.ReadInfo = this.readInfoList[0];\\n\\n  /**\\n   * 播放状态\\n   */\\n  @State readState: ReadStateCode = ReadStateCode.WAITING;\\n\\n  /**\\n   * 用于显示当前页的按钮状态\\n   */\\n  @State isInit: boolean = false;\\n\\n  async aboutToAppear(){\\n    /**\\n     * 加载数据\\n     */\\n    let readInfoList: TextReader.ReadInfo[] = [{\\n      id: '001',\\n      title: {\\n        text:'水调歌头.明月几时有',\\n        isClickable:true\\n      },\\n      author:{\\n        text:'宋.苏轼',\\n        isClickable:true\\n      },\\n      date: {\\n        text:'2024/01/01',\\n        isClickable:false\\n      },\\n      bodyInfo: '明月几时有？把酒问青天。'\\n    }];\\n    this.readInfoList = readInfoList;\\n    this.selectedReadInfo = this.readInfoList[0];\\n    this.init();\\n  }\\n\\n  /**\\n   * 初始化\\n   */\\n  async init() {\\n    const readerParam: TextReader.ReaderParam = {\\n      isVoiceBrandVisible: true,\\n      businessBrandInfo: {\\n        panelName: '小艺朗读',\\n        panelIcon: $r('app.media.startIcon')\\n      }\\n    }\\n    try{\\n      await TextReader.init(getContext(this), readerParam);\\n      this.isInit = true;\\n    } catch (err) {\\n      console.error(`TextReader failed to init. Code: ${err.code}, message: ${err.message}`);\\n    }\\n  }\\n\\n  // 设置操作监听\\n  setActionListener() {\\n    TextReader.on('stateChange', (state: TextReader.ReadState) =&gt; {\\n      this.onStateChanged(state)\\n    });\\n    TextReader.on('requestMore', () =&gt; this.onStateChanged);\\n  }\\n\\n  onStateChanged = (state: TextReader.ReadState) =&gt; {\\n    if (this.selectedReadInfo?.id === state.id) {\\n      this.readState = state.state;\\n    } else {\\n      this.readState = ReadStateCode.WAITING;\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      TextReaderIcon({ readState: this.readState })\\n        .margin({ right: 20 })\\n        .width(32)\\n        .height(32)\\n        .onClick(async () =&gt; {\\n          try {\\n            this.setActionListener();\\n            await TextReader.start(this.readInfoList, this.selectedReadInfo?.id);\\n          } catch (err) {\\n            console.error(`TextReader failed to start. Code: ${err.code}, message: ${err.message}`);\\n          }\\n        })\\n    }\\n    .height('100%')\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/speech-textreader-guide.html"
    },
    {
        "id": 460,
        "pre": "import { map, mapCommon, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-aggregate.html"
    },
    {
        "id": 461,
        "pre": "import { moduleInstallManager } from '@kit.AppGalleryKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入moduleInstallManager模块及相关公共模块。 ",
        "import_module": "import { moduleInstallManager } from '@kit.AppGalleryKit';",
        "parent": "<li><span>导入moduleInstallManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-moduleinstall_arkts.html"
    },
    {
        "id": 462,
        "pre": "import { moduleInstallManager } from '@kit.AppGalleryKit';\\nimport type { common } from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入moduleInstallManager模块及相关公共模块。 ",
        "import_module": "import { moduleInstallManager } from '@kit.AppGalleryKit';",
        "parent": "<li><span>导入moduleInstallManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-moduleinstall_arkts.html"
    },
    {
        "id": 463,
        "pre": "import type { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { moduleInstallManager } from '@kit.AppGalleryKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入moduleInstallManager模块及相关公共模块。 ",
        "import_module": "import { moduleInstallManager } from '@kit.AppGalleryKit';",
        "parent": "<li><span>导入moduleInstallManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-moduleinstall_arkts.html"
    },
    {
        "id": 464,
        "pre": "{\\n  \\\"module\\\": {\\n    \\\"name\\\": \\\"AModulelib\\\",\\n    \\\"deliveryWithInstall\\\": false\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在动态模块AModulelib的module.json5中设置deliveryWithInstall为false，来标识当前AModulelib在用户主动安装应用A的时候不会一起下载安装。",
        "import_module": "import { moduleInstallManager } from '@kit.AppGalleryKit';",
        "parent": "<li>在动态模块AModulelib的module.json5中设置deliveryWithInstall为false，来标识当前AModulelib在用户主动安装应用A的时候不会一起下载安装。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-moduleinstall_arkts.html"
    },
    {
        "id": 465,
        "pre": "hdc install entry.hap",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "使用调试证书签名应用/服务，本地编译构建出entry.hap、AModulelib.hsp，可通过HDC命令安装或IDE直接安装基础包。 ",
        "import_module": "import { moduleInstallManager } from '@kit.AppGalleryKit';",
        "parent": "<li><span>使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-signing\\\"' target='\\\"_blank\\\"'>调试证书签名</a>应用/服务，本地编译构建出entry.hap、AModulelib.hsp，可通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/hdc#应用相关命令\\\"' target='\\\"_blank\\\"'>HDC命令安装</a>或IDE直接安装基础包。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-moduleinstall_arkts.html"
    },
    {
        "id": 466,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-suggest-use-effectkit-blur\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-suggest-use-effectkit-blur.html"
    },
    {
        "id": 467,
        "pre": "// 导入图片处理模块\\nimport image from \\\"@ohos.multimedia.image\\\";\\n// 导入图像效果模块\\nimport effectKit from '@ohos.effectKit';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  // 是否显示全屏模态页面。静态模糊用\\n  @State isShowStaticBlur: boolean = false;\\n  // PixelMap实例\\n  @State pixelMap: image.PixelMap | undefined = undefined;\\n  // ImageSource实例\\n  imgSource: image.ImageSource | undefined = undefined;\\n\\n  // 静态模糊\\n  async staticBlur() {\\n    // 获得当前Ability的Context\\n    let context = getContext(this);\\n    // 获取resourceManager对象\\n    let resourceMgr = context.resourceManager;\\n    // 获rawfile目录下的图片\\n    const fileData = await resourceMgr.getRawFileContent('startIcon.png');\\n    // 创建ArrayBuffer实例\\n    let buffer: ArrayBuffer = fileData.buffer.slice(0);\\n    // 创建图片源实例\\n    this.imgSource = image.createImageSource(buffer);\\n    // 创建像素的属性\\n    let opts: image.InitializationOptions = {\\n      // 是否可编辑\\n      editable: true,\\n      // 像素格式。3表示RGBA_8888\\n      pixelFormat: 3,\\n      // 创建图片大小\\n      size: {\\n        height: 4,\\n        width: 6\\n      }\\n    };\\n    // 创建PixelMap\\n    await this.imgSource.createPixelMap(opts).then((pixelMap: image.PixelMap) => {\\n      // 模糊半径\\n      const blurRadius = 1;\\n      // 创建Filter实例\\n      let headFilter = effectKit.createEffect(pixelMap);\\n      if (headFilter != null) {\\n        // 设置静态模糊。将模糊效果添加到效果链表中\\n        headFilter.blur(blurRadius);\\n        // 获取已添加链表效果的源图像的image.PixelMap\\n        headFilter.getEffectPixelMap().then((pixelMap: image.PixelMap) => {\\n          this.pixelMap = pixelMap;\\n        });\\n      }\\n    })\\n  }\\n\\n  // 图片设置静态模糊的模态页面\\n  @Builder\\n  staticBlurBuilder() {\\n    Stack() {\\n      Image(this.pixelMap)\\n        .width('100%')\\n        .height('100%')\\n        .objectFit(ImageFit.Fill)\\n      Button('close')\\n        .fontSize(20)\\n        .onClick(() => {\\n          this.isShowStaticBlur = false;\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n\\n  build() {\\n    Column({ space: 10 }) {\\n      Button('静态模糊')\\n        .onClick(() => {\\n          this.isShowStaticBlur = true;\\n          // 设置静态模糊\\n          this.staticBlur();\\n        })\\n        .bindContentCover(this.isShowStaticBlur, this.staticBlurBuilder(), {\\n          // 全屏模态转场类型。上下切换动画\\n          modalTransition: ModalTransition.DEFAULT\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-suggest-use-effectkit-blur.html"
    },
    {
        "id": 468,
        "pre": "@Entry\\n@Component\\nstruct MyComponent{\\n  build() {\\n    Column({ space: 10 }) {\\n      // 对image进行模糊，未使用effectKit.createEffect\\n      Text('Image blur').fontSize(15).fontColor(0xCCCCCC).width('90%')\\n      Image('resources/base/media/sss001.jpg').blur(1)\\n        .border({ width: 1 }).borderStyle(BorderStyle.Dashed).aspectRatio(1).width('90%').height(40)\\n\\n      // 对背景进行模糊，未使用effectKit.createEffect\\n      Text('backdropBlur').fontSize(15).fontColor(0xCCCCCC).width('90%')\\n      Text()\\n        .width('90%')\\n        .height(40)\\n        .fontSize(16)\\n        .backdropBlur(3)\\n        .backgroundImage('/pages/attrs/image/image.jpg')\\n        .backgroundImageSize({ width: 1200, height: 160 })\\n    }.width('100%').margin({ top: 5 })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-suggest-use-effectkit-blur.html"
    },
    {
        "id": 469,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-avoid-update-auto-state-var-in-aboutToReuse\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-abouttoreuse.html"
    },
    {
        "id": 470,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n// 此处为复用的自定义组件\\n@Reusable\\n@Component\\nstruct ItemComponent {\\n  @State desc: string = '';\\n  @State sum: number = 0;\\n  @State avg: number = 0;\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.desc = params.desc as string;\\n    this.sum = params.sum as number;\\n    this.avg = params.avg as number;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('子组件' + this.desc)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('结果' + this.sum)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('平均值' + this.avg)\\n        .fontSize(30)\\n        .fontWeight(30)\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 20; index++) {\\n      this.data.pushData(index.toString())\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        LazyForEach(this.data, (item: string) => {\\n          ListItem() {\\n            ItemComponent({ desc: item, sum: 0, avg: 0 })\\n          }\\n          .width('100%')\\n          .height(100)\\n        }, (item: string) => item)\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-abouttoreuse.html"
    },
    {
        "id": 471,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n// 此处为复用的自定义组件\\n@Reusable\\n@Component\\nstruct ItemComponent {\\n  @State desc: string = '';\\n  @State sum: number = 0;\\n  @Link avg: number;\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.desc = params.desc as string;\\n    this.sum = params.sum as number;\\n    this.avg = params.avg as number;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('子组件' + this.desc)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('结果' + this.sum)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('平均值' + this.avg)\\n        .fontSize(30)\\n        .fontWeight(30)\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 20; index++) {\\n      this.data.pushData(index.toString())\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        LazyForEach(this.data, (item: string) => {\\n          ListItem() {\\n            ItemComponent({ desc: item, sum: 0, avg: 0 })\\n          }\\n          .width('100%')\\n          .height(100)\\n        }, (item: string) => item)\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-abouttoreuse.html"
    },
    {
        "id": 472,
        "pre": "{\\n  \\\"name\\\": \\\"library\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"Please describe the basic information.\\\",\\n  \\\"main\\\": \\\"Index.ets\\\",\\n  \\\"license\\\": \\\"Apache-2.0\\\",\\n  \\\"dependencies\\\": {\\n    \\\"liblibrary.so\\\": \\\"file:./src/main/cpp/types/liblibrary\\\"\\n  },\\n  \\\"compatibleSdkVersion\\\": \\\"12\\\",\\n  \\\"compatibleSdkType\\\": \\\"HarmonyOS\\\",\\n  \\\"obfuscated\\\": false,\\n  \\\"nativeComponents\\\": [\\n    {\\n      \\\"name\\\": \\\"liblibrary.so\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"12\\\",\\n      \\\"compatibleSdkType\\\": \\\"HarmonyOS\\\"\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "兼容性字段配置示例",
        "parent_text": "  兼容性字段配置示例 三方库开发者使用的SDK和当前集成该三方库工程编译时使用的SDK可能存在不一致的情况。因此，ohpm新增了兼容性检测相关配置以帮助SDK做兼容性分析。配置示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section194621247204911\\\"'> <a name='\\\"section194621247204911\\\"'></a><a name='\\\"section194621247204911\\\"'></a> <h4>兼容性字段配置示例</h4> <p id='\\\"ZH-CN_TOPIC_0000002202175097__p89381494514\\\"'>三方库开发者使用的SDK和当前集成该三方库工程编译时使用的SDK可能存在不一致的情况。因此，ohpm新增了兼容性检测相关配置以帮助SDK做兼容性分析。配置示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-oh-package-json5.html"
    },
    {
        "id": 473,
        "pre": "{\\n    \\\"name\\\": \\\"work_dir\\\",\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"main\\\": \\\"index.ets\\\",\\n    \\\"author\\\": \\\"\\\",\\n    \\\"license\\\": \\\"ISC\\\",\\n    \\\"dependencies\\\": {}\\n  }",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]yes",
        "parent_text": "[h2]yes默认值：null类型：null 或 Boolean别名：y 可以在 init 命令后面指定 -y或者--yes 参数，命令行将会完全跳过交互界面，创建默认的 oh-package.json5 文件。 默认内容如下：   若当前工作目录下不存在 oh-package.json5 文件，则文件中 name 字段默认为当前工作目录名称；若当前工作目录下已存在 oh-package.json5 文件，则新文件中 name 字段复用已存在文件中的 name 字段，并且最后覆盖原有oh-package.json5文件。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"zh-cn_topic_0000001745376454_yes\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166808164__zh-cn_topic_0000001745376454_yes\\\"'></a><a name='\\\"zh-cn_topic_0000001745376454_yes\\\"'></a><h4>[h2]yes</h4><ul id='\\\"ZH-CN_TOPIC_0000002166808164__zh-cn_topic_0000001745376454_ul2109302945204137\\\"'><li id='\\\"zh-cn_topic_0000001745376454_li1998063683204137\\\"'>默认值：null</li><li id='\\\"zh-cn_topic_0000001745376454_li1823855904204137\\\"'>类型：null 或 Boolean</li><li id='\\\"zh-cn_topic_0000001745376454_li970586025204137\\\"'>别名：y</li></ul> <p id='\\\"ZH-CN_TOPIC_0000002166808164__zh-cn_topic_0000001745376454_p1072727308204137\\\"'>可以在 init 命令后面指定 -y或者--yes 参数，命令行将会完全跳过交互界面，创建默认的 oh-package.json5 文件。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808164__zh-cn_topic_0000001745376454_p191630766204137\\\"'>默认内容如下：</p>  <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808164__zh-cn_topic_0000001745376454_note1440516301061\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250303111825.63437692687816889420827024351802:50001231000000:2800:7357DF5F8F2558470CDD874ABDF5E0BCA3453FC3AD46EAE9AF3155AEC37884BB.png?needInitFileName=true?needInitFileName=true\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808164__zh-cn_topic_0000001745376454_p13405133015612\\\"'>若当前工作目录下不存在 oh-package.json5 文件，则文件中 name 字段默认为当前工作目录名称；若当前工作目录下已存在 oh-package.json5 文件，则新文件中 name 字段复用已存在文件中的 name 字段，并且最后覆盖原有oh-package.json5文件。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-init.html"
    },
    {
        "id": 474,
        "pre": "TextInput({ placeholder: '新密码' })\\n\\t.enableAutoFill(true)\\n\\t.type(InputType.NEW_PASSWORD)\\n\\t.passwordRules('begin:[lower],special:[yes],len:[maxlen:32,minlen:12]')\\n\\t.placeholderColor(0x182431)\\n\\t.width('100%')\\n\\t.opacity(0.6)\\n\\t.showPasswordIcon(true)\\n\\t.placeholderFont({ size: 16, weight: FontWeight.Regular })\\n\\t.margin({ bottom: 36 })",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]示例",
        "parent_text": "[h2]示例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section64612364319\\\"'><a name='\\\"section64612364319\\\"'></a><a name='\\\"section64612364319\\\"'></a><h4>[h2]示例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-custom-strong-password-rules.html"
    },
    {
        "id": 475,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-performance-no-dynamic-cls-func\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-performance-no-dynamic-cls-func.html"
    },
    {
        "id": 476,
        "pre": "function foo(f: boolean, a: number, b: number): number {\\n  if (f) {\\n    return add(a, b);\\n  } else {\\n    return sub(a, b);\\n  }\\n}\\nfunction add(c: number, d: number): number {\\n  return c + d;\\n}\\nfunction sub(e: number, g: number): number {\\n  return e - g;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-performance-no-dynamic-cls-func.html"
    },
    {
        "id": 477,
        "pre": "function foo(f: boolean, a: number, b: number): number {\\n  if (f) {\\n    function add(c: number, d: number): number {\\n      return c + d;\\n    }\\n    return add(a, b);\\n  } else {\\n    function sub(e: number, g: number): number {\\n      return e - g;\\n    }\\n    return sub(a, b);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-performance-no-dynamic-cls-func.html"
    },
    {
        "id": 478,
        "pre": "Navigation() {\\n  // ...\\n}\\n.mode(NavigationMode.Auto)",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "自适应模式 Navigation组件默认为自适应模式，此时mode属性为NavigationMode.Auto。自适应模式下，当页面宽度大于等于一定阈值( API version 9及以前：520vp，API version 10及以后：600vp )时，Navigation组件采用分栏模式，反之采用单栏模式。 ",
        "import_module": "Navigation() {\\n  // ...\\n}\\n.mode(NavigationMode.Auto)",
        "parent": "<li><p>自适应模式</p> <p>Navigation组件默认为自适应模式，此时mode属性为NavigationMode.Auto。自适应模式下，当页面宽度大于等于一定阈值( API version 9及以前：520vp，API version 10及以后：600vp )时，Navigation组件采用分栏模式，反之采用单栏模式。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-navigation-navigation.html"
    },
    {
        "id": 479,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/multiple-associations-state-var-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-multi-associations-state-var-check.html"
    },
    {
        "id": 480,
        "pre": "@Observed\\nclass UIStyle {\\n  fontSize: number = 0;\\n  fontColor: string = '';\\n  isChecked: boolean = false;\\n}\\n@Entry\\n@Component\\nstruct MultipleAssociationsStateVarNoReport0 {\\n  @State uiStyle: UIStyle = new UIStyle();\\n  private listData: string[] = [];\\n  aboutToAppear(): void {\\n    for (let i = 0; i < 10; i++) {\\n      this.listData.push(`ListItemComponent ${i}`);\\n    }\\n  }\\n  build() {\\n    Row() {\\n      Column() {\\n        CompA({item: '1', index: 1, subStyle: this.uiStyle})\\n        CompB({item: '2', index: 2, subStyle: this.uiStyle})\\n        CompC({item: '3', index: 3, subStyle: this.uiStyle})\\n        Text('change state var')\\n          .onClick(()=>{\\n            this.uiStyle.fontSize = 20;\\n          })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n@Component\\nstruct CompA {\\n  @Prop item: string;\\n  @Prop index: number;\\n  @Link @Watch('onStyleChange') subStyle: UIStyle;\\n  @State fontSize: number = 0;\\n  isRender(): number {\\n    console.info(`CompA ${this.index} Text is rendered`);\\n    return this.fontSize;\\n  }\\n  onStyleChange() {\\n    this.fontSize = this.subStyle.fontSize;\\n  }\\n  build() {\\n    Column() {\\n      Text(this.item)\\n        .fontSize(this.isRender())\\n        .fontSize(this.fontSize)\\n      Text('abc')\\n    }\\n  }\\n}\\n@Component\\nstruct CompB {\\n  @Prop item: string;\\n  @Prop index: number;\\n  @Link @Watch('onStyleChange') subStyle: UIStyle;\\n  @State fontColor: string = '#00ffff';\\n  isRender(): number {\\n    console.info(`CompB ${this.index} Text is rendered`);\\n    return 10;\\n  }\\n  onStyleChange() {\\n    this.fontColor = this.subStyle.fontColor;\\n  }\\n  build() {\\n    Column() {\\n      Text(this.item)\\n        .fontSize(this.isRender())\\n        .fontColor(this.fontColor)\\n      Text('abc')\\n    }\\n  }\\n}\\n@Component\\nstruct CompC {\\n  @Prop item: string;\\n  @Prop index: number;\\n  @Link @Watch('onStyleChange') subStyle: UIStyle;\\n  @State isChecked: boolean = false;\\n  isRender(): number {\\n    console.info(`CompC ${this.index} Text is rendered`);\\n    return 50;\\n  }\\n  onStyleChange() {\\n    this.isChecked = this.subStyle.isChecked;\\n  }\\n  build() {\\n    Column() {\\n      if (this.isChecked) {\\n        Text('checked')\\n      } else {\\n        Text('unchecked')\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-multi-associations-state-var-check.html"
    },
    {
        "id": 481,
        "pre": "@Observed\\nclass UIStyle {\\n  fontSize: number = 0;\\n  fontColor: string = '';\\n  isChecked: boolean = false;\\n}\\n@Entry\\n@Component\\nstruct MultipleAssociationsStateVarReport0 {\\n  @State uiStyle: UIStyle = new UIStyle();\\n  private listData: string[] = [];\\n  aboutToAppear(): void {\\n    for (let i = 0; i < 10; i++) {\\n      this.listData.push(`ListItemComponent ${i}`);\\n    }\\n  }\\n  build() {\\n    Row() {\\n      Column() {\\n        CompA({item: '1', index: 1, subStyle: this.uiStyle})\\n        CompB({item: '2', index: 2, subStyle: this.uiStyle})\\n        CompC({item: '3', index: 3, subStyle: this.uiStyle})\\n        Text('change state var')\\n          .onClick(()=>{\\n            this.uiStyle.fontSize = 20;\\n          })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n@Component\\nstruct CompA {\\n  @Prop item: string;\\n  @Prop index: number;\\n  @Link subStyle: UIStyle;\\n  private sizeFont: number = 50;\\n  isRender(): number {\\n    console.info(`CompA ${this.index} Text is rendered`);\\n    return this.sizeFont;\\n  }\\n  build() {\\n    Column() {\\n      Text(this.item)\\n        .fontSize(this.isRender())\\n        .fontSize(this.subStyle.fontSize)\\n      Text('abc')\\n    }\\n  }\\n}\\n@Component\\nstruct CompB {\\n  @Prop item: string;\\n  @Prop index: number;\\n  @Link subStyle: UIStyle;\\n  private sizeFont: number = 50;\\n  isRender(): number {\\n    console.info(`CompB ${this.index} Text is rendered`);\\n    return this.sizeFont;\\n  }\\n  build() {\\n    Column() {\\n      Text(this.item)\\n        .fontSize(this.isRender())\\n        .fontColor(this.subStyle.fontColor)\\n      Text('abc')\\n    }\\n  }\\n}\\n@Component\\nstruct CompC {\\n  @Prop item: string;\\n  @Prop index: number;\\n  @Link subStyle: UIStyle;\\n  private sizeFont: number = 50;\\n  isRender(): number {\\n    console.info(`CompC ${this.index} Text is rendered`);\\n    return this.sizeFont;\\n  }\\n  build() {\\n    Column() {\\n      if (this.subStyle.isChecked) {\\n        Text('checked')\\n      } else {\\n        Text('unchecked')\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-multi-associations-state-var-check.html"
    },
    {
        "id": 482,
        "pre": "let context = getContext(this) as common.UIAbilityContext;\\nlet request: gamePlayer.GSKPlayerRole = {\\n  roleId: '123',   // 玩家角色ID，如游戏没有角色系统，请传入“0”，务必不要传\\\"\\\"和null。\\n  roleName: 'Jason', // 玩家角色名，如游戏没有角色系统，请传入“default”，务必不要传\\\"\\\"和null。\\n  serverId: '456',\\n  serverName: 'Zhangshan',\\n  gamePlayerId: '789', // 若是转移场景，请根据实际获取到的gamePlayerId传值。\\n  teamPlayerId: '345', // 若是绑定场景，请根据实际获取到的teamPlayerId传值。\\n  thirdOpenId: '123'   // 若游戏官方账号登录，请根据实际获取到的thirdOpenId传值。\\n};\\ntry {\\n  gamePlayer.savePlayerRole(context, request).then(() => {\\n     hilog.info(0x0000, 'testTag', `Succeeded in saving.`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  hilog.error(0x0000, 'testTag', `Failed to save. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 调用savePlayerRole接口，将角色信息上报至华为游戏服务器。     若游戏没有角色系统，“roleId”请传入“0”，“roleName”请传入“default”，请勿传\\\"\\\"和null。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section12165741113\\\"'> <a name='\\\"section12165741113\\\"'></a><a name='\\\"section12165741113\\\"'></a> <h4>开发步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameplayer#section201561659105917\\\"' target='\\\"_blank\\\"'>savePlayerRole</a>接口，将角色信息上报至华为游戏服务器。</p> <div class='\\\"caution\\\"'> <span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120108.93423136413584200077196321123931:50001231000000:2800:C7861F53F82D117B6B747D5136A6A5A70C8BC5694EBD4642AEF696EB303960F9.png\\\"'/> </span> <div class='\\\"cautionbody\\\"'> <p>若游戏没有角色系统，“roleId”请传入“0”，“roleName”请传入“default”，请勿传\\\"\\\"和null。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameplayer-saveplayerrole.html"
    },
    {
        "id": 483,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/js-code-cache-by-interception-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-js-code-cache-by-interception-check.html"
    },
    {
        "id": 484,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-remove-redundant-state-var\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-remove-redundant-state-var.html"
    },
    {
        "id": 485,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State message: string = \\\"\\\";\\n\\n  appendMsg(newMsg: String) : string {\\n    this.message += newMsg;\\n    return this.message;\\n  }\\n\\n  build() {\\n    Column() {\\n      Stack() {\\n        Text(this.message)\\n      }\\n      .backgroundColor(\\\"black\\\")\\n      .width(200)\\n      .height(400)\\n      Button(\\\"move\\\")\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-remove-redundant-state-var.html"
    },
    {
        "id": 486,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State message: string = \\\"\\\";\\n  appendMsg(newMsg: String) : string {\\n    this.message += newMsg;\\n    return this.message;\\n  }\\n  build() {\\n    Column() {\\n      Stack() {\\n      }\\n      .backgroundColor(\\\"black\\\")\\n      .width(200)\\n      .height(400)\\n      Button(\\\"move\\\")\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-remove-redundant-state-var.html"
    },
    {
        "id": 487,
        "pre": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/enterprise-recoverykey-delete.html"
    },
    {
        "id": 488,
        "pre": "/**\\n * @brief 方舟字节码文件修改的入口方法\\n * @param abc_path 待处理的方舟字节码文件的存储路径\\n */\\nextern \\\"C\\\" int Transform(const char *abc_path)\\n{\\n    // 开发者可以在这里读取${abc_path}对应的方舟字节码文件，然后根据方舟字节码的格式去修改相关数据，然后再重新生成方舟字节码文件\\n    return 0;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建自定义修改动态库的源码。  ",
        "import_module": null,
        "parent": "<li><p>创建自定义修改动态库的源码。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/customize-bytecode-during-compilation.html"
    },
    {
        "id": 489,
        "pre": "export const registerWatcher: () => void;\\nexport const writeAppEvent: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher和WriteAppEvent注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        {\\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr},\\n        {\\\"writeAppEvent\\\", nullptr, WriteAppEvent, nullptr, nullptr, nullptr, napi_default, nullptr}\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n} 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher和WriteAppEvent注册为ArkTS接口：</p> <pre>static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        {\\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr},\\n        {\\\"writeAppEvent\\\", nullptr, WriteAppEvent, nullptr, nullptr, nullptr, napi_default, nullptr}\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hiappevent-watcher-app-events-ndk.html"
    },
    {
        "id": 490,
        "pre": "// module.ets\\nconsole.log(\\\"Module loaded!\\\"); // 这段代码在导入时会立即执行，可能会导致副作用。\\nexport const data = 1;\\n\\n// main.ets\\nimport { data } from  './module' // 导入时，module.ets中的console.log会执行，产生输出。\\nconsole.log(data);",
        "type": "Reference",
        "function_call": "function initialize()",
        "function_name": "[h2]模块执行顶层代码",
        "parent_text": "  [h2]模块执行顶层代码 副作用产生场景 模块在被导入时，整个模块文件中的顶层代码会立即执行，而不仅仅是导出的部分。这意味着，即使只想使用模块中的某些导出内容，但是任何在顶层作用域中执行的代码也会被运行，从而产生副作用。  输出内容： Module loaded!\\n1 产生的副作用 即使只需要data，console.log(\\\"Module loaded!\\\") 仍会运行，导致开发者可能预期只输出data的值，但却额外输出了“Module loaded!”，影响输出内容。 优化方式 优化方式1：去除顶层代码，只导出需要的内容，避免不必要的代码执行。 // module.ets\\nexport const data = 1;\\n\\n// main.ets\\nimport { data } from  './module'\\nconsole.log(data); 输出内容： 1 优化方式2：将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。 // module.ets\\nexport function initialize() {\\n    console.log(\\\"Module loaded!\\\");\\n}\\nexport const data = 1;\\n\\n// main.ets\\nimport { data } from  './module'\\nconsole.log(data); 输出内容： 1 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"模块执行顶层代码\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052902__%E6%A8%A1%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%B6%E5%B1%82%E4%BB%A3%E7%A0%81\\\"'></a><a name='\\\"%E6%A8%A1%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%B6%E5%B1%82%E4%BB%A3%E7%A0%81\\\"'></a> <h4>[h2]模块执行顶层代码</h4> <p><strong>副作用产生场景</strong></p> <p>模块在被导入时，整个模块文件中的顶层代码会立即执行，而不仅仅是导出的部分。这意味着，即使只想使用模块中的某些导出内容，但是任何在顶层作用域中执行的代码也会被运行，从而产生副作用。</p>  <p>输出内容：</p> <pre class='\\\"typescript\\\"'>Module loaded!\\n1</pre> <p><strong>产生的副作用</strong></p> <p>即使只需要data，console.log(\\\"Module loaded!\\\") 仍会运行，导致开发者可能预期只输出data的值，但却额外输出了“Module loaded!”，<strong>影响输出内容</strong>。</p> <p><strong>优化方式</strong></p> <p>优化方式1：去除顶层代码，只导出需要的内容，避免不必要的代码执行。</p> <pre class='\\\"typescript\\\"'>// module.ets\\nexport const data = 1;\\n\\n// main.ets\\nimport { data } from  './module'\\nconsole.log(data);</pre> <p>输出内容：</p> <pre class='\\\"typescript\\\"'>1</pre> <p>优化方式2：将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。</p> <pre class='\\\"typescript\\\"'>// module.ets\\nexport function initialize() {\\n    console.log(\\\"Module loaded!\\\");\\n}\\nexport const data = 1;\\n\\n// main.ets\\nimport { data } from  './module'\\nconsole.log(data);</pre> <p>输出内容：</p> <pre class='\\\"typescript\\\"'>1</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-module-side-effects.html"
    },
    {
        "id": 491,
        "pre": "// module.ets\\nexport let data1 = \\\"data from module\\\"\\nglobalThis.someGlobalVar = 100; // 改变了全局状态\\n\\n// sideEffectModule.ets\\nexport let data2 = \\\"data from side effect module\\\"\\nglobalThis.someGlobalVar = 200; // 也变了全局状态\\n\\n// moduleUseGlobalVar.ets\\nimport { data1 } from './module' // 此时可能预期全局变量someGlobalVar的值为100\\nexport function useGlobalVar() {\\n    console.log(data1);\\n    console.log(globalThis.someGlobalVar); // 此时由于main.ets中加载了sideEffectModule模块，someGlobalVar的值已经被改为200\\n}\\n\\n// main.ets（执行入口）\\nimport { data1 } from \\\"./module\\\" // 将全局变量someGlobalVar的值改为100\\nimport { data2 } from \\\"./sideEffectModule\\\" // 又将全局变量someGlobalVar的值改为200\\nimport { useGlobalVar } from './moduleUseGlobalVar'\\n\\nuseGlobalVar();\\nfunction maybeNotCalledAtAll() {\\n    console.log(data1);\\n    console.log(data2);\\n}",
        "type": "Reference",
        "function_call": "nfunction maybeNotCalledAtAll()",
        "function_name": "[h2]修改全局对象",
        "parent_text": "  [h2]修改全局对象 副作用产生场景 顶层代码或导入的模块可能会直接操作全局变量，从而改变全局状态，引发副作用。  输出内容： data from module\\n200 产生的副作用 模块加载时直接改变全局变量globalThis.someGlobalVar的值，影响其他使用该变量的模块或代码。 优化方式 将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。 // module.ets\\nexport let data1 = \\\"data from module\\\"\\nexport function changeGlobalVar() {\\n    globalThis.someGlobalVar = 100;\\n}\\n\\n// sideEffectModule.ets\\nexport let data2 = \\\"data from side effect module\\\"\\nexport function changeGlobalVar() {\\n    globalThis.someGlobalVar = 200;\\n}\\n\\n// moduleUseGlobalVar.ets\\nimport { data1, changeGlobalVar } from './module'\\nexport function useGlobalVar() {\\n    console.log(data1);\\n    changeGlobalVar(); // 在需要的时候执行代码，而不是模块加载时执行。\\n    console.log(globalThis.someGlobalVar);\\n}\\n\\n// main.ets（执行入口）\\nimport { data1 } from \\\"./module\\\"\\nimport { data2 } from \\\"./sideEffectModule\\\"\\nimport { useGlobalVar } from './moduleUseGlobalVar'\\n\\nuseGlobalVar();\\nfunction maybeNotCalledAtAll() {\\n    console.log(data1);\\n    console.log(data2);\\n} 输出内容： data from module\\n100 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"修改全局对象\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052902__%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1\\\"'></a><a name='\\\"%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1\\\"'></a> <h4>[h2]修改全局对象</h4> <p><strong>副作用产生场景</strong></p> <p>顶层代码或导入的模块可能会直接<strong>操作全局变量</strong>，从而改变全局状态，引发副作用。</p>  <p>输出内容：</p> <pre class='\\\"screen\\\"'>data from module\\n200</pre> <p><strong>产生的副作用</strong></p> <p>模块加载时直接改变全局变量globalThis.someGlobalVar的值，<strong>影响其他使用该变量的模块或代码</strong>。</p> <p><strong>优化方式</strong></p> <p>将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。</p> <pre class='\\\"typescript\\\"'>// module.ets\\nexport let data1 = \\\"data from module\\\"\\nexport function changeGlobalVar() {\\n    globalThis.someGlobalVar = 100;\\n}\\n\\n// sideEffectModule.ets\\nexport let data2 = \\\"data from side effect module\\\"\\nexport function changeGlobalVar() {\\n    globalThis.someGlobalVar = 200;\\n}\\n\\n// moduleUseGlobalVar.ets\\nimport { data1, changeGlobalVar } from './module'\\nexport function useGlobalVar() {\\n    console.log(data1);\\n    changeGlobalVar(); // 在需要的时候执行代码，而不是模块加载时执行。\\n    console.log(globalThis.someGlobalVar);\\n}\\n\\n// main.ets（执行入口）\\nimport { data1 } from \\\"./module\\\"\\nimport { data2 } from \\\"./sideEffectModule\\\"\\nimport { useGlobalVar } from './moduleUseGlobalVar'\\n\\nuseGlobalVar();\\nfunction maybeNotCalledAtAll() {\\n    console.log(data1);\\n    console.log(data2);\\n}</pre> <p>输出内容：</p> <pre class='\\\"screen\\\"'>data from module\\n100</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-module-side-effects.html"
    },
    {
        "id": 492,
        "pre": "// module.ets\\nexport let data = \\\"data from module\\\"\\nAppStorage.setOrCreate(\\\"SomeAppStorageVar\\\", 200); // 修改应用全局的UI状态\\n\\n// Index.ets\\nimport { data } from \\\"./module\\\" // 将AppStorage中的SomeAppStorageVar改为200\\n\\n@Entry\\n@Component\\nstruct Index {\\n    // 开发者可能预期该值为100，但是由于module模块导入，该值已经被修改为200，但开发者可能并不知道值已经被修改\\n    @StorageLink(\\\"SomeAppStorageVar\\\") message: number = 100;\\n    build() {\\n        Row() {\\n            Column() {\\n                Text(\\\"test\\\" + this.message)\\n                    .fontSize(50)\\n            }\\n            .width(\\\"100%\\\")\\n        }\\n        .height(\\\"100%\\\")\\n    }\\n}\\nfunction maybeNotCalledAtAll() {\\n    console.log(data);\\n}",
        "type": "Reference",
        "function_call": "nfunction maybeNotCalledAtAll()",
        "function_name": "[h2]修改应用级ArkUI组件的状态变量信息",
        "parent_text": "  [h2]修改应用级ArkUI组件的状态变量信息 副作用产生场景 顶层代码或导入的模块可能会直接修改应用级ArkUI组件的状态变量信息，从而改变全局状态，引发副作用。  显示内容： test200 产生的副作用 模块加载时直接改变AppStorage中SomeAppStorageVar的值，影响其他使用该变量的模块或代码。 ArkUI组件的状态变量信息可以通过一些应用级接口修改，详见ArkUI状态管理接口文档。 优化方式 将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。 // module.ets\\nexport let data = \\\"data from module\\\"\\nexport function initialize() {\\n    AppStorage.setOrCreate(\\\"SomeAppStorageVar\\\", 200);\\n}\\n\\n// Index.ets\\nimport { data } from \\\"./module\\\"\\n\\n@Entry\\n@Component\\nstruct Index {\\n    @StorageLink(\\\"SomeAppStorageVar\\\") message: number = 100;\\n    build() {\\n        Row() {\\n            Column() {\\n                Text(\\\"test\\\" + this.message)\\n                    .fontSize(50)\\n            }\\n            .width(\\\"100%\\\")\\n        }\\n        .height(\\\"100%\\\")\\n    }\\n}\\nfunction maybeNotCalledAtAll() {\\n    console.log(data);\\n} 显示内容： test100 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"修改应用级arkui组件的状态变量信息\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052902__%E4%BF%AE%E6%94%B9%E5%BA%94%E7%94%A8%E7%BA%A7arkui%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E4%BF%A1%E6%81%AF\\\"'></a><a name='\\\"%E4%BF%AE%E6%94%B9%E5%BA%94%E7%94%A8%E7%BA%A7arkui%E7%BB%84%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E4%BF%A1%E6%81%AF\\\"'></a> <h4>[h2]修改应用级ArkUI组件的状态变量信息</h4> <p><strong>副作用产生场景</strong></p> <p>顶层代码或导入的模块可能会直接<strong>修改应用级ArkUI组件的状态变量信息</strong>，从而改变全局状态，引发副作用。</p>  <p>显示内容：</p> <pre class='\\\"screen\\\"'>test200</pre> <p><strong>产生的副作用</strong></p> <p>模块加载时直接改变AppStorage中SomeAppStorageVar的值，<strong>影响其他使用该变量的模块或代码</strong>。</p> <p>ArkUI组件的状态变量信息可以通过一些应用级接口修改，详见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-state-management-overview\\\"'>ArkUI状态管理接口文档</a>。</p> <p><strong>优化方式</strong></p> <p>将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。</p> <pre class='\\\"typescript\\\"'>// module.ets\\nexport let data = \\\"data from module\\\"\\nexport function initialize() {\\n    AppStorage.setOrCreate(\\\"SomeAppStorageVar\\\", 200);\\n}\\n\\n// Index.ets\\nimport { data } from \\\"./module\\\"\\n\\n@Entry\\n@Component\\nstruct Index {\\n    @StorageLink(\\\"SomeAppStorageVar\\\") message: number = 100;\\n    build() {\\n        Row() {\\n            Column() {\\n                Text(\\\"test\\\" + this.message)\\n                    .fontSize(50)\\n            }\\n            .width(\\\"100%\\\")\\n        }\\n        .height(\\\"100%\\\")\\n    }\\n}\\nfunction maybeNotCalledAtAll() {\\n    console.log(data);\\n}</pre> <p>显示内容：</p> <pre class='\\\"screen\\\"'>test100</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-module-side-effects.html"
    },
    {
        "id": 493,
        "pre": "// a.ets\\nimport { b } from \\\"./b\\\"\\nconsole.log('Module A: ', b);\\nexport const a = 'A';\\n\\n// b.ets\\nimport { a } from \\\"./a\\\"\\nconsole.log('Module B: ', a);\\nexport const b = 'B';",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]循环依赖",
        "parent_text": "  [h2]循环依赖 副作用产生场景 ArkTS模块化支持循环依赖，即模块A依赖模块B，同时模块B又依赖模块A。在这种情况下，某些导入的模块可能尚未完全加载，从而导致部分代码在执行时行为异常，产生意外的副作用。  输出内容： Error message: a is not initialized\\nStacktrace:\\n    at func_main_0 (b.ets:2:27) 产生的副作用 由于模块间相互依赖，模块的执行顺序可能导致导出的内容为空或未定义，影响代码的逻辑流。 优化方式 尽量避免模块间的循环依赖，确保模块的加载顺序是明确和可控的，以避免产生意外的副作用。@security/no-cycle循环依赖检查工具 可以辅助检查循环依赖。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"循环依赖\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052902__%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96\\\"'></a><a name='\\\"%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96\\\"'></a> <h4>[h2]循环依赖</h4> <p><strong>副作用产生场景</strong></p> <p>ArkTS模块化支持循环依赖，即模块A依赖模块B，同时模块B又依赖模块A。在这种情况下，某些导入的模块可能尚未完全加载，从而导致部分代码在执行时行为异常，产生意外的副作用。</p>  <p>输出内容：</p> <pre class='\\\"screen\\\"'>Error message: a is not initialized\\nStacktrace:\\n    at func_main_0 (b.ets:2:27)</pre> <p><strong>产生的副作用</strong></p> <p>由于模块间相互依赖，模块的执行顺序可能导致导出的内容为空或未定义，影响代码的逻辑流。</p> <p><strong>优化方式</strong></p> <p>尽量避免模块间的循环依赖，确保模块的加载顺序是明确和可控的，以避免产生意外的副作用。<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide_no-cycle-V5\\\"' target='\\\"_blank\\\"'>@security/no-cycle循环依赖检查工具</a> 可以辅助检查循环依赖。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-module-side-effects.html"
    },
    {
        "id": 494,
        "pre": "// module.ets\\nexport let data = \\\"data from module\\\"\\nglobalThis.someGlobalVar = 100;\\n\\n// moduleUseGlobalVar.ets\\nimport lazy { data } from \\\"./module\\\"\\nconsole.log(globalThis.someGlobalVar); // 此时由于lazy特性，module模块还未执行，someGlobalVar的值为undefined\\nconsole.log(data); // 使用到module模块的变量，此时module模块执行，someGlobalVar的值变为100",
        "type": "Reference",
        "function_call": "ninitialize()",
        "function_name": "[h2]延迟加载（lazy import）改变模块执行顺序，可能导致预期的全局变量未定义",
        "parent_text": "  [h2]延迟加载（lazy import）改变模块执行顺序，可能导致预期的全局变量未定义 副作用产生场景 延迟加载特性可使待加载模块在冷启动阶段不被加载，直至应用程序实际运行过程中需要用到这些模块时，才按需同步加载相关模块，从而缩短应用冷启动耗时。但这也同时会改变模块的执行顺序。  输出内容： undefined\\ndata from module 产生的副作用 由于使用到延迟加载（lazy import）特性，会导致模块变量在使用到时再执行对应的模块，模块中的一些全局变量修改行为也会延迟，可能会导致运行结果不符合预期。 优化方式 将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。 // module.ets\\nexport let data = \\\"data from module\\\"\\nexport function initialize() {\\n    globalThis.someGlobalVar = 100; // 延迟到函数调用时执行\\n}\\n\\n// moduleUseGlobalVar.ets\\nimport lazy { data, initialize } from \\\"./module\\\"\\ninitialize(); // 执行初始化函数，初始化someGlobalVar\\nconsole.log(globalThis.someGlobalVar); // 此时someGlobalVar一定为预期的值\\nconsole.log(data); 输出内容： 100\\ndata from module ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"延迟加载lazy-import改变模块执行顺序可能导致预期的全局变量未定义\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052902__%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDlazy-import%E6%94%B9%E5%8F%98%E6%A8%A1%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E9%A2%84%E6%9C%9F%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E6%9C%AA%E5%AE%9A%E4%B9%89\\\"'></a><a name='\\\"%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BDlazy-import%E6%94%B9%E5%8F%98%E6%A8%A1%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E9%A2%84%E6%9C%9F%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E6%9C%AA%E5%AE%9A%E4%B9%89\\\"'></a> <h4>[h2]延迟加载（lazy import）改变模块执行顺序，可能导致预期的全局变量未定义</h4> <p><strong>副作用产生场景</strong></p> <p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-lazy-import\\\"'>延迟加载</a>特性可使待加载模块在冷启动阶段不被加载，直至应用程序实际运行过程中需要用到这些模块时，才按需同步加载相关模块，从而缩短应用冷启动耗时。但这也同时会改变模块的执行顺序。</p>  <p>输出内容：</p> <pre class='\\\"screen\\\"'>undefined\\ndata from module</pre> <p><strong>产生的副作用</strong></p> <p>由于使用到延迟加载（lazy import）特性，会导致模块变量在使用到时再执行对应的模块，模块中的一些全局变量修改行为也会延迟，可能会导致运行结果不符合预期。</p> <p><strong>优化方式</strong></p> <p>将可能引发副作用的代码放在函数或方法内部，只有在需要时再执行，而不是在模块加载时立即执行。</p> <pre class='\\\"typescript\\\"'>// module.ets\\nexport let data = \\\"data from module\\\"\\nexport function initialize() {\\n    globalThis.someGlobalVar = 100; // 延迟到函数调用时执行\\n}\\n\\n// moduleUseGlobalVar.ets\\nimport lazy { data, initialize } from \\\"./module\\\"\\ninitialize(); // 执行初始化函数，初始化someGlobalVar\\nconsole.log(globalThis.someGlobalVar); // 此时someGlobalVar一定为预期的值\\nconsole.log(data);</pre> <p>输出内容：</p> <pre class='\\\"screen\\\"'>100\\ndata from module</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-module-side-effects.html"
    },
    {
        "id": 495,
        "pre": "import { fileIo as fs } from '@kit.CoreFileKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-setting-font.html"
    },
    {
        "id": 496,
        "pre": "\\\"module\\\": {\\n  \\\"name\\\": \\\"<name>\\\",\\n  \\\"type\\\": \\\"entry\\\",\\n  \\\"description\\\": \\\"<description>\\\",\\n  \\\"mainElement\\\": \\\"<mainElement>\\\",\\n  \\\"deviceTypes\\\": [],\\n  \\\"pages\\\": \\\"<pages>\\\",\\n  \\\"abilities\\\": [],\\n  \\\"metadata\\\": [\\n    {\\n      \\\"name\\\": \\\"minors_mode\\\",\\n      \\\"value\\\": \\\"1\\\"\\n    }\\n  ],\\n  \\\"extensionAbilities\\\": []\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过在工程中entry模块的module.json5文件中module属性下配置meta-data字段并且配置minors_mode值为\\\"1\\\"，表示当前应用已接入未成年人模式，如果开发者没有配置相关字段，或配置值不为\\\"1\\\"，则表示该应用不支持未成年人模式，当系统开启未成年人模式时，不支持未成年人模式的应用会被默认禁用。      开发者如果声明应用支持未成年人模式，则建议接入系统提供的未成年人模式，跟随系统状态进行切换，并提供适龄内容。不能随同系统切换而切换的，应用责任自负。开发者需确保应用提供的未成年人模式内容符合相关法律法规及监管要求，否则因此造成的一切责任由开发者自行承担。 如果开发者修改过该应用在健康使用设备中的管控规则，则以修改过的最新规则为准。   ",
        "import_module": null,
        "parent": "<li>通过在工程中entry模块的module.json5文件中<span rgb(63,63,63);\\\"=\"\" style='\\\"color:'>module属性下</span>配置meta-data字段并且配置minors_mode值为\\\"1\\\"，表示当前应用已接入未成年人模式，如果开发者没有配置相关字段，或配置值不为\\\"1\\\"，则表示该应用不支持未成年人模式，当系统开启未成年人模式时，不支持未成年人模式的应用会被默认禁用。 <div class='\\\"caution\\\"'> <span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120036.97574014589836048202253003396787:50001231000000:2800:34CCCB36744E1FDED0F1768A0E4C8AAAEAD95A1FA6EEB55C4E9FA4F8EBAE9B2C.png\\\"'/> </span> <div class='\\\"cautionbody\\\"'> <ol> <li>开发者如果声明应用支持未成年人模式，则建议接入系统提供的未成年人模式，跟随系统状态进行切换，并提供适龄内容。不能随同系统切换而切换的，应用责任自负。开发者需确保应用提供的未成年人模式内容符合相关法律法规及监管要求，否则因此造成的一切责任由开发者自行承担。</li> <li>如果开发者修改过该应用在健康使用设备中的管控规则，则以修改过的最新规则为准。</li> </ol> </div> </div></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-overview-minorsprotection.html"
    },
    {
        "id": 497,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-confusing-non-null-assertion\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-confusing-non-null-assertion.html"
    },
    {
        "id": 498,
        "pre": "interface Foo {\\n  bar?: string;\\n  num?: number;\\n}\\n\\nfunction getFoo(): Foo {\\n  return {\\n    bar: 'bar',\\n    num: Number.MAX_VALUE\\n  };\\n}\\nconst foo: Foo = getFoo();\\nexport const isEqualsBar = foo.bar === 'hello';",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-confusing-non-null-assertion.html"
    },
    {
        "id": 499,
        "pre": "interface Foo {\\n  bar?: string;\\n  num?: number;\\n}\\n\\nfunction getFoo(): Foo {\\n  return {\\n    bar: 'bar',\\n    num: Number.MAX_VALUE\\n  };\\n}\\nconst foo: Foo = getFoo();\\n// 可能会产生混淆，误以为是不等于\\nexport const isEqualsBar = foo.bar! === 'hello';\\n// 可能会产生混淆，误以为是不等于\\nconst num = 2;\\nexport const isEqualsNum = num + foo.num! === num;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-confusing-non-null-assertion.html"
    },
    {
        "id": 500,
        "pre": "import { interactiveLiveness } from '@kit.VisionKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "将实现人脸活体检测相关的类添加至工程。 ",
        "import_module": "import { interactiveLiveness } from '@kit.VisionKit';",
        "parent": "<li><span>将实现人脸活体检测相关的类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/vision-interactiveliveness.html"
    },
    {
        "id": 501,
        "pre": "import { common, abilityAccessCtrl, Permissions } from '@kit.AbilityKit';\\nimport { interactiveLiveness } from '@kit.VisionKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct LivenessIndex {\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  private array: Array<Permissions> = [\\\"ohos.permission.CAMERA\\\"];\\n  @State actionsNum: number = 0;\\n  @State isSilentMode: string = \\\"INTERACTIVE_MODE\\\";\\n  @State routeMode: string = \\\"replace\\\";\\n  @State resultInfo: interactiveLiveness.InteractiveLivenessResult = {\\n    livenessType: 0\\n  };\\n  @State failResult: Record<string, number | string> = {\\n    \\\"code\\\": 1008302000,\\n    \\\"message\\\": \\\"\\\"\\n  };\\n\\n  build() {\\n    Stack({\\n      alignContent: Alignment.Top\\n    }) {\\n      Column() {\\n        Row() {\\n          Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\\n            Text(\\\"验证完的跳转模式：\\\")\\n              .fontSize(18)\\n              .width(\\\"25%\\\")\\n            Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\\n              Row() {\\n                Radio({ value: \\\"replace\\\", group: \\\"routeMode\\\" }).checked(true)\\n                  .height(24)\\n                  .width(24)\\n                  .onChange((isChecked: boolean) => {\\n                    this.routeMode = \\\"replace\\\"\\n                  })\\n                Text(\\\"replace\\\")\\n                  .fontSize(16)\\n              }\\n              .margin({ right: 15 })\\n\\n              Row() {\\n                Radio({ value: \\\"back\\\", group: \\\"routeMode\\\" }).checked(false)\\n                  .height(24)\\n                  .width(24)\\n                  .onChange((isChecked: boolean) => {\\n                    this.routeMode = \\\"back\\\";\\n                  })\\n                Text(\\\"back\\\")\\n                  .fontSize(16)\\n              }\\n            }\\n            .width(\\\"75%\\\")\\n          }\\n        }\\n        .margin({ bottom: 30 })\\n\\n          Row() {\\n            Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\\n              Text(\\\"动作数量：\\\")\\n                .fontSize(18)\\n                .width(\\\"25%\\\")\\n              TextInput({\\n                placeholder: this.actionsNum != 0 ? this.actionsNum.toString() : \\\"动作数量为3或4个\\\"\\n              })\\n                .type(InputType.Number)\\n                .placeholderFont({\\n                  size: 18,\\n                  weight: FontWeight.Normal,\\n                  family: \\\"HarmonyHeiTi\\\",\\n                  style: FontStyle.Normal\\n                })\\n                .fontSize(18)\\n                .fontWeight(FontWeight.Bold)\\n                .fontFamily(\\\"HarmonyHeiTi\\\")\\n                .fontStyle(FontStyle.Normal)\\n                .width(\\\"65%\\\")\\n                .onChange((value: string) => {\\n                  this.actionsNum = Number(value) as interactiveLiveness.ActionsNumber;\\n                })\\n            }\\n          }\\n      }\\n      .margin({ left: 24, top: 80 })\\n      .zIndex(1)\\n\\n      Stack({\\n        alignContent: Alignment.Bottom\\n      }) {\\n        if (this.resultInfo?.mPixelMap) {\\n          Image(this.resultInfo?.mPixelMap)\\n            .width(260)\\n            .height(260)\\n            .align(Alignment.Center)\\n            .margin({ bottom: 260 })\\n          Circle()\\n            .width(300)\\n            .height(300)\\n            .fillOpacity(0)\\n            .strokeWidth(60)\\n            .stroke(Color.White)\\n            .margin({ bottom: 250, left: 0 })\\n        }\\n\\n        Text(this.resultInfo.mPixelMap ?\\n          \\\"检测成功\\\" :\\n          this.failResult.code != 1008302000 ?\\n            \\\"检测失败\\\" :\\n            \\\"\\\")\\n          .width(\\\"100%\\\")\\n          .height(26)\\n          .fontSize(20)\\n          .fontColor(\\\"#000000\\\")\\n          .fontFamily(\\\"HarmonyHeiTi\\\")\\n          .margin({ top: 50 })\\n          .textAlign(TextAlign.Center)\\n          .fontWeight(\\\"Medium\\\")\\n          .margin({ bottom: 240 })\\n\\n        if(this.failResult.code != 1008302000) {\\n          Text(this.failResult.message as string)\\n            .width(\\\"100%\\\")\\n            .height(26)\\n            .fontSize(16)\\n            .fontColor(Color.Gray)\\n            .textAlign(TextAlign.Center)\\n            .fontFamily(\\\"HarmonyHeiTi\\\")\\n            .fontWeight(\\\"Medium\\\")\\n            .margin({ bottom: 200 })\\n        }\\n\\n        Button(\\\"开始检测\\\", { type: ButtonType.Normal, stateEffect: true })\\n          .width(192)\\n          .height(40)\\n          .fontSize(16)\\n          .backgroundColor(0x317aff)\\n          .borderRadius(20)\\n          .margin({\\n            bottom: 56\\n          })\\n          .onClick(() => {\\n            this.privateStartDetection();\\n          })\\n      }\\n      .height(\\\"100%\\\")\\n    }\\n  }\\n\\n  onPageShow() {\\n    this.resultRelease();\\n    this.getDetectionResultInfo();\\n  }\\n\\n  // 跳转到人脸活体检测控件\\n  private privateRouterLibrary() {\\n    let routerOptions: interactiveLiveness.InteractiveLivenessConfig = {\\n      isSilentMode: this.isSilentMode as interactiveLiveness.DetectionMode,\\n      routeMode: this.routeMode as interactiveLiveness.RouteRedirectionMode,\\n      actionsNum: this.actionsNum\\n    }\\n\\n    if (canIUse(\\\"SystemCapability.AI.Component.LivenessDetect\\\")) {\\n      interactiveLiveness.startLivenessDetection(routerOptions).then((DetectState: boolean) => {\\n        hilog.info(0x0001, \\\"LivenessCollectionIndex\\\", `Succeeded in jumping.`);\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0001, \\\"LivenessCollectionIndex\\\", `Failed to jump. Code：${err.code}，message：${err.message}`);\\n      })\\n    } else {\\n      hilog.error(0x0001, \\\"LivenessCollectionIndex\\\", 'this api is not supported on this device');\\n    }\\n  }\\n\\n  // 校验CAMERA权限\\n  private privateStartDetection() {\\n    abilityAccessCtrl.createAtManager().requestPermissionsFromUser(this.context, this.array).then((res) => {\\n      for (let i = 0; i < res.permissions.length; i++) {\\n        if (res.permissions[i] === \\\"ohos.permission.CAMERA\\\" && res.authResults[i] === 0) {\\n        this.privateRouterLibrary();\\n      }\\n     }\\n    }).catch((err: BusinessError) => {\\n      hilog.error(0x0001, \\\"LivenessCollectionIndex\\\", `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);\\n    })\\n  }\\n\\n  // 获取验证结果\\n  private getDetectionResultInfo() {\\n    // getInteractiveLivenessResult接口调用完会释放资源\\n    if (canIUse(\\\"SystemCapability.AI.Component.LivenessDetect\\\")) {\\n      let resultInfo = interactiveLiveness.getInteractiveLivenessResult();\\n      resultInfo.then(data => {\\n        this.resultInfo = data;\\n      }).catch((err: BusinessError) => {\\n        this.failResult = {\\n          \\\"code\\\": err.code,\\n          \\\"message\\\": err.message\\n        }\\n      })\\n    } else {\\n      hilog.error(0x0001, \\\"LivenessCollectionIndex\\\", 'this api is not supported on this device');\\n    }\\n  }\\n\\n  // result release\\n  private resultRelease() {\\n    this.resultInfo = {\\n      livenessType: 0\\n    }\\n    this.failResult = {\\n      \\\"code\\\": 1008302000,\\n      \\\"message\\\": \\\"\\\"\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": "import { interactiveLiveness } from '@kit.VisionKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section22701210512\\\"'> <a name='\\\"section22701210512\\\"'></a><a name='\\\"section22701210512\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/vision-interactiveliveness.html"
    },
    {
        "id": 502,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/space-before-blocks\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_space-before-blocks.html"
    },
    {
        "id": 503,
        "pre": "export function a() {\\n  //doSomething\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Row() {\\n      Column() {\\n        Text('Hello World')\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_space-before-blocks.html"
    },
    {
        "id": 504,
        "pre": "// Missing space before opening brace.\\nexport function a(){\\n  //doSomething\\n}\\n\\n@Entry\\n@Component\\n// Missing space before opening brace.\\nstruct Index{\\n  // Missing space before opening brace.\\n  build(){\\n    // Missing space before opening brace.\\n    Row(){\\n      // Missing space before opening brace.\\n      Column(){\\n        Text('Hello World')\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_space-before-blocks.html"
    },
    {
        "id": 505,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/space-before-function-paren\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_space-before-function-paren.html"
    },
    {
        "id": 506,
        "pre": "// 默认foo和(之间需要一个空格\\nexport function foo () {\\n  // ...\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "// 默认foo和(之间需要一个空格\\nexport function foo () {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_space-before-function-paren.html"
    },
    {
        "id": 507,
        "pre": "// 默认foo和(之间需要一个空格\\nexport function foo() {\\n  // ...\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "// 默认foo和(之间需要一个空格\\nexport function foo() {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_space-before-function-paren.html"
    },
    {
        "id": 508,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/ban-types\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_ban-types.html"
    },
    {
        "id": 509,
        "pre": "// 类型小写保持一致\\nconst str: string = 'foo';\\nconst bool: boolean = true;\\nconst num: number = 1;\\nconst bigInt: bigint = 1n;\\n\\n// 使用正确的函数类型\\nconst func: () => string = () => 'hello';\\n\\nexport { str, bool, num, bigInt, func };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_ban-types.html"
    },
    {
        "id": 510,
        "pre": "// 类型小写保持一致\\nconst str: String = 'foo';\\nconst bool: Boolean = true;\\nconst num: Number = 1;\\nconst bigInt: BigInt = 1n;\\n\\n// 使用正确的函数类型\\nconst func: Function = () => 'hello';\\n\\nexport { str, bool, num, bigInt, func };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_ban-types.html"
    },
    {
        "id": 511,
        "pre": "import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-button-chooseavatar.html"
    },
    {
        "id": 512,
        "pre": "import { pdfService, PdfView, pdfViewManager } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\\n  private context = getContext() as common.UIAbilityContext;\\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\\n  private searchIndex = 0;\\n  private charCount = 0;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    (async () => {\\n      this.loadResult = await this.controller.loadDocument(filePath);\\n    })()\\n  }\\n\\n  build() {\\n    Column() {\\n      Row() {\\n        // 搜索关键字\\n        Button('searchKey').onClick(async () => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            this.controller.searchKey('C++', (index: number) => {\\n              this.charCount = index;\\n              hilog.info(0x0000, 'PdfPage', 'searchKey %{public}s!', index + '');\\n            })\\n          }\\n        })\\n        // 上一个\\n        Button('setSearchPrevIndex').onClick(async () => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            if(this.searchIndex > 0) {\\n              this.controller.setSearchIndex(--this.searchIndex);\\n            }\\n          }\\n        })\\n        // 下一个\\n        Button('setSearchNextIndex').onClick(async () => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            if(this.searchIndex < this.charCount) {\\n              this.controller.setSearchIndex(++this.searchIndex);\\n            }\\n          }\\n        })\\n       // 获取当前页索引\\n        Button('getSearchIndex').onClick(async () => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            let curSearchIndex = this.controller.getSearchIndex();\\n            hilog.info(0x0000, 'PdfPage', 'curSearchIndex %{public}s!', curSearchIndex + '');\\n          }\\n        })\\n        // 清除搜索文本的高亮\\n        Button('clearSearch').onClick(async () => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            this.controller.clearSearch();\\n          }\\n        })\\n      }\\n\\n      PdfView({\\n        controller: this.controller,\\n        pageFit: pdfService.PageFit.FIT_WIDTH,\\n        showScroll: true\\n      })\\n        .id('pdfview_app_view')\\n        .layoutWeight(1);\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  先加载PDF文档。 调用PdfView预览组件，渲染显示。 在按钮【searchKey】里，调用searchKey方法，搜索指定关键字。 上一个、下一个搜索按钮跳转到对应的结果。 在按钮【getSearchIndex】里，调用getSearchIndex方法，获取当前的搜索结果索引。 在按钮【clearSearch】里，调用clearSearch方法，清除搜索结果。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section979953310306\\\"'> <a name='\\\"section979953310306\\\"'></a><a name='\\\"section979953310306\\\"'></a> <h4>示例代码</h4> <ol> <li>先加载PDF文档。</li> <li>调用PdfView预览组件，渲染显示。</li> <li>在按钮【searchKey】里，调用searchKey方法，搜索指定关键字。</li> <li>上一个、下一个搜索按钮跳转到对应的结果。</li> <li>在按钮【getSearchIndex】里，调用getSearchIndex方法，获取当前的搜索结果索引。</li> <li>在按钮【clearSearch】里，调用clearSearch方法，清除搜索结果。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-pdfview-search.html"
    },
    {
        "id": 513,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"eqeqeq\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_eqeqeq.html"
    },
    {
        "id": 514,
        "pre": "export function test(a: string, b: string) {\\n  return a === b;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_eqeqeq.html"
    },
    {
        "id": 515,
        "pre": "export function test(a: string, b: string) {\\n  // Expected '===' and instead saw '=='.\\n  return a == b;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_eqeqeq.html"
    },
    {
        "id": 516,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { font } from '@kit.ArkUI';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    this.pdfDocument.loadDocument(filePath);\\n  }\\n\\n  build() {\\n    Column() {\\n      // 添加文本\\n      Button('addText').onClick(async () => {\\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n        let str = 'This is add text object!';\\n        let fontInfo = new pdfService.FontInfo();\\n        // 确保字体路径存在\\n        fontInfo.fontPath = font.getFontByName('HarmonyOS Sans')?.path;\\n        fontInfo.fontName = '';\\n        let style: pdfService.TextStyle = { textColor: 0x000000, textSize: 30, fontInfo };\\n        page.addTextObject(str, 10, 10, style);\\n        let outPdfPath = this.context.filesDir + '/testAddText.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'addText %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 删除文本\\n      Button('delText').onClick(async () => {\\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n        let graphicsObjects = page.getGraphicsObjects();\\n        // 找到第一个要删除的文本\\n        let index = graphicsObjects.findIndex(item => item.type === pdfService.GraphicsObjectType.OBJECT_TEXT);\\n        if (index > -1) {\\n          // 删除第一个文本\\n          page.deleteGraphicsObject(graphicsObjects[index]);\\n        }\\n        let outPdfPath = this.context.filesDir + '/testDelText.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'delText %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 添加图片\\n      Button('addImage').onClick(async () => {\\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n        // 插入图片，确保沙箱目录有img.jpg图片\\n        let imagePath = this.context.filesDir + '/img.jpg';\\n        page.addImageObject(imagePath, 100, 100, 100, 120);\\n        let outPdfPath = this.context.filesDir + '/testAddImage.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'addImage %{public}s!', result ? 'success' : 'fail');\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "添加文本和图片",
        "parent_text": "  添加文本和图片  调用loadDocument方法，加载PDF文档。 在【addText】按钮中调用addTextObject的方法插入文本。 在【delText】按钮中调用deleteGraphicsObject方法来删除相应的页面文本。 在【addImage】按钮中调用addImageObject的方法插入图片。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section133241461334\\\"'> <a name='\\\"section133241461334\\\"'></a><a name='\\\"section133241461334\\\"'></a> <h4>添加文本和图片</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>在【addText】按钮中调用addTextObject的方法插入文本。</li> <li>在【delText】按钮中调用deleteGraphicsObject方法来删除相应的页面文本。</li> <li>在【addImage】按钮中调用addImageObject的方法插入图片。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-add-txt-img-annot.html"
    },
    {
        "id": 517,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  build() {\\n    Column() {\\n      // 添加批注\\n      Button('addTextAnnotation').onClick(async () => {\\n        // 确保沙箱目录有input.pdf文档\\n        let filePath = this.context.filesDir + '/input.pdf';\\n        this.pdfDocument.loadDocument(filePath);\\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n        let aInfo = new pdfService.TextAnnotationInfo();\\n        aInfo.iconName = 'cument Format';\\n        aInfo.content = 'this is a content';\\n        aInfo.subject = 'Annotation';\\n        aInfo.title = 'this is a title';\\n        aInfo.state = pdfService.TextAnnotationState.MARKED;\\n        aInfo.x = 200;\\n        aInfo.y = 200;\\n        aInfo.color = 0xf9b1b1;\\n        aInfo.flag = pdfService.AnnotationFlag.PRINTED;\\n        let annotation: pdfService.PdfAnnotation = page.addAnnotation(aInfo);\\n        let outPdfPath = this.context.filesDir + '/testAddTextAnnotation.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        this.pdfDocument.releaseDocument();\\n        hilog.info(0x0000, 'PdfPage', 'addTextAnnotation %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 修改批注\\n      Button('setAnnotation').onClick(async () => {\\n        let filePath = this.context.filesDir + '/testAddTextAnnotation.pdf';\\n        let result = this.pdfDocument.loadDocument(filePath);\\n        if (result === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n          let annotations = page.getAnnotations();\\n          if (annotations.length > 0 && annotations[0].type === pdfService.AnnotationType.TEXT) {\\n            let newAnno = annotations[0];\\n            page.removeAnnotation(newAnno);\\n            let annotation = page.addAnnotation(newAnno);\\n            let newInfo = new pdfService.TextAnnotationInfo();\\n            newInfo.title = \\\"new Title\\\";\\n            newInfo.content = \\\"new Info\\\";\\n            newInfo.state = pdfService.TextAnnotationState.MARKED;\\n            newInfo.x = 100;\\n            newInfo.y = 100;\\n            page.setAnnotation(annotation, newInfo);\\n            let outPdfPath = this.context.filesDir + '/testSetAnnotation.pdf';\\n            let result = this.pdfDocument.saveDocument(outPdfPath);\\n            this.pdfDocument.releaseDocument();\\n            hilog.info(0x0000, 'PdfPage', 'setAnnotation %{public}s!', result ? 'success' : 'fail');\\n          }\\n        }\\n      })\\n      // 删除批注\\n      Button('removeAnnotation').onClick(async () => {\\n        let filePath = this.context.filesDir + '/testAddTextAnnotation.pdf';\\n        let result = this.pdfDocument.loadDocument(filePath);\\n        if (result === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\\n          let annotations = page.getAnnotations();\\n          if (annotations.length > 0 && annotations[0].type === pdfService.AnnotationType.TEXT) {\\n            page.removeAnnotation(annotations[0]);\\n            let outPdfPath = this.context.filesDir + '/testRemoveAnnotation.pdf';\\n            let result = this.pdfDocument.saveDocument(outPdfPath);\\n            this.pdfDocument.releaseDocument();\\n            hilog.info(0x0000, 'PdfPage', 'removeAnnotation %{public}s!', result ? 'success' : 'fail');\\n          }\\n        }\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "添加文本批注",
        "parent_text": "  添加文本批注  调用loadDocument方法，加载PDF文档。 调用getPage方法获取指定页。 实例化TextAnnotationInfo文本批注，并设置相关属性。 调用addAnnotation或setAnnotation方法添加或修改批注。 调用removeAnnotation方法删除批注。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section134822041104415\\\"'> <a name='\\\"section134822041104415\\\"'></a><a name='\\\"section134822041104415\\\"'></a> <h4>添加文本批注</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>调用getPage方法获取指定页。</li> <li>实例化TextAnnotationInfo文本批注，并设置相关属性。</li> <li>调用addAnnotation或setAnnotation方法添加或修改批注。</li> <li>调用removeAnnotation方法删除批注。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-add-txt-img-annot.html"
    },
    {
        "id": 518,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-function-type\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-function-type.html"
    },
    {
        "id": 519,
        "pre": "export function foo(example: () => number): number {\\n  return example();\\n}\\n\\n// returns the function itself, not the `this` argument.\\nexport type ReturnsSelf = (arg: string) => ReturnsSelf;\\n\\nexport interface Foo {\\n  bar: string;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-function-type.html"
    },
    {
        "id": 520,
        "pre": "interface GeneratedTypeLiteralInterface {\\n  (): number;\\n}\\n\\nexport function foo(example: GeneratedTypeLiteralInterface): number {\\n  return example();\\n}\\n\\nexport interface Foo {\\n  (bar: string): this;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-function-type.html"
    },
    {
        "id": 521,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/keyword-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-keyword-spacing-stylistic.html"
    },
    {
        "id": 522,
        "pre": "export function test(a: number, b: number) {\\n  if (a > b) {\\n    console.info('doSomething');\\n  } else if (a = b) {\\n    console.info('doSomething');\\n  } else {\\n    console.info('doSomething');\\n  }\\n\\n  for (const item of [a, b]) {\\n    console.info(`${item}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-keyword-spacing-stylistic.html"
    },
    {
        "id": 523,
        "pre": "export function test(a: number, b: number) {\\n  // Expected space after 'if'.\\n  if(a > b) {\\n    console.info('doSomething');\\n  // Expected space before 'else'.\\n  // Expected space after 'if'.\\n  }else if(a = b) {\\n    console.info('doSomething');\\n  // Expected space before 'else'.\\n  // Expected space after 'else'.\\n  }else{\\n    console.info('doSomething');\\n  }\\n\\n  // Expected space after 'for'.\\n  for(const item of [a, b]) {\\n    console.info(`${item}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-keyword-spacing-stylistic.html"
    },
    {
        "id": 524,
        "pre": "import { router } from '@kit.ArkUI';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\n\\nexport default class EntryAbility extends UIAbility {\\n  // 冷启动场景通过onCreate回调获取码值信息\\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\\n    hilog.info(0x0001, '[Scan Access]', `Succeeded in getting want in onCreate`);\\n    // 从want中获取传入的链接信息。\\n    // 如传入的url为：https://www.example.com/programs?router=Access\\n    this.getRouterUri(want);\\n  }\\n\\n  // 热启动场景通过onNewWant回调获取码值信息\\n  onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\\n    hilog.info(0x0001, '[Scan Access]', `Succeeded in getting want in onNewWant`);\\n    // 从want中获取传入的链接信息\\n    this.getRouterUri(want);\\n  }\\n\\n  // 解析扫码结果，跳转相应页面\\n  private getRouterUri(want: Want) {\\n    let uri: string | undefined = want?.uri;\\n    if (uri) {\\n      // 开发者根据解析的uri跳转至响应页面，例如需要跳转页面为\\\"pages/Access\\\"\\n      let status: router.RouterState = router.getState();\\n      if (status && status.name !== 'Access' && uri) {\\n        // 根据uri参数做业务处理\\n        router.pushUrl({\\n          url: 'pages/Access'\\n        });\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "处理接收到的码值，完成应用内页面跳转逻辑。 ",
        "import_module": null,
        "parent": "<li>处理接收到的码值，完成应用内页面跳转逻辑。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scan-directservice.html"
    },
    {
        "id": 525,
        "pre": "\\\"devDependencies\\\": {\\n    \\\"@ohos/hamock\\\": \\\"1.0.0\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "使用前提",
        "parent_text": "使用前提使用Hamock在预览场景模拟，需要在工程或模块的oh-package.json5中添加该依赖，然后重新同步工程。  ",
        "import_module": "\\\"devDependencies\\\": {\\n    \\\"@ohos/hamock\\\": \\\"1.0.0\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section62018177237\\\"'><a name='\\\"section62018177237\\\"'></a><a name='\\\"section62018177237\\\"'></a><h4>使用前提</h4><p id='\\\"ZH-CN_TOPIC_0000002166808096__p41641014133320\\\"'>使用Hamock在预览场景模拟，需要在工程或模块的oh-package.json5中添加该依赖，然后重新同步工程。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-mock.html"
    },
    {
        "id": 526,
        "pre": "import { MockKit, when, MockSetup } from '@ohos/hamock';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "在ArkTS页面代码中引入Hamock。 ",
        "import_module": "import { MockKit, when, MockSetup } from '@ohos/hamock';",
        "parent": "<li id='\\\"li14359712205114\\\"'><span>在ArkTS页面代码中引入Hamock。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-mock.html"
    },
    {
        "id": 527,
        "pre": "import { MockSetup } from '@ohos/hamock';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "在ArkTS页面代码中引入Hamock。 ",
        "import_module": "import { MockSetup } from '@ohos/hamock';",
        "parent": "<li id='\\\"li20197114814513\\\"'><span>在ArkTS页面代码中引入Hamock。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-mock.html"
    },
    {
        "id": 528,
        "pre": "import MeasureText from '@ohos.measure'\\n\\n// 类的mock使用继承(extends)的方式实现\\nclass MockMeasureText extends MeasureText {\\n  // 定义mock实现\\n  static measureText(): number {\\n    console.log('Return value of the mock measureText function')\\n    return 100;\\n  }\\n};\\n\\nexport default MockMeasureText;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在src/mock目录下新建一个ArkTS文件，在这个文件内定义目标Module的Mock实现。  用户在对类定义Mock的实现时，需要使用继承(extends)的方式实现。目标模块与Mock实现代码是⼀对⼀的关系。对同⼀个模块，只支持有⼀份Mock实现代码。预览运行时所有页面import该模块都将指向为Mock实现代码。   ",
        "import_module": "import { MockSetup } from '@ohos/hamock';",
        "parent": "<li id='\\\"li549981435312\\\"'><span>在src/mock目录下新建一个ArkTS文件，在这个文件内定义目标Module的Mock实现。</span><p></p> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808096__p632721219540\\\"'><div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808096__note112842094542\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180427.54670387653804908490898432185251:50001231000000:2800:6C939196255D51159656E29A8E3638D1F18EF39E69849FE50965265646DCBE43.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ul id='\\\"ZH-CN_TOPIC_0000002166808096__ul67089100544\\\"'><li id='\\\"li1920975010228\\\"'>用户在对类定义Mock的实现时，需要使用继承(extends)的方式实现。</li><li id='\\\"li27081610145411\\\"'>目标模块与Mock实现代码是⼀对⼀的关系。对同⼀个模块，只支持有⼀份Mock实现代码。预览运行时所有页面import该模块都将指向为Mock实现代码。</li></ul> </div></div> </div> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-mock.html"
    },
    {
        "id": 529,
        "pre": "// import local module\\nimport LibDefaultExport from '../../../main/ets/utils/CommonUtils'; // get origin default export\\nimport { methodA, ObjectB } from '../../../main/ets/utils/CommonUtils'; // get origin export on demand\\n\\nclass DefaultExportMock extends LibDefaultExport {\\n  // 定义mock实现\\n  public static getName(): String {\\n    return \\\"Mocked Name\\\";\\n  }\\n};\\n\\nexport {\\n  methodA,\\n  ObjectB,\\n}\\n\\nexport default DefaultExportMock;",
        "type": "Reference",
        "function_call": "new Object()",
        "function_name": null,
        "parent_text": "在src/mock目录下新建一个ArkTS文件，在这个文件内定义目标Module的Mock实现。 其中CommonUtils.ets文件示例如下： export default class CommonUtils {\\n  public static getName(): String {\\n    return \\\"origin name\\\";\\n  }\\n\\n  public static getTitle(): String {\\n    return \\\"origin title\\\";\\n  }\\n}\\n\\nexport const methodA = (): string => {\\n  return \\\"methodA\\\"\\n}\\n\\nexport const ObjectB: Object = new Object();  本地Module的Mock仅支持src/main/ets目录下的ArkTS或TS文件。   ",
        "import_module": "import { MockSetup } from '@ohos/hamock';",
        "parent": "<li id='\\\"li1641671145510\\\"'><span>在src/mock目录下新建一个ArkTS文件，在这个文件内定义目标Module的Mock实现。</span><p></p> <p id='\\\"ZH-CN_TOPIC_0000002166808096__p10417191115516\\\"'>其中CommonUtils.ets文件示例如下：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808096__screen1226898397\\\"'>export default class CommonUtils {\\n  public static getName(): String {\\n    return \\\"origin name\\\";\\n  }\\n\\n  public static getTitle(): String {\\n    return \\\"origin title\\\";\\n  }\\n}\\n\\nexport const methodA = (): string =&gt; {\\n  return \\\"methodA\\\"\\n}\\n\\nexport const ObjectB: Object = new Object();</pre> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808096__p14721752163811\\\"'><div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808096__note20164101194514\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180428.49307400524457293666453223794503:50001231000000:2800:E095D1B5638C3E222806E28192A33E252DF7D7656A40081C3377A584618DAC7D.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808096__p1816519113450\\\"'>本地Module的Mock仅支持src/main/ets目录下的ArkTS或TS文件。</p> </div></div> </div> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-previewer-mock.html"
    },
    {
        "id": 530,
        "pre": "import { advertising } from '@kit.NearLinkKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/nearlink-send-advertising.html"
    },
    {
        "id": 531,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unnecessary-type-arguments\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-type-arguments.html"
    },
    {
        "id": 532,
        "pre": "function f<T = number>(para: T): void {\\n  console.info(`${para as number}`);\\n}\\nf(Number.MAX_VALUE);\\nf<string>('hello');\\n\\nfunction g<T = number, U = string>(para1: T, para2?: U) {\\n  if (para2 !== undefined) {\\n    console.info(`${para2 as string}`);\\n  }\\n  console.info(`${para1 as number}`);\\n}\\ng<string>('para1', 'para2');\\ng<number, number>(Number.MAX_VALUE);\\n\\nclass C<T = number> {\\n  public name: T;\\n\\n  public constructor(name: T) {\\n    this.name = name;\\n  }\\n}\\nnew C(Number.MAX_VALUE);\\nnew C<string>('hello');",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-type-arguments.html"
    },
    {
        "id": 533,
        "pre": "function f<T = number>(para: T): void {\\n  console.info(`${para as number}`);\\n}\\n// 参数类型默认是number，直接使用f()即可\\nf<number>(Number.MAX_VALUE);\\n\\nfunction g<T = number, U = string>(para1: T, para2?: U) {\\n  if (para2 !== undefined) {\\n    console.info(`${para2 as string}`);\\n  }\\n  console.info(`${para1 as number}`);\\n}\\n// 第二个参数类型默认是string，直接使用g<string>()即可\\ng<string, string>('hello');\\n\\nclass C<T = number> {\\n  public meth(para: T): void {\\n    console.info(`${para as number}`);\\n  }\\n}\\n// 参数类型默认是number，直接使用new C()即可\\nnew C<number>();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-type-arguments.html"
    },
    {
        "id": 534,
        "pre": "{\\n  \\\"dist-tags\\\": { \\\"latest\\\": \\\"1.2.2\\\", \\\"release\\\": \\\"1.2.0\\\" },\\n  \\\"versions\\\": [\\n    \\\"1.2.2\\\",\\n    \\\"1.2.1\\\",\\n    \\\"1.2.0\\\",\\n    \\\"1.1.2\\\",\\n    \\\"1.1.1\\\",\\n    \\\"1.0.0\\\",\\n    \\\"0.4.1\\\",\\n    \\\"0.4.0\\\",\\n    \\\"0.2.0\\\"\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例",
        "parent_text": "示例若当前三方库是 APP，且它的依赖项为：dep1 ( dep2, ...)，dep1 已发布的版本有：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"zh-cn_topic_0000001792216409_示例\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"zh-cn_topic_0000001792216409_%E7%A4%BA%E4%BE%8B\\\"'></a><h4>示例</h4><p id='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_p625691069204137\\\"'>若当前三方库是 APP，且它的依赖项为：dep1 ( dep2, ...)，dep1 已发布的版本有：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-update.html"
    },
    {
        "id": 535,
        "pre": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"^1.1.1\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]^ 依赖项",
        "parent_text": "[h2]^ 依赖项使用^符号会更新到版本 x.y.z 中 y 和 z 的最新版本。如果 APP 中 oh-package.json5 文件中 dep1 的版本号为：  ohpm update 则安装 dep1@1.2.2，因为最新版本指向 1.2.2，且1.2.2 满足 ^1.1.1。 ",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"^1.1.1\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"zh-cn_topic_0000001792216409_-依赖项\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_-%E4%BE%9D%E8%B5%96%E9%A1%B9\\\"'></a><a name='\\\"zh-cn_topic_0000001792216409_-%E4%BE%9D%E8%B5%96%E9%A1%B9\\\"'></a><h4>[h2]^ 依赖项</h4><p id='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_p1651059001204137\\\"'>使用^符号会更新到版本 x.y.z 中 y 和 z 的最新版本。如果 APP 中 oh-package.json5 文件中 dep1 的版本号为：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_p1663034344204137\\\"'>ohpm update 则安装 dep1@1.2.2，因为最新版本指向 1.2.2，且1.2.2 满足 ^1.1.1。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-update.html"
    },
    {
        "id": 536,
        "pre": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"~1.1.1\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]~ 依赖项",
        "parent_text": "[h2]~ 依赖项使用~符号会更新到版本 x.y.z 中 z 的最新版本。如果 APP 中 oh-package.json5 文件中 dep1 的版本号为：  ohpm update 则安装 dep1@1.1.2，尽管最新版本指向 1.2.2，但 1.2.2 不满足 ~1.1.1（版本号须 1.1.1 ≤ version < 1.2.0），所以 ~1.1.1 使用满足最高排序版本，即1.1.2 ，进行更新。 ",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"~1.1.1\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"zh-cn_topic_0000001792216409_-依赖项-1\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_-%E4%BE%9D%E8%B5%96%E9%A1%B9-1\\\"'></a><a name='\\\"zh-cn_topic_0000001792216409_-%E4%BE%9D%E8%B5%96%E9%A1%B9-1\\\"'></a><h4>[h2]~ 依赖项</h4><p id='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_p1977551168204137\\\"'>使用~符号会更新到版本 x.y.z 中 z 的最新版本。如果 APP 中 oh-package.json5 文件中 dep1 的版本号为：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_p49139183204137\\\"'>ohpm update 则安装 dep1@1.1.2，尽管最新版本指向 1.2.2，但 1.2.2 不满足 ~1.1.1（版本号须 1.1.1 ≤ version &lt; 1.2.0），所以 ~1.1.1 使用满足最高排序版本，即1.1.2 ，进行更新。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-update.html"
    },
    {
        "id": 537,
        "pre": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"tag:release\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]tag 依赖项",
        "parent_text": "[h2]tag 依赖项使用 tag 会更新到 tag 对应的版本。如果 APP 中 oh-package.json5 文件中 dep1 的版本号为：  如果此时 release 标签对应版本被变更为 1.2.2，ohpm update --tag-filter ^r 则会将 dep1@1.2.0 更新为 dep1@1.2.2，因为 dep1 是通过 release 标签引入，release 符合 --tag-filter 指定的 ^r 正则表达式，所以会重新获取 release 标签对应的版本 1.2.2。 ",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"tag:release\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1632722911401\\\"'><a name='\\\"section1632722911401\\\"'></a><a name='\\\"section1632722911401\\\"'></a><h4>[h2]tag 依赖项</h4><p id='\\\"ZH-CN_TOPIC_0000002166648760__p3327529154015\\\"'>使用 tag 会更新到 tag 对应的版本。如果 APP 中 oh-package.json5 文件中 dep1 的版本号为：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648760__p14327729164012\\\"'>如果此时 release 标签对应版本被变更为 1.2.2，ohpm update --tag-filter ^r 则会将 dep1@1.2.0 更新为 dep1@1.2.2，因为 dep1 是通过 release 标签引入，release 符合 --tag-filter 指定的 ^r 正则表达式，所以会重新获取 release 标签对应的版本 1.2.2。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-update.html"
    },
    {
        "id": 538,
        "pre": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"^0.2.0\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "如果 APP 中 dep1 依赖版本号低于 1.0.0 且带有 ^，例如：  ohpm update 则安装 dep1@0.2.0，因为没有其他版本满足 ^0.2.0。 ",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"dep1\\\": \\\"^0.2.0\\\"\\n}",
        "parent": "<li id='\\\"zh-cn_topic_0000001792216409_li28468478204137\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_p2056426604204137\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_li28468478204137\\\"'></a><a name='\\\"zh-cn_topic_0000001792216409_li28468478204137\\\"'></a>如果 APP 中 dep1 依赖版本号低于 1.0.0 且带有 ^，例如：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648760__zh-cn_topic_0000001792216409_p2100656229204137\\\"'>ohpm update 则安装 dep1@0.2.0，因为没有其他版本满足 ^0.2.0。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-update.html"
    },
    {
        "id": 539,
        "pre": "import { hilog } from \\\"@kit.PerformanceAnalysisKit\\\";\\nimport { urpc } from \\\"@kit.RemoteCommunicationKit\\\";",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块 ",
        "import_module": "import { hilog } from \\\"@kit.PerformanceAnalysisKit\\\";\\nimport { urpc } from \\\"@kit.RemoteCommunicationKit\\\";",
        "parent": "<li><span>导入模块</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-urpccall.html"
    },
    {
        "id": 540,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/no-high-loaded-frame-rate-range\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-high-loaded-frame-rate-range.html"
    },
    {
        "id": 541,
        "pre": "import { displaySync } from '@kit.ArkGraphics2D';\\nlet sync = displaySync.create();\\nsync.setExpectedFrameRateRange({\\n  expected: 60,\\n  min: 45,\\n  max: 60,\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-high-loaded-frame-rate-range.html"
    },
    {
        "id": 542,
        "pre": "import { displaySync } from '@kit.ArkGraphics2D';\\nlet sync = displaySync.create();\\nsync.setExpectedFrameRateRange({\\n  expected: 120,\\n  min: 120,\\n  max: 120,\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-high-loaded-frame-rate-range.html"
    },
    {
        "id": 543,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-misused-new\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-misused-new.html"
    },
    {
        "id": 544,
        "pre": "export declare class C {\\n  public name: string;\\n\\n  public constructor();\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-misused-new.html"
    },
    {
        "id": 545,
        "pre": "export declare class C {\\n  // 应该定义为constructor(): C\\n  public new(): C;\\n}\\n\\nexport interface I {\\n  // 不应该定义constructor\\n  constructor(): void;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-misused-new.html"
    },
    {
        "id": 546,
        "pre": "function add(x: string, y: string): string {\\n  let z: string = `${x} ${y}`;\\n  return z;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]函数声明",
        "parent_text": "  [h2]函数声明 函数声明引入一个函数，包含其名称、参数列表、返回类型和函数体。 以下示例是一个简单的函数，包含两个string类型的参数，返回类型为string：  在函数声明中，必须为每个参数标记类型。如果参数为可选参数，那么允许在调用函数时省略该参数。函数的最后一个参数可以是rest参数。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"函数声明\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\\\"'></a> <h4>[h2]函数声明</h4> <p>函数声明引入一个函数，包含其名称、参数列表、返回类型和函数体。</p> <p>以下示例是一个简单的函数，包含两个string类型的参数，返回类型为string：</p>  <p>在函数声明中，必须为每个参数标记类型。如果参数为可选参数，那么允许在调用函数时省略该参数。函数的最后一个参数可以是rest参数。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 547,
        "pre": "function hello(name?: string) {\\n  if (name == undefined) {\\n    console.log('Hello!');\\n  } else {\\n    console.log(`Hello, ${name}!`);\\n  }\\n}",
        "type": "Reference",
        "function_call": "function multiply(n: number, coeff: number = 2): number",
        "function_name": "[h2]可选参数",
        "parent_text": "  [h2]可选参数 可选参数的格式可为name?: Type。  可选参数的另一种形式为设置的参数默认值。如果在函数调用中这个参数被省略了，则会使用此参数的默认值作为实参。 function multiply(n: number, coeff: number = 2): number {\\n  return n * coeff;\\n}\\nmultiply(2);  // 返回2*2\\nmultiply(2, 3); // 返回2*3 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"可选参数\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0\\\"'></a><a name='\\\"%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0\\\"'></a> <h4>[h2]可选参数</h4> <p>可选参数的格式可为name?: Type。</p>  <p>可选参数的另一种形式为设置的参数默认值。如果在函数调用中这个参数被省略了，则会使用此参数的默认值作为实参。</p> <pre class='\\\"typescript\\\"'>function multiply(n: number, coeff: number = 2): number {\\n  return n * coeff;\\n}\\nmultiply(2);  // 返回2*2\\nmultiply(2, 3); // 返回2*3</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 548,
        "pre": "function sum(...numbers: number[]): number {\\n  let res = 0;\\n  for (let n of numbers)\\n    res += n;\\n  return res;\\n}\\n\\nsum(); // 返回0\\nsum(1, 2, 3); // 返回6",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]Rest参数",
        "parent_text": "  [h2]Rest参数 函数的最后一个参数可以是rest参数。rest参数的格式为...restArgs。rest参数允许函数接收一个由剩余实参组成的数组，用于处理不定数量的参数输入。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"rest参数\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__rest%E5%8F%82%E6%95%B0\\\"'></a><a name='\\\"rest%E5%8F%82%E6%95%B0\\\"'></a> <h4>[h2]Rest参数</h4> <p>函数的最后一个参数可以是rest参数。rest参数的格式为...restArgs。rest参数允许函数接收一个由剩余实参组成的数组，用于处理不定数量的参数输入。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 549,
        "pre": "// 显式指定返回类型\\nfunction foo(): string { return 'foo'; }\\n\\n// 推断返回类型为string\\nfunction goo() { return 'goo'; }",
        "type": "Reference",
        "function_call": "nfunction hi2(): void",
        "function_name": "[h2]返回类型",
        "parent_text": "  [h2]返回类型 如果可以从函数体内推断出函数返回类型，则可在函数声明中省略标注返回类型。  不需要返回值的函数的返回类型可以显式指定为void或省略标注。这类函数不需要返回语句。 以下示例中两种函数声明方式都是有效的： function hi1() { console.log('hi'); }\\nfunction hi2(): void { console.log('hi'); } ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"返回类型\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B\\\"'></a> <h4>[h2]返回类型</h4> <p>如果可以从函数体内推断出函数返回类型，则可在函数声明中省略标注返回类型。</p>  <p>不需要返回值的函数的返回类型可以显式指定为void或省略标注。这类函数不需要返回语句。</p> <p>以下示例中两种函数声明方式都是有效的：</p> <pre class='\\\"typescript\\\"'>function hi1() { console.log('hi'); }\\nfunction hi2(): void { console.log('hi'); }</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 550,
        "pre": "function join(x: string, y: string): string {\\n  let z: string = `${x} ${y}`;\\n  return z;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]函数调用",
        "parent_text": "  [h2]函数调用 调用函数以执行其函数体，实参值会赋值给函数的形参。 如果函数定义如下：  则此函数的调用需要包含两个string类型的参数： let x = join('hello', 'world');\\nconsole.log(x); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"函数调用\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\\\"'></a> <h4>[h2]函数调用</h4> <p>调用函数以执行其函数体，实参值会赋值给函数的形参。</p> <p>如果函数定义如下：</p>  <p>则此函数的调用需要包含两个string类型的参数：</p> <pre class='\\\"typescript\\\"'>let x = join('hello', 'world');\\nconsole.log(x);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 551,
        "pre": "type trigFunc = (x: number) => number // 这是一个函数类型\\n\\nfunction do_action(f: trigFunc) {\\n  f(3.141592653589); // 调用函数\\n}\\n\\ndo_action(Math.sin); // 将函数作为参数传入",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]函数类型",
        "parent_text": "  [h2]函数类型 函数类型通常用于定义回调：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"函数类型\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\\\"'></a> <h4>[h2]函数类型</h4> <p>函数类型通常用于定义回调：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 552,
        "pre": "let sum = (x: number, y: number): number => {\\n  return x + y;\\n}",
        "type": "Reference",
        "function_call": "nlet sum2 = (x: number, y: number)",
        "function_name": "[h2]箭头函数（又名Lambda函数）",
        "parent_text": "  [h2]箭头函数（又名Lambda函数） 函数可以定义为箭头函数，例如：  箭头函数的返回类型可以省略；省略时，返回类型通过函数体推断。 表达式可以指定为箭头函数，使表达更简短，因此以下两种表达方式是等价的： let sum1 = (x: number, y: number) => { return x + y; }\\nlet sum2 = (x: number, y: number) => x + y ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"箭头函数又名lambda函数\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%8F%88%E5%90%8Dlambda%E5%87%BD%E6%95%B0\\\"'></a><a name='\\\"%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%8F%88%E5%90%8Dlambda%E5%87%BD%E6%95%B0\\\"'></a> <h4>[h2]箭头函数（又名Lambda函数）</h4> <p>函数可以定义为箭头函数，例如：</p>  <p>箭头函数的返回类型可以省略；省略时，返回类型通过函数体推断。</p> <p>表达式可以指定为箭头函数，使表达更简短，因此以下两种表达方式是等价的：</p> <pre class='\\\"typescript\\\"'>let sum1 = (x: number, y: number) =&gt; { return x + y; }\\nlet sum2 = (x: number, y: number) =&gt; x + y</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 553,
        "pre": "function f(): () => number {\\n  let count = 0;\\n  let g = (): number => { count++; return count; };\\n  return g;\\n}\\n\\nlet z = f();\\nz(); // 返回：1\\nz(); // 返回：2",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]闭包",
        "parent_text": "  [h2]闭包 闭包是由函数及声明该函数的环境组合而成的。该环境包含了这个闭包创建时作用域内的任何局部变量。 在下例中，f函数返回了一个闭包，它捕获了count变量，每次调用z，count的值会被保留并递增。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"闭包\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E9%97%AD%E5%8C%85\\\"'></a><a name='\\\"%E9%97%AD%E5%8C%85\\\"'></a> <h4>[h2]闭包</h4> <p>闭包是由函数及声明该函数的环境组合而成的。该环境包含了这个闭包创建时作用域内的任何局部变量。</p> <p>在下例中，f函数返回了一个闭包，它捕获了count变量，每次调用z，count的值会被保留并递增。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 554,
        "pre": "function foo(x: number): void;            /* 第一个函数定义 */\\nfunction foo(x: string): void;            /* 第二个函数定义 */\\nfunction foo(x: number | string): void {  /* 函数实现 */\\n}\\n\\nfoo(123);     //  OK，使用第一个定义\\nfoo('aa'); // OK，使用第二个定义",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]函数重载",
        "parent_text": "  [h2]函数重载 我们可以通过编写重载，指定函数的不同调用方式。具体方法为，为同一个函数写入多个同名但签名不同的函数头，函数实现紧随其后。  不允许重载函数有相同的名字以及参数列表，否则将会编译报错。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"函数重载\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\\\"'></a> <h4>[h2]函数重载</h4> <p>我们可以通过编写重载，指定函数的不同调用方式。具体方法为，为同一个函数写入多个同名但签名不同的函数头，函数实现紧随其后。</p>  <p>不允许重载函数有相同的名字以及参数列表，否则将会编译报错。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 555,
        "pre": "class Person {\\n  name: string = '';\\n  surname: string = '';\\n  constructor (n: string, sn: string) {\\n    this.name = n;\\n    this.surname = sn;\\n  }\\n  fullName(): string {\\n    return this.name + ' ' + this.surname;\\n  }\\n}",
        "type": "Reference",
        "function_call": "fullName()",
        "function_name": "类",
        "parent_text": "  类 类声明引入一个新类型，并定义其字段、方法和构造函数。 在以下示例中，定义了Person类，该类具有字段name和surname、构造函数和方法fullName：  定义类后，可以使用关键字new创建实例： let p = new Person('John', 'Smith');\\nconsole.log(p.fullName()); 或者，可以使用对象字面量创建实例： class Point {\\n  x: number = 0;\\n  y: number = 0;\\n}\\nlet p: Point = {x: 42, y: 42}; ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"类\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E7%B1%BB\\\"'></a><a name='\\\"%E7%B1%BB\\\"'></a> <h4>类</h4> <p>类声明引入一个新类型，并定义其字段、方法和构造函数。</p> <p>在以下示例中，定义了Person类，该类具有字段name和surname、构造函数和方法fullName：</p>  <p>定义类后，可以使用关键字new创建实例：</p> <pre class='\\\"typescript\\\"'>let p = new Person('John', 'Smith');\\nconsole.log(p.fullName());</pre> <p>或者，可以使用对象字面量创建实例：</p> <pre class='\\\"typescript\\\"'>class Point {\\n  x: number = 0;\\n  y: number = 0;\\n}\\nlet p: Point = {x: 42, y: 42};</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 556,
        "pre": "constructor ([parameters]) {\\n  // ...\\n}",
        "type": "Import",
        "function_call": "new Point()",
        "function_name": "[h2]构造函数",
        "parent_text": "  [h2]构造函数 类声明可以包含用于初始化对象状态的构造函数。 构造函数定义如下：  如果未定义构造函数，则会自动创建具有空参数列表的默认构造函数，例如： class Point {\\n  x: number = 0;\\n  y: number = 0;\\n}\\nlet p = new Point(); 在这种情况下，默认构造函数使用字段类型的默认值来初始化实例中的字段。 ",
        "import_module": "constructor ([parameters]) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"构造函数\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\\"'></a><a name='\\\"%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\\"'></a> <h4>[h2]构造函数</h4> <p>类声明可以包含用于初始化对象状态的构造函数。</p> <p>构造函数定义如下：</p>  <p>如果未定义构造函数，则会自动创建具有空参数列表的默认构造函数，例如：</p> <pre class='\\\"typescript\\\"'>class Point {\\n  x: number = 0;\\n  y: number = 0;\\n}\\nlet p = new Point();</pre> <p>在这种情况下，默认构造函数使用字段类型的默认值来初始化实例中的字段。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 557,
        "pre": "class C {\\n  n: number = 0;\\n  s: string = '';\\n}\\n\\nlet c: C = {n: 42, s: 'foo'};",
        "type": "Reference",
        "function_call": "nfunction bar(): C",
        "function_name": "[h2]对象字面量",
        "parent_text": "  [h2]对象字面量 对象字面量是一个表达式，可用于创建类实例并提供一些初始值。它在某些情况下更方便，可以用来代替new表达式。 对象字面量的表示方式是：封闭在花括号对({})中的'属性名：值'的列表。  ArkTS是静态类型语言，如上述示例所示，对象字面量只能在可以推导出该字面量类型的上下文中使用。其他正确的例子： class C {\\n  n: number = 0;\\n  s: string = '';\\n}\\n\\nfunction foo(c: C) {}\\n\\nlet c: C\\n\\nc = {n: 42, s: 'foo'};  // 使用变量的类型\\nfoo({n: 42, s: 'foo'}); // 使用参数的类型\\n\\nfunction bar(): C {\\n  return {n: 42, s: 'foo'}; // 使用返回类型\\n} 也可以在数组元素类型或类字段类型中使用： class C {\\n  n: number = 0;\\n  s: string = '';\\n}\\nlet cc: C[] = [{n: 1, s: 'a'}, {n: 2, s: 'b'}]; ",
        "import_module": "constructor ([parameters]) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"对象字面量\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\\\"'></a><a name='\\\"%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\\\"'></a> <h4>[h2]对象字面量</h4> <p>对象字面量是一个表达式，可用于创建类实例并提供一些初始值。它在某些情况下更方便，可以用来代替new表达式。</p> <p>对象字面量的表示方式是：封闭在花括号对({})中的'属性名：值'的列表。</p>  <p>ArkTS是静态类型语言，如上述示例所示，对象字面量只能在可以推导出该字面量类型的上下文中使用。其他正确的例子：</p> <pre class='\\\"typescript\\\"'>class C {\\n  n: number = 0;\\n  s: string = '';\\n}\\n\\nfunction foo(c: C) {}\\n\\nlet c: C\\n\\nc = {n: 42, s: 'foo'};  // 使用变量的类型\\nfoo({n: 42, s: 'foo'}); // 使用参数的类型\\n\\nfunction bar(): C {\\n  return {n: 42, s: 'foo'}; // 使用返回类型\\n}</pre> <p>也可以在数组元素类型或类字段类型中使用：</p> <pre class='\\\"typescript\\\"'>class C {\\n  n: number = 0;\\n  s: string = '';\\n}\\nlet cc: C[] = [{n: 1, s: 'a'}, {n: 2, s: 'b'}];</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 558,
        "pre": "abstract class X {\\n  field: number;\\n  constructor(p: number) {\\n    this.field = p; \\n  }\\n}\\n\\nlet x = new X(666)  //编译时错误：不能创建抽象类的具体实例",
        "type": "Reference",
        "function_call": "constructor(p: number)",
        "function_name": "[h2]抽象类",
        "parent_text": "  [h2]抽象类 带有修饰符abstract的类称为抽象类。抽象类可用于表示一组更具体的概念所共有的概念。 如果尝试创建抽象类的实例，则会发生编译时的错误：  抽象类的子类可以是抽象类也可以是非抽象类。抽象父类的非抽象子类可以实例化。因此，执行抽象类的构造函数和该类非静态字段的字段初始化器： abstract class Base {\\n  field: number;\\n  constructor(p: number) { \\n    this.field = p; \\n  }\\n}\\n\\nclass Derived extends Base {\\n  constructor(p: number) {\\n    super(p); \\n  }\\n} ",
        "import_module": "constructor ([parameters]) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"抽象类\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%8A%BD%E8%B1%A1%E7%B1%BB\\\"'></a><a name='\\\"%E6%8A%BD%E8%B1%A1%E7%B1%BB\\\"'></a> <h4>[h2]抽象类</h4> <p>带有修饰符abstract的类称为抽象类。抽象类可用于表示一组更具体的概念所共有的概念。</p> <p>如果尝试创建抽象类的实例，则会发生编译时的错误：</p>  <p>抽象类的子类可以是抽象类也可以是非抽象类。抽象父类的非抽象子类可以实例化。因此，执行抽象类的构造函数和该类非静态字段的字段初始化器：</p> <pre class='\\\"typescript\\\"'>abstract class Base {\\n  field: number;\\n  constructor(p: number) { \\n    this.field = p; \\n  }\\n}\\n\\nclass Derived extends Base {\\n  constructor(p: number) {\\n    super(p); \\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 559,
        "pre": "interface Style {\\n  color: string; // 属性\\n}\\ninterface AreaSize {\\n  calculateAreaSize(): number; // 方法的声明\\n  someMethod(): void;     // 方法的声明\\n}",
        "type": "Reference",
        "function_call": "someMethod()",
        "function_name": "接口",
        "parent_text": "  接口 接口声明引入新类型。接口是定义代码协定的常见方式。 任何一个类的实例只要实现了特定接口，就可以通过该接口实现多态。 接口通常包含属性和方法的声明 示例：  实现接口的类示例： // 接口：\\ninterface AreaSize {\\n  calculateAreaSize(): number; // 方法的声明\\n  someMethod(): void;     // 方法的声明\\n}\\n\\n// 实现：\\nclass RectangleSize implements AreaSize {\\n  private width: number = 0;\\n  private height: number = 0;\\n  someMethod(): void {\\n    console.log('someMethod called');\\n  }\\n  calculateAreaSize(): number {\\n    this.someMethod(); // 调用另一个方法并返回结果\\n    return this.width * this.height;\\n  }\\n} ",
        "import_module": "constructor ([parameters]) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"接口\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%8E%A5%E5%8F%A3\\\"'></a><a name='\\\"%E6%8E%A5%E5%8F%A3\\\"'></a> <h4>接口</h4> <p>接口声明引入新类型。接口是定义代码协定的常见方式。</p> <p>任何一个类的实例只要实现了特定接口，就可以通过该接口实现多态。</p> <p>接口通常包含属性和方法的声明</p> <p>示例：</p>  <p>实现接口的类示例：</p> <pre class='\\\"typescript\\\"'>// 接口：\\ninterface AreaSize {\\n  calculateAreaSize(): number; // 方法的声明\\n  someMethod(): void;     // 方法的声明\\n}\\n\\n// 实现：\\nclass RectangleSize implements AreaSize {\\n  private width: number = 0;\\n  private height: number = 0;\\n  someMethod(): void {\\n    console.log('someMethod called');\\n  }\\n  calculateAreaSize(): number {\\n    this.someMethod(); // 调用另一个方法并返回结果\\n    return this.width * this.height;\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 560,
        "pre": "interface Style {\\n  color: string;\\n}",
        "type": "Import",
        "function_call": "set color(x: string)",
        "function_name": "[h2]接口属性",
        "parent_text": "  [h2]接口属性 接口属性可以是字段、getter、setter或getter和setter组合的形式。 属性字段只是getter/setter对的便捷写法。以下表达方式是等价的：  interface Style {\\n  get color(): string;\\n  set color(x: string);\\n} 实现接口的类也可以使用以下两种方式： interface Style {\\n  color: string;\\n}\\n\\nclass StyledRectangle implements Style {\\n  color: string = '';\\n} interface Style {\\n  color: string;\\n}\\n\\nclass StyledRectangle implements Style {\\n  private _color: string = '';\\n  get color(): string { return this._color; }\\n  set color(x: string) { this._color = x; }\\n} ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"接口属性\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%8E%A5%E5%8F%A3%E5%B1%9E%E6%80%A7\\\"'></a><a name='\\\"%E6%8E%A5%E5%8F%A3%E5%B1%9E%E6%80%A7\\\"'></a> <h4>[h2]接口属性</h4> <p>接口属性可以是字段、getter、setter或getter和setter组合的形式。</p> <p>属性字段只是getter/setter对的便捷写法。以下表达方式是等价的：</p>  <pre class='\\\"typescript\\\"'>interface Style {\\n  get color(): string;\\n  set color(x: string);\\n}</pre> <p>实现接口的类也可以使用以下两种方式：</p> <pre class='\\\"typescript\\\"'>interface Style {\\n  color: string;\\n}\\n\\nclass StyledRectangle implements Style {\\n  color: string = '';\\n}</pre> <pre class='\\\"typescript\\\"'>interface Style {\\n  color: string;\\n}\\n\\nclass StyledRectangle implements Style {\\n  private _color: string = '';\\n  get color(): string { return this._color; }\\n  set color(x: string) { this._color = x; }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 561,
        "pre": "interface Style {\\n  color: string;\\n}\\n\\ninterface ExtendedStyle extends Style {\\n  width: number;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]接口继承",
        "parent_text": "  [h2]接口继承 接口可以继承其他接口，如下面的示例所示：  继承接口包含被继承接口的所有属性和方法，还可以添加自己的属性和方法。 ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"接口继承\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF\\\"'></a><a name='\\\"%E6%8E%A5%E5%8F%A3%E7%BB%A7%E6%89%BF\\\"'></a> <h4>[h2]接口继承</h4> <p>接口可以继承其他接口，如下面的示例所示：</p>  <p>继承接口包含被继承接口的所有属性和方法，还可以添加自己的属性和方法。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 562,
        "pre": "class CustomStack<Element> {\\n  public push(e: Element):void {\\n    // ...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]泛型类和接口",
        "parent_text": "  [h2]泛型类和接口 类和接口可以定义为泛型，将参数添加到类型定义中，如以下示例中的类型参数Element：  要使用类型CustomStack，必须为每个类型参数指定类型实参： let s = new CustomStack<string>();\\ns.push('hello'); 编译器在使用泛型类型和函数时会确保类型安全。参见以下示例： let s = new CustomStack<string>();\\ns.push(55); // 将会产生编译时错误 ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"泛型类和接口\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3\\\"'></a><a name='\\\"%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3\\\"'></a> <h4>[h2]泛型类和接口</h4> <p>类和接口可以定义为泛型，将参数添加到类型定义中，如以下示例中的类型参数Element：</p>  <p>要使用类型CustomStack，必须为每个类型参数指定类型实参：</p> <pre class='\\\"typescript\\\"'>let s = new CustomStack&lt;string&gt;();\\ns.push('hello');</pre> <p>编译器在使用泛型类型和函数时会确保类型安全。参见以下示例：</p> <pre class='\\\"typescript\\\"'>let s = new CustomStack&lt;string&gt;();\\ns.push(55); // 将会产生编译时错误</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 563,
        "pre": "interface Hashable {\\n  hash(): number;\\n}\\nclass MyHashMap<Key extends Hashable, Value> {\\n  public set(k: Key, v: Value) {\\n    let h = k.hash();\\n    // ...其他代码...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]泛型约束",
        "parent_text": "  [h2]泛型约束 泛型类型的类型参数可以被限制只能取某些特定的值。例如，MyHashMap<Key, Value>这个类中的Key类型参数必须具有hash方法。  在上面的例子中，Key类型扩展了Hashable，Hashable接口的所有方法都可以为key调用。 ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"泛型约束\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9F\\\"'></a><a name='\\\"%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9F\\\"'></a> <h4>[h2]泛型约束</h4> <p>泛型类型的类型参数可以被限制只能取某些特定的值。例如，MyHashMap&lt;Key, Value&gt;这个类中的Key类型参数必须具有hash方法。</p>  <p>在上面的例子中，Key类型扩展了Hashable，Hashable接口的所有方法都可以为key调用。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 564,
        "pre": "function last(x: number[]): number {\\n  return x[x.length - 1];\\n}\\nlast([1, 2, 3]); // 3",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]泛型函数",
        "parent_text": "  [h2]泛型函数 使用泛型函数可编写更通用的代码。比如返回数组最后一个元素的函数：  如果需要为任何数组定义相同的函数，使用类型参数将该函数定义为泛型： function last<T>(x: T[]): T {\\n  return x[x.length - 1];\\n} 现在，该函数可以与任何数组一起使用。 在函数调用中，类型实参可以显式或隐式设置： // 显式设置的类型实参\\nlast<string>(['aa', 'bb']);\\nlast<number>([1, 2, 3]);\\n\\n// 隐式设置的类型实参\\n// 编译器根据调用参数的类型来确定类型实参\\nlast([1, 2, 3]); ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"泛型函数\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0\\\"'></a><a name='\\\"%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0\\\"'></a> <h4>[h2]泛型函数</h4> <p>使用泛型函数可编写更通用的代码。比如返回数组最后一个元素的函数：</p>  <p>如果需要为任何数组定义相同的函数，使用类型参数将该函数定义为泛型：</p> <pre class='\\\"typescript\\\"'>function last&lt;T&gt;(x: T[]): T {\\n  return x[x.length - 1];\\n}</pre> <p>现在，该函数可以与任何数组一起使用。</p> <p>在函数调用中，类型实参可以显式或隐式设置：</p> <pre class='\\\"typescript\\\"'>// 显式设置的类型实参\\nlast&lt;string&gt;(['aa', 'bb']);\\nlast&lt;number&gt;([1, 2, 3]);\\n\\n// 隐式设置的类型实参\\n// 编译器根据调用参数的类型来确定类型实参\\nlast([1, 2, 3]);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 565,
        "pre": "class SomeType {}\\ninterface Interface <T1 = SomeType> { }\\nclass Base <T2 = SomeType> { }\\nclass Derived1 extends Base implements Interface { }\\n// Derived1在语义上等价于Derived2\\nclass Derived2 extends Base<SomeType> implements Interface<SomeType> { }\\n\\nfunction foo<T = number>(): T {\\n  // ...\\n}\\nfoo();\\n// 此函数在语义上等价于下面的调用\\nfoo<number>();",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]泛型默认值",
        "parent_text": "  [h2]泛型默认值 泛型类型的类型参数可以设置默认值。这样可以不指定实际的类型实参，而只使用泛型类型名称。下面的示例展示了类和函数的这一点。  ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"泛型默认值\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E6%B3%9B%E5%9E%8B%E9%BB%98%E8%AE%A4%E5%80%BC\\\"'></a><a name='\\\"%E6%B3%9B%E5%9E%8B%E9%BB%98%E8%AE%A4%E5%80%BC\\\"'></a> <h4>[h2]泛型默认值</h4> <p>泛型类型的类型参数可以设置默认值。这样可以不指定实际的类型实参，而只使用泛型类型名称。下面的示例展示了类和函数的这一点。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 566,
        "pre": "let x: number = null;    // 编译时错误\\nlet y: string = null;    // 编译时错误\\nlet z: number[] = null;  // 编译时错误",
        "type": "Reference",
        "function_call": null,
        "function_name": "空安全",
        "parent_text": "  空安全 默认情况下，ArkTS中的所有类型都是不可为空的，因此类型的值不能为空。这类似于TypeScript的严格空值检查模式（strictNullChecks），但规则更严格。 在下面的示例中，所有行都会导致编译时错误：  可以为空值的变量定义为联合类型T | null。 let x: number | null = null;\\nx = 1;    // ok\\nx = null; // ok\\nif (x != null) { /* do something */ } ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"空安全\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E7%A9%BA%E5%AE%89%E5%85%A8\\\"'></a><a name='\\\"%E7%A9%BA%E5%AE%89%E5%85%A8\\\"'></a> <h4>空安全</h4> <p>默认情况下，ArkTS中的所有类型都是不可为空的，因此类型的值不能为空。这类似于TypeScript的严格空值检查模式（strictNullChecks），但规则更严格。</p> <p>在下面的示例中，所有行都会导致编译时错误：</p>  <p>可以为空值的变量定义为联合类型T | null。</p> <pre class='\\\"typescript\\\"'>let x: number | null = null;\\nx = 1;    // ok\\nx = null; // ok\\nif (x != null) { /* do something */ }</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 567,
        "pre": "class A {\\n  value: number = 0;\\n}\\n\\nfunction foo(a: A | null) {\\n  a.value;   // 编译时错误：无法访问可空值的属性\\n  a!.value;  // 编译通过，如果运行时a的值非空，可以访问到a的属性；如果运行时a的值为空，则发生运行时异常\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]非空断言运算符",
        "parent_text": "  [h2]非空断言运算符 后缀运算符!可用于断言其操作数为非空。 应用于可空类型的值时，它的编译时类型变为非空类型。例如，类型将从T | null更改为T：  ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"非空断言运算符\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E9%9D%9E%E7%A9%BA%E6%96%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><a name='\\\"%E9%9D%9E%E7%A9%BA%E6%96%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a> <h4>[h2]非空断言运算符</h4> <p>后缀运算符!可用于断言其操作数为非空。</p> <p>应用于可空类型的值时，它的编译时类型变为非空类型。例如，类型将从T | null更改为T：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 568,
        "pre": "class Person {\\n  // ...\\n  nick: string | null = null;\\n  getNick(): string {\\n    return this.nick ?? '';\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]空值合并运算符",
        "parent_text": "  [h2]空值合并运算符 空值合并二元运算符??用于检查左侧表达式的求值是否等于null或者undefined。如果是，则表达式的结果为右侧表达式；否则，结果为左侧表达式。 换句话说，a ?? b等价于三元运算符(a != null && a != undefined) ? a : b。 在以下示例中，getNick方法如果设置了昵称，则返回昵称；否则，返回空字符串：  ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"空值合并运算符\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><a name='\\\"%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a> <h4>[h2]空值合并运算符</h4> <p>空值合并二元运算符??用于检查左侧表达式的求值是否等于null或者undefined。如果是，则表达式的结果为右侧表达式；否则，结果为左侧表达式。</p> <p>换句话说，a ?? b等价于三元运算符(a != null &amp;&amp; a != undefined) ? a : b。</p> <p>在以下示例中，getNick方法如果设置了昵称，则返回昵称；否则，返回空字符串：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 569,
        "pre": "class Person {\\n  nick: string | null = null;\\n  spouse?: Person\\n\\n  setSpouse(spouse: Person): void {\\n    this.spouse = spouse;\\n  }\\n\\n  getSpouseNick(): string | null | undefined {\\n    return this.spouse?.nick;\\n  }\\n\\n  constructor(nick: string) {\\n    this.nick = nick;\\n    this.spouse = undefined;\\n  }\\n}",
        "type": "Reference",
        "function_call": "constructor(nick: string)",
        "function_name": "[h2]可选链",
        "parent_text": "  [h2]可选链 在访问对象属性时，如果该属性是undefined或者null，可选链运算符会返回undefined。  说明：getSpouseNick的返回类型必须为string | null | undefined，因为该方法可能返回null或者undefined。 可选链可以任意长，可以包含任意数量的?.运算符。 在以下示例中，如果一个Person的实例有不为空的spouse属性，且spouse有不为空的nick属性，则输出spouse.nick。否则，输出undefined： class Person {\\n  nick: string | null = null;\\n  spouse?: Person;\\n\\n  constructor(nick: string) {\\n    this.nick = nick;\\n    this.spouse = undefined;\\n  }\\n}\\n\\nlet p: Person = new Person('Alice');\\np.spouse?.nick; // undefined ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"可选链\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%8F%AF%E9%80%89%E9%93%BE\\\"'></a><a name='\\\"%E5%8F%AF%E9%80%89%E9%93%BE\\\"'></a> <h4>[h2]可选链</h4> <p>在访问对象属性时，如果该属性是undefined或者null，可选链运算符会返回undefined。</p>  <p><strong>说明</strong>：getSpouseNick的返回类型必须为string | null | undefined，因为该方法可能返回null或者undefined。</p> <p>可选链可以任意长，可以包含任意数量的?.运算符。</p> <p>在以下示例中，如果一个Person的实例有不为空的spouse属性，且spouse有不为空的nick属性，则输出spouse.nick。否则，输出undefined：</p> <pre class='\\\"typescript\\\"'>class Person {\\n  nick: string | null = null;\\n  spouse?: Person;\\n\\n  constructor(nick: string) {\\n    this.nick = nick;\\n    this.spouse = undefined;\\n  }\\n}\\n\\nlet p: Person = new Person('Alice');\\np.spouse?.nick; // undefined</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 570,
        "pre": "export class Point {\\n  x: number = 0;\\n  y: number = 0;\\n  constructor(x: number, y: number) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n}\\nexport let Origin = new Point(0, 0);\\nexport function Distance(p1: Point, p2: Point): number {\\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]导出",
        "parent_text": "  [h2]导出 可以使用关键字export导出顶层的声明。 未导出的声明名称被视为私有名称，只能在声明该名称的模块中使用。  ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"导出\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__%E5%AF%BC%E5%87%BA\\\"'></a><a name='\\\"%E5%AF%BC%E5%87%BA\\\"'></a> <h4>[h2]导出</h4> <p>可以使用关键字export导出顶层的声明。</p> <p>未导出的声明名称被视为私有名称，只能在声明该名称的模块中使用。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 571,
        "pre": "class A {\\n  count: string = 'a';\\n  m(i: string): void {\\n    this.count = i;\\n  }\\n}",
        "type": "Reference",
        "function_call": "nfunction foo(arg1: number)",
        "function_name": "[h2]this",
        "parent_text": "  [h2]this 关键字this只能在类的实例方法中使用。 示例  使用限制：  不支持this类型 不支持在函数和类的静态方法中使用this  示例 class A {\\n  n: number = 0;\\n  f1(arg1: this) {} // 编译时错误，不支持this类型\\n  static f2(arg1: number) {\\n    this.n = arg1;  // 编译时错误，不支持在类的静态方法中使用this\\n  }\\n}\\n\\nfunction foo(arg1: number) {\\n  this.n = i;       // 编译时错误，不支持在函数中使用this\\n} 关键字this的指向:  调用实例方法的对象 正在构造的对象  ",
        "import_module": "interface Style {\\n  color: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"this\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413025__this\\\"'></a><a name='\\\"this\\\"'></a> <h4>[h2]this</h4> <p>关键字this只能在类的实例方法中使用。</p> <p><strong>示例</strong></p>  <p>使用限制：</p> <ul> <li>不支持this类型</li> <li>不支持在函数和类的静态方法中使用this</li> </ul> <p><strong>示例</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  n: number = 0;\\n  f1(arg1: this) {} // 编译时错误，不支持this类型\\n  static f2(arg1: number) {\\n    this.n = arg1;  // 编译时错误，不支持在类的静态方法中使用this\\n  }\\n}\\n\\nfunction foo(arg1: number) {\\n  this.n = i;       // 编译时错误，不支持在函数中使用this\\n}</pre> <p>关键字this的指向:</p> <ul> <li>调用实例方法的对象</li> <li>正在构造的对象</li> </ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/introduction-to-arkts.html"
    },
    {
        "id": 572,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-samplepoint-manage.html"
    },
    {
        "id": 573,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-samplepoint-manage.html"
    },
    {
        "id": 574,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-samplepoint-manage.html"
    },
    {
        "id": 575,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-samplepoint-manage.html"
    },
    {
        "id": 576,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-samplepoint-manage.html"
    },
    {
        "id": 577,
        "pre": "//Module1和Module2配置了完全不同的设备，deviceType不相交。\\n//Module1\\n{\\n\\t\\\"deviceType\\\": [\\\"tv\\\", \\\"tablet\\\"]\\n}\\n//Module2\\n{\\n\\t\\\"deviceType\\\": [\\\"car\\\", \\\"router\\\"]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "校验设备类型deviceType。如果deviceType不相交，则校验通过。如果deviceType相交，继续校验distributionFilter。deviceType不相交是指两个Module的deviceType中配置了完全不同的设备，例如：  deviceType相交是指两个Module的deviceType中包含了相同的设备，例如： //Module1和Module2因为都包含\\\"tablet\\\"设备，导致deviceType相交。\\n//Module1\\n{\\n\\t\\\"deviceType\\\": [\\\"tv\\\", \\\"tablet\\\"]\\n}\\n//Module2\\n{\\n\\t\\\"deviceType\\\": [\\\"car\\\", \\\"tablet\\\"]\\n} ",
        "import_module": null,
        "parent": "<li id='\\\"li13383124895718\\\"'><span>校验设备类型deviceType。如果deviceType不相交，则校验通过。如果deviceType相交，继续校验distributionFilter。</span><p></p><p id='\\\"ZH-CN_TOPIC_0000002202174933__p57461024501\\\"'>deviceType不相交是指两个Module的deviceType中配置了完全不同的设备，例如：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202174933__p477115171620\\\"'>deviceType相交是指两个Module的deviceType中包含了相同的设备，例如：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174933__screen6631805580\\\"'>//Module1和Module2因为都包含\\\"tablet\\\"设备，导致deviceType相交。\\n//Module1\\n{\\n\\t\\\"deviceType\\\": [\\\"tv\\\", \\\"tablet\\\"]\\n}\\n//Module2\\n{\\n\\t\\\"deviceType\\\": [\\\"car\\\", \\\"tablet\\\"]\\n}</pre> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-verification-rule.html"
    },
    {
        "id": 578,
        "pre": "//Ability1和Ability2虽然名称相同，但由于其所属Module的deviceType不相交，所以可以区分两个Ability，校验通过。\\n//Ability1\\n{\\n    \\\"module\\\": {\\n        \\\"name\\\": \\\"module_sample1\\\",\\n        \\\"deviceType\\\": [\\\"tv\\\", \\\"tablet\\\"],\\n        \\\"abilities\\\": [\\n\\t{\\n\\t\\t\\\"name\\\": \\\"ability_sample\\\"\\n\\t}\\n        ]\\n    }\\n}\\n//Ability2\\n{\\n     \\\"module\\\": {\\n        \\\"name\\\": \\\"module_sample2\\\",\\n        \\\"deviceType\\\": [\\\"car\\\", \\\"router\\\"],\\n        \\\"abilities\\\": [\\n\\t{\\n\\t\\t\\\"name\\\": \\\"ability_sample\\\"\\n\\t}\\n        ]\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "校验Ability所属Module的deviceType。如果deviceType不相交，校验通过。如果deviceType相交，继续校验Ability所属Module的distributionFilter。例如，两个Ability的Name相同，但其所属Module的deviceType不相交，校验通过。  ",
        "import_module": null,
        "parent": "<li id='\\\"li156611557164313\\\"'><span>校验Ability所属Module的deviceType。如果deviceType不相交，校验通过。如果deviceType相交，继续校验Ability所属Module的distributionFilter。</span><p></p><p id='\\\"ZH-CN_TOPIC_0000002202174933__p177461721516\\\"'>例如，两个Ability的Name相同，但其所属Module的deviceType不相交，校验通过。</p>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-verification-rule.html"
    },
    {
        "id": 579,
        "pre": "//Entry类型Module1\\n{\\n    \\\"module\\\": {\\n        \\\"name\\\": \\\"module_sample1\\\",\\n        \\\"type\\\": \\\"entry\\\",\\n        \\\"deviceType\\\": [\\\"tablet\\\", \\\"wearable\\\"],\\n        \\\"metadata\\\": [\\n            {\\n                \\\"name\\\": \\\"distributionFilter_config\\\",\\n                \\\"resource\\\": \\\"$profile:distributionFilter_config1\\\"\\n            }\\n        ]\\n    }\\n}\\n//Module1的distributionFilter，distributionFilter_config1.json\\n{\\n    \\\"screenShape\\\":{\\n        \\\"policy\\\": \\\"include\\\",\\n        \\\"value\\\": [\\\"circle\\\", \\\"rect\\\"]\\n    }\\n}\\n//Feature类型Module2\\n{\\n     \\\"module\\\": {\\n        \\\"name\\\": \\\"module_sample2\\\",\\n        \\\"type\\\": \\\"feature\\\",\\n        \\\"deviceType\\\": [\\\"tablet\\\", \\\"wearable\\\"],\\n         \\\"metadata\\\": [\\n            {\\n                \\\"name\\\": \\\"distributionFilter_config\\\",\\n                \\\"resource\\\": \\\"$profile:distributionFilter_config2\\\"\\n            }\\n        ]\\n    }\\n}\\n//Module2的distributionFilter，distributionFilter_config2.json\\n{\\n    \\\"screenShape\\\":{\\n        \\\"policy\\\": \\\"include\\\",\\n        \\\"value\\\": [\\\"rect\\\"]\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "校验Feature类型的Module经过deviceType及distributionFilter指明的目标设备都存在Entry类型的Module。例如，Bundle中存在一个Entry类型Module1，其支持设备为tablet和wearable，其分发规则为circle和rect形状的屏幕，同时存在一个Feature类型的Module2，通过分发规则可知，其可以分发到rect形状的tablet和wearable设备上，而rect形状的tablet和wearable设备上存在Entry类型的Module1，校验通过。  ",
        "import_module": null,
        "parent": "<li id='\\\"li1496234383510\\\"'><span>校验Feature类型的Module经过deviceType及distributionFilter指明的目标设备都存在Entry类型的Module。</span><p></p><p id='\\\"ZH-CN_TOPIC_0000002202174933__p18798247142\\\"'>例如，Bundle中存在一个Entry类型Module1，其支持设备为tablet和wearable，其分发规则为circle和rect形状的屏幕，同时存在一个Feature类型的Module2，通过分发规则可知，其可以分发到rect形状的tablet和wearable设备上，而rect形状的tablet和wearable设备上存在Entry类型的Module1，校验通过。</p>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-verification-rule.html"
    },
    {
        "id": 580,
        "pre": "\\\"products\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"signingConfig\\\": \\\"default\\\", \\n    \\\"compileSdkVersion\\\": 11,    //指定OpenHarmony应用编译时的版本，当前以API 11为例\\n    \\\"compatibleSdkVersion\\\": 11, //指定OpenHarmony应用兼容的最低版本，当前以API 11为例\\n    \\\"runtimeOS\\\": \\\"OpenHarmony\\\",\\n  }\\n],",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在完成创建HarmonyOS工程后，根据如下操作修改工程级build-profile.json5文件中相关字段：在工程级build-profile.json5文件添加compileSdkVersion字段。将compatibleSdkVersion和compileSdkVersion字段赋值为整数类型。将runtimeOS从\\\"HarmonyOS\\\"修改为\\\"OpenHarmony\\\"。   ",
        "import_module": null,
        "parent": "<li id='\\\"li1333611128558\\\"'><span>在完成<a href='\\\"#section11644183711342\\\"'>创建HarmonyOS工程</a>后，根据如下操作修改工程级build-profile.json5文件中相关字段：</span><p></p><ol id='\\\"ZH-CN_TOPIC_0000002166648744__ol114181715513\\\"'><li id='\\\"li6425121175513\\\"'>在工程级build-profile.json5文件添加<strong>compileSdkVersion</strong>字段。</li><li id='\\\"li1591228195514\\\"'>将<strong>compatibleSdkVersion</strong>和<strong>compileSdkVersion</strong>字段赋值为整数类型。</li><li id='\\\"li1141141711555\\\"'>将runtimeOS从\\\"HarmonyOS\\\"修改为<strong>\\\"OpenHarmony\\\"</strong>。</li></ol>  <p id='\\\"ZH-CN_TOPIC_0000002166648744__p8696172113420\\\"'><span><img originheight='\\\"242\\\"' originwidth='\\\"336\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180414.06579032092808093221656045211065:50001231000000:2800:7BF64440C4EFDD5CD425E62975A4815C310F796054DEAF2CDB9467DBA2FF1753.png\\\"'/></span></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-create-new-project.html"
    },
    {
        "id": 581,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-start-task.html"
    },
    {
        "id": 582,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-misused-promises\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-misused-promises.html"
    },
    {
        "id": 583,
        "pre": "export async function func(): void {\\n  const promise = Promise.resolve('value');\\n\\n  // Always `await` the Promise in a conditional\\n  if (await promise) {\\n    // Do something\\n  }\\n\\n  const val = await promise ? '123' : '456';\\n  console.log(`${val}`);\\n\\n  while (await promise) {\\n    // Do something\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-misused-promises.html"
    },
    {
        "id": 584,
        "pre": "export async function func(): void {\\n  const promise = Promise.resolve('value');\\n  // 默认条件语句中需要使用await Promise\\n  if (promise) {\\n    // Do something\\n  }\\n\\n  // 默认条件语句中需要使用await Promise\\n  const val = promise ? '123' : '456';\\n  console.log(`${val}`);\\n\\n  // 默认条件语句中需要使用await Promise\\n  while (promise) {\\n    // Do something\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-misused-promises.html"
    },
    {
        "id": 585,
        "pre": "{native-root}/llvm/lib/clang/current/lib/arm-linux-ohos/\\n    |-- a7_hard_neon-vfpv4\\n    |       |-- clang_rt.crtbegin.o\\n    |       |-- clang_rt.crtend.o\\n    |       |-- ...\\n    |\\n    |-- a7_soft\\n    |       |-- clang_rt.crtbegin.o\\n    |       |-- clang_rt.crtend.o\\n    |       |-- ...\\n    |\\n    |-- a7_softfp_neon-vfpv4\\n            |-- clang_rt.crtbegin.o\\n            |-- clang_rt.crtend.o\\n            |-- ...",
        "type": "Reference",
        "function_call": null,
        "function_name": "HarmonyOS架构支持情况",
        "parent_text": "HarmonyOS架构支持情况在HarmonyOS系统中，arm64-v8a ABI下默认已经开启了对Neon扩展的支持；在armeabi-v7a ABI下，为了能够尽可能的支持ARMv7a架构设备，默认不开启Neon扩展。 在HarmonyOS SDK的LLVM工具链中，为armeabi-v7a ABI提供了对多种配置的预编译运行时库的支持，供开发者根据不同的配置进行选择。具体目录结构如下，native-root表示NDK所在的native包解压根目录。  其中hard、soft、softfp是float-abi，未指定默认采用softfp；neon-vfpv4就是-mfpu指定的参数类型，LLVM工具链根据相应编译参数选择依赖不同架构配置的二进制库。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"harmonyos架构支持情况\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178213868__harmonyos%E6%9E%B6%E6%9E%84%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5\\\"'></a><a name='\\\"harmonyos%E6%9E%B6%E6%9E%84%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5\\\"'></a><h4>HarmonyOS架构支持情况</h4><p>在HarmonyOS系统中，arm64-v8a ABI下默认已经开启了对Neon扩展的支持；在armeabi-v7a ABI下，为了能够尽可能的支持ARMv7a架构设备，默认不开启Neon扩展。</p> <p>在HarmonyOS SDK的LLVM工具链中，为armeabi-v7a ABI提供了对多种配置的预编译运行时库的支持，供开发者根据不同的配置进行选择。具体目录结构如下，native-root表示NDK所在的native包解压根目录。</p>  <p>其中hard、soft、softfp是float-abi，未指定默认采用softfp；neon-vfpv4就是-mfpu指定的参数类型，LLVM工具链根据相应编译参数选择依赖不同架构配置的二进制库。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/neon-guide.html"
    },
    {
        "id": 586,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/member-delimiter-style\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_member-delimiter-style.html"
    },
    {
        "id": 587,
        "pre": "// 默认接口/类型别名定义为多行的场景下，每个成员应以分号 (;) 分隔。 最后一个成员必须有一个分隔符。\\n// 默认接口/类型别名定义为单行的场景下，每个成员应以分号 (;) 分隔。最后一个成员不能有分隔符。\\n// 接口/类型别名中的任何换行符都会使其成为多行。\\nexport interface Foo1 {\\n  name: string;\\n\\n  greet(): string;\\n}\\n\\nexport interface Foo2 { name: string }",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_member-delimiter-style.html"
    },
    {
        "id": 588,
        "pre": "// missing semicolon delimiter\\nexport interface Foo {\\n  name: string\\n  greet(): string\\n}\\n\\n// using incorrect delimiter\\nexport interface Bar {\\n  name: string,\\n  greet(): string,\\n}\\n\\n// missing last member delimiter\\nexport interface Baz {\\n  name: string;\\n  greet(): string\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_member-delimiter-style.html"
    },
    {
        "id": 589,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-non-null-asserted-optional-chain\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-non-null-asserted-optional-chain.html"
    },
    {
        "id": 590,
        "pre": "class CC {\\n  public bar = 'hello';\\n\\n  public foo(): void {\\n    console.info('foo');\\n  }\\n}",
        "type": "Reference",
        "function_call": "foo()",
        "function_name": "正例",
        "parent_text": "正例 function getInstance(): CC | undefined {\\n  return new CC();\\n}\\n\\nconst instance = getInstance();\\nconsole.info(`${instance?.bar}`);\\ninstance?.foo(); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648424__screen1256119874816\\\"'>function getInstance(): CC | undefined {\\n  return new CC();\\n}\\n\\nconst instance = getInstance();\\nconsole.info(`${instance?.bar}`);\\ninstance?.foo();</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-non-null-asserted-optional-chain.html"
    },
    {
        "id": 591,
        "pre": "class CC {\\n  public bar: string = 'hello';\\n\\n  public foo() {\\n    console.info('foo');\\n  }\\n}\\n\\nfunction getInstance(): CC | undefined {\\n  return new CC();\\n}\\n\\nconst instance = getInstance();\\nconsole.info(`${instance?.bar!}`);\\ninstance?.foo()!;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-non-null-asserted-optional-chain.html"
    },
    {
        "id": 592,
        "pre": "export class ClassForMock {\\n  constructor() {\\n  }\\n  method_1(arg: string) {\\n    return '888888';\\n  }\\n  method_2(arg: string) {\\n    return '999999';\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在src/main/ets目录下新建一个ArkTS文件，例如ClassForMock.ets，并在其中导出一个类。 ",
        "import_module": null,
        "parent": "<li id='\\\"li61131143012\\\"'><span>在src/main/ets目录下新建一个ArkTS文件，例如ClassForMock.ets，并在其中导出一个类。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-test-mock.html"
    },
    {
        "id": 593,
        "pre": "enum BluetoothState {\\n  /** Indicates the local Bluetooth is off */\\n  STATE_OFF = 0,\\n  /** Indicates the local Bluetooth is turning on */\\n  STATE_TURNING_ON = 1,\\n  /** Indicates the local Bluetooth is on, and ready for use */\\n  STATE_ON = 2,\\n  /** Indicates the local Bluetooth is turning off */\\n  STATE_TURNING_OFF = 3,\\n  /** Indicates the local Bluetooth is turning LE mode on */\\n  STATE_BLE_TURNING_ON = 4,\\n  /** Indicates the local Bluetooth is in LE only mode */\\n  STATE_BLE_ON = 5,\\n  /** Indicates the local Bluetooth is turning off LE only mode */\\n  STATE_BLE_TURNING_OFF = 6\\n}\\ninterface BluetoothInfo {\\n  state: number\\n}\\nconst MockBluetoothManager: Record<string, Object> = {\\n  'getBluetoothInfo': () => {\\n    return { state : BluetoothState.STATE_BLE_TURNING_ON } as BluetoothInfo;\\n  },\\n};\\nexport default MockBluetoothManager;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在src/mock目录下新建一个ArkTS文件，例如bluetooth_manager.mock.ets，在这个文件内定义目标Module的Mock实现。 ",
        "import_module": null,
        "parent": "<li id='\\\"li34255592196\\\"'><span>在src/mock目录下新建一个ArkTS文件，例如bluetooth_manager.mock.ets，在这个文件内定义目标Module的Mock实现。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-test-mock.html"
    },
    {
        "id": 594,
        "pre": "    \\\"requestPermissions\\\":[\\n      {\\n        \\\"name\\\" : \\\"ohos.permission.ACCELEROMETER\\\" // 加速度权限\\n      },\\n      {\\n        \\\"name\\\" : \\\"ohos.permission.GYROSCOPE\\\"     // 陀螺仪权限\\n      }\\n    ]",
        "type": "Reference",
        "function_call": null,
        "function_name": "需要权限",
        "parent_text": "  需要权限 使用加速度、陀螺仪及设备运动事件接口时，需在配置文件module.json5中声明相应的传感器权限。具体配置方法请参考在配置文件中声明权限。  Web组件在对接运动和方向传感器时，需配置onPermissionRequest接口，通过该接口接收权限请求通知。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"需要权限\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178053138__%E9%9C%80%E8%A6%81%E6%9D%83%E9%99%90\\\"'></a><a name='\\\"%E9%9C%80%E8%A6%81%E6%9D%83%E9%99%90\\\"'></a> <h4>需要权限</h4> <p>使用加速度、陀螺仪及设备运动事件接口时，需在配置文件module.json5中声明相应的传感器权限。具体配置方法请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/declare-permissions\\\"'>在配置文件中声明权限</a>。</p>  <p>Web组件在对接运动和方向传感器时，需配置<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-web#onpermissionrequest9\\\"' target='\\\"_blank\\\"'>onPermissionRequest</a>接口，通过该接口接收权限请求通知。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/web-sensor.html"
    },
    {
        "id": 595,
        "pre": "this.mapEventManager = this.mapController.getEventManager();",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]初始化地图组件的事件管理接口",
        "parent_text": "  [h2]初始化地图组件的事件管理接口  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section12505135815715\\\"'> <a name='\\\"section12505135815715\\\"'></a><a name='\\\"section12505135815715\\\"'></a> <h4>[h2]初始化地图组件的事件管理接口</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-listening.html"
    },
    {
        "id": 596,
        "pre": "let callback = (position: mapCommon.LatLng) => {\\n  console.info(\\\"mapClick\\\", `on-mapClick position = ${position.longitude}`);\\n};\\nthis.mapEventManager.on(\\\"mapClick\\\", callback);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]地图点击事件监听",
        "parent_text": "  [h2]地图点击事件监听  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section553mcpsimp\\\"'> <a name='\\\"section553mcpsimp\\\"'></a><a name='\\\"section553mcpsimp\\\"'></a> <h4>[h2]地图点击事件监听</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-listening.html"
    },
    {
        "id": 597,
        "pre": "let callback = (position: mapCommon.LatLng) => {\\n  console.info(\\\"mapLongClick\\\", `on-mapLongClick position = ${position.longitude}`);\\n};\\nthis.mapEventManager.on(\\\"mapLongClick\\\", callback);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]地图长按事件监听",
        "parent_text": "  [h2]地图长按事件监听  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section558mcpsimp\\\"'> <a name='\\\"section558mcpsimp\\\"'></a><a name='\\\"section558mcpsimp\\\"'></a> <h4>[h2]地图长按事件监听</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-listening.html"
    },
    {
        "id": 598,
        "pre": "let callback = (reason: number) => {\\n  console.info(\\\"cameraMoveStart\\\", `on-cameraMoveStart reason = ${reason}`);\\n};\\nthis.mapEventManager.on(\\\"cameraMoveStart\\\", callback);",
        "type": "Reference",
        "function_call": "let callback = ()",
        "function_name": "[h2]相机移动监听",
        "parent_text": "  [h2]相机移动监听 相机移动时（华为地图的移动是通过模拟相机移动的方式实现的），通过设置监听器，能够对相机移动状态进行监听。  当相机开始移动时，会回调cameraMoveStart。    当相机移动或用户与触摸屏交互时，会多次调用cameraMove。  let callback = () => {\\n  console.info(\\\"cameraMove\\\", `on-cameraMove`);\\n};\\nthis.mapEventManager.on(\\\"cameraMove\\\", callback);  当相机停止移动时，会回调cameraIdle。  let callback = () => {\\n  console.info(\\\"cameraIdle\\\", `on-cameraIdle`);\\n};\\nthis.mapEventManager.on(\\\"cameraIdle\\\", callback); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1843763205213\\\"'> <a name='\\\"section1843763205213\\\"'></a><a name='\\\"section1843763205213\\\"'></a> <h4>[h2]相机移动监听</h4> <p><span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>相机移动时（华为地图的移动是通过模拟相机移动的方式实现的），通过设置监听器，能够对相机移动状态进行监听。</span></p> <ul> <li>当相机开始移动时，会回调cameraMoveStart。</li> </ul>  <ul> <li>当相机移动或用户与触摸屏交互时，会多次调用cameraMove。</li> </ul> <pre class='\\\"typescript\\\"'>let callback = () =&gt; {\\n  console.info(\\\"cameraMove\\\", `on-cameraMove`);\\n};\\nthis.mapEventManager.on(\\\"cameraMove\\\", callback);</pre> <ul> <li>当相机停止移动时，会回调cameraIdle。</li> </ul> <pre class='\\\"typescript\\\"'>let callback = () =&gt; {\\n  console.info(\\\"cameraIdle\\\", `on-cameraIdle`);\\n};\\nthis.mapEventManager.on(\\\"cameraIdle\\\", callback);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-listening.html"
    },
    {
        "id": 599,
        "pre": "let callback = (marker: map.Marker) => {\\n  console.info(\\\"markerClick\\\", `markerClick: ${marker.getId()}`);\\n};\\nthis.mapEventManager.on(\\\"markerClick\\\", callback);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]标记点击事件监听",
        "parent_text": "  [h2]标记点击事件监听 标记是指在地图的指定位置添加标记以标识位置、商家、建筑等。详情请参见标记。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section107421873537\\\"'> <a name='\\\"section107421873537\\\"'></a><a name='\\\"section107421873537\\\"'></a> <h4>[h2]标记点击事件监听</h4> <p><span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>标记是指在地图的指定位置添加标记以标识位置、商家、建</span><span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>筑等</span><span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>。</span>详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/map-marker\\\"'>标记</a>。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-listening.html"
    },
    {
        "id": 600,
        "pre": "let callback = () => {\\n  console.info(\\\"myLocationButtonClick\\\", `myLocationButtonClick`);\\n};\\nthis.mapEventManager.on(\\\"myLocationButtonClick\\\", callback);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]我的位置监听",
        "parent_text": "  [h2]我的位置监听 详情请参见显示我的位置。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section11407822175118\\\"'> <a name='\\\"section11407822175118\\\"'></a><a name='\\\"section11407822175118\\\"'></a> <h4>[h2]我的位置监听</h4> <p>详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/map-location\\\"'>显示我的位置</a>。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-listening.html"
    },
    {
        "id": 601,
        "pre": "let callback = (pointAnnotation: map.PointAnnotation) => {\\n  console.info(\\\"pointAnnotationClick\\\", `pointAnnotationClick: ${pointAnnotation.getId()}`);\\n};\\nthis.mapEventManager.on(\\\"pointAnnotationClick\\\", callback);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]点注释事件监听",
        "parent_text": "  [h2]点注释事件监听 点注释是指在地图的指定位置添加点注释以标识位置、商家、建筑等，并可以通过信息窗口展示详细信息。详情请参见点注释。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section7267142111915\\\"'> <a name='\\\"section7267142111915\\\"'></a><a name='\\\"section7267142111915\\\"'></a> <h4>[h2]点注释事件监听</h4> <p>点注释是指在地图的指定位置添加点注释以标识位置、商家、建筑等，并可以通过信息窗口展示详细信息。详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/map-annotation\\\"'>点注释</a>。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-listening.html"
    },
    {
        "id": 602,
        "pre": "import { voipCall } from '@kit.CallServiceKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关依赖。 ",
        "import_module": null,
        "parent": "<li><span>导入相关依赖。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/outgoing-calls.html"
    },
    {
        "id": 603,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/brace-style\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-brace-style-stylistic.html"
    },
    {
        "id": 604,
        "pre": "try {\\n  // doSomething\\n} catch (e) {\\n  // doSomething\\n} finally {\\n  // doSomething\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-brace-style-stylistic.html"
    },
    {
        "id": 605,
        "pre": "try\\n// Opening curly brace does not appear on the same line as statement before.\\n{\\n\\n// Closing curly brace does not appear on the same line as statement after.\\n}\\ncatch (e)\\n// Opening curly brace does not appear on the same line as statement before.\\n{\\n\\n// Closing curly brace does not appear on the same line as statement after.\\n}\\nfinally\\n// Opening curly brace does not appear on the same line as statement before.\\n{\\n\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-brace-style-stylistic.html"
    },
    {
        "id": 606,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-suggest-reuseid-for-if-else-reusable-component\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-reuseid-if-else-component.html"
    },
    {
        "id": 607,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { ChartInfoEntry } from './data/DataEntry';\\nimport { PublicChatItem } from './component/PublicChatItem';\\nimport { ChatItem } from './component/ChatItem';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private scroller: Scroller = new Scroller()\\n  private lazyChatList: MyDataSource = new MyDataSource();\\n\\n  build() {\\n    Column() {\\n      List({ scroller: this.scroller }) {\\n        LazyForEach(this.lazyChatList, (item: ChartInfoEntry, index: number) => {\\n          ListItem() {\\n            // 使用reuseId进行组件复用的控制\\n            InnerRecentChat({ chatInfo: item }).reuseId(this.lazyChatList.getReuseIdByIndex(index))\\n          }\\n          .height(72)\\n        }, (item: ChartInfoEntry) => item.id)\\n      }\\n      .cachedCount(3)\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nstruct InnerRecentChat {\\n  @State chatInfo: ChartInfoEntry = new ChartInfoEntry()\\n\\n  aboutToReuse(params: Record<string, ESObject>): void {\\n    this.chatInfo = params.chatInfo as ChartInfoEntry\\n  }\\n\\n  build() {\\n    Button({ type: ButtonType.Normal }) {\\n      Row() {\\n        if (this.chatInfo['isPublicChat']) {\\n          // 源码文件，请以工程实际为准\\n          PublicChatItem({ chatInfo: chatInfo as ChartInfoEntry })\\n        } else {\\n          // 源码文件，请以工程实际为准\\n          ChatItem({ chatInfo: this.chatInfo as ChatItem })\\n        }\\n      }.padding({ left: 16, right: 16 })\\n    }\\n    .type(ButtonType.Normal)\\n    .width('100%')\\n    .height('100%')\\n    .borderRadius(0)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-reuseid-if-else-component.html"
    },
    {
        "id": 608,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { ChartInfoEntry } from './data/DataEntry';\\nimport { PublicChatItem } from './component/PublicChatItem';\\nimport { ChatItem } from './component/ChatItem';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private scroller: Scroller = new Scroller()\\n  private lazyChatList: MyDataSource = new MyDataSource();\\n\\n  build() {\\n    Column() {\\n      List({ scroller: this.scroller }) {\\n        LazyForEach(this.lazyChatList, (item: ChartInfoEntry, index: number) => {\\n          ListItem() {\\n            // ListItem里有if-else并且直接在分支里使用了自定义复用组件\\n            Button({ type: ButtonType.Normal }) {\\n              Row() {\\n                if (item['isPublicChat']) {\\n                  // 源码文件，请以工程实际为准\\n                  PublicChatItem({ chatInfo: item as PublicChatItem })\\n                } else {\\n                  // 源码文件，请以工程实际为准\\n                  ChatItem({ chatInfo: item as ChatItem })\\n                }\\n              }.padding({ left: 16, right: 16 })\\n            }\\n            .type(ButtonType.Normal)\\n            .width('100%')\\n            .height('100%')\\n            .borderRadius(0)\\n          }\\n          .height(72)\\n        }, (item: ChartInfoEntry) => item.id)\\n      }\\n      .cachedCount(3)\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-reuseid-if-else-component.html"
    },
    {
        "id": 609,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-extra-semi\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-semi.html"
    },
    {
        "id": 610,
        "pre": "export const x = 5;\\n\\nexport function foo() {\\n  // code\\n}\\n\\nexport const bar = () => {\\n  // code\\n};\\n\\nexport class C {\\n  public field: string = 'field';\\n\\n  static {\\n    // code\\n  }\\n\\n  public method() {\\n    // code\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-semi.html"
    },
    {
        "id": 611,
        "pre": "export const x = 5;;\\n\\nexport function foo() {\\n  // code\\n};\\n\\nexport const bar = () => {\\n  // code\\n};;\\n\\nexport class C {\\n  public field: string = 'field';;\\n\\n  static {\\n    // code\\n  };\\n\\n  public method() {\\n    // code\\n  };\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-semi.html"
    },
    {
        "id": 612,
        "pre": "import { BackupExtensionAbility, BundleVersion } from '@kit.CoreFileKit';\\n\\nconst TAG = `BackupExtensionAbility`;\\n\\ninterface ErrorInfo {\\n  type: string,\\n  errorCode: number,\\n  errorInfo: string\\n}\\n\\ninterface DetailInfo {\\n    type: string,\\n    detail: string\\n}\\n\\nexport default class EntryBackupAbility extends BackupExtensionAbility {\\n  async onBackup() {\\n    console.log(TAG, 'onBackup ok');\\n  }\\n\\n  async onRestoreEx(bundleVersion: BundleVersion, restoreInfo: string): Promise<string> {\\n    console.log(TAG, `onRestoreEx ok ${JSON.stringify(bundleVersion)}`);\\n    let errorInfo: ErrorInfo = {\\n      type: \\\"ErrorInfo\\\",\\n      errorCode: 0,\\n      errorInfo: \\\"app diy error info\\\"\\n    }\\n    if (bundleVersion.name.startsWith(\\\"0.0.0.0\\\")){\\n      // 在此处实现终端设备从HarmonyOS 4.x到HarmonyOS NEXT的应用数据处理。\\n      // 涉及异步操作请进行同步等待\\n      console.log(TAG, `HarmonyOS to HarmonyOS NEXT scenario`);\\n\\n      // 如果升级场景与克隆场景没有差异化数据处理诉求，此处可以忽略。\\n      if (this.IsOtaScenario(restoreInfo)) {\\n        // 在此处实现终端设备从HarmonyOS 4.x到HarmonyOS NEXT升级场景的特有数据处理。无特殊要求，此处可以忽略。\\n        console.log(TAG, `Ota Scenario`)\\n      } else {\\n        // 在此处实现终端设备从HarmonyOS 4.x到HarmonyOS NEXT克隆场景的特有数据处理。无特殊要求，此处可以忽略。\\n        console.log(TAG, `Clone Scenario`)\\n      }\\n    } else {\\n      // 在此处实现从HarmonyOS NEXT设备迁移到HarmonyOS NEXT设备后，应用数据的处理。无特殊要求，可以空实现。\\n      // 涉及异步操作请进行同步等待\\n      console.log(TAG, `Other scenario`);\\n    }\\n    return JSON.stringify(errorInfo);\\n  }\\n\\n  /**\\n   * 判断是否是升级场景\\n   * @param restoreInfo 预留字段，应用恢复过程中需要的扩展参数\\n   * @returns 升级场景返回true，否则返回false\\n   */\\n  IsOtaScenario(restoreInfo: string): boolean {\\n    let details:Array<DetailInfo> = JSON.parse(restoreInfo);\\n    return details.some((detailInfo) => {\\n      //设备从HarmonyOS 4.x升级到HarmonyOS NEXT/5.0.x场景判断条件\\n      return detailInfo.type == 'isSameDevice' && detailInfo.detail == 'true';\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "示例代码如下所示： ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>示例代码如下所示： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/code-precautions.html"
    },
    {
        "id": 613,
        "pre": "import { fileUriService } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\ntry {\\n  let sourceFileUris: Array<string> =\\n    ['100','content://media/external/files/10', '/storage/emulated/0/Pictures/test.gif',\\n      '/storage/emulated/0/Android/media/com.test/test.mp4'];\\n  fileUriService.convertFileUris(sourceFileUris).then(result => {\\n    hilog.info(0x0000, 'testTag', 'succeeded in converting file uris');\\n    result.forEach(data => {\\n      let sourceUri: string = data.sourceUri;\\n      let targetUri: string = data.targetUri;\\n      let targetType: fileUriService.TargetType = data.targetType;\\n    })\\n  }).catch((error: BusinessError) => {\\n    hilog.error(0x0000, 'testTag', 'Promise error: %{public}d %{public}s', error.code, error.message);\\n  });\\n} catch (error) {\\n  hilog.error(0x0000, 'testTag', 'failReason: %{public}d %{public}s', error.code, error.message);\\n}",
        "type": "Reference",
        "function_call": "convertFileUris()",
        "function_name": "[h2]代码实现",
        "parent_text": "[h2]代码实现应用可以调用Scenario Fusion Kit的接口convertFileUris()，将记录的HarmonyOS公共媒体库文件uri或者路径转换为HarmonyOS NEXT可访问的uri或者路径，并获取到对应文件类型。其中媒体文件类型请参考继承媒体文件访问权限，其他类型文件可通过基础文件接口进行操作。  开发者可以在数据迁移的过程中，通过该接口将HarmonyOS公共媒体库文件uri或者路径转换为对应的HarmonyOS NEXT公共媒体库文件uri或者路径，并重新保存，便于后续使用。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section89781112428\\\"'><a name='\\\"section89781112428\\\"'></a><a name='\\\"section89781112428\\\"'></a><h4>[h2]代码实现</h4><p>应用可以调用Scenario Fusion Kit的接口<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V14/scenario-fusion-fileuriresult-V14#section1272664195920\\\"' target='\\\"_blank\\\"'>convertFileUris()</a>，将记录的HarmonyOS公共媒体库文件uri或者路径转换为HarmonyOS NEXT可访问的uri或者路径，并获取到对应文件类型。其中媒体文件类型请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V14/medialibrary-request-photouris-permission-V14#section136601465357\\\"' target='\\\"_blank\\\"'>继承媒体文件访问权限</a>，其他类型文件可通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-file-access\\\"'>基础文件接口</a>进行操作。</p> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120507.17667968256226575084301350200473:50001231000000:2800:35E8C53075FFEE66AB7424D4A9FA6268C1CB3CF3C3B824D823C8DD81F2390633.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>开发者可以在数据迁移的过程中，通过该接口将HarmonyOS公共媒体库文件uri或者路径转换为对应的HarmonyOS NEXT公共媒体库文件uri或者路径，并重新保存，便于后续使用。</p> </div></div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/code-precautions.html"
    },
    {
        "id": 614,
        "pre": "import { insightIntent } from '@kit.IntentsKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nlet playMusicIntent1: insightIntent.InsightIntent;\\nlet playMusicIntent2: insightIntent.InsightIntent;\\n// 共享数据接口  意图数组可以是更多的实体\\n// 根据实际代码上下文自行传入合适的context\\ninsightIntent.shareIntent(context, [playMusicIntent1, playMusicIntent2]).then(() => {\\n  console.info('shareIntent succeed');\\n}).catch((err: BusinessError) => {\\n  console.error(`error.code: ${err?.code}, failed because ${err?.message}`);\\n});",
        "type": "Reference",
        "function_call": "shareIntent()",
        "function_name": "端侧意图共享",
        "parent_text": "  端侧意图共享 构建意图对象，并且调用shareIntent()，实现意图共享。可同时构建多个PlayMusic或PlayMusicList的意图对象。  PlayMusic的意图共享字段定义见各垂域意图Schema定义，代码示例如下： import { insightIntent } from '@kit.IntentsKit';\\n\\nlet playMusicIntent: insightIntent.InsightIntent = {\\n  intentName: \\\"PlayMusic\\\",\\n  intentVersion: \\\"1.0\\\",\\n  identifier: \\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\",\\n  intentActionInfo: {\\n    actionMode: \\\"EXECUTED\\\",\\n    executedTimeSlots: {\\n      executedStartTime: 1637393212000,\\n      executedEndTime: 1637393112000,\\n    },\\n    currentPercentage: 50,\\n  },\\n  intentEntityInfo: {\\n    entityName: \\\"Music\\\",\\n    entityId: \\\"C10194368\\\",\\n    entityGroupId: \\\"C10194321312\\\",\\n    displayName: \\\"测试歌曲1\\\",\\n    description: \\\"NA\\\",\\n    logoURL: \\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\",\\n    keywords: [\\\"华为音乐\\\", \\\"化妆\\\"],\\n    rankingHint: 99,\\n    expirationTime: 1637393212000,\\n    metadataModificationTime: 1637393212000,\\n    activityType: [\\\"1\\\", \\\"2\\\", \\\"3\\\"],\\n    artist: [\\\"测试歌手1\\\", \\\"测试歌手2\\\"],\\n    lyricist: [\\\"测试词作者1\\\", \\\"测试词作者2\\\"],\\n    composer: [\\\"测试曲作者1\\\", \\\"测试曲作者2\\\"],\\n    albumName: \\\"测试专辑\\\",\\n    duration: 244000,\\n    playCount: 100000,\\n    musicalGenre: [\\\"流行\\\", \\\"华语\\\", \\\"金曲\\\", \\\"00后\\\"],\\n    isPublicData: false,\\n  }\\n} 完整的意图共享示例如下所示，该示例构建了一个PlayMusic意图，并进行了shareIntent调用。 import { insightIntent } from '@kit.IntentsKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nlet playMusicIntent: insightIntent.InsightIntent = {\\n  intentName: \\\"PlayMusic\\\",\\n  intentVersion: \\\"1.0\\\",\\n  identifier: \\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\",\\n  intentActionInfo: {\\n    actionMode: \\\"EXECUTED\\\",\\n    executedTimeSlots: {\\n      executedStartTime: 1637393212000,\\n      executedEndTime: 1637393112000,\\n    },\\n    currentPercentage: 50,\\n  },\\n  intentEntityInfo: {\\n    entityName: \\\"Music\\\",\\n    entityId: \\\"C10194368\\\",\\n    entityGroupId: \\\"C10194321312\\\",\\n    displayName: \\\"测试歌曲1\\\",\\n    description: \\\"NA\\\",\\n    logoURL: \\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\",\\n    keywords: [\\\"华为音乐\\\", \\\"化妆\\\"],\\n    rankingHint: 99,\\n    expirationTime: 1637393212000,\\n    metadataModificationTime: 1637393212000,\\n    activityType: [\\\"1\\\", \\\"2\\\", \\\"3\\\"],\\n    artist: [\\\"测试歌手1\\\", \\\"测试歌手2\\\"],\\n    lyricist: [\\\"测试词作者1\\\", \\\"测试词作者2\\\"],\\n    composer: [\\\"测试曲作者1\\\", \\\"测试曲作者2\\\"],\\n    albumName: \\\"测试专辑\\\",\\n    duration: 244000,\\n    playCount: 100000,\\n    musicalGenre: [\\\"流行\\\", \\\"华语\\\", \\\"金曲\\\", \\\"00后\\\"],\\n    isPublicData: false,\\n  }\\n}\\n// 共享数据接口  意图数组可以是更多的实体\\n// 根据实际代码上下文自行传入合适的context\\ninsightIntent.shareIntent(context, [playMusicIntent]).then(() => {\\n  console.info('shareIntent succeed');\\n}).catch((err: BusinessError) => {\\n  console.error(`error.code: ${err?.code}, failed because ${err?.message}`);\\n}); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14210125472916\\\"'> <a name='\\\"section14210125472916\\\"'></a><a name='\\\"section14210125472916\\\"'></a> <h4>端侧意图共享</h4> <p>构建意图对象，并且调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/intents-arkts-api-insightintent#section161911659112211\\\"' target='\\\"_blank\\\"'>shareIntent()</a>，实现意图共享。可同时构建多个PlayMusic或PlayMusicList的意图对象。</p>  <p>PlayMusic的意图共享字段定义见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/service/intents-schema-0000001901962713\\\"' target='\\\"_blank\\\"'>各垂域意图Schema</a>定义，代码示例如下：</p> <pre class='\\\"typescript\\\"'>import <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>insightIntent </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>} </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'@kit.IntentsKit'</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n\\nlet <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playMusicIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(0,0,128);\\\"=\"\" style='\\\"color:'>insightIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>InsightIntent </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>= </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"PlayMusic\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentVersion</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1.0\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>identifier</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentActionInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>actionMode</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"EXECUTED\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedTimeSlots</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedStartTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedEndTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393112000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>currentPercentage</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>50</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentEntityInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"Music\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194368\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityGroupId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194321312\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>displayName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌曲1</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>description</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"NA\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>logoURL</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>keywords</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>华为音乐</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>化妆</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>rankingHint</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>99</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>expirationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>metadataModificationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>activityType</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"2\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"3\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>artist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>lyricist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>composer</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>albumName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试专辑</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>duration</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>244000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playCount</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>100000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>musicalGenre</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>流行</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"华语\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>金曲</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"00</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>后</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>isPublicData</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span>false<span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span></pre> <p>完整的意图共享示例如下所示，该示例构建了一个PlayMusic意图，并进行了shareIntent调用。</p> <pre class='\\\"screen\\\"'>import <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>insightIntent </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>} </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'@kit.IntentsKit'</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\nimport <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>BusinessError </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>} </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'@kit.BasicServicesKit'</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n\\nlet <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playMusicIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(0,0,128);\\\"=\"\" style='\\\"color:'>insightIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>InsightIntent </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>= </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"PlayMusic\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentVersion</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1.0\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>identifier</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentActionInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>actionMode</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"EXECUTED\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedTimeSlots</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedStartTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedEndTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393112000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>currentPercentage</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>50</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentEntityInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"Music\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194368\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityGroupId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194321312\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>displayName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌曲</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>description</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"NA\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>logoURL</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>keywords</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>华为音乐</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>化妆</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>rankingHint</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>99</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>expirationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>metadataModificationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>activityType</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"2\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"3\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>artist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>lyricist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>composer</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>albumName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试专辑</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>duration</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>244000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playCount</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>100000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>musicalGenre</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>流行</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>华语</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>金曲</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"00</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>后</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>isPublicData</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span>false<span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>共享数据接口  意图数组可以是更多的实体</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>根据实际代码上下文自行传入合适的</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>context</span>\\n<span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>insightIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>shareIntent</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>(</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>context</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playMusicIntent</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>then</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>(</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>() </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>=</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>console</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>info</span><span rgb(188,11,162);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'shareIntent succeed'</span><span rgb(188,11,162);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n<span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>catch</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>(</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>(</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>err</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(0,0,128);\\\"=\"\" style='\\\"color:'>BusinessError</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>) </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>=</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>console</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>error</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>`error.code: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>${</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>err</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>code</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>, failed because </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>${</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>err</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>message</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>`</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n<span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>})</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span></pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/intents-habit-rec-access-programme.html"
    },
    {
        "id": 615,
        "pre": "import { insightIntent, InsightIntentExecutor } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n/**\\n * 意图调用样例\\n */\\nexport default class InsightIntentExecutorImpl extends InsightIntentExecutor {\\n  private static readonly PLAY_MUSIC = 'PlayMusic';\\n  /**\\n   * override 执行前台UIAbility意图\\n   *\\n   * @param name 意图名称\\n   * @param param 意图参数\\n   * @param pageLoader 窗口\\n   * @returns 意图调用结果\\n   */\\n  onExecuteInUIAbilityForegroundMode(name: string, param: Record<string, Object>, pageLoader: window.WindowStage):\\n    Promise<insightIntent.ExecuteResult> {\\n    // 根据意图名称分发处理逻辑。接入方可根据实际业务实现页面跳转\\n    switch (name) {\\n      case InsightIntentExecutorImpl.PLAY_MUSIC:\\n        return this.playMusic(param, pageLoader);\\n      default:\\n        break;\\n    }\\n    return Promise.resolve({\\n      code: -1,\\n      result: {\\n        message: 'unknown intent'\\n      }\\n    } as insightIntent.ExecuteResult)\\n  }\\n  /**\\n   * 实现调用播放歌曲功能\\n   *\\n   * @param param 意图参数\\n   * @param pageLoader 窗口\\n   */\\n  private playMusic(param: Record<string, Object>, pageLoader: window.WindowStage): Promise<insightIntent.ExecuteResult> {\\n    return new Promise((resolve, reject) => {\\n      let para: Record<string, string> = {\\n        'result': JSON.stringify(param)\\n      };\\n      let localStorage: LocalStorage = new LocalStorage(para);\\n      // TODO 实现意图调用，loadContent的入参为歌曲落地页路径，例如：pages/Index\\n      pageLoader.loadContent('pages/Index', localStorage)\\n        .then(() => {\\n          let entityId: string = (param.items as Array<object>)?.[0]?.['entityId'];\\n          // TODO 调用成功的情况，此处可以打印日志\\n          resolve({\\n            code: 0,\\n            result: {\\n              message: 'Intent execute succeed'\\n            }\\n          });\\n        })\\n        .catch((err: BusinessError) => {\\n          // TODO 调用失败的情况\\n          resolve({\\n            code: -1,\\n            result: {\\n              message: 'Intent execute failed'\\n            }\\n          })\\n        });\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过意图名称，识别播放歌曲意图（PlayMusic），在对应的方法中传递意图参数（param），并拉起对应落地页（如歌曲落地页）。",
        "import_module": null,
        "parent": "<li>通过意图名称，识别播放歌曲意图（PlayMusic），在对应的方法中传递意图参数（param），并拉起对应落地页（如歌曲落地页）。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/intents-habit-rec-access-programme.html"
    },
    {
        "id": 616,
        "pre": "@Component\\nstruct Child {\\n  // @Param不可以在@Component中使用，编译报错\\n  // @Once @Require都是@Param的能力扩展装饰器，必须和@Param一起连用\\n  @Param message: string = \\\"\\\";\\t                 \\n  @Event changeMessage: (val: string) => void;  // @Event 不可以在@Component中使用，编译报错\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.changeMessage('world hello');\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @Local message: string = 'Hello World'; // @Local不可以在 @Component中使用，编译报错\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        changeMessage: (val: string) => {\\n          this.message = val;\\n        }\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": "Divider()",
        "function_name": "[h2]V1和V2的装饰器不允许混用",
        "parent_text": "[h2]V1和V2的装饰器不允许混用1.V1的自定义组件中不可以使用V2的装饰器  V2的组件内装饰器不允许在V1的自定义组件中使用，编译会报错。 @Local、@Param、@Event，@Provider、@Consumer、@Monitor、@Computed和示例代码中的装饰器表现一致。 2.V2的自定义组件中不可以使用V1的装饰器 @ComponentV2\\nstruct Child {\\n  @Prop message: string = \\\"\\\";  \\t// @Prop不可以在@ComponentV2中使用，编译报错\\n  @Link myId: number;           // @Link不可以在@ComponentV2中使用，编译报错\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`${this.myId}`)\\n        .id('HelloWorld')\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.myId++;\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @State message: string = 'Hello World';      // @State不可以在@ComponentV2中使用，编译报错\\n  @State @Watch('idChange') myId: number = 1;  // @Watch不可以在@ComponentV2中使用，编译报错\\n\\n  idChange(propName: number) : void {\\n    console.info(`id changed ${this.myId}`);\\n  }\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        myId: this.myId\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin(5)\\n  }\\n} V1的组件内装饰器不允许在V2的自定义组件中使用，编译会报错。 @ObjectLink、@Provide、@Consume、@StorageProp、@StorageLink、@LocalStorageProp、@LocalStorageLink和示例的装饰器表现一致。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"v1和v2的装饰器不允许混用\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212458__v1%E5%92%8Cv2%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8D%E5%85%81%E8%AE%B8%E6%B7%B7%E7%94%A8\\\"'></a><a name='\\\"v1%E5%92%8Cv2%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8D%E5%85%81%E8%AE%B8%E6%B7%B7%E7%94%A8\\\"'></a><h4>[h2]V1和V2的装饰器不允许混用</h4><p><strong>1.V1的自定义组件中不可以使用V2的装饰器</strong></p>  <p>V2的组件内装饰器不允许在V1的自定义组件中使用，编译会报错。</p> <p>@Local、@Param、@Event，@Provider、@Consumer、@Monitor、@Computed和示例代码中的装饰器表现一致。</p> <p><strong>2.V2的自定义组件中不可以使用V1的装饰器</strong></p> <pre class='\\\"typescript\\\"'>@ComponentV2\\nstruct Child {\\n  @Prop message: string = \\\"\\\";  \\t// @Prop不可以在@ComponentV2中使用，编译报错\\n  @Link myId: number;           // @Link不可以在@ComponentV2中使用，编译报错\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`${this.myId}`)\\n        .id('HelloWorld')\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.myId++;\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @State message: string = 'Hello World';      // @State不可以在@ComponentV2中使用，编译报错\\n  @State @Watch('idChange') myId: number = 1;  // @Watch不可以在@ComponentV2中使用，编译报错\\n\\n  idChange(propName: number) : void {\\n    console.info(`id changed ${this.myId}`);\\n  }\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        myId: this.myId\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin(5)\\n  }\\n}</pre> <p>V1的组件内装饰器不允许在V2的自定义组件中使用，编译会报错。</p> <p>@ObjectLink、@Provide、@Consume、@StorageProp、@StorageLink、@LocalStorageProp、@LocalStorageLink和示例的装饰器表现一致。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-component-mixed-scenarios.html"
    },
    {
        "id": 617,
        "pre": "@Component\\nstruct Child {\\n  @State @Prop message: string = \\\"\\\";\\t// 多个V1的装饰器不可以修饰同一个变量，编译器报错\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local @Param message: string = 'Hello World'; // 多个V2的装饰器不允许修饰同一个变量，编译器报错\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]多个装饰器不允许装饰同一个变量（@Watch、@Once、@Require除外）",
        "parent_text": "[h2]多个装饰器不允许装饰同一个变量（@Watch、@Once、@Require除外） 除了@Watch、@Once、@Require这些能力扩展装饰器可以配合其他装饰器使用外，其他装饰器不允许装饰同一个变量。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"多个装饰器不允许装饰同一个变量watchoncerequire除外\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212458__%E5%A4%9A%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8D%E5%85%81%E8%AE%B8%E8%A3%85%E9%A5%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8Fwatchoncerequire%E9%99%A4%E5%A4%96\\\"'></a><a name='\\\"%E5%A4%9A%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8D%E5%85%81%E8%AE%B8%E8%A3%85%E9%A5%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8Fwatchoncerequire%E9%99%A4%E5%A4%96\\\"'></a><h4>[h2]多个装饰器不允许装饰同一个变量（@Watch、@Once、@Require除外）</h4> <p>除了@Watch、@Once、@Require这些能力扩展装饰器可以配合其他装饰器使用外，其他装饰器不允许装饰同一个变量。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-component-mixed-scenarios.html"
    },
    {
        "id": 618,
        "pre": "@ObservedV2\\nclass Info {\\n  @Trace myId: number;   \\t\\t// 有观测能力\\n  name: string;           \\t\\t// 无观测能力\\n  @Track trackId: number = 1; \\t// @Track作为V1的装饰器，不能在@ObservedV2中使用，编译时报错；消除编译错误请去掉@Track\\n  \\n  constructor(id?: number, name?: string) {\\n    this.myId = id || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@Observed\\nclass message extends Info {\\t// 继承自@ObservedV2装饰的类不可以被Observed装饰，编译时报错；消除编译错误请去掉@Observed\\n}\\n\\nclass MessageInfo extends Info {\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  info1: Info = new Info();                      // @ObservedV2装饰的Class可以在V1中使用，且被@Trace装饰的类属性具有观测能力\\n  @State info2: Info = new Info();               // @ObservedV2装饰的Class不可以被V1的装饰器装饰，否则编译器报错；消除编译错误请去掉@State\\n\\n  @State messageInfo: MessageInfo = new MessageInfo();  // 继承自@ObservedV2的Class不可以被V1装饰器装饰，运行时报错；消除错误请去掉@State\\n  build() {\\n    Column() {\\n      Text(`info1 name: ${this.info1.name}`)            // name未被@Trace装饰，无法观察变化\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info1.name += 'b';\\n        })\\n      Text(`info1 id: ${this.info1.myId}`)              // myId被@Trace装饰，可观察变化\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info1.myId += 1;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info2 id: ${this.info2.myId}`)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info2.myId += 1;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`messageInfo id: ${this.messageInfo.myId}`) // 继承自@ObservedV2的Class被V1的装饰器装饰时会出现crash，运行时出错，需要去掉装饰器@State\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.messageInfo.myId += 1;\\n        })\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin(5)\\n  }\\n}",
        "type": "Reference",
        "function_call": "Divider()",
        "function_name": "[h2]V1和V2类相关装饰器混用",
        "parent_text": "[h2]V1和V2类相关装饰器混用1.V1的自定义组件中使用被@ObservedV2装饰的类对象  @ObservedV2的使用需要遵循如下规则： @ObservedV2只能装饰Class，@Trace、@Type只能装饰类属性，且只能在@ObservedV2中使用。@Track不可以在@ObservedV2中使用。对于被@ObservedV2装饰的Class，不可以直接被V1的装饰器装饰，否则编译时报错。示例中，开发者去掉报错的装饰器即可正常运行，被@Trace装饰的类属性变化时可以观察到变化，否则不可以观测到变化。 2.V2的自定义组件中使用被@Observed装饰的类对象 @Observed\\nclass Info {\\n  @Track myId: number;   \\t\\t  // 无观测能力，只能防止因其他属性改变而导致的连带刷新\\n  name: string;           \\t\\t  // 无观测能力\\n  @Trace trackId: number = 1; \\t  // @Trace作为V2的装饰器，不能在@Observed中使用，编译时报错；消除编译错误请去掉@Trace\\n  constructor(id?: number, name?: string) {\\n    this.myId = id || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@ObservedV2\\nclass message extends Info {      // @ObservedV2装饰的Class不能继承@Observed，编译时报错；消除编译错误请去掉@ObservedV2\\n}\\n\\nclass MessageInfo extends Info {  \\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  info1: Info = new Info();             // @Observed装饰的Class可以在V2中使用\\n  @Local info2: Info = new Info();      // @Observe装饰的Class不可以被V2的装饰器装饰，否则编译器报错；消除编译错误请去掉@Local\\n  @Local messageInfo: MessageInfo = new MessageInfo(); \\n  build() {\\n    Column() {\\n      Text(`info1 name: ${this.info1.name}`)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info1.name += 'b';\\n        })\\n      Text(`info1 id: ${this.info1.myId}`)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info1.myId += 1;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info2 id: ${this.info2.myId}`)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info2.myId += 1;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      // 继承自@ObservedV2的Class被V2装饰器装饰，V2的装饰器无类属性观测能力，所以不建议在V2中使用@Observed装饰的Class\\n      Text(`messageInfo id: ${this.messageInfo.myId}`)   \\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.messageInfo.myId += 1;\\n        })\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin(5)\\n  }\\n} 不建议开发者在V2中使用@Observed装饰的Class，因为@Observed和@Track仅能对类属性做区分，无观测能力，使用@Observed和@ObjectLink拆分嵌套数据才能够观测深层次数据，但@ObjectLink无法在V2的自定义组件中使用。 开发者在对V1的代码向V2迁移时，@Observed装饰的Class不建议在@ComponentV2中使用，无观测能力，如果一定要使用，则遵循以下规则： @Observed只能装饰Class，且@Trace不可以在@Observed中使用。@Observed和@Track无任何观测能力，只能用于防止Class中一个类属性改变而导致整个Class的刷新。继承自@Observed的Class被V2装饰器装饰，V2的组件内装饰器无类属性观测能力，所以使用@Observed会无法观测到类属性变化。示例中，开发者去掉报错的装饰器即可正常运行，由于无观测能力，所以不建议V2中使用@Observed。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"v1和v2类相关装饰器混用\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212458__v1%E5%92%8Cv2%E7%B1%BB%E7%9B%B8%E5%85%B3%E8%A3%85%E9%A5%B0%E5%99%A8%E6%B7%B7%E7%94%A8\\\"'></a><a name='\\\"v1%E5%92%8Cv2%E7%B1%BB%E7%9B%B8%E5%85%B3%E8%A3%85%E9%A5%B0%E5%99%A8%E6%B7%B7%E7%94%A8\\\"'></a><h4>[h2]V1和V2类相关装饰器混用</h4><p><strong>1.V1的自定义组件中使用被@ObservedV2装饰的类对象</strong></p>  <p>@ObservedV2的使用需要遵循如下规则：</p> <ul><li>@ObservedV2只能装饰Class，@Trace、@Type只能装饰类属性，且只能在@ObservedV2中使用。</li><li>@Track不可以在@ObservedV2中使用。</li><li>对于被@ObservedV2装饰的Class，不可以直接被V1的装饰器装饰，否则编译时报错。</li><li>示例中，开发者去掉报错的装饰器即可正常运行，被@Trace装饰的类属性变化时可以观察到变化，否则不可以观测到变化。</li></ul> <p><strong>2.V2的自定义组件中使用被@Observed装饰的类对象</strong></p> <pre class='\\\"typescript\\\"'>@Observed\\nclass Info {\\n  @Track myId: number;   \\t\\t  // 无观测能力，只能防止因其他属性改变而导致的连带刷新\\n  name: string;           \\t\\t  // 无观测能力\\n  @Trace trackId: number = 1; \\t  // @Trace作为V2的装饰器，不能在@Observed中使用，编译时报错；消除编译错误请去掉@Trace\\n  constructor(id?: number, name?: string) {\\n    this.myId = id || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@ObservedV2\\nclass message extends Info {      // @ObservedV2装饰的Class不能继承@Observed，编译时报错；消除编译错误请去掉@ObservedV2\\n}\\n\\nclass MessageInfo extends Info {  \\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  info1: Info = new Info();             // @Observed装饰的Class可以在V2中使用\\n  @Local info2: Info = new Info();      // @Observe装饰的Class不可以被V2的装饰器装饰，否则编译器报错；消除编译错误请去掉@Local\\n  @Local messageInfo: MessageInfo = new MessageInfo(); \\n  build() {\\n    Column() {\\n      Text(`info1 name: ${this.info1.name}`)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.info1.name += 'b';\\n        })\\n      Text(`info1 id: ${this.info1.myId}`)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.info1.myId += 1;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info2 id: ${this.info2.myId}`)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.info2.myId += 1;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      // 继承自@ObservedV2的Class被V2装饰器装饰，V2的装饰器无类属性观测能力，所以不建议在V2中使用@Observed装饰的Class\\n      Text(`messageInfo id: ${this.messageInfo.myId}`)   \\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.messageInfo.myId += 1;\\n        })\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin(5)\\n  }\\n}</pre> <p>不建议开发者在V2中使用@Observed装饰的Class，因为@Observed和@Track仅能对类属性做区分，无观测能力，使用@Observed和@ObjectLink拆分嵌套数据才能够观测深层次数据，但@ObjectLink无法在V2的自定义组件中使用。</p> <p>开发者在对V1的代码向V2迁移时，@Observed装饰的Class不建议在@ComponentV2中使用，无观测能力，如果一定要使用，则遵循以下规则：</p> <ul><li>@Observed只能装饰Class，且@Trace不可以在@Observed中使用。</li><li>@Observed和@Track无任何观测能力，只能用于防止Class中一个类属性改变而导致整个Class的刷新。</li><li>继承自@Observed的Class被V2装饰器装饰，V2的组件内装饰器无类属性观测能力，所以使用@Observed会无法观测到类属性变化。</li><li>示例中，开发者去掉报错的装饰器即可正常运行，由于无观测能力，所以不建议V2中使用@Observed。</li></ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-component-mixed-scenarios.html"
    },
    {
        "id": 619,
        "pre": "@ComponentV2\\nstruct Child {\\n  @Local message: string = \\\"hello\\\";\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world';\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child()\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": "Child()",
        "function_name": "[h2]不存在变量传递时，V1和V2的自定义组件混用",
        "parent_text": "[h2]不存在变量传递时，V1和V2的自定义组件混用1.V1中使用V2的自定义组件   V1中使用V2的自定义组件，当不存在变量传递时无影响，若涉及变量传递，请见下一节V1和V2的数据混用。 2.V2中使用V1的自定义组件 @Component\\nstruct Child {\\n  @State message: string = \\\"hello\\\";\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world';\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local message: string = 'Hello World';\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child()\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n} V2中使用V1的自定义组件，当不存在变量传递时无影响，若涉及变量传递，请见下一节V1和V2的数据混用。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"不存在变量传递时v1和v2的自定义组件混用\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212458__%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92%E6%97%B6v1%E5%92%8Cv2%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%B7%B7%E7%94%A8\\\"'></a><a name='\\\"%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92%E6%97%B6v1%E5%92%8Cv2%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%B7%B7%E7%94%A8\\\"'></a><h4>[h2]不存在变量传递时，V1和V2的自定义组件混用</h4><p><strong>1.V1中使用V2的自定义组件</strong> </p>  <p>V1中使用V2的自定义组件，当不存在变量传递时无影响，若涉及变量传递，请见下一节V1和V2的数据混用。</p> <p><strong>2.V2中使用V1的自定义组件</strong></p> <pre class='\\\"typescript\\\"'>@Component\\nstruct Child {\\n  @State message: string = \\\"hello\\\";\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world';\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local message: string = 'Hello World';\\n\\n  build() {\\n    Column() {\\n      Text(this.message)\\n        .fontSize(50)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child()\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}</pre> <p>V2中使用V1的自定义组件，当不存在变量传递时无影响，若涉及变量传递，请见下一节V1和V2的数据混用。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-component-mixed-scenarios.html"
    },
    {
        "id": 620,
        "pre": "class Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@ComponentV2\\nstruct Child {  \\n  // V2对数据输入有严格的管理，从父组件接受数据时，必须@Param装饰器进行数据接收\\n  @Param @Once message: string = \\\"hello\\\";\\t              // 可以观测到变化，同步回父组件依赖@Event，使用了@Once可以修改@Param装饰的变量\\n  @Param @Once undefinedVal: string | undefined = undefined;  // 使用了@Once可以修改@Param装饰的变量\\n  @Param info: Info = new Info();\\t\\t                 // 观测不到类属性变化\\n  @Require @Param set: Set<number>;\\n  \\n  build() {\\n    Column() {\\n      Text(`child message:${this.message}`) // 显示 string\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world';\\n        })\\n\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`undefinedVal:${this.undefinedVal}`) // 显示 undefinedVal\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.undefinedVal = \\\"change to define\\\";\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info id:${this.info.myId}`) // 显示 info:myId\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info.myId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      ForEach(Array.from(this.set.values()), (item: number) => {  // 显示 Set\\n        Text(`${item}`)\\n          .fontSize(30)\\n      })\\n    }\\n    .margin(5)\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  message: string = 'Hello World';       // 简单数据\\n  undefinedVal: undefined = undefined;    // 简单类型，undefined\\n  info: Info = new Info();               // Class类型\\n  set: Set<number> = new Set([10, 20]);  // 内置 类型\\n\\n  build() {\\n    Column() {\\n      Text(`message:${this.message}`)\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        undefinedVal: this.undefinedVal,\\n        info: this.info,\\n        set: this.set\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": "Divider()",
        "function_name": "[h2]存在变量传递时，V1和V2的自定义组件数据混用",
        "parent_text": "[h2]存在变量传递时，V1和V2的自定义组件数据混用1.V1->V2：V1的普通变量传递给V2的自定义组件  当V1的普通变量传递给V2的自定义组件时，有如下限制： V2的自定义组件必须通过@Param接收数据。接收数据的观测能力为@Param能力，对于接收的Class，需要通过@ObservedV2和@Trace才能观察变化。 2.V1->V2：V1的状态变量传递给V2的自定义组件 class Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@ComponentV2\\nstruct Child {  \\n  // V2对数据输入有严格的管理，从父组件接受数据时，必须@Param装饰器进行数据接收\\n  @Param @Once message: string = \\\"hello\\\";\\n  @Param @Once undefinedVal: string | undefined = undefined;  // 使用了@Once可以修改@Param装饰的变量\\n  @Param info: Info = new Info();\\n  @Require @Param set: Set<number>;\\n  build() {\\n    Column() {\\n      Text(`child message:${this.message}`) // 显示string\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`undefinedVal:${this.undefinedVal}`) // 显示undefinedVal\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.undefinedVal = \\\"change to define\\\";\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info id:${this.info.myId}`) // 显示info:myId\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info.myId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      ForEach(Array.from(this.set.values()), (item: number) => {  // 显示Set\\n        Text(`${item}`)\\n          .fontSize(30)\\n      })\\n    }\\n    .margin(5)\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';       // 简单类型数据，支持\\n  @State undefinedVal: undefined = undefined;    // 简单类型数据，undefined，支持\\n  @State info: Info = new Info();               // Class类型，不支持传递，编译器报错；消除编译错误请去掉@State\\n  @State set: Set<number> = new Set([10, 20]);  // 内置类型，不支持传递，编译器报错；消除编译错误请去掉@State\\n\\n  build() {\\n    Column() {\\n      Text(`message:${this.message}`)\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        undefinedVal: this.undefinedVal,\\n        info: this.info,\\n        set: this.set\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n} 当V1的状态变量给V2的自定义组件时，有如下规则： 仅支持简单类型变量，其余类型数据会在编译时报错。 示例中使用了@State装饰器，@Prop、@Link、@ObjectLink、@Provide、@Consume、@StorageProp、@StorageLink、@LocalStorageProp、@LocalStorageLink行为和@State保持一致。  3.V2->V1：V2的普通变量传递给V1的自定义组件 class Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@Component\\nstruct Child {  \\n  // V1从V2接收的状态变量，若使用装饰器，仅可使用@State、@Prop、@Provide接收\\n  @State  message: string = \\\"hello\\\";\\t         // 可以观测到变化\\n  @State info: Info = new Info();\\t\\t      \\t// 可以观测一层类属性变化\\n  @Prop undefinedVal: undefined | string = undefined;   \\n  @Provide setMap: Set<number> = new Set();\\n  build() {\\n    Column() {\\n      Text(`child message:${this.message}`) \\t// 显示string\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`undefinedVal:${this.undefinedVal}`) \\t// 显示undefinedVal\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.undefinedVal = \\\"change to define\\\";\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info id:${this.info.myId}`)\\t\\t \\t// 显示info:myId\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info.myId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      ForEach(Array.from(this.setMap.values()), (item: number) => {  // 显示 Set\\n        Text(`${item}`)\\n          .fontSize(30)\\n      })\\n    }\\n    .margin(5)\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  message: string = 'Hello World';       // 简单数据类型\\n  undefinedVal: undefined = undefined;    // 简单数据类型，undefined\\n  info: Info = new Info();               // Class类型\\n  set: Set<number> = new Set([10, 20]);  // 内置 类型\\n\\n  build() {\\n    Column() {\\n      Text(`message:${this.message}`)\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        undefinedVal: this.undefinedVal,\\n        info: this.info,\\n        setMap: this.set\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n} 当V2的普通变量传递给V1自定义组件时： V1可以不使用装饰器接收数据，接收过来的变量在V1组定义组件内也会是普通变量。 V1若使用装饰器接收数据，仅可通过@State、@Prop、@Provide接收。  4.V2->V1：V2的状态变量传递给V1的自定义组件 class Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@Component\\nstruct Child {  \\n  // V1从V2接收的状态变量，仅可使用@State、@Prop、@Provide接收\\n  @State  message: string = \\\"hello\\\";\\t        // 可以观测到变化\\n  @State info: Info = new Info();\\t\\t        // 可以观测一层类属性变化\\n  @Prop undefinedVal: undefined | string = undefined;\\n  @Provide set: Set<number> = new Set();\\n  build() {\\n    Column() {\\n      Text(`child message:${this.message}`) \\t// 显示 string\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`undefinedVal:${this.undefinedVal}`) \\t// 显示 undefinedVal\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.undefinedVal = \\\"change to define\\\";\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info id:${this.info.myId}`) \\t// 显示 info:myId\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.info.myId++;\\n        })\\n\\n      Divider()\\n        .color(Color.Blue)\\n      ForEach(Array.from(this.set.values()), (item: number) => {  // 显示 Set\\n        Text(`${item}`)\\n          .fontSize(30)\\n      })\\n    }\\n    .margin(5)\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local message: string = 'Hello World';       \\t// 简单数据类型，支持传递\\n  @Provider() undefinedVal: undefined = undefined;   // 简单数据类型，undefined，支持传递\\n  @Consumer() info: Info = new Info();          \\t// Class类型，支持传递\\n  @Param set: Set<number> = new Set([10, 20]);  \\t// 内置类型，不支持传递；消除编译错误请去掉@Param\\n\\n  build() {\\n    Column() {\\n      Text(`message:${this.message}`)\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() => {\\n          this.message = 'world hello';\\n        })\\n\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        undefinedVal: this.undefinedVal,\\n        info: this.info,\\n        set: this.set\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n} V2的状态变量传递给V1的自定义组件，存在如下限制： V1可以不使用装饰器接收数据，接收过来的变量在V1组定义组件内也会是普通变量。 V1若使用装饰器接收数据，仅可通过@State、@Prop、@Provide接收。 V1若使用装饰器接收数据，不支持内置类型的数据。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"存在变量传递时v1和v2的自定义组件数据混用\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212458__%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92%E6%97%B6v1%E5%92%8Cv2%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%B7%B7%E7%94%A8\\\"'></a><a name='\\\"%E5%AD%98%E5%9C%A8%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92%E6%97%B6v1%E5%92%8Cv2%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%B7%B7%E7%94%A8\\\"'></a><h4>[h2]存在变量传递时，V1和V2的自定义组件数据混用</h4><p><strong>1.V1-&gt;V2：V1的普通变量传递给V2的自定义组件</strong></p>  <p>当V1的普通变量传递给V2的自定义组件时，有如下限制：</p> <ul><li>V2的自定义组件必须通过@Param接收数据。</li><li>接收数据的观测能力为@Param能力，对于接收的Class，需要通过@ObservedV2和@Trace才能观察变化。</li></ul> <p><strong>2.V1-&gt;V2：V1的状态变量传递给V2的自定义组件</strong></p> <pre class='\\\"typescript\\\"'>class Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@ComponentV2\\nstruct Child {  \\n  // V2对数据输入有严格的管理，从父组件接受数据时，必须@Param装饰器进行数据接收\\n  @Param @Once message: string = \\\"hello\\\";\\n  @Param @Once undefinedVal: string | undefined = undefined;  // 使用了@Once可以修改@Param装饰的变量\\n  @Param info: Info = new Info();\\n  @Require @Param set: Set&lt;number&gt;;\\n  build() {\\n    Column() {\\n      Text(`child message:${this.message}`) // 显示string\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`undefinedVal:${this.undefinedVal}`) // 显示undefinedVal\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.undefinedVal = \\\"change to define\\\";\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info id:${this.info.myId}`) // 显示info:myId\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.info.myId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      ForEach(Array.from(this.set.values()), (item: number) =&gt; {  // 显示Set\\n        Text(`${item}`)\\n          .fontSize(30)\\n      })\\n    }\\n    .margin(5)\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';       // 简单类型数据，支持\\n  @State undefinedVal: undefined = undefined;    // 简单类型数据，undefined，支持\\n  @State info: Info = new Info();               // Class类型，不支持传递，编译器报错；消除编译错误请去掉@State\\n  @State set: Set&lt;number&gt; = new Set([10, 20]);  // 内置类型，不支持传递，编译器报错；消除编译错误请去掉@State\\n\\n  build() {\\n    Column() {\\n      Text(`message:${this.message}`)\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        undefinedVal: this.undefinedVal,\\n        info: this.info,\\n        set: this.set\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}</pre> <p>当V1的状态变量给V2的自定义组件时，有如下规则：</p> <ul><li><p>仅支持简单类型变量，其余类型数据会在编译时报错。</p> </li><li><p>示例中使用了@State装饰器，@Prop、@Link、@ObjectLink、@Provide、@Consume、@StorageProp、@StorageLink、@LocalStorageProp、@LocalStorageLink行为和@State保持一致。</p> </li></ul> <p><strong>3.V2-&gt;V1：V2的普通变量传递给V1的自定义组件</strong></p> <pre class='\\\"typescript\\\"'>class Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@Component\\nstruct Child {  \\n  // V1从V2接收的状态变量，若使用装饰器，仅可使用@State、@Prop、@Provide接收\\n  @State  message: string = \\\"hello\\\";\\t         // 可以观测到变化\\n  @State info: Info = new Info();\\t\\t      \\t// 可以观测一层类属性变化\\n  @Prop undefinedVal: undefined | string = undefined;   \\n  @Provide setMap: Set&lt;number&gt; = new Set();\\n  build() {\\n    Column() {\\n      Text(`child message:${this.message}`) \\t// 显示string\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`undefinedVal:${this.undefinedVal}`) \\t// 显示undefinedVal\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.undefinedVal = \\\"change to define\\\";\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info id:${this.info.myId}`)\\t\\t \\t// 显示info:myId\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.info.myId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      ForEach(Array.from(this.setMap.values()), (item: number) =&gt; {  // 显示 Set\\n        Text(`${item}`)\\n          .fontSize(30)\\n      })\\n    }\\n    .margin(5)\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  message: string = 'Hello World';       // 简单数据类型\\n  undefinedVal: undefined = undefined;    // 简单数据类型，undefined\\n  info: Info = new Info();               // Class类型\\n  set: Set&lt;number&gt; = new Set([10, 20]);  // 内置 类型\\n\\n  build() {\\n    Column() {\\n      Text(`message:${this.message}`)\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world hello';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        undefinedVal: this.undefinedVal,\\n        info: this.info,\\n        setMap: this.set\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}</pre> <p>当V2的普通变量传递给V1自定义组件时：</p> <ul><li><p>V1可以不使用装饰器接收数据，接收过来的变量在V1组定义组件内也会是普通变量。</p> </li><li><p>V1若使用装饰器接收数据，仅可通过@State、@Prop、@Provide接收。</p> </li></ul> <p><strong>4.V2-&gt;V1：V2的状态变量传递给V1的自定义组件</strong></p> <pre class='\\\"typescript\\\"'>class Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@Component\\nstruct Child {  \\n  // V1从V2接收的状态变量，仅可使用@State、@Prop、@Provide接收\\n  @State  message: string = \\\"hello\\\";\\t        // 可以观测到变化\\n  @State info: Info = new Info();\\t\\t        // 可以观测一层类属性变化\\n  @Prop undefinedVal: undefined | string = undefined;\\n  @Provide set: Set&lt;number&gt; = new Set();\\n  build() {\\n    Column() {\\n      Text(`child message:${this.message}`) \\t// 显示 string\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`undefinedVal:${this.undefinedVal}`) \\t// 显示 undefinedVal\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.undefinedVal = \\\"change to define\\\";\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`info id:${this.info.myId}`) \\t// 显示 info:myId\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.info.myId++;\\n        })\\n\\n      Divider()\\n        .color(Color.Blue)\\n      ForEach(Array.from(this.set.values()), (item: number) =&gt; {  // 显示 Set\\n        Text(`${item}`)\\n          .fontSize(30)\\n      })\\n    }\\n    .margin(5)\\n  }\\n}\\n\\n@Entry\\n@ComponentV2\\nstruct Index {\\n  @Local message: string = 'Hello World';       \\t// 简单数据类型，支持传递\\n  @Provider() undefinedVal: undefined = undefined;   // 简单数据类型，undefined，支持传递\\n  @Consumer() info: Info = new Info();          \\t// Class类型，支持传递\\n  @Param set: Set&lt;number&gt; = new Set([10, 20]);  \\t// 内置类型，不支持传递；消除编译错误请去掉@Param\\n\\n  build() {\\n    Column() {\\n      Text(`message:${this.message}`)\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .onClick(() =&gt; {\\n          this.message = 'world hello';\\n        })\\n\\n      Divider()\\n        .color(Color.Blue)\\n      Child({\\n        message: this.message,\\n        undefinedVal: this.undefinedVal,\\n        info: this.info,\\n        set: this.set\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}</pre> <p>V2的状态变量传递给V1的自定义组件，存在如下限制：</p> <ul><li><p>V1可以不使用装饰器接收数据，接收过来的变量在V1组定义组件内也会是普通变量。</p> </li><li><p>V1若使用装饰器接收数据，仅可通过@State、@Prop、@Provide接收。</p> </li><li><p>V1若使用装饰器接收数据，不支持内置类型的数据。</p> </li></ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-component-mixed-scenarios.html"
    },
    {
        "id": 621,
        "pre": "@Observed\\nclass Info {\\n  myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@Observed\\nclass MessageInfo { \\t\\t// 一层嵌套\\n  @Track info: Info;        // 防止messageId改变导致info的连带刷新\\n  @Track messageId: number; // 防止messageId改变导致info的连带刷新\\n\\n  constructor(info?: Info, messageId?: number) {\\n    this.info = info || new Info();   \\n    this.messageId = messageId || 0;\\n  }\\n}\\n\\n@Observed\\nclass MessageInfoNested {\\t // 二层嵌套\\n  messageInfo: MessageInfo;\\n\\n  constructor(messageInfo?: MessageInfo) {\\n    this.messageInfo = messageInfo || new MessageInfo();\\n  }\\n}\\n\\n@Component\\nstruct GrandSon {\\n  @ObjectLink info: Info;\\n\\n  build() {\\n    Column() {\\n      Text(`ObjectLink info info.myId:${this.info.myId}`)  // 经过@ObjectLink拆解两次之后，观测到变化\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.info.myId++;\\n        })\\n    }\\n  }\\n}\\n\\n@Component\\nstruct Child {\\n  @ObjectLink messageInfo: MessageInfo;\\n\\n  build() {\\n    Column() {\\n      Text(`ObjectLink MessageInfo messageId:${this.messageInfo.messageId}`)  // 经过@ObjectLink拆解之后，可以观测一层类属性变化\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.messageInfo.messageId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`ObjectLink MessageInfo info.myId:${this.messageInfo.info.myId}`)  // 经过@ObjectLink拆解之后，依旧观测不到变化\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.messageInfo.info.myId++;\\n        })\\n      GrandSon({info: this.messageInfo.info});\\t\\t\\t\\t// 继续拆解一层子组件\\n    }\\n  }\\n}\\n\\n\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State messageInfoNested: MessageInfoNested = new MessageInfoNested();  // 三层嵌套的数据，需要对所有数据进行观测。\\n\\n  build() {\\n    Column() {\\n      // 观察messageInfoNested\\n      Text(`messageInfoNested messageId:${this.messageInfoNested.messageInfo.messageId}`)  // @State只有一层类属性观测能力，无法观察到变化\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.messageInfoNested.messageInfo.messageId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      // 通过@ObjectLink嵌套观察 messageInfoId\\n      Child({messageInfo: this.messageInfoNested.messageInfo})      // 经过拆分后，使用@ObjectLink拆分可以观察到深一层的变化\\n      Divider()\\n        .color(Color.Blue)\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin(10)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用@Observed+@ObjectLink观测嵌套类",
        "parent_text": "[h2]使用@Observed+@ObjectLink观测嵌套类 示例给出了一个三层嵌套的场景，可以看到： V1装饰器的观测能力是对数据本身做代理，因此当数据存在嵌套时，V1只能通过@Observed+@ObjectLink的方式进行拆分子组件观测深层次数据。@Track是用来防止MessageInfo类中的info被messageId改变而连带刷新，开发者去掉@Track可观测到，当messageId改变时，info的连带改变，但是这并不是@ObjectLink的观测能力。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用observedobjectlink观测嵌套类\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212458__%E4%BD%BF%E7%94%A8observedobjectlink%E8%A7%82%E6%B5%8B%E5%B5%8C%E5%A5%97%E7%B1%BB\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8observedobjectlink%E8%A7%82%E6%B5%8B%E5%B5%8C%E5%A5%97%E7%B1%BB\\\"'></a><h4>[h2]使用@Observed+@ObjectLink观测嵌套类</h4> <p>示例给出了一个三层嵌套的场景，可以看到：</p> <ul><li>V1装饰器的观测能力是对数据本身做代理，因此当数据存在嵌套时，V1只能通过@Observed+@ObjectLink的方式进行拆分子组件观测深层次数据。</li><li>@Track是用来防止MessageInfo类中的info被messageId改变而连带刷新，开发者去掉@Track可观测到，当messageId改变时，info的连带改变，但是这并不是@ObjectLink的观测能力。</li></ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-component-mixed-scenarios.html"
    },
    {
        "id": 622,
        "pre": "@ObservedV2\\nclass Info {\\n  @Trace myId: number;\\n  name: string;\\n\\n  constructor(myId?: number, name?: string) {\\n    this.myId = myId || 0;\\n    this.name = name || 'aaa';\\n  }\\n}\\n\\n@Observed\\nclass MessageInfo { // 一层嵌套\\n  @Track info: Info;        // 防止messageId改变导致info的连带刷新\\n  @Track messageId: number; // 防止messageId改变导致info的连带刷新\\n\\n  constructor(info?: Info, messageId?: number) {\\n    this.info = info || new Info();   // 使用传入的info或创建一个新的Info\\n    this.messageId = messageId || 0;\\n  }\\n}\\n\\n@Observed\\nclass MessageInfoNested { // 二层嵌套，MessageInfoNested如果是被@ObservedV2装饰，则不可以被V1的状态变量更新相关的装饰器装饰，如@State\\n  messageInfo: MessageInfo;\\n\\n  constructor(messageInfo?: MessageInfo) {\\n    this.messageInfo = messageInfo || new MessageInfo();\\n  }\\n}\\n\\n@Component\\nstruct Child {\\n  @ObjectLink messageInfo: MessageInfo;\\n\\n  build() {\\n    Column() {\\n      Text(`ObjectLink MessageInfo messageId:${this.messageInfo.messageId}`)  // 经过@ObjectLink拆解之后，可以观测一层类属性变化\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.messageInfo.messageId++;\\n        })\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State messageInfoNested: MessageInfoNested = new MessageInfoNested();  // 三层嵌套的数据，如何观测内部。\\n\\n  build() {\\n    Column() {\\n      // 观察messageInfoNested，@State只有一层观测能力，无法观察到变化\\n      Text(`messageInfoNested messageId:${this.messageInfoNested.messageInfo.messageId}`)\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.messageInfoNested.messageInfo.messageId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`messageInfoNested name:${this.messageInfoNested.messageInfo.info.name}`)   // 未被@Trace修饰，无法观测\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.messageInfoNested.messageInfo.info.name += 'a';\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      Text(`messageInfoNested myId:${this.messageInfoNested.messageInfo.info.myId}`)   // 被@Trace修饰，无论嵌套多少层都能观测\\n        .fontSize(30)\\n        .onClick(() => {\\n          this.messageInfoNested.messageInfo.info.myId++;\\n        })\\n      Divider()\\n        .color(Color.Blue)\\n      // 通过@ObjectLink嵌套观察 messageInfoId\\n      Child({messageInfo: this.messageInfoNested.messageInfo})      // 经过拆分后，使用@ObjectLink拆分可以观察到深一层的变化\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin(10)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用@ObsevedV2+@Trace观测嵌套类",
        "parent_text": "[h2]使用@ObsevedV2+@Trace观测嵌套类 当使用@ObservedV2 + @Trace可以发现： @ObservedV2 + @Trace将观测能力嵌套到类属性上，所以当类属性被@Trace标记时，无论嵌套多少层都可以观测到变化。@ObservdV2和@Observed嵌套混用时，类对象能否被V1的装饰器装饰取决于最外层Class所使用的类装饰器，例如示例中嵌套在深处的@ObservedV2装饰的Class不影响最外层的Class被V1的装饰器装饰。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用obsevedv2trace观测嵌套类\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212458__%E4%BD%BF%E7%94%A8obsevedv2trace%E8%A7%82%E6%B5%8B%E5%B5%8C%E5%A5%97%E7%B1%BB\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8obsevedv2trace%E8%A7%82%E6%B5%8B%E5%B5%8C%E5%A5%97%E7%B1%BB\\\"'></a><h4>[h2]使用@ObsevedV2+@Trace观测嵌套类</h4> <p>当使用@ObservedV2 + @Trace可以发现：</p> <ul><li>@ObservedV2 + @Trace将观测能力嵌套到类属性上，所以当类属性被@Trace标记时，无论嵌套多少层都可以观测到变化。</li><li>@ObservdV2和@Observed嵌套混用时，类对象能否被V1的装饰器装饰取决于最外层Class所使用的类装饰器，例如示例中嵌套在深处的@ObservedV2装饰的Class不影响最外层的Class被V1的装饰器装饰。</li></ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-custom-component-mixed-scenarios.html"
    },
    {
        "id": 623,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  build() {\\n    Column() {\\n      // 添加书签\\n      Button('addBookmark').onClick(async () => {\\n        // 确保沙箱目录有input.pdf文档\\n        let filePath = this.context.filesDir + '/input.pdf';\\n        this.pdfDocument.loadDocument(filePath);\\n        // 创建书签\\n        let mark1: pdfService.Bookmark = this.pdfDocument.createBookmark();\\n        let mark2: pdfService.Bookmark = this.pdfDocument.createBookmark();\\n        // 设置书签的跳转信息\\n        let destInfo: pdfService.DestInfo = mark1.getDestInfo();\\n        destInfo.fitMode = pdfService.FitMode.FIT_MODE_XYZ;\\n        destInfo.pageIndex = 1;\\n        destInfo.left = 20;\\n        destInfo.top = 30;\\n        destInfo.zoom = 1.5;\\n        mark1.setDestInfo(destInfo);\\n        // 设置书签内容及样式\\n        let bookInfo: pdfService.BookmarkInfo = mark1.getBookmarkInfo();\\n        bookInfo.title = '这里是跳到第一页的书签';\\n        bookInfo.titleColor = 12;\\n        bookInfo.isBold = true;\\n        bookInfo.isItalic = true;\\n        mark1.setBookmarkInfo(bookInfo);\\n        // 把创建的书签插入到PDF页面\\n        this.pdfDocument.insertBookmark(mark1, null, 1);\\n        this.pdfDocument.insertBookmark(mark2, mark1, 1);\\n        // 设置保存文档沙箱路径并保存\\n        let outPdfPath = this.context.filesDir + '/testAddBookmark.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        hilog.info(0x0000, 'PdfPage', 'saveAddBookmark %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 删除书签\\n      Button('removeBookmark').onClick(async () => {\\n        // 确保沙箱目录有testAddBookmark.pdf文档\\n        this.pdfDocument.loadDocument(this.context.filesDir + '/testAddBookmark.pdf');\\n        let bookmarks: pdfService.Bookmark = this.pdfDocument.getRootBookmark();\\n        if (bookmarks.isRootBookmark()) {\\n          let hasRemoveBookmark: boolean = this.pdfDocument.removeBookmark(bookmarks);\\n          hilog.info(0x0000, 'PdfPage', 'removeBookmark %{public}s!', hasRemoveBookmark ? 'success' : 'fail');\\n          let outPdfPath = this.context.filesDir + '/testRemoveBookmark.pdf';\\n          let result = this.pdfDocument.saveDocument(outPdfPath);\\n          hilog.info(0x0000, 'PdfPage', 'saveRemoveBookmark %{public}s!', result ? 'success' : 'fail');\\n        }\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法，加载PDF文档。 调用createBookmark方法，创建书签。 调用setDestInfo方法，设置书签的跳转信息。 调用setBookmarkInfo方法，设置书签内容及样式。 设置保存文档沙箱路径并保存。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section57691356103515\\\"'> <a name='\\\"section57691356103515\\\"'></a><a name='\\\"section57691356103515\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>调用createBookmark方法，创建书签。</li> <li>调用setDestInfo方法，设置书签的跳转信息。</li> <li>调用setBookmarkInfo方法，设置书签内容及样式。</li> <li>设置保存文档沙箱路径并保存。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-add-bookmark.html"
    },
    {
        "id": 624,
        "pre": "OpenFileBoost_ErrCode ret = HMS_OpenFileBoost_UnregisterFilePreload();\\nif (ret != OPEN_FILE_BOOST_SUCCESS){\\n    // 取消注册失败，用户可自定义错误处理\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "用如不想再收到回调，或者在退出流程中，调用取消预加载接口。 ",
        "import_module": null,
        "parent": "<li id='\\\"zh-cn_topic_0000002157706170_li1956145119920\\\"'><span>用如不想再收到回调，或者在退出流程中，调用取消预加载接口。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/preview-openfileboost.html"
    },
    {
        "id": 625,
        "pre": "hvigorw test -p module={moduleName} -p coverage={true | false} -p scope={suiteName}#{methodName}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过命令行方式执行Local Test，在工程根目录下执行命令： module：执行测试的模块。缺省默认是执行所有模块的用例。coverage：是否生成覆盖率报告，缺省默认是true。覆盖率测试报告路径：<module-path>/.test/default/outputs/test/reports/index.html scope：格式为{suiteName}#{methodName}或{suiteName}，分别表示测试用例级别或测试套件级别的测试，缺省默认是执行当前模块的所有用例。 多个module和scope之间用英文逗号分割。   ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808044__p2508373311\\\"'>通过命令行方式执行Local Test，在工程根目录下执行命令： <ul id='\\\"ZH-CN_TOPIC_0000002166808044__ul16352189265\\\"'><li id='\\\"li1839917584520\\\"'>module：执行测试的模块。缺省默认是执行所有模块的用例。</li><li id='\\\"li13141185110448\\\"'>coverage：是否生成覆盖率报告，缺省默认是true。<p id='\\\"ZH-CN_TOPIC_0000002166808044__p2999527443\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166808044__li13141185110448\\\"'></a><a name='\\\"li13141185110448\\\"'></a>覆盖率测试报告路径：&lt;module-path&gt;/.test/default/outputs/test/reports/index.html</p> </li><li id='\\\"li109871928616\\\"'>scope：格式为{suiteName}#{methodName}或{suiteName}，分别表示测试用例级别或测试套件级别的测试，缺省默认是执行当前模块的所有用例。<div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808044__note168130595448\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180610.16587350767754563731796070663841:50001231000000:2800:1B4A32AD304E048310519BF4796C25A811138024FF38C7F938E85ED3E554FAC0.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808044__p18398740113710\\\"'>多个module和scope之间用英文逗号分割。</p> </div></div> </li></ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-local-test.html"
    },
    {
        "id": 626,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-no-func-as-arg-for-reusable-component\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-func-as-arg-for-reusable-component.html"
    },
    {
        "id": 627,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Reusable\\n@Component\\nstruct ChildComponent {\\n  @State desc: string = '';\\n  @State sum: number = 0;\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.desc = params.desc as string;\\n    this.sum = params.sum as number;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('子组件' + this.desc)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('结果' + this.sum)\\n        .fontSize(30)\\n        .fontWeight(30)\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private data: MyDataSource = new MyDataSource();\\n  @State sum: number = 0;\\n\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 20; index++) {\\n      this.data.pushData(index.toString())\\n    }\\n    // 执行该异步函数\\n    this.count();\\n  }\\n\\n  // 模拟耗时操作逻辑\\n  async count() {\\n    let temp: number = 0;\\n    for (let index = 0; index < 10000; index++) {\\n      temp += index;\\n    }\\n    // 将结果放入状态变量中\\n    this.sum = temp;\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        LazyForEach(this.data, (item: string) => {\\n          ListItem() {\\n            // 子组件的传参通过状态变量进行\\n            ChildComponent({ desc: item, sum: this.sum })\\n          }\\n          .width('100%')\\n          .height(100)\\n        }, (item: string) => item)\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-func-as-arg-for-reusable-component.html"
    },
    {
        "id": 628,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n// 此处为复用的自定义组件\\n@Reusable\\n@Component\\nstruct ChildComponent {\\n  @State desc: string = '';\\n  @State sum: number = 0;\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.desc = params.desc as string;\\n    this.sum = params.sum as number;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('子组件' + this.desc)\\n        .fontSize(30)\\n        .fontWeight(30)\\n      Text('结果' + this.sum)\\n        .fontSize(30)\\n        .fontWeight(30)\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 20; index++) {\\n      this.data.pushData(index.toString())\\n    }\\n  }\\n\\n  // 真实场景的函数中可能存在未知的耗时操作逻辑，此处用循环函数模拟耗时操作\\n  count(): number {\\n    let temp: number = 0;\\n    for (let index = 0; index < 10000; index++) {\\n      temp += index;\\n    }\\n    return temp;\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        LazyForEach(this.data, (item: string) => {\\n          ListItem() {\\n            // 此处sum参数是函数获取的，实际开发场景无法预料该函数可能出现的耗时操作，每次进行组件复用都会重复触发此函数的调用\\n            ChildComponent({ desc: item, sum: this.count() })\\n          }\\n          .width('100%')\\n          .height(100)\\n        }, (item: string) => item)\\n      }\\n      .height('100%')\\n      .width('100%')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-func-as-arg-for-reusable-component.html"
    },
    {
        "id": 629,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { walletTransitCard } from '@kit.WalletKit'\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ntransitCardClient: walletTransitCard.TransitCardClient = new walletTransitCard.TransitCardClient(this.getUIContext().getHostContext() as common.UIAbilityContext, 'callerId');\\n\\nasync getCardMetadataInDevice() {\\n  this.transitCardClient.getCardMetadataInDevice(walletTransitCard.DeviceType.DEVICE_PHONE).then((result) => {\\n    console.info(`Succeeded in getting cardMetadataInDevice`);\\n    // 展示交通卡列表信息\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to get CardMetadataInDevice, code:${err.code}, message:${err.message}`);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wallet-transport-delete.html"
    },
    {
        "id": 630,
        "pre": "import { navi } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      导入相关模块。       ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      导入相关模块。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-routes.html"
    },
    {
        "id": 631,
        "pre": "async testDrivingRoutes(){\\n  let params: navi.DrivingRouteParams = {\\n    // 起点的经纬度\\n    origins: [{\\n      \\\"latitude\\\": 31.982129213545843,\\n      \\\"longitude\\\": 120.27745557768591\\n    }],\\n    // 终点的经纬度\\n    destination: {\\n      \\\"latitude\\\": 31.982129213545843,\\n      \\\"longitude\\\": 120.27745557768591\\n    },\\n    // 路径的途经点\\n    waypoints: [{ \\\"latitude\\\": 31.967236140819114, \\\"longitude\\\": 120.27142088866847 },\\n      { \\\"latitude\\\": 31.972868002238872, \\\"longitude\\\": 120.2943211817165 },\\n      { \\\"latitude\\\": 31.98469327973332, \\\"longitude\\\": 120.29101107384068 }],\\n    language: \\\"zh_CN\\\"\\n  };\\n  const result = await navi.getDrivingRoutes(params);\\n  console.info(\\\"Succeeded in getting driving routes.\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]驾车路径规划",
        "parent_text": "  [h2]驾车路径规划 根据起终点坐标检索符合条件的驾车路径规划方案。支持以下功能：  支持一次请求返回多条路线，最多支持3条路线。 最多支持5个途经点。 支持未来出行规划。 支持根据实时路况进行合理路线规划。 支持多种路线偏好选择，如时间最短、避免经过收费的公路、避开高速公路、距离优先等。   ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section6867162831415\\\"'> <a name='\\\"section6867162831415\\\"'></a><a name='\\\"section6867162831415\\\"'></a> <h4>[h2]驾车路径规划</h4> <p>根据起终点坐标检索符合条件的驾车路径规划方案。支持以下功能：</p> <ul> <li>支持一次请求返回多条路线，最多支持3条路线。</li> <li>最多支持5个途经点。</li> <li>支持未来出行规划。</li> <li>支持根据实时路况进行合理路线规划。</li> <li>支持多种路线偏好选择，如时间最短、避免经过收费的公路、避开高速公路、距离优先等。</li> </ul>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-routes.html"
    },
    {
        "id": 632,
        "pre": "async testWalkingRoutes(){\\n  let params: navi.RouteParams = {\\n    // 起点的经纬度\\n    origins: [{ \\\"latitude\\\": 39.992281, \\\"longitude\\\": 116.31088 }, { \\\"latitude\\\": 39.996, \\\"longitude\\\": 116.311 }],\\n    // 终点的经纬度\\n    destination: { \\\"latitude\\\": 39.94, \\\"longitude\\\": 116.311 },\\n    language: \\\"zh_CN\\\"\\n  };\\n  const result = await navi.getWalkingRoutes(params);\\n  console.info(\\\"Succeeded in getting walking routes.\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]步行路径规划",
        "parent_text": "  [h2]步行路径规划 根据起终点坐标检索符合条件的步行路径规划方案。支持以下功能：  支持直线距离150km以内的步行路径规划能力。 融入出行策略（时间最短、避免轮渡）。   ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section097171617160\\\"'> <a name='\\\"section097171617160\\\"'></a><a name='\\\"section097171617160\\\"'></a> <h4>[h2]步行路径规划</h4> <p>根据起终点坐标检索符合条件的步行路径规划方案。支持以下功能：</p> <ul> <li>支持直线距离150km以内的步行路径规划能力。</li> <li>融入出行策略（时间最短、避免轮渡）。</li> </ul>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-routes.html"
    },
    {
        "id": 633,
        "pre": "async testCyclingRoutes() {\\n  let params: navi.RouteParams = {\\n    // 起点的经纬度\\n    origins: [{ latitude: 31.9844102, longitude: 118.7662537 }],\\n    // 终点的经纬度\\n    destination: { latitude: 31.9874102, longitude: 118.7362537 },\\n    language: \\\"zh_CN\\\"\\n  };\\n  const result = await navi.getCyclingRoutes(params);\\n  console.info(\\\"Succeeded in getting cycling routes.\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]骑行路径规划",
        "parent_text": "  [h2]骑行路径规划 根据起终点坐标检索符合条件的骑行路径规划方案。支持以下功能：  支持直线距离500km以内的骑行路径规划能力。 融入出行策略（时间最短、避免轮渡）。   ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1510619559185\\\"'> <a name='\\\"section1510619559185\\\"'></a><a name='\\\"section1510619559185\\\"'></a> <h4>[h2]骑行路径规划</h4> <p>根据起终点坐标检索符合条件的骑行路径规划方案。支持以下功能：</p> <ul> <li>支持直线距离500km以内的骑行路径规划能力。</li> <li>融入出行策略（时间最短、避免轮渡）。</li> </ul>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-routes.html"
    },
    {
        "id": 634,
        "pre": "import { healthService } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入运动健康服务功能模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入运动健康服务功能模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-three-ring-read.html"
    },
    {
        "id": 635,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nlet storageBucket: cloudStorage.StorageBucket = cloudStorage.bucket();\\n\\n@Component\\nexport struct testPage {\\n  build() {\\n  }\\n\\n  // 获取文件列表\\n  getList() {\\n    // 获取云存储默认实例中根路径下的文件列表\\n    storageBucket.list('').then((result: cloudStorage.ListResults) => {\\n      hilog.info(0x0000, 'testTag', `Succeeded in listing files, result: ${JSON.stringify(result)}`);\\n    }).catch((err: BusinessError) => {\\n      hilog.info(0x0000, 'testTag', `Failed to list files, code: ${err.code}, message: ${err.message}`);\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作步骤",
        "parent_text": "  操作步骤 调用StorageBucket.list可以获取云侧指定目录的文件列表。 完整示例代码如下：  获取文件列表信息结构如下： {\\n  directories: [\\\"empty-dir1\\\\/\\\", \\\"screenshot\\\\/\\\"],\\n  files: [\\\"IMG_20240229_103118.jpg\\\", \\\"IMG_20240318_093732.jpg\\\"]\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section149351743132017\\\"'> <a name='\\\"section149351743132017\\\"'></a><a name='\\\"section149351743132017\\\"'></a> <h4>操作步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section420475053513\\\"' target='\\\"_blank\\\"'>StorageBucket.list</a>可以获取云侧指定目录的文件列表。</p> <p>完整示例代码如下：</p>  <p>获取文件列表信息结构如下：</p> <pre class='\\\"typescript\\\"'>{\\n  directories: [\\\"empty-dir1\\\\/\\\", \\\"screenshot\\\\/\\\"],\\n  files: [\\\"IMG_20240229_103118.jpg\\\", \\\"IMG_20240318_093732.jpg\\\"]\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-list-files.html"
    },
    {
        "id": 636,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/space-before-function-paren\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-space-before-function-paren-stylistic.html"
    },
    {
        "id": 637,
        "pre": "function bar() {\\n  // doSomething\\n}\\nbar();",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "function bar() {\\n  // doSomething\\n}\\nbar();",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-space-before-function-paren-stylistic.html"
    },
    {
        "id": 638,
        "pre": "// Unexpected space before function parentheses.\\nfunction bar () {\\n  // doSomething\\n}\\n// Unexpected space before function parentheses.\\nbar  ();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "function bar() {\\n  // doSomething\\n}\\nbar();",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-space-before-function-paren-stylistic.html"
    },
    {
        "id": 639,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/foreach-args-check\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-foreach-args-check.html"
    },
    {
        "id": 640,
        "pre": "@Entry\\n@Component\\nstruct ForeachTest {\\n  private data: string[] = ['1', '2', '3'];\\n  build() {\\n    RelativeContainer() {\\n      List() {\\n        ForEach(this.data, (item: string, index: number) => {\\n          ListItem() {\\n            Text(item);\\n          }\\n        }, (item: string, index: number) => item)\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-foreach-args-check.html"
    },
    {
        "id": 641,
        "pre": "@Entry\\n@Component\\nstruct ForeachTest {\\n  private data: string[] = ['1', '2', '3'];\\n  build() {\\n    RelativeContainer() {\\n      List() {\\n        // ForEach缺少第三个参数，告警\\n        ForEach(this.data, (item: string, index: number) => {\\n          ListItem() {\\n            Text(item);\\n          }\\n        })\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-foreach-args-check.html"
    },
    {
        "id": 642,
        "pre": "{\\n  \\\"name\\\": \\\"foo\\\",\\n  \\\"version\\\": \\\"2.0.0\\\",\\n  \\\"description\\\": \\\"Please describe the basic information.\\\",\\n }",
        "type": "Reference",
        "function_call": null,
        "function_name": "enforce_dependency_key",
        "parent_text": "enforce_dependency_keyohpm从1.7.0版本开始，支持在.ohpmrc文件中支持配置enforce_dependency_key，该配置项值为布尔类型，默认为false。将配置设置为true后，ohpm会校验各模块的oh-package.json5中配置的直接依赖中的本地依赖名称与其对应的包名(模块名)是否一致，若不一致会导致依赖安装失败并在错误日志中打印出不一致的依赖名称与其对应的包名(模块名)。 示例： 在MyApplication工程下存在一个名称为foo的模块，foo模块的oh-package.json5如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section920325116547\\\"'><a name='\\\"section920325116547\\\"'></a><a name='\\\"section920325116547\\\"'></a><h4>enforce_dependency_key</h4><p id='\\\"ZH-CN_TOPIC_0000002166808232__p99264137551\\\"'>ohpm从1.7.0版本开始，支持在.ohpmrc文件中支持配置enforce_dependency_key，该配置项值为布尔类型，默认为false。将配置设置为true后，ohpm会校验各模块的oh-package.json5中配置的直接依赖中的本地依赖名称与其对应的包名(模块名)是否一致，若不一致会导致依赖安装失败并在错误日志中打印出不一致的依赖名称与其对应的包名(模块名)。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808232__p1886294245911\\\"'><strong>示例：</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002166808232__p65164625915\\\"'>在MyApplication工程下存在一个名称为foo的模块，foo模块的oh-package.json5如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpmrc.html"
    },
    {
        "id": 643,
        "pre": "import { PointPredictor } from '@kit.Penkit';",
        "type": "Import",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 1.导入相关模块。  2.获取当前页面的触摸事件信息，调用接口计算预测点信息。 @Component\\nstruct PointPredictorDemo {\\n  pointPredictor: PointPredictor = new PointPredictor();\\n  aboutToAppear() {\\n    console.info('getPredictionPoint aboutToAppear')\\n  }\\n  aboutToDisappear(){\\n    console.info('getPredictionPoint aboutToDisappear')\\n  }\\n\\n  build() {\\n    Stack({ alignContent: Alignment.TopEnd }) {\\n      this.Canvas() // 画布\\n    }.height('100%').width('100%')\\n  }\\n\\n  // 画布\\n  @Builder Canvas() {\\n    Stack()\\n      .width('100%')\\n      .height('100%')\\n      .onTouch((event: TouchEvent) => {\\n        switch (event.type) {\\n          case TouchType.Down: // 按下时，新建一条画图路径\\n            break;\\n          case TouchType.Move: // 使用预测算法进行预测,获得预测点\\n            let predictorPoint = this.pointPredictor?.getPredictionPoint(event)\\n            break;\\n          case TouchType.Up:\\n            break;\\n        }\\n      })\\n  }\\n} ",
        "import_module": "import { PointPredictor } from '@kit.Penkit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section5738151518181\\\"'> <a name='\\\"section5738151518181\\\"'></a><a name='\\\"section5738151518181\\\"'></a> <h4>开发步骤</h4> <p>1.导入相关模块。</p>  <p>2.获取当前页面的触摸事件信息，调用接口计算预测点信息。</p> <pre class='\\\"screen\\\"'><span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@Component</span>\\nstruct <span rgb(80,120,116);\\\"=\"\" style='\\\"color:'>PointPredictorDemo </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>pointPredictor</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>PointPredictor </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>new <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>PointPredictor</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>aboutToAppear</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>console</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>info</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'getPredictionPoint aboutToAppear'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>aboutToDisappear</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>console</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>info</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'getPredictionPoint aboutToDisappear'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>build</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Stack</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>alignContent</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Alignment</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TopEnd </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n      this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Canvas</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>画布</span>\\n    <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n\\n  <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>画布</span>\\n  <span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@Builder </span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Canvas</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Stack</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>()</span>\\n      <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n      <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n      <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>onTouch</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>((</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>TouchEvent</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n        switch <span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>type</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n          case <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TouchType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Down</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>按下时，新建一条画图路径</span>\\n            break<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n          case <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TouchType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Move</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>使用预测算法进行预测</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>,</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>获得预测点</span>\\n            let <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>predictorPoint </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span>this<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>pointPredictor</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>getPredictionPoint</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n            break<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n          case <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>TouchType</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Up</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>:</span>\\n            break<span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n        <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>      }</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span></pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pen-point-prediction.html"
    },
    {
        "id": 644,
        "pre": "\\\"dependencies\\\": {\\n  \\\"@ohos/lottie\\\": \\\"^2.0.0\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      在需要引入三方包的模块的oh-package.json5文件中设置三方包依赖，配置示例如下：       ",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"@ohos/lottie\\\": \\\"^2.0.0\\\"\\n}",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202174809__p178173414016\\\"'>      在需要引入三方包的模块的oh-package.json5文件中设置三方包依赖，配置示例如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-dependencies.html"
    },
    {
        "id": 645,
        "pre": "\\\"dependencies\\\": {\\n  \\\"folder\\\": \\\"file:../folder\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      在模块的oh-package.json5文件中设置本地文件夹，配置示例如下：       ",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"folder\\\": \\\"file:../folder\\\"\\n}",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202174809__p106557223462\\\"'>      在模块的oh-package.json5文件中设置本地文件夹，配置示例如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-dependencies.html"
    },
    {
        "id": 646,
        "pre": "\\\"dependencies\\\": {\\n  \\\"package\\\": \\\"file:../package.har\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "引用HAR：",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"package\\\": \\\"file:../package.har\\\"\\n}",
        "parent": "<li id='\\\"li10408994719\\\"'>引用HAR：</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-dependencies.html"
    },
    {
        "id": 647,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-enum-initializers\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-enum-initializers.html"
    },
    {
        "id": 648,
        "pre": "export enum Status {\\n  open = 'Open',\\n  close = 'Close'\\n}\\n\\nexport enum Direction {\\n  up = '1',\\n  down = '2'\\n}\\n\\nexport enum Color {\\n  red = 'Red',\\n  green = 'Green',\\n  blue = 'Blue'\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-enum-initializers.html"
    },
    {
        "id": 649,
        "pre": "export enum Status {\\n  open,\\n  close\\n}\\n\\nexport enum Direction {\\n  up,\\n  down\\n}\\n\\nexport enum Color {\\n  red,\\n  green = 'Green',\\n  blue\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-enum-initializers.html"
    },
    {
        "id": 650,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-remove-redundant-nest-container\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-redundant-nest.html"
    },
    {
        "id": 651,
        "pre": "@Entry  \\n@Component  \\nstruct MyComponent {  \\n  @State children: Number[] = Array.from(Array<number>(900), (v, k) => k);  \\n  \\n  build() {  \\n    Scroll() {  \\n      Grid() {  \\n        ForEach(this.children, (item: Number[]) => {  \\n          GridItem() {  \\n            Text(item.toString())  \\n          }.backgroundColor(Color.Yellow)  \\n        }, (item: string) => item)  \\n      }  \\n      .columnsTemplate('1fr 1fr 1fr 1fr')  \\n      .columnsGap(0)  \\n      .rowsGap(0)  \\n      .size({ width: \\\"100%\\\", height: \\\"100%\\\" })  \\n    }  \\n  }  \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-redundant-nest.html"
    },
    {
        "id": 652,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n    @State children: Number[] = Array.from(Array<number>(900), (v, k) => k);\\n    \\n    build() {\\n      Scroll() {\\n      Grid() {\\n        ForEach(this.children, (item: Number[]) => {\\n          GridItem() {\\n            // 冗余Stack\\n            Stack() {  \\n              Stack() {  \\n                Stack() {  \\n                  Text(item.toString())  \\n                }.size({ width: \\\"100%\\\"})  \\n              }.backgroundColor(Color.Yellow)  \\n            }.backgroundColor(Color.Pink)  \\n          }  \\n        }, (item: string) => item)  \\n      }  \\n      .columnsTemplate('1fr 1fr 1fr 1fr')  \\n      .columnsGap(0)  \\n      .rowsGap(0)  \\n      .size({ width: \\\"100%\\\", height: \\\"100%\\\" })  \\n    }  \\n  }  \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-no-redundant-nest.html"
    },
    {
        "id": 653,
        "pre": "# include <iostream>\\n\\nint& getStackReference() {\\n    int x = 5;\\n    return x;  // 返回 x 的引用\\n}\\n\\nint main() {\\n    int& ref = getStackReference();  // 获取 x 的引用\\n    // x 在 getStackReference 函数返回后被释放\\n    // ref 现在是悬空引用，继续访问会导致未定义行为\\n    std::cout << ref << std::endl;  // 试图输出 x 的值，这是未定义行为\\n    return 0;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "use after free问题。   返回临时变量、野指针：比如返回栈变量的引用，释放后未置空继续访问。  ",
        "import_module": null,
        "parent": "<li><p>use after free问题。</p> <p>  返回临时变量、野指针：比如返回栈变量的引用，释放后未置空继续访问。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cppcrash-guidelines.html"
    },
    {
        "id": 654,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { walletTransitCard } from '@kit.WalletKit'\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ntransitCardClient: walletTransitCard.TransitCardClient = new walletTransitCard.TransitCardClient(this.getUIContext().getHostContext() as common.UIAbilityContext, 'callerId');\\n\\nasync getCardMetadataInDevice() {\\n  this.transitCardClient.getCardMetadataInDevice(walletTransitCard.DeviceType.DEVICE_PHONE).then((result) => {\\n    console.info(`Succeeded in getting cardMetadataInDevice`);\\n    // 展示交通卡列表信息\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to get CardMetadataInDevice, code:${err.code}, message:${err.message}`);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wallet-transport-operation.html"
    },
    {
        "id": 655,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-onAnimationStart-for-swiper-preload\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-onanimationstart-in-swiper.html"
    },
    {
        "id": 656,
        "pre": "import image from '@ohos.multimedia.image';\\n// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { PhotoItem } from './component/ChildComponent';\\nimport { MyObject } from './data/DataEntry';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  cacheCount: number = 1\\n  swiperController: SwiperController = new SwiperController();\\n  private data: MyDataSource = new MyDataSource([]);\\n  context = getContext(this);\\n\\n  build() {\\n    Swiper(this.swiperController) {\\n      LazyForEach(this.data, (item: MyObject, index?: number) => {\\n        // 源码文件，请以工程实际为准\\n        PhotoItem({ myIndex: index, dataSource: this.data })\\n      }, (item: MyObject) => item.id) // item唯一id\\n    }\\n    .cachedCount(this.cacheCount)\\n    .indicator(true)\\n    .loop(false)\\n    // 在OnAnimationStart接口回调中进行预加载资源的操作\\n    .onAnimationStart((index: number, targetIndex: number) => {\\n      if (targetIndex !== index) {\\n        try {\\n          // 获取resourceManager资源管理器\\n          const resourceMgr = this.context.resourceManager;\\n          // 获取rawfile文件夹下icon.png的ArrayBuffer\\n          let str = \\\"item\\\" + (targetIndex + this.cacheCount + 2) + \\\".jpg\\\";\\n          resourceMgr.getRawFileContent(str).then((value) => {\\n            // 创建imageSource\\n            const imageSource = image.createImageSource(value.buffer);\\n            imageSource.createPixelMap().then((value) => {\\n              this.data.addData(targetIndex + this.cacheCount + 1, {\\n                description: \\\"\\\" + (targetIndex + this.cacheCount + 1),\\n                image: value\\n              })\\n            })\\n          })\\n        } catch (err) {\\n          console.log(\\\"error code\\\" + err);\\n        }\\n      }\\n    })\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-onanimationstart-in-swiper.html"
    },
    {
        "id": 657,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { PhotoItem } from './component/ChildComponent';\\nimport { MyObject } from './data/DataEntry';\\n\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  cacheCount: number = 1\\n  swiperController: SwiperController = new SwiperController();\\n  private data: MyDataSource = new MyDataSource([]);\\n  context = getContext(this);\\n\\n  build() {\\n    // Swiper组件没有使用OnAnimationStart进行预加载\\n    Swiper(this.swiperController) {\\n      LazyForEach(this.data, (item: MyObject, index?: number) => {\\n        // 源码文件，请以工程实际为准\\n        PhotoItem({ myIndex: index, dataSource: this.data })\\n      }, (item: MyObject) => item.id)\\n    }\\n    .cachedCount(this.cacheCount)\\n    .indicator(true)\\n    .loop(false)\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-onanimationstart-in-swiper.html"
    },
    {
        "id": 658,
        "pre": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/enterprise-recoverykey-export.html"
    },
    {
        "id": 659,
        "pre": "import BuildProfile from '${packageName}/BuildProfile';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "生成BuildProfile类文件后，在代码中可以通过如下方式引入该文件，其中packageName是模块级oh-package.json5文件中name字段对应的值。 ",
        "import_module": "import BuildProfile from '${packageName}/BuildProfile';",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p1087819461247\\\"'>生成BuildProfile类文件后，在代码中可以通过如下方式引入该文件，其中packageName是模块级oh-package.json5文件中name字段对应的值。 </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-get-build-profile-para-guide.html"
    },
    {
        "id": 660,
        "pre": "{\\n  \\\"apiType\\\": \\\"stageMode\\\",\\n  \\\"buildOption\\\": {\\n    \\\"arkOptions\\\": {\\n      \\\"buildProfileFields\\\": {\\n        \\\"data\\\": \\\"Data\\\",\\n      }\\n    }\\n  },\\n  \\\"buildOptionSet\\\": [\\n    {\\n      \\\"name\\\": \\\"release\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"buildProfileFields\\\": {\\n          \\\"buildOptionSetData\\\": \\\"BuildOptionSetDataRelease\\\",\\n          \\\"data\\\": \\\"DataRelease\\\"\\n        }\\n      }\\n    },\\n    {\\n      \\\"name\\\": \\\"debug\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"buildProfileFields\\\": {\\n          \\\"buildOptionSetData\\\": \\\"BuildOptionSetDataDebug\\\",\\n          \\\"data\\\": \\\"DataDebug\\\"\\n        }\\n      }\\n    }\\n  ],\\n  \\\"targets\\\": [\\n    {\\n      \\\"name\\\": \\\"default\\\",\\n      \\\"config\\\": {\\n        \\\"buildOption\\\": {\\n          \\\"arkOptions\\\": {\\n            \\\"buildProfileFields\\\": {\\n              \\\"targetData\\\": \\\"TargetData\\\",\\n              \\\"data\\\": \\\"DataTargetDefault\\\"\\n            }\\n          }\\n        }\\n      }\\n    },\\n    {\\n      \\\"name\\\": \\\"default1\\\",\\n      \\\"config\\\": {\\n        \\\"buildOption\\\": {\\n          \\\"arkOptions\\\": {\\n            \\\"buildProfileFields\\\": {\\n              \\\"targetData\\\": \\\"TargetData1\\\",\\n              \\\"data\\\": \\\"DataTargetDefault1\\\"\\n            }\\n          }\\n        }\\n      }\\n    },\\n    {\\n      \\\"name\\\": \\\"ohosTest\\\",\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]自定义参数",
        "parent_text": "[h2]自定义参数开发者可以在模块级的build-profile.json5文件中增加自定义参数，在生成BuildProfile类文件后，在代码中使用自定义参数。 自定义参数可以在buildOption、buildOptionSet、targets节点下的arkOptions子节点中通过增加buildProfileFields字段实现，自定义参数通过key-value键值对的方式配置，其中value取值仅支持number、string、boolean类型。 配置示例如下所示：  ",
        "import_module": "import BuildProfile from '${packageName}/BuildProfile';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section863683255419\\\"'><a name='\\\"section863683255419\\\"'></a><a name='\\\"zh-cn_topic_0000001653139922_section863683255419\\\"'></a><h4>[h2]自定义参数</h4><p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p3565184416549\\\"'>开发者可以在模块级的build-profile.json5文件中增加自定义参数，在生成BuildProfile类文件后，在代码中使用自定义参数。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p2571181814163\\\"'>自定义参数可以在buildOption、buildOptionSet、targets节点下的arkOptions子节点中通过增加buildProfileFields字段实现，自定义参数通过key-value键值对的方式配置，其中value取值仅支持number、string、boolean类型。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p2476131218277\\\"'>配置示例如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-get-build-profile-para-guide.html"
    },
    {
        "id": 661,
        "pre": "{\\n  \\\"apiType\\\": \\\"stageMode\\\",\\n  \\\"buildOption\\\": {\\n    \\\"arkOptions\\\": {\\n      \\\"buildProfileFields\\\": {\\n        \\\"data\\\": \\\"Data\\\",\\n      }\\n    }\\n  },\\n  \\\"buildOptionSet\\\": [\\n    {\\n      \\\"name\\\": \\\"release\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"buildProfileFields\\\": {\\n          \\\"buildOptionSetData\\\": \\\"BuildOptionSetDataRelease\\\",\\n          \\\"data\\\": \\\"DataRelease\\\"\\n        }\\n      }\\n    },\\n    {\\n      \\\"name\\\": \\\"debug\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"buildProfileFields\\\": {\\n          \\\"buildOptionSetData\\\": \\\"BuildOptionSetDataDebug\\\",\\n          \\\"data\\\": \\\"DataDebug\\\"\\n        }\\n      }\\n    }\\n  ],\\n  \\\"targets\\\": [\\n    {\\n      \\\"name\\\": \\\"default\\\",\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]自定义参数",
        "parent_text": "[h2]自定义参数开发者可以在模块级的build-profile.json5文件中增加自定义参数，在生成BuildProfile类文件后，在代码中使用自定义参数。 自定义参数可以在buildOption、buildOptionSet节点下的arkOptions子节点中通过增加buildProfileFields字段实现，自定义参数通过key-value键值对的方式配置，其中value取值仅支持number、string、boolean类型。 配置示例如下所示：  ",
        "import_module": "import BuildProfile from '${packageName}/BuildProfile';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section139617502595\\\"'><a name='\\\"section139617502595\\\"'></a><a name='\\\"zh-cn_topic_0000001653139922_section139617502595\\\"'></a><h4>[h2]自定义参数</h4><p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p148193612181\\\"'>开发者可以在模块级的build-profile.json5文件中增加自定义参数，在生成BuildProfile类文件后，在代码中使用自定义参数。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p18193615182\\\"'>自定义参数可以在buildOption、buildOptionSet节点下的arkOptions子节点中通过增加buildProfileFields字段实现，自定义参数通过key-value键值对的方式配置，其中value取值仅支持number、string、boolean类型。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p148133611817\\\"'>配置示例如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-get-build-profile-para-guide.html"
    },
    {
        "id": 662,
        "pre": "{\\n  \\\"app\\\": {\\n    \\\"signingConfigs\\\": [],\\n    \\\"products\\\": [\\n      {\\n        \\\"name\\\": \\\"default\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n        \\\"buildOption\\\": {\\n          \\\"arkOptions\\\": {\\n            \\\"buildProfileFields\\\": {\\n              \\\"productValue\\\": \\\"defaultValue\\\"\\n            }\\n          }\\n        }\\n      }\\n    ],\\n    \\\"buildModeSet\\\": [\\n      {\\n        \\\"name\\\": \\\"debug\\\",\\n        \\\"buildOption\\\": {\\n          \\\"arkOptions\\\": {\\n            \\\"buildProfileFields\\\": {\\n              \\\"productBuildModeValue\\\": \\\"debugValue\\\"\\n            }\\n          }\\n        }\\n      },\\n      {\\n        \\\"name\\\": \\\"release\\\"\\n      }\\n    ]\\n  },\\n  \\\"modules\\\": [\\n    {\\n      \\\"name\\\": \\\"entry\\\",\\n      \\\"srcPath\\\": \\\"./entry\\\",\\n      \\\"targets\\\": [\\n        {\\n          \\\"name\\\": \\\"default\\\",\\n          \\\"applyToProducts\\\": [\\n            \\\"default\\\"\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "工程级配置自定义构建参数",
        "parent_text": "工程级配置自定义构建参数开发者可以在工程级的build-profile.json5文件中增加自定义参数，该自定义参数会生成到所有模块的BuildProfile类文件，在代码中使用自定义参数。 自定义参数可以在工程级products、buildModeSet中的buildOption节点下的arkOptions子节点中通过增加buildProfileFields字段实现，自定义参数通过key-value键值对的方式配置，其中value取值仅支持number、string、boolean类型。 配置示例如下所示：  ",
        "import_module": "import BuildProfile from '${packageName}/BuildProfile';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section63421512324\\\"'><a name='\\\"section63421512324\\\"'></a><a name='\\\"zh-cn_topic_0000001653139922_section63421512324\\\"'></a><h4>工程级配置自定义构建参数</h4><p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p188901533645\\\"'>开发者可以在工程级的build-profile.json5文件中增加自定义参数，该自定义参数会生成到所有模块的BuildProfile类文件，在代码中使用自定义参数。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p118901733843\\\"'>自定义参数可以在工程级products、buildModeSet中的buildOption节点下的arkOptions子节点中通过增加buildProfileFields字段实现，自定义参数通过key-value键值对的方式配置，其中value取值仅支持number、string、boolean类型。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174857__zh-cn_topic_0000001653139922_p188902033042\\\"'>配置示例如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-get-build-profile-para-guide.html"
    },
    {
        "id": 663,
        "pre": "import { manager } from '@kit.NearLinkKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/nearlink-getstate.html"
    },
    {
        "id": 664,
        "pre": "import { pdfService, pdfViewManager, PdfView } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfController = new pdfViewManager.PdfController();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    (async () => {\\n      let loadResult: pdfService.ParseResult = await this.pdfController.loadDocument(filePath);\\n      if (pdfService.ParseResult.PARSE_SUCCESS === loadResult) {\\n        // 添加删除线批注\\n        this.pdfController.enableAnnotation(pdfViewManager.SupportedAnnotationType.STRIKETHROUGH, 0xAAEEEEEE);\\n      }\\n    })()\\n  }\\n\\n  build() {\\n    Column() {\\n      // 加载PdfView组件进行预览\\n      PdfView({\\n        controller: this.pdfController,\\n        pageFit: pdfService.PageFit.FIT_WIDTH,\\n        showScroll: true\\n      })\\n        .id('pdfview_app_view')\\n        .layoutWeight(1);\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  先加载PDF文档。 调用PdfView预览组件，渲染显示。 调用enableAnnotation方法，进入批注模式。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section146223174435\\\"'> <a name='\\\"section146223174435\\\"'></a><a name='\\\"section146223174435\\\"'></a> <h4>示例代码</h4> <ol> <li>先加载PDF文档。</li> <li>调用PdfView预览组件，渲染显示。</li> <li>调用enableAnnotation方法，进入批注模式。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-pdfview-annotation.html"
    },
    {
        "id": 665,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-mac\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section183141117720\\\"'><a name='\\\"section183141117720\\\"'></a><a name='\\\"section183141117720\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-mac.html"
    },
    {
        "id": 666,
        "pre": "import cryptoFramework from '@ohos.security.cryptoFramework';\\ncryptoFramework.createMac('SHA256');\\n\\nimport { CryptoJS } from '@ohos/crypto-js';\\nCryptoJS.HmacSHA256('Message').toString();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section48955454720\\\"'><a name='\\\"section48955454720\\\"'></a><a name='\\\"section48955454720\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-mac.html"
    },
    {
        "id": 667,
        "pre": "import cryptoFramework from '@ohos.security.cryptoFramework';\\ncryptoFramework.createMac('SHA1');\\n\\nimport { CryptoJS } from '@ohos/crypto-js';\\nCryptoJS.HmacSHA1('Message').toString();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section104211352597\\\"'><a name='\\\"section104211352597\\\"'></a><a name='\\\"section104211352597\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-mac.html"
    },
    {
        "id": 668,
        "pre": "import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { systemShare } from '@kit.ShareKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-interface-description.html"
    },
    {
        "id": 669,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/grid-columns-span\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_grid-columns-span.html"
    },
    {
        "id": 670,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Column() {\\n      GridRow({\\n        columns: { sm: 4, md: 8, lg: 12 }\\n      }) {\\n        GridCol({\\n          span: { sm: 4, md: 4, lg: 4 }, offset: { sm: 0, md: 2, lg: 4 }\\n        }) {\\n          Row().backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))\\n        }\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_grid-columns-span.html"
    },
    {
        "id": 671,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Column() {\\n      GridRow({\\n        columns: { sm: 4, md: 8, lg: 12 }\\n      }) {\\n        GridCol({\\n          span: { sm: 4, md: 8, lg: 12 }\\n        }) {\\n          Row().backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))\\n        }\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_grid-columns-span.html"
    },
    {
        "id": 672,
        "pre": "let isNext: boolean = true; // true为下一页, false为上一页\\nthis.readerComponentController.flipPage(isNext);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "当自定义翻页场景调用触发翻页时，调用flipPage接口即可实现翻页能力。",
        "import_module": null,
        "parent": "<li>当自定义翻页场景调用触发翻页时，调用flipPage接口即可实现翻页能力。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-flip-page.html"
    },
    {
        "id": 673,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-id-in-get-resource-sync-api\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-id-in-get-resource-sync-api.html"
    },
    {
        "id": 674,
        "pre": "import { BusinessError } from '@ohos.base';\\n\\ntry {\\n  // 本地resources中配置的color资源\\n  this.context.resourceManager.getColorSync($r('app.color.test').id);\\n} catch (error) {\\n  let code = (error as BusinessError).code;\\n  let message = (error as BusinessError).message;\\n  console.error(`getColorSync failed, error code: ${code}, message: ${message}.`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-id-in-get-resource-sync-api.html"
    },
    {
        "id": 675,
        "pre": "import { BusinessError } from '@ohos.base';\\n\\ntry {\\n  // 本地resources中配置的color资源\\n  this.context.resourceManager.getColorSync($r('app.color.test'));\\n} catch (error) {\\n  let code = (error as BusinessError).code;\\n  let message = (error as BusinessError).message;\\n  console.error(`getColorSync failed, error code: ${code}, message: ${message}.`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-id-in-get-resource-sync-api.html"
    },
    {
        "id": 676,
        "pre": "// 此代码可参考示例代码：ArSample/entry/src/main/cpp/types/libentry/index.d.ts。\\nimport { resourceManager } from '@kit.LocalizationKit';\\nexport const start:(id:string)=>void;\\nexport const show:(id:string)=>void;\\nexport const hide:(id:string)=>void;\\nexport const update:(id:string)=>number;\\nexport const stop:(id:string)=>void;\\nexport const init:(resmgr : resourceManager.ResourceManager)=>void;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]声明Native接口",
        "parent_text": "  [h2]声明Native接口 ArkTs接口声明。        建立ArkTs接口与C++接口之间的映射。      // 此代码可参考示例代码：ArSample/entry/src/main/cpp/src/module.cpp。\\nnapi_property_descriptor desc[] = {\\n    { \\\"init\\\", nullptr, Global::Init, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"start\\\", nullptr, NapiManager::NapiOnPageAppear, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"show\\\", nullptr, NapiManager::NapiOnPageShow, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"hide\\\", nullptr, NapiManager::NapiOnPageHide, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"update\\\", nullptr, NapiManager::NapiOnPageUpdate, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"stop\\\", nullptr, NapiManager::NapiOnPageDisappear, nullptr, nullptr, nullptr, napi_default, nullptr }\\n};  具体Native接口实现可参考示例代码。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1557014318265\\\"'> <a name='\\\"section1557014318265\\\"'></a><a name='\\\"section1557014318265\\\"'></a> <h4>[h2]声明Native接口</h4> <p>ArkTs接口声明。</p>  <div class='\\\"p\\\"'>      建立ArkTs接口与C++接口之间的映射。      <pre class='\\\"cpp\\\"'>// 此代码可参考示例代码：ArSample/entry/src/main/cpp/src/module.cpp。\\nnapi_property_descriptor desc[] = {\\n    { \\\"init\\\", nullptr, Global::Init, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"start\\\", nullptr, NapiManager::NapiOnPageAppear, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"show\\\", nullptr, NapiManager::NapiOnPageShow, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"hide\\\", nullptr, NapiManager::NapiOnPageHide, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"update\\\", nullptr, NapiManager::NapiOnPageUpdate, nullptr, nullptr, nullptr, napi_default, nullptr },\\n    { \\\"stop\\\", nullptr, NapiManager::NapiOnPageDisappear, nullptr, nullptr, nullptr, napi_default, nullptr }\\n};</pre> </div> <p>具体Native接口实现可参考<a href='\\\"https://gitee.com/harmonyos_samples/arengine_-sample-code_-clientdemo_cpp\\\"' target='\\\"_blank\\\"'>示例代码</a>。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arengine-plane-detection.html"
    },
    {
        "id": 677,
        "pre": "// 此代码可参考示例代码：ArSample/entry/src/main/ets/pages/ArWorld.ets。\\nimport { Logger } from '../utils/Logger';\\nimport arEngineDemo from 'libentry.so';\\nimport { resourceManager } from '@kit.LocalizationKit';\\nimport { display } from '@kit.ArkUI';\\n\\n@Entry\\n@Component\\nstruct ArWorld {\\n  private xcomponentId = 'ArWorld';\\n  private resMgr: resourceManager.ResourceManager = getContext(this).resourceManager;\\n  private interval: number = -1;\\n  private isUpdate: boolean = true;\\n\\n  aboutToAppear() {\\n    Logger.debug('aboutToAppear ' + this.xcomponentId);\\n    arEngineDemo.init(this.resMgr);\\n    arEngineDemo.start(this.xcomponentId);\\n    display.on(\\\"foldStatusChange\\\", (foldStatus: display.FoldStatus) => {\\n      Logger.info('foldStatusChange display on ' + foldStatus);\\n      if (foldStatus === display.FoldStatus.FOLD_STATUS_EXPANDED\\n        || foldStatus === display.FoldStatus.FOLD_STATUS_FOLDED) {\\n        arEngineDemo.stop(this.xcomponentId);\\n        arEngineDemo.init(this.resMgr);\\n        // 调用Native的start接口，创建ARSession。\\n        arEngineDemo.start(this.xcomponentId);\\n        arEngineDemo.show(this.xcomponentId);\\n      }\\n    })\\n  }\\n\\n  aboutToDisappear() {\\n    Logger.debug('aboutToDisappear ' + this.xcomponentId);\\n    arEngineDemo.stop(this.xcomponentId);\\n  }\\n\\n  onPageShow() {\\n    this.isUpdate = true;\\n    Logger.debug('onPageShow ' + this.xcomponentId);\\n    arEngineDemo.show(this.xcomponentId);\\n  }\\n\\n  onPageHide() {\\n    Logger.debug('onPageHide ' + this.xcomponentId);\\n    this.isUpdate = false;\\n    arEngineDemo.hide(this.xcomponentId);\\n  }\\n\\n  build() {\\n    Column() {\\n      XComponent({ id: this.xcomponentId, type: XComponentType.SURFACE, libraryname: 'entry' })\\n        .onLoad(() => {\\n          Logger.debug('XComponent onLoad ' + this.xcomponentId);\\n          this.interval = setInterval(() => {\\n            if (this.isUpdate) {\\n              // 调用Native的update，更新AR Engine每一帧的计算结果\\n              arEngineDemo.update(this.xcomponentId);\\n            }\\n          }, 33); // 控制帧率为30fps（每33毫秒刷新一帧）。\\n        })\\n        .width('100%')\\n        .height('100%')\\n        .onDestroy(() => {\\n          Logger.debug('XComponent onDestroy ' + this.xcomponentId);\\n          clearInterval(this.interval);\\n        })\\n        .backgroundColor(Color.White)\\n    }\\n    .justifyContent(FlexAlign.SpaceAround)\\n    .alignItems(HorizontalAlign.Center)\\n    .backgroundColor(Color.White)\\n    .borderRadius(24)\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]创建UI界面",
        "parent_text": "  [h2]创建UI界面 创建一个UI界面，用于显示相机预览画面，并定时触发每一帧绘制。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section161403203499\\\"'> <a name='\\\"section161403203499\\\"'></a><a name='\\\"section161403203499\\\"'></a> <h4>[h2]创建UI界面</h4> <p>创建一个UI界面，用于显示相机预览画面，并定时触发每一帧绘制。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arengine-plane-detection.html"
    },
    {
        "id": 678,
        "pre": "import { systemShare } from '@kit.ShareKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相关模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-utd-text.html"
    },
    {
        "id": 679,
        "pre": "import { detectBarcode, scanBarcode, scanCore } from '@kit.ScanKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { camera } from '@kit.CameraKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入图像识码接口和相关接口模块，该模块提供了图像识码参数和方法，导入方法如下。",
        "import_module": null,
        "parent": "<li>导入图像识码接口和相关接口模块，该模块提供了图像识码参数和方法，导入方法如下。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scan-decodeimage.html"
    },
    {
        "id": 680,
        "pre": "import hilog from '@ohos.hilog';\\n@Entry\\n@Component\\nstruct MyComponent{\\n  build() {\\n    Column() {\\n      Scroll()\\n        .onScroll(() => {\\n          //正例\\n          //hilog.info(1001, 'Index', 'onScroll')\\n          // do something\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-no-high-freq-log.html"
    },
    {
        "id": 681,
        "pre": "import hilog from '@ohos.hilog';\\n@Entry\\n@Component\\nstruct MyComponent{\\n  build() {\\n    Column() {\\n      Scroll()\\n        .onScroll(() => {\\n          // 高频操作中不建议写日志\\n          hilog.info(1001, 'Index', 'onScroll')\\n          // do something\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-no-high-freq-log.html"
    },
    {
        "id": 682,
        "pre": "// 步骤3 获取NotifyClient对象\\nlet notifyClient: wearEngine.NotifyClient = wearEngine.getNotifyClient(getContext(this));\\n\\n// 步骤4 构造NotificationOptions对象\\nlet button1: wearEngine.NotificationButton = {\\n  buttonId: wearEngine.ButtonId.FIRST_BUTTON,\\n  // 按钮内容最大长度为12字节\\n  content: 'button_1'\\n}\\nlet type1Notification: wearEngine.Notification = {\\n  type: wearEngine.NotificationType.NOTIFICATION_WITH_ONE_BUTTON,\\n  // 包名与标题的最大长度为28字节\\n  bundleName: 'bundleName',\\n  title: 'title',\\n  // 消息内容最大长度为400字节\\n  text: 'text',\\n  buttons: [button1]\\n}\\nlet options: wearEngine.NotificationOptions = {\\n  notification: type1Notification,\\n  onAction: (feedback: wearEngine.NotificationFeedback) => {\\n    console.info(`one button notify get feedback is ${feedback.action ? feedback.action : feedback.errorCode}`);\\n  }\\n}\\n\\n// 步骤5 发送模板化通知至设备侧\\nnotifyClient.notify(targetDevice.randomId, options).then(result => {\\n  console.info(`Succeeded in sending notification.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to send notification. Code is ${error.code}, message is ${error.message}`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用notify方法，从手机上的应用发送通知到穿戴设备侧。 ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section087562072313\\\"' target='\\\"_blank\\\"'>notify</a>方法，从手机上的应用发送通知到穿戴设备侧。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device_notification.html"
    },
    {
        "id": 683,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-wrap-waterflow-if-else-footer\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-wrap-waterflow-if-else-footer.html"
    },
    {
        "id": 684,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private datasource: MyDataSource = new MyDataSource();\\n  private showFooterStatus = 2;\\n\\n  aboutToAppear() {\\n    for (let i = 0; i <= 20; i++) {\\n      this.datasource.pushData(i)\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 2 }) {\\n      WaterFlow({ footer: (): void => this.itemFoot() }) {\\n        LazyForEach(this.datasource, (item: number) => {\\n          FlowItem() {\\n            ReusableFlowItem({ item: item })\\n\\n          }.onAppear(() => {\\n            if (item + 20 == this.datasource.totalCount()) {\\n              for (let i = 0; i < 100; i++) {\\n                this.datasource.AddLastItem()\\n              }\\n            }\\n          })\\n\\n          .width('100%')\\n        }, (item: string) => item)\\n      }\\n      .columnsTemplate('1fr 1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(5)\\n      .width('100%')\\n      .height('50%')\\n    }\\n  }\\n\\n  @Builder\\n  itemFoot() {\\n    //  外层加了一个column容器控制\\n    Column() {\\n      if (this.showFooterStatus == 1) {\\n        // Code to show try again\\n      } else if (this.showFooterStatus == 2) {\\n        // Code to show end\\n      } else {\\n        // Code to show footer loading\\n      }\\n    }\\n  }\\n}\\n\\n@Component\\n@Reusable\\nstruct ReusableFlowItem {\\n  @State item: number = 0\\n\\n  aboutToReuse(params: Record<string, ESObject>) {\\n    this.item = params.item;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('N' + this.item)\\n        .fontSize(12)\\n        .height('16')\\n      Image('res/waterFlowTest (' + this.item % 5 + ').jpg')\\n        .objectFit(ImageFit.Fill)\\n        .width('100%')\\n        .layoutWeight(1)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-wrap-waterflow-if-else-footer.html"
    },
    {
        "id": 685,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private datasource: MyDataSource = new MyDataSource();\\n  private showFooterStatus = 2;\\n\\n  aboutToAppear() {\\n    for (let i = 0; i <= 20; i++) {\\n      this.datasource.pushData(i)\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 2 }) {\\n      WaterFlow({ footer: (): void => this.itemFoot() }) {\\n        LazyForEach(this.datasource, (item: number) => {\\n          FlowItem() {\\n            ReusableFlowItem({ item: item })\\n\\n          }.onAppear(() => {\\n            if (item + 20 == this.datasource.totalCount()) {\\n              for (let i = 0; i < 100; i++) {\\n                this.datasource.AddLastItem()\\n              }\\n            }\\n          })\\n\\n          .width('100%')\\n        }, (item: string) => item)\\n      }\\n      .columnsTemplate('1fr 1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(5)\\n      .width('100%')\\n      .height('50%')\\n    }\\n  }\\n\\n  @Builder\\n  itemFoot() {\\n    //  这个作为footer的build的逻辑里有if逻辑，应该在外层加一个容器控制\\n    if (this.showFooterStatus == 1) {\\n      // Code to show try again\\n    } else if (this.showFooterStatus == 2) {\\n      // Code to show end\\n    } else {\\n      // Code to show footer loading\\n    }\\n  }\\n}\\n\\n@Component\\n@Reusable\\nstruct ReusableFlowItem {\\n  @State item: number = 0\\n\\n  aboutToReuse(params: Record<string, ESObject>) {\\n    this.item = params.item;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('N' + this.item)\\n        .fontSize(12)\\n        .height('16')\\n      Image('res/waterFlowTest (' + this.item % 5 + ').jpg')\\n        .objectFit(ImageFit.Fill)\\n        .width('100%')\\n        .layoutWeight(1)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-wrap-waterflow-if-else-footer.html"
    },
    {
        "id": 686,
        "pre": "{\\n  \\\"app\\\": {\\n    // bundleName需要与开发者在AppGallery Connect中创建应用时的包名保持一致\\n    \\\"bundleName\\\": \\\"com.huawei.***.***.demo\\\",\\n    // ...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "bundleName配置",
        "parent_text": "bundleName配置工程“AppScope/app.json5”下的bundleName需要与开发者在AppGallery Connect中创建应用时的包名保持一致。 配置内容示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14260143212514\\\"'><a name='\\\"section14260143212514\\\"'></a><a name='\\\"section14260143212514\\\"'></a><h4>bundleName配置</h4><p>工程“AppScope/app.json5”下的<strong>bundleName</strong>需要与开发者在<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>中<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/application-dev-overview#section13566816173114\\\"' target='\\\"_blank\\\"'>创建应用</a>时的包名保持一致。</p> <p>配置内容示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-iap-config-app.html"
    },
    {
        "id": 687,
        "pre": "\\\"module\\\":{\\n  \\\"type\\\": \\\"***\\\",\\n  \\\"name\\\": \\\"***\\\",\\n  \\\"description\\\": \\\"***\\\",\\n  \\\"mainElement\\\": \\\"***\\\",\\n  \\\"deviceTypes\\\": [***],\\n  // ...\\n  \\\"metadata\\\": [\\n  {\\n    \\\"name\\\": \\\"client_id\\\",\\n    \\\"value\\\": \\\"***\\\"\\n  },\\n  // ...\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在工程“entry/src/main/module.json5”的module节点增加如下client_id属性配置，用于数字商品服务接口的应用身份鉴权。 ",
        "import_module": null,
        "parent": "<li><span><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>在工程“entry/src/main/module.json5”的</span><strong rgb(36,39,40);\\\"=\"\" style='\\\"color:'>module</strong><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>节点增加如下</span><strong rgb(36,39,40);\\\"=\"\" style='\\\"color:'>client_id</strong><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>属性配置，用于数字商品服务接口的应用身份鉴权</span>。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-iap-config-app.html"
    },
    {
        "id": 688,
        "pre": "export const registerWatcher: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将RegisterWatcher注册为ArkTS接口： 编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n} 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>将RegisterWatcher注册为ArkTS接口：</p> <p>编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口：</p> <pre>static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hiappevent-watcher-crash-events-ndk.html"
    },
    {
        "id": 689,
        "pre": "{\\n    \\\"ABILITY\\\": \\\"com.ohos.launcher.MainAbility\\\", // 前台应用界面\\n    \\\"BUNDLE\\\": \\\"com.ohos.launcher\\\", // 操作应用\\n    \\\"CENTER_X\\\": \\\"\\\", // 预留字段,暂未使用\\n    \\\"CENTER_Y\\\": \\\"\\\", // 预留字段,暂未使用\\n    \\\"EVENT_TYPE\\\": \\\"pointer\\\", //  \\n    \\\"LENGTH\\\": \\\"0\\\", // 总体步长\\n    \\\"OP_TYPE\\\": \\\"click\\\", //事件类型，当前支持点击、双击、长按、拖拽、滑动、抛滑动作录制\\n    \\\"VELO\\\": \\\"0.000000\\\", // 离手速度\\n    \\\"direction.X\\\": \\\"0.000000\\\",// 总体移动X方向\\n    \\\"direction.Y\\\": \\\"0.000000\\\", // 总体移动Y方向\\n    \\\"duration\\\": 33885000.0, // 手势操作持续时间\\n    \\\"fingerList\\\": [{\\n        \\\"LENGTH\\\": \\\"0\\\", // 总体步长\\n        \\\"MAX_VEL\\\": \\\"40000\\\", // 最大速度\\n        \\\"VELO\\\": \\\"0.000000\\\", // 离手速度\\n        \\\"W1_BOUNDS\\\": \\\"{\\\"bottom\\\":361,\\\"left\\\":37,\\\"right\\\":118,\\\"top\\\":280}\\\", // 起点控件bounds\\n        \\\"W1_HIER\\\": \\\"ROOT,3,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0\\\", // 起点控件hierarchy\\n        \\\"W1_ID\\\": \\\"\\\", // 起点控件id\\n        \\\"W1_Text\\\": \\\"\\\", // 起点控件text\\n        \\\"W1_Type\\\": \\\"Image\\\", // 起点控件类型\\n        \\\"W2_BOUNDS\\\": \\\"{\\\"bottom\\\":361,\\\"left\\\":37,\\\"right\\\":118,\\\"top\\\":280}\\\", // 终点控件bounds\\n        \\\"W2_HIER\\\": \\\"ROOT,3,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0\\\", // 终点控件hierarchy\\n        \\\"W2_ID\\\": \\\"\\\", // 终点控件id\\n        \\\"W2_Text\\\": \\\"\\\", // 终点控件text\\n        \\\"W2_Type\\\": \\\"Image\\\", // 终点控件类型\\n        \\\"X2_POSI\\\": \\\"47\\\", // 终点X\\n        \\\"X_POSI\\\": \\\"47\\\", // 起点X\\n        \\\"Y2_POSI\\\": \\\"301\\\", // 终点Y\\n        \\\"Y_POSI\\\": \\\"301\\\", // 起点Y\\n        \\\"direction.X\\\": \\\"0.000000\\\", // x方向移动量\\n        \\\"direction.Y\\\": \\\"0.000000\\\" // Y方向移动量\\n    }],\\n    \\\"fingerNumber\\\": \\\"1\\\" //手指数量\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]用户录制操作",
        "parent_text": "[h2]用户录制操作 录制过程中，需等待当前操作的识别结果在命令行输出后，再进行下一步操作。  # 将当前界面操作记录到/data/local/tmp/record.csv，结束录制操作使用Ctrl+C结束录制。\\nhdc shell uitest uiRecord record\\n# 读取并打印录制数据。\\nhdc shell uitest uiRecord read 以下举例为：record数据中包含的字段及字段含义，仅供参考。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"用户录制操作\\\"'><a name='\\\"ZH-CN_TOPIC_0000002214282306__%E7%94%A8%E6%88%B7%E5%BD%95%E5%88%B6%E6%93%8D%E4%BD%9C\\\"'></a><a name='\\\"%E7%94%A8%E6%88%B7%E5%BD%95%E5%88%B6%E6%93%8D%E4%BD%9C\\\"'></a><h4>[h2]用户录制操作</h4><div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002214282306__note1363509907142907\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250320161406.00787824473569253919326497626386:50001231000000:2800:03567746218B5C7936287E2EAC6FD016B659B1D0C74855E0B5F952D6F14A0482.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002214282306__p1041201572142907\\\"'>录制过程中，需等待当前操作的识别结果在命令行输出后，再进行下一步操作。</p> </div></div> <pre class='\\\"bash\\\"' id='\\\"ZH-CN_TOPIC_0000002214282306__screen57719319142907\\\"'># 将当前界面操作记录到/data/local/tmp/record.csv，结束录制操作使用Ctrl+C结束录制。\\nhdc shell uitest uiRecord record\\n# 读取并打印录制数据。\\nhdc shell uitest uiRecord read</pre> <p id='\\\"ZH-CN_TOPIC_0000002214282306__p543420882142907\\\"'>以下举例为：record数据中包含的字段及字段含义，仅供参考。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkxtest-guidelines.html"
    },
    {
        "id": 690,
        "pre": "import { navigationInfoMgr } from '@kit.CarKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": "import { navigationInfoMgr } from '@kit.CarKit';",
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-set-sys-navi-status.html"
    },
    {
        "id": 691,
        "pre": "import { AbilityConstant, UIAbility } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { promptAction } from '@kit.ArkUI';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onContinue(wantParam: Record<string, Object>) {\\n    let targetVersion  = wantParam.version;  // 获取迁移对端应用的版本号\\n    // 应用可根据源端版本号设置支持接续的最小兼容版本号，源端版本号可从app.json5文件中的versionCode字段获取；防止目标端版本号过低导致不兼容。\\n    let versionThreshold: number = 0; // 替换为应用自己支持兼容的最小版本号\\n    // 兼容性校验    \\n    if (targetVersion < versionThreshold) {\\n      // 建议在校验版本兼容性失败后，提示用户拒绝迁移的原因\\n      promptAction.showToast({\\n           message: '目标端应用版本号过低，不支持接续，请您升级应用版本后再试',\\n           duration: 2000\\n      })\\n      // 在兼容性校验不通过时返回MISMATCH\\n      return AbilityConstant.OnContinueResult.MISMATCH;\\n    }\\n    console.info(`onContinue version = ${wantParam.version}, targetDevice: ${wantParam.targetDevice}`)\\n    // 迁移数据保存\\n    let continueInput = '迁移的数据';\\n    if (continueInput) {\\n      // 将要迁移的数据保存在wantParam的自定义字段（如：data）中;\\n      wantParam[\\\"data\\\"] = continueInput;\\n    }\\n     return AbilityConstant.OnContinueResult.AGREE;\\n  }\\n}",
        "type": "Reference",
        "function_call": "onContinue()",
        "function_name": null,
        "parent_text": "在源端UIAbility中实现onContinue()接口。当应用触发迁移时，onContinue()接口在源端被调用，开发者可以在该接口中保存迁移数据，实现应用兼容性检测，决定是否支持此次迁移。 保存迁移数据：开发者可以将要迁移的数据通过键值对的方式保存在wantParam中。（可选）检测应用兼容性：开发者可以在触发迁移时从onContinue()入参wantParam.version获取到迁移对端应用的版本号，与迁移源端应用版本号做兼容校验。应用在校验版本兼容性失败后，需要提示用户迁移失败的原因。 如果迁移过程中的兼容性问题对于应用迁移体验影响较小或无影响，可以跳过该步骤。  返回迁移结果：开发者可以通过onContinue()回调的返回值决定是否支持此次迁移，接口返回值详见AbilityConstant.OnContinueResult。 onContinue()接口传入的wantParam参数中，有部分字段由系统预置，开发者可以使用这些字段用于业务处理。同时，应用在保存自己的wantParam参数时，也应注意不要使用同样的key值，避免被系统覆盖导致数据获取异常。详见下表： 字段  含义    version  对端应用的版本号   targetDevice  对端设备的networkId       ",
        "import_module": null,
        "parent": "<li><span>在源端UIAbility中实现<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityoncontinue\\\"' target='\\\"_blank\\\"'>onContinue()</a>接口。</span><p></p><p>当应用触发迁移时，onContinue()接口在源端被调用，开发者可以在该接口中保存迁移数据，实现应用兼容性检测，决定是否支持此次迁移。</p> <ol><li>保存迁移数据：开发者可以将要迁移的数据通过键值对的方式保存在wantParam中。</li><li>（可选）检测应用兼容性：开发者可以在触发迁移时从onContinue()入参wantParam.version获取到迁移对端应用的版本号，与迁移源端应用版本号做兼容校验。应用在校验版本兼容性失败后，需要提示用户迁移失败的原因。<div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121312.44915059284670710287159841505460:50001231000000:2800:5EDB4B1DA1BBDD34AEE5DFECDE919F2FEF3F5A61F1711BC3855D1369AF1D8C06.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>如果迁移过程中的兼容性问题对于应用迁移体验影响较小或无影响，可以跳过该步骤。</p> </div></div> </li><li>返回迁移结果：开发者可以通过onContinue()回调的返回值决定是否支持此次迁移，接口返回值详见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-abilityconstant#oncontinueresult\\\"' target='\\\"_blank\\\"'>AbilityConstant.OnContinueResult</a>。</li></ol> <ul><li><p>onContinue()接口传入的wantParam参数中，有部分字段由系统预置，开发者可以使用这些字段用于业务处理。同时，应用在保存自己的wantParam参数时，也应注意不要使用同样的key值，避免被系统覆盖导致数据获取异常。详见下表：</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.2.3.2.3.1.2.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>字段</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.2.3.2.3.1.2.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>含义</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>version</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>对端应用的版本号</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>targetDevice</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>对端设备的networkId</p> </td> </tr> </tbody></table> </div> </li></ul>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-continuation-guide.html"
    },
    {
        "id": 692,
        "pre": "// EntryAbility.ets\\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nexport default class EntryAbility extends UIAbility {\\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\\n    // ...\\n    this.context.setMissionContinueState(AbilityConstant.ContinueState.INACTIVE, (result) => {\\n      console.info(`setMissionContinueState: ${JSON.stringify(result)}`);\\n    });\\n    // ...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在Ability的onCreate生命周期回调中，关闭迁移能力。 ",
        "import_module": null,
        "parent": "<li>在Ability的onCreate生命周期回调中，关闭迁移能力。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-continuation-guide.html"
    },
    {
        "id": 693,
        "pre": "// EntryAbility.ets\\nimport { AbilityConstant, UIAbility, wantConstant } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nexport default class EntryAbility extends UIAbility {\\n  // ...\\n  onContinue(wantParam: Record<string, Object>) {\\n    console.info(`onContinue version = ${wantParam.version}, targetDevice: ${wantParam.targetDevice}`);\\n    wantParam[wantConstant.Params.SUPPORT_CONTINUE_PAGE_STACK_KEY] = false;\\n    return AbilityConstant.OnContinueResult.AGREE;\\n  }\\n  // ...\\n  onWindowStageRestore(windowStage: window.WindowStage) {\\n      // 若不需要自动迁移页面栈信息，则需要在此处设置应用迁移后进入的页面\\n    windowStage.loadContent('pages/Index', (err, data) => {\\n      if (err.code) {\\n        console.info('Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\\n        return;\\n      }\\n      console.info('Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]按需迁移页面栈",
        "parent_text": "[h2]按需迁移页面栈支持应用动态选择是否进行页面栈恢复（默认进行页面栈信息恢复）。如果应用不想使用系统默认恢复的页面栈，则可以设置不进行页面栈迁移，而需要在onWindowStageRestore设置迁移后进入的页面，参数定义见SUPPORT_CONTINUE_PAGE_STACK_KEY。  当前仅支持router路由的页面栈信息自动恢复，暂不支持navigation路由的页面栈自动恢复。如果应用使用navigation路由，可以设置不进行页面栈迁移，并将需要接续的页面（或页面栈）信息保存在want中传递，然后在目标端手动加载指定页面。  应用在源端的页面栈中存在Index和Second路由，而在目标端恢复时不需要按照源端页面栈进行恢复，需要恢复到指定页面。 示例：应用迁移不需要自动迁移页面栈信息  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section34254151518\\\"'><a name='\\\"section34254151518\\\"'></a><a name='\\\"section34254151518\\\"'></a><h4>[h2]按需迁移页面栈</h4><p>支持应用动态选择是否进行页面栈恢复（默认进行页面栈信息恢复）。如果应用不想使用系统默认恢复的页面栈，则可以设置不进行页面栈迁移，而需要在onWindowStageRestore设置迁移后进入的页面，参数定义见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-wantconstant#wantconstantparams\\\"' target='\\\"_blank\\\"'>SUPPORT_CONTINUE_PAGE_STACK_KEY</a>。</p> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121312.24209261522633097880282112765960:50001231000000:2800:14F7F7F135DB20D39CDB9CB64A2B0B8581BF602DE27CCC36AE3D2E8CCBCD15AA.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ol><li>当前仅支持router路由的页面栈信息自动恢复，暂不支持navigation路由的页面栈自动恢复。</li><li>如果应用使用navigation路由，可以设置不进行页面栈迁移，并将需要接续的页面（或页面栈）信息保存在want中传递，然后在目标端手动加载指定页面。</li></ol> </div></div> <p>应用在源端的页面栈中存在Index和Second路由，而在目标端恢复时不需要按照源端页面栈进行恢复，需要恢复到指定页面。</p> <p>示例：应用迁移不需要自动迁移页面栈信息</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-continuation-guide.html"
    },
    {
        "id": 694,
        "pre": "import { AbilityConstant, UIAbility, wantConstant } from '@kit.AbilityKit';\\nexport default class EntryAbility extends UIAbility {\\n  // ...\\n  onContinue(wantParam: Record<string, Object>) {\\n    console.info(`onContinue version = ${wantParam.version}, targetDevice: ${wantParam.targetDevice}`);\\n    wantParam[wantConstant.Params.SUPPORT_CONTINUE_SOURCE_EXIT_KEY] = false;\\n    return AbilityConstant.OnContinueResult.AGREE;\\n  }\\n  // ...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]按需退出",
        "parent_text": "[h2]按需退出支持应用动态选择迁移成功后是否退出迁移源端应用（默认迁移成功后退出迁移源端应用）。如果应用不想让系统自动退出迁移源端应用，则可以设置不退出，参数定义见SUPPORT_CONTINUE_SOURCE_EXIT_KEY。 示例：应用迁移设置不需要迁移成功后退出迁移源端应用  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section976341819443\\\"'><a name='\\\"section976341819443\\\"'></a><a name='\\\"section976341819443\\\"'></a><h4>[h2]按需退出</h4><p>支持应用动态选择迁移成功后是否退出迁移源端应用（默认迁移成功后退出迁移源端应用）。如果应用不想让系统自动退出迁移源端应用，则可以设置不退出，参数定义见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-wantconstant#wantconstantparams\\\"' target='\\\"_blank\\\"'>SUPPORT_CONTINUE_SOURCE_EXIT_KEY</a>。</p> <p>示例：应用迁移设置不需要迁移成功后退出迁移源端应用</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-continuation-guide.html"
    },
    {
        "id": 695,
        "pre": "{\\n  \\\"module\\\": {\\n    // ...\\n    \\\"abilities\\\": [\\n      {\\n        // ...\\n        \\\"name\\\": \\\"EntryAbility\\\"\\n        \\\"continueType\\\": ['EntryAbility_ContinueQuickStart'], // 如果已经配置了continueType标签，可以在该标签值后添加'_ContinueQuickStart'后缀；如果没有配置continueType标签，可以使用AbilityName + '_ContinueQuickStart'作为continueType标签实现快速拉起目标应用\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]快速启动目标应用",
        "parent_text": "[h2]快速启动目标应用默认情况下，发起迁移后不会立即拉起对端的目标应用，而是等待迁移数据从源端传输到对端后才会拉起应用。若应用希望在用户发起接续后立即被拉起，减少等待时间，提升体验，可以在module.json5文件的continueType标签中添加“_ContinueQuickStart”后缀，配置快速启动目标应用能力。示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section693816163171\\\"'><a name='\\\"section693816163171\\\"'></a><a name='\\\"section693816163171\\\"'></a><h4>[h2]快速启动目标应用</h4><p>默认情况下，发起迁移后不会立即拉起对端的目标应用，而是等待迁移数据从源端传输到对端后才会拉起应用。若应用希望在用户发起接续后立即被拉起，减少等待时间，提升体验，可以在module.json5文件的continueType标签中添加“_ContinueQuickStart”后缀，配置快速启动目标应用能力。示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-continuation-guide.html"
    },
    {
        "id": 696,
        "pre": "import { distributedDataObject } from '@kit.ArkData';\\nimport { UIAbility, AbilityConstant } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nconst TAG: string = '[MigrationAbility]';\\nconst DOMAIN_NUMBER: number = 0xFF00;\\n\\n// 业务数据定义\\nclass ParentObject {\\n  mother: string\\n  father: string\\n\\n  constructor(mother: string, father: string) {\\n    this.mother = mother\\n    this.father = father\\n  }\\n}\\n\\n// 支持字符、数字、布尔值、对象的传递\\nclass SourceObject {\\n  name: string | undefined\\n  age: number | undefined\\n  isVis: boolean | undefined\\n  parent: ParentObject | undefined\\n\\n  constructor(name: string | undefined, age: number | undefined, isVis: boolean | undefined, parent: ParentObject | undefined) {\\n    this.name = name\\n    this.age = age\\n    this.isVis = isVis\\n    this.parent = parent\\n  }\\n}\\n\\nexport default class MigrationAbility extends UIAbility {\\n  d_object?: distributedDataObject.DataObject;\\n\\n  async onContinue(wantParam: Record<string, Object>): Promise<AbilityConstant.OnContinueResult> {\\n    // ...\\n    let parentSource: ParentObject = new ParentObject('jack mom', 'jack Dad');\\n    let source: SourceObject = new SourceObject(\\\"jack\\\", 18, false, parentSource);\\n\\n    // 创建分布式数据对象\\n    this.d_object = distributedDataObject.create(this.context, source);\\n\\n    // 生成数据对象组网id，激活分布式数据对象\\n    let dataSessionId: string = distributedDataObject.genSessionId();\\n    this.d_object.setSessionId(dataSessionId);\\n\\n    // 将组网id存在want中传递到对端\\n    wantParam['dataSessionId'] = dataSessionId;\\n\\n    // 数据对象持久化，确保迁移后即使应用退出，对端依然能够恢复数据对象\\n    // 从wantParam.targetDevice中获取到对端设备的networkId作为入参\\n    await this.d_object.save(wantParam.targetDevice as string).then((result:\\n      distributedDataObject.SaveSuccessResponse) => {\\n      hilog.info(DOMAIN_NUMBER, TAG, `Succeeded in saving. SessionId: ${result.sessionId},\\n        version:${result.version}, deviceId:${result.deviceId}`);\\n    }).catch((err: BusinessError) => {\\n      hilog.error(DOMAIN_NUMBER, TAG, 'Failed to save. Error: ', JSON.stringify(err) ?? '');\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": "onContinue()",
        "function_name": null,
        "parent_text": "在源端UIAbility的onContinue()接口中创建分布式数据对象并保存数据，执行流程如下：在onContinue()接口中使用create()接口创建分布式数据对象，将所要迁移的数据填充到分布式数据对象数据中。调用genSessionId()接口生成数据对象组网id，并使用该id调用setSessionId()加入组网，激活分布式数据对象。使用save()接口将已激活的分布式数据对象持久化，确保源端退出后对端依然可以获取到数据。将生成的sessionId通过want传递到对端，供对端激活同步使用。  分布式数据对象需要先激活，再持久化，因此必须在调用setSessionId()后再调用save()接口。对于源端迁移后需要退出的应用，为了防止数据未保存完成应用就退出，应采用await的方式等待save()接口执行完毕。从API 12 起，onContinue()接口提供了async版本供该场景使用。当前，wantParams中“sessionId”字段在迁移流程中被系统占用，建议开发者在wantParams中定义其他key值存储该分布式数据对象生成的id，避免数据异常。  示例代码如下：   ",
        "import_module": null,
        "parent": "<li><span>在源端UIAbility的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityoncontinue\\\"' target='\\\"_blank\\\"'>onContinue()</a>接口中创建分布式数据对象并保存数据，执行流程如下：</span><p></p><ol><li>在onContinue()接口中使用create()接口创建分布式数据对象，将所要迁移的数据填充到分布式数据对象数据中。</li><li>调用genSessionId()接口生成数据对象组网id，并使用该id调用setSessionId()加入组网，激活分布式数据对象。</li><li>使用save()接口将已激活的分布式数据对象持久化，确保源端退出后对端依然可以获取到数据。</li><li>将生成的sessionId通过want传递到对端，供对端激活同步使用。</li></ol> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121313.00192216932794427298906337960179:50001231000000:2800:E8FFDA4FF469C1834B7E38C7FE0981F429CA412C1FEE6817AEEEB2DEEA891510.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ul><li>分布式数据对象需要先激活，再持久化，因此必须在调用setSessionId()后再调用save()接口。</li><li>对于源端迁移后需要退出的应用，为了防止数据未保存完成应用就退出，应采用await的方式等待save()接口执行完毕。从API 12 起，onContinue()接口提供了async版本供该场景使用。</li><li>当前，wantParams中“sessionId”字段在迁移流程中被系统占用，建议开发者在wantParams中定义其他key值存储该分布式数据对象生成的id，避免数据异常。</li></ul> </div></div> <p>示例代码如下：</p>  <p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/app-continuation-guide.html"
    },
    {
        "id": 697,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-string-starts-ends-with\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-string-starts-ends-with.html"
    },
    {
        "id": 698,
        "pre": "@Entry\\n@Component\\nstruct LoginExample {\\n  pathInfos: NavPathStack = new NavPathStack();\\n  @State ReserveAccount: string = '';\\n  @State ReservePassword: string = '';\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'home_page') {\\n      HomePage()\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pathInfos) {\\n      Column({ space: 16 }) {\\n        Text(\\\"账户登录\\\").commonTitleStyles()\\n\\n        TextInput({ placeholder: '用户名' })\\n          .commonInputStyles()\\n          .type(InputType.USER_NAME) // 账号框使用USER_NAME属性\\n          .onChange((value: string) => {\\n            this.ReserveAccount = value;\\n          })\\n\\n        TextInput({ placeholder: '密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.Password) // 密码框使用Password属性\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        Button('登录')\\n          .width('100%')\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.pathInfos.pushPathByName('home_page', null)\\n          })\\n      }\\n      .padding(16)\\n    }\\n    .navDestination(this.PageMap)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}\\n\\n@Component\\nstruct HomePage {\\n  pathInfos: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text(\\\"Home Page\\\").commonTitleStyles()\\n      }.width('100%').height('100%')\\n    }.title(\\\"Home Page\\\")\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathInfos = context.pathStack;\\n    })\\n  }\\n}\\n\\n@Extend(Text)\\nfunction commonTitleStyles() {\\n  .fontSize(24)\\n  .fontColor('#000000')\\n  .fontWeight(FontWeight.Medium)\\n  .margin({ top: 24, bottom: 16 })\\n}\\n\\n@Extend(TextInput)\\nfunction commonInputStyles() {\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .opacity(0.6)\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n  .margin({ top: 16 })\\n}\\n\\n@Extend(Button)\\nfunction commonButtonStyles() {\\n  .width('100%')\\n  .height(40)\\n  .borderRadius(20)\\n  .margin({ top: 24 })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "账号密码登录",
        "parent_text": "账号密码登录 示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section13679181143915\\\"'><a name='\\\"section13679181143915\\\"'></a><a name='\\\"section13679181143915\\\"'></a><h4>账号密码登录</h4><p><span><img height='\\\"397.4439\\\"' originheight='\\\"601\\\"' originwidth='\\\"579\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120957.89359856304238953489871870659082:50001231000000:2800:C6F40AB8445AD264C3D0235F865D39DE78D74EE12046D7B7DDB1C41A9D1C21A5.png\\\"' title='\\\"点击放大\\\"' width='\\\"383.04\\\"'/></span></p> <p>示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-save-acc-password.html"
    },
    {
        "id": 699,
        "pre": "@Entry\\n@Component\\nstruct RegisterExample {\\n  pathInfos: NavPathStack = new NavPathStack();\\n  @State ReserveAccount: string = '';\\n  @State ReservePassword: string = '';\\n  @State enAbleAutoFill: boolean = true;\\n\\n  onBackPress() {\\n    // 当非成功登录、返回等页面跳转时将enAbleAutoFill设置为false，密码保险箱不使能\\n    this.enAbleAutoFill = false;\\n    return false;\\n  }\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'register_result_page') {\\n      RegisterResultPage()\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pathInfos) {\\n      Column() {\\n        Text(\\\"注册账号\\\")\\n          .commonTitleStyles()\\n\\n        TextInput({ placeholder: '用户名' })\\n          .commonInputStyles()\\n          .type(InputType.USER_NAME) // 账号框使用USER_NAME属性\\n          .onChange((value: string) => {\\n            this.ReserveAccount = value;\\n          })\\n\\n        TextInput({ placeholder: '新密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.NEW_PASSWORD) // 密码框使用 new Password 属性,可以触发生成强密码\\n          .enableAutoFill(this.enAbleAutoFill)\\n          .passwordRules('begin:[upper],special:[yes],len:[maxlen:32,minlen:12]')\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        Button('页面跳转')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n\\n        Button('页面跳转(跳转前关闭autofill）')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.enAbleAutoFill = false;\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n      }\\n    }\\n    .navDestination(this.PageMap)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}\\n\\n@Component\\nstruct RegisterResultPage {\\n  pathInfos: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text(\\\"Result Page\\\").commonTitleStyles()\\n      }.width('100%').height('100%')\\n    }.title(\\\"Result Page\\\")\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathInfos = context.pathStack;\\n    })\\n  }\\n}\\n\\n@Extend(Text)\\nfunction commonTitleStyles() {\\n  .fontSize(24)\\n  .fontColor('#000000')\\n  .fontWeight(FontWeight.Medium)\\n  .margin({ top: 24, bottom: 16 })\\n}\\n\\n@Extend(TextInput)\\nfunction commonInputStyles() {\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .opacity(0.6)\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n  .margin({ top: 16 })\\n}\\n\\n@Extend(Button)\\nfunction commonButtonStyles() {\\n  .width('100%')\\n  .height(40)\\n  .borderRadius(20)\\n  .margin({ top: 24 })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "账号密码注册",
        "parent_text": "账号密码注册 示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1460672643910\\\"'><a name='\\\"section1460672643910\\\"'></a><a name='\\\"section1460672643910\\\"'></a><h4>账号密码注册</h4><p><span><img height='\\\"382.3883\\\"' originheight='\\\"576\\\"' originwidth='\\\"577\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120957.77099278064367438699293684642546:50001231000000:2800:E0C02706CA0D49A554898198E6906CDD51A7748971763840810103CBF93EAE76.png\\\"' title='\\\"点击放大\\\"' width='\\\"383.04\\\"'/></span></p> <p>示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-save-acc-password.html"
    },
    {
        "id": 700,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-bubble.html"
    },
    {
        "id": 701,
        "pre": "this.mapController?.on(\\\"bubbleClick\\\", (bubble) => {\\n  console.info(`on-BubbleClick bubble = ${bubble.getId()}`);\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]设置监听气泡点击事件",
        "parent_text": "  [h2]设置监听气泡点击事件  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section7182124719591\\\"'> <a name='\\\"section7182124719591\\\"'></a><a name='\\\"section7182124719591\\\"'></a> <h4>[h2]设置监听气泡点击事件</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-bubble.html"
    },
    {
        "id": 702,
        "pre": "let animation: map.ScaleAnimation = new map.ScaleAnimation(1, 3, 1, 3);\\n// 设置动画单次的时长\\nanimation.setDuration(3000);\\n// 设置动画开始监听\\nlet callbackStart = () => {\\n  console.info(\\\"animationStart\\\", `callback`);\\n};\\nanimation.on(\\\"animationStart\\\", callbackStart);\\n// 设置动画结束监听\\nlet callbackEnd = () => {\\n  console.info(\\\"animationEnd\\\", `callback`);\\n};\\nanimation.on(\\\"animationEnd\\\", callbackEnd);\\n// 设置动画执行完成的状态\\nanimation.setFillMode(map.AnimationFillMode.BACKWARDS);\\n// 设置动画重复的方式\\nanimation.setRepeatMode(map.AnimationRepeatMode.REVERSE);\\n// 设置动画插值器\\nanimation.setInterpolator(Curve.Linear);\\n// 设置动画的重复次数\\nanimation.setRepeatCount(100);\\nthis.bubble.setAnimation(animation);\\nthis.bubble.startAnimation();",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]气泡动画",
        "parent_text": "  [h2]气泡动画 Bubble调用setAnimation(animation: Animation)设置动画。 Bubble调用startAnimation启动动画。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section150619459810\\\"'> <a name='\\\"section150619459810\\\"'></a><a name='\\\"section150619459810\\\"'></a> <h4>[h2]气泡动画</h4> <p rgb(38,38,38);\\\"=\"\" style='\\\"color:'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section199365514218\\\"' target='\\\"_blank\\\"'>Bubble</a>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section688810310374\\\"' target='\\\"_blank\\\"'>setAnimation</a>(animation: <a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section12142182165518\\\"' target='\\\"_blank\\\"'>Animation</a>)设置动画。</p> <p rgb(38,38,38);\\\"=\"\" style='\\\"color:'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section199365514218\\\"' target='\\\"_blank\\\"'>Bubble</a>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section15532754163419\\\"' target='\\\"_blank\\\"'>startAnimation</a>启动动画。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-bubble.html"
    },
    {
        "id": 703,
        "pre": "import { huks } from '@kit.UniversalKeystoreKit';\\n\\nlet keyAlias = 'serviceKey';  //业务密钥别名\\nlet isKeyExist: Boolean;\\n \\nlet huksOptions: huks.HuksOptions = {\\n  properties: []\\n}\\ntry {\\n  huks.hasKeyItem(keyAlias, huksOptions, (error, data) => {\\n    if (error) {\\n      console.error(`callback: hasKeyItem failed, ` + JSON.stringify(error));\\n    } else {\\n      if (data !== null && data.valueOf() !== null) {\\n        isKeyExist = data.valueOf();\\n        console.info(`callback: hasKeyItem success, isKeyExist = ${isKeyExist}`);\\n      }\\n    }\\n  });\\n} catch (error) {\\n  console.error(`callback: hasKeyItem input arg invalid, ` + JSON.stringify(error));\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "查询应用公私钥对是否存在",
        "parent_text": "查询应用公私钥对是否存在查询用于设备真实性证明的应用公私钥对是否存在，如果应用公私钥对已存在，则不需要重复创建应用公私钥对。 样例代码：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section16550423152920\\\"'><a name='\\\"section16550423152920\\\"'></a><a name='\\\"section16550423152920\\\"'></a><h4>查询应用公私钥对是否存在</h4><p>查询用于设备真实性证明的应用公私钥对是否存在，如果应用公私钥对已存在，则不需要重复创建应用公私钥对。</p> <p><strong>样例代码：</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device-attestation-apps.html"
    },
    {
        "id": 704,
        "pre": "import { huks } from '@kit.UniversalKeystoreKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nlet keyAlias = 'serviceKey'; //业务密钥别名\\n\\nfunction GetGenerateProperties() {\\n  let properties: Array<huks.HuksParam> = new Array();\\n  let index = 0;\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\\n    value: huks.HuksKeyAlg.HUKS_ALG_ECC\\n  };\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\\n  };\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN |\\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\\n  };\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\\n  }\\n  return properties;\\n}\\n\\nasync function GenerateKey(keyAlias: string) {\\n  let genProperties = GetGenerateProperties();\\n  let options: huks.HuksOptions = {\\n    properties: genProperties\\n  }\\n  await huks.generateKeyItem(keyAlias, options)\\n    .then(() => {\\n      console.info(`promise: generate Key success.`);\\n    }).catch((err: BusinessError) => {\\n      console.error(`promise: generate Key failed, error: ` + err.message);\\n    })\\n}\\n",
        "type": "Reference",
        "function_call": null,
        "function_name": "创建应用公私钥对",
        "parent_text": "创建应用公私钥对创建一个用于证明设备真实性和应用身份的非对称算法密钥对，称为应用公私钥对（包含应用公钥和应用私钥），比如RSA、EC算法的密钥对。通过Universal Keystore Kit场景的密钥对基于硬件的安全环境进行生成和安全存储。 安全建议：对于有用户登录的应用场景，为了提高安全性，建议为终端设备中登录的每个用户生成不同的密钥对，并在应用服务器绑定用户与应用公钥之间的关系。 样例代码：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section9498174318455\\\"'><a name='\\\"section9498174318455\\\"'></a><a name='\\\"section9498174318455\\\"'></a><h4>创建应用公私钥对</h4><p>创建一个用于证明设备真实性和应用身份的非对称算法密钥对，称为应用公私钥对（包含应用公钥和应用私钥），比如RSA、EC算法的密钥对。通过Universal Keystore Kit场景的密钥对基于硬件的安全环境进行生成和安全存储。</p> <p><strong>安全建议：对于有用户登录的应用场景，为了提高安全性，建议为终端设备中登录的每个用户生成不同的密钥对，并在应用服务器绑定用户与应用公钥之间的关系。</strong></p> <p><strong>样例代码：</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device-attestation-apps.html"
    },
    {
        "id": 705,
        "pre": "import { huks } from '@kit.UniversalKeystoreKit';\\n\\nclass HuksProperties {\\n  tag: huks.HuksTag = huks.HuksTag.HUKS_TAG_ALGORITHM;\\n  value: huks.HuksKeyAlg | huks.HuksKeySize | huks.HuksKeyPurpose | huks.HuksKeyDigest |\\n  huks.HuksKeyStorageType | huks.HuksKeyPadding | huks.HuksKeyGenerateType |\\n  huks.HuksCipherMode | Uint8Array = huks.HuksKeyAlg.HUKS_ALG_ECC;\\n}\\n\\nlet challenge = stringToUint8Array('challenge_data'); //从服务器获取的挑战字Challenge\\nlet keyAlias = 'serviceKey'; //业务密钥别名\\n\\nfunction stringToUint8Array(str: string): Uint8Array {\\n  let arr: number[] = [];\\n  for (let i = 0, j = str.length; i < j; ++i) {\\n    arr.push(str.charCodeAt(i));\\n  }\\n  let tmpUint8Array = new Uint8Array(arr);\\n  return tmpUint8Array;\\n}\\n\\nasync function anonAttestKey(): Promise<void> {\\n  let aliasString = keyAlias;\\n\\n  let properties: HuksProperties[] = [\\n    {\\n      tag: huks.HuksTag.HUKS_TAG_ATTESTATION_CHALLENGE,\\n      value: challenge\\n    }\\n  ];\\n\\n  let options: huks.HuksOptions = {\\n    properties: properties\\n  };\\n\\n  try {\\n    let data = await huks.anonAttestKeyItem(aliasString, options);\\n    //todo：把证书链信息（data变量）发送到云侧的服务器。如下示例代码把证书链打印到日志中，供调测使用，商用代码不需要打印。\\n    console.info(`anonAttestKeyItem success`);\\n    data.certChains?.forEach(cert => {\\n      console.info(cert);\\n    });\\n  } catch (error) {\\n    console.error(`promise: anonAttestKeyItem fail`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "对应用公钥进行证明",
        "parent_text": "对应用公钥进行证明应用调用Universal Keystore Kit接口对生成的应用公钥和调用的应用身份进行证明，Universal Keystore Kit会使用基于硬件的设备证书对应用公钥进行证明，证明公钥来自真实的设备。 Universal Keystore Kit返回密钥证明证书链，证书链采用X509标准格式。 安全建议：为了在发送密钥证明证书链给应用服务器时能够防重放攻击，建议应用先从应用服务器获取一次性的挑战值Challenge。应用服务器采用安全随机数生成挑战值Challenge，并缓存到服务器中。 样例代码：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section0457204074616\\\"'><a name='\\\"section0457204074616\\\"'></a><a name='\\\"section0457204074616\\\"'></a><h4>对应用公钥进行证明</h4><p>应用调用Universal Keystore Kit接口对生成的应用公钥和调用的应用身份进行证明，Universal Keystore Kit会使用基于硬件的设备证书对应用公钥进行证明，证明公钥来自真实的设备。</p> <p>Universal Keystore Kit返回密钥证明证书链，证书链采用X509标准格式。</p> <p><strong>安全建议：</strong><strong>为了在发送密钥证明证书链给应用服务器时能够防重放攻击，建议应用先从应用服务器获取一次性的挑战值Challenge。应用服务器采用安全随机数生成挑战值Challenge，并缓存到服务器中</strong>。</p> <p><strong>样例代码：</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device-attestation-apps.html"
    },
    {
        "id": 706,
        "pre": "import { huks } from '@kit.UniversalKeystoreKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { util } from '@kit.ArkTS';\\n\\nlet keyAlias = 'serviceKey'; //业务密钥别名\\nlet handle: number;\\nlet plaintext = '123456'; //待签名的明文数据，建议包含服务器端返回的Challenge\\nlet signature: Uint8Array; //存储签名结果数据的变量\\n\\nfunction StringToUint8Array(str: String) {\\n  let arr: number[] = new Array();\\n  for (let i = 0, j = str.length; i < j; ++i) {\\n    arr.push(str.charCodeAt(i));\\n  }\\n  return new Uint8Array(arr);\\n}\\n\\nfunction GetSignProperties() {\\n  let properties: Array<huks.HuksParam> = new Array();\\n  let index = 0;\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\\n    value: huks.HuksKeyAlg.HUKS_ALG_ECC\\n  };\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\\n  };\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN\\n  };\\n  properties[index++] = {\\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\\n  }\\n  return properties;\\n}\\n\\nasync function Sign(keyAlias: string, plaintext: string) {\\n  let signProperties = GetSignProperties();\\n  let options: huks.HuksOptions = {\\n    properties: signProperties,\\n    inData: StringToUint8Array(plaintext)\\n  }\\n  await huks.initSession(keyAlias, options)\\n    .then((data) => {\\n      handle = data.handle;\\n    }).catch((err: BusinessError) => {\\n      console.error(`promise: init sign failed, error: ` + err.message);\\n    })\\n  await huks.finishSession(handle, options)\\n    .then((data) => {\\n      signature = data.outData as Uint8Array;\\n\\n      let base64 = new util.Base64Helper();\\n      let signatureBase64 = base64.encodeToStringSync(signature);\\n      //todo：把签名结果的Base64编码（signatureBase64变量）发送到云侧的服务器。如下示例代码把签名结果打印到日志中，供调测使用，商用代码不需要打印。\\n      console.info(`sign success, result:` + signatureBase64);\\n\\n    }).catch((err: BusinessError) => {\\n      console.error(`promise: sign failed, error: ` + err.message);\\n    })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "使用应用私钥对业务请求进行签名",
        "parent_text": "使用应用私钥对业务请求进行签名在密钥证明流程处理成功后，应用在进行一些安全敏感的端云业务时，可以使用已证明的密钥对业务请求进行安全保护。 应用可以调用Universal Keystore Kit接口使用应用私钥对业务请求数据（如HTTP请求的Body）进行签名，然后把签名数据添加到请求消息中（如HTTP的Header字段）。为了方便应用服务器查找应用公钥用于验签，可以在业务请求中携带应用公钥的密钥ID（如：通过对应用公钥计算Hash）。 安全建议：为了在发送业务请求时能够防重放攻击，建议应用先从应用服务器获取一次性的挑战值Challenge。应用服务器采用安全随机数生成挑战值Challenge，并缓存到服务器中。 样例代码：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section13117165144720\\\"'><a name='\\\"section13117165144720\\\"'></a><a name='\\\"section13117165144720\\\"'></a><h4>使用应用私钥对业务请求进行签名</h4><p>在密钥证明流程处理成功后，应用在进行一些安全敏感的端云业务时，可以使用已证明的密钥对业务请求进行安全保护。</p> <p>应用可以调用Universal Keystore Kit接口使用应用私钥对业务请求数据（如HTTP请求的Body）进行签名，然后把签名数据添加到请求消息中（如HTTP的Header字段）。为了方便应用服务器查找应用公钥用于验签，可以在业务请求中携带应用公钥的密钥ID（如：通过对应用公钥计算Hash）。</p> <p><strong>安全建议：为了在发送业务请求时能够防重放攻击，建议应用先从应用服务器获取一次性的挑战值Challenge。应用服务器采用安全随机数生成挑战值Challenge，并缓存到服务器中</strong>。</p> <p><strong>样例代码：</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device-attestation-apps.html"
    },
    {
        "id": 707,
        "pre": "const session1 = rcp.createSession({\\n  requestConfiguration: {\\n    transfer: {\\n      timeout: {\\n        connectMs: 5000,\\n        transferMs: 5000\\n      }\\n    }\\n  }\\n});\\n\\nconst request1 = new rcp.Request('example1.com');\\nconst request2 = new rcp.Request('example2.com');\\nsession1.fetch(request1);\\nsession1.fetch(request2);\\nsession1.cancel(request1); // 取消request1请求\\nsession1.close();",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "应用可以通过使用Session来获取最佳的网络性能体验 ",
        "import_module": null,
        "parent": "<li>应用可以通过使用Session来获取最佳的网络性能体验 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-cpo.html"
    },
    {
        "id": 708,
        "pre": "// 定制DNS解析函数\\nconst session = rcp.createSession();\\nconst request = new rcp.Request('https://example.com');\\nrequest.configuration = {\\n  dns: {\\n    dnsRules: (host: string, port: number): IpAddress[] => {\\n      if (host === 'example.com') {\\n        return ['7.128.8.45', '7.128.8.46'];\\n      }\\n      return [];\\n    }\\n  }\\n};\\nsession.fetch(request);",
        "type": "Reference",
        "function_call": "createSession()",
        "function_name": "DNS阶段",
        "parent_text": "DNS阶段应用可定制DNS请求规则，如定制DNS服务器、重写DNS解析函数，从而获取最佳的DNS性能体验。  // 定制DNS服务器\\nconst session = rcp.createSession();\\nconst request = new rcp.Request('https://example.com');\\nrequest.configuration = {\\n  dns: {\\n    dnsRules: [\\n      {\\n        ip: '7.128.8.45',\\n        port: 53,\\n      },\\n    ]\\n  }\\n};\\nsession.fetch(request); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section16466365911\\\"'><a name='\\\"section16466365911\\\"'></a><a name='\\\"section16466365911\\\"'></a><h4>DNS阶段</h4><p>应用可<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/remote-communication-customdnsconfig#section5676104731714\\\"'>定制DNS</a>请求规则，如定制DNS服务器、重写DNS解析函数，从而获取最佳的DNS性能体验。</p>  <pre class='\\\"screen\\\"'>// 定制DNS服务器\\nconst session = rcp.createSession();\\nconst request = new rcp.Request('https://example.com');\\nrequest.configuration = {\\n  dns: {\\n    dnsRules: [\\n      {\\n        ip: '7.128.8.45',\\n        port: 53,\\n      },\\n    ]\\n  }\\n};\\nsession.fetch(request);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-cpo.html"
    },
    {
        "id": 709,
        "pre": "const session = rcp.createSession({\\n  connectionConfiguration: {\\n    maxConnectionsPerHost: 16,\\n    maxTotalConnections: 1024,\\n  }\\n});\\nfor (let i = 0; i < 1024; ++i) {\\n  session.get('https://example' + i.toString() + '.com/image.png');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "连接阶段",
        "parent_text": "连接阶段根据资源特征动态调整连接池大小  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1092020453316\\\"'><a name='\\\"section1092020453316\\\"'></a><a name='\\\"section1092020453316\\\"'></a><h4>连接阶段</h4><p>根据资源特征动态调整连接池大小</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-cpo.html"
    },
    {
        "id": 710,
        "pre": "// 使用响应体直接写入文件\\nconst session = rcp.createSession();\\nconst response = await session.get('https://example.com/video.mp4', {\\n  kind: 'file',\\n  file: './video.mp4',\\n});",
        "type": "Reference",
        "function_call": "createSession()",
        "function_name": null,
        "parent_text": "支持请求体分段上传，以节省内存 // 分段上传数据\\nconst session = rcp.createSession();\\nconst response = await session.post('https://example.com/video.mp4', (maxSize: number) => {\\n  return new ArrayBuffer(maxSize);\\n}); ",
        "import_module": null,
        "parent": "<li>支持请求体分段上传，以节省内存 <pre class='\\\"screen\\\"'>// 分段上传数据\\nconst session = rcp.createSession();\\nconst response = await session.post('https://example.com/video.mp4', (maxSize: number) =&gt; {\\n  return new ArrayBuffer(maxSize);\\n});</pre> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-cpo.html"
    },
    {
        "id": 711,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\n\\nlet bucket: cloudStorage.StorageBucket = cloudStorage.bucket(); // 将启动异步任务查询云侧默认实例",
        "type": "Reference",
        "function_call": "uploadFile(...)",
        "function_name": null,
        "parent_text": "使用默认实例 以“使用默认实例”方式初始化云存储实例，将启动异步任务去云侧查询默认实例。因此，当涉及多次云存储操作时，建议只初始化一次，后续的操作基于初始化一次的云存储实例进行，而非每次操作都初始化云存储实例。 // 只初始化一次云存储实例\\nlet bucket: cloudStorage.StorageBucket = cloudStorage.bucket(); \\nbucket.list(...); \\nbucket.uploadFile(...); 不建议： // 多次初始化云存储实例\\ncloudStorage.bucket().list(...);\\ncloudStorage.bucket().uploadFile(...); ",
        "import_module": null,
        "parent": "<li>使用默认实例 <p>以“使用默认实例”方式初始化云存储实例，将启动异步任务去云侧查询默认实例。因此，当涉及多次云存储操作时，建议只初始化一次，后续的操作基于初始化一次的云存储实例进行，而非每次操作都初始化云存储实例。</p> <pre class='\\\"typescript\\\"'>// 只初始化一次云存储实例\\nlet bucket: cloudStorage.StorageBucket = cloudStorage.bucket(); \\nbucket.list(...); \\nbucket.uploadFile(...);</pre> <p>不建议：</p> <pre class='\\\"typescript\\\"'>// 多次初始化云存储实例\\ncloudStorage.bucket().list(...);\\ncloudStorage.bucket().uploadFile(...);</pre> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-initialize-bucket.html"
    },
    {
        "id": 712,
        "pre": "// harlibrary's src/main/ets/utils/Calc.ets\\nexport class Calc {\\n  public static staticAdd(a:number, b:number):number {\\n    let c = a + b;\\n    console.info('DynamicImport I am harlibrary in staticAdd, %d + %d = %d', a, b, c);\\n    return c;\\n  }\\n\\n  public instanceAdd(a:number, b:number):number {\\n    let c = a + b;\\n    console.info('DynamicImport I am harlibrary in instanceAdd, %d + %d = %d', a, b, c);\\n    return c;\\n  }\\n}\\n\\nexport function addHarlibrary(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am harlibrary in addHarlibrary, %d + %d = %d', a, b, c);\\n  return c;\\n}",
        "type": "Reference",
        "function_call": "调用全局方法addHarlibrary()",
        "function_name": "业务扩展场景介绍",
        "parent_text": "  业务扩展场景介绍 动态import在业务上除了能实现条件延迟加载，还可以实现部分反射功能。实例如下，HAP动态import HAR包harlibrary，并调用静态成员函数staticAdd()、成员函数instanceAdd()，以及全局方法addHarlibrary()。  // harlibrary's Index.ets\\nexport { Calc, addHarlibrary } from './src/main/ets/utils/Calc' // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"harlibrary\\\": \\\"file:../harlibrary\\\"\\n} // HAP's src/main/ets/pages/Index.ets\\nimport('harlibrary').then((ns:ESObject) => {\\n  ns.Calc.staticAdd(8, 9);  // 调用静态成员函数staticAdd()\\n  let calc:ESObject = new ns.Calc();  // 实例化类Calc\\n  calc.instanceAdd(10, 11);  // 调用成员函数instanceAdd()\\n  ns.addHarlibrary(6, 7);  // 调用全局方法addHarlibrary()\\n\\n  // 使用类、成员函数和方法的字符串名字进行反射调用\\n  let className = 'Calc';\\n  let methodName = 'instanceAdd';\\n  let staticMethod = 'staticAdd';\\n  let functionName = 'addHarlibrary';\\n  ns[className][staticMethod](12, 13);  // 调用静态成员函数staticAdd()\\n  let calc1:ESObject = new ns[className]();  // 实例化类Calc\\n  calc1[methodName](14, 15);  // 调用成员函数instanceAdd()\\n  ns[functionName](16, 17);  // 调用全局方法addHarlibrary()\\n}); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"业务扩展场景介绍\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213458901__%E4%B8%9A%E5%8A%A1%E6%89%A9%E5%B1%95%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D\\\"'></a><a name='\\\"%E4%B8%9A%E5%8A%A1%E6%89%A9%E5%B1%95%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D\\\"'></a> <h4>业务扩展场景介绍</h4> <p>动态import在业务上除了能实现条件延迟加载，还可以实现部分反射功能。实例如下，HAP动态import HAR包harlibrary，并调用静态成员函数staticAdd()、成员函数instanceAdd()，以及全局方法addHarlibrary()。</p>  <pre class='\\\"typescript\\\"'>// harlibrary's Index.ets\\nexport { Calc, addHarlibrary } from './src/main/ets/utils/Calc'</pre> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"harlibrary\\\": \\\"file:../harlibrary\\\"\\n}</pre> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nimport('harlibrary').then((ns:ESObject) =&gt; {\\n  ns.Calc.staticAdd(8, 9);  // 调用静态成员函数staticAdd()\\n  let calc:ESObject = new ns.Calc();  // 实例化类Calc\\n  calc.instanceAdd(10, 11);  // 调用成员函数instanceAdd()\\n  ns.addHarlibrary(6, 7);  // 调用全局方法addHarlibrary()\\n\\n  // 使用类、成员函数和方法的字符串名字进行反射调用\\n  let className = 'Calc';\\n  let methodName = 'instanceAdd';\\n  let staticMethod = 'staticAdd';\\n  let functionName = 'addHarlibrary';\\n  ns[className][staticMethod](12, 13);  // 调用静态成员函数staticAdd()\\n  let calc1:ESObject = new ns[className]();  // 实例化类Calc\\n  calc1[methodName](14, 15);  // 调用成员函数instanceAdd()\\n  ns[functionName](16, 17);  // 调用全局方法addHarlibrary()\\n});</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-dynamic-import.html"
    },
    {
        "id": 713,
        "pre": "// HAR's Index.ets\\nexport function add(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am a HAR, %d + %d = %d', a, b, c);\\n  return c;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "HAP常量动态import HAR模块名  // HAP's src/main/ets/pages/Index.ets\\nimport('myHar').then((ns:ESObject) => {\\n  console.info(ns.add(3, 5));\\n}); // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"myHar\\\": \\\"file:../myHar\\\"\\n}",
        "import_module": null,
        "parent": "<li><p><strong>HAP常量动态import HAR模块名</strong></p>  <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nimport('myHar').then((ns:ESObject) =&gt; {\\n  console.info(ns.add(3, 5));\\n});</pre> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"myHar\\\": \\\"file:../myHar\\\"\\n}</pre></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-dynamic-import.html"
    },
    {
        "id": 714,
        "pre": "// 变量动态import其他模块myHar\\nlet harName = 'myHar';\\nimport(harName).then(……);\\n\\n// 变量动态import本模块自己的单文件src/main/ets/index.ets\\nlet filePath = './Calc';\\nimport(filePath).then(……);",
        "type": "Reference",
        "function_call": "identity()",
        "function_name": "[h2]动态import变量表达式",
        "parent_text": "  [h2]动态import变量表达式 DevEco Studio中模块间的依赖关系通过oh-package.json5中的dependencies进行配置。dependencies列表中所有模块默认都会进行安装（本地模块）或下载（远程模块），但是不会默认参与编译。HAP/HSP编译时会以入口文件（一般为Index.ets/ts）开始搜索依赖关系，搜索到的模块或文件才会加入编译。 在编译期，静态import和常量动态import可以被打包工具rollup及其插件识别解析，加入依赖树中，参与到编译流程，最终生成方舟字节码。但是如果是变量动态import，该变量值可能需要进行运算或者外部传入才能得到，在编译态无法解析出其内容，也就无法加入编译。为了将这部分模块/文件加入编译，还需要额外增加一个runtimeOnly的buildOption配置，用于配置动态import的变量实际的模块名或者文件路径。 1. runtimeOnly字段schema配置格式 在HAP/HSP/HAR的build-profile.json5中的buildOption中增加runtimeOnly配置项，仅在通过变量动态import时配置，静态import和常量动态import无需配置；并且，通过变量动态import加载API时也无需配置runtimeOnly。如下实例说明如何配置通过变量动态import其他模块，以及变量动态import本模块自己的单文件：  对应的runtimeOnly配置： \\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [ \\\"myHar\\\" ]  // 配置本模块变量动态import其他模块名，要求与dependencies中配置的名字一致。\\n      \\\"sources\\\": [ \\\"./src/main/ets/utils/Calc.ets\\\" ]  // 配置本模块变量动态import自己的文件路径，路径相对于当前build-profile.json5文件。\\n    }\\n  }\\n} \\\"runtimeOnly\\\"的\\\"packages\\\"：用于配置本模块变量动态import其他模块名，要求与dependencies中配置的名字一致。 \\\"runtimeOnly\\\"的\\\"sources\\\"：用于配置本模块变量动态import自己的文件路径，路径相对于当前build-profile.json5文件。 2. 使用实例  HAP变量动态import HAR模块名 // HAR's Index.ets\\nexport function add(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am a HAR, %d + %d = %d', a, b, c);\\n  return c;\\n} // HAP's src/main/ets/pages/Index.ets\\nlet packageName = 'myHar';\\nimport(packageName).then((ns:ESObject) => {\\n  console.info(ns.add(3, 5));\\n}); // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"myHar\\\": \\\"file:../myHar\\\"\\n} // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"myHar\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n} HAP变量动态import HSP模块名 // HSP's Index.ets\\nexport function add(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am a HSP, %d + %d = %d', a, b, c);\\n  return c;\\n} // HAP's src/main/ets/pages/Index.ets\\nlet packageName = 'myHsp';\\nimport(packageName).then((ns:ESObject) => {\\n  console.info(ns.add(3, 5));\\n}); // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"myHsp\\\": \\\"file:../myHsp\\\"\\n} // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"myHsp\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n} HAP变量动态import远程HAR模块名 // HAP's src/main/ets/pages/Index.ets\\nlet packageName = '@ohos/crypto-js';\\nimport(packageName).then((ns:ESObject) => {\\n  console.info('DynamicImport @ohos/crypto-js: ' + ns.CryptoJS.MD5(123456));\\n}); // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"@ohos/crypto-js\\\": \\\"2.0.3-rc.0\\\"\\n} // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"@ohos/crypto-js\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n} HAP变量动态import ohpm包 // HAP's src/main/ets/pages/Index.ets\\nlet packageName = 'json5';\\nimport(packageName).then((ns:ESObject) => {\\n  console.info('DynamicImport json5');\\n}); // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"json5\\\": \\\"1.0.2\\\"\\n} // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"json5\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n} HAP变量动态import自己的单文件 // HAP's src/main/ets/Calc.ets\\nexport function add(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am a HAP, %d + %d = %d', a, b, c);\\n  return c;\\n} // HAP's src/main/ets/pages/Index.ets\\nlet filePath = '../Calc';\\nimport(filePath).then((ns:ESObject) => {\\n  console.info(ns.add(3, 5));\\n}); // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"sources\\\": [\\n        \\\"./src/main/ets/Calc.ets\\\"  // 仅用于使用变量动态import模块自己单文件场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n} HAP变量动态import自己的Native库 // libnativeapi.so's index.d.ts\\nexport const add: (a:number, b:number) => number; // HAP's src/main/ets/pages/Index.ets\\nlet soName = 'libnativeapi.so';\\nimport(soName).then((ns:ESObject) => {\\n  console.info('DynamicImport libnativeapi.so: ' + ns.default.add(2, 3));\\n}); // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"libnativeapi.so\\\": \\\"file:./src/main/cpp/types/libnativeapi\\\"\\n} // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"libnativeapi.so\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n} HAP变量动态import加载API // HAP's src/main/ets/pages/Index.ets\\nlet packageName = '@system.app';\\nimport(packageName).then((ns:ESObject) => { ns.default.terminate(); });\\npackageName = '@system.router';\\nimport(packageName).then((ns:ESObject) => { ns.default.clear(); });\\npackageName = '@ohos.curves';\\nimport(packageName).then((ns:ESObject) => { ns.default.springMotion(0.555, 0.75, 0.001); });\\npackageName = '@ohos.matrix4';\\nimport(packageName).then((ns:ESObject) => { ns.default.identity(); });\\npackageName = '@ohos.hilog';\\nimport(packageName).then((ns:ESObject) => { ns.default.info(0x0000, 'testTag', '%{public}s', 'DynamicImport @ohos.hilog.'); });  变量动态import加载API时无需配置runtimeOnly。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"动态import变量表达式\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213458901__%E5%8A%A8%E6%80%81import%E5%8F%98%E9%87%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a><a name='\\\"%E5%8A%A8%E6%80%81import%E5%8F%98%E9%87%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a> <h4>[h2]动态import变量表达式</h4> <p>DevEco Studio中模块间的依赖关系通过oh-package.json5中的dependencies进行配置。dependencies列表中所有模块默认都会进行安装（本地模块）或下载（远程模块），但是不会默认参与编译。HAP/HSP编译时会以入口文件（一般为Index.ets/ts）开始搜索依赖关系，搜索到的模块或文件才会加入编译。</p> <p>在编译期，静态import和常量动态import可以被打包工具rollup及其插件识别解析，加入依赖树中，参与到编译流程，最终生成方舟字节码。但是如果是变量动态import，该变量值可能需要进行运算或者外部传入才能得到，在编译态无法解析出其内容，也就无法加入编译。为了将这部分模块/文件加入编译，还需要额外增加一个runtimeOnly的buildOption配置，用于配置动态import的变量实际的模块名或者文件路径。</p> <p><strong>1. runtimeOnly字段schema配置格式</strong></p> <p>在HAP/HSP/HAR的build-profile.json5中的buildOption中增加runtimeOnly配置项，仅在通过变量动态import时配置，静态import和常量动态import无需配置；并且，通过变量动态import加载API时也无需配置runtimeOnly。如下实例说明如何配置通过变量动态import其他模块，以及变量动态import本模块自己的单文件：</p>  <p>对应的runtimeOnly配置：</p> <pre class='\\\"typescript\\\"'>\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [ \\\"myHar\\\" ]  // 配置本模块变量动态import其他模块名，要求与dependencies中配置的名字一致。\\n      \\\"sources\\\": [ \\\"./src/main/ets/utils/Calc.ets\\\" ]  // 配置本模块变量动态import自己的文件路径，路径相对于当前build-profile.json5文件。\\n    }\\n  }\\n}</pre> <p>\\\"runtimeOnly\\\"的\\\"packages\\\"：用于配置本模块变量动态import其他模块名，要求与dependencies中配置的名字一致。</p> <p>\\\"runtimeOnly\\\"的\\\"sources\\\"：用于配置本模块变量动态import自己的文件路径，路径相对于当前build-profile.json5文件。</p> <p><strong>2. 使用实例</strong></p> <ul> <li><p><strong>HAP变量动态import HAR模块名</strong></p> <pre class='\\\"typescript\\\"'>// HAR's Index.ets\\nexport function add(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am a HAR, %d + %d = %d', a, b, c);\\n  return c;\\n}</pre> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet packageName = 'myHar';\\nimport(packageName).then((ns:ESObject) =&gt; {\\n  console.info(ns.add(3, 5));\\n});</pre> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"myHar\\\": \\\"file:../myHar\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"myHar\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre></li> <li><p><strong>HAP变量动态import HSP模块名</strong></p> <pre class='\\\"typescript\\\"'>// HSP's Index.ets\\nexport function add(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am a HSP, %d + %d = %d', a, b, c);\\n  return c;\\n}</pre> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet packageName = 'myHsp';\\nimport(packageName).then((ns:ESObject) =&gt; {\\n  console.info(ns.add(3, 5));\\n});</pre> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"myHsp\\\": \\\"file:../myHsp\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"myHsp\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre></li> <li><p><strong>HAP变量动态import远程HAR模块名</strong></p> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet packageName = '@ohos/crypto-js';\\nimport(packageName).then((ns:ESObject) =&gt; {\\n  console.info('DynamicImport @ohos/crypto-js: ' + ns.CryptoJS.MD5(123456));\\n});</pre> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"@ohos/crypto-js\\\": \\\"2.0.3-rc.0\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"@ohos/crypto-js\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre></li> <li><p><strong>HAP变量动态import ohpm包</strong></p> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet packageName = 'json5';\\nimport(packageName).then((ns:ESObject) =&gt; {\\n  console.info('DynamicImport json5');\\n});</pre> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"json5\\\": \\\"1.0.2\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"json5\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre></li> <li><p><strong>HAP变量动态import自己的单文件</strong></p> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/Calc.ets\\nexport function add(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am a HAP, %d + %d = %d', a, b, c);\\n  return c;\\n}</pre> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet filePath = '../Calc';\\nimport(filePath).then((ns:ESObject) =&gt; {\\n  console.info(ns.add(3, 5));\\n});</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"sources\\\": [\\n        \\\"./src/main/ets/Calc.ets\\\"  // 仅用于使用变量动态import模块自己单文件场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre></li> <li><p><strong>HAP变量动态import自己的Native库</strong></p> <pre class='\\\"typescript\\\"'>// libnativeapi.so's index.d.ts\\nexport const add: (a:number, b:number) =&gt; number;</pre> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet soName = 'libnativeapi.so';\\nimport(soName).then((ns:ESObject) =&gt; {\\n  console.info('DynamicImport libnativeapi.so: ' + ns.default.add(2, 3));\\n});</pre> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"libnativeapi.so\\\": \\\"file:./src/main/cpp/types/libnativeapi\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"libnativeapi.so\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre></li> <li><p><strong>HAP变量动态import加载API</strong></p> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet packageName = '@system.app';\\nimport(packageName).then((ns:ESObject) =&gt; { ns.default.terminate(); });\\npackageName = '@system.router';\\nimport(packageName).then((ns:ESObject) =&gt; { ns.default.clear(); });\\npackageName = '@ohos.curves';\\nimport(packageName).then((ns:ESObject) =&gt; { ns.default.springMotion(0.555, 0.75, 0.001); });\\npackageName = '@ohos.matrix4';\\nimport(packageName).then((ns:ESObject) =&gt; { ns.default.identity(); });\\npackageName = '@ohos.hilog';\\nimport(packageName).then((ns:ESObject) =&gt; { ns.default.info(0x0000, 'testTag', '%{public}s', 'DynamicImport @ohos.hilog.'); });</pre></li> </ul> <p>变量动态import加载API时无需配置runtimeOnly。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-dynamic-import.html"
    },
    {
        "id": 715,
        "pre": "// HAP's src/main/ets/pages/Index.ets\\nlet harName = 'har1';\\nimport(harName).then((ns:ESObject) => {\\n  console.info('DynamicImport addHar1 4 + 5 = ' + ns.addHar1(4, 5));\\n});",
        "type": "Reference",
        "function_call": "function addHar2(a:number, b:number):number",
        "function_name": "[h2]HAR模块间动态import依赖解耦",
        "parent_text": "  [h2]HAR模块间动态import依赖解耦 当应用包含多个HAR包，且HAR包之间依赖关系比较复杂。在DevEco Studio中配置依赖关系时，可能会形成循环依赖。这时，如果HAR之间的依赖关系中仅有变量动态import，可以将HAR包之间直接依赖关系转移到HAP/HSP中配置，HAR包之间无需配置依赖关系，从而达到HAR包间依赖解耦的目的。如下示意图：  HAR之间依赖关系转移到HAP/HSP后：  1. 使用限制  仅限本地源码HAR包之间形成循环依赖时可使用该规避方案。 被转移依赖的HAR之间只能通过变量动态import，不能有静态import或常量动态import。 转移依赖时，dependencies和runtimeOnly依赖配置要同时转移。 HSP不支持转移依赖。即：HAP->HSP1->HSP2->HSP3，这里的HSP2和HSP3不能转移到HAP上面。 转移依赖的整个链路上只能有HAR，不能跨越HSP转移。即：HAP->HAR1->HAR2->HSP->HAR3->HAR4。 HAR1对HAR2的依赖可以转移到HAP上，HAR3对HAR4的依赖可以转移到HSP上，但是，不能将HAR3或HAR4转移到HAP上。  2. 使用实例 下面的实例HAP变量动态import HAR包har1，har1变量动态import另一个HAR包har2。 // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"har1\\\": \\\"file:../har1\\\"\\n} // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"har1\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}  // har1's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"har2\\\": \\\"file:../har2\\\"\\n} // har1's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"har2\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n} // har1's Index.ets\\nexport { addHar1 } from './src/main/ets/utils/Calc' // har1's src/main/ets/utils/Calc.ets\\nexport function addHar1(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har1, %d + %d = %d', a, b, c);\\n\\n  let harName = 'har2';\\n  import(harName).then((ns:ESObject) => {\\n    console.info('DynamicImport addHar2 4 + 5 = ' + ns.addHar2(4, 5));\\n  });\\n  return c;\\n} // har2's Index.ets\\nexport { addHar2 } from './src/main/ets/utils/Calc' // har2's src/main/ets/utils/Calc.ets\\nexport function addHar2(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har2, %d + %d = %d', a, b, c);\\n  return c;\\n} har1对har2的依赖dependencies和runtimeOnly配置转移到HAP中，har1不需要配置对har2的dependencies和runtimeOnly配置： // HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"har1\\\": \\\"file:../har1\\\",\\n  \\\"har2\\\": \\\"file:../har2\\\"\\n} // HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"har1\\\",\\n        \\\"har2\\\"\\n      ]\\n    }\\n  }\\n} // HAP's src/main/ets/pages/Index.ets\\nlet harName = 'har1';\\nimport(harName).then((ns:ESObject) => {\\n  console.info('DynamicImport addHar1 4 + 5 = ' + ns.addHar1(4, 5));\\n}); // har1's Index.ets\\nexport { addHar1 } from './src/main/ets/utils/Calc' // har1's src/main/ets/utils/Calc.ets\\nexport function addHar1(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har1, %d + %d = %d', a, b, c);\\n\\n  let harName = 'har2';\\n  import(harName).then((ns:ESObject) => {\\n    console.info('DynamicImport addHar2 4 + 5 = ' + ns.addHar2(4, 5));\\n  });\\n  return c;\\n} // har2's Index.ets\\nexport { addHar2 } from './src/main/ets/utils/Calc' // har2's src/main/ets/utils/Calc.ets\\nexport function addHar2(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har2, %d + %d = %d', a, b, c);\\n  return c;\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"har模块间动态import依赖解耦\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213458901__har%E6%A8%A1%E5%9D%97%E9%97%B4%E5%8A%A8%E6%80%81import%E4%BE%9D%E8%B5%96%E8%A7%A3%E8%80%A6\\\"'></a><a name='\\\"har%E6%A8%A1%E5%9D%97%E9%97%B4%E5%8A%A8%E6%80%81import%E4%BE%9D%E8%B5%96%E8%A7%A3%E8%80%A6\\\"'></a> <h4>[h2]HAR模块间动态import依赖解耦</h4> <p>当应用包含多个HAR包，且HAR包之间依赖关系比较复杂。在DevEco Studio中配置依赖关系时，可能会形成循环依赖。这时，如果HAR之间的依赖关系中仅有变量动态import，可以将HAR包之间直接依赖关系转移到HAP/HSP中配置，HAR包之间无需配置依赖关系，从而达到HAR包间依赖解耦的目的。如下示意图：</p> <p><span><img originheight='\\\"173\\\"' originwidth='\\\"568\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120337.81131993095378273031574027952574:50001231000000:2800:B66729EA71C85743F02FED0EC1E59692BCFFC0EF57AB4ECDF5F8ABE050559972.png\\\"'/></span></p> <p>HAR之间依赖关系转移到HAP/HSP后：</p> <p><span><img originheight='\\\"283\\\"' originwidth='\\\"374\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120337.05652198776908657370135998874880:50001231000000:2800:E3C33B85E5D7437794FD60B102E3F0D401CA9ED0B66A89AE1F541D8C6B4AF9FE.png\\\"'/></span></p> <p><strong>1. 使用限制</strong></p> <ul> <li><p>仅限本地源码HAR包之间形成循环依赖时可使用该规避方案。</p></li> <li><p>被转移依赖的HAR之间只能通过变量动态import，不能有静态import或常量动态import。</p></li> <li><p>转移依赖时，dependencies和runtimeOnly依赖配置要同时转移。</p></li> <li><p>HSP不支持转移依赖。即：HAP-&gt;HSP1-&gt;HSP2-&gt;HSP3，这里的HSP2和HSP3不能转移到HAP上面。</p></li> <li><p>转移依赖的整个链路上只能有HAR，不能跨越HSP转移。即：HAP-&gt;HAR1-&gt;HAR2-&gt;HSP-&gt;HAR3-&gt;HAR4。</p> <p>HAR1对HAR2的依赖可以转移到HAP上，HAR3对HAR4的依赖可以转移到HSP上，但是，不能将HAR3或HAR4转移到HAP上。</p></li> </ul> <p><strong>2. 使用实例</strong></p> <p>下面的实例HAP变量动态import HAR包har1，har1变量动态import另一个HAR包har2。</p> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"har1\\\": \\\"file:../har1\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"har1\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre>  <pre class='\\\"json5\\\"'>// har1's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"har2\\\": \\\"file:../har2\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// har1's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"har2\\\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\\n      ]\\n    }\\n  }\\n}</pre> <pre class='\\\"typescript\\\"'>// har1's Index.ets\\nexport { addHar1 } from './src/main/ets/utils/Calc'</pre> <pre class='\\\"typescript\\\"'>// har1's src/main/ets/utils/Calc.ets\\nexport function addHar1(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har1, %d + %d = %d', a, b, c);\\n\\n  let harName = 'har2';\\n  import(harName).then((ns:ESObject) =&gt; {\\n    console.info('DynamicImport addHar2 4 + 5 = ' + ns.addHar2(4, 5));\\n  });\\n  return c;\\n}</pre> <pre class='\\\"typescript\\\"'>// har2's Index.ets\\nexport { addHar2 } from './src/main/ets/utils/Calc'</pre> <pre class='\\\"typescript\\\"'>// har2's src/main/ets/utils/Calc.ets\\nexport function addHar2(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har2, %d + %d = %d', a, b, c);\\n  return c;\\n}</pre> <p>har1对har2的依赖dependencies和runtimeOnly配置转移到HAP中，har1不需要配置对har2的dependencies和runtimeOnly配置：</p> <pre class='\\\"json5\\\"'>// HAP's oh-package.json5\\n\\\"dependencies\\\": {\\n  \\\"har1\\\": \\\"file:../har1\\\",\\n  \\\"har2\\\": \\\"file:../har2\\\"\\n}</pre> <pre class='\\\"json5\\\"'>// HAP's build-profile.json5\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n    \\\"runtimeOnly\\\": {\\n      \\\"packages\\\": [\\n        \\\"har1\\\",\\n        \\\"har2\\\"\\n      ]\\n    }\\n  }\\n}</pre> <pre class='\\\"typescript\\\"'>// HAP's src/main/ets/pages/Index.ets\\nlet harName = 'har1';\\nimport(harName).then((ns:ESObject) =&gt; {\\n  console.info('DynamicImport addHar1 4 + 5 = ' + ns.addHar1(4, 5));\\n});</pre> <pre class='\\\"typescript\\\"'>// har1's Index.ets\\nexport { addHar1 } from './src/main/ets/utils/Calc'</pre> <pre class='\\\"typescript\\\"'>// har1's src/main/ets/utils/Calc.ets\\nexport function addHar1(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har1, %d + %d = %d', a, b, c);\\n\\n  let harName = 'har2';\\n  import(harName).then((ns:ESObject) =&gt; {\\n    console.info('DynamicImport addHar2 4 + 5 = ' + ns.addHar2(4, 5));\\n  });\\n  return c;\\n}</pre> <pre class='\\\"typescript\\\"'>// har2's Index.ets\\nexport { addHar2 } from './src/main/ets/utils/Calc'</pre> <pre class='\\\"typescript\\\"'>// har2's src/main/ets/utils/Calc.ets\\nexport function addHar2(a:number, b:number):number {\\n  let c = a + b;\\n  console.info('DynamicImport I am har2, %d + %d = %d', a, b, c);\\n  return c;\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-dynamic-import.html"
    },
    {
        "id": 716,
        "pre": "import { trustedAppService } from '@kit.DeviceSecurityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入可信应用服务模块。 ",
        "import_module": null,
        "parent": "<li><span>导入可信应用服务模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-taas-securelocation.html"
    },
    {
        "id": 717,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-this-alias\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-this-alias.html"
    },
    {
        "id": 718,
        "pre": "const time = 1000;\\nexport class CC {\\n  public doWork(): void {\\n    console.info('work');\\n  }\\n\\n  public init(): void {\\n    setTimeout(() => {\\n      this.doWork();\\n    }, time);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-this-alias.html"
    },
    {
        "id": 719,
        "pre": "// 禁止将this赋值给一个变量\\nconst self = this;\\n\\nsetTimeout(function () {\\n  self.doWork();\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-this-alias.html"
    },
    {
        "id": 720,
        "pre": "// oh-package.json5\\n{\\n  \\\"dependencies\\\": {\\n    \\\"dayjs\\\": \\\"^1.10.4\\\",\\n    \\\"lottie\\\": \\\"^2.0.0\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]导出资源",
        "parent_text": "  [h2]导出资源 在编译构建HAP时，DevEco Studio会从HAP模块及依赖的模块中收集资源文件，如果不同模块下的资源文件出现重名冲突时，DevEco Studio会按照以下优先级进行覆盖（优先级由高到低）：  AppScope（仅Stage模型支持）。 HAP包自身模块。 依赖的HAR模块，如果依赖的多个HAR之间有资源冲突，会按照工程oh-package.json5中dependencies下的依赖顺序进行覆盖，依赖顺序在前的优先级较高。例如下方示例中dayjs和lottie中包含同名文件时，会优先使用dayjs中的资源。           如果在AppScope/HAP模块/HAR模块的国际化目录中配置了资源，在相同的国际化限定词下，合并的优先级也遵循上述规则。同时，国际化限定词中配置的优先级高于在base中的配置。如：在AppScope的base中配置了资源字段，在HAR模块的en_US中配置了同样的资源字段，则在en_US的使用场景中，会更优先使用HAR模块中配置的资源字段。     ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"导出资源\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213458597__%E5%AF%BC%E5%87%BA%E8%B5%84%E6%BA%90\\\"'></a><a name='\\\"%E5%AF%BC%E5%87%BA%E8%B5%84%E6%BA%90\\\"'></a> <h4>[h2]导出资源</h4> <p>在编译构建HAP时，DevEco Studio会从HAP模块及依赖的模块中收集资源文件，如果不同模块下的资源文件出现重名冲突时，DevEco Studio会按照以下优先级进行覆盖（优先级由高到低）：</p> <ul> <li>AppScope（仅Stage模型支持）。</li> <li>HAP包自身模块。</li> <li>依赖的HAR模块，如果依赖的多个HAR之间有资源冲突，会按照工程oh-package.json5中dependencies下的依赖顺序进行覆盖，依赖顺序在前的优先级较高。例如下方示例中dayjs和lottie中包含同名文件时，会优先使用dayjs中的资源。       <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115816.40478472104732564982992180861554:50001231000000:2800:67C54BAA8BECDB972A9EE9CB4DA208BCFF9EC347C1FB41E6A56A18A1D9BFD9C1.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>如果在AppScope/HAP模块/HAR模块的国际化目录中配置了资源，在相同的国际化限定词下，合并的优先级也遵循上述规则。同时，国际化限定词中配置的优先级高于在base中的配置。如：在AppScope的base中配置了资源字段，在HAR模块的en_US中配置了同样的资源字段，则在en_US的使用场景中，会更优先使用HAR模块中配置的资源字段。</p> </div> </div></li> </ul>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/har-package.html"
    },
    {
        "id": 721,
        "pre": "{\\n  \\\"module\\\": {\\n    \\\"requestPermissions\\\": [\\n      {\\n        \\\"name\\\": \\\"ohos.permission.INTERNET\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"ohos.permission.GET_NETWORK_INFO\\\" // 如果使用PathPreference的'cellular'模式，则需要额外申请此权限\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]申请权限步骤",
        "parent_text": "  [h2]申请权限步骤 需要在entry/src/main路径下的module.json5中配置所需申请的权限。示例代码如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section178884218124\\\"'> <a name='\\\"section178884218124\\\"'></a><a name='\\\"section178884218124\\\"'></a> <h4>[h2]申请权限步骤</h4> <p>需要在entry/src/main路径下的module.json5中配置所需申请的权限。示例代码如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-preparations.html"
    },
    {
        "id": 722,
        "pre": "target_include_directories(entry PUBLIC ${HMOS_SDK_NATIVE}/sysroot/usr/include)\\ntarget_link_directories(entry PUBLIC ${HMOS_SDK_NATIVE}/sysroot/usr/lib/aarch64-linux-ohos)\\ntarget_link_libraries(entry PUBLIC librcp_c.so) #链接librcp_c.so及其他依赖的so",
        "type": "Reference",
        "function_call": null,
        "function_name": "C API开发准备",
        "parent_text": "  C API开发准备 除上述权限配置外，C API使用时还需要在CMakeLists.txt中设置动态库路径及头文件路径，并进行链接。 如编译target为entry，则添加如下命令：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2095732915253\\\"'> <a name='\\\"section2095732915253\\\"'></a><a name='\\\"section2095732915253\\\"'></a> <h4>C API开发准备</h4> <p>除上述权限配置外，C API使用时还需要在CMakeLists.txt中设置动态库路径及头文件路径，并进行链接。</p> <p>如编译target为entry，则添加如下命令：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-preparations.html"
    },
    {
        "id": 723,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/one-var-declaration-per-line\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_one-var-declaration-per-line.html"
    },
    {
        "id": 724,
        "pre": "let a: string = 'hello';\\nlet b: string = 'world';\\na += 'my';\\nb += 'my';\\n\\nconst c: string = 'hello';\\nconst d: string = 'world';\\n\\nconsole.info(`a: ${a}, b: ${b}, c: ${c}, d: ${d}`);",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_one-var-declaration-per-line.html"
    },
    {
        "id": 725,
        "pre": "export {a, b};\\n\\n// Split 'let' declarations into multiple statements.\\nconst a: string = 'hello', b: string = 'world';",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_one-var-declaration-per-line.html"
    },
    {
        "id": 726,
        "pre": "import { map, mapCommon } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      导入相关模块。       ",
        "import_module": "import { map, mapCommon } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      导入相关模块。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-convert-coordinate.html"
    },
    {
        "id": 727,
        "pre": "let wgs84Position: mapCommon.LatLng = {\\n  latitude: 30,\\n  longitude: 118\\n};\\n// 转换经纬度坐标\\nlet gcj02Position: mapCommon.LatLng =\\n  map.convertCoordinateSync(mapCommon.CoordinateType.WGS84, mapCommon.CoordinateType.GCJ02, wgs84Position);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      初始化需要转换的坐标，调用convertCoordinateSync方法转换坐标。       ",
        "import_module": "import { map, mapCommon } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      初始化需要转换的坐标，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section14966449114916\\\"' target='\\\"_blank\\\"'>convertCoordinateSync</a>方法转换坐标。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-convert-coordinate.html"
    },
    {
        "id": 728,
        "pre": "let locations: Array<mapCommon.CoordinateLatLng> = [\\n  {\\n    // 输入巴黎坐标和GCJ02坐标系，返回WGS84坐标系和输入的巴黎坐标\\n    coordinateType: mapCommon.CoordinateType.GCJ02,\\n    location: { latitude: 42.860000, longitude: 2.340000 }\\n  },\\n  {\\n    // 输入香港坐标和GCJ02坐标系，返回GCJ02坐标系和输入的香港坐标\\n    coordinateType: mapCommon.CoordinateType.GCJ02,\\n    location: { latitude: 22.280556, longitude: 114.984000 }\\n  },\\n  {\\n    // 输入香港坐标和WGS84坐标系，若当前地图站点使用GCJ02坐标系，返回GCJ02坐标系和转换后的香港坐标，\\n    // 若当前地图站点使用WGS84坐标系，返回WGS84坐标系和原香港坐标\\n    coordinateType: mapCommon.CoordinateType.WGS84,\\n    location: { latitude: 22.280556, longitude: 114.984000 }\\n  },\\n  {\\n    // 输入巴黎坐标和WGS84坐标系，返回WGS84坐标系和输入的巴黎坐标\\n    coordinateType: mapCommon.CoordinateType.WGS84,\\n    location: { latitude: 42.860000, longitude: 2.340000 }\\n  }\\n];\\n// 包含await的外层方法需要添加async关键字\\nlet arr: Array<mapCommon.CoordinateLatLng> = await map.rectifyCoordinate(getContext(), locations);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]坐标纠偏",
        "parent_text": "  [h2]坐标纠偏 rectifyCoordinate接口根据输入的坐标系和坐标，判断是否需要纠偏坐标，规则如下：  输入的坐标系是GCJ02，当前路由地是中国大陆。检查传入的坐标是否在大陆/港澳地区，如果不在，返回WGS84坐标系和输入的原始坐标，否则返回GCJ02坐标系和输入的原始坐标。 输入的坐标系是GCJ02，当前路由地不是中国大陆。返回WGS84坐标系和输入的原始坐标。 输入的坐标系是WGS84，当前路由地是中国大陆。检查传入的坐标是否在大陆/港澳地区，如果在，返回GCJ02坐标系和转换后的坐标，否则返回WGS84坐标系和输入的原始坐标。 输入的坐标系是WGS84，当前路由地不是中国大陆。返回WGS84坐标系和输入的原始坐标。      rectifyCoordinate接口仅为解决原始坐标与华为地图展示偏转的问题。    ",
        "import_module": "import { map, mapCommon } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section596718526385\\\"'> <a name='\\\"section596718526385\\\"'></a><a name='\\\"section596718526385\\\"'></a> <h4>[h2]坐标纠偏</h4> <p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section458511147211\\\"' target='\\\"_blank\\\"'>rectifyCoordinate</a>接口根据输入的坐标系和坐标，判断是否需要纠偏坐标，规则如下：</p> <ul> <li>输入的坐标系是GCJ02，当前路由地是中国大陆。<p>检查传入的坐标是否在大陆/港澳地区，如果不在，返回WGS84坐标系和输入的原始坐标，否则返回GCJ02坐标系和输入的原始坐标。</p></li> <li>输入的坐标系是GCJ02，当前路由地不是中国大陆。<p>返回WGS84坐标系和输入的原始坐标。</p></li> <li>输入的坐标系是WGS84，当前路由地是中国大陆。<p>检查传入的坐标是否在大陆/港澳地区，如果在，返回GCJ02坐标系和转换后的坐标，否则返回WGS84坐标系和输入的原始坐标。</p></li> <li>输入的坐标系是WGS84，当前路由地不是中国大陆。<p>返回WGS84坐标系和输入的原始坐标。</p></li> </ul> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120159.19739461499170537123024239509837:50001231000000:2800:C5B89FE8D4786B4E575D28C2C54347B2EA19DC8BAAEC1D23D203853351A31039.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section458511147211\\\"' target='\\\"_blank\\\"'>rectifyCoordinate</a>接口仅为解决原始坐标与华为地图展示偏转的问题。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-convert-coordinate.html"
    },
    {
        "id": 729,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/unified-signatures\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_unified-signatures.html"
    },
    {
        "id": 730,
        "pre": "{\\n  \\\"subtypes\\\": [\\n    {\\n      \\\"icon\\\": \\\"$media:icon\\\",\\n      \\\"id\\\": \\\"InputMethodExtAbility\\\",\\n      \\\"label\\\": \\\"$string:english\\\",\\n      \\\"locale\\\": \\\"en-US\\\",\\n      \\\"mode\\\": \\\"lower\\\"\\n    },\\n    {\\n      \\\"icon\\\": \\\"$media:icon\\\",\\n      \\\"id\\\": \\\"InputMethodExtAbility1\\\",\\n      \\\"label\\\": \\\"$string:chinese\\\",\\n      \\\"locale\\\": \\\"zh-CN\\\",\\n      \\\"mode\\\": \\\"lower\\\"\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "子类型配置文件格式如下，字段释义参照InputMethodSubtype，开发者需要严格按照配置文件格式及字段进行子类型信息配置，locale字段的配置参照i18n-locale-culture。 ",
        "import_module": null,
        "parent": "<li><p>子类型配置文件格式如下，字段释义参照<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-inputmethod-subtype#inputmethodsubtype\\\"' target='\\\"_blank\\\"'>InputMethodSubtype</a>，开发者需要严格按照配置文件格式及字段进行子类型信息配置，locale字段的配置参照<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/i18n-locale-culture#实现原理\\\"'>i18n-locale-culture</a>。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/input-method-subtype-guide.html"
    },
    {
        "id": 731,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/strict-boolean-expressions\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_strict-boolean-expressions.html"
    },
    {
        "id": 732,
        "pre": "// nullable values should be checked explicitly against null or undefined\\nfunction getNum(): number | undefined {\\n  return undefined;\\n}\\n\\nconst num: number | undefined = getNum();\\nif (num !== undefined) {\\n  console.log('num is defined');\\n}\\n\\nfunction getStr(): string | null {\\n  return 'null';\\n}\\n\\nconst str: string | null = getStr();\\nif (str !== null) {\\n  console.log('str is not empty');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_strict-boolean-expressions.html"
    },
    {
        "id": 733,
        "pre": "// nullable values should be checked explicitly against null or undefined\\nfunction getNum(): number | undefined {\\n  return undefined;\\n}\\n\\nconst num: number | undefined = getNum();\\nif (num) {\\n  console.log('num is defined');\\n}\\n\\nfunction getStr(): string | null {\\n  return 'null';\\n}\\n\\nconst str: string | null = getStr();\\nif (str) {\\n  console.log('str is not empty');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_strict-boolean-expressions.html"
    },
    {
        "id": 734,
        "pre": "// 声明目标设备\\nlet targetDevice: wearEngine.Device;\\ndeviceList.forEach((device, idx, arr) => {\\n  // 挑选类型为手表的设备\\n  if (device.category === wearEngine.DeviceCategory.WATCH) {\\n    targetDevice = device;\\n  }\\n  if (idx === deviceList.length - 1) {\\n    // 若不存在目标设备则抛出错误\\n    throw new Error('cannot find target device');\\n  }\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "从已连接设备列表中根据设备类型选定需要通信的设备。 ",
        "import_module": null,
        "parent": "<li><span>从已连接设备列表中根据设备类型选定需要通信的设备。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/we-device-selection.html"
    },
    {
        "id": 735,
        "pre": "// 声明目标设备\\nlet targetDevice: wearEngine.Device;\\ndeviceList.forEach(async (device, idx, arr) => {\\n  // 挑选支持Monitor能力的设备\\n  if (await device.isWearEngineCapabilitySupported(wearEngine.WearEngineCapability.MONITOR)) {\\n    targetDevice = device;\\n  }\\n  if (idx === deviceList.length - 1) {\\n    // 若不存在目标设备则抛出错误\\n    throw new Error('cannot find target device');\\n  }\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "从已连接设备列表中根据WearEngine能力集选定需要通信的设备。 ",
        "import_module": null,
        "parent": "<li><span>从已连接设备列表中根据WearEngine能力集选定需要通信的设备。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/we-device-selection.html"
    },
    {
        "id": 736,
        "pre": "// 声明目标设备\\nlet targetDevice: wearEngine.Device;\\ndeviceList.forEach(async (device, idx, arr) => {\\n  // 挑选支持应用安装的设备\\n  if (await device.isDeviceCapabilitySupported(wearEngine.DeviceCapability.APP_INSTALLATION)) {\\n    targetDevice = device;\\n  }\\n  if (idx === deviceList.length - 1) {\\n    // 若不存在目标设备则抛出错误\\n    throw new Error('cannot find target device');\\n  }\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "从已连接设备列表中根据Device能力集选定需要通信的设备。 ",
        "import_module": null,
        "parent": "<li><span>从已连接设备列表中根据Device能力集选定需要通信的设备。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/we-device-selection.html"
    },
    {
        "id": 737,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { systemShare } from '@kit.ShareKit';\\n\\ntry {\\n  let utdTypeId = utd.getUniformDataTypeByFilenameExtension('.jpg', utd.UniformDataType.IMAGE);\\n  if (utdTypeId) {\\n    // 构造ShareData，需配置一条有效数据信息\\n    let shareData: systemShare.SharedData = new systemShare.SharedData({\\n      utd: utdTypeId,\\n      uri: 'file://.../xxx.jpg'\\n    });\\n    // 构建ShareController\\n    let controller: systemShare.ShareController = new systemShare.ShareController(shareData);\\n    // 获取UIAbility上下文对象\\n    let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n    // 进行分享面板显示\\n    controller.show(context, {\\n      previewMode: systemShare.SharePreviewMode.DEFAULT,\\n      selectionMode: systemShare.SelectionMode.SINGLE\\n    });\\n  }\\n} catch (e) {\\n  let error: BusinessError = e as BusinessError;\\n  console.error(`Failed to getUniformDataTypeByFilenameExtension. Code: ${error.code}, message: ${error.message} `);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "根据给定的文件后缀名和所归属的标准化数据类型查询标准化数据类型的ID。参见：uniformTypeDescriptor.getUniformDataTypeByFilenameExtension。 ",
        "import_module": null,
        "parent": "<li>根据给定的文件后缀名和所归属的标准化数据类型查询标准化数据类型的ID。参见：<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-data-uniformtypedescriptor#uniformtypedescriptorgetuniformdatatypebyfilenameextension11\\\"' target='\\\"_blank\\\"'>uniformTypeDescriptor.getUniformDataTypeByFilenameExtension</a>。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-access-precautions.html"
    },
    {
        "id": 738,
        "pre": "import { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { systemShare, harmonyShare } from '@kit.ShareKit';\\nimport { fileUri } from '@kit.CoreFileKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/harmony-share-scenes.html"
    },
    {
        "id": 739,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/sparse-array-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-sparse-array-check.html"
    },
    {
        "id": 740,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-reusable-component\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-reusable-component.html"
    },
    {
        "id": 741,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { GoodItems } from './data/DataEntry';\\n\\n@Reusable\\n@Component\\nstruct GoodItemComponent {\\n  @State introduce: string = ''\\n  @State price: string = ''\\n  @State numb: string = ''\\n\\n  aboutToReuse(params: Record<string, ESObject>) {\\n    this.introduce = params.introduce\\n    this.price = params.price\\n    this.numb = params.numb\\n  }\\n\\n  build() {\\n    Column() {\\n      Text(this.introduce)\\n        .fontSize(14)\\n        .padding({ left: 5, right: 5 })\\n        .margin({ top: 5 })\\n      Row() {\\n        Text('￥')\\n          .fontSize(10)\\n          .fontColor(Color.Red)\\n          .baselineOffset(-4)\\n        Text(this.price)\\n          .fontSize(16)\\n          .fontColor(Color.Red)\\n        Text(this.numb)\\n          .fontSize(10)\\n          .fontColor(Color.Gray)\\n          .baselineOffset(-4)\\n          .margin({ left: 5 })\\n\\n      }\\n      .width('100%')\\n      .justifyContent(FlexAlign.SpaceBetween)\\n      .padding({ left: 5, right: 5 })\\n      .margin({ top: 15 })\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private data: MyDataSource = new MyDataSource([]);\\n\\n  build() {\\n    Column() {\\n      LazyForEach(this.data, (item: GoodItems, index) => {\\n        GridItem() {\\n          GoodItemComponent({\\n            introduce: item.data.introduce,\\n            price: item.data.price,\\n            numb: item.data.numb,\\n          }).reuseId(item.numb)\\n        }\\n      }, (item: GoodItems) => item.index)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-reusable-component.html"
    },
    {
        "id": 742,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { GoodItems } from './data/DataEntry';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private data: MyDataSource = new MyDataSource([]);\\n\\n  build() {\\n    Column() {\\n      LazyForEach(this.data, (item: GoodItems) => {\\n        GridItem() {\\n          Column() {\\n            Text(item.introduce)\\n              .fontSize(14)\\n              .padding({ left: 5, right: 5 })\\n              .margin({ top: 5 })\\n            Row() {\\n              Text('￥')\\n                .fontSize(10)\\n                .fontColor(Color.Red)\\n                .baselineOffset(-4)\\n              Text(item.price)\\n                .fontSize(16)\\n                .fontColor(Color.Red)\\n              Text(item.numb)\\n                .fontSize(10)\\n                .fontColor(Color.Gray)\\n                .baselineOffset(-4)\\n                .margin({ left: 5 })\\n\\n            }\\n            .width('100%')\\n            .justifyContent(FlexAlign.SpaceBetween)\\n            .padding({ left: 5, right: 5 })\\n            .margin({ top: 15 })\\n          }\\n          .borderRadius(10)\\n          .backgroundColor(Color.White)\\n          .clip(true)\\n          .width('100%')\\n          .height(290)\\n        }\\n      }, (item: GoodItems) => item.index)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-reusable-component.html"
    },
    {
        "id": 743,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/foreach-index-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-foreach-index-check.html"
    },
    {
        "id": 744,
        "pre": "@Entry\\n@Component\\nstruct ForeachTest {\\n  private data: string[] = ['one', 'two', 'three'];\\n  build() {\\n    RelativeContainer() {\\n      List() {\\n        ForEach(this.data, (item: string, index: number) => {\\n          ListItem() {\\n            Text(item);\\n          }\\n        }, (item: string, index: number) => item)\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-foreach-index-check.html"
    },
    {
        "id": 745,
        "pre": "@Entry\\n@Component\\nstruct ForeachTest {\\n  private data: string[] = ['one', 'two', 'three'];\\n  build() {\\n    RelativeContainer() {\\n      List() {\\n        // warning line\\n        ForEach(this.data, (item: string, index: number) => {\\n          ListItem() {\\n            Text(item);\\n          }\\n        }, (item: string, index: number) => item + index)\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-foreach-index-check.html"
    },
    {
        "id": 746,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/explicit-function-return-type\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-function-return-type.html"
    },
    {
        "id": 747,
        "pre": "// No return value should be expected (void)\\nfunction test(): void {\\n  return;\\n}\\n\\n// A return value of type number\\nconst fn = function (): number {\\n  return Number.MAX_VALUE;\\n};\\n\\n// A return value of type string\\nconst arrowFn = (): string => 'test';\\n\\nclass Test {\\n  // No return value should be expected (void)\\n  public method(): void {\\n    return;\\n  }\\n}\\n\\nexport { test, fn, arrowFn, Test };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-function-return-type.html"
    },
    {
        "id": 748,
        "pre": "// Should indicate that no value is returned (void)\\nfunction test() {\\n  return;\\n}\\n\\n// Should indicate that a number is returned\\nconst fn = function () {\\n  return Number.MAX_VALUE;\\n};\\n\\n// Should indicate that a string is returned\\nconst arrowFn = () => 'test';\\n\\nclass Test {\\n  // Should indicate that no value is returned (void)\\n  public method() {\\n    return;\\n  }\\n}\\n\\nexport { test, fn, arrowFn, Test };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-function-return-type.html"
    },
    {
        "id": 749,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/init-list-component\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-init-list-component.html"
    },
    {
        "id": 750,
        "pre": "@Component\\nstruct Greeting {\\n  @Builder myBuilder() {\\n    List().width(10).height(10)\\n  }\\n  build() {\\n    List() {\\n    }.width(10).height(10);\\n  }\\n}\\n\\n@Builder function globalBuilder() {\\n  List().width(10).height(10)\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-init-list-component.html"
    },
    {
        "id": 751,
        "pre": "@Component\\nstruct Greeting {\\n  @Builder myBuilder() {\\n    // missing initialization of attribute 'height'\\n    List().width(10)\\n  }\\n  build() {\\n    // missing initialization of attribute 'width'\\n    List().height(10);\\n  }\\n}\\n\\n@Builder function myBuilder() {\\n  // missing initialization of attribute 'height'\\n  List().width(10)\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-init-list-component.html"
    },
    {
        "id": 752,
        "pre": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { sceneManager } from '@kit.AppGalleryKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { sceneManager } from '@kit.AppGalleryKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-erms.html"
    },
    {
        "id": 753,
        "pre": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { sceneManager } from '@kit.AppGalleryKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { sceneManager } from '@kit.AppGalleryKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-erms.html"
    },
    {
        "id": 754,
        "pre": "import { display } from '@kit.ArkUI';\\n\\nlet ret: boolean = false;\\nret = display.isFoldable();",
        "type": "Reference",
        "function_call": "isFoldable()",
        "function_name": null,
        "parent_text": "可以通过display.isFoldable()接口查询当前设备是不是折叠设备。 ",
        "import_module": null,
        "parent": "<li><p>可以通过display.isFoldable()接口查询当前设备是不是折叠设备。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screenproperty-guideline.html"
    },
    {
        "id": 755,
        "pre": "import { util } from '@kit.ArkTS';\\nimport { i18n } from '@kit.LocalizationKit';\\nimport { sceneMap, site } from '@kit.MapKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { geoLocationManager } from '@kit.LocationKit';\\nimport { abilityAccessCtrl, autoFillManager, common, PermissionRequestResult, Permissions } from '@kit.AbilityKit';\\n\\nconst AUTHED = 0;\\nconst TIME_OUT = 100;\\n// Default longitude and latitude. The following uses the longitude and latitude of Tiananmen, Beijing as an example.\\nconst INIT_LAT = 39.5;\\nconst INIT_LON = 116.2;\\nconst ENGLISH = 'en';\\nconst SIMPLIFIED_CHINESE = 'zh_CN';\\nconst PERMISSIONS: Array<Permissions> = ['ohos.permission.APPROXIMATELY_LOCATION'];\\nconst ADMINISTRATIVE_REGION: Array<string> =\\n  ['countryName', 'adminLevel1', 'adminLevel2', 'adminLevel3', 'adminLevel4'];\\n\\ninterface PersonInfo {\\n  name?: string;\\n  phone?: string;\\n  email?: string;\\n  idCard?: string;\\n  region?: string;\\n  stressAddress?: string;\\n}\\n\\ninterface RequestParam {\\n  requestTag: string;\\n  requestText: string;\\n}\\n\\ninterface Location {\\n  latitude: number;\\n  longitude: number;\\n}\\n\\n// Display the authorization pop-up.\\nasync function reqPermissionsFromUser(permissions: Array<Permissions>,\\n  context: common.UIAbilityContext): Promise<PermissionRequestResult> {\\n  let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();\\n  return await atManager.requestPermissionsFromUser(context, permissions);\\n}\\n\\n// Throttle function.\\nfunction debounce(func: () => void, wait: number = TIME_OUT): Function {\\n  let timeout: number | null = null;\\n  return () => {\\n    timeout && clearTimeout(timeout);\\n    timeout = setTimeout(() => {\\n      func();\\n      clearTimeout(timeout);\\n    }, wait);\\n  };\\n}\\n\\n@Extend(Text)\\nfunction textStyle() {\\n  .width(64)\\n  .textAlign(TextAlign.End)\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State personInfo: PersonInfo = {};\\n  @State isClicked: boolean = false;\\n  // Whether the user has triggered information input.\\n  private isUserInput: boolean = false;\\n  private location: Location = {\\n    latitude: INIT_LAT,\\n    longitude: INIT_LON,\\n  };\\n  private currentRequestTag: string = '';\\n  private handleAddressChange = (request: RequestParam) => {\\n    return debounce(async () => {\\n      this.autoCompleteAddress(request);\\n    });\\n  };\\n\\n  aboutToAppear() {\\n    reqPermissionsFromUser(PERMISSIONS, getContext(this) as common.UIAbilityContext)\\n      .then((permissionRequestResult: PermissionRequestResult) => {\\n        if (permissionRequestResult.authResults[0] === AUTHED) {\\n          // The API for obtaining location information can be called only under authorization.\\n          geoLocationManager.getCurrentLocation((err, location: geoLocationManager.Location) => {\\n            if (err) {\\n              hilog.error(0x0000, 'testTag', `Failed to get location, code: ${err?.code}, message: ${err?.message}`);\\n              return;\\n            }\\n            hilog.info(0x0000, 'testTag', `Succeeded in obtaining the current location of the user`);\\n            this.location.latitude = location.latitude;\\n            this.location.longitude = location.longitude;\\n          })\\n        }\\n      })\\n      .catch((err: BusinessError) => {\\n        hilog.error(0x0000, 'testTag', `Failed request permissions, code: ${err?.code}, message: ${err?.message}`);\\n      })\\n  }\\n\\n  public isUsLanguage(): boolean {\\n    let result: string = '';\\n    try {\\n      result = i18n.System.getSystemLanguage();\\n    } catch (error) {\\n      hilog.error(0x0000, 'testTag', 'Failed to get system language');\\n    }\\n    return result.toLowerCase() === 'en-latn-us';\\n  }\\n\\n  async autoCompleteAddress(request: RequestParam): Promise<void> {\\n    try {\\n      let params: site.SearchByTextParams = {\\n        query: request.requestText,\\n        // Longitude and latitude to which search results need to be biased.\\n        location: {\\n          latitude: this.location.latitude,\\n          longitude: this.location.longitude\\n        },\\n        language: this.isUsLanguage() ? ENGLISH : SIMPLIFIED_CHINESE,\\n        isChildren: true\\n      };\\n      const result = await site.searchByText(params);\\n      if (result.sites) {\\n        let region: string = '';\\n        let addressComponent = result.sites[0].addressComponent;\\n        // Traverse the administrative region level of the current address.\\n        for (let item of ADMINISTRATIVE_REGION) {\\n          if (addressComponent[item] === undefined) {\\n            break;\\n          }\\n          region += addressComponent[item];\\n        }\\n        // Prevent repeated searches that may lead to inconsistent results.\\n        if (request.requestTag === this.currentRequestTag) {\\n          this.personInfo.region = region;\\n        }\\n      }\\n    } catch (error) {\\n      hilog.error(0x0000, 'testTag', `Failed to search location, code: ${error.code}, message: ${error.message}`);\\n    }\\n    hilog.info(0x0000, 'testTag', 'Succeeded in searching location');\\n  }\\n\\n  onRegionClick(): void {\\n    // After a user selects an administrative region, display only search results from the selected region to prevent prolonged queries.\\n    this.currentRequestTag = util.generateRandomUUID();\\n    let districtSelectOptions: sceneMap.DistrictSelectOptions = {\\n      countryCode: 'CN',\\n    };\\n    sceneMap.selectDistrict(getContext(this), districtSelectOptions).then((data) => {\\n      hilog.info(0x0000, 'testTag', 'SelectDistrict', 'Succeeded  in selecting district.');\\n      let region = '';\\n      for (let i = 0; i < data?.districts?.length; i++) {\\n        region += data.districts[i].name;\\n      }\\n      this.personInfo.region = region;\\n    }).catch((err: BusinessError) => {\\n      hilog.error(0x0000, 'testTag', `Failed to select district, code: ${err.code}, message: ${err.message}`);\\n    });\\n  }\\n\\n  searchRegionByAddress(val: string): void {\\n    let tag: string = util.generateRandomUUID();\\n    this.currentRequestTag = tag;\\n    let param: RequestParam = {\\n      requestTag: tag,\\n      requestText: val\\n    }\\n    // For the manual user input scenario, dithering processing is required. For the automatic input scenario of SmartFill, only the query processing is required.\\n    if (this.isUserInput) {\\n      this.handleAddressChange(param)();\\n    } else {\\n      this.autoCompleteAddress(param);\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 8 }) {\\n      Row({ space: 8 }) {\\n        Text('姓名').textStyle()\\n        TextInput({ text: this.personInfo.name, placeholder: '姓名' })\\n          .layoutWeight(1)\\n          .contentType(ContentType.PERSON_FULL_NAME)\\n          .onChange((val: string) => {\\n            this.personInfo.name = val;\\n          })\\n      }\\n\\n      Row({ space: 8 }) {\\n        Text('联系电话').textStyle()\\n        TextInput({ text: this.personInfo.phone, placeholder: '手机号码' })\\n          .layoutWeight(1)\\n          .contentType(ContentType.PHONE_NUMBER)\\n          .onChange((val: string) => {\\n            this.personInfo.phone = val;\\n          })\\n      }\\n\\n      Row({ space: 8 }) {\\n        Text('身份证号').textStyle()\\n        TextInput({ text: this.personInfo.idCard, placeholder: '身份证信息' })\\n          .layoutWeight(1)\\n          .contentType(ContentType.ID_CARD_NUMBER)\\n          .onChange((val: string) => {\\n            this.personInfo.idCard = val;\\n          })\\n      }\\n\\n      Row({ space: 8 }) {\\n        Text('邮件地址').textStyle()\\n        TextInput({ text: this.personInfo.email, placeholder: '电子邮件信息' })\\n          .layoutWeight(1)\\n          .contentType(ContentType.EMAIL_ADDRESS)\\n          .onChange((val: string) => {\\n            this.personInfo.email = val;\\n          })\\n      }\\n\\n      Row({ space: 8 }) {\\n        Text('所在地区').textStyle()\\n        TextArea({ text: this.personInfo.region, placeholder: '地区信息' })\\n          .layoutWeight(1)\\n          .backgroundColor($r('sys.color.ohos_id_color_card_bg'))\\n          .placeholderColor($r('sys.color.ohos_id_color_text_secondary'))\\n          .fontSize($r('sys.float.ohos_id_text_size_body1'))\\n          .fontColor($r('sys.color.ohos_id_color_text_primary'))\\n          .onClick(() => this.onRegionClick())\\n          .focusable(false)\\n      }\\n\\n      Row({ space: 8 }) {\\n        Text('详细地址').textStyle()\\n        TextInput({ text: this.personInfo.stressAddress, placeholder: '小区门牌信息' })\\n          .layoutWeight(1)\\n          .contentType(ContentType.DETAIL_INFO_WITHOUT_STREET)\\n          .onDidInsert(() => {\\n            // Triggered when a user inputs data through an input method.\\n            this.isUserInput = true;\\n          })\\n          .onDidDelete((val: DeleteValue) => {\\n            // Triggered when a user deletes data through an input method.\\n            if (val?.deleteValue?.length > 0) {\\n              this.isUserInput = true;\\n            }\\n          })\\n          .onChange((val: string) => {\\n            this.personInfo.stressAddress = val;\\n            if (val && val.trim().length > 0) {\\n              this.searchRegionByAddress(val);\\n            } else {\\n              this.currentRequestTag = util.generateRandomUUID();\\n              this.personInfo.region = '';\\n            }\\n            this.isUserInput = false;\\n          })\\n      }\\n\\n      Button('保存')\\n        .width('50%')\\n        .onClick(() => {\\n          if (!this.isClicked) {\\n            this.isClicked = true;\\n            autoFillManager.requestAutoSave(this.getUIContext(), {\\n              onSuccess: () => {\\n                hilog.info(0x0000, 'testTag', 'Succeeded in saving request');\\n              },\\n              onFailure: () => {\\n                hilog.info(0x0000, 'testTag', 'Failed to save request');\\n              }\\n            });\\n            setTimeout(() => {\\n              this.isClicked = false;\\n            }, 2000);\\n          }\\n        })\\n    }\\n    .padding({ left: 16, right: 16 })\\n    .backgroundColor($r('sys.color.ohos_id_color_list_card_bg'))\\n    .alignItems(HorizontalAlign.Center)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "示例代码 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10984143916131\\\"'><a name='\\\"section10984143916131\\\"'></a><a name='\\\"section10984143916131\\\"'></a><h4>示例代码</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-intelligentfilling-autocomplete.html"
    },
    {
        "id": 756,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-floating-promises\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-floating-promises.html"
    },
    {
        "id": 757,
        "pre": "export async function bar() {\\n  const promise = new Promise<string>(resolve => {\\n    resolve('value');\\n    return 'finish';\\n  });\\n  await promise;\\n\\n  Promise.reject('value').catch(() => {\\n    console.error('error');\\n  });\\n\\n  await Promise.reject('value').finally(() => {\\n    console.info('finally');\\n  });\\n\\n  await Promise.all(['1', '2', '3'].map(x => x + '1'));\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-floating-promises.html"
    },
    {
        "id": 758,
        "pre": "export async function bar() {\\n  const promise = new Promise<string>(resolve => {\\n    resolve('value');\\n    return 'finish';\\n  });\\n  promise;\\n\\n  Promise.reject('value').catch();\\n\\n  await Promise.reject('value').finally();\\n\\n  ['1', '2', '3'].map(async x => x + '1');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-floating-promises.html"
    },
    {
        "id": 759,
        "pre": "import { advertising, identifier } from '@kit.AdsKit';\\nimport { router } from '@kit.ArkUI';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct LoadAd {\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  private oaid: string = '';\\n\\n  aboutToAppear() {\\n    try {\\n      // 使用Promise回调方式获取OAID\\n      identifier.getOAID().then((data: string) => {\\n        this.oaid = data;\\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\\n      }).catch((error: BusinessError) => {\\n        hilog.error(0x0000, 'testTag', '%{public}s',\\n          `Failed to get adsIdentifierInfo, error code: ${error.code}, message: ${error.message}`);\\n      })\\n    } catch (error) {\\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      Column() {\\n        // 跳转到原生广告展示页面\\n        Button(\\\"请求原生广告\\\", { type: ButtonType.Normal, stateEffect: true }).onClick(() => {\\n          this.requestAd();\\n        })\\n      }.width('100%').height('80%').justifyContent(FlexAlign.Center)\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n\\n  private requestAd(): void {\\n    // 广告展示参数\\n    const adDisplayOptions: advertising.AdDisplayOptions = {\\n      // 是否静音，默认不静音\\n      mute: false\\n    }\\n    // 原生广告配置\\n    const adOptions: advertising.AdOptions = {\\n      // 设置是否请求非个性化广告\\n      nonPersonalizedAd: 1,\\n      // 是否允许流量下载0：不允许，1：允许，不设置以广告主设置为准\\n      allowMobileTraffic: 0,\\n      // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\\n      tagForChildProtection: -1,\\n      // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\\n      tagForUnderAgeOfPromise: -1,\\n      // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\\n      adContentClassification: 'A'\\n    }\\n    // 原生广告请求参数\\n    const nativeVideoAdReqParams: advertising.AdRequestParams = {\\n      // 'testu7m3hc4gvm'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\\n      adId: 'testu7m3hc4gvm',\\n      adType: 3,\\n      adCount: 1,\\n      // 原生广告自定义扩展参数。等所有广告素材下载完后再回调\\n      enableDirectReturnVideoAd: true,\\n      oaid: this.oaid\\n    }\\n    // 广告请求回调监听\\n    const adLoaderListener: advertising.AdLoadListener = {\\n      // 广告请求失败回调\\n      onAdLoadFailure: (errorCode: number, errorMsg: string) => {\\n        hilog.error(0x0000, 'testTag', '%{public}s',\\n          `Failed to request ad, message: ${errorMsg}, error code: ${errorCode}`);\\n      },\\n      // 广告请求成功回调\\n      onAdLoadSuccess: (ads: Array<advertising.Advertisement>) => {\\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting ad');\\n        // 调用原生广告展示页面\\n        routePage('pages/NativeAdPage', ads, adDisplayOptions);\\n      }\\n    };\\n    // 创建AdLoader广告对象\\n    const load: advertising.AdLoader = new advertising.AdLoader(this.context);\\n    // 调用广告请求接口\\n    load.loadAd(nativeVideoAdReqParams, adOptions, adLoaderListener);\\n  }\\n}\\n\\nasync function routePage(pageUri: string, ads: Array<advertising.Advertisement | null>,\\n  displayOptions: advertising.AdDisplayOptions) {\\n  let options: router.RouterOptions = {\\n    url: pageUri,\\n    params: {\\n      ads: ads,\\n      displayOptions: displayOptions\\n    }\\n  }\\n  try {\\n    router.pushUrl(options);\\n  } catch (error) {\\n    hilog.error(0x0000, 'testTag', '%{public}s',\\n      `Failed to routePage callback, code: ${error.code}, msg: ${error.message}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "示例代码如下所示： ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>示例代码如下所示： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ads-publisher-service-native.html"
    },
    {
        "id": 760,
        "pre": "    // main.ets   \\n    import lazy { a } from \\\"./mod1\\\";    // \\\"mod1\\\" 未执行\\n    import { c } from \\\"./mod2\\\";         // \\\"mod2\\\" 执行\\n    \\n    // ...\\n    \\n    console.info(\\\"main executed\\\");\\n    while (false) {\\n        let xx = a;\\n    }\\n    \\n    // mod1.ets\\n    export let a = \\\"mod1 executed\\\"\\n    console.info(a);\\n    \\n    // mod2.ets\\n    export let c = \\\"mod2 executed\\\"\\n    console.info(c);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "使用lazy-import延迟加载。    执行结果为：     mod2 executed\\n    main executed ",
        "import_module": null,
        "parent": "<li><p>使用lazy-import延迟加载。</p>  <p>  执行结果为：</p> <pre class='\\\"typescript\\\"'>    mod2 executed\\n    main executed</pre> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-lazy-import.html"
    },
    {
        "id": 761,
        "pre": "    export lazy var v;                  // 编译器提示报错：应用编译报错\\n    export lazy default function f(){}; // 编译器提示报错：应用编译报错\\n    export lazy default function(){};   // 编译器提示报错：应用编译报错\\n    export lazy default 42;             // 编译器提示报错：应用编译报错\\n    export lazy { x };                    // 编译器提示报错：应用编译报错\\n    export lazy { x as v };               // 编译器提示报错：应用编译报错\\n    export lazy { x } from \\\"mod\\\";         // 编译器提示报错：应用编译报错\\n    export lazy { x as v } from \\\"mod\\\";    // 编译器提示报错：应用编译报错\\n    export lazy * from \\\"mod\\\";           // 编译器提示报错：应用编译报错\\n    \\n    import lazy v from \\\"mod\\\";           // 编译器提示报错：应用编译报错\\n    import lazy * as ns from \\\"mod\\\";     // 编译器提示报错：应用编译报错",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]错误示例",
        "parent_text": "[h2]错误示例以下写法将引起编译报错。  与type关键词同时使用将会导致报错。     import lazy type { obj } from \\\"./mod\\\";    // 不支持，编译器、应用编译报错\\n    import type lazy { obj } from \\\"./mod\\\";    // 不支持，编译器、应用编译报错 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"错误示例\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178052898__%E9%94%99%E8%AF%AF%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"%E9%94%99%E8%AF%AF%E7%A4%BA%E4%BE%8B\\\"'></a><h4>[h2]错误示例</h4><p>以下写法将引起编译报错。</p>  <p>与type关键词同时使用将会导致报错。</p> <pre class='\\\"typescript\\\"'>    import lazy type { obj } from \\\"./mod\\\";    // 不支持，编译器、应用编译报错\\n    import type lazy { obj } from \\\"./mod\\\";    // 不支持，编译器、应用编译报错</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-lazy-import.html"
    },
    {
        "id": 762,
        "pre": "    // main.ets   \\n    import lazy { a } from \\\"./mod1\\\";    // 从\\\"mod1\\\"内获取a对象，标记为延迟加载\\n    import { c } from \\\"./mod2\\\";\\n    import { b } from \\\"./mod1\\\";         // 再次获取\\\"mod1\\\"内属性，未标记lazy，\\\"mod1\\\"默认执行\\n    \\n    // ...",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在同一ets文件中，期待延迟加载的依赖模块标记不完全。   标记不完全将导致延迟加载失效，并且增加识别延迟加载的开销。  ",
        "import_module": null,
        "parent": "<li><p>在同一ets文件中，期待延迟加载的依赖模块标记不完全。</p> <p>  标记不完全将导致延迟加载失效，并且增加识别延迟加载的开销。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-lazy-import.html"
    },
    {
        "id": 763,
        "pre": "//在ets/interface/XComponentContext.ts中声明native侧接口\\nexport default interface XComponentContext {\\n  drawPattern(): void;\\n\\n  getStatus(): XComponentContextStatus;\\n};\\n\\ntype XComponentContextStatus = {\\n  hasDraw: boolean,\\n  hasChangeColor: boolean,\\n};",
        "type": "Reference",
        "function_call": "getStatus()",
        "function_name": null,
        "parent_text": "在界面中定义XComponent。  import XComponentContext from \\\"../interface/XComponentContext\\\"\\n\\n@Entry\\n@Component\\nstruct Index {\\n    xComponentContext: XComponentContext | undefined = undefined;\\n    xComponentAttrs: XComponentAttrs = {\\n        id: 'xcomponentId',\\n        type: XComponentType.SURFACE,\\n        libraryname: 'nativerender'\\n    }\\n\\n    build() {\\n    Row() {\\n        // ...\\n        // 在xxx.ets 中定义 XComponent\\n        XComponent(this.xComponentAttrs)\\n            .focusable(true) // 可响应键盘事件\\n            .onLoad((xComponentContext) => {\\n                console.log(\\\"onLoad\\\");\\n                this.xComponentContext = xComponentContext as XComponentContext;\\n\\n                // 调用drawPattern绘制内容\\n                if (this.xComponentContext) {\\n                    this.xComponentContext.drawPattern();\\n                    if (this.xComponentContext.getStatus()) {\\n                        this.xComponentContext.getStatus().hasDraw;\\n                    }\\n                }\\n            })\\n            .onDestroy(() => {\\n                console.log(\\\"onDestroy\\\");\\n            })\\n        // ...\\n        }\\n        .onClick(() => {\\n            // 调用getStatus改变绘制内容\\n            if (this.xComponentContext && this.xComponentContext.getStatus()) {\\n                this.xComponentContext.getStatus().hasChangeColor;\\n            }\\n        })\\n        .height('100%')\\n    }\\n}\\n    \\ninterface XComponentAttrs {\\n    id: string;\\n    type: number;\\n    libraryname: string;\\n}",
        "import_module": null,
        "parent": "<li><p>在界面中定义XComponent。</p>  <pre class='\\\"typescript\\\"'>import XComponentContext from \\\"../interface/XComponentContext\\\"\\n\\n@Entry\\n@Component\\nstruct Index {\\n    xComponentContext: XComponentContext | undefined = undefined;\\n    xComponentAttrs: XComponentAttrs = {\\n        id: 'xcomponentId',\\n        type: XComponentType.SURFACE,\\n        libraryname: 'nativerender'\\n    }\\n\\n    build() {\\n    Row() {\\n        // ...\\n        // 在xxx.ets 中定义 XComponent\\n        XComponent(this.xComponentAttrs)\\n            .focusable(true) // 可响应键盘事件\\n            .onLoad((xComponentContext) =&gt; {\\n                console.log(\\\"onLoad\\\");\\n                this.xComponentContext = xComponentContext as XComponentContext;\\n\\n                // 调用drawPattern绘制内容\\n                if (this.xComponentContext) {\\n                    this.xComponentContext.drawPattern();\\n                    if (this.xComponentContext.getStatus()) {\\n                        this.xComponentContext.getStatus().hasDraw;\\n                    }\\n                }\\n            })\\n            .onDestroy(() =&gt; {\\n                console.log(\\\"onDestroy\\\");\\n            })\\n        // ...\\n        }\\n        .onClick(() =&gt; {\\n            // 调用getStatus改变绘制内容\\n            if (this.xComponentContext &amp;&amp; this.xComponentContext.getStatus()) {\\n                this.xComponentContext.getStatus().hasChangeColor;\\n            }\\n        })\\n        .height('100%')\\n    }\\n}\\n    \\ninterface XComponentAttrs {\\n    id: string;\\n    type: number;\\n    libraryname: string;\\n}</pre></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/napi-xcomponent-guidelines.html"
    },
    {
        "id": 764,
        "pre": "import nativeRender from 'libnativerender.so'\\n\\n// 重写XComponentController，设置生命周期回调\\nclass MyXComponentController extends XComponentController {\\n    onSurfaceCreated(surfaceId: string): void {\\n        console.log(`onSurfaceCreated surfaceId: ${surfaceId}`)\\n        nativeRender.SetSurfaceId(BigInt(surfaceId));\\n    }\\n\\n    onSurfaceChanged(surfaceId: string, rect: SurfaceRect): void {\\n        console.log(`onSurfaceChanged surfaceId: ${surfaceId}, rect: ${JSON.stringify(rect)}}`)\\n        // 在onSurfaceChanged中调用ChangeSurface绘制内容\\n        nativeRender.ChangeSurface(BigInt(surfaceId), rect.surfaceWidth, rect.surfaceHeight)\\n    }\\n\\n    onSurfaceDestroyed(surfaceId: string): void {\\n        console.log(`onSurfaceDestroyed surfaceId: ${surfaceId}`)\\n        nativeRender.DestroySurface(BigInt(surfaceId))\\n    }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n    @State currentStatus: string = \\\"index\\\";\\n    xComponentController: XComponentController = new MyXComponentController();\\n\\n    build() {\\n        Column() {\\n            //...\\n            //在xxx.ets 中定义 XComponent\\n            Column({ space: 10 }) {\\n                XComponent({\\n                    type: XComponentType.SURFACE,\\n                    controller: this.xComponentController\\n                })\\n            Text(this.currentStatus)\\n                .fontSize('24fp')\\n                .fontWeight(500)\\n            }\\n            .onClick(() => {\\n                let surfaceId = this.xComponentController.getXComponentSurfaceId()\\n                nativeRender.ChangeColor(BigInt(surfaceId))\\n                let hasChangeColor: boolean = false;\\n                if (nativeRender.GetXComponentStatus(BigInt(surfaceId))) {\\n                    hasChangeColor = nativeRender.GetXComponentStatus(BigInt(surfaceId)).hasChangeColor;\\n                }\\n                if (hasChangeColor) {\\n                    this.currentStatus = \\\"change color\\\";\\n                }\\n            })\\n\\n            //...\\n            Row() {\\n                Button('Draw Star')\\n                    .fontSize('16fp')\\n                    .fontWeight(500)\\n                    .margin({ bottom: 24 })\\n                    .onClick(() => {\\n                        let surfaceId = this.xComponentController.getXComponentSurfaceId()\\n                        nativeRender.DrawPattern(BigInt(surfaceId))\\n                        let hasDraw: boolean = false;\\n                        if (nativeRender.GetXComponentStatus(BigInt(surfaceId))) {\\n                            hasDraw = nativeRender.GetXComponentStatus(BigInt(surfaceId)).hasDraw;\\n                        }\\n                        if (hasDraw) {\\n                            this.currentStatus = \\\"draw star\\\"\\n                        }\\n                    })\\n                    .width('53.6%')\\n                    .height(40)\\n            }\\n            .width('100%')\\n            .justifyContent(FlexAlign.Center)\\n            .alignItems(VerticalAlign.Bottom)\\n            .layoutWeight(1)\\n        }\\n        .width('100%')\\n        .height('100%')\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在界面中定义XComponent。 // 函数声明，在cpp/types/libnativerender/Index.d.ts中定义\\ntype XComponentContextStatus = {\\n    hasDraw: boolean,\\n    hasChangeColor: boolean,\\n};\\nexport const SetSurfaceId: (id: BigInt) => any;\\nexport const ChangeSurface: (id: BigInt, w: number, h: number) =>any;\\nexport const DrawPattern: (id: BigInt) => any;\\nexport const GetXComponentStatus: (id: BigInt) => XComponentContextStatus\\nexport const ChangeColor: (id: BigInt) => any;\\nexport const DestroySurface: (id: BigInt) => any; ",
        "import_module": null,
        "parent": "<li><p>在界面中定义XComponent。</p> <pre class='\\\"javascript\\\"'>// 函数声明，在cpp/types/libnativerender/Index.d.ts中定义\\ntype XComponentContextStatus = {\\n    hasDraw: boolean,\\n    hasChangeColor: boolean,\\n};\\nexport const SetSurfaceId: (id: BigInt) =&gt; any;\\nexport const ChangeSurface: (id: BigInt, w: number, h: number) =&gt;any;\\nexport const DrawPattern: (id: BigInt) =&gt; any;\\nexport const GetXComponentStatus: (id: BigInt) =&gt; XComponentContextStatus\\nexport const ChangeColor: (id: BigInt) =&gt; any;\\nexport const DestroySurface: (id: BigInt) =&gt; any;</pre> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/napi-xcomponent-guidelines.html"
    },
    {
        "id": 765,
        "pre": "@Builder\\nfunction myComponent() {\\n  XComponent({ id: 'xcomponentId1', type: XComponentType.SURFACE, libraryname: 'nativerender' })\\n    .onLoad((context) => {})\\n    .onDestroy(() => {})\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "生命周期说明",
        "parent_text": "  生命周期说明 开发者在ArkTS侧使用如下代码即可用XComponent组件进行利用EGL/OpenGLES渲染的开发。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"生命周期说明\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052938__%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%B4%E6%98%8E\\\"'></a><a name='\\\"%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%B4%E6%98%8E\\\"'></a> <h4>生命周期说明</h4> <p>开发者在ArkTS侧使用如下代码即可用XComponent组件进行利用EGL/OpenGLES渲染的开发。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/napi-xcomponent-guidelines.html"
    },
    {
        "id": 766,
        "pre": "// 导入模块\\nimport { getNode, HvigorNode, HvigorTask } from '@ohos/hvigor';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "编辑工程下hvigorfile.ts文件。 ",
        "import_module": null,
        "parent": "<li id='\\\"li1763717163521\\\"'><span>编辑工程下hvigorfile.ts文件。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-task.html"
    },
    {
        "id": 767,
        "pre": "let photoSelectOptions = new picker.PhotoSelectOptions();\\nphotoSelectOptions.MIMEType = picker.PhotoViewMIMETypes.IMAGE_TYPE;\\nphotoSelectOptions.maxSelectNumber = 1;\\nlet hdrpixelMap : PixelMap|undefined = undefined;\\nlet photoPicker = new picker.PhotoViewPicker();\\nphotoPicker.select(photoSelectOptions).then((photoSelectResult: picker.PhotoSelectResult) => {\\n    console.info('PhotoViewPicker.select successfully, photoSelectResult uri: ' + JSON.stringify(photoSelectResult));\\n    console.info('PhotoViewPicker.select successfully, photoSelectResult 0 uri: ' + photoSelectResult.photoUris[0]);\\n    let fd = fs.openSync(photoSelectResult.photoUris[0], fs.OpenMode.READ_ONLY);\\n    const imageSource = image.createImageSource(fd.fd);\\n    let options:image.DecodingOptions = {};\\n    options.index = 0;\\n    options.desiredDynamicRange = image.DecodingDynamicRange.HDR;\\n    imageSource.createPixelMap(options).then(async (pixelMap) => {\\n        hdrpixelMap = pixelmap })\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过解码器获取10 bit的PixelMap。 ",
        "import_module": null,
        "parent": "<li>通过解码器获取10 bit的PixelMap。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/image-dynamic-metadata-generation.html"
    },
    {
        "id": 768,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/require-array-sort-compare\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_require-array-sort-compare.html"
    },
    {
        "id": 769,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError, request } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nlet storageBucket: cloudStorage.StorageBucket = cloudStorage.bucket();\\n\\n@Component\\nexport struct testPage {\\n  build() {\\n  }\\n\\n  // 下载云侧文件至本地\\n  download() {\\n    // 获取云存储默认实例中fileName文件，保存至本地\\n    storageBucket.downloadFile(getContext(this), {\\n      localPath: `screenshot.jpg`, // 文件将会保存在context.cacheDir目录下\\n      cloudPath: `screenshot/screenshot_20250115_155321.jpg`  // 云侧文件路径，支持传入“文件目录/文件名”，或仅传入文件名\\n    }).then((task: request.agent.Task) => {\\n      task.on('progress', (progress) => {\\n        hilog.info(0x0000, 'testTag', `on progress ${JSON.stringify(progress)} `);\\n      });\\n      task.on('completed', (progress) => {\\n        hilog.info(0x0000, 'testTag', `on completed ${JSON.stringify(progress)} `);\\n      });\\n      task.on('failed', (progress) => {\\n        hilog.info(0x0000, 'testTag', `on failed ${JSON.stringify(progress)} `);\\n      });\\n      task.on('response', (response) => {\\n        hilog.info(0x0000, 'testTag', `on response ${JSON.stringify(response)} `);\\n      });\\n      task.start((err: BusinessError) => {\\n        if (err) {\\n          hilog.error(0x0000, 'testTag', `Failed to start a file download task, code: ${err.code}, message: ${err.message}`);\\n        } else {\\n          hilog.info(0x0000, 'testTag', `Succeeded in starting a file download task. result: ${task.tid}`);\\n        }\\n      });\\n    }).catch((err: BusinessError) => {\\n      hilog.error(0x0000, 'testTag', `Failed to download file, code: ${err.code}, message: ${err.message}`);\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作步骤",
        "parent_text": "  操作步骤  调用StorageBucket.downloadFile接口创建下载任务，监听下载任务的progress、completed、failed等事件。 启动下载任务。           下载成功后，文件将保存在context.cacheDir目录下。    完整示例代码如下：      如果本地已存在同名文件，将出现错误，可以通过设置DownloadParams.overwrite来决定是否覆盖本地文件。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section4371163741119\\\"'> <a name='\\\"section4371163741119\\\"'></a><a name='\\\"section4371163741119\\\"'></a> <h4>操作步骤</h4> <ol> <li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section02263293319\\\"' target='\\\"_blank\\\"'>StorageBucket.downloadFile</a>接口创建下载任务，监听下载任务的progress、completed、failed等事件。</li> <li>启动下载任务。       <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120101.90249037511421325024730610197526:50001231000000:2800:20980141FBDCD88AED2F25CCB2181398F6F53F514E0B838C34B3B3C3AD97DEFC.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>下载成功后，文件将保存在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-inner-application-context#属性\\\"' target='\\\"_blank\\\"'>context.cacheDir</a>目录下。</p> </div> </div></li> </ol> <p>完整示例代码如下：</p>  <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120101.94525380481024551128758670847413:50001231000000:2800:85F0B9BF3C42AA644133EDFE2A85EF261196BAAAE8E276ACB94172A5012E83A8.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>如果本地已存在同名文件，将出现错误，可以通过设置<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section14137913019\\\"' target='\\\"_blank\\\"'>DownloadParams.overwrite</a>来决定是否覆盖本地文件。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-download-file.html"
    },
    {
        "id": 770,
        "pre": "import { sceneMap } from '@kit.MapKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-location-division.html"
    },
    {
        "id": 771,
        "pre": "{\\n  \\\"app\\\": {\\n    \\\"signingConfigs\\\": [],\\n    \\\"products\\\": [\\n      {\\n        \\\"name\\\": \\\"default\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n        \\\"buildOption\\\": {\\n          \\\"strictMode\\\": {\\n            \\\"caseSensitiveCheck\\\": true,\\n            \\\"useNormalizedOHMUrl\\\": true\\n          }\\n        }\\n      }\\n    ],\\n    \\\"buildModeSet\\\": [\\n      {\\n        \\\"name\\\": \\\"debug\\\",\\n      },\\n      {\\n        \\\"name\\\": \\\"release\\\",\\n      }\\n    ]\\n  },\\n  \\\"modules\\\": [\\n    {\\n      \\\"name\\\": \\\"entry\\\",\\n      \\\"srcPath\\\": \\\"./entry\\\",\\n      \\\"targets\\\": [\\n        {\\n          \\\"name\\\": \\\"default\\\",\\n          \\\"applyToProducts\\\": [\\n            \\\"default\\\"\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "工程级build-profile.json5示例",
        "parent_text": "工程级build-profile.json5示例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1448071082016\\\"'><a name='\\\"section1448071082016\\\"'></a><a name='\\\"section1448071082016\\\"'></a><h4>工程级build-profile.json5示例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-compilation-options-customizing-sample.html"
    },
    {
        "id": 772,
        "pre": "{\\n  \\\"apiType\\\": \\\"stageMode\\\",\\n  \\\"buildOption\\\": {\\n  },\\n  \\\"buildOptionSet\\\": [\\n    {\\n      \\\"name\\\": \\\"release\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"obfuscation\\\": {\\n          \\\"ruleOptions\\\": {\\n            \\\"enable\\\": true,\\n            \\\"files\\\": [\\n              \\\"./obfuscation-rules.txt\\\"\\n            ]\\n          }\\n        }\\n      }\\n    },\\n    {\\n      \\\"name\\\": \\\"debug\\\",\\n      \\\"debuggable\\\": true,\\n      \\\"arkOptions\\\": {\\n        \\\"obfuscation\\\": {\\n          \\\"ruleOptions\\\": {\\n            \\\"enable\\\": false\\n          }\\n        }\\n      }\\n    }\\n  ],\\n  \\\"buildModeBinder\\\": [\\n    {\\n      \\\"buildModeName\\\": \\\"release\\\",\\n      \\\"mappings\\\": [\\n        {\\n          \\\"buildOptionName\\\": \\\"release\\\",\\n          \\\"targetName\\\": \\\"default\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"buildModeName\\\": \\\"debug\\\",\\n      \\\"mappings\\\": [\\n        {\\n          \\\"buildOptionName\\\": \\\"debug\\\",\\n          \\\"targetName\\\": \\\"default\\\"\\n        }\\n      ]\\n    }\\n  ],\\n  \\\"targets\\\": [\\n    {\\n      \\\"name\\\": \\\"default\\\",\\n    },\\n    {\\n      \\\"name\\\": \\\"ohosTest\\\",\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]entry模块",
        "parent_text": "[h2]entry模块 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section15550114191912\\\"'><a name='\\\"section15550114191912\\\"'></a><a name='\\\"section15550114191912\\\"'></a><h4>[h2]entry模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-compilation-options-customizing-sample.html"
    },
    {
        "id": 773,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-empty-interface\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-empty-interface.html"
    },
    {
        "id": 774,
        "pre": "// an interface with any number of members\\ninterface Foo {\\n  name: string;\\n}\\n\\ninterface Bar {\\n  age: number;\\n}\\n\\n// an interface with more than one supertype\\n// in this case the interface can be used as a replacement of an intersection type.\\nexport interface Baz extends Foo, Bar {}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-empty-interface.html"
    },
    {
        "id": 775,
        "pre": "// an empty interface\\ninterface Foo {}\\n\\n// an interface with only one supertype (Bar === Foo)\\nexport interface Bar extends Foo {}\\n\\n// an interface with an empty list of supertypes\\nexport interface Baz {}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-empty-interface.html"
    },
    {
        "id": 776,
        "pre": "import { advertising, identifier } from '@kit.AdsKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { router } from '@kit.ArkUI';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  // 获取到的OAID\\n  private oaid: string = '';\\n\\n  aboutToAppear() {\\n    try {\\n      // 使用Promise回调方式获取OAID\\n      identifier.getOAID().then((data: string) => {\\n        this.oaid = data;\\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\\n      }).catch((error: BusinessError) => {\\n        hilog.error(0x0000, 'testTag', '%{public}s',\\n          `Failed to get adsIdentifierInfo, code: ${error.code}, message: ${error.message}`);\\n      })\\n    } catch (error) {\\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\\n    }\\n  }\\n\\n  build() {\\n    Row() {\\n      Button('加载广告', { type: ButtonType.Normal, stateEffect: true })\\n        .onClick(() => {\\n          // 调用加载广告方法\\n          requestAd(this.context, this.oaid);\\n        })\\n        .borderRadius(8)\\n        .backgroundColor(0x317aff)\\n        .width(90)\\n        .height(40)\\n    }\\n    .height('100%')\\n  }\\n}\\n\\n/**\\n * 加载广告\\n *\\n * @param context 上下文环境\\n * @param oaid OAID信息\\n */\\nfunction requestAd(context: common.Context, oaid: string): void {\\n  const adRequestParam: advertising.AdRequestParams = {\\n    // 广告类型\\n    adType: 60,\\n    // 'testy3cglm3pj0'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\\n    adId: 'testy3cglm3pj0',\\n    // 在AdRequestParams中添加oaid参数\\n    oaid: oaid,\\n    // 用于区分普通请求和预加载请求，默认值false代表普通请求，true代表预加载请求\\n    isPreload: false\\n  };\\n  const adOptions: advertising.AdOptions = {\\n    // 在AdOptions中添加totalDuration参数，用于设置贴片广告展示时长（贴片广告必填）\\n    totalDuration: 30,\\n    // 在AdOptions中添加placementAdCountDownDesc参数，设置贴片广告倒计时文案（可选，填写了则展示文案，不填写则只展示倒计时）\\n    placementAdCountDownDesc: encodeURI('VIP免广告'),\\n    // 是否允许流量下载 0不允许 1允许，不设置以广告主设置为准\\n    allowMobileTraffic: 0,\\n    // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\\n    tagForChildProtection: -1,\\n    // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\\n    tagForUnderAgeOfPromise: -1,\\n    // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\\n    adContentClassification: 'A'\\n  };\\n  // 广告请求回调监听\\n  const adLoaderListener: advertising.AdLoadListener = {\\n    // 广告请求失败回调\\n    onAdLoadFailure: (errorCode: number, errorMsg: string) => {\\n      hilog.error(0x0000, 'testTag', '%{public}s',\\n        `Failed to request single ad, errorCode is: ${errorCode}, errorMsg is: ${errorMsg}`);\\n    },\\n    // 广告请求成功回调\\n    onAdLoadSuccess: (ads: Array<advertising.Advertisement>) => {\\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting single ad!');\\n      // 保存请求到的广告内容用于展示\\n      const returnAds = ads;\\n      // 路由到广告展示页面\\n      routePage('pages/PlacementAdPage', returnAds);\\n\\n    }\\n  };\\n  // 创建AdLoader广告对象\\n  const load: advertising.AdLoader = new advertising.AdLoader(context);\\n  // 调用广告请求接口\\n  hilog.info(0x0000, 'testTag', '%{public}s', 'Request single ad!');\\n  load.loadAd(adRequestParam, adOptions, adLoaderListener);\\n}\\n\\n/**\\n * 路由跳转\\n *\\n * @param pageUri 要路由到的页面\\n */\\nasync function routePage(pageUri: string, ads: Array<advertising.Advertisement | null>) {\\n  let options: router.RouterOptions = {\\n    url: pageUri,\\n    params: {\\n      ads: ads\\n    }\\n  }\\n  try {\\n    hilog.info(0x0000, 'testTag', '%{public}s', `RoutePage: ${pageUri}`);\\n    router.pushUrl(options);\\n  } catch (error) {\\n    hilog.error(0x0000, 'testTag', '%{public}s',\\n      `Failed to routePage callback, code: ${error.code}, msg: ${error.message}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "示例代码如下所示： ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>示例代码如下所示： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ads-publisher-service-roll.html"
    },
    {
        "id": 777,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unsafe-argument\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-argument.html"
    },
    {
        "id": 778,
        "pre": "// 与session声明不在同一文件时，需要import\\nimport { session } from './xxx'; // session声明的文件\\n\\n  public setAVMetadata(playInfo: avSession.AVMediaDescription): Promise<void> {\\n    const metadata: avSession.AVMetadata = {\\n        assetId: playInfo.assetId, // 需要配置实际id\\n        title: playInfo.title, // 播放媒体资源的标题\\n        subtitle: playInfo.subtitle,// 播放媒体资源的副标题\\n        // 发现Cast+ Stream 和 DLNA协议设备，TYPE_CAST_PLUS_STREAM为默认必选。\\n        filter: avSession.ProtocolType.TYPE_CAST_PLUS_STREAM|avSession.ProtocolType.TYPE_DLNA,\\n        mediaImage: playInfo.mediaImage,\\n        artist: playInfo.artist,\\n        // 如果是DRM资源，配置支持的DRM uuid 用于设备过滤。非DRM资源不配置。\\n        drmSchemes: ['3d5e6d35-9b9a-41e8-b843-dd3c6e72c42c']\\n      };\\n    return session.setAVMetadata(metadata);\\n  }\\n  public setSessionListener() {\\n   // 请按照自检接入表按需注册并实现基础播控的控制指令，以下为举例\\n    this.session?.on('play', () => {\\n    });\\n    this.session?.on('pause', () => {\\n    });\\n  }",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "设置媒体资源信息，注册基础播控回调，接入系统播控中心的基础播控。 接入投播组件前需要先适配媒体播控中心的基础播控业务，具体需要接入的内容请按照应用类型参考应用接入自检表。应用可以通过filter字段设置需要发现和过滤的协议类型，来匹配应用期望的投播设备。注意，投播后，应用播放器切换上下集时，也可以通过filter参数控制系统播控中心是否显示可投播设备列表，filter参数设置为0，播控会识别为不支持投播，隐藏可投播设备显示。避免用户从播控中心投播，应用资源不可用。 需要在AVCastPicker中仅显示支持DRM资源投播的设备时，应在AVMetaData设置明确的drmSchemes。   ",
        "import_module": null,
        "parent": "<li>设置媒体资源信息，注册基础播控回调，接入系统播控中心的基础播控。<div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115926.21869410812118388751647242922847:50001231000000:2800:3A3E544451F3F7AEE17B83CB4BEC8C2A95BCA55C177E7C3A7E3AB15BBEDC27CC.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ul><li>接入投播组件前需要先适配媒体播控中心的基础播控业务，具体需要接入的内容请按照应用类型参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/playback-control-access-checklist\\\"' target='\\\"_blank\\\"'>应用接入自检表</a>。</li><li>应用可以通过filter字段设置需要发现和过滤的协议类型，来匹配应用期望的投播设备。<p>注意，投播后，应用播放器切换上下集时，也可以通过filter参数控制系统播控中心是否显示可投播设备列表，filter参数设置为0，播控会识别为不支持投播，隐藏可投播设备显示。避免用户从播控中心投播，应用资源不可用。</p> </li><li>需要在AVCastPicker中仅显示支持DRM资源投播的设备时，应在AVMetaData设置明确的drmSchemes。</li></ul> </div></div>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/distributed-playback-guide.html"
    },
    {
        "id": 779,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError, request } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在代码文件中引入Cloud Foundation Kit。 ",
        "import_module": null,
        "parent": "<li id='\\\"li5403145653114\\\"'>在代码文件中引入Cloud Foundation Kit。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/agc-harmonyos-clouddev-invokecloudstorage.html"
    },
    {
        "id": 780,
        "pre": "import { scanCore, scanBarcode, customScan } from '@kit.ScanKit';\\n// 导入功能涉及的权限申请、回调接口\\nimport { router, promptAction, display } from '@kit.ArkUI';\\nimport { AsyncCallback, BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { common, abilityAccessCtrl } from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入自定义界面扫码接口以及相关接口模块，导入方法如下。",
        "import_module": null,
        "parent": "<li>导入自定义界面扫码接口以及相关接口模块，导入方法如下。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scan-customscan.html"
    },
    {
        "id": 781,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-rsa-key\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section96671853122715\\\"'><a name='\\\"section96671853122715\\\"'></a><a name='\\\"section96671853122715\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-rsa-key.html"
    },
    {
        "id": 782,
        "pre": "// 不支持：\\nlet res: any = some_api_function('hello', 'world');\\n// `res`是什么？错误代码的数字？字符串？对象？\\n// 该如何处理它？\\n// 支持：\\nclass CallResult {\\n  public succeeded(): boolean { ... }\\n  public errorMessage(): string { ... }\\n}\\n\\nlet res: CallResult = some_api_function('hello', 'world');\\nif (!res.succeeded()) {\\n  console.log('Call failed: ' + res.errorMessage());\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]强制使用静态类型",
        "parent_text": "[h2]强制使用静态类型静态类型是ArkTS最重要的特性之一。如果程序采用静态类型，即所有类型在编译时都是已知的，那么开发者就能够容易理解代码中使用了哪些数据结构。同时，由于所有类型在程序实际运行前都是已知的，编译器可以提前验证代码的正确性，从而可以减少运行时的类型检查，有助于提升性能。 基于上述考虑，ArkTS中禁止使用any类型。 示例  any类型在TypeScript中并不常见，只有大约1%的TypeScript代码库使用。一些代码检查工具（例如ESLint）也制定一系列规则来禁止使用any。因此，虽然禁止any将导致代码重构，但重构量很小，有助于整体性能提升。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"强制使用静态类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E5%BC%BA%E5%88%B6%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]强制使用静态类型</h4><p>静态类型是ArkTS最重要的特性之一。如果程序采用静态类型，即所有类型在编译时都是已知的，那么开发者就能够容易理解代码中使用了哪些数据结构。同时，由于所有类型在程序实际运行前都是已知的，编译器可以提前验证代码的正确性，从而可以减少运行时的类型检查，有助于提升性能。</p> <p>基于上述考虑，ArkTS中禁止使用any类型。</p> <p><strong>示例</strong></p>  <p>any类型在TypeScript中并不常见，只有大约1%的TypeScript代码库使用。一些代码检查工具（例如ESLint）也制定一系列规则来禁止使用any。因此，虽然禁止any将导致代码重构，但重构量很小，有助于整体性能提升。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 783,
        "pre": "class Point {\\n  public x: number = 0\\n  public y: number = 0\\n\\n  constructor(x: number, y: number) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n}\\n\\n// 无法从对象中删除某个属性，从而确保所有Point对象都具有属性x\\nlet p1 = new Point(1.0, 1.0);\\ndelete p1.x;           // 在TypeScript和ArkTS中，都会产生编译时错误\\ndelete (p1 as any).x;  // 在TypeScript中不会报错；在ArkTS中会产生编译时错误\\n\\n// Point类没有定义命名为z的属性，在程序运行时也无法添加该属性\\nlet p2 = new Point(2.0, 2.0);\\np2.z = 'Label';           // 在TypeScript和ArkTS中，都会产生编译时错误\\n(p2 as any).z = 'Label';   // 在TypeScript中不会报错；在ArkTS中会产生编译时错误\\n\\n// 类的定义确保了所有Point对象只有属性x和y，并且无法被添加其他属性\\nlet p3 = new Point(3.0, 3.0);\\nlet prop = Symbol();      // 在TypeScript中不会报错；在ArkTS中会产生编译时错误\\n(p3 as any)[prop] = p3.x; // 在TypeScript中不会报错；在ArkTS中会产生编译时错误\\np3[prop] = p3.x;          // 在TypeScript和ArkTS中，都会产生编译时错误\\n\\n// 类的定义确保了所有Point对象的属性x和y都具有number类型，因此，无法将其他类型的值赋值给它们\\nlet p4 = new Point(4.0, 4.0);\\np4.x = 'Hello!';          // 在TypeScript和ArkTS中，都会产生编译时错误\\n(p4 as any).x = 'Hello!'; // 在TypeScript中不会报错；在ArkTS中会产生编译时错误\\n\\n// 使用符合类定义的Point对象：\\nfunction distance(p1: Point, p2: Point): number {\\n  return Math.sqrt(\\n    (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y)\\n  );\\n}\\nlet p5 = new Point(5.0, 5.0);\\nlet p6 = new Point(6.0, 6.0);\\nconsole.log('Distance between p5 and p6: ' + distance(p5, p6));",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]禁止在运行时变更对象布局",
        "parent_text": "[h2]禁止在运行时变更对象布局为实现最佳性能，ArkTS要求在程序执行期间不能更改对象的布局。换句话说，ArkTS禁止以下行为： 向对象中添加新的属性或方法。从对象中删除已有的属性或方法。将任意类型的值赋值给对象属性。 TypeScript编译器已经禁止了许多此类操作。然而，有些操作还是有可能绕过编译器的，例如，使用as any转换对象的类型，或者在编译TS代码时关闭严格类型检查的配置，或者在代码中通过@ts-ignore忽略类型检查。 在ArkTS中，严格类型检查不是可配置项。ArkTS强制进行部分严格类型检查，并通过规范禁止使用any类型，禁止在代码中使用@ts-ignore。 示例  修改对象布局会影响代码的可读性以及运行时性能。从开发者的角度来说，在某处定义类，然后又在其他地方修改实际的对象布局，很容易引起困惑乃至引入错误。此外，这点还需要额外的运行时支持，增加了执行开销。这一点与静态类型的约束也冲突：既然已决定使用显式类型，为什么还需要添加或删除属性呢？ 当前，只有少数项目允许在运行时变更对象布局，一些常用的代码检查工具也增加了相应的限制规则。这个约束只会导致少量代码重构，但会提升性能。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"禁止在运行时变更对象布局\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E7%A6%81%E6%AD%A2%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%98%E6%9B%B4%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80\\\"'></a><a name='\\\"%E7%A6%81%E6%AD%A2%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%98%E6%9B%B4%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80\\\"'></a><h4>[h2]禁止在运行时变更对象布局</h4><p>为实现最佳性能，ArkTS要求在程序执行期间不能更改对象的布局。换句话说，ArkTS禁止以下行为：</p> <ul><li>向对象中添加新的属性或方法。</li><li>从对象中删除已有的属性或方法。</li><li>将任意类型的值赋值给对象属性。</li></ul> <p>TypeScript编译器已经禁止了许多此类操作。然而，有些操作还是有可能绕过编译器的，例如，使用as any转换对象的类型，或者在编译TS代码时关闭严格类型检查的配置，或者在代码中通过@ts-ignore忽略类型检查。</p> <p>在ArkTS中，严格类型检查不是可配置项。ArkTS强制进行部分严格类型检查，并通过规范禁止使用any类型，禁止在代码中使用@ts-ignore。</p> <p><strong>示例</strong></p>  <p>修改对象布局会影响代码的可读性以及运行时性能。从开发者的角度来说，在某处定义类，然后又在其他地方修改实际的对象布局，很容易引起困惑乃至引入错误。此外，这点还需要额外的运行时支持，增加了执行开销。这一点与静态类型的约束也冲突：既然已决定使用显式类型，为什么还需要添加或删除属性呢？</p> <p>当前，只有少数项目允许在运行时变更对象布局，一些常用的代码检查工具也增加了相应的限制规则。这个约束只会导致少量代码重构，但会提升性能。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 784,
        "pre": "// 一元运算符`+`只能作用于数值类型：\\nlet t = +42;   // 合法运算\\nlet s = +'42'; // 编译时错误",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]限制运算符的语义",
        "parent_text": "[h2]限制运算符的语义为获得更好的性能并鼓励开发者编写更清晰的代码，ArkTS限制了一些运算符的语义。详细的语义限制，请参考约束说明。 示例  使用额外的语义重载语言运算符会增加语言规范的复杂度，而且，开发者还被迫牢记所有可能的例外情况及对应的处理规则。在某些情况下，产生一些不必要的运行时开销。 当前只有不到1%的代码库使用该特性。因此，尽管限制运算符的语义需要重构代码，但重构量很小且非常容易操作，并且，通过重构能使代码更清晰、具备更高性能。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"限制运算符的语义\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%99%90%E5%88%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E8%AF%AD%E4%B9%89\\\"'></a><a name='\\\"%E9%99%90%E5%88%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E8%AF%AD%E4%B9%89\\\"'></a><h4>[h2]限制运算符的语义</h4><p>为获得更好的性能并鼓励开发者编写更清晰的代码，ArkTS限制了一些运算符的语义。详细的语义限制，请参考<a href='\\\"#约束说明\\\"'>约束说明</a>。</p> <p><strong>示例</strong></p>  <p>使用额外的语义重载语言运算符会增加语言规范的复杂度，而且，开发者还被迫牢记所有可能的例外情况及对应的处理规则。在某些情况下，产生一些不必要的运行时开销。</p> <p>当前只有不到1%的代码库使用该特性。因此，尽管限制运算符的语义需要重构代码，但重构量很小且非常容易操作，并且，通过重构能使代码更清晰、具备更高性能。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 785,
        "pre": "class T {\\n  public name: string = ''\\n\\n  public greet(): void {\\n    console.log('Hello, ' + this.name);\\n  }\\n}\\n\\nclass U {\\n  public name: string = ''\\n\\n  public greet(): void {\\n    console.log('Greetings, ' + this.name);\\n  }\\n}",
        "type": "Reference",
        "function_call": "new T()",
        "function_name": "[h2]不支持 structural typing",
        "parent_text": "[h2]不支持 structural typing假设两个不相关的类T和U拥有相同的publicAPI：  能把类型为T的值赋给类型为U的变量吗？ let u: U = new T(); // 是否允许？ 能把类型为T的值传递给接受类型为U的参数的函数吗？ function greeter(u: U) {\\n  console.log('To ' + u.name);\\n  u.greet();\\n}\\n\\nlet t: T = new T();\\ngreeter(t); // 是否允许？ 换句话说，我们将采取下面哪种方法呢： T和U没有继承关系或没有implements相同的接口，但由于它们具有相同的publicAPI，它们“在某种程度上是相等的”，所以上述两个问题的答案都是“是”；T和U没有继承关系或没有implements相同的接口，应当始终被视为完全不同的类型，因此上述两个问题的答案都是“否”。 采用第一种方法的语言支持structural typing，而采用第二种方法的语言则不支持structural typing。目前TypeScript支持structural typing，而ArkTS不支持。 structural typing是否有助于生成清晰、易理解的代码，关于这一点并没有定论。那为什么ArkTS不支持structural typing呢？ 因为对structural typing的支持是一个重大的特性，需要在语言规范、编译器和运行时进行大量的考虑和仔细的实现。另外，由于ArkTS使用静态类型，运行时为了支持这个特性需要额外的性能开销。 鉴于此，当前我们还不支持该特性。根据实际场景的需求和反馈，我们后续会重新加以考虑。更多案例和建议请参考约束说明。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持-structural-typing\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81-structural-typing\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81-structural-typing\\\"'></a><h4>[h2]不支持 structural typing</h4><p>假设两个不相关的类T和U拥有相同的publicAPI：</p>  <p>能把类型为T的值赋给类型为U的变量吗？</p> <pre class='\\\"typescript\\\"'>let u: U = new T(); // 是否允许？</pre> <p>能把类型为T的值传递给接受类型为U的参数的函数吗？</p> <pre class='\\\"typescript\\\"'>function greeter(u: U) {\\n  console.log('To ' + u.name);\\n  u.greet();\\n}\\n\\nlet t: T = new T();\\ngreeter(t); // 是否允许？</pre> <p>换句话说，我们将采取下面哪种方法呢：</p> <ul><li>T和U没有继承关系或没有implements相同的接口，但由于它们具有相同的publicAPI，它们“在某种程度上是相等的”，所以上述两个问题的答案都是“是”；</li><li>T和U没有继承关系或没有implements相同的接口，应当始终被视为完全不同的类型，因此上述两个问题的答案都是“否”。</li></ul> <p>采用第一种方法的语言支持structural typing，而采用第二种方法的语言则不支持structural typing。目前TypeScript支持structural typing，而ArkTS不支持。</p> <p>structural typing是否有助于生成清晰、易理解的代码，关于这一点并没有定论。那为什么ArkTS不支持structural typing呢？</p> <p>因为对structural typing的支持是一个重大的特性，需要在语言规范、编译器和运行时进行大量的考虑和仔细的实现。另外，由于ArkTS使用静态类型，运行时为了支持这个特性需要额外的性能开销。</p> <p>鉴于此，当前我们还不支持该特性。根据实际场景的需求和反馈，我们后续会重新加以考虑。更多案例和建议请参考<a href='\\\"#约束说明\\\"'>约束说明</a>。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 786,
        "pre": "var x = { 'name': 'x', 2: '3' };\\n\\nconsole.log(x['name']);\\nconsole.log(x[2]);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]对象的属性名必须是合法的标识符",
        "parent_text": "[h2]对象的属性名必须是合法的标识符规则：arkts-identifiers-as-prop-names 级别：错误 在ArkTS中，对象的属性名不能为数字或字符串。例外：ArkTS支持属性名为字符串字面量和枚举中的字符串值。通过属性名访问类的属性，通过数值索引访问数组元素。 TypeScript  ArkTS class X {\\n  public name: string = ''\\n}\\nlet x: X = { name: 'x' };\\nconsole.log(x.name);\\n\\nlet y = ['a', 'b', 'c'];\\nconsole.log(y[2]);\\n\\n// 在需要通过非标识符（即不同类型的key）获取数据的场景中，使用Map<Object, some_type>。\\nlet z = new Map<Object, string>();\\nz.set('name', '1');\\nz.set(2, '2');\\nconsole.log(z.get('name'));\\nconsole.log(z.get(2));\\n\\nenum Test {\\n  A = 'aaa',\\n  B = 'bbb'\\n}\\n\\nlet obj: Record<string, number> = {\\n  [Test.A]: 1,   // 枚举中的字符串值\\n  [Test.B]: 2,   // 枚举中的字符串值\\n  ['value']: 3   // 字符串字面量\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"对象的属性名必须是合法的标识符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D%E5%BF%85%E9%A1%BB%E6%98%AF%E5%90%88%E6%B3%95%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6\\\"'></a><a name='\\\"%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D%E5%BF%85%E9%A1%BB%E6%98%AF%E5%90%88%E6%B3%95%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6\\\"'></a><h4>[h2]对象的属性名必须是合法的标识符</h4><p><strong>规则：</strong>arkts-identifiers-as-prop-names</p> <p><strong>级别：错误</strong></p> <p>在ArkTS中，对象的属性名不能为数字或字符串。例外：ArkTS支持属性名为字符串字面量和枚举中的字符串值。通过属性名访问类的属性，通过数值索引访问数组元素。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class X {\\n  public name: string = ''\\n}\\nlet x: X = { name: 'x' };\\nconsole.log(x.name);\\n\\nlet y = ['a', 'b', 'c'];\\nconsole.log(y[2]);\\n\\n// 在需要通过非标识符（即不同类型的key）获取数据的场景中，使用Map&lt;Object, some_type&gt;。\\nlet z = new Map&lt;Object, string&gt;();\\nz.set('name', '1');\\nz.set(2, '2');\\nconsole.log(z.get('name'));\\nconsole.log(z.get(2));\\n\\nenum Test {\\n  A = 'aaa',\\n  B = 'bbb'\\n}\\n\\nlet obj: Record&lt;string, number&gt; = {\\n  [Test.A]: 1,   // 枚举中的字符串值\\n  [Test.B]: 2,   // 枚举中的字符串值\\n  ['value']: 3   // 字符串字面量\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 787,
        "pre": "class C {\\n  #foo: number = 42\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]不支持以#开头的私有字段",
        "parent_text": "[h2]不支持以#开头的私有字段规则：arkts-no-private-identifiers 级别：错误 ArkTS不支持使用#符号开头声明的私有字段。改用private关键字。 TypeScript  ArkTS class C {\\n  private foo: number = 42\\n} ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持以开头的私有字段\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BB%A5%E5%BC%80%E5%A4%B4%E7%9A%84%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BB%A5%E5%BC%80%E5%A4%B4%E7%9A%84%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5\\\"'></a><h4>[h2]不支持以#开头的私有字段</h4><p><strong>规则：</strong>arkts-no-private-identifiers</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持使用#符号开头声明的私有字段。改用private关键字。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  private foo: number = 42\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 788,
        "pre": "let X: string\\ntype X = number[] // 类型的别名与变量同名",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]类型、命名空间的命名必须唯一",
        "parent_text": "[h2]类型、命名空间的命名必须唯一规则：arkts-unique-names 级别：错误 类型（类、接口、枚举）、命名空间的命名必须唯一，且与其他名称（例如：变量名、函数名）不同。 TypeScript  ArkTS let X: string\\ntype T = number[] // 为避免名称冲突，此处不允许使用X ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"类型命名空间的命名必须唯一\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E7%B1%BB%E5%9E%8B%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%91%BD%E5%90%8D%E5%BF%85%E9%A1%BB%E5%94%AF%E4%B8%80\\\"'></a><a name='\\\"%E7%B1%BB%E5%9E%8B%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%9A%84%E5%91%BD%E5%90%8D%E5%BF%85%E9%A1%BB%E5%94%AF%E4%B8%80\\\"'></a><h4>[h2]类型、命名空间的命名必须唯一</h4><p><strong>规则：</strong>arkts-unique-names</p> <p><strong>级别：错误</strong></p> <p>类型（类、接口、枚举）、命名空间的命名必须唯一，且与其他名称（例如：变量名、函数名）不同。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let X: string\\ntype T = number[] // 为避免名称冲突，此处不允许使用X</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 789,
        "pre": "function f(shouldInitialize: boolean) {\\n  if (shouldInitialize) {\\n     var x = 'b';\\n  }\\n  return x;\\n}\\n\\nconsole.log(f(true));  // b\\nconsole.log(f(false)); // undefined\\n\\nlet upperLet = 0;\\n{\\n  var scopedVar = 0;\\n  let scopedLet = 0;\\n  upperLet = 5;\\n}\\nscopedVar = 5; // 可见\\nscopedLet = 5; // 编译时错误",
        "type": "Reference",
        "function_call": "function f(shouldInitialize: boolean): string",
        "function_name": "[h2]使用let而非var",
        "parent_text": "[h2]使用let而非var规则：arkts-no-var 级别：错误 let关键字可以在块级作用域中声明变量，帮助程序员避免错误。因此，ArkTS不支持var，请使用let声明变量。 TypeScript  ArkTS function f(shouldInitialize: boolean): string {\\n  let x: string = 'a';\\n  if (shouldInitialize) {\\n    x = 'b';\\n  }\\n  return x;\\n}\\n\\nconsole.log(f(true));  // b\\nconsole.log(f(false)); // a\\n\\nlet upperLet = 0;\\nlet scopedVar = 0;\\n{\\n  let scopedLet = 0;\\n  upperLet = 5;\\n}\\nscopedVar = 5;\\nscopedLet = 5; //编译时错误 ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用let而非var\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BD%BF%E7%94%A8let%E8%80%8C%E9%9D%9Evar\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8let%E8%80%8C%E9%9D%9Evar\\\"'></a><h4>[h2]使用let而非var</h4><p><strong>规则：</strong>arkts-no-var</p> <p><strong>级别：错误</strong></p> <p>let关键字可以在块级作用域中声明变量，帮助程序员避免错误。因此，ArkTS不支持var，请使用let声明变量。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function f(shouldInitialize: boolean): string {\\n  let x: string = 'a';\\n  if (shouldInitialize) {\\n    x = 'b';\\n  }\\n  return x;\\n}\\n\\nconsole.log(f(true));  // b\\nconsole.log(f(false)); // a\\n\\nlet upperLet = 0;\\nlet scopedVar = 0;\\n{\\n  let scopedLet = 0;\\n  upperLet = 5;\\n}\\nscopedVar = 5;\\nscopedLet = 5; //编译时错误</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 790,
        "pre": "let value1: any\\nvalue1 = true;\\nvalue1 = 42;\\n\\nlet value2: unknown\\nvalue2 = true;\\nvalue2 = 42;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用具体的类型而非any或unknown",
        "parent_text": "[h2]使用具体的类型而非any或unknown规则：arkts-no-any-unknown 级别：错误 ArkTS不支持any和unknown类型。显式指定具体类型。 TypeScript  ArkTS let value_b: boolean = true; // 或者 let value_b = true\\nlet value_n: number = 42; // 或者 let value_n = 42\\nlet value_o1: Object = true;\\nlet value_o2: Object = 42; ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用具体的类型而非any或unknown\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%80%8C%E9%9D%9Eany%E6%88%96unknown\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%80%8C%E9%9D%9Eany%E6%88%96unknown\\\"'></a><h4>[h2]使用具体的类型而非any或unknown</h4><p><strong>规则：</strong>arkts-no-any-unknown</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持any和unknown类型。显式指定具体类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let value_b: boolean = true; // 或者 let value_b = true\\nlet value_n: number = 42; // 或者 let value_n = 42\\nlet value_o1: Object = true;\\nlet value_o2: Object = 42;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 791,
        "pre": "type DescribableFunction = {\\n  description: string\\n  (someArg: string): string // call signature\\n}\\n\\nfunction doSomething(fn: DescribableFunction): void {\\n  console.log(fn.description + ' returned ' + fn(''));\\n}",
        "type": "Reference",
        "function_call": "new DescribableFunction()",
        "function_name": "[h2]使用class而非具有call signature的类型",
        "parent_text": "[h2]使用class而非具有call signature的类型规则：arkts-no-call-signatures 级别：错误 ArkTS不支持对象类型中包含call signature。 TypeScript  ArkTS class DescribableFunction {\\n  description: string\\n  public invoke(someArg: string): string {\\n    return someArg;\\n  }\\n  constructor() {\\n    this.description = 'desc';\\n  }\\n}\\n\\nfunction doSomething(fn: DescribableFunction): void {\\n  console.log(fn.description + ' returned ' + fn.invoke(''));\\n}\\n\\ndoSomething(new DescribableFunction()); ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用class而非具有call-signature的类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BD%BF%E7%94%A8class%E8%80%8C%E9%9D%9E%E5%85%B7%E6%9C%89call-signature%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8class%E8%80%8C%E9%9D%9E%E5%85%B7%E6%9C%89call-signature%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]使用class而非具有call signature的类型</h4><p><strong>规则：</strong>arkts-no-call-signatures</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持对象类型中包含call signature。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class DescribableFunction {\\n  description: string\\n  public invoke(someArg: string): string {\\n    return someArg;\\n  }\\n  constructor() {\\n    this.description = 'desc';\\n  }\\n}\\n\\nfunction doSomething(fn: DescribableFunction): void {\\n  console.log(fn.description + ' returned ' + fn.invoke(''));\\n}\\n\\ndoSomething(new DescribableFunction());</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 792,
        "pre": "class SomeObject {}\\n\\ntype SomeConstructor = {\\n  new (s: string): SomeObject\\n}\\n\\nfunction fn(ctor: SomeConstructor) {\\n  return new ctor('hello');\\n}",
        "type": "Reference",
        "function_call": "nfunction fn(s: string): SomeObject",
        "function_name": "[h2]使用class而非具有构造签名的类型",
        "parent_text": "[h2]使用class而非具有构造签名的类型规则：arkts-no-ctor-signatures-type 级别：错误 ArkTS不支持对象类型中的构造签名。改用类。 TypeScript  ArkTS class SomeObject {\\n  public f: string\\n  constructor (s: string) {\\n    this.f = s;\\n  }\\n}\\n\\nfunction fn(s: string): SomeObject {\\n  return new SomeObject(s);\\n} ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用class而非具有构造签名的类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BD%BF%E7%94%A8class%E8%80%8C%E9%9D%9E%E5%85%B7%E6%9C%89%E6%9E%84%E9%80%A0%E7%AD%BE%E5%90%8D%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8class%E8%80%8C%E9%9D%9E%E5%85%B7%E6%9C%89%E6%9E%84%E9%80%A0%E7%AD%BE%E5%90%8D%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]使用class而非具有构造签名的类型</h4><p><strong>规则：</strong>arkts-no-ctor-signatures-type</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持对象类型中的构造签名。改用类。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class SomeObject {\\n  public f: string\\n  constructor (s: string) {\\n    this.f = s;\\n  }\\n}\\n\\nfunction fn(s: string): SomeObject {\\n  return new SomeObject(s);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 793,
        "pre": "class C {\\n  static s: string\\n\\n  static {\\n    C.s = 'aa'\\n  }\\n  static {\\n    C.s = C.s + 'bb'\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]仅支持一个静态块",
        "parent_text": "[h2]仅支持一个静态块规则：arkts-no-multiple-static-blocks 级别：错误 ArkTS不允许类中有多个静态块，如果存在多个静态块语句，请合并到一个静态块中。 TypeScript  ArkTS class C {\\n  static s: string\\n\\n  static {\\n    C.s = 'aa'\\n    C.s = C.s + 'bb'\\n  }\\n} 说明 当前不支持静态块的语法。支持该语法后，在.ets文件中使用静态块须遵循本约束。 ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"仅支持一个静态块\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BB%85%E6%94%AF%E6%8C%81%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%9D%97\\\"'></a><a name='\\\"%E4%BB%85%E6%94%AF%E6%8C%81%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%9D%97\\\"'></a><h4>[h2]仅支持一个静态块</h4><p><strong>规则：</strong>arkts-no-multiple-static-blocks</p> <p><strong>级别：错误</strong></p> <p>ArkTS不允许类中有多个静态块，如果存在多个静态块语句，请合并到一个静态块中。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  static s: string\\n\\n  static {\\n    C.s = 'aa'\\n    C.s = C.s + 'bb'\\n  }\\n}</pre> <p><strong>说明</strong></p> <p>当前不支持静态块的语法。支持该语法后，在.ets文件中使用静态块须遵循本约束。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 794,
        "pre": "// 带index signature的接口：\\ninterface StringArray {\\n  [index: number]: string\\n}\\n\\nfunction getStringArray(): StringArray {\\n  return ['a', 'b', 'c'];\\n}\\n\\nconst myArray: StringArray = getStringArray();\\nconst secondItem = myArray[1];",
        "type": "Reference",
        "function_call": "new X()",
        "function_name": "[h2]不支持index signature",
        "parent_text": "[h2]不支持index signature规则：arkts-no-indexed-signatures 级别：错误 ArkTS不允许index signature，改用数组。 TypeScript  ArkTS class X {\\n  public f: string[] = []\\n}\\n\\nlet myArray: X = new X();\\nconst secondItem = myArray.f[1]; ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持index-signature\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81index-signature\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81index-signature\\\"'></a><h4>[h2]不支持index signature</h4><p><strong>规则：</strong>arkts-no-indexed-signatures</p> <p><strong>级别：错误</strong></p> <p>ArkTS不允许index signature，改用数组。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class X {\\n  public f: string[] = []\\n}\\n\\nlet myArray: X = new X();\\nconst secondItem = myArray.f[1];</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 795,
        "pre": "interface Identity {\\n  id: number\\n  name: string\\n}\\n\\ninterface Contact {\\n  email: string\\n  phoneNumber: string\\n}\\n\\ntype Employee = Identity & Contact",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用继承而非intersection type",
        "parent_text": "[h2]使用继承而非intersection type规则：arkts-no-intersection-types 级别：错误 目前ArkTS不支持intersection type，可以使用继承作为替代方案。 TypeScript  ArkTS interface Identity {\\n  id: number\\n  name: string\\n}\\n\\ninterface Contact {\\n  email: string\\n  phoneNumber: string\\n}\\n\\ninterface Employee extends Identity,  Contact {} ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section-type\\\"'><a name='\\\"section-type\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E8%80%8C%E9%9D%9Eintersection-type\\\"'></a><h4>[h2]使用继承而非intersection type</h4><p><strong>规则：</strong>arkts-no-intersection-types</p> <p><strong>级别：错误</strong></p> <p>目前ArkTS不支持intersection type，可以使用继承作为替代方案。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>interface Identity {\\n  id: number\\n  name: string\\n}\\n\\ninterface Contact {\\n  email: string\\n  phoneNumber: string\\n}\\n\\ninterface Employee extends Identity,  Contact {}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 796,
        "pre": "interface ListItem {\\n  getHead(): this\\n}\\n\\nclass C {\\n  n: number = 0\\n\\n  m(c: this) {\\n    // ...\\n  }\\n}",
        "type": "Reference",
        "function_call": "m(c: C)",
        "function_name": "[h2]不支持this类型",
        "parent_text": "[h2]不支持this类型规则：arkts-no-typing-with-this 级别：错误 ArkTS不支持this类型，改用显式具体类型。 TypeScript  ArkTS interface ListItem {\\n  getHead(): ListItem\\n}\\n\\nclass C {\\n  n: number = 0\\n\\n  m(c: C) {\\n    // ...\\n  }\\n} ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持this类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81this%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81this%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]不支持this类型</h4><p><strong>规则：</strong>arkts-no-typing-with-this</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持this类型，改用显式具体类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>interface ListItem {\\n  getHead(): ListItem\\n}\\n\\nclass C {\\n  n: number = 0\\n\\n  m(c: C) {\\n    // ...\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 797,
        "pre": "type X<T> = T extends number ? T: never\\ntype Y<T> = T extends Array<infer Item> ? Item: never",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持条件类型",
        "parent_text": "[h2]不支持条件类型规则：arkts-no-conditional-types 级别：错误 ArkTS不支持条件类型别名，引入带显式约束的新类型，或使用Object重写逻辑。 不支持infer关键字。 TypeScript  ArkTS // 在类型别名中提供显式约束\\ntype X1<T extends number> = T\\n\\n// 用Object重写，类型控制较少，需要更多的类型检查以确保安全\\ntype X2<T> = Object\\n\\n// Item必须作为泛型参数使用，并能正确实例化\\ntype YI<Item, T extends Array<Item>> = Item ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持条件类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]不支持条件类型</h4><p><strong>规则：</strong>arkts-no-conditional-types</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持条件类型别名，引入带显式约束的新类型，或使用Object重写逻辑。</p> <p>不支持infer关键字。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// 在类型别名中提供显式约束\\ntype X1&lt;T extends number&gt; = T\\n\\n// 用Object重写，类型控制较少，需要更多的类型检查以确保安全\\ntype X2&lt;T&gt; = Object\\n\\n// Item必须作为泛型参数使用，并能正确实例化\\ntype YI&lt;Item, T extends Array&lt;Item&gt;&gt; = Item</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 798,
        "pre": "class Person {\\n  constructor(\\n    protected ssn: string,\\n    private firstName: string,\\n    private lastName: string\\n  ) {\\n    this.ssn = ssn;\\n    this.firstName = firstName;\\n    this.lastName = lastName;\\n  }\\n\\n  getFullName(): string {\\n    return this.firstName + ' ' + this.lastName;\\n  }\\n}",
        "type": "Reference",
        "function_call": "getFullName(): string",
        "function_name": "[h2]不支持在constructor中声明字段",
        "parent_text": "[h2]不支持在constructor中声明字段规则：arkts-no-ctor-prop-decls 级别：错误 ArkTS不支持在constructor中声明类字段。在class中声明这些字段。 TypeScript  ArkTS class Person {\\n  protected ssn: string\\n  private firstName: string\\n  private lastName: string\\n\\n  constructor(ssn: string, firstName: string, lastName: string) {\\n    this.ssn = ssn;\\n    this.firstName = firstName;\\n    this.lastName = lastName;\\n  }\\n\\n  getFullName(): string {\\n    return this.firstName + ' ' + this.lastName;\\n  }\\n} ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持在constructor中声明字段\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8constructor%E4%B8%AD%E5%A3%B0%E6%98%8E%E5%AD%97%E6%AE%B5\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8constructor%E4%B8%AD%E5%A3%B0%E6%98%8E%E5%AD%97%E6%AE%B5\\\"'></a><h4>[h2]不支持在constructor中声明字段</h4><p><strong>规则：</strong>arkts-no-ctor-prop-decls</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持在constructor中声明类字段。在class中声明这些字段。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Person {\\n  protected ssn: string\\n  private firstName: string\\n  private lastName: string\\n\\n  constructor(ssn: string, firstName: string, lastName: string) {\\n    this.ssn = ssn;\\n    this.firstName = firstName;\\n    this.lastName = lastName;\\n  }\\n\\n  getFullName(): string {\\n    return this.firstName + ' ' + this.lastName;\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 799,
        "pre": "interface I {\\n  new (s: string): I\\n}\\n\\nfunction fn(i: I) {\\n  return new i('hello');\\n}",
        "type": "Reference",
        "function_call": "nfunction fn(i: I)",
        "function_name": "[h2]接口中不支持构造签名",
        "parent_text": "[h2]接口中不支持构造签名规则：arkts-no-ctor-signatures-iface 级别：错误 ArkTS不支持在接口中使用构造签名。改用函数或者方法。 TypeScript  ArkTS interface I {\\n  create(s: string): I\\n}\\n\\nfunction fn(i: I) {\\n  return i.create('hello');\\n} ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"接口中不支持构造签名\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E6%8E%A5%E5%8F%A3%E4%B8%AD%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9E%84%E9%80%A0%E7%AD%BE%E5%90%8D\\\"'></a><a name='\\\"%E6%8E%A5%E5%8F%A3%E4%B8%AD%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9E%84%E9%80%A0%E7%AD%BE%E5%90%8D\\\"'></a><h4>[h2]接口中不支持构造签名</h4><p><strong>规则：</strong>arkts-no-ctor-signatures-iface</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持在接口中使用构造签名。改用函数或者方法。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>interface I {\\n  create(s: string): I\\n}\\n\\nfunction fn(i: I) {\\n  return i.create('hello');\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 800,
        "pre": "class Point {\\n  x: string = ''\\n  y: string = ''\\n}\\nlet p: Point = {x: '1', y: '2'};\\nconsole.log(p['x']);\\n\\nclass Person {\\n  name: string = ''\\n  age: number = 0;\\n  [key: string]: string | number\\n}\\n\\nlet person: Person = {\\n  name: 'John',\\n  age: 30,\\n  email: '***@example.com',\\n  phoneNumber: '18*********',\\n}",
        "type": "Reference",
        "function_call": "constructor(name: string, age: number, email: string,\\n        phoneNumber: string)",
        "function_name": "[h2]不支持通过索引访问字段",
        "parent_text": "[h2]不支持通过索引访问字段规则：arkts-no-props-by-index 级别：错误 ArkTS不支持动态声明字段，不支持动态访问字段。只能访问已在类中声明或者继承可见的字段，访问其他字段将会造成编译时错误。 使用点操作符访问字段，例如（obj.field），不支持索引访问（obj[field]）。 ArkTS支持通过索引访问TypedArray（例如Int32Array）中的元素。 TypeScript  ArkTS class Point {\\n  x: string = ''\\n  y: string = ''\\n}\\nlet p: Point = {x: '1', y: '2'};\\nconsole.log(p.x);\\n\\nclass Person {\\n  name: string\\n  age: number\\n  email: string\\n  phoneNumber: string\\n\\n  constructor(name: string, age: number, email: string,\\n        phoneNumber: string) {\\n    this.name = name;\\n    this.age = age;\\n    this.email = email;\\n    this.phoneNumber = phoneNumber;\\n  }\\n}\\n\\nlet person = new Person('John', 30, '***@example.com', '18*********');\\nconsole.log(person['name']);     // 编译时错误\\nconsole.log(person.unknownProperty); // 编译时错误\\n\\nlet arr = new Int32Array(1);\\narr[0]; ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持通过索引访问字段\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E8%AE%BF%E9%97%AE%E5%AD%97%E6%AE%B5\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E8%AE%BF%E9%97%AE%E5%AD%97%E6%AE%B5\\\"'></a><h4>[h2]不支持通过索引访问字段</h4><p><strong>规则：</strong>arkts-no-props-by-index</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持动态声明字段，不支持动态访问字段。只能访问已在类中声明或者继承可见的字段，访问其他字段将会造成编译时错误。</p> <p>使用点操作符访问字段，例如（obj.field），不支持索引访问（obj[field]）。</p> <p>ArkTS支持通过索引访问TypedArray（例如Int32Array）中的元素。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Point {\\n  x: string = ''\\n  y: string = ''\\n}\\nlet p: Point = {x: '1', y: '2'};\\nconsole.log(p.x);\\n\\nclass Person {\\n  name: string\\n  age: number\\n  email: string\\n  phoneNumber: string\\n\\n  constructor(name: string, age: number, email: string,\\n        phoneNumber: string) {\\n    this.name = name;\\n    this.age = age;\\n    this.email = email;\\n    this.phoneNumber = phoneNumber;\\n  }\\n}\\n\\nlet person = new Person('John', 30, '***@example.com', '18*********');\\nconsole.log(person['name']);     // 编译时错误\\nconsole.log(person.unknownProperty); // 编译时错误\\n\\nlet arr = new Int32Array(1);\\narr[0];</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 801,
        "pre": "interface I1 {\\n  f(): string\\n}\\n\\ninterface I2 { // I2等价于I1\\n  f(): string\\n}\\n\\nclass X {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nclass Y { // Y等价于X\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nlet x = new X();\\nlet y = new Y();\\n\\nconsole.log('Assign X to Y');\\ny = x;\\n\\nconsole.log('Assign Y to X');\\nx = y;\\n\\nfunction foo(x: X) {\\n  console.log(x.n + x.s);\\n}\\n\\n// 由于X和Y的API是等价的，所以X和Y是等价的\\nfoo(new X());\\nfoo(new Y());",
        "type": "Reference",
        "function_call": "new Y()",
        "function_name": "[h2]不支持structural typing",
        "parent_text": "[h2]不支持structural typing规则：arkts-no-structural-typing 级别：错误 ArkTS不支持structural typing，编译器无法比较两种类型的publicAPI并决定它们是否相同。使用其他机制，例如继承、接口或类型别名。 TypeScript  ArkTS interface I1 {\\n  f(): string\\n}\\n\\ntype I2 = I1 // I2是I1的别名\\n\\nclass B {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\n// D是B的继承类，构建了子类型和父类型的关系\\nclass D extends B {\\n  constructor() {\\n    super()\\n  }\\n}\\n\\nlet b = new B();\\nlet d = new D();\\n\\nconsole.log('Assign D to B');\\nb = d; // 合法赋值，因为B是D的父类\\n\\n// 将b赋值给d将会引起编译时错误\\n// d = b\\n\\ninterface Z {\\n   n: number\\n   s: string\\n}\\n\\n// 类X implements 接口Z，构建了X和Y的关系\\nclass X implements Z {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\n// 类Y implements 接口Z，构建了X和Y的关系\\nclass Y implements Z {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nlet x: Z = new X();\\nlet y: Z = new Y();\\n\\nconsole.log('Assign X to Y');\\ny = x // 合法赋值，它们是相同的类型\\n\\nconsole.log('Assign Y to X');\\nx = y // 合法赋值，它们是相同的类型\\n\\nfunction foo(c: Z): void {\\n  console.log(c.n + c.s);\\n}\\n\\n// 类X和类Y implement 相同的接口，因此下面的两个函数调用都是合法的\\nfoo(new X());\\nfoo(new Y()); ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持structural-typing\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81structural-typing\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81structural-typing\\\"'></a><h4>[h2]不支持structural typing</h4><p><strong>规则：</strong>arkts-no-structural-typing</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持structural typing，编译器无法比较两种类型的publicAPI并决定它们是否相同。使用其他机制，例如继承、接口或类型别名。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>interface I1 {\\n  f(): string\\n}\\n\\ntype I2 = I1 // I2是I1的别名\\n\\nclass B {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\n// D是B的继承类，构建了子类型和父类型的关系\\nclass D extends B {\\n  constructor() {\\n    super()\\n  }\\n}\\n\\nlet b = new B();\\nlet d = new D();\\n\\nconsole.log('Assign D to B');\\nb = d; // 合法赋值，因为B是D的父类\\n\\n// 将b赋值给d将会引起编译时错误\\n// d = b\\n\\ninterface Z {\\n   n: number\\n   s: string\\n}\\n\\n// 类X implements 接口Z，构建了X和Y的关系\\nclass X implements Z {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\n// 类Y implements 接口Z，构建了X和Y的关系\\nclass Y implements Z {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nlet x: Z = new X();\\nlet y: Z = new Y();\\n\\nconsole.log('Assign X to Y');\\ny = x // 合法赋值，它们是相同的类型\\n\\nconsole.log('Assign Y to X');\\nx = y // 合法赋值，它们是相同的类型\\n\\nfunction foo(c: Z): void {\\n  console.log(c.n + c.s);\\n}\\n\\n// 类X和类Y implement 相同的接口，因此下面的两个函数调用都是合法的\\nfoo(new X());\\nfoo(new Y());</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 802,
        "pre": "function choose<T>(x: T, y: T): T {\\n  return Math.random() < 0.5 ? x: y;\\n}\\n\\nlet x = choose(10, 20);   // 推断choose<number>(...)\\nlet y = choose('10', 20); // 编译时错误\\n\\nfunction greet<T>(): T {\\n  return 'Hello' as T;\\n}\\nlet z = greet() // T的类型被推断为“unknown”",
        "type": "Reference",
        "function_call": "random()",
        "function_name": "[h2]需要显式标注泛型函数类型实参",
        "parent_text": "[h2]需要显式标注泛型函数类型实参规则：arkts-no-inferred-generic-params 级别：错误 如果可以从传递给泛型函数的参数中推断出具体类型，ArkTS允许省略泛型类型实参。否则，省略泛型类型实参会发生编译时错误。 禁止仅基于泛型函数返回类型推断泛型类型参数。 TypeScript  ArkTS function choose<T>(x: T, y: T): T {\\n  return Math.random() < 0.5 ? x: y;\\n}\\n\\nlet x = choose(10, 20);   // 推断choose<number>(...)\\nlet y = choose('10', 20); // 编译时错误\\n\\nfunction greet<T>(): T {\\n  return 'Hello' as T;\\n}\\nlet z = greet<string>(); ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"需要显式标注泛型函数类型实参\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%9C%80%E8%A6%81%E6%98%BE%E5%BC%8F%E6%A0%87%E6%B3%A8%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AE%9E%E5%8F%82\\\"'></a><a name='\\\"%E9%9C%80%E8%A6%81%E6%98%BE%E5%BC%8F%E6%A0%87%E6%B3%A8%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AE%9E%E5%8F%82\\\"'></a><h4>[h2]需要显式标注泛型函数类型实参</h4><p><strong>规则：</strong>arkts-no-inferred-generic-params</p> <p><strong>级别：错误</strong></p> <p>如果可以从传递给泛型函数的参数中推断出具体类型，ArkTS允许省略泛型类型实参。否则，省略泛型类型实参会发生编译时错误。</p> <p>禁止仅基于泛型函数返回类型推断泛型类型参数。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function choose&lt;T&gt;(x: T, y: T): T {\\n  return Math.random() &lt; 0.5 ? x: y;\\n}\\n\\nlet x = choose(10, 20);   // 推断choose&lt;number&gt;(...)\\nlet y = choose('10', 20); // 编译时错误\\n\\nfunction greet&lt;T&gt;(): T {\\n  return 'Hello' as T;\\n}\\nlet z = greet&lt;string&gt;();</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 803,
        "pre": "let o1 = {n: 42, s: 'foo'};\\nlet o2: Object = {n: 42, s: 'foo'};\\nlet o3: object = {n: 42, s: 'foo'};\\n\\nlet oo: Object[] = [{n: 1, s: '1'}, {n: 2, s: '2'}];",
        "type": "Reference",
        "function_call": "nfunction getPoint(o: Point): Point",
        "function_name": "[h2]需要显式标注对象字面量的类型",
        "parent_text": "[h2]需要显式标注对象字面量的类型规则：arkts-no-untyped-obj-literals 级别：错误 在ArkTS中，需要显式标注对象字面量的类型，否则，将发生编译时错误。在某些场景下，编译器可以根据上下文推断出字面量的类型。 在以下上下文中不支持使用字面量初始化类和接口： 初始化具有any、Object或object类型的任何对象初始化带有方法的类或接口初始化包含自定义含参数的构造函数的类初始化带readonly字段的类 例子1 TypeScript  ArkTS class C1 {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nlet o1: C1 = {n: 42, s: 'foo'};\\nlet o2: C1 = {n: 42, s: 'foo'};\\nlet o3: C1 = {n: 42, s: 'foo'};\\n\\nlet oo: C1[] = [{n: 1, s: '1'}, {n: 2, s: '2'}]; 例子2 TypeScript class C2 {\\n  s: string\\n  constructor(s: string) {\\n    this.s = 's =' + s;\\n  }\\n}\\nlet o4: C2 = {s: 'foo'}; ArkTS class C2 {\\n  s: string\\n  constructor(s: string) {\\n    this.s = 's =' + s;\\n  }\\n}\\nlet o4 = new C2('foo'); 例子3 TypeScript class C3 {\\n  readonly n: number = 0\\n  readonly s: string = ''\\n}\\nlet o5: C3 = {n: 42, s: 'foo'}; ArkTS class C3 {\\n  n: number = 0\\n  s: string = ''\\n}\\nlet o5: C3 = {n: 42, s: 'foo'}; 例子4 TypeScript abstract class A {}\\nlet o6: A = {}; ArkTS abstract class A {}\\nclass C extends A {}\\nlet o6: C = {}; // 或 let o6: C = new C() 例子5 TypeScript class C4 {\\n  n: number = 0\\n  s: string = ''\\n  f() {\\n    console.log('Hello');\\n  }\\n}\\nlet o7: C4 = {n: 42, s: 'foo', f: () => {}}; ArkTS class C4 {\\n  n: number = 0\\n  s: string = ''\\n  f() {\\n    console.log('Hello');\\n  }\\n}\\nlet o7 = new C4();\\no7.n = 42;\\no7.s = 'foo'; 例子6 TypeScript class Point {\\n  x: number = 0\\n  y: number = 0\\n}\\n\\nfunction getPoint(o: Point): Point {\\n  return o;\\n}\\n\\n// TS支持structural typing，可以推断p的类型为Point\\nlet p = {x: 5, y: 10};\\ngetPoint(p);\\n\\n// 可通过上下文推断出对象字面量的类型为Point\\ngetPoint({x: 5, y: 10}); ArkTS class Point {\\n  x: number = 0\\n  y: number = 0\\n\\n  // 在字面量初始化之前，使用constructor()创建一个有效对象。\\n  // 由于没有为Point定义构造函数，编译器将自动添加一个默认构造函数。\\n}\\n\\nfunction getPoint(o: Point): Point {\\n  return o;\\n}\\n\\n// 字面量初始化需要显式定义类型\\nlet p: Point = {x: 5, y: 10};\\ngetPoint(p);\\n\\n// getPoint接受Point类型，字面量初始化生成一个Point的新实例\\ngetPoint({x: 5, y: 10}); ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"需要显式标注对象字面量的类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%9C%80%E8%A6%81%E6%98%BE%E5%BC%8F%E6%A0%87%E6%B3%A8%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E9%9C%80%E8%A6%81%E6%98%BE%E5%BC%8F%E6%A0%87%E6%B3%A8%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]需要显式标注对象字面量的类型</h4><p><strong>规则：</strong>arkts-no-untyped-obj-literals</p> <p><strong>级别：错误</strong></p> <p>在ArkTS中，需要显式标注对象字面量的类型，否则，将发生编译时错误。在某些场景下，编译器可以根据上下文推断出字面量的类型。</p> <p>在以下上下文中不支持使用字面量初始化类和接口：</p> <ul><li>初始化具有any、Object或object类型的任何对象</li><li>初始化带有方法的类或接口</li><li>初始化包含自定义含参数的构造函数的类</li><li>初始化带readonly字段的类</li></ul> <p><strong>例子1</strong></p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C1 {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nlet o1: C1 = {n: 42, s: 'foo'};\\nlet o2: C1 = {n: 42, s: 'foo'};\\nlet o3: C1 = {n: 42, s: 'foo'};\\n\\nlet oo: C1[] = [{n: 1, s: '1'}, {n: 2, s: '2'}];</pre> <p><strong>例子2</strong></p> <p><strong>TypeScript</strong></p> <pre class='\\\"typescript\\\"'>class C2 {\\n  s: string\\n  constructor(s: string) {\\n    this.s = 's =' + s;\\n  }\\n}\\nlet o4: C2 = {s: 'foo'};</pre> <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C2 {\\n  s: string\\n  constructor(s: string) {\\n    this.s = 's =' + s;\\n  }\\n}\\nlet o4 = new C2('foo');</pre> <p><strong>例子3</strong></p> <p><strong>TypeScript</strong></p> <pre class='\\\"typescript\\\"'>class C3 {\\n  readonly n: number = 0\\n  readonly s: string = ''\\n}\\nlet o5: C3 = {n: 42, s: 'foo'};</pre> <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C3 {\\n  n: number = 0\\n  s: string = ''\\n}\\nlet o5: C3 = {n: 42, s: 'foo'};</pre> <p><strong>例子4</strong></p> <p><strong>TypeScript</strong></p> <pre class='\\\"typescript\\\"'>abstract class A {}\\nlet o6: A = {};</pre> <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>abstract class A {}\\nclass C extends A {}\\nlet o6: C = {}; // 或 let o6: C = new C()</pre> <p><strong>例子5</strong></p> <p><strong>TypeScript</strong></p> <pre class='\\\"typescript\\\"'>class C4 {\\n  n: number = 0\\n  s: string = ''\\n  f() {\\n    console.log('Hello');\\n  }\\n}\\nlet o7: C4 = {n: 42, s: 'foo', f: () =&gt; {}};</pre> <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C4 {\\n  n: number = 0\\n  s: string = ''\\n  f() {\\n    console.log('Hello');\\n  }\\n}\\nlet o7 = new C4();\\no7.n = 42;\\no7.s = 'foo';</pre> <p><strong>例子6</strong></p> <p><strong>TypeScript</strong></p> <pre class='\\\"typescript\\\"'>class Point {\\n  x: number = 0\\n  y: number = 0\\n}\\n\\nfunction getPoint(o: Point): Point {\\n  return o;\\n}\\n\\n// TS支持structural typing，可以推断p的类型为Point\\nlet p = {x: 5, y: 10};\\ngetPoint(p);\\n\\n// 可通过上下文推断出对象字面量的类型为Point\\ngetPoint({x: 5, y: 10});</pre> <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Point {\\n  x: number = 0\\n  y: number = 0\\n\\n  // 在字面量初始化之前，使用constructor()创建一个有效对象。\\n  // 由于没有为Point定义构造函数，编译器将自动添加一个默认构造函数。\\n}\\n\\nfunction getPoint(o: Point): Point {\\n  return o;\\n}\\n\\n// 字面量初始化需要显式定义类型\\nlet p: Point = {x: 5, y: 10};\\ngetPoint(p);\\n\\n// getPoint接受Point类型，字面量初始化生成一个Point的新实例\\ngetPoint({x: 5, y: 10});</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 804,
        "pre": "let o: {x: number, y: number} = {\\n  x: 2,\\n  y: 3\\n}\\n\\ntype S = Set<{x: number, y: number}>",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]对象字面量不能用于类型声明",
        "parent_text": "[h2]对象字面量不能用于类型声明规则：arkts-no-obj-literals-as-types 级别：错误 ArkTS不支持使用对象字面量声明类型，可以使用类或者接口声明类型。 TypeScript  ArkTS class O {\\n  x: number = 0\\n  y: number = 0\\n}\\n\\nlet o: O = {x: 2, y: 3};\\n\\ntype S = Set<O> ",
        "import_module": "class C {\\n  #foo: number = 42\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"对象字面量不能用于类型声明\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%8E%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E\\\"'></a><a name='\\\"%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%8E%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E\\\"'></a><h4>[h2]对象字面量不能用于类型声明</h4><p><strong>规则：</strong>arkts-no-obj-literals-as-types</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持使用对象字面量声明类型，可以使用类或者接口声明类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class O {\\n  x: number = 0\\n  y: number = 0\\n}\\n\\nlet o: O = {x: 2, y: 3};\\n\\ntype S = Set&lt;O&gt;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 805,
        "pre": "let a = [{n: 1, s: '1'}, {n: 2, s: '2'}];",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]数组字面量必须仅包含可推断类型的元素",
        "parent_text": "[h2]数组字面量必须仅包含可推断类型的元素规则：arkts-no-noninferrable-arr-literals 级别：错误 本质上，ArkTS将数组字面量的类型推断为数组所有元素的联合类型。如果其中任何一个元素的类型无法根据上下文推导出来（例如，无类型的对象字面量），则会发生编译时错误。 TypeScript  ArkTS class C {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nlet a1 = [{n: 1, s: '1'} as C, {n: 2, s: '2'} as C]; // a1的类型为“C[]”\\nlet a2: C[] = [{n: 1, s: '1'}, {n: 2, s: '2'}];    // a2的类型为“C[]” ",
        "import_module": "let a = [{n: 1, s: '1'}, {n: 2, s: '2'}];",
        "parent": "<div class='\\\"section\\\"' id='\\\"数组字面量必须仅包含可推断类型的元素\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E6%95%B0%E7%BB%84%E5%AD%97%E9%9D%A2%E9%87%8F%E5%BF%85%E9%A1%BB%E4%BB%85%E5%8C%85%E5%90%AB%E5%8F%AF%E6%8E%A8%E6%96%AD%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%83%E7%B4%A0\\\"'></a><a name='\\\"%E6%95%B0%E7%BB%84%E5%AD%97%E9%9D%A2%E9%87%8F%E5%BF%85%E9%A1%BB%E4%BB%85%E5%8C%85%E5%90%AB%E5%8F%AF%E6%8E%A8%E6%96%AD%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%83%E7%B4%A0\\\"'></a><h4>[h2]数组字面量必须仅包含可推断类型的元素</h4><p><strong>规则：</strong>arkts-no-noninferrable-arr-literals</p> <p><strong>级别：错误</strong></p> <p>本质上，ArkTS将数组字面量的类型推断为数组所有元素的联合类型。如果其中任何一个元素的类型无法根据上下文推导出来（例如，无类型的对象字面量），则会发生编译时错误。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nlet a1 = [{n: 1, s: '1'} as C, {n: 2, s: '2'} as C]; // a1的类型为“C[]”\\nlet a2: C[] = [{n: 1, s: '1'}, {n: 2, s: '2'}];    // a2的类型为“C[]”</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 806,
        "pre": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "type": "Import",
        "function_call": "let f = (s: string)",
        "function_name": "[h2]使用箭头函数而非函数表达式",
        "parent_text": "[h2]使用箭头函数而非函数表达式规则：arkts-no-func-expressions 级别：错误 ArkTS不支持函数表达式，使用箭头函数。 TypeScript  ArkTS let f = (s: string) => {\\n  console.log(s);\\n} ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用箭头函数而非函数表达式\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E8%80%8C%E9%9D%9E%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E8%80%8C%E9%9D%9E%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a><h4>[h2]使用箭头函数而非函数表达式</h4><p><strong>规则：</strong>arkts-no-func-expressions</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持函数表达式，使用箭头函数。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let f = (s: string) =&gt; {\\n  console.log(s);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 807,
        "pre": "const Rectangle = class {\\n  constructor(height: number, width: number) {\\n    this.height = height;\\n    this.width = width;\\n  }\\n\\n  height\\n  width\\n}\\n\\nconst rectangle = new Rectangle(0.0, 0.0);",
        "type": "Reference",
        "function_call": "constructor(height: number, width: number)",
        "function_name": "[h2]不支持使用类表达式",
        "parent_text": "[h2]不支持使用类表达式规则：arkts-no-class-literals 级别：错误 ArkTS不支持使用类表达式，必须显式声明一个类。 TypeScript  ArkTS class Rectangle {\\n  constructor(height: number, width: number) {\\n    this.height = height;\\n    this.width = width;\\n  }\\n\\n  height: number\\n  width: number\\n}\\n\\nconst rectangle = new Rectangle(0.0, 0.0); ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持使用类表达式\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BD%BF%E7%94%A8%E7%B1%BB%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BD%BF%E7%94%A8%E7%B1%BB%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a><h4>[h2]不支持使用类表达式</h4><p><strong>规则：</strong>arkts-no-class-literals</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持使用类表达式，必须显式声明一个类。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Rectangle {\\n  constructor(height: number, width: number) {\\n    this.height = height;\\n    this.width = width;\\n  }\\n\\n  height: number\\n  width: number\\n}\\n\\nconst rectangle = new Rectangle(0.0, 0.0);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 808,
        "pre": "class C {\\n  foo() {}\\n}\\n\\nclass C1 implements C {\\n  foo() {}\\n}",
        "type": "Reference",
        "function_call": "foo()",
        "function_name": "[h2]类不允许implements",
        "parent_text": "[h2]类不允许implements规则：arkts-implements-only-iface 级别：错误 ArkTS不允许类被implements，只有接口可以被implements。 TypeScript  ArkTS interface C {\\n  foo(): void\\n}\\n\\nclass C1 implements C {\\n  foo() {}\\n} ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"类不允许implements\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E7%B1%BB%E4%B8%8D%E5%85%81%E8%AE%B8implements\\\"'></a><a name='\\\"%E7%B1%BB%E4%B8%8D%E5%85%81%E8%AE%B8implements\\\"'></a><h4>[h2]类不允许implements</h4><p><strong>规则：</strong>arkts-implements-only-iface</p> <p><strong>级别：错误</strong></p> <p>ArkTS不允许类被implements，只有接口可以被implements。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>interface C {\\n  foo(): void\\n}\\n\\nclass C1 implements C {\\n  foo() {}\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 809,
        "pre": "class C {\\n  foo() {\\n    console.log('foo');\\n  }\\n}\\n\\nfunction bar() {\\n  console.log('bar');\\n}\\n\\nlet c1 = new C();\\nlet c2 = new C();\\nc2.foo = bar;\\n\\nc1.foo(); // foo\\nc2.foo(); // bar",
        "type": "Reference",
        "function_call": "foo()",
        "function_name": "[h2]不支持修改对象的方法",
        "parent_text": "[h2]不支持修改对象的方法规则：arkts-no-method-reassignment 级别：错误 ArkTS不支持修改对象的方法。在静态语言中，对象的布局是确定的。一个类的所有对象实例享有同一个方法。 如果需要为某个特定的对象增加方法，可以封装函数或者使用继承的机制。 TypeScript  ArkTS class C {\\n  foo() {\\n    console.log('foo');\\n  }\\n}\\n\\nclass Derived extends C {\\n  foo() {\\n    console.log('Extra');\\n    super.foo();\\n  }\\n}\\n\\nfunction bar() {\\n  console.log('bar');\\n}\\n\\nlet c1 = new C();\\nlet c2 = new C();\\nc1.foo(); // foo\\nc2.foo(); // foo\\n\\nlet c3 = new Derived();\\nc3.foo(); // Extra foo ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持修改对象的方法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BF%AE%E6%94%B9%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95\\\"'></a><h4>[h2]不支持修改对象的方法</h4><p><strong>规则：</strong>arkts-no-method-reassignment</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持修改对象的方法。在静态语言中，对象的布局是确定的。一个类的所有对象实例享有同一个方法。</p> <p>如果需要为某个特定的对象增加方法，可以封装函数或者使用继承的机制。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  foo() {\\n    console.log('foo');\\n  }\\n}\\n\\nclass Derived extends C {\\n  foo() {\\n    console.log('Extra');\\n    super.foo();\\n  }\\n}\\n\\nfunction bar() {\\n  console.log('bar');\\n}\\n\\nlet c1 = new C();\\nlet c2 = new C();\\nc1.foo(); // foo\\nc2.foo(); // foo\\n\\nlet c3 = new Derived();\\nc3.foo(); // Extra foo</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 810,
        "pre": "class Shape {}\\nclass Circle extends Shape { x: number = 5 }\\nclass Square extends Shape { y: string = 'a' }\\n\\nfunction createShape(): Shape {\\n  return new Circle();\\n}\\n\\nlet c1 = <Circle> createShape();\\n\\nlet c2 = createShape() as Circle;\\n\\n// 如果转换错误，不会产生编译时或运行时报错\\nlet c3 = createShape() as Square;\\nconsole.log(c3.y); // undefined\\n\\n// 在TS中，由于`as`关键字不会在运行时生效，所以`instanceof`的左操作数不会在运行时被装箱成引用类型\\nlet e1 = (5.0 as Number) instanceof Number; // false\\n\\n// 创建Number对象，获得预期结果：\\nlet e2 = (new Number(5.0)) instanceof Number; // true",
        "type": "Reference",
        "function_call": "createShape()",
        "function_name": "[h2]类型转换仅支持as T语法",
        "parent_text": "[h2]类型转换仅支持as T语法规则：arkts-as-casts 级别：错误 在ArkTS中，as关键字是类型转换的唯一语法，错误的类型转换会导致编译时错误或者运行时抛出ClassCastException异常。ArkTS不支持使用<type>语法进行类型转换。 当需要将primitive类型（如number或boolean）转换成引用类型时，请使用new表达式。 TypeScript  ArkTS class Shape {}\\nclass Circle extends Shape { x: number = 5 }\\nclass Square extends Shape { y: string = 'a' }\\n\\nfunction createShape(): Shape {\\n  return new Circle();\\n}\\n\\nlet c2 = createShape() as Circle;\\n\\n// 运行时抛出ClassCastException异常：\\nlet c3 = createShape() as Square;\\n\\n// 创建Number对象，获得预期结果：\\nlet e2 = (new Number(5.0)) instanceof Number; // true ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"类型转换仅支持as-t语法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%BB%85%E6%94%AF%E6%8C%81as-t%E8%AF%AD%E6%B3%95\\\"'></a><a name='\\\"%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%BB%85%E6%94%AF%E6%8C%81as-t%E8%AF%AD%E6%B3%95\\\"'></a><h4>[h2]类型转换仅支持as T语法</h4><p><strong>规则：</strong>arkts-as-casts</p> <p><strong>级别：错误</strong></p> <p>在ArkTS中，as关键字是类型转换的唯一语法，错误的类型转换会导致编译时错误或者运行时抛出ClassCastException异常。ArkTS不支持使用&lt;type&gt;语法进行类型转换。</p> <p>当需要将primitive类型（如number或boolean）转换成引用类型时，请使用new表达式。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Shape {}\\nclass Circle extends Shape { x: number = 5 }\\nclass Square extends Shape { y: string = 'a' }\\n\\nfunction createShape(): Shape {\\n  return new Circle();\\n}\\n\\nlet c2 = createShape() as Circle;\\n\\n// 运行时抛出ClassCastException异常：\\nlet c3 = createShape() as Square;\\n\\n// 创建Number对象，获得预期结果：\\nlet e2 = (new Number(5.0)) instanceof Number; // true</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 811,
        "pre": "let a = +5;    // 5（number类型）\\nlet b = +'5';    // 5（number类型）\\nlet c = -5;    // -5（number类型）\\nlet d = -'5';    // -5（number类型）\\nlet e = ~5;    // -6（number类型）\\nlet f = ~'5';    // -6（number类型）\\nlet g = +'string'; // NaN（number类型）\\n\\nfunction returnTen(): string {\\n  return '-10';\\n}\\n\\nfunction returnString(): string {\\n  return 'string';\\n}\\n\\nlet x = +returnTen();  // -10（number类型）\\nlet y = +returnString(); // NaN",
        "type": "Reference",
        "function_call": "returnString()",
        "function_name": "[h2]一元运算符+、-和~仅适用于数值类型",
        "parent_text": "[h2]一元运算符+、-和~仅适用于数值类型规则：arkts-no-polymorphic-unops 级别：错误 ArkTS仅允许一元运算符用于数值类型，否则会发生编译时错误。与TypeScript不同，ArkTS不支持隐式将字符串转换成数值，必须进行显式转换。 TypeScript  ArkTS let a = +5;    // 5（number类型）\\nlet b = +'5';    // 编译时错误\\nlet c = -5;    // -5（number类型）\\nlet d = -'5';    // 编译时错误\\nlet e = ~5;    // -6（number类型）\\nlet f = ~'5';    // 编译时错误\\nlet g = +'string'; // 编译时错误\\n\\nfunction returnTen(): string {\\n  return '-10';\\n}\\n\\nfunction returnString(): string {\\n  return 'string';\\n}\\n\\nlet x = +returnTen();  // 编译时错误\\nlet y = +returnString(); // 编译时错误 ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"一元运算符-和仅适用于数值类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6-%E5%92%8C%E4%BB%85%E9%80%82%E7%94%A8%E4%BA%8E%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6-%E5%92%8C%E4%BB%85%E9%80%82%E7%94%A8%E4%BA%8E%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]一元运算符+、-和~仅适用于数值类型</h4><p><strong>规则：</strong>arkts-no-polymorphic-unops</p> <p><strong>级别：错误</strong></p> <p>ArkTS仅允许一元运算符用于数值类型，否则会发生编译时错误。与TypeScript不同，ArkTS不支持隐式将字符串转换成数值，必须进行显式转换。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let a = +5;    // 5（number类型）\\nlet b = +'5';    // 编译时错误\\nlet c = -5;    // -5（number类型）\\nlet d = -'5';    // 编译时错误\\nlet e = ~5;    // -6（number类型）\\nlet f = ~'5';    // 编译时错误\\nlet g = +'string'; // 编译时错误\\n\\nfunction returnTen(): string {\\n  return '-10';\\n}\\n\\nfunction returnString(): string {\\n  return 'string';\\n}\\n\\nlet x = +returnTen();  // 编译时错误\\nlet y = +returnString(); // 编译时错误</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 812,
        "pre": "class Point {\\n  x?: number = 0.0\\n  y?: number = 0.0\\n}\\n\\nlet p = new Point();\\ndelete p.y;",
        "type": "Reference",
        "function_call": "new Point()",
        "function_name": "[h2]不支持delete运算符",
        "parent_text": "[h2]不支持delete运算符规则：arkts-no-delete 级别：错误 ArkTS中，对象布局在编译时就确定了，且不能在运行时被更改。因此，删除属性的操作没有意义。 TypeScript  ArkTS // 可以声明一个可空类型并使用null作为缺省值\\nclass Point {\\n  x: number | null = 0\\n  y: number | null = 0\\n}\\n\\nlet p = new Point();\\np.y = null; ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持delete运算符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81delete%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81delete%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><h4>[h2]不支持delete运算符</h4><p><strong>规则：</strong>arkts-no-delete</p> <p><strong>级别：错误</strong></p> <p>ArkTS中，对象布局在编译时就确定了，且不能在运行时被更改。因此，删除属性的操作没有意义。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// 可以声明一个可空类型并使用null作为缺省值\\nclass Point {\\n  x: number | null = 0\\n  y: number | null = 0\\n}\\n\\nlet p = new Point();\\np.y = null;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 813,
        "pre": "let n1 = 42;\\nlet s1 = 'foo';\\nconsole.log(typeof n1); // 'number'\\nconsole.log(typeof s1); // 'string'\\nlet n2: typeof n1\\nlet s2: typeof s1",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]仅允许在表达式中使用typeof运算符",
        "parent_text": "[h2]仅允许在表达式中使用typeof运算符规则：arkts-no-type-query 级别：错误 ArkTS仅支持在表达式中使用typeof运算符，不允许使用typeof作为类型。 TypeScript  ArkTS let n1 = 42;\\nlet s1 = 'foo';\\nconsole.log(typeof n1); // 'number'\\nconsole.log(typeof s1); // 'string'\\nlet n2: number\\nlet s2: string ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"仅允许在表达式中使用typeof运算符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BB%85%E5%85%81%E8%AE%B8%E5%9C%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E4%BD%BF%E7%94%A8typeof%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><a name='\\\"%E4%BB%85%E5%85%81%E8%AE%B8%E5%9C%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E4%BD%BF%E7%94%A8typeof%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><h4>[h2]仅允许在表达式中使用typeof运算符</h4><p><strong>规则：</strong>arkts-no-type-query</p> <p><strong>级别：错误</strong></p> <p>ArkTS仅支持在表达式中使用typeof运算符，不允许使用typeof作为类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let n1 = 42;\\nlet s1 = 'foo';\\nconsole.log(typeof n1); // 'number'\\nconsole.log(typeof s1); // 'string'\\nlet n2: number\\nlet s2: string</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 814,
        "pre": "class Person {\\n  name: string = ''\\n}\\nlet p = new Person();\\n\\nlet b = 'name' in p; // true",
        "type": "Reference",
        "function_call": "new Person()",
        "function_name": "[h2]不支持in运算符",
        "parent_text": "[h2]不支持in运算符规则：arkts-no-in 级别：错误 由于在ArkTS中，对象布局在编译时是已知的并且在运行时无法修改，因此，不支持in运算符。如果仍需检查某些类成员是否存在，使用instanceof代替。 TypeScript  ArkTS class Person {\\n  name: string = ''\\n}\\nlet p = new Person();\\n\\nlet b = p instanceof Person; // true，且属性name一定存在 ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持in运算符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81in%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81in%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><h4>[h2]不支持in运算符</h4><p><strong>规则：</strong>arkts-no-in</p> <p><strong>级别：错误</strong></p> <p>由于在ArkTS中，对象布局在编译时是已知的并且在运行时无法修改，因此，不支持in运算符。如果仍需检查某些类成员是否存在，使用instanceof代替。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Person {\\n  name: string = ''\\n}\\nlet p = new Person();\\n\\nlet b = p instanceof Person; // true，且属性name一定存在</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 815,
        "pre": "let [one, two] = [1, 2]; // 此处需要分号\\n[one, two] = [two, one];\\n\\nlet head, tail\\n[head, ...tail] = [1, 2, 3, 4];",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持解构赋值",
        "parent_text": "[h2]不支持解构赋值规则：arkts-no-destruct-assignment 级别：错误 ArkTS不支持解构赋值。可使用其他替代方法，例如，使用临时变量。 TypeScript  ArkTS let arr: number[] = [1, 2];\\nlet one = arr[0];\\nlet two = arr[1];\\n\\nlet tmp = one;\\none = two;\\ntwo = tmp;\\n\\nlet data: Number[] = [1, 2, 3, 4];\\nlet head = data[0];\\nlet tail: Number[] = [];\\nfor (let i = 1; i < data.length; ++i) {\\n  tail.push(data[i]);\\n} ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持解构赋值\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\\\"'></a><h4>[h2]不支持解构赋值</h4><p><strong>规则：</strong>arkts-no-destruct-assignment</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持解构赋值。可使用其他替代方法，例如，使用临时变量。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let arr: number[] = [1, 2];\\nlet one = arr[0];\\nlet two = arr[1];\\n\\nlet tmp = one;\\none = two;\\ntwo = tmp;\\n\\nlet data: Number[] = [1, 2, 3, 4];\\nlet head = data[0];\\nlet tail: Number[] = [];\\nfor (let i = 1; i &lt; data.length; ++i) {\\n  tail.push(data[i]);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 816,
        "pre": "for (let i = 0, j = 0; i < 10; ++i, j += 2) {\\n  // ...\\n}\\n\\nlet x = 0;\\nx = (++x, x++); // 1",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]逗号运算符,仅用在for循环语句中",
        "parent_text": "[h2]逗号运算符,仅用在for循环语句中规则：arkts-no-comma-outside-loops 级别：错误 为了方便理解执行顺序，在ArkTS中，逗号运算符仅适用于for循环语句中。注意与声明变量、函数参数传递时的逗号分隔符不同。 TypeScript  ArkTS for (let i = 0, j = 0; i < 10; ++i, j += 2) {\\n  // ...\\n}\\n\\n// 通过语句表示执行顺序，而非逗号运算符\\nlet x = 0;\\n++x;\\nx = x++; ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"逗号运算符仅用在for循环语句中\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BB%85%E7%94%A8%E5%9C%A8for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%AD\\\"'></a><a name='\\\"%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BB%85%E7%94%A8%E5%9C%A8for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E4%B8%AD\\\"'></a><h4>[h2]逗号运算符,仅用在for循环语句中</h4><p><strong>规则：</strong>arkts-no-comma-outside-loops</p> <p><strong>级别：错误</strong></p> <p>为了方便理解执行顺序，在ArkTS中，逗号运算符仅适用于for循环语句中。注意与声明变量、函数参数传递时的逗号分隔符不同。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>for (let i = 0, j = 0; i &lt; 10; ++i, j += 2) {\\n  // ...\\n}\\n\\n// 通过语句表示执行顺序，而非逗号运算符\\nlet x = 0;\\n++x;\\nx = x++;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 817,
        "pre": "class Point {\\n  x: number = 0.0\\n  y: number = 0.0\\n}\\n\\nfunction returnZeroPoint(): Point {\\n  return new Point();\\n}\\n\\nlet {x, y} = returnZeroPoint();",
        "type": "Reference",
        "function_call": "returnZeroPoint()",
        "function_name": "[h2]不支持解构变量声明",
        "parent_text": "[h2]不支持解构变量声明规则：arkts-no-destruct-decls 级别：错误 ArkTS不支持解构变量声明。它是一个依赖于结构兼容性的动态特性并且解构声明中的名称必须和被解构对象中的属性名称一致。 TypeScript  ArkTS class Point {\\n  x: number = 0.0\\n  y: number = 0.0\\n}\\n\\nfunction returnZeroPoint(): Point {\\n  return new Point();\\n}\\n\\n// 创建一个局部变量来处理每个字段\\nlet zp = returnZeroPoint();\\nlet x = zp.x;\\nlet y = zp.y; ",
        "import_module": "let f = function (s: string) {\\n  console.log(s);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持解构变量声明\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E8%A7%A3%E6%9E%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E8%A7%A3%E6%9E%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\\\"'></a><h4>[h2]不支持解构变量声明</h4><p><strong>规则：</strong>arkts-no-destruct-decls</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持解构变量声明。它是一个依赖于结构兼容性的动态特性并且解构声明中的名称必须和被解构对象中的属性名称一致。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Point {\\n  x: number = 0.0\\n  y: number = 0.0\\n}\\n\\nfunction returnZeroPoint(): Point {\\n  return new Point();\\n}\\n\\n// 创建一个局部变量来处理每个字段\\nlet zp = returnZeroPoint();\\nlet x = zp.x;\\nlet y = zp.y;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 818,
        "pre": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]不支持在catch语句标注类型",
        "parent_text": "[h2]不支持在catch语句标注类型规则：arkts-no-types-in-catch 级别：错误 在TypeScript的catch语句中，只能标注any或unknown类型。由于ArkTS不支持这些类型，应省略类型标注。 TypeScript  ArkTS try {\\n  // ...\\n} catch (a) {\\n  // 处理异常\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持在catch语句标注类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8catch%E8%AF%AD%E5%8F%A5%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8catch%E8%AF%AD%E5%8F%A5%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]不支持在catch语句标注类型</h4><p><strong>规则：</strong>arkts-no-types-in-catch</p> <p><strong>级别：错误</strong></p> <p>在TypeScript的catch语句中，只能标注any或unknown类型。由于ArkTS不支持这些类型，应省略类型标注。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>try {\\n  // ...\\n} catch (a) {\\n  // 处理异常\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 819,
        "pre": "let a: string[] = ['1.0', '2.0', '3.0'];\\nfor (let i in a) {\\n  console.log(a[i]);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持for .. in",
        "parent_text": "[h2]不支持for .. in规则：arkts-no-for-in 级别：错误 由于在ArkTS中，对象布局在编译时是确定的、并且不能在运行时被改变，所以不支持使用for .. in迭代一个对象的属性。对于数组来说，可以使用常规的for循环。 TypeScript  ArkTS let a: string[] = ['1.0', '2.0', '3.0'];\\nfor (let i = 0; i < a.length; ++i) {\\n  console.log(a[i]);\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持for--in\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81for--in\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81for--in\\\"'></a><h4>[h2]不支持for .. in</h4><p><strong>规则：</strong>arkts-no-for-in</p> <p><strong>级别：错误</strong></p> <p>由于在ArkTS中，对象布局在编译时是确定的、并且不能在运行时被改变，所以不支持使用for .. in迭代一个对象的属性。对于数组来说，可以使用常规的for循环。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let a: string[] = ['1.0', '2.0', '3.0'];\\nfor (let i = 0; i &lt; a.length; ++i) {\\n  console.log(a[i]);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 820,
        "pre": "type OptionsFlags<Type> = {\\n  [Property in keyof Type]: boolean\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持映射类型",
        "parent_text": "[h2]不支持映射类型规则：arkts-no-mapped-types 级别：错误 ArkTS不支持映射类型，使用其他语法来表示相同的语义。 TypeScript  ArkTS class C {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nclass CFlags {\\n  n: boolean = false\\n  s: boolean = false\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持映射类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]不支持映射类型</h4><p><strong>规则：</strong>arkts-no-mapped-types</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持映射类型，使用其他语法来表示相同的语义。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  n: number = 0\\n  s: string = ''\\n}\\n\\nclass CFlags {\\n  n: boolean = false\\n  s: boolean = false\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 821,
        "pre": "with (Math) { // 编译时错误, 但是仍能生成JavaScript代码\\n  let r: number = 42;\\n  let area: number = PI * r * r;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持with语句",
        "parent_text": "[h2]不支持with语句规则：arkts-no-with 级别：错误 ArkTS不支持with语句，使用其他语法来表示相同的语义。 TypeScript  ArkTS let r: number = 42;\\nlet area: number = Math.PI * r * r; ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持with语句\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81with%E8%AF%AD%E5%8F%A5\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81with%E8%AF%AD%E5%8F%A5\\\"'></a><h4>[h2]不支持with语句</h4><p><strong>规则：</strong>arkts-no-with</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持with语句，使用其他语法来表示相同的语义。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let r: number = 42;\\nlet area: number = Math.PI * r * r;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 822,
        "pre": "throw 4;\\nthrow '';\\nthrow new Error();",
        "type": "Reference",
        "function_call": "new Error()",
        "function_name": "[h2]限制throw语句中表达式的类型",
        "parent_text": "[h2]限制throw语句中表达式的类型规则：arkts-limited-throw 级别：错误 ArkTS只支持抛出Error类或其派生类的实例。禁止抛出其他类型（例如number或string）的数据。 TypeScript  ArkTS throw new Error(); ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"限制throw语句中表达式的类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%99%90%E5%88%B6throw%E8%AF%AD%E5%8F%A5%E4%B8%AD%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E9%99%90%E5%88%B6throw%E8%AF%AD%E5%8F%A5%E4%B8%AD%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]限制throw语句中表达式的类型</h4><p><strong>规则：</strong>arkts-limited-throw</p> <p><strong>级别：错误</strong></p> <p>ArkTS只支持抛出Error类或其派生类的实例。禁止抛出其他类型（例如number或string）的数据。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>throw new Error();</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 823,
        "pre": "// 只有在开启noImplicitAny选项时会产生编译时错误\\nfunction f(x: number) {\\n  if (x <= 0) {\\n    return x;\\n  }\\n  return g(x);\\n}\\n\\n// 只有在开启noImplicitAny选项时会产生编译时错误\\nfunction g(x: number) {\\n  return f(x - 1);\\n}\\n\\nfunction doOperation(x: number, y: number) {\\n  return x + y;\\n}\\n\\nf(10);\\ndoOperation(2, 3);",
        "type": "Reference",
        "function_call": "nfunction doOperation(x: number, y: number)",
        "function_name": "[h2]限制省略函数返回类型标注",
        "parent_text": "[h2]限制省略函数返回类型标注规则：arkts-no-implicit-return-types 级别：错误 ArkTS在部分场景中支持对函数返回类型进行推断。当return语句中的表达式是对某个函数或方法进行调用，且该函数或方法的返回类型没有被显著标注时，会出现编译时错误。在这种情况下，请标注函数返回类型。 TypeScript  ArkTS // 需标注返回类型：\\nfunction f(x: number): number {\\n  if (x <= 0) {\\n    return x;\\n  }\\n  return g(x);\\n}\\n\\n// 可以省略返回类型，返回类型可以从f的类型标注推导得到\\nfunction g(x: number): number {\\n  return f(x - 1);\\n}\\n\\n// 可以省略返回类型\\nfunction doOperation(x: number, y: number) {\\n  return x + y;\\n}\\n\\nf(10);\\ndoOperation(2, 3); ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"限制省略函数返回类型标注\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%99%90%E5%88%B6%E7%9C%81%E7%95%A5%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E6%A0%87%E6%B3%A8\\\"'></a><a name='\\\"%E9%99%90%E5%88%B6%E7%9C%81%E7%95%A5%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E6%A0%87%E6%B3%A8\\\"'></a><h4>[h2]限制省略函数返回类型标注</h4><p><strong>规则：</strong>arkts-no-implicit-return-types</p> <p><strong>级别：错误</strong></p> <p>ArkTS在部分场景中支持对函数返回类型进行推断。当return语句中的表达式是对某个函数或方法进行调用，且该函数或方法的返回类型没有被显著标注时，会出现编译时错误。在这种情况下，请标注函数返回类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// 需标注返回类型：\\nfunction f(x: number): number {\\n  if (x &lt;= 0) {\\n    return x;\\n  }\\n  return g(x);\\n}\\n\\n// 可以省略返回类型，返回类型可以从f的类型标注推导得到\\nfunction g(x: number): number {\\n  return f(x - 1);\\n}\\n\\n// 可以省略返回类型\\nfunction doOperation(x: number, y: number) {\\n  return x + y;\\n}\\n\\nf(10);\\ndoOperation(2, 3);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 824,
        "pre": "function drawText({ text = '', location: [x, y] = [0, 0], bold = false }) {\\n  text;\\n  x;\\n  y;\\n  bold;\\n}\\n\\ndrawText({ text: 'Hello, world!', location: [100, 50], bold: true });",
        "type": "Reference",
        "function_call": "nfunction main()",
        "function_name": "[h2]不支持参数解构的函数声明",
        "parent_text": "[h2]不支持参数解构的函数声明规则：arkts-no-destruct-params 级别：错误 ArkTS要求实参必须直接传递给函数，且必须指定到形参。 TypeScript  ArkTS function drawText(text: String, location: number[], bold: boolean) {\\n  let x = location[0];\\n  let y = location[1];\\n  text;\\n  x;\\n  y;\\n  bold;\\n}\\n\\nfunction main() {\\n  drawText('Hello, world!', [100, 50], true);\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持参数解构的函数声明\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%84%E7%9A%84%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%84%E7%9A%84%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\\\"'></a><h4>[h2]不支持参数解构的函数声明</h4><p><strong>规则：</strong>arkts-no-destruct-params</p> <p><strong>级别：错误</strong></p> <p>ArkTS要求实参必须直接传递给函数，且必须指定到形参。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function drawText(text: String, location: number[], bold: boolean) {\\n  let x = location[0];\\n  let y = location[1];\\n  text;\\n  x;\\n  y;\\n  bold;\\n}\\n\\nfunction main() {\\n  drawText('Hello, world!', [100, 50], true);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 825,
        "pre": "function addNum(a: number, b: number): void {\\n\\n  // 函数内声明函数\\n  function logToConsole(message: string): void {\\n    console.log(message);\\n  }\\n\\n  let result = a + b;\\n\\n  // 调用函数\\n  logToConsole('result is ' + result);\\n}",
        "type": "Reference",
        "function_call": "void = (message: string): void",
        "function_name": "[h2]不支持在函数内声明函数",
        "parent_text": "[h2]不支持在函数内声明函数规则：arkts-no-nested-funcs 级别：错误 ArkTS不支持在函数内声明函数，改用lambda函数。 TypeScript  ArkTS function addNum(a: number, b: number): void {\\n  // 使用lambda函数代替声明函数\\n  let logToConsole: (message: string) => void = (message: string): void => {\\n    console.log(message);\\n  }\\n\\n  let result = a + b;\\n\\n  logToConsole('result is ' + result);\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持在函数内声明函数\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0\\\"'></a><h4>[h2]不支持在函数内声明函数</h4><p><strong>规则：</strong>arkts-no-nested-funcs</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持在函数内声明函数，改用lambda函数。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function addNum(a: number, b: number): void {\\n  // 使用lambda函数代替声明函数\\n  let logToConsole: (message: string) =&gt; void = (message: string): void =&gt; {\\n    console.log(message);\\n  }\\n\\n  let result = a + b;\\n\\n  logToConsole('result is ' + result);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 826,
        "pre": "function foo(i: string) {\\n  this.count = i; // 只有在开启noImplicitThis选项时会产生编译时错误\\n}\\n\\nclass A {\\n  count: string = 'a'\\n  m = foo\\n}\\n\\nlet a = new A();\\nconsole.log(a.count); // 打印a\\na.m('b');\\nconsole.log(a.count); // 打印b",
        "type": "Reference",
        "function_call": "new A()",
        "function_name": "[h2]不支持在函数和类的静态方法中使用this",
        "parent_text": "[h2]不支持在函数和类的静态方法中使用this规则：arkts-no-standalone-this 级别：错误 ArkTS不支持在函数和类的静态方法中使用this，只能在类的实例方法中使用this。 TypeScript  ArkTS class A {\\n  count: string = 'a'\\n  m(i: string): void {\\n    this.count = i;\\n  }\\n}\\n\\nfunction main(): void {\\n  let a = new A();\\n  console.log(a.count);  // 打印a\\n  a.m('b');\\n  console.log(a.count);  // 打印b\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持在函数和类的静态方法中使用this\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8this\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E5%87%BD%E6%95%B0%E5%92%8C%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8this\\\"'></a><h4>[h2]不支持在函数和类的静态方法中使用this</h4><p><strong>规则：</strong>arkts-no-standalone-this</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持在函数和类的静态方法中使用this，只能在类的实例方法中使用this。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  count: string = 'a'\\n  m(i: string): void {\\n    this.count = i;\\n  }\\n}\\n\\nfunction main(): void {\\n  let a = new A();\\n  console.log(a.count);  // 打印a\\n  a.m('b');\\n  console.log(a.count);  // 打印b\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 827,
        "pre": "function* counter(start: number, end: number) {\\n  for (let i = start; i <= end; i++) {\\n    yield i;\\n  }\\n}\\n\\nfor (let num of counter(1, 5)) {\\n  console.log(num);\\n}",
        "type": "Reference",
        "function_call": "nfoo()",
        "function_name": "[h2]不支持生成器函数",
        "parent_text": "[h2]不支持生成器函数规则：arkts-no-generators 级别：错误 目前ArkTS不支持生成器函数，使用async或await机制进行并行任务处理。 TypeScript  ArkTS async function complexNumberProcessing(num: number): Promise<number> {\\n  // ...\\n  return num;\\n}\\n\\nasync function foo() {\\n  for (let i = 1; i <= 5; i++) {\\n    await complexNumberProcessing(i);\\n  }\\n}\\n\\nfoo() ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持生成器函数\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0\\\"'></a><h4>[h2]不支持生成器函数</h4><p><strong>规则：</strong>arkts-no-generators</p> <p><strong>级别：错误</strong></p> <p>目前ArkTS不支持生成器函数，使用async或await机制进行并行任务处理。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>async function complexNumberProcessing(num: number): Promise&lt;number&gt; {\\n  // ...\\n  return num;\\n}\\n\\nasync function foo() {\\n  for (let i = 1; i &lt;= 5; i++) {\\n    await complexNumberProcessing(i);\\n  }\\n}\\n\\nfoo()</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 828,
        "pre": "class Foo {\\n  foo: string = ''\\n  common: string = ''\\n}\\n\\nclass Bar {\\n  bar: string = ''\\n  common: string = ''\\n}\\n\\nfunction isFoo(arg: any): arg is Foo {\\n  return arg.foo !== undefined;\\n}\\n\\nfunction doStuff(arg: Foo | Bar) {\\n  if (isFoo(arg)) {\\n    console.log(arg.foo);  // OK\\n    console.log(arg.bar);  // 编译时错误\\n  } else {\\n    console.log(arg.foo);  // 编译时错误\\n    console.log(arg.bar);  // OK\\n  }\\n}\\n\\ndoStuff({ foo: 123, common: '123' });\\ndoStuff({ bar: 123, common: '123' });",
        "type": "Reference",
        "function_call": "new Bar()",
        "function_name": "[h2]使用instanceof和as进行类型保护",
        "parent_text": "[h2]使用instanceof和as进行类型保护规则：arkts-no-is 级别：错误 ArkTS不支持is运算符，必须用instanceof运算符替代。在使用之前，必须使用as运算符将对象转换为需要的类型。 TypeScript  ArkTS class Foo {\\n  foo: string = ''\\n  common: string = ''\\n}\\n\\nclass Bar {\\n  bar: string = ''\\n  common: string = ''\\n}\\n\\nfunction isFoo(arg: Object): boolean {\\n  return arg instanceof Foo;\\n}\\n\\nfunction doStuff(arg: Object): void {\\n  if (isFoo(arg)) {\\n    let fooArg = arg as Foo;\\n    console.log(fooArg.foo);   // OK\\n    console.log(arg.bar);    // 编译时错误\\n  } else {\\n    let barArg = arg as Bar;\\n    console.log(arg.foo);    // 编译时错误\\n    console.log(barArg.bar);   // OK\\n  }\\n}\\n\\nfunction main(): void {\\n  doStuff(new Foo());\\n  doStuff(new Bar());\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用instanceof和as进行类型保护\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%BD%BF%E7%94%A8instanceof%E5%92%8Cas%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8instanceof%E5%92%8Cas%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4\\\"'></a><h4>[h2]使用instanceof和as进行类型保护</h4><p><strong>规则：</strong>arkts-no-is</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持is运算符，必须用instanceof运算符替代。在使用之前，必须使用as运算符将对象转换为需要的类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Foo {\\n  foo: string = ''\\n  common: string = ''\\n}\\n\\nclass Bar {\\n  bar: string = ''\\n  common: string = ''\\n}\\n\\nfunction isFoo(arg: Object): boolean {\\n  return arg instanceof Foo;\\n}\\n\\nfunction doStuff(arg: Object): void {\\n  if (isFoo(arg)) {\\n    let fooArg = arg as Foo;\\n    console.log(fooArg.foo);   // OK\\n    console.log(arg.bar);    // 编译时错误\\n  } else {\\n    let barArg = arg as Bar;\\n    console.log(arg.foo);    // 编译时错误\\n    console.log(barArg.bar);   // OK\\n  }\\n}\\n\\nfunction main(): void {\\n  doStuff(new Foo());\\n  doStuff(new Bar());\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 829,
        "pre": "function foo(x: number, y: number, z: number) {\\n  // ...\\n}\\n\\nlet args: [number, number, number] = [0, 1, 2];\\nfoo(...args);",
        "type": "Reference",
        "function_call": "constructor(p2d: Point2D, z: number)",
        "function_name": "[h2]部分支持展开运算符",
        "parent_text": "[h2]部分支持展开运算符规则：arkts-no-spread 级别：错误 ArkTS仅支持使用展开运算符展开数组、Array的子类和TypedArray（例如Int32Array）。仅支持使用在以下场景中： 传递给剩余参数时；复制一个数组到数组字面量。 TypeScript  ArkTS function log_numbers(x: number, y: number, z: number) {\\n  // ...\\n}\\n\\nlet numbers: number[] = [1, 2, 3];\\nlog_numbers(numbers[0], numbers[1], numbers[2]); TypeScript let point2d = { x: 1, y: 2 };\\nlet point3d = { ...point2d, z: 3 }; ArkTS class Point2D {\\n  x: number = 0; y: number = 0\\n}\\n\\nclass Point3D {\\n  x: number = 0; y: number = 0; z: number = 0\\n  constructor(p2d: Point2D, z: number) {\\n    this.x = p2d.x;\\n    this.y = p2d.y;\\n    this.z = z;\\n  }\\n}\\n\\nlet p3d = new Point3D({ x: 1, y: 2 } as Point2D, 3);\\n\\nclass DerivedFromArray extends Uint16Array {};\\n\\nlet arr1 = [1, 2, 3];\\nlet arr2 = new Uint16Array([4, 5, 6]);\\nlet arr3 = new DerivedFromArray([7, 8, 9]);\\nlet arr4 = [...arr1, 10, ...arr2, 11, ...arr3]; ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"部分支持展开运算符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%83%A8%E5%88%86%E6%94%AF%E6%8C%81%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><a name='\\\"%E9%83%A8%E5%88%86%E6%94%AF%E6%8C%81%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6\\\"'></a><h4>[h2]部分支持展开运算符</h4><p><strong>规则：</strong>arkts-no-spread</p> <p><strong>级别：错误</strong></p> <p>ArkTS仅支持使用展开运算符展开数组、Array的子类和TypedArray（例如Int32Array）。仅支持使用在以下场景中：</p> <ol><li>传递给剩余参数时；</li><li>复制一个数组到数组字面量。</li></ol> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function log_numbers(x: number, y: number, z: number) {\\n  // ...\\n}\\n\\nlet numbers: number[] = [1, 2, 3];\\nlog_numbers(numbers[0], numbers[1], numbers[2]);</pre> <p><strong>TypeScript</strong></p> <pre class='\\\"typescript\\\"'>let point2d = { x: 1, y: 2 };\\nlet point3d = { ...point2d, z: 3 };</pre> <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Point2D {\\n  x: number = 0; y: number = 0\\n}\\n\\nclass Point3D {\\n  x: number = 0; y: number = 0; z: number = 0\\n  constructor(p2d: Point2D, z: number) {\\n    this.x = p2d.x;\\n    this.y = p2d.y;\\n    this.z = z;\\n  }\\n}\\n\\nlet p3d = new Point3D({ x: 1, y: 2 } as Point2D, 3);\\n\\nclass DerivedFromArray extends Uint16Array {};\\n\\nlet arr1 = [1, 2, 3];\\nlet arr2 = new Uint16Array([4, 5, 6]);\\nlet arr3 = new DerivedFromArray([7, 8, 9]);\\nlet arr4 = [...arr1, 10, ...arr2, 11, ...arr3];</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 830,
        "pre": "interface Mover {\\n  getStatus(): { speed: number }\\n}\\ninterface Shaker {\\n  getStatus(): { frequency: number }\\n}\\n\\ninterface MoverShaker extends Mover, Shaker {\\n  getStatus(): {\\n    speed: number\\n    frequency: number\\n  }\\n}\\n\\nclass C implements MoverShaker {\\n  private speed: number = 0\\n  private frequency: number = 0\\n\\n  getStatus() {\\n    return { speed: this.speed, frequency: this.frequency };\\n  }\\n}",
        "type": "Reference",
        "function_call": "public getStatus(): MoveAndShakeStatus",
        "function_name": "[h2]接口不能继承具有相同方法的两个接口",
        "parent_text": "[h2]接口不能继承具有相同方法的两个接口规则：arkts-no-extend-same-prop 级别：错误 在TypeScript中，如果一个接口继承了具有相同方法的两个接口，则该接口必须使用联合类型来声明该方法的返回值类型。在ArkTS中，由于一个接口中不能包含两个无法区分的方法（例如两个参数列表相同但返回类型不同的方法），因此，接口不能继承具有相同方法的两个接口。 TypeScript  ArkTS class MoveStatus {\\n  public speed: number\\n  constructor() {\\n    this.speed = 0;\\n  }\\n}\\ninterface Mover {\\n  getMoveStatus(): MoveStatus\\n}\\n\\nclass ShakeStatus {\\n  public frequency: number\\n  constructor() {\\n    this.frequency = 0;\\n  }\\n}\\ninterface Shaker {\\n  getShakeStatus(): ShakeStatus\\n}\\n\\nclass MoveAndShakeStatus {\\n  public speed: number\\n  public frequency: number\\n  constructor() {\\n    this.speed = 0;\\n    this.frequency = 0;\\n  }\\n}\\n\\nclass C implements Mover, Shaker {\\n  private move_status: MoveStatus\\n  private shake_status: ShakeStatus\\n\\n  constructor() {\\n    this.move_status = new MoveStatus();\\n    this.shake_status = new ShakeStatus();\\n  }\\n\\n  public getMoveStatus(): MoveStatus {\\n    return this.move_status;\\n  }\\n\\n  public getShakeStatus(): ShakeStatus {\\n    return this.shake_status;\\n  }\\n\\n  public getStatus(): MoveAndShakeStatus {\\n    return {\\n      speed: this.move_status.speed,\\n      frequency: this.shake_status.frequency\\n    };\\n  }\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"接口不能继承具有相同方法的两个接口\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E6%8E%A5%E5%8F%A3%E4%B8%8D%E8%83%BD%E7%BB%A7%E6%89%BF%E5%85%B7%E6%9C%89%E7%9B%B8%E5%90%8C%E6%96%B9%E6%B3%95%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%8E%A5%E5%8F%A3\\\"'></a><a name='\\\"%E6%8E%A5%E5%8F%A3%E4%B8%8D%E8%83%BD%E7%BB%A7%E6%89%BF%E5%85%B7%E6%9C%89%E7%9B%B8%E5%90%8C%E6%96%B9%E6%B3%95%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%8E%A5%E5%8F%A3\\\"'></a><h4>[h2]接口不能继承具有相同方法的两个接口</h4><p><strong>规则：</strong>arkts-no-extend-same-prop</p> <p><strong>级别：错误</strong></p> <p>在TypeScript中，如果一个接口继承了具有相同方法的两个接口，则该接口必须使用联合类型来声明该方法的返回值类型。在ArkTS中，由于一个接口中不能包含两个无法区分的方法（例如两个参数列表相同但返回类型不同的方法），因此，接口不能继承具有相同方法的两个接口。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class MoveStatus {\\n  public speed: number\\n  constructor() {\\n    this.speed = 0;\\n  }\\n}\\ninterface Mover {\\n  getMoveStatus(): MoveStatus\\n}\\n\\nclass ShakeStatus {\\n  public frequency: number\\n  constructor() {\\n    this.frequency = 0;\\n  }\\n}\\ninterface Shaker {\\n  getShakeStatus(): ShakeStatus\\n}\\n\\nclass MoveAndShakeStatus {\\n  public speed: number\\n  public frequency: number\\n  constructor() {\\n    this.speed = 0;\\n    this.frequency = 0;\\n  }\\n}\\n\\nclass C implements Mover, Shaker {\\n  private move_status: MoveStatus\\n  private shake_status: ShakeStatus\\n\\n  constructor() {\\n    this.move_status = new MoveStatus();\\n    this.shake_status = new ShakeStatus();\\n  }\\n\\n  public getMoveStatus(): MoveStatus {\\n    return this.move_status;\\n  }\\n\\n  public getShakeStatus(): ShakeStatus {\\n    return this.shake_status;\\n  }\\n\\n  public getStatus(): MoveAndShakeStatus {\\n    return {\\n      speed: this.move_status.speed,\\n      frequency: this.shake_status.frequency\\n    };\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 831,
        "pre": "interface Document {\\n  createElement(tagName: any): Element\\n}\\n\\ninterface Document {\\n  createElement(tagName: string): HTMLElement\\n}\\n\\ninterface Document {\\n  createElement(tagName: number): HTMLDivElement\\n  createElement(tagName: boolean): HTMLSpanElement\\n  createElement(tagName: string, value: number): HTMLCanvasElement\\n}",
        "type": "Reference",
        "function_call": "createElement(tagName: Object): Element",
        "function_name": "[h2]不支持声明合并",
        "parent_text": "[h2]不支持声明合并规则：arkts-no-decl-merging 级别：错误 ArkTS不支持类、接口的声明合并。 TypeScript  ArkTS interface Document {\\n  createElement(tagName: number): HTMLDivElement\\n  createElement(tagName: boolean): HTMLSpanElement\\n  createElement(tagName: string, value: number): HTMLCanvasElement\\n  createElement(tagName: string): HTMLElement\\n  createElement(tagName: Object): Element\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持声明合并\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6\\\"'></a><h4>[h2]不支持声明合并</h4><p><strong>规则：</strong>arkts-no-decl-merging</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持类、接口的声明合并。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>interface Document {\\n  createElement(tagName: number): HTMLDivElement\\n  createElement(tagName: boolean): HTMLSpanElement\\n  createElement(tagName: string, value: number): HTMLCanvasElement\\n  createElement(tagName: string): HTMLElement\\n  createElement(tagName: Object): Element\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 832,
        "pre": "class Control {\\n  state: number = 0\\n}\\n\\ninterface SelectableControl extends Control {\\n  select(): void\\n}",
        "type": "Reference",
        "function_call": "select(): void",
        "function_name": "[h2]接口不能继承类",
        "parent_text": "[h2]接口不能继承类规则：arkts-extends-only-class 级别：错误 ArkTS不支持接口继承类，接口只能继承接口。 TypeScript  ArkTS interface Control {\\n  state: number\\n}\\n\\ninterface SelectableControl extends Control {\\n  select(): void\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"接口不能继承类\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E6%8E%A5%E5%8F%A3%E4%B8%8D%E8%83%BD%E7%BB%A7%E6%89%BF%E7%B1%BB\\\"'></a><a name='\\\"%E6%8E%A5%E5%8F%A3%E4%B8%8D%E8%83%BD%E7%BB%A7%E6%89%BF%E7%B1%BB\\\"'></a><h4>[h2]接口不能继承类</h4><p><strong>规则：</strong>arkts-extends-only-class</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持接口继承类，接口只能继承接口。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>interface Control {\\n  state: number\\n}\\n\\ninterface SelectableControl extends Control {\\n  select(): void\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 833,
        "pre": "class Person {\\n  constructor(\\n    name: string,\\n    age: number\\n  ) {}\\n}\\ntype PersonCtor = new (name: string, age: number) => Person\\n\\nfunction createPerson(Ctor: PersonCtor, name: string, age: number): Person\\n{\\n  return new Ctor(name, age);\\n}\\n\\nconst person = createPerson(Person, 'John', 30);",
        "type": "Reference",
        "function_call": "PersonCtor = (n: string, a: number): Person",
        "function_name": "[h2]不支持构造函数类型",
        "parent_text": "[h2]不支持构造函数类型规则：arkts-no-ctor-signatures-funcs 级别：错误 ArkTS不支持使用构造函数类型，改用lambda函数。 TypeScript  ArkTS class Person {\\n  constructor(\\n    name: string,\\n    age: number\\n  ) {}\\n}\\ntype PersonCtor = (n: string, a: number) => Person\\n\\nfunction createPerson(Ctor: PersonCtor, n: string, a: number): Person {\\n  return Ctor(n, a);\\n}\\n\\nlet Impersonizer: PersonCtor = (n: string, a: number): Person => {\\n  return new Person(n, a);\\n}\\n\\nconst person = createPerson(Impersonizer, 'John', 30); ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持构造函数类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]不支持构造函数类型</h4><p><strong>规则：</strong>arkts-no-ctor-signatures-funcs</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持使用构造函数类型，改用lambda函数。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class Person {\\n  constructor(\\n    name: string,\\n    age: number\\n  ) {}\\n}\\ntype PersonCtor = (n: string, a: number) =&gt; Person\\n\\nfunction createPerson(Ctor: PersonCtor, n: string, a: number): Person {\\n  return Ctor(n, a);\\n}\\n\\nlet Impersonizer: PersonCtor = (n: string, a: number): Person =&gt; {\\n  return new Person(n, a);\\n}\\n\\nconst person = createPerson(Impersonizer, 'John', 30);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 834,
        "pre": "enum E1 {\\n  A = 0xa,\\n  B = 0xb,\\n  C = Math.random(),\\n  D = 0xd,\\n  E // 推断出0xe\\n}\\n\\nenum E2 {\\n  A = 0xa,\\n  B = '0xb',\\n  C = 0xc,\\n  D = '0xd'\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]只能使用类型相同的编译时表达式初始化枚举成员",
        "parent_text": "[h2]只能使用类型相同的编译时表达式初始化枚举成员规则：arkts-no-enum-mixed-types 级别：错误 ArkTS不支持使用在运行期间才能计算的表达式来初始化枚举成员。此外，枚举中所有显式初始化的成员必须具有相同的类型。 TypeScript  ArkTS enum E1 {\\n  A = 0xa,\\n  B = 0xb,\\n  C = 0xc,\\n  D = 0xd,\\n  E // 推断出0xe\\n}\\n\\nenum E2 {\\n  A = '0xa',\\n  B = '0xb',\\n  C = '0xc',\\n  D = '0xd'\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"只能使用类型相同的编译时表达式初始化枚举成员\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%90%8C%E7%9A%84%E7%BC%96%E8%AF%91%E6%97%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9E%9A%E4%B8%BE%E6%88%90%E5%91%98\\\"'></a><a name='\\\"%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%90%8C%E7%9A%84%E7%BC%96%E8%AF%91%E6%97%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9E%9A%E4%B8%BE%E6%88%90%E5%91%98\\\"'></a><h4>[h2]只能使用类型相同的编译时表达式初始化枚举成员</h4><p><strong>规则：</strong>arkts-no-enum-mixed-types</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持使用在运行期间才能计算的表达式来初始化枚举成员。此外，枚举中所有显式初始化的成员必须具有相同的类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>enum E1 {\\n  A = 0xa,\\n  B = 0xb,\\n  C = 0xc,\\n  D = 0xd,\\n  E // 推断出0xe\\n}\\n\\nenum E2 {\\n  A = '0xa',\\n  B = '0xb',\\n  C = '0xc',\\n  D = '0xd'\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 835,
        "pre": "enum ColorSet {\\n  RED,\\n  GREEN\\n}\\nenum ColorSet {\\n  YELLOW = 2\\n}\\nenum ColorSet {\\n  BLACK = 3,\\n  BLUE\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持enum声明合并",
        "parent_text": "[h2]不支持enum声明合并规则：arkts-no-enum-merging 级别：错误 ArkTS不支持enum声明合并。 TypeScript  ArkTS enum ColorSet {\\n  RED,\\n  GREEN,\\n  YELLOW,\\n  BLACK,\\n  BLUE\\n} ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持enum声明合并\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81enum%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81enum%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6\\\"'></a><h4>[h2]不支持enum声明合并</h4><p><strong>规则：</strong>arkts-no-enum-merging</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持enum声明合并。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>enum ColorSet {\\n  RED,\\n  GREEN,\\n  YELLOW,\\n  BLACK,\\n  BLUE\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 836,
        "pre": "namespace MyNamespace {\\n  export let x: number\\n}\\n\\nlet m = MyNamespace;\\nm.x = 2;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]命名空间不能被用作对象",
        "parent_text": "[h2]命名空间不能被用作对象规则：arkts-no-ns-as-obj 级别：错误 ArkTS不支持将命名空间用作对象，可以使用类或模块。 TypeScript  ArkTS namespace MyNamespace {\\n  export let x: number\\n}\\n\\nMyNamespace.x = 2; ",
        "import_module": "try {\\n  // ...\\n} catch (a: unknown) {\\n  // 处理异常\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"命名空间不能被用作对象\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%94%A8%E4%BD%9C%E5%AF%B9%E8%B1%A1\\\"'></a><a name='\\\"%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%94%A8%E4%BD%9C%E5%AF%B9%E8%B1%A1\\\"'></a><h4>[h2]命名空间不能被用作对象</h4><p><strong>规则：</strong>arkts-no-ns-as-obj</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持将命名空间用作对象，可以使用类或模块。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>namespace MyNamespace {\\n  export let x: number\\n}\\n\\nMyNamespace.x = 2;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 837,
        "pre": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "type": "Import",
        "function_call": "init()",
        "function_name": "[h2]不支持命名空间中的非声明语句",
        "parent_text": "[h2]不支持命名空间中的非声明语句规则：arkts-no-ns-statements 级别：错误 在ArkTS中，命名空间用于定义标志符可见范围，只在编译时有效。因此，不支持命名空间中的非声明语句。可以将非声明语句写在函数中。 TypeScript  ArkTS namespace A {\\n  export let x: number\\n\\n  export function init() {\\n    x = 1;\\n  }\\n}\\n\\n// 调用初始化函数来执行\\nA.init(); ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持命名空间中的非声明语句\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E9%9D%9E%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8F%A5\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E9%9D%9E%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8F%A5\\\"'></a><h4>[h2]不支持命名空间中的非声明语句</h4><p><strong>规则：</strong>arkts-no-ns-statements</p> <p><strong>级别：错误</strong></p> <p>在ArkTS中，命名空间用于定义标志符可见范围，只在编译时有效。因此，不支持命名空间中的非声明语句。可以将非声明语句写在函数中。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>namespace A {\\n  export let x: number\\n\\n  export function init() {\\n    x = 1;\\n  }\\n}\\n\\n// 调用初始化函数来执行\\nA.init();</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 838,
        "pre": "import m = require('mod')",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持require和import赋值表达式",
        "parent_text": "[h2]不支持require和import赋值表达式规则：arkts-no-require 级别：错误 ArkTS不支持通过require导入，也不支持import赋值表达式，改用import。 TypeScript  ArkTS import * as m from 'mod' ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持require和import赋值表达式\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81require%E5%92%8Cimport%E8%B5%8B%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81require%E5%92%8Cimport%E8%B5%8B%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F\\\"'></a><h4>[h2]不支持require和import赋值表达式</h4><p><strong>规则：</strong>arkts-no-require</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持通过require导入，也不支持import赋值表达式，改用import。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>import * as m from 'mod'</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 839,
        "pre": "// module1\\nexport = Point\\n\\nclass Point {\\n  constructor(x: number, y: number) {}\\n  static origin = new Point(0, 0)\\n}\\n\\n// module2\\nimport Pt = require('module1')\\n\\nlet p = Pt.Point.origin;",
        "type": "Reference",
        "function_call": "constructor(x: number, y: number)",
        "function_name": "[h2]不支持export = ...语法",
        "parent_text": "[h2]不支持export = ...语法规则：arkts-no-export-assignment 级别：错误 ArkTS不支持export = ...语法，改用常规的export或import。 TypeScript  ArkTS // module1\\nexport class Point {\\n  constructor(x: number, y: number) {}\\n  static origin = new Point(0, 0)\\n}\\n\\n// module2\\nimport * as Pt from 'module1'\\n\\nlet p = Pt.Point.origin ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持export--语法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81export--%E8%AF%AD%E6%B3%95\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81export--%E8%AF%AD%E6%B3%95\\\"'></a><h4>[h2]不支持export = ...语法</h4><p><strong>规则：</strong>arkts-no-export-assignment</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持export = ...语法，改用常规的export或import。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// module1\\nexport class Point {\\n  constructor(x: number, y: number) {}\\n  static origin = new Point(0, 0)\\n}\\n\\n// module2\\nimport * as Pt from 'module1'\\n\\nlet p = Pt.Point.origin</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 840,
        "pre": "// 声明\\ndeclare module '*!text' {\\n  const content: string\\n  export default content\\n}\\n\\n// 使用代码\\nimport fileContent from 'some.txt!text'",
        "type": "Reference",
        "function_call": "function foo(x: number): number",
        "function_name": "[h2]不支持在模块名中使用通配符",
        "parent_text": "[h2]不支持在模块名中使用通配符规则：arkts-no-module-wildcards 级别：错误 由于在ArkTS中，导入是编译时而非运行时行为，因此，不支持在模块名中使用通配符。 TypeScript  ArkTS // 声明\\ndeclare namespace N {\\n  function foo(x: number): number\\n}\\n\\n// 使用代码\\nimport * as m from 'module'\\nconsole.log('N.foo called: ' + N.foo(42)); ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持在模块名中使用通配符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E6%A8%A1%E5%9D%97%E5%90%8D%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E6%A8%A1%E5%9D%97%E5%90%8D%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6\\\"'></a><h4>[h2]不支持在模块名中使用通配符</h4><p><strong>规则：</strong>arkts-no-module-wildcards</p> <p><strong>级别：错误</strong></p> <p>由于在ArkTS中，导入是编译时而非运行时行为，因此，不支持在模块名中使用通配符。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// 声明\\ndeclare namespace N {\\n  function foo(x: number): number\\n}\\n\\n// 使用代码\\nimport * as m from 'module'\\nconsole.log('N.foo called: ' + N.foo(42));</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 841,
        "pre": "// math-lib.d.ts\\nexport const isPrime(x: number): boolean\\nexport as namespace mathLib\\n\\n// 脚本中\\nmathLib.isPrime(2)",
        "type": "Reference",
        "function_call": "export isPrime(x: number): boolean",
        "function_name": "[h2]不支持通用模块定义(UMD)",
        "parent_text": "[h2]不支持通用模块定义(UMD)规则：arkts-no-umd 级别：错误 ArkTS不支持通用模块定义（UMD）。因为在ArkTS中没有“脚本”的概念（相对于“模块”）。此外，在ArkTS中，导入是编译时而非运行时特性。改用export和import语法。 TypeScript  ArkTS // math-lib.d.ts\\nnamespace mathLib {\\n  export isPrime(x: number): boolean\\n}\\n\\n// 程序中\\nimport { mathLib } from 'math-lib'\\nmathLib.isPrime(2) ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持通用模块定义umd\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89umd\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9A%E4%B9%89umd\\\"'></a><h4>[h2]不支持通用模块定义(UMD)</h4><p><strong>规则：</strong>arkts-no-umd</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持通用模块定义（UMD）。因为在ArkTS中没有“脚本”的概念（相对于“模块”）。此外，在ArkTS中，导入是编译时而非运行时特性。改用export和import语法。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// math-lib.d.ts\\nnamespace mathLib {\\n  export isPrime(x: number): boolean\\n}\\n\\n// 程序中\\nimport { mathLib } from 'math-lib'\\nmathLib.isPrime(2)</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 842,
        "pre": "let x!: number // 提示：在使用前将x初始化\\n\\ninitialize();\\n\\nfunction initialize() {\\n  x = 10;\\n}\\n\\nconsole.log('x = ' + x);",
        "type": "Reference",
        "function_call": "initialize()",
        "function_name": "[h2]不支持确定赋值断言",
        "parent_text": "[h2]不支持确定赋值断言规则：arkts-no-definite-assignment 级别：警告 ArkTS不支持确定赋值断言，例如：let v!: T。改为在声明变量的同时为变量赋值。 TypeScript  ArkTS function initialize(): number {\\n  return 10;\\n}\\n\\nlet x: number = initialize();\\n\\nconsole.log('x = ' + x); ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持确定赋值断言\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E7%A1%AE%E5%AE%9A%E8%B5%8B%E5%80%BC%E6%96%AD%E8%A8%80\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E7%A1%AE%E5%AE%9A%E8%B5%8B%E5%80%BC%E6%96%AD%E8%A8%80\\\"'></a><h4>[h2]不支持确定赋值断言</h4><p><strong>规则：</strong>arkts-no-definite-assignment</p> <p><strong>级别：警告</strong></p> <p>ArkTS不支持确定赋值断言，例如：let v!: T。改为在声明变量的同时为变量赋值。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function initialize(): number {\\n  return 10;\\n}\\n\\nlet x: number = initialize();\\n\\nconsole.log('x = ' + x);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 843,
        "pre": "let C = function(p) {\\n  this.p = p; // 只有在开启noImplicitThis选项时会产生编译时错误\\n}\\n\\nC.prototype = {\\n  m() {\\n    console.log(this.p);\\n  }\\n}\\n\\nC.prototype.q = function(r: string) {\\n  return this.p == r;\\n}",
        "type": "Reference",
        "function_call": "q(r: string)",
        "function_name": "[h2]不支持在原型上赋值",
        "parent_text": "[h2]不支持在原型上赋值规则：arkts-no-prototype-assignment 级别：错误 ArkTS没有原型的概念，因此不支持在原型上赋值。此特性不符合静态类型的原则。 TypeScript  ArkTS class C {\\n  p: string = ''\\n  m() {\\n    console.log(this.p);\\n  }\\n  q(r: string) {\\n    return this.p == r;\\n  }\\n} ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持在原型上赋值\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E5%8E%9F%E5%9E%8B%E4%B8%8A%E8%B5%8B%E5%80%BC\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8%E5%8E%9F%E5%9E%8B%E4%B8%8A%E8%B5%8B%E5%80%BC\\\"'></a><h4>[h2]不支持在原型上赋值</h4><p><strong>规则：</strong>arkts-no-prototype-assignment</p> <p><strong>级别：错误</strong></p> <p>ArkTS没有原型的概念，因此不支持在原型上赋值。此特性不符合静态类型的原则。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  p: string = ''\\n  m() {\\n    console.log(this.p);\\n  }\\n  q(r: string) {\\n    return this.p == r;\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 844,
        "pre": "// 全局文件中\\nvar abc = 100;\\n\\n// 从上面引用'abc'\\nlet x = globalThis.abc;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持globalThis",
        "parent_text": "[h2]不支持globalThis规则：arkts-no-globalthis 级别：警告 由于ArkTS不支持动态更改对象的布局，因此不支持全局作用域和globalThis。 TypeScript  ArkTS // file1\\nexport let abc: number = 100;\\n\\n// file2\\nimport * as M from 'file1'\\n\\nlet x = M.abc; ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持globalthis\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81globalthis\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81globalthis\\\"'></a><h4>[h2]不支持globalThis</h4><p><strong>规则：</strong>arkts-no-globalthis</p> <p><strong>级别：警告</strong></p> <p>由于ArkTS不支持动态更改对象的布局，因此不支持全局作用域和globalThis。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// file1\\nexport let abc: number = 100;\\n\\n// file2\\nimport * as M from 'file1'\\n\\nlet x = M.abc;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 845,
        "pre": "// 'hello'类型\\nlet x = 'hello' as const;\\n\\n// 'readonly [10, 20]'类型\\nlet y = [10, 20] as const;\\n\\n// '{ readonly text: 'hello' }'类型\\nlet z = { text: 'hello' } as const;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持as const断言",
        "parent_text": "[h2]不支持as const断言规则：arkts-no-as-const 级别：错误 ArkTS不支持as const断言。在标准TypeScript中，as const用于标注字面量的相应字面量类型，而ArkTS不支持字面量类型。 TypeScript  ArkTS // 'string'类型\\nlet x: string = 'hello';\\n\\n// 'number[]'类型\\nlet y: number[] = [10, 20];\\n\\nclass Label {\\n  text: string = ''\\n}\\n\\n// 'Label'类型\\nlet z: Label = {\\n  text: 'hello'\\n} ",
        "import_module": "namespace A {\\n  export let x: number\\n  x = 1;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持as-const断言\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81as-const%E6%96%AD%E8%A8%80\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81as-const%E6%96%AD%E8%A8%80\\\"'></a><h4>[h2]不支持as const断言</h4><p><strong>规则：</strong>arkts-no-as-const</p> <p><strong>级别：错误</strong></p> <p>ArkTS不支持as const断言。在标准TypeScript中，as const用于标注字面量的相应字面量类型，而ArkTS不支持字面量类型。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// 'string'类型\\nlet x: string = 'hello';\\n\\n// 'number[]'类型\\nlet y: number[] = [10, 20];\\n\\nclass Label {\\n  text: string = ''\\n}\\n\\n// 'Label'类型\\nlet z: Label = {\\n  text: 'hello'\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 846,
        "pre": "import { obj } from 'something.json' assert { type: 'json' }",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]不支持导入断言",
        "parent_text": "[h2]不支持导入断言规则：arkts-no-import-assertions 级别：错误 由于在ArkTS中，导入是编译时而非运行时特性，因此，ArkTS不支持导入断言。在运行时检查导入的API是否正确，对于静态类型的语言来说是没有意义的。改用常规的import语法。 TypeScript  ArkTS // 编译时将检查导入T的正确性\\nimport { something } from 'module' ",
        "import_module": "import { obj } from 'something.json' assert { type: 'json' }",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持导入断言\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AF%BC%E5%85%A5%E6%96%AD%E8%A8%80\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AF%BC%E5%85%A5%E6%96%AD%E8%A8%80\\\"'></a><h4>[h2]不支持导入断言</h4><p><strong>规则：</strong>arkts-no-import-assertions</p> <p><strong>级别：错误</strong></p> <p>由于在ArkTS中，导入是编译时而非运行时特性，因此，ArkTS不支持导入断言。在运行时检查导入的API是否正确，对于静态类型的语言来说是没有意义的。改用常规的import语法。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// 编译时将检查导入T的正确性\\nimport { something } from 'module'</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 847,
        "pre": "// 只有在开启noImplicitReturns选项时会产生编译时错误\\nfunction foo(s: string): string {\\n  if (s != '') {\\n    console.log(s);\\n    return s;\\n  } else {\\n    console.log(s);\\n  }\\n}\\n\\nlet n: number = null; // 只有在开启strictNullChecks选项时会产生编译时错误",
        "type": "Reference",
        "function_call": "new C()",
        "function_name": "[h2]强制进行严格类型检查",
        "parent_text": "[h2]强制进行严格类型检查规则：arkts-strict-typing 级别：错误 在编译阶段，会进行TypeScript严格模式的类型检查，包括： noImplicitReturns, strictFunctionTypes, strictNullChecks, strictPropertyInitialization。 TypeScript  ArkTS function foo(s: string): string {\\n  console.log(s);\\n  return s;\\n}\\n\\nlet n1: number | null = null;\\nlet n2: number = 0; 在定义类时，如果无法在声明时或者构造函数中初始化某实例属性，那么可以使用确定赋值断言符!来消除strictPropertyInitialization的报错。 使用确定赋值断言符会增加代码错误的风险，开发者需要保证该实例属性在被使用前已被赋值，否则可能会产生运行时异常。 使用确定赋值断言符会增加运行时的类型检查，从而增加额外的运行时开销，所以应尽可能避免使用确定赋值断言符。 使用确定赋值断言符将产生warning: arkts-no-definite-assignment。 TypeScript class C {\\n  name: string  // 只有在开启strictPropertyInitialization选项时会产生编译时错误\\n  age: number   // 只有在开启strictPropertyInitialization选项时会产生编译时错误\\n}\\n\\nlet c = new C(); ArkTS class C {\\n  name: string = ''\\n  age!: number      // warning: arkts-no-definite-assignment\\n\\n  initAge(age: number) {\\n    this.age = age;\\n  }\\n}\\n\\nlet c = new C();\\nc.initAge(10); ",
        "import_module": "import { obj } from 'something.json' assert { type: 'json' }",
        "parent": "<div class='\\\"section\\\"' id='\\\"强制进行严格类型检查\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E5%BC%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E4%B8%A5%E6%A0%BC%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\\\"'></a><a name='\\\"%E5%BC%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E4%B8%A5%E6%A0%BC%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\\\"'></a><h4>[h2]强制进行严格类型检查</h4><p><strong>规则：</strong>arkts-strict-typing</p> <p><strong>级别：错误</strong></p> <p>在编译阶段，会进行TypeScript严格模式的类型检查，包括：</p> <p>noImplicitReturns,</p> <p>strictFunctionTypes,</p> <p>strictNullChecks,</p> <p>strictPropertyInitialization。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function foo(s: string): string {\\n  console.log(s);\\n  return s;\\n}\\n\\nlet n1: number | null = null;\\nlet n2: number = 0;</pre> <p>在定义类时，如果无法在声明时或者构造函数中初始化某实例属性，那么可以使用确定赋值断言符!来消除strictPropertyInitialization的报错。</p> <p>使用确定赋值断言符会增加代码错误的风险，开发者需要保证该实例属性在被使用前已被赋值，否则可能会产生运行时异常。</p> <p>使用确定赋值断言符会增加运行时的类型检查，从而增加额外的运行时开销，所以应尽可能避免使用确定赋值断言符。</p> <p>使用确定赋值断言符将产生warning: arkts-no-definite-assignment。</p> <p><strong>TypeScript</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  name: string  // 只有在开启strictPropertyInitialization选项时会产生编译时错误\\n  age: number   // 只有在开启strictPropertyInitialization选项时会产生编译时错误\\n}\\n\\nlet c = new C();</pre> <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  name: string = ''\\n  age!: number      // warning: arkts-no-definite-assignment\\n\\n  initAge(age: number) {\\n    this.age = age;\\n  }\\n}\\n\\nlet c = new C();\\nc.initAge(10);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 848,
        "pre": "// @ts-nocheck\\n// ...\\n// 关闭了类型检查后的代码\\n// ...\\n\\nlet s1: string = null; // 没有报错\\n\\n// @ts-ignore\\nlet s2: string = null; // 没有报错",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不允许通过注释关闭类型检查",
        "parent_text": "[h2]不允许通过注释关闭类型检查规则：arkts-strict-typing-required 级别：错误 在ArkTS中，类型检查不是可选项。不允许通过注释关闭类型检查，不支持使用@ts-ignore和@ts-nocheck。 TypeScript  ArkTS let s1: string | null = null; // 没有报错，合适的类型\\nlet s2: string = null; // 编译时报错 ",
        "import_module": "import { obj } from 'something.json' assert { type: 'json' }",
        "parent": "<div class='\\\"section\\\"' id='\\\"不允许通过注释关闭类型检查\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E5%85%81%E8%AE%B8%E9%80%9A%E8%BF%87%E6%B3%A8%E9%87%8A%E5%85%B3%E9%97%AD%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\\\"'></a><a name='\\\"%E4%B8%8D%E5%85%81%E8%AE%B8%E9%80%9A%E8%BF%87%E6%B3%A8%E9%87%8A%E5%85%B3%E9%97%AD%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\\\"'></a><h4>[h2]不允许通过注释关闭类型检查</h4><p><strong>规则：</strong>arkts-strict-typing-required</p> <p><strong>级别：错误</strong></p> <p>在ArkTS中，类型检查不是可选项。不允许通过注释关闭类型检查，不支持使用@ts-ignore和@ts-nocheck。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>let s1: string | null = null; // 没有报错，合适的类型\\nlet s2: string = null; // 编译时报错</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 849,
        "pre": "// app.ets\\nexport class C {\\n  // ...\\n}\\n\\n// lib.ts\\nimport { C } from 'app'",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]允许.ets文件import.ets/.ts/.js文件源码, 不允许.ts/.js文件import.ets文件源码",
        "parent_text": "[h2]允许.ets文件import.ets/.ts/.js文件源码, 不允许.ts/.js文件import.ets文件源码规则：arkts-no-ts-deps 级别：错误 .ets文件可以import.ets/.ts/.js文件源码，但是.ts/.js文件不允许import.ets文件源码。 TypeScript  ArkTS // lib1.ets\\nexport class C {\\n  // ...\\n}\\n\\n// lib2.ets\\nimport { C } from 'lib1' ",
        "import_module": "import { obj } from 'something.json' assert { type: 'json' }",
        "parent": "<div class='\\\"section\\\"' id='\\\"允许ets文件importetstsjs文件源码-不允许tsjs文件importets文件源码\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E5%85%81%E8%AE%B8ets%E6%96%87%E4%BB%B6importetstsjs%E6%96%87%E4%BB%B6%E6%BA%90%E7%A0%81-%E4%B8%8D%E5%85%81%E8%AE%B8tsjs%E6%96%87%E4%BB%B6importets%E6%96%87%E4%BB%B6%E6%BA%90%E7%A0%81\\\"'></a><a name='\\\"%E5%85%81%E8%AE%B8ets%E6%96%87%E4%BB%B6importetstsjs%E6%96%87%E4%BB%B6%E6%BA%90%E7%A0%81-%E4%B8%8D%E5%85%81%E8%AE%B8tsjs%E6%96%87%E4%BB%B6importets%E6%96%87%E4%BB%B6%E6%BA%90%E7%A0%81\\\"'></a><h4>[h2]允许.ets文件import.ets/.ts/.js文件源码, 不允许.ts/.js文件import.ets文件源码</h4><p><strong>规则：</strong>arkts-no-ts-deps</p> <p><strong>级别：错误</strong></p> <p>.ets文件可以import.ets/.ts/.js文件源码，但是.ts/.js文件不允许import.ets文件源码。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>// lib1.ets\\nexport class C {\\n  // ...\\n}\\n\\n// lib2.ets\\nimport { C } from 'lib1'</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 850,
        "pre": "class C {\\n  s: string = ''\\n  n: number = 0\\n}\\n\\nimport foo from 'module1'",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]不支持在import语句前使用其他语句",
        "parent_text": "[h2]不支持在import语句前使用其他语句规则：arkts-no-misplaced-imports 级别：错误 在ArkTS中，除动态import语句外，所有import语句需要放在所有其他语句之前。 TypeScript  ArkTS import foo from 'module1'\\n\\nclass C {\\n  s: string = ''\\n  n: number = 0\\n}\\n\\nimport('module2').then(() => {}).catch(() => {})  // 动态import ",
        "import_module": "import { obj } from 'something.json' assert { type: 'json' }",
        "parent": "<div class='\\\"section\\\"' id='\\\"不支持在import语句前使用其他语句\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8import%E8%AF%AD%E5%8F%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96%E8%AF%AD%E5%8F%A5\\\"'></a><a name='\\\"%E4%B8%8D%E6%94%AF%E6%8C%81%E5%9C%A8import%E8%AF%AD%E5%8F%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96%E8%AF%AD%E5%8F%A5\\\"'></a><h4>[h2]不支持在import语句前使用其他语句</h4><p><strong>规则：</strong>arkts-no-misplaced-imports</p> <p><strong>级别：错误</strong></p> <p>在ArkTS中，除动态import语句外，所有import语句需要放在所有其他语句之前。</p> <p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>import foo from 'module1'\\n\\nclass C {\\n  s: string = ''\\n  n: number = 0\\n}\\n\\nimport('module2').then(() =&gt; {}).catch(() =&gt; {})  // 动态import</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 851,
        "pre": "// lib.d.ts\\ndeclare function foo(): any;\\ndeclare function bar(a: any): number;\\n\\n// main.ets\\nlet e0: ESObject = foo(); // 编译时错误：ESObject类型只能用于局部变量\\n\\nfunction f() {\\n  let e1 = foo();        // 编译时错误：e1的类型是any\\n  let e2: ESObject = 1;  // 编译时错误：不能用非动态值初始化ESObject类型变量\\n  let e3: ESObject = {}; // 编译时错误：不能用非动态值初始化ESObject类型变量\\n  let e4: ESObject = []; // 编译时错误：不能用非动态值初始化ESObject类型变量\\n  let e5: ESObject = ''; // 编译时错误：不能用非动态值初始化ESObject类型变量\\n  e5['prop'];            // 编译时错误：不能访问ESObject类型变量的属性\\n  e5[1];                 // 编译时错误：不能访问ESObject类型变量的属性\\n  e5.prop;               // 编译时错误：不能访问ESObject类型变量的属性\\n\\n  let e6: ESObject = foo(); // OK，显式标注ESObject类型\\n  let e7 = e6;              // OK，使用ESObject类型赋值\\n  bar(e7);                  // OK，ESObject类型变量传给跨语言调用的函数\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]限制使用ESObject类型",
        "parent_text": "[h2]限制使用ESObject类型规则：arkts-limited-esobj 级别：警告 为了防止动态对象（来自.ts/.js文件）在静态代码（.ets文件）中的滥用，ESObject类型在ArkTS中的使用是受限的。唯一允许使用ESObject类型的场景是将其用在局部变量的声明中。ESObject类型变量的赋值也是受限的，只能被来自跨语言调用的对象赋值，例如：ESObject、any、unknown、匿名类型等类型的变量。禁止使用静态类型的值（在.ets文件中定义的）初始化ESObject类型变量。ESObject类型变量只能用在跨语言调用的函数里或者赋值给另一个ESObject类型变量。 ArkTS  ",
        "import_module": "import { obj } from 'something.json' assert { type: 'json' }",
        "parent": "<div class='\\\"section\\\"' id='\\\"限制使用esobject类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413029__%E9%99%90%E5%88%B6%E4%BD%BF%E7%94%A8esobject%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E9%99%90%E5%88%B6%E4%BD%BF%E7%94%A8esobject%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]限制使用ESObject类型</h4><p><strong>规则：</strong>arkts-limited-esobj</p> <p><strong>级别：警告</strong></p> <p>为了防止动态对象（来自.ts/.js文件）在静态代码（.ets文件）中的滥用，ESObject类型在ArkTS中的使用是受限的。唯一允许使用ESObject类型的场景是将其用在局部变量的声明中。ESObject类型变量的赋值也是受限的，只能被来自跨语言调用的对象赋值，例如：ESObject、any、unknown、匿名类型等类型的变量。禁止使用静态类型的值（在.ets文件中定义的）初始化ESObject类型变量。ESObject类型变量只能用在跨语言调用的函数里或者赋值给另一个ESObject类型变量。</p> <p><strong>ArkTS</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/typescript-to-arkts-migration-guide.html"
    },
    {
        "id": 852,
        "pre": "import { LayeredDrawableDescriptor, DrawableDescriptor } from '@kit.ArkUI';\\nimport { hdsDrawable } from '@kit.UIDesignKit';\\nimport { image } from '@kit.ImageKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { resourceManager } from '@kit.LocalizationKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将图标处理的相关类添加至工程。 ",
        "import_module": null,
        "parent": "<li><span>将图标处理的相关类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ui-design-normal-process.html"
    },
    {
        "id": 853,
        "pre": "import { LayeredDrawableDescriptor, DrawableDescriptor } from '@kit.ArkUI';\\nimport { hdsDrawable } from '@kit.UIDesignKit';\\nimport { image } from '@kit.ImageKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { resourceManager } from '@kit.LocalizationKit';\\n\\n@Entry\\n@Component\\nstruct Index{\\n  bundleName: string = 'com.example.uidesignkit';\\n  resManager: resourceManager.ResourceManager | undefined = undefined;\\n  layeredDrawableDescriptor: LayeredDrawableDescriptor | undefined = undefined;\\n  drawableDescriptor: DrawableDescriptor | undefined = undefined;\\n  @State iconsResult: Array<hdsDrawable.ProcessedIcon> = [];\\n\\n  build() {\\n    Column() {\\n      Column() {\\n        Text('getHdsIcon')\\n          .fontWeight(FontWeight.Bold)\\n          .fontSize(16)\\n          .margin(5)\\n\\n        Image(this.getHdsIcon())\\n          .width(48)\\n          .height(48)\\n      }\\n      .margin(20)\\n\\n      Text('getHdsIcons')\\n        .fontWeight(FontWeight.Bold)\\n        .fontSize(16)\\n        .margin(5)\\n\\n      List() {\\n        ForEach(this.iconsResult,\\n          (item: hdsDrawable.ProcessedIcon, index?: number) => {\\n            ListItem() {\\n              Column() {\\n                Text(item.bundleName)\\n                  .fontWeight(FontWeight.Medium)\\n                  .fontSize(16)\\n                  .margin(5)\\n\\n                Image(item.pixelMap)\\n                  .width(48)\\n                  .height(48)\\n              }\\n              .margin(15)\\n            }\\n            .width('100%')\\n          }, (item: string) => item.toString())\\n      }\\n      .scrollBar(BarState.On)\\n      .height('60%')\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n\\n  aboutToAppear(): void {\\n    this.resManager = getContext().resourceManager;\\n    if (!this.resManager) {\\n      return;\\n    }\\n\\n    this.layeredDrawableDescriptor = (this.resManager.getDrawableDescriptor($r('app.media.drawable')\\n      .id)) as LayeredDrawableDescriptor;\\n\\n    this.drawableDescriptor =\\n      (this.resManager?.getDrawableDescriptor($r('app.media.normal_icon'))) as DrawableDescriptor;\\n\\n    this.getHdsIcons();\\n  }\\n\\n  private getHdsIcon(): image.PixelMap | null {\\n    try {\\n      return hdsDrawable.getHdsIcon(this.bundleName, this.drawableDescriptor?.getPixelMap(), 48,\\n        this.layeredDrawableDescriptor?.getMask().getPixelMap(), true);\\n    } catch (err) {\\n      let message = (err as BusinessError).message;\\n      let code = (err as BusinessError).code;\\n      console.error(`getHdsIcon failed, code: ${code}, message: ${message}`);\\n      return null;\\n    }\\n  }\\n\\n  getHdsIcons(): void {\\n    if (!this.drawableDescriptor) {\\n      console.error(`getHdsIcons drawableDescriptor is undefined.`);\\n      return;\\n    }\\n\\n    if (!this.layeredDrawableDescriptor) {\\n      console.error(`getHdsIcons layeredDrawableDescriptor is undefined.`);\\n      return;\\n    }\\n\\n    let options: hdsDrawable.Options = {\\n      size: 48,\\n      hasBorder: true,\\n      parallelNumber: 4\\n    };\\n\\n    let icons: Array<hdsDrawable.Icon> = [];\\n    for (let i = 0; i < 10; i++) {\\n      icons.push({\\n        bundleName: `${this.bundleName}-${i}`,\\n        pixelMap: this.drawableDescriptor.getPixelMap()\\n      })\\n    }\\n\\n    try {\\n      hdsDrawable.getHdsIcons(icons, this.layeredDrawableDescriptor.getMask().getPixelMap(), options)\\n        .then((data: Array<hdsDrawable.ProcessedIcon>) => {\\n          console.info(`getHdsIcons data size: ${data.length}`);\\n          this.iconsResult = data;\\n        })\\n        .catch((err: BusinessError) => {\\n          console.error(`getHdsIcons error, code: ${err.code}, msg: ${err.message}`);\\n        });\\n    } catch (err) {\\n      let message = (err as BusinessError).message;\\n      let code = (err as BusinessError).code;\\n      console.error(`getHdsIcons callback failed: ${message}, code: ${code}`);\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section048218555616\\\"'> <a name='\\\"section048218555616\\\"'></a><a name='\\\"section048218555616\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ui-design-normal-process.html"
    },
    {
        "id": 854,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-scale-to-replace-attr-animateto\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-scale-to-replace-attr-animateto.html"
    },
    {
        "id": 855,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State textScaleX: number = 1;\\n  @State textScaleY: number = 1;\\n  build() {\\n    Column() {\\n      Text()\\n        .backgroundColor(Color.Blue)\\n        .fontColor(Color.White)\\n        .fontSize(20)\\n        .width(10)\\n        .height(10)\\n        .scale({ x: this.textScaleX, y: this.textScaleY })\\n        .margin({ top: 100 })\\n      Button('图形变换属性')\\n        .backgroundColor(Color.Blue)\\n        .fontColor(Color.White)\\n        .fontSize(20)\\n        .margin({ top: 60 })\\n        .borderRadius(30)\\n        .padding(10)\\n        .onClick(() => {\\n          animateTo({ duration: 1000 }, () => {\\n            this.textScaleX = 10;\\n            this.textScaleY = 10;\\n          })\\n        })\\n    }\\n}\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-scale-to-replace-attr-animateto.html"
    },
    {
        "id": 856,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State textWidth: number = 10;\\n  @State textHeight: number = 10;\\n  build() {\\n    Column() {\\n      Text()\\n        .backgroundColor(Color.Blue)\\n        .fontColor(Color.White)\\n        .fontSize(20)\\n        .width(this.textWidth)\\n        .height(this.textHeight)\\n      Button('布局属性')\\n        .backgroundColor(Color.Blue)\\n        .fontColor(Color.White)\\n        .fontSize(20)\\n        .margin({ top: 30 })\\n        .borderRadius(30)\\n        .padding(10)\\n        .onClick(() => {\\n          animateTo({ duration: 1000 }, () => {\\n            this.textWidth = 100;\\n            this.textHeight = 100;\\n          })\\n        })\\n    }\\n}\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-scale-to-replace-attr-animateto.html"
    },
    {
        "id": 857,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unused-expressions\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unused-expressions.html"
    },
    {
        "id": 858,
        "pre": "export const v1 = Number.MAX_VALUE;\\n\\nif ('hello'.length === v1) {\\n  console.info('hello');\\n}\\n\\n{\\n  const v2 = '0';\\n  console.info(v2);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unused-expressions.html"
    },
    {
        "id": 859,
        "pre": "Number.MAX_VALUE;\\n\\nif ('0') '0';\\n\\n{'0';}",
        "type": "Import",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "Number.MAX_VALUE;\\n\\nif ('0') '0';\\n\\n{'0';}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unused-expressions.html"
    },
    {
        "id": 860,
        "pre": "import { hvigor } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8838152373217\\\"'><a name='\\\"section8838152373217\\\"'></a><a name='\\\"section8838152373217\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 861,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst rootNode = hvigor.getRootNode();",
        "type": "Reference",
        "function_call": "getRootNode(): HvigorNode",
        "function_name": "[h2]getRootNode4.3.0+",
        "parent_text": "[h2]getRootNode4.3.0+getRootNode(): HvigorNode 返回根项目的节点对象。 注意：在node初始化后才能使用，否则会报错。  返回值: 类型  说明    HvigorNode  hvigor根节点对象     示例：获取根节点对象。   ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section10705432367\\\"'><a name='\\\"section10705432367\\\"'></a><a name='\\\"section10705432367\\\"'></a><h4>[h2]getRootNode<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p106225358610\\\"'>getRootNode(): HvigorNode</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1762253520619\\\"'>返回根项目的节点对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p162517612612\\\"'>注意：在node初始化后才能使用，否则会报错。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p66221635665\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1062283512613\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table196226358619\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row56226356611\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.7.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p186221435468\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.6.7.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p562218352612\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1462213354618\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p96225355610\\\"'>HvigorNode</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1362212359614\\\"'>hvigor根节点对象</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p19622113515615\\\"'>示例：获取根节点对象。</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808116__p46221435164\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 862,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst allNodes = hvigor.getAllNodes();",
        "type": "Reference",
        "function_call": "getAllNodes(): HvigorNode",
        "function_name": "[h2]getAllNodes4.3.0+",
        "parent_text": "[h2]getAllNodes4.3.0+getAllNodes(): HvigorNode[] 返回所有节点的数组。 注意：在node初始化后才能使用，否则会报错。  返回值: 类型  说明    HvigorNode[]  hvigor所有节点对象的数组     示例：获取所有节点对象的数组。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section16393827185\\\"'><a name='\\\"section16393827185\\\"'></a><a name='\\\"section16393827185\\\"'></a><h4>[h2]getAllNodes<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5393627186\\\"'>getAllNodes(): HvigorNode[]</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p123931827287\\\"'>返回所有节点的数组。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p03937275816\\\"'>注意：在node初始化后才能使用，否则会报错。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p129011548865\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p173935271584\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table123931827189\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1539320271819\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.7.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p193934271482\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.7.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p3393327583\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row183936278818\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p163939271089\\\"'>HvigorNode[]</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1839316275816\\\"'>hvigor所有节点对象的数组</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p113939271788\\\"'>示例：获取所有节点对象的数组。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 863,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst entryNode = hvigor.getNodeByName('entry');",
        "type": "Reference",
        "function_call": "getNodeByName(nodeName: string): HvigorNode",
        "function_name": "[h2]getNodeByName4.3.0+",
        "parent_text": "[h2]getNodeByName4.3.0+getNodeByName(nodeName: string): HvigorNode | undefined 根据节点名称获取节点对象。 注意：在node初始化后才能使用，否则会报错。  参数: 参数名  类型  必填  说明    nodeName  string  是  节点的名称     返回值: 类型  说明    HvigorNode | undefined  根据名称找到的节点对象，如果不存在则返回undefined     示例：通过节点名称获取节点对象。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section83524914102\\\"'><a name='\\\"section83524914102\\\"'></a><a name='\\\"section83524914102\\\"'></a><h4>[h2]getNodeByName<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1335212941012\\\"'>getNodeByName(nodeName: string): HvigorNode | undefined</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p63521197106\\\"'>根据节点名称获取节点对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p156821826191614\\\"'>注意：在node初始化后才能使用，否则会报错。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1134713613\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p524916254165\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table8249192513165\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row12496255169\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.7.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p12249142510168\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.7.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p92495251161\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.7.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p72491625131616\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.7.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1224932561610\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row18249102517165\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1624916256162\\\"'>nodeName</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1024922516165\\\"'>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p19249925181620\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p165307202313\\\"'>节点的名称</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p19352129161013\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table5352149171017\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row635213941017\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.9.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1235219915109\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.9.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p135269191016\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1635213981013\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p23521294108\\\"'>HvigorNode | undefined</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1935220920107\\\"'>根据名称找到的节点对象，如果不存在则返回undefined</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p935217919104\\\"'>示例：通过节点名称获取节点对象。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 864,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst hvigorConfig = hvigor.getHvigorConfig();",
        "type": "Reference",
        "function_call": "getHvigorConfig(): HvigorConfig",
        "function_name": "[h2]getHvigorConfig4.3.0+",
        "parent_text": "[h2]getHvigorConfig4.3.0+getHvigorConfig(): HvigorConfig 返回HvigorConfig对象。  返回值: 类型  说明    HvigorConfig  HvigorConfig对象     示例：获取当前HvigorConfig对象。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section33001992354\\\"'><a name='\\\"section33001992354\\\"'></a><a name='\\\"section33001992354\\\"'></a><h4>[h2]getHvigorConfig<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p230099123520\\\"'>getHvigorConfig(): HvigorConfig</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p19300169193511\\\"'>返回HvigorConfig对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p13001913358\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1930020912351\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table113004913518\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row53001592354\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.9.6.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p133000953519\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.9.6.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p430018910359\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row16300696353\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p530039113512\\\"'>HvigorConfig</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p930016912358\\\"'>HvigorConfig对象</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p113008911358\\\"'>示例：获取当前HvigorConfig对象。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 865,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst parameter = hvigor.getParameter();",
        "type": "Reference",
        "function_call": "getParameter(): Parameter",
        "function_name": "[h2]getParameter4.3.0+",
        "parent_text": "[h2]getParameter4.3.0+getParameter(): Parameter 返回Parameter对象。  返回值: 类型  说明    Parameter  Parameter对象     示例：获取当前Parameter对象。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1349018305379\\\"'><a name='\\\"section1349018305379\\\"'></a><a name='\\\"section1349018305379\\\"'></a><h4>[h2]getParameter<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p11490123073713\\\"'>getParameter(): Parameter</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1149020305379\\\"'>返回Parameter对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p12490143093714\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p149016304375\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table104901730153713\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row184901830203710\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.10.6.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p7490173010372\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.10.6.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p549010307378\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row449013309373\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p163951558386\\\"'>Parameter</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p2490143033716\\\"'>Parameter对象</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p8490193043711\\\"'>示例：获取当前Parameter对象。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 866,
        "pre": "// hvigorconfig.ts文件\\nimport { hvigor } from '@ohos/hvigor'\\nhvigor.configEvaluated(hvigorConfig => {\\n    console.log('configEvaluated');\\n})",
        "type": "Reference",
        "function_call": "configEvaluated(fn: (HvigorConfig)",
        "function_name": "[h2]configEvaluated4.3.0+",
        "parent_text": "[h2]configEvaluated4.3.0+configEvaluated(fn: (HvigorConfig) => {}): void 添加一个config文件评估完成的回调函数。  参数: 参数名  类型  必填  说明    fn  (HvigorConfig) => {}  是  一个入参为空或者为hvigorConfig的方法      此API写在hvigorconfig.ts文件中才会生效，在构建生命周期的初始化阶段被执行。  示例：注册configEvaluated hook。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section131538444401\\\"'><a name='\\\"section131538444401\\\"'></a><a name='\\\"section131538444401\\\"'></a><h4>[h2]configEvaluated<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1915314444019\\\"'>configEvaluated(fn: (HvigorConfig) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p14153644204017\\\"'>添加一个config文件评估完成的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p101532442406\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p3153164419401\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table415384415401\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row6153544174016\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p14153144104012\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p17154194434011\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p51541446401\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.11.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p6154164413404\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1154104424017\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5154644134012\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p015416446400\\\"'>(HvigorConfig) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p14154544134014\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1154344164018\\\"'>一个入参为空或者为hvigorConfig的方法</p> </td> </tr> </tbody></table> </div> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__note109001114488\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180503.55727735695092486346134914214389:50001231000000:2800:523C9B5233FFF13424229E7C6682CE2675EA4211D92E97264B6DD313D761F158.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1190019174812\\\"'>此API写在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-life-cycle#section810245135914\\\"'>hvigorconfig.ts文件</a>中才会生效，在构建生命周期的初始化阶段被执行。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p18154164454010\\\"'>示例：注册configEvaluated hook。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 867,
        "pre": "// hvigorconfig.ts文件\\nimport { hvigor } from '@ohos/hvigor';\\nhvigor.beforeNodeEvaluate(hvigorNode => {\\n    console.log('beforeNodeEvaluate');\\n})",
        "type": "Reference",
        "function_call": "beforeNodeEvaluate(fn: (HvigorNode)",
        "function_name": "[h2]beforeNodeEvaluate4.3.0+",
        "parent_text": "[h2]beforeNodeEvaluate4.3.0+beforeNodeEvaluate(fn: (HvigorNode) => {}): void 为所有的node添加一个node评估前的回调函数。  参数: 参数名  类型  必填  说明    fn  (HvigorNode) => {}  是  一个入参为空或者为HvigorNode的方法      此API写在hvigorconfig.ts文件中才会生效，在构建生命周期的初始化阶段被执行。  示例：注册beforeNodeEvaluate hook。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1171615186492\\\"'><a name='\\\"section1171615186492\\\"'></a><a name='\\\"section1171615186492\\\"'></a><h4>[h2]beforeNodeEvaluate<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1671611812497\\\"'>beforeNodeEvaluate(fn: (HvigorNode) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1924642214515\\\"'>为所有的node添加一个node评估前的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p127168186494\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p2716121814912\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table2716118134910\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1271681824917\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p771691804913\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p8716018194920\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p17716121810497\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p18716518154914\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1671631874918\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p16716118134916\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p171620183495\\\"'>(HvigorNode) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1171617181493\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p371671894919\\\"'>一个入参为空或者为HvigorNode的方法</p> </td> </tr> </tbody></table> </div> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__note154291484487\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180503.02632404405805697891713697015918:50001231000000:2800:9A97E470C38DB17AB1AEAA62A47D871364DFCAE2C00916A59FB83E1FD9545658.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p134294814812\\\"'>此API写在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-life-cycle#section810245135914\\\"'>hvigorconfig.ts文件</a>中才会生效，在构建生命周期的初始化阶段被执行。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p17716718174914\\\"'>示例：注册beforeNodeEvaluate hook。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 868,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nhvigor.afterNodeEvaluate(hvigorNode => {\\n    console.log('afterNodeEvaluate');\\n})",
        "type": "Reference",
        "function_call": "afterNodeEvaluate(fn: (HvigorNode)",
        "function_name": "[h2]afterNodeEvaluate4.3.0+",
        "parent_text": "[h2]afterNodeEvaluate4.3.0+afterNodeEvaluate(fn: (HvigorNode) => {}): void 为所有的node添加一个node评估后的回调函数。  参数: 参数名  类型  必填  说明    fn  (HvigorNode) => {}  是  一个入参为空或者为HvigorNode的方法     示例：注册afterNodeEvaluate hook。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section6699172825214\\\"'><a name='\\\"section6699172825214\\\"'></a><a name='\\\"section6699172825214\\\"'></a><h4>[h2]afterNodeEvaluate<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p269932820522\\\"'>afterNodeEvaluate(fn: (HvigorNode) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p16699142818522\\\"'>为所有的node添加一个node评估后的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p169992885216\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p14699192805216\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table10699928165216\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row15700828145217\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1870019280522\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1870018282524\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p87002028145217\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p8700132812522\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1170010281524\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p970012815214\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p970052825215\\\"'>(HvigorNode) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p137001285527\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p16700428175220\\\"'>一个入参为空或者为HvigorNode的方法</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p4700152812522\\\"'>示例：注册afterNodeEvaluate hook。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 869,
        "pre": "// hvigorconfig.ts文件\\nimport { hvigor } from '@ohos/hvigor';\\nhvigor.nodesInitialized(() => {\\n    console.log('nodesInitialized');\\n})",
        "type": "Reference",
        "function_call": "nodesInitialized(fn: (Hvigor)",
        "function_name": "[h2]nodesInitialized4.3.0+",
        "parent_text": "[h2]nodesInitialized4.3.0+nodesInitialized(fn: (Hvigor) => {}): void 添加一个node初始化完成的回调函数。  参数: 参数名  类型  必填  说明    fn  (HvigorNode) => {}  是  一个入参为空或者为Hvigor对象的方法      此API写在hvigorconfig.ts文件中才会生效，在构建生命周期的初始化阶段被执行。  示例：注册nodesInitialized hook。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section98468025419\\\"'><a name='\\\"section98468025419\\\"'></a><a name='\\\"section98468025419\\\"'></a><h4>[h2]nodesInitialized<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p2846170195415\\\"'>nodesInitialized(fn: (Hvigor) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p584613017540\\\"'>添加一个node初始化完成的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1984600105414\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p15846205543\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table13846901543\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row6846120175411\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p14846506545\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p0846190105412\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1984612025416\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.14.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1684616085410\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row2847101542\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p148472005547\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p12847190165418\\\"'>(HvigorNode) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p18847190145419\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p168473013542\\\"'>一个入参为空或者为Hvigor对象的方法</p> </td> </tr> </tbody></table> </div> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__note11491101354815\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180503.38487802270297577012350911371150:50001231000000:2800:EB59ACAD2EC82895F3E6DD64488FB90767807F5CEBC997ADA0AA7432FA0F4007.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p114911513164814\\\"'>此API写在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-life-cycle#section810245135914\\\"'>hvigorconfig.ts文件</a>中才会生效，在构建生命周期的初始化阶段被执行。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p88471402549\\\"'>示例：注册nodesInitialized hook。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 870,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nimport { OhosHapContext, OhosPluginId } from \\\"@ohos/hvigor-ohos-plugin\\\";\\nhvigor.nodesEvaluated(() => {\\n  // 等待全部节点加载完成之后获取子节点信息\\n  hvigor.getRootNode().subNodes(subNode => {\\n    const hapContext = subNode.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\\n  });\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在Hvigor中，工程节点插件加载要优先于模块节点插件加载顺序，若想实现在工程节点查找子节点注册task的上下文信息，则需要使用此接口，等待全部节点加载完成之后去执行。 ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p1054245512166\\\"'>在Hvigor中，工程节点插件加载要优先于模块节点插件加载顺序，若想实现在工程节点查找子节点注册task的上下文信息，则需要使用此接口，等待全部节点加载完成之后去执行。 </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 871,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nhvigor.taskGraphResolved(() => {\\n    console.log('taskGraphResolved');\\n});",
        "type": "Reference",
        "function_call": "taskGraphResolved(fn: (Hvigor)",
        "function_name": "[h2]taskGraphResolved4.3.0+",
        "parent_text": "[h2]taskGraphResolved4.3.0+taskGraphResolved(fn: (Hvigor) => {}): void 添加一个任务图解析完毕的回调函数。  参数: 参数名  类型  必填  说明    fn  (Hvigor) => {}  是  一个入参为空或者为Hvigor对象的方法     示例：添加一个任务图解析完毕的回调函数。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section2557310417\\\"'><a name='\\\"section2557310417\\\"'></a><a name='\\\"section2557310417\\\"'></a><h4>[h2]taskGraphResolved<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5558110311\\\"'>taskGraphResolved(fn: (Hvigor) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p155821012118\\\"'>添加一个任务图解析完毕的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1755818103118\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p125587101915\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table35581810912\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row255819101211\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.16.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p855891015113\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.16.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1055801014117\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.16.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5558710716\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.16.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p855812101114\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row115581310516\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p17558191018117\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p205587101818\\\"'>(Hvigor) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1558910913\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1555811017112\\\"'>一个入参为空或者为Hvigor对象的方法</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p20558161013114\\\"'>示例：添加一个任务图解析完毕的回调函数。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 872,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nhvigor.buildFinished(buildResult => {\\n  if (buildResult.getError()) {\\n    console.log(buildResult.getError().stack);\\n  }\\n})",
        "type": "Reference",
        "function_call": "buildFinished(fn: (BuildResult)",
        "function_name": "[h2]buildFinished4.3.0+",
        "parent_text": "[h2]buildFinished4.3.0+buildFinished(fn: (BuildResult) => {}): void 添加一个任务图解析完毕的回调函数。  参数: 参数名  类型  必填  说明    fn  (BuildResult) => {}  是  一个入参为空或者为BuildResult对象的方法     示例：获取构建结束的信息，如果是异常结束则打印出信息。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1596051018417\\\"'><a name='\\\"section1596051018417\\\"'></a><a name='\\\"section1596051018417\\\"'></a><h4>[h2]buildFinished<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1996091012417\\\"'>buildFinished(fn: (BuildResult) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p996018106415\\\"'>添加一个任务图解析完毕的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p119608104413\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p6960141010414\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1396081012410\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row39616104410\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p14961510542\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p0961191011420\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p15961141016416\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.17.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1396111101349\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1196110104419\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p59619102411\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p99615101546\\\"'>(BuildResult) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p17961810343\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p179617101446\\\"'>一个入参为空或者为BuildResult对象的方法</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p39611110047\\\"'>示例：获取构建结束的信息，如果是异常结束则打印出信息。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 873,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconsole.log(hvigor.getCommandEntryTask());",
        "type": "Reference",
        "function_call": "getCommandEntryTask(): string",
        "function_name": "[h2]getCommandEntryTask4.3.0+",
        "parent_text": "[h2]getCommandEntryTask4.3.0+getCommandEntryTask(): string[] | undefined 获取构建的入口任务名字符串数组。  返回值: 类型  说明    string[]  构建的入口任务名字符串数组     示例：获取入口任务并打印出来。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section84242071619\\\"'><a name='\\\"section84242071619\\\"'></a><a name='\\\"section84242071619\\\"'></a><h4>[h2]getCommandEntryTask<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1842418718620\\\"'>getCommandEntryTask(): string[] | undefined</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p17424197868\\\"'>获取构建的入口任务名字符串数组。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p17823241710\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p128031218714\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1980411211974\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1680410211715\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.6.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p8804821277\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.18.6.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p38046211677\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1680415212713\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p69711247151019\\\"'>string[]</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1180419217719\\\"'>构建的入口任务名字符串数组</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p44241970612\\\"'>示例：获取入口任务并打印出来。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 874,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconsole.log(hvigor.isCommandEntryTask('assembleHap'));",
        "type": "Reference",
        "function_call": "isCommandEntryTask(taskName: string): boolean",
        "function_name": "[h2]isCommandEntryTask4.3.0+",
        "parent_text": "[h2]isCommandEntryTask4.3.0+isCommandEntryTask(taskName: string): boolean 判断是否是命令入口任务。  返回值: 类型  说明    boolean  是否是入口任务     示例：判断是否是assembleHap任务并打印出来。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section94233439916\\\"'><a name='\\\"section94233439916\\\"'></a><a name='\\\"section94233439916\\\"'></a><h4>[h2]isCommandEntryTask<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p22563813105\\\"'>isCommandEntryTask(taskName: string): boolean</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p14423194315920\\\"'>判断是否是命令入口任务。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p24243431696\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1742494318920\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table14424184318910\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row134245431493\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.6.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p144242431995\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.19.6.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p74243432917\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row194241643793\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p84243431911\\\"'>boolean</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1842494320913\\\"'>是否是入口任务</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p154247431098\\\"'>示例：判断是否是assembleHap任务并打印出来。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 875,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nhvigor.buildFinished(buildResult => {\\n  if (buildResult.getError()) {\\n    console.log(buildResult.getError().stack);\\n  }\\n})",
        "type": "Reference",
        "function_call": "getError(): Error",
        "function_name": "[h2]getError4.3.0+",
        "parent_text": "[h2]getError4.3.0+getError(): Error | null 获取异常信息。没有异常则返回null。 返回值: 类型  说明    Error | null  异常信息。没有异常则为null。     示例：获取构建结束的信息，如果是异常结束则打印出信息。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1188104310481\\\"'><a name='\\\"section1188104310481\\\"'></a><a name='\\\"section1188104310481\\\"'></a><h4>[h2]getError<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p378943615489\\\"'>getError(): Error | null</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p10789336164814\\\"'>获取异常信息。没有异常则返回null。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p207891236134816\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table127892362488\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row15789163611481\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.21.5.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1378914364481\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.21.5.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p77891836134818\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1178953614818\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p7790163674815\\\"'>Error | null</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p19790173624818\\\"'>异常信息。没有异常则为null。</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p9400151671418\\\"'>示例：获取构建结束的信息，如果是异常结束则打印出信息。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 876,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst rootNodeDescriptor = hvigor.getHvigorConfig().getRootNodeDescriptor();",
        "type": "Reference",
        "function_call": "getRootNodeDescriptor(): HvigorNodeDescriptor",
        "function_name": "[h2]getRootNodeDescriptor4.3.0+",
        "parent_text": "[h2]getRootNodeDescriptor4.3.0+getRootNodeDescriptor(): HvigorNodeDescriptor 获取RootNode的描述对象。 返回值: 类型  说明    HvigorNodeDescriptor  根节点的节点描述对象     示例：获取构建的所有节点描述对象。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1651815560203\\\"'><a name='\\\"section1651815560203\\\"'></a><a name='\\\"section1651815560203\\\"'></a><h4>[h2]getRootNodeDescriptor<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p951813562204\\\"'>getRootNodeDescriptor(): HvigorNodeDescriptor</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p2028123192112\\\"'>获取RootNode的描述对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p570233952115\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table3702339182113\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row187021039152116\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.5.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p19702339202114\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.26.5.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p137025396213\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row270293911216\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p9955244152119\\\"'>HvigorNodeDescriptor</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p143310546218\\\"'>根节点的节点描述对象</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p5519125612203\\\"'>示例：获取构建的所有节点描述对象。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 877,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst allNodeDescriptors = hvigor.getHvigorConfig().getAllNodeDescriptor();",
        "type": "Reference",
        "function_call": "getAllNodeDescriptor(): HvigorNodeDescriptor",
        "function_name": "[h2]getAllNodeDescriptor4.3.0+",
        "parent_text": "[h2]getAllNodeDescriptor4.3.0+getAllNodeDescriptor(): HvigorNodeDescriptor[] 获取所有的node描述对象的数组。 返回值: 类型  说明    HvigorNodeDescriptor[]  所有节点的节点描述对象     示例：获取构建结束的信息，如果是异常结束则打印出信息。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1550612249242\\\"'><a name='\\\"section1550612249242\\\"'></a><a name='\\\"section1550612249242\\\"'></a><h4>[h2]getAllNodeDescriptor<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p16506124192412\\\"'>getAllNodeDescriptor(): HvigorNodeDescriptor[]</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p731815619240\\\"'>获取所有的node描述对象的数组。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1250672416246\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1350712242242\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row16507524152419\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.27.5.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p0507124172416\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.27.5.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5507324102419\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1250722432411\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1050712419243\\\"'>HvigorNodeDescriptor[]</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p950752410248\\\"'>所有节点的节点描述对象</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p1250742412246\\\"'>示例：获取构建结束的信息，如果是异常结束则打印出信息。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 878,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst entryNodeDescriptors = hvigor.getHvigorConfig().getNodeDescriptorByName('entry');",
        "type": "Reference",
        "function_call": "getNodeDescriptorByName(name: string): HvigorNodeDescriptor",
        "function_name": "[h2]getNodeDescriptorByName4.3.0+",
        "parent_text": "[h2]getNodeDescriptorByName4.3.0+getNodeDescriptorByName(name: string): HvigorNodeDescriptor 根据节点名称获取node描述对象。 参数: 参数名  类型  必填  说明    name  string  是  根据此name查找NodeDescriptor     返回值: 类型  说明    HvigorNodeDescriptor  根据名称获取的节点描述对象     示例：获取构建结束的信息，如果是异常结束则打印出信息。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section19119133922514\\\"'><a name='\\\"section19119133922514\\\"'></a><a name='\\\"section19119133922514\\\"'></a><h4>[h2]getNodeDescriptorByName<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p611933922516\\\"'>getNodeDescriptorByName(name: string): HvigorNodeDescriptor</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1311993914255\\\"'>根据节点名称获取node描述对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p14872113519313\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table188725359311\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row387212351318\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.28.5.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p2872103543110\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.28.5.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1887311358317\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.28.5.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1187313358315\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.28.5.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p15873123513113\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row78731335103117\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1287315354317\\\"'>name</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p138731835153115\\\"'>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p28731935133116\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p112200173211\\\"'>根据此name查找NodeDescriptor</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p11197393254\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table19119163916253\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1119193915254\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.28.7.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p8119103915252\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.28.7.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p171196393255\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row17119123992517\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1811918392257\\\"'>HvigorNodeDescriptor</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p012043914257\\\"'>根据名称获取的节点描述对象</p> </td> </tr> </tbody></table> </div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p1512017395256\\\"'>示例：获取构建结束的信息，如果是异常结束则打印出信息。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 879,
        "pre": "// hvigorconfig.ts文件\\nimport { hvigor } from '@ohos/hvigor';\\n\\nconst hvigorConfig = hvigor.getHvigorConfig();\\nhvigorConfig.includeNode('exampleNodeName', './exampleNodeName');",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "示例1：添加一个名为exampleNodeName且无额外信息的node。 ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p1858912812714\\\"'>示例1：添加一个名为exampleNodeName且无额外信息的node。 </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 880,
        "pre": "// hvigorconfig.ts文件\\nimport { hvigor } from '@ohos/hvigor';\\n\\nconst hvigorConfig = hvigor.getHvigorConfig();\\nhvigorConfig.excludeNodeByName('exampleNodeName');",
        "type": "Reference",
        "function_call": "excludeNodeByName(name: string): void",
        "function_name": "[h2]excludeNodeByName5.4.0+",
        "parent_text": "[h2]excludeNodeByName5.4.0+excludeNodeByName(name: string): void 通过name排除一个Node。 参数: 参数名  类型  必填  说明    name  string  是  要排除的node的name     返回值: 无  此API写在hvigorconfig.ts文件中才会生效，在构建生命周期的初始化阶段被执行。  示例：排除名为exampleNodeName的Node。  ",
        "import_module": "import { hvigor } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section14183309272\\\"'><a name='\\\"section14183309272\\\"'></a><a name='\\\"section14183309272\\\"'></a><h4>[h2]excludeNodeByName<sup>5.4.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p19419203092710\\\"'>excludeNodeByName(name: string): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p64199300277\\\"'>通过name排除一个Node。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p01251644114315\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table111256444439\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row16126844114314\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.30.5.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1912619445430\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.30.5.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p121266449431\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.30.5.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1112634494318\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.30.5.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p10126344184316\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row7126114434316\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.8%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1712664410434\\\"'>name</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.98%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p71261144194316\\\"'>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p0126744104315\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p012664474318\\\"'>要排除的node的name</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p7419143012712\\\"'>返回值: 无</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__note9319921175112\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180504.74331738631892146382521350349108:50001231000000:2800:5C6DC52F6A79FD25252463CEB4B47CEDF5E6D86CEA299D883D70E8EFBE06987A.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p14319621145115\\\"'>此API写在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-life-cycle#section810245135914\\\"'>hvigorconfig.ts文件</a>中才会生效，在构建生命周期的初始化阶段被执行。</p> </div></div> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__p7419130192716\\\"'>示例：排除名为exampleNodeName的Node。 </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 881,
        "pre": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "hvigor-config.json5配置文件：在\\\"properties\\\"属性中定义的配置项 ",
        "import_module": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "parent": "<li id='\\\"li1467637193617\\\"'>hvigor-config.json5配置文件：在\\\"properties\\\"属性中定义的配置项 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 882,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst properties = hvigor.getParameter().getProperties();\\nconsole.log(properties['key']);",
        "type": "Reference",
        "function_call": "getProperties(): Properties",
        "function_name": "[h2]getProperties4.1.2+",
        "parent_text": "[h2]getProperties4.1.2+getProperties(): Properties 获取properties所有配置的对象。  返回值: 类型  说明    Properties  Properties配置对象     示例： 在hvigorfile.ts中添加代码  执行命令hvigorw --sync -c properties.key=hello，控制台打印： hello ",
        "import_module": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section96777723618\\\"'><a name='\\\"section96777723618\\\"'></a><a name='\\\"section96777723618\\\"'></a><h4>[h2]getProperties<sup>4.1.2+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p196778723616\\\"'>getProperties(): Properties</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p2677137163610\\\"'>获取properties所有配置的对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1767716718361\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p567715719362\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1767767173617\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row967719718365\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.34.6.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"33.879999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p196778712364\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.34.6.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"66.12%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p2678207173614\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1867820712361\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.879999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p0678167143611\\\"'>Properties</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"66.12%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p17678107203612\\\"'>Properties配置对象</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p167819717364\\\"'>示例：</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p96783773619\\\"'>在hvigorfile.ts中添加代码</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1267887193619\\\"'>执行命令hvigorw --sync -c properties.key=hello，控制台打印：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__screen18678477362\\\"'>hello</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 883,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst extParam = hvigor.getParameter().getExtParam('key');\\nconsole.log(extParam);",
        "type": "Reference",
        "function_call": "getExtParam(key: string): string",
        "function_name": "[h2]getExtParam4.1.2+",
        "parent_text": "[h2]getExtParam4.1.2+getExtParam(key: string): string | undefined 获取指定key值的-p扩展参数value值，若不存在配置时返回undefined。  参数: 参数名  类型  必填  说明    key  string  是  命令行参数-p配置中的key     返回值: 类型  说明    string | undefined  指定key值对应的-p参数对应的value，配置不存在时undefined     示例：  执行命令hvigorw --sync -p key=hello，控制台打印： hello ",
        "import_module": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section20678117183613\\\"'><a name='\\\"section20678117183613\\\"'></a><a name='\\\"section20678117183613\\\"'></a><h4>[h2]getExtParam<sup>4.1.2+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p166782717360\\\"'>getExtParam(key: string): string | undefined</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p7678127103610\\\"'>获取指定key值的-p扩展参数value值，若不存在配置时返回undefined。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p13678472367\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p8678679361\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table967813713361\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row176782715366\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.35.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p36780712364\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.35.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1767818714369\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.35.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p2678177173616\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.35.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1867811783615\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row16783715361\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p10678117113615\\\"'>key</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p06782723611\\\"'>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p76786753611\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p767816763615\\\"'>命令行参数-p配置中的key</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p3678172369\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table66781473366\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1767816720368\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.35.8.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p6678177173613\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.35.8.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p26786716363\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row106781875364\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p36781276362\\\"'>string | undefined</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1167813714360\\\"'>指定key值对应的-p参数对应的value，配置不存在时undefined</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p166782763613\\\"'>示例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808116__p186786783612\\\"'>执行命令hvigorw --sync -p key=hello，控制台打印：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__screen1667813723616\\\"'>hello</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 884,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst extParams = hvigor.getParameter().getExtParams();\\nconsole.log(extParams['key']);",
        "type": "Reference",
        "function_call": "getExtParams(): Record",
        "function_name": "[h2]getExtParams4.1.2+",
        "parent_text": "[h2]getExtParams4.1.2+getExtParams(): Record<string, string> 获取全部的-p扩展参数对象。  返回值: 类型  说明    Record<string, string>  命令行中所有配置的-p参数集合对象     示例：  执行命令hvigorw --sync -p key=hello，控制台打印： hello ",
        "import_module": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section76782073362\\\"'><a name='\\\"section76782073362\\\"'></a><a name='\\\"section76782073362\\\"'></a><h4>[h2]getExtParams<sup>4.1.2+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p667810723619\\\"'>getExtParams(): Record&lt;string, string&gt;</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p166782710366\\\"'>获取全部的-p扩展参数对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p15678071366\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1667817763611\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table14678137123614\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row11678117163613\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.36.6.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p867918718366\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.36.6.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p6679970365\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row467914703610\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p867947123617\\\"'>Record&lt;string, string&gt;</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p106792718364\\\"'>命令行中所有配置的-p参数集合对象</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p867916743610\\\"'>示例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808116__p116799743613\\\"'>执行命令hvigorw --sync -p key=hello，控制台打印：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__screen19679117143617\\\"'>hello</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 885,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst startParams = hvigor.getParameter().getStartParams();\\nconsole.log(startParams ['daemon']);\\nconsole.log(startParams ['logLevel']);",
        "type": "Reference",
        "function_call": "getStartParams(): StartParam",
        "function_name": "[h2]getStartParams4.1.2+",
        "parent_text": "[h2]getStartParams4.1.2+getStartParams(): StartParam 获取hvigor启动参数：例如daemon开关，并行功能开关，增量功能开关，日志级别等。  返回值: 类型  属性  说明    StartParams  daemon: boolean  守护进程启用状态，true开启（默认开启）、false关闭   StartParams  parallel: boolean  并行编译能力启用状态，true开启（默认开启）、false关闭   StartParams  incremental: boolean  增量编译能力启用状态，true开启（默认开启）、false关闭   StartParams  logLevel: string  当前日志级别，info、debug、warn、error等   StartParams  typeCheck: boolean  hvigorfile.ts的类型检查，true开启、false关闭（默认关闭）     示例：  执行命令hvigorw --sync，控制台打印： true\\ninfo ",
        "import_module": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1967917712367\\\"'><a name='\\\"section1967917712367\\\"'></a><a name='\\\"section1967917712367\\\"'></a><h4>[h2]getStartParams<sup>4.1.2+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1267919753611\\\"'>getStartParams(): StartParam</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1867912753619\\\"'>获取hvigor启动参数：例如daemon开关，并行功能开关，增量功能开关，日志级别等。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p16791974364\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p167917714360\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table56798793613\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row367911716368\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.37.6.1.4.1.1\\\"' valign='\\\"top\\\"' width='\\\"22.58%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p367916773610\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.37.6.1.4.1.2\\\"' valign='\\\"top\\\"' width='\\\"22.31%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1567917123610\\\"'>属性</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.37.6.1.4.1.3\\\"' valign='\\\"top\\\"' width='\\\"55.11000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p767912716363\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row166790753615\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.58%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p767912753615\\\"'>StartParams</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.31%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p8679973361\\\"'>daemon: boolean</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"55.11000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p146799719365\\\"'>守护进程启用状态，true开启（默认开启）、false关闭</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808116__row4679177193618\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.58%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p156791773368\\\"'>StartParams</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.31%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1367914719366\\\"'>parallel: boolean</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"55.11000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p267915719368\\\"'>并行编译能力启用状态，true开启（默认开启）、false关闭</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1167911711366\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.58%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p116791276364\\\"'>StartParams</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.31%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1667912783611\\\"'>incremental: boolean</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"55.11000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p2679147153611\\\"'>增量编译能力启用状态，true开启（默认开启）、false关闭</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1667967143615\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.58%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p186791076361\\\"'>StartParams</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.31%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p16679107113615\\\"'>logLevel: string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"55.11000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p166797718365\\\"'>当前日志级别，info、debug、warn、error等</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1267915723615\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.58%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p267918733611\\\"'>StartParams</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"22.31%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p4679147103610\\\"'>typeCheck: boolean</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"55.11000000000001%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p8679277367\\\"'>hvigorfile.ts的类型检查，true开启、false关闭（默认关闭）</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p26791793612\\\"'>示例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1068019710362\\\"'>执行命令hvigorw --sync，控制台打印：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__screen106804733613\\\"'>true\\ninfo</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 886,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nconst workspaceDir = hvigor.getParameter().getWorkspaceDir();\\nconsole.log(workspaceDir);",
        "type": "Reference",
        "function_call": "getWorkspaceDir(): string",
        "function_name": "[h2]getWorkspaceDir4.1.2+",
        "parent_text": "[h2]getWorkspaceDir4.1.2+getWorkspaceDir(): string 获取hvigor工作空间路径。工作空间是指当前工程对应的hvigor插件安装在磁盘的位置。  示例：  执行命令hvigorw --sync，控制台打印当前工程hvigor安装的工作路径： // windows\\nC:\\\\Users\\\\UserName\\\\.hvigor\\\\project_caches\\\\2b85daa9f175d1d9761799fed7e5bb40\\\\workspace\\n// linux \\n/Users/UserName/.hvigor/project_caches/2b85daa9f175d1d9761799fed7e5bb40/workspace ",
        "import_module": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section96802733618\\\"'><a name='\\\"section96802733618\\\"'></a><a name='\\\"section96802733618\\\"'></a><h4>[h2]getWorkspaceDir<sup>4.1.2+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5680107163613\\\"'>getWorkspaceDir(): string</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p668016793610\\\"'>获取hvigor工作空间路径。工作空间是指当前工程对应的hvigor插件安装在磁盘的位置。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1680147103610\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p268012753612\\\"'>示例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1068047163613\\\"'>执行命令hvigorw --sync，控制台打印当前工程hvigor安装的工作路径：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__screen136801675366\\\"'>// windows\\nC:\\\\Users\\\\UserName\\\\.hvigor\\\\project_caches\\\\2b85daa9f175d1d9761799fed7e5bb40\\\\workspace\\n// linux \\n/Users/UserName/.hvigor/project_caches/2b85daa9f175d1d9761799fed7e5bb40/workspace</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 887,
        "pre": "import {hvigor, HvigorPlugin} from '@ohos/hvigor';\\nimport {appTasks} from '@ohos/hvigor-ohos-plugin';\\nexport function plugin(): HvigorPlugin{\\n    console.log('before: ', hvigor.getParameter().getProperty('hvigor.analyzeHtml')); // undefined\\n    hvigor.getParameter().setProperty('hvigor.analyzeHtml', true);\\n    return {\\n        pluginId:'example',\\n        apply: (node) => {\\n            console.log('after: ', hvigor.getParameter().getProperty('hvigor.analyzeHtml')); // true\\n        }\\n    };\\n}\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins: [plugin()]         /* Custom plugin to extend the functionality of Hvigor. */\\n};",
        "type": "Reference",
        "function_call": "setProperty(key: string, value: any): void",
        "function_name": "[h2]setProperty5.10.3+",
        "parent_text": "[h2]setProperty5.10.3+setProperty(key: string, value: any): void 设置properties对象指定key值的value值。 参数: 参数名  类型  必填  说明    key  string  是  hvigor-config.json5配置文件中properties字段的key值   value  any  是  hvigor-config.json5配置文件中properties字段的key值对应的value值     返回值：无  在模块级hvigorfile.ts中调用该API不生效，请在工程级hvigorfile.ts中调用。  示例： 在工程级hvigorfile.ts中添加代码。  执行命令hvigorw --sync，控制台打印： before:  undefined\\nafter:  true ",
        "import_module": "\\\"properties\\\": {\\n  \\\"key\\\": \\\"value\\\"\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section843294344311\\\"'><a name='\\\"section843294344311\\\"'></a><a name='\\\"section843294344311\\\"'></a><h4>[h2]setProperty<sup>5.10.3+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1234962616444\\\"'>setProperty(key: string, value: any): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p196300379432\\\"'>设置properties对象指定key值的value值。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1737347175312\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table19371047205314\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row153710478532\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.39.5.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p737204755310\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.39.5.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1937114716539\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.39.5.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p137047185319\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.39.5.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p11371147105314\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row537174713532\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1837947125316\\\"'>key</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p173894725313\\\"'>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p33814475536\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p338147145313\\\"'>hvigor-config.json5配置文件中properties字段的key值</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808116__row98662113579\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p11867121112576\\\"'>value</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1486712113573\\\"'>any</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p18671611145710\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1886721135711\\\"'>hvigor-config.json5配置文件中properties字段的key值对应的value值</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p114054713531\\\"'>返回值：无</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__note167066552383\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180504.89361748232411415524347846488080:50001231000000:2800:753F35B2A2B0C60CCD599EFFF5EBA6806D07152119C810FD71E7C03890ACF17F.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p11706155163816\\\"'>在模块级hvigorfile.ts中调用该API不生效，请在工程级hvigorfile.ts中调用。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p15401147115313\\\"'>示例：</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p940144735315\\\"'>在工程级hvigorfile.ts中添加代码。</p>  <p id='\\\"ZH-CN_TOPIC_0000002166808116__p24111475532\\\"'>执行命令hvigorw --sync，控制台打印：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166808116__screen541134795315\\\"'>before:  undefined\\nafter:  true</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 888,
        "pre": "import { HvigorNode } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { HvigorNode } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section2332028525\\\"'><a name='\\\"section2332028525\\\"'></a><a name='\\\"section2332028525\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 889,
        "pre": "// node的获取方式请参照hvigor API中的方法\\nnode.registerTask({\\n    name: 'customTask',\\n    run() {\\n        console.log('this is Task');\\n    }\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]registerTask",
        "parent_text": "[h2]registerTaskregisterTask: (task: HvigorTask) => void 在当前节点注册任务，在Hvigor生命周期中的配置阶段中执行。注册任务需完成HvigorTask的实现作为入参对象。  参数: 参数名  类型  必填  说明    task  HvigorTask  是  HvigorTask的实现     返回值: 类型  说明    HvigorNode  hvigor节点对象     示例：自定义任务注册。  ",
        "import_module": "import { HvigorNode } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section6972141673518\\\"'><a name='\\\"section6972141673518\\\"'></a><a name='\\\"section6972141673518\\\"'></a><h4>[h2]registerTask</h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p131101148173411\\\"'>registerTask: (task: HvigorTask) =&gt; void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p11302924011\\\"'>在当前节点注册任务，在Hvigor生命周期中的配置阶段中执行。注册任务需完成HvigorTask的实现作为入参对象。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p077913219200\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p208404042016\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table37622403377\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row1576284063717\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.44.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p67628407371\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.44.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1976217405371\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.44.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p07628404379\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.44.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1762154003712\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row177621340133717\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p16762640183718\\\"'>task</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1676219409376\\\"'>HvigorTask</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p9762124014370\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p2762140163719\\\"'>HvigorTask的实现</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p179512432116\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table1694552645617\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row17945826205620\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.44.8.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p18945162612560\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.44.8.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p16945132616564\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row6945112685619\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.410000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p194642695610\\\"'>HvigorNode</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.589999999999996%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p17946326145620\\\"'>hvigor节点对象</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p145421010193\\\"'>示例：自定义任务注册。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 890,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nhvigor.nodesInitialized(() => {\\n  hvigor.getRootNode().subNodes(node => {\\n    if (node.getNodeName() === 'entry') {\\n      node.beforeNodeEvaluate(hvigorNode => {\\n        console.log(hvigorNode.getNodeName());\\n      })\\n    }\\n  })\\n});",
        "type": "Reference",
        "function_call": "beforeNodeEvaluate(fn: (HvigorNode)",
        "function_name": "[h2]beforeNodeEvaluate4.3.0+",
        "parent_text": "[h2]beforeNodeEvaluate4.3.0+beforeNodeEvaluate(fn: (HvigorNode) => {}): void 为当前的node添加一个node评估前的回调函数。  参数: 参数名  类型  必填  说明    fn  (HvigorNode) => {}  是  一个入参为空或者为HvigorNode的方法     示例：为名称为entry的node注册一个beforeNodeEvaluate hook并打印出node的信息。  ",
        "import_module": "import { HvigorNode } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section3117627590\\\"'><a name='\\\"section3117627590\\\"'></a><a name='\\\"section3117627590\\\"'></a><h4>[h2]beforeNodeEvaluate<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p41176279911\\\"'>beforeNodeEvaluate(fn: (HvigorNode) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p161174272916\\\"'>为当前的node添加一个node评估前的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p12117132717913\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p111710271999\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table171173276914\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row5117112713912\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.68.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p11171427992\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.68.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p101179271193\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.68.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p151171271990\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.68.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p811762716912\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row11171627893\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p311782714919\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1611719275916\\\"'>(HvigorNode) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1411712271194\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p81173271896\\\"'>一个入参为空或者为HvigorNode的方法</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p998414421215\\\"'>示例：为名称为entry的node注册一个beforeNodeEvaluate hook并打印出node的信息。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 891,
        "pre": "import { hvigor } from '@ohos/hvigor';\\nhvigor.nodesInitialized(() => {\\n  hvigor.getRootNode().subNodes(node => {\\n    if (node.getNodeName() === 'entry') {\\n      node.afterNodeEvaluate(hvigorNode => {\\n        console.log(hvigorNode.getNodeName());\\n      })\\n    }\\n  })\\n});",
        "type": "Reference",
        "function_call": "afterNodeEvaluate(fn: (HvigorNode)",
        "function_name": "[h2]afterNodeEvaluate4.3.0+",
        "parent_text": "[h2]afterNodeEvaluate4.3.0+afterNodeEvaluate(fn: (HvigorNode) => {}): void 为当前的node添加一个node评估后的回调函数。  参数: 参数名  类型  必填  说明    fn  (HvigorNode) => {}  是  一个入参为空或者为HvigorNode的方法     示例：为名称为entry的node注册一个afterNodeEvaluate hook并打印出node的信息。  ",
        "import_module": "import { HvigorNode } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section32812284916\\\"'><a name='\\\"section32812284916\\\"'></a><a name='\\\"section32812284916\\\"'></a><h4>[h2]afterNodeEvaluate<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p142802810917\\\"'>afterNodeEvaluate(fn: (HvigorNode) =&gt; {}): void</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p11289289916\\\"'>为当前的node添加一个node评估后的回调函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p128182817920\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p72812810915\\\"'>参数:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table18289281796\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row132817289915\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.69.6.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p9288286915\\\"'>参数名</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.69.6.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p102813285919\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.69.6.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p9285281298\\\"'>必填</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.69.6.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5296285915\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row7291028696\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"23.62%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p142992817914\\\"'>fn</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"21.16%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p62911286913\\\"'>(HvigorNode) =&gt; {}</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.18%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p18291628597\\\"'>是</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"35.04%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p229182817918\\\"'>一个入参为空或者为HvigorNode的方法</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p17792105032011\\\"'>示例：为名称为entry的node注册一个afterNodeEvaluate hook并打印出node的信息。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 892,
        "pre": "import { HvigorPlugin } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { HvigorPlugin } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section16379183492115\\\"'><a name='\\\"section16379183492115\\\"'></a><a name='\\\"section16379183492115\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 893,
        "pre": "import { HvigorTask } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { HvigorTask } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section6734174235\\\"'><a name='\\\"section6734174235\\\"'></a><a name='\\\"section6734174235\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 894,
        "pre": "import { TaskInput } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { TaskInput } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section982931172315\\\"'><a name='\\\"section982931172315\\\"'></a><a name='\\\"section982931172315\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 895,
        "pre": "import { TaskOutput } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { TaskOutput } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section202626512410\\\"'><a name='\\\"section202626512410\\\"'></a><a name='\\\"section202626512410\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 896,
        "pre": "import { Task } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { Task } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section719416286246\\\"'><a name='\\\"section719416286246\\\"'></a><a name='\\\"section719416286246\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 897,
        "pre": "import { appTasks } from '@ohos/hvigor-ohos-plugin';\\n// 导入接口\\nimport { HvigorPlugin, HvigorNode} from '@ohos/hvigor';\\n// 实现自定义插件\\nfunction customPlugin(): HvigorPlugin {\\n    return {\\n        pluginId: 'customPlugin',\\n        apply(node: HvigorNode) {\\n            appTask(node);\\n        }\\n    }\\n}\\nfunction appTask(currentNode: HvigorNode) {\\n    // 工程级的node\\n    currentNode.subNodes((node: HvigorNode) => {\\n        // 模块级的node \\n        // 通过node.nodeDir 或者 node.node.getNodeDir() 获取该node节点的根路径的NormalizedFile文件\\n        const moduleNormalizedFile = node.nodeDir;\\n        // 通过NormalizedFile.file() 拼接后续路径，生成新的 NormalizedFile 对象\\n        // 生成模块下面 build-Profile.json5 的 NormalizedFile 对象\\n        const buildProfileNormalizedFile = moduleNormalizedFile.file('build-profile.json5');\\n    })\\n}\\nexport default {\\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\\n    plugins:[\\n        customPlugin()  // 应用自定义Plugin\\n    ]         /* Custom plugin to extend the functionality of Hvigor. */\\n}",
        "type": "Reference",
        "function_call": "file(_path: string)",
        "function_name": "[h2]asFileList4.3.0+",
        "parent_text": "[h2]asFileList4.3.0+asFileList: () => NormalizedFile[] 获取到NormalizedFile对象下深层递归的目录与文件NormalizedFile[]，包含它本身。  返回值: 类型  说明    NormalizedFile[]  NormalizedFile对象下深层递归的目录与文件NormalizedFile[]，包含它本身     当前只能通过node节点的 node.nodeDir 或者 node.node.getNodeDir() 获取该node节点的根路径的NormalizedFile对象，再通过NormalizedFile.file(_path: string)方法拼接后续路径来获取到新的NormalizedFile对象，工程级hvigorfile.ts示例：  ",
        "import_module": "import { Task } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1972715529184\\\"'><a name='\\\"section1972715529184\\\"'></a><a name='\\\"section1972715529184\\\"'></a><h4>[h2]asFileList<sup>4.3.0+</sup></h4><p id='\\\"ZH-CN_TOPIC_0000002166808116__p77270524186\\\"'>asFileList: () =&gt; NormalizedFile[]</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p17435181192810\\\"'>获取到NormalizedFile对象下深层递归的目录与文件NormalizedFile[]，包含它本身。</p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p59021217205\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p5728352151819\\\"'>返回值:</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"table17281052121817\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row5728252181815\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.227.6.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"40.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p17281252161819\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.227.6.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"59.730000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p5728125216185\\\"'>说明</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808116__row372818529187\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"40.27%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p13728135251818\\\"'>NormalizedFile[]</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"59.730000000000004%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808116__p1849012472816\\\"'>NormalizedFile对象下深层递归的目录与文件NormalizedFile[]，包含它本身</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808116__p1559410420519\\\"'>当前只能通过node节点的 node.nodeDir 或者 node.node.getNodeDir() 获取该node节点的根路径的NormalizedFile对象，再通过NormalizedFile.file(_path: string)方法拼接后续路径来获取到新的NormalizedFile对象，工程级hvigorfile.ts示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 898,
        "pre": "import { FileUtil } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { FileUtil } from '@ohos/hvigor';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1958144513231\\\"'><a name='\\\"section1958144513231\\\"'></a><a name='\\\"section1958144513231\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-api.html"
    },
    {
        "id": 899,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unsafe-member-access\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-member-access.html"
    },
    {
        "id": 900,
        "pre": "declare const properlyTyped: { prop: { a: string } };\\n\\nexport const v1 = properlyTyped.prop.a;\\n\\nconst key = 'a';\\nexport const v2 = properlyTyped.prop[key];\\n\\nconst arr = ['1', '2', '3'];\\nlet idx = 1;\\nexport const v3 = arr[idx];\\nexport const v4 = arr[idx++];",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-member-access.html"
    },
    {
        "id": 901,
        "pre": "declare const properlyTyped: { prop: { a: any } };\\n\\nexport const v1 = properlyTyped.prop.a;\\n\\nconst key = 'a' as any;\\nexport const v2 = properlyTyped.prop[key];\\n\\nconst arr = ['1', '2', '3'];\\nlet idx: any = 1;\\nexport const v3 = arr[idx];\\nexport const v4 = arr[idx++];",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-member-access.html"
    },
    {
        "id": 902,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-load-on-demand\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-load-on-demand.html"
    },
    {
        "id": 903,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Reusable\\n@Component\\nstruct ItemComponent {\\n  @State introduce: string = ''\\n\\n  aboutToReuse(params: Record<string, ESObject>) {\\n    this.introduce = params.introduce\\n  }\\n\\n  build() {\\n    Text(this.introduce)\\n      .fontSize(14)\\n      .padding({ left: 5, right: 5 })\\n      .margin({ top: 5 })\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource()\\n\\n  build() {\\n    List() {\\n      LazyForEach(this.data, (item: string) => {\\n        ListItem() {\\n          // 使用reuseId对不同的自定义组件实例分别标注复用组，以达到最佳的复用效果\\n          ItemComponent({ introduce: item }).reuseId(item)\\n        }\\n      }, (item: string) => item)\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-load-on-demand.html"
    },
    {
        "id": 904,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State arr: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\\n\\n  build() {\\n    List() {\\n      // List中建议使用LazyForEach\\n      ForEach(this.arr, (item: number) => {\\n        ListItem() {\\n          Text(`item value: ${item}`)\\n        }\\n      }, (item: number) => item.toString())\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-load-on-demand.html"
    },
    {
        "id": 905,
        "pre": "import { asset } from '@kit.AssetStoreKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nfunction stringToArray(str: string): Uint8Array {\\n  let textEncoder = new util.TextEncoder();\\n  return textEncoder.encodeInto(str);\\n}\\n\\nlet attr: asset.AssetMap = new Map();\\nattr.set(asset.Tag.SECRET, stringToArray('demo_pwd'));\\nattr.set(asset.Tag.ALIAS, stringToArray('demo_alias'));\\nattr.set(asset.Tag.ACCESSIBILITY, asset.Accessibility.DEVICE_FIRST_UNLOCKED);\\nattr.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray('demo_label'));\\ntry {\\n  asset.add(attr).then(() => {\\n    console.info(`Asset added successfully.`);\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to add Asset. Code is ${err.code}, message is ${err.message}`);\\n  })\\n} catch (error) {\\n  let err = error as BusinessError;\\n  console.error(`Failed to add Asset. Code is ${err.code}, message is ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "代码示例",
        "parent_text": "  代码示例     本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见API文档。   新增一条密码是demo_pwd，别名是demo_alias，附属信息是demo_label的数据，该数据在用户首次解锁设备后可被访问。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"代码示例\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178213094__%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\"'></a> <h4>代码示例</h4> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121001.94713830662783180073538642073132:50001231000000:2800:6D344066EDFA068CFB1C66778DE29E93FB1C9DD8C830F9BE5AC3C88442CFE188.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-asset\\\"' target='\\\"_blank\\\"'>API文档</a>。</p> </div> </div> <p>新增一条密码是demo_pwd，别名是demo_alias，附属信息是demo_label的数据，该数据在用户首次解锁设备后可被访问。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/asset-js-add.html"
    },
    {
        "id": 906,
        "pre": "callback(data:motion.OperatingHandStatus) {\\n  console.info('callback success' + data);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "定义回调函数接收操作手结果 ",
        "import_module": null,
        "parent": "<li><p>定义回调函数接收操作手结果</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/motion-guidelines.html"
    },
    {
        "id": 907,
        "pre": "import { display } from '@kit.ArkUI';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-setting-scaled-density.html"
    },
    {
        "id": 908,
        "pre": "import { Configuration, UIAbility } from '@kit.AbilityKit';\\n\\nexport default class EntryAbility extends UIAbility {\\n\\n  onConfigurationUpdate(newConfig: Configuration): void {\\n    AppStorage.setOrCreate('colorMode', newConfig.colorMode);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "监听UIAbility的onConfigurationUpdate回调，并通过应用级变量的状态管理AppStorage保存当前colorMode值。",
        "import_module": null,
        "parent": "<li>监听UIAbility的onConfigurationUpdate回调，并通过应用级变量的状态管理<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-appstorage\\\"' target='\\\"_blank\\\"'>AppStorage</a>保存当前colorMode值。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-setting-color-mode.html"
    },
    {
        "id": 909,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unnecessary-condition\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-condition.html"
    },
    {
        "id": 910,
        "pre": "const index = 0;\\nexport function head(items: readonly string[]): string {\\n  // Necessary, since items.length might be 0\\n  if (items.length) {\\n    return items[index].toUpperCase();\\n  } else {\\n    return '';\\n  }\\n}\\n\\nexport function foo(arg: string): void {\\n  // Necessary, since foo might be ''.\\n  if (arg) {\\n  }\\n}\\n\\nexport function bar(arg?: string | null) {\\n  // Necessary, since arg might be nullish\\n  return arg?.length;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-condition.html"
    },
    {
        "id": 911,
        "pre": "const index = 0;\\nexport function head(items: readonly string[]) {\\n  // items can never be nullable, so this is unnecessary\\n  if (items) {\\n    return items[index].toUpperCase();\\n  } else {\\n    return '';\\n  }\\n}\\n\\nexport function foo(arg: 'bar' | 'baz') {\\n  // arg is never nullable or empty string, so this is unnecessary\\n  if (arg) {\\n  }\\n}\\n\\nexport function bar(arg: string) {\\n  // arg can never be nullish, so ?. is unnecessary\\n  return arg?.length;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-condition.html"
    },
    {
        "id": 912,
        "pre": "try {\\n  phAccessHelper.requestPhotoUrisReadPermission(uri).then((result: Array<string>) => {\\n    console.info(\\\"requestPhotoUrisReadPermission, result = \\\" + JSON.stringify(result));\\n    if (result) {\\n      // 授权成功返回授权后单框架的uri列表\\n    } else {\\n      // 授权失败后的处理\\n    }\\n  })\\n} catch(error) {\\n  console.error(\\\"requestPhotoUrisReadPermission error: \\\" + JSON.stringify(error));\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用接口拉起授权界面。 ",
        "import_module": null,
        "parent": "<li>调用接口拉起授权界面。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/medialibrary-request-photouris-permission.html"
    },
    {
        "id": 913,
        "pre": "import { AlbumPickerComponent, AlbumPickerOptions, AlbumInfo} from '@kit.MediaLibraryKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\n@Entry\\n@Component\\nstruct Index{\\n  private uris: Array<string> = new Array<string>();\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Button(\\\"拉起授权界面\\\").width('100%').height('10%').margin({top: 150})\\n          .onClick(()=>{\\n            // 自行对其赋值，输入需要授权的uri信息\\n            this.uris = [];\\n            let phAccessHelper: photoAccessHelper.PhotoAccessHelper = photoAccessHelper.getPhotoAccessHelper(getContext(this));\\n            try {\\n              phAccessHelper.requestPhotoUrisReadPermission(this.uris).then((result: Array<string>) => {\\n                console.info(\\\"requestPhotoUrisReadPermission, result = \\\" + JSON.stringify(result));\\n                if (result) {\\n                  // 授权成功返回授权后单框架的uri列表\\n                } else {\\n                  // 授权失败后的处理\\n                }\\n              })\\n            } catch(error) {\\n              console.error(\\\"requestPhotoUrisReadPermission error: \\\" + JSON.stringify(error));\\n            }\\n          })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "完整示例",
        "parent_text": "完整示例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section726031793510\\\"'><a name='\\\"section726031793510\\\"'></a><a name='\\\"section726031793510\\\"'></a><h4>完整示例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/medialibrary-request-photouris-permission.html"
    },
    {
        "id": 914,
        "pre": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError, commonEventManager } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入commonEventManager模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-commoneventmanager\\\"' target='\\\"_blank\\\"'>commonEventManager</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-login-state.html"
    },
    {
        "id": 915,
        "pre": "\\\"abilities\\\": [\\n  {\\n    \\\"name\\\": \\\"TestUIAbility\\\",\\n    \\\"srcEntry\\\": \\\"./ets/entryability/TestUIAbility.ets\\\",\\n    \\\"label\\\": \\\"$string:EntryAbility_label\\\", // ability名称\\n    \\\"icon\\\": \\\"$media:layered_image\\\", // ability图标\\n    \\\"description\\\": \\\"$string:EntryAbility_desc\\\",\\n    \\\"startWindowIcon\\\": \\\"$media:startIcon\\\",\\n    \\\"startWindowBackground\\\": \\\"$color:start_window_background\\\",\\n    \\\"exported\\\": true,\\n    \\\"skills\\\": [\\n      {\\n        \\\"actions\\\": [\\n          \\\"ohos.want.action.sendData\\\"\\n        ],\\n        \\\"uris\\\": [\\n          {\\n            \\\"scheme\\\": \\\"file\\\",\\n            \\\"utd\\\": \\\"general.text\\\",\\n            \\\"maxFileSupported\\\": 1\\n          }      \\n        ]\\n      }\\n    ]\\n  }\\n],\\n\\\"extensionAbilities\\\": [  \\n  {\\n    \\\"name\\\": \\\"TestShareAbility\\\",\\n    \\\"srcEntry\\\": \\\"./ets/abilities/TestShareAbility.ts\\\",\\n    \\\"type\\\": \\\"share\\\", // 支持分享数据处理\\n    \\\"exported\\\": true,\\n    \\\"label\\\": \\\"$string:xx_label\\\", // ability名称\\n    \\\"icon\\\": \\\"$media:icon\\\", // ability图标\\n    \\\"description\\\": \\\"$string:TestShareAbility_desc\\\",\\n    \\\"skills\\\": [\\n      {\\n        \\\"actions\\\": [\\n          \\\"ohos.want.action.sendData\\\"\\n        ],\\n        \\\"uris\\\": [\\n          {\\n            \\\"scheme\\\": \\\"file\\\",\\n            \\\"utd\\\": \\\"general.text\\\",\\n            \\\"maxFileSupported\\\": 1\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "应用名称和图标规范",
        "parent_text": "应用名称和图标规范当应用实现了用于接收分享内容的UIAbility或者UIExtensionAbility后，可在配置文件（src/main/module.json5）的skills配置中注册。并配置actions为ohos.want.action.sendData。 当分享内容类型为应用所支持的类型时，应用图标将出现在分享面板的分享方式区内。 应用可以针对不同的ability，设置不同的名称和图标。 示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section13709103063816\\\"'><a name='\\\"section13709103063816\\\"'></a><a name='\\\"section13709103063816\\\"'></a><h4>应用名称和图标规范</h4><p>当应用实现了用于接收分享内容的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability\\\"' target='\\\"_blank\\\"'>UIAbility</a>或者<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiextensionability\\\"' target='\\\"_blank\\\"'>UIExtensionAbility</a>后，可在配置文件（src/main/module.json5）的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file#skills标签\\\"' target='\\\"_blank\\\"'>skills</a>配置中注册。并配置actions为ohos.want.action.sendData。</p> <p>当分享内容类型为应用所支持的类型时，应用图标将出现在分享面板的分享方式区内。</p> <p>应用可以针对不同的ability，设置不同的名称和图标。</p> <div class='\\\"p\\\"'>示例： </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-design-specification.html"
    },
    {
        "id": 916,
        "pre": "# the minimum version of CMake.\\ncmake_minimum_required(VERSION 3.5.0)\\nproject(napi_wrap_demo)\\n\\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\\n\\nif(DEFINED PACKAGE_FIND_FILE)\\n    include(${PACKAGE_FIND_FILE})\\nendif()\\n\\ninclude_directories(${NATIVERENDER_ROOT_PATH}\\n                    ${NATIVERENDER_ROOT_PATH}/include)\\n\\nadd_definitions(\\\"-DLOG_DOMAIN=0x0000\\\")\\nadd_definitions(\\\"-DLOG_TAG=\\\\\\\"testTag\\\\\\\"\\\")\\n\\nadd_library(entry SHARED napi_init.cpp)\\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so)",
        "type": "Reference",
        "function_call": "void RegisterObjectWrapModule()",
        "function_name": null,
        "parent_text": "接口声明、编译配置以及模块注册 接口声明 // index.d.ts\\nexport class MyObject {\\n   constructor(arg: number);\\n   plusOne: () => number;\\n\\n   public get value();\\n   public set value(newVal: number);\\n} 编译配置  模块注册 // napi_init.cpp\\n#include \\\"napi/native_api.h\\\"\\n#include \\\"hilog/log.h\\\"\\n\\nclass MyObject {\\n public:\\n  static napi_value Init(napi_env env, napi_value exports);\\n  static void Destructor(napi_env env, void* nativeObject, void* finalize_hint);\\n\\n private:\\n  explicit MyObject(double value_ = 0);\\n  ~MyObject();\\n\\n  static napi_value New(napi_env env, napi_callback_info info);\\n  static napi_value GetValue(napi_env env, napi_callback_info info);\\n  static napi_value SetValue(napi_env env, napi_callback_info info);\\n  static napi_value PlusOne(napi_env env, napi_callback_info info);\\n\\n  double value_;\\n  napi_env env_;\\n  napi_ref wrapper_;\\n};\\n\\nstatic thread_local napi_ref g_ref = nullptr;\\n\\nMyObject::MyObject(double value)\\n    : value_(value), env_(nullptr), wrapper_(nullptr) {}\\n\\nMyObject::~MyObject()\\n{\\n  napi_delete_reference(env_, wrapper_);\\n}\\n\\nvoid MyObject::Destructor(napi_env env,\\n                          void* nativeObject,\\n                          [[maybe_unused]] void* finalize_hint)\\n{\\n  OH_LOG_INFO(LOG_APP, \\\"MyObject::Destructor called\\\");\\n  delete reinterpret_cast<MyObject*>(nativeObject);\\n}\\n\\nnapi_value MyObject::Init(napi_env env, napi_value exports)\\n{\\n  napi_property_descriptor properties[] = {\\n      { \\\"value\\\", 0, 0, GetValue, SetValue, 0, napi_default, 0 },\\n      { \\\"plusOne\\\", nullptr, PlusOne, nullptr, nullptr, nullptr, napi_default, nullptr }\\n  };\\n\\n  napi_value cons;\\n  napi_define_class(env, \\\"MyObject\\\", NAPI_AUTO_LENGTH, New, nullptr, 2,\\n                           properties, &cons);\\n\\n  napi_create_reference(env, cons, 1, &g_ref);\\n  napi_set_named_property(env, exports, \\\"MyObject\\\", cons);\\n  return exports;\\n}\\n\\nEXTERN_C_START\\nstatic napi_value Init(napi_env env, napi_value exports)\\n{\\n    MyObject::Init(env, exports);\\n    return exports;\\n}\\nEXTERN_C_END\\n\\nstatic napi_module nativeModule = {\\n    .nm_version = 1,\\n    .nm_flags = 0,\\n    .nm_filename = nullptr,\\n    .nm_register_func = Init,\\n    .nm_modname = \\\"entry\\\",\\n    .nm_priv = nullptr,\\n    .reserved = { 0 },\\n};\\n\\nextern \\\"C\\\" __attribute__((constructor)) void RegisterObjectWrapModule()\\n{\\n    napi_module_register(&nativeModule);\\n} ",
        "import_module": null,
        "parent": "<li><p>接口声明、编译配置以及模块注册</p> <p><strong>接口声明</strong></p> <pre class='\\\"ts\\\"'>// index.d.ts\\nexport class MyObject {\\n   constructor(arg: number);\\n   plusOne: () =&gt; number;\\n\\n   public get value();\\n   public set value(newVal: number);\\n}</pre> <p><strong>编译配置</strong></p>  <p><strong>模块注册</strong></p> <pre class='\\\"cpp\\\"'>// napi_init.cpp\\n#include \\\"napi/native_api.h\\\"\\n#include \\\"hilog/log.h\\\"\\n\\nclass MyObject {\\n public:\\n  static napi_value Init(napi_env env, napi_value exports);\\n  static void Destructor(napi_env env, void* nativeObject, void* finalize_hint);\\n\\n private:\\n  explicit MyObject(double value_ = 0);\\n  ~MyObject();\\n\\n  static napi_value New(napi_env env, napi_callback_info info);\\n  static napi_value GetValue(napi_env env, napi_callback_info info);\\n  static napi_value SetValue(napi_env env, napi_callback_info info);\\n  static napi_value PlusOne(napi_env env, napi_callback_info info);\\n\\n  double value_;\\n  napi_env env_;\\n  napi_ref wrapper_;\\n};\\n\\nstatic thread_local napi_ref g_ref = nullptr;\\n\\nMyObject::MyObject(double value)\\n    : value_(value), env_(nullptr), wrapper_(nullptr) {}\\n\\nMyObject::~MyObject()\\n{\\n  napi_delete_reference(env_, wrapper_);\\n}\\n\\nvoid MyObject::Destructor(napi_env env,\\n                          void* nativeObject,\\n                          [[maybe_unused]] void* finalize_hint)\\n{\\n  OH_LOG_INFO(LOG_APP, \\\"MyObject::Destructor called\\\");\\n  delete reinterpret_cast&lt;MyObject*&gt;(nativeObject);\\n}\\n\\nnapi_value MyObject::Init(napi_env env, napi_value exports)\\n{\\n  napi_property_descriptor properties[] = {\\n      { \\\"value\\\", 0, 0, GetValue, SetValue, 0, napi_default, 0 },\\n      { \\\"plusOne\\\", nullptr, PlusOne, nullptr, nullptr, nullptr, napi_default, nullptr }\\n  };\\n\\n  napi_value cons;\\n  napi_define_class(env, \\\"MyObject\\\", NAPI_AUTO_LENGTH, New, nullptr, 2,\\n                           properties, &amp;cons);\\n\\n  napi_create_reference(env, cons, 1, &amp;g_ref);\\n  napi_set_named_property(env, exports, \\\"MyObject\\\", cons);\\n  return exports;\\n}\\n\\nEXTERN_C_START\\nstatic napi_value Init(napi_env env, napi_value exports)\\n{\\n    MyObject::Init(env, exports);\\n    return exports;\\n}\\nEXTERN_C_END\\n\\nstatic napi_module nativeModule = {\\n    .nm_version = 1,\\n    .nm_flags = 0,\\n    .nm_filename = nullptr,\\n    .nm_register_func = Init,\\n    .nm_modname = \\\"entry\\\",\\n    .nm_priv = nullptr,\\n    .reserved = { 0 },\\n};\\n\\nextern \\\"C\\\" __attribute__((constructor)) void RegisterObjectWrapModule()\\n{\\n    napi_module_register(&amp;nativeModule);\\n}</pre> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/use-napi-object-wrap.html"
    },
    {
        "id": 917,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@correctness/listen-multi-network-concurrent\\\": \\\"suggestion\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_listen-multi-network-concurrent.html"
    },
    {
        "id": 918,
        "pre": "// With the ohos.permission.GET_NETWORK_INFO permission configured\\nimport { netHandover } from '@kit.NetworkBoostKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\ntry {\\n  netHandover.on('handoverChange', (info: netHandover.HandoverInfo) => {\\n    if (info.handoverStart) {\\n      console.info('handover start');\\n    } else if (info.handoverComplete) {\\n      console.info('handover complete');\\n    }\\n  });\\n} catch (err) {\\n  console.error('errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\\n}\\ntry {\\n  netHandover.off('handoverChange');\\n} catch (err) {\\n  console.error('errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_listen-multi-network-concurrent.html"
    },
    {
        "id": 919,
        "pre": "import { authentication } from '@kit.AccountKit';\\nimport { util } from '@kit.ArkTS';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Account Kit的authentication模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入Account Kit的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-authentication\\\"' target='\\\"_blank\\\"'>authentication</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-phone-unionid-login.html"
    },
    {
        "id": 920,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n// 客户端请求接口示例代码\\nexport function rcpRequest(authCode: string) {\\n  // 定义请求头\\n  const headers: rcp.RequestHeaders = {\\n    'accept': 'application/json'\\n  };\\n  // 定义要传递的参数\\n  const postMessage: Record<string, string> = {\\n    'authorizationCode': authCode\\n  };\\n  const securityConfig: rcp.SecurityConfiguration = {\\n    tlsOptions: {\\n      tlsVersion: 'TlsV1.3'\\n    }\\n  };\\n  // 假设\\\"http://localhost:6687\\\"为应用服务端地址\\n  const baseUrl = 'http://localhost:6687/account/login';\\n  // 定义请求对象\\n  const req = new rcp.Request(baseUrl, 'POST', headers, postMessage);\\n  // 创建通信会话对象\\n  const session = rcp.createSession({ requestConfiguration: { security: securityConfig } });\\n  // 发起请求\\n  session.fetch(req).then((response) => {\\n    hilog.info(0x0000, 'getRcpResult', 'Succeeded in getting result from server.');\\n    if (response.body) {\\n      const decoder = util.TextDecoder.create('utf-8');\\n      const result = JSON.parse(decoder.decodeToString(new Uint8Array(response.body))) as Record<string, Object>;\\n      const phoneNumber: string = JSON.stringify(result['phone'] ?? '');\\n      if (phoneNumber) {\\n        // 应用处理相关逻辑\\n      }\\n    } else {\\n      hilog.error(0x0000, 'getRcpResult', 'Failed to get response body.');\\n    }\\n  }).catch((err: BusinessError) => {\\n    hilog.error(0x0000, 'getRcpResult', `err: err code is ${err.code}, err message is ${JSON.stringify(err)}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "  ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-phone-unionid-login.html"
    },
    {
        "id": 921,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unnecessary-qualifier\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-qualifier.html"
    },
    {
        "id": 922,
        "pre": "export enum A {\\n  b = 'x',\\n  c = b\\n}\\n\\nexport namespace B {\\n  export type C = number;\\n  export const x: C = 3;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-qualifier.html"
    },
    {
        "id": 923,
        "pre": "export enum A {\\n  b = 'x',\\n  c = A.b\\n}\\n\\nexport namespace B {\\n  export type C = number;\\n  export const x: B.C = 3;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-qualifier.html"
    },
    {
        "id": 924,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/require-await\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_require-await.html"
    },
    {
        "id": 925,
        "pre": "async function doSomething(): Promise<void> {\\n  return Promise.resolve();\\n}\\n\\nexport async function foo() {\\n  await doSomething();\\n}\\n\\nexport function baz() {\\n  doSomething().catch(() => {\\n    console.info('error');\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_require-await.html"
    },
    {
        "id": 926,
        "pre": "async function doSomething(): Promise<void> {\\n  return Promise.resolve();\\n}\\n\\nexport async function foo() {\\n  doSomething();\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_require-await.html"
    },
    {
        "id": 927,
        "pre": "import {StoragePlugin} from '../libs/plugins/storage/customStorage/StoragePlugin';  // 插件文件CustomStorage.ts存储在默认位置（ohpm-repo解压根目录的plugins文件夹内），StoragePlugin接口类的默认引用地址\\nimport {getStorageConfigInfo} from '../libs/common/getStorageConfigInfo';           // 插件文件CustomStorage.ts存储在默认位置（ohpm-repo解压根目录的plugins文件夹内），getStorageConfigInfo方法的默认引用地址\\nexport class CustomStorage implements StoragePlugin {\\n  async init(): Promise<void>{\\n    // 配置文件中 store 项格式参考\\n    // store:\\n    //   type: custom    // store 存储类型为 custom，即用户自定义\\n    //   config:         // 配置信息：export_name和plugin_path 是必选配置项\\n    //     export_name: ExampleDemo          // 插件类的名字：例如 ExampleDemo\\n    //     plugin_path: ../plugins/storage/customStorage/ExampleDemo.js    // 插件文件的存放位置\\n    //     configInfo1: \\\"info1\\\";             // 自定义配置信息（可选项）\\n    //     configInfo2: \\\"info2\\\";             // 自定义配置信息（可选项）\\n    //     ...\\n    // 通过函数 getStorageConfigInfo() 可以获取到配置文件config.yaml中store.config处自定义配置的信息\\n    const configStorageInfo = await getStorageConfigInfo();\\n    //举例说明：当配置文件 store.config处定义 configInfo1和 configInfo2信息，可读取\\n    const configInfo1 = configStorageInfo.configInfo1 as string; //获取到configInfo1的值为 \\\"info1\\\"\\n    const configInfo2 = configStorageInfo.configInfo2 as string; //获取到configInfo2的值为: \\\"info2\\\"\\n  };\\n\\n  /**\\n   * 通过文件的本地路径，把数据保存到指定的 storage 内\\n   * @param srcPath： 上传文件的本地路径\\n   * @param packageInfo: 可选参数，待上传包的详细信息，包含包名（含组织名）和包版本号两部分，包名：packageInfo.packageName，包版本：packageInfo.version.\\n   * @returns 上传文件 save 后的返回信息： 能够标识文件，方便文件删除和读取\\n   */\\n  async save(srcPath: string, packageInfo: any): Promise<string>{\\n    let savedResponse: string;\\n    return savedResponse;\\n  };\\n\\n  /** 通过上传文件获得的返回信息，定位文件，进行文件的删除，返回删除结果\\n   * @param savedResponse： 上传文件 save 后的返回信息\\n   * @returns 删除的结果：true 表示删除成功\\n   */\\n  async delete(savedResponse: string): Promise<boolean>{\\n    let isDeleteSuccess: boolean;\\n    return isDeleteSuccess;\\n  };\\n\\n  /**\\n   * 过上传文件获得的返回信息，定位文件，进行获取文件内容，数据格式为 Buffer\\n   * @param savedResponse 上传文件 save 后的返回信息\\n   * @returns 获取文件的内容，数据格式为 Buffer\\n   */\\n  async download(savedResponse: string): Promise<Buffer>{\\n    let fileContent: Buffer;\\n    return fileContent;\\n  };\\n\\n /**\\n   * 根据保存文件生成的结果字符串，获取文件下载url\\n   * @param savedResponse 保存文件的结果字符串\\n   */\\n  async getDownloadUrl(savedResponse: string): Promise<string>{\\n    let fileDownloadUrl: string;\\n    return fileDownloadUrl;\\n  };\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "插件模板CustomStorage.ts",
        "parent_text": "插件模板CustomStorage.ts ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section3671144204619\\\"'><a name='\\\"section3671144204619\\\"'></a><a name='\\\"section3671144204619\\\"'></a><h4>插件模板CustomStorage.ts</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-repo-template-file.html"
    },
    {
        "id": 928,
        "pre": "// tsconfig.json 文件指定了编译项目所需的根目录下的文件以及编译选项，编译自定义插件文件 .ts 为 .js文件。\\n{\\n  \\\"include\\\": [\\n    \\\"plugins/*\\\" // 插件文件的位置\\n  ],\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es2016\\\",\\n    \\\"experimentalDecorators\\\": true,\\n    \\\"emitDecoratorMetadata\\\": true,\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"rootDirs\\\": [\\n      \\\"./src\\\",\\n      \\\"./test\\\"\\n    ],\\n    \\\"typeRoots\\\": [\\n      \\\"./node_modules/@types\\\"\\n    ],\\n    \\\"types\\\": [\\n      \\\"node\\\",\\n    ],\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"outDir\\\": \\\"./plugins/outDir\\\",   // 编译后文件输出的位置\\n    \\\"esModuleInterop\\\": true,\\n    \\\"forceConsistentCasingInFileNames\\\": true,\\n    \\\"alwaysStrict\\\": true,\\n    \\\"noImplicitReturns\\\": true,\\n    \\\"skipLibCheck\\\": true\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "ts编译的配置文件tsconfig.json",
        "parent_text": "ts编译的配置文件tsconfig.json ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14188258114612\\\"'><a name='\\\"section14188258114612\\\"'></a><a name='\\\"section14188258114612\\\"'></a><h4>ts编译的配置文件tsconfig.json</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-ohpm-repo-template-file.html"
    },
    {
        "id": 929,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  build() {\\n    Column() {\\n      Button('addBackground').onClick(async () => {\\n        // 确保沙箱目录有input.pdf文档\\n        let filePath = this.context.filesDir + '/input.pdf';\\n        let res = this.pdfDocument.loadDocument(filePath);\\n        if (res === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let bginfo: pdfService.BackgroundInfo = new pdfService.BackgroundInfo();\\n          // 确保沙箱目录有img.jpg文档\\n          bginfo.imagePath = this.context.filesDir + '/img.jpg';\\n          bginfo.backgroundColor = 50;\\n          bginfo.isOnTop = true;\\n          bginfo.rotation = 45;\\n          bginfo.scale = 0.5;\\n          bginfo.opacity = 0.3;\\n          bginfo.verticalAlignment = pdfService.BackgroundAlignment.BACKGROUND_ALIGNMENT_TOP;\\n          bginfo.horizontalAlignment = pdfService.BackgroundAlignment.BACKGROUND_ALIGNMENT_LEFT;\\n          bginfo.horizontalSpace = 1.0;\\n          bginfo.verticalSpace = 1.0;\\n          this.pdfDocument.addBackground(bginfo, 0, 2, true, true);\\n          let outPdfPath = this.context.filesDir + '/testAddBackground.pdf';\\n          let result = this.pdfDocument.saveDocument(outPdfPath);\\n          hilog.info(0x0000, 'PdfPage', 'addBackground %{public}s!', result ? 'success' : 'fail');\\n        }\\n        this.pdfDocument.releaseDocument();\\n      })\\n      Button('removeBackground').onClick(async () => {\\n        let filePath = this.context.filesDir + '/testAddBackground.pdf';\\n        let res = this.pdfDocument.loadDocument(filePath);\\n        if (res === pdfService.ParseResult.PARSE_SUCCESS && this.pdfDocument.hasBackground()) {\\n          let removeResult = this.pdfDocument.removeBackground();\\n          if (removeResult) {\\n            let outPdfPath = this.context.filesDir + '/removeBackground.pdf';\\n            let result = this.pdfDocument.saveDocument(outPdfPath);\\n            hilog.info(0x0000, 'PdfPage', 'removeBackground %{public}s!', result ? 'success' : 'fail');\\n          }\\n        }\\n        this.pdfDocument.releaseDocument();\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法，加载PDF文档。 实例化背景BackgroundInfo类，并设置相关属性，包括大小、旋转、透明度和位置等。 保存PDF文档到应用沙箱。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section57691356103515\\\"'> <a name='\\\"section57691356103515\\\"'></a><a name='\\\"section57691356103515\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>实例化背景BackgroundInfo类，并设置相关属性，包括大小、旋转、透明度和位置等。</li> <li>保存PDF文档到应用沙箱。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-add-background.html"
    },
    {
        "id": 930,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-combine-same-arg-animateto\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-combine-same-arg-animateto.html"
    },
    {
        "id": 931,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State textWidth: number = 200;\\n  @State color: Color = Color.Red;\\n  \\n  func() {\\n    animateTo({ curve: Curve.Sharp, duration: 1000 }, () => {\\n      this.textWidth = (this.textWidth === 100 ? 200 : 100);\\n      this.color = (this.color === Color.Yellow ? Color.Red : Color.Yellow);\\n    });\\n  }\\n  \\n  build() {\\n    Column() {\\n      Row()\\n        .width(this.textWidth)\\n        .height(10)\\n        .backgroundColor(this.color)\\n      Text('click')\\n        .onClick(() => {\\n          this.func();\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-combine-same-arg-animateto.html"
    },
    {
        "id": 932,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State textWidth: number = 200;\\n  @State color: Color = Color.Red;\\n  \\n  func1() {\\n    animateTo({ curve: Curve.Sharp, duration: 1000 }, () => {\\n      this.textWidth = (this.textWidth === 100 ? 200 : 100);\\n    });\\n  }\\n  \\n  func2() {\\n    animateTo({ curve: Curve.Sharp, duration: 1000 }, () => {\\n      this.color = (this.color === Color.Yellow ? Color.Red : Color.Yellow);\\n    });\\n  }\\n  \\n  build() {\\n    Column() {\\n      Row()\\n        .width(this.textWidth)\\n        .height(10)\\n        .backgroundColor(this.color)\\n      Text('click')\\n        .onClick(() => {\\n          this.func1();\\n          this.func2();\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-combine-same-arg-animateto.html"
    },
    {
        "id": 933,
        "pre": "{\\n  \\\"module\\\": {\\n    \\\"requestPermissions\\\": [\\n      {\\n        \\\"name\\\": \\\"ohos.permission.ACCESS_CAR_DISTRIBUTED_ENGINE\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"ohos.permission.ACCESS_SERVICE_NAVIGATION_INFO\\\"\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]申请权限步骤",
        "parent_text": "[h2]申请权限步骤需要在entry/src/main路径下的module.json5中配置所需申请的权限。示例代码如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section178884218124\\\"'><a name='\\\"section178884218124\\\"'></a><a name='\\\"section178884218124\\\"'></a><h4>[h2]申请权限步骤</h4><p>需要在entry/src/main路径下的module.json5中配置所需申请的权限。示例代码如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-preparations.html"
    },
    {
        "id": 934,
        "pre": "{\\n  \\\"module\\\": {\\n    \\\"abilities\\\": [\\n     {\\n        \\\"name\\\": \\\"xxxx\\\",\\n        \\\"srcEntry\\\": \\\"xxxx\\\",\\n        \\\"description\\\": \\\"xxxx\\\",\\n        \\\"skills\\\": [\\n          {\\n            \\\"entities\\\": [\\n              \\\"entity.system.default\\\"\\n            ],\\n            \\\"actions\\\": [\\n              \\\"action.navigation.infoservice\\\"\\n            ]\\n          },\\n          {...}\\n        ],\\n        \\\"metadata\\\": [{\\n          \\\"name\\\" : \\\"naviInfoServiceCapability\\\",\\n          \\\"value\\\" : \\\"NaviOperation,multiScreenDisplay,mapUIOperation,naviInfoQuery,naviMetaDataQuery\\\"\\n        },\\n        {\\n          \\\"name\\\" : \\\"carHopCapability\\\",\\n          \\\"value\\\" : \\\"carHopNavi,getOnCarNavi,insideCarNavi,getOffCarNavi\\\"\\n        },\\n       ]\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "需要在entry/src/main路径下的module.json5中配置导航信息服务的skills（如有其它skills配置，需在数组内追加）和metadata，方便系统查询应用配置了哪些能力，value值可按需配置。示例代码如下所示： ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>需要在entry/src/main路径下的module.json5中配置导航信息服务的skills（如有其它skills配置，需在数组内追加）和metadata，方便系统查询应用配置了哪些能力，value值可按需配置。示例代码如下所示： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-preparations.html"
    },
    {
        "id": 935,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/consistent-type-assertions\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-assertions.html"
    },
    {
        "id": 936,
        "pre": "// 默认推荐使用 ... as foo， 始终优先选择 const x = { ... } as T; 而不是const x: T = { ... };\\ninterface MyType {\\n  name: string;\\n}\\nexport const x: MyType = {\\n  name: 'hello'\\n};\\nexport const y = x as object;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-assertions.html"
    },
    {
        "id": 937,
        "pre": "// 默认推荐使用 ... as foo， 始终优先选择 const x = { ... } as T; 而不是const x: T = { ... };\\ninterface MyType {\\n  name: string;\\n}\\nexport const x: MyType = {\\n  name: 'hello'\\n};\\nexport const y = <object>x;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-assertions.html"
    },
    {
        "id": 938,
        "pre": "// 将设备侧应用包名定义为remoteBundleName\\nlet remoteBundleName: string = '';\\n\\n// 步骤3 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤4 查看是否安装指定的设备侧应用\\np2pClient.isRemoteAppInstalled(targetDevice.randomId, remoteBundleName).then((isInstall) => {\\n  console.info(`Succeeded in checking remote app install, result is ${isInstall}.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to check remote app install. Code is ${error.code}, message is ${error.message}.`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用isRemoteAppInstalled方法，查看是否安装指定的设备应用。 ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section28747514219\\\"' target='\\\"_blank\\\"'>isRemoteAppInstalled</a>方法，查看是否安装指定的设备应用。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 939,
        "pre": "// 将设备侧应用包名定义为remoteBundleName\\nlet remoteBundleName: string = '';\\n\\n// 步骤3 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤4 获取指定设备对应的应用版本号\\np2pClient.getRemoteAppVersion(targetDevice.randomId, remoteBundleName).then((version) => {\\n  console.info(`Succeeded in getting remote app version, version is ${version}.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to check get remote app version. Code is ${error.code}, message is ${error.message}.`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用getRemoteAppVersion方法，获取指定设备对应的应用版本号。 ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1737133513289\\\"' target='\\\"_blank\\\"'>getRemoteAppVersion</a>方法，获取指定设备对应的应用版本号。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 940,
        "pre": "// 将设备侧应用包名定义为remoteBundleName\\nlet remoteBundleName: string = '';\\n\\n// 步骤3 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n  \\n// 步骤4 拉起设备侧指定应用(transformLocalBundleName不传入参数，默认为false)\\np2pClient.startRemoteApp(targetDevice.randomId, remoteBundleName).then((p2pResult) => {\\n  console.info(`Succeeded in starting remote app, result is ${p2pResult.code}.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to start remote app. Code is ${error.code}, message is ${error.message}.`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用startRemoteApp方法，指定需要拉起设备侧应用包名。transformLocalBundleName默认值为false，传入为true时，wearEngine会将本地的应用包名和指纹转换为兼容应用在云侧存储的包名和指纹，可参考申请接入Wear Engine服务章节。 ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section169404201361\\\"' target='\\\"_blank\\\"'>startRemoteApp</a>方法，指定需要拉起设备侧应用包名。<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#p048154673811\\\"' target='\\\"_blank\\\"'>transformLocalBundleName</a>默认值为false，传入为true时，wearEngine会将本地的应用包名和指纹转换为兼容应用在云侧存储的包名和指纹，可参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/wearengine_apply\\\"'>申请接入Wear Engine服务</a>章节。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 941,
        "pre": "import { util } from '@kit.ArkTS';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]发送点对点消息",
        "parent_text": "  [h2]发送点对点消息 为了使用工具类构造消息体，请先导入所需模块。   参见查询可用穿戴设备章节，获取已连接设备列表。 参见目标设备选择章节，从已连接设备列表中选定需要通信的设备。 构造设备侧应用参数P2pAppParam。 构造需要发送的消息P2pMessage。   调用wearEngine中的getP2pClient方法，获取P2pClient对象。 调用sendMessage方法，从手机上的应用发送简短消息到穿戴设备侧对应的应用。设备侧已注册监听消息接收后，即可收到手机发送的消息。// 步骤3 构造设备侧应用参数\\nlet appInfo: wearEngine.AppInfo = {\\n  // 设置设备侧应用的应用信息：包名与指纹\\n  bundleName: '',\\n  fingerprint: ''\\n}\\nlet appParam: wearEngine.P2pAppParam = {\\n  remoteApp: appInfo\\n  // transformLocalAppInfo默认为false，不转换包名指纹\\n}\\n\\n// 设置需要发送的消息内容，长度限制为4096字节\\nlet messageContent: string = 'this is message';\\n\\n// 步骤4 构造消息结构体\\nlet textEncoder: util.TextEncoder = new util.TextEncoder;\\nlet message: wearEngine.P2pMessage = {\\n  content: textEncoder.encodeInto(messageContent)\\n}\\n\\n// 步骤5 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤6 发送消息\\np2pClient.sendMessage(targetDevice.randomId, appParam, message).then((p2pResult) => {\\n  console.info(`Succeeded in sending message, result is ${p2pResult.code}.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to send message. Code is ${error.code}, message is ${error.message}.`);\\n})   ",
        "import_module": "import { util } from '@kit.ArkTS';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1641421982617\\\"'> <a name='\\\"section1641421982617\\\"'></a><a name='\\\"zh-cn_topic_0000001073917080_section1641421982617\\\"'></a> <h4>[h2]发送点对点消息</h4> <p>为了使用工具类构造消息体，请先导入所需模块。</p>  <ol> <li><span>参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/query_connected_devices\\\"'>查询可用穿戴设备</a>章节，获取已连接设备列表。</span></li> <li><span>参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/we-device-selection\\\"'>目标设备选择</a>章节，从已连接设备列表中选定需要通信的设备。</span></li> <li><span>构造设备侧应用参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section7874153142020\\\"' target='\\\"_blank\\\"'>P2pAppParam</a>。</span></li> <li><span>构造需要发送的消息<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section188531948121319\\\"' target='\\\"_blank\\\"'>P2pMessage</a>。</span></li> </ol> <ol start='\\\"5\\\"'> <li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api\\\"' target='\\\"_blank\\\"'>wearEngine</a>中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section15604103515412\\\"' target='\\\"_blank\\\"'>getP2pClient</a>方法，获取<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section10175450143316\\\"' target='\\\"_blank\\\"'>P2pClient</a>对象。</span></li> <li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section10826949193413\\\"' target='\\\"_blank\\\"'>sendMessage</a>方法，从手机上的应用发送简短消息到穿戴设备侧对应的应用。设备侧已注册监听消息接收后，即可收到手机发送的消息。</span><p></p><pre class='\\\"typescript\\\"'>// 步骤3 构造设备侧应用参数\\nlet appInfo: wearEngine.AppInfo = {\\n  // 设置设备侧应用的应用信息：包名与指纹\\n  bundleName: '',\\n  fingerprint: ''\\n}\\nlet appParam: wearEngine.P2pAppParam = {\\n  remoteApp: appInfo\\n  // transformLocalAppInfo默认为false，不转换包名指纹\\n}\\n\\n// 设置需要发送的消息内容，长度限制为4096字节\\nlet messageContent: string = 'this is message';\\n\\n// 步骤4 构造消息结构体\\nlet textEncoder: util.TextEncoder = new util.TextEncoder;\\nlet message: wearEngine.P2pMessage = {\\n  content: textEncoder.encodeInto(messageContent)\\n}\\n\\n// 步骤5 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤6 发送消息\\np2pClient.sendMessage(targetDevice.randomId, appParam, message).then((p2pResult) =&gt; {\\n  console.info(`Succeeded in sending message, result is ${p2pResult.code}.`);\\n}).catch((error: BusinessError) =&gt; {\\n  console.error(`Failed to send message. Code is ${error.code}, message is ${error.message}.`);\\n})</pre> <p></p></li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 942,
        "pre": "import { fileIo } from '@kit.CoreFileKit';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]发送文件",
        "parent_text": "  [h2]发送文件 为能正确打开文件描述符，请先导入模块。   参见查询可用穿戴设备章节，获取已连接设备列表。 参见目标设备选择章节，从已连接设备列表中选定需要通信的设备。 构造设备侧应用参数P2pAppParam。   根据文件路径filePath，构造需要发送的文件P2pFile。 调用wearEngine中的getP2pClient方法，获取P2pClient对象。 调用transferFile方法，从手机上的应用发送文件到穿戴设备侧对应的应用。// 步骤3 构造设备侧应用参数\\nlet appInfo: wearEngine.AppInfo = {\\n  // 设置设备侧应用的应用信息：包名与指纹\\n  bundleName: '',\\n  fingerprint: ''\\n}\\nlet appParam: wearEngine.P2pAppParam = {\\n  remoteApp: appInfo\\n  // transformLocalAppInfo默认为false，不转换包名指纹\\n}\\n\\n// 步骤4 构造需要发送的文件\\nlet p2pfile: wearEngine.P2pFile = {\\n  // 设置需要发送的文件路径，其中不能包含'..'\\n  file: fileIo.openSync('')\\n}\\n\\n// 步骤5 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤6 发送指定文件至设备\\np2pClient.transferFile(targetDevice.randomId, appParam, p2pfile, (error: BusinessError, p2pResult: wearEngine.P2pResult) => {\\n  // callback处理逻辑\\n  if (error) {\\n    console.error(`Failed to transfer file. Code is ${error.code}, message is ${error.message}.`);\\n    return;\\n  }\\n  if (p2pResult.code) {\\n    if (p2pResult.code === wearEngine.P2pResultCode.COMMUNICATION_SUCCESS) {\\n      console.info(`Succeeded in transfering file, the result is ${p2pResult.code}.`);\\n    }\\n    console.info(`Failed to transfer file, the error code is ${p2pResult.code}.`);\\n  }\\n  if (p2pResult.progress) {\\n    console.info(`Succeeded in transfering file, the progress is ${p2pResult.progress}.`);\\n  }\\n});\\n\\nfileIo.close(p2pfile.file);   ",
        "import_module": "import { fileIo } from '@kit.CoreFileKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section17422551112517\\\"'> <a name='\\\"section17422551112517\\\"'></a><a name='\\\"zh-cn_topic_0000001073917080_section17422551112517\\\"'></a> <h4>[h2]发送文件</h4> <p>为能正确打开文件描述符，请先导入模块。</p>  <ol> <li><span>参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/query_connected_devices\\\"'>查询可用穿戴设备</a>章节，获取已连接设备列表。</span></li> <li><span>参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/we-device-selection\\\"'>目标设备选择</a>章节，从已连接设备列表中选定需要通信的设备。</span></li> <li><span>构造设备侧应用参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section7874153142020\\\"' target='\\\"_blank\\\"'>P2pAppParam</a>。</span></li> </ol> <ol start='\\\"4\\\"'> <li><span>根据文件路径filePath，构造需要发送的文件<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1223384152\\\"' target='\\\"_blank\\\"'>P2pFile</a>。</span></li> <li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api\\\"' target='\\\"_blank\\\"'>wearEngine</a>中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section15604103515412\\\"' target='\\\"_blank\\\"'>getP2pClient</a>方法，获取<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section10175450143316\\\"' target='\\\"_blank\\\"'>P2pClient</a>对象。</span></li> <li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section16802133114448\\\"' target='\\\"_blank\\\"'>transferFile</a>方法，从手机上的应用发送文件到穿戴设备侧对应的应用。</span><p></p><pre class='\\\"typescript\\\"'>// 步骤3 构造设备侧应用参数\\nlet appInfo: wearEngine.AppInfo = {\\n  // 设置设备侧应用的应用信息：包名与指纹\\n  bundleName: '',\\n  fingerprint: ''\\n}\\nlet appParam: wearEngine.P2pAppParam = {\\n  remoteApp: appInfo\\n  // transformLocalAppInfo默认为false，不转换包名指纹\\n}\\n\\n// 步骤4 构造需要发送的文件\\nlet p2pfile: wearEngine.P2pFile = {\\n  // 设置需要发送的文件路径，其中不能包含'..'\\n  file: fileIo.openSync('')\\n}\\n\\n// 步骤5 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤6 发送指定文件至设备\\np2pClient.transferFile(targetDevice.randomId, appParam, p2pfile, (error: BusinessError, p2pResult: wearEngine.P2pResult) =&gt; {\\n  // callback处理逻辑\\n  if (error) {\\n    console.error(`Failed to transfer file. Code is ${error.code}, message is ${error.message}.`);\\n    return;\\n  }\\n  if (p2pResult.code) {\\n    if (p2pResult.code === wearEngine.P2pResultCode.COMMUNICATION_SUCCESS) {\\n      console.info(`Succeeded in transfering file, the result is ${p2pResult.code}.`);\\n    }\\n    console.info(`Failed to transfer file, the error code is ${p2pResult.code}.`);\\n  }\\n  if (p2pResult.progress) {\\n    console.info(`Succeeded in transfering file, the progress is ${p2pResult.progress}.`);\\n  }\\n});\\n\\nfileIo.close(p2pfile.file);</pre> <p></p></li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 943,
        "pre": "// 步骤3 构造设备侧应用参数\\nlet appInfo: wearEngine.AppInfo = {\\n  // 设置设备侧应用的应用信息：包名与指纹\\n  bundleName: '',\\n  fingerprint: ''\\n}\\nlet appParam: wearEngine.P2pAppParam = {\\n  remoteApp: appInfo\\n  // transformLocalAppInfo默认为false，不转换包名指纹\\n}\\n\\n// 步骤4 构造需要发送的文件\\nlet p2pfile: wearEngine.P2pFile = {\\n  // 设置需要发送的文件路径，其中不能包含'..'\\n  file: fileIo.openSync('')\\n}\\n\\n// 步骤5 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 发送指定文件至设备\\np2pClient.transferFile(targetDevice.randomId, appParam, p2pfile, () => {\\n  // 回调函数执行逻辑\\n})\\n\\n// 步骤6 取消发送文件\\np2pClient.cancelFileTransfer(targetDevice.randomId, appParam, p2pfile).then((p2pResult) => {\\n  if (p2pResult.code === wearEngine.P2pResultCode.COMMUNICATION_SUCCESS) {\\n    console.info(`Succeeded in cancelling transfer file, the result is ${p2pResult.code}.`);\\n  }\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to cancel transfer file. Code is ${error.code}, message is ${error.message}.`);\\n})\\n\\nfileIo.close(p2pfile.file);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用cancelFileTransfer方法，取消从手机上的应用到穿戴设备侧对应的应用的文件发送。 ",
        "import_module": "import { fileIo } from '@kit.CoreFileKit';",
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section67354131415\\\"' target='\\\"_blank\\\"'>cancelFileTransfer</a>方法，取消从手机上的应用到穿戴设备侧对应的应用的文件发送。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 944,
        "pre": "// 步骤3 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤4 构造设备侧应用参数\\nlet appInfo: wearEngine.AppInfo = {\\n  bundleName: '',\\n  fingerprint: ''\\n}\\n// 将设备侧应用参数类定义为appParam\\nlet appParam: wearEngine.P2pAppParam = {\\n  remoteApp: appInfo\\n  // transformLocalAppInfo默认为false，不转换包名指纹\\n}\\n\\n// 步骤5 构造回调函数\\nlet callback = (p2pMessage: wearEngine.P2pMessage) => {\\n  console.info(`Succeeded in receiving message, the message is ${p2pMessage.content}.`);\\n}\\n\\n// 步骤6 订阅监听消息接收事件\\np2pClient.registerMessageReceiver(targetDevice.randomId, appParam, callback).then(() => {\\n  console.info(`Succeeded in registering message receiver.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to register message receiver. Code is ${error.code}, message is ${error.message}.`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用registerMessageReceiver方法，订阅监听消息接收事件。 ",
        "import_module": "import { fileIo } from '@kit.CoreFileKit';",
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section893873771918\\\"' target='\\\"_blank\\\"'>registerMessageReceiver</a>方法，订阅监听消息接收事件。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 945,
        "pre": "// 步骤3 获取P2pClient对象\\nlet p2pClient: wearEngine.P2pClient = wearEngine.getP2pClient(getContext(this));\\n\\n// 步骤4 构造设备侧应用参数\\nlet appInfo: wearEngine.AppInfo = {\\n  bundleName: '',\\n  fingerprint: ''\\n}\\n// 将设备侧应用参数类定义为appParam\\nlet appParam: wearEngine.P2pAppParam = {\\n  remoteApp: appInfo\\n  // transformLocalAppInfo默认为false，不转换包名指纹\\n}\\n\\n// 步骤5 构造回调函数\\nlet callback = (p2pMessage: wearEngine.P2pFile) => {\\n  console.info(`Succeeded in receiving file.`);\\n}\\n\\n// 步骤6 订阅监听文件接收事件\\np2pClient.registerFileReceiver(targetDevice.randomId, appParam, callback).then(() => {\\n  console.info(`Succeeded in registering file receiver.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to register file receiver. Code is ${error.code}, message is ${error.message}.`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用registerFileReceiver方法，订阅监听文件接收事件。 ",
        "import_module": "import { fileIo } from '@kit.CoreFileKit';",
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1899163313713\\\"' target='\\\"_blank\\\"'>registerFileReceiver</a>方法，订阅监听文件接收事件。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/p2p_communication.html"
    },
    {
        "id": 946,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/consistent-type-definitions\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-definitions.html"
    },
    {
        "id": 947,
        "pre": "// 基本类型的定义可以使用type\\nexport type T1 = string;\\n\\n// 默认推荐使用interface 进行对象类型定义\\nexport interface T2 {\\n  x: number;\\n}\\n\\nexport type Foo = string | T2;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-definitions.html"
    },
    {
        "id": 948,
        "pre": "// 默认推荐使用interface 进行对象类型定义\\ntype T = { x: number };",
        "type": "Import",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "// 默认推荐使用interface 进行对象类型定义\\ntype T = { x: number };",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-type-definitions.html"
    },
    {
        "id": 949,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-magic-numbers\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-magic-numbers.html"
    },
    {
        "id": 950,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-set-kia-watermark.html"
    },
    {
        "id": 951,
        "pre": "import { atomicService } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-api-information-attribute.html"
    },
    {
        "id": 952,
        "pre": "import { atomicService } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { window } from '@kit.ArkUI';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-api-information-attribute.html"
    },
    {
        "id": 953,
        "pre": "import { atomicService } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-api-information-attribute.html"
    },
    {
        "id": 954,
        "pre": "\\\"buildOption\\\": {\\n  \\\"nativeLib\\\": {\\n    \\\"headerPath\\\": \\\"src/main/cpp/include\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在本地依赖模块中如存在.h等接口文件，可通过在build-profile.json5文件buildOption/nativeLib/headerPath中指定接口文件目录。 ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166648360__p191181291219\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648360__li2011812917112\\\"'></a><a name='\\\"li2011812917112\\\"'></a>在本地依赖模块中如存在.h等接口文件，可通过在build-profile.json5文件buildOption/nativeLib/headerPath中指定接口文件目录。 </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-so.html"
    },
    {
        "id": 955,
        "pre": "// oh-package.json5\\n\\\"dependencies\\\": { \\n  curl: \\\"1.0.0\\\" \\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "预构建库",
        "parent_text": "预构建库在工程中引用了共享包/本地依赖模块中的so库，编译时，Hvigor会生成cmake Config-file Packages，自动通过cmake find_package引入这些so。开发者只需根据此依赖模块的模块名、so库名，在CMakeLists.txt脚本中以${moduleName::soName}库名称的形式来声明链接。 例如工程依赖了curl共享包，共享包中存在libcurl.so，在oh-package.json5中添加依赖。   在工程的CMakeLists.txt脚本中声明链接： // CMakeLists.txt\\nadd_library(entry SHARED napi_init.cpp)\\n# ${moduleName::soName}.\\ntarget_link_libraries(entry PUBLIC curl::curl)  对于本地模块，HAR仅暴露本模块构建的so库，HSP暴露本模块构建及所依赖的so库。  ",
        "import_module": "// oh-package.json5\\n\\\"dependencies\\\": { \\n  curl: \\\"1.0.0\\\" \\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section312617131919\\\"'><a name='\\\"section312617131919\\\"'></a><a name='\\\"section312617131919\\\"'></a><h4>预构建库</h4><p id='\\\"ZH-CN_TOPIC_0000002166648360__p8856191865118\\\"'>在工程中引用了共享包/本地依赖模块中的so库，编译时，Hvigor会生成cmake <a href='\\\"https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#config-file-packages\\\"' target='\\\"_blank\\\"'>Config-file Packages</a>，自动通过cmake <a href='\\\"https://cmake.org/cmake/help/latest/command/find_package.html#find-package\\\"' target='\\\"_blank\\\"'>find_package</a>引入这些so。开发者只需根据此依赖模块的模块名、so库名，在CMakeLists.txt脚本中以${moduleName::soName}库名称的形式来声明链接。</p> <p id='\\\"ZH-CN_TOPIC_0000002166648360__p6691120105512\\\"'>例如工程依赖了curl共享包，共享包中存在libcurl.so，在oh-package.json5中添加依赖。</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648360__p9580540948\\\"'><span><img originheight='\\\"222\\\"' originwidth='\\\"309\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180503.54402501824226883603166974222600:50001231000000:2800:FAF72E2E2E442F57FC0FAB3FB1F072F49C4F6F38962601985D08674938F57643.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002166648360__p13276135245510\\\"'>在工程的CMakeLists.txt脚本中声明链接：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648360__screen482317104816\\\"'><span rgb(153,153,136);\\\"=\"\" style='\\\"color:'>// CMakeLists.txt</span>\\nadd_library(entry SHARED napi_init.cpp)\\n# ${moduleName::soName}.\\ntarget_link_libraries(entry PUBLIC curl::curl)</pre> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002166648360__note471894219416\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180503.06431700339582517903971889340200:50001231000000:2800:940E34B0D9032FCE209431CF1FA1773DFB0F055450FAAC44A74FD586DC7DF34F.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166648360__p17181142184118\\\"'>对于本地模块，HAR仅暴露本模块构建的so库，HSP暴露本模块构建及所依赖的so库。</p> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-so.html"
    },
    {
        "id": 956,
        "pre": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/enterprise-recoverykey-update.html"
    },
    {
        "id": 957,
        "pre": "import { ifaa } from '@kit.OnlineAuthenticationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n// 开发者根据IIFAA协议构造TLV入参，转换为Uint8Array, 再使用ifaa.getAnonymousIdSync接口。此处new Uint8Array([0])需要替换为开发者定义的用户标识。\\nlet arg = new Uint8Array([0]);\\nlet getAnonIdResult: Uint8Array = ifaa.getAnonymousIdSync(arg);\\n\\n// 开发者需要使用getAnonIdResult服务端获取签名后的开通数据\\n// 开发者将开通数据（IIFAA协议的TLV格式）转换为Uint8Array, 再使用ifaa.register接口。此处new Uint8Array([0])需要替换为有效数据。\\nlet TLV_Register_fp = new Uint8Array([0]);\\nlet registerPromise: Promise<Uint8Array> = ifaa.register(TLV_Register_fp);\\nregisterPromise.then(registerResult => {\\n  console.info(\\\"Succeeded in doing register.\\\");\\n  // 开通成功，开发者获取ifaa.register结果并处理。\\n}).catch((err: BusinessError) =>{\\n  console.error(`Failed to call register. Code: ${err.code}, message: ${err.message}`);\\n  // 开通失败，开发者获取ifaa.register错误并处理。\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "注册IFAA免密身份认证 ",
        "import_module": null,
        "parent": "<li><span>注册IFAA免密身份认证</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/onlineauthentication-ifaa.html"
    },
    {
        "id": 958,
        "pre": "import { fileIo as fs } from '@kit.CoreFileKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { pdfService } from '@kit.PDFKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    this.loadResult = this.pdfDocument.loadDocument(filePath);\\n  }\\n\\n  build() {\\n    Column() {\\n      // 获取为图片并保存到应用沙箱\\n      Button('convertToImage').onClick(async () => {\\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let outputPath = getContext().filesDir + '/output/';\\n          fs.mkdir(outputPath);\\n          // 将所有的页面转化为png图片，并存储在output文件夹里\\n          let res = this.pdfDocument.convertToImage(outputPath, pdfService.ImageFormat.PNG);\\n          hilog.info(0x0000, 'PdfPage', 'convertToImage %{public}s!', res ? 'success' : 'fail');\\n        }\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法，加载PDF文档。 设置要输出图片的文件夹，调用convertToImage方法转化PDF文档所有页面为图片。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section57691356103515\\\"'> <a name='\\\"section57691356103515\\\"'></a><a name='\\\"section57691356103515\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>设置要输出图片的文件夹，调用convertToImage方法转化PDF文档所有页面为图片。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-convert-img.html"
    },
    {
        "id": 959,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-shadow\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-shadow.html"
    },
    {
        "id": 960,
        "pre": "/*eslint no-shadow: \\\"error\\\"*/\\nconst a = '1';\\nexport function b() {\\n  const a1 = '10';\\n  console.info(a1);\\n}\\n\\nexport const c = () => {\\n  const a1 = '10';\\n  console.info(a1);\\n};\\n\\nconsole.info(a);",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-shadow.html"
    },
    {
        "id": 961,
        "pre": "/*eslint no-shadow: \\\"error\\\"*/\\nconst a = '3';\\nexport function b() {\\n  const a = '10';\\n  console.info(a);\\n}\\n\\nexport const c = () => {\\n  const a = '10';\\n  console.info(a);\\n};\\n\\nconsole.info(a);",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-shadow.html"
    },
    {
        "id": 962,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-invalid-void-type\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-invalid-void-type.html"
    },
    {
        "id": 963,
        "pre": "export type NoOp = () => void;\\nexport function noop(): void {\\n  console.info('noop');\\n}\\nexport const trulyUndefined = void Number.MAX_VALUE;\\nexport async function promiseMeSomething(): Promise<void> {\\n  return Promise.reject('value').catch(() => {\\n    console.error('error');\\n  });\\n}\\nexport type StillVoid = void | never;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-invalid-void-type.html"
    },
    {
        "id": 964,
        "pre": "// 不允许使用void作为类型\\nexport type PossibleValues = string | number | void;\\n// 不允许使用void作为类型\\nexport type MorePossibleValues = string | (string | void);\\n\\n// 不允许使用void作为类型\\nexport function logSomething(thing: void) {\\n  return thing;\\n}\\nexport function printArg<T = void>(arg: T) {\\n  return arg;\\n}\\n\\nexport interface Interface {\\n  lambda: () => void;\\n  // 不允许使用void作为类型\\n  prop: void;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-invalid-void-type.html"
    },
    {
        "id": 965,
        "pre": "{\\n  \\\"module\\\":{\\n\\n    // ...\\n\\n    \\\"abilities\\\": [{\\n      \\\"icon\\\": \\\"$media:icon\\\",\\n      \\\"label\\\": \\\"Login\\\",\\n      \\\"skills\\\": [{\\n        \\\"actions\\\": [\\\"ohos.want.action.home\\\"],\\n        \\\"entities\\\": [\\\"entity.system.home\\\"],\\n        \\\"uris\\\": []\\n      }]\\n    }],\\n\\n    // ...\\n\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "abilities对象的内部结构",
        "parent_text": "  abilities对象的内部结构 表8 abilities对象的内部结构说明     属性名称 含义 数据类型 是否可缺省    process 运行应用程序或Ability的进程名称。如果在deviceConfig标记中配置了进程，则应用程序的所有能力都在此进程中运行。您还可以为特定能力设置流程属性，以便该能力可以在此流程中运行。如果此属性设置为与其他应用程序相同的进程名称，则所有这些应用程序可以在同一进程中运行，前提是他们具有相同的联合用户ID和相同的签名。该标签最大字节数为31个字节。 字符串 可缺省，缺省值为空。   name 标识Ability名称。取值可采用反向域名方式表示，由包名和类名组成，如\\\"com.example.myapplication.EntryAbility\\\"；也可采用\\\".\\\"开头的类名方式表示，如\\\".EntryAbility\\\"。 Ability的名称，需在一个应用的范围内保证唯一。说明：在使用DevEco Studio新建项目时，默认生成首个Ability的配置，即\\\"config.json\\\"中\\\"EntryAbility\\\"的配置。如使用其他IDE工具，可自定义名称。该标签最大长度为127个字节。 字符串 不可缺省。   description 标识对Ability的描述。取值可以是描述性内容，也可以是对描述性内容的资源索引，以支持多语言。该标签最大长度为255个字节。 字符串 可缺省，缺省值为空。   icon 标识Ability图标资源文件的索引。取值示例：$media:ability_icon。如果在该Ability的skills属性中，actions的取值包含 \\\"action.system.home\\\"，entities取值中包含\\\"entity.system.home\\\"，则该Ability的icon将同时作为应用的icon。如果存在多个符合条件的Ability，则取位置靠前的Ability的icon作为应用的icon。 说明：应用的\\\"icon\\\"和\\\"label\\\"是用户可感知配置项，需要区别于当前所有已有的应用\\\"icon\\\"或\\\"label\\\"（至少有一个不同）。 字符串 可缺省，缺省值为空。   label 标识Ability对用户显示的名称。取值是对该名称的资源索引，支持多语言，例：$string:ability_label。如果在该Ability的skills属性中，actions的取值包含 \\\"action.system.home\\\"，entities取值中包含\\\"entity.system.home\\\"，则该Ability的label将同时作为应用的label。如果存在多个符合条件的Ability，则取位置靠前的Ability的label作为应用的label。 说明： 应用的\\\"icon\\\"和\\\"label\\\"是用户可感知配置项，需要区别于当前所有已有的应用\\\"icon\\\"或\\\"label\\\"（至少有一个不同）。该标签为资源文件中定义的字符串的引用，或以\\\"{}\\\"包括的字符串。该标签最大长度为255个字节。 字符串 可缺省，缺省值为空。   uri 标识Ability的统一资源标识符。该标签最大长度为255个字节。 字符串 可缺省，对于data类型的Ability不可缺省。   launchType 标识Ability的启动模式，支持\\\"multiton\\\"和\\\"singleton\\\"两种模式： multiton：表示该Ability可以有多实例。该模式适用于大多数应用场景。 singleton：表示该Ability在所有任务栈中仅可以有一个实例。例如，具有全局唯一性的呼叫来电界面即采用\\\"singleton\\\"模式。该标签仅适用于默认设备、平板、智慧屏、车机、智能穿戴。 字符串 可缺省，缺省值为\\\"singleton\\\"。   visible 标识Ability是否可以被其他应用调用。 true：可以被其他应用调用。 false：不能被其他应用调用，包括无法被aa工具命令拉起应用。 布尔类型 可缺省，缺省值为\\\"false\\\"。   permissions 标识其他应用的Ability调用此Ability时需要申请的权限集合，一个数组元素为一个权限名称。通常采用反向域名格式（最大255字节），取值为系统预定义的权限。 字符串数组 可缺省，缺省值为空。   skills 标识Ability能够接收的want的特征。 对象数组 可缺省，缺省值为空。   deviceCapability 标识Ability运行时要求设备具有的能力，采用字符串数组的格式表示。该标签为数组，支持最多配置512个元素，单个元素最大字节长度为64。 字符串数组 可缺省，缺省值为空。   metaData 元数据。 对象 可缺省，缺省值为空。   type 标识Ability的类型。取值范围如下： page：表示基于Page模板开发的FA，用于提供与用户交互的能力。 service：表示基于Service模板开发的PA，用于提供后台运行任务的能力。 data：表示基于Data模板开发的PA，用于对外部提供统一的数据访问对象。 CA：表示支持其他应用以窗口方式调起该Ability。 字符串 不可缺省。   orientation 标识该Ability的显示模式。该标签仅适用于page类型的Ability。取值范围如下： unspecified：由系统自动判断显示方向。 landscape：横屏模式。 portrait：竖屏模式。 followRecent：跟随栈中最近的应用。 字符串 可缺省，缺省值为\\\"unspecified\\\"。   backgroundModes 标识后台服务的类型，可以为一个服务配置多个后台服务类型。该标签仅适用于service类型的Ability。取值范围如下： dataTransfer：通过网络/对端设备进行数据下载、备份、分享、传输等。 audioPlayback：音频播放。 audioRecording：录音。 pictureInPicture：画中画、小窗口播放视频。 voip：音视频电话、VOIP。 location：定位、导航。 bluetoothInteraction：蓝牙扫描、连接、传输。 wifiInteraction：Wi-Fi扫描、连接、传输。 screenFetch：录屏、截屏。 multiDeviceConnection：多设备互联。 字符串数组 可缺省，缺省值为空。   grantPermission 指定是否可以向Ability内任何数据授予权限。 布尔值 可缺省，缺省值为空。   readPermission 标识读取Ability的数据所需的权限。该标签仅适用于data类型的Ability。取值为长度不超过255字节的字符串。该标签仅适用于默认设备、平板、智慧屏、车机、智能穿戴。 字符串 可缺省，缺省为空。   writePermission 标识向Ability写数据所需的权限。该标签仅适用于data类型的Ability。取值为长度不超过255字节的字符串。 字符串 可缺省，缺省为空。   configChanges 标识Ability关注的系统配置集合。当已关注的配置发生变更后，Ability会收到onConfigurationUpdated回调。取值范围： mcc：表示IMSI移动设备国家/地区代码（MCC）发生变更。典型场景：检测到SIM并更新MCC。 mnc：IMSI移动设备网络代码（MNC）发生变更。典型场景：检测到SIM并更新MNC。 locale：表示语言区域发生变更。典型场景：用户已为设备文本的文本显示选择新的语言类型。 layout：表示屏幕布局发生变更。典型场景：当前有不同的显示形态都处于活跃状态。 fontSize：表示字号发生变更。典型场景：用户已设置新的全局字号。 orientation：表示屏幕方向发生变更。典型场景：用户旋转设备。 density：表示显示密度发生变更。典型场景：用户可能指定不同的显示比例，或当前有不同的显示形态同时处于活跃状态。 size：显示窗口大小发生变更。 smallestSize：显示窗口较短边的边长发生变更。 colorMode：颜色模式发生变更。 字符串数组 可缺省，缺省为空。   mission 标识Ability指定的任务栈。该标签仅适用于page类型的Ability。默认情况下应用中所有Ability同属一个任务栈。 字符串 可缺省，缺省为应用的包名。   targetAbility 标识当前Ability重用的目标Ability。该标签仅适用于page类型的Ability。如果配置了targetAbility属性，则当前Ability（即别名Ability）的属性中仅name、icon、label、visible、permissions、skills生效，其他属性均沿用targetAbility中的属性值。目标Ability必须与别名Ability在同一应用中，且在配置文件中目标Ability必须在别名之前进行声明。 字符串 可缺省，缺省值为空。表示当前Ability不是一个别名Ability。   formsEnabled 标识Ability是否支持卡片（forms）功能。该标签仅适用于page类型的Ability。 true：支持卡片能力。 false：不支持卡片能力。 布尔值 可缺省，缺省值为false。   forms 标识服务卡片的属性。该标签仅当formsEnabled为\\\"true\\\"时，才能生效。 对象数组 可缺省，缺省值为空。   srcLanguage Ability开发语言的类型，开发者创建工程时由开发者手动选择开发语言。取值如下：\\\"js\\\"、\\\"ets\\\"、\\\"java\\\"。 字符串 可缺省，缺省值为\\\"js\\\"。   srcPath 该标签标识Ability对应的JS组件代码路径，该标签最大长度为127字节。 字符串 不可缺省。   uriPermission 标识该Ability有权访问的应用程序数据。此属性由模式和路径子属性组成。此属性仅对类型提供者的能力有效。 对象 可缺省，缺省值为空。   startWindowIcon 标识该Ability启动页面图标资源文件的索引。该标签仅适用于page类型的Ability。取值示例：$media:icon。 字符串 可缺省，缺省值为空。   startWindowBackground 标识该Ability启动页面背景颜色资源文件的索引。该标签仅适用于page类型的Ability。取值示例：$color:red。 字符串 可缺省，缺省值为空。   removeMissionAfterTerminate 该标签标识Ability销毁后是否从任务列表中移除任务。该标签仅适用于page类型的Ability。true表示销毁后移除任务， false表示销毁后不移除任务。 布尔值 可缺省，缺省值为false。    不允许应用隐藏入口图标 系统对无图标应用实施严格管控，防止一些恶意应用故意配置无入口图标，导致用户找不到软件所在的位置，无法操作卸载应用，在一定程度上保证用户终端设备的安全。 入口图标的设置: 需要在配置文件（config.json）中abilities配置下设置icon，label以及skills，而且skills的配置下必须同时包含“ohos.want.action.home” 和 “entity.system.home”。  如果应用确需隐藏入口图标，需要配置AllowAppDesktopIconHide应用特权。详细的入口图标及入口标签的显示规则如下。  HAP中包含Page类型的PageAbility        配置文件（config.json）中abilities配置中设置了入口图标          该应用没有隐藏图标的特权            系统将使用该PageAbility配置的icon作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到该PageAbility首页。 系统将使用该PageAbility配置的label作为入口标签，并显示在桌面上（如果没有配置label，返回包名）。  该应用具有隐藏图标的特权            桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。   配置文件（config.json）中abilities配置中未设置入口图标          该应用没有隐藏图标的特权            系统将使用系统默认图标作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到应用管理中对应的应用详情页面（参考下图）。 系统将使用应用的包名作为入口标签，并显示在桌面上。  该应用具有隐藏图标的特权            桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。    HAP中不包含Page类型的PageAbility        该应用没有隐藏图标的特权          系统将使用系统默认图标作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到应用管理中对应的应用详情页面（参考下图）。 系统将使用应用的包名作为入口标签，并显示在桌面上。  该应用具有隐藏图标的特权          桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。    图1 应用的详情页示意图  注：应用详情页面中显示的label可能与桌面上显示的不同。如果非Page类型的PageAbility配置了入口图标和label，那么详情页中显示的即为配置的。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"abilities对象的内部结构\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213413013__abilities%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84\\\"'></a><a name='\\\"abilities%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84\\\"'></a> <h4>abilities对象的内部结构</h4> <p><strong>表8</strong> <strong>abilities对象的内部结构说明</strong></p> <div class='\\\"tablenoborder\\\"'> <table> <thead> <tr> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.1.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>属性名称</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.1.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>含义</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.1.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>数据类型</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.1.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>是否可缺省</th> </tr> </thead> <tbody><tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>process</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>运行应用程序或Ability的进程名称。如果在deviceConfig标记中配置了进程，则应用程序的所有能力都在此进程中运行。您还可以为特定能力设置流程属性，以便该能力可以在此流程中运行。如果此属性设置为与其他应用程序相同的进程名称，则所有这些应用程序可以在同一进程中运行，前提是他们具有相同的联合用户ID和相同的签名。该标签最大字节数为31个字节。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>name</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability名称。取值可采用反向域名方式表示，由包名和类名组成，如\\\"com.example.myapplication.EntryAbility\\\"；也可采用\\\".\\\"开头的类名方式表示，如\\\".EntryAbility\\\"。</p> <p>Ability的名称，需在一个应用的范围内保证唯一。说明：在使用DevEco Studio新建项目时，默认生成首个Ability的配置，即\\\"config.json\\\"中\\\"EntryAbility\\\"的配置。如使用其他IDE工具，可自定义名称。该标签最大长度为127个字节。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>不可缺省。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>description</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识对Ability的描述。取值可以是描述性内容，也可以是对描述性内容的资源索引，以支持多语言。该标签最大长度为255个字节。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>icon</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability图标资源文件的索引。取值示例：$media:ability_icon。如果在该Ability的skills属性中，actions的取值包含 \\\"action.system.home\\\"，entities取值中包含\\\"entity.system.home\\\"，则该Ability的icon将同时作为应用的icon。如果存在多个符合条件的Ability，则取位置靠前的Ability的icon作为应用的icon。</p> <p>说明：应用的\\\"icon\\\"和\\\"label\\\"是用户可感知配置项，需要区别于当前所有已有的应用\\\"icon\\\"或\\\"label\\\"（至少有一个不同）。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>label</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability对用户显示的名称。取值是对该名称的资源索引，支持多语言，例：$string:ability_label。如果在该Ability的skills属性中，actions的取值包含 \\\"action.system.home\\\"，entities取值中包含\\\"entity.system.home\\\"，则该Ability的label将同时作为应用的label。如果存在多个符合条件的Ability，则取位置靠前的Ability的label作为应用的label。</p> <p>说明： 应用的\\\"icon\\\"和\\\"label\\\"是用户可感知配置项，需要区别于当前所有已有的应用\\\"icon\\\"或\\\"label\\\"（至少有一个不同）。该标签为资源文件中定义的字符串的引用，或以\\\"{}\\\"包括的字符串。该标签最大长度为255个字节。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>uri</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识Ability的统一资源标识符。该标签最大长度为255个字节。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，对于data类型的Ability不可缺省。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>launchType</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability的启动模式，支持\\\"multiton\\\"和\\\"singleton\\\"两种模式：</p> <p>multiton：表示该Ability可以有多实例。该模式适用于大多数应用场景。</p> <p>singleton：表示该Ability在所有任务栈中仅可以有一个实例。例如，具有全局唯一性的呼叫来电界面即采用\\\"singleton\\\"模式。该标签仅适用于默认设备、平板、智慧屏、车机、智能穿戴。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为\\\"singleton\\\"。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>visible</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability是否可以被其他应用调用。</p> <p>true：可以被其他应用调用。</p> <p>false：不能被其他应用调用，包括无法被aa工具命令拉起应用。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>布尔类型</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为\\\"false\\\"。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>permissions</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识其他应用的Ability调用此Ability时需要申请的权限集合，一个数组元素为一个权限名称。通常采用反向域名格式（最大255字节），取值为系统预定义的权限。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串数组</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>skills</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识Ability能够接收的want的特征。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>对象数组</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>deviceCapability</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识Ability运行时要求设备具有的能力，采用字符串数组的格式表示。该标签为数组，支持最多配置512个元素，单个元素最大字节长度为64。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串数组</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>metaData</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>元数据。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>对象</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>type</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability的类型。取值范围如下：</p> <p>page：表示基于Page模板开发的FA，用于提供与用户交互的能力。</p> <p>service：表示基于Service模板开发的PA，用于提供后台运行任务的能力。</p> <p>data：表示基于Data模板开发的PA，用于对外部提供统一的数据访问对象。</p> <p>CA：表示支持其他应用以窗口方式调起该Ability。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>不可缺省。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>orientation</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识该Ability的显示模式。该标签仅适用于page类型的Ability。取值范围如下：</p> <p>unspecified：由系统自动判断显示方向。</p> <p>landscape：横屏模式。</p> <p>portrait：竖屏模式。</p> <p>followRecent：跟随栈中最近的应用。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为\\\"unspecified\\\"。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>backgroundModes</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识后台服务的类型，可以为一个服务配置多个后台服务类型。该标签仅适用于service类型的Ability。取值范围如下：</p> <p>dataTransfer：通过网络/对端设备进行数据下载、备份、分享、传输等。</p> <p>audioPlayback：音频播放。</p> <p>audioRecording：录音。</p> <p>pictureInPicture：画中画、小窗口播放视频。</p> <p>voip：音视频电话、VOIP。</p> <p>location：定位、导航。</p> <p>bluetoothInteraction：蓝牙扫描、连接、传输。</p> <p>wifiInteraction：Wi-Fi扫描、连接、传输。</p> <p>screenFetch：录屏、截屏。</p> <p>multiDeviceConnection：多设备互联。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串数组</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>grantPermission</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>指定是否可以向Ability内任何数据授予权限。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>布尔值</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>readPermission</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识读取Ability的数据所需的权限。该标签仅适用于data类型的Ability。取值为长度不超过255字节的字符串。该标签仅适用于默认设备、平板、智慧屏、车机、智能穿戴。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>writePermission</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识向Ability写数据所需的权限。该标签仅适用于data类型的Ability。取值为长度不超过255字节的字符串。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>configChanges</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability关注的系统配置集合。当已关注的配置发生变更后，Ability会收到onConfigurationUpdated回调。取值范围：</p> <p>mcc：表示IMSI移动设备国家/地区代码（MCC）发生变更。典型场景：检测到SIM并更新MCC。</p> <p>mnc：IMSI移动设备网络代码（MNC）发生变更。典型场景：检测到SIM并更新MNC。</p> <p>locale：表示语言区域发生变更。典型场景：用户已为设备文本的文本显示选择新的语言类型。</p> <p>layout：表示屏幕布局发生变更。典型场景：当前有不同的显示形态都处于活跃状态。</p> <p>fontSize：表示字号发生变更。典型场景：用户已设置新的全局字号。</p> <p>orientation：表示屏幕方向发生变更。典型场景：用户旋转设备。</p> <p>density：表示显示密度发生变更。典型场景：用户可能指定不同的显示比例，或当前有不同的显示形态同时处于活跃状态。</p> <p>size：显示窗口大小发生变更。</p> <p>smallestSize：显示窗口较短边的边长发生变更。</p> <p>colorMode：颜色模式发生变更。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串数组</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>mission</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识Ability指定的任务栈。该标签仅适用于page类型的Ability。默认情况下应用中所有Ability同属一个任务栈。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省为应用的包名。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>targetAbility</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识当前Ability重用的目标Ability。该标签仅适用于page类型的Ability。如果配置了targetAbility属性，则当前Ability（即别名Ability）的属性中仅name、icon、label、visible、permissions、skills生效，其他属性均沿用targetAbility中的属性值。目标Ability必须与别名Ability在同一应用中，且在配置文件中目标Ability必须在别名之前进行声明。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。表示当前Ability不是一个别名Ability。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>formsEnabled</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>标识Ability是否支持卡片（forms）功能。该标签仅适用于page类型的Ability。</p> <p>true：支持卡片能力。</p> <p>false：不支持卡片能力。</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>布尔值</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为false。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>forms</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识服务卡片的属性。该标签仅当formsEnabled为\\\"true\\\"时，才能生效。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>对象数组</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>srcLanguage</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>Ability开发语言的类型，开发者创建工程时由开发者手动选择开发语言。取值如下：\\\"js\\\"、\\\"ets\\\"、\\\"java\\\"。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为\\\"js\\\"。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>srcPath</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>该标签标识Ability对应的JS组件代码路径，该标签最大长度为127字节。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>不可缺省。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>uriPermission</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识该Ability有权访问的应用程序数据。此属性由模式和路径子属性组成。此属性仅对类型提供者的能力有效。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>对象</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>startWindowIcon</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识该Ability启动页面图标资源文件的索引。该标签仅适用于page类型的Ability。取值示例：$media:icon。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>startWindowBackground</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>标识该Ability启动页面背景颜色资源文件的索引。该标签仅适用于page类型的Ability。取值示例：$color:red。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>字符串</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为空。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>removeMissionAfterTerminate</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>该标签标识Ability销毁后是否从任务列表中移除任务。该标签仅适用于page类型的Ability。true表示销毁后移除任务， false表示销毁后不移除任务。</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>布尔值</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'>可缺省，缺省值为false。</td> </tr> </tbody></table> </div> <p><strong>不允许应用隐藏入口图标</strong></p> <p>系统对无图标应用实施严格管控，防止一些恶意应用故意配置无入口图标，导致用户找不到软件所在的位置，无法操作卸载应用，在一定程度上保证用户终端设备的安全。</p> <p><strong>入口图标的设置:</strong> 需要在配置文件（config.json）中abilities配置下设置icon，label以及skills，而且skills的配置下必须同时包含“ohos.want.action.home” 和 “entity.system.home”。</p>  <p>如果应用确需隐藏入口图标，需要配置AllowAppDesktopIconHide应用特权。详细的入口图标及入口标签的显示规则如下。</p> <ul> <li>HAP中包含Page类型的PageAbility       <ul> <li>配置文件（config.json）中abilities配置中设置了入口图标         <ul> <li>该应用没有隐藏图标的特权           <ul> <li>系统将使用该PageAbility配置的icon作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到该PageAbility首页。</li> <li>系统将使用该PageAbility配置的label作为入口标签，并显示在桌面上（如果没有配置label，返回包名）。</li> </ul></li> <li>该应用具有隐藏图标的特权           <ul> <li>桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。</li> </ul></li> </ul></li> <li>配置文件（config.json）中abilities配置中未设置入口图标         <ul> <li>该应用没有隐藏图标的特权           <ul> <li>系统将使用系统默认图标作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到应用管理中对应的应用详情页面（参考下图）。</li> <li>系统将使用应用的包名作为入口标签，并显示在桌面上。</li> </ul></li> <li>该应用具有隐藏图标的特权           <ul> <li>桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。</li> </ul></li> </ul></li> </ul></li> <li>HAP中不包含Page类型的PageAbility       <ul> <li>该应用没有隐藏图标的特权         <ul> <li>系统将使用系统默认图标作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到应用管理中对应的应用详情页面（参考下图）。</li> <li>系统将使用应用的包名作为入口标签，并显示在桌面上。</li> </ul></li> <li>该应用具有隐藏图标的特权         <ul> <li>桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。</li> </ul></li> </ul></li> </ul> <p><strong>图1</strong> 应用的详情页示意图</p> <p><span><img originheight='\\\"640\\\"' originwidth='\\\"360\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115817.29782297244685389525415282902717:50001231000000:2800:ACAA5B948B205272D9E1B730595DF268BEAA3A4AE5B12362361EE4923D5EE925.jpg\\\"'/></span></p> <p>注：应用详情页面中显示的label可能与桌面上显示的不同。如果非Page类型的PageAbility配置了入口图标和label，那么详情页中显示的即为配置的。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/module-structure.html"
    },
    {
        "id": 966,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/touch-target-size\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_touch-target-size.html"
    },
    {
        "id": 967,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    RelativeContainer() {\\n      Text('message').responseRegion({width: 60, height: 60})\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_touch-target-size.html"
    },
    {
        "id": 968,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    RelativeContainer() {\\n      Text('message').responseRegion({width: 27, height: 40})\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_touch-target-size.html"
    },
    {
        "id": 969,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { MapComponent, mapCommon, map } from '@kit.MapKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-camera.html"
    },
    {
        "id": 970,
        "pre": "// 设置最小偏好缩放级别，范围为[2, 20] \\nthis.mapController.setMinZoom(6); \\n// 设置最大偏好缩放级别，范围为[2, 20] \\nthis.mapController.setMaxZoom(14);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]设置相机最大/最小偏好缩放级别",
        "parent_text": "  [h2]设置相机最大/最小偏好缩放级别  ",
        "import_module": "import { MapComponent, mapCommon, map } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section452mcpsimp\\\"'> <a name='\\\"section452mcpsimp\\\"'></a><a name='\\\"section452mcpsimp\\\"'></a> <h4>[h2]设置相机最大/最小偏好缩放级别</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-camera.html"
    },
    {
        "id": 971,
        "pre": "let bounds: mapCommon.LatLngBounds = {\\n  northeast: {\\n    latitude: 31,\\n    longitude: 118\\n  },\\n  southwest: {\\n    latitude: 30,\\n    longitude: 113\\n  }\\n};\\nthis.mapController.setLatLngBounds(bounds);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]设置地图相机的边界",
        "parent_text": "  [h2]设置地图相机的边界 Map Kit支持设置地图相机的边界。通过setLatLngBounds(bounds: mapCommon.LatLngBounds)接口指定一个LatLngBounds来约束相机目标，使用户移动地图时，相机目标不会移出此边界。当设置参数为空时，地图相机的边界清除。  ",
        "import_module": "import { MapComponent, mapCommon, map } from '@kit.MapKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section41218171513\\\"'> <a name='\\\"section41218171513\\\"'></a><a name='\\\"section41218171513\\\"'></a> <h4>[h2]设置地图相机的边界</h4> <p>Map Kit支持设置地图相机的边界。通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section14990184514712\\\"' target='\\\"_blank\\\"'>setLatLngBounds</a>(bounds: <a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section96341159111320\\\"' target='\\\"_blank\\\"'>mapCommon.LatLngBounds</a>)接口指定一个<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section96341159111320\\\"' target='\\\"_blank\\\"'>LatLngBounds</a>来约束相机目标，使用户移动地图时，相机目标不会移出此边界。当设置参数为空时，地图相机的边界清除。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-camera.html"
    },
    {
        "id": 972,
        "pre": "import { faceDetector } from '@kit.CoreVisionKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "在使用人脸检测时，将实现人脸检测相关的类添加至工程。 ",
        "import_module": "import { faceDetector } from '@kit.CoreVisionKit';",
        "parent": "<li><span>在使用人脸检测时，将实现人脸检测相关的类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-face-detector.html"
    },
    {
        "id": 973,
        "pre": "import { faceDetector } from '@kit.CoreVisionKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State chooseImage: PixelMap | undefined = undefined\\n  @State dataValues: string = ''\\n\\n  build() {\\n    Column() {\\n      Image(this.chooseImage)\\n        .objectFit(ImageFit.Fill)\\n        .height('60%')\\n      Text(this.dataValues)\\n        .copyOption(CopyOptions.LocalDevice)\\n        .height('15%')\\n        .margin(10)\\n        .width('60%')\\n      Button('选择图片')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          // 拉起图库\\n          this.selectImage()\\n        })\\n      Button('人脸检测')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          if(!this.chooseImage) {\\n            hilog.error(0x0000, 'faceDetectorSample', \\\"Failed to detect face.\\\");\\n            return;\\n          }\\n          // 调用人脸检测接口\\n          faceDetector.init();\\n          let visionInfo: faceDetector.VisionInfo = {\\n            pixelMap: this.chooseImage,\\n          };\\n          faceDetector.detect(visionInfo)\\n            .then((data: faceDetector.Face[]) => {\\n              if (data.length === 0) {\\n                this.dataValues = \\\"No face is detected in the image. Select an image that contains a face.\\\";\\n              } else {\\n                let faceString = JSON.stringify(data);\\n                hilog.info(0x0000, 'faceDetectorSample', \\\"faceString data is \\\" + faceString);\\n                this.dataValues = faceString;\\n              }\\n            })\\n            .catch((error: BusinessError) => {\\n              hilog.error(0x0000, 'faceDetectorSample', `Face detection failed. Code: ${error.code}, message: ${error.message}`);\\n              this.dataValues = `Error: ${error.message}`;\\n            });\\n          faceDetector.release();\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  private async selectImage() {\\n    let uri = await this.openPhoto()\\n    if (uri === undefined) {\\n      hilog.error(0x0000, 'faceDetectorSample', \\\"Failed to get uri.\\\");\\n    }\\n    this.loadImage(uri);\\n  }\\n\\n  private openPhoto(): Promise<string> {\\n    return new Promise<string>((resolve) => {\\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\\n      photoPicker.select({\\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\\n        maxSelectNumber: 1\\n      }).then(res => {\\n        resolve(res.photoUris[0])\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0000, 'faceDetectorSample', `Failed to get photo image uri.code：${err.code}，message：${err.message}`);\\n        resolve('');\\n      })\\n    })\\n  }\\n\\n  private loadImage(name: string) {\\n    setTimeout(async () => {\\n      let imageSource: image.ImageSource | undefined = undefined;\\n      let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\\n      imageSource = image.createImageSource(fileSource.fd);\\n      this.chooseImage = await imageSource.createPixelMap();\\n      this.dataValues = \\\"\\\";\\n      hilog.info(0x0000, 'faceDetectorSample', 'this.chooseImage:', this.chooseImage);\\n    }, 100\\n    )\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例 点击“选择图片”按钮，触发AI人脸检测功能。   ",
        "import_module": "import { faceDetector } from '@kit.CoreVisionKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section7289852134716\\\"'> <a name='\\\"section7289852134716\\\"'></a><a name='\\\"section7289852134716\\\"'></a> <h4>开发实例</h4> <p>点击“选择图片”按钮，触发AI人脸检测功能。</p>  <p></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-face-detector.html"
    },
    {
        "id": 974,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/no-multi-spaces\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-multi-spaces.html"
    },
    {
        "id": 975,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-polygon.html"
    },
    {
        "id": 976,
        "pre": "import {bookParser} from '@kit.ReaderKit';\\nimport {image} from '@kit.ImageKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-book-info.html"
    },
    {
        "id": 977,
        "pre": "import { safetyDetect } from '@kit.DeviceSecurityKit';\\nimport { BusinessError } from '@ohos.base';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Device Security Kit模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Device Security Kit模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-sysintegrity-check.html"
    },
    {
        "id": 978,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-query-tags.html"
    },
    {
        "id": 979,
        "pre": "\\\"dependencies\\\": {\\n  \\\"library\\\": \\\"file:../library\\\",\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "引用方式1：引用本地工程的其他module。 源码调试：关联本地模块源码进行调试，此时在对应module源码上进行调试。",
        "import_module": "\\\"dependencies\\\": {\\n  \\\"library\\\": \\\"file:../library\\\",\\n}",
        "parent": "<li id='\\\"li13314105365417\\\"'><a name='\\\"ZH-CN_TOPIC_0000002166648516__li13314105365417\\\"'></a><a name='\\\"li13314105365417\\\"'></a>引用方式1：引用本地工程的其他module。 <p id='\\\"ZH-CN_TOPIC_0000002166648516__p53155714545\\\"'>源码调试：关联本地模块源码进行调试，此时在对应module源码上进行调试。</p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-source-code-debugging.html"
    },
    {
        "id": 980,
        "pre": "settings set -- target.source-map {old-path} {new-path}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "DevEco Studio调试应用时会优先加载配置的so文件，本地so文件包含调试信息时，开发者可以正常调试源码。由于so的源码文件信息为编译时的文件路径，若与本地的源码文件路径不一致时，可以在LLDB Startup Commands页签中添加命令做映射，示例如下。也可以通过选择单个文件关联，具体请参考HAR源码调试。  old-path：编译时的文件路径。 new-path：本地的源码文件路径。  ",
        "import_module": "settings set -- target.source-map {old-path} {new-path}",
        "parent": "<li id='\\\"li1244713645013\\\"'>DevEco Studio调试应用时会优先加载配置的so文件，本地so文件包含调试信息时，开发者可以正常调试源码。由于so的源码文件信息为编译时的文件路径，若与本地的源码文件路径不一致时，可以在<strong>LLDB Startup Commands</strong>页签中添加命令做映射，示例如下。也可以通过选择单个文件关联，具体请参考<a href='\\\"#section639484018129\\\"'>HAR源码调试</a>。 <ul id='\\\"ZH-CN_TOPIC_0000002166648516__ul7467719155611\\\"'> <li id='\\\"li17467119195612\\\"'>old-path：编译时的文件路径。</li> <li id='\\\"li1233017408572\\\"'>new-path：本地的源码文件路径。</li> </ul> <p id='\\\"ZH-CN_TOPIC_0000002166648516__p433020378375\\\"'><span><img originheight='\\\"253\\\"' originwidth='\\\"660\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180534.78795766042798999754613557826410:50001231000000:2800:820A61DCAD23F8B30D7D6425A55BC1CD15A6F7CAE2BE7E0805AD28CEB61D534B.png\\\"'/></span></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-source-code-debugging.html"
    },
    {
        "id": 981,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-set-cache-count-for-lazyforeach-grid\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-set-cache-count-for-lazyforeach-grid.html"
    },
    {
        "id": 982,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  // 数据源\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear() {\\n    for (let i = 1; i < 1000; i++) {\\n      this.data.pushData(i);\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 5 }) {\\n      Grid() {\\n        LazyForEach(this.data, (item: number) => {\\n          GridItem() {\\n            // 使用可复用自定义组件\\n            // 业务逻辑\\n          }\\n        }, (item: string) => item)\\n      }\\n      // 设置GridItem的缓存数量\\n      .cachedCount(2)\\n      .columnsTemplate('1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(10)\\n      .margin(10)\\n      .height(500)\\n      .backgroundColor(0xFAEEE0)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-set-cache-count-for-lazyforeach-grid.html"
    },
    {
        "id": 983,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  // 数据源\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear() {\\n    for (let i = 1; i < 1000; i++) {\\n      this.data.pushData(i);\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 5 }) {\\n      Grid() {\\n        LazyForEach(this.data, (item: number) => {\\n          GridItem() {\\n            // 使用可复用自定义组件\\n            // 业务逻辑\\n          }\\n        }, (item: string) => item)\\n      }\\n      // 未设置GridItem的缓存数量\\n      .columnsTemplate('1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(10)\\n      .margin(10)\\n      .height(500)\\n      .backgroundColor(0xFAEEE0)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-set-cache-count-for-lazyforeach-grid.html"
    },
    {
        "id": 984,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-replace-nested-reusable-component-by-builder\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui--replace-reusable-by-builder.html"
    },
    {
        "id": 985,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 30; index++) {\\n      this.data.pushData(index.toString())\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        LazyForEach(this.data, (item: string) => {\\n          ListItem() {\\n            //  正例\\n            ChildComponent({ desc: item })\\n          }\\n        }, (item: string) => item)\\n      }\\n      .height('100%')\\n      .width('100%')\\n    }\\n    .width('100%')\\n  }\\n}\\n\\n// 正例 使用组件复用\\n@Reusable\\n@Component\\nstruct ChildComponent {\\n  @State desc: string = '';\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.desc = params.desc as string;\\n  }\\n\\n  build() {\\n    Column() {\\n      // 使用@Builder，可以减少自定义组件创建和渲染的耗时\\n      ChildComponentBuilder({ paramA: this.desc })\\n    }\\n    .width('100%')\\n  }\\n}\\n\\nclass Temp {\\n  paramA: string = '';\\n}\\n\\n@Builder\\nfunction ChildComponentBuilder($$: Temp) {\\n  Column() {\\n    // 此处使用`${}`来进行按引用传递，让@Builder感知到数据变化，进行UI刷新\\n    Text(`子组件 + ${$$.paramA}`)\\n      .fontSize(30)\\n      .fontWeight(30)\\n  }\\n  .width('100%')\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui--replace-reusable-by-builder.html"
    },
    {
        "id": 986,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear(): void {\\n    for (let index = 0; index < 30; index++) {\\n      this.data.pushData(index.toString())\\n    }\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        LazyForEach(this.data, (item: string) => {\\n          ListItem() {\\n            //反例 使用自定义组件\\n            ComponentA({ desc: item })\\n          }\\n        }, (item: string) => item)\\n      }\\n      .height('100%')\\n      .width('100%')\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nstruct ComponentA {\\n  @State desc: string = '';\\n\\n  aboutToReuse(params: ESObject): void {\\n    this.desc = params.desc as string;\\n  }\\n\\n  build() {\\n    // 在复用组件中嵌套使用自定义组件\\n    ComponentB({ desc: this.desc })\\n  }\\n}\\n\\n\\n@Component\\nstruct ComponentB {\\n  @State desc: string = '';\\n\\n  // 嵌套的组件中也需要实现aboutToReuse来进行UI的刷新\\n  aboutToReuse(params: ESObject): void {\\n    this.desc = params.desc as string;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('子组件' + this.desc)\\n        .fontSize(30)\\n        .fontWeight(30)\\n    }\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui--replace-reusable-by-builder.html"
    },
    {
        "id": 987,
        "pre": "import { navigationInfoMgr } from '@kit.CarKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": "import { navigationInfoMgr } from '@kit.CarKit';",
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-register-sys-navi-listener.html"
    },
    {
        "id": 988,
        "pre": "import { createCollaborationServiceMenuItems, CollaborationServiceStateDialog, CollaborationServiceFilter } from '@kit.ServiceCollaborationKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 createCollaborationServiceMenuItems是设备列表菜单项模块，传入CollaborationServiceFilter的能力枚举值；CollaborationServiceStateDialog是状态提示框模块。",
        "import_module": "import { createCollaborationServiceMenuItems, CollaborationServiceStateDialog, CollaborationServiceFilter } from '@kit.ServiceCollaborationKit';",
        "parent": "<li>导入模块。 <p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/servicecollaboration-collaborationservice#section1633482912443\\\"' target='\\\"_blank\\\"'>createCollaborationServiceMenuItems</a>是设备列表菜单项模块，传入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/servicecollaboration-collaborationservice#section12639651397\\\"' target='\\\"_blank\\\"'>CollaborationServiceFilter</a>的能力枚举值；<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/servicecollaboration-collaborationservice#section158671330145417\\\"' target='\\\"_blank\\\"'>CollaborationServiceStateDialog</a>是状态提示框模块。</p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/servicecollaboration-dev-guides.html"
    },
    {
        "id": 989,
        "pre": "import {\\n  createCollaborationServiceMenuItems,\\n  CollaborationServiceStateDialog,\\n  CollaborationServiceFilter\\n} from '@kit.ServiceCollaborationKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State picture: PixelMap | undefined = undefined;\\n\\n  @Builder\\n  MyTestMenu() {\\n    Menu() {\\n      createCollaborationServiceMenuItems([CollaborationServiceFilter.ALL])\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 20 }) {\\n      CollaborationServiceStateDialog({\\n        onState: (stateCode: number, bufferType: string, buffer: ArrayBuffer): void => this.doInsertPicture(stateCode, bufferType, buffer)\\n      })\\n      Button('使用远端设备进行拍照')\\n        .type(ButtonType.Normal)\\n        .borderRadius(10)\\n        .bindMenu(this.MyTestMenu)\\n\\n      if (this.picture) {\\n        Image(this.picture)\\n          .borderStyle(BorderStyle.Dotted)\\n          .borderWidth(1)\\n          .objectFit(ImageFit.Contain)\\n          .height('80%')\\n          .onComplete((event) => {\\n            if (event != undefined) {\\n              hilog.info(0, \\\"MEMOMOCK\\\", \\\"onComplete \\\" + event.loadingStatus)\\n            }\\n          })\\n      }\\n    }\\n    .padding(20)\\n    .width('100%')\\n    .alignItems(HorizontalAlign.Center)\\n  }\\n\\n  doInsertPicture(stateCode: number, bufferType: string, buffer: ArrayBuffer): void {\\n    if (stateCode != 0) {\\n      return\\n    }\\n    if (bufferType == \\\"general.image\\\") {\\n      let imageSource = image.createImageSource(buffer)\\n      imageSource.createPixelMap().then((pixelMap) => {\\n        this.picture = pixelMap;\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "完整示例",
        "parent_text": "  完整示例 通过以下示例，您可以完成一次调用对端相机拍摄的操作。  ",
        "import_module": "import { createCollaborationServiceMenuItems, CollaborationServiceStateDialog, CollaborationServiceFilter } from '@kit.ServiceCollaborationKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section116310462616\\\"'> <a name='\\\"section116310462616\\\"'></a><a name='\\\"section116310462616\\\"'></a> <h4>完整示例</h4> <p>通过以下示例，您可以完成一次调用对端相机拍摄的操作。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/servicecollaboration-dev-guides.html"
    },
    {
        "id": 990,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 991,
        "pre": "let markerOptions: mapCommon.MarkerOptions = {\\n  position: {\\n    latitude: 31.984410259206815,\\n    longitude: 118.76625379397866\\n  },\\n  rotation: 0,\\n  visible: true,\\n  zIndex: 0,\\n  alpha: 1,\\n  anchorU: 0.5,\\n  anchorV: 1,\\n  clickable: true,\\n  draggable: true,\\n  flat: false,\\n  // 图标存放在resources/rawfile，icon参数传入rawfile文件夹下的相对路径\\n  icon: 'test.png'\\n};\\nthis.marker = await this.mapController.addMarker(markerOptions);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过在MarkerOptions中将icon属性设置为自定义图标的资源，可将默认标记图标修改成自定义图标。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      通过在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section559041743210\\\"' target='\\\"_blank\\\"'>MarkerOptions</a>中将icon属性设置为自定义图标的资源，可将默认标记图标修改成自定义图标。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 992,
        "pre": "let markerOptions: mapCommon.MarkerOptions = {\\n  position: {\\n    latitude: 31.984410259206815,\\n    longitude: 118.76625379397866\\n  },\\n  rotation: 0,\\n  visible: true,\\n  zIndex: 0,\\n  alpha: 1,\\n  anchorU: 0.5,\\n  anchorV: 1,\\n  clickable: true,\\n  draggable: true,\\n  flat: false,\\n  // 图标存放在resources/rawfile，icon参数传入rawfile文件夹下的相对路径\\n  icon: 'icon.png',\\n  annotations:  [{\\n    // 定义标题内容\\n    content: \\\"Test\\\",\\n    fontStyle: 1,\\n    strokeWidth: 3,\\n    fontSize: 15\\n  }],\\n  // 设置碰撞规则为图标和名称都参与碰撞\\n  collisionRule: mapCommon.CollisionRule.ALL,\\n  annotationPosition: mapCommon.TextPosition.TOP\\n};\\nthis.marker = await this.mapController.addMarker(markerOptions);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      通过在MarkerOptions中设置collisionRule属性，可以设置标记与地图poi之间的冲突处理规则。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      通过在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-common#section559041743210\\\"' target='\\\"_blank\\\"'>MarkerOptions</a>中设置collisionRule属性，可以设置标记与地图poi之间的冲突处理规则。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 993,
        "pre": "let callback = (marker: map.Marker) => {\\n  console.info(`on-markerClick marker = ${marker.getId()}`);\\n};\\nthis.mapEventManager.on(\\\"markerClick\\\", callback);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]设置监听标记点击事件",
        "parent_text": "  [h2]设置监听标记点击事件  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section7182124719591\\\"'> <a name='\\\"section7182124719591\\\"'></a><a name='\\\"section7182124719591\\\"'></a> <h4>[h2]设置监听标记点击事件</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 994,
        "pre": "// 设置标记可拖拽\\nthis.marker.setDraggable(true);\\n\\n// 监听标记开始拖拽\\nlet markerCallback = (marker: map.Marker) => {\\n  console.info(`on-markerDragStart marker = ${marker.getId()}`);\\n};\\nthis.mapEventManager.on(\\\"markerDragStart\\\", markerCallback);\\n\\n// 监听标记拖拽事件\\nlet markerDragCallback = (marker: map.Marker) => {\\n  console.info(`on-markerDrag marker = ${marker.getId()}`);\\n};\\nthis.mapEventManager.on(\\\"markerDrag\\\", markerDragCallback);\\n\\n// 监听标记拖拽结束\\nlet markerDragEndCallback = (marker: map.Marker) => {\\n  console.info(`on-markerDragEnd marker = ${marker.getId()}`);\\n};\\nthis.mapEventManager.on(\\\"markerDragEnd\\\", markerDragEndCallback);",
        "type": "Reference",
        "function_call": "on(type: 'markerDragEnd' , callback: Callback&lt;Marker&gt;)",
        "function_name": "[h2]设置监听标记拖动事件",
        "parent_text": "  [h2]设置监听标记拖动事件 通过如下步骤设置监听标记拖动事件：  将Marker的拖拽属性设置为true。 调用on(type: 'markerDragStart' , callback: Callback<Marker>)方法监听标记是否开始拖拽。 调用on(type: 'markerDrag' , callback: Callback<Marker>)，监听标记拖动过程。 调用on(type: 'markerDragEnd' , callback: Callback<Marker>)，监听标记拖动结束事件。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section17838151973412\\\"'> <a name='\\\"section17838151973412\\\"'></a><a name='\\\"section17838151973412\\\"'></a> <h4>[h2]设置监听标记拖动事件</h4> <p>通过如下步骤设置监听标记拖动事件：</p> <ol> <li>将<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section166747193469\\\"' target='\\\"_blank\\\"'>Marker</a>的拖拽属性设置为true。</li> <li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section88711444165714\\\"' target='\\\"_blank\\\"'>on(type: 'markerDragStart' , callback: Callback&lt;Marker&gt;)</a>方法监听标记是否开始拖拽。</li> <li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section486516467570\\\"' target='\\\"_blank\\\"'>on(type: 'markerDrag' , callback: Callback&lt;Marker&gt;)</a>，监听标记拖动过程。</li> <li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section288194865719\\\"' target='\\\"_blank\\\"'>on(type: 'markerDragEnd' , callback: Callback&lt;Marker&gt;)</a>，监听标记拖动结束事件。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 995,
        "pre": "// 添加信息窗\\nlet markerOptions: mapCommon.MarkerOptions = {\\n  position: {\\n    latitude: 31.984410259206815,\\n    longitude: 118.76625379397866\\n  }\\n};\\nthis.marker = await this.mapController?.addMarker(markerOptions);\\n// 设置信息窗的标题\\nthis.marker.setTitle('南京');\\n// 设置信息窗的子标题\\nthis.marker.setSnippet('华东地区');\\n// 设置标记可点击\\nthis.marker.setClickable(true);\\n// 设置信息窗的锚点位置\\nthis.marker.setInfoWindowAnchor(1, 1);\\n// 设置信息窗可见\\nthis.marker.setInfoWindowVisible(true);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]信息窗",
        "parent_text": "  [h2]信息窗  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10384101310422\\\"'> <a name='\\\"section10384101310422\\\"'></a><a name='\\\"section10384101310422\\\"'></a> <h4>[h2]信息窗</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 996,
        "pre": "import { map, mapCommon, MapComponent } from '@kit.MapKit'\\nimport { AsyncCallback } from '@kit.BasicServicesKit'\\n\\n@Entry\\n@Component\\nstruct MarkerDemo {\\n  private TAG = \\\"OHMapSDK_MarkerDemo\\\";\\n  private mapOptions?: mapCommon.MapOptions;\\n  private mapController?: map.MapComponentController;\\n  private callback?: AsyncCallback<map.MapComponentController>;\\n\\n  aboutToAppear(): void {\\n    this.mapOptions = {\\n      position: {\\n        target: {\\n          latitude: 32.120750,\\n          longitude: 118.788765\\n        },\\n        zoom: 15\\n      }\\n    }\\n\\n    this.callback = async (err, mapController) => {\\n      if (!err) {\\n        this.mapController = mapController;\\n        let markerOptions: mapCommon.MarkerOptions = {\\n          position: {\\n            latitude: 32.120750,\\n            longitude: 118.788765\\n          },\\n          clickable: true,\\n          // 设置信息窗标题\\n          title: \\\"自定义信息窗\\\",\\n        };\\n        await this.mapController?.addMarker(markerOptions);\\n      }\\n    }\\n  }\\n\\n  build() {\\n    Stack() {\\n      Column() {\\n        MapComponent({\\n          mapOptions: this.mapOptions,\\n          mapCallback: this.callback,\\n          // 自定义信息窗\\n          customInfoWindow: this.customInfoWindow\\n        })\\n          .width('100%')\\n          .height('100%');\\n      }.width('100%')\\n    }.height('100%')\\n  }\\n  // 自定义信息窗BuilderParam\\n  @BuilderParam customInfoWindow: ($$: map.MarkerDelegate) => void = this.customInfoWindowBuilder;\\n  // 自定义信息窗Builder\\n  @Builder\\n  customInfoWindowBuilder($$: map.MarkerDelegate) {\\n    if ($$.marker) {\\n      Text($$.marker.getTitle())\\n        .width(\\\"50%\\\")\\n        .height(50)\\n        .backgroundColor(Color.Green)\\n        .textAlign(TextAlign.Center)\\n        .fontColor(Color.Black)\\n        .font({ size: 25, weight: 10, style: FontStyle.Italic })\\n        .border({ width: 3, color: Color.Black, radius: 25, style: BorderStyle.Dashed })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]自定义信息窗",
        "parent_text": "  [h2]自定义信息窗   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1930164112317\\\"'> <a name='\\\"section1930164112317\\\"'></a><a name='\\\"section1930164112317\\\"'></a> <h4>[h2]自定义信息窗</h4>  <p><span><img originheight='\\\"648\\\"' originwidth='\\\"301\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120155.65902451187287956568807711340346:50001231000000:2800:F7F655B71A69D0C23E90F2FDC643226D4D2F54A8955CAD72DBEA6CCC99862A81.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 997,
        "pre": "import { map, mapCommon, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct MarkerDemo {\\n  private mapOptions?: mapCommon.MapOptions;\\n  private callback?: AsyncCallback<map.MapComponentController>;\\n\\n  aboutToAppear(): void {\\n    this.mapOptions = {\\n      position: {\\n        target: {\\n          latitude: 32.020750,\\n          longitude: 118.788765\\n        },\\n        zoom: 11\\n      }\\n    }\\n\\n    this.callback = async (err, mapController) => {\\n      if (!err) {\\n        // 构造MarkerOptions对象\\n        let markerOptions: mapCommon.MarkerOptions = {\\n          position: {\\n            latitude: 32.020750,\\n            longitude: 118.788765\\n          },\\n        };\\n        // 新建marker\\n        let marker: map.Marker = await mapController.addMarker(markerOptions);\\n        // 构造RotateAnimation对象\\n        let animation = new map.RotateAnimation(0, 270);\\n        // 动画执行时间\\n        animation.setDuration(2000);\\n\\n        // 动画结束状态\\n        animation.setFillMode(map.AnimationFillMode.BACKWARDS);\\n\\n        // 动画重复模式\\n        animation.setRepeatMode(map.AnimationRepeatMode.REVERSE);\\n\\n        // 动画重复次数\\n        animation.setRepeatCount(100);\\n\\n        // 设置动画开始监听\\n        let callbackStart = () => {\\n          console.info(\\\"animationStart\\\", `callback`);\\n        };\\n        animation.on(\\\"animationStart\\\", callbackStart);\\n\\n        // 设置动画结束监听\\n        let callbackEnd = () => {\\n          console.info(\\\"animationEnd\\\", `callback`);\\n        };\\n        animation.on(\\\"animationEnd\\\", callbackEnd);\\n\\n        // 设置动画\\n        marker.setAnimation(animation);\\n        // 开启动画\\n        marker.startAnimation();\\n      }\\n    }\\n  }\\n\\n  build() {\\n    Stack() {\\n      Column() {\\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback })\\n      }.width('100%')\\n    }.height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]标记动画",
        "parent_text": "  [h2]标记动画 Marker支持设置旋转、缩放、平移、透明、图片动画播放和组合动画效果。     接口名 描述    AlphaAnimation 控制透明度的动画类。   RotateAnimation 控制旋转的动画类。   ScaleAnimation 控制缩放的动画类。   TranslateAnimation 控制平移的动画类。   PlayImageAnimation 控制多张图片的动画类。   AnimationSet 动画集合。    旋转动画效果的示例代码如下：  展示效果如图：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section150619459810\\\"'> <a name='\\\"section150619459810\\\"'></a><a name='\\\"section150619459810\\\"'></a> <h4>[h2]标记动画</h4> <p rgb(38,38,38);\\\"=\"\" style='\\\"color:'>Marker支持设置旋转、缩放、平移、透明、图片动画播放和组合动画效果。</p> <div class='\\\"tablenoborder\\\"'> <table> <thead> <tr> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"43.169999999999995%\\\"'><p>接口名</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.12.3.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"56.830000000000005%\\\"'><p>描述</p></th> </tr> </thead> <tbody><tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.169999999999995%\\\"'><p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1317313763513\\\"' target='\\\"_blank\\\"'>AlphaAnimation</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"56.830000000000005%\\\"'><p>控制透明度的动画类。</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.169999999999995%\\\"'><p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1217119125358\\\"' target='\\\"_blank\\\"'>RotateAnimation</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"56.830000000000005%\\\"'><p>控制旋转的动画类。</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.169999999999995%\\\"'><p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section96911617123514\\\"' target='\\\"_blank\\\"'>ScaleAnimation</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"56.830000000000005%\\\"'><p>控制缩放的动画类。</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.169999999999995%\\\"'><p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section20578102303517\\\"' target='\\\"_blank\\\"'>TranslateAnimation</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"56.830000000000005%\\\"'><p>控制平移的动画类。</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.169999999999995%\\\"'><p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section3818142316328\\\"' target='\\\"_blank\\\"'>PlayImageAnimation</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"56.830000000000005%\\\"'><p>控制多张图片的动画类。</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"43.169999999999995%\\\"'><p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section11158182461216\\\"' target='\\\"_blank\\\"'>AnimationSet</a></p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"56.830000000000005%\\\"'><p>动画集合。</p></td> </tr> </tbody></table> </div> <p>旋转动画效果的示例代码如下：</p>  <p>展示效果如图：</p> <p><span><img originheight='\\\"448\\\"' originwidth='\\\"344\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120155.67096625938029003415617873843235:50001231000000:2800:ED8E47299F39922BDF56AEA6018D17804E149EAF0F5C232A54F7DBEB5081092A.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 998,
        "pre": "import { map, mapCommon, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';\\nimport { image } from '@kit.ImageKit';\\n\\n@Entry\\n@Component\\nstruct MarkerDemo {\\n  private mapOptions?: mapCommon.MapOptions;\\n  private callback?: AsyncCallback<map.MapComponentController>;\\n\\n  aboutToAppear(): void {\\n    this.mapOptions = {\\n      position: {\\n        target: {\\n          latitude: 32.020750,\\n          longitude: 118.788765\\n        },\\n        zoom: 11\\n      }\\n    }\\n\\n    this.callback = async (err, mapController) => {\\n      if (!err) {\\n        // 构造MarkerOptions对象\\n        let markerOptions: mapCommon.MarkerOptions = {\\n          position: {\\n            latitude: 32.020750,\\n            longitude: 118.788765\\n          },\\n        };\\n        let mContext = getContext();\\n        const fileData: Uint8Array = await mContext?.resourceManager?.getRawFileContent('icon/icon.png');\\n        let imageSource: image.ImageSource =\\n          image.createImageSource(fileData.buffer.slice(0, fileData.buffer.byteLength));\\n        let pixelMap: PixelMap = await imageSource.createPixelMap();\\n        let images: Array<ResourceStr | image.PixelMap> = [\\n        // 图标需存放在resources/rawfile\\n          'icon/avocado.png',\\n          'icon/20231027.png',\\n          pixelMap,\\n          $r('app.media.maps_blue_dot')\\n        ]\\n        // 新建marker\\n        let marker: map.Marker = await mapController.addMarker(markerOptions);\\n        // 构造PlayImageAnimation对象\\n        let animation: map.PlayImageAnimation = new map.PlayImageAnimation();\\n        // 添加图片\\n        await animation.addImages(images)\\n        // 动画执行时间\\n        animation.setDuration(3000);\\n\\n        // 动画结束状态\\n        animation.setFillMode(map.AnimationFillMode.BACKWARDS);\\n\\n        // 动画重复模式\\n        animation.setRepeatMode(map.AnimationRepeatMode.REVERSE);\\n\\n        // 动画重复次数\\n        animation.setRepeatCount(100);\\n\\n        // 设置动画开始监听\\n        let callbackStart = () => {\\n          console.info(\\\"animationStart\\\", `callback`);\\n        };\\n        animation.on(\\\"animationStart\\\", callbackStart);\\n        // 设置动画结束监听\\n        let callbackEnd = () => {\\n          console.info(\\\"animationEnd\\\", `callback`);\\n        };\\n        animation.on(\\\"animationEnd\\\", callbackEnd);\\n        // 设置动画\\n        marker.setAnimation(animation);\\n        // 开启动画\\n        marker.startAnimation();\\n      }\\n    }\\n  }\\n\\n  build() {\\n    Stack() {\\n      Column() {\\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback })\\n      }.width('100%')\\n    }.height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]图片动画播放",
        "parent_text": "  [h2]图片动画播放  展示效果如图：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1865823703414\\\"'> <a name='\\\"section1865823703414\\\"'></a><a name='\\\"section1865823703414\\\"'></a> <h4>[h2]图片动画播放</h4>  <p>展示效果如图：</p> <p><span><img originheight='\\\"575\\\"' originwidth='\\\"592\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120155.13620436077099737957180760588475:50001231000000:2800:11ADDC9B0C79FB64C26FE617109C8D3ED9E9CE20DCDC2ED4EA8452BC0230930A.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-marker.html"
    },
    {
        "id": 999,
        "pre": "class People {\\n  old: number\\n  name: string\\n  constructor(old: number, name: string) {\\n    this.old = old;\\n    this.name = name;\\n  }\\n  printOld() {\\n    console.log(\\\"old = \\\", this.old);\\n  }\\n  printName() {\\n    console.log(\\\"name = \\\", this.name);\\n  }\\n};\\nlet p = new People(20, \\\"Tom\\\");",
        "type": "Reference",
        "function_call": "如果函数显示为JSFunction()",
        "function_name": "[h2]常见对象介绍",
        "parent_text": "[h2]常见对象介绍JSArray 目前所有JSArray展开后为数组里的各个元素：  其中_proto_：原型对象，所有数组的_proto_应该是一致的；length：内置属性访问器，可以访问数组长度。 TaggedDict 位于(array)标签中，一般为虚拟机内部创建的字典，ArkTS代码层面不可见。 TaggedArray 位于(array)标签中，一般为虚拟机内部创建的数组，ArkTS代码层面不可见。 COWArray 位于(array)标签中，一般为虚拟机内部创建的数组，ArkTS代码层面不可见。 JSObject JSObject展开后为内部的各个属性如下：  以下通过具体代码来介绍下实例化对象、声明对象、构造函数间的关系：  采集到的snapshot数据如下：  92729对象对应的是People，其主要声明了对象的属性和方法。 实例化对象的_proto_属性指向声明时的对象，声明对象里则会有constructor构造函数。当实例化多个对象时，实例化对象会有多个，但是声明对象和构造函数只有一个。 JSFunction 目前所有JSFunction都在(closure)标签中，展开即可看到所有JSFunction：  每个函数展开后为函数内的各个属性：  其中HomeObject表示父类对象，即该方法属于哪个对象；_proto_表示原型对象；LexicalEnv表示该函数的闭包上下文；name是内置属性访问器，可获取函数名；FunctionExtraInfo表示额外信息，比如一些napi接口会在这里记录函数地址；ProtoOrHClass表示原型或者隐藏类。 如果函数显示为anonymous()，则表示为匿名函数；如果函数显示为JSFunction()，则表示该函数可能为框架层函数，创建函数的时候未设置函数名。对于这两种函数名不可见的情况，可以通过查看其引用来间接确认其名称：  ArkInternalConstantPool 虚拟机创建的常量池，ArkTS代码层面不可见，涉及到的字符串常量会在(array)标签中展示：  LexicalEnv 闭包变量上下文；闭包是一个链状结构，如下所示：  733这个节点本身是一个闭包数组，其中0号元素是调用者（或者再往上的调用者，以此类推）的闭包；1号元素存储的是调试信息；2号及以后的元素存储的就是闭包传递的变量，上例传递了一个变量。 InternalAccessor 内置属性访问器，会有getter和setter方法，通过getter、setter可以获取、设置该属性。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section135057191135\\\"'><a name='\\\"section135057191135\\\"'></a><a name='\\\"section135057191135\\\"'></a><h4>[h2]常见对象介绍</h4><p id='\\\"ZH-CN_TOPIC_0000002202129325__p1441081425118\\\"'><strong>JSArray</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p74101814185116\\\"'>目前所有JSArray展开后为数组里的各个元素：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p14825162213256\\\"'><span><img originheight='\\\"241\\\"' originwidth='\\\"452\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.44994108145023275249846105096712:50001231000000:2800:F40646843E2CB16DD21641008E4192B30E4D7BAF74F1AB9E31DAD4B0EBBE46AF.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p641031465113\\\"'>其中_proto_：原型对象，所有数组的_proto_应该是一致的；length：内置属性访问器，可以访问数组长度。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p13410151445117\\\"'><strong>TaggedDict</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p6410214145114\\\"'>位于(array)标签中，一般为虚拟机内部创建的字典，ArkTS代码层面不可见。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p13410161418511\\\"'><strong>TaggedArray</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p16410121410512\\\"'>位于(array)标签中，一般为虚拟机内部创建的数组，ArkTS代码层面不可见。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p164101514135111\\\"'><strong>COWArray</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p18410414115112\\\"'>位于(array)标签中，一般为虚拟机内部创建的数组，ArkTS代码层面不可见。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p2410141455119\\\"'><strong>JSObject</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p741031465114\\\"'>JSObject展开后为内部的各个属性如下：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p1082632232512\\\"'><span><img originheight='\\\"202\\\"' originwidth='\\\"445\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.16859459438674545628391618473251:50001231000000:2800:92FF602A916314F9C30EB8BA904DFC90FA831A66832F69F865A8CBDCB4F7543D.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p1741061415113\\\"'>以下通过具体代码来介绍下实例化对象、声明对象、构造函数间的关系：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129325__p2041071435119\\\"'>采集到的snapshot数据如下：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p583113223257\\\"'><span><img height='\\\"160.5975\\\"' originheight='\\\"199\\\"' originwidth='\\\"646\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.98296103298274722219147461407882:50001231000000:2800:F8CDE10E257F1E9736F43373E40B4B5704B14F8502328A7714142841DA6D4852.png\\\"' title='\\\"点击放大\\\"' width='\\\"523.6875\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p14410714205111\\\"'>92729对象对应的是People，其主要声明了对象的属性和方法。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p144106143519\\\"'>实例化对象的_proto_属性指向声明时的对象，声明对象里则会有constructor构造函数。当实例化多个对象时，实例化对象会有多个，但是声明对象和构造函数只有一个。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p641041414515\\\"'><strong>JSFunction</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p1841018146513\\\"'>目前所有JSFunction都在(closure)标签中，展开即可看到所有JSFunction：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p11832422152515\\\"'><span><img height='\\\"216.895469\\\"' originheight='\\\"238\\\"' originwidth='\\\"991\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.91114348872408778702845201438868:50001231000000:2800:28F58413C72CE6085B888CF7A79F03E2E7B730DE3F6A656D28A125E860F9FD95.png\\\"' title='\\\"点击放大\\\"' width='\\\"879.8160140000001\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p1641091414512\\\"'>每个函数展开后为函数内的各个属性：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p88321220257\\\"'><span><img originheight='\\\"222\\\"' originwidth='\\\"471\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.53140181039608418030489291003628:50001231000000:2800:75A0BC530281DA014CDA30077E735D37E9DD03CA9EEC659F765ECF2047ADD164.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p17410131412515\\\"'>其中HomeObject表示父类对象，即该方法属于哪个对象；_proto_表示原型对象；LexicalEnv表示该函数的闭包上下文；name是内置属性访问器，可获取函数名；FunctionExtraInfo表示额外信息，比如一些napi接口会在这里记录函数地址；ProtoOrHClass表示原型或者隐藏类。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p104101314175111\\\"'>如果函数显示为anonymous()，则表示为匿名函数；如果函数显示为JSFunction()，则表示该函数可能为框架层函数，创建函数的时候未设置函数名。对于这两种函数名不可见的情况，可以通过查看其引用来间接确认其名称：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p198331122122518\\\"'><span><img height='\\\"113.61126\\\"' originheight='\\\"117\\\"' originwidth='\\\"792\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.50033810485846564006380529796703:50001231000000:2800:F5E49B39EC7CC4C9889EB4392E803BF4CF45101DF1E98D6BC1E4E946EB5BFA1E.png\\\"' title='\\\"点击放大\\\"' width='\\\"713.233514\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p1041021425116\\\"'><strong>ArkInternalConstantPool</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p17410714165110\\\"'>虚拟机创建的常量池，ArkTS代码层面不可见，涉及到的字符串常量会在(array)标签中展示：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p13834102217250\\\"'><span><img height='\\\"244.38750000000002\\\"' originheight='\\\"282\\\"' originwidth='\\\"604\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.97807474113633038121310230179551:50001231000000:2800:4E77E52132074D2FC6BE2DF9E04D9A327257D9042B9F928F3E377C53B0DBC97E.png\\\"' title='\\\"点击放大\\\"' width='\\\"523.6875\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p1841131425114\\\"'><strong>LexicalEnv</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p19411101416513\\\"'>闭包变量上下文；闭包是一个链状结构，如下所示：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p2834132217251\\\"'><span><img originheight='\\\"180\\\"' originwidth='\\\"521\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180559.63544383094151733079339173094186:50001231000000:2800:889F6CB7026396F92649C2EC33850E42D53DE3730781707666EEB0914BE83B9A.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p14411131412511\\\"'>733这个节点本身是一个闭包数组，其中0号元素是调用者（或者再往上的调用者，以此类推）的闭包；1号元素存储的是调试信息；2号及以后的元素存储的就是闭包传递的变量，上例传递了一个变量。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p1541112142519\\\"'><strong>InternalAccessor</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129325__p11411141417517\\\"'>内置属性访问器，会有getter和setter方法，通过getter、setter可以获取、设置该属性。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-arkts-memory-leak-analysis.html"
    },
    {
        "id": 1000,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-confusing-void-expression\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-confusing-void-expression.html"
    },
    {
        "id": 1001,
        "pre": "export function func(): void {\\n  console.info('no return');\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "export function func(): void {\\n  console.info('no return');\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-confusing-void-expression.html"
    },
    {
        "id": 1002,
        "pre": "export function func(): void {\\n  return console.info('no return');\\n}\\n\\nconsole.info(func());",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "export function func(): void {\\n  console.info('no return');\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-confusing-void-expression.html"
    },
    {
        "id": 1003,
        "pre": "import { wearEngine } from '@kit.WearEngine';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": "let callback = ()",
        "function_name": "监测应用与Wear Engine服务的连接状态",
        "parent_text": "  监测应用与Wear Engine服务的连接状态 华为运动健康App在后台停止服务（如功耗过高），从而导致应用与Wear Engine服务的连接状态发生变化。对于类似这种不确定的断开情况，开发者可以通过本功能特性了解当前应用和Wear Engine的连接状态。前提是在服务断开前，开发者已经使用该功能订阅过对Wear Engine服务连接状态的监测。 在使用Wear Engine服务前，请导入WearEngine与相关模块。   构造当服务连接断开时执行的回调函数。let callback = () => {\\n  console.info(`The service destruction event`);\\n}  调用wearEngine中的on方法，订阅监听应用与Wear Engine服务的断联事件。try {\\n  wearEngine.on('serviceDie', callback);\\n  console.info(`Succeeded in subscribing the service destruction event.`);\\n} catch (error) {\\n  const err: BusinessError = error as BusinessError;\\n  console.error(`Failed to subscribe the service destruction event. Code is ${err.code}, message is ${err.message}`);\\n}    调用wearEngine中的off方法，取消监听应用与Wear Engine服务的断联事件。需要传入订阅监听时的同一个回调函数对象。try {\\n  wearEngine.off('serviceDie', callback);\\n  console.info(`Succeeded in unsubscribing the service destruction event.`);\\n} catch (error) {\\n  const err: BusinessError = error as BusinessError;\\n  console.error(`Failed to unsubscribe the service destruction event. Code is ${err.code}, message is ${err.message}`);\\n}   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10962817102613\\\"'> <a name='\\\"section10962817102613\\\"'></a><a name='\\\"zh-cn_topic_0000001074235300_section10962817102613\\\"'></a> <h4>监测应用与Wear Engine服务的连接状态</h4> <p>华为运动健康App在后台停止服务（如功耗过高），从而导致应用与Wear Engine服务的连接状态发生变化。对于类似这种不确定的断开情况，开发者可以通过本功能特性了解当前应用和Wear Engine的连接状态。前提是在服务断开前，开发者已经使用该功能订阅过对Wear Engine服务连接状态的监测。</p> <p>在使用Wear Engine服务前，请导入WearEngine与相关模块。</p>  <ol> <li><span>构造当服务连接断开时执行的回调函数。</span><p></p><pre class='\\\"typescript\\\"'>let callback = () =&gt; {\\n  console.info(`The service destruction event`);\\n}</pre> <p></p></li> <li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api\\\"' target='\\\"_blank\\\"'>wearEngine</a>中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section16809145282713\\\"' target='\\\"_blank\\\"'>on</a>方法，订阅监听应用与Wear Engine服务的断联事件。</span><p></p><pre class='\\\"typescript\\\"'>try {\\n  wearEngine.on('serviceDie', callback);\\n  console.info(`Succeeded in subscribing the service destruction event.`);\\n} catch (error) {\\n  const err: BusinessError = error as BusinessError;\\n  console.error(`Failed to subscribe the service destruction event. Code is ${err.code}, message is ${err.message}`);\\n}</pre> <p></p></li> </ol> <ol start='\\\"3\\\"'> <li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api\\\"' target='\\\"_blank\\\"'>wearEngine</a>中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section15262013102814\\\"' target='\\\"_blank\\\"'>off</a>方法，取消监听应用与Wear Engine服务的断联事件。需要传入订阅监听时的同一个回调函数对象。</span><p></p><pre class='\\\"typescript\\\"'>try {\\n  wearEngine.off('serviceDie', callback);\\n  console.info(`Succeeded in unsubscribing the service destruction event.`);\\n} catch (error) {\\n  const err: BusinessError = error as BusinessError;\\n  console.error(`Failed to unsubscribe the service destruction event. Code is ${err.code}, message is ${err.message}`);\\n}</pre> <p></p></li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wearengine_service_status.html"
    },
    {
        "id": 1004,
        "pre": "import { wearEngine } from '@kit.WearEngine';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": "destroy()",
        "function_name": "断开应用与Wear Engine服务的连接",
        "parent_text": "  断开应用与Wear Engine服务的连接 断开后，将释放Wear Engine资源，监测设备状态、收消息、收文件等功能不可用，监听服务端断联事件的回调函数不会执行，同时会清理掉之前注册的回调函数。如需重新连接，主动调用任意接口即可。 在使用Wear Engine服务前，请导入WearEngine与相关模块。   调用wearEngine中的destroy方法，断开应用与Wear Engine服务的连接。wearEngine.destroy().then(() => {\\n  console.info(`Succeeded in destroying wear engine channel`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to destroy wear engine channel. Code is ${error.code}, message is ${error.message}`);\\n})   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section186486411733\\\"'> <a name='\\\"section186486411733\\\"'></a><a name='\\\"zh-cn_topic_0000001074235300_section186486411733\\\"'></a> <h4>断开应用与Wear Engine服务的连接</h4> <p>断开后，将释放Wear Engine资源，监测设备状态、收消息、收文件等功能不可用，监听服务端断联事件的回调函数不会执行，同时会清理掉之前注册的回调函数。如需重新连接，主动调用任意接口即可。</p> <p>在使用Wear Engine服务前，请导入WearEngine与相关模块。</p>  <ol> <li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api\\\"' target='\\\"_blank\\\"'>wearEngine</a>中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section890395942912\\\"' target='\\\"_blank\\\"'>destroy</a>方法，断开应用与Wear Engine服务的连接。</span><p></p><pre class='\\\"screen\\\"'>wearEngine.destroy().then(() =&gt; {\\n  console.info(`Succeeded in destroying wear engine channel`);\\n}).catch((error: BusinessError) =&gt; {\\n  console.error(`Failed to destroy wear engine channel. Code is ${error.code}, message is ${error.message}`);\\n})</pre> <p></p></li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wearengine_service_status.html"
    },
    {
        "id": 1005,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-taskpool-for-web-request\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-use-taskpool-for-web-request.html"
    },
    {
        "id": 1006,
        "pre": "import { http } from '@kit.NetworkKit';\\nimport { BusinessError } from '@ohos.base';\\nimport taskpool from '@ohos.taskpool';\\n\\n@Concurrent\\nfunction processRespTask(err: BusinessError, data: http.HttpResponse) {\\n  if (!err) {\\n    console.info('Result:' + data.result);\\n    console.info('code:' + data.responseCode);\\n    console.info('type:' + JSON.stringify(data.resultType));\\n    console.info('header:' + JSON.stringify(data.header));\\n    console.info('cookies:' + data.cookies);\\n  } else {\\n    console.info('error:' + JSON.stringify(err));\\n  }\\n}\\n\\nlet httpRequest = http.createHttp();\\nhttpRequest.request(\\\"EXAMPLE_URL\\\", async (err: Error, data: http.HttpResponse) => {\\n  let task = new taskpool.Task(processRespTask, data);\\n  await taskpool.execute(task);\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-use-taskpool-for-web-request.html"
    },
    {
        "id": 1007,
        "pre": "import { http } from '@kit.NetworkKit';\\n\\nlet httpRequest = http.createHttp();\\nhttpRequest.request(\\\"EXAMPLE_URL\\\", (err: Error, data: http.HttpResponse) => {\\n  if (!err) {\\n    console.info('Result:' + data.result);\\n    console.info('code:' + data.responseCode);\\n    console.info('type:' + JSON.stringify(data.resultType));\\n    console.info('header:' + JSON.stringify(data.header));\\n    console.info('cookies:' + data.cookies); \\n  } else {\\n    console.info('error:' + JSON.stringify(err));\\n  }\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-use-taskpool-for-web-request.html"
    },
    {
        "id": 1008,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-array-constructor\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-array-constructor.html"
    },
    {
        "id": 1009,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/default-param-last\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_default-param-last.html"
    },
    {
        "id": 1010,
        "pre": "const defaultValue = 0;\\nexport function f1(a = defaultValue) {\\n  return a;\\n}\\nexport function f2(a: number, b = defaultValue) {\\n  return a + b;\\n}\\nexport function f3(a: number, b?: number) {\\n  return b !== undefined ? a + b : a;\\n}\\nexport function f4(a: number, b?: number, c = defaultValue) {\\n  return b !== undefined ? a + b + c : a + c;\\n}\\nexport function f5(a: number, b = defaultValue, c?: number) {\\n  return c !== undefined ? a + c : a + b;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_default-param-last.html"
    },
    {
        "id": 1011,
        "pre": "const defaultValue = 0;\\nexport function f2(b = defaultValue, a: number) {\\n  return a + b;\\n}\\nexport function f3(b?: number, a: number) {\\n  return b !== undefined ? a + b : a;\\n}\\nexport function f4(b?: number, a: number, c = defaultValue) {\\n  return b !== undefined ? a + b + c : a + c;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_default-param-last.html"
    },
    {
        "id": 1012,
        "pre": "import { visionImageAnalyzer } from '@kit.VisionKit';\\nimport { BusinessError } from '@kit.BasicServicesKit'\\n@Entry\\n@Component\\nexport struct ImageDemo {\\n  private visionImageAnalyzerController: visionImageAnalyzer.VisionImageAnalyzerController = new visionImageAnalyzer.VisionImageAnalyzerController()\\n  aboutToAppear(): void {\\n    this.visionImageAnalyzerController.on('imageAnalyzerVisibilityChange', (visibility: visionImageAnalyzer.ImageAnalyzerVisibility) => {\\n      console.info(\\\"DEMO_TAG\\\", `imageAnalyzerVisibilityChange result: ${JSON.stringify(visibility)}`)\\n    })\\n    this.visionImageAnalyzerController.on('textAnalysis', (text: string) => {\\n      console.info(\\\"DEMO_TAG\\\", `textAnalysis result: ${JSON.stringify(text)}`)\\n    })\\n    this.visionImageAnalyzerController.on('selectedTextChange', (selectedText: string) => {\\n      console.info(\\\"DEMO_TAG\\\", `selectedTextChange result: ${JSON.stringify(selectedText)}`)\\n    })\\n    this.visionImageAnalyzerController.on('selectedSubjectsChange', (subjects: visionImageAnalyzer.Subject[]) => {\\n      console.info(\\\"DEMO_TAG\\\", `selectedSubjectsChange result: ${JSON.stringify(subjects)}`)\\n    })\\n    this.visionImageAnalyzerController.on('analyzerFailed', (error: BusinessError) => {\\n      console.error(\\\"DEMO_TAG\\\", `analyzerFailed result: ${JSON.stringify(error)}`)\\n    })\\n  }\\n  build() {\\n    Stack() {\\n      Image($r('app.media.img'), {\\n        types: [ImageAnalyzerType.TEXT, ImageAnalyzerType.SUBJECT, ImageAnalyzerType.OBJECT_LOOKUP],\\n        aiController: this.visionImageAnalyzerController\\n      })\\n        .width('100%')\\n        .height('100%')\\n        .enableAnalyzer(true)\\n        .objectFit(ImageFit.Contain)\\n    }.width('100%').height('100%')\\n  }\\n    aboutToDisappear(): void {\\n      this.visionImageAnalyzerController.off('imageAnalyzerVisibilityChange')\\n      this.visionImageAnalyzerController.off('textAnalysis')\\n      this.visionImageAnalyzerController.off('selectedTextChange')\\n      this.visionImageAnalyzerController.off('subjectAnalysis')\\n      this.visionImageAnalyzerController.off('selectedSubjectsChange')\\n      this.visionImageAnalyzerController.off('analyzerFailed')\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1685312520306\\\"'> <a name='\\\"section1685312520306\\\"'></a><a name='\\\"section1685312520306\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/vision-imageanalyzer.html"
    },
    {
        "id": 1013,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-kia-file-list.html"
    },
    {
        "id": 1014,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError, request } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\nimport { fileIo as fs } from '@kit.CoreFileKit';\\n\\nlet storageBucket: cloudStorage.StorageBucket = cloudStorage.bucket();\\n\\n@Component\\nexport struct testPage {\\n  build() {\\n  }\\n\\n  // 上传指定文件至云侧\\n  upload() {\\n    // 使用photoAccessHelper选择指定的文件\\n    let photoSelectOptions = new photoAccessHelper.PhotoSelectOptions();\\n    photoSelectOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE; // 过滤选择媒体文件类型为IMAGE\\n    photoSelectOptions.maxSelectNumber = 1; // 选择媒体文件的最大数目\\n    let photoViewPicker = new photoAccessHelper.PhotoViewPicker();\\n    photoViewPicker.select(photoSelectOptions).then((photoSelectResult: photoAccessHelper.PhotoSelectResult) => {\\n      let fileUri = photoSelectResult.photoUris[0];\\n      hilog.info(0x0000, 'testTag', `pick file ${fileUri}`);\\n      // 上传到云侧screenshot目录下\\n      let fileName = 'screenshot/' + fileUri.split('/').pop() as string;\\n      hilog.info(0x0000, 'testTag', `file name ${fileName}`);\\n      let cacheFile = `${Date.now()}_${fileName}`;\\n      hilog.info(0x0000, 'testTag', `cacheFile ${cacheFile}`);\\n      let cacheFilePath = getContext().cacheDir + '/' + cacheFile;\\n\\n      // 将选中文件copy至cache目录下，文件名为cacheFile\\n      try {\\n        let srcFile = fs.openSync(fileUri);\\n        let dstFile = fs.openSync(cacheFilePath, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\\n        fs.copyFileSync(srcFile.fd, dstFile.fd);\\n        fs.closeSync(srcFile);\\n        fs.closeSync(dstFile);\\n      } catch (e) {\\n        hilog.info(0x0000, 'testTag', `copy file failed ${e.message}`);\\n        return;\\n      }\\n\\n      // 上传至云存储默认实例\\n      storageBucket.uploadFile(getContext(this), {\\n        localPath: cacheFile,  // context.cacheDir目录下的文件\\n        cloudPath: fileName    // 云侧路径，支持传入“文件目录/文件名”（如“image/demo.jpg”），或仅传入文件名。\\n      }).then((task: request.agent.Task) => {\\n        task.on('progress', (progress) => {\\n          hilog.info(0x0000, 'testTag', `on progress ${JSON.stringify(progress)}`);\\n        });\\n        task.on('completed', (progress) => {\\n          hilog.info(0x0000, 'testTag', `on completed ${JSON.stringify(progress)}`);\\n        });\\n        task.on('failed', (progress) => {\\n          hilog.info(0x0000, 'testTag', `on failed ${JSON.stringify(progress)}`);\\n        });\\n        task.on('response', (response) => {\\n          hilog.info(0x0000, 'testTag', `on response ${JSON.stringify(response)}`);\\n        });\\n\\n        // start task\\n        task.start((err: BusinessError) => {\\n          if (err) {\\n            hilog.error(0x0000, 'testTag', `Failed to start a file upload task, code: ${err.code}, message: ${err.message}`);\\n          } else {\\n            hilog.info(0x0000, 'testTag', `Succeeded in starting a file upload task.`);\\n          }\\n        });\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0000, 'testTag', `Failed to upload file, code: ${err.code}, message: ${err.message}`);\\n      });\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作步骤",
        "parent_text": "  操作步骤  选择待上传的文件，下方示例代码中使用photoAccessHelper.PhotoViewPicker指定需要上传的文件。 将待上传的文件复制到context.cacheDir目录下。           由于StorageBucket.uploadFile接口传入参数localPath只能设置为context.cacheDir目录下的文件路径，所以上传前需要先将文件复制到context.cacheDir目录下。   调用StorageBucket.uploadFile接口创建上传任务，监听上传任务的progress、completed、failed等事件。 启动上传任务。  完整的示例代码如下：      上传完成，可以登录AppGallery Connect，选择项目，进入“云存储”界面查看文件列表。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10146755375\\\"'> <a name='\\\"section10146755375\\\"'></a><a name='\\\"section10146755375\\\"'></a> <h4>操作步骤</h4> <ol> <li>选择待上传的文件，下方示例代码中使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-photoaccesshelper#photoviewpicker\\\"' target='\\\"_blank\\\"'>photoAccessHelper.PhotoViewPicker</a>指定需要上传的文件。</li> <li>将待上传的文件复制到<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-inner-application-context#属性\\\"' target='\\\"_blank\\\"'>context.cacheDir</a>目录下。       <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120101.27004703218729168831998972924371:50001231000000:2800:2F1B9140A166E033E8BA899C60A5367DF98A3F6DB30631EED908B65ADB0BFAB9.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>由于StorageBucket.uploadFile接口传入参数localPath只能设置为context.cacheDir目录下的文件路径，所以上传前需要先将文件复制到context.cacheDir目录下。</p> </div> </div></li> <li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section2105131521913\\\"' target='\\\"_blank\\\"'>StorageBucket.uploadFile</a>接口创建上传任务，监听上传任务的progress、completed、failed等事件。</li> <li>启动上传任务。</li> </ol> <p>完整的示例代码如下：</p>  <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120101.65054228824464131289815576407619:50001231000000:2800:B0B6356BA8E765F537D4BF0D65D3D4E39E58A4091649E89B60931C3A9D640D7C.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>上传完成，可以登录<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>，选择项目，进入“云存储”界面查看文件列表。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-upload-file.html"
    },
    {
        "id": 1015,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-suggest-cache-avplayer\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-suggest-cache-avplayer.html"
    },
    {
        "id": 1016,
        "pre": "import media from '@ohos.multimedia.media';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private avPlayer: media.AVPlayer | undefined = undefined;\\n  private avPlayerManager: AVPlayerManager = AVPlayerManager.getInstance();\\n\\n  aboutToAppear(): void {\\n    this.avPlayerManager.switchPlayer();\\n    this.avPlayer = this.avPlayerManager.getCurrentPlayer();\\n  }\\n\\n  aboutToDisappear(): void {\\n    this.avPlayerManager.resetCurrentPlayer();\\n    this.avPlayer = undefined;\\n  }\\n\\n  build() {\\n    // 组件布局\\n  }\\n}\\n\\nclass AVPlayerManager {\\n  private static instance?: AVPlayerManager;\\n\\n  private player1?: media.AVPlayer;\\n  private player2?: media.AVPlayer;\\n  private currentPlayer?: media.AVPlayer;\\n\\n  public static getInstance(): AVPlayerManager {\\n    if (!AVPlayerManager.instance) {\\n      AVPlayerManager.instance = new AVPlayerManager();\\n    }\\n    return AVPlayerManager.instance;\\n  }\\n\\n  async AVPlayerManager() {\\n    this.player1 = await media.createAVPlayer();\\n    this.player2 = await media.createAVPlayer();\\n  }\\n\\n  /**\\n   * 切换页面时切换AVPlayer实例\\n   */\\n  switchPlayer(): void {\\n    if (this.currentPlayer === this.player1) {\\n      this.currentPlayer = this.player2;\\n    } else {\\n      this.currentPlayer = this.player1;\\n    }\\n  }\\n\\n  getCurrentPlayer(): media.AVPlayer | undefined {\\n    return this.currentPlayer;\\n  }\\n\\n  /**\\n   * 使用reset方法重置AVPlayer实例\\n   */\\n  resetCurrentPlayer(): void {\\n    this.currentPlayer?.pause(() => {\\n      this.currentPlayer?.reset();\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-suggest-cache-avplayer.html"
    },
    {
        "id": 1017,
        "pre": "import media from '@ohos.multimedia.media';\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private avPlayer: media.AVPlayer | undefined = undefined;\\n\\n  aboutToAppear(): void {\\n    // 页面创建时初始化AVPlayer实例\\n    media.createAVPlayer().then((ret) => {\\n      this.avPlayer = ret;\\n    });\\n  }\\n\\n  aboutToDisappear(): void {\\n    // 离开页面时销毁AVPlayer实例\\n    if (this.avPlayer) {\\n      this.avPlayer.release();\\n    }\\n    this.avPlayer = undefined;\\n  }\\n\\n  build() {\\n    // 组件布局\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-suggest-cache-avplayer.html"
    },
    {
        "id": 1018,
        "pre": "// 导入接口\\nimport { HvigorPlugin, HvigorNode } from '@ohos/hvigor';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块依赖，更多接口请参考扩展构建API。 ",
        "import_module": "// 导入接口\\nimport { HvigorPlugin, HvigorNode } from '@ohos/hvigor';",
        "parent": "<li id='\\\"li66364165418\\\"'><span>导入模块依赖，更多接口请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-apis\\\"'>扩展构建API</a>。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-plugin.html"
    },
    {
        "id": 1019,
        "pre": "import { ShareExtensionAbility, UIExtensionContentSession, Want } from '@kit.AbilityKit';\\nimport { systemShare } from '@kit.ShareKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-sec-panel-back.html"
    },
    {
        "id": 1020,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/promise-function-async\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_promise-function-async.html"
    },
    {
        "id": 1021,
        "pre": "export const arrowFunctionReturnsPromise = async () => Promise.resolve('value');\\n\\nexport async function functionReturnsPromise() {\\n  return Promise.resolve('value');\\n}\\n\\n// An explicit return type that is not Promise means this function cannot be made async, so it is ignored by the rule\\nexport function functionReturnsUnionWithPromiseExplicitly(\\n  p: boolean\\n): string | Promise<string> {\\n  return p ? 'value' : Promise.resolve('value');\\n}\\n\\nexport async function functionReturnsUnionWithPromiseImplicitly(p: boolean) {\\n  return p ? 'value' : Promise.resolve('value');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_promise-function-async.html"
    },
    {
        "id": 1022,
        "pre": "export const arrowFunctionReturnsPromise = () => Promise.resolve('value');\\n\\nexport function functionReturnsPromise() {\\n  return Promise.resolve('value');\\n}\\n\\nexport function functionReturnsUnionWithPromiseImplicitly(p: boolean) {\\n  return p ? 'value' : Promise.resolve('value');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_promise-function-async.html"
    },
    {
        "id": 1023,
        "pre": "// CMakeLists.txt\\n# the minimum version of CMake.\\ncmake_minimum_required(VERSION 3.4.1)\\nproject(MyApplication)\\n\\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\\n\\ninclude_directories(${NATIVERENDER_ROOT_PATH}\\n                    ${NATIVERENDER_ROOT_PATH}/include)\\nadd_library(entry SHARED create_ark_runtime.cpp)\\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so)",
        "type": "Reference",
        "function_call": "void RegisterQueueWorkModule()",
        "function_name": null,
        "parent_text": "接口声明、编译配置以及模块注册。 接口声明 // index.d.ts\\nexport const createArkRuntime: () => object; 编译配置  在当前模块的build-profile.json5文件中进行以下配置： {\\n    \\\"buildOption\\\" : {\\n        \\\"arkOptions\\\" : {\\n            \\\"runtimeOnly\\\" : {\\n                \\\"sources\\\": [\\n                    \\\"./src/main/ets/pages/ObjectUtils.ets\\\"\\n                ]\\n            }\\n        }\\n    }\\n} 模块注册 // create_ark_runtime.cpp\\nEXTERN_C_START\\nstatic napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"createArkRuntime\\\", nullptr, CreateArkRuntime, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}\\nEXTERN_C_END\\n\\nstatic napi_module nativeModule = {\\n    .nm_version = 1,\\n    .nm_flags = 0,\\n    .nm_filename = nullptr,\\n    .nm_register_func = Init,\\n    .nm_modname = \\\"entry\\\",\\n    .nm_priv = nullptr,\\n    .reserved = { 0 },\\n};\\n\\nextern \\\"C\\\" __attribute__((constructor)) void RegisterQueueWorkModule()\\n{\\n    napi_module_register(&nativeModule);\\n} ",
        "import_module": null,
        "parent": "<li><p>接口声明、编译配置以及模块注册。</p> <p><strong>接口声明</strong></p> <pre class='\\\"ts\\\"'>// index.d.ts\\nexport const createArkRuntime: () =&gt; object;</pre> <p><strong>编译配置</strong></p>  <p>在当前模块的build-profile.json5文件中进行以下配置：</p> <pre class='\\\"json\\\"'>{\\n    \\\"buildOption\\\" : {\\n        \\\"arkOptions\\\" : {\\n            \\\"runtimeOnly\\\" : {\\n                \\\"sources\\\": [\\n                    \\\"./src/main/ets/pages/ObjectUtils.ets\\\"\\n                ]\\n            }\\n        }\\n    }\\n}</pre> <p><strong>模块注册</strong></p> <pre class='\\\"cpp\\\"'>// create_ark_runtime.cpp\\nEXTERN_C_START\\nstatic napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"createArkRuntime\\\", nullptr, CreateArkRuntime, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}\\nEXTERN_C_END\\n\\nstatic napi_module nativeModule = {\\n    .nm_version = 1,\\n    .nm_flags = 0,\\n    .nm_filename = nullptr,\\n    .nm_register_func = Init,\\n    .nm_modname = \\\"entry\\\",\\n    .nm_priv = nullptr,\\n    .reserved = { 0 },\\n};\\n\\nextern \\\"C\\\" __attribute__((constructor)) void RegisterQueueWorkModule()\\n{\\n    napi_module_register(&amp;nativeModule);\\n}</pre> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/use-napi-ark-runtime.html"
    },
    {
        "id": 1024,
        "pre": "{\\n  \\\"network-security-config\\\": {\\n    \\\"domain-config\\\": [\\n      {\\n        \\\"domains\\\": [\\n          {\\n            \\\"include-subdomains\\\": true,\\n            \\\"name\\\": \\\"server.com\\\"\\n          }\\n        ],\\n        \\\"pin-set\\\": {\\n          \\\"expiration\\\": \\\"2024-11-08\\\",\\n          \\\"pin\\\": [\\n            {\\n              \\\"digest-algorithm\\\": \\\"sha256\\\",\\n              \\\"digest\\\": \\\"FEDCBA987654321\\\"\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": "item必须包含1个name(string:指示域名)",
        "function_name": "[h2]JSON配置文件示例",
        "parent_text": "  [h2]JSON配置文件示例 预置应用级证书的配置例子如下： {\\n  \\\"network-security-config\\\": {\\n    \\\"base-config\\\": {\\n      \\\"trust-anchors\\\": [\\n        {\\n          \\\"certificates\\\": \\\"/etc/security/certificates\\\"\\n        }\\n      ]\\n    },\\n    \\\"domain-config\\\": [\\n      {\\n        \\\"domains\\\": [\\n          {\\n            \\\"include-subdomains\\\": true,\\n            \\\"name\\\": \\\"example.com\\\"\\n          }\\n        ],\\n        \\\"trust-anchors\\\": [\\n          {\\n            \\\"certificates\\\": \\\"/data/storage/el1/bundle/entry/resources/resfile\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n} 预置证书公钥哈希值的配置例子如下:  各个字段含义:     字段 类型 说明    network-security-config object 网络安全配置。可包含0或者1个base-config，必须包含1个domain-config。   base-config object 指示应用程序范围的安全配置。必须包含1个trust-anchors。   domain-config array 指示每个域的安全配置。可以包含任意个item。item必须包含1个domains，可以包含0或者1个trust-anchors，可以包含0个或者1个pin-set。   trust-anchors array 受信任的CA。可以包含任意个item。item必须包含1个certificates。   certificates string CA证书路径。   domains array 域。可以包含任意个item。item必须包含1个name(string:指示域名)，可以包含0或者1个include-subdomains。   include-subdomains boolean 指示规则是否适用于子域。   pin-set object 证书公钥哈希设置。必须包含1个pin，可以包含0或者1个expiration。   expiration string 指示证书公钥哈希的过期时间。   pin array 证书公钥哈希。可以包含任意个item。item必须包含1个digest-algorithm，item必须包含1个digest。   digest-algorithm string 指示用于生成哈希的摘要算法。目前只支持sha256。   digest string 指示公钥哈希。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"json配置文件示例\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213533929__json%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"json%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B\\\"'></a> <h4>[h2]JSON配置文件示例</h4> <p>预置应用级证书的配置例子如下：</p> <pre class='\\\"json\\\"'>{\\n  \\\"network-security-config\\\": {\\n    \\\"base-config\\\": {\\n      \\\"trust-anchors\\\": [\\n        {\\n          \\\"certificates\\\": \\\"/etc/security/certificates\\\"\\n        }\\n      ]\\n    },\\n    \\\"domain-config\\\": [\\n      {\\n        \\\"domains\\\": [\\n          {\\n            \\\"include-subdomains\\\": true,\\n            \\\"name\\\": \\\"example.com\\\"\\n          }\\n        ],\\n        \\\"trust-anchors\\\": [\\n          {\\n            \\\"certificates\\\": \\\"/data/storage/el1/bundle/entry/resources/resfile\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}</pre> <p>预置证书公钥哈希值的配置例子如下:</p>  <p><strong>各个字段含义:</strong></p> <div class='\\\"tablenoborder\\\"'> <table> <thead> <tr> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.7.1.4.1.1\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>字段</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.7.1.4.1.2\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>类型</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.7.1.4.1.3\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>说明</th> </tr> </thead> <tbody><tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>network-security-config</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>object</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>网络安全配置。可包含0或者1个base-config，必须包含1个domain-config。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>base-config</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>object</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>指示应用程序范围的安全配置。必须包含1个trust-anchors。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>domain-config</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>array</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>指示每个域的安全配置。可以包含任意个item。item必须包含1个domains，可以包含0或者1个trust-anchors，可以包含0个或者1个pin-set。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>trust-anchors</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>array</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>受信任的CA。可以包含任意个item。item必须包含1个certificates。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>certificates</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>string</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>CA证书路径。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>domains</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>array</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>域。可以包含任意个item。item必须包含1个name(string:指示域名)，可以包含0或者1个include-subdomains。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>include-subdomains</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>boolean</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>指示规则是否适用于子域。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>pin-set</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>object</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>证书公钥哈希设置。必须包含1个pin，可以包含0或者1个expiration。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>expiration</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>string</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>指示证书公钥哈希的过期时间。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>pin</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>array</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>证书公钥哈希。可以包含任意个item。item必须包含1个digest-algorithm，item必须包含1个digest。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>digest-algorithm</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>string</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>指示用于生成哈希的摘要算法。目前只支持sha256。</td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>digest</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>string</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>指示公钥哈希。</td> </tr> </tbody></table> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/http-request.html"
    },
    {
        "id": 1025,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/ban-ts-comment\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_ban-ts-comment.html"
    },
    {
        "id": 1026,
        "pre": "{\\n  buildOption: {\\n    nativeLib: {\\n      filter: {\\n        select: [ // select的优先级高于excludes、pickFirsts等配置项\\n          {\\n            package: \\\"@ohos/curl\\\", // 包名\\n            version: \\\"1.3.5\\\", // 包版本\\n            include: [\\\"libcurl.so\\\"], // 选择打包的native产物\\n            exclude: [\\\"libc++_shared.so\\\"] // 排除的native产物\\n           }\\n        ]\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "select 表4 select字段说明字段名称  类型  是否必选  含义    package  字符串  可选  包名。   version  字符串  可选  包版本。   include  字符串数组  可选  选择打包的native产物。   exclude  字符串数组  可选  排除的native产物。     例如本模块依赖的libcurl.so所在的har包为@ohos/curl，并且存在多个版本的libcurl.so，需要打包1.3.5版本，那可以通过以下配置，精确打包这个so到产物中。  ",
        "import_module": null,
        "parent": "<li id='\\\"zh-cn_topic_0000001733922376_li1737916541996\\\"'><a name='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_li1737916541996\\\"'></a><a name='\\\"zh-cn_topic_0000001733922376_li1737916541996\\\"'></a><strong>select</strong> <div class='\\\"tablenoborder\\\"'><table id='\\\"zh-cn_topic_0000001733922376_table1144771551112\\\"'><caption><b>表4 </b>select字段说明</caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row13447915181112\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.2.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p104476155113\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.2.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p64477159115\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.2.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p1844771581119\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.5.4.2.2.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p744711156114\\\"'>含义</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row5447615181115\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p19447181571119\\\"'>package</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p1244861591111\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p7448161561110\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p4448615101113\\\"'>包名。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row104481015161115\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p17448151513114\\\"'>version</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p444871521117\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p174481315181119\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p19448191519116\\\"'>包版本。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row74483159110\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p1544841521117\\\"'>include</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p1448131515119\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p11448121512114\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p344818156113\\\"'>选择打包的native产物。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row8448115161118\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p444813154116\\\"'>exclude</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p64487154118\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p17448121571118\\\"'>可选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p244813154111\\\"'>排除的native产物。</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p9448121501118\\\"'>例如本模块依赖的libcurl.so所在的har包为@ohos/curl，并且存在多个版本的libcurl.so，需要打包1.3.5版本，那可以通过以下配置，精确打包这个so到产物中。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-cpp.html"
    },
    {
        "id": 1027,
        "pre": "\\\"buildOption\\\": {\\n  \\\"nativeLib\\\": {\\n    \\\"librariesInfo\\\": [\\n      {\\n        \\\"name\\\": \\\"libentry.so\\\",\\n        \\\"linkLibraries\\\": [\\\"curl::curl\\\"]\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]librariesInfo",
        "parent_text": "[h2]librariesInfolibrariesInfo用于声明so的透传依赖信息。仅模块级build-profile.json5文件支持配置。 表6 字段名称  类型  是否必选  含义    name  字符串  必选  本模块so库的名称。   linkLibraries  字符串数组  必选  so库的依赖信息，格式为\\\"依赖包名::依赖so名称\\\"。     如果需要声明库之间的依赖关系，例如entry依赖curl，可在模块内build-profile.json5中配置librariesInfo。  当其他模块依赖声明了依赖透传的模块并使用libentry.so时，libentry.so会将依赖curl::curl添加到参数INTERFACE_LINK_LIBRARIES，开发者无需关注它的依赖。 add_library(library::library SHARED IMPORTED)\\nset_target_properties(library::library PROPERTIES\\n    IMPORTED_LOCATION \\\"/path/to/file\\\"\\n    INTERFACE_LINK_LIBRARIES \\\"curl::curl\\\") ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section969845819510\\\"'><a name='\\\"section969845819510\\\"'></a><a name='\\\"zh-cn_topic_0000001733922376_section969845819510\\\"'></a><h4>[h2]librariesInfo</h4><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p1120129145520\\\"'>librariesInfo用于声明so的透传依赖信息。仅模块级build-profile.json5文件支持配置。</p> <div class='\\\"tablenoborder\\\"'><table id='\\\"zh-cn_topic_0000001733922376_table2493128145216\\\"'><caption><b>表6 </b></caption><thead><tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row12494158185210\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.3.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p16831412185217\\\"'>字段名称</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.3.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"14.49%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p968441215522\\\"'>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.3.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"14.879999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p20684111225220\\\"'>是否必选</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.3.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"45.629999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p18684212135210\\\"'>含义</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row749418865220\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p6123559161211\\\"'>name</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.49%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p1012317593126\\\"'>字符串</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.879999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p2123205914124\\\"'>必选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"45.629999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p11234597129\\\"'>本模块so库的名称。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_row549413875213\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p06793321315\\\"'>linkLibraries</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.49%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p9679173191310\\\"'>字符串数组</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"14.879999999999999%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p18679736135\\\"'>必选</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"45.629999999999995%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p9679143101311\\\"'>so库的依赖信息，格式为\\\"依赖包名::依赖so名称\\\"。</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p1827883813260\\\"'>如果需要声明库之间的依赖关系，例如entry依赖curl，可在模块内build-profile.json5中配置librariesInfo。</p>  <p id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_p199681413115912\\\"'>当其他模块依赖声明了依赖透传的模块并使用libentry.so时，libentry.so会将依赖curl::curl添加到参数INTERFACE_LINK_LIBRARIES，开发者无需关注它的依赖。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002196818714__zh-cn_topic_0000001733922376_screen141862048\\\"'><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>add_library</span>(library::library SHARED <span rgb(104,151,187);\\\"=\"\" style='\\\"color:'>IMPORTED</span>)\\n<span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>set_target_properties</span>(library::library PROPERTIES\\n    <span rgb(104,151,187);\\\"=\"\" style='\\\"color:'>IMPORTED_LOCATION </span><span rgb(106,135,89);\\\"=\"\" style='\\\"color:'>\\\"/path/to/file\\\"</span>\\n    <span rgb(104,151,187);\\\"=\"\" style='\\\"color:'>INTERFACE_LINK_LIBRARIES </span><span rgb(106,135,89);\\\"=\"\" style='\\\"color:'>\\\"curl::curl\\\"</span>)</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-cpp.html"
    },
    {
        "id": 1028,
        "pre": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { autoFillManager } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { router } from '@kit.ArkUI';\\n\\n@Entry\\n@Component\\nstruct SmartFill {\\n  // ContentType corresponding to the certificate number type. In this case, ContentType is set to the type value corresponding to ID card number by default.\\n  @State type: ContentType | undefined = ContentType.ID_CARD_NUMBER;\\n  @State isClicked: boolean = false;\\n\\n  build() {\\n    Column({ space: 5 }) {\\n      Row() {\\n        Text('证件类型：').textAlign(TextAlign.End).width('25%')\\n        Select([{ value: '身份证' }, { value: '港澳通行证' }])\\n          .width('75%')\\n          .selected(0)\\n          .value('身份证')\\n          .onSelect((index: number, value: string) => {\\n            // Change the value of ContentType corresponding to the certificate number input component when a user selects the ID type.\\n            hilog.info(0x000, 'testTag', 'Select item changed, value: ' + value + ', index: ' + index);\\n            if (value === \\\"身份证\\\") {\\n              this.type = ContentType.ID_CARD_NUMBER;\\n            } else if (value === \\\"港澳通行证\\\") {\\n              this.type = undefined;\\n            }\\n            hilog.info(0x000, 'testTag', 'ContentType changed, current type: ' + this.type);\\n          })\\n      }\\n\\n      Row() {\\n        Text('姓名：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.PERSON_FULL_NAME)\\n      }\\n\\n      Row() {\\n        Text('手机号码：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.PHONE_NUMBER)\\n      }\\n\\n      Row() {\\n        Text('证件号码').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(this.type)\\n      }\\n\\n      Button('保存')\\n        .onClick(() => {\\n          if (!this.isClicked) {\\n            // Save recent forms actively.\\n            try {\\n              autoFillManager.requestAutoSave(this.getUIContext())\\n            } catch (err) {\\n              let e: BusinessError = err as BusinessError;\\n              hilog.error(0x0000, 'DemoTest', 'error: %{public}d %{public}s', e.code, e.message);\\n            }\\n            this.isClicked = true;\\n            // Set a timeout period to prevent saving recent form data repeatedly.\\n            setTimeout(() => {\\n              this.isClicked = false;\\n            }, 1000)\\n            // Or switch to another page through routing to trigger the saving of recent forms.\\n            router.pushUrl({\\n              url: 'xxx'\\n            })\\n          }\\n        })\\n        .width(\\\"50%\\\")\\n    }\\n    .alignItems(HorizontalAlign.Center)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "示例代码 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section819191520406\\\"'><a name='\\\"section819191520406\\\"'></a><a name='\\\"section819191520406\\\"'></a><h4>示例代码</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-intelligentfilling-amend.html"
    },
    {
        "id": 1029,
        "pre": "// 类名\\nclass User {\\n  username: string\\n\\n  constructor(username: string) {\\n    this.username = username;\\n  }\\n\\n  sayHi() {\\n    console.log('hi' + this.username);\\n  }\\n}\\n\\n// 枚举名\\nenum UserType {\\n  TEACHER = 0,\\n  STUDENT = 1\\n};\\n\\n// 命名空间\\nnamespace Base64Utils {\\n  function encrypt() {\\n    // todo encrypt\\n  }\\n\\n  function decrypt() {\\n    // todo decrypt\\n  }\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]类名、枚举名、命名空间名采用UpperCamelCase风格",
        "parent_text": "[h2]类名、枚举名、命名空间名采用UpperCamelCase风格【级别】建议 【描述】 类采用首字母大写的驼峰命名法。 类名通常是名词或名词短语，例如Person、Student、Worker。不应使用动词，也应该避免类似Data、Info这样的模糊词。 【正例】  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"类名枚举名命名空间名采用uppercamelcase风格\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E7%B1%BB%E5%90%8D%E6%9E%9A%E4%B8%BE%E5%90%8D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%90%8D%E9%87%87%E7%94%A8uppercamelcase%E9%A3%8E%E6%A0%BC\\\"'></a><a name='\\\"%E7%B1%BB%E5%90%8D%E6%9E%9A%E4%B8%BE%E5%90%8D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%90%8D%E9%87%87%E7%94%A8uppercamelcase%E9%A3%8E%E6%A0%BC\\\"'></a><h4>[h2]类名、枚举名、命名空间名采用UpperCamelCase风格</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>类采用首字母大写的驼峰命名法。</p> <p>类名通常是名词或名词短语，例如Person、Student、Worker。不应使用动词，也应该避免类似Data、Info这样的模糊词。</p> <p><strong>【正例】</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1030,
        "pre": "let msg = 'Hello world';\\n\\nfunction sendMsg(msg: string) {\\n  // todo send message\\n}\\n\\nlet userName = 'Zhangsan';\\n\\nfunction findUser(userName: string) {\\n  // todo find user by user name\\n}",
        "type": "Reference",
        "function_call": "宾语()",
        "function_name": "[h2]变量名、方法名、参数名采用lowerCamelCase风格",
        "parent_text": "[h2]变量名、方法名、参数名采用lowerCamelCase风格【级别】建议 【描述】 函数的命名通常是动词或动词短语，采用小驼峰命名，示例如下： load + 属性名()put + 属性名()is + 布尔属性名()has + 名词/形容词()动词()动词 + 宾语() 变量的名字通常是名词或名词短语，应采用小驼峰命名，以便于理解其含义。  【正例】  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"变量名方法名参数名采用lowercamelcase风格\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E5%8F%98%E9%87%8F%E5%90%8D%E6%96%B9%E6%B3%95%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%8D%E9%87%87%E7%94%A8lowercamelcase%E9%A3%8E%E6%A0%BC\\\"'></a><a name='\\\"%E5%8F%98%E9%87%8F%E5%90%8D%E6%96%B9%E6%B3%95%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%8D%E9%87%87%E7%94%A8lowercamelcase%E9%A3%8E%E6%A0%BC\\\"'></a><h4>[h2]变量名、方法名、参数名采用lowerCamelCase风格</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>函数的命名通常是动词或动词短语，采用小驼峰命名，示例如下：</p> <ol><li>load + 属性名()</li><li>put + 属性名()</li><li>is + 布尔属性名()</li><li>has + 名词/形容词()</li><li>动词()</li><li><p>动词 + 宾语()</p> <p>变量的名字通常是名词或名词短语，应采用小驼峰命名，以便于理解其含义。</p> </li></ol> <p><strong>【正例】</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1031,
        "pre": "const MAX_USER_SIZE = 10000;\\n\\nenum UserType {\\n  TEACHER = 0,\\n  STUDENT = 1\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]常量名、枚举值名采用全部大写，单词间使用下划线隔开",
        "parent_text": "[h2]常量名、枚举值名采用全部大写，单词间使用下划线隔开【级别】建议 【描述】 常量命名，应该由全大写单词与下划线组成，单词间用下划线分割。常量命名要尽量表达完整的语义。 【正例】  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"常量名枚举值名采用全部大写单词间使用下划线隔开\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E5%B8%B8%E9%87%8F%E5%90%8D%E6%9E%9A%E4%B8%BE%E5%80%BC%E5%90%8D%E9%87%87%E7%94%A8%E5%85%A8%E9%83%A8%E5%A4%A7%E5%86%99%E5%8D%95%E8%AF%8D%E9%97%B4%E4%BD%BF%E7%94%A8%E4%B8%8B%E5%88%92%E7%BA%BF%E9%9A%94%E5%BC%80\\\"'></a><a name='\\\"%E5%B8%B8%E9%87%8F%E5%90%8D%E6%9E%9A%E4%B8%BE%E5%80%BC%E5%90%8D%E9%87%87%E7%94%A8%E5%85%A8%E9%83%A8%E5%A4%A7%E5%86%99%E5%8D%95%E8%AF%8D%E9%97%B4%E4%BD%BF%E7%94%A8%E4%B8%8B%E5%88%92%E7%BA%BF%E9%9A%94%E5%BC%80\\\"'></a><h4>[h2]常量名、枚举值名采用全部大写，单词间使用下划线隔开</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>常量命名，应该由全大写单词与下划线组成，单词间用下划线分割。常量命名要尽量表达完整的语义。</p> <p><strong>【正例】</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1032,
        "pre": "let isNoError = true;\\nlet isNotFound = false;\\n\\nfunction empty() {}\\nfunction next() {}",
        "type": "Reference",
        "function_call": "nfunction hasNext()",
        "function_name": "[h2]避免使用否定的布尔变量名，布尔型的局部变量或方法需加上表达是非意义的前缀",
        "parent_text": "[h2]避免使用否定的布尔变量名，布尔型的局部变量或方法需加上表达是非意义的前缀【级别】建议 【描述】 布尔型的局部变量建议加上表达是非意义的前缀，比如is，也可以是has、can、should等。但是，当使用逻辑非运算符，并出现双重否定时，会出现理解问题，比如!isNotError，意味着什么，不是很好理解。因此，应避免定义否定的布尔变量名。 【反例】  【正例】 let isError = false;\\nlet isFound = true;\\n\\nfunction isEmpty() {}\\nfunction hasNext() {} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"避免使用否定的布尔变量名布尔型的局部变量或方法需加上表达是非意义的前缀\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E5%90%A6%E5%AE%9A%E7%9A%84%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8F%E5%90%8D%E5%B8%83%E5%B0%94%E5%9E%8B%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%88%96%E6%96%B9%E6%B3%95%E9%9C%80%E5%8A%A0%E4%B8%8A%E8%A1%A8%E8%BE%BE%E6%98%AF%E9%9D%9E%E6%84%8F%E4%B9%89%E7%9A%84%E5%89%8D%E7%BC%80\\\"'></a><a name='\\\"%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E5%90%A6%E5%AE%9A%E7%9A%84%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8F%E5%90%8D%E5%B8%83%E5%B0%94%E5%9E%8B%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%88%96%E6%96%B9%E6%B3%95%E9%9C%80%E5%8A%A0%E4%B8%8A%E8%A1%A8%E8%BE%BE%E6%98%AF%E9%9D%9E%E6%84%8F%E4%B9%89%E7%9A%84%E5%89%8D%E7%BC%80\\\"'></a><h4>[h2]避免使用否定的布尔变量名，布尔型的局部变量或方法需加上表达是非意义的前缀</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>布尔型的局部变量建议加上表达是非意义的前缀，比如is，也可以是has、can、should等。但是，当使用逻辑非运算符，并出现双重否定时，会出现理解问题，比如!isNotError，意味着什么，不是很好理解。因此，应避免定义否定的布尔变量名。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>let isError = false;\\nlet isFound = true;\\n\\nfunction isEmpty() {}\\nfunction hasNext() {}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1033,
        "pre": "class DataSource {\\n  id: number = 0\\n  title: string = ''\\n  content: string = ''\\n}\\n\\nconst dataSource: DataSource[] = [\\n  {\\n    id: 1,\\n    title: 'Title 1',\\n    content: 'Content 1'\\n  },\\n  {\\n    id: 2,\\n    title: 'Title 2',\\n    content: 'Content 2'\\n  }\\n\\n];\\n\\nfunction test(dataSource: DataSource[]) {\\n  if (!dataSource.length) {\\n    return;\\n  }\\n\\n  for (let data of dataSource) {\\n    if (!data || !data.id || !data.title || !data.content) {\\n      continue;\\n    }\\n    // some code\\n  }\\n\\n  // some code\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用空格缩进，禁止使用tab字符",
        "parent_text": "[h2]使用空格缩进，禁止使用tab字符【级别】建议 【描述】 只允许使用空格(space)进行缩进。 建议大部分场景优先使用2个空格，换行导致的缩进优先使用4个空格。 不允许插入制表符Tab。当前几乎所有的集成开发环境（IDE）和代码编辑器都支持配置将Tab键自动扩展为2个空格输入，应在代码编辑器中配置使用空格进行缩进。 【正例】  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用空格缩进禁止使用tab字符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E4%BD%BF%E7%94%A8%E7%A9%BA%E6%A0%BC%E7%BC%A9%E8%BF%9B%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8tab%E5%AD%97%E7%AC%A6\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8%E7%A9%BA%E6%A0%BC%E7%BC%A9%E8%BF%9B%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8tab%E5%AD%97%E7%AC%A6\\\"'></a><h4>[h2]使用空格缩进，禁止使用tab字符</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>只允许使用空格(space)进行缩进。</p> <p>建议大部分场景优先使用2个空格，换行导致的缩进优先使用4个空格。</p> <p>不允许插入制表符Tab。当前几乎所有的集成开发环境（IDE）和代码编辑器都支持配置将Tab键自动扩展为2个空格输入，应在代码编辑器中配置使用空格进行缩进。</p> <p><strong>【正例】</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1034,
        "pre": "switch (condition) {\\n  case 0: {\\n    doSomething();\\n    break;\\n  }\\n  case 1: {\\n    doOtherthing();\\n    break;\\n  }\\n  default:\\n    break;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]switch语句的case和default需缩进一层",
        "parent_text": "[h2]switch语句的case和default需缩进一层【级别】建议 【描述】 switch的case和default要缩进一层（2个空格）。开关标签之后换行的语句，需再缩进一层（2个空格）。 【正例】  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"switch语句的case和default需缩进一层\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__switch%E8%AF%AD%E5%8F%A5%E7%9A%84case%E5%92%8Cdefault%E9%9C%80%E7%BC%A9%E8%BF%9B%E4%B8%80%E5%B1%82\\\"'></a><a name='\\\"switch%E8%AF%AD%E5%8F%A5%E7%9A%84case%E5%92%8Cdefault%E9%9C%80%E7%BC%A9%E8%BF%9B%E4%B8%80%E5%B1%82\\\"'></a><h4>[h2]switch语句的case和default需缩进一层</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>switch的case和default要缩进一层（2个空格）。开关标签之后换行的语句，需再缩进一层（2个空格）。</p> <p><strong>【正例】</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1035,
        "pre": "// 假设条件语句超出行宽\\nif (userCount > MAX_USER_COUNT ||\\n  userCount < MIN_USER_COUNT) {\\n  doSomething();\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]表达式换行需保持一致性，运算符放行末",
        "parent_text": "[h2]表达式换行需保持一致性，运算符放行末【级别】建议 【描述】 当语句过长，或者可读性不佳时，需要在合适的地方换行。 换行时将操作符放在行末，表示“未结束，后续还有”，保持与常用的格式化工具的默认配置一致。 【正例】  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"表达式换行需保持一致性运算符放行末\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8D%A2%E8%A1%8C%E9%9C%80%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E6%80%A7%E8%BF%90%E7%AE%97%E7%AC%A6%E6%94%BE%E8%A1%8C%E6%9C%AB\\\"'></a><a name='\\\"%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8D%A2%E8%A1%8C%E9%9C%80%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E6%80%A7%E8%BF%90%E7%AE%97%E7%AC%A6%E6%94%BE%E8%A1%8C%E6%9C%AB\\\"'></a><h4>[h2]表达式换行需保持一致性，运算符放行末</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>当语句过长，或者可读性不佳时，需要在合适的地方换行。</p> <p>换行时将操作符放在行末，表示“未结束，后续还有”，保持与常用的格式化工具的默认配置一致。</p> <p><strong>【正例】</strong></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1036,
        "pre": "// if 和左括号 ( 之间没有加空格\\nif(isJedi) {\\n  fight();\\n}\\n\\n// 函数名fight和左括号 ( 之间加了空格\\nfunction fight (): void {\\n  console.log('Swooosh!');\\n}",
        "type": "Reference",
        "function_call": "function foo()",
        "function_name": "[h2]空格应该突出关键字和重要信息，避免不必要的空格",
        "parent_text": "[h2]空格应该突出关键字和重要信息，避免不必要的空格【级别】建议 【描述】 空格应该突出关键字和重要信息。总体建议如下： if, for, while, switch等关键字与左括号(之间加空格。在函数定义和调用时，函数名称与参数列表的左括号(之间不加空格。关键字else或catch与其之前的大括号}之间加空格。任何打开大括号({)之前加空格，有两个例外： a) 在作为函数的第一个参数或数组中的第一个元素时，对象之前不用加空格，例如：foo({ name: 'abc' })。 b) 在模板中，不用加空格，例如：abc${name}。 二元操作符(+ - * = < > <= >= === !== && ||)前后加空格；三元操作符(? :)符号两侧均加空格。数组初始化中的逗号和函数中多个参数之间的逗号后加空格。在逗号(,)或分号(;)之前不加空格。数组的中括号([])内侧不要加空格。不要出现多个连续空格。在某行中，多个空格若不是用来作缩进的，通常是个错误。 【反例】  【正例】 // if 和左括号之间加一个空格\\nif (isJedi) {\\n  fight();\\n}\\n\\n// 函数名fight和左括号 ( 之间不加空格\\nfunction fight(): void {\\n  console.log('Swooosh!');\\n} 【反例】 if (flag) {\\n  // ...\\n}else {  // else 与其前面的大括号 } 之间没有加空格\\n  // ...\\n} 【正例】 if (flag) {\\n  // ...\\n} else {  // else 与其前面的大括号 } 之间增加空格\\n  // ...\\n} 【正例】 function foo() {  // 函数声明时，左大括号 { 之前加个空格\\n  // ...\\n}\\n\\nbar('attr', {  // 左大括号前加个空格\\n  age: '1 year',\\n  sbreed: 'Bernese Mountain Dog',\\n}); 【正例】 const arr = [1, 2, 3];  // 数组初始化中的逗号后面加个空格，逗号前面不加空格\\nmyFunc(bar, foo, baz);  // 函数的多个参数之间的逗号后加个空格，逗号前面不加空格 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"空格应该突出关键字和重要信息避免不必要的空格\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E7%A9%BA%E6%A0%BC%E5%BA%94%E8%AF%A5%E7%AA%81%E5%87%BA%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E9%87%8D%E8%A6%81%E4%BF%A1%E6%81%AF%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E7%A9%BA%E6%A0%BC\\\"'></a><a name='\\\"%E7%A9%BA%E6%A0%BC%E5%BA%94%E8%AF%A5%E7%AA%81%E5%87%BA%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E9%87%8D%E8%A6%81%E4%BF%A1%E6%81%AF%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E7%A9%BA%E6%A0%BC\\\"'></a><h4>[h2]空格应该突出关键字和重要信息，避免不必要的空格</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>空格应该突出关键字和重要信息。总体建议如下：</p> <ol><li>if, for, while, switch等关键字与左括号(之间加空格。</li><li>在函数定义和调用时，函数名称与参数列表的左括号(之间不加空格。</li><li>关键字else或catch与其之前的大括号}之间加空格。</li><li><p>任何打开大括号({)之前加空格，有两个例外：</p> <p>a) 在作为函数的第一个参数或数组中的第一个元素时，对象之前不用加空格，例如：foo({ name: 'abc' })。</p> <p>b) 在模板中，不用加空格，例如：abc${name}。</p> </li><li>二元操作符(+ - * = &lt; &gt; &lt;= &gt;= === !== &amp;&amp; ||)前后加空格；三元操作符(? :)符号两侧均加空格。</li><li>数组初始化中的逗号和函数中多个参数之间的逗号后加空格。</li><li>在逗号(,)或分号(;)之前不加空格。</li><li>数组的中括号([])内侧不要加空格。</li><li>不要出现多个连续空格。在某行中，多个空格若不是用来作缩进的，通常是个错误。</li></ol> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>// if 和左括号之间加一个空格\\nif (isJedi) {\\n  fight();\\n}\\n\\n// 函数名fight和左括号 ( 之间不加空格\\nfunction fight(): void {\\n  console.log('Swooosh!');\\n}</pre> <p><strong>【反例】</strong></p> <pre class='\\\"screen\\\"'>if (flag) {\\n  // ...\\n}else {  // else 与其前面的大括号 } 之间没有加空格\\n  // ...\\n}</pre> <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>if (flag) {\\n  // ...\\n} else {  // else 与其前面的大括号 } 之间增加空格\\n  // ...\\n}</pre> <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>function foo() {  // 函数声明时，左大括号 { 之前加个空格\\n  // ...\\n}\\n\\nbar('attr', {  // 左大括号前加个空格\\n  age: '1 year',\\n  sbreed: 'Bernese Mountain Dog',\\n});</pre> <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>const arr = [1, 2, 3];  // 数组初始化中的逗号后面加个空格，逗号前面不加空格\\nmyFunc(bar, foo, baz);  // 函数的多个参数之间的逗号后加个空格，逗号前面不加空格</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1037,
        "pre": "interface I {\\n  name: string\\n  age: number\\n  value: number\\n  sum: number\\n  foo: boolean\\n  bar: boolean\\n}\\n\\nlet obj: I = { name: 'tom', age: 16, value: 1, sum: 2, foo: true, bar: false }",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]对象字面量属性超过4个，需要都换行",
        "parent_text": "[h2]对象字面量属性超过4个，需要都换行【级别】建议 【描述】 对象字面量要么每个属性都换行，要么所有属性都在同一行。当对象字面量属性超过4个的时候，建议统一换行。 【反例】  【正例】 interface I {\\n  name: string\\n  age: number\\n  value: number\\n  sum: number\\n  foo: boolean\\n  bar: boolean\\n}\\n\\nlet obj: I = {\\n  name: 'tom',\\n  age: 16,\\n  value: 1,\\n  sum: 2,\\n  foo: true,\\n  bar: false\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"对象字面量属性超过4个需要都换行\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%B1%9E%E6%80%A7%E8%B6%85%E8%BF%874%E4%B8%AA%E9%9C%80%E8%A6%81%E9%83%BD%E6%8D%A2%E8%A1%8C\\\"'></a><a name='\\\"%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%B1%9E%E6%80%A7%E8%B6%85%E8%BF%874%E4%B8%AA%E9%9C%80%E8%A6%81%E9%83%BD%E6%8D%A2%E8%A1%8C\\\"'></a><h4>[h2]对象字面量属性超过4个，需要都换行</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>对象字面量要么每个属性都换行，要么所有属性都在同一行。当对象字面量属性超过4个的时候，建议统一换行。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>interface I {\\n  name: string\\n  age: number\\n  value: number\\n  sum: number\\n  foo: boolean\\n  bar: boolean\\n}\\n\\nlet obj: I = {\\n  name: 'tom',\\n  age: 16,\\n  value: 1,\\n  sum: 2,\\n  foo: true,\\n  bar: false\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1038,
        "pre": "if (isOk) {\\n  doThing1();\\n  doThing2();\\n}\\nelse {\\n  doThing3();\\n}",
        "type": "Reference",
        "function_call": "doSomething()",
        "function_name": "[h2]把else/catch放在if/try代码块关闭括号的同一行",
        "parent_text": "[h2]把else/catch放在if/try代码块关闭括号的同一行【级别】建议 【描述】 在写条件语句时，建议把else放在if代码块关闭括号的同一行。同样，在写异常处理语句时，建议把catch也放在try代码块关闭括号的同一行。 【反例】  【正例】 if (isOk) {\\n  doThing1();\\n  doThing2();\\n} else {\\n  doThing3();\\n} 【反例】 try {\\n  doSomething();\\n}\\ncatch (err) {\\n  // 处理错误\\n} 【正例】 try {\\n  doSomething();\\n} catch (err) {\\n  // 处理错误\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"把elsecatch放在iftry代码块关闭括号的同一行\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E6%8A%8Aelsecatch%E6%94%BE%E5%9C%A8iftry%E4%BB%A3%E7%A0%81%E5%9D%97%E5%85%B3%E9%97%AD%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%90%8C%E4%B8%80%E8%A1%8C\\\"'></a><a name='\\\"%E6%8A%8Aelsecatch%E6%94%BE%E5%9C%A8iftry%E4%BB%A3%E7%A0%81%E5%9D%97%E5%85%B3%E9%97%AD%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%90%8C%E4%B8%80%E8%A1%8C\\\"'></a><h4>[h2]把else/catch放在if/try代码块关闭括号的同一行</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>在写条件语句时，建议把else放在if代码块关闭括号的同一行。同样，在写异常处理语句时，建议把catch也放在try代码块关闭括号的同一行。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>if (isOk) {\\n  doThing1();\\n  doThing2();\\n} else {\\n  doThing3();\\n}</pre> <p><strong>【反例】</strong></p> <pre class='\\\"screen\\\"'>try {\\n  doSomething();\\n}\\ncatch (err) {\\n  // 处理错误\\n}</pre> <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>try {\\n  doSomething();\\n} catch (err) {\\n  // 处理错误\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1039,
        "pre": "function foo()\\n{\\n  // ...\\n}",
        "type": "Import",
        "function_call": "function foo()",
        "function_name": "[h2]大括号{和语句在同一行",
        "parent_text": "[h2]大括号{和语句在同一行【级别】建议 【描述】 应保持一致的大括号风格。建议将大括号放在控制语句或声明语句同一行的位置。 【反例】  【正例】 function foo() {\\n  // ...\\n} ",
        "import_module": "function foo()\\n{\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"大括号和语句在同一行\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%92%8C%E8%AF%AD%E5%8F%A5%E5%9C%A8%E5%90%8C%E4%B8%80%E8%A1%8C\\\"'></a><a name='\\\"%E5%A4%A7%E6%8B%AC%E5%8F%B7%E5%92%8C%E8%AF%AD%E5%8F%A5%E5%9C%A8%E5%90%8C%E4%B8%80%E8%A1%8C\\\"'></a><h4>[h2]大括号{和语句在同一行</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>应保持一致的大括号风格。建议将大括号放在控制语句或声明语句同一行的位置。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>function foo() {\\n  // ...\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1040,
        "pre": "class C {\\n  count: number = 0\\n\\n  getCount(): number {\\n    return this.count\\n  }\\n}",
        "type": "Reference",
        "function_call": "public getCount(): number",
        "function_name": "[h2]建议添加类属性的可访问修饰符",
        "parent_text": "[h2]建议添加类属性的可访问修饰符【级别】建议 【描述】 在ArkTS中，提供了private, protected和public可访问修饰符。默认情况下一个属性的可访问修饰符为public。选取适当的可访问修饰符可以提升代码的安全性、可读性。注意：如果类中包含private属性，无法通过对象字面量初始化该类。 【反例】  【正例】 class C {\\n  private count: number = 0\\n\\n  public getCount(): number {\\n    return this.count\\n  }\\n} ",
        "import_module": "function foo()\\n{\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"建议添加类属性的可访问修饰符\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E5%BB%BA%E8%AE%AE%E6%B7%BB%E5%8A%A0%E7%B1%BB%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8F%AF%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\\\"'></a><a name='\\\"%E5%BB%BA%E8%AE%AE%E6%B7%BB%E5%8A%A0%E7%B1%BB%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8F%AF%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\\\"'></a><h4>[h2]建议添加类属性的可访问修饰符</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>在ArkTS中，提供了private, protected和public可访问修饰符。默认情况下一个属性的可访问修饰符为public。选取适当的可访问修饰符可以提升代码的安全性、可读性。注意：如果类中包含private属性，无法通过对象字面量初始化该类。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>class C {\\n  private count: number = 0\\n\\n  public getCount(): number {\\n    return this.count\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1041,
        "pre": "if (foo == Number.NaN) {\\n  // ...\\n}\\n\\nif (foo != Number.NaN) {\\n  // ...\\n}",
        "type": "Reference",
        "function_call": "isNaN()",
        "function_name": "[h2]判断变量是否为Number.NaN时必须使用Number.isNaN()方法",
        "parent_text": "[h2]判断变量是否为Number.NaN时必须使用Number.isNaN()方法【级别】要求 【描述】 在ArkTS中，Number.NaN是Number类型的一个特殊值。它被用来表示非数值，这里的数值是指在IEEE浮点数算术标准中定义的双精度64位格式的值。 因为在ArkTS中Number.NaN独特之处在于它不等于任何值，包括它本身，与Number.NaN进行比较的结果是令人困惑：Number.NaN !== Number.NaN or Number.NaN != Number.NaN的值都是true。 因此，必须使用Number.isNaN()函数来测试一个值是否是Number.NaN。 【反例】  【正例】 if (Number.isNaN(foo)) {\\n  // ...\\n}\\n\\nif (!Number.isNaN(foo)) {\\n  // ...\\n} ",
        "import_module": "function foo()\\n{\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"判断变量是否为numbernan时必须使用numberisnan方法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E4%B8%BAnumbernan%E6%97%B6%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8numberisnan%E6%96%B9%E6%B3%95\\\"'></a><a name='\\\"%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E4%B8%BAnumbernan%E6%97%B6%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8numberisnan%E6%96%B9%E6%B3%95\\\"'></a><h4>[h2]判断变量是否为Number.NaN时必须使用Number.isNaN()方法</h4><p><strong>【级别】要求</strong></p> <p><strong>【描述】</strong></p> <p>在ArkTS中，Number.NaN是Number类型的一个特殊值。它被用来表示非数值，这里的数值是指在IEEE浮点数算术标准中定义的双精度64位格式的值。</p> <p>因为在ArkTS中Number.NaN独特之处在于它不等于任何值，包括它本身，与Number.NaN进行比较的结果是令人困惑：Number.NaN !== Number.NaN or Number.NaN != Number.NaN的值都是true。</p> <p>因此，必须使用Number.isNaN()函数来测试一个值是否是Number.NaN。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>if (Number.isNaN(foo)) {\\n  // ...\\n}\\n\\nif (!Number.isNaN(foo)) {\\n  // ...\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1042,
        "pre": "const numbers = [1, 2, 3, 4, 5];\\n// 依赖已有数组来创建新的数组时，通过for遍历，生成一个新数组\\nconst increasedByOne: number[] = [];\\nfor (let i = 0; i < numbers.length; i++) {\\n  increasedByOne.push(numbers[i] + 1);\\n}",
        "type": "Reference",
        "function_call": "some()",
        "function_name": "[h2]数组遍历优先使用Array对象方法",
        "parent_text": "[h2]数组遍历优先使用Array对象方法【级别】要求 【描述】 对于数组的遍历处理，应该优先使用Array对象方法，如：forEach(), map(), every(), filter(), find(), findIndex(), reduce(), some()。 【反例】  【正例】 const numbers = [1, 2, 3, 4, 5];\\n// better: 使用map方法是更好的方式\\nconst increasedByOne: number[] = numbers.map(num => num + 1); ",
        "import_module": "function foo()\\n{\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"数组遍历优先使用array对象方法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E4%BC%98%E5%85%88%E4%BD%BF%E7%94%A8array%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\\\"'></a><a name='\\\"%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E4%BC%98%E5%85%88%E4%BD%BF%E7%94%A8array%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\\\"'></a><h4>[h2]数组遍历优先使用Array对象方法</h4><p><strong>【级别】要求</strong></p> <p><strong>【描述】</strong></p> <p>对于数组的遍历处理，应该优先使用Array对象方法，如：forEach(), map(), every(), filter(), find(), findIndex(), reduce(), some()。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>const numbers = [1, 2, 3, 4, 5];\\n// better: 使用map方法是更好的方式\\nconst increasedByOne: number[] = numbers.map(num =&gt; num + 1);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1043,
        "pre": "// 在控制性判断中赋值不易理解\\nif (isFoo = false) {\\n  // ...\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]不要在控制性条件表达式中执行赋值操作",
        "parent_text": "[h2]不要在控制性条件表达式中执行赋值操作【级别】要求 【描述】 控制性条件表达式常用于if、while、for、?:等条件判断中。 在控制性条件表达式中执行赋值，常常导致意料之外的行为，且代码的可读性非常差。 【反例】  【正例】 const isFoo = someBoolean; // 在上面赋值，if条件判断中直接使用\\nif (isFoo) {\\n  // ...\\n} ",
        "import_module": "// 在控制性判断中赋值不易理解\\nif (isFoo = false) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"不要在控制性条件表达式中执行赋值操作\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%8E%A7%E5%88%B6%E6%80%A7%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%89%A7%E8%A1%8C%E8%B5%8B%E5%80%BC%E6%93%8D%E4%BD%9C\\\"'></a><a name='\\\"%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%8E%A7%E5%88%B6%E6%80%A7%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%89%A7%E8%A1%8C%E8%B5%8B%E5%80%BC%E6%93%8D%E4%BD%9C\\\"'></a><h4>[h2]不要在控制性条件表达式中执行赋值操作</h4><p><strong>【级别】要求</strong></p> <p><strong>【描述】</strong></p> <p>控制性条件表达式常用于if、while、for、?:等条件判断中。</p> <p>在控制性条件表达式中执行赋值，常常导致意料之外的行为，且代码的可读性非常差。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>const isFoo = someBoolean; // 在上面赋值，if条件判断中直接使用\\nif (isFoo) {\\n  // ...\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1044,
        "pre": "function foo() {\\n  try {\\n    // ...\\n    return 1;\\n  } catch (err) {\\n    // ...\\n    return 2;\\n  } finally {\\n    return 3;\\n }\\n}",
        "type": "Reference",
        "function_call": "function foo()",
        "function_name": "[h2]在finally代码块中，不要使用return、break、continue或抛出异常，避免finally块非正常结束",
        "parent_text": "[h2]在finally代码块中，不要使用return、break、continue或抛出异常，避免finally块非正常结束【级别】要求 【描述】 在finally代码块中，直接使用return、break、continue、throw语句，或由于调用方法的异常未处理，会导致finally代码块无法正常结束。非正常结束的finally代码块会影响try或catch代码块中异常的抛出，也可能会影响方法的返回值。所以要保证finally代码块正常结束。 【反例】  【正例】 function foo() {\\n  try {\\n    // ...\\n    return 1;\\n  } catch (err) {\\n    // ...\\n    return 2;\\n  } finally {\\n    console.log('XXX!');\\n  }\\n} ",
        "import_module": "// 在控制性判断中赋值不易理解\\nif (isFoo = false) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"在finally代码块中不要使用returnbreakcontinue或抛出异常避免finally块非正常结束\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E5%9C%A8finally%E4%BB%A3%E7%A0%81%E5%9D%97%E4%B8%AD%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8returnbreakcontinue%E6%88%96%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E9%81%BF%E5%85%8Dfinally%E5%9D%97%E9%9D%9E%E6%AD%A3%E5%B8%B8%E7%BB%93%E6%9D%9F\\\"'></a><a name='\\\"%E5%9C%A8finally%E4%BB%A3%E7%A0%81%E5%9D%97%E4%B8%AD%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8returnbreakcontinue%E6%88%96%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E9%81%BF%E5%85%8Dfinally%E5%9D%97%E9%9D%9E%E6%AD%A3%E5%B8%B8%E7%BB%93%E6%9D%9F\\\"'></a><h4>[h2]在finally代码块中，不要使用return、break、continue或抛出异常，避免finally块非正常结束</h4><p><strong>【级别】要求</strong></p> <p><strong>【描述】</strong></p> <p>在finally代码块中，直接使用return、break、continue、throw语句，或由于调用方法的异常未处理，会导致finally代码块无法正常结束。非正常结束的finally代码块会影响try或catch代码块中异常的抛出，也可能会影响方法的返回值。所以要保证finally代码块正常结束。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>function foo() {\\n  try {\\n    // ...\\n    return 1;\\n  } catch (err) {\\n    // ...\\n    return 2;\\n  } finally {\\n    console.log('XXX!');\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1045,
        "pre": "// lib.ets\\nexport interface I {\\n  sum: number\\n}\\n\\nexport function getObject(value: number): I {\\n  let obj: I = { sum: value };\\n  return obj\\n}\\n\\n// app.ets\\nimport { getObject } from 'lib'\\nlet obj: ESObject = getObject(123);",
        "type": "Reference",
        "function_call": "function getObject(value: number): I",
        "function_name": "[h2]避免使用ESObject",
        "parent_text": "[h2]避免使用ESObject【级别】建议 【描述】 ESObject主要用在ArkTS和TS/JS跨语言调用场景中的类型标注，在非跨语言调用场景中使用ESObject标注类型，会引入不必要的跨语言调用，造成额外性能开销。 【反例】  【正例】 // lib.ets\\nexport interface I {\\n  sum: number\\n}\\n\\nexport function getObject(value: number): I {\\n  let obj: I = { sum: value };\\n  return obj\\n}\\n\\n// app.ets\\nimport { getObject, I } from 'lib'\\nlet obj: I = getObject(123); ",
        "import_module": "// 在控制性判断中赋值不易理解\\nif (isFoo = false) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"避免使用esobject\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458625__%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8esobject\\\"'></a><a name='\\\"%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8esobject\\\"'></a><h4>[h2]避免使用ESObject</h4><p><strong>【级别】建议</strong></p> <p><strong>【描述】</strong></p> <p>ESObject主要用在ArkTS和TS/JS跨语言调用场景中的类型标注，在非跨语言调用场景中使用ESObject标注类型，会引入不必要的跨语言调用，造成额外性能开销。</p> <p><strong>【反例】</strong></p>  <p><strong>【正例】</strong></p> <pre class='\\\"screen\\\"'>// lib.ets\\nexport interface I {\\n  sum: number\\n}\\n\\nexport function getObject(value: number): I {\\n  let obj: I = { sum: value };\\n  return obj\\n}\\n\\n// app.ets\\nimport { getObject, I } from 'lib'\\nlet obj: I = getObject(123);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-coding-style-guide.html"
    },
    {
        "id": 1046,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-parameter-properties\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-parameter-properties.html"
    },
    {
        "id": 1047,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-loss-of-precision\\\": [\\\"error\\\", {\\\"allows\\\": [\\\"readonly\\\"]}]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "选项",
        "parent_text": "选项默认禁止在构造函数中使用任何参数属性，如果想要使用某些属性，可以配置额外选项。 allows：接受一个字符串数组，数组中的属性可以使用。字符串支持以下值： readonlyprivateprotectedpublicprivate readonlyprotected readonlypublic readonly 示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section182418564158\\\"'><a name='\\\"section182418564158\\\"'></a><a name='\\\"section182418564158\\\"'></a><h4>选项</h4><p id='\\\"ZH-CN_TOPIC_0000002202129285__p157697119168\\\"'>默认禁止在构造函数中使用任何参数属性，如果想要使用某些属性，可以配置额外选项。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129285__p86241555182714\\\"'>allows：接受一个字符串数组，数组中的属性可以使用。字符串支持以下值：</p> <ul id='\\\"ZH-CN_TOPIC_0000002202129285__ul49121459162912\\\"'><li id='\\\"li12912259192913\\\"'>readonly</li><li id='\\\"li1895571463014\\\"'>private</li><li id='\\\"li137101217153019\\\"'>protected</li><li id='\\\"li10255182115309\\\"'>public</li><li id='\\\"li227819257308\\\"'>private readonly</li><li id='\\\"li18234163519302\\\"'>protected readonly</li><li id='\\\"li6778204283012\\\"'>public readonly</li></ul> <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129285__p1060753502410\\\"'>示例： </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-parameter-properties.html"
    },
    {
        "id": 1048,
        "pre": "export class Foo {\\n  public name: string;\\n\\n  public constructor(name: string) {\\n    this.name = name;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-parameter-properties.html"
    },
    {
        "id": 1049,
        "pre": "export class Foo {\\n  // 默认配置下，参数不允许使用readonly\\n  public constructor(public readonly name: string) {}\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-parameter-properties.html"
    },
    {
        "id": 1050,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/high-frequency-log-check\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-high-frequency-log-check.html"
    },
    {
        "id": 1051,
        "pre": "// Test.ets\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n      Column() {\\n        Scroll()\\n          .onScroll(() => {\\n            const TAG = 'onScroll';\\n          })\\n      }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-high-frequency-log-check.html"
    },
    {
        "id": 1052,
        "pre": "// Test.ets\\nimport hilog from '@ohos.hilog';\\n@Entry\\n@Component\\nstruct Index {\\n    build() {\\n            Column() {\\n                Scroll()\\n                    .onScroll(() => {\\n                        // Avoid printing logs\\n                        hilog.info(1001, 'Index', 'onScroll')\\n                })\\n            }\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1296044719242\\\"'><a name='\\\"section1296044719242\\\"'></a><a name='\\\"section1296044719242\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-high-frequency-log-check.html"
    },
    {
        "id": 1053,
        "pre": "import { minorsProtection } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError, commonEventManager } from '@kit.BasicServicesKit';\\n// 以上引入的模块为当前场景的全量模块，请按照具体实现按需引入",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入minorsProtection模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-minorsprotection\\\"' target='\\\"_blank\\\"'>minorsProtection</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-system-trun-off-minorsprotection.html"
    },
    {
        "id": 1054,
        "pre": "import { smartMobilityCommon } from '@kit.CarKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-unregister-events-listener.html"
    },
    {
        "id": 1055,
        "pre": "const char* const kNegativeLatin[] = {\\n    \\\"pin\\\",    \\\"parola\\\",   \\\"wagwoord\\\",   \\\"wachtwoord\\\",\\n    \\\"fake\\\",   \\\"parole\\\",   \\\"givenname\\\",  \\\"achinsinsi\\\",\\n    \\\"token\\\",  \\\"parool\\\",   \\\"firstname\\\",  \\\"facalfaire\\\",\\n    \\\"fname\\\",  \\\"lozinka\\\",  \\\"pasahitza\\\",  \\\"focalfaire\\\",\\n    \\\"lname\\\",  \\\"passord\\\",  \\\"pasiwedhi\\\",  \\\"iphasiwedi\\\",\\n    \\\"geslo\\\",  \\\"huahuna\\\",  \\\"passwuert\\\",  \\\"katalaluan\\\",\\n    \\\"heslo\\\",  \\\"fullname\\\", \\\"phasewete\\\",  \\\"adgangskode\\\",\\n    \\\"parol\\\",  \\\"optional\\\", \\\"wachtwurd\\\",  \\\"contrasenya\\\",\\n    \\\"sandi\\\",  \\\"lastname\\\", \\\"cyfrinair\\\",  \\\"contrasinal\\\",\\n    \\\"senha\\\",  \\\"kupuhipa\\\", \\\"katasandi\\\",  \\\"kalmarsirri\\\",\\n    \\\"password\\\", \\\"loluszais\\\",  \\\"tenimiafina\\\",\\n    \\\"second\\\", \\\"passwort\\\", \\\"middlename\\\", \\\"paroladordine\\\",\\n    \\\"codice\\\", \\\"pasvorto\\\", \\\"familyname\\\", \\\"inomboloyokuvula\\\",\\n    \\\"modpas\\\", \\\"salasana\\\", \\\"motdepasse\\\", \\\"numeraeleiloaesesi\\\",\\n    \\\"captcha\\\"};\\n\\nconst char* const kNegativeNonLatin[] = {\\n    \\\"fjalëkalim\\\", \\\"የይለፍቃል\\\", \\\"كلمهالسر\\\", \\\"գաղտնաբառ\\\",\\n    \\\"пароль\\\", \\\"পাসওয়ার্ড\\\", \\\"парола\\\", \\\"密码\\\", \\\"密碼\\\",\\n    \\\"დაგავიწყდათ\\\", \\\"κωδικόςπρόσβασης\\\", \\\"પાસવર્ડ\\\", \\\"סיסמה\\\",\\n    \\\"पासवर्ड\\\", \\\"jelszó\\\", \\\"lykilorð\\\", \\\"paswọọdụ\\\",\\n    \\\"パスワード\\\", \\\"ಪಾಸ್ವರ್ಡ್\\\", \\\"пароль\\\", \\\"ការពាក្យសម្ងាត់\\\",\\n    \\\"암호\\\", \\\"şîfre\\\", \\\"купуясөз\\\", \\\"ລະຫັດຜ່ານ\\\",\\n    \\\"slaptažodis\\\", \\\"лозинка\\\", \\\"पासवर्ड\\\", \\\"нууцүг\\\",\\n    \\\"စကားဝှက်ကို\\\", \\\"पासवर्ड\\\", \\\"رمز\\\", \\\"کلمهعبور\\\",\\n    \\\"hasło\\\", \\\"пароль\\\", \\\"лозинка\\\", \\\"پاسورڊ\\\",\\n    \\\"මුරපදය\\\", \\\"contraseña\\\", \\\"lösenord\\\", \\\"гузарвожа\\\",\\n    \\\"கடவுச்சொல்\\\", \\\"పాస్వర్డ్\\\", \\\"รหัสผ่าน\\\", \\\"пароль\\\",\\n    \\\"پاسورڈ\\\", \\\"mậtkhẩu\\\", \\\"פּאַראָל\\\", \\\"ọrọigbaniwọle\\\"};",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "用户名<input>元素上id、name、label内容中匹配到如下密码类型标识： ",
        "import_module": null,
        "parent": "<li>用户名&lt;input&gt;元素上id、name、label内容中匹配到如下密码类型标识： </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkweb-access-password-safe.html"
    },
    {
        "id": 1056,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { walletPass } from '@kit.WalletKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nprivate walletPassClient: walletPass.WalletPassClient = new walletPass.WalletPassClient(this.getUIContext().getHostContext() as common.UIAbilityContext);\\n// 创建Wallet Kit服务时注册的服务号\\nprivate passType: string = '';\\n// 申请钥匙卡片时定义的卡券唯一标识\\nprivate serialNumber: string = ''; \\n\\nasync queryPass() {\\n  let passStr = JSON.stringify({\\n    passType: this.passType,\\n    serialNumber: this.serialNumber\\n  });\\n  this.walletPassClient.queryPass(passStr).then((result: string) => {\\n    console.info(`Succeeded in querying pass, result: ${result}`);\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to query pass, code:${err.code}, message:${err.message}`);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "车主APP使用创建Wallet Kit服务时注册的服务号和申请钥匙卡片时定义的卡券唯一标识，车主APP调用queryPass接口检查当前设备车钥匙的开通情况。 ",
        "import_module": null,
        "parent": "<li><span>车主APP使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/wallet-preparations\\\"'>创建Wallet Kit服务</a>时注册的服务号和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wallet-rest-api-carkey#section129511211195\\\"' target='\\\"_blank\\\"'>申请钥匙卡片</a>时定义的卡券唯一标识，车主APP调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wallet-walletpass#section375194074718\\\"' target='\\\"_blank\\\"'>queryPass</a>接口检查当前设备车钥匙的开通情况。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wallet-carkey-operation.html"
    },
    {
        "id": 1057,
        "pre": "// CMakeLists.txt\\n# the minimum version of CMake.\\ncmake_minimum_required(VERSION 3.4.1)\\nproject(myapplication)\\n\\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\\n\\nif(DEFINED PACKAGE_FIND_FILE)\\n    include(${PACKAGE_FIND_FILE})\\nendif()\\n\\ninclude_directories(${NATIVERENDER_ROOT_PATH}\\n                    ${NATIVERENDER_ROOT_PATH}/include)\\nadd_library(entry SHARED hello.cpp)\\ntarget_link_libraries(entry PUBLIC libace_napi.z.so)",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "编译配置 CMakeLists.txt文件需要按照如下配置  ",
        "import_module": null,
        "parent": "<li><p>编译配置</p> <p>CMakeLists.txt文件需要按照如下配置</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/use-call-threadsafe-function-with-priority.html"
    },
    {
        "id": 1058,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-openfile.html"
    },
    {
        "id": 1059,
        "pre": "export struct Rule_2_1_1 {\\n  title: string = 'Rule 2.1.1';\\n  shortText: string = 'Button';\\n  longText: string = 'Accessibility text';\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Blank()\\n        Button(this.shortText)\\n          .accessibilityText(this.longText)\\n          .align(Alignment.Center)\\n          .fontSize(20)\\n        Blank()\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": "accessibilityText( )",
        "function_name": "标注屏幕朗读内容的场景",
        "parent_text": "标注屏幕朗读内容的场景控件包含显示文本（text）、无障碍文本（accessibilityText）2个属性，其中，显示文本为用户界面上呈现的信息，无障碍文本为无障碍专有的朗读信息，不在界面上显示。屏幕朗读提取信息进行朗读时无障碍文本的优先级大于显示文本，即当无障碍文本不为空时，会朗读无障碍文本，否则朗读显示文本。 所以： 对于文本类控件，尽量使用显示文本来表达信息，使视障用户和视力健全用户可以获取到相同的信息。对于文本类控件，如果除显示文本外，还额外提供了颜色等视觉效果为视力健全用户提供了更多信息的场景，可采用无障碍文本为视障用户提供更多的信息用于朗读。对于非文本类控件，可采用无障碍文本为视障用户提供朗读信息。 accessibilityText( ) 设置无障碍文本。聚焦button时朗读效果为：\\\"按钮, Accessibility text\\\"。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section155250175211\\\"'><a name='\\\"section155250175211\\\"'></a><a name='\\\"section155250175211\\\"'></a><h4>标注屏幕朗读内容的场景</h4><p>控件包含显示文本（text）、无障碍文本（accessibilityText）2个属性，其中，显示文本为用户界面上呈现的信息，无障碍文本为无障碍专有的朗读信息，不在界面上显示。屏幕朗读提取信息进行朗读时无障碍文本的优先级大于显示文本，即当无障碍文本不为空时，会朗读无障碍文本，否则朗读显示文本。</p> <p>所以：</p> <ol><li>对于文本类控件，尽量使用显示文本来表达信息，使视障用户和视力健全用户可以获取到相同的信息。</li><li>对于文本类控件，如果除显示文本外，还额外提供了颜色等视觉效果为视力健全用户提供了更多信息的场景，可采用无障碍文本为视障用户提供更多的信息用于朗读。</li><li>对于非文本类控件，可采用无障碍文本为视障用户提供朗读信息。</li></ol> <p>accessibilityText( ) 设置无障碍文本。聚焦button时朗读效果为：\\\"按钮, Accessibility text\\\"。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1060,
        "pre": "@Component\\nexport struct Rule_2_1_3 {\\n  title: string = 'Rule 2.1.3'\\n  @State message: string = 'Broadcast';\\n  @State message1: string = 'No broadcast';\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Row() {\\n          Text(this.message)\\n            .fontSize(40)\\n            .fontWeight(FontWeight.Bold)\\n            .fontColor(Color.Blue)\\n            .margin({\\n              left: 40\\n            })\\n        }\\n        .width('100%')\\n        .height('50%')\\n        Row() {\\n          Text(this.message1)\\n            .fontSize(40)\\n            .fontWeight(FontWeight.Bold)\\n            .fontColor(Color.Grey)\\n            .margin({\\n              left: 40\\n            }).accessibilityLevel(\\\"no\\\") // use for component\\n        }\\n        //.accessibilityGroup(true)\\n        //.accessibilityLevel(\\\"no-hide-descendants\\\") // use for container\\n        // 可以使用这两行代替28行的accessibilityLevel(\\\"no\\\")\\n        .width('100%')\\n        .height('50%')\\n      }\\n      .height('100%')\\n    }\\n    .title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "禁用屏幕朗读焦点的场景",
        "parent_text": "禁用屏幕朗读焦点的场景装饰性的控件一般为分隔符、占位符和美化图标等，这类图形元素仅仅起到调整页面布局或装饰性效果，并不会向用户传达有效的信息或提供交互功能，删除后不影响指引用户体验。可以设置控件的无障碍是否可见的属性将其设置对无障碍不可见，这样在屏幕朗读模式下控件就不会获取焦点和朗读。  accessibilityGroup(true) 用于多个组件的组合，组合内的默认没有焦点。 .accessibilityLevel(\\\"no\\\")用于组件设置不可聚焦，不被无障碍感知。 例如：以下代码同时显示“Broadcast”和“No broadcast”消息，但当ScreenReader处于“打开”状态时，message可被聚焦，但message1将不被聚焦。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1671619173215\\\"'><a name='\\\"section1671619173215\\\"'></a><a name='\\\"section1671619173215\\\"'></a><h4>禁用屏幕朗读焦点的场景</h4><p>装饰性的控件一般为分隔符、占位符和美化图标等，这类图形元素仅仅起到调整页面布局或装饰性效果，并不会向用户传达有效的信息或提供交互功能，删除后不影响指引用户体验。可以设置控件的无障碍是否可见的属性将其设置对无障碍不可见，这样在屏幕朗读模式下控件就不会获取焦点和朗读。</p> <p><span><img originheight='\\\"214\\\"' originwidth='\\\"365\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.43488796562793589096127267539918:50001231000000:2800:2EF131569A534E5DF62D1B4379492CD80898B6A23C399CF2624A4C160160C647.png\\\"'/></span></p> <p>accessibilityGroup(true) 用于多个组件的组合，组合内的默认没有焦点。</p> <p>.accessibilityLevel(\\\"no\\\")用于组件设置不可聚焦，不被无障碍感知。</p> <p>例如：以下代码同时显示“Broadcast”和“No broadcast”消息，但当ScreenReader处于“打开”状态时，message可被聚焦，但message1将不被聚焦。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1061,
        "pre": "@Component\\nexport struct Rule_2_1_4 {\\n  title: string = 'Rule 2.1.4'\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text('Incorrect behavior:') // 播报 \\\"Time Group 12:05 Beijing\\\" + \\\"12:05\\\" + \\\"Beijing\\\".\\n                                    //继续下滑焦点可聚焦至子控件文本重复了两次。这是不正确的。\\n          .width('100%')\\n          .fontSize(12)\\n          .fontColor(Color.Black)\\n          .margin({bottom: 12})\\n        Row(){\\n          Text(\\\"12:05\\\") // time information\\n            .fontSize(32)\\n            .fontColor(Color.Red)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n            .margin({right: 20})\\n\\n          Text(\\\"Beijing\\\") // location information\\n            .fontSize(20)\\n            .fontColor(Color.Green)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n        }\\n        .accessibilityText(\\\"Time Group\\\") // 时间信息、位置信息和此可访问性文本在获得焦点时被朗读。\\n                                         // 带有时间信息的文本组件可聚焦并朗读\\n                                         // 具有位置信息的文本组件可聚焦并朗读\\n        .height(50)\\n        .margin({bottom: 150})\\n\\n        Text('Correct behavior:') // 只朗读 \\\"07:05 Moscow\\\" ，不重复文本。是正确的。\\n          .width('100%')\\n          .fontSize(12)\\n          .fontColor(Color.Black)\\n          .margin({bottom: 12})\\n        Row(){\\n          Text(\\\"07:05\\\") // time information\\n            .fontSize(32)\\n            .fontColor(Color.Red)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n            .margin({right: 20})\\n\\n          Text(\\\"Moscow\\\") // location information\\n            .fontSize(20)\\n            .fontColor(Color.Green)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n        }\\n        .height(50)\\n        .accessibilityGroup(true) // 获取焦点时朗读时间和位置信息。\\n                                  // 带有时间信息的文本组件无法聚焦和朗读\\n                                  //具有位置信息的文本组件无法获得焦点并朗读\\n      }\\n      .alignItems(HorizontalAlign.Start)\\n      .padding(10)\\n    }\\n    .title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "多维嵌套场景",
        "parent_text": "多维嵌套场景如果应用展示的是多维信息，还可能出现“嵌套组”的情况。在嵌套组中，应避免两个可获焦对象的功能或朗读内容产生重复。比如下图的天气卡片，时间和地点信息获取到焦点时，都是朗读的时间信息；不同焦点的重复朗读会额外增减用户的操作步骤，焦点控制杂乱，这些对同一个信息结构的完整描述应该统一标注在这几个子控件的父控件上。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section589861719211\\\"'><a name='\\\"section589861719211\\\"'></a><a name='\\\"section589861719211\\\"'></a><h4>多维嵌套场景</h4><p>如果应用展示的是多维信息，还可能出现“嵌套组”的情况。在嵌套组中，应避免两个可获焦对象的功能或朗读内容产生重复。比如下图的天气卡片，时间和地点信息获取到焦点时，都是朗读的时间信息；不同焦点的重复朗读会额外增减用户的操作步骤，焦点控制杂乱，这些对同一个信息结构的完整描述应该统一标注在这几个子控件的父控件上。</p> <p><span><img originheight='\\\"117\\\"' originwidth='\\\"295\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.92579685848743551403764057551960:50001231000000:2800:AF070151BEA8C8DAB2D605282FF7928E7AABA75165072223E998FF269D53383C.png\\\"'/></span></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1062,
        "pre": "@Component\\nexport struct Rule_2_1_5 {\\n  title: string = 'Rule 2.1.5'\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n\\n        Row(){\\n          //默认只有子组件才能获取焦点\\n         //日期、天气、温度等信息在每个组件独立获取焦点时分别朗读\\n         //在组合式组件规范里是不正确的。\\n          Text(\\\"23 Dec 2023\\\") // 日期信息。组件可独立对焦和朗读\\n            .fontSize(32)\\n            .fontColor(Color.Red)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n            .margin({right: 20})\\n\\n          Column() // 天气信息。组件可独立对焦和朗读\\n            .backgroundColor(Color.Blue)\\n            .width(50)\\n            .height(50)\\n            .accessibilityText(\\\"Snow\\\") // 当该组件被屏幕阅读器选中时，该组件不包含文本信息，因此将读取此文本\\n            .margin({right: 20})\\n\\n          Text(\\\"-1\\\") // 温度信息。组件可独立对焦和朗读\\n            .fontSize(20)\\n            .fontColor(Color.Green)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n        }\\n        .height(50)\\n        .margin({bottom: 20})\\n\\n        Row(){\\n          //因为accessibilityGroup属性设置为true，子组件无法获取焦点。\\n          //获取焦点时，日期、天气、温度信息一起朗读\\n         //此时只有Row可以获取焦点，这是符合组合式组件规范的。\\n          Text(\\\"24 Dec 2023\\\") //日期信息。组件无法聚焦，无法朗读，因为父组件的accessibilityGroup属性设置为true\\n            .fontSize(32)\\n            .fontColor(Color.Red)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n            .margin({right: 20})\\n\\n          Column() //天气信息组件无法聚焦，无法朗读，因为父组件的accessibilityGroup为true\\n            .backgroundColor(Color.Yellow)\\n            .width(50)\\n            .height(50)\\n            .accessibilityText(\\\"Sunny\\\") // 组件不包含文本信息，当组件被屏幕阅读器选中时，因此将读取此文本\\n            .margin({right: 20})\\n\\n          Text(\\\"-7\\\") // //温度信息。组件无法聚焦，无法朗读因为父组件的accessibilityGroup为true\\n            .fontSize(20)\\n            .fontColor(Color.Green)\\n            .fontWeight(FontWeight.Bold)\\n            .textAlign(TextAlign.Center)\\n        }\\n        .height(50)\\n        .margin({bottom: 20})\\n        .accessibilityGroup(true) // 将accessibilityGroup属性设置为true\\n      }\\n      .alignItems(HorizontalAlign.Start)\\n      .padding(10)\\n    }\\n    .title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "组合场景",
        "parent_text": "组合场景在一些场景中，一个功能上完整的UI对象可能是由若干个更小的UI组件组合而成的。若每一个小的UI组件都可以获焦并朗读，则会造成信息冗余和效率降低。同时由于可聚焦的组件过多过细，也会影响触摸浏览时走焦的性能体验。在这种情况下，将它们在功能或语义上聚合成一个自然组并作为一个独立可获焦的UI元素来向视障用户表达内容更加合理，且更加高效。 总体原则是：对于表示同一个对象信息的多个组件，需要进行组合标注，对外只暴露一个无障碍焦点。  如下，可以将多个控件设置为一个组，通过对组设置朗读标签，达到整组播报的效果，组内的子控件设置不可获取焦点。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section16691118192114\\\"'><a name='\\\"section16691118192114\\\"'></a><a name='\\\"section16691118192114\\\"'></a><h4>组合场景</h4><p>在一些场景中，一个功能上完整的UI对象可能是由若干个更小的UI组件组合而成的。若每一个小的UI组件都可以获焦并朗读，则会造成信息冗余和效率降低。同时由于可聚焦的组件过多过细，也会影响触摸浏览时走焦的性能体验。在这种情况下，将它们在功能或语义上聚合成一个自然组并作为一个独立可获焦的UI元素来向视障用户表达内容更加合理，且更加高效。</p> <p>总体原则是：对于表示同一个对象信息的多个组件，需要进行组合标注，对外只暴露一个无障碍焦点。</p> <p><span><img originheight='\\\"393\\\"' originwidth='\\\"361\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.47425495902704882400333635638860:50001231000000:2800:E15620F3E665F6BEDA673C7C176DD4F01E89F8E9B55B0CE26A9B6095756FBD0E.png\\\"'/></span></p> <p>如下，可以将多个控件设置为一个组，通过对组设置朗读标签，达到整组播报的效果，组内的子控件设置不可获取焦点。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1063,
        "pre": "const RESOURCE_STR_PLAY = $r('app.media.play')\\nconst RESOURCE_STR_PAUSE = $r('app.media.pause')\\n\\n@Component\\nexport struct Rule_2_1_6 {\\n  title: string = 'Rule 2.1.6'\\n  @State isPlaying: boolean = false\\n\\n  play() {\\n    // play audio file\\n  }\\n\\n  pause() {\\n    // pause playing of audio file\\n  }\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Flex({\\n          direction: FlexDirection.Column,\\n          alignItems: ItemAlign.Center,\\n          justifyContent: FlexAlign.Center,\\n        }) {\\n          Row() {\\n            Image(this.isPlaying ? RESOURCE_STR_PAUSE : RESOURCE_STR_PLAY)\\n              .width(50)\\n              .height(50)\\n              .onClick(() => {\\n                this.isPlaying = !this.isPlaying\\n                if (this.isPlaying) {\\n                  this.play()\\n                } else {\\n                  this.pause()\\n                }\\n              })\\n              .accessibilityText(this.isPlaying ? 'Pause' : 'Play') // 设置注释信息\\n            Text('Good_morning.mp3')\\n              .margin({\\n                left: 10\\n              })\\n          }\\n        }\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor(Color.White)\\n      }\\n    }\\n    .title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "按钮标注场景",
        "parent_text": "按钮标注场景对于用户可点击等操作的任何按钮，如果不是文本类控件，则须通过给出标注信息，包括用户自定义的控件中的虚拟按钮区域，否则可能会导致屏幕朗读用户无法完成对应的功能。 此类控件在进行标注时，标注文本不要包含控件类型、“单指双击即可打开”之类的字符串，此部分指引由屏幕朗读根据控件类型、控件状态，并结合用户是否开启了“新手指引”自动追加朗读。  在下面的代码片段中，您可以看到Image组件（它实际上是一个播放/暂停按钮），通过设置accessibilityText属性提供标注信息：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section152421418102119\\\"'><a name='\\\"section152421418102119\\\"'></a><a name='\\\"section152421418102119\\\"'></a><h4>按钮标注场景</h4><p>对于用户可点击等操作的任何按钮，如果不是文本类控件，则须通过给出标注信息，包括用户自定义的控件中的虚拟按钮区域，否则可能会导致屏幕朗读用户无法完成对应的功能。</p> <p>此类控件在进行标注时，标注文本不要包含控件类型、“单指双击即可打开”之类的字符串，此部分指引由屏幕朗读根据控件类型、控件状态，并结合用户是否开启了“新手指引”自动追加朗读。</p> <p><span><img originheight='\\\"85\\\"' originwidth='\\\"331\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.43633514239700962581897042583839:50001231000000:2800:22FEA934676CE052BB11D616200D1324D1DD9F58FF8FA321FD59F336C42E0057.png\\\"'/></span></p> <p>在下面的代码片段中，您可以看到Image组件（它实际上是一个播放/暂停按钮），通过设置accessibilityText属性提供标注信息：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1064,
        "pre": "@Component\\nexport struct Rule_2_1_7 {\\n  title: string = 'Rule 2.1.7'\\n  private description: string = 'gesture swipe left then up'\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Flex({\\n          direction: FlexDirection.Column,\\n          alignItems: ItemAlign.Center,\\n          justifyContent: FlexAlign.Center,\\n        }) {\\n          Column() {\\n            Image($r(\\\"app.media.gesture_swipe_left_then_up\\\"))\\n              .width(220)\\n              .height(220)\\n            Text(this.description)\\n              .fontSize(22)\\n              .fontColor(Color.Red)\\n              .fontWeight(FontWeight.Bold)\\n              .textAlign(TextAlign.Center)\\n          }.accessibilityGroup(true) // 将图像和文本合并为一个辅助功能对象\\n        }\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor(Color.White)\\n      }\\n    }\\n    .title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "插画/视频/动画的播报场景",
        "parent_text": "插画/视频/动画的播报场景如下图，插画信息有一定提示作用，插画和对应的功能介绍应该组合在一起，当焦点落到插画或者包含插画的符合控件时，需要朗读出对应的功能描述。建议插画和功能介绍作为一个组合使用一个焦点朗读。它可以借助“accessibilityGroup(true)”属性来实现。   以下List的每个Item，应该进行组合标注，从而给用户一个完整的提示信息： 对于列表/网格控件，控件中的每个项目默认需要一起标记。列表/网格控件，每个item应提供item包含的元素的所有信息。建议朗读列表每一项的所有嵌套元素的组合信息。  它可以借助“accessibilityGroup(true)”属性来实现： @Preview\\n@Component\\nexport struct Rule_2_1_9 {\\n  title: string = 'Rule 2.1.9'\\n\\n  build() {\\n    NavDestination() {\\n      Flex({\\n        direction: FlexDirection.Column,\\n        alignItems: ItemAlign.Center,\\n        justifyContent: FlexAlign.Center,\\n      }) {\\n        Column() {\\n          Item_2_1_9({\\n            title: 'Video card',\\n            subtitle: 'provided with options',\\n            time: '1:23 hrs',\\n            color: '#ffdee5ff'\\n          })\\n          Item_2_1_9({\\n            title: 'Music card',\\n            subtitle: 'sound feedback available',\\n            time: '2:75 min',\\n            color: '#92e1ffd8'\\n          })\\n          Item_2_1_9({\\n            title: 'Live card',\\n            subtitle: 'health support on request',\\n            time: '10:55',\\n            color: '#fff3deff'\\n          })\\n          Item_2_1_9({\\n            title: 'Play card',\\n            subtitle: 'play station tournament',\\n            time: '5:12 hrs',\\n            color: '#92e1ffd8'\\n          })\\n          Item_2_1_9({\\n            title: 'Theater card',\\n            subtitle: 'ticket on concert',\\n            time: '2:75 min',\\n            color: '#ffdee5ff'\\n          })\\n        }\\n      }\\n    }.title(this.title)\\n  }\\n}\\n\\n@Component\\nexport struct Item_2_1_9 {\\n  title: string = 'Video card'\\n  subtitle: string = 'provided with additional options'\\n  time: string = '1:23 hr'\\n  color: ResourceColor = \\\"#80FAFAFA\\\"\\n\\n  build() {\\n    Flex({\\n      direction: FlexDirection.Row,\\n      alignItems: ItemAlign.Center,\\n      justifyContent: FlexAlign.SpaceBetween,\\n    }) {\\n      Column() {\\n        Text(this.title)\\n          .fontSize(22)\\n          .fontWeight(FontWeight.Bold)\\n          .textAlign(TextAlign.Center)\\n          .padding({ left: 20, right: 0 })\\n        Text(this.subtitle)\\n          .fontSize(14)\\n          .fontColor(Color.Gray)\\n          .fontWeight(FontWeight.Normal)\\n          .textAlign(TextAlign.Center)\\n          .padding({ left: 20, right: 0 })\\n      }\\n\\n      Column() {\\n        Text(this.time)\\n          .fontSize(20)\\n          .fontWeight(FontWeight.Normal)\\n          .textAlign(TextAlign.Center)\\n          .padding({ left: 10, right: 10 })\\n      }\\n\\n      Column() {\\n        Image($r(\\\"app.media.ic_arrow\\\"))\\n          .width(28)\\n          .height(28)\\n          .fillColor(Color.Gray)\\n      }.align(Alignment.End)\\n\\n    }\\n    .width('90%')\\n    .height(75)\\n    .border({\\n      width: 1,\\n      color: '#FFC0C0C0',\\n      radius: 8,\\n      style: {\\n        top: BorderStyle.Solid,\\n      }\\n    })\\n    .backgroundColor(this.color)\\n    .accessibilityGroup(true) // combines text and image into single object\\n    .margin({ top: 10 })\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section134130183216\\\"'><a name='\\\"section134130183216\\\"'></a><a name='\\\"section134130183216\\\"'></a><h4>插画/视频/动画的播报场景</h4><p>如下图，插画信息有一定提示作用，插画和对应的功能介绍应该组合在一起，当焦点落到插画或者包含插画的符合控件时，需要朗读出对应的功能描述。建议插画和功能介绍作为一个组合使用一个焦点朗读。它可以借助“accessibilityGroup(true)”属性来实现。</p> <p><span><img originheight='\\\"376\\\"' originwidth='\\\"362\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.22903105696495458627891308208241:50001231000000:2800:29A48D344DF25E25A8AECA30B2D10F7E2122CC6A461D223C7B2188CEBBCF7427.png\\\"'/></span></p>  <p>以下List的每个Item，应该进行组合标注，从而给用户一个完整的提示信息：</p> <ul><li>对于列表/网格控件，控件中的每个项目默认需要一起标记。</li><li>列表/网格控件，每个item应提供item包含的元素的所有信息。</li><li>建议朗读列表每一项的所有嵌套元素的组合信息。</li></ul> <p><span><img originheight='\\\"296\\\"' originwidth='\\\"362\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.90652380760242668489869618303715:50001231000000:2800:7BFD1D2D4806CF7FD0906CFA89788EB0A4B18D876C750738E2A5C9F8224ECD2A.png\\\"'/></span></p> <p>它可以借助“accessibilityGroup(true)”属性来实现：</p> <pre class='\\\"screen\\\"'>@Preview\\n@Component\\nexport struct Rule_2_1_9 {\\n  title: string = 'Rule 2.1.9'\\n\\n  build() {\\n    NavDestination() {\\n      Flex({\\n        direction: FlexDirection.Column,\\n        alignItems: ItemAlign.Center,\\n        justifyContent: FlexAlign.Center,\\n      }) {\\n        Column() {\\n          Item_2_1_9({\\n            title: 'Video card',\\n            subtitle: 'provided with options',\\n            time: '1:23 hrs',\\n            color: '#ffdee5ff'\\n          })\\n          Item_2_1_9({\\n            title: 'Music card',\\n            subtitle: 'sound feedback available',\\n            time: '2:75 min',\\n            color: '#92e1ffd8'\\n          })\\n          Item_2_1_9({\\n            title: 'Live card',\\n            subtitle: 'health support on request',\\n            time: '10:55',\\n            color: '#fff3deff'\\n          })\\n          Item_2_1_9({\\n            title: 'Play card',\\n            subtitle: 'play station tournament',\\n            time: '5:12 hrs',\\n            color: '#92e1ffd8'\\n          })\\n          Item_2_1_9({\\n            title: 'Theater card',\\n            subtitle: 'ticket on concert',\\n            time: '2:75 min',\\n            color: '#ffdee5ff'\\n          })\\n        }\\n      }\\n    }.title(this.title)\\n  }\\n}\\n\\n@Component\\nexport struct Item_2_1_9 {\\n  title: string = 'Video card'\\n  subtitle: string = 'provided with additional options'\\n  time: string = '1:23 hr'\\n  color: ResourceColor = \\\"#80FAFAFA\\\"\\n\\n  build() {\\n    Flex({\\n      direction: FlexDirection.Row,\\n      alignItems: ItemAlign.Center,\\n      justifyContent: FlexAlign.SpaceBetween,\\n    }) {\\n      Column() {\\n        Text(this.title)\\n          .fontSize(22)\\n          .fontWeight(FontWeight.Bold)\\n          .textAlign(TextAlign.Center)\\n          .padding({ left: 20, right: 0 })\\n        Text(this.subtitle)\\n          .fontSize(14)\\n          .fontColor(Color.Gray)\\n          .fontWeight(FontWeight.Normal)\\n          .textAlign(TextAlign.Center)\\n          .padding({ left: 20, right: 0 })\\n      }\\n\\n      Column() {\\n        Text(this.time)\\n          .fontSize(20)\\n          .fontWeight(FontWeight.Normal)\\n          .textAlign(TextAlign.Center)\\n          .padding({ left: 10, right: 10 })\\n      }\\n\\n      Column() {\\n        Image($r(\\\"app.media.ic_arrow\\\"))\\n          .width(28)\\n          .height(28)\\n          .fillColor(Color.Gray)\\n      }.align(Alignment.End)\\n\\n    }\\n    .width('90%')\\n    .height(75)\\n    .border({\\n      width: 1,\\n      color: '#FFC0C0C0',\\n      radius: 8,\\n      style: {\\n        top: BorderStyle.Solid,\\n      }\\n    })\\n    .backgroundColor(this.color)\\n    .accessibilityGroup(true) // combines text and image into single object\\n    .margin({ top: 10 })\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1065,
        "pre": "import accessibility from '@ohos.accessibility';\\n\\nlet eventInfo: accessibility.EventInfo = ({\\n  type: 'announceForAccessibility',\\n  bundleName: 'com.example.pagesrouter',\\n  triggerAction: 'common',\\n  textAnnouncedForAccessibility: 'test123 text'\\n});\\n\\naccessibility.sendAccessibilityEvent(eventInfo).then(() => {\\n  console.info(`test123 Succeeded in send event, eventInfo is ${JSON.stringify(eventInfo)}`);\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "内容动态变化场景",
        "parent_text": "内容动态变化场景适用场景：界面上重要内容在动态变化后，需要实时发送变化后的朗读内容说明：如果界面上内容发生动态变化且其内容对用户具有必要的提示/告知/指导作用，则其发生变化后需对其变化内容进行朗读，可调用无障碍提供的主动朗读接口进行播报。   表1 EventInfo 说明属性  类型  说明  例    type  EventType  主动播报事件类型  announceForAccessibility   bundleName  string  目标应用名  当前应用包名   triggerAction  Action  触发事件的Action  click或其他都不会有任何影响   textAnnouncedForAccessibility  string  主动播报的内容  test123 text     ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section36217187219\\\"'><a name='\\\"section36217187219\\\"'></a><a name='\\\"section36217187219\\\"'></a><h4>内容动态变化场景</h4><ol><li>适用场景：界面上重要内容在动态变化后，需要实时发送变化后的朗读内容</li><li>说明：如果界面上内容发生动态变化且其内容对用户具有必要的提示/告知/指导作用，则其发生变化后需对其变化内容进行朗读，可调用无障碍提供的主动朗读接口进行播报。</li></ol> <p><span><img height='\\\"499.65373500000004\\\"' originheight='\\\"731\\\"' originwidth='\\\"359\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.60973887315633614922359152957054:50001231000000:2800:0F4A7B4A3B5D6F0A23D6B86CE9B46C0A300C0018077584D7CF6AADD8D012D6B5.png\\\"' title='\\\"点击放大\\\"' width='\\\"245.38500000000002\\\"'/></span></p>  <div class='\\\"tablenoborder\\\"'><table><caption><b>表1 </b>EventInfo 说明</caption><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.5.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>属性</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.5.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.5.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>说明</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.8.5.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>例</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>type</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>EventType</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>主动播报事件类型</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>announceForAccessibility</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>bundleName</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>目标应用名</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>当前应用包名</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>triggerAction</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>Action</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>触发事件的Action</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>click或其他都不会有任何影响</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>textAnnouncedForAccessibility</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>主动播报的内容</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>test123 text</p> </td> </tr> </tbody></table> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1066,
        "pre": "import prompt from '@system.prompt'\\n\\nconst RESOURCE_STR_PLAY = $r('app.media.play')\\nconst RESOURCE_STR_PAUSE = $r('app.media.pause')\\n\\n@Component\\nexport struct Rule_2_1_12 {\\n  title: string = 'Rule 2.1.12'\\n  @State isPlaying: boolean = true\\n\\n  play() {\\n    // play audio file\\n  }\\n\\n  pause() {\\n    // pause playing of audio file\\n  }\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Flex({\\n          direction: FlexDirection.Column,\\n          alignItems: ItemAlign.Center,\\n          justifyContent: FlexAlign.Center,\\n        }) {\\n          Row() {\\n\\n            Image(this.isPlaying ? RESOURCE_STR_PAUSE : RESOURCE_STR_PLAY)\\n              .width(50)\\n              .height(50)\\n              .onClick(() => {\\n                prompt.showToast({\\n                  message :this.isPlaying ? \\\"Play\\\" : \\\"Pause\\\"\\n                })\\n                this.isPlaying = !this.isPlaying\\n                if (this.isPlaying) {\\n                  this.play()\\n                } else {\\n                  this.pause()\\n                }\\n              })\\n              .accessibilityText(this.isPlaying ? 'Pause' : 'Play') // 设置可访问性框架的注释信息\\n          }\\n        }\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor(Color.White)\\n      }\\n    }.title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "控件状态变化场景",
        "parent_text": "控件状态变化场景例如下图，播放暂停按钮对应着两种状态，在状态切换时需要实时变化对应的标注信息。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section529735123113\\\"'><a name='\\\"section529735123113\\\"'></a><a name='\\\"section529735123113\\\"'></a><h4>控件状态变化场景</h4><p>例如下图，播放暂停按钮对应着两种状态，在状态切换时需要实时变化对应的标注信息。</p> <p><span><img originheight='\\\"112\\\"' originwidth='\\\"648\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120328.12473795366847369590515240965148:50001231000000:2800:4BEBED27D75513A0E117F1F3CB6B0CE2BB34A654391A977F7DAA50D1C1F8E7A0.png\\\"'/></span></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1067,
        "pre": "@Component\\nexport struct Rule_2_1_14 {\\n  title: string = 'Rule 2.1.14'\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Flex({\\n          direction: FlexDirection.Column,\\n          alignItems: ItemAlign.Center,\\n          justifyContent: FlexAlign.Center,\\n        }) {\\n          Row() {\\n            Text('Connection state').fontSize(30)\\n          }\\n          Row() {\\n            Radio({ value: 'Radio1', group: 'radioGroup' }).checked(true)\\n              .radioStyle({\\n                checkedBackgroundColor: Color.Red\\n              })\\n              .height(50)\\n              .width(50)\\n              .onChange((isChecked: boolean) => {\\n                console.log('Radio1 status is ' + isChecked)\\n              })\\n            Text('Connection interrupted').fontColor(Color.Red)\\n          }.width('80%')\\n          .accessibilityGroup(true) //将单选和文本合并到单个对象中\\n        }\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor(Color.White)\\n      }\\n    }.title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作错误场景",
        "parent_text": "操作错误场景比如网络连接错误，或者其他警告信息，不能仅仅以颜色区分，需要实时告诉用户错误提示和改进方法。   如下是一个将连接中断播报出来的例子。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section15781756316\\\"'><a name='\\\"section15781756316\\\"'></a><a name='\\\"section15781756316\\\"'></a><h4>操作错误场景</h4><p>比如网络连接错误，或者其他警告信息，不能仅仅以颜色区分，需要实时告诉用户错误提示和改进方法。</p> <p><span><img originheight='\\\"163\\\"' originwidth='\\\"364\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120329.25189436740133947075818863436886:50001231000000:2800:013F8B3632022A29F573F944F51B30E45587FA067BB446F4FD2C7BE34C35E4E0.png\\\"'/></span></p> <p></p> <p>如下是一个将连接中断播报出来的例子。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1068,
        "pre": "@Component\\nexport struct Rule_2_1_16 {\\n  title: string = 'Rule 2.1.16'\\n  private multilingual: string = 'It is convenient: 屏幕朗读已开启 and use'\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Flex({\\n          direction: FlexDirection.Column,\\n          alignItems: ItemAlign.Center,\\n          justifyContent: FlexAlign.Center,\\n        }) {\\n          Row() {\\n            Text(this.multilingual)\\n              .fontSize(30)\\n              .fontColor(Color.Blue)\\n          }\\n          .width('80%')\\n        }\\n        .width('100%')\\n        .height('100%')\\n        .backgroundColor(Color.White)\\n      }\\n    }.title(this.title)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "多语种场景",
        "parent_text": "多语种场景当对朗读内容进行标注时，须对标注字符串进行多语种翻译，具体支持的语种和应用本身界面支持的语种保持一致。若采用多个字符串进行朗读内容的拼接，需考虑多语种的情况，避免拼接后朗读错误，例如阿拉伯语从右到左。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1493519543110\\\"'><a name='\\\"section1493519543110\\\"'></a><a name='\\\"section1493519543110\\\"'></a><h4>多语种场景</h4><p>当对朗读内容进行标注时，须对标注字符串进行多语种翻译，具体支持的语种和应用本身界面支持的语种保持一致。若采用多个字符串进行朗读内容的拼接，需考虑多语种的情况，避免拼接后朗读错误，例如阿拉伯语从右到左。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1069,
        "pre": "build() {\\n    Column() {\\n        Button(`待聚焦组件`).id(\\\"abc345\\\")\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "重新设置新焦点位置的场景",
        "parent_text": "重新设置新焦点位置的场景适用场景：当前焦点所在的控件消失或者隐藏后，需要重新设置新的焦点位置说明：一般情况下，新焦点应该在原控件位置的下一个控件上，不应该跳变到前面的控件。应用可以调用主动聚焦的接口对想要聚焦的组件进行主动聚焦。示例代码：  import accessibility from '@ohos.accessibility';\\n\\nlet eventInfo: accessibility.EventInfo = ({\\n  type: 'requestFocusForAccessibility',\\n  bundleName: 'com.example.pagesrouter',\\n  triggerAction: 'common',\\n  customId: 'abc345'\\n});\\n\\naccessibility.sendAccessibilityEvent(eventInfo).then(() => {\\nconsole.info(`test123 Succeeded in send event, eventInfo is ${JSON.stringify(eventInfo)}`);\\n}); 表2 EventInfo 说明属性  类型  说明  例    type  EventType  主动聚焦事件类型  requestFocusForAccessibility   bundleName  string  目标应用名  当前应用包名   triggerAction  Action  触发事件的Action  click或其他都不会有任何影响   customId  string  组件id  abc345     ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section172972365321\\\"'><a name='\\\"section172972365321\\\"'></a><a name='\\\"section172972365321\\\"'></a><h4>重新设置新焦点位置的场景</h4><ol><li>适用场景：当前焦点所在的控件消失或者隐藏后，需要重新设置新的焦点位置</li><li>说明：一般情况下，新焦点应该在原控件位置的下一个控件上，不应该跳变到前面的控件。应用可以调用主动聚焦的接口对想要聚焦的组件进行主动聚焦。</li><li>示例代码：</li></ol>  <pre class='\\\"screen\\\"'>import accessibility from '@ohos.accessibility';\\n\\nlet eventInfo: accessibility.EventInfo = ({\\n  type: 'requestFocusForAccessibility',\\n  bundleName: 'com.example.pagesrouter',\\n  triggerAction: 'common',\\n  customId: 'abc345'\\n});\\n\\naccessibility.sendAccessibilityEvent(eventInfo).then(() =&gt; {\\nconsole.info(`test123 Succeeded in send event, eventInfo is ${JSON.stringify(eventInfo)}`);\\n});</pre> <div class='\\\"tablenoborder\\\"'><table><caption><b>表2 </b>EventInfo 说明</caption><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.5.2.5.1.1\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>属性</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.5.2.5.1.2\\\"' valign='\\\"top\\\"' width='\\\"20.79%\\\"'><p>类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.5.2.5.1.3\\\"' valign='\\\"top\\\"' width='\\\"24.58%\\\"'><p>说明</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.13.5.2.5.1.4\\\"' valign='\\\"top\\\"' width='\\\"29.630000000000003%\\\"'><p>例</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>type</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.79%\\\"'><p>EventType</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.58%\\\"'><p>主动聚焦事件类型</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"29.630000000000003%\\\"'><p>requestFocusForAccessibility</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>bundleName</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.79%\\\"'><p>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.58%\\\"'><p>目标应用名</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"29.630000000000003%\\\"'><p>当前应用包名</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>triggerAction</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.79%\\\"'><p>Action</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.58%\\\"'><p>触发事件的Action</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"29.630000000000003%\\\"'><p>click或其他都不会有任何影响</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"25%\\\"'><p>customId</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20.79%\\\"'><p>string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"24.58%\\\"'><p>组件id</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"29.630000000000003%\\\"'><p>abc345</p> </td> </tr> </tbody></table> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/screen-reading-adapt-guide.html"
    },
    {
        "id": 1070,
        "pre": "ad_tech_id + '\\\\u2063' + campaign_id + '\\\\u2063' + source_id + '\\\\u2063' + destination_id + '\\\\u2063' + trigger_data + '\\\\u2063' + nonce + '\\\\u2063' + timestamp",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "按照如下规则拼接待验签的字符串： 其中，非必填字段仅当满足回传条件时才携带，验签时，应根据接收到的请求中包含的字段拼接字符串进行验签，例如，回传的消息结构中，仅包含ad_tech_id、destination_id，则拼接的待验签字符串为： ad_tech_id + '\\\\u2063' + destination_id + '\\\\u2063' + nonce + '\\\\u2063' + timestamp",
        "import_module": null,
        "parent": "<li>按照如下规则拼接待验签的字符串： <p>其中，非必填字段仅当满足回传条件时才携带，验签时，应根据接收到的请求中包含的字段拼接字符串进行验签，例如，回传的消息结构中，仅包含ad_tech_id、destination_id，则拼接的待验签字符串为：</p> <pre class='\\\"typescript\\\"'>ad_tech_id + '\\\\u2063' + destination_id + '\\\\u2063' + nonce + '\\\\u2063' + timestamp</pre></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-receive.html"
    },
    {
        "id": 1071,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/triple-slash-reference\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_triple-slash-reference.html"
    },
    {
        "id": 1072,
        "pre": "import { value } from 'code';\\nexport { value };",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "import { value } from 'code';\\nexport { value };",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_triple-slash-reference.html"
    },
    {
        "id": 1073,
        "pre": "import { attributionTestManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-test.html"
    },
    {
        "id": 1074,
        "pre": "import { attributionTestManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-test.html"
    },
    {
        "id": 1075,
        "pre": "import { attributionTestManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-test.html"
    },
    {
        "id": 1076,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-transition-to-replace-animateto\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-transition-to-replace-animateto.html"
    },
    {
        "id": 1077,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State show: boolean = true;\\n\\n  build() {\\n    Column() {\\n      Row() {\\n        if (this.show) {\\n          Text('value')\\n            // Set id to make transition interruptible\\n            .id('myText')\\n            .transition(TransitionEffect.OPACITY.animation({ duration: 1000 }))\\n        }\\n      }.width('100%')\\n      .height(100)\\n      .justifyContent(FlexAlign.Center)\\n      Text('toggle state')\\n        .onClick(() => {\\n          // Through transition, animates the appearance or disappearance of transparency.\\n          this.show = !this.show;\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-transition-to-replace-animateto.html"
    },
    {
        "id": 1078,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State mOpacity: number = 1;\\n  @State show: boolean = true;\\n\\n  build() {\\n    Column() {\\n      Row() {\\n        if (this.show) {\\n          Text('value')\\n            .opacity(this.mOpacity)\\n        }\\n      }\\n      .width('100%')\\n      .height(100)\\n      .justifyContent(FlexAlign.Center)\\n\\n      Text('toggle state')\\n        .onClick(() => {\\n          this.show = true;\\n          animateTo({\\n            duration: 1000, onFinish: () => {\\n              if (this.mOpacity === 0) {\\n                this.show = false;\\n              }\\n            }\\n          }, () => {\\n            this.mOpacity = this.mOpacity === 1 ? 0 : 1;\\n          })\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-transition-to-replace-animateto.html"
    },
    {
        "id": 1079,
        "pre": "{ \\n  \\\"apiType\\\": 'stageMode', \\n  \\\"buildOption\\\": {   \\n  }, \\n  \\\"targets\\\": [  //定义不同的target \\n    { \\n      \\\"name\\\": \\\"default\\\",  //默认target名称default \\n    }, \\n    { \\n      \\\"name\\\": \\\"free\\\",  //免费版target名称 \\n    }, \\n    { \\n      \\\"name\\\": \\\"pay\\\",  //付费版target名称 \\n    } \\n  ] \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "定制HAP多目标构建产物",
        "parent_text": "定制HAP多目标构建产物每一个Entry/Feature模块均支持定制不同的target，通过在模块中的build-profile.json5文件中实现差异化定制，当前支持HAP包名、设备类型（deviceType）、源码集（source）、资源（resource）、buildOption配置项（如C++依赖的.so、混淆配置、abi类型、cppFlags等）、分发规则（distributionFilter）的定制。  定义目标产物target 每一个target对应一个定制的HAP，因此，在定制HAP多目标构建产物前，应提前规划好需要定制的target名称。例如，以ArkTS Stage模型为例，定义一个免费版和付费版，模块级build-profile.json5文件示例如下：  按照上述target的定义，在编译构建时，会同时打包生成default、free和pay三个不同的HAP。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1011341611469\\\"'><a name='\\\"section1011341611469\\\"'></a><a name='\\\"section1011341611469\\\"'></a><h4>定制HAP多目标构建产物</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p7602131215374\\\"'>每一个Entry/Feature模块均支持定制不同的target，通过在模块中的build-profile.json5文件中实现差异化定制，当前支持HAP包名、设备类型（deviceType）、源码集（source）、资源（resource）、buildOption配置项（如C++依赖的.so、混淆配置、abi类型、cppFlags等）、分发规则（distributionFilter）的定制。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174673__p102483683811\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002202174673__p1862644711376\\\"'><strong>定义目标产物target</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174673__p18626184753719\\\"'>每一个target对应一个定制的HAP，因此，在定制HAP多目标构建产物前，应提前规划好需要定制的target名称。例如，以ArkTS Stage模型为例，定义一个免费版和付费版，模块级build-profile.json5文件示例如下：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202174673__p142293215388\\\"'>按照上述target的定义，在编译构建时，会同时打包生成default、free和pay三个不同的HAP。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1080,
        "pre": "{ \\n  \\\"apiType\\\": \\\"stageMode\\\", \\n  \\\"buildOption\\\": { \\n  }, \\n  \\\"targets\\\": [ \\n    { \\n      \\\"name\\\": \\\"default\\\", \\n\\n    }, \\n    { \\n      \\\"name\\\": \\\"free\\\", \\n      \\\"config\\\": { \\n        \\\"distributionFilter\\\": {  // 具体请参考distributionFilter标签\\n          \\\"screenShape\\\": { // 屏幕形状枚举 \\n            \\\"policy\\\": \\\"include\\\", \\n            \\\"value\\\": [\\\"circle\\\"] \\n          } \\n        } \\n      } \\n    }, \\n    { \\n      \\\"name\\\": \\\"pay\\\", \\n      \\\"config\\\": { \\n        \\\"distributionFilter\\\": { \\n          \\\"screenShape\\\": { \\n            \\\"policy\\\": \\\"include\\\", \\n            \\\"value\\\": [\\\"rect\\\"] \\n          } \\n        } \\n      } \\n    } \\n  ] \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义产物的distributionFilter",
        "parent_text": "[h2]定义产物的distributionFilter在未定义target的分发规则distributionFilter时，以module配置distroFilter/distributionFilter分发规则为准。 针对多target存在相同设备类型deviceType的场景，相同设备类型的target需要指定分发规则distributionFilter。 如果是FA工程，请将distributionFilter字段替换为distroFilter。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1214253811115\\\"'><a name='\\\"section1214253811115\\\"'></a><a name='\\\"section1214253811115\\\"'></a><h4>[h2]定义产物的distributionFilter</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p1495231320419\\\"'>在未定义target的分发规则<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-add-new-module#section18939175113911\\\"'>distributionFilter</a>时，以module配置distroFilter/distributionFilter分发规则为准。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174673__p1595281344118\\\"'>针对多target存在相同设备类型deviceType的场景，相同设备类型的target需要指定分发规则distributionFilter。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174673__p199521913194111\\\"'>如果是FA工程，请将distributionFilter字段替换为distroFilter。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1081,
        "pre": "{ \\n   \\\"apiType\\\": 'stageMode', \\n   \\\"buildOption\\\": { \\n   }, \\n   \\\"targets\\\": [ \\n     { \\n       \\\"name\\\": \\\"default\\\", \\n       \\\"source\\\": {  //定义Stage模型中默认版target的pages源码文件\\n         \\\"pages\\\": [ \\n           \\\"pages/Index\\\" \\n         ] \\n       } \\n     }, \\n     { \\n       \\\"name\\\": \\\"free\\\", \\n       \\\"config\\\": { \\n         \\\"deviceType\\\": [ \\n           \\\"phone\\\" \\n         ] \\n       }, \\n       \\\"source\\\": {  //定义Stage模型中免费版target的pages源码文件\\n         \\\"pages\\\": [ \\n           \\\"pages/Index\\\", \\n           \\\"pages/Page1\\\" \\n         ] \\n       } \\n     }, \\n     { \\n       \\\"name\\\": \\\"pay\\\", \\n       \\\"config\\\": { \\n         \\\"deviceType\\\": [ \\n           \\\"phone\\\" \\n         ] \\n       }, \\n       \\\"source\\\": {  //定义Stage模型中付费版target的pages源码文件\\n         \\\"pages\\\": [ \\n           \\\"pages/Index\\\", \\n           \\\"pages/Page2\\\" \\n         ] \\n       } \\n     } \\n   ] \\n }",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "例如，Stage模型中的工程，在模块的pages目录下分别定义了Index.ets、Page1.ets和Page2.ets三个页面。其中default使用了Index.ets页面；free使用了Index.ets和Page1.ets页面；pay使用了Index.ets和Page2.ets页面，则示例代码如下所示： ",
        "import_module": null,
        "parent": "<li id='\\\"li498885416417\\\"'>例如，Stage模型中的工程，在模块的pages目录下分别定义了Index.ets、Page1.ets和Page2.ets三个页面。其中default使用了Index.ets页面；free使用了Index.ets和Page1.ets页面；pay使用了Index.ets和Page2.ets页面，则示例代码如下所示： </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1082,
        "pre": "{ \\n   \\\"apiType\\\": 'stageMode', \\n   \\\"buildOption\\\": { \\n   }, \\n   \\\"targets\\\": [ \\n     { \\n       \\\"name\\\": \\\"default\\\", \\n       \\\"source\\\": {\\n        \\\"abilities\\\": [\\n          {\\n            \\\"name\\\": \\\"EntryAbility\\\",\\n            \\\"icon\\\":\\\"$media:layered_image\\\",\\n            \\\"label\\\":\\\"$string:EntryAbility_label\\\",\\n            \\\"launchType\\\": \\\"singleton\\\"\\n          }\\n        ]\\n      }\\n     }, \\n     { \\n       \\\"name\\\": \\\"free\\\", \\n       \\\"source\\\": {\\n        \\\"abilities\\\": [\\n          {\\n            \\\"name\\\": \\\"EntryAbility\\\",\\n            \\\"icon\\\":\\\"$media:layered_image\\\",\\n            \\\"label\\\":\\\"$string:EntryAbility_label\\\",\\n            \\\"launchType\\\": \\\"multiton\\\"\\n          }\\n        ]\\n      }\\n     }\\n   ] \\n }",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义产物的icon、label、launchType",
        "parent_text": "[h2]定义产物的icon、label、launchType针对每一个的target的ability，均可以定制不同的icon、label和launchType。如果不定义，则该target采用module.json5中module.abilities配置的icon、label，launchType默认为\\\"singleton\\\"。示例如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section82111917125413\\\"'><a name='\\\"section82111917125413\\\"'></a><a name='\\\"section82111917125413\\\"'></a><h4>[h2]定义产物的icon、label、launchType</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p189514414559\\\"'>针对每一个的target的ability，均可以定制不同的icon、label和launchType。如果不定义，则该target采用module.json5中module.abilities配置的icon、label，launchType默认为\\\"singleton\\\"。示例如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1083,
        "pre": "{ \\n  \\\"apiType\\\": 'stageMode', \\n  \\\"buildOption\\\": { \\n  }, \\n  \\\"targets\\\": [ \\n    { \\n      \\\"name\\\": \\\"default\\\"  //未定义deviceType，默认支持config.json或module.json5中定义的设备类型 \\n    }, \\n    { \\n      \\\"name\\\": \\\"free\\\",\\n      \\\"config\\\": { \\n        \\\"deviceType\\\": [  //定义free支持的设备类型为2in1\\n          \\\"2in1\\\" \\n        ] \\n      } \\n    }\\n  ] \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义产物的deviceType",
        "parent_text": "[h2]定义产物的deviceType每一个target均可以指定支持的设备类型deviceType，也可以不定义。如果不定义，则该target默认支持config.json或module.json5中定义的设备类型。 同时，在定义每个target的deviceType时，支持的设备类型必须在config.json或module.json5中已经定义。例如，在上述定义的2个target中，分别定义default默认支持所有设备类型，free版本只支持2in1设备。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section18788124274410\\\"'><a name='\\\"section18788124274410\\\"'></a><a name='\\\"section18788124274410\\\"'></a><h4>[h2]定义产物的deviceType</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p274661116533\\\"'>每一个target均可以指定支持的设备类型deviceType，也可以不定义。如果不定义，则该target默认支持config.json或module.json5中定义的设备类型。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174673__p15746311105319\\\"'>同时，在定义每个target的deviceType时，支持的设备类型必须在config.json或module.json5中已经定义。例如，在上述定义的2个target中，分别定义default默认支持所有设备类型，free版本只支持2in1设备。</p>  <p id='\\\"ZH-CN_TOPIC_0000002202174673__p7747311165320\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1084,
        "pre": "{\\n  \\\"apiType\\\": 'stageMode',\\n  \\\"buildOption\\\": {\\n    \\\"externalNativeOptions\\\": {\\n      \\\"path\\\": \\\"./src/main/cpp/CMakeLists.txt\\\",\\n      \\\"arguments\\\": [],\\n      \\\"abiFilters\\\": [\\n        \\\"arm64-v8a\\\",\\n        \\\"x86_64\\\"\\n      ],\\n      \\\"cppFlags\\\": \\\"\\\",\\n    }\\n  },\\n  \\\"targets\\\": [  //定义不同的target \\n    {\\n      \\\"name\\\": \\\"default\\\",\\n      \\\"config\\\": {\\n        \\\"buildOption\\\": {\\n          \\\"nativeLib\\\": {\\n            \\\"filter\\\": {\\n              //按照.so文件的优先级顺序，打包最高优先级的function1.so文件 \\n              \\\"pickFirsts\\\": [\\n                \\\"**/function1.so\\\"\\n              ],\\n              //排除不打包的function3.so文件 \\n              \\\"excludes\\\": [\\n                \\\"**/function3.so\\\"\\n              ],\\n              //允许当.so中资源重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件 \\n              \\\"enableOverride\\\": true\\n            }\\n          }\\n        }\\n      }\\n    },\\n    {\\n      \\\"name\\\": \\\"vip\\\",\\n      \\\"config\\\": {\\n        \\\"buildOption\\\": {\\n          \\\"nativeLib\\\": {\\n            \\\"filter\\\": {\\n              //按照.so文件的优先级顺序，打包最高优先级的function1.so文件 \\n              \\\"pickFirsts\\\": [\\n                \\\"**/function1.so\\\"\\n              ],\\n              //排除不打包的function2.so文件 \\n              \\\"excludes\\\": [\\n                \\\"**/function2.so\\\"\\n              ],\\n              //允许当.so中资源重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件 \\n              \\\"enableOverride\\\": true\\n            }\\n          }\\n        }\\n      }\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义C++工程依赖的.so文件",
        "parent_text": "[h2]定义C++工程依赖的.so文件在 C++ 工程中，可以对每个target依赖的.so文件进行定制。例如某模块依赖了function1.so、function2.so和function3.so三个文件，其中target为default的产物依赖了function1.so和function2.so；其中target为vip的产物依赖了function1.so和 function3.so，则示例代码如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1742443519446\\\"'><a name='\\\"section1742443519446\\\"'></a><a name='\\\"section1742443519446\\\"'></a><h4>[h2]定义C++工程依赖的.so文件</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p1722024516592\\\"'>在 C++ 工程中，可以对每个target依赖的.so文件进行定制。例如某模块依赖了function1.so、function2.so和function3.so三个文件，其中target为default的产物依赖了function1.so和function2.so；其中target为vip的产物依赖了function1.so和 function3.so，则示例代码如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1085,
        "pre": "{ \\n  \\\"apiType\\\": 'stageMode', \\n  \\\"buildOption\\\": { \\n  }, \\n  \\\"targets\\\": [ \\n    { \\n      \\\"name\\\": \\\"default\\\",\\n      \\\"resource\\\": {  //定义默认版target使用的资源文件目录 \\n        \\\"directories\\\": [ \\n          \\\"./src/main/resources_default\\\" \\n        ] \\n      } \\n    }, \\n    { \\n      \\\"name\\\": \\\"free\\\", \\n      \\\"config\\\": { \\n        \\\"deviceType\\\": [ \\n          \\\"2in1\\\" \\n        ] \\n      }, \\n      \\\"resource\\\": {  //定义免费版target使用的资源文件目录 \\n        \\\"directories\\\": [ \\n          \\\"./src/main/resources_default\\\", \\n          \\\"./src/main/resources_free\\\" \\n        ] \\n      } \\n    },\\n  ] \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义产物的资源",
        "parent_text": "[h2]定义产物的资源每个target使用的资源文件可能存在差异，在开发过程中，开发者可以将每个target所使用的资源存放在不同的资源目录下。其中，ArkTS工程支持对main目录下的资源文件目录（resource）进行定制；JS工程支持对main目录下的资源文件目录（resource）及 Ability下的资源文件目录（res）进行定制。如下为ArkTS工程的资源文件目录定制示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1248185214551\\\"'><a name='\\\"section1248185214551\\\"'></a><a name='\\\"section1248185214551\\\"'></a><h4>[h2]定义产物的资源</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p824875265511\\\"'>每个target使用的资源文件可能存在差异，在开发过程中，开发者可以将每个target所使用的资源存放在不同的资源目录下。其中，ArkTS工程支持对main目录下的资源文件目录（resource）进行定制；JS工程支持对main目录下的资源文件目录（resource）及 Ability下的资源文件目录（res）进行定制。如下为ArkTS工程的资源文件目录定制示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1086,
        "pre": "{ \\n  \\\"app\\\": { \\n    \\\"signingConfigs\\\": [], \\n    \\\"products\\\": [ \\n      { \\n        \\\"name\\\": \\\"default\\\", \\n        \\\"signingConfig\\\": \\\"default\\\", \\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n        \\\"output\\\": { \\n          \\\"artifactName\\\": \\\"customizedProductOutputName-1.0.0\\\"  //产物名称为customizedProductOutputName-1.0.0\\n        }, \\n        \\\"vendor\\\": \\\"customizedProductVendorName\\\"   //供应商名称为customizedProductVendorName\\n      }, \\n      { \\n        \\\"name\\\": \\\"productA\\\", \\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n        \\\"output\\\": { \\n          \\\"artifactName\\\": \\\"customizedProductOutputNameA-1.0.0\\\"  //产物名称为customizedProductOutputNameA-1.0.0\\n        }, \\n        \\\"vendor\\\": \\\"customizedProductVendorNameA\\\"   //供应商名称为customizedProductVendorNameA\\n      }, \\n      { \\n        \\\"name\\\": \\\"productB\\\", \\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n        \\\"output\\\": { \\n          \\\"artifactName\\\": \\\"customizedProductOutputNameB-1.0.0\\\" //产物名称为customizedProductOutputNameB-1.0.0\\n        }, \\n        \\\"vendor\\\": \\\"customizedProductVendorNameB\\\"   //供应商名称为customizedProductVendorNameB\\n      } \\n    ], \\n    \\\"buildModeSet\\\": [ \\n      { \\n        \\\"name\\\": \\\"debug\\\", \\n      }, \\n      { \\n        \\\"name\\\": \\\"release\\\" \\n      } \\n    ] \\n  }, \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义产物的APP包名和供应商名称",
        "parent_text": "[h2]定义产物的APP包名和供应商名称每一个product均可以指定产物命名和供应商名称。  如果已配置签名，product产物对应的APP包名为开发者定制的名称；如果未配置签名，product产物对应的APP包名为开发者定制的名称+unsigned。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1959916462423\\\"'><a name='\\\"section1959916462423\\\"'></a><a name='\\\"section1959916462423\\\"'></a><h4>[h2]定义产物的APP包名和供应商名称</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p8451194124615\\\"'>每一个product均可以指定产物命名和供应商名称。</p>  <p id='\\\"ZH-CN_TOPIC_0000002202174673__p15452104204617\\\"'>如果已配置签名，product产物对应的APP包名为开发者定制的名称；如果未配置签名，product产物对应的APP包名为开发者定制的名称+unsigned。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1087,
        "pre": "\\\"app\\\": { \\n  \\\"signingConfigs\\\": [], \\n  \\\"products\\\": [ \\n    { \\n      \\\"name\\\": \\\"default\\\", \\n      \\\"signingConfig\\\": \\\"default\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n      \\\"bundleName\\\": \\\"com.example00.com\\\"  //定义default的bundleName信息 \\n    }, \\n    { \\n      \\\"name\\\": \\\"productA\\\", \\n      \\\"signingConfig\\\": \\\"default\\\",\\n \\n      \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n      \\\"bundleName\\\": \\\"com.example01.com\\\"  //定义productA的bundleName信息\\n    }, \\n    { \\n      \\\"name\\\": \\\"productB\\\", \\n      \\\"signingConfig\\\": \\\"default\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n      \\\"bundleName\\\": \\\"com.example02.com\\\"  //定义productB的bundleName信息 \\n    } \\n  ], \\n  \\\"buildModeSet\\\": [ \\n    { \\n      \\\"name\\\": \\\"debug\\\", \\n    }, \\n    { \\n      \\\"name\\\": \\\"release\\\" \\n    } \\n  ] \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义product的bundleName",
        "parent_text": "[h2]定义product的bundleName针对每个定义的product，均可以定制不同的bundleName，如果product未定义bundleName，则采用工程默认的bundleName。示例如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section189551830165020\\\"'><a name='\\\"section189551830165020\\\"'></a><a name='\\\"section189551830165020\\\"'></a><h4>[h2]定义product的bundleName</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p1745284114610\\\"'>针对每个定义的product，均可以定制不同的bundleName，如果product未定义bundleName，则采用工程默认的bundleName。示例如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1088,
        "pre": "\\\"app\\\": { \\n  \\\"signingConfigs\\\": [], \\n  \\\"products\\\": [ \\n    { \\n      \\\"name\\\": \\\"default\\\", \\n      \\\"signingConfig\\\": \\\"default\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n      \\\"bundleName\\\": \\\"com.example00.com\\\",   \\n      \\\"bundleType\\\": \\\"app\\\" //定义default的bundleType信息 \\n    },\\n    { \\n      \\\"name\\\": \\\"productA\\\", \\n      \\\"signingConfig\\\": \\\"default\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n      \\\"bundleName\\\": \\\"com.example01.com\\\",    \\n      \\\"bundleType\\\": \\\"atomicService\\\"  //定义productA的bundleType信息 \\n    },\\n    { \\n      \\\"name\\\": \\\"productB\\\", \\n      \\\"signingConfig\\\": \\\"default\\\",\\n      \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\", \\n      \\\"runtimeOS\\\": \\\"HarmonyOS\\\", \\n      \\\"bundleName\\\": \\\"com.example02.com\\\",    \\n      \\\"bundleType\\\": \\\"atomicService\\\"  //定义productB的bundleType信息 \\n    } \\n  ], \\n  \\\"buildModeSet\\\": [ \\n    { \\n      \\\"name\\\": \\\"debug\\\", \\n    },\\n    { \\n      \\\"name\\\": \\\"release\\\"\\n    } \\n  ] \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义product的bundleType",
        "parent_text": "[h2]定义product的bundleType针对每个定义的product，均可以定制不同的bundleType。开发者可以通过定义每个product的bundleType，分别定义产物类型： bundleType值为app，表示产物为应用；bundleType值为atomicService，表示产物为元服务。 如果product未定义bundleType，则采用工程的bundleType（即创建工程时选择的Application/Atomic Service）。示例如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section15553140141218\\\"'><a name='\\\"section15553140141218\\\"'></a><a name='\\\"section15553140141218\\\"'></a><h4>[h2]定义product的bundleType</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p204531444614\\\"'>针对每个定义的product，均可以定制不同的bundleType。开发者可以通过定义每个product的bundleType，分别定义产物类型：</p> <ul id='\\\"ZH-CN_TOPIC_0000002202174673__ul154531249468\\\"'><li id='\\\"li1745320413466\\\"'>bundleType值为app，表示产物为应用；</li><li id='\\\"li2453104164618\\\"'>bundleType值为atomicService，表示产物为元服务。</li></ul> <p id='\\\"ZH-CN_TOPIC_0000002202174673__p18453144124615\\\"'>如果product未定义bundleType，则采用工程的bundleType（即创建工程时选择的Application/Atomic Service）。示例如下所示：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1089,
        "pre": "{\\n  \\\"app\\\": {\\n    \\\"signingConfigs\\\": [],\\n    \\\"products\\\": [\\n      {\\n        \\\"name\\\": \\\"default\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n        \\\"icon\\\":\\\"$media:default_icon\\\", //定义default的icon\\n        \\\"label\\\":\\\"$string:default_name\\\", //定义default的label\\n      },\\n      {\\n        \\\"name\\\": \\\"productA\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"icon\\\":\\\"$media:productA_icon\\\", //定义productA的icon\\n        \\\"label\\\":\\\"$string:productA_name\\\", //定义productA的label\\n      },\\n      {\\n        \\\"name\\\": \\\"productB\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n        \\\"icon\\\":\\\"$media:productB_icon\\\", //定义productB的icon\\n        \\\"label\\\":\\\"$string:productB_name\\\",  //定义productB的label\\n      }\\n    ],\\n    \\\"buildModeSet\\\": [\\n      {\\n        \\\"name\\\": \\\"debug\\\",\\n      },\\n      {\\n        \\\"name\\\": \\\"release\\\"\\n      }\\n    ]\\n  },\\n  ...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]定义product的icon和label",
        "parent_text": "[h2]定义product的icon和label针对每个定义的product，均可以定制不同的icon和label，如果product未定义icon和label，则采用工程默认的icon和label。示例如下所示：  products中的icon和label字段在编译时会替换app.json5中对应的字段，app.json5和module.json5均可以配置这两个字段，如果都配置，优先级顺序请参考应用/组件级配置。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section131374382148\\\"'><a name='\\\"section131374382148\\\"'></a><a name='\\\"section131374382148\\\"'></a><h4>[h2]定义product的icon和label</h4><p id='\\\"ZH-CN_TOPIC_0000002202174673__p1137638161413\\\"'>针对每个定义的product，均可以定制不同的icon和label，如果product未定义icon和label，则采用工程默认的icon和label。示例如下所示：</p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002202174673__note126712501301\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250321162408.52527002619759757275488217257505:50001231000000:2800:F8369F9E6FB9742351D94A04D76CD320A397655855F78B1987A623483515304C.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202174673__p467115033018\\\"'>products中的icon和label字段在编译时会替换<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-configuration-file\\\"' target='\\\"_blank\\\"'>app.json5</a>中对应的字段，app.json5和module.json5均可以配置这两个字段，如果都配置，优先级顺序请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/application-component-configuration-stage#生成机制\\\"' target='\\\"_blank\\\"'>应用/组件级配置</a>。</p> </div></div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-customized-multi-targets-and-products-guides.html"
    },
    {
        "id": 1090,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-dsa-key\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section028035261920\\\"'><a name='\\\"section028035261920\\\"'></a><a name='\\\"section028035261920\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-dsa-key.html"
    },
    {
        "id": 1091,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { walletPass } from '@kit.WalletKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nprivate walletPassClient: walletPass.WalletPassClient = new walletPass.WalletPassClient(this.getUIContext().getHostContext() as common.UIAbilityContext);\\n// 创建Wallet Kit服务时注册的服务号\\nprivate passType: string = ''; \\n// 申请钥匙卡片时定义的卡券唯一标识\\nprivate serialNumber: string = ''; \\n\\nasync queryICCEConnectionState() {\\n  let passStr = JSON.stringify({\\n    passType: this.passType,\\n    serialNumber: this.serialNumber\\n  });\\n  this.walletPassClient.queryICCEConnectionState(passStr).then((result: string) => {\\n    console.info(`Succeeded in querying ICCEConnectionState, result: ${result}`);\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to query ICCEConnectionState, code:${err.code}, message:${err.message}`);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "车主APP使用创建Wallet Kit服务时注册的服务号和申请钥匙卡片时定义的卡券唯一标识，通过queryICCEConnectionState判断车钥匙的蓝牙链路状态。 ",
        "import_module": null,
        "parent": "<li><span>车主APP使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/wallet-preparations\\\"'>创建Wallet Kit服务</a>时注册的服务号和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wallet-rest-api-carkey#section129511211195\\\"' target='\\\"_blank\\\"'>申请钥匙卡片</a>时定义的卡券唯一标识，通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wallet-walletpass#section82336268523\\\"' target='\\\"_blank\\\"'>queryICCEConnectionState</a>判断车钥匙的蓝牙链路状态。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wallet-carkey-control.html"
    },
    {
        "id": 1092,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-non-null-assertion\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-non-null-assertion.html"
    },
    {
        "id": 1093,
        "pre": "interface Example {\\n  property?: string;\\n}\\n\\ndeclare const example: Example;\\nexport const includesBaz = example.property?.includes('baz') ?? false;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-non-null-assertion.html"
    },
    {
        "id": 1094,
        "pre": "interface Example {\\n  property?: string;\\n}\\n\\ndeclare const example: Example;\\n// 禁止使用\\\"example.property!\\\"的方式来进行非空断言\\nexport const includesBaz = example.property!.includes('baz');",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-non-null-assertion.html"
    },
    {
        "id": 1095,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { walletTransitCard } from '@kit.WalletKit'\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ntransitCardClient: walletTransitCard.TransitCardClient = new walletTransitCard.TransitCardClient(this.getUIContext().getHostContext() as common.UIAbilityContext, 'callerId');\\n\\nasync getCardMetadataInDevice() {\\n  this.transitCardClient.getCardMetadataInDevice(walletTransitCard.DeviceType.DEVICE_PHONE).then((result) => {\\n    console.info(`Succeeded in getting cardMetadataInDevice`);\\n    // 展示交通卡列表信息\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to get CardMetadataInDevice, code:${err.code}, message:${err.message}`);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wallet-transport-update.html"
    },
    {
        "id": 1096,
        "pre": "import { site } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      导入相关模块。       ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      导入相关模块。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-geocode.html"
    },
    {
        "id": 1097,
        "pre": "let params: site.GeocodeParams = {\\n  // 地址信息\\n  \\\"query\\\": \\\"Piazzale Dante, 41, 55049 Viareggio\\\",\\n  \\\"language\\\": \\\"en\\\"\\n};\\nconst result = await site.geocode(params);\\nconsole.info(\\\"Succeeded in geocoding.\\\");",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "  ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-geocode.html"
    },
    {
        "id": 1098,
        "pre": "let params: site.ReverseGeocodeParams = {\\n  // 位置经纬度\\n  location: {\\n    latitude: 31.984410259206815,\\n    longitude: 118.76625379397866\\n  },\\n  language: \\\"en\\\",\\n  radius: 200\\n};\\nconst result = await site.reverseGeocode(params);\\nconsole.info(\\\"Succeeded in reversing.\\\");",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "  ",
        "import_module": "import { site } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-site-geocode.html"
    },
    {
        "id": 1099,
        "pre": "import { sceneMap } from '@kit.MapKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { common } from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-location-details.html"
    },
    {
        "id": 1100,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-avoid-empty-callback\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-avoid-empty-callback.html"
    },
    {
        "id": 1101,
        "pre": "@Component\\nstruct MyComponent {\\n  doSomething() {\\n    //业务逻辑\\n  }\\n\\n  build() {\\n    Button('Click', { type: ButtonType.Normal, stateEffect: true })\\n      .onClick(() => {\\n        this.doSomething()\\n      })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-avoid-empty-callback.html"
    },
    {
        "id": 1102,
        "pre": "@Component\\nstruct MyComponent {\\n  build() {\\n    Button('Click', { type: ButtonType.Normal, stateEffect: true })\\n      .onClick(() => {\\n        // 无业务逻辑\\n      })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-avoid-empty-callback.html"
    },
    {
        "id": 1103,
        "pre": "import { authentication } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入authentication模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-authentication\\\"' target='\\\"_blank\\\"'>authentication</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-get-avatar-nickname.html"
    },
    {
        "id": 1104,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-set-tags.html"
    },
    {
        "id": 1105,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"prefer-const\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-const.html"
    },
    {
        "id": 1106,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/font-size-unit\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_font-size-unit.html"
    },
    {
        "id": 1107,
        "pre": "const FONT_SIZE = 12;\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    RelativeContainer() {\\n      Text('message').fontSize(FONT_SIZE)\\n      Text('message').fontSize('12fp')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_font-size-unit.html"
    },
    {
        "id": 1108,
        "pre": "@Entry\\n@Component\\nstruct Index1 {\\n  build() {\\n    RelativeContainer() {\\n      Text('message').fontSize('12vp')\\n      Text('message').fontSize('12px')\\n      Text('message').fontSize('12lpx')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_font-size-unit.html"
    },
    {
        "id": 1109,
        "pre": "import { smartMobilityCommon } from '@kit.CarKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-register-events-listener.html"
    },
    {
        "id": 1110,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-netcancle-arkts.html"
    },
    {
        "id": 1111,
        "pre": "import { UIAbility, Want } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nexport default class MainAbility extends UIAbility {\\n  onCreate(want: Want): void {\\n    // 获取消息中传递的data数据\\n    const data = want.parameters;\\n    const value = want.parameters?.[\\\"testKey\\\"]; // value: \\\"testValue\\\"\\n    hilog.info(0x0000, 'testTag', 'Succeeded in getting message data');\\n    // 根据实际业务场景对data进行处理\\n  }\\n}",
        "type": "Reference",
        "function_call": "onNewWant()",
        "function_name": null,
        "parent_text": "在应用首页Ability中的onCreate()方法中覆写如下代码（冷启动时进入该生命周期回调）： onNewWant()方法中覆写如下代码（热启动时进入该生命周期回调）： import { UIAbility, Want } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nexport default class MainAbility extends UIAbility {\\n  onNewWant(want: Want): void {\\n    // 获取消息中传递的data数据\\n    const data = want.parameters;\\n    const value = want.parameters?.[\\\"testKey\\\"]; // value: \\\"testValue\\\"\\n    hilog.info(0x0000, 'testTag', 'Succeeded in getting message data');\\n    // 根据实际业务场景对data进行处理\\n  }\\n}     onNewWant()方法仅在单例（singleton）模式下可用。   点击消息，当应用进程不存在时，会在onCreate()方法中获取消息data数据，当应用进程存在时，会在onNewWant()方法中获取消息数据。 ",
        "import_module": null,
        "parent": "<li><span>在应用首页Ability中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityoncreate\\\"' target='\\\"_blank\\\"'>onCreate</a>()方法中覆写如下代码（<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/uiability-intra-device-interaction#目标uiability冷启动\\\"' target='\\\"_blank\\\"'>冷启动</a>时进入该生命周期回调）：</span><p></p> <p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityonnewwant\\\"' target='\\\"_blank\\\"'>onNewWant</a>()方法中覆写如下代码（<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/uiability-intra-device-interaction#目标uiability热启动\\\"' target='\\\"_blank\\\"'>热启动</a>时进入该生命周期回调）：</p> <pre class='\\\"typescript\\\"'>import { UIAbility, Want } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nexport default class MainAbility extends UIAbility {\\n  onNewWant(want: Want): void {\\n    // 获取消息中传递的data数据\\n    const data = <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>want</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>parameters</span>;\\n    const value = want.parameters?.[\\\"testKey\\\"]; // value: \\\"testValue\\\"\\n    hilog.info(0x0000, 'testTag', 'Succeeded in getting message data');\\n    // 根据实际业务场景对data进行处理\\n  }\\n}</pre> <div class='\\\"notice\\\"'> <span class='\\\"noticetitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120213.07957229407305971128830434251420:50001231000000:2800:38A3EC878EFEE93E597E171201E1A3B1BBF2F686D58ED7BCA5256823CD93DC2A.png\\\"'/> </span> <div class='\\\"noticebody\\\"'> <p>onNewWant()方法仅在单例（singleton）模式下可用。</p> </div> </div> <p>点击消息，当应用进程不存在时，会在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityoncreate\\\"' target='\\\"_blank\\\"'>onCreate</a>()方法中获取消息data数据，当应用进程存在时，会在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityonnewwant\\\"' target='\\\"_blank\\\"'>onNewWant</a>()方法中获取消息数据。</p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-send-alert.html"
    },
    {
        "id": 1112,
        "pre": "import { UIAbility, Want } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nexport default class TestAbility extends UIAbility {\\n  onCreate(want: Want): void {\\n    // 获取消息中传递的data数据\\n    const data = want.parameters;\\n    const value = want.parameters?.[\\\"testKey\\\"]; // value: \\\"testValue\\\"\\n    hilog.info(0x0000, 'testTag', 'Succeeded in getting message data');\\n    // 根据实际业务场景对data进行处理\\n  }\\n}",
        "type": "Reference",
        "function_call": "onNewWant()",
        "function_name": null,
        "parent_text": "在待跳转页面（以TestAbility为例）中的onCreate()方法中覆写如下代码（冷启动时进入该生命周期回调）： onNewWant()方法中覆写如下代码（热启动时进入该生命周期回调）： import { UIAbility, Want } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nexport default class TestAbility extends UIAbility {\\n  onNewWant(want: Want): void {\\n    // 获取消息中传递的data数据\\n    const data = want.parameters;\\n    const value = want.parameters?.[\\\"testKey\\\"]; // value: \\\"testValue\\\"\\n    hilog.info(0x0000, 'testTag', 'Succeeded in getting message data');\\n    // 根据实际业务场景对data进行处理\\n  }\\n}     onNewWant()方法仅在单例（singleton）模式下可用。   点击消息，当应用进程不存在时，会在onCreate()方法中获取消息data数据，当应用进程存在时，会在onNewWant()方法中获取消息数据。 ",
        "import_module": null,
        "parent": "<li><span>在待跳转页面（以TestAbility为例）中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityoncreate\\\"' target='\\\"_blank\\\"'>onCreate</a>()方法中覆写如下代码（<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/uiability-intra-device-interaction#目标uiability冷启动\\\"' target='\\\"_blank\\\"'>冷启动</a>时进入该生命周期回调）：</span><p></p> <p><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityonnewwant\\\"' target='\\\"_blank\\\"'>onNewWant</a>()方法中覆写如下代码（<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/uiability-intra-device-interaction#目标uiability热启动\\\"' target='\\\"_blank\\\"'>热启动</a>时进入该生命周期回调）：</p> <pre class='\\\"typescript\\\"'><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>import </span><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>{ UIAbility, Want } from '@kit.AbilityKit';</span>\\n<span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>import </span><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>{ hilog } from '@kit.PerformanceAnalysisKit';</span>\\n\\nexport default class TestAbility extends UIAbility {\\n  onNewWant(want: Want): void {\\n    // 获取消息中传递的data数据\\n    const data = want.parameters;\\n    const value = want.parameters?.[\\\"testKey\\\"]; // value: \\\"testValue\\\"\\n    hilog.info(0x0000, 'testTag', 'Succeeded in getting message data');\\n    // 根据实际业务场景对data进行处理\\n  }\\n}</pre> <div class='\\\"notice\\\"'> <span class='\\\"noticetitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120213.00367159152913627034192337983018:50001231000000:2800:3A989CED8D15964B6AF3D4E28456CAF32063FCAA262261EA0B5A3E488A539253.png\\\"'/> </span> <div class='\\\"noticebody\\\"'> <p>onNewWant()方法仅在单例（singleton）模式下可用。</p> </div> </div> <p>点击消息，当应用进程不存在时，会在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityoncreate\\\"' target='\\\"_blank\\\"'>onCreate</a>()方法中获取消息data数据，当应用进程存在时，会在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityonnewwant\\\"' target='\\\"_blank\\\"'>onNewWant</a>()方法中获取消息数据。</p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-send-alert.html"
    },
    {
        "id": 1113,
        "pre": "import { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { pushCommon, pushService } from '@kit.PushKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n \\n// 定义需要绑定的profileId，建议使用账号id对应的匿名标识\\nconst profileId = '1****9';\\n// 绑定应用账号\\npushService.bindAppProfileId(pushCommon.AppProfileType.PROFILE_TYPE_APPLICATION_ACCOUNT, profileId).then(() => {\\n  hilog.info(0x0000, 'testTag', 'Succeeded in binding app profile id');\\n}).catch((err: BusinessError) => {\\n  hilog.error(0x0000, 'testTag', 'Failed to bind app profile id: %{public}d %{public}s', err.code, err.message);\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "为待绑定的账号生成一个非空唯一的profileId（不建议使用真实的账号id，推荐使用账号id自行生成对应的匿名标识，能与该账号id建立唯一映射关系即可，生成算法无限制），调用bindAppProfileId()方法，添加当前设备上该用户与应用的关系，代码示例： ",
        "import_module": null,
        "parent": "<li><span>为待绑定的账号生成一个非空唯一的profileId（<span rgb(73,73,73);\\\"=\"\" style='\\\"color:'>不建议使用真实的账号</span><span rgb(73,73,73);\\\"=\"\" style='\\\"color:'>id</span><span rgb(73,73,73);\\\"=\"\" style='\\\"color:'>，推荐使用账号</span><span rgb(73,73,73);\\\"=\"\" style='\\\"color:'>id</span><span rgb(73,73,73);\\\"=\"\" style='\\\"color:'>自行生成对应的匿名标识，能与该账号id建立唯一映射关系即可，生成算法无限制</span>），调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-pushservice#section20575105524912\\\"' target='\\\"_blank\\\"'>bindAppProfileId</a>()方法，添加当前设备上该用户与应用的关系，代码示例：</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-send-alert.html"
    },
    {
        "id": 1114,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-extra-non-null-assertion\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-non-null-assertion.html"
    },
    {
        "id": 1115,
        "pre": "interface BarType1 {\\n  bar: number;\\n}\\n\\nfunction getFoo(): BarType1 | null {\\n  return null;\\n}\\nconst foo: BarType1 | null = getFoo();\\nexport const bar1: number | undefined = foo?.bar;\\n\\nexport function foo1(bar: number | undefined): void {\\n  const newBar: number = bar ?? Number.MAX_VALUE;\\n  console.info(`${newBar}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-non-null-assertion.html"
    },
    {
        "id": 1116,
        "pre": "interface BarType1 {\\n  bar: number;\\n}\\n\\nconst foo1: BarType1 | null = null;\\nexport const bar1 = foo1!!!.bar;\\n\\nexport function foo2(bar: number | undefined) {\\n  const newBar: number = bar!!!;\\n  console.info(`${newBar}`);\\n}\\n\\ninterface BarType2 {\\n  n: number;\\n}\\n\\nexport function foo(bar?: BarType2) {\\n  return bar!?.n;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-extra-non-null-assertion.html"
    },
    {
        "id": 1117,
        "pre": "# the minimum version of CMake.\\ncmake_minimum_required(VERSION 3.4.1)\\nproject(MyApplication) \\n\\n# 定义一个变量，并赋值为当前模块cpp目录\\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\\n\\n# 添加头文件.h目录，包括cpp，cpp/include，告诉cmake去这里找到代码引入的头文件\\ninclude_directories(${NATIVERENDER_ROOT_PATH}\\n                    ${NATIVERENDER_ROOT_PATH}/include)\\n\\n# 声明一个产物libentry.so，SHARED表示产物为动态库，hello.cpp为产物的源代码\\nadd_library(entry SHARED hello.cpp)\\n\\n# 声明产物entry链接时需要的三方库libace_napi.z.so\\n# 这里直接写三方库的名称是因为它是在ndk中，已在链接寻址路径中，无需额外声明\\ntarget_link_libraries(entry PUBLIC libace_napi.z.so)",
        "type": "Reference",
        "function_call": null,
        "function_name": "CMakeLists.txt",
        "parent_text": "CMakeLists.txt通过DevEco Studio模板工程创建的NDK工程中，包含默认生成的CMakeLists.txt脚本，如下所示：  默认的CMakeLists.txt脚本中添加了编译所需的源代码、头文件以及三方库，开发者可根据实际工程添加自定义编译参数、函数声明、简单的逻辑控制等。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"cmakeliststxt\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213534377__cmakeliststxt\\\"'></a><a name='\\\"cmakeliststxt\\\"'></a><h4>CMakeLists.txt</h4><p>通过DevEco Studio模板工程创建的NDK工程中，包含默认生成的CMakeLists.txt脚本，如下所示：</p>  <p>默认的CMakeLists.txt脚本中添加了编译所需的源代码、头文件以及三方库，开发者可根据实际工程添加自定义编译参数、函数声明、简单的逻辑控制等。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/build-with-ndk-ide.html"
    },
    {
        "id": 1118,
        "pre": "\\\"apiType\\\": \\\"stageMode\\\",\\n\\\"buildOption\\\": {\\n  \\\"arkOptions\\\": {\\n   },\\n  \\\"externalNativeOptions\\\": {\\n    \\\"path\\\": \\\"./src/main/cpp/CMakeLists.txt\\\",\\n    \\\"arguments\\\": \\\"\\\",\\n    \\\"cppFlags\\\": \\\"\\\",\\n    \\\"abiFilters\\\": [\\n       \\\"arm64-v8a\\\",\\n       \\\"x86_64\\\"\\n    ],\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "externalNativeOptions",
        "parent_text": "externalNativeOptions模块级build-profile.json5中externalNativeOptions参数是NDK工程C/C++文件编译配置的入口，可以通过path指定CMake脚本路径、arguments配置CMake参数、cppFlags配置C++编译器参数、abiFilters配置编译架构等。  externalNativeOptions具体参数说明如下表所示。 配置项 类型 说明   path string CMake构建脚本地址，即CMakeLists.txt文件地址。  abiFilters array 本机的ABI编译环境，包括： - arm64-v8a - x86_64 如不配置该参数，编译时默认编译出arm64-v8a架构相关so。   arguments string CMake编译参数。  cppFlags string C++编译器参数。    更多关于build-profile.json5中参数的说明，请参考build-profile.json5。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"externalnativeoptions\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213534377__externalnativeoptions\\\"'></a><a name='\\\"externalnativeoptions\\\"'></a><h4>externalNativeOptions</h4><p>模块级build-profile.json5中externalNativeOptions参数是NDK工程C/C++文件编译配置的入口，可以通过path指定CMake脚本路径、arguments配置CMake参数、cppFlags配置C++编译器参数、abiFilters配置编译架构等。</p>  <p>externalNativeOptions具体参数说明如下表所示。</p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.5.1.4.1.1\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>配置项</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.5.1.4.1.2\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>类型</th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.7.5.1.4.1.3\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>说明</th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>path</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>string</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>CMake构建脚本地址，即CMakeLists.txt文件地址。</td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>abiFilters</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>array</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'><p>本机的ABI编译环境，包括：</p> <p>- arm64-v8a</p> <p>- x86_64</p> <p>如不配置该参数，编译时默认编译出arm64-v8a架构相关so。</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>arguments</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>string</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>CMake编译参数。</td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>cppFlags</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>string</td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"33.33333333333333%\\\"'>C++编译器参数。</td> </tr> </tbody></table> </div> <p>更多关于build-profile.json5中参数的说明，请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-build-profile\\\"' target='\\\"_blank\\\"'>build-profile.json5</a>。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/build-with-ndk-ide.html"
    },
    {
        "id": 1119,
        "pre": "import { mapCommon } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": "import { mapCommon } from '@kit.MapKit';",
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-type.html"
    },
    {
        "id": 1120,
        "pre": "// EntryAbility.ets\\nimport { UIAbility } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { PipManager } from '../model/PipManager';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    windowStage.loadContent('pages/Index', (err) => {\\n      // ...\\n    });\\n    windowStage.getMainWindow().then((window) => {\\n      let ctx = window.getUIContext();\\n      // 通过主窗口UIContext创建typeNode节点\\n      PipManager.getInstance().makeTypeNode(ctx);\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": "通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)",
        "function_name": "应用使用typeNode自由节点（不添加到布局）实现画中画功能",
        "parent_text": "应用使用typeNode自由节点（不添加到布局）实现画中画功能创建画中画控制器，注册生命周期事件以及控制事件回调。通过主窗口UIContext创建typeNode节点。通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。 启动画中画。创建画中画控制器实例后，通过startPiP接口启动画中画。 更新媒体源尺寸信息。画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。 关闭画中画。当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section7627141117162\\\"'><a name='\\\"section7627141117162\\\"'></a><a name='\\\"section7627141117162\\\"'></a><h4>应用使用typeNode自由节点（不添加到布局）实现画中画功能</h4><ol><li><span>创建画中画控制器，注册生命周期事件以及控制事件回调。</span><p></p><ul><li>通过主窗口UIContext创建typeNode节点。</li><li>通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。</li><li>通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。</li><li>通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。</li><li>通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。</li></ul> <p></p></li><li><span>启动画中画。</span><p></p><p>创建画中画控制器实例后，通过startPiP接口启动画中画。</p> <p></p></li><li><span>更新媒体源尺寸信息。</span><p></p><p>画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。</p> <p></p></li><li><span>关闭画中画。</span><p></p><p>当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画。</p> <p></p></li></ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pipwindow-typenode.html"
    },
    {
        "id": 1121,
        "pre": "// EntryAbility.ets\\nimport { UIAbility } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    windowStage.loadContent('pages/Index', (err) => {\\n      // ...\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": "addNode()",
        "function_name": "应用使用Navigation导航时通过typeNode实现画中画功能",
        "parent_text": "应用使用Navigation导航时通过typeNode实现画中画功能创建画中画控制器，注册生命周期事件以及控制事件回调。创建自定义NodeController，实现makeNode方法，在该方法中创建typeNode。通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。 启动画中画。创建画中画控制器实例后，通过startPiP接口启动画中画，在画中画ABOUT_TO_START生命周期将typeNode节点从布局移除，并返回上级界面（可选）。如果启动画中画时返回了上级界面，需要在画中画ABOUT_TO_RESTORE（还原）时重新跳转到原界面。 更新媒体源尺寸信息。画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。 关闭画中画。当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画，在画中画ABOUT_TO_STOP生命周期将typeNode节点重新添加到布局中。   // pages/Index.ets\\nimport { PipManager } from '../model/PipManager';\\nimport { Page1 } from \\\"../pages/Page1\\\"\\nimport { PiPWindow } from '@kit.ArkUI';\\n\\nconst TAG = 'Index1';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @Provide('pageInfos') pageInfos: NavPathStack = new NavPathStack();\\n  // 画中画生命周期事件监听，用于页面及节点操作\\n  private callback: Function = (state: PiPWindow.PiPState) => {\\n    console.info(TAG, `pipStateChange: state ${state}`);\\n    if (state === PiPWindow.PiPState.ABOUT_TO_START) {\\n      // 返回到上级页面（可选）\\n      this.pageInfos.pop();\\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_STOP) {\\n      // 重新将typeNode节点添加到布局中，例如还原场景\\n      PipManager.getInstance().addNode();\\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_RESTORE) {\\n      // 如果在ABOUT_TO_START时返回了上级界面，需要还原时push到原界面\\n      this.jumpNext();\\n    }\\n  };\\n\\n  jumpNext() {\\n    if (this.pageInfos.getAllPathName()[0] === 'Page1') {\\n      console.log(TAG, 'Page1 already at top');\\n      return;\\n    }\\n    this.pageInfos.pushPath({ name: 'Page1' });\\n  }\\n\\n  aboutToAppear(): void {\\n    PipManager.getInstance().registerLifecycleCallback(this.callback);\\n  }\\n\\n  aboutToDisappear(): void {\\n    PipManager.getInstance().unregisterPipStateChangeListener();\\n    PipManager.getInstance().unRegisterLifecycleCallback(this.callback);\\n  }\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'Page1') {\\n      Page1();\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pageInfos) {\\n      Column() {\\n        Text(\\\"This is Main Page\\\")\\n        Column()\\n          .height('200px')\\n        Row({ space: 12 }) {\\n          Button(\\\"Jump Page1\\\")\\n            .width('80%')\\n            .height(40)\\n            .margin(20)\\n            .onClick(() => {\\n              this.jumpNext();\\n            })\\n        }\\n      }\\n      .height(\\\"100%\\\")\\n      .width(\\\"100%\\\")\\n      .justifyContent(FlexAlign.Center)\\n      .backgroundColor(\\\"#DCDCDC\\\")\\n    }.title('MainTitle')\\n    .navDestination(this.PageMap)\\n  }\\n} // pages/Page1.ets\\nimport { PipManager } from '../model/PipManager';\\n\\nconst TAG = 'Page1';\\n\\n@Component\\nexport struct Page1 {\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text('This is Page1')\\n          .fontSize(30)\\n          .fontWeight(FontWeight.Bold)\\n          .margin({bottom: 20})\\n\\n        // 将typeNode添加到页面布局中\\n        NodeContainer(PipManager.getInstance().getNodeController())\\n          .size({ width: '100%', height: '800px' })\\n\\n        Row({ space: 20 }) {\\n          Button('startPip') // 启动画中画\\n            .onClick(() => {\\n              PipManager.getInstance().startPip();\\n            })\\n          Button('stopPip') // 停止画中画\\n            .onClick(() => {\\n              PipManager.getInstance().stopPip();\\n            })\\n          Button('updateSize') // 更新视频尺寸\\n            .onClick(() => {\\n              // 此处设置的宽高应为媒体内容宽高，需要通过媒体相关接口或回调获取\\n              // 例如使用AVPlayer播放视频时，可通过videoSizeChange回调获取媒体源更新后的尺寸\\n              PipManager.getInstance().updateContentSize(900, 1600);\\n            })\\n        }\\n        .backgroundColor('#4da99797')\\n        .size({ width: '100%', height: 60 })\\n        .justifyContent(FlexAlign.SpaceAround)\\n      }\\n      .justifyContent(FlexAlign.Center)\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .title('page1')\\n    .onShown(()=>{\\n      console.info(TAG, 'onShown')\\n      PipManager.getInstance().init(getContext(this));\\n      PipManager.getInstance().setAutoStart(true);\\n    })\\n    .onHidden(()=>{\\n      console.info(TAG, 'onHidden')\\n      PipManager.getInstance().setAutoStart(false);\\n      PipManager.getInstance().removeNode();\\n    })\\n  }\\n} // model/XCNodeController.ets\\nimport { FrameNode, NodeController, typeNode } from '@kit.ArkUI';\\nimport { PipManager } from './PipManager';\\n\\nconst TAG = 'XCNodeController';\\n\\n// 创建自定义NodeController\\nexport class XCNodeController extends NodeController {\\n  xComponent: typeNode.XComponent| null = null;\\n  private node: FrameNode | null = null;\\n  private canAddNode: boolean = true;\\n\\n  // 设置是否可以添加节点\\n  setCanAddNode(canAddNode: boolean) {\\n    this.canAddNode = canAddNode;\\n  }\\n\\n  // 实现makeNode方法，当自定义NodeController被添加到布局时，该方法会被调用\\n  makeNode(context: UIContext): FrameNode | null {\\n    console.info(TAG, \\\"makeNode\\\");\\n    this.node = new FrameNode(context);\\n    if (this.xComponent === null || this.xComponent === undefined) {\\n      // 创建typeNode\\n      // let xc_options: XComponentOptions = {\\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      // }\\n      // this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", xc_options);\\n\\n      // 创建XComponent类型的typeNode\\n      this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", {\\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      });\\n    }\\n    if (this.canAddNode) {\\n      this.xComponent.getParent()?.removeChild(this.xComponent);\\n      this.node.appendChild(this.xComponent);\\n    }\\n    return this.node;\\n  }\\n\\n  // 重新添加typeNode节点\\n  addNode() {\\n    if (this.node !== null && this.node !== undefined) {\\n      console.info(TAG, \\\"addNode id:\\\"+(this.node?.getUniqueId())+\\\" \\\"+this.xComponent?.getUniqueId());\\n      this.node.appendChild(this.xComponent);\\n    }\\n  }\\n\\n  // 移除typeNode节点\\n  removeNode() {\\n    if (this.node !== null && this.node !== undefined) {\\n      console.info(TAG, \\\"removeNode\\\");\\n      this.node.removeChild(this.xComponent);\\n    }\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    console.info(TAG, \\\"getNode is null:\\\"+ (this.xComponent === null || this.xComponent === undefined))\\n    return this.xComponent;\\n  }\\n} // model/PipManager.ets\\nimport { PiPWindow, typeNode } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { XCNodeController } from './XCNodeController';\\nimport { AVPlayer } from './AVPlayer'\\n\\nexport class CustomXComponentController extends XComponentController {\\n  onSurfaceCreated(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\\n      return;\\n    }\\n    // 将surfaceId设置给媒体源\\n    PipManager.getInstance().player.surfaceID = surfaceId;\\n    PipManager.getInstance().player.avPlayerFdSrc();\\n  }\\n\\n  onSurfaceDestroyed(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\\n  }\\n}\\n\\nconst TAG = 'PipManager';\\n\\nexport class PipManager {\\n  private static instance: PipManager = new PipManager();\\n  private pipController?: PiPWindow.PiPController = undefined;\\n  private xcNodeController: XCNodeController;\\n  private mXComponentController: XComponentController;\\n  private lifeCycleCallback: Set<Function> = new Set();\\n  player: AVPlayer;\\n\\n  public static getInstance(): PipManager {\\n    return PipManager.instance;\\n  }\\n\\n  constructor() {\\n    this.xcNodeController = new XCNodeController();\\n    this.player = new AVPlayer();\\n    this.mXComponentController = new CustomXComponentController();\\n  }\\n\\n  public registerLifecycleCallback(callBack: Function) {\\n    this.lifeCycleCallback.add(callBack);\\n  }\\n\\n  public unRegisterLifecycleCallback(callBack: Function): void {\\n    this.lifeCycleCallback.delete(callBack);\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    return this.xcNodeController.getNode();\\n  }\\n\\n  onActionEvent(control: PiPWindow.ControlEventParam) {\\n    switch (control.controlType) {\\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\\n          //停止视频\\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\\n          //播放视频\\n        }\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\\n        // 切换到下一个视频\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\\n        // 切换到上一个视频\\n        break;\\n      case PiPWindow.PiPControlType.FAST_FORWARD:\\n        // 视频进度快进\\n        break;\\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\\n        // 视频进度后退\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\\n  }\\n\\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\\n    let curState: string = '';\\n    this.xcNodeController.setCanAddNode(\\n      state === PiPWindow.PiPState.ABOUT_TO_STOP || state === PiPWindow.PiPState.STOPPED)\\n    if (this.lifeCycleCallback !== null) {\\n      this.lifeCycleCallback.forEach((fun) => {\\n        fun(state);\\n      });\\n    }\\n    switch (state) {\\n      case PiPWindow.PiPState.ABOUT_TO_START:\\n        curState = \\\"ABOUT_TO_START\\\";\\n        // 将typeNode节点从布局移除\\n        this.xcNodeController.removeNode();\\n        break;\\n      case PiPWindow.PiPState.STARTED:\\n        curState = \\\"STARTED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\\n        curState = \\\"ABOUT_TO_STOP\\\";\\n        break;\\n      case PiPWindow.PiPState.STOPPED:\\n        curState = \\\"STOPPED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\\n        curState = \\\"ABOUT_TO_RESTORE\\\";\\n        break;\\n      case PiPWindow.PiPState.ERROR:\\n        curState = \\\"ERROR\\\";\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\\n  }\\n\\n  unregisterPipStateChangeListener() {\\n    console.info(`${TAG} aboutToDisappear`);\\n    this.pipController?.off('stateChange');\\n    this.pipController?.off('controlEvent');\\n  }\\n\\n  getXComponentController(): CustomXComponentController {\\n    return this.mXComponentController;\\n  }\\n\\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\\n  init(ctx: Context) {\\n    if (this.pipController !== null && this.pipController != undefined) {\\n      return;\\n    }\\n    console.info(`${TAG} onPageShow`)\\n    if (!PiPWindow.isPiPEnabled()) {\\n      console.error(TAG, `picture in picture disabled for current OS`);\\n      return;\\n    }\\n\\n    let config: PiPWindow.PiPConfiguration = {\\n      context: ctx,\\n      componentController: this.getXComponentController(),\\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则创建画中画失败\\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则创建画中画失败\\n    };\\n    // 通过create接口创建画中画控制器实例\\n    let promise: Promise<PiPWindow.PiPController> = PiPWindow.create(config, this.xcNodeController.getNode());\\n    promise.then((controller: PiPWindow.PiPController) => {\\n      this.pipController = controller;\\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\\n      this.pipController?.setAutoStartEnabled(true);\\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) => {\\n        this.onStateChange(state, reason);\\n      });\\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) => {\\n        this.onActionEvent(control);\\n      });\\n    }).catch((err: BusinessError) => {\\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤2：启动画中画\\n  startPip() {\\n    this.pipController?.startPiP().then(() => {\\n      console.info(TAG, `Succeeded in starting pip.`);\\n    }).catch((err: BusinessError) => {\\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤3：更新媒体源尺寸信息\\n  updateContentSize(width: number, height: number) {\\n    if (this.pipController) {\\n      this.pipController.updateContentSize(width, height);\\n    }\\n  }\\n\\n  // 步骤4：关闭画中画\\n  stopPip() {\\n    if (this.pipController === null || this.pipController === undefined) {\\n      return;\\n    }\\n    let promise: Promise<void> = this.pipController.stopPiP();\\n    promise.then(() => {\\n      console.info(TAG, `Succeeded in stopping pip.`);\\n    }).catch((err: BusinessError) => {\\n      console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  getNodeController(): XCNodeController {\\n    console.info(TAG, `getNodeController.`);\\n    return this.xcNodeController;\\n  }\\n\\n  setAutoStart(autoStart: boolean): void {\\n    this.pipController?.setAutoStartEnabled(autoStart);\\n  }\\n\\n  removeNode() {\\n    this.xcNodeController.removeNode();\\n  }\\n\\n  addNode(): void {\\n    this.xcNodeController.addNode();\\n  }\\n} 以上示例代码对应的示意图如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section173761626124613\\\"'><a name='\\\"section173761626124613\\\"'></a><a name='\\\"section173761626124613\\\"'></a><h4>应用使用Navigation导航时通过typeNode实现画中画功能</h4><ol><li><span>创建画中画控制器，注册生命周期事件以及控制事件回调。</span><p></p><ul><li>创建自定义NodeController，实现makeNode方法，在该方法中创建typeNode。</li><li>通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。</li><li>通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。</li><li>通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。</li><li>通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。</li></ul> <p></p></li><li><span>启动画中画。</span><p></p><p>创建画中画控制器实例后，通过startPiP接口启动画中画，在画中画ABOUT_TO_START生命周期将typeNode节点从布局移除，并返回上级界面（可选）。如果启动画中画时返回了上级界面，需要在画中画ABOUT_TO_RESTORE（还原）时重新跳转到原界面。</p> <p></p></li><li><span>更新媒体源尺寸信息。</span><p></p><p>画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。</p> <p></p></li><li><span>关闭画中画。</span><p></p><p>当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画，在画中画ABOUT_TO_STOP生命周期将typeNode节点重新添加到布局中。</p> <p></p></li></ol>  <pre class='\\\"screen\\\"'>// pages/Index.ets\\nimport { PipManager } from '../model/PipManager';\\nimport { Page1 } from \\\"../pages/Page1\\\"\\nimport { PiPWindow } from '@kit.ArkUI';\\n\\nconst TAG = 'Index1';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @Provide('pageInfos') pageInfos: NavPathStack = new NavPathStack();\\n  // 画中画生命周期事件监听，用于页面及节点操作\\n  private callback: Function = (state: PiPWindow.PiPState) =&gt; {\\n    console.info(TAG, `pipStateChange: state ${state}`);\\n    if (state === PiPWindow.PiPState.ABOUT_TO_START) {\\n      // 返回到上级页面（可选）\\n      this.pageInfos.pop();\\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_STOP) {\\n      // 重新将typeNode节点添加到布局中，例如还原场景\\n      PipManager.getInstance().addNode();\\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_RESTORE) {\\n      // 如果在ABOUT_TO_START时返回了上级界面，需要还原时push到原界面\\n      this.jumpNext();\\n    }\\n  };\\n\\n  jumpNext() {\\n    if (this.pageInfos.getAllPathName()[0] === 'Page1') {\\n      console.log(TAG, 'Page1 already at top');\\n      return;\\n    }\\n    this.pageInfos.pushPath({ name: 'Page1' });\\n  }\\n\\n  aboutToAppear(): void {\\n    PipManager.getInstance().registerLifecycleCallback(this.callback);\\n  }\\n\\n  aboutToDisappear(): void {\\n    PipManager.getInstance().unregisterPipStateChangeListener();\\n    PipManager.getInstance().unRegisterLifecycleCallback(this.callback);\\n  }\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'Page1') {\\n      Page1();\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pageInfos) {\\n      Column() {\\n        Text(\\\"This is Main Page\\\")\\n        Column()\\n          .height('200px')\\n        Row({ space: 12 }) {\\n          Button(\\\"Jump Page1\\\")\\n            .width('80%')\\n            .height(40)\\n            .margin(20)\\n            .onClick(() =&gt; {\\n              this.jumpNext();\\n            })\\n        }\\n      }\\n      .height(\\\"100%\\\")\\n      .width(\\\"100%\\\")\\n      .justifyContent(FlexAlign.Center)\\n      .backgroundColor(\\\"#DCDCDC\\\")\\n    }.title('MainTitle')\\n    .navDestination(this.PageMap)\\n  }\\n}</pre> <pre class='\\\"screen\\\"'>// pages/Page1.ets\\nimport { PipManager } from '../model/PipManager';\\n\\nconst TAG = 'Page1';\\n\\n@Component\\nexport struct Page1 {\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text('This is Page1')\\n          .fontSize(30)\\n          .fontWeight(FontWeight.Bold)\\n          .margin({bottom: 20})\\n\\n        // 将typeNode添加到页面布局中\\n        NodeContainer(PipManager.getInstance().getNodeController())\\n          .size({ width: '100%', height: '800px' })\\n\\n        Row({ space: 20 }) {\\n          Button('startPip') // 启动画中画\\n            .onClick(() =&gt; {\\n              PipManager.getInstance().startPip();\\n            })\\n          Button('stopPip') // 停止画中画\\n            .onClick(() =&gt; {\\n              PipManager.getInstance().stopPip();\\n            })\\n          Button('updateSize') // 更新视频尺寸\\n            .onClick(() =&gt; {\\n              // 此处设置的宽高应为媒体内容宽高，需要通过媒体相关接口或回调获取\\n              // 例如使用AVPlayer播放视频时，可通过videoSizeChange回调获取媒体源更新后的尺寸\\n              PipManager.getInstance().updateContentSize(900, 1600);\\n            })\\n        }\\n        .backgroundColor('#4da99797')\\n        .size({ width: '100%', height: 60 })\\n        .justifyContent(FlexAlign.SpaceAround)\\n      }\\n      .justifyContent(FlexAlign.Center)\\n      .width('100%')\\n      .height('100%')\\n    }\\n    .title('page1')\\n    .onShown(()=&gt;{\\n      console.info(TAG, 'onShown')\\n      PipManager.getInstance().init(getContext(this));\\n      PipManager.getInstance().setAutoStart(true);\\n    })\\n    .onHidden(()=&gt;{\\n      console.info(TAG, 'onHidden')\\n      PipManager.getInstance().setAutoStart(false);\\n      PipManager.getInstance().removeNode();\\n    })\\n  }\\n}</pre> <pre class='\\\"screen\\\"'>// model/XCNodeController.ets\\nimport { FrameNode, NodeController, typeNode } from '@kit.ArkUI';\\nimport { PipManager } from './PipManager';\\n\\nconst TAG = 'XCNodeController';\\n\\n// 创建自定义NodeController\\nexport class XCNodeController extends NodeController {\\n  xComponent: typeNode.XComponent| null = null;\\n  private node: FrameNode | null = null;\\n  private canAddNode: boolean = true;\\n\\n  // 设置是否可以添加节点\\n  setCanAddNode(canAddNode: boolean) {\\n    this.canAddNode = canAddNode;\\n  }\\n\\n  // 实现makeNode方法，当自定义NodeController被添加到布局时，该方法会被调用\\n  makeNode(context: UIContext): FrameNode | null {\\n    console.info(TAG, \\\"makeNode\\\");\\n    this.node = new FrameNode(context);\\n    if (this.xComponent === null || this.xComponent === undefined) {\\n      // 创建typeNode\\n      // let xc_options: XComponentOptions = {\\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      // }\\n      // this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", xc_options);\\n\\n      // 创建XComponent类型的typeNode\\n      this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", {\\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      });\\n    }\\n    if (this.canAddNode) {\\n      this.xComponent.getParent()?.removeChild(this.xComponent);\\n      this.node.appendChild(this.xComponent);\\n    }\\n    return this.node;\\n  }\\n\\n  // 重新添加typeNode节点\\n  addNode() {\\n    if (this.node !== null &amp;&amp; this.node !== undefined) {\\n      console.info(TAG, \\\"addNode id:\\\"+(this.node?.getUniqueId())+\\\" \\\"+this.xComponent?.getUniqueId());\\n      this.node.appendChild(this.xComponent);\\n    }\\n  }\\n\\n  // 移除typeNode节点\\n  removeNode() {\\n    if (this.node !== null &amp;&amp; this.node !== undefined) {\\n      console.info(TAG, \\\"removeNode\\\");\\n      this.node.removeChild(this.xComponent);\\n    }\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    console.info(TAG, \\\"getNode is null:\\\"+ (this.xComponent === null || this.xComponent === undefined))\\n    return this.xComponent;\\n  }\\n}</pre> <pre class='\\\"screen\\\"'>// model/PipManager.ets\\nimport { PiPWindow, typeNode } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { XCNodeController } from './XCNodeController';\\nimport { AVPlayer } from './AVPlayer'\\n\\nexport class CustomXComponentController extends XComponentController {\\n  onSurfaceCreated(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\\n      return;\\n    }\\n    // 将surfaceId设置给媒体源\\n    PipManager.getInstance().player.surfaceID = surfaceId;\\n    PipManager.getInstance().player.avPlayerFdSrc();\\n  }\\n\\n  onSurfaceDestroyed(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\\n  }\\n}\\n\\nconst TAG = 'PipManager';\\n\\nexport class PipManager {\\n  private static instance: PipManager = new PipManager();\\n  private pipController?: PiPWindow.PiPController = undefined;\\n  private xcNodeController: XCNodeController;\\n  private mXComponentController: XComponentController;\\n  private lifeCycleCallback: Set&lt;Function&gt; = new Set();\\n  player: AVPlayer;\\n\\n  public static getInstance(): PipManager {\\n    return PipManager.instance;\\n  }\\n\\n  constructor() {\\n    this.xcNodeController = new XCNodeController();\\n    this.player = new AVPlayer();\\n    this.mXComponentController = new CustomXComponentController();\\n  }\\n\\n  public registerLifecycleCallback(callBack: Function) {\\n    this.lifeCycleCallback.add(callBack);\\n  }\\n\\n  public unRegisterLifecycleCallback(callBack: Function): void {\\n    this.lifeCycleCallback.delete(callBack);\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    return this.xcNodeController.getNode();\\n  }\\n\\n  onActionEvent(control: PiPWindow.ControlEventParam) {\\n    switch (control.controlType) {\\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\\n          //停止视频\\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\\n          //播放视频\\n        }\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\\n        // 切换到下一个视频\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\\n        // 切换到上一个视频\\n        break;\\n      case PiPWindow.PiPControlType.FAST_FORWARD:\\n        // 视频进度快进\\n        break;\\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\\n        // 视频进度后退\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\\n  }\\n\\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\\n    let curState: string = '';\\n    this.xcNodeController.setCanAddNode(\\n      state === PiPWindow.PiPState.ABOUT_TO_STOP || state === PiPWindow.PiPState.STOPPED)\\n    if (this.lifeCycleCallback !== null) {\\n      this.lifeCycleCallback.forEach((fun) =&gt; {\\n        fun(state);\\n      });\\n    }\\n    switch (state) {\\n      case PiPWindow.PiPState.ABOUT_TO_START:\\n        curState = \\\"ABOUT_TO_START\\\";\\n        // 将typeNode节点从布局移除\\n        this.xcNodeController.removeNode();\\n        break;\\n      case PiPWindow.PiPState.STARTED:\\n        curState = \\\"STARTED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\\n        curState = \\\"ABOUT_TO_STOP\\\";\\n        break;\\n      case PiPWindow.PiPState.STOPPED:\\n        curState = \\\"STOPPED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\\n        curState = \\\"ABOUT_TO_RESTORE\\\";\\n        break;\\n      case PiPWindow.PiPState.ERROR:\\n        curState = \\\"ERROR\\\";\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\\n  }\\n\\n  unregisterPipStateChangeListener() {\\n    console.info(`${TAG} aboutToDisappear`);\\n    this.pipController?.off('stateChange');\\n    this.pipController?.off('controlEvent');\\n  }\\n\\n  getXComponentController(): CustomXComponentController {\\n    return this.mXComponentController;\\n  }\\n\\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\\n  init(ctx: Context) {\\n    if (this.pipController !== null &amp;&amp; this.pipController != undefined) {\\n      return;\\n    }\\n    console.info(`${TAG} onPageShow`)\\n    if (!PiPWindow.isPiPEnabled()) {\\n      console.error(TAG, `picture in picture disabled for current OS`);\\n      return;\\n    }\\n\\n    let config: PiPWindow.PiPConfiguration = {\\n      context: ctx,\\n      componentController: this.getXComponentController(),\\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则创建画中画失败\\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则创建画中画失败\\n    };\\n    // 通过create接口创建画中画控制器实例\\n    let promise: Promise&lt;PiPWindow.PiPController&gt; = PiPWindow.create(config, this.xcNodeController.getNode());\\n    promise.then((controller: PiPWindow.PiPController) =&gt; {\\n      this.pipController = controller;\\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\\n      this.pipController?.setAutoStartEnabled(true);\\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) =&gt; {\\n        this.onStateChange(state, reason);\\n      });\\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) =&gt; {\\n        this.onActionEvent(control);\\n      });\\n    }).catch((err: BusinessError) =&gt; {\\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤2：启动画中画\\n  startPip() {\\n    this.pipController?.startPiP().then(() =&gt; {\\n      console.info(TAG, `Succeeded in starting pip.`);\\n    }).catch((err: BusinessError) =&gt; {\\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤3：更新媒体源尺寸信息\\n  updateContentSize(width: number, height: number) {\\n    if (this.pipController) {\\n      this.pipController.updateContentSize(width, height);\\n    }\\n  }\\n\\n  // 步骤4：关闭画中画\\n  stopPip() {\\n    if (this.pipController === null || this.pipController === undefined) {\\n      return;\\n    }\\n    let promise: Promise&lt;void&gt; = this.pipController.stopPiP();\\n    promise.then(() =&gt; {\\n      console.info(TAG, `Succeeded in stopping pip.`);\\n    }).catch((err: BusinessError) =&gt; {\\n      console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  getNodeController(): XCNodeController {\\n    console.info(TAG, `getNodeController.`);\\n    return this.xcNodeController;\\n  }\\n\\n  setAutoStart(autoStart: boolean): void {\\n    this.pipController?.setAutoStartEnabled(autoStart);\\n  }\\n\\n  removeNode() {\\n    this.xcNodeController.removeNode();\\n  }\\n\\n  addNode(): void {\\n    this.xcNodeController.addNode();\\n  }\\n}</pre> <p>以上示例代码对应的示意图如下所示：</p> <p><span><img height='\\\"342.67449999999997\\\"' originheight='\\\"584\\\"' originwidth='\\\"408\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120449.78901420179091262610299080046450:50001231000000:2800:16BBEEE6161EA98179213CB5B4705791861F382BC2271949E74104D4D302CB65.gif\\\"' title='\\\"点击放大\\\"' width='\\\"239.4\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pipwindow-typenode.html"
    },
    {
        "id": 1122,
        "pre": "// EntryAbility.ets\\nimport { UIAbility } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\n\\nexport default class EntryAbility extends UIAbility {\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    windowStage.loadContent('pages/Index', (err) => {\\n      // ...\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": "addNode()",
        "function_name": "应用使用单界面Ability时通过typeNode实现画中画功能",
        "parent_text": "应用使用单界面Ability时通过typeNode实现画中画功能创建画中画控制器，注册生命周期事件以及控制事件回调。创建自定义NodeController，实现makeNode方法，在该方法中创建typeNode。通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。 启动画中画。创建画中画控制器实例后，通过startPiP接口启动画中画，在画中画ABOUT_TO_START生命周期将typeNode节点从布局移除。 更新媒体源尺寸信息。画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。 关闭画中画。当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画，在画中画ABOUT_TO_STOP生命周期将typeNode节点重新添加到布局中。   // pages/Index.ets\\nimport { PipManager } from '../model/PipManager';\\nimport { PiPWindow } from '@kit.ArkUI'; // 引入PiPWindow模块\\n\\nconst TAG = 'Index'\\n@Entry\\n@Component\\nstruct Index {\\n  private callback: Function = (state: PiPWindow.PiPState) => {\\n    if (state === PiPWindow.PiPState.ABOUT_TO_STOP) {\\n      // 画中画关闭或还原时触发ABOUT_TO_STOP生命周期，此时需要重新添加节点\\n      PipManager.getInstance().addNode();\\n    }\\n  };\\n\\n  build() {\\n    Column() {\\n      Text('This is MainPage')\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .margin({ bottom: 20 })\\n\\n      // 将typeNode添加到页面布局中\\n      NodeContainer(PipManager.getInstance().getNodeController())\\n        .size({ width: '100%', height: '800px' })\\n\\n      Row({ space: 20 }) {\\n        Button('startPip') // 启动画中画\\n          .onClick(() => {\\n            PipManager.getInstance().startPip();\\n          })\\n\\n        Button('stopPip') // 停止画中画\\n          .onClick(() => {\\n            PipManager.getInstance().stopPip();\\n          })\\n\\n        Button('updateSize') // 更新视频尺寸\\n          .onClick(() => {\\n            // 此处设置的宽高应为媒体内容宽高，需要通过媒体相关接口或回调获取\\n            // 例如使用AVPlayer播放视频时，可通过videoSizeChange回调获取媒体源更新后的尺寸\\n            PipManager.getInstance().updateContentSize(900, 1600);\\n          })\\n      }\\n      .backgroundColor('#4da99797')\\n      .size({ width: '100%', height: 60 })\\n      .justifyContent(FlexAlign.SpaceAround)\\n    }\\n    .justifyContent(FlexAlign.Center)\\n    .width('100%')\\n    .height('100%')\\n  }\\n\\n  aboutToAppear(): void {\\n    PipManager.getInstance().registerLifecycleCallback(this.callback);\\n  }\\n\\n  aboutToDisappear(): void {\\n    PipManager.getInstance().unregisterPipStateChangeListener();\\n    PipManager.getInstance().unRegisterLifecycleCallback(this.callback);\\n  }\\n\\n  onPageShow(): void {\\n    console.info(TAG, 'onPageShow')\\n    PipManager.getInstance().init(getContext(this));\\n    PipManager.getInstance().setAutoStart(true);\\n  }\\n\\n  onPageHide(): void {\\n    console.info(TAG, 'onPageHide')\\n    PipManager.getInstance().setAutoStart(false);\\n  }\\n} // model/XCNodeController.ets\\nimport { FrameNode, NodeController, typeNode } from '@kit.ArkUI';\\nimport { PipManager } from './PipManager';\\n\\nconst TAG = 'XCNodeController';\\n\\n// 创建自定义NodeController\\nexport class XCNodeController extends NodeController {\\n  xComponent: typeNode.XComponent | null = null;\\n  private node: FrameNode | null = null;\\n  private canAddNode: boolean = true;\\n\\n  // 设置是否可以添加节点\\n  setCanAddNode(canAddNode: boolean) {\\n    this.canAddNode = canAddNode;\\n  }\\n\\n  // 实现makeNode方法，当自定义NodeController被添加到布局时，该方法会被调用\\n  makeNode(context: UIContext): FrameNode | null {\\n    this.node = new FrameNode(context);\\n    this.node.commonAttribute\\n    if (this.xComponent === null || this.xComponent === undefined) {\\n      // 创建typeNode\\n      // let xc_options: XComponentOptions = {\\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      // }\\n      // this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", xc_options);\\n\\n      // 创建XComponent类型的typeNode\\n      this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", {\\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      });\\n    }\\n    if (this.canAddNode) {\\n      this.xComponent.getParent()?.removeChild(this.xComponent);\\n      this.node.appendChild(this.xComponent);\\n    }\\n    return this.node;\\n  }\\n\\n  // 重新添加typeNode节点\\n  addNode() {\\n    if (this.node !== null && this.node !== undefined) {\\n      console.info(TAG, \\\"addNode\\\");\\n      this.node.appendChild(this.xComponent);\\n    }\\n  }\\n\\n  // 移除typeNode节点\\n  removeNode() {\\n    if (this.node !== null && this.node !== undefined) {\\n      console.info(TAG, \\\"removeNode\\\");\\n      this.node.removeChild(this.xComponent);\\n    }\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    console.info(TAG, \\\"getNode is null: \\\"+ (this.xComponent === null || this.xComponent === undefined));\\n    return this.xComponent;\\n  }\\n} // model/PipManager.ets\\nimport { PiPWindow, typeNode } from '@kit.ArkUI'; // 引入PiPWindow模块\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { XCNodeController } from './XCNodeController';\\nimport { AVPlayer} from '../model/AVPlayer'\\n\\n// 自定义XComponentController\\nexport class CustomXComponentController extends XComponentController {\\n  onSurfaceCreated(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\\n      return;\\n    }\\n    PipManager.getInstance().player.surfaceID = surfaceId;\\n    PipManager.getInstance().player.avPlayerFdSrc();\\n  }\\n\\n  onSurfaceDestroyed(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\\n  }\\n}\\n\\nconst TAG = 'PipManager';\\n\\nexport class PipManager {\\n  private static instance: PipManager = new PipManager();\\n  private pipController?: PiPWindow.PiPController = undefined;\\n  private xcNodeController: XCNodeController;\\n  private mXComponentController: XComponentController;\\n  private lifeCycleCallback: Set<Function> = new Set();\\n  player: AVPlayer;\\n\\n  public static getInstance(): PipManager {\\n    return PipManager.instance;\\n  }\\n\\n  constructor() {\\n    this.xcNodeController = new XCNodeController();\\n    this.player = new AVPlayer();\\n    this.mXComponentController = new CustomXComponentController();\\n  }\\n\\n  public registerLifecycleCallback(callBack: Function) {\\n    this.lifeCycleCallback.add(callBack);\\n  }\\n\\n  public unRegisterLifecycleCallback(callBack: Function): void {\\n    this.lifeCycleCallback.delete(callBack);\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    return this.xcNodeController.getNode();\\n  }\\n\\n  onActionEvent(control: PiPWindow.ControlEventParam) {\\n    switch (control.controlType) {\\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\\n          //停止视频\\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\\n          //播放视频\\n        }\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\\n        // 切换到下一个视频\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\\n        // 切换到上一个视频\\n        break;\\n      case PiPWindow.PiPControlType.FAST_FORWARD:\\n        // 视频进度快进\\n        break;\\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\\n        // 视频进度后退\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\\n  }\\n\\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\\n    let curState: string = '';\\n    this.xcNodeController.setCanAddNode(\\n      state === PiPWindow.PiPState.ABOUT_TO_STOP || state === PiPWindow.PiPState.STOPPED);\\n    if (this.lifeCycleCallback !== null) {\\n      this.lifeCycleCallback.forEach((fun) => {\\n        fun(state);\\n      });\\n    }\\n    switch (state) {\\n      case PiPWindow.PiPState.ABOUT_TO_START:\\n        curState = \\\"ABOUT_TO_START\\\";\\n        // 将typeNode节点从布局移除\\n        this.xcNodeController.removeNode();\\n        break;\\n      case PiPWindow.PiPState.STARTED:\\n        curState = \\\"STARTED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\\n        curState = \\\"ABOUT_TO_STOP\\\";\\n        break;\\n      case PiPWindow.PiPState.STOPPED:\\n        curState = \\\"STOPPED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\\n        curState = \\\"ABOUT_TO_RESTORE\\\";\\n        break;\\n      case PiPWindow.PiPState.ERROR:\\n        curState = \\\"ERROR\\\";\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\\n  }\\n\\n  unregisterPipStateChangeListener() {\\n    console.info(`${TAG} aboutToDisappear`);\\n    this.pipController?.off('stateChange');\\n    this.pipController?.off('controlEvent');\\n  }\\n\\n  getXComponentController(): CustomXComponentController {\\n    return this.mXComponentController;\\n  }\\n\\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\\n  init(ctx: Context) {\\n    if (this.pipController !== null && this.pipController != undefined) {\\n      return;\\n    }\\n    console.info(`${TAG} onPageShow`)\\n    if (!PiPWindow.isPiPEnabled()) {\\n      console.error(TAG, `picture in picture disabled for current OS`);\\n      return;\\n    }\\n    let config: PiPWindow.PiPConfiguration = {\\n      context: ctx,\\n      componentController: this.getXComponentController(),\\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则创建画中画失败\\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则创建画中画失败\\n    };\\n    // 通过create接口创建画中画控制器实例\\n    let promise: Promise<PiPWindow.PiPController> = PiPWindow.create(config, this.xcNodeController.getNode());\\n    promise.then((controller: PiPWindow.PiPController) => {\\n      this.pipController = controller;\\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\\n      this.pipController?.setAutoStartEnabled(true);\\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) => {\\n        this.onStateChange(state, reason);\\n      });\\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) => {\\n        this.onActionEvent(control);\\n      });\\n    }).catch((err: BusinessError) => {\\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤2：启动画中画\\n  startPip() {\\n    this.pipController?.startPiP().then(() => {\\n      console.info(TAG, `Succeeded in starting pip.`);\\n    }).catch((err: BusinessError) => {\\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤3：更新媒体源尺寸信息\\n  updateContentSize(width: number, height: number) {\\n    if (this.pipController) {\\n      this.pipController.updateContentSize(width, height);\\n    }\\n  }\\n\\n  // 步骤4：关闭画中画\\n  stopPip() {\\n    if (this.pipController === null || this.pipController === undefined) {\\n      return;\\n    }\\n    let promise: Promise<void> = this.pipController.stopPiP();\\n    promise.then(() => {\\n      console.info(TAG, `Succeeded in stopping pip.`);\\n    }).catch((err: BusinessError) => {\\n      console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  getNodeController(): XCNodeController {\\n    console.info(TAG, `getNodeController.`);\\n    return this.xcNodeController;\\n  }\\n\\n  setAutoStart(autoStart: boolean): void {\\n    this.pipController?.setAutoStartEnabled(autoStart);\\n  }\\n\\n  // 将typeNode节点添加到原父节点\\n  addNode(): void {\\n    this.xcNodeController.addNode();\\n  }\\n} 以上示例代码对应的示意图如下所示：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8907336134011\\\"'><a name='\\\"section8907336134011\\\"'></a><a name='\\\"section8907336134011\\\"'></a><h4>应用使用单界面Ability时通过typeNode实现画中画功能</h4><ol><li><span>创建画中画控制器，注册生命周期事件以及控制事件回调。</span><p></p><ul><li>创建自定义NodeController，实现makeNode方法，在该方法中创建typeNode。</li><li>通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。</li><li>通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。</li><li>通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。</li><li>通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。</li></ul> <p></p></li><li><span>启动画中画。</span><p></p><p>创建画中画控制器实例后，通过startPiP接口启动画中画，在画中画ABOUT_TO_START生命周期将typeNode节点从布局移除。</p> <p></p></li><li><span>更新媒体源尺寸信息。</span><p></p><p>画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。</p> <p></p></li><li><span>关闭画中画。</span><p></p><p>当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画，在画中画ABOUT_TO_STOP生命周期将typeNode节点重新添加到布局中。</p> <p></p></li></ol>  <pre class='\\\"screen\\\"'>// pages/Index.ets\\nimport { PipManager } from '../model/PipManager';\\nimport { PiPWindow } from '@kit.ArkUI'; // 引入PiPWindow模块\\n\\nconst TAG = 'Index'\\n@Entry\\n@Component\\nstruct Index {\\n  private callback: Function = (state: PiPWindow.PiPState) =&gt; {\\n    if (state === PiPWindow.PiPState.ABOUT_TO_STOP) {\\n      // 画中画关闭或还原时触发ABOUT_TO_STOP生命周期，此时需要重新添加节点\\n      PipManager.getInstance().addNode();\\n    }\\n  };\\n\\n  build() {\\n    Column() {\\n      Text('This is MainPage')\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .margin({ bottom: 20 })\\n\\n      // 将typeNode添加到页面布局中\\n      NodeContainer(PipManager.getInstance().getNodeController())\\n        .size({ width: '100%', height: '800px' })\\n\\n      Row({ space: 20 }) {\\n        Button('startPip') // 启动画中画\\n          .onClick(() =&gt; {\\n            PipManager.getInstance().startPip();\\n          })\\n\\n        Button('stopPip') // 停止画中画\\n          .onClick(() =&gt; {\\n            PipManager.getInstance().stopPip();\\n          })\\n\\n        Button('updateSize') // 更新视频尺寸\\n          .onClick(() =&gt; {\\n            // 此处设置的宽高应为媒体内容宽高，需要通过媒体相关接口或回调获取\\n            // 例如使用AVPlayer播放视频时，可通过videoSizeChange回调获取媒体源更新后的尺寸\\n            PipManager.getInstance().updateContentSize(900, 1600);\\n          })\\n      }\\n      .backgroundColor('#4da99797')\\n      .size({ width: '100%', height: 60 })\\n      .justifyContent(FlexAlign.SpaceAround)\\n    }\\n    .justifyContent(FlexAlign.Center)\\n    .width('100%')\\n    .height('100%')\\n  }\\n\\n  aboutToAppear(): void {\\n    PipManager.getInstance().registerLifecycleCallback(this.callback);\\n  }\\n\\n  aboutToDisappear(): void {\\n    PipManager.getInstance().unregisterPipStateChangeListener();\\n    PipManager.getInstance().unRegisterLifecycleCallback(this.callback);\\n  }\\n\\n  onPageShow(): void {\\n    console.info(TAG, 'onPageShow')\\n    PipManager.getInstance().init(getContext(this));\\n    PipManager.getInstance().setAutoStart(true);\\n  }\\n\\n  onPageHide(): void {\\n    console.info(TAG, 'onPageHide')\\n    PipManager.getInstance().setAutoStart(false);\\n  }\\n}</pre> <pre class='\\\"screen\\\"'>// model/XCNodeController.ets\\nimport { FrameNode, NodeController, typeNode } from '@kit.ArkUI';\\nimport { PipManager } from './PipManager';\\n\\nconst TAG = 'XCNodeController';\\n\\n// 创建自定义NodeController\\nexport class XCNodeController extends NodeController {\\n  xComponent: typeNode.XComponent | null = null;\\n  private node: FrameNode | null = null;\\n  private canAddNode: boolean = true;\\n\\n  // 设置是否可以添加节点\\n  setCanAddNode(canAddNode: boolean) {\\n    this.canAddNode = canAddNode;\\n  }\\n\\n  // 实现makeNode方法，当自定义NodeController被添加到布局时，该方法会被调用\\n  makeNode(context: UIContext): FrameNode | null {\\n    this.node = new FrameNode(context);\\n    this.node.commonAttribute\\n    if (this.xComponent === null || this.xComponent === undefined) {\\n      // 创建typeNode\\n      // let xc_options: XComponentOptions = {\\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      // }\\n      // this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", xc_options);\\n\\n      // 创建XComponent类型的typeNode\\n      this.xComponent = typeNode.createNode(context, \\\"XComponent\\\", {\\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\\n      });\\n    }\\n    if (this.canAddNode) {\\n      this.xComponent.getParent()?.removeChild(this.xComponent);\\n      this.node.appendChild(this.xComponent);\\n    }\\n    return this.node;\\n  }\\n\\n  // 重新添加typeNode节点\\n  addNode() {\\n    if (this.node !== null &amp;&amp; this.node !== undefined) {\\n      console.info(TAG, \\\"addNode\\\");\\n      this.node.appendChild(this.xComponent);\\n    }\\n  }\\n\\n  // 移除typeNode节点\\n  removeNode() {\\n    if (this.node !== null &amp;&amp; this.node !== undefined) {\\n      console.info(TAG, \\\"removeNode\\\");\\n      this.node.removeChild(this.xComponent);\\n    }\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    console.info(TAG, \\\"getNode is null: \\\"+ (this.xComponent === null || this.xComponent === undefined));\\n    return this.xComponent;\\n  }\\n}</pre> <pre class='\\\"screen\\\"'>// model/PipManager.ets\\nimport { PiPWindow, typeNode } from '@kit.ArkUI'; // 引入PiPWindow模块\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { XCNodeController } from './XCNodeController';\\nimport { AVPlayer} from '../model/AVPlayer'\\n\\n// 自定义XComponentController\\nexport class CustomXComponentController extends XComponentController {\\n  onSurfaceCreated(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\\n      return;\\n    }\\n    PipManager.getInstance().player.surfaceID = surfaceId;\\n    PipManager.getInstance().player.avPlayerFdSrc();\\n  }\\n\\n  onSurfaceDestroyed(surfaceId: string): void {\\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\\n  }\\n}\\n\\nconst TAG = 'PipManager';\\n\\nexport class PipManager {\\n  private static instance: PipManager = new PipManager();\\n  private pipController?: PiPWindow.PiPController = undefined;\\n  private xcNodeController: XCNodeController;\\n  private mXComponentController: XComponentController;\\n  private lifeCycleCallback: Set&lt;Function&gt; = new Set();\\n  player: AVPlayer;\\n\\n  public static getInstance(): PipManager {\\n    return PipManager.instance;\\n  }\\n\\n  constructor() {\\n    this.xcNodeController = new XCNodeController();\\n    this.player = new AVPlayer();\\n    this.mXComponentController = new CustomXComponentController();\\n  }\\n\\n  public registerLifecycleCallback(callBack: Function) {\\n    this.lifeCycleCallback.add(callBack);\\n  }\\n\\n  public unRegisterLifecycleCallback(callBack: Function): void {\\n    this.lifeCycleCallback.delete(callBack);\\n  }\\n\\n  getNode(): typeNode.XComponent | null {\\n    return this.xcNodeController.getNode();\\n  }\\n\\n  onActionEvent(control: PiPWindow.ControlEventParam) {\\n    switch (control.controlType) {\\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\\n          //停止视频\\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\\n          //播放视频\\n        }\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\\n        // 切换到下一个视频\\n        break;\\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\\n        // 切换到上一个视频\\n        break;\\n      case PiPWindow.PiPControlType.FAST_FORWARD:\\n        // 视频进度快进\\n        break;\\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\\n        // 视频进度后退\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\\n  }\\n\\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\\n    let curState: string = '';\\n    this.xcNodeController.setCanAddNode(\\n      state === PiPWindow.PiPState.ABOUT_TO_STOP || state === PiPWindow.PiPState.STOPPED);\\n    if (this.lifeCycleCallback !== null) {\\n      this.lifeCycleCallback.forEach((fun) =&gt; {\\n        fun(state);\\n      });\\n    }\\n    switch (state) {\\n      case PiPWindow.PiPState.ABOUT_TO_START:\\n        curState = \\\"ABOUT_TO_START\\\";\\n        // 将typeNode节点从布局移除\\n        this.xcNodeController.removeNode();\\n        break;\\n      case PiPWindow.PiPState.STARTED:\\n        curState = \\\"STARTED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\\n        curState = \\\"ABOUT_TO_STOP\\\";\\n        break;\\n      case PiPWindow.PiPState.STOPPED:\\n        curState = \\\"STOPPED\\\";\\n        break;\\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\\n        curState = \\\"ABOUT_TO_RESTORE\\\";\\n        break;\\n      case PiPWindow.PiPState.ERROR:\\n        curState = \\\"ERROR\\\";\\n        break;\\n      default:\\n        break;\\n    }\\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\\n  }\\n\\n  unregisterPipStateChangeListener() {\\n    console.info(`${TAG} aboutToDisappear`);\\n    this.pipController?.off('stateChange');\\n    this.pipController?.off('controlEvent');\\n  }\\n\\n  getXComponentController(): CustomXComponentController {\\n    return this.mXComponentController;\\n  }\\n\\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\\n  init(ctx: Context) {\\n    if (this.pipController !== null &amp;&amp; this.pipController != undefined) {\\n      return;\\n    }\\n    console.info(`${TAG} onPageShow`)\\n    if (!PiPWindow.isPiPEnabled()) {\\n      console.error(TAG, `picture in picture disabled for current OS`);\\n      return;\\n    }\\n    let config: PiPWindow.PiPConfiguration = {\\n      context: ctx,\\n      componentController: this.getXComponentController(),\\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则创建画中画失败\\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则创建画中画失败\\n    };\\n    // 通过create接口创建画中画控制器实例\\n    let promise: Promise&lt;PiPWindow.PiPController&gt; = PiPWindow.create(config, this.xcNodeController.getNode());\\n    promise.then((controller: PiPWindow.PiPController) =&gt; {\\n      this.pipController = controller;\\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\\n      this.pipController?.setAutoStartEnabled(true);\\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) =&gt; {\\n        this.onStateChange(state, reason);\\n      });\\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) =&gt; {\\n        this.onActionEvent(control);\\n      });\\n    }).catch((err: BusinessError) =&gt; {\\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤2：启动画中画\\n  startPip() {\\n    this.pipController?.startPiP().then(() =&gt; {\\n      console.info(TAG, `Succeeded in starting pip.`);\\n    }).catch((err: BusinessError) =&gt; {\\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  // 步骤3：更新媒体源尺寸信息\\n  updateContentSize(width: number, height: number) {\\n    if (this.pipController) {\\n      this.pipController.updateContentSize(width, height);\\n    }\\n  }\\n\\n  // 步骤4：关闭画中画\\n  stopPip() {\\n    if (this.pipController === null || this.pipController === undefined) {\\n      return;\\n    }\\n    let promise: Promise&lt;void&gt; = this.pipController.stopPiP();\\n    promise.then(() =&gt; {\\n      console.info(TAG, `Succeeded in stopping pip.`);\\n    }).catch((err: BusinessError) =&gt; {\\n      console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\\n    });\\n  }\\n\\n  getNodeController(): XCNodeController {\\n    console.info(TAG, `getNodeController.`);\\n    return this.xcNodeController;\\n  }\\n\\n  setAutoStart(autoStart: boolean): void {\\n    this.pipController?.setAutoStartEnabled(autoStart);\\n  }\\n\\n  // 将typeNode节点添加到原父节点\\n  addNode(): void {\\n    this.xcNodeController.addNode();\\n  }\\n}</pre> <p>以上示例代码对应的示意图如下所示：</p> <p><span><img height='\\\"342.6612\\\"' originheight='\\\"584\\\"' originwidth='\\\"408\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120449.49825595790323799051511905090847:50001231000000:2800:A2651B9554A05F8B09F2E5D41DF393F84D2D264EE895DFE7C242929B1991A4B0.gif\\\"' title='\\\"点击放大\\\"' width='\\\"239.4\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pipwindow-typenode.html"
    },
    {
        "id": 1123,
        "pre": "import { businessRiskIntelligentDetection } from '@kit.DeviceSecurityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Device Security Kit模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Device Security Kit模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-fraudriskdetection.html"
    },
    {
        "id": 1124,
        "pre": "// CMakeLists.txt\\n# the minimum version of CMake.\\ncmake_minimum_required(VERSION 3.4.1)\\nproject(myapplication)\\n\\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\\n\\nif(DEFINED PACKAGE_FIND_FILE)\\n    include(${PACKAGE_FIND_FILE})\\nendif()\\n\\ninclude_directories(${NATIVERENDER_ROOT_PATH}\\n                    ${NATIVERENDER_ROOT_PATH}/include)\\nadd_library(entry SHARED hello.cpp)\\ntarget_link_libraries(entry PUBLIC libace_napi.z.so)",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "CMakeLists.txt文件需要按照如下配置 ",
        "import_module": null,
        "parent": "<li>CMakeLists.txt文件需要按照如下配置 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/use-napi-event-loop.html"
    },
    {
        "id": 1125,
        "pre": "import { textRecognition } from '@kit.CoreVisionKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "在使用通用文字识别时，将实现文字识别的相关的类添加至工程。 ",
        "import_module": "import { textRecognition } from '@kit.CoreVisionKit';",
        "parent": "<li><span>在使用通用文字识别时，将实现文字识别的相关的类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-text-recognition.html"
    },
    {
        "id": 1126,
        "pre": "import { textRecognition } from '@kit.CoreVisionKit'\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private imageSource: image.ImageSource | undefined = undefined;\\n  @State chooseImage: PixelMap | undefined = undefined;\\n  @State dataValues: string = '';\\n\\n  async aboutToAppear(): Promise<void> {\\n    const initResult = await textRecognition.init();\\n    hilog.info(0x0000, 'OCRDemo', `OCR service initialization result:${initResult}`);\\n  }\\n\\n  async aboutToDisappear(): Promise<void> {\\n    await textRecognition.release();\\n    hilog.info(0x0000, 'OCRDemo', 'OCR service released successfully');\\n  }\\n\\n  build() {\\n    Column() {\\n      Image(this.chooseImage)\\n        .objectFit(ImageFit.Fill)\\n        .height('60%')\\n\\n      Text(this.dataValues)\\n        .copyOption(CopyOptions.LocalDevice)\\n        .height('15%')\\n        .margin(10)\\n        .width('60%')\\n\\n      Button('选择图片')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          // 拉起图库，获取图片资源\\n          this.selectImage();\\n        })\\n\\n      Button('开始识别')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(async () => {\\n          this.textRecognitionTest();\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  private textRecognitionTest() {\\n    if (!this.chooseImage) {\\n      return;\\n    }\\n    // 调用文本识别接口\\n    let visionInfo: textRecognition.VisionInfo = {\\n      pixelMap: this.chooseImage\\n    };\\n    let textConfiguration: textRecognition.TextRecognitionConfiguration = {\\n      isDirectionDetectionSupported: false\\n    };\\n    textRecognition.recognizeText(visionInfo, textConfiguration)\\n      .then((data: textRecognition.TextRecognitionResult) => {\\n        // 识别成功，获取对应的结果\\n        let recognitionString = JSON.stringify(data);\\n        hilog.info(0x0000, 'OCRDemo', `Succeeded in recognizing text：${recognitionString}`);\\n        // 将结果更新到Text中显示\\n        this.dataValues = data.value;\\n      })\\n      .catch((error: BusinessError) => {\\n        hilog.error(0x0000, 'OCRDemo', `Failed to recognize text. Code: ${error.code}, message: ${error.message}`);\\n        this.dataValues = `Error: ${error.message}`;\\n      });\\n  }\\n\\n  private async selectImage() {\\n    let uri = await this.openPhoto();\\n    if (uri === undefined) {\\n      hilog.error(0x0000, 'OCRDemo', \\\"Failed to get uri.\\\");\\n      return;\\n    }\\n    this.loadImage(uri);\\n  }\\n\\n  private openPhoto(): Promise<string> {\\n    return new Promise<string>((resolve) => {\\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\\n      photoPicker.select({\\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\\n        maxSelectNumber: 1\\n      }).then((res: photoAccessHelper.PhotoSelectResult) => {\\n        resolve(res.photoUris[0]);\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0000, 'OCRDemo', `Failed to get photo image uri. Code：${err.code}，message：${err.message}`);\\n        resolve('');\\n      })\\n    })\\n  }\\n\\n  private loadImage(name: string) {\\n    setTimeout(async () => {\\n      let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\\n      this.imageSource = image.createImageSource(fileSource.fd);\\n      this.chooseImage = await this.imageSource.createPixelMap();\\n    }, 100)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      点击按钮，识别一张图片的文字内容，并通过日志打印。       ",
        "import_module": "import { textRecognition } from '@kit.CoreVisionKit';",
        "parent": "<div class='\\\"p\\\"'>      点击按钮，识别一张图片的文字内容，并通过日志打印。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-text-recognition.html"
    },
    {
        "id": 1127,
        "pre": "import { notificationManager } from '@kit.NotificationKit';\\nimport { wantAgent, WantAgent } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nconst TAG: string = '[PublishOperation]';\\nconst DOMAIN_NUMBER: number = 0xFF00;",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { notificationManager } from '@kit.NotificationKit';\\nimport { wantAgent, WantAgent } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nconst TAG: string = '[PublishOperation]';\\nconst DOMAIN_NUMBER: number = 0xFF00;",
        "parent": "<li><p>导入模块。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/notification-with-wantagent.html"
    },
    {
        "id": 1128,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkts-no-use-any-export-other\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkts-no-use-any-export-other.html"
    },
    {
        "id": 1129,
        "pre": "// 当前文件 User.ets\\n// 从 Product.ets 文件中导出Product成员\\nexport { Product } from './Product';\\nclass User {\\n  id?: number;\\n  name?: string;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkts-no-use-any-export-other.html"
    },
    {
        "id": 1130,
        "pre": "// 当前文件 User.ets\\n// 从 Product.ets 文件中导出所有可导出的成员\\nexport * from './Product';\\n// 从 Product.ets 文件中导出所有可导出的成员\\nexport * as XX from './Product';\\nclass User {\\n  id?: number;\\n  name?: string;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkts-no-use-any-export-other.html"
    },
    {
        "id": 1131,
        "pre": "import { AAID } from '@kit.PushKit';\\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入AAID模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入AAID模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-get-aaid.html"
    },
    {
        "id": 1132,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit';\\nimport { rcp } from '@kit.RemoteCommunicationKit';\\nimport { util } from '@kit.ArkTS';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-pauseresume.html"
    },
    {
        "id": 1133,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-pauseresume.html"
    },
    {
        "id": 1134,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-reduce-type-parameter\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-reduce-type-parameter.html"
    },
    {
        "id": 1135,
        "pre": "['1', '2', '3'].reduce<readonly string[]>((arr, text) => {\\n  const newArr = [...arr];\\n  newArr.push(text);\\n  return newArr;\\n}, []);",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-reduce-type-parameter.html"
    },
    {
        "id": 1136,
        "pre": "['1', '2', '3'].reduce((arr, text) => {\\n  const newArr = [...arr];\\n  newArr.push(text);\\n  return newArr;\\n}, [] as readonly string[]);",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-reduce-type-parameter.html"
    },
    {
        "id": 1137,
        "pre": "export const testHiCollieJankNdk: () => void;\\nexport const testHiCollieStuckNdk: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将TestHiCollieNdk注册为ArkTS接口： 编辑\\\"napi_init.cpp\\\"文件，将TestHiCollieNdk注册为ArkTS接口：  static napi_value Init(napi_env env, napi_value exports)\\n {\\n     napi_property_descriptor desc[] = {\\n         { \\\"testHiCollieJankNdk\\\", nullptr, TestHiCollieJankNdk, nullptr, nullptr, nullptr, napi_default, nullptr },\\n         { \\\"testHiCollieStuckNdk\\\", nullptr, TestHiCollieStuckNdk, nullptr, nullptr, nullptr, napi_default, nullptr }};\\n     };\\n     napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n     return exports;\\n } 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>将TestHiCollieNdk注册为ArkTS接口：</p> <p>编辑\\\"napi_init.cpp\\\"文件，将TestHiCollieNdk注册为ArkTS接口：</p> <pre> static napi_value Init(napi_env env, napi_value exports)\\n {\\n     napi_property_descriptor desc[] = {\\n         { \\\"testHiCollieJankNdk\\\", nullptr, TestHiCollieJankNdk, nullptr, nullptr, nullptr, napi_default, nullptr },\\n         { \\\"testHiCollieStuckNdk\\\", nullptr, TestHiCollieStuckNdk, nullptr, nullptr, nullptr, napi_default, nullptr }};\\n     };\\n     napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n     return exports;\\n }</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hicollie-guidelines-ndk.html"
    },
    {
        "id": 1138,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-invalid-this\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-invalid-this.html"
    },
    {
        "id": 1139,
        "pre": "function baz(arg0: () => object) {\\n  return arg0;\\n}\\n\\nexport class Bar {\\n  public a: number;\\n\\n  public constructor() {\\n    this.a = 0;\\n    baz(() => this);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-invalid-this.html"
    },
    {
        "id": 1140,
        "pre": "function baz(arg0: () => object) {\\n  return arg0;\\n}\\n\\nexport function foo1() {\\n  this.a = 0;\\n  baz(() => this);\\n}\\n\\nexport const foo2 = () => {\\n  this.a = 0;\\n  baz(() => this);\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-invalid-this.html"
    },
    {
        "id": 1141,
        "pre": "{\\n  \\\"app\\\": {\\n    \\\"products\\\": [\\n      {\\n         \\\"buildOption\\\": {\\n           \\\"strictMode\\\": {\\n             \\\"useNormalizedOHMUrl\\\": true\\n           }\\n         }\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将工程级build-profile.json5的useNormalizedOHMUrl设置为true。     从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，工程级build-profile.json5中useNormalizedOHMUrl字段默认为true，byteCodeHar缺省默认值为true，无需执行步骤1和2。    ",
        "import_module": null,
        "parent": "<li id='\\\"li35764303319\\\"'><span>将工程级build-profile.json5的useNormalizedOHMUrl设置为true。</span><p></p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002202174945__note3576330134\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250329183612.33998506959861554059816168709559:50001231000000:2800:25AB71605EC02958D349900536269885E4870BAB06466AA5952304589485F982.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002202174945__p757613304316\\\"'>从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，工程级build-profile.json5中useNormalizedOHMUrl字段默认为true，byteCodeHar缺省默认值为true，无需执行步骤1和2。</p> </div> </div>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-har.html"
    },
    {
        "id": 1142,
        "pre": "{\\n  \\\"buildOption\\\": {\\n    \\\"arkOptions\\\": {\\n      \\\"byteCodeHar\\\": false\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在HAR模块的build-profile.json5中，将byteCodeHar设置为false。     使用DevEco Studio NEXT Beta1（5.0.3.800）之前的版本，模块级build-profile.json5的byteCodeHar字段的缺省默认值为false，无需执行本步骤。   ",
        "import_module": null,
        "parent": "<li id='\\\"li1628715293229\\\"'><span>在HAR模块的build-profile.json5中，将byteCodeHar设置为false。</span><p></p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002202174945__note105871211053\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250329183612.40940138095012702435397403355477:50001231000000:2800:01AB1551FFB464E97B65D0281C01F76C6E1BA86F6EF0DEAA29BA9D411B61CEAE.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002202174945__p16321525816\\\"'>使用DevEco Studio NEXT Beta1（5.0.3.800）之前的版本，模块级build-profile.json5的byteCodeHar字段的缺省默认值为false，无需执行本步骤。</p> </div> </div> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-har.html"
    },
    {
        "id": 1143,
        "pre": "{\\n  \\\"buildOption\\\": {\\n    \\\"arkOptions\\\": {\\n      \\\"byteCodeHar\\\": false\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在HAR模块的build-profile.json5中，将byteCodeHar设置为false。     使用DevEco Studio NEXT Beta1（5.0.3.800）之前的版本，模块级build-profile.json5的byteCodeHar字段的缺省默认值为false，无需执行本步骤。   ",
        "import_module": null,
        "parent": "<li id='\\\"li17356136193920\\\"'><span>在HAR模块的build-profile.json5中，将byteCodeHar设置为false。</span><p></p> <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002202174945__note14356156153913\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250329183613.25824861606318545706221644960982:50001231000000:2800:64FBC0603676BC2EBA8D6C1BEA276DB1040BE5A03B253659379D711353BD6DBF.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002202174945__p1235713653916\\\"'>使用DevEco Studio NEXT Beta1（5.0.3.800）之前的版本，模块级build-profile.json5的byteCodeHar字段的缺省默认值为false，无需执行本步骤。</p> </div> </div> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-har.html"
    },
    {
        "id": 1144,
        "pre": "{\\n  \\\"properties\\\": {\\n    \\\"ohos.sign.har\\\": true\\n  }\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "在hvigor-config.json5中，开启构建签名HAR开关： ",
        "import_module": "{\\n  \\\"properties\\\": {\\n    \\\"ohos.sign.har\\\": true\\n  }\\n}",
        "parent": "<li id='\\\"li11298143215324\\\"'><span>在hvigor-config.json5中，开启构建签名HAR开关：</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-build-har.html"
    },
    {
        "id": 1145,
        "pre": "import { gamePerformance } from '@kit.GameServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "  [h2]导入模块 导入Game Service Kit及公共模块。  ",
        "import_module": "import { gamePerformance } from '@kit.GameServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section10465717173919\\\"'> <a name='\\\"section10465717173919\\\"'></a><a name='\\\"section10465717173919\\\"'></a> <h4>[h2]导入模块</h4> <p>导入Game Service Kit及公共模块。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure.html"
    },
    {
        "id": 1146,
        "pre": "let gamePackageInfo: gamePerformance.GamePackageInfo = {\\n    messageType: 0,\\n    bundleName: \\\"com.example.demo\\\", // 仅示例，请替换为实际的游戏包名\\n    appVersion: \\\"1.0\\\"\\n}\\ntry {\\n  gamePerformance.init(gamePackageInfo).then(() => {\\n    // 初始化成功\\n    hilog.info(0x0001, 'demo', `Succeeded in initing.`);\\n  })\\n} catch (error) {\\n  // 初始化失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to init. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]初始化",
        "parent_text": "  [h2]初始化 导入相关模块后，需先调用init接口对游戏场景感知进行初始化。     init接口是调用其他接口的前提，如果未初始化或初始化失败，将无法调用其他接口。    ",
        "import_module": "import { gamePerformance } from '@kit.GameServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8810153223912\\\"'> <a name='\\\"section8810153223912\\\"'></a><a name='\\\"section8810153223912\\\"'></a> <h4>[h2]初始化</h4> <p>导入相关模块后，需先调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameperformance#section131971556806\\\"' target='\\\"_blank\\\"'>init</a>接口对游戏场景感知进行初始化。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120111.77949347319886937955221317937180:50001231000000:2800:9A62602CE85A8E42A8540C3631BEC01EA8A789B9EB3D345CC0456EC972DEC997.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>init接口是调用其他接口的前提，如果未初始化或初始化失败，将无法调用其他接口。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure.html"
    },
    {
        "id": 1147,
        "pre": "function onDeviceStateChange(data:gamePerformance.DeviceInfo) {\\n  // 设备信息详情\\n  hilog.info(0x0001, 'demo', `device state changed.`);\\n}\\n\\n// 订阅deviceStateChanged事件\\ntry {\\n  gamePerformance.on('deviceStateChanged', onDeviceStateChange);\\n} catch (error) {\\n  // 订阅失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to subscribe. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": "function onDeviceStateChange(data:gamePerformance.DeviceInfo)",
        "function_name": "[h2]订阅设备状态变化",
        "parent_text": "  [h2]订阅设备状态变化 调用on接口可以订阅设备状态变化事件，获取设备状态变化的通知（如设备温控档位）。  目前支持订阅GPU和温度变化趋势两种类型的设备状态数据，也可以调用on接口按需订阅，如只订阅GPU数据： function onDeviceStateChange(data:gamePerformance.DeviceInfo) {\\n  // data中仅含有gpuInfo\\n  hilog.info(0x0001, 'demo', `device state changed.`);\\n}\\n\\n// 订阅deviceStateChanged事件\\ntry {\\n  let types:Array<gamePerformance.DeviceInfoType> = [gamePerformance.DeviceInfoType.GPU];\\n  gamePerformance.on('deviceStateChanged', onDeviceStateChange, types);\\n} catch (error) {\\n  // 订阅失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to subscribe. Code: ${err.code}, message: ${err.message}`);\\n} ",
        "import_module": "import { gamePerformance } from '@kit.GameServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1911494910398\\\"'> <a name='\\\"section1911494910398\\\"'></a><a name='\\\"section1911494910398\\\"'></a> <h4>[h2]订阅设备状态变化</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameperformance#section17453143012584\\\"' target='\\\"_blank\\\"'>on</a>接口可以订阅设备状态变化事件，获取设备状态变化的通知（如设备温控档位）。</p>  <p>目前支持订阅GPU和温度变化趋势两种类型的设备状态数据，也可以调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameperformance#section060864914495\\\"' target='\\\"_blank\\\"'>on</a>接口按需订阅，如只订阅GPU数据：</p> <pre class='\\\"typescript\\\"'>function onDeviceStateChange(data:gamePerformance.DeviceInfo) {\\n  // data中仅含有gpuInfo\\n  hilog.info(0x0001, 'demo', `device state changed.`);\\n}\\n\\n// 订阅deviceStateChanged事件\\ntry {\\n  let types:Array&lt;gamePerformance.DeviceInfoType&gt; = [gamePerformance.DeviceInfoType.GPU];\\n  gamePerformance.on('deviceStateChanged', onDeviceStateChange, types);\\n} catch (error) {\\n  // 订阅失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to subscribe. Code: ${err.code}, message: ${err.message}`);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure.html"
    },
    {
        "id": 1148,
        "pre": "// 以更新游戏场景信息为例\\nlet gameSceneInfo: gamePerformance.GameSceneInfo = {\\n\\tmessageType: 2,\\n\\tsceneID: 7,\\n\\timportanceLevel: 4\\n}\\ntry {\\n    gamePerformance.updateGameInfo(gameSceneInfo).then(() => {\\n        // 更新游戏场景信息成功\\n        hilog.info(0x0001, 'demo', `Succeeded in updating.`);\\n    });\\n} catch (error) {\\n    // 更新游戏场景信息失败\\n    let err = error as BusinessError;\\n    hilog.error(0x0001, 'demo', `Failed to update. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]上报游戏信息",
        "parent_text": "  [h2]上报游戏信息 初始化成功后，可以通过调用updateGameInfo接口上报游戏信息（包信息、配置信息、场景信息和网络信息等）。  ",
        "import_module": "import { gamePerformance } from '@kit.GameServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section6522106194016\\\"'> <a name='\\\"section6522106194016\\\"'></a><a name='\\\"section6522106194016\\\"'></a> <h4>[h2]上报游戏信息</h4> <p>初始化成功后，可以通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameperformance#section225333655719\\\"' target='\\\"_blank\\\"'>updateGameInfo</a>接口上报游戏信息（包信息、配置信息、场景信息和网络信息等）。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure.html"
    },
    {
        "id": 1149,
        "pre": "function onDeviceStateChange(data:gamePerformance.DeviceInfo) {\\n  // 设备信息详情\\n  hilog.info(0x0001, 'demo', `device state changed.`);\\n}\\n\\n// 取消订阅deviceStateChanged事件\\ntry {\\n  gamePerformance.off('deviceStateChanged', onDeviceStateChange);\\n} catch (error) {\\n  // 取消订阅失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to unsubscribe. Code: ${err.code}, message: ${err.message}`);\\n}\\n\\n// 取消deviceStateChanged事件的全部订阅\\ntry {\\n  gamePerformance.off(\\\"deviceStateChanged\\\");\\n} catch (error) {\\n  // 取消订阅失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to unsubscribe. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]取消订阅设备状态",
        "parent_text": "  [h2]取消订阅设备状态 如不再需要订阅，则可以通过调用off接口取消订阅设备状态。  ",
        "import_module": "import { gamePerformance } from '@kit.GameServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section170652064015\\\"'> <a name='\\\"section170652064015\\\"'></a><a name='\\\"section170652064015\\\"'></a> <h4>[h2]取消订阅设备状态</h4> <p>如不再需要订阅，则可以通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameperformance#section3614173614593\\\"' target='\\\"_blank\\\"'>off</a>接口取消订阅设备状态。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure.html"
    },
    {
        "id": 1150,
        "pre": "// 查询设备状态\\ntry {\\n  let gpuParam: gamePerformance.DeviceInfoParameter = {\\n    deviceInfoType: gamePerformance.DeviceInfoType.GPU\\n  }\\n  let thermalParam: gamePerformance.DeviceInfoParameter = {\\n    deviceInfoType: gamePerformance.DeviceInfoType.THERMAL     \\n  }\\n  let gameInfos: Array<gamePerformance.DeviceInfoParameter> = [gpuParam, thermalParam];\\n  gamePerformance.getDeviceInfoByScope(gameInfos).then((deviceInfo:gamePerformance.DeviceInfo) => {\\n    hilog.info(0x0001, 'demo', `Succeeded in querying device info.`);\\n  });\\n} catch (error) {\\n  // 查询失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to query. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]查询设备状态信息",
        "parent_text": "  [h2]查询设备状态信息 除订阅设备状态变化的方式外，也可以通过调用getDeviceInfoByScope接口主动查询设备状态：  主动查询接口同样支持按需查询，如只查询温度变化趋势数据： // 只查询设备温度数据\\ntry {\\n  let thermalParam: gamePerformance.DeviceInfoParameter = {\\n    deviceInfoType: gamePerformance.DeviceInfoType.THERMAL     \\n  }\\n  let gameInfos: Array<gamePerformance.DeviceInfoParameter> = [thermalParam];\\n  gamePerformance.getDeviceInfoByScope(gameInfos).then((deviceInfo:gamePerformance.DeviceInfo) => {\\n    // 此处的查询结果中将不含有gpuInfo\\n    hilog.info(0x0001, 'demo', `Succeeded in querying device info.`);\\n  });\\n} catch (error) {\\n  // 查询失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to query. Code: ${err.code}, message: ${err.message}`);\\n}     查询温度变化趋势需要历史数据作为计算依据，调用该接口时请保证设备已启动至少一分钟，否则会返回1010300003错误。   ",
        "import_module": "import { gamePerformance } from '@kit.GameServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section13901037174010\\\"'> <a name='\\\"section13901037174010\\\"'></a><a name='\\\"section13901037174010\\\"'></a> <h4>[h2]查询设备状态信息</h4> <p>除订阅设备状态变化的方式外，也可以通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameperformance#section106164517195\\\"' target='\\\"_blank\\\"'>getDeviceInfoByScope</a>接口主动查询设备状态：</p>  <p>主动查询接口同样支持按需查询，如只查询温度变化趋势数据：</p> <pre class='\\\"typescript\\\"'>// 只查询设备温度数据\\ntry {\\n  let thermalParam: gamePerformance.DeviceInfoParameter = {\\n    deviceInfoType: gamePerformance.DeviceInfoType.THERMAL     \\n  }\\n  let gameInfos: Array&lt;gamePerformance.DeviceInfoParameter&gt; = [thermalParam];\\n  gamePerformance.getDeviceInfoByScope(gameInfos).then((deviceInfo:gamePerformance.DeviceInfo) =&gt; {\\n    // 此处的查询结果中将不含有gpuInfo\\n    hilog.info(0x0001, 'demo', `Succeeded in querying device info.`);\\n  });\\n} catch (error) {\\n  // 查询失败\\n  let err = error as BusinessError;\\n  hilog.error(0x0001, 'demo', `Failed to query. Code: ${err.code}, message: ${err.message}`);\\n}</pre> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120111.57924570897033905695286590421691:50001231000000:2800:B35975AC15F1E88767B319F77FDA9C451F387FBF64FAA07F0D1B577B49953186.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>查询温度变化趋势需要历史数据作为计算依据，调用该接口时请保证设备已启动至少一分钟，否则会返回1010300003错误。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure.html"
    },
    {
        "id": 1151,
        "pre": "import { smartMobilityCommon } from '@kit.CarKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-register-connection-listener.html"
    },
    {
        "id": 1152,
        "pre": "import { antifraudPicker} from '@kit.DeviceSecurityKit';\\nimport { BusinessError} from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { common} from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Device Security Kit模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Device Security Kit模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-selectfraudmessage.html"
    },
    {
        "id": 1153,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-commented-code\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section0610155012289\\\"'><a name='\\\"section0610155012289\\\"'></a><a name='\\\"section0610155012289\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-commented-code.html"
    },
    {
        "id": 1154,
        "pre": "import { privacyManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入privacyManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入privacyManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-privacy.html"
    },
    {
        "id": 1155,
        "pre": "import { privacyManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入privacyManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入privacyManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-privacy.html"
    },
    {
        "id": 1156,
        "pre": "import { privacyManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入privacyManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入privacyManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-privacy.html"
    },
    {
        "id": 1157,
        "pre": "import { privacyManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport type { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入privacyManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入privacyManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-privacy.html"
    },
    {
        "id": 1158,
        "pre": "// module.json5\\n{\\n  \\\"module\\\": {\\n    \\\"name\\\": \\\"entry\\\",\\n    \\\"type\\\": \\\"entry\\\",\\n    \\\"description\\\": \\\"$string:module_desc\\\",\\n    \\\"metadata\\\": [\\n      {\\n        \\\"name\\\": \\\"appgallery_privacy_hosted\\\",\\n        \\\"value\\\": \\\"1\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"appgallery_privacy_link_privacy_statement\\\",\\n        \\\"value\\\": \\\"https://www.example.com/\\\" // 必须是https网址\\n      },\\n      {\\n        \\\"name\\\": \\\"appgallery_privacy_link_user_agreement\\\",\\n        \\\"value\\\": \\\"https://www.example.com/\\\" // 必须是https网址\\n      },\\n      {\\n        \\\"name\\\": \\\"appgallery_privacy_link_user_agreements\\\",\\n        \\\"value\\\": \\\"link_user_agreements.json\\\" // 配置json文件名称，示例配置见下文\\n      }\\n    ],\\n    // 其他内容\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "未上架应用接入隐私管理服务",
        "parent_text": "  未上架应用接入隐私管理服务 针对未上架应用市场的应用，可以通过手动预置隐私链接信息模拟接入隐私托管和隐私管理服务。 预置隐私链接信息完成后，打开应用会弹出统一隐私弹框，应用可以使用隐私管理服务提供的隐私链接查询、隐私签署状态查询和停止隐私协议等相关功能。  将应用工程构建模式修改为debug模式。 打开代码工程中type为entry类型的模块，修改其中的src/main/module.json5文件，添加module.metadata信息，其中包含三个字段，值均为字符串类型：     字段名称 字段解释 是否必填    appgallery_privacy_hosted 是否启用隐私弹框，1表示启用，其他值均表示不启用 是   appgallery_privacy_link_privacy_statement 隐私协议url（https），在隐私弹框中作为隐私协议的内容 是   appgallery_privacy_link_user_agreement 用户协议url（https），在隐私弹框中作为用户协议的内容 否   appgallery_privacy_link_user_agreements 多个用户协议url（https），在隐私弹框中作为多个用户协议的内容。 该值直接引用一个json文件，json文件存放在module的type为entry模块的resources/rawfile文件夹下。 有多个用户协议链接时，优先取appgallery_privacy_link_user_agreements字段，appgallery_privacy_link_user_agreement配置的单个用户协议链接无效。   说明：   起始版本：5.0.2(14)。   否      在华为应用市场可以正常使用、并且网络连通的情况下，使用hdc命令从本地文件安装应用，即可使用预置的隐私链接信息测试隐私弹框、调试隐私管理服务接口。 示例配置：  link_user_agreements.json示例配置： {\\n    \\\"user_agreement_Infos\\\": [\\n        {\\n            \\\"name\\\": \\\"用户协议1\\\",       // 需要展示的用户协议名字1\\n            \\\"url\\\": \\\"https://xxxx\\\"     // 用户协议链接地址\\n        },\\n        {\\n            \\\"name\\\": \\\"用户协议2\\\",       // 需要展示的用户协议名字2\\n            \\\"url\\\": \\\"https://xxxx\\\"     // 用户协议链接地址\\n        }\\n    ]\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section133476117117\\\"'> <a name='\\\"section133476117117\\\"'></a><a name='\\\"section133476117117\\\"'></a> <h4>未上架应用接入隐私管理服务</h4> <p>针对未上架应用市场的应用，可以通过手动预置隐私链接信息模拟接入隐私托管和隐私管理服务。</p> <p>预置隐私链接信息完成后，打开应用会弹出统一隐私弹框，应用可以使用隐私管理服务提供的隐私链接查询、隐私签署状态查询和停止隐私协议等相关功能。</p> <ol> <li><span>将应用工程构建模式修改为<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-compilation-options-customizing-sample#section390311716277\\\"' target='\\\"_blank\\\"'>debug模式</a>。</span></li> <li><span>打开代码工程中type为entry类型的模块，修改其中的src/main/module.json5文件，添加module.metadata信息，其中包含三个字段，值均为字符串类型：</span><p></p> <div class='\\\"tablenoborder\\\"'> <table> <thead> <tr> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.22.4.2.2.1.1.4.1.1\\\"' valign='\\\"top\\\"' width='\\\"39.13%\\\"'><p>字段名称</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.22.4.2.2.1.1.4.1.2\\\"' valign='\\\"top\\\"' width='\\\"52.57000000000001%\\\"'><p>字段解释</p></th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.22.4.2.2.1.1.4.1.3\\\"' valign='\\\"top\\\"' width='\\\"8.300000000000002%\\\"'><p>是否必填</p></th> </tr> </thead> <tbody><tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"39.13%\\\"'><p>appgallery_privacy_hosted</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"52.57000000000001%\\\"'><p>是否启用隐私弹框，1表示启用，其他值均表示不启用</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"8.300000000000002%\\\"'><p>是</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"39.13%\\\"'><p>appgallery_privacy_link_privacy_statement</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"52.57000000000001%\\\"'><p>隐私协议url（https），在隐私弹框中作为隐私协议的内容</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"8.300000000000002%\\\"'><p>是</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"39.13%\\\"'><p>appgallery_privacy_link_user_agreement</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"52.57000000000001%\\\"'><p>用户协议url（https），在隐私弹框中作为用户协议的内容</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"8.300000000000002%\\\"'><p>否</p></td> </tr> <tr> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"39.13%\\\"'><p>appgallery_privacy_link_user_agreements</p></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"52.57000000000001%\\\"'><p>多个用户协议url（https），在隐私弹框中作为多个用户协议的内容。</p> <p>该值直接引用一个json文件，json文件存放在module的type为entry模块的resources/rawfile文件夹下。</p> <p>有多个用户协议链接时，优先取appgallery_privacy_link_user_agreements字段，appgallery_privacy_link_user_agreement配置的单个用户协议链接无效。</p> <div class='\\\"note\\\"'> <span class='\\\"notetitle\\\"'> 说明： </span> <div class='\\\"notebody\\\"'> <p><strong>起始版本</strong>：5.0.2(14)。</p> </div> </div></td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"8.300000000000002%\\\"'><p>否</p></td> </tr> </tbody></table> </div> <p></p></li> </ol> <p>在华为应用市场可以正常使用、并且网络连通的情况下，使用<strong>hdc</strong>命令从本地文件安装应用，即可使用预置的隐私链接信息测试隐私弹框、调试隐私管理服务接口。</p> <p>示例配置：</p>  <p>link_user_agreements.json示例配置：</p> <pre class='\\\"typescript\\\"'>{\\n    \\\"user_agreement_Infos\\\": [\\n        {\\n            \\\"name\\\": \\\"用户协议1\\\",       // 需要展示的用户协议名字1\\n            \\\"url\\\": \\\"https://xxxx\\\"     // 用户协议链接地址\\n        },\\n        {\\n            \\\"name\\\": \\\"用户协议2\\\",       // 需要展示的用户协议名字2\\n            \\\"url\\\": \\\"https://xxxx\\\"     // 用户协议链接地址\\n        }\\n    ]\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-privacy.html"
    },
    {
        "id": 1159,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/explicit-module-boundary-types\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-module-boundary-types.html"
    },
    {
        "id": 1160,
        "pre": "// A function with no return value (void)\\nexport function test1(): void {\\n  return;\\n}\\n\\n// A return value of type string\\nexport const arrowFn1 = (): string => 'test';\\n\\n// All arguments should be typed\\nexport const arrowFn2 = (arg: string): string => `test ${arg}`;\\n\\nexport class Test {\\n  // A class method with no return value (void)\\n  public method(): void {\\n    return;\\n  }\\n}\\n\\n// The function does not apply because it is not an exported function.\\nfunction test2() {\\n  return;\\n}\\n\\ntest2();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-module-boundary-types.html"
    },
    {
        "id": 1161,
        "pre": "// Should indicate that no value is returned (void)\\nexport function test() {\\n  return;\\n}\\n\\n// Should indicate that a string is returned\\nexport const arrowFn = () => 'test';\\n\\n// All arguments should be typed\\nexport const arrowFn = (arg): string => `test ${arg}`;\\nexport const arrowFn = (arg: any): string => `test ${arg}`;\\n\\nexport class Test {\\n  // Should indicate that no value is returned (void)\\n  public method() {\\n    return;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-module-boundary-types.html"
    },
    {
        "id": 1162,
        "pre": "import { fileIo as fs } from '@kit.CoreFileKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-setting-background.html"
    },
    {
        "id": 1163,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nlet storageBucket: cloudStorage.StorageBucket = cloudStorage.bucket();\\n\\n@Component\\nexport struct testPage {\\n  build() {\\n  }\\n\\n  // 设置元数据\\n  setMetaData() {\\n    // 设置云存储默认实例中screenshot/screenshot_20250115_155321.jpg文件的元数据信息\\n    storageBucket.setMetadata('screenshot/screenshot_20250115_155321.jpg', {\\n      customMetadata: {\\n        key1: \\\"value1\\\",\\n        key2: \\\"value2\\\"\\n      }\\n    }).then((metadata: cloudStorage.Metadata) => {\\n      hilog.info(0x0000, 'testTag', `Succeeded in setting metadata: ${JSON.stringify(metadata)}`);\\n    }).catch((err: BusinessError) => {\\n      hilog.error(0x0000, 'testTag', `Failed to set metadata, code: ${err.code}, message: ${err.message}`);\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作步骤",
        "parent_text": "  操作步骤 调用StorageBucket.setMetadata可以设置云侧文档的元数据信息。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section6896333173313\\\"'> <a name='\\\"section6896333173313\\\"'></a><a name='\\\"section6896333173313\\\"'></a> <h4>操作步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section1924314716387\\\"' target='\\\"_blank\\\"'>StorageBucket.setMetadata</a>可以设置云侧文档的元数据信息。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-setmetadata.html"
    },
    {
        "id": 1164,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/sidebar-navigation\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_sidebar-navigation.html"
    },
    {
        "id": 1165,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Tabs() {\\n      TabContent() {\\n      }.tabBar(\\\"tab1\\\")\\n\\n      TabContent() {\\n      }.tabBar(\\\"tab2\\\")\\n    }.vertical(true)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_sidebar-navigation.html"
    },
    {
        "id": 1166,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Tabs() {\\n      TabContent() {\\n      }.tabBar(\\\"tab1\\\")\\n\\n      TabContent() {\\n      }.tabBar(\\\"tab2\\\")\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_sidebar-navigation.html"
    },
    {
        "id": 1167,
        "pre": "import { Want, ShareExtensionAbility, UIExtensionContentSession } from '@kit.AbilityKit';\\nimport { systemShare } from '@kit.ShareKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相关模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-sec-panel.html"
    },
    {
        "id": 1168,
        "pre": "import { imageFeaturePicker } from '@kit.Penkit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 1.导入相关模块。  2.构造全局取色能力。 @Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n\\n  build() {\\n    Stack({ alignContent: Alignment.Center }) {\\n      Column() {\\n        Row() {\\n          Button() {\\n            Text('Call GlobalColorPicker from ets side')\\n              .fontSize(18)\\n              .fontWeight(FontWeight.Normal)\\n          }\\n          .width('50%')\\n          .height('60vp')\\n          .align(Alignment.Center)\\n          .onClick((event) => {\\n            imageFeaturePicker.pickForResult(event.displayX, event.displayY)\\n              .then((colorInfo: imageFeaturePicker.PickedColorInfo) => {\\n                if (colorInfo) {\\n                  console.info('colorInfo=' + JSON.stringify(colorInfo));\\n                }\\n              }).catch((err: BusinessError) => {\\n              console.error(`pickForResult failed. Code is ${err.code}, message is ${err.message}`)\\n            })\\n          })\\n        }\\n      }\\n      .align(Alignment.Center)\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section676215215353\\\"'> <a name='\\\"section676215215353\\\"'></a><a name='\\\"section676215215353\\\"'></a> <h4>开发步骤</h4> <p>1.导入相关模块。</p>  <p>2.构造全局取色能力。</p> <pre class='\\\"screen\\\"'><span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@Entry</span>\\n<span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@Component</span>\\nstruct <span rgb(80,120,116);\\\"=\"\" style='\\\"color:'>Index </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(187,181,41);\\\"=\"\" style='\\\"color:'>@State </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>message</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>string </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>= </span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'Hello World'</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n\\n  <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>build</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Stack</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>alignContent</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Alignment</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Center </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Column</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n        <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Row</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n          <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Button</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>() </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n            <span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>Text</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'Call GlobalColorPicker from ets side'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n              <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>fontSize</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(179,229,76);\\\"=\"\" style='\\\"color:'>18</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n              <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>fontWeight</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>FontWeight</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Normal</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n          <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n          <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'50%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n          <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'60vp'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n          <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>align</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Alignment</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Center</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n          <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>onClick</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>((</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n            <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>imageFeaturePicker</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>pickForResult</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>displayX</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>, </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>event</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>displayY</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n              <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>then</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>((</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>colorInfo</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>imageFeaturePicker</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>PickedColorInfo</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n                if <span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>colorInfo</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n                  <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>console</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>info</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'colorInfo=' </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>+ </span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>JSON</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>stringify</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>colorInfo</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>))</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>;</span>\\n                <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>              }</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>catch</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>((</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>err</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>: </span><span rgb(204,120,50);\\\"=\"\" style='\\\"color:'>BusinessError</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>) </span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>=</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>{</span>\\n              <span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>console</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>error</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>`pickForResult failed. Code is </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>${</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>err</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>code</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>, message is </span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>${</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>err</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>message</span><span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>`</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n          <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>      }</span>\\n      <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>align</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Alignment</span><span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(255,255,255);\\\"=\"\" style='\\\"color:'>Center</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n    <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n    <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>width</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n    <span rgb(226,218,144);\\\"=\"\" style='\\\"color:'>.</span><span rgb(101,204,225);\\\"=\"\" style='\\\"color:'>height</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>(</span><span rgb(170,125,252);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(219,126,155);\\\"=\"\" style='\\\"color:'>)</span>\\n  <span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(250,162,61);\\\"=\"\" style='\\\"color:'>}</span></pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pen-image-feature-picker.html"
    },
    {
        "id": 1169,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@previewer/no-unallowed-decorator-on-root-component\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unallowed-decorator-on-root-component.html"
    },
    {
        "id": 1170,
        "pre": "@Entry\\n@Component\\nstruct LinkSampleContainer {\\n  @State message: string = 'Hello World';\\n  build() {\\n    Row() {\\n      LinkSample({message: this.message})\\n    }\\n  }\\n}\\n@Component\\nstruct LinkSample {\\n  @Link message: string;\\n  build() {\\n    Row() {\\n      Text(this.message)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unallowed-decorator-on-root-component.html"
    },
    {
        "id": 1171,
        "pre": "@Preview\\n@Component\\nstruct LinkSample {\\n  @Link message: string;\\n  build() {\\n    Row() {\\n      Text(this.message)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unallowed-decorator-on-root-component.html"
    },
    {
        "id": 1172,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit';\\nimport { paymentService } from '@kit.PaymentKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  requestPaymentPromise() {\\n    // used orderStr to pay for an order, use your own orderStr.\\n    const orderStr = '{\\\"app_id\\\":\\\"***\\\",\\\"merc_no\\\":\\\"***\\\",\\\"prepay_id\\\":\\\"xxx\\\",\\\"timestamp\\\":\\\"1680259863114\\\",\\\"noncestr\\\":\\\"1487b8a60ed9f9ecc0ba759fbec23f4f\\\",\\\"sign\\\":\\\"****\\\",\\\"auth_id\\\":\\\"***\\\"}';\\n    paymentService.requestPayment(this.context, orderStr, \\\"AP\\\")\\n      .then((payResult: paymentService.PayResult) => {\\n        // succeeded in paying\\n        console.info('succeeded in paying, pay result: ', payResult);\\n      })\\n      .catch((error: BusinessError) => {\\n        // failed to pay\\n        console.error(`failed to pay, error.code: ${error.code}, error.message: ${error.message}`);\\n      });\\n  }\\n\\n  build() {\\n    Column() {\\n      Button('requestPaymentPromise')\\n        .type(ButtonType.Capsule)\\n        .width('50%')\\n        .margin(20)\\n        .onClick(() => {\\n          this.requestPaymentPromise();\\n        })\\n      }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": "catch()",
        "function_name": null,
        "parent_text": "      当接口通过.then()方法返回时，则表示当前接口请求响应正常，通过.catch()方法返回表示接口请求响应异常。当此次请求有异常时，可通过error.code获取错误码，错误码相关信息请参见错误码。示例代码如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      当接口通过.then()方法返回时，则表示当前接口请求响应正常，通过.catch()方法返回表示接口请求响应异常。当此次请求有异常时，可通过<strong>error.code</strong>获取错误码，错误码相关信息请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/payment-error-code\\\"' target='\\\"_blank\\\"'>错误码</a>。示例代码如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-common-pay-mix.html"
    },
    {
        "id": 1173,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit';\\nimport { paymentService } from '@kit.PaymentKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  requestPaymentPromise() {\\n    // used orderStr to jump third-party payment, use your own orderStr.\\n    const orderStr = '{\\\"nextAction\\\":\\\"L\\\",\\\"linkUrl\\\":\\\"https://www.***.pay.com/h5pay?prepay_id=***&sign=***\\\",\\\"scheme\\\":\\\"\\\",\\\"clientToken\\\":\\\"***\\\"}';\\n    paymentService.requestPayment(this.context, orderStr, \\\"AP\\\")\\n      .then((payResult: paymentService.PayResult) => {\\n        // succeeded in paying\\n        console.info('succeeded in paying, pay result: ', payResult);\\n      })\\n      .catch((error: BusinessError) => {\\n        // failed to pay\\n        console.error(`failed to pay, error.code: ${error.code}, error.message: ${error.message}`);\\n      });\\n  }\\n\\n  build() {\\n    Column() {\\n      Button('requestPaymentPromise')\\n        .type(ButtonType.Capsule)\\n        .width('50%')\\n        .margin(20)\\n        .onClick(() => {\\n          this.requestPaymentPromise();\\n        })\\n      }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        跳转三方支付收银台示例代码如下：         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>        跳转三方支付收银台示例代码如下：         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-common-pay-mix.html"
    },
    {
        "id": 1174,
        "pre": "import { statusBarManager, StatusBarViewExtensionAbility } from '@kit.StatusBarExtensionKit';\\nimport { UIExtensionContentSession, Want } from '@kit.AbilityKit';\\nimport { image } from '@kit.ImageKit';\\nimport resourceManager from '@ohos.resourceManager';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/statusbar-extension-guide.html"
    },
    {
        "id": 1175,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-empty-function\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-empty-function.html"
    },
    {
        "id": 1176,
        "pre": "/*eslint no-empty-function: \\\"error\\\"*/\\nfunction foo() {\\n  // do nothing.\\n}\\n\\nconst baz = () => {\\n  foo();\\n};\\n\\nexport class Bar {\\n  public meth1() {\\n    // do something\\n  }\\n\\n  public meth2() {\\n    baz();\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例该规则旨在消除空函数。如果函数包含注释，则不会将其视为问题。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4><p id='\\\"ZH-CN_TOPIC_0000002202174833__p196431532585\\\"'>该规则旨在消除空函数。如果函数包含注释，则不会将其视为问题。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-empty-function.html"
    },
    {
        "id": 1177,
        "pre": "/*eslint no-empty-function: \\\"error\\\"*/\\nfunction foo() {\\n\\n}\\n\\nconst baz = () => {\\n\\n};\\n\\nexport class Bar {\\n  public meth1() {\\n\\n  }\\n\\n  public meth2() {\\n\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-empty-function.html"
    },
    {
        "id": 1178,
        "pre": "{\\n  \\\"module\\\": {\\n    \\\"abilities\\\": [\\n      {\\n        \\\"name\\\": \\\"EntryAbility\\\",\\n        \\\"srcEntry\\\": \\\"./ets/entryability/EntryAbility.ts\\\",\\n        \\\"icon\\\": \\\"$media:icon\\\",\\n        \\\"label\\\": \\\"$string:EntryAbility_label\\\",\\n        // 请将exported配置为true；如果exported为false，仅具有权限的系统应用能够拉起该应用，否则无法拉起应用\\n        \\\"exported\\\": true,\\n        \\\"startWindowIcon\\\": \\\"$media:icon\\\",\\n        \\\"startWindowBackground\\\": \\\"$color:start_window_background\\\",\\n        \\\"skills\\\": [\\n          {\\n            \\\"entities\\\": [\\n              \\\"entity.system.home\\\"\\n            ],\\n            \\\"actions\\\": [\\n              \\\"action.system.home\\\"\\n            ]\\n          },\\n          {\\n            \\\"entities\\\": [\\n              // entities必须包含\\\"entity.system.browsable\\\"\\n              \\\"entity.system.browsable\\\"\\n            ],\\n            \\\"actions\\\": [\\n              // actions必须包含\\\"ohos.want.action.viewData\\\"\\n              \\\"ohos.want.action.viewData\\\"\\n            ],\\n            \\\"uris\\\": [\\n              {\\n                // scheme须配置为https\\n                \\\"scheme\\\": \\\"https\\\",\\n                // host须配置为关联的域名\\n                \\\"host\\\": \\\"www.example.com\\\",\\n                // path可选，表示域名服务器上的目录或文件路径，例如www.example.com/path1/中的path1\\n                // 如果应用只能处理部分特定的path，则此处应该配置应用所支持的path，避免出现应用不能处理的path链接也被引流到应用中的问题\\n                \\\"path\\\": \\\"path1\\\"\\n              }\\n            ],\\n            // domainVerify须设置为true\\n           \\\"domainVerify\\\": true\\n          }\\n          // 若有其他跳转能力，如推送消息跳转、NFC跳转，可新增一个skill对象，防止与App Linking业务冲突\\n        ]\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "在DevEco Studio中配置关联的网址域名",
        "parent_text": "在DevEco Studio中配置关联的网址域名在应用的module.json5文件中进行如下配置，以声明应用关联的域名地址，并开启域名校验开关。 \\\"entities\\\"列表中必须包含\\\"entity.system.browsable\\\"。\\\"actions\\\"列表中必须包含\\\"ohos.want.action.viewData\\\"。\\\"uris\\\"列表中必须包含\\\"scheme\\\"为\\\"https\\\"且\\\"host\\\"为域名地址的元素，可选属性包含\\\"path\\\"、\\\"pathStartWith\\\"和\\\"pathRegex\\\"，具体请参见“uris标签说明”。\\\"domainVerify\\\"设置为true，表示开启域名校验开关。  skills标签下默认包含一个skill对象，用于标识应用入口。应用跳转链接不能在该skill对象中配置，需要创建独立的skill对象。 如果存在多个跳转场景，需要在skills标签下创建不同的skill对象，否则会导致配置无法生效。  例如，声明应用关联的域名是www.example.com，则需进行如下配置。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1896423345714\\\"'><a name='\\\"section1896423345714\\\"'></a><a name='\\\"section1896423345714\\\"'></a><h4>在DevEco Studio中配置关联的网址域名</h4><p>在应用的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file\\\"' target='\\\"_blank\\\"'>module.json5文件</a>中进行如下配置，以声明应用关联的域名地址，并开启域名校验开关。</p> <ul><li>\\\"entities\\\"列表中必须包含\\\"entity.system.browsable\\\"。</li><li>\\\"actions\\\"列表中必须包含\\\"ohos.want.action.viewData\\\"。</li><li>\\\"uris\\\"列表中必须包含\\\"scheme\\\"为\\\"https\\\"且\\\"host\\\"为域名地址的元素，可选属性包含\\\"path\\\"、\\\"pathStartWith\\\"和\\\"pathRegex\\\"，具体请参见“<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-uri-config#uris标签说明\\\"' target='\\\"_blank\\\"'>uris标签说明</a>”。</li><li>\\\"domainVerify\\\"设置为true，表示开启域名校验开关。</li></ul> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120051.13452653323146725559479419105928:50001231000000:2800:1318C85B351D6CB29ACF1513B3DF3DD2B7A94B44349B5F60600B1C4ADC89164B.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>skills标签下默认包含一个skill对象，用于标识应用入口。应用跳转链接不能在该skill对象中配置，需要创建独立的skill对象。</p> <p>如果存在多个跳转场景，需要在skills标签下创建不同的skill对象，否则会导致配置无法生效。</p> </div></div> <p>例如，声明应用关联的域名是www.example.com，则需进行如下配置。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/applinking-set-domain.html"
    },
    {
        "id": 1179,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/space-infix-ops\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-space-infix-ops-stylistic.html"
    },
    {
        "id": 1180,
        "pre": "export function test(size: number) {\\n  for (let i = 0; i < size; i++) {\\n    console.info(`${i}`);\\n  }\\n}\\n\\nexport function test1(a: boolean, b: boolean, c: boolean) {\\n  return a || (b && c)\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-space-infix-ops-stylistic.html"
    },
    {
        "id": 1181,
        "pre": "export function test(size: number) {\\n  // Operator '=' must be spaced.\\n  // Operator '<' must be spaced.\\n  for (let i=0; i<size; i++) {\\n    console.info(`${i}`);\\n  }\\n}\\n\\nexport function test1(a: boolean, b: boolean, c: boolean) {\\n  // Operator '||' must be spaced.\\n  // Operator '&&' must be spaced.\\n  return a||b&&c;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-space-infix-ops-stylistic.html"
    },
    {
        "id": 1182,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n// 1、创建session、requestURL \\nconst session = rcp.createSession();\\nconst requestURL = \\\"https://www.example.com\\\";\\n\\n// 2、在需要跟踪分析请求过程中各个时间段消耗的时间，请将此开关打开\\nconst configuration: rcp.Configuration = {\\n  tracing: {\\n    collectTimeInfo: true\\n  }\\n}\\n\\n// 3、创建请求\\nconst request = new rcp.Request(requestURL, \\\"GET\\\");\\nrequest.configuration = configuration;\\n\\n// 4、使用fetch发起网络请求，request中携带上面配置好的configuration\\nsession.fetch(request).then((response: rcp.Response) => {\\n// 由于timeInfo中各个参数有可能为undefined，所以需要在两个时间段做运算前添加判空操作\\n  if (!response.timeInfo) {\\n    console.error(`timeInfo is undefined ${response.timeInfo}`);\\n    return;\\n  }\\n  let remainderDataTime = response.timeInfo?.totalTimeMs - response.timeInfo?.startTransferTimeMs;\\n  let firstPackageTime = response.timeInfo?.startTransferTimeMs - response.timeInfo?.preTransferTimeMs;\\n  let TLSTime = response.timeInfo?.tlsHandshakeTimeMs - response.timeInfo?.connectTimeMs;\\n  \\n  console.info(`首包耗时${firstPackageTime}`);\\n  console.info(`TLS握手（不包含建连时间）耗时${TLSTime}`);\\n  console.info(`接收剩余数据的耗时${remainderDataTime}`);\\n}).catch((err: BusinessError) => {\\n  console.error(`Response err, the err is ${JSON.stringify(err)}`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]示例代码",
        "parent_text": "  [h2]示例代码 这段代码在使用过程中会将上述说明中三个比较关键的时间点打印出来，开发者可以根据获取到的时间对应用性能实现动态调整，获取最佳体验。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section13770933164618\\\"'> <a name='\\\"section13770933164618\\\"'></a><a name='\\\"section13770933164618\\\"'></a> <h4>[h2]示例代码</h4> <p>这段代码在使用过程中会将上述说明中三个比较关键的时间点打印出来，开发者可以根据获取到的时间对应用性能实现动态调整，获取最佳体验。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-tpms.html"
    },
    {
        "id": 1183,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-type-alias\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-type-alias.html"
    },
    {
        "id": 1184,
        "pre": "interface Person {\\n  readonly firstName: string;\\n  readonly lastName: string;\\n  readonly age: number;\\n}\\n\\nexport function addPerson(person: Person): Person {\\n  return person;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-type-alias.html"
    },
    {
        "id": 1185,
        "pre": "// 不允许使用类型别名，建议使用接口替代\\ntype Person = {\\n  readonly firstName: string;\\n  readonly lastName: string;\\n  readonly age: number;\\n};\\n\\nexport function addPerson(person: Person): Person {\\n  return person;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-type-alias.html"
    },
    {
        "id": 1186,
        "pre": "{\\n  \\\"app\\\": {\\n    \\\"products\\\": [\\n      {\\n        \\\"name\\\": \\\"default\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n        \\\"buildOption\\\": {\\n          \\\"arkOptions\\\": {\\n            // 工程级自定义参数\\n            \\\"buildProfileFields\\\": {\\n              \\\"productMessage\\\": 'defaultMessage'\\n            }\\n          }\\n        }\\n      },\\n      {\\n        \\\"name\\\": \\\"mirror\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n        \\\"buildOption\\\": {\\n          \\\"arkOptions\\\": {\\n            // 工程级自定义参数\\n            \\\"buildProfileFields\\\": {\\n              \\\"productMessage\\\": 'mirrorMessage'\\n            }\\n          }\\n        }\\n      },\\n      {\\n        \\\"name\\\": \\\"product\\\",\\n        \\\"signingConfig\\\": \\\"default\\\",\\n        \\\"compatibleSdkVersion\\\": \\\"5.0.3(15)\\\",\\n        \\\"runtimeOS\\\": \\\"HarmonyOS\\\",\\n        \\\"buildOption\\\": {\\n          \\\"arkOptions\\\": {\\n            // 工程级自定义参数\\n            \\\"buildProfileFields\\\": {\\n              \\\"productMessage\\\": 'productMessage'\\n            }\\n          }\\n        }\\n      }\\n    ],\\n    \\\"buildModeSet\\\": [\\n      {\\n        \\\"name\\\": \\\"debug\\\",\\n      },\\n      {\\n        \\\"name\\\": \\\"release\\\"\\n      }\\n    ]\\n  },\\n  \\\"modules\\\": [\\n    {\\n      \\\"name\\\": \\\"entry\\\",\\n      \\\"srcPath\\\": \\\"./entry\\\",\\n      \\\"targets\\\": [\\n        {\\n          \\\"name\\\": \\\"default\\\",\\n          \\\"applyToProducts\\\": [\\n            \\\"default\\\",\\n            \\\"product\\\",\\n            \\\"mirror\\\"\\n          ]\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"har\\\",\\n      \\\"srcPath\\\": \\\"./har\\\"\\n    }\\n  ]\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "新建工程并创建一个har模块",
        "parent_text": "新建工程并创建一个har模块在工程级别的build-profile.json5使用以下配置，目的是为了实现在所有模块中都可以使用到productMessage自定义参数。 通过切换不同的product从而使用到对应的productMessage值。  在har模块的build-profile.json5使用以下配置。{\\n  \\\"apiType\\\": \\\"stageMode\\\",\\n  \\\"buildOption\\\": {\\n    \\\"arkOptions\\\": {\\n      // har模块的自定义参数\\n      \\\"buildProfileFields\\\": {\\n        \\\"targetMessage1\\\": 'this is target buildProfileValue1',\\n        \\\"targetMessage2\\\": 'this is target buildProfileValue2'\\n      }\\n    }\\n  },\\n  \\\"buildOptionSet\\\": [\\n    {\\n      \\\"name\\\": \\\"release\\\",\\n      \\\"arkOptions\\\": {\\n        \\\"obfuscation\\\": {\\n          \\\"ruleOptions\\\": {\\n            \\\"enable\\\": true,\\n            \\\"files\\\": [\\n              \\\"./obfuscation-rules.txt\\\"\\n            ]\\n          },\\n          \\\"consumerFiles\\\": [\\n            \\\"./consumer-rules.txt\\\"\\n          ]\\n        }\\n      },\\n    },\\n  ],\\n  \\\"targets\\\": [\\n    {\\n      \\\"name\\\": \\\"default\\\"\\n    }\\n  ]\\n}  在har模块的MainPage.ets中添加以下代码。 import BuildProfile from \\\"../../../../BuildProfile\\\"\\n\\n@Preview\\n@Component\\nexport struct MainPage {\\n  // 默认赋值为工程级别BuildProfile自定义参数配置的productMessage\\n  @State message: string = BuildProfile.productMessage\\n  build() {\\n    Row() {\\n      Column() {\\n        Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceAround }) {\\n          Button(\\\"Button 1\\\").width(\\\"40%\\\")\\n            .onClick(() => {\\n              // 点击展示自定义字段harMessage1\\n              this.message = BuildProfile.targetMessage1;\\n            })\\n          Button(\\\"Button 2\\\").width(\\\"40%\\\")\\n            .onClick(() => {\\n              // 点击展示自定义字段harMessage2\\n              this.message = BuildProfile.targetMessage2;\\n            })\\n        }.margin(20)\\n        .width(315)\\n        Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) {\\n          Text(this.message)\\n            .textAlign(TextAlign.Start)\\n            .fontSize(12)\\n            .border({ width: 1 })\\n            .padding(10)\\n            .width('100%')\\n        }.height(600).width(350).padding({ left: 35, right: 35})\\n      }\\n    }\\n  }\\n} 在hap的oh-package.json5中引用本地的har模块。 {\\n  \\\"name\\\": \\\"entry\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"Please describe the basic information.\\\",\\n  \\\"main\\\": \\\"\\\",\\n  \\\"author\\\": \\\"\\\",\\n  \\\"license\\\": \\\"\\\",\\n  \\\"dependencies\\\": {\\n    \\\"har\\\": \\\"file:../har\\\"\\n  }\\n} 在hap的Index.ets文件中用引用该har包并且使用MainPage方法。 import { MainPage } from \\\"har\\\"\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Row() {\\n      MainPage()\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section187701744194317\\\"'><a name='\\\"section187701744194317\\\"'></a><a name='\\\"section187701744194317\\\"'></a><h4>新建工程并创建一个har模块</h4><p id='\\\"ZH-CN_TOPIC_0000002166648388__p16479152468\\\"'>在工程级别的build-profile.json5使用以下配置，目的是为了实现在所有模块中都可以使用到productMessage自定义参数。</p> <p id='\\\"ZH-CN_TOPIC_0000002166648388__p715912363482\\\"'>通过切换不同的product从而使用到对应的productMessage值。</p>  <div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002166648388__p443281419496\\\"'>在har模块的build-profile.json5使用以下配置。<pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648388__screen1291523704911\\\"'>{\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"apiType\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"stageMode\\\"</span>,\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"buildOption\\\"</span>: {\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"arkOptions\\\"</span>: {\\n      // har模块的自定义参数\\n      <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"buildProfileFields\\\"</span>: {\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"targetMessage1\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>'this is target buildProfileValue1'</span>,\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"targetMessage2\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>'this is target buildProfileValue2'</span>\\n      }\\n    }\\n  },\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"buildOptionSet\\\"</span>: [\\n    {\\n      <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"name\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"release\\\"</span>,\\n      <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"arkOptions\\\"</span>: {\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"obfuscation\\\"</span>: {\\n          <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"ruleOptions\\\"</span>: {\\n            <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"enable\\\"</span>: <span rgb(0,51,179);\\\"=\"\" style='\\\"color:'>true</span>,\\n            <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"files\\\"</span>: [\\n              <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"./obfuscation-rules.txt\\\"</span>\\n            ]\\n          },\\n          <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"consumerFiles\\\"</span>: [\\n            <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"./consumer-rules.txt\\\"</span>\\n          ]\\n        }\\n      },\\n    },\\n  ],\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"targets\\\"</span>: [\\n    {\\n      <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"name\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"default\\\"</span>\\n    }\\n  ]\\n}</pre> </div> <p id='\\\"ZH-CN_TOPIC_0000002166648388__p19133125616441\\\"'>在har模块的MainPage.ets中添加以下代码。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648388__screen1080744714518\\\"'>import <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>BuildProfile </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"../../../../BuildProfile\\\"</span>\\n\\n<span rgb(128,128,0);\\\"=\"\" style='\\\"color:'>@Preview</span>\\n<span rgb(128,128,0);\\\"=\"\" style='\\\"color:'>@Component</span>\\nexport struct <span rgb(80,120,116);\\\"=\"\" style='\\\"color:'>MainPage </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>默认赋值为工程级别</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>BuildProfile</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>自定义参数配置的</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>productMessage</span>\\n  <span rgb(128,128,0);\\\"=\"\" style='\\\"color:'>@State </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>message</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(0,0,128);\\\"=\"\" style='\\\"color:'>string </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>= </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>BuildProfile</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>productMessage</span>\\n  <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>build</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>() </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Row</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>() </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Column</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>() </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n        <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Flex</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>direction</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>FlexDirection</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>Row</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>alignItems</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>ItemAlign</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>Start</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>justifyContent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>FlexAlign</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>SpaceAround </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>) </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n          <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Button</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"Button 1\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>width</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"40%\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>onClick</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(() </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>=</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n              <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>点击展示自定义字段</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>harMessage1</span>\\n              this<span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>message </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>= </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>BuildProfile</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>targetMessage1</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n            <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n          <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Button</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"Button 2\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>width</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"40%\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>onClick</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(() </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>=</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n              <span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>点击展示自定义字段</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>harMessage2</span>\\n              this<span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>message </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>= </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>BuildProfile</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>targetMessage2</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n            <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>margin</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>20</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>width</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>315</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Flex</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>direction</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>FlexDirection</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>Column</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>alignItems</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>ItemAlign</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>Start</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>justifyContent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>FlexAlign</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>SpaceBetween </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>) </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n          <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Text</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span>this<span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>message</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>textAlign</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>TextAlign</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>Start</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>fontSize</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>12</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>border</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>width</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1 </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>padding</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>10</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n            <span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>width</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'100%'</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n        <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>height</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>600</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>width</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>350</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>padding</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>(</span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>left</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>35</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>right</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>35</span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>)</span>\\n      <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>    }</span>\\n<span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>  }</span>\\n<span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span></pre> <p id='\\\"ZH-CN_TOPIC_0000002166648388__p86234151703\\\"'>在hap的oh-package.json5中引用本地的har模块。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648388__screen193513381705\\\"'>{\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"name\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"entry\\\"</span>,\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"version\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"1.0.0\\\"</span>,\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"description\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"Please describe the basic information.\\\"</span>,\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"main\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"\\\"</span>,\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"author\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"\\\"</span>,\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"license\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"\\\"</span>,\\n  <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"dependencies\\\"</span>: {\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"har\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"file:../har\\\"</span>\\n  }\\n}</pre> <p id='\\\"ZH-CN_TOPIC_0000002166648388__p07781346144514\\\"'>在hap的Index.ets文件中用引用该har包并且使用MainPage方法。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648388__screen20171144414532\\\"'>import <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>MainPage </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>} </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"har\\\"</span>\\n\\n<span rgb(128,128,0);\\\"=\"\" style='\\\"color:'>@Entry</span>\\n<span rgb(128,128,0);\\\"=\"\" style='\\\"color:'>@Component</span>\\nstruct <span rgb(80,120,116);\\\"=\"\" style='\\\"color:'>Index </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>build</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>() </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>Row</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>() </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>MainPage</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>()</span>\\n    <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>  }</span>\\n<span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span></pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-get-build-profile-para-sample.html"
    },
    {
        "id": 1187,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-loss-of-precision\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-loss-of-precision.html"
    },
    {
        "id": 1188,
        "pre": "// 插件文件的接口类定义如下\\nexport interface AuthPlugin {\\n  /**\\n   * 用户信息获取:根据读写accessToken的值，返回用户的数据:用户的id，用户的名字，用户所属的组织，用户所创建的组织\\n   * @param accessToken 用户的读写accessToken\\n   * @returns\\n   * id：用户的id，保证唯一性\\n   * name：用户的名字，保证唯一性\\n   * belongGroupList：用户所在的组织，具有发指定组织包的权限\\n   * groupAdminList： 用户所管理的组织，具有删除组织内包的权限\\n   */\\n  auth(accessToken: string): Promise<{\\n    id: string;\\n    name: string;\\n    belongGroupList: Array<string>;\\n    groupAdminList: Array<string>;\\n  }>;\\n\\n  /**\\n   * 用户信息获取:根据只读accessToken的值，返回用户的数据:用户的id，用户的名字，用户所属的组织，用户所创建的组织\\n   * @param accessToken 用户的只读accessToken\\n   * @returns\\n   * id：用户的id，保证唯一性\\n   * name：用户的名字，保证唯一性\\n   * belongGroupList：用户所在的组织，具有发指定组织包的权限\\n   * groupAdminList： 用户所管理的组织，具有删除组织内包的权限\\n   */\\n  authWithReadOnly(accessToken: string): Promise<{\\n    id: string;\\n    name: string;\\n    belongGroupList: Array<string>;\\n    groupAdminList: Array<string>;\\n  }>;\\n\\n  /**\\n   * 根据用户id,返回用户的名字\\n   * @param id 用户的id值\\n   */\\n  getUserInfo(id: string): Promise<string>;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "编辑CustomAuth.ts文件，实现认证插件接口AuthPlugin",
        "parent_text": "编辑CustomAuth.ts文件，实现认证插件接口AuthPlugin 打开 CustomAuth.ts 模板文件，需要编写代码实现接口类AuthPlugin，实现auth和getUserInfo两个基础方法，实现类 CustomAuth 的名字可自定义修改。  接口类AuthPlugin中包含如下三个方法，需要在实现类中完成功能的实现。  auth通过读写AccessToken获取对应用户信息，函数的入参为读写AccessToken值，返回值有四个参数：用户的id值，用户的name值，用户所属于的组织列表belongGroupList，用户所管理的组织列表groupAdminList。 authWithReadOnly(5.0.5版本新增)通过只读AccessToken获取对应用户信息，函数的入参为只读ccessToken值，返回值有四个参数：用户的id值，用户的name值，用户所属于的组织列表belongGroupList，用户所管理的组织列表groupAdminList。当ohpm-repo配置不支持匿名访问时，ohpm可以通过配置只读AccessToken值，获取执行install,info和update命令的权限。 getUserInfo实现根据用户id获取用户名字的功能。函数入参为用户的id值；返回值为用户的名字。   AccessToken分两种权限等级：只读AccessToken允许ohpm命令行执行info，install和update操作，只需要ohpm-repo读权限；读写AccessToken除了包含只读权限外，还支持执行publish，unpublish和dist-tags相关操作，需要ohpm-repo读写权限。如果ohpm-repo支持匿名访问，ohpm执行info，install和update等读操作命令，不需要配置AccessToken值；当ohpm-repo配置不支持匿名访问时，必须配置只读/读写AccessToken，才能获得执行info，install和update命令权限。在实现上述三个函数时，插件文件CustomAuth.ts需要引用AuthPlugin接口类，故需要根据当前插件文件CustomAuth.ts所在位置，正确地编写AuthPlugin接口类的引用地址，被引用接口类所在文件的地址如下：AuthPlugin接口类所在文件的位置：ohpm-repo解压根目录/libs/plugins/auth/AuthPlugin 如果插件文件CustomAuth.ts存储在默认位置（ohpm-repo解压根目录中plugins文件夹内），插件文件CustomAuth.ts中默认AuthPlugin接口类引用地址如下：import {AuthPlugin} from '../libs/plugins/auth/AuthPlugin';   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section32544215215\\\"'><a name='\\\"section32544215215\\\"'></a><a name='\\\"section32544215215\\\"'></a><h4>编辑CustomAuth.ts文件，实现认证插件接口AuthPlugin</h4><div class='\\\"caution\\\"' id='\\\"ZH-CN_TOPIC_0000002202175273__note2027913249617\\\"'><span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250303111850.37427129818658254250723366538069:50001231000000:2800:F6BA0ED50CEC558832E1EF0E8DE1FDB8EE6D0F8CBFBD3C5B67845AA1E3E4D43B.png?needInitFileName=true?needInitFileName=true\\\"'/> </span><div class='\\\"cautionbody\\\"'><p id='\\\"ZH-CN_TOPIC_0000002202175273__p18279152411620\\\"'>打开 CustomAuth.ts 模板文件，需要编写代码实现接口类AuthPlugin，实现auth和getUserInfo两个基础方法，实现类 CustomAuth 的名字可自定义修改。</p> </div></div> <p id='\\\"ZH-CN_TOPIC_0000002202175273__p164511561764\\\"'>接口类AuthPlugin中包含如下三个方法，需要在实现类中完成功能的实现。</p>  <ol id='\\\"ZH-CN_TOPIC_0000002202175273__ol24981152385\\\"'><li id='\\\"li34989521483\\\"'>auth<p id='\\\"ZH-CN_TOPIC_0000002202175273__p1549845210815\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202175273__li34989521483\\\"'></a><a name='\\\"li34989521483\\\"'></a>通过读写AccessToken获取对应用户信息，函数的入参为读写AccessToken值，返回值有四个参数：用户的id值，用户的name值，用户所属于的组织列表belongGroupList，用户所管理的组织列表groupAdminList。</p> </li><li id='\\\"li188635211177\\\"'>authWithReadOnly(5.0.5版本新增)<p id='\\\"ZH-CN_TOPIC_0000002202175273__p19263141810178\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202175273__li188635211177\\\"'></a><a name='\\\"li188635211177\\\"'></a>通过只读AccessToken获取对应用户信息，函数的入参为只读ccessToken值，返回值有四个参数：用户的id值，用户的name值，用户所属于的组织列表belongGroupList，用户所管理的组织列表groupAdminList。当ohpm-repo配置不支持匿名访问时，ohpm可以通过配置只读AccessToken值，获取执行install,info和update命令的权限。</p> </li><li id='\\\"li124981252786\\\"'>getUserInfo<p id='\\\"ZH-CN_TOPIC_0000002202175273__p149817523810\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202175273__li124981252786\\\"'></a><a name='\\\"li124981252786\\\"'></a>实现根据用户id获取用户名字的功能。函数入参为用户的id值；返回值为用户的名字。</p> </li></ol> <div class='\\\"caution\\\"' id='\\\"ZH-CN_TOPIC_0000002202175273__note054015281125\\\"'><span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250303111850.39202672348805540714110978959463:50001231000000:2800:8108B1389DF83E0A94325A7658981D32F5AC188CF831973900B7425BE042FD2A.png?needInitFileName=true?needInitFileName=true\\\"'/> </span><div class='\\\"cautionbody\\\"'><ol id='\\\"ZH-CN_TOPIC_0000002202175273__ol87694260416\\\"'><li id='\\\"li147471242182017\\\"'>AccessToken分两种权限等级：只读AccessToken允许ohpm命令行执行info，install和update操作，只需要ohpm-repo读权限；读写AccessToken除了包含只读权限外，还支持执行publish，unpublish和dist-tags相关操作，需要ohpm-repo读写权限。</li><li id='\\\"li1843414222118\\\"'>如果ohpm-repo支持匿名访问，ohpm执行info，install和update等读操作命令，不需要配置AccessToken值；当ohpm-repo配置不支持匿名访问时，必须配置只读/读写AccessToken，才能获得执行info，install和update命令权限。</li><li id='\\\"li5770162617413\\\"'>在实现上述三个函数时，插件文件CustomAuth.ts需要引用AuthPlugin接口类，故需要根据当前插件文件CustomAuth.ts所在位置，正确地编写AuthPlugin接口类的引用地址，被引用接口类所在文件的地址如下：<ul id='\\\"ZH-CN_TOPIC_0000002202175273__ul1991153331720\\\"'><li id='\\\"li1529619551177\\\"'>AuthPlugin接口类所在文件的位置：ohpm-repo解压根目录/libs/plugins/auth/AuthPlugin</li></ul> </li><li id='\\\"li56041302412\\\"'>如果插件文件CustomAuth.ts存储在默认位置（ohpm-repo解压根目录中plugins文件夹内），插件文件CustomAuth.ts中默认AuthPlugin接口类引用地址如下：<ul id='\\\"ZH-CN_TOPIC_0000002202175273__ul131913555367\\\"'><li id='\\\"li5748132441317\\\"'>import {AuthPlugin} from '../libs/plugins/auth/AuthPlugin';</li></ul> </li></ol> </div></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-custom-auth-plugin-configuration.html"
    },
    {
        "id": 1189,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/quotes\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_quotes.html"
    },
    {
        "id": 1190,
        "pre": "TextInput({ placeholder: '用户名' })\\n  .opacity(0.6)\\n  .type(InputType.USER_NAME)\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n  .margin({ top: 32, bottom: 8 })",
        "type": "Reference",
        "function_call": null,
        "function_name": "快速适配指导",
        "parent_text": "快速适配指导当应用具备账号密码登录的场景时，只需要将充当用户名的TextInput输入框的type属性设置为InputType.USER_NAME，将密码TextInput输入框的type属性设置为InputType.Password，即可使用密码保险箱的填充和保存功能。 在应用的账号密码注册页除设置用户名输入框外，将新密码TextInput输入框的type属性设置为InputType.NEW_PASSWORD，即可使用强密码填充功能。如果应用对密码强度有特殊要求，根据为应用添加自动生成高强度密码的建议适配即可。 代码示例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section158415615541\\\"'><a name='\\\"section158415615541\\\"'></a><a name='\\\"section158415615541\\\"'></a><h4>快速适配指导</h4><p>当应用具备账号密码登录的场景时，只需要将充当用户名的TextInput输入框的type属性设置为InputType.USER_NAME，将密码TextInput输入框的type属性设置为InputType.Password，即可使用密码保险箱的填充和保存功能。</p> <p>在应用的账号密码注册页除设置用户名输入框外，将新密码TextInput输入框的type属性设置为InputType.NEW_PASSWORD，即可使用强密码填充功能。如果应用对密码强度有特殊要求，根据<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/passwordvault-custom-strong-password-rules\\\"'>为应用添加自动生成高强度密码的建议</a>适配即可。</p> <p>代码示例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-quick-adaptation.html"
    },
    {
        "id": 1191,
        "pre": "// 导入码图生成需要的图片模块、错误码模块\\nimport { scanCore, generateBarcode } from '@kit.ScanKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入码图生成接口模块，该模块提供了码图生成的参数和方法，导入方法如下。",
        "import_module": null,
        "parent": "<li>导入码图生成接口模块，该模块提供了码图生成的参数和方法，导入方法如下。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scan-barcodegenerate.html"
    },
    {
        "id": 1192,
        "pre": "import { map, mapCommon, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-tile.html"
    },
    {
        "id": 1193,
        "pre": "import { systemShare } from '@kit.ShareKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { common } from '@kit.AbilityKit';\\nimport { fileUri } from '@kit.CoreFileKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相关模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-utd-image.html"
    },
    {
        "id": 1194,
        "pre": "import { soter } from '@kit.OnlineAuthenticationKit';\\nimport { userAuth } from '@kit.UserAuthenticationKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入SOTER模块。 ",
        "import_module": null,
        "parent": "<li><span>导入SOTER模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/onlineauthentication-soter.html"
    },
    {
        "id": 1195,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/quotes\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-quotes-stylistic.html"
    },
    {
        "id": 1196,
        "pre": "export {a, b};\\n\\nconst a = 'hello';\\nconst b = `hello`;",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "export {a, b};\\n\\nconst a = 'hello';\\nconst b = `hello`;",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-quotes-stylistic.html"
    },
    {
        "id": 1197,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customproxyconfig.html"
    },
    {
        "id": 1198,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customproxyconfig.html"
    },
    {
        "id": 1199,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customproxyconfig.html"
    },
    {
        "id": 1200,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-implicit-any-catch\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-implicit-any-catch.html"
    },
    {
        "id": 1201,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-implicit-any-catch\\\": [\\\"error\\\", {\\\"allowExplicitAny\\\": true}]\\n  }\\n}",
        "type": "Reference",
        "function_call": "catch (e: any)",
        "function_name": "选项",
        "parent_text": "选项该规则默认不允许使用隐式any类型。但是可以接受{\\\"allowExplicitAny\\\": true}对象作为规则参数，以允许使用显式的any类型。 示例：  在配置{\\\"allowExplicitAny\\\": true}的条件下，以下代码不会产生告警： try {\\n  // ...\\n} catch (e: any) {\\n  // ...\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section182418564158\\\"'><a name='\\\"section182418564158\\\"'></a><a name='\\\"section182418564158\\\"'></a><h4>选项</h4><p id='\\\"ZH-CN_TOPIC_0000002202129073__p8818105845410\\\"'>该规则默认不允许使用隐式any类型。但是可以接受{\\\"allowExplicitAny\\\": true}对象作为规则参数，以允许使用显式的any类型。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129073__p2606155613426\\\"'>示例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129073__p10733173014554\\\"'>在配置{\\\"allowExplicitAny\\\": true}的条件下，以下代码不会产生告警：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129073__screen8733830195517\\\"'>try {\\n  // ...\\n} catch (e: any) {\\n  // ...\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-implicit-any-catch.html"
    },
    {
        "id": 1202,
        "pre": "try {\\n  // ...\\n} catch (e: unknown) {\\n  // ...\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "try {\\n  // ...\\n} catch (e: unknown) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-implicit-any-catch.html"
    },
    {
        "id": 1203,
        "pre": "try {\\n  // ...\\n// 默认不允许使用隐式any类型\\n} catch (e) {\\n  // ...\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "try {\\n  // ...\\n// 默认不允许使用隐式any类型\\n} catch (e) {\\n  // ...\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-implicit-any-catch.html"
    },
    {
        "id": 1204,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { pdfService } from '@kit.PDFKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n  private filePath = '';\\n  @State saveEnable: boolean = false;\\n\\n  aboutToAppear(): void {\\n    this.filePath = this.context.filesDir + '/input.pdf';\\n    let res = fileIo.accessSync(this.filePath);\\n    if(!res) {\\n      // 确保在工程目录src/main/resources/rawfile里有input.pdf文档\\n      let content: Uint8Array = this.context.resourceManager.getRawFileContentSync('rawfile/input.pdf');\\n      let fdSand =\\n        fileIo.openSync(this.filePath, fileIo.OpenMode.WRITE_ONLY | fileIo.OpenMode.CREATE | fileIo.OpenMode.TRUNC);\\n      fileIo.writeSync(fdSand.fd, content.buffer);\\n      fileIo.closeSync(fdSand.fd);\\n    }\\n    this.pdfDocument.loadDocument(this.filePath);\\n  }\\n\\n  build() {\\n    Column() {\\n      // 另存为一份PDF文档\\n      Button('Save As').onClick(() => {\\n        // 可以对PDF文档添加页眉页脚，水印，背景等一些内容，然后另存文档\\n        let outPdfPath = this.context.filesDir + '/testSaveAsPdf.pdf';\\n        let result = this.pdfDocument.saveDocument(outPdfPath);\\n        this.saveEnable = true;\\n        hilog.info(0x0000, 'PdfPage', 'saveAsPdf %{public}s!', result ? 'success' : 'fail');\\n      })\\n      // 保存覆盖源PDF文档\\n      Button('Save').enabled(this.saveEnable).onClick(() => {\\n        // 这里可以对PDF文档添加内容、页眉页脚、水印、背景等一些内容，然后保存文档\\n        let tempDir = this.context.tempDir;\\n        let tempFilePath = tempDir + `/temp${Math.random()}.pdf`;\\n        fileIo.copyFileSync(this.filePath, tempFilePath);\\n        let pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n        // 加载临时文档\\n        let loadResult = pdfDocument.loadDocument(tempFilePath, '');\\n        if (loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let result = pdfDocument.saveDocument(this.filePath);\\n          hilog.info(0x0000, 'PdfPage', 'savePdf %{public}s!', result ? 'success' : 'fail');\\n        }\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法，加载PDF文档。 在【Save As】和【Save】两个按钮中调用saveDocument方法，分别实现了另存为PDF文档和保存覆盖源PDF文档的两种方式。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section159621146123119\\\"'> <a name='\\\"section159621146123119\\\"'></a><a name='\\\"section159621146123119\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>在【Save As】和【Save】两个按钮中调用saveDocument方法，分别实现了另存为PDF文档和保存覆盖源PDF文档的两种方式。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-open-docunent.html"
    },
    {
        "id": 1205,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/method-signature-style\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_method-signature-style.html"
    },
    {
        "id": 1206,
        "pre": "// 默认要求定义为属性\\nexport interface T1 {\\n  func: (arg: string) => number;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_method-signature-style.html"
    },
    {
        "id": 1207,
        "pre": "// 默认要求定义为属性\\nexport interface T1 {\\n  func(arg: string): number;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_method-signature-style.html"
    },
    {
        "id": 1208,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-base-to-string\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-base-to-string.html"
    },
    {
        "id": 1209,
        "pre": "// These types all have useful .toString()s\\nconst num = 123;\\nexport const v1 = 'Text' + true;\\nexport const v2 = `Value: ${num}`;\\n(() => {\\n  console.info('arrow function');\\n}).toString();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-base-to-string.html"
    },
    {
        "id": 1210,
        "pre": "interface MyType {\\n  name: string;\\n}\\n// Passing an object or class instance to string concatenation:\\nconst obj: MyType = {\\n  name: 'object'\\n};\\nexport const v1 = '' + obj;\\n\\nclass MyClass {}\\nconst value = new MyClass();\\nexport const v2 = value + '';\\n\\n// Interpolation and manual .toString() calls too:\\nexport const v3 = `Value: ${value}`;\\nexport const v4 = obj.toString();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-base-to-string.html"
    },
    {
        "id": 1211,
        "pre": "// 创建回调对象\\nlet setListener: speechRecognizer.RecognitionListener = {\\n  // 开始识别成功回调\\n  onStart(sessionId: string, eventMessage: string) {\\n    console.info(`onStart, sessionId: ${sessionId} eventMessage: ${eventMessage}`);\\n  },\\n  // 事件回调\\n  onEvent(sessionId: string, eventCode: number, eventMessage: string) {\\n    console.info(`onEvent, sessionId: ${sessionId} eventCode: ${eventCode} eventMessage: ${eventMessage}`);\\n  },\\n  // 识别结果回调，包括中间结果和最终结果\\n  onResult(sessionId: string, result: speechRecognizer.SpeechRecognitionResult) {\\n    console.info(`onResult, sessionId: ${sessionId} sessionId: ${JSON.stringify(result)}`);\\n  },\\n  // 识别完成回调\\n  onComplete(sessionId: string, eventMessage: string) {\\n    console.info(`onComplete, sessionId: ${sessionId} eventMessage: ${eventMessage}`);\\n  },\\n  // 错误回调，错误码通过本方法返回\\n  // 返回错误码1002200002，开始识别失败，重复启动startListening方法时触发\\n  // 更多错误码请参考错误码参考\\n  onError(sessionId: string, errorCode: number, errorMessage: string) {\\n    console.error(`onError, sessionId: ${sessionId} errorCode: ${errorCode} errorMessage: ${errorMessage}`);\\n  },\\n}\\n// 设置回调\\nasrEngine.setListener(setListener);",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "得到SpeechRecognitionEngine实例对象后，实例化RecognitionListener对象，调用setListener方法设置回调，用来接收语音识别相关的回调信息。 ",
        "import_module": null,
        "parent": "<li><span>得到<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/hms-ai-speechrecognizer#section153101728203110\\\"' target='\\\"_blank\\\"'>SpeechRecognitionEngine</a>实例对象后，实例化<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/hms-ai-speechrecognizer#section845815011389\\\"' target='\\\"_blank\\\"'>RecognitionListener</a>对象，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/hms-ai-speechrecognizer#section1745872517348\\\"' target='\\\"_blank\\\"'>setListener</a>方法设置回调，用来接收语音识别相关的回调信息。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/speechrecognizer-guide.html"
    },
    {
        "id": 1212,
        "pre": "import { pdfService, PdfView, pdfViewManager } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\\n  private context = getContext() as common.UIAbilityContext;\\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    (async () => {\\n      this.loadResult = await this.controller.loadDocument(filePath);      \\n    })()\\n  }\\n\\n  build() {\\n    Column() {\\n      Row() {\\n        // 设置文本的高亮显示风格\\n        Button('setHighlightText').onClick(async () => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {            \\n            this.controller.setHighlightText(0, ['白皮书'], 0xAAF9CC00);\\n          }\\n        })\\n      }\\n\\n      // 加载PdfView组件进行预览\\n      PdfView({\\n        controller: this.controller,\\n        pageFit: pdfService.PageFit.FIT_WIDTH,\\n        showScroll: true\\n      })\\n        .id('pdfview_app_view')\\n        .layoutWeight(1);\\n    }\\n    .width('100%').height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  加载PDF文档。 调用PdfView预览组件，渲染显示。 在按钮【setHighlightText】里，调用setHighlightText方法，设置单个或多个要高亮的文本。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section77311758103814\\\"'> <a name='\\\"section77311758103814\\\"'></a><a name='\\\"section77311758103814\\\"'></a> <h4>示例代码</h4> <ol> <li>加载PDF文档。</li> <li>调用PdfView预览组件，渲染显示。</li> <li>在按钮【setHighlightText】里，调用setHighlightText方法，设置单个或多个要高亮的文本。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-pdfview-highlight.html"
    },
    {
        "id": 1213,
        "pre": "import { textToSpeech } from '@kit.CoreSpeechKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nlet ttsEngine: textToSpeech.TextToSpeechEngine;\\n@Entry\\n@Component\\nstruct Index {\\n  @State createCount: number = 0;\\n  @State voiceInfo: string = \\\"\\\";\\n  @State originalText: string = \\\"\\\\n\\\\t\\\\t古人学问无遗力，少壮工夫老始成；\\\\n\\\\t\\\\t\\\" +\\n    \\\"纸上得来终觉浅，绝知此事要躬行。\\\\n\\\\t\\\\t\\\";\\n\\n  build() {\\n    Column() {\\n      Scroll() {\\n        Column() {\\n          TextArea({ placeholder: 'Please enter tts original text', text: `${this.originalText}` })\\n            .margin(20)\\n            .focusable(false)\\n            .border({ width: 5, color: 0x317AE7, radius: 10, style: BorderStyle.Solid })\\n            .onChange((value: string) => {\\n              this.originalText = value;\\n              console.info(`original text: ${this.originalText}`);\\n            })\\n\\n          Button() {\\n            Text(\\\"CreateEngineByCallback\\\")\\n              .fontColor(Color.White)\\n              .fontSize(20)\\n          }\\n          .type(ButtonType.Capsule)\\n          .backgroundColor(\\\"#0x317AE7\\\")\\n          .width(\\\"80%\\\")\\n          .height(50)\\n          .margin(10)\\n          .onClick(() => {\\n            this.createCount++;\\n            console.info(`CreateTtsEngine：createCount:${this.createCount}`);\\n            this.createByCallback();\\n          })\\n\\n          Button() {\\n            Text(\\\"speak\\\")\\n              .fontColor(Color.White)\\n              .fontSize(20)\\n          }\\n          .type(ButtonType.Capsule)\\n          .backgroundColor(\\\"#0x317AE7\\\")\\n          .width(\\\"80%\\\")\\n          .height(50)\\n          .margin(10)\\n          .onClick(() => {\\n            this.createCount++;\\n            this.speak();\\n          })\\n\\n          Button() {\\n            Text(\\\"listVoicesCallback\\\")\\n              .fontColor(Color.White)\\n              .fontSize(20)\\n          }\\n          .type(ButtonType.Capsule)\\n          .backgroundColor(\\\"#0x317AE7\\\")\\n          .width(\\\"80%\\\")\\n          .height(50)\\n          .margin(10)\\n          .onClick(() => {\\n            this.listVoicesCallback();\\n          })\\n\\n          Button() {\\n            Text(\\\"stop\\\")\\n              .fontColor(Color.White)\\n              .fontSize(20)\\n          }\\n          .type(ButtonType.Capsule)\\n          .backgroundColor(\\\"#0x317AE7\\\")\\n          .width(\\\"80%\\\")\\n          .height(50)\\n          .margin(10)\\n          .onClick(() => {\\n            // 停止播报\\n            console.info(\\\"Stop button clicked.\\\");\\n            ttsEngine.stop();\\n          })\\n\\n          Button() {\\n            Text(\\\"isBusy\\\")\\n              .fontColor(Color.White)\\n              .fontSize(20)\\n          }\\n          .type(ButtonType.Capsule)\\n          .backgroundColor(\\\"#0x317AE7\\\")\\n          .width(\\\"80%\\\")\\n          .height(50)\\n          .margin(10)\\n          .onClick(() => {\\n            // 查询播报状态\\n            let isBusy = ttsEngine.isBusy();\\n            console.info(`isBusy: ${isBusy}`);\\n          })\\n\\n          Button() {\\n            Text(\\\"shutdown\\\")\\n              .fontColor(Color.White)\\n              .fontSize(20)\\n          }\\n          .type(ButtonType.Capsule)\\n          .backgroundColor(\\\"#0x317AA7\\\")\\n          .width(\\\"80%\\\")\\n          .height(50)\\n          .margin(10)\\n          .onClick(() => {\\n            // 释放引擎\\n            ttsEngine.shutdown();\\n          })\\n        }\\n        .layoutWeight(1)\\n      }\\n      .width('100%')\\n      .height('100%')\\n    }\\n  }\\n\\n  // 创建引擎，通过callback形式返回\\n  private createByCallback() {\\n    // 设置创建引擎参数\\n    let extraParam: Record<string, Object> = {\\\"style\\\": 'interaction-broadcast', \\\"locate\\\": 'CN', \\\"name\\\": 'EngineName'};\\n    let initParamsInfo: textToSpeech.CreateEngineParams = {\\n      language: 'zh-CN',\\n      person: 0,\\n      online: 1,\\n      extraParams: extraParam\\n    };\\n\\n    // 调用createEngine方法\\n    textToSpeech.createEngine(initParamsInfo, (err: BusinessError, textToSpeechEngine: textToSpeech.TextToSpeechEngine) => {\\n      if (!err) {\\n        console.info('Succeeded in creating engine.');\\n        // 接收创建引擎的实例\\n        ttsEngine = textToSpeechEngine;\\n      } else {\\n        console.error(`Failed to create engine. Code: ${err.code}, message: ${err.message}.`);\\n      }\\n    });\\n  };\\n\\n  // 调用speak播报方法\\n  private speak() {\\n    let speakListener: textToSpeech.SpeakListener = {\\n      // 开始播报回调\\n      onStart(requestId: string, response: textToSpeech.StartResponse) {\\n        console.info(`onStart, requestId: ${requestId} response: ${JSON.stringify(response)}`);\\n      },\\n      // 完成播报回调\\n      onComplete(requestId: string, response: textToSpeech.CompleteResponse) {\\n        console.info(`onComplete, requestId: ${requestId} response: ${JSON.stringify(response)}`);\\n      },\\n      // 停止播报完成回调，调用stop方法并完成时会触发此回调\\n      onStop(requestId: string, response: textToSpeech.StopResponse) {\\n        console.info(`onStop, requestId: ${requestId} response: ${JSON.stringify(response)}`);\\n      },\\n      // 返回音频流\\n      onData(requestId: string, audio: ArrayBuffer, response: textToSpeech.SynthesisResponse) {\\n        console.info(`onData, requestId: ${requestId} sequence: ${JSON.stringify(response)} audio: ${JSON.stringify(audio)}`);\\n      },\\n      // 错误回调，播报过程发生错误时触发此回调\\n      onError(requestId: string, errorCode: number, errorMessage: string) {\\n        console.error(`onError, requestId: ${requestId} errorCode: ${errorCode} errorMessage: ${errorMessage}`);\\n      }\\n    };\\n    // 设置回调\\n    ttsEngine.setListener(speakListener);\\n    // 设置播报相关参数\\n    let extraParam: Record<string, Object> = {\\\"queueMode\\\": 0, \\\"speed\\\": 1, \\\"volume\\\": 2, \\\"pitch\\\": 1, \\\"languageContext\\\": 'zh-CN', \\\"audioType\\\": \\\"pcm\\\", \\\"soundChannel\\\": 3, \\\"playType\\\":1}\\n    let speakParams: textToSpeech.SpeakParams = {\\n      requestId: '123456-a', // requestId在同一实例内仅能用一次，请勿重复设置\\n      extraParams: extraParam\\n    };\\n    // 调用speak播报方法\\n    ttsEngine.speak(this.originalText, speakParams);\\n  };\\n\\n  // 查询语种音色信息，以callback形式返回\\n  private listVoicesCallback() {\\n    // 设置查询相关参数\\n    let voicesQuery: textToSpeech.VoiceQuery = {\\n      requestId: '123456-b', // requestId在同一实例内仅能用一次，请勿重复设置\\n      online: 1\\n    };\\n\\n    // 调用listVoices方法，以callback返回语种音色查询结果\\n    ttsEngine.listVoices(voicesQuery, (err: BusinessError, voiceInfo: textToSpeech.VoiceInfo[]) => {\\n      if (!err) {\\n        // 接收目前支持的语种音色等信息\\n        this.voiceInfo = JSON.stringify(voiceInfo);\\n        console.info(`Succeeded in listing voices, voiceInfo is ${voiceInfo}`);\\n      } else {\\n        console.error(`Failed to list voices. Code: ${err.code}, message: ${err.message}`);\\n      }\\n    });\\n  };\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      点击按钮，播报一段文本。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      点击按钮，播报一段文本。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/texttospeech-guide.html"
    },
    {
        "id": 1214,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/typedef\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_typedef.html"
    },
    {
        "id": 1215,
        "pre": "import { Product } from '@ohos/hvigor-ohos-plugin';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 ",
        "import_module": "import { Product } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1971141114618\\\"'><a name='\\\"section1971141114618\\\"'></a><a name='\\\"section1971141114618\\\"'></a><h4>[h2]导入模块</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-project-model.html"
    },
    {
        "id": 1216,
        "pre": "import { Target } from '@ohos/hvigor-ohos-plugin';",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]导入模块",
        "parent_text": "[h2]导入模块 成员  声明  描述    getCurrentProduct  getCurrentProduct: () => Product  获取当前Target配置的Product。   getBuildTargetOutputPath  getBuildTargetOutputPath: () => string  获取当前target构建产物输出路径。   getTargetName  getTargetName: () => string  获取target名称。      ",
        "import_module": "import { Target } from '@ohos/hvigor-ohos-plugin';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section19794116183412\\\"'><a name='\\\"section19794116183412\\\"'></a><a name='\\\"section19794116183412\\\"'></a><h4>[h2]导入模块</h4> <div class='\\\"tablenoborder\\\"'><table id='\\\"table77656184357\\\"'><thead><tr id='\\\"ZH-CN_TOPIC_0000002166808328__row1276571863513\\\"'><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.3.1.4.1.1\\\"' valign='\\\"top\\\"' width='\\\"18.44%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p10765131810357\\\"'>成员</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.3.1.4.1.2\\\"' valign='\\\"top\\\"' width='\\\"30.630000000000003%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p1476520184355\\\"'>声明</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.23.3.1.4.1.3\\\"' valign='\\\"top\\\"' width='\\\"50.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p4765101883514\\\"'>描述</p> </th> </tr> </thead> <tbody><tr id='\\\"ZH-CN_TOPIC_0000002166808328__row3765181883510\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.44%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p86131535103519\\\"'>getCurrentProduct</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"30.630000000000003%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p26131435103515\\\"'>getCurrentProduct: () =&gt; Product</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p6612183520358\\\"'>获取当前Target配置的Product。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808328__row7765518173515\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.44%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p2612435193510\\\"'>getBuildTargetOutputPath</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"30.630000000000003%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p1246115373519\\\"'>getBuildTargetOutputPath: () =&gt; string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p146111351355\\\"'>获取当前target构建产物输出路径。</p> </td> </tr> <tr id='\\\"ZH-CN_TOPIC_0000002166808328__row9766181814355\\\"'><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"18.44%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p1461063515356\\\"'>getTargetName</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"30.630000000000003%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p1661012354355\\\"'>getTargetName: () =&gt; string</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50.93%\\\"'><p id='\\\"ZH-CN_TOPIC_0000002166808328__p20591735103511\\\"'>获取target名称。</p> </td> </tr> </tbody></table> </div> <p id='\\\"ZH-CN_TOPIC_0000002166808328__p19235163415415\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-build-expanding-project-model.html"
    },
    {
        "id": 1217,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-dh-key\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section150341212117\\\"'><a name='\\\"section150341212117\\\"'></a><a name='\\\"section150341212117\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-dh-key.html"
    },
    {
        "id": 1218,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/specified-interface-call-chain-check\\\": [\\n      \\\"suggestion\\\",\\n      {\\n        \\\"outputDirPath\\\": \\\"\\\", // 配置输出结果的文件目录，填写文件夹绝对路径，目录不存在则新建，输出文件名为specified-interface-call-chain-check_result.txt。\\n        \\\"callChainMaxLen\\\": 0, // 调用链最大长度，默认为0（表示不限制）\\n      },\\n      {\\n        \\\"selector\\\": \\\"\\\", // 枚举：namespace/class/function/property/type（function包括函数和类方法，class包括类class、接口interface、枚举enum和结构体struct）\\n        \\\"filePath\\\": \\\"\\\", // 目标文件的绝对路径\\n        \\\"namespace\\\": [], // 命名空间的名字数组，表示定义在namespace里或者检查namespace本身，嵌套则按顺序填写\\n        \\\"class\\\": \\\"\\\", // 类名，表示定义在class里边或者是检查的class本身\\n        \\\"function\\\": \\\"\\\", // 函数名\\n        \\\"property\\\": \\\"\\\", // 类属性名\\n        \\\"type\\\": \\\"\\\", // 类型别名\\n      },\\n      {\\n        \\\"selector\\\": \\\"\\\" // 枚举：namespace/class/function/property/type（function包括函数类方法）\\n        \\\"filePath\\\": \\\"\\\", // 目标文件的绝对路径\\n        \\\"namespace\\\": [], // 命名空间的名字数组，表示定义在namespace里或者检测namespace本身，嵌套则按顺序填写\\n        \\\"class\\\": \\\"\\\", // 类名，表示定义在class里边或者是检查的class本身\\n        \\\"function\\\": \\\"\\\", // 函数名\\n        \\\"property\\\": \\\"\\\", // 类属性名\\n        \\\"type\\\": \\\"\\\", // 类型别名\\n      },\\n    ],\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-specified-interface-call-chain-check.html"
    },
    {
        "id": 1219,
        "pre": "// Absolute-Path1.ets\\n\\nexport class Cls1 {\\n  public func1() {\\n    console.log('This is func1 in cls1.');\\n  }\\n  public func2() {\\n    console.log('This is func2 in cls1.');\\n  }\\n}",
        "type": "Reference",
        "function_call": "func2()",
        "function_name": "正例",
        "parent_text": "正例下文中absolute-path-1.ets为依赖代码：  下文中Correct.ets为正例测试代码，依赖上文中AbsolutePath1.ets： // Correct.ets\\n\\nimport { Cls1 } from './AbsolutePath1';\\nlet testClass = new Cls1();\\ntestClass.func2(); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4><p id='\\\"ZH-CN_TOPIC_0000002166648564__p1194371004814\\\"'>下文中absolute-path-1.ets为依赖代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648564__p1525194225219\\\"'>下文中Correct.ets为正例测试代码，依赖上文中AbsolutePath1.ets：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648564__screen979191917510\\\"'>// Correct.ets\\n\\nimport { Cls1 } from './AbsolutePath1';\\nlet testClass = new Cls1();\\ntestClass.func2();</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-specified-interface-call-chain-check.html"
    },
    {
        "id": 1220,
        "pre": "// absolute-path-1.ets\\n\\nexport class cls1 {\\n  public func1() {\\n    console.log('This is func1 in cls1.');\\n  }\\n  public func2() {\\n    console.log('This is func2 in cls1.');\\n  }\\n}",
        "type": "Reference",
        "function_call": "func1()",
        "function_name": "反例",
        "parent_text": "反例下文中absolute-path-1.ets为依赖代码：  下文中incorrect.ets为反例测试代码，依赖上文中absolute-path-1.ets： // incorrect.ets\\n\\nimport { cls1 } from './absolute-path-1';\\nlet testClass = new cls1();\\ntestClass.func1(); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section97191052164616\\\"'><a name='\\\"section97191052164616\\\"'></a><a name='\\\"section97191052164616\\\"'></a><h4>反例</h4><p id='\\\"ZH-CN_TOPIC_0000002166648564__p082710191527\\\"'>下文中absolute-path-1.ets为依赖代码：</p>  <p id='\\\"ZH-CN_TOPIC_0000002166648564__p4828111918524\\\"'>下文中incorrect.ets为反例测试代码，依赖上文中absolute-path-1.ets：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002166648564__screen5828419205211\\\"'>// incorrect.ets\\n\\nimport { cls1 } from './absolute-path-1';\\nlet testClass = new cls1();\\ntestClass.func1();</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-specified-interface-call-chain-check.html"
    },
    {
        "id": 1221,
        "pre": "import { faceComparator } from '@kit.CoreVisionKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "在使用人脸比对时，将实现人脸比对相关的类添加至工程。 ",
        "import_module": "import { faceComparator } from '@kit.CoreVisionKit';",
        "parent": "<li><span>在使用人脸比对时，将实现人脸比对相关的类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-face-comparator.html"
    },
    {
        "id": 1222,
        "pre": "import { faceComparator } from '@kit.CoreVisionKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\n\\nconst TAG: string = \\\"FaceCompareSample\\\";\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State chooseImage: PixelMap | undefined = undefined\\n  @State chooseImage1: PixelMap | undefined = undefined\\n  @State dataValues: string = ''\\n\\n  async aboutToAppear(): Promise<void> {\\n    const initResult = await faceComparator.init();\\n    hilog.info(0x0000, TAG, `Face comparator initialization result:${initResult}`);\\n  }\\n\\n  async aboutToDisappear(): Promise<void> {\\n    await faceComparator.release();\\n    hilog.info(0x0000, TAG, 'Face comparator released successfully');\\n  }\\n\\n  build() {\\n    Column() {\\n      Image(this.chooseImage)\\n        .objectFit(ImageFit.Fill)\\n        .height('30%')\\n        .accessibilityDescription(\\\"默认图片1\\\")\\n      Image(this.chooseImage1)\\n        .objectFit(ImageFit.Fill)\\n        .height('30%')\\n        .accessibilityDescription(\\\"默认图片2\\\")\\n      Text(this.dataValues)\\n        .copyOption(CopyOptions.LocalDevice)\\n        .height('15%')\\n        .margin(10)\\n        .width('60%')\\n      Button('选择图片')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          // 拉起图库\\n          this.selectImage()\\n        })\\n      Button('人脸比对')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          if(!this.chooseImage || !this.chooseImage1) {\\n            hilog.error(0x0000, TAG, \\\"Failed to choose image\\\");\\n            return;\\n          }\\n          // 调用人脸比对接口\\n          let visionInfo: faceComparator.VisionInfo = {\\n            pixelMap: this.chooseImage,\\n          };\\n          let visionInfo1: faceComparator.VisionInfo = {\\n            pixelMap: this.chooseImage1,\\n          };\\n          faceComparator.compareFaces(visionInfo, visionInfo1)\\n            .then((data: faceComparator.FaceCompareResult) => {\\n              let faceString = \\\"degree of similarity：\\\"+ this.toPercentage(data.similarity)+((data.isSamePerson)?\\\". is\\\":\\\". no\\\")+ \\\" same person\\\";\\n              hilog.info(0x0000, TAG, \\\"faceString data is \\\" + faceString);\\n              this.dataValues = faceString;\\n            })\\n            .catch((error: BusinessError) => {\\n              hilog.error(0x0000, TAG, `Face comparison failed. Code: ${error.code}, message: ${error.message}`);\\n              this.dataValues = `Error: ${error.message}`;\\n            });\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  private toPercentage(num: number): string {\\n    return `${(num * 100).toFixed(2)}%`;\\n  }\\n\\n  private async selectImage() {\\n    let uri = await this.openPhoto()\\n    if (uri === undefined) {\\n      hilog.error(0x0000, TAG, \\\"Failed to get two image uris.\\\");\\n    }\\n    this.loadImage(uri);\\n  }\\n\\n  private openPhoto(): Promise<string[]> {\\n    return new Promise<string[]>((resolve, reject) => {\\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\\n      photoPicker.select({\\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\\n        maxSelectNumber: 2\\n      }).then(res => {\\n        resolve(res.photoUris);\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0000, TAG, `Failed to get photo image uris. code: ${err.code}, message: ${err.message}`);\\n        reject();\\n      });\\n    });\\n  }\\n\\n  private loadImage(names: string[]) {\\n    setTimeout(async () => {\\n      let imageSource: image.ImageSource | undefined = undefined;\\n      let fileSource = await fileIo.open(names[0], fileIo.OpenMode.READ_ONLY);\\n      imageSource = image.createImageSource(fileSource.fd);\\n      this.chooseImage = await imageSource.createPixelMap();\\n      fileSource = await fileIo.open(names[1], fileIo.OpenMode.READ_ONLY);\\n      imageSource = image.createImageSource(fileSource.fd);\\n      this.chooseImage1 = await imageSource.createPixelMap();\\n      hilog.info(0x0000, TAG, 'this.chooseImage:', this.chooseImage, 'this.chooseImage1:', this.chooseImage1);\\n    }, 100\\n    )\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": "import { faceComparator } from '@kit.CoreVisionKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1564831315485\\\"'> <a name='\\\"section1564831315485\\\"'></a><a name='\\\"section1564831315485\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-face-comparator.html"
    },
    {
        "id": 1223,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\n\\nexport class LiveViewController {\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n}",
        "type": "Reference",
        "function_call": "构造isLiveViewEnabled()",
        "function_name": "导入liveViewManager",
        "parent_text": "  导入liveViewManager 在项目中导入liveViewManager，并新建实况窗控制类（例如LiveViewController），构造isLiveViewEnabled()方法，用于校验实况窗开关（设置>应用和元服务>应用名>实况窗）是否打开。打开实况窗开关是创建实况窗的前提条件。示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1456953322711\\\"'> <a name='\\\"section1456953322711\\\"'></a><a name='\\\"section1456953322711\\\"'></a> <h4>导入liveViewManager</h4> <p>在项目中导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/liveveiw-liveviewmanager\\\"' target='\\\"_blank\\\"'>liveViewManager</a>，并新建实况窗控制类（例如LiveViewController），构造isLiveViewEnabled()方法，用于校验实况窗开关（设置&gt;应用和元服务&gt;应用名&gt;实况窗）是否打开。打开实况窗开关是创建实况窗的前提条件。示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1224,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"DELIVERY\\\", // 实况窗的应用场景。DELIVERY：即时配送（外卖、生鲜）\\n      liveViewData: {\\n        primary: {\\n          title: \\\"骑手已接单\\\",\\n          content: [\\n            { text: \\\"距商家 \\\" },\\n            { text: \\\"300 \\\", textColor: \\\"#FF0A59F7\\\" },\\n            { text: \\\"米 | \\\" },\\n            { text: \\\"3 \\\", textColor: \\\"#FF0A59F7\\\" },\\n            { text: \\\"分钟到店\\\" }\\n          ], // 所有文本仅能设置为一种颜色，不设置textColor时，默认展示#FF000000\\n          keepTime: 15,\\n          clickAction: await LiveViewController.buildWantAgent(),\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\\n            progress: 40,\\n            color: \\\"#FF317AF7\\\",\\n            backgroundColor: \\\"#f7819ae0\\\",\\n            indicatorType: liveViewManager.IndicatorType.INDICATOR_TYPE_UP,\\n            indicatorIcon: \\\"indicator.png\\\", // 进度条指示器图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n            lineType: liveViewManager.LineType.LINE_TYPE_DOTTED_LINE,\\n            nodeIcons: [\\\"icon_1.png\\\", \\\"icon_2.png\\\", \\\"icon_3.png\\\"] // 进度条每个节点图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": "startLiveView()",
        "function_name": null,
        "parent_text": "      构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1225,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"PICK_UP\\\", // 实况窗的应用场景。PICK_UP：取餐。\\n      liveViewData: {\\n        primary: {\\n          title: \\\"餐品已备好\\\",\\n          content: [\\n            { text: \\\"请前往\\\" },\\n            { text: \\\" XXX店 \\\", textColor: \\\"#FF0A59F7\\\" },\\n            { text: \\\"取餐\\\" },\\n          ],\\n          keepTime: 15,\\n          clickAction: await LiveViewController.buildWantAgent(),\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PICKUP,\\n            title: \\\"取餐码\\\",\\n            content: \\\"72988\\\",\\n            underlineColor: \\\"#FF0A59F7\\\",\\n            descPic: \\\"coffee.png\\\" // 扩展区右侧产品描述图，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = \\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": "startLiveView()",
        "function_name": "[h2]强调文本模板",
        "parent_text": "  [h2]强调文本模板 强调文本模板适用于取餐、排队等场景。  示例代码如下： 构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section113626521804\\\"'> <a name='\\\"section113626521804\\\"'></a><a name='\\\"section113626521804\\\"'></a> <h4>[h2]强调文本模板</h4> <p>强调文本模板适用于取餐、排队等场景。</p> <p><span><img height='\\\"256.721654\\\"' originheight='\\\"760\\\"' originwidth='\\\"1496\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120133.50151722217493381946797971896283:50001231000000:2800:5FD48513D001EB9053EB6560D91486E51B9C44EF9C1230D7DC0B6DAE7D17141F.png\\\"' title='\\\"点击放大\\\"' width='\\\"506.73\\\"'/></span></p> <p>示例代码如下：</p> <p>构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1226,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"TRAIN\\\", // 实况窗的应用场景。TRAIN：高铁/火车。\\n      liveViewData: {\\n        primary: {\\n          title: \\\"列车检票提醒\\\",\\n          content: [\\n            { text: \\\"检票口 \\\" },\\n            { text: \\\"6B \\\", textColor: \\\"#FF0A59F7\\\" },\\n            { text: \\\"| 座位 \\\" },\\n            { text: \\\"03车 12F\\\", textColor: \\\"#FF0A59F7\\\" }\\n          ], // 所有文本仅能设置为一种颜色，不设置textColor时，默认展示#FF000000\\n          keepTime: 15,\\n          clickAction: await LiveViewController.buildWantAgent(), // 点击实况窗默认动作。\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_FLIGHT,\\n            firstTitle: \\\"09:00\\\",\\n            firstContent: \\\"上海虹桥\\\",\\n            lastTitle: \\\"14:20\\\",\\n            lastContent: \\\"汉口\\\",\\n            spaceIcon: \\\"icon.png\\\", // 扩展区中间间隔图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n            isHorizontalLineDisplayed: true,\\n            additionalText: \\\"以上信息仅供参考\\\" // 扩展区底部内容，仅可用于左右文本模板。\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": "startLiveView()",
        "function_name": null,
        "parent_text": "      构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1227,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"SCORE\\\", // 实况窗的应用场景。SCORE：赛事比分。\\n      liveViewData: {\\n        primary: {\\n          title: \\\"第四节比赛中\\\",\\n          content: [\\n            { text: \\\"XX\\\", textColor:\\\"#FF0A59F7\\\" },\\n            { text: \\\" VS \\\" },\\n            { text: \\\"XX\\\", textColor:\\\"#FF0A59F7\\\" },\\n            { text: \\\" | \\\" },\\n            { text: \\\"小组赛 第五场\\\", textColor:\\\"#FF0A59F7\\\" }\\n          ],\\n          keepTime: 1,\\n          clickAction: await LiveViewController.buildWantAgent(),\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_SCORE,\\n            hostName: \\\"队名A\\\",\\n            hostIcon: \\\"host.png\\\", // 扩展区左侧图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n            hostScore: \\\"110\\\",\\n            guestName: \\\"队名B\\\",\\n            guestIcon: \\\"guest.png\\\", // 扩展区右侧图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n            guestScore: \\\"102\\\",\\n            competitionDesc: [\\n              { text: \\\"●\\\", textColor: \\\"#FFFF0000\\\" },\\n              { text: \\\"Q4\\\" }\\n            ],\\n            competitionTime: \\\"02:16\\\",\\n            isHorizontalLineDisplayed: true\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": "startLiveView()",
        "function_name": "[h2]赛事比分模板",
        "parent_text": "  [h2]赛事比分模板 赛事比分模板适用于赛事场景。  示例代码如下： 构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section25155137214\\\"'> <a name='\\\"section25155137214\\\"'></a><a name='\\\"section25155137214\\\"'></a> <h4>[h2]赛事比分模板</h4> <p>赛事比分模板适用于赛事场景。</p> <p><span><img height='\\\"253.70415\\\"' originheight='\\\"760\\\"' originwidth='\\\"1496\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120134.17467632422091867908575253203543:50001231000000:2800:0242280A668A6C324011E0FA788DF3CA54B0B5E53C5DB027E2CCDE008FCC1516.png\\\"' title='\\\"点击放大\\\"' width='\\\"500.745\\\"'/></span></p> <p>示例代码如下：</p> <p>构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1228,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"NAVIGATION\\\", // 实况窗的应用场景。NAVIGATION：导航。\\n      liveViewData: {\\n        primary: {\\n          title: \\\"178米后左转\\\",\\n          content: [\\n            { text: \\\"去往\\\"},\\n            { text: \\\" 南京东路\\\", textColor: \\\"#FF0A59F7\\\" }\\n          ],\\n          keepTime: 15,\\n          clickAction: await LiveViewController.buildWantAgent(),\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_NAVIGATION,\\n            currentNavigationIcon: \\\"navigation.png\\\", // 当前导航方向，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n            navigationIcons: [\\\"left.png\\\",\\\"straight.png\\\",\\\"straight.png\\\",\\\"right.png\\\"] // 导航方向的箭头集合图片，每个元素取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": "startLiveView()",
        "function_name": "[h2]导航模板",
        "parent_text": "  [h2]导航模板 导航模板适用于出行导航场景。  示例代码如下： 构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section202231347592\\\"'> <a name='\\\"section202231347592\\\"'></a><a name='\\\"section202231347592\\\"'></a> <h4>[h2]导航模板</h4> <p>导航模板适用于出行导航场景。</p> <p><span><img height='\\\"240.849434\\\"' originheight='\\\"623\\\"' originwidth='\\\"1293\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120134.20682781222590956966814057406433:50001231000000:2800:536E9C444FFAF2E3EB161290B5E2EA6F7382F2009CA7E97089120C5D45B4F34B.png\\\"' title='\\\"点击放大\\\"' width='\\\"499.897125\\\"'/></span></p> <p>示例代码如下：</p> <p>构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1229,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"TAXI\\\", // 实况窗的应用场景。TAXI：出行打车。\\n      liveViewData: {\\n        primary: {\\n          title: \\\"司机预计5分钟后到达\\\",\\n          content: [\\n            { text: \\\"白\\\", textColor: \\\"#FF0A59F7\\\" },\\n            { text: \\\"●\\\" },\\n            { text: \\\"沪AXXXXXX\\\", textColor: \\\"#FF0A59F7\\\" }\\n          ],\\n          keepTime: 15,\\n          clickAction: await LiveViewController.buildWantAgent(),\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\\n            progress: 30,\\n            color: \\\"#ff0959F8\\\",\\n            backgroundColor: \\\"#ffc9d7e4\\\",\\n            indicatorType: liveViewManager.IndicatorType.INDICATOR_TYPE_UP,\\n            indicatorIcon: \\\"indicator.png\\\", // 进度条指示器图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n            lineType: liveViewManager.LineType.LINE_TYPE_NORMAL_SOLID_LINE,\\n            nodeIcons: [\\\"icon_1.png\\\", \\\"icon_2.png\\\", \\\"icon_3.png\\\"] // 进度条节点图标集合，每个元素取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          }\\n        },\\n        // 实况胶囊相关参数\\n        capsule: {\\n          type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\\n          status: 1,\\n          icon: \\\"capsule_store.png\\\", // 胶囊图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          backgroundColor: \\\"#ff0959F8\\\",\\n          title: \\\"5分钟\\\"\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      除了实况窗卡片形态，开发者还需考虑实况窗胶囊形态的展示效果。若开发者创建实况窗时还想同步创建实况窗胶囊，则需在liveViewManager.LiveView（结构体）中携带胶囊所需的参数liveViewData.capsule（不同胶囊类型携带不同的参数）。示例代码如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      除了实况窗卡片形态，开发者还需考虑实况窗胶囊形态的展示效果。若开发者创建实况窗时还想同步创建实况窗胶囊，则需在liveViewManager.<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/liveveiw-liveviewmanager#section411410371767\\\"' target='\\\"_blank\\\"'>LiveView</a>（结构体）中携带胶囊所需的参数liveViewData.<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/liveveiw-liveviewmanager#section980821010388\\\"' target='\\\"_blank\\\"'>capsule</a>（不同胶囊类型携带不同的参数）。示例代码如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1230,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"QUEUE\\\", // 实况窗的应用场景。QUEUE：排队\\n      timer: {\\n        time: 620000,\\n        isCountdown: false,\\n        isPaused: false\\n      },\\n      liveViewData: {\\n        primary: {\\n          title: \\\"大桌4人等位  32桌\\\",\\n          content: [\\n            { text: \\\"已等待 \\\" }, \\n            { text: \\\"${placeholder.timer}\\\", textColor:\\\"#ff10c1f7\\\" },\\n            { text: \\\" | 预计还需>30分钟\\\" }\\n          ], // 所有文本仅能设置为一种颜色，不设置textColor时，默认展示#FF000000\\n          keepTime: 15,\\n          clickAction: await LiveViewController.buildWantAgent(),\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\\n            progress: 0,\\n            color: \\\"#FFFF0000\\\",\\n            backgroundColor: \\\"#FF000000\\\",\\n            indicatorType: liveViewManager.IndicatorType.INDICATOR_TYPE_OVERLAY,\\n            indicatorIcon: \\\"indicator.png\\\", // 进度条指示器图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n            lineType: liveViewManager.LineType.LINE_TYPE_DOTTED_LINE,\\n            nodeIcons: [\\\"icon_1.png\\\",\\\"icon_2.png\\\"] // 进度条节点图标集合，每个元素取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          }\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": "startLiveView()",
        "function_name": null,
        "parent_text": "      构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1231,
        "pre": "import { liveViewManager } from '@kit.LiveViewKit';\\nimport { Want, wantAgent } from '@kit.AbilityKit';\\n\\nexport class LiveViewController {\\n  private static contentColor: string = '#FF000000';\\n  private static capsuleColor: string = '#FF308977';\\n\\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 创建实况窗\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    return await liveViewManager.startLiveView(defaultView);\\n  }\\n\\n  public async updateLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 修改实况窗内容\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    defaultView.liveViewData.primary.title = \\\"预计23:49送达\\\";\\n    defaultView.liveViewData.primary.content = [\\n      { text: \\\"等待商家接单， \\\" },\\n      { text: \\\"03:20\\\", textColor: \\\"#FFFF9C4F\\\" },\\n      { text: \\\" 未接单自动取消\\\" },\\n    ];\\n    defaultView.liveViewData.primary.layoutData = {\\n      layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\\n      progress: 0,\\n      lineType: 0,\\n      nodeIcons: [\\n        'icon_store_white.png',\\n        'icon_finish.png'\\n      ] // 进度条节点图标集合，每个元素取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n    };\\n    defaultView.liveViewData.capsule = {\\n      type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\\n      status: 1,\\n      icon: 'capsule_store.png', // 实况胶囊的图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n      backgroundColor: LiveViewController.capsuleColor,\\n      title: \\\"待接单\\\"\\n    };\\n    // 更新实况窗\\n    return await liveViewManager.updateLiveView(defaultView);\\n  }\\n\\n  public async stopLiveView(): Promise<liveViewManager.LiveViewResult> {\\n    // 校验实况窗开关是否打开\\n    if (!await LiveViewController.isLiveViewEnabled()) {\\n      throw new Error(\\\"Live view is disabled.\\\");\\n    }\\n    // 修改实况窗内容\\n    const defaultView = await LiveViewController.buildDefaultView();\\n    defaultView.liveViewData.primary.title = '商品已送达';\\n    defaultView.liveViewData.primary.content = [\\n      { text: '感谢您的认可,' },\\n      { text: '期待下一次光临' }\\n    ];\\n    defaultView.liveViewData.primary.layoutData = {\\n      layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\\n      progress: 100,\\n      lineType: 0,\\n      nodeIcons: [\\n        'icon_order.png',\\n        'icon_finish.png'\\n      ] // 进度条节点图标集合，每个元素取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n    };\\n    defaultView.liveViewData.capsule = {\\n      type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\\n      status: 1,\\n      icon: 'capsule_gps.png', // 实况胶囊的图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n      backgroundColor: LiveViewController.capsuleColor,\\n      title: '已送达'\\n    };\\n    // 结束实况窗\\n    return await liveViewManager.stopLiveView(defaultView);\\n  }\\n\\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\\n    return {\\n      // 构造实况窗请求体\\n      id: 0, // 实况窗ID，开发者生成。\\n      event: \\\"DELIVERY\\\", // 实况窗的应用场景。DELIVERY：即时配送（外卖、生鲜）\\n      liveViewData: {\\n        primary: {\\n          title: \\\"餐品待支付\\\",\\n          content: [\\n            { text: \\\"咖啡 \\\", textColor: \\\"#FF0A59F7\\\" },\\n            { text: \\\"等2件商品\\\" }\\n          ],\\n          keepTime: 15,\\n          clickAction: await LiveViewController.buildWantAgent(),\\n          layoutData: {\\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PICKUP,\\n            title: \\\"待支付金额\\\",\\n            content: \\\"25.5元\\\",\\n            underlineColor: \\\"#FF0A59F7\\\",\\n            descPic: \\\"coffee.png\\\" // 扩展区右侧产品描述图，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          }\\n        },\\n        // 实况胶囊相关参数\\n        capsule: {\\n          type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\\n          status: 1,\\n          icon: \\\"capsule_store.png\\\", // 实况胶囊的图标，取值为“/resources/rawfile”路径下的文件名或image.PixelMap\\n          backgroundColor: \\\"#FF308977\\\",\\n          title: \\\"待支付\\\"\\n        }\\n      }\\n    };\\n  }\\n\\n  private static async isLiveViewEnabled(): Promise<boolean> {\\n    return await liveViewManager.isLiveViewEnabled();\\n  }\\n\\n  private static async buildWantAgent(): Promise<Want> {\\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\\n      wants: [\\n        {\\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\\n          abilityName: 'EntryAbility'\\n        } as Want\\n      ],\\n      actionType: wantAgent.OperationType.START_ABILITIES,\\n      requestCode: 0,\\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\\n    };\\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\\n    return agent;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "本地更新和结束实况窗",
        "parent_text": "  本地更新和结束实况窗 调用liveViewManager.isLiveViewEnabled()确认实况窗开关打开后，调用liveViewManager的updateLiveView更新实况窗，调用stopLiveView结束实况窗。更新时需要修改请求体中对应的参数。示例代码如下：  更详细的参数请参考Live View Kit ArkTS API参考。     以上是应用在本地创建、更新和结束实况窗通知的全部流程。此外，应用也可以通过Push Kit实现远程更新实况窗消息。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section3554203502815\\\"'> <a name='\\\"section3554203502815\\\"'></a><a name='\\\"section3554203502815\\\"'></a> <h4>本地更新和结束实况窗</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/liveveiw-liveviewmanager#section19741144281410\\\"' target='\\\"_blank\\\"'>liveViewManager.isLiveViewEnabled</a>()确认实况窗开关打开后，调用liveViewManager的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/liveveiw-liveviewmanager#section1310319579406\\\"' target='\\\"_blank\\\"'>updateLiveView</a>更新实况窗，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/liveveiw-liveviewmanager#section929145112243\\\"' target='\\\"_blank\\\"'>stopLiveView</a>结束实况窗。更新时需要修改请求体中对应的参数。示例代码如下：</p>  <p>更详细的参数请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/liveview-arkts\\\"' target='\\\"_blank\\\"'>Live View Kit ArkTS API参考</a>。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120134.49461395574308391884044883524369:50001231000000:2800:91AE9921F205A7D1DAD4055FF76D93BF7F145E25C8AD6C27918761285D87C128.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>以上是应用在本地创建、更新和结束实况窗通知的全部流程。此外，应用也可以通过Push Kit实现远程<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/push-update-liveview\\\"' target='\\\"_blank\\\"'>更新实况窗消息</a>。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/liveview-create-locally.html"
    },
    {
        "id": 1232,
        "pre": "import { mapCommon, map, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-3dbuilding.html"
    },
    {
        "id": 1233,
        "pre": "void good_write()\\n{\\n    sleep(1);\\n    int fd = open(DEV_NULL_FILE, O_RDONLY);\\n    sleep(3);\\n    ssize_t ret = write(fd, \\\"fdsan test\\\\n\\\", 11);\\n    if (ret == -1) {\\n        OH_LOG_ERROR(LOG_APP, \\\"good write but failed?!\\\");\\n    }\\n    close(fd);\\n}\\n\\nvoid bad_close()\\n{\\n    int fd = open(DEV_NULL_FILE, O_RDONLY);\\n    close(fd);\\n    sleep(2);\\n    // This close expected to be detect by fdsan\\n    close(fd);\\n}\\n\\nvoid functional_test()\\n{\\n    std::vector<std::thread> threads;\\n    for (auto function : { good_write, bad_close }) {\\n        threads.emplace_back(function);\\n    }\\n    for (auto& thread : threads) {\\n        thread.join();\\n    }\\n}\\n\\nint main()\\n{\\n    functional_test();\\n    return 0;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "4. 使用示例",
        "parent_text": "4. 使用示例如何使用fdsan？这是一个简单的double-close问题：  上述代码中的good_write函数会打开一个文件并写入一些字符串而bad_close函数中也会打开一个文件同时包含double-close问题，这两个线程同时运行那么程序的执行情况会是这样的。  由于每次open返回的fd是顺序分配的，在进入主函数后第一个可用的fd是43，bad_close函数中第一次open返回的fd是43，在关闭之后，43就变成了可用的fd，在good_write函数中open返回了第一个可用的fd，即43，但是由于bad_close函数中存在double-close问题，因此错误的关闭了另一个线程中打开的文件，导致写入失败。 在fdsan引入之后，有两种方法可以检测这类问题：使用标准库接口或实现具有fdsan的函数接口。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section4-使用示例\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178213768__4-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\\\"'></a><a name='\\\"4-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\\\"'></a><h4>4. 使用示例</h4><p>如何使用fdsan？这是一个简单的double-close问题：</p>  <p>上述代码中的good_write函数会打开一个文件并写入一些字符串而bad_close函数中也会打开一个文件同时包含double-close问题，这两个线程同时运行那么程序的执行情况会是这样的。</p> <p><span><img originheight='\\\"412\\\"' originwidth='\\\"748\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115750.88019151385368407728196061267474:50001231000000:2800:303EE58312576CD32DC8255BB33B42292CE573347191C939978CFD4BABBAFBAD.png\\\"'/></span></p> <p>由于每次open返回的fd是顺序分配的，在进入主函数后第一个可用的fd是43，bad_close函数中第一次open返回的fd是43，在关闭之后，43就变成了可用的fd，在good_write函数中open返回了第一个可用的fd，即43，但是由于bad_close函数中存在double-close问题，因此错误的关闭了另一个线程中打开的文件，导致写入失败。</p> <p>在fdsan引入之后，有两种方法可以检测这类问题：使用标准库接口或实现具有fdsan的函数接口。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fdsan.html"
    },
    {
        "id": 1234,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-dsa\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10243142417425\\\"'><a name='\\\"section10243142417425\\\"'></a><a name='\\\"section10243142417425\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-dsa.html"
    },
    {
        "id": 1235,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/grid-span-value\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_grid-span-value.html"
    },
    {
        "id": 1236,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Column() {\\n      GridRow({\\n        columns: { sm: 4, md: 8, lg: 12 }\\n      }) {\\n        GridCol({\\n          span: { sm: 4, md: 4, lg: 4 }, offset: { sm: 0, md: 2, lg: 4 }\\n        }) {\\n          Row().backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))\\n        }\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_grid-span-value.html"
    },
    {
        "id": 1237,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    GridRow({\\n      columns: { sm: 4, md: 8, lg: 12 }\\n    }) {\\n      GridCol({\\n        span: { sm: 2.5, md: 4, lg: 4 }, offset: { sm: 0, md: 2.5, lg: 4 }\\n      }) {\\n        Row().backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_grid-span-value.html"
    },
    {
        "id": 1238,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-nullish-coalescing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-nullish-coalescing.html"
    },
    {
        "id": 1239,
        "pre": "function getText1(): string | undefined {\\n  return 'bar';\\n}\\n\\nfunction getText2(): string | null {\\n  return 'bar';\\n}\\n\\nconst foo1: string | undefined = getText1();\\nexport const v1 = foo1 ?? 'a string';\\n\\nconst foo2: string | null = getText2();\\nexport const v2 = foo2 ?? 'a string';",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-nullish-coalescing.html"
    },
    {
        "id": 1240,
        "pre": "import BuildProfile from 'BuildProfile';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { insightIntent } from '@kit.IntentsKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相关模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-intents-share.html"
    },
    {
        "id": 1241,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit'\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customsecurityconfig.html"
    },
    {
        "id": 1242,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/comma-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_comma-spacing.html"
    },
    {
        "id": 1243,
        "pre": "// 默认不允许逗号前有空格，逗号后需要一个或多个空格\\nexport const arr1 = ['1', '2'];\\nexport const arr2 = ['1',, '3'];\\n\\nfunction qur(a: string, b: string) {\\n  return `${a}${b}`;\\n}\\nqur('1', '2');",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_comma-spacing.html"
    },
    {
        "id": 1244,
        "pre": "// 默认不允许逗号前有空格，逗号后需要一个或多个空格\\nexport const arr = ['1' , '2'];\\n\\nfunction qur(a: string ,b: string) {\\n  return `${a}${b}`;\\n}\\nqur('1' ,'2');",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_comma-spacing.html"
    },
    {
        "id": 1245,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-explicit-any\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-explicit-any.html"
    },
    {
        "id": 1246,
        "pre": "export const age1 = 17;\\nexport const age2 = [age1];\\nexport const age3 = [age1];\\n\\nexport function greet1(): string {\\n  return 'greet';\\n}\\n\\nexport function greet2(): string[] {\\n  return ['greet'];\\n}\\n\\nexport function greet4(): string[][] {\\n  return [['greet']];\\n}\\n\\nexport function greet5(param: readonly string[]): string {\\n  return param[age1];\\n}\\n\\nexport function greet6(param: readonly string[]): string[] {\\n  return [...param];\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-explicit-any.html"
    },
    {
        "id": 1247,
        "pre": "export const age1: any = 17;\\nexport const age2: any = [age1];\\nexport const age3: any = [age1];\\n\\nexport function greet1(): any {\\n  return 'greet';\\n}\\n\\nexport function greet2(): any[] {\\n  return ['greet'];\\n}\\n\\nexport function greet4(): any[][] {\\n  return [['greet']];\\n}\\n\\nexport function greet5(param: readonly any[]): any {\\n  return param[age1];\\n}\\n\\nexport function greet6(param: readonly any[]): any[] {\\n  return [...param];\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-explicit-any.html"
    },
    {
        "id": 1248,
        "pre": "import { cloudStorage } from '@kit.CloudFoundationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nlet storageBucket: cloudStorage.StorageBucket = cloudStorage.bucket();\\n\\n@Component\\nexport struct testPage {\\n  build() {\\n  }\\n\\n  // 删除云侧文件\\n  deleteFile() {\\n    // 删除云存储默认实例中screenshot/screenshot_20250115_155321.jpg文件\\n    storageBucket.deleteFile('screenshot/screenshot_20250115_155321.jpg').then(() => {\\n      hilog.info(0x0000, 'testTag', `Succeeded in deleting file.`);\\n    }).catch((err: BusinessError) => {\\n      hilog.error(0x0000, 'testTag', `Failed to delete file, code: ${err.code}, message: ${err.message}`);\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "操作步骤",
        "parent_text": "  操作步骤 调用StorageBucket.deleteFile删除云侧的文件。     删除操作不可逆，一旦执行，文件会被物理删除，不可找回。   完整示例代码如下：      删除文件后，可以登录AppGallery Connect，选择项目，进入“云存储”界面查看文件列表。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section139301633201411\\\"'> <a name='\\\"section139301633201411\\\"'></a><a name='\\\"section139301633201411\\\"'></a> <h4>操作步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/cloudfoundation-cloudstorage#section1290422653419\\\"' target='\\\"_blank\\\"'>StorageBucket.deleteFile</a>删除云侧的文件。</p> <div class='\\\"caution\\\"'> <span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120101.80335737539228777519085362620902:50001231000000:2800:A7EC0AA2BA0C11FBE57E235DB086F47035A9A6D745D609F56D3163AF1481061B.png\\\"'/> </span> <div class='\\\"cautionbody\\\"'> <p>删除操作不可逆，一旦执行，文件会被物理删除，不可找回。</p> </div> </div> <p>完整示例代码如下：</p>  <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120101.83378343219091970160025478532741:50001231000000:2800:45477389B0C840D40FB1D9743879DC09239D1D4949F8247AB2E3473E59A2AA8A.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>删除文件后，可以登录<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>，选择项目，进入“云存储”界面查看文件列表。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-storage-delete-file.html"
    },
    {
        "id": 1249,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-implied-eval\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-implied-eval.html"
    },
    {
        "id": 1250,
        "pre": "function alert(arg: string) {\\n  console.log(arg);\\n}\\n\\nconst time = 100;\\n\\nsetTimeout(() => {\\n  alert('Hi!');\\n}, time);\\n\\nsetInterval(() => {\\n  alert('Hi!');\\n}, time);\\n\\nconst fn = () => {\\n  console.info('fn');\\n};\\nsetTimeout(fn, time);\\n\\nclass Foo {\\n  public static fn = () => {\\n    console.info('static');\\n  };\\n\\n  public meth() {\\n    console.info('method');\\n  }\\n}\\n\\nsetTimeout(Foo.fn, time);",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-implied-eval.html"
    },
    {
        "id": 1251,
        "pre": "const time = 100;\\nsetTimeout('alert(`Hi!`);', time);\\n\\nsetInterval('alert(`Hi!`);', time);\\n\\nconst fn1 = '() = {}';\\nsetTimeout(fn1, time);\\n\\nconst fn2 = () => {\\n  return 'x = 10';\\n};\\nsetTimeout(fn2(), time);\\n\\nexport const fn3 = new Function('a', 'b', 'return a + b');",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-implied-eval.html"
    },
    {
        "id": 1252,
        "pre": "let context = getContext(this) as common.UIAbilityContext;\\nlet thirdOpenId = '123xxxx'; // thirdOpenId表示游戏官方账号ID\\nlet teamPlayerId = '456xxx'; // teamPlayerId表示玩家华为账号对应的teamPlayerId\\ntry {\\n  gamePlayer.bindPlayer(context, thirdOpenId, teamPlayerId).then(() => {\\n    hilog.info(0x0000, 'testTag', `Succeeded in binding.`);\\n  }).catch((error: BusinessError) => {\\n    hilog.error(0x0000, 'testTag', `Failed to bind. Code: ${error.code}, message: ${error.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  hilog.error(0x0000, 'testTag', `Failed to bind. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]开发步骤",
        "parent_text": "  [h2]开发步骤 调用bindPlayer接口绑定teamPlayerId与游戏官方账号thirdOpenId 。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section61551822182320\\\"'> <a name='\\\"section61551822182320\\\"'></a><a name='\\\"section61551822182320\\\"'></a> <h4>[h2]开发步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameplayer#section2090261116551\\\"' target='\\\"_blank\\\"'>bindPlayer</a>接口绑定teamPlayerId与游戏官方账号thirdOpenId 。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameplayer-needbind.html"
    },
    {
        "id": 1253,
        "pre": "import { fileUriService } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-api-path-conversion.html"
    },
    {
        "id": 1254,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/number-init-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-number-init-check.html"
    },
    {
        "id": 1255,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unused-vars\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unused-vars.html"
    },
    {
        "id": 1256,
        "pre": "const x = 10;\\nconsole.info(`${x}`);\\n\\n((foo) => {\\n  return foo;\\n})();\\n\\nconst num = 50;\\nlet myFunc1: () => number = () => num;\\nmyFunc1 = () => setTimeout(() => {\\n  // myFunc is considered used\\n  myFunc1();\\n}, num);",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unused-vars.html"
    },
    {
        "id": 1257,
        "pre": "const x = 10;\\n\\n((foo) => {\\n  return 'hello';\\n})();\\n\\nconst num = 50;\\nconst myFunc1: () => number = () => num;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unused-vars.html"
    },
    {
        "id": 1258,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-inferrable-types\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-inferrable-types.html"
    },
    {
        "id": 1259,
        "pre": "const num = 10;\\nexport const a1 = 10n;\\nexport const a2 = BigInt(num);\\nexport const a3 = !num;\\nexport const a4 = Boolean(null);\\nexport const a5 = true;\\nexport const a6 = null;\\n\\nexport class Foo {\\n  public prop = num;\\n}\\n\\nexport function fn(a = num, b = true): void {\\n  console.info(`${a}${b}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-inferrable-types.html"
    },
    {
        "id": 1260,
        "pre": "const num: number = 10;\\nexport const a1: bigint = 10n;\\nexport const a2: bigint = BigInt(num);\\nexport const a3: boolean = !num;\\nexport const a4: boolean = Boolean(null);\\nexport const a5: boolean = true;\\nexport const a6: null = null;\\n\\nexport class Foo {\\n  public prop: number = num;\\n}\\n\\nexport function fn(a: number = num, b: boolean = true): void {\\n  console.info(`${a}${b}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-inferrable-types.html"
    },
    {
        "id": 1261,
        "pre": "aboutToAppear(): void {\\n  this.setOnPageShowListener();\\n}\\n\\nprivate async setOnPageShowListener(){\\n  try {\\n      this. readerComponentController.on('pageShow', (data: readerCore.PageDataInfo): void => {\\n      // 开发者可在此保存内容分页排版数据，利用data.resourceIndex及data.startDomPos数据调用startPlay接口继续阅读\\n      hilog.info(0x0000, 'testTag', 'pageshow: data is: ' + JSON.stringify(data));\\n    });\\n  } catch (err) {\\n    hilog.error(0x0000, 'testTag', `failed to init, Code is ${err.code}, message is ${err.message}`);\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        开发者可在on('pageShow')接口回调中将阅读进度实时保存到数据库当中，防止用户异常退出阅读器时的进度丢失。当用户下次继续阅读时，可将保存domPos及resourceIndex属性传入到startPlay接口中，用于阅读进度的恢复。         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>        开发者可在on('pageShow')接口回调中将阅读进度实时保存到数据库当中，防止用户异常退出阅读器时的进度丢失。当用户下次继续阅读时，可将保存domPos及resourceIndex属性传入到<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/reader-read-core#section3667128165411\\\"' target='\\\"_blank\\\"'>startPlay</a>接口中，用于阅读进度的恢复。         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-progress.html"
    },
    {
        "id": 1262,
        "pre": "let context = getContext(this) as common.UIAbilityContext;\\nlet request: gamePlayer.ThirdUserInfo = {\\n  thirdOpenId: '123xxxx', // 游戏官方账号ID\\n  isRealName: true // 玩家是否实名,该值为true时表示已实名,为false时表示未实名\\n};\\ntry {\\n  gamePlayer.verifyLocalPlayer(context, request).then(() => {\\n    hilog.info(0x0000, 'testTag', `Succeeded in verifying.`);\\n  }).catch((error: BusinessError) => {\\n    hilog.error(0x0000, 'testTag', `Failed to verify. Code: ${error.code}, message: ${error.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  hilog.error(0x0000, 'testTag', `Failed to verify. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 调用verifyLocalPlayer接口对用户设备登录华为账号的实名认证和游戏防沉迷进行合规校验。      若玩家未完成实名认证，Game Service Kit将向玩家弹出实名认证弹框要求玩家进行实名认证。若玩家取消实名认证则返回1002000004错误码，游戏可再次调用unionLogin接口弹出实名认证弹框，或直接强制玩家下线游戏。 若玩家账号实名认证为未成年人，Game Service Kit将启动未成年人游戏时间自动检测功能，不在指定时间内登录游戏，Game Service Kit将强制玩家退出游戏并返回1002000006错误码。     ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1740153012109\\\"'> <a name='\\\"section1740153012109\\\"'></a><a name='\\\"section1740153012109\\\"'></a> <h4>开发步骤</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameplayer#section15119154416715\\\"' target='\\\"_blank\\\"'>verifyLocalPlayer</a>接口对用户设备登录华为账号的实名认证和游戏防沉迷进行合规校验。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120108.59990715223493085915350658055139:50001231000000:2800:FEE1F0B3CAD07043A3B2355152F9F6A784B562903EC304D240F4048BE5564681.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <ul> <li>若玩家未完成实名认证，Game Service Kit将向玩家弹出实名认证弹框要求玩家进行实名认证。若玩家取消实名认证则返回<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-error-code#section206921217496\\\"' target='\\\"_blank\\\"'>1002000004</a>错误码，游戏可再次调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameplayer#section157848375136\\\"' target='\\\"_blank\\\"'>unionLogin</a>接口弹出实名认证弹框，或直接强制玩家下线游戏。</li> <li>若玩家账号实名认证为未成年人，Game Service Kit将启动未成年人游戏时间自动检测功能，不在指定时间内登录游戏，Game Service Kit将强制玩家退出游戏并返回<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-error-code#section4418848101513\\\"' target='\\\"_blank\\\"'>1002000006</a>错误码。</li> </ul> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-anti-indulgence.html"
    },
    {
        "id": 1263,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customtranferconfig.html"
    },
    {
        "id": 1264,
        "pre": "function notify(who: string, what: string) {\\n  console.log(`Dear ${who}, a message for you: ${what}`)\\n}\\n\\nnotify('Jack', 'You look great today')",
        "type": "Reference",
        "function_call": "function notify(who: string, what: string)",
        "function_name": "程序性能",
        "parent_text": "程序性能为了保证程序的正确性，动态类型语言不得不在运行时检查对象的类型。例如，JS不允许访问undefined的属性。但是检查一个值是否为undefined的唯一的办法是在运行时进行一次类型检查。所有的JS引擎都会做如下的事：如果一个值不是undefined，那么可以访问其属性，否则抛出异常。现代JS引擎可以很好地对这类操作进行优化，但是总有一些运行时的检查是无法被消除的，这就使得程序变慢了。由于TS总是先被编译成JS，所以在TS代码中，也会面临相同的问题。ArkTS解决了这个问题。由于使能了静态类型检查，ArkTS代码将会被编译成方舟字节码文件，而不是JS代码。因此，ArkTS运行速度更快，更容易被进一步地优化。 Null Safety  在大多数情况下，函数notify会接受两个string类型的变量作为输入，产生一个新的字符串。但是，如果将一些特殊值作为输入，例如notify(null, undefined)，情况会怎么样呢？ 程序仍会正常运行，输出预期值：Dear null, a message for you: undefined。一切看起来正常，但是请注意，为了保证该场景下程序的正确性，引擎总是在运行时进行类型检查，执行类似以下的伪代码。 function __internal_tostring(s: any): string {\\n  if (typeof s === 'string')\\n    return s\\n  if (s === undefined)\\n    return 'undefined'\\n  if (s === null)\\n    return 'null'\\n  // ...\\n} 现在想象一下，如果函数notify是某些复杂的负载场景中的一部分，而不仅仅是打印日志，那么在运行时执行像__internal_tostring的类型检查将会是一个性能问题。 如果可以保证在运行时，只有string类型的值（不会是其他值，例如null或者undefined）可以被传入函数notify呢？在这种情况下，因为可以确保没有其他边界情况，像__internal_tostring的检查就是多余的了。对于这个场景，这样的机制叫做“null-safety”，也就是说，保证null不是一个合法的string类型变量的值。如果ArkTS有了这个特性，类型不符合的代码将无法编译。 function notify(who: string, what: string) {\\n  console.log(`Dear ${who}, a message for you: ${what}`)\\n}\\n\\nnotify('Jack', 'You look great today')\\nnotify(null, undefined) // 编译时错误 TS通过打开编译选项strictNullChecks来实现此特性。但是TS是被编译成JS的，而JS没有这个特性，因此严格null检查只在编译时起作用。从程序稳定性和性能角度考虑，ArkTS将“null-safety”视为一个重要的特性。这就是为什么ArkTS强制进行严格null检查，在ArkTS中，上面的代码总是编译报错。作为交换，这样的代码可以给ArkTS引擎带来更多的信息和有关值的类型保证，这有助于更好地优化性能。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"程序性能\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212390__%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD\\\"'></a><a name='\\\"%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD\\\"'></a><h4>程序性能</h4><p>为了保证程序的正确性，动态类型语言不得不在运行时检查对象的类型。例如，JS不允许访问undefined的属性。但是检查一个值是否为undefined的唯一的办法是在运行时进行一次类型检查。所有的JS引擎都会做如下的事：如果一个值不是undefined，那么可以访问其属性，否则抛出异常。现代JS引擎可以很好地对这类操作进行优化，但是总有一些运行时的检查是无法被消除的，这就使得程序变慢了。由于TS总是先被编译成JS，所以在TS代码中，也会面临相同的问题。ArkTS解决了这个问题。由于使能了静态类型检查，ArkTS代码将会被编译成方舟字节码文件，而不是JS代码。因此，ArkTS运行速度更快，更容易被进一步地优化。</p> <p><strong>Null Safety</strong></p>  <p>在大多数情况下，函数notify会接受两个string类型的变量作为输入，产生一个新的字符串。但是，如果将一些特殊值作为输入，例如notify(null, undefined)，情况会怎么样呢？</p> <p>程序仍会正常运行，输出预期值：Dear null, a message for you: undefined。一切看起来正常，但是请注意，为了保证该场景下程序的正确性，引擎总是在运行时进行类型检查，执行类似以下的伪代码。</p> <pre class='\\\"typescript\\\"'>function __internal_tostring(s: any): string {\\n  if (typeof s === 'string')\\n    return s\\n  if (s === undefined)\\n    return 'undefined'\\n  if (s === null)\\n    return 'null'\\n  // ...\\n}</pre> <p>现在想象一下，如果函数notify是某些复杂的负载场景中的一部分，而不仅仅是打印日志，那么在运行时执行像__internal_tostring的类型检查将会是一个性能问题。</p> <p>如果可以保证在运行时，只有string类型的值（不会是其他值，例如null或者undefined）可以被传入函数notify呢？在这种情况下，因为可以确保没有其他边界情况，像__internal_tostring的检查就是多余的了。对于这个场景，这样的机制叫做“null-safety”，也就是说，保证null不是一个合法的string类型变量的值。如果ArkTS有了这个特性，类型不符合的代码将无法编译。</p> <pre class='\\\"typescript\\\"'>function notify(who: string, what: string) {\\n  console.log(`Dear ${who}, a message for you: ${what}`)\\n}\\n\\nnotify('Jack', 'You look great today')\\nnotify(null, undefined) // 编译时错误</pre> <p>TS通过打开编译选项strictNullChecks来实现此特性。但是TS是被编译成JS的，而JS没有这个特性，因此严格null检查只在编译时起作用。从程序稳定性和性能角度考虑，ArkTS将“null-safety”视为一个重要的特性。这就是为什么ArkTS强制进行严格null检查，在ArkTS中，上面的代码总是编译报错。作为交换，这样的代码可以给ArkTS引擎带来更多的信息和有关值的类型保证，这有助于更好地优化性能。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-migration-background.html"
    },
    {
        "id": 1265,
        "pre": "// lib.ts\\nexport class C {\\n  v: string\\n}\\n\\nexport let c = new C()\\n\\n// app.ets\\nimport { C, c } from './lib'\\n\\nfunction foo(c: C) {\\n  c.v.length\\n}\\n\\nfoo(c)  //  运行时异常：v is undefined",
        "type": "Reference",
        "function_call": null,
        "function_name": "支持与TS/JS的交互",
        "parent_text": "支持与TS/JS的交互ArkTS支持与TS/JS的高效互操作，在当前版本上，ArkTS运行时兼容动态类型对象语义。在与TS/JS交互的场景下，将TS/JS的数据和对象在ArkTS中当作ArkTS的数据和对象使用时，可能会绕过ArkTS的静态编译检查，造成非预期的行为或引入额外的开销。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"支持与tsjs的交互\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178212390__%E6%94%AF%E6%8C%81%E4%B8%8Etsjs%E7%9A%84%E4%BA%A4%E4%BA%92\\\"'></a><a name='\\\"%E6%94%AF%E6%8C%81%E4%B8%8Etsjs%E7%9A%84%E4%BA%A4%E4%BA%92\\\"'></a><h4>支持与TS/JS的交互</h4><p>ArkTS支持与TS/JS的高效互操作，在当前版本上，ArkTS运行时兼容动态类型对象语义。在与TS/JS交互的场景下，将TS/JS的数据和对象在ArkTS中当作ArkTS的数据和对象使用时，可能会绕过ArkTS的静态编译检查，造成非预期的行为或引入额外的开销。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-migration-background.html"
    },
    {
        "id": 1266,
        "pre": "import { geoLocationManager } from '@kit.LocationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { geoLocationManager } from '@kit.LocationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/weather-service-getweather.html"
    },
    {
        "id": 1267,
        "pre": "import { weatherService } from '@kit.WeatherServiceKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { weatherService } from '@kit.WeatherServiceKit';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/weather-service-getweather.html"
    },
    {
        "id": 1268,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/await-thenable\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_await-thenable.html"
    },
    {
        "id": 1269,
        "pre": "async function test() {\\n  await Promise.resolve('value');\\n}\\n\\nexport { test };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_await-thenable.html"
    },
    {
        "id": 1270,
        "pre": "async function test() {\\n  await 'value';\\n}\\n\\nexport { test };",
        "type": "Import",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "async function test() {\\n  await 'value';\\n}\\n\\nexport { test };",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_await-thenable.html"
    },
    {
        "id": 1271,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/adjacent-overload-signatures\\\": \\\"error\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_adjacent-overload-signatures.html"
    },
    {
        "id": 1272,
        "pre": "import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { abilityAccessCtrl, common, PermissionRequestResult } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-button-permissiononsetting.html"
    },
    {
        "id": 1273,
        "pre": "this.readerSetting.flipMode = '1'; // 0代表仿真翻页，1代表横滑翻页",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "修改翻页方式。",
        "import_module": null,
        "parent": "<li>修改翻页方式。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/reader-setting-other.html"
    },
    {
        "id": 1274,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-reduce-pangesture-distance\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-reduce-ges-distance.html"
    },
    {
        "id": 1275,
        "pre": "import { hiTraceMeter } from '@kit.PerformanceAnalysisKit'\\n\\n@Entry\\n@Component\\nstruct PanGestureExample {\\n  @State offsetX: number = 0\\n  @State offsetY: number = 0\\n  @State positionX: number = 0\\n  @State positionY: number = 0\\n  private panOption: PanGestureOptions = new PanGestureOptions({ direction: PanDirection.Left | PanDirection.Right })\\n\\n  build() {\\n    Column() {\\n      Column() {\\n        Text('PanGesture offset:\\\\nX: ' + this.offsetX + '\\\\n' + 'Y: ' + this.offsetY)\\n      }\\n      .height(200)\\n      .width(300)\\n      .padding(20)\\n      .border({ width: 3 })\\n      .margin(50)\\n      .translate({ x: this.offsetX, y: this.offsetY, z: 0 }) // 以组件左上角为坐标原点进行移动\\n      // 左右拖动触发该手势事件\\n      .gesture(\\n        PanGesture(this.panOption)\\n          .onActionStart((event: GestureEvent) => {\\n            console.info('Pan start')\\n            hiTraceMeter.startTrace(\\\"PanGesture\\\", 1)\\n          })\\n          .onActionUpdate((event: GestureEvent) => {\\n            if (event) {\\n              this.offsetX = this.positionX + event.offsetX\\n              this.offsetY = this.positionY + event.offsetY\\n            }\\n          })\\n          .onActionEnd(() => {\\n            this.positionX = this.offsetX\\n            this.positionY = this.offsetY\\n            console.info('Pan end')\\n            hiTraceMeter.finishTrace(\\\"PanGesture\\\", 1)\\n          })\\n      )\\n\\n      Button('修改PanGesture触发条件')\\n        .onClick(() => {\\n          // 设定的距离在阈值10以内\\n          this.panOption.setDistance(4)\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-reduce-ges-distance.html"
    },
    {
        "id": 1276,
        "pre": "import { hiTraceMeter } from '@kit.PerformanceAnalysisKit'\\n\\n@Entry\\n@Component\\nstruct PanGestureExample {\\n  @State offsetX: number = 0\\n  @State offsetY: number = 0\\n  @State positionX: number = 0\\n  @State positionY: number = 0\\n  private panOption: PanGestureOptions = new PanGestureOptions({ direction: PanDirection.Left | PanDirection.Right })\\n\\n  build() {\\n    Column() {\\n      Column() {\\n        Text('PanGesture offset:\\\\nX: ' + this.offsetX + '\\\\n' + 'Y: ' + this.offsetY)\\n      }\\n      .height(200)\\n      .width(300)\\n      .padding(20)\\n      .border({ width: 3 })\\n      .margin(50)\\n      .translate({ x: this.offsetX, y: this.offsetY, z: 0 })\\n      // 左右拖动触发该手势事件\\n      .gesture(\\n        PanGesture(this.panOption)\\n          .onActionStart((event: GestureEvent) => {\\n            console.info('Pan start')\\n            hiTraceMeter.startTrace(\\\"PanGesture\\\", 1)\\n          })\\n          .onActionUpdate((event: GestureEvent) => {\\n            if (event) {\\n              this.offsetX = this.positionX + event.offsetX\\n              this.offsetY = this.positionY + event.offsetY\\n            }\\n          })\\n          .onActionEnd(() => {\\n            this.positionX = this.offsetX\\n            this.positionY = this.offsetY\\n            console.info('Pan end')\\n            hiTraceMeter.finishTrace(\\\"PanGesture\\\", 1)\\n          })\\n      )\\n\\n      Button('修改PanGesture触发条件')\\n        .onClick(() => {\\n          // 设定的距离超过阈值10\\n          this.panOption.setDistance(100)\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-reduce-ges-distance.html"
    },
    {
        "id": 1277,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unsafe-assignment\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-assignment.html"
    },
    {
        "id": 1278,
        "pre": "declare namespace Global {\\n  type ObjectType = string | number;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]注意事项",
        "parent_text": "[h2]注意事项如果在types字段中填写包名或者包所在位置的相对路径，需要在工程文件/entry/oh-package.json5中dependencies作如下配置： \\\"dependencies\\\": {\\n  \\\"@types/chai\\\": \\\"latest\\\",\\n  \\\"@types/mocha\\\": \\\"latest\\\"\\n} 如果在types字段中填写声明文件所在相对路径，前提是在模块下存在相应的声明文件，比如模块下存在src/main/ets/pages/global.d.ts声明文件，声明文件内容如下所示：  通过types全局引入后，对全局类型的使用示例如下： // 在entry/src/main/ets/pages/Index.ets\\nlet a: Chai.Message;\\nlet b: Mocha.HookFunction;\\nlet c: Global.ObjectType; ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"注意事项\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458917__%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\\\"'></a><a name='\\\"%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\\\"'></a><h4>[h2]注意事项</h4><p>如果在types字段中填写包名或者包所在位置的相对路径，需要在工程文件/entry/oh-package.json5中dependencies作如下配置：</p> <pre class='\\\"json\\\"'>\\\"dependencies\\\": {\\n  \\\"@types/chai\\\": \\\"latest\\\",\\n  \\\"@types/mocha\\\": \\\"latest\\\"\\n}</pre> <p>如果在types字段中填写声明文件所在相对路径，前提是在模块下存在相应的声明文件，比如模块下存在src/main/ets/pages/global.d.ts声明文件，声明文件内容如下所示：</p>  <p>通过types全局引入后，对全局类型的使用示例如下：</p> <pre class='\\\"typescript\\\"'>// 在entry/src/main/ets/pages/Index.ets\\nlet a: Chai.Message;\\nlet b: Mocha.HookFunction;\\nlet c: Global.ObjectType;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkoptions-guide.html"
    },
    {
        "id": 1279,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/restrict-template-expressions\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_restrict-template-expressions.html"
    },
    {
        "id": 1280,
        "pre": "const arg: string | undefined = 'foo';\\nexport const msg1 = `arg = ${arg}`;\\nexport const msg2 = `arg = ${arg || 'default'}`;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_restrict-template-expressions.html"
    },
    {
        "id": 1281,
        "pre": "const arg1 = ['1', '2'];\\nexport const msg1 = `arg1 = ${arg1}`;\\n\\ninterface GeneratedObjectLiteralInterface {\\n  name: string;\\n}\\n\\nconst arg2: GeneratedObjectLiteralInterface = { name: 'Foo' };\\nexport const msg2 = `arg2 = ${arg2 || null}`;",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_restrict-template-expressions.html"
    },
    {
        "id": 1282,
        "pre": "this.mapController.setZoomControlsEnabled(true);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]缩放控件",
        "parent_text": "  [h2]缩放控件 Map Kit提供了内置的缩放控件，默认情况下是开启的。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section553mcpsimp\\\"'> <a name='\\\"section553mcpsimp\\\"'></a><a name='\\\"section553mcpsimp\\\"'></a> <h4>[h2]缩放控件</h4> <p>Map Kit提供了内置的缩放控件，默认情况下是开启的。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-controls-and-interaction.html"
    },
    {
        "id": 1283,
        "pre": "// 开启比例尺控件  \\nthis.mapController.setScaleControlsEnabled(true);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]比例尺",
        "parent_text": "  [h2]比例尺 Map Kit提供了内置的比例尺控件，默认情况下是关闭的。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section18193132811916\\\"'> <a name='\\\"section18193132811916\\\"'></a><a name='\\\"section18193132811916\\\"'></a> <h4>[h2]比例尺</h4> <p>Map Kit提供了内置的比例尺控件，默认情况下是关闭的。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-controls-and-interaction.html"
    },
    {
        "id": 1284,
        "pre": "// 开启指南针控件\\nthis.mapController.setCompassControlsEnabled(true);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]指南针",
        "parent_text": "  [h2]指南针 Map Kit提供了内置的指南针控件，默认情况下是开启的，控件位置默认显示在地图的右上角。如果是启用状态，当地图不是指向正北方向或者发生倾斜时，地图右上角会显示一个指南针图标，点击指南针可使地图旋转为正北方向并且取消倾斜；当地图为正北方向且未发生倾斜时，指南针图标隐藏。如果是禁用状态，将不会显示指南针图标。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section37222564580\\\"'> <a name='\\\"section37222564580\\\"'></a><a name='\\\"section37222564580\\\"'></a> <h4>[h2]指南针</h4> <p>Map Kit提供了内置的指南针控件，默认情况下是开启的，控件位置默认显示在地图的右上角。如果是启用状态，当地图不是指向正北方向或者发生倾斜时，地图右上角会显示一个指南针图标，点击指南针可使地图旋转为正北方向并且取消倾斜；当地图为正北方向且未发生倾斜时，指南针图标隐藏。如果是禁用状态，将不会显示指南针图标。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-controls-and-interaction.html"
    },
    {
        "id": 1285,
        "pre": "// 将Logo放置在右下角位置\\nthis.mapController.setLogoAlignment(mapCommon.LogoAlignment.BOTTOM_END);\\n// 设置地图边界与Logo之间的间距，单位：px\\nlet padding: mapCommon.Padding = {\\n  right: 50,\\n  bottom: 50\\n};\\nthis.mapController.setLogoPadding(padding);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]地图Logo",
        "parent_text": "  [h2]地图Logo Map Kit提供了调整地图Logo对齐方式的方法setLogoAlignment和调整地图边界与Logo之间的间距的方法setLogoPadding。需注意，地图Logo不允许被遮挡，可通过setLogoPadding方法设置地图边界区域，来避免logo被遮挡。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section7664121217221\\\"'> <a name='\\\"section7664121217221\\\"'></a><a name='\\\"section7664121217221\\\"'></a> <h4>[h2]地图Logo</h4> <p>Map Kit提供了调整地图Logo对齐方式的方法<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section2538830161810\\\"' target='\\\"_blank\\\"'>setLogoAlignment</a>和调整地图边界与Logo之间的间距的方法<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section115618542213\\\"' target='\\\"_blank\\\"'>setLogoPadding</a>。需注意，地图Logo不允许被遮挡，可通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section115618542213\\\"' target='\\\"_blank\\\"'>setLogoPadding</a>方法设置地图边界区域，来避免logo被遮挡。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-controls-and-interaction.html"
    },
    {
        "id": 1286,
        "pre": "// 步骤3 获取MonitorClient对象\\nlet monitorClient: wearEngine.MonitorClient = wearEngine.getMonitorClient(getContext(this));\\n\\n// 步骤4 查询指定指标状态（以佩戴状态为例）\\nmonitorClient.queryStatus(targetDevice.randomId, wearEngine.MonitorItem.WEAR_STATUS).then((result: wearEngine.MonitorData) => {\\n  // 获取到所查状态的状态值，处理对应业务逻辑\\n  console.info(`Succeeded in querying wear status, result is ${result.code}.`);\\n}).catch((error: BusinessError) => {\\n  // 处理调用失败时捕获到的异常\\n  console.error(`Failed to query wear status. Code is ${error.code}, message is ${error.message}.`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过MonitorData对象，返回指定指标状态的查询结果。",
        "import_module": null,
        "parent": "<li>通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section12024822410\\\"' target='\\\"_blank\\\"'>MonitorData</a>对象，返回指定指标状态的查询结果。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/query_and_subscribe_status.html"
    },
    {
        "id": 1287,
        "pre": "// 步骤3 获取MonitorClient对象\\nlet monitorClient: wearEngine.MonitorClient = wearEngine.getMonitorClient(getContext(this));\\n\\n// 步骤4 定义回调函数\\nlet callback = (monitorEventData: wearEngine.MonitorEventData) => {\\n  // 处理监听到状态变化后的业务逻辑\\n  console.info(`Succeeded in listening change of ${monitorEventData.event}, the new status is ${monitorEventData.data}.`)\\n}\\n\\n// 步骤5 调用订阅方法\\nmonitorClient.subscribeEvent(targetDevice.randomId, wearEngine.MonitorEvent.EVENT_WEAR_STATUS_CHANGED, callback).then(() => {\\n  console.info(`Succeeded in subscribing wear status.`);\\n}).catch((error: BusinessError) => {\\n  console.error(`Failed to subscribe wear status. Code is ${error.code}, message is ${error.message}.`);\\n})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用subscribeEvent方法，订阅指定指标状态变化的订阅。  通过MonitorEvent对象，订阅穿戴设备与运动健康状态。目前支持的订阅状态如下：          “设备连接状态”字段： EVENT_CONNECTION_STATUS_CHANGED。 “电量降低状态”字段：EVENT_BATTERY_LEVEL_DROPPED。 “充电状态”字段： EVENT_CHARGE_STATUS_CHANGED。 “佩戴状态”字段：EVENT_WEAR_STATUS_CHANGED。 “心率告警”字段：EVENT_HEART_RATE_ALARM。 “设备模式”字段：EVENT_POWER_MODE_CHANGED。  通过Callback<MonitorEventData>对象，返回设备状态的订阅结果。   ",
        "import_module": null,
        "parent": "<li><span>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section74368231248\\\"' target='\\\"_blank\\\"'>subscribeEvent</a>方法，订阅指定指标状态变化的订阅。</span><p></p> <ul> <li>通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section0407141762619\\\"' target='\\\"_blank\\\"'>MonitorEvent</a>对象，订阅穿戴设备与运动健康状态。目前支持的订阅状态如下：         <ul> <li>“设备连接状态”字段： EVENT_CONNECTION_STATUS_CHANGED。</li> <li>“电量降低状态”字段：EVENT_BATTERY_LEVEL_DROPPED。</li> <li>“充电状态”字段： EVENT_CHARGE_STATUS_CHANGED。</li> <li>“佩戴状态”字段：EVENT_WEAR_STATUS_CHANGED。</li> <li>“心率告警”字段：EVENT_HEART_RATE_ALARM。</li> <li>“设备模式”字段：EVENT_POWER_MODE_CHANGED。</li> </ul></li> <li>通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-base#callback\\\"' target='\\\"_blank\\\"'>Callback</a>&lt;<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section38571246164212\\\"' target='\\\"_blank\\\"'>MonitorEventData</a>&gt;对象，返回设备状态的订阅结果。</li> </ul>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/query_and_subscribe_status.html"
    },
    {
        "id": 1288,
        "pre": "import { textProcessing } from '@kit.NaturalLanguageKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "引用相关类添加至工程。 ",
        "import_module": "import { textProcessing } from '@kit.NaturalLanguageKit';",
        "parent": "<li><span>引用相关类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/natural-language-getwordsegmentation.html"
    },
    {
        "id": 1289,
        "pre": "import { textProcessing } from '@kit.NaturalLanguageKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private inputText: string = '';\\n  @State outputText: string = '';\\n\\n  build() {\\n    Column() {\\n      TextInput({ placeholder: '请输入文本' })\\n        .height(40)\\n        .fontSize(16)\\n        .width('90%')\\n        .margin(10)\\n        .onChange((value: string) => {\\n          this.inputText = value;\\n        })\\n\\n      Scroll() {\\n        Text(this.outputText)\\n          .fontSize(16)\\n          .width('90%')\\n          .margin(10)\\n      }\\n      .height('40%')\\n\\n      //调用分词接口\\n      Row() {\\n        Button('获取分词结果')\\n          .type(ButtonType.Capsule)\\n          .fontColor(Color.White)\\n          .width('45%')\\n          .margin(10)\\n          .onClick(async () => {\\n            try {\\n              let result = await textProcessing.getWordSegment(this.inputText);\\n              this.outputText = this.formatWordSegmentResult(result);\\n            } catch (err) {\\n              console.error(`getWordSegment errorCode: ${err.code}, errorMessage: ${err.message}`);\\n            }\\n          })\\n      }\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  //分词结果转义\\n  private formatWordSegmentResult(segments: textProcessing.WordSegment[]): string {\\n    let output = 'Word Segments:\\\\n';\\n    segments.forEach((segment, index) => {\\n      output += `Word[${index}]: ${segment.word}, Tag: ${segment.wordTag}\\\\n`;\\n    });\\n    return output;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": "import { textProcessing } from '@kit.NaturalLanguageKit';",
        "parent": "<div class='\\\"section\\\"' id='\\\"section191970433147\\\"'> <a name='\\\"section191970433147\\\"'></a><a name='\\\"section191970433147\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/natural-language-getwordsegmentation.html"
    },
    {
        "id": 1290,
        "pre": "import { mapCommon, map, MapComponent } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-dyntrajectories.html"
    },
    {
        "id": 1291,
        "pre": "import { AICaptionComponent, AICaptionController, AICaptionOptions } from '@kit.SpeechKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "从项目根目录进入/src/main/ets/pages/Index.ets文件，在使用AI字幕控件前，将实现AI字幕控件和其他相关的类添加至工程。 ",
        "import_module": null,
        "parent": "<li><span>从项目根目录进入/src/main/ets/pages/Index.ets文件，在使用AI字幕控件前，将实现AI字幕控件和其他相关的类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/speech-aicaption-guide.html"
    },
    {
        "id": 1292,
        "pre": "import { AICaptionComponent, AICaptionOptions, AICaptionController, AudioData } from '@kit.SpeechKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nconst TAG = 'AI_CAPTION_DEMO'\\n\\nclass Logger {\\n  static info(...msg: string[]) {\\n    hilog.info(0x0000, TAG, msg.join())\\n  }\\n\\n  static error(...msg: string[]) {\\n    hilog.error(0x0000, TAG, msg.join())\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private captionOption?: AICaptionOptions;\\n  private controller: AICaptionController = new AICaptionController();\\n  @State isShown: boolean = false;\\n  isReading: boolean = false;\\n\\n  aboutToAppear(): void {\\n    // AI字幕初始化参数，设置字幕的不透明度\\n    this.captionOption = {\\n      initialOpacity: 1,\\n      onPrepared: () => {\\n        Logger.info('onPrepared')\\n      },\\n      onError: (error: BusinessError) => {\\n        Logger.error(`AICaption component error. Error code: ${error.code}, message: ${error.message}`)\\n      }\\n    }\\n  }\\n\\n  async readPcmAudio() {\\n    this.isReading = true;\\n    // chineseAudio.pcm文件放在entry\\\\src\\\\main\\\\resources\\\\base\\\\media路径下\\n    const fileData: Uint8Array = await getContext(this).resourceManager.getMediaContent($r('app.media.chineseAudio'));\\n    const bufferSize = 640;\\n    const byteLength = fileData.byteLength;\\n    let offset = 0;\\n    Logger.info(`Pcm data total bytes: ${byteLength.toString()}`)\\n    let startTime = new Date().getTime();\\n    while (offset < byteLength) {\\n      //模拟实际情况，读文件比录音机返回流快，所以要等待一段时间\\n      let nextOffset = offset + bufferSize\\n      if (offset > byteLength) {\\n        this.isReading = false;\\n        return\\n      }\\n      const arrayBuffer = fileData.buffer.slice(offset, nextOffset);\\n      let data = new Uint8Array(arrayBuffer);\\n      const audioData: AudioData = {\\n        data: data\\n      }\\n\\n      if (this.controller) {\\n        this.controller.writeAudio(audioData)\\n      }\\n      offset = offset + bufferSize;\\n      const waitTime = bufferSize / 32\\n      await this.sleep(waitTime)\\n    }\\n    let endTime = new Date().getTime()\\n    this.isReading = false;\\n    Logger.info(`Audio play time: ${JSON.stringify(endTime - startTime)}`)\\n  }\\n\\n  sleep(time: number): Promise<void> {\\n    return new Promise(resolve => setTimeout(resolve, time))\\n  }\\n\\n  build() {\\n    Column({ space: 20 }) {\\n      Button('切换字幕显示状态:' + (this.isShown ? '显示' : '隐藏'))\\n        .backgroundColor('#B8BDA0')\\n        .width(200)\\n        .onClick(() => {\\n          this.isShown = !this.isShown;\\n        })\\n      Button('读取PCM音频')\\n        .backgroundColor('#B8BDA0')\\n        .width(200)\\n        .onClick(() => {\\n          if (!this.isReading) {\\n            this.readPcmAudio()\\n          }\\n        })\\n      Divider()\\n      // 调用AICaptionComponent组件初始化字幕\\n      AICaptionComponent({\\n        isShown: this.isShown,\\n        controller: this.controller,\\n        options: this.captionOption\\n      })\\n        .width('80%')\\n        .height(100)\\n      Divider()\\n      if (this.isShown) {\\n        Text('上面是字幕区域')\\n          .fontColor(Color.White)\\n      }\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .padding(10)\\n    .backgroundColor('#7A7D6A')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例 Index.ets  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1976852613552\\\"'> <a name='\\\"section1976852613552\\\"'></a><a name='\\\"section1976852613552\\\"'></a> <h4>开发实例</h4> <p>Index.ets</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/speech-aicaption-guide.html"
    },
    {
        "id": 1293,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-delete-file.html"
    },
    {
        "id": 1294,
        "pre": "@Builder\\nfunction MyBuilder(value: string, size: number) {\\n  Text(value)\\n    .fontSize(size)\\n}\\n\\n@Builder\\nfunction YourBuilder(value: string, size: number) {\\n  Text(value)\\n    .fontSize(size)\\n    .fontColor(Color.Pink)\\n}\\n\\nconst builderArr: WrappedBuilder<[string, number]>[] = [wrapBuilder(MyBuilder), wrapBuilder(YourBuilder)];\\n\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @Builder testBuilder() {\\n    ForEach(builderArr, (item: WrappedBuilder<[string, number]>) => {\\n      item.builder('Hello World', 30)\\n    }\\n\\n    )\\n  }\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        this.testBuilder()\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "@Builder方法赋值给变量在UI语法中使用",
        "parent_text": "@Builder方法赋值给变量在UI语法中使用自定义组件Index使用ForEach来进行不同@Builder函数的渲染，可以使用builderArr声明的wrapBuilder数组进行不同@Builder函数效果体现。整体代码会较整洁。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"builder方法赋值给变量在ui语法中使用\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178052634__builder%E6%96%B9%E6%B3%95%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8F%98%E9%87%8F%E5%9C%A8ui%E8%AF%AD%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8\\\"'></a><a name='\\\"builder%E6%96%B9%E6%B3%95%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8F%98%E9%87%8F%E5%9C%A8ui%E8%AF%AD%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8\\\"'></a><h4>@Builder方法赋值给变量在UI语法中使用</h4><p>自定义组件Index使用ForEach来进行不同@Builder函数的渲染，可以使用builderArr声明的wrapBuilder数组进行不同@Builder函数效果体现。整体代码会较整洁。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-wrapbuilder.html"
    },
    {
        "id": 1295,
        "pre": "let context = getContext(this) as common.UIAbilityContext;\\nlet thirdAccountInfo1: gamePlayer.ThirdAccountInfo = {\\n  'accountName': 'testName1', // 游戏开放给玩家接入的账号类型名字，例如“官方账号”、“xx账号”等，并不是具体某个玩家ID或开发者ID。\\n  'accountIcon': $r('app.media.icon') // 游戏官方账号图标资源信息，注意unionLogin接口传参的所有图标总大小不要超过35KB。\\n};\\nlet request: gamePlayer.UnionLoginParam = {\\n  showLoginDialog: true,\\n  thirdAccountInfos: [\\n    thirdAccountInfo1    \\n  ]\\n};\\ntry {\\n  gamePlayer.unionLogin(context, request).then((result: gamePlayer.UnionLoginResult) => {\\n    hilog.info(0x0000, 'testTag', `Succeeded in logining: ${result?.accountName}`);\\n  }).catch((error: BusinessError) => {\\n    hilog.error(0x0000, 'testTag', `Failed to login. Code: ${error.code}, message: ${error.message}`);\\n  });\\n} catch (error) {\\n  let err = error as BusinessError;\\n  hilog.error(0x0000, 'testTag', `Failed to login. Code: ${err.code}, message: ${err.message}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "联合登录",
        "parent_text": "  联合登录 初始化成功后，游戏可调用unionLogin接口进行联合登录，Game Service Kit向玩家展示联合登录面板。             通过联合登录接口获取到accountName，游戏可根据其值进行如下处理：         accountName为“hw_account”时，通过Account Kit对应的创建授权/登录请求接口，获取用于服务器校验的Authorization Code信息。 accountName为unionLogin接口传入的thirdAccountInfo.accountName或“official_account”时，游戏官方账号自行登录处理。      ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section5809182717815\\\"'> <a name='\\\"section5809182717815\\\"'></a><a name='\\\"section5809182717815\\\"'></a> <h4>联合登录</h4> <p>初始化成功后，游戏可调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice-gameplayer#section157848375136\\\"' target='\\\"_blank\\\"'>unionLogin</a>接口进行联合登录，Game Service Kit向玩家展示联合登录面板。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120107.51038702758891050041041070370145:50001231000000:2800:944E8131DAFF306A288067DD2A24045DA89EC8E11E81A8368A6F96A9E15C57D0.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <div class='\\\"p\\\"'>        通过联合登录接口获取到accountName，游戏可根据其值进行如下处理：        <ul> <li>accountName为“hw_account”时，通过Account Kit对应的<a href='\\\"#section350494519818\\\"'>创建授权/登录请求</a>接口，获取用于服务器校验的Authorization Code信息。</li> <li>accountName为unionLogin接口传入的thirdAccountInfo.accountName或“official_account”时，游戏官方账号自行登录处理。</li> </ul> </div> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gamelogin-harmonyos.html"
    },
    {
        "id": 1296,
        "pre": "// 创建授权请求，并设置参数\\nlet authRequest = new authentication.HuaweiIDProvider().createAuthorizationWithHuaweiIDRequest();\\n// 获取头像、昵称以及手机号授权需要传如下scope\\nauthRequest.scopes = ['profile', 'phone'];\\n// 若开发者需要进行服务端开发，则需传如下permission获取authorizationCode\\nauthRequest.permissions = ['serviceauthcode'];\\n// 用户是否需要登录授权，该值为true且用户未登录或未授权时，会拉起用户登录或授权页面\\nauthRequest.forceAuthorization = true;\\nauthRequest.state = util.generateRandomUUID();",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用createAuthorizationWithHuaweiIDRequest创建授权请求并设置参数。             如需授权获取用户手机号，应先完成配置scope权限，并在authRequest.scopes中传入\\\"phone\\\"。如scope审批未完成或未通过，将无法正常展示和获取玩家授权手机号。   ",
        "import_module": null,
        "parent": "<li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-authentication#section610319714214\\\"' target='\\\"_blank\\\"'>createAuthorizationWithHuaweiIDRequest</a>创建授权请求并设置参数。         <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120107.35486232786328625593973380767235:50001231000000:2800:CC2C8A4FD50C87F2C199F8F20E8E58B626760D29C8D6D382241417B40586BA69.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>如需授权获取用户手机号，应先完成<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/account-config-permissions\\\"' target='\\\"_blank\\\"'>配置scope权限</a>，并在authRequest.scopes中传入\\\"phone\\\"。如scope审批未完成或未通过，将无法正常展示和获取玩家授权手机号。</p> </div> </div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gamelogin-harmonyos.html"
    },
    {
        "id": 1297,
        "pre": "import { minorsProtection } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError, commonEventManager } from '@kit.BasicServicesKit';\\n// 以上引入的模块为当前场景的全量模块，请按照具体实现按需引入",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入minorsProtection模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-minorsprotection\\\"' target='\\\"_blank\\\"'>minorsProtection</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-password-minorsprotection.html"
    },
    {
        "id": 1298,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unnecessary-type-constraint\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-type-constraint.html"
    },
    {
        "id": 1299,
        "pre": "export interface Foo<T> {\\n  foo: T;\\n}\\n\\nexport const bar = <T>(param: T): void => {\\n  console.info(`${param as string}`);\\n};\\n\\nexport function foo<T>(param: T): void {\\n  console.info(`${param as string}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-type-constraint.html"
    },
    {
        "id": 1300,
        "pre": "// extends any或者extends unknown的写法是多余的\\nexport interface Foo<T extends any> {\\n  foo: T;\\n}\\n\\nexport const bar = <T extends unknown>(param: T): void => {\\n  console.info(`${param as string}`);\\n};\\n\\nexport function foo<T extends any>(param: T): void {\\n  console.info(`${param as string}`);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-type-constraint.html"
    },
    {
        "id": 1301,
        "pre": "export const registerWatcher: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将RegisterWatcher注册为ArkTS接口： 编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n} 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>将RegisterWatcher注册为ArkTS接口：</p> <p>编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口：</p> <pre>static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hiappevent-watcher-freeze-events-ndk.html"
    },
    {
        "id": 1302,
        "pre": "import { invoiceAssistant } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入invoiceAssistant模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-invoiceassistant\\\"' target='\\\"_blank\\\"'>invoiceAssistant</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-select-invoice-title.html"
    },
    {
        "id": 1303,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  build() {\\n    Column() {\\n      // 判断文档是否加密，并删除加密\\n      Button('isEncryptedAndRemoveSecurity').onClick(async () => {\\n        // 确保沙箱目录有input.pdf文档\\n        let filePath = this.context.filesDir + '/input.pdf';\\n        let isEncrypt = this.pdfDocument.isEncrypted(filePath);\\n        if (isEncrypt) {\\n          let hasRemoveEncrypt = this.pdfDocument.removeSecurity();\\n          hilog.info(0x0000, 'PdfPage', 'isEncryptedAndRemoveSecurity %{public}s!',\\n            hasRemoveEncrypt ? 'success' : 'fail');\\n        }\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用isEncrypted方法，判断的PDF文档是否加密。 如果是加密PDF文档，调用removeSecurity方法移除PDF文档的加密锁。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section346019565214\\\"'> <a name='\\\"section346019565214\\\"'></a><a name='\\\"section346019565214\\\"'></a> <h4>示例代码</h4> <ol> <li>调用isEncrypted方法，判断的PDF文档是否加密。</li> <li>如果是加密PDF文档，调用removeSecurity方法移除PDF文档的加密锁。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-isencrypt-removesecurity.html"
    },
    {
        "id": 1304,
        "pre": "this.mapController.setZoomGesturesEnabled(true);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]地图手势控制",
        "parent_text": "  [h2]地图手势控制 您可以通过mapController对象来启用或禁止相关的地图手势。 缩放手势： 用户可以通过用双指张合，实现放大缩小地图。  滚动平移手势： 用户可以通过用手指拖动地图来进行移动。 this.mapController.setScrollGesturesEnabled(true); 旋转手势： 用户可以通过将两个手指放在地图上旋转来旋转地图。 this.mapController.setRotateGesturesEnabled(true); 倾斜手势： 用户可以通过将两个手指放在地图上下滑动来倾斜地图。 this.mapController.setTiltGesturesEnabled(true); 启用或禁止所有手势： 通过调用setAllGesturesEnabled方法，可启用或禁止所有手势。 // 禁止所有手势\\nthis.mapController.setAllGesturesEnabled(false); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section17793252830\\\"'> <a name='\\\"section17793252830\\\"'></a><a name='\\\"section17793252830\\\"'></a> <h4>[h2]地图手势控制</h4> <p><span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>您可以通过</span>mapController<span rgb(38,38,38);\\\"=\"\" style='\\\"color:'>对象来启用或禁止相关的地图手势。</span></p> <p><strong rgb(38,38,38);\\\"=\"\" style='\\\"color:'>缩放手势：</strong></p> <p><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>用户可以通过用双指张合，实现放大缩小地图。</span></p>  <p><strong rgb(38,38,38);\\\"=\"\" style='\\\"color:'>滚动平移手势：</strong></p> <p><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>用户可以通过用手指拖动地图来进行移动。</span></p> <pre class='\\\"screen\\\"'><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>this.mapController.setScrollGesturesEnabled(true);</span></pre> <p><strong rgb(38,38,38);\\\"=\"\" style='\\\"color:'>旋转手势：</strong></p> <p><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>用户可以通过将两个手指放在地图上旋转来旋转地图</span>。</p> <pre class='\\\"typescript\\\"'>this.mapController.setRotateGesturesEnabled(true);</pre> <p><strong rgb(38,38,38);\\\"=\"\" style='\\\"color:'>倾斜手势：</strong></p> <p><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>用户可以通过将两个手指放在地图上下滑动来倾斜地图</span>。</p> <pre class='\\\"typescript\\\"'>this.mapController.setTiltGesturesEnabled(true);</pre> <p><strong rgb(38,38,38);\\\"=\"\" style='\\\"color:'>启用或禁止所有手势：</strong></p> <p><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>通过调用</span><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1965712771211\\\"' target='\\\"_blank\\\"'>setAllGesturesEnabled</a><span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>方法，可启用或禁止所有手势</span>。</p> <pre class='\\\"typescript\\\"'>// <span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>禁止所有手势</span>\\nthis.mapController.<span rgb(36,39,40);\\\"=\"\" style='\\\"color:'>setAllGesturesEnabled</span>(false);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-controls-and-gestures.html"
    },
    {
        "id": 1305,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';\\nimport { image } from '@kit.ImageKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-screenshots.html"
    },
    {
        "id": 1306,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/typed-array-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-typed-array-check.html"
    },
    {
        "id": 1307,
        "pre": "const typedArray1 = new Int8Array([1, 2, 3]); \\nconst typedArray2 = new Int8Array([4, 5, 6]);  \\nlet res = new Int8Array(3);\\nfor (let i = 0; i < 3; i++) {\\n     res[i] = typedArray1[i] + typedArray2[i];\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-typed-array-check.html"
    },
    {
        "id": 1308,
        "pre": "const typedArray1: number[] = new Array(1, 2, 3);\\nconst typedArray2: number[] = new Array(4, 5, 6);\\nlet res: number[] = new Array(3);\\nfor (let i = 0; i < 3; i++) {\\n     res[i] = typedArray1[i] + typedArray2[i];\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-typed-array-check.html"
    },
    {
        "id": 1309,
        "pre": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { recoveryKey } from '@kit.EnterpriseDataGuardKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/enterprise-recoverykey-get-authchallenge.html"
    },
    {
        "id": 1310,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/keyword-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_keyword-spacing.html"
    },
    {
        "id": 1311,
        "pre": "function isSatisfy1(): boolean {\\n  return true;\\n}\\n\\nfunction isSatisfy2(): boolean {\\n  return false;\\n}\\n// 默认关键字前至少需要一个空格，关键字后至少需要一个空格\\nif (isSatisfy1()) {\\n  //...\\n} else if (isSatisfy2()) {\\n  //...\\n} else {\\n  //...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_keyword-spacing.html"
    },
    {
        "id": 1312,
        "pre": "function isSatisfy1(): boolean {\\n  return true;\\n}\\n\\nfunction isSatisfy2(): boolean {\\n  return false;\\n}\\n// 默认关键字前至少需要一个空格，关键字后至少需要一个空格\\nif (isSatisfy1()) {\\n  //...\\n}else if(isSatisfy2()) {\\n  //...\\n}else{\\n  //...\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_keyword-spacing.html"
    },
    {
        "id": 1313,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/semi-spacing\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_semi-spacing.html"
    },
    {
        "id": 1314,
        "pre": "export {x, test, C};\\n\\nconst x = 10;\\n\\nfunction test(size: number): number {\\n  let sum = 0;\\n  for (let a = 0; a < size; a++) {\\n    sum += a;\\n  }\\n  return sum;\\n}\\n\\nclass C {\\n  public name: string = 'hello';\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_semi-spacing.html"
    },
    {
        "id": 1315,
        "pre": "// Unexpected whitespace before semicolon.\\nexport {x, test, C} ;\\n\\n// Unexpected whitespace before semicolon.\\nconst x = 10 ;\\n\\nfunction test(size: number): number {\\n  let sum = 0;\\n  // Unexpected whitespace before semicolon.\\n  // Unexpected whitespace before semicolon.\\n  for (let a = 0 ; a < size ; a++) {\\n    sum += a;\\n  }\\n  // Unexpected whitespace before semicolon.\\n  return sum ;\\n}\\n\\nclass C {\\n  // Unexpected whitespace before semicolon.\\n  public name: string = 'hello' ;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_semi-spacing.html"
    },
    {
        "id": 1316,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/curly\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_curly.html"
    },
    {
        "id": 1317,
        "pre": "export function test(a: number, b: number) {\\n  if (a > b) {\\n    console.info('doSomething');\\n  } else if (a = b) {\\n    console.info('doSomething');\\n  } else {\\n    console.info('doSomething');\\n  }\\n\\n  while (a > b) {\\n    a--;\\n    console.info('doSomething');\\n  }\\n\\n  console.info('doSomething');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_curly.html"
    },
    {
        "id": 1318,
        "pre": "export function test(a: number, b: number) {\\n  if (a > b)\\n  // Expected { after 'if' condition.\\n    console.info('doSomething');\\n  else if (a = b)\\n  // Expected { after 'if' condition.\\n    console.info('doSomething');\\n  else\\n  // Expected { after 'else'.\\n    console.info('doSomething');\\n  console.info('doSomething');\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_curly.html"
    },
    {
        "id": 1319,
        "pre": "import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-button-launchapp.html"
    },
    {
        "id": 1320,
        "pre": "\\\"properties\\\": {\\n  // 配置为0，表示不启用内存缓存配置，默认为4，数值越低，内存中缓存数据越少\\n  \\\"hvigor.pool.cache.capacity\\\": 0,\\n  // 默认配置为cpu核数-1， 包含ohos.arkCompile.maxSize4，值越小，占用内存越少\\n  \\\"hvigor.pool.maxSize\\\" : 5,\\n  // 默认配置值为5, 值越小，占用内存越少\\n  \\\"ohos.arkCompile.maxSize\\\": 3,\\n  // 默认配置值为true, 表示开启内存缓存，占用内存较多，配置为false,关闭内存缓存，占用内存较少\\n  \\\"hvigor.enableMemoryCache\\\": false\\n},",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在并行模式下执行hvigor构建，默认会有5个worker线程同时执行编译，且在编译的过程中，会在内存中添加一些缓存对象，用于提高后续增量编译的效率。可以在hvigor-config.json5中添加配置。      当配置项\\\"hvigor.pool.maxSize\\\"和\\\"ohos.arkCompile.maxSize\\\"的值改小，\\\"hvigor.enableMemoryCache\\\"改为false后，可能会导致编译时长增加，请耐心等待。  ",
        "import_module": null,
        "parent": "<li id='\\\"li174515504264\\\"'>在并行模式下执行hvigor构建，默认会有5个worker线程同时执行编译，且在编译的过程中，会在内存中添加一些缓存对象，用于提高后续增量编译的效率。<p id='\\\"ZH-CN_TOPIC_0000002202129193__p142246365401\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202129193__li174515504264\\\"'></a><a name='\\\"li174515504264\\\"'></a>可以在hvigor-config.json5中添加配置。</p>  <div class='\\\"note\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__note1112911317212\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180506.79904657560752738146897116469781:50001231000000:2800:48EFD25419759874DD1535D3A19A175FCDD7A5B2EF134C4182D315391CB51EAB.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p5129121313214\\\"'>当配置项\\\"hvigor.pool.maxSize\\\"和\\\"ohos.arkCompile.maxSize\\\"的值改小，\\\"hvigor.enableMemoryCache\\\"改为false后，可能会导致编译时长增加，请耐心等待。</p> </div> </div></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1321,
        "pre": "\\\"debugging\\\": {\\n  \\\"stacktrace\\\": true                /* Disable stacktrace compilation. Value: [ true | false ]. Default: false */\\n},",
        "type": "Reference",
        "function_call": null,
        "function_name": "构建报错“Cannot read properties of undefined(reading 'xxx')”",
        "parent_text": "  构建报错“Cannot read properties of undefined(reading 'xxx')” 问题现象 编译构建时，出现报错“Cannot read properties of undefined(reading 'xxx')”。 解决措施 打开堆栈信息排查hvigorconfig.ts文件和hvigorfile.ts文件里的代码，里面是否使用了未定义的属性。 堆栈打开方法：项目根目录/hvigor/hvigor-config.json5文件中配置如下内容：  如果上述文件中并未排查出问题，请及时向我们提单反馈。 请按照如下步骤进行操作：提单链接，在线提单->HarmonyOS NEXT->开发工具->DevEco Studio。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section119742124315\\\"'> <a name='\\\"section119742124315\\\"'></a><a name='\\\"section119742124315\\\"'></a> <h4>构建报错“Cannot read properties of undefined(reading 'xxx')”</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p097491184317\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p14974714439\\\"'>编译构建时，出现报错“Cannot read properties of undefined(reading 'xxx')”。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p119743174319\\\"'><strong>解决措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p077519500434\\\"'>打开堆栈信息排查hvigorconfig.ts文件和hvigorfile.ts文件里的代码，里面是否使用了未定义的属性。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p931919251542\\\"'>堆栈打开方法：项目根目录/hvigor/hvigor-config.json5文件中配置如下内容：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p549192714324\\\"'>如果上述文件中并未排查出问题，请及时向我们提单反馈。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p179926772619\\\"'>请按照如下步骤进行操作：<a href='\\\"https://developer.huawei.com/consumer/cn/support/\\\"' target='\\\"_blank\\\"'>提单链接</a>，在线提单-&gt;HarmonyOS NEXT-&gt;开发工具-&gt;DevEco Studio。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p149183812811\\\"'><span><img originheight='\\\"609\\\"' originwidth='\\\"1334\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180506.86738318625059208307009166603158:50001231000000:2800:7EE76A3001BE97028F048B05C76E51C51824EDAD02CB77CEC09DB3F293B3FAFA.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1322,
        "pre": "hap-sign-tool: error: {errorcode:0,message:generate SignerBlock failed}",
        "type": "Reference",
        "function_call": null,
        "function_name": "编译报错“generate SignerBlock failed”",
        "parent_text": "  编译报错“generate SignerBlock failed” 问题现象 编译构建时，出现错误：message:generate SignerBlock failed。  错误原因 签名用的公私钥对不匹配，使用私钥签名后，用公钥验签失败。需保证私钥(keyalias)和公钥(appCertPath)配对使用。 场景  本地生产签名材料时，未导出正确的keyalias对应的csr(证书请求文件)，导致生成证书时，公钥与keyalias对应的私钥不匹配。 签名过程参数填写错误，使用了错误的keyalias或者appCertPath文件。  解决方案 请选择正确、配对的keyalias和appCertPath文件。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2129143462518\\\"'> <a name='\\\"section2129143462518\\\"'></a><a name='\\\"section2129143462518\\\"'></a> <h4>编译报错“generate SignerBlock failed”</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1412918343251\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p11291434102511\\\"'>编译构建时，出现错误：message:generate SignerBlock failed。</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p7129133442516\\\"'><strong>错误原因</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p96213218286\\\"'>签名用的公私钥对不匹配，使用私钥签名后，用公钥验签失败。需保证私钥(keyalias)和公钥(appCertPath)配对使用。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1412943414256\\\"'><strong>场景</strong></p> <ol id='\\\"ZH-CN_TOPIC_0000002202129193__ol2031411556471\\\"'> <li id='\\\"li565285812475\\\"'>本地生产签名材料时，未导出正确的keyalias对应的csr(证书请求文件)，导致生成证书时，公钥与keyalias对应的私钥不匹配。</li> <li id='\\\"li12314145564714\\\"'>签名过程参数填写错误，使用了错误的keyalias或者appCertPath文件。</li> </ol> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p91291634102517\\\"'><strong>解决方案</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p6129163462511\\\"'>请选择正确、配对的keyalias和appCertPath文件。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1323,
        "pre": "\\\"nodeOptions\\\": {\\n  \\\"maxOldSpaceSize\\\": 8192\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "编译报错“JS heap out of memory”",
        "parent_text": "  编译报错“JS heap out of memory” 问题现象 编译构建时，出现报错“JS heap out of memory“。   解决措施 出现该报错的原因是Hvigor运行时内存不足，在使用3.1.0及以上版本的Hvigor时，可通过以下方式修改Hvigor运行时内存的最大值。 勾选Enable the Daemon for tasks：   在hvigor-config.json5中修改maxOldSpaceSize字段，根据工程的大小，适当将其增大（如设置为8192）：  ",
        "import_module": "\\\"nodeOptions\\\": {\\n  \\\"maxOldSpaceSize\\\": 8192\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section516572532613\\\"'> <a name='\\\"section516572532613\\\"'></a><a name='\\\"section516572532613\\\"'></a> <h4>编译报错“JS heap out of memory”</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p51652025202617\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p216532511267\\\"'>编译构建时，出现报错“JS heap out of memory“。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p9920175863513\\\"'><span><img originheight='\\\"455\\\"' originwidth='\\\"818\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180507.57023138309168391640487309882352:50001231000000:2800:7397672C826FD5A917B83D47EAA097845E3C90A314626830CCB29E73B79B45F4.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p51661254260\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2016662514265\\\"'><strong>解决措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p12731041154915\\\"'>出现该报错的原因是Hvigor运行时内存不足，在使用3.1.0及以上版本的Hvigor时，可通过以下方式修改Hvigor运行时内存的最大值。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2499646154518\\\"'>勾选Enable the Daemon for tasks：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p54491436018\\\"'><span><img originheight='\\\"709\\\"' originwidth='\\\"983\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180507.44662209927891744220374873559527:50001231000000:2800:CFD3B0CDB04434627FA5057DD815AF9399181DE2DE9556E35557BD5083695287.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p107671448174516\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2166152542611\\\"'>在hvigor-config.json5中修改maxOldSpaceSize字段，根据工程的大小，适当将其增大（如设置为8192）：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1324,
        "pre": "\\\"dependencies\\\": {   \\\"har\\\": \\\"file:../har\\\" }",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "场景五：问题现象 oh_package.json5 中 dependencies 中引入模块的 名称 和 实际使用时 import 的 不一致。 例如 在 oh_package.json5 中这样引入：  但是实际上在代码中import 的时候是 大写 HAR 或者其他而不是 dependencies 里面配置的 ‘har’ 的值，要注意保持完全一致。（目前windows 没有问题，linux会报错模块找不到） 处理措施 引入和使用改成一致。",
        "import_module": "\\\"dependencies\\\": {   \\\"har\\\": \\\"file:../har\\\" }",
        "parent": "<li id='\\\"li79967502395\\\"'>场景五：<p id='\\\"ZH-CN_TOPIC_0000002202129193__p12996550113915\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202129193__li79967502395\\\"'></a><a name='\\\"li79967502395\\\"'></a><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p516150134017\\\"'>oh_package.json5 中 dependencies 中引入模块的 名称 和 实际使用时 import 的 不一致。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p6314517409\\\"'>例如 在 oh_package.json5 中这样引入：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1730516401\\\"'>但是实际上在代码中import 的时候是 大写 HAR 或者其他而不是 dependencies 里面配置的 ‘har’ 的值，要注意保持完全一致。（目前windows 没有问题，linux会报错模块找不到）</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p13298162124014\\\"'><strong>处理措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p10141525104017\\\"'>引入和使用改成一致。</p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1325,
        "pre": "export { yyy } from 'x.js'",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "方法1（推荐使用）： 使用符号显式导出语法，从js文件中re-export符号 。",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<li id='\\\"li114711217141814\\\"'>方法1（推荐使用）： 使用符号显式导出语法，从js文件中re-export符号 。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1326,
        "pre": "\\\"buildOption\\\": { \\n  \\\"arkOptions\\\": { \\n    \\\"byteCodeHar\\\": false\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将yyy模块改为非字节码har，在模块级build-profile.json5文件中添加byteCodeHar字段并设置为false。",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<li id='\\\"li18783165551619\\\"'>将yyy模块改为非字节码har，在模块级build-profile.json5文件中添加byteCodeHar字段并设置为false。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1327,
        "pre": "\\\"targets\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"config\\\": {\\n      \\\"buildOption\\\": {\\n        \\\"arkOptions\\\": {\\n          \\\"buildProfileFields\\\": {\\n            \\\"targetName\\\": \\\"default\\\"\\n          }\\n        }\\n      }\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"default1\\\",\\n    \\\"config\\\": {\\n      \\\"buildOption\\\": {\\n        \\\"arkOptions\\\": {\\n          \\\"buildProfileFields\\\": {\\n            \\\"targetName1\\\": \\\"default1\\\"\\n          }\\n        }\\n      }\\n    }\\n  },\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "编译报错“Property xxx does not exist on type 'typeof BuildProfile'.”",
        "parent_text": "  编译报错“Property xxx does not exist on type 'typeof BuildProfile'.” 问题现象1 使用了自定义参数BuildProfile，编译态无异常但编译构建失败，提示“Property xxx does not exist on type 'typeof BuildProfile'.”。   处理措施 检查在当前模块下build-profile.json5中的targets > buildProfileFields配置的自定义参数中key值是否相同，如果不同请将targets内所有buildProfileFields中的key值保持相同。 以下为导致编译报错的错误配置示例：   请将targets内所有buildProfileFields中的key值修改一致，如以下示例： \\\"targets\\\": [\\n  {\\n    \\\"name\\\": \\\"default\\\",\\n    \\\"config\\\": {\\n      \\\"buildOption\\\": {\\n        \\\"arkOptions\\\": {\\n          \\\"buildProfileFields\\\": {\\n            \\\"targetName\\\": \\\"default\\\"\\n          }\\n        }\\n      }\\n    }\\n  },\\n  {\\n    \\\"name\\\": \\\"default1\\\",\\n    \\\"config\\\": {\\n      \\\"buildOption\\\": {\\n        \\\"arkOptions\\\": {\\n          \\\"buildProfileFields\\\": {\\n            \\\"targetName\\\": \\\"default1\\\"\\n          }\\n        }\\n      }\\n    }\\n  },\\n]  问题现象2 使用了自定义参数BuildProfile并且编译器标红且构建失败，提示“Property xxx does not exist on type 'typeof BuildProfile'.”。  处理措施 请检查当前模块下build-profile.json5中buildProfileFields内是否添加了所使用的自定义参数，请确保该自定义参数已配置在buildProfileFields内。 ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1115020543287\\\"'> <a name='\\\"section1115020543287\\\"'></a><a name='\\\"section1115020543287\\\"'></a> <h4>编译报错“Property xxx does not exist on type 'typeof BuildProfile'.”</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1515045452819\\\"'><strong>问题现象</strong><strong>1</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p968994223213\\\"'>使用了自定义参数BuildProfile，编译态无异常但编译构建失败，提示“Property xxx does not exist on type 'typeof BuildProfile'.”。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1468954233219\\\"'><span><img originheight='\\\"578\\\"' originwidth='\\\"1136\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180509.08435850397727306713454441347542:50001231000000:2800:39E016DCF5644B4F13D8B46AE5F4D5BC3BD133E77258FA55382A020B706CA18B.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p151502054182810\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p17150175418289\\\"'><strong>处理措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1150472793312\\\"'>检查在当前模块下build-profile.json5中的targets &gt; buildProfileFields配置的自定义参数中key值是否相同，如果不同请将targets内所有buildProfileFields中的key值保持相同。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p75053277333\\\"'>以下为导致编译报错的<strong>错误</strong>配置示例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2050572773312\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p15505827143317\\\"'>请将targets内所有buildProfileFields中的key值修改一致，如以下示例：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen157696417552\\\"'><span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"targets\\\"</span>: [\\n  {\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"name\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"default\\\"</span>,\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"config\\\"</span>: {\\n      <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"buildOption\\\"</span>: {\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"arkOptions\\\"</span>: {\\n          <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"buildProfileFields\\\"</span>: {\\n            <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"targetName\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"default\\\"</span>\\n          }\\n        }\\n      }\\n    }\\n  },\\n  {\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"name\\\"</span>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"default1\\\"</span>,\\n    <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"config\\\"</span>: {\\n      <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"buildOption\\\"</span>: {\\n        <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"arkOptions\\\"</span>: {\\n          <span rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"buildProfileFields\\\"</span>: {\\n            <strong rgb(135,16,148);\\\"=\"\" style='\\\"color:'>\\\"targetName\\\"</strong>: <span rgb(6,125,23);\\\"=\"\" style='\\\"color:'>\\\"default1\\\"</span>\\n          }\\n        }\\n      }\\n    }\\n  },\\n]</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1450511272338\\\"'></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p9954102712913\\\"'><strong>问题现象2</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p16130625519\\\"'>使用了自定义参数BuildProfile并且编译器标红且构建失败，提示“Property xxx does not exist on type 'typeof BuildProfile'.”。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p179541227192911\\\"'><span><img originheight='\\\"572\\\"' originwidth='\\\"1064\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180509.52662738973233903908046308774534:50001231000000:2800:4F539EAED58DA7E9EA73856E27EC62C89E2522E74B964072C878843D57FFA008.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p17954142732914\\\"'><strong>处理措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p187512042143018\\\"'>请检查当前模块下build-profile.json5中buildProfileFields内是否添加了所使用的自定义参数，请确保该自定义参数已配置在buildProfileFields内。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1328,
        "pre": "cmake_minimum_required(VERSION 3.10) \\nproject(MyProject)  \\nset(CMAKE_CXX_STANDARD 17)  \\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}                    \\n                    ${CMAKE_CURRENT_SOURCE_DIR}/include)  \\n# 添加所有源文件\\nadd_library(myProgram SAHRED main.cpp myLibrary.cpp) ",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": " 示例 CMakeLists.txt  ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__p123009291821\\\"'> <strong>示例 CMakeLists.txt</strong>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1329,
        "pre": "// main.cpp\\n#include \\\"myLibrary.h\\\" \\nint main() {\\n     MyType obj;\\n     // 使用自定义类型\\n     return 0;\\n}\\n\\n// myLibrary.h\\n#ifndef MY_LIBRARY_H\\n#define MY_LIBRARY_H\\nclass MyType {\\npublic:\\n     MyType() {}\\n     void doSomething();\\n};\\n#endif",
        "type": "Reference",
        "function_call": null,
        "function_name": "CPP编译报错\\\"A 'unknown type name' error has occurred\\\"",
        "parent_text": "  CPP编译报错\\\"A 'unknown type name' error has occurred\\\" 问题现象 在编译HarmonyOS C++ 项目时，报错提示\\\"A 'unknown type name' error has occurred\\\"。 解决措施 在编译HarmonyOS C++ 项目时，遇到\\\"unknown type name\\\"错误通常表示编译器无法识别某个类型。这可能是因为类型未定义、未包含相关的头文件，或者包含的头文件路径不正确。以下是定位和解决这个问题的步骤： 1. 检查是否包含头文件。 确保所有必要的头文件都已正确包含在源文件中。例如，如果您正在使用某个自定义类型或库提供的类型，请确保在使用该类型的文件中包含了相关的头文件。 示例：  2. 检查头文件路径。 确保 CMakeLists.txt 中正确设置了头文件的搜索路径。可以通过 include_directories 添加头文件目录。 示例 CMakeLists.txt： cmake_minimum_required(VERSION 3.10) \\nproject(MyProject)  \\nset(CMAKE_CXX_STANDARD 17)  \\n# 添加头文件目录\\ninclude_directories(${CMAKE_SOURCE_DIR}/include)  \\n# 添加源文件\\nadd_library(myProgram SHARED src/main.cpp src/myLibrary.cpp)  3. 清理和重新生成构建文件。 有时，构建文件可能会损坏或丢失符号定义。尝试清理构建目录并重新生成构建文件： hvigorw clean 或手动删除模块下.cxx目录。 4. 启用详细编译输出。 为了解详细的编译过程，可以启用更详细的输出。在 CMakeLists.txt 中添加以下内容： set(CMAKE_VERBOSE_MAKEFILE ON)  5. 检查编译输出日志。 Ninja 默认生成 .ninja_log 文件，其中包含构建过程的详细信息。你可以检查这个日志文件以了解构建过程中的问题。 cat .cxx/default/default/arm64-v8a/.ninja_log 6. 使用 CMake 的 message 函数调试。 可以在 CMakeLists.txt 文件中添加 message 函数来打印一些调试信息，以确保路径和变量正确设置。 示例： message(STATUS \\\"Source directory: ${CMAKE_SOURCE_DIR}\\\") \\nmessage(STATUS \\\"Include directories: ${CMAKE_INCLUDE_PATH}\\\")  结论 通过上述步骤，您可以定位和解决 unknown type name 问题。在使用 CMake、Ninja 和 LLVM 编译 C++ 项目时，确保所有头文件正确包含并设置正确的头文件路径是关键。如果问题依旧存在，详细的编译输出日志通常能提供更多线索，帮助您找到具体的原因。 ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"section\\\"' id='\\\"section2087337175510\\\"'> <a name='\\\"section2087337175510\\\"'></a><a name='\\\"section2087337175510\\\"'></a> <h4>CPP编译报错\\\"A 'unknown type name' error has occurred\\\"</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p287311785518\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1587311715559\\\"'>在编译HarmonyOS C++ 项目时，报错提示\\\"A 'unknown type name' error has occurred\\\"。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2873177175513\\\"'><strong>解决措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1135919276612\\\"'>在编译HarmonyOS C++ 项目时，遇到\\\"unknown type name\\\"错误通常表示编译器无法识别某个类型。这可能是因为类型未定义、未包含相关的头文件，或者包含的头文件路径不正确。以下是定位和解决这个问题的步骤：</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p935942712614\\\"'>1. 检查是否包含头文件。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p23598275616\\\"'>确保所有必要的头文件都已正确包含在源文件中。例如，如果您正在使用某个自定义类型或库提供的类型，请确保在使用该类型的文件中包含了相关的头文件。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p5359327068\\\"'><strong>示例：</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p123591527364\\\"'>2. 检查头文件路径。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1035911271868\\\"'>确保 CMakeLists.txt 中正确设置了头文件的搜索路径。可以通过 include_directories 添加头文件目录。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1235922719617\\\"'><strong>示例 CMakeLists.txt：</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen1835992720614\\\"'><span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>cmake_minimum_required</span>(VERSION <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>3.10</span>) \\n<span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>project</span>(MyProject)  \\n<span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>set</span>(CMAKE_CXX_STANDARD <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>17</span>)  \\n<span rgb(153,153,136);\\\"=\"\" style='\\\"color:'># 添加头文件目录</span>\\n<span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>include_directories</span>(<span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>${CMAKE_SOURCE_DIR}</span>/<span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>include</span>)  \\n<span rgb(153,153,136);\\\"=\"\" style='\\\"color:'># 添加源文件</span>\\n<span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>add_library</span>(myProgram SHARED src/main.cpp src/myLibrary.cpp) </pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1235913271864\\\"'>3. 清理和重新生成构建文件。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1835914271366\\\"'>有时，构建文件可能会损坏或丢失符号定义。尝试清理构建目录并重新生成构建文件：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen1535915271766\\\"'>hvigorw clean</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1035910271366\\\"'>或手动删除模块下.cxx目录。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2359192713611\\\"'>4. 启用详细编译输出。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p3359122710612\\\"'>为了解详细的编译过程，可以启用更详细的输出。在 CMakeLists.txt 中添加以下内容：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen835972720612\\\"'><span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>set</span>(CMAKE_VERBOSE_MAKEFILE <span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>ON</span>) </pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p635932711614\\\"'>5. 检查编译输出日志。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p19359527469\\\"'>Ninja 默认生成 .ninja_log 文件，其中包含构建过程的详细信息。你可以检查这个日志文件以了解构建过程中的问题。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen1535911277611\\\"'>cat .cxx/default/default/arm64-v8a/.ninja_log</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p935962716615\\\"'>6. 使用 CMake 的 message 函数调试。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p153590271618\\\"'>可以在 CMakeLists.txt 文件中添加 message 函数来打印一些调试信息，以确保路径和变量正确设置。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1835915270611\\\"'><strong>示例：</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen6359727067\\\"'><span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>message</span>(STATUS <span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>\\\"Source directory: ${CMAKE_SOURCE_DIR}\\\"</span>) \\n<span rgb(51,51,51);\\\"=\"\" style='\\\"color:'>message</span>(STATUS <span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>\\\"Include directories: ${CMAKE_INCLUDE_PATH}\\\"</span>) </pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1735913271162\\\"'><strong>结论</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1035915271762\\\"'>通过上述步骤，您可以定位和解决 unknown type name 问题。在使用 CMake、Ninja 和 LLVM 编译 C++ 项目时，确保所有头文件正确包含并设置正确的头文件路径是关键。如果问题依旧存在，详细的编译输出日志通常能提供更多线索，帮助您找到具体的原因。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1330,
        "pre": "\\t Detail: Please check the following fields.\\n{\\n  instancePath: 'module.abilities[0]',\\n  keyword: 'required',\\n  params: { missingProperty: 'name' },\\n  message: \\\"must have required property 'name'\\\",\\n  location: 'D:/MyApplication/entry/src/main/module.json5:15:8'\\n} \\n{\\n  instancePath: 'module.abilities[0]',\\n  keyword: 'required',\\n  params: { missingProperty: 'srcEntrance' },\\n  message: \\\"must have required property 'srcEntrance'\\\",\\n  location: 'D:/MyApplication/entry/src/main/module.json5:15:8'\\n} \\n{\\n  instancePath: 'module.abilities[0]',\\n  keyword: 'required',\\n  params: { missingProperty: 'name' },\\n  message: \\\"must have required property 'name'\\\",\\n  location: 'D:/MyApplication/entry/src/main/module.json5:15:8'\\n} \\n{\\n  instancePath: 'module.abilities[0]',\\n  keyword: 'oneOf',\\n  params: { passingSchemas: null },\\n  message: 'must match exactly one schema in oneOf',\\n  location: 'D:/MyApplication/entry/src/main/module.json5:15:8'\\n} \\n{\\n  instancePath: 'module.abilities[0]',\\n  keyword: 'enum',\\n  params: {\\n    allowedValues: [\\n      'priority',\\n      'name',\\n      'srcEntrance',\\n      'srcEntry',\\n      'launchType',\\n      'description',\\n      'icon',\\n      'label',\\n      'permissions',\\n      'metadata',\\n      'visible',\\n      'exported',\\n      'skills',\\n      'backgroundModes',\\n      'continuable',\\n      'startWindowIcon',\\n      'startWindowBackground',\\n      'removeMissionAfterTerminate',\\n      'orientation',\\n      'supportWindowMode',\\n      'maxWindowRatio',\\n      'minWindowRatio',\\n      'maxWindowWidth',\\n      'minWindowWidth',\\n      'maxWindowHeight',\\n      'minWindowHeight',\\n      'excludeFromMissions'\\n    ]\\n  },\\n  message: 'must be equal to one of the allowed values',\\n  location: 'D:/MyApplication/entry/src/main/module.json5:15:8'\\n} \\n{\\n  instancePath: 'module.abilities[0]',\\n  keyword: 'propertyNames',\\n  params: { propertyName: 'nam' },\\n  message: 'property name must be valid',\\n  location: 'D:/MyApplication/entry/src/main/module.json5:15:8'\\n} ",
        "type": "Reference",
        "function_call": null,
        "function_name": "编译报错“Schema validate failed”",
        "parent_text": "  编译报错“Schema validate failed” 问题现象 DevEco Studio编译时出现错误，提示“Schema validate failed”错误信息。 解决措施 出现该问题的原因是配置文件中字段缺失或拼写错误，可根据报错的详细信息进行问题定位。 如将module.json5文件中abilities标签中的“name”错写为“nam”，报错信息如下：  以上述报错为例，说明报错中关键词的含义，便于开发者理解报错信息，完成问题定位及修改。  instancePath：错误所在的文件位置。'module.abilities[0]'表示在module.json5文件中的第一个abilities。 keyword：标识当前报错字段的可选配属性，当前报错中包括'required'、'oneOf'、'enum'、'propertyNames'。        required：表示该字段为必选配置项。由于缺失或拼写错误导致该属性未配置。 oneOf：表示当前配置不符合oneOf要求。通过instancePath已经确认报错出现在abilities标签，在DevEco Studio中，按住Ctrl点击\\\"abilities\\\"跳转到对应的module.json文件，可以查看到必须配置以下两组中的一组。根据对比排查，可识别到因拼写错误导致\\\"name\\\"属性未配置。 enum：该标签内所有可配置的属性。开发者可根据枚举值确认属性的正确写法。 propertyNames：如果字段拼写错误将出现propertyNames，propertyName: 'nam'指明“nam”为错误属性。  params：不同keyword对应不同的详细说明，如keyword为'required'时，params的missingProperty: 'name' 表示缺失的属性为“name”。 message：修改要求的说明，如keyword为'required'时，message表示必须配置name属性。 location：错误的具体位置，点击可以跳转。   ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"section\\\"' id='\\\"section134821719104416\\\"'> <a name='\\\"section134821719104416\\\"'></a><a name='\\\"section134821719104416\\\"'></a> <h4>编译报错“Schema validate failed”</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p54791041152\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p94793419520\\\"'>DevEco Studio编译时出现错误，提示“Schema validate failed”错误信息。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p447914411458\\\"'><strong>解决措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p79954112525\\\"'>出现该问题的原因是配置文件中字段缺失或拼写错误，可根据报错的详细信息进行问题定位。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p463110151816\\\"'>如将module.json5文件中abilities标签中的“name”错写为“nam”，报错信息如下：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p139710565181\\\"'>以上述报错为例，说明报错中关键词的含义，便于开发者理解报错信息，完成问题定位及修改。</p> <ul id='\\\"ZH-CN_TOPIC_0000002202129193__ul1589753024919\\\"'> <li id='\\\"li1732219203194\\\"'>instancePath：错误所在的文件位置。'module.abilities[0]'表示在module.json5文件中的第一个abilities。</li> <li id='\\\"li5897123084915\\\"'>keyword：标识当前报错字段的可选配属性，当前报错中包括'required'、'oneOf'、'enum'、'propertyNames'。       <ul id='\\\"ZH-CN_TOPIC_0000002202129193__ul5263174274920\\\"'> <li id='\\\"li167701536174912\\\"'>required：表示该字段为必选配置项。由于缺失或拼写错误导致该属性未配置。</li> <li id='\\\"li1740715416513\\\"'>oneOf：表示当前配置不符合oneOf要求。通过instancePath已经确认报错出现在abilities标签，在DevEco Studio中，按住Ctrl点击\\\"abilities\\\"跳转到对应的module.json文件，可以查看到必须配置以下两组中的一组。根据对比排查，可识别到因拼写错误导致\\\"name\\\"属性未配置。<p id='\\\"ZH-CN_TOPIC_0000002202129193__p549104413515\\\"'><a name='\\\"ZH-CN_TOPIC_0000002202129193__li1740715416513\\\"'></a><a name='\\\"li1740715416513\\\"'></a><span><img originheight='\\\"486\\\"' originwidth='\\\"346\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180510.62554316112417302988130530134650:50001231000000:2800:FB8A2342450B9179F44B3EBC9B1499CEE004315BCC791127808872987805DD12.png\\\"'/></span></p></li> <li id='\\\"li799774720491\\\"'>enum：该标签内所有可配置的属性。开发者可根据枚举值确认属性的正确写法。</li> <li id='\\\"li1696652085111\\\"'>propertyNames：如果字段拼写错误将出现propertyNames，propertyName: 'nam'指明“nam”为错误属性。</li> </ul></li> <li id='\\\"li178971930154919\\\"'>params：不同keyword对应不同的详细说明，如keyword为'required'时，params的missingProperty: 'name' 表示缺失的属性为“name”。</li> <li id='\\\"li1189763024911\\\"'>message：修改要求的说明，如keyword为'required'时，message表示必须配置name属性。</li> <li id='\\\"li14481843171918\\\"'>location：错误的具体位置，点击可以跳转。</li> </ul> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p153601021192811\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1331,
        "pre": "\\\"requestPermissions\\\": [\\n  {\\n    \\\"name\\\": \\\"ohos.permission.READ_IMAGEVIDEO\\\",\\n    \\\"reason\\\": \\\"$string:module_desc\\\",\\n    \\\"usedScene\\\": {\\n      \\\"abilities\\\": [\\n        \\\"EntryAbility\\\"\\n      ],\\n      \\\"when\\\": \\\"inuse\\\"\\n    }\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "编译报错“The reason and usedScene attributes are mandatory for user_grant permissions”",
        "parent_text": "  编译报错“The reason and usedScene attributes are mandatory for user_grant permissions” 问题现象 DevEco Studio编译失败，提示“The reason and usedScene attributes are mandatory for user_grant permissions”。  问题原因 从DevEco Studio NEXT Developer Preview2版本开始新增规则：APP包中，所有entry和feature hap的module下的requestPermissions权限清单必须指定(可以缺省为空，若非空则name必填,user_grant权限则必填reason、usedScene字段)。 解决措施 进入对应module.json5文件中，补齐requestPermissions字段下的reason和usedScene字段。如以下示例：   ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"section\\\"' id='\\\"section11576710153611\\\"'> <a name='\\\"section11576710153611\\\"'></a><a name='\\\"section11576710153611\\\"'></a> <h4>编译报错“The reason and usedScene attributes are mandatory for user_grant permissions”</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p491792563610\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p0261173019362\\\"'>DevEco Studio编译失败，提示“The reason and usedScene attributes are mandatory for user_grant permissions”。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p5261154613432\\\"'><span><img height='\\\"61.845000000000006\\\"' originheight='\\\"91\\\"' originwidth='\\\"765\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180512.44056807950736466659310381165304:50001231000000:2800:FE0A6544F1AAE489822F4265F766EE389948CFEFD63839338F849CF82C85F02D.png\\\"' title='\\\"点击放大\\\"' width='\\\"523.6875\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p164794275386\\\"'><strong>问题原因</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p126081473915\\\"'>从DevEco Studio NEXT Developer Preview2版本开始新增规则：APP包中，所有entry和feature hap的module下的requestPermissions权限清单必须指定(可以缺省为空，若非空则name必填,user_grant权限则必填reason、usedScene字段)。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1412131312412\\\"'><strong>解决措施</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p17511105144211\\\"'>进入对应module.json5文件中，补齐requestPermissions字段下的reason和usedScene字段。如以下示例：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1822111198458\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1332,
        "pre": "{\\n  \\\"app\\\": {\\n    \\\"products\\\": [\\n      {\\n         \\\"buildOption\\\": {\\n           \\\"strictMode\\\": {\\n             \\\"useNormalizedOHMUrl\\\": true\\n           }\\n         }\\n      }\\n    ]\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将报错的依赖包的工程级build-profile.json5中的useNormalizedOHMUrl修改为与当前工程一致，重新生成依赖包并替换（useNormalizedOHMUrl缺省默认值为false）。",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<li id='\\\"li73955351458\\\"'>将报错的依赖包的工程级build-profile.json5中的useNormalizedOHMUrl修改为与当前工程一致，重新生成依赖包并替换（useNormalizedOHMUrl缺省默认值为false）。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1333,
        "pre": "{\\n  \\\"name\\\": \\\"parameter-test\\\",\\n  \\\"version\\\": \\\"@param:version\\\", \\n  \\\"description\\\": \\\"test desc.\\\",\\n  \\\"main\\\": \\\"index.ets\\\",\\n  \\\"author\\\": \\\"test author\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"dependencies\\\": {\\n    \\\"libtest1\\\": \\\"@param:dependencies.libtest1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"libtest2\\\": \\\"@param:devDependencies.libtest2\\\"\\n  },\\n  \\\"dynamicDependencies\\\": {\\n    \\\"libtest3\\\": \\\"@param:dynamicDependencies.libtest3\\\"\\n  },\\n  \\\"parameterFile\\\": '.parameterFile/parameterFile.json5' // 开启参数化并指定参数化配置文件路径\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "如何配置oh-package.json5动态依赖",
        "parent_text": "  如何配置oh-package.json5动态依赖 oh-package.json5文件中：  dependencies（生产依赖）：声明需要在代码中import的三方库（参与编译/运行阶段使用的依赖）。 devDependencies（开发依赖）：参与项目的开发或测试阶段。 dynamicDependencies（动态依赖）：动态依赖的HSP模块。在开发者需要动态加载HSP的时候配置使用。  示例如下，详细内容可参考oh-package.json5文件和添加依赖项。  ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"section\\\"' id='\\\"section16585162814254\\\"'> <a name='\\\"section16585162814254\\\"'></a><a name='\\\"section16585162814254\\\"'></a> <h4>如何配置oh-package.json5动态依赖</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p16295151122616\\\"'>oh-package.json5文件中：</p> <ul id='\\\"ZH-CN_TOPIC_0000002202129193__ul131476442618\\\"'> <li id='\\\"li5320715192715\\\"'>dependencies（生产依赖）：声明需要在代码中import的三方库（参与编译/运行阶段使用的依赖）。</li> <li id='\\\"li3815515182616\\\"'>devDependencies（开发依赖）：参与项目的开发或测试阶段。</li> <li id='\\\"li9147741268\\\"'>dynamicDependencies（动态依赖）：动态依赖的HSP模块。在开发者需要动态加载HSP的时候配置使用。</li> </ul> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1432142512282\\\"'>示例如下，详细内容可参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-oh-package-json5\\\"' target='\\\"_blank\\\"'>oh-package.json5文件</a>和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-dependencies\\\"'>添加依赖项</a>。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1334,
        "pre": "// Module/src/test.json\\n{a: 1, b: 2}\\n//use.js\\nlet test = require(\\\"Module/src/test.json\\\")",
        "type": "Reference",
        "function_call": null,
        "function_name": "如何解决三方包require语句报错",
        "parent_text": "  如何解决三方包require语句报错 问题现象 当引入三方包时编译报错。 报错原因 部分三方包由npm迁移而来，其开发环境为node， 其中的require语法arkcompiler不完全支持，出现运行报错情况。 场景1：  需修改为： // Module/src/test.js\\nmodule.exports = {a: 1, b: 2}\\n//use.js\\nlet test = require(\\\"Module/src/test\\\") 场景2： // Module/package.json\\n...\\nmain: \\\"./src\\\"\\n...\\n// use.js\\nlet module = require(\\\"Module\\\") 需修改为： // Module/package.json\\n...\\nmain: \\\"./src/index.js\\\"\\n...\\n// use.js\\nlet module = require(\\\"Module\\\") 场景3： 编译出现warning信息： Plugin node-resolve: preferring built-in module 'util' over local alternative at '/Users/~/Documents/fe-module/demo/node_modules/util/util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning 解决方案 修改rollup 配置文件，rollup.config.js中修改 preferBuiltins 字段： plugins: [ \\n  resolve({ \\n    preferBuiltins: false,    // true 或 false\\n    mainFields: ['module', 'main'], \\n    extensions\\n  })\\n]; 场景4： import {Buffer} from 'buffer' 需修改为： import {Buffer} from 'buffer/' ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"section\\\"' id='\\\"section12693104505313\\\"'> <a name='\\\"section12693104505313\\\"'></a><a name='\\\"section12693104505313\\\"'></a> <h4>如何解决三方包require语句报错</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p469344511539\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1669394575316\\\"'>当引入三方包时编译报错。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p3693245115311\\\"'><strong>报错原因</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1147351745914\\\"'>部分三方包由npm迁移而来，其开发环境为node， 其中的require语法arkcompiler不完全支持，出现运行报错情况。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p86941345185313\\\"'><strong>场景1</strong>：</p>  <p id='\\\"ZH-CN_TOPIC_0000002202129193__p195491546212\\\"'><strong>需修改为：</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen5513171814316\\\"'><span rgb(153,153,136);\\\"=\"\" style='\\\"color:'>// Module/src/test.js</span>\\nmodule.exports = {a: <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>1</span>, b: <span rgb(0,128,128);\\\"=\"\" style='\\\"color:'>2</span>}\\n<span rgb(153,153,136);\\\"=\"\" style='\\\"color:'>//use.js</span>\\nlet test = <span rgb(0,134,179);\\\"=\"\" style='\\\"color:'>require</span>(<span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>\\\"Module/src/test\\\"</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1762315610592\\\"'><strong>场景2：</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen6636103254319\\\"'><span rgb(153,153,136);\\\"=\"\" style='\\\"color:'>// Module/package.json</span>\\n...\\nmain: <span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>\\\"./src\\\"</span>\\n...\\n<span rgb(153,153,136);\\\"=\"\" style='\\\"color:'>// use.js</span>\\nlet module = <span rgb(0,134,179);\\\"=\"\" style='\\\"color:'>require</span>(<span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>\\\"Module\\\"</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p138272612314\\\"'><strong>需修改为：</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen59097441437\\\"'><span rgb(153,153,136);\\\"=\"\" style='\\\"color:'>// Module/package.json</span>\\n...\\nmain: <span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>\\\"./src/index.js\\\"</span>\\n...\\n<span rgb(153,153,136);\\\"=\"\" style='\\\"color:'>// use.js</span>\\nlet module = <span rgb(0,134,179);\\\"=\"\" style='\\\"color:'>require</span>(<span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>\\\"Module\\\"</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2090711718114\\\"'><strong>场景3：</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p153418381514\\\"'>编译出现warning信息：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen1960181017282\\\"'>Plugin node-resolve: preferring built-in module 'util' over local alternative at '/Users/~/Documents/fe-module/demo/node_modules/util/util.js', pass 'preferBuiltins: false' to disable this behavior or 'preferBuiltins: true' to disable this warning</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p101018493529\\\"'><strong>解决方案</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1538815331449\\\"'>修改rollup 配置文件，rollup.config.js中修改 preferBuiltins 字段：</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen1219961281814\\\"'>plugins: [ \\n  resolve({ \\n    preferBuiltins: false,    // true 或 false\\n    mainFields: ['module', 'main'], \\n    extensions\\n  })\\n];</pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p2038911491112\\\"'><strong>场景4：</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen936911258476\\\"'>import {Buffer} from <span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>'buffer'</span></pre> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p1647162812512\\\"'><strong>需修改为：</strong></p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202129193__screen535210301472\\\"'>import {Buffer} from <span rgb(221,17,68);\\\"=\"\" style='\\\"color:'>'buffer/'</span></pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1335,
        "pre": "getValue(breakpoint: string): T {\\n    return Reflect.get(this.options, breakpoint) as T;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "如何解决编译报错“Indexed access is not supported for fields(arkts-no-props-by-index)”的问题",
        "parent_text": "  如何解决编译报错“Indexed access is not supported for fields(arkts-no-props-by-index)”的问题 问题现象 动态调用类或者接口的字段，导致编译报错出现：Indexed access is not supported for fields(arkts-no-props-by-index)。  解决方案 修改代码：  ",
        "import_module": "export { yyy } from 'x.js'",
        "parent": "<div class='\\\"section\\\"' id='\\\"section1189393019506\\\"'> <a name='\\\"section1189393019506\\\"'></a><a name='\\\"section1189393019506\\\"'></a> <h4>如何解决编译报错“Indexed access is not supported for fields(arkts-no-props-by-index)”的问题</h4> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p75621516105210\\\"'><strong>问题现象</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p31547555522\\\"'>动态调用类或者接口的字段，导致编译报错出现：Indexed access is not supported for fields(arkts-no-props-by-index)。</p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p4464194819013\\\"'><span><img originheight='\\\"482\\\"' originwidth='\\\"871\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180512.54594221398874807452301539360042:50001231000000:2800:442D458036AF7EAF3346FA99DE68FD2648FB2096D4832E7C2FE625F8851655FB.png\\\"'/></span></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p116921425512\\\"'><strong>解决方案</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202129193__p12331036818\\\"'>修改代码：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hvigor-faqs.html"
    },
    {
        "id": 1336,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { systemShare } from '@kit.ShareKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-app-actions.html"
    },
    {
        "id": 1337,
        "pre": "import { PickerController } from '@ohos.file.PhotoPickerComponent';\\nimport { fileUri } from '@kit.CoreFileKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入选择器模块和文件管理模块。 ",
        "import_module": null,
        "parent": "<li>导入选择器模块和文件管理模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/medialibrary-pickercontroller.html"
    },
    {
        "id": 1338,
        "pre": "import { PickerController } from '@ohos.file.PhotoPickerComponent';\\nimport { fileUri } from '@kit.CoreFileKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State pickerController: PickerController = new PickerController();\\n  @State originUrl: string = '';\\n  @State replaceUrl: string = '';\\n\\n  build() {\\n    Row() {\\n    Column() {\\n      Button(\\\"replace url\\\").width('25%').height('50%').margin({ top: 10 }).onClick(() => {\\n        this.originUrl = 'file://media/photo/test.jpg';\\n        this.replaceUrl = fileUri.getUriFromPath(getContext().filesDir + \\\"/test.jpg\\\").toString();\\n        this.pickerController.replacePhotoPickerPreview(this.originUrl, this.replaceUrl, (err, b) => {\\n          console.log(\\\"hello this.pickerController.replaceUrl code res:\\\" + b)\\n        })\\n      })\\n    }\\n    .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]完整示例",
        "parent_text": "[h2]完整示例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section116833272919\\\"'><a name='\\\"section116833272919\\\"'></a><a name='\\\"section116833272919\\\"'></a><h4>[h2]完整示例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/medialibrary-pickercontroller.html"
    },
    {
        "id": 1339,
        "pre": "import photoAccessHelper from '@ohos.file.photoAccessHelper';\\nimport { PickerController, PickerOptions, SaveMode } from '@ohos.file.PhotoPickerComponent';\\nimport { fileUri } from '@kit.CoreFileKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入选择器模块和文件管理模块。 ",
        "import_module": null,
        "parent": "<li>导入选择器模块和文件管理模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/medialibrary-pickercontroller.html"
    },
    {
        "id": 1340,
        "pre": "import photoAccessHelper from '@ohos.file.photoAccessHelper';\\nimport { PickerController, PickerOptions, SaveMode } from '@ohos.file.PhotoPickerComponent';\\nimport { fileUri } from '@kit.CoreFileKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State pickerController: PickerController = new PickerController();\\n  @State originUrl: string = '';\\n  @State replaceUrl: string = '';\\n\\n  build() {\\n    Row() {\\n    Column() {\\n      Button(\\\"replace url\\\").width('25%').height('50%').margin({ top: 10 }).onClick(() => {\\n        this.originUrl = 'file://media/photo/test.jpg';\\n        this.replaceUrl = fileUri.getUriFromPath(getContext().filesDir + \\\"/test.jpg\\\").toString();\\n        this.pickerController.replacePhotoPickerPreview(this.originUrl, this.replaceUrl, (err, b) => {\\n          console.log(\\\"hello this.pickerController.replaceUrl code res:\\\" + b)\\n        })\\n        let photoCreationConfig: photoAccessHelper.PhotoCreationConfig = {\\n          title: 'test',\\n          fileNameExtension: 'jpg',\\n          photoType: photoAccessHelper.PhotoType.IMAGE,\\n          subtype: photoAccessHelper.PhotoSubtype.DEFAULT,\\n        };\\n        this.pickerController.saveTrustedPhotoAssets([this.replaceUrl], (err, arr) => {\\n          console.log(\\\"testPicker27 this.pickerController.save code res:\\\" + err.code);\\n        }, [photoCreationConfig], SaveMode.SAVE_AS);\\n      })\\n    }\\n    .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]完整示例",
        "parent_text": "[h2]完整示例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1228128173319\\\"'><a name='\\\"section1228128173319\\\"'></a><a name='\\\"section1228128173319\\\"'></a><h4>[h2]完整示例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/medialibrary-pickercontroller.html"
    },
    {
        "id": 1341,
        "pre": "constexpr int32_t BUTTON_CLICK_ID = 1;\\nbool flag = false;\\nArkUI_NodeHandle parrentNode;\\nArkUI_NodeHandle childNode;\\nArkUI_NodeHandle buttonNode;\\n\\nvoid mainViewMethod(ArkUI_NodeContentHandle handle)\\n{\\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \\\"ArkUI_NativeNodeAPI_1\\\"));\\n    ArkUI_NodeHandle column = nodeAPI->createNode(ARKUI_NODE_COLUMN);\\n    ArkUI_NumberValue widthValue[] = {{.f32 = 500}};\\n    ArkUI_AttributeItem widthItem = {.value = widthValue, .size = sizeof(widthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(column, NODE_WIDTH, &widthItem);\\n    ArkUI_NumberValue heightValue[] = {{.f32 = 500}};\\n    ArkUI_AttributeItem heightItem = {.value = heightValue, .size = sizeof(heightValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(column, NODE_HEIGHT, &heightItem);\\n    ArkUI_NodeHandle buttonShow = nodeAPI->createNode(ARKUI_NODE_BUTTON);\\n    ArkUI_NumberValue buttonWidthValue[] = {{.f32 = 200}};\\n    ArkUI_AttributeItem buttonWidthItem = {.value = buttonWidthValue,\\n                                           .size = sizeof(buttonWidthValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(buttonShow, NODE_WIDTH, &buttonWidthItem);\\n    ArkUI_NumberValue buttonHeightValue[] = {{.f32 = 50}};\\n    ArkUI_AttributeItem buttonHeightItem = {.value = buttonHeightValue,\\n                                            .size = sizeof(buttonHeightValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(buttonShow, NODE_HEIGHT, &buttonHeightItem);\\n    ArkUI_AttributeItem labelItem = {.string = \\\"show\\\"};\\n    nodeAPI->setAttribute(buttonShow, NODE_BUTTON_LABEL, &labelItem);\\n    ArkUI_NumberValue buttonOpenTypeValue[] = {{.i32 = static_cast<int32_t>(ARKUI_BUTTON_TYPE_NORMAL)}};\\n    ArkUI_AttributeItem buttonOpenTypeItem = {.value = buttonOpenTypeValue,\\n                                              .size = sizeof(buttonOpenTypeValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(buttonShow, NODE_BUTTON_TYPE, &buttonOpenTypeItem);\\n    ArkUI_NumberValue buttonShowMarginValue[] = {{.f32 = 20}};\\n    ArkUI_AttributeItem buttonShowMarginItem = {.value = buttonShowMarginValue,\\n                                                 .size = sizeof(buttonShowMarginValue) / sizeof(ArkUI_NumberValue)};\\n    nodeAPI->setAttribute(buttonShow, NODE_MARGIN, &buttonShowMarginItem);\\n    nodeAPI->registerNodeEvent(buttonShow, NODE_ON_CLICK, BUTTON_CLICK_ID, nullptr);\\n    nodeAPI->addNodeEventReceiver(buttonShow, OnButtonShowClicked);\\n    parrentNode = column;\\n    buttonNode = buttonShow;\\n    nodeAPI->addChild(column, buttonShow);\\n    OH_ArkUI_NodeContent_AddNode(handle, column);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建可交互界面，界面中包含Button，点击可以控制转场节点的添加和移除。其中 ArkUI_NodeContentHandle 类型节点的获取与使用可参考接入ArkTS页面。 ",
        "import_module": null,
        "parent": "<li><p>创建可交互界面，界面中包含Button，点击可以控制转场节点的添加和移除。其中 ArkUI_NodeContentHandle 类型节点的获取与使用可参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ndk-access-the-arkts-page\\\"'>接入ArkTS页面</a>。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ndk-use-animation.html"
    },
    {
        "id": 1342,
        "pre": "export const registerWatcher: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将RegisterWatcher注册为ArkTS接口： 编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n} 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>将RegisterWatcher注册为ArkTS接口：</p> <p>编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher注册为ArkTS接口：</p> <pre>static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hiappevent-watcher-resourceleak-events-ndk.html"
    },
    {
        "id": 1343,
        "pre": "import { appInfoManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入appInfoManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入appInfoManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/appgallery-appinfo-use.html"
    },
    {
        "id": 1344,
        "pre": "import { appInfoManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入appInfoManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入appInfoManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/appgallery-appinfo-use.html"
    },
    {
        "id": 1345,
        "pre": "import { appInfoManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入appInfoManager模块及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入appInfoManager模块及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/appgallery-appinfo-use.html"
    },
    {
        "id": 1346,
        "pre": "{\\n  data: 消息体中的extraData\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "消息内容，结构体如下： ",
        "import_module": "{\\n  data: 消息体中的extraData\\n}",
        "parent": "<td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"37.65656565656566%\\\"'><p>消息内容，结构体如下：</p> </td>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-background.html"
    },
    {
        "id": 1347,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-as-const\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-as-const.html"
    },
    {
        "id": 1348,
        "pre": "export const foo1 = 'bar';\\nexport const foo2 = 'bar' as const;\\nexport const foo3: 'bar' = 'bar' as const;\\nexport const bar4 = 'bar' as string;\\nexport const foo6 = { bar: 'baz' };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-as-const.html"
    },
    {
        "id": 1349,
        "pre": "export const bar: 1 = 1;\\nexport const foo1 = <'bar'>'bar';\\nexport const foo2 = { bar: 'baz' as 'baz' };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-as-const.html"
    },
    {
        "id": 1350,
        "pre": "@Entry\\n@Component\\nstruct LoginExample {\\n  pathInfos: NavPathStack = new NavPathStack();\\n  @State ReserveAccount: string = '';\\n  @State ReservePassword: string = '';\\n  // 保存填充功能初始值：true\\n  @State enAbleAutoFill: boolean = true;\\n\\n  onBackPress() {\\n    // 当非成功登录、返回等页面跳转时将enAbleAutoFill设置为false，密码保险箱不使能\\n    this.enAbleAutoFill = false;\\n    return false;\\n  }\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'home_page') {\\n      HomePage()\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pathInfos) {\\n      Column({ space: 16 }) {\\n        Text(\\\"账户登录\\\")\\n          .commonTitleStyles()\\n\\n        TextInput({ placeholder: '账号' })\\n          .commonInputStyles()\\n          .type(InputType.USER_NAME)// 账号框使用USER_NAME属性\\n          .enableAutoFill(this.enAbleAutoFill)// 保存填充功能属性\\n          .onChange((value: string) => {\\n            this.ReserveAccount = value;\\n          })\\n\\n        TextInput({ placeholder: '密码' })\\n          .commonInputStyles()\\n          .showPasswordIcon(true)\\n          .type(InputType.Password)// 密码框使用Password属性\\n          .enableAutoFill(this.enAbleAutoFill)// 保存填充功能属性\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        Button('登录', { type: ButtonType.Capsule, stateEffect: false })\\n          .borderRadius(20)\\n          .width('100%')\\n          .height(40)\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            // 成功登录时页面跳转将enAbleAutoFill设置为true，密码保险箱使能\\n            this.enAbleAutoFill = true;\\n            this.pathInfos.pushPathByName('home_page', null)\\n          })\\n      }\\n      .padding(16)\\n    }\\n    .navDestination(this.PageMap)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}\\n\\n@Component\\nstruct HomePage {\\n  pathInfos: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text(\\\"Home Page\\\").commonTitleStyles()\\n      }.width('100%').height('100%')\\n    }.title(\\\"Home Page\\\")\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathInfos = context.pathStack;\\n    })\\n  }\\n}\\n\\n@Extend(Text)\\nfunction commonTitleStyles() {\\n  .fontSize(24)\\n  .fontColor('#000000')\\n  .fontWeight(FontWeight.Medium)\\n  .margin({ top: 18 })\\n}\\n\\n@Extend(TextInput)\\nfunction commonInputStyles() {\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .opacity(0.6)\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "登录、注册失败",
        "parent_text": "登录、注册失败当应用成功登录、成功注册后将账号密码保存至密码保险箱。但当应用没有成功登录或是没有成功注册时，通过页面路由（router）跳转返回，建议应用将enableAutofill属性为false，避免保存错误信息。 示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section21491511449\\\"'><a name='\\\"section21491511449\\\"'></a><a name='\\\"section21491511449\\\"'></a><h4>登录、注册失败</h4><p>当应用成功登录、成功注册后将账号密码保存至密码保险箱。但当应用没有成功登录或是没有成功注册时，通过页面路由（router）跳转返回，建议应用将enableAutofill属性为false，避免保存错误信息。</p> <p>示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-adaptation-in-custom-layout.html"
    },
    {
        "id": 1351,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-get-file-url.html"
    },
    {
        "id": 1352,
        "pre": "import { webview } from '@kit.ArkWeb';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  controller: webview.WebviewController = new webview.WebviewController();\\n  build() {\\n    Column() {\\n      // Load HTML5 files during component creation.\\n      Web({ src: $rawfile(\\\"autofill_h5.html\\\"), controller: this.controller })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "示例代码通过ArkWeb的Web组件加载H5文件。  autofill_h5.html如下所示。其中通过给form表单的input输入框（form表单的子节点）配置autocomplete属性来支持智能填充，action需要配置表单提交接口链接，当form表单提交后，页面导航发生变化时，满足历史表单输入保存的条件时会触发对应弹窗。参考下面示例： <!DOCTYPE html>\\n<html>\\n<head>\\n    <meta content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;\\\" name=\\\"viewport\\\"/>\\n    <title>智能填充H5测试</title>\\n</head>\\n<body>\\n<h4>智能填充H5测试</h4>\\n<!--The link of the form submission interface must be configured for the value of the action tag.-->\\n<form method=\\\"POST\\\" action=\\\"\\\">\\n    <label for=\\\"nickname\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\">昵称:</label>\\n    <!--Smart fill is supported by configuring the autocomplete attribute.-->\\n    <input type=\\\"text\\\" id=\\\"nickname\\\" autocomplete=\\\"nickname\\\"/><br/><br/>\\n    <label for=\\\"name\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\">姓名:</label>\\n    <input type=\\\"text\\\" id=\\\"name\\\" autocomplete=\\\"name\\\"/><br/><br/>\\n    <label for=\\\"tel-national\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\">手机号:</label> \\n    <input type=\\\"number\\\" id=\\\"tel-national\\\" autocomplete=\\\"tel-national\\\"/><br/><br/>\\n    <label for=\\\"email\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\">邮箱:</label>\\n    <input type=\\\"text\\\" id=\\\"email\\\" autocomplete=\\\"email\\\"/><br/><br/>\\n    <label for=\\\"id-card-number\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\">身份证号:</label>\\n    <input type=\\\"number\\\" id=\\\"id-card-number\\\" autocomplete=\\\"id-card-number\\\"/><br/><br/>\\n    <label for=\\\"street-address\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\">带街道地址:</label>\\n    <input type=\\\"text\\\" id=\\\"street-address\\\" autocomplete=\\\"street-address\\\"/><br/><br/>\\n    <div align=\\\"center\\\">\\n        <button type=\\\"submit\\\" style=\\\"width: 80px\\\">提交</button>\\n    </div>\\n</form>\\n</body>\\n</html> ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section10674933162711\\\"'><a name='\\\"section10674933162711\\\"'></a><a name='\\\"section10674933162711\\\"'></a><h4>示例代码</h4><ul><li>通过ArkWeb的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-web\\\"' target='\\\"_blank\\\"'>Web组件</a>加载H5文件。</li></ul>  <ul><li id='\\\"li5559949121818\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178498162__li5559949121818\\\"'></a><a name='\\\"li5559949121818\\\"'></a>autofill_h5.html如下所示。其中通过给form表单的input输入框（form表单的子节点）配置<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/scenario-fusion-mappingrelationship#section4813203065916\\\"'>autocomplete</a>属性来支持智能填充，action需要配置表单提交接口链接，当form表单提交后，页面导航发生变化时，满足历史表单输入保存的条件时会触发对应弹窗。参考下面示例：</li></ul> <pre class='\\\"html\\\"'>&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n    &lt;meta content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;\\\" name=\\\"viewport\\\"/&gt;\\n    &lt;title&gt;智能填充H5测试&lt;/title&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n&lt;h4&gt;智能填充H5测试&lt;/h4&gt;\\n&lt;!--The link of the form submission interface must be configured for the value of the action tag.--&gt;\\n&lt;form method=\\\"POST\\\" action=\\\"\\\"&gt;\\n    &lt;label for=\\\"nickname\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\"&gt;昵称:&lt;/label&gt;\\n    &lt;!--Smart fill is supported by configuring the autocomplete attribute.--&gt;\\n    &lt;input type=\\\"text\\\" id=\\\"nickname\\\" autocomplete=\\\"nickname\\\"/&gt;&lt;br/&gt;&lt;br/&gt;\\n    &lt;label for=\\\"name\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\"&gt;姓名:&lt;/label&gt;\\n    &lt;input type=\\\"text\\\" id=\\\"name\\\" autocomplete=\\\"name\\\"/&gt;&lt;br/&gt;&lt;br/&gt;\\n    &lt;label for=\\\"tel-national\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\"&gt;手机号:&lt;/label&gt; \\n    &lt;input type=\\\"number\\\" id=\\\"tel-national\\\" autocomplete=\\\"tel-national\\\"/&gt;&lt;br/&gt;&lt;br/&gt;\\n    &lt;label for=\\\"email\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\"&gt;邮箱:&lt;/label&gt;\\n    &lt;input type=\\\"text\\\" id=\\\"email\\\" autocomplete=\\\"email\\\"/&gt;&lt;br/&gt;&lt;br/&gt;\\n    &lt;label for=\\\"id-card-number\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\"&gt;身份证号:&lt;/label&gt;\\n    &lt;input type=\\\"number\\\" id=\\\"id-card-number\\\" autocomplete=\\\"id-card-number\\\"/&gt;&lt;br/&gt;&lt;br/&gt;\\n    &lt;label for=\\\"street-address\\\" style=\\\"width: 90px; display: inline-block; text-align: end;\\\"&gt;带街道地址:&lt;/label&gt;\\n    &lt;input type=\\\"text\\\" id=\\\"street-address\\\" autocomplete=\\\"street-address\\\"/&gt;&lt;br/&gt;&lt;br/&gt;\\n    &lt;div align=\\\"center\\\"&gt;\\n        &lt;button type=\\\"submit\\\" style=\\\"width: 80px\\\"&gt;提交&lt;/button&gt;\\n    &lt;/div&gt;\\n&lt;/form&gt;\\n&lt;/body&gt;\\n&lt;/html&gt;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-h5.html"
    },
    {
        "id": 1353,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-attributeUpdater-control-refresh-scope\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-attribute-update-refresh-scope.html"
    },
    {
        "id": 1354,
        "pre": "import { AttributeUpdater } from '@ohos.arkui.modifier';\\n// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { FriendMoment } from './data/DataEntry'\\n\\nexport class MyTextUpdater extends AttributeUpdater<TextAttribute> {\\n  private color: string | number | Resource = \\\"\\\";\\n\\n  constructor(color: string | number | Resource) {\\n    super();\\n    this.color = color\\n  }\\n\\n  initializeModifier(instance: TextAttribute): void {\\n    instance.fontColor(this.color)\\n  }\\n}\\n\\n@Component\\nexport struct UpdaterComponent {\\n  private momentData: MyDataSource = new MyDataSource();\\n\\n  build() {\\n    Column() {\\n      Text('use MyTextUpdater')\\n      List({ space: 5 }) {\\n        LazyForEach(this.momentData, (moment: FriendMoment) => {\\n          ListItem() {\\n            OneMomentNoModifier({ color: moment.color })\\n              .onClick(() => {\\n                console.log(`my id is ${moment.id}`)\\n              })\\n          }\\n        }, (moment: FriendMoment) => moment.id)\\n      }.width('100%')\\n      .height('100%')\\n      .cachedCount(5)\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nexport struct OneMomentNoModifier {\\n  color: string | number | Resource = \\\"\\\";\\n  textUpdater: MyTextUpdater | null = null;\\n\\n  aboutToAppear(): void {\\n    this.textUpdater = new MyTextUpdater(this.color);\\n  }\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.color = params.color as string;\\n    this.textUpdater?.attribute?.fontColor(this.color);\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('This is the title')\\n      Text('This is the internal text')\\n        .attributeModifier(this.textUpdater)\\n        .textAlign(TextAlign.Center)\\n        .fontStyle(FontStyle.Normal)\\n        .fontSize(13)\\n        .lineHeight(30)\\n        .opacity(0.6)\\n        .margin({ top: 10 })\\n        .fontWeight(30)\\n        .clip(false)\\n        .backgroundBlurStyle(BlurStyle.NONE)\\n        .foregroundBlurStyle(BlurStyle.NONE)\\n        .borderWidth(1)\\n        .borderColor(Color.Pink)\\n        .borderStyle(BorderStyle.Solid)\\n        .alignRules({\\n          'top': { 'anchor': '__container__', 'align': VerticalAlign.Top },\\n          'left': { 'anchor': 'image', 'align': HorizontalAlign.End }\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-attribute-update-refresh-scope.html"
    },
    {
        "id": 1355,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\nimport { FriendMoment } from './data/DataEntry'\\n\\n@Component\\nexport struct UpdaterComponent {\\n  private momentData: MyDataSource = new MyDataSource();\\n\\n  build() {\\n    Column() {\\n      Text('use nothing')\\n      List({ space: 5 }) {\\n        LazyForEach(this.momentData, (moment: FriendMoment) => {\\n          ListItem() {\\n            OneMomentNoModifier({ color: moment.color })\\n              .onClick(() => {\\n                console.log(`my id is ${moment.id}`)\\n              })\\n          }\\n        }, (moment: FriendMoment) => moment.id)\\n      }\\n      .width(\\\"100%\\\")\\n      .height(\\\"100%\\\")\\n      .cachedCount(5)\\n    }\\n  }\\n}\\n\\n@Reusable\\n@Component\\nexport struct OneMomentNoModifier {\\n  @State color: string | number | Resource = \\\"\\\";\\n\\n  aboutToReuse(params: Record<string, Object>): void {\\n    this.color = params.color as number;\\n  }\\n\\n  build() {\\n    Column() {\\n      Text('This is the title')\\n      Text('This is the internal text')\\n        .fontColor(this.color)\\n        .textAlign(TextAlign.Center)\\n        .fontStyle(FontStyle.Normal)\\n        .fontSize(13)\\n        .lineHeight(30)\\n        .opacity(0.6)\\n        .margin({ top: 10 })\\n        .fontWeight(30)\\n        .clip(false)\\n        .backgroundBlurStyle(BlurStyle.NONE)\\n        .foregroundBlurStyle(BlurStyle.NONE)\\n        .borderWidth(1)\\n        .borderColor(Color.Pink)\\n        .borderStyle(BorderStyle.Solid)\\n        .alignRules({\\n          'top': { 'anchor': '__container__', 'align': VerticalAlign.Top },\\n          'left': { 'anchor': 'image', 'align': HorizontalAlign.End }\\n        })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-attribute-update-refresh-scope.html"
    },
    {
        "id": 1356,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  @State isFinished: boolean = false;\\n\\n  build() {\\n    Column() {\\n      Row() {\\n        Text('全部待办')\\n          .fontSize(30)\\n          .fontWeight(FontWeight.Bold)\\n      }\\n      .width('100%')\\n      .margin({top: 10, bottom: 10})\\n\\n      // 待办事项\\n      Row({space: 15}) {\\n        if (this.isFinished) {\\n          // 此处'app.media.finished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n          Image($r('app.media.finished'))\\n            .width(28)\\n            .height(28)\\n        }\\n        else {\\n          // 此处'app.media.unfinished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n          Image($r('app.media.unfinished'))\\n            .width(28)\\n            .height(28)\\n        }\\n        Text('学习高数')\\n          .fontSize(24)\\n          .fontWeight(450)\\n          .decoration({type: this.isFinished ? TextDecorationType.LineThrough : TextDecorationType.None})\\n      }\\n      .height('40%')\\n      .width('100%')\\n      .border({width: 5})\\n      .padding({left: 15})\\n      .onClick(() => {\\n        this.isFinished = !this.isFinished;\\n      })\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin({top: 5, bottom: 5})\\n    .backgroundColor('#90f1f3f5')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]@State状态变量",
        "parent_text": "[h2]@State状态变量@State装饰器作为最常用的装饰器，用来定义状态变量，一般作为父组件的数据源，当开发者点击时，通过触发状态变量的更新从而刷新UI，去掉@State则不再支持刷新UI。  效果图：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"state状态变量\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178052662__state%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\\\"'></a><a name='\\\"state%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\\\"'></a><h4>[h2]@State状态变量</h4><ul><li>@State装饰器作为最常用的装饰器，用来定义状态变量，一般作为父组件的数据源，当开发者点击时，通过触发状态变量的更新从而刷新UI，去掉@State则不再支持刷新UI。</li></ul>  <p>效果图：</p> <p><span><img originheight='\\\"636\\\"' originwidth='\\\"300\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.66923656420235398194938685679787:50001231000000:2800:CA223C4F35077E208EC7DE5366765B3E2F406FC71E6419520610FC6A6EAF9691.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-mvvm.html"
    },
    {
        "id": 1357,
        "pre": "@Component\\nstruct TodoComponent {\\n  build() {\\n    Row() {\\n      Text('全部待办')\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n    }\\n    .width('100%')\\n    .margin({top: 10, bottom: 10})\\n  }\\n}\\n\\n@Component\\nstruct AllChooseComponent {\\n  @Link isFinished: boolean;\\n\\n  build() {\\n    Row() {\\n      Button('全选', {type: ButtonType.Normal})\\n        .onClick(() => {\\n          this.isFinished = !this.isFinished;\\n        })\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .backgroundColor('#f7f6cc74')\\n    }\\n    .padding({left: 15})\\n    .width('100%')\\n    .margin({top: 10, bottom: 10})\\n  }\\n}\\n\\n@Component\\nstruct ThingsComponent1 {\\n  @Prop isFinished: boolean;\\n\\n  build() {\\n    // 待办事项1\\n    Row({space: 15}) {\\n      if (this.isFinished) {\\n        // 此处'app.media.finished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        Image($r('app.media.finished'))\\n          .width(28)\\n          .height(28)\\n      }\\n      else {\\n        // 此处'app.media.unfinished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        Image($r('app.media.unfinished'))\\n          .width(28)\\n          .height(28)\\n      }\\n      Text('学习语文')\\n        .fontSize(24)\\n        .fontWeight(450)\\n        .decoration({type: this.isFinished ? TextDecorationType.LineThrough : TextDecorationType.None})\\n    }\\n    .height('40%')\\n    .width('100%')\\n    .border({width: 5})\\n    .padding({left: 15})\\n    .onClick(() => {\\n      this.isFinished = !this.isFinished;\\n    })\\n  }\\n}\\n\\n@Component\\nstruct ThingsComponent2 {\\n  @Prop isFinished: boolean;\\n\\n  build() {\\n    // 待办事项1\\n    Row({space: 15}) {\\n      if (this.isFinished) {\\n        // 此处'app.media.finished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        Image($r('app.media.finished'))\\n          .width(28)\\n          .height(28)\\n      }\\n      else {\\n        // 此处'app.media.unfinished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        Image($r('app.media.unfinished'))\\n          .width(28)\\n          .height(28)\\n      }\\n      Text('学习高数')\\n        .fontSize(24)\\n        .fontWeight(450)\\n        .decoration({type: this.isFinished ? TextDecorationType.LineThrough : TextDecorationType.None})\\n    }\\n    .height('40%')\\n    .width('100%')\\n    .border({width: 5})\\n    .padding({left: 15})\\n    .onClick(() => {\\n      this.isFinished = !this.isFinished;\\n    })\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State isFinished: boolean = false;\\n\\n  build() {\\n    Column() {\\n      // 全部待办\\n      TodoComponent()\\n\\n      // 全选\\n      AllChooseComponent({isFinished: this.isFinished})\\n\\n      // 待办事项1\\n      ThingsComponent1({isFinished: this.isFinished})\\n\\n      // 待办事项2\\n      ThingsComponent2({isFinished: this.isFinished})\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin({top: 5, bottom: 5})\\n    .backgroundColor('#90f1f3f5')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]@Prop、@Link的作用",
        "parent_text": "[h2]@Prop、@Link的作用上述示例中，所有的代码都写在了@Entry组件中，随着需要渲染的组件越来越多，@Entry组件必然需要进行拆分，为此拆分出的子组件就需要使用@Prop和@Link装饰器： @Prop是父子间单向传递，子组件会深拷贝父组件数据，可从父组件更新，也可自己更新数据，但不会同步父组件数据。@Link是父子间双向传递，父组件改变，会通知所有的@Link，同时@Link的更新也会通知父组件对应变量进行刷新。  效果图如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"proplink的作用\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178052662__proplink%E7%9A%84%E4%BD%9C%E7%94%A8\\\"'></a><a name='\\\"proplink%E7%9A%84%E4%BD%9C%E7%94%A8\\\"'></a><h4>[h2]@Prop、@Link的作用</h4><p>上述示例中，所有的代码都写在了@Entry组件中，随着需要渲染的组件越来越多，@Entry组件必然需要进行拆分，为此拆分出的子组件就需要使用@Prop和@Link装饰器：</p> <ul><li>@Prop是父子间单向传递，子组件会深拷贝父组件数据，可从父组件更新，也可自己更新数据，但不会同步父组件数据。</li><li>@Link是父子间双向传递，父组件改变，会通知所有的@Link，同时@Link的更新也会通知父组件对应变量进行刷新。</li></ul>  <p>效果图如下：</p> <p><span><img originheight='\\\"640\\\"' originwidth='\\\"300\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.72347425672439103280650737485562:50001231000000:2800:9F405A630C668634BCE709DC43A2F7EEC1C79486258C30558F20DAD0A7351A9F.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-mvvm.html"
    },
    {
        "id": 1358,
        "pre": "@Component\\nstruct TodoComponent {\\n  build() {\\n    Row() {\\n      Text('全部待办')\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n    }\\n    .width('100%')\\n    .margin({top: 10, bottom: 10})\\n  }\\n}\\n\\n@Component\\nstruct AllChooseComponent {\\n  @Link isFinished: boolean;\\n\\n  build() {\\n    Row() {\\n      Button('全选', {type: ButtonType.Normal})\\n        .onClick(() => {\\n          this.isFinished = !this.isFinished;\\n        })\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .backgroundColor('#f7f6cc74')\\n    }\\n    .padding({left: 15})\\n    .width('100%')\\n    .margin({top: 10, bottom: 10})\\n  }\\n}\\n\\n@Component\\nstruct ThingsComponent {\\n  @Prop isFinished: boolean;\\n  @Prop things: string;\\n  build() {\\n    // 待办事项1\\n    Row({space: 15}) {\\n      if (this.isFinished) {\\n        // 此处'app.media.finished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        Image($r('app.media.finished'))\\n          .width(28)\\n          .height(28)\\n      }\\n      else {\\n        // 此处'app.media.unfinished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        Image($r('app.media.unfinished'))\\n          .width(28)\\n          .height(28)\\n      }\\n      Text(`${this.things}`)\\n        .fontSize(24)\\n        .fontWeight(450)\\n        .decoration({type: this.isFinished ? TextDecorationType.LineThrough : TextDecorationType.None})\\n    }\\n    .height('8%')\\n    .width('90%')\\n    .padding({left: 15})\\n    .opacity(this.isFinished ? 0.3: 1)\\n    .border({width:1})\\n    .borderColor(Color.White)\\n    .borderRadius(25)\\n    .backgroundColor(Color.White)\\n    .onClick(() => {\\n      this.isFinished = !this.isFinished;\\n    })\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State isFinished: boolean = false;\\n  @State planList: string[] = [\\n    '7.30 起床',\\n    '8.30 早餐',\\n    '11.30 中餐',\\n    '17.30 晚餐',\\n    '21.30 夜宵',\\n    '22.30 洗澡',\\n    '1.30 起床'\\n  ];\\n\\n  build() {\\n    Column() {\\n      // 全部待办\\n      TodoComponent()\\n\\n      // 全选\\n      AllChooseComponent({isFinished: this.isFinished})\\n\\n      List() {\\n        ForEach(this.planList, (item: string) => {\\n          // 待办事项1\\n          ThingsComponent({isFinished: this.isFinished, things: item})\\n            .margin(5)\\n        })\\n      }\\n\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin({top: 5, bottom: 5})\\n    .backgroundColor('#90f1f3f5')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]循环渲染组件",
        "parent_text": "[h2]循环渲染组件上个示例虽然拆分出了子组件，但是发现组件1和组件2的代码十分类似，当渲染的组件除了数据外其他设置都相同时，此时就需要使用到ForEach循环渲染。ForEach使用之后，冗余代码变得更少，并且代码结构更加清晰。  效果图如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"循环渲染组件\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178052662__%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93%E7%BB%84%E4%BB%B6\\\"'></a><a name='\\\"%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93%E7%BB%84%E4%BB%B6\\\"'></a><h4>[h2]循环渲染组件</h4><ul><li>上个示例虽然拆分出了子组件，但是发现组件1和组件2的代码十分类似，当渲染的组件除了数据外其他设置都相同时，此时就需要使用到ForEach循环渲染。</li><li>ForEach使用之后，冗余代码变得更少，并且代码结构更加清晰。</li></ul>  <p>效果图如下：</p> <p><span><img originheight='\\\"548\\\"' originwidth='\\\"260\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.35732070215120724244044854405197:50001231000000:2800:B1DDAC6C150B7BD52B607B4F65D66845DC54A6EA51D5BF2C6D8FC6AA48A9E4A1.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-mvvm.html"
    },
    {
        "id": 1359,
        "pre": "@Observed\\nclass TodoListData {\\n  planList: string[] = [\\n    '7.30 起床',\\n    '8.30 早餐',\\n    '11.30 中餐',\\n    '17.30 晚餐',\\n    '21.30 夜宵',\\n    '22.30 洗澡',\\n    '1.30 起床'\\n  ];\\n}\\n\\n@Component\\nstruct TodoComponent {\\n  build() {\\n    Row() {\\n      Text('全部待办')\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n    }\\n    .width('100%')\\n    .margin({top: 10, bottom: 10})\\n  }\\n}\\n\\n@Component\\nstruct AllChooseComponent {\\n  @Link isFinished: boolean;\\n\\n  build() {\\n    Row() {\\n      Button('全选', {type: ButtonType.Capsule})\\n        .onClick(() => {\\n          this.isFinished = !this.isFinished;\\n        })\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .backgroundColor('#f7f6cc74')\\n    }\\n    .padding({left: 15})\\n    .width('100%')\\n    .margin({top: 10, bottom: 10})\\n  }\\n}\\n\\n@Component\\nstruct ThingsComponent {\\n  @Prop isFinished: boolean;\\n  @Prop things: string;\\n\\n  @Builder displayIcon(icon: Resource) {\\n    Image(icon)\\n      .width(28)\\n      .height(28)\\n      .onClick(() => {\\n        this.isFinished = !this.isFinished;\\n      })\\n  }\\n\\n  build() {\\n    // 待办事项1\\n    Row({space: 15}) {\\n      if (this.isFinished) {\\n        // 此处'app.media.finished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        this.displayIcon($r('app.media.finished'));\\n      }\\n      else {\\n        // 此处'app.media.unfinished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        this.displayIcon($r('app.media.unfinished'));\\n      }\\n      Text(`${this.things}`)\\n        .fontSize(24)\\n        .fontWeight(450)\\n        .decoration({type: this.isFinished ? TextDecorationType.LineThrough : TextDecorationType.None})\\n        .onClick(() => {\\n          this.things += '啦';\\n        })\\n    }\\n    .height('8%')\\n    .width('90%')\\n    .padding({left: 15})\\n    .opacity(this.isFinished ? 0.3: 1)\\n    .border({width:1})\\n    .borderColor(Color.White)\\n    .borderRadius(25)\\n    .backgroundColor(Color.White)\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State isFinished: boolean = false;\\n  @State data: TodoListData = new TodoListData();\\n\\n  build() {\\n    Column() {\\n      // 全部待办\\n      TodoComponent()\\n\\n      // 全选\\n      AllChooseComponent({isFinished: this.isFinished})\\n\\n      List() {\\n        ForEach(this.data.planList, (item: string) => {\\n          // 待办事项1\\n          ThingsComponent({isFinished: this.isFinished, things: item})\\n            .margin(5)\\n        })\\n      }\\n\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin({top: 5, bottom: 5})\\n    .backgroundColor('#90f1f3f5')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]@Builder方法",
        "parent_text": "[h2]@Builder方法Builder方法用于组件内定义方法，可以使得相同代码可以在组件内进行复用。本示例不仅使用了@Builder方法进行去重，同时对数据进行了移出，可以看到此时代码更加清晰易读，相对于最开始的代码，@Entry组件基本只用于处理页面构建逻辑，而不处理大量与页面设计无关的内容。   效果图如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"builder方法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002178052662__builder%E6%96%B9%E6%B3%95\\\"'></a><a name='\\\"builder%E6%96%B9%E6%B3%95\\\"'></a><h4>[h2]@Builder方法</h4><ul><li>Builder方法用于组件内定义方法，可以使得相同代码可以在组件内进行复用。</li><li>本示例不仅使用了@Builder方法进行去重，同时对数据进行了移出，可以看到此时代码更加清晰易读，相对于最开始的代码，@Entry组件基本只用于处理页面构建逻辑，而不处理大量与页面设计无关的内容。</li></ul>  <p> 效果图如下：</p> <p><span><img originheight='\\\"548\\\"' originwidth='\\\"256\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.72675103457182913862233730122261:50001231000000:2800:E59526B4C9E6C23CF5DFB1261E478C4EC33310882FE798F020BA1071F2BE9B7F.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-mvvm.html"
    },
    {
        "id": 1360,
        "pre": "import { common } from '@kit.AbilityKit';\\n// import ViewModel\\nimport TodoListViewModel from '../ViewModel/TodoListViewModel';\\n\\n// import View\\nimport { TodoComponent } from '../View/TodoComponent';\\nimport { AllChooseComponent } from '../View/AllChooseComponent';\\nimport { TodoListComponent } from '../View/TodoListComponent';\\n\\n@Entry\\n@Component\\nstruct TodoList {\\n  @State thingsTodo: TodoListViewModel = new TodoListViewModel();\\n  private context = getContext(this) as common.UIAbilityContext;\\n\\n  async aboutToAppear() {\\n    await this.thingsTodo.loadTasks(this.context);\\n  }\\n\\n  build() {\\n    Column() {\\n      Row({ space: 40 }) {\\n        // 全部待办\\n        TodoComponent()\\n        //全选\\n        AllChooseComponent({ thingsViewModel: this.thingsTodo })\\n      }\\n\\n      Column() {\\n        TodoListComponent({ thingsViewModelArray: this.thingsTodo.things })\\n      }\\n    }\\n    .height('100%')\\n    .width('100%')\\n    .margin({ top: 5, bottom: 5 })\\n    .backgroundColor('#90f1f3f5')\\n  }\\n}",
        "type": "Reference",
        "function_call": "chooseAll(): void",
        "function_name": null,
        "parent_text": "Index.ets  ThingsModel.ets export default class ThingsModel {\\n  thingsName: string = 'Todo';\\n  isFinish: boolean = false;\\n} TodoListModel.ets import { common } from '@kit.AbilityKit';\\nimport util from '@ohos.util';\\nimport ThingsModel from './ThingsModel';\\n\\nexport default class TodoListModel {\\n  things: Array<ThingsModel> = [];\\n\\n  constructor(things: Array<ThingsModel>) {\\n    this.things = things;\\n  }\\n\\n  async loadTasks(context: common.UIAbilityContext) {\\n    let getJson = await context.resourceManager.getRawFileContent('defaultTasks.json');\\n    let textDecoderOptions: util.TextDecoderOptions = { ignoreBOM: true };\\n    let textDecoder = util.TextDecoder.create('utf-8', textDecoderOptions);\\n    let result = textDecoder.decodeToString(getJson, { stream: false });\\n    this.things = JSON.parse(result);\\n  }\\n} AllChooseComponent.ets import TodoListViewModel from \\\"../ViewModel/TodoListViewModel\\\";\\n\\n@Component\\nexport struct AllChooseComponent {\\n  @State titleName: string = '全选';\\n  @Link thingsViewModel: TodoListViewModel;\\n\\n  build() {\\n    Row() {\\n      Button(`${this.titleName}`, { type: ButtonType.Capsule })\\n        .onClick(() => {\\n          this.thingsViewModel.chooseAll();\\n          this.titleName = this.thingsViewModel.isChoosen ? '全选' : '取消全选';\\n        })\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .backgroundColor('#f7f6cc74')\\n    }\\n    .padding({ left: this.thingsViewModel.isChoosen ? 15 : 0 })\\n    .width('100%')\\n    .margin({ top: 10, bottom: 10 })\\n  }\\n} ThingsComponent.ets import ThingsViewModel from \\\"../ViewModel/ThingsViewModel\\\";\\n\\n@Component\\nexport struct ThingsComponent {\\n  @Prop things: ThingsViewModel;\\n\\n  @Builder\\n  displayIcon(icon: Resource) {\\n    Image(icon)\\n      .width(28)\\n      .height(28)\\n      .onClick(() => {\\n        this.things.updateIsFinish();\\n      })\\n  }\\n\\n  build() {\\n    // 待办事项\\n    Row({ space: 15 }) {\\n      if(this.things.isFinish) {\\n        // 此处'app.media.finished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        this.displayIcon($r('app.media.finished'));\\n      } else {\\n        // 此处'app.media.unfinished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        this.displayIcon($r('app.media.unfinished'));\\n      }\\n\\n      Text(`${this.things.thingsName}`)\\n        .fontSize(24)\\n        .fontWeight(450)\\n        .decoration({ type: this.things.isFinish ? TextDecorationType.LineThrough: TextDecorationType.None })\\n        .onClick(() => {\\n          this.things.addSuffixes();\\n        })\\n    }\\n    .height('8%')\\n    .width('90%')\\n    .padding({ left: 15 })\\n    .opacity(this.things.isFinish ? 0.3 : 1)\\n    .border({ width: 1 })\\n    .borderColor(Color.White)\\n    .borderRadius(25)\\n    .backgroundColor(Color.White)\\n  }\\n} TodoComponent.ets @Component\\nexport struct TodoComponent {\\n  build() {\\n    Row() {\\n      Text('全部待办')\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n    }\\n    .padding({ left: 15 })\\n    .width('50%')\\n    .margin({ top: 10, bottom: 10 })\\n  }\\n} TodoListComponent.ets import ThingsViewModel from \\\"../ViewModel/ThingsViewModel\\\";\\nimport { ThingsViewModelArray } from \\\"../ViewModel/TodoListViewModel\\\"\\nimport { ThingsComponent } from \\\"./ThingsComponent\\\";\\n\\n@Component\\nexport struct TodoListComponent {\\n  @ObjectLink thingsViewModelArray: ThingsViewModelArray;\\n\\n  build() {\\n    Column() {\\n      List() {\\n        ForEach(this.thingsViewModelArray, (item: ThingsViewModel) => {\\n          // 待办事项\\n          ListItem() {\\n            ThingsComponent({ things: item })\\n              .margin(5)\\n          }\\n        }, (item: ThingsViewModel) => {\\n          return item.thingsName;\\n        })\\n      }\\n    }\\n  }\\n} ThingsViewModel.ets import ThingsModel from \\\"../Model/ThingsModel\\\";\\n\\n@Observed\\nexport default class ThingsViewModel {\\n  @Track thingsName: string = 'Todo';\\n  @Track isFinish: boolean = false;\\n\\n  updateTask(things: ThingsModel) {\\n    this.thingsName = things.thingsName;\\n    this.isFinish = things.isFinish;\\n  }\\n\\n  updateIsFinish(): void {\\n    this.isFinish = !this.isFinish;\\n  }\\n\\n  addSuffixes(): void {\\n    this.thingsName += '啦';\\n  }\\n} TodoListViewModel.ets import ThingsViewModel from \\\"./ThingsViewModel\\\";\\nimport { common } from \\\"@kit.AbilityKit\\\";\\nimport TodoListModel from \\\"../Model/TodoListModel\\\";\\n\\n@Observed\\nexport class ThingsViewModelArray extends Array<ThingsViewModel> {\\n}\\n\\n@Observed\\nexport default class TodoListViewModel {\\n  @Track isChoosen: boolean = true;\\n  @Track things: ThingsViewModelArray = new ThingsViewModelArray();\\n\\n  async loadTasks(context: common.UIAbilityContext) {\\n    let todoList = new TodoListModel([]);\\n    await todoList.loadTasks(context);\\n    for(let things of todoList.things) {\\n      let thingsViewModel = new ThingsViewModel();\\n      thingsViewModel.updateTask(things);\\n      this.things.push(thingsViewModel);\\n    }\\n  }\\n\\n  chooseAll(): void {\\n    for(let things of this.things) {\\n      things.isFinish = this.isChoosen;\\n    }\\n    this.isChoosen = !this.isChoosen;\\n  }\\n} defaultTasks.json [\\n  {\\\"thingsName\\\": \\\"7.30起床\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"8.30早餐\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"11.30中餐\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"17.30晚餐\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"21.30夜宵\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"22.30洗澡\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"1.30睡觉\\\", \\\"isFinish\\\": false}\\n] 经过MVVM模式拆分后的代码，项目结构更加清晰，各模块的职责更加明确。如果有新的页面需要使用事件组件，比如TodoListComponent组件，只需导入该组件即可。 效果图如下：  ",
        "import_module": null,
        "parent": "<li><p>Index.ets</p>  <ul><li>ThingsModel.ets</li></ul> <pre class='\\\"typescript\\\"'>export default class ThingsModel {\\n  thingsName: string = 'Todo';\\n  isFinish: boolean = false;\\n}</pre> <ul><li>TodoListModel.ets</li></ul> <pre class='\\\"typescript\\\"'>import { common } from '@kit.AbilityKit';\\nimport util from '@ohos.util';\\nimport ThingsModel from './ThingsModel';\\n\\nexport default class TodoListModel {\\n  things: Array&lt;ThingsModel&gt; = [];\\n\\n  constructor(things: Array&lt;ThingsModel&gt;) {\\n    this.things = things;\\n  }\\n\\n  async loadTasks(context: common.UIAbilityContext) {\\n    let getJson = await context.resourceManager.getRawFileContent('defaultTasks.json');\\n    let textDecoderOptions: util.TextDecoderOptions = { ignoreBOM: true };\\n    let textDecoder = util.TextDecoder.create('utf-8', textDecoderOptions);\\n    let result = textDecoder.decodeToString(getJson, { stream: false });\\n    this.things = JSON.parse(result);\\n  }\\n}</pre> <ul><li>AllChooseComponent.ets</li></ul> <pre class='\\\"typescript\\\"'>import TodoListViewModel from \\\"../ViewModel/TodoListViewModel\\\";\\n\\n@Component\\nexport struct AllChooseComponent {\\n  @State titleName: string = '全选';\\n  @Link thingsViewModel: TodoListViewModel;\\n\\n  build() {\\n    Row() {\\n      Button(`${this.titleName}`, { type: ButtonType.Capsule })\\n        .onClick(() =&gt; {\\n          this.thingsViewModel.chooseAll();\\n          this.titleName = this.thingsViewModel.isChoosen ? '全选' : '取消全选';\\n        })\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n        .backgroundColor('#f7f6cc74')\\n    }\\n    .padding({ left: this.thingsViewModel.isChoosen ? 15 : 0 })\\n    .width('100%')\\n    .margin({ top: 10, bottom: 10 })\\n  }\\n}</pre> <ul><li>ThingsComponent.ets</li></ul> <pre class='\\\"typescript\\\"'>import ThingsViewModel from \\\"../ViewModel/ThingsViewModel\\\";\\n\\n@Component\\nexport struct ThingsComponent {\\n  @Prop things: ThingsViewModel;\\n\\n  @Builder\\n  displayIcon(icon: Resource) {\\n    Image(icon)\\n      .width(28)\\n      .height(28)\\n      .onClick(() =&gt; {\\n        this.things.updateIsFinish();\\n      })\\n  }\\n\\n  build() {\\n    // 待办事项\\n    Row({ space: 15 }) {\\n      if(this.things.isFinish) {\\n        // 此处'app.media.finished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        this.displayIcon($r('app.media.finished'));\\n      } else {\\n        // 此处'app.media.unfinished'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n        this.displayIcon($r('app.media.unfinished'));\\n      }\\n\\n      Text(`${this.things.thingsName}`)\\n        .fontSize(24)\\n        .fontWeight(450)\\n        .decoration({ type: this.things.isFinish ? TextDecorationType.LineThrough: TextDecorationType.None })\\n        .onClick(() =&gt; {\\n          this.things.addSuffixes();\\n        })\\n    }\\n    .height('8%')\\n    .width('90%')\\n    .padding({ left: 15 })\\n    .opacity(this.things.isFinish ? 0.3 : 1)\\n    .border({ width: 1 })\\n    .borderColor(Color.White)\\n    .borderRadius(25)\\n    .backgroundColor(Color.White)\\n  }\\n}</pre> <ul><li>TodoComponent.ets</li></ul> <pre class='\\\"typescript\\\"'>@Component\\nexport struct TodoComponent {\\n  build() {\\n    Row() {\\n      Text('全部待办')\\n        .fontSize(30)\\n        .fontWeight(FontWeight.Bold)\\n    }\\n    .padding({ left: 15 })\\n    .width('50%')\\n    .margin({ top: 10, bottom: 10 })\\n  }\\n}</pre> <ul><li>TodoListComponent.ets</li></ul> <pre class='\\\"typescript\\\"'>import ThingsViewModel from \\\"../ViewModel/ThingsViewModel\\\";\\nimport { ThingsViewModelArray } from \\\"../ViewModel/TodoListViewModel\\\"\\nimport { ThingsComponent } from \\\"./ThingsComponent\\\";\\n\\n@Component\\nexport struct TodoListComponent {\\n  @ObjectLink thingsViewModelArray: ThingsViewModelArray;\\n\\n  build() {\\n    Column() {\\n      List() {\\n        ForEach(this.thingsViewModelArray, (item: ThingsViewModel) =&gt; {\\n          // 待办事项\\n          ListItem() {\\n            ThingsComponent({ things: item })\\n              .margin(5)\\n          }\\n        }, (item: ThingsViewModel) =&gt; {\\n          return item.thingsName;\\n        })\\n      }\\n    }\\n  }\\n}</pre> <ul><li>ThingsViewModel.ets</li></ul> <pre class='\\\"typescript\\\"'>import ThingsModel from \\\"../Model/ThingsModel\\\";\\n\\n@Observed\\nexport default class ThingsViewModel {\\n  @Track thingsName: string = 'Todo';\\n  @Track isFinish: boolean = false;\\n\\n  updateTask(things: ThingsModel) {\\n    this.thingsName = things.thingsName;\\n    this.isFinish = things.isFinish;\\n  }\\n\\n  updateIsFinish(): void {\\n    this.isFinish = !this.isFinish;\\n  }\\n\\n  addSuffixes(): void {\\n    this.thingsName += '啦';\\n  }\\n}</pre> <ul><li>TodoListViewModel.ets</li></ul> <pre class='\\\"typescript\\\"'>import ThingsViewModel from \\\"./ThingsViewModel\\\";\\nimport { common } from \\\"@kit.AbilityKit\\\";\\nimport TodoListModel from \\\"../Model/TodoListModel\\\";\\n\\n@Observed\\nexport class ThingsViewModelArray extends Array&lt;ThingsViewModel&gt; {\\n}\\n\\n@Observed\\nexport default class TodoListViewModel {\\n  @Track isChoosen: boolean = true;\\n  @Track things: ThingsViewModelArray = new ThingsViewModelArray();\\n\\n  async loadTasks(context: common.UIAbilityContext) {\\n    let todoList = new TodoListModel([]);\\n    await todoList.loadTasks(context);\\n    for(let things of todoList.things) {\\n      let thingsViewModel = new ThingsViewModel();\\n      thingsViewModel.updateTask(things);\\n      this.things.push(thingsViewModel);\\n    }\\n  }\\n\\n  chooseAll(): void {\\n    for(let things of this.things) {\\n      things.isFinish = this.isChoosen;\\n    }\\n    this.isChoosen = !this.isChoosen;\\n  }\\n}</pre> <ul><li>defaultTasks.json</li></ul> <pre class='\\\"typescript\\\"'>[\\n  {\\\"thingsName\\\": \\\"7.30起床\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"8.30早餐\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"11.30中餐\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"17.30晚餐\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"21.30夜宵\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"22.30洗澡\\\", \\\"isFinish\\\": false},\\n  {\\\"thingsName\\\": \\\"1.30睡觉\\\", \\\"isFinish\\\": false}\\n]</pre> <p>经过MVVM模式拆分后的代码，项目结构更加清晰，各模块的职责更加明确。如果有新的页面需要使用事件组件，比如TodoListComponent组件，只需导入该组件即可。</p> <p>效果图如下：</p> <p><span><img originheight='\\\"477\\\"' originwidth='\\\"396\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.31579647760375317738059565325214:50001231000000:2800:1EF2C77082F17E211EAFB0249CDDB13BB6C2AED471664AFF8A9794E0E82D150F.gif\\\"'/></span></p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-mvvm.html"
    },
    {
        "id": 1361,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { font } from '@kit.ArkUI';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n\\n  build() {\\n    Column() {\\n      Button('addHeaderFooter').onClick(async () => {\\n        // 确保沙箱目录有input.pdf文档\\n        let filePath = this.context.filesDir + '/input.pdf';\\n        let res = this.pdfDocument.loadDocument(filePath);\\n        if (res === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let hfInfo: pdfService.HeaderFooterInfo = new pdfService.HeaderFooterInfo();\\n          hfInfo.fontInfo = new pdfService.FontInfo();\\n          // 确保字体路径存在\\n          hfInfo.fontInfo.fontPath = font.getFontByName('HarmonyOS Sans')?.path;\\n          // 如果不知道字体的具体名称，可以为空字符串\\n          hfInfo.fontInfo.fontName = '';\\n          hfInfo.textSize = 10;\\n          hfInfo.charset = pdfService.CharsetType.PDF_FONT_DEFAULT_CHARSET;\\n          hfInfo.underline = false;\\n          hfInfo.textColor = 0x00000000;\\n          hfInfo.leftMargin = 1.0;\\n          hfInfo.topMargin = 40.0;\\n          hfInfo.rightMargin = 1.0;\\n          hfInfo.bottomMargin = 40.0;\\n          hfInfo.headerLeftText = 'left H <<dd.mm.yyyy>> <<1/n>>';\\n          hfInfo.headerCenterText = 'center H <<m/d/yyyy>> <<1/n>>';\\n          hfInfo.headerRightText = 'right H <<m/d>><<1>>';\\n          hfInfo.footerLeftText = 'left F <<m/d>><<1>>';\\n          hfInfo.footerCenterText = 'center F <<m/d>><<1>>';\\n          hfInfo.footerRightText = 'right F <<dd.mm.yyyy>><<1>>';\\n          this.pdfDocument.addHeaderFooter(hfInfo, 1, 5, true, true);\\n          let outPdfPath = this.context.filesDir + '/testAddHeaderFooter.pdf';\\n          let result = this.pdfDocument.saveDocument(outPdfPath);\\n          hilog.info(0x0000, 'PdfPage', 'addHeaderFooter %{public}s!', result ? 'success' : 'fail');\\n        }\\n        this.pdfDocument.releaseDocument();\\n      })\\n      Button('removeHeaderFooter').onClick(async () => {\\n        let filePath = this.context.filesDir + '/testAddHeaderFooter.pdf';\\n        let res = this.pdfDocument.loadDocument(filePath);\\n        if (res === pdfService.ParseResult.PARSE_SUCCESS && this.pdfDocument.hasHeaderFooter()) {\\n          let removeResult = this.pdfDocument.removeHeaderFooter();\\n          if (removeResult) {\\n            let outPdfPath = this.context.filesDir + '/removeHeaderFooter.pdf';\\n            let result = this.pdfDocument.saveDocument(outPdfPath);\\n            hilog.info(0x0000, 'PdfPage', 'removeHeaderFooter %{public}s!', result ? 'success' : 'fail');\\n          }\\n        }\\n        this.pdfDocument.releaseDocument();\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法，加载PDF文档。 实例化页眉页脚HeaderFooterInfo类，并设置相关属性，包括字体大小、颜色和间距等。 调用addHeaderFooter方法，添加页眉页脚到页面中。 保存PDF文档到应用沙箱。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section57691356103515\\\"'> <a name='\\\"section57691356103515\\\"'></a><a name='\\\"section57691356103515\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>实例化页眉页脚HeaderFooterInfo类，并设置相关属性，包括字体大小、颜色和间距等。</li> <li>调用addHeaderFooter方法，添加页眉页脚到页面中。</li> <li>保存PDF文档到应用沙箱。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-add-headerfooter.html"
    },
    {
        "id": 1362,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/consistent-indexed-object-style\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-indexed-object-style.html"
    },
    {
        "id": 1363,
        "pre": "export interface Foo1 {\\n  // 默认推荐使用Record 类型\\n  [key: string]: unknown;\\n}\\n\\nexport type Foo2 = {\\n  // 默认推荐使用Record 类型\\n  [key: string]: unknown;\\n};",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_consistent-indexed-object-style.html"
    },
    {
        "id": 1364,
        "pre": "import { util } from '@kit.ArkTS';\\n\\n// 获取被签名的原始数据\\nconst secureImageBuffer = new ArrayBuffer(461844); // 实际使用时请替换为Camera Kit获取到的安全图像buffer\\nconst view = new DataView(secureImageBuffer);\\nconst imageBufferLength = 460800; // 安全图像buffer长度固定为460800\\nconst userDataLength = view.getUint32(0, true); // 获取用户数据长度\\nconst originData = secureImageBuffer.slice(4, 4 + userDataLength + imageBufferLength);\\n// 获取签名结果\\nconst maxSignatureBufferLength = 512;\\nconst signatureBuffer = secureImageBuffer.slice(4 + userDataLength + imageBufferLength,\\n  4 + userDataLength + imageBufferLength + maxSignatureBufferLength);\\nconst signatureString = String.fromCharCode(...new Uint8Array(signatureBuffer).filter(code => code !== 0));\\nconst base64Helper = new util.Base64Helper();\\nconst signatureData = base64Helper.decodeSync(signatureString);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]安全摄像头图像数据",
        "parent_text": "  [h2]安全摄像头图像数据 安全图像数据的结构如下所示：  其中用户数据和图像数据为被签名的原始数据，图像数据长度固定为460800字节，签名数据是Base64编码的签名结果，使用者需要解析出这些数据用来验证安全图像数据签名。参考代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section584110121112\\\"'> <a name='\\\"section584110121112\\\"'></a><a name='\\\"section584110121112\\\"'></a> <h4>[h2]安全摄像头图像数据</h4> <p>安全图像数据的结构如下所示：</p> <p><span><img height='\\\"257.58243\\\"' originheight='\\\"1225\\\"' originwidth='\\\"4388\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121013.42808703238832416984764807711550:50001231000000:2800:8E8F5EABC7222EEDDB9F491ACA2E283141B7E48C7F5752D0806FDF61B78E71C2.png\\\"' title='\\\"点击放大\\\"' width='\\\"922.6875\\\"'/></span></p> <p>其中用户数据和图像数据为被签名的原始数据，图像数据长度固定为460800字节，签名数据是Base64编码的签名结果，使用者需要解析出这些数据用来验证安全图像数据签名。参考代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-taas-verifysignature.html"
    },
    {
        "id": 1365,
        "pre": "import { trustedAppService } from '@kit.DeviceSecurityKit';\\nimport { util } from '@kit.ArkTS';\\n\\n// 以下均为示例值，仅用于展示如何获取原始签名数据和签名结果\\nconst location: trustedAppService.Location = {\\n  latitude: 40.053903635898685,\\n  longitude: 116.17356591910897,\\n  altitude: 0,\\n  accuracy: 11.160304069519043,\\n  timestamp: 1722151680187\\n};\\nconst userData = \\\"trusted_app_service_userdata\\\";\\nconst secureLocation: trustedAppService.SecureLocation = {\\n  originalLocation: location,\\n  userData: userData,\\n  signature: \\\"MEQCIEAcJHgaU8aAoMqD1wgoxiXR5I4jmwVG6ncgSKkW4uBHAiBnfv96T+gt1ef83kNZ+U0gBLsq9byuBLP1RBx30hByuQ==\\\"\\n};\\n// 获取原始数据\\nconst originString = secureLocation.originalLocation.latitude.toFixed(15) + ',' +\\n  secureLocation.originalLocation.longitude.toFixed(15) + ',' +\\n  secureLocation.originalLocation.altitude.toFixed(15) + ',' +\\n  secureLocation.originalLocation.accuracy.toFixed(6) + ',' +\\n  secureLocation.originalLocation.timestamp + ',' + secureLocation.userData.toString();\\nconst textEncoder = new util.TextEncoder();\\nconst originData = textEncoder.encodeInto(originString);\\n// 获取签名结果\\nconst base64Helper = new util.Base64Helper();\\nconst signatureData = base64Helper.decodeSync(secureLocation.signature.toString());",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]安全地理位置数据",
        "parent_text": "  [h2]安全地理位置数据 安全地理位置数据的结构请参考SecureLocation。 对安全地理位置数据验签时，需要将返回的结构体中的数据拼接成字符串形式，格式要求如下：  数据排列顺序为：纬度、经度、高度、精确度、时间戳和用户数据。 纬度、经度和高度类型为浮点型，精度为小数点后保留15位；精确度为浮点型，精度为小数点后保留6位；时间戳类型为64位正整数；用户数据类型为字符串。 数据之间的分隔符使用英文逗号。  签名数据是Base64编码后的签名结果。获取签名和签名原始数据的参考代码（不含异常处理逻辑，由开发者根据业务场景实现）如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section264710263521\\\"'> <a name='\\\"section264710263521\\\"'></a><a name='\\\"section264710263521\\\"'></a> <h4>[h2]安全地理位置数据</h4> <p>安全地理位置数据的结构请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/devicesecurity-taas-api#section168048435326\\\"' target='\\\"_blank\\\"'>SecureLocation</a>。</p> <p>对安全地理位置数据验签时，需要将返回的结构体中的数据拼接成字符串形式，格式要求如下：</p> <ol> <li>数据排列顺序为：纬度、经度、高度、精确度、时间戳和用户数据。</li> <li>纬度、经度和高度类型为浮点型，精度为小数点后保留15位；精确度为浮点型，精度为小数点后保留6位；时间戳类型为64位正整数；用户数据类型为字符串。</li> <li>数据之间的分隔符使用英文逗号。</li> </ol> <p>签名数据是Base64编码后的签名结果。获取签名和签名原始数据的参考代码（不含异常处理逻辑，由开发者根据业务场景实现）如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-taas-verifysignature.html"
    },
    {
        "id": 1366,
        "pre": "import { cert } from '@kit.DeviceCertificateKit';\\nimport { cryptoFramework } from '@kit.CryptoArchitectureKit';\\nimport { util } from '@kit.ArkTS';\\nimport { trustedAppService } from '@kit.DeviceSecurityKit';\\n\\n// 以安全摄像头场景为例，忽略异常情况处理\\nconst userData = \\\"trusted_app_service_demo\\\";\\nconst deviceId = 7483679320805398131;\\nconst initProperties: Array<trustedAppService.AttestParam> = [\\n  {\\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_TYPE,\\n    value: trustedAppService.AttestType.ATTEST_TYPE_CAMERA\\n  },\\n  {\\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_ID,\\n    value: BigInt(deviceId)\\n  }\\n];\\nconst initOptions: trustedAppService.AttestOptions = {\\n  properties: initProperties\\n};\\nconst returnResult = await trustedAppService.initializeAttestContext(userData, initOptions);\\n// 解析匿名证书链数据，获取三级证书\\nconst certChain = returnResult.certChains;\\nconst certList = certChain[0].split('-----BEGIN CERTIFICATE-----');\\nconst thirdCert = '-----BEGIN CERTIFICATE-----' + certList[1];\\n// 获取公钥\\nconst textEncoder = new util.TextEncoder();\\nconst encodingBlob: cert.EncodingBlob = {\\n  data: textEncoder.encodeInto(thirdCert),\\n  encodingFormat: cert.EncodingFormat.FORMAT_PEM\\n};\\nconst x509Cert = await cert.createX509Cert(encodingBlob);\\nconst asyKeyGenerator = cryptoFramework.createAsyKeyGenerator('ECC256');\\nconst keyPair = asyKeyGenerator.convertKeySync(x509Cert.getPublicKey().getEncoded(), null);\\nconst pubKey = keyPair.pubKey; // 证书中的公钥需要转换成cryptoFramework能够接收的格式",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "从匿名证书链中获取公钥。 ",
        "import_module": null,
        "parent": "<li id='\\\"li67510253287\\\"'><a name='\\\"ZH-CN_TOPIC_0000002214983677__li67510253287\\\"'></a><a name='\\\"li67510253287\\\"'></a><span>从匿名证书链中获取公钥。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/devicesecurity-taas-verifysignature.html"
    },
    {
        "id": 1367,
        "pre": "// Halton算法示例\\nfloat GetHaltonSequence(uint32_t index, uint32_t base) {\\n    float result = 0.0;\\n    float fraction = 1.0 / base;\\n    while (index > 0) {\\n        result += fraction * (index % base);\\n        index /= base;\\n        fraction /= base;\\n    }\\n    return result;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "根据Halton算法生成每帧需要的相机抖动（Jitter）。",
        "import_module": null,
        "parent": "<li>根据Halton算法生成每帧需要的相机抖动（Jitter）。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/xengine-kit-ai-temporal-upscaling.html"
    },
    {
        "id": 1368,
        "pre": "import { pdfService, PdfView, pdfViewManager } from '@kit.PDFKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\\n  private context = getContext() as common.UIAbilityContext;\\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    (async () => {\\n      this.loadResult = await this.controller.loadDocument(filePath);\\n      // 注意：这里刚加载文档，请不要在这里立即设置PDF文档的预览方法。\\n    })()\\n  }\\n\\n  build() {\\n    Column() {\\n      Row() {\\n        // 设置预览方式\\n        Button('setPreviewMode').onClick(() => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            // 单页布局\\n            this.controller.setPageLayout(pdfService.PageLayout.LAYOUT_SINGLE);\\n            // 是否连续滚动预览\\n            this.controller.setPageContinuous(true);\\n            // 适配页的预览方式\\n            this.controller.setPageFit(pdfService.PageFit.FIT_PAGE);\\n          }\\n        })\\n        // 跳转到第11页\\n        Button('goTopage').onClick(() => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            this.controller.goToPage(10);\\n          }\\n        })\\n        // 页面放大2倍\\n        Button('zoomPage2').onClick(() => {\\n          if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n            this.controller.setPageZoom(2);\\n          }\\n        })\\n      }\\n\\n      PdfView({\\n        controller: this.controller,\\n        pageFit: pdfService.PageFit.FIT_WIDTH,\\n        showScroll: true\\n      })\\n        .id('pdfview_app_view')\\n        .layoutWeight(1);\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  先加载PDF文档。 调用PdfView预览组件，渲染显示。 在按钮【setPreviewMode】里，调用setPageLayout、setPageContinuous等方法，设置文档预览效果。 在按钮【goTopage】里，调用goToPage方法，设置页面跳转。 在按钮【zoomPage2】里，调用setPageZoom方法，将页面放大2倍。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section979953310306\\\"'> <a name='\\\"section979953310306\\\"'></a><a name='\\\"section979953310306\\\"'></a> <h4>示例代码</h4> <ol> <li>先加载PDF文档。</li> <li>调用PdfView预览组件，渲染显示。</li> <li>在按钮【setPreviewMode】里，调用setPageLayout、setPageContinuous等方法，设置文档预览效果。</li> <li>在按钮【goTopage】里，调用goToPage方法，设置页面跳转。</li> <li>在按钮【zoomPage2】里，调用setPageZoom方法，将页面放大2倍。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-pdfview-preview-method.html"
    },
    {
        "id": 1369,
        "pre": "// EntryAbility.ets\\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nexport default class EntryAbility extends UIAbility {\\n  // ...\\n\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    windowStage.loadContent('pages/Index', (err, data) => {\\n      if (err.code) {\\n        return;\\n      }\\n\\n      let windowClass: window.Window = windowStage.getMainWindowSync(); // 获取应用主窗口\\n      // 1. 设置窗口全屏\\n      let isLayoutFullScreen = true;\\n      windowClass.setWindowLayoutFullScreen(isLayoutFullScreen).then(() => {\\n        console.info('Succeeded in setting the window layout to full-screen mode.');\\n      }).catch((err: BusinessError) => {\\n        console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));\\n      });\\n      // 进行后续步骤2-3中的操作\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": "调用setWindowLayoutFullScreen()",
        "function_name": null,
        "parent_text": "调用setWindowLayoutFullScreen()接口设置窗口全屏。 ",
        "import_module": null,
        "parent": "<li>调用setWindowLayoutFullScreen()接口设置窗口全屏。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-develop-apply-immersive-effects.html"
    },
    {
        "id": 1370,
        "pre": "// EntryAbility.ets\\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nexport default class EntryAbility extends UIAbility {\\n  // ...\\n\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    windowStage.loadContent('pages/Index', (err, data) => {\\n      if (err.code) {\\n        return;\\n      }\\n\\n      let windowClass: window.Window = windowStage.getMainWindowSync(); // 获取应用主窗口\\n      // 1. 设置窗口全屏\\n      let isLayoutFullScreen = true;\\n      windowClass.setWindowLayoutFullScreen(isLayoutFullScreen).then(() => {\\n        console.info('Succeeded in setting the window layout to full-screen mode.');\\n      }).catch((err: BusinessError) => {\\n        console.error(`Failed to set the window layout to full-screen mode. Code is ${err.code}, message is ${err.message}`);\\n      });\\n      // 进行后续步骤2中的状态栏和导航条的隐藏操作\\n    });\\n  }\\n}",
        "type": "Reference",
        "function_call": "调用setWindowLayoutFullScreen()",
        "function_name": null,
        "parent_text": "调用setWindowLayoutFullScreen()接口设置窗口全屏。 ",
        "import_module": null,
        "parent": "<li>调用setWindowLayoutFullScreen()接口设置窗口全屏。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-develop-apply-immersive-effects.html"
    },
    {
        "id": 1371,
        "pre": "// xxx.ets\\n@Entry\\n@Component\\nstruct SafeAreaExample1 {\\n  build() {\\n    Stack() {\\n      Image($r('app.media.bg'))\\n        .height('100%').width('100%')\\n        .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM]) // 图片组件的绘制区域扩展至状态栏和导航条。\\n    }.height('100%').width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]背景图和视频场景",
        "parent_text": "[h2]背景图和视频场景设置背景图、视频控件大小为安全区域大小并配置expandSafeArea属性。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section162965215413\\\"'><a name='\\\"section162965215413\\\"'></a><a name='\\\"section162965215413\\\"'></a><h4>[h2]背景图和视频场景</h4><p>设置背景图、视频控件大小为安全区域大小并配置expandSafeArea属性。</p>  <p><span><img height='\\\"363.5289\\\"' originheight='\\\"512\\\"' originwidth='\\\"288\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120354.60354433880899893946317609002794:50001231000000:2800:88768C4395DCCF6F913F67A2E3EFF44714AD1C8FA0BB8AF8C423E50626414572.png\\\"' title='\\\"点击放大\\\"' width='\\\"204.4875\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-develop-apply-immersive-effects.html"
    },
    {
        "id": 1372,
        "pre": "// xxx.ets\\n@Entry\\n@Component\\nstruct ScrollExample {\\n  scroller: Scroller = new Scroller()\\n  private arr: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\\n\\n  build() {\\n    Stack({ alignContent: Alignment.TopStart }) {\\n      Scroll(this.scroller) {\\n        Column() {\\n          ForEach(this.arr, (item: number) => {\\n            Stack() {\\n              Text('Display Content ' + item.toString()).fontSize(30)\\n            }\\n            .width('80%').padding(20).borderRadius(15).backgroundColor(Color.White).margin({ top:30, bottom:30 })\\n          }, (item: string) => item)\\n        }.width('100%').backgroundColor('rgb(213,213,213)')\\n      }.backgroundColor('rgb(213,213,213)')\\n      .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])\\n    }.width('100%').height('100%')\\n    .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "1. 设置父组件滚动容器和子组件相同的背景色，给父组件设置expandSafeArea属性扩展安全区； 图5 滚动类容器设置expandSafeArea属性实现沉浸式效果 ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>1. 设置父组件滚动容器和子组件相同的背景色，给父组件设置expandSafeArea属性扩展安全区； <div class='\\\"fignone\\\"'><span class='\\\"figcap\\\"'><b>图5 </b>滚动类容器设置expandSafeArea属性实现沉浸式效果</span><br/><span><img originheight='\\\"716\\\"' originwidth='\\\"325\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120354.93603146783985334138161774761538:50001231000000:2800:9309499B95392FF453D01D6D9CE0980D578CA0AEB82BF7C67359D63DE8CFC59F.png\\\"'/></span></div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-develop-apply-immersive-effects.html"
    },
    {
        "id": 1373,
        "pre": "// xxx.ets\\n@Entry\\n@Component\\nstruct Example {\\n  build() {\\n    Column() {\\n      Row() {\\n        Text('Top Content').fontSize(40).textAlign(TextAlign.Center).width('100%')\\n      }.backgroundColor('#2786d9')\\n      // 设置顶部绘制延伸到状态栏\\n      .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])\\n\\n      Row() {\\n        Text('Display Content 2').fontSize(30)\\n      }.backgroundColor(Color.White).padding(20).borderRadius(15).width('80%')\\n\\n      Row() {\\n        Text('Display Content 3').fontSize(30)\\n      }.backgroundColor(Color.White).padding(20).borderRadius(15).width('80%')\\n\\n      Row() {\\n        Text('Display Content 4').fontSize(30)\\n      }.backgroundColor(Color.White).padding(20).borderRadius(15).width('80%')\\n\\n      Row() {\\n        Text('Display Content 5').fontSize(30)\\n      }.backgroundColor(Color.White).padding(20).borderRadius(15).width('80%')\\n\\n      Row() {\\n        Text('Bottom Content').fontSize(40).textAlign(TextAlign.Center).width('100%')\\n      }.backgroundColor('#96dffa')\\n      // 设置底部绘制延伸到导航条\\n      .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])\\n    }\\n    .width('100%').height('100%')\\n    .alignItems(HorizontalAlign.Center)\\n    .backgroundColor('#d5d5d5')\\n    .justifyContent(FlexAlign.SpaceBetween)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]底部页签场景",
        "parent_text": "[h2]底部页签场景要求页签背景色能够延伸到导航条区域，但页签内部可操作元素需要在导航条之上。  针对底部的页签部分，Navigation组件和Tabs组件默认实现了页签的延伸处理，开发者只需要保证Navigation和Tabs组件的底部边界和底部导航条重合即可。若开发者显式调用expandSafeArea接口，则安全区效果由expandSafeArea参数指定。 如果未使用上述组件而是采用自定义方式实现页签的场景，可以针对底部元素设置expandSafeArea属性实现底部元素的背景扩展。 图7 顶部和底部UI元素未设置和设置expandSafeArea属性效果对比   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section15107174585619\\\"'><a name='\\\"section15107174585619\\\"'></a><a name='\\\"section15107174585619\\\"'></a><h4>[h2]底部页签场景</h4><p>要求页签背景色能够延伸到导航条区域，但页签内部可操作元素需要在导航条之上。</p> <p><span><img height='\\\"381.872925\\\"' originheight='\\\"631\\\"' originwidth='\\\"895\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120354.08745573080203463101489193214170:50001231000000:2800:FAE4867B6E6E52EA813409DD13ED4DC67D6386193D8FB202CB799E37E9092B1E.png\\\"' title='\\\"点击放大\\\"' width='\\\"541.6425\\\"'/></span></p> <p>针对底部的页签部分，Navigation组件和Tabs组件默认实现了页签的延伸处理，开发者只需要保证Navigation和Tabs组件的底部边界和底部导航条重合即可。若开发者显式调用expandSafeArea接口，则安全区效果由expandSafeArea参数指定。</p> <p>如果未使用上述组件而是采用自定义方式实现页签的场景，可以针对底部元素设置expandSafeArea属性实现底部元素的背景扩展。</p> <div class='\\\"fignone\\\"'><span class='\\\"figcap\\\"'><b>图7 </b>顶部和底部UI元素未设置和设置expandSafeArea属性效果对比</span></div> <p><span><img originheight='\\\"644\\\"' originwidth='\\\"617\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120354.43281627015509684647299920864095:50001231000000:2800:A50377EE66978F2851A7D77F7F11F3EA108776432071B6D065037943AE35FCB8.png\\\"'/></span></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-develop-apply-immersive-effects.html"
    },
    {
        "id": 1374,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    Swiper() {\\n      Column() {\\n        Image($r('app.media.start'))\\n          .height('50%').width('100%')\\n          // 设置图片延伸到状态栏\\n          .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])\\n        Column() {\\n          Text('HarmonyOS 第一课')\\n            .fontSize(32)\\n            .margin(30)\\n          Text('通过循序渐进的学习路径，无经验和有经验的开发者都可以掌握ArkTS语言声明式开发范式，体验更简洁、更友好的HarmonyOS应用开发旅程。')\\n            .fontSize(20).margin(20)\\n        }.height('50%').width('100%')\\n        .backgroundColor(Color.White)\\n        // 设置文本内容区背景延伸到导航栏\\n        .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])\\n      }\\n    }\\n    .width('100%')\\n    .height('100%')\\n    // 关闭Swiper组件默认的裁切效果以便子节点可以绘制在Swiper外。\\n    .clip(false)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]图文场景",
        "parent_text": "[h2]图文场景当状态栏元素和底部导航条元素不同时，无法单纯通过窗口背景色或者背景图组件延伸实现，此时需要对顶部元素和底部元素分别配置expandSafeArea属性，顶部元素配置expandSafeArea([SafeAreaType.SYSTEM],[SafeAreaEdge.TOP])，底部元素配置expandSafeArea([SafeAreaType.SYSTEM],[SafeAreaEdge.BOTTOM])。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1480524185716\\\"'><a name='\\\"section1480524185716\\\"'></a><a name='\\\"section1480524185716\\\"'></a><h4>[h2]图文场景</h4><p>当状态栏元素和底部导航条元素不同时，无法单纯通过窗口背景色或者背景图组件延伸实现，此时需要对顶部元素和底部元素分别配置expandSafeArea属性，顶部元素配置expandSafeArea([SafeAreaType.SYSTEM],[SafeAreaEdge.TOP])，底部元素配置expandSafeArea([SafeAreaType.SYSTEM],[SafeAreaEdge.BOTTOM])。</p> <p><span><img height='\\\"575.387925\\\"' originheight='\\\"1019\\\"' originwidth='\\\"507\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120354.75070082830928019778344150537526:50001231000000:2800:1B64E77DE0D16315B2434274E333BD5FAE1717071F136F6DB1F0F03D7AA201DC.png\\\"' title='\\\"点击放大\\\"' width='\\\"286.2825\\\"'/></span></p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-develop-apply-immersive-effects.html"
    },
    {
        "id": 1375,
        "pre": "import { navigationInfoMgr } from '@kit.CarKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": "import { navigationInfoMgr } from '@kit.CarKit';",
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-unregister-sys-navi-listener.html"
    },
    {
        "id": 1376,
        "pre": "let deviceClient: wearEngine.DeviceClient = wearEngine.getDeviceClient(getContext(this));",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "应用调用wearEngine中的getDeviceClient方法，获取DeviceClient对象。 ",
        "import_module": null,
        "parent": "<li><span>应用调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api\\\"' target='\\\"_blank\\\"'>wearEngine</a>中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1892394201117\\\"' target='\\\"_blank\\\"'>getDeviceClient</a>方法，获取<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section126321419369\\\"' target='\\\"_blank\\\"'>DeviceClient</a>对象。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/query_device_info.html"
    },
    {
        "id": 1377,
        "pre": "let deviceClient: wearEngine.DeviceClient = wearEngine.getDeviceClient(getContext(this));",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "应用调用wearEngine中的getDeviceClient方法，获取DeviceClient对象。 ",
        "import_module": null,
        "parent": "<li><span>应用调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api\\\"' target='\\\"_blank\\\"'>wearEngine</a>中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section1892394201117\\\"' target='\\\"_blank\\\"'>getDeviceClient</a>方法，获取<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/wearengine_api#section126321419369\\\"' target='\\\"_blank\\\"'>DeviceClient</a>对象。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/query_device_info.html"
    },
    {
        "id": 1378,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-suggest-use-get-anonymousid-async\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-sg-anonymousid-async.html"
    },
    {
        "id": 1379,
        "pre": "import { ifaa } from '@kit.OnlineAuthenticationKit'\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n// 开发者需要按照IIFAA的TLV格式构造入参，并转换为Uint8Array参数；此处arg需要开发者替换为真实入参。\\nlet arg = new Uint8Array([0]);\\nlet getAnonIdPromise: Promise<Uint8Array> = ifaa.getAnonymousId(arg);\\ngetAnonIdPromise.then(result => {\\n  console.info(\\\"Succeeded in doing getAnonymousId.\\\");\\n  // 开发者处理result\\n}).catch((err: BusinessError) => {\\n  console.error(`Failed to call getAnonymousId. Code: ${err.code}, message: ${err.message}`);\\n});",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-sg-anonymousid-async.html"
    },
    {
        "id": 1380,
        "pre": "import { ifaa } from '@kit.OnlineAuthenticationKit'\\n\\n// 开发者需要按照IIFAA的TLV格式构造入参，并转换为Uint8Array参数；此处arg需要开发者替换为真实入参。\\nlet arg = new Uint8Array([0]);\\nlet getAnonIdResult: Uint8Array = ifaa.getAnonymousIdSync(arg);",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-sg-anonymousid-async.html"
    },
    {
        "id": 1381,
        "pre": "import { textProcessing, EntityType } from '@kit.NaturalLanguageKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在使用实体抽取功能时，将实现实体抽取的类添加至工程。 ",
        "import_module": null,
        "parent": "<li><span>在使用实体抽取功能时，将实现实体抽取的类添加至工程。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/natural-language-getentity.html"
    },
    {
        "id": 1382,
        "pre": "import { textProcessing, EntityType } from '@kit.NaturalLanguageKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private inputText: string = '';\\n  @State outputText: string = '';\\n\\n  build() {\\n    Column() {\\n      TextInput({ placeholder: '请输入文本' })\\n        .height(40)\\n        .fontSize(16)\\n        .width('90%')\\n        .margin(10)\\n        .onChange((value: string) => {\\n          this.inputText = value;\\n        })\\n\\n      Scroll() {\\n        Text(this.outputText)\\n          .fontSize(16)\\n          .width('90%')\\n          .margin(10)\\n      }\\n      .height('40%')\\n\\n      //调用实体抽取接口\\n      Row() {\\n        Button('获取实体结果')\\n          .type(ButtonType.Capsule)\\n          .fontColor(Color.White)\\n          .width('45%')\\n          .margin(10)\\n          .onClick(async () => {\\n            try {\\n              let result = await textProcessing.getEntity(this.inputText, {entityTypes: [EntityType.NAME, EntityType.PHONE_NO]});\\n              this.outputText = this.formatEntityResult(result);\\n            } catch (err) {\\n              console.error(`getEntity errorCode: ${err.code}, errorMessage: ${err.message}`);\\n              this.outputText = 'Error occurred while getting entities.';\\n            }\\n          })\\n      }\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  //实体结果转义\\n  private formatEntityResult(entities: textProcessing.Entity[]): string {\\n    if (!entities || !entities.length) {\\n      return 'No entities found.';\\n    }\\n\\n    let output = 'Entities:\\\\n';\\n    for (let i = 0; i < entities.length; i++) {\\n      let entity = entities[i];\\n      output += `Entity[${i}]:\\\\n`;\\n      output += `  oriText: ${entity.text}\\\\n`;\\n      output += `  charOffset: ${entity.charOffset}\\\\n`;\\n      output += `  entityType: ${entity.type}\\\\n`;\\n      output += `  jsonObject: ${entity.jsonObject}\\\\n\\\\n`;\\n    }\\n    return output;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2858124411520\\\"'> <a name='\\\"section2858124411520\\\"'></a><a name='\\\"section2858124411520\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/natural-language-getentity.html"
    },
    {
        "id": 1383,
        "pre": "import { deferredLink } from '@kit.AppLinkingKit';  \\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\npageStack: NavPathStack = new NavPathStack();\\n   build() {\\n      Column() {\\n         Navigation(this.pageStack) {\\n            Button(\\\"获取延迟链接\\\").onClick(() => {\\n               // 应用首次启动时，获取用户此前点击的该应用相关链接\\n               deferredLink.popDeferredLink().then((link: string) => {\\n                  hilog.info(0x0000, 'testTag', `Succeeded in getting deferred link, result: ${link}`);\\n               }).catch((err: BusinessError) => {\\n                  hilog.error(0x0000, 'testTag', `Failed to get deferred link.`);\\n               })\\n            })\\n            // ...\\n         }\\n         // ...\\n      }\\n   }\\n}",
        "type": "Reference",
        "function_call": "popDeferredLink()",
        "function_name": null,
        "parent_text": "在入口类文件页面Index.ets中添加如下代码。当应用首次启动时，调用deferredLink.popDeferredLink()接口，获取用户此前点击的该应用相关链接。",
        "import_module": null,
        "parent": "<li>在入口类文件页面Index.ets中添加如下代码。当应用首次启动时，调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/applinking-deferredlink-api#section15555111210233\\\"' target='\\\"_blank\\\"'>deferredLink.popDeferredLink()</a>接口，获取用户此前点击的该应用相关链接。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/applinking-deferredlink.html"
    },
    {
        "id": 1384,
        "pre": "import {\\n  PhotoPickerComponent,\\n  PickerController,\\n  PickerOptions,\\n  DataType,\\n  BaseItemInfo,\\n  ItemInfo,\\n  PhotoBrowserInfo,\\n  ItemType,\\n  ClickType,\\n  MaxCountType,\\n  PhotoBrowserRange,\\n  PhotoBrowserUIElement,\\n  ReminderMode,\\n  ItemsDeletedCallback,\\n  ExceedMaxSelectedCallback,\\n  CurrentAlbumDeletedCallback\\n} from '@ohos.file.PhotoPickerComponent';\\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\\n\\n@Entry\\n@Component\\nstruct PhotoPickerComponentDemo {\\n  // 组件初始化时设置参数信息\\n  pickerOptions: PickerOptions = new PickerOptions();\\n\\n  // 组件初始化完成后，可控制组件部分行为\\n  @State pickerController: PickerController = new PickerController();\\n\\n  // 已选择的图片\\n  @State selectUris: Array<string> = new Array<string>();\\n\\n  //目前选择的图片\\n  @State currentUri: string = '';\\n\\n  //是否显示大图\\n  @State isBrowserShow: boolean = false;\\n\\n  aboutToAppear() {\\n    // 设置picker宫格页数据类型\\n    this.pickerOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_VIDEO_TYPE // 图片和照片都显示;\\n    // 最大选择数量\\n    this.pickerOptions.maxSelectNumber = 5;\\n    // 超出最大选择数量时\\n    this.pickerOptions.maxSelectedReminderMode = ReminderMode.TOAST;\\n    // 是否展示搜索框，默认false\\n    this.pickerOptions.isSearchSupported = true;\\n    // 是否支持拍照，默认false\\n    this.pickerOptions.isPhotoTakingSupported = true;\\n\\n  }\\n\\n  // 资源被选中回调，返回资源的信息，以及选中方式\\n  private onItemClicked(itemInfo: ItemInfo, clickType: ClickType): boolean {\\n    if (!itemInfo) {\\n      return false;\\n    }\\n    let type: ItemType | undefined = itemInfo.itemType;\\n    let uri: string | undefined = itemInfo.uri;\\n    if (type === ItemType.CAMERA) {\\n      // 点击相机item\\n      return true; // 返回true则拉起系统相机，若应用需要自行处理则返回false。\\n    } else {\\n      if (clickType === ClickType.SELECTED) {\\n        // 应用做自己的业务处理\\n        if (uri) {\\n          this.selectUris.push(uri);\\n          this.pickerOptions.preselectedUris = [...this.selectUris];\\n        }\\n        return true; // 返回true则勾选，否则则不响应勾选。\\n      } else {\\n        if (uri) {\\n          this.selectUris = this.selectUris.filter((item: string) => {\\n            return item != uri;\\n          });\\n          this.pickerOptions.preselectedUris = [...this.selectUris];\\n        }\\n      }\\n      return true;\\n    }\\n  }\\n\\n  // 进入大图的回调\\n  private onEnterPhotoBrowser(photoBrowserInfo: PhotoBrowserInfo): boolean {\\n    this.isBrowserShow = true;\\n    return true;\\n  }\\n\\n  // 退出大图的回调\\n  private onExitPhotoBrowser(photoBrowserInfo: PhotoBrowserInfo): boolean {\\n    this.isBrowserShow = false;\\n    return true;\\n  }\\n\\n  // 接收到该回调后，便可通过pickerController相关接口向picker发送数据，在此之前不生效。\\n  private onPickerControllerReady(): void {\\n  }\\n\\n  // 大图左右滑动的回调\\n  private onPhotoBrowserChanged(browserItemInfo: BaseItemInfo): boolean {\\n    this.currentUri = browserItemInfo.uri ?? '';\\n    return true;\\n  }\\n\\n  // 已勾选图片被删除时的回调\\n  private onSelectedItemsDeleted(baseItemInfos: Array<BaseItemInfo>): void {\\n  }\\n\\n  // 超过最大选择数量再次点击时的回调\\n  private onExceedMaxSelected(exceedMaxCountType: MaxCountType): void {\\n  }\\n\\n  // 当前相册被删除时的回调\\n  private onCurrentAlbumDeleted(): void {\\n  }\\n\\n  build() {\\n    Flex({\\n      direction: FlexDirection.Column,\\n      alignItems: ItemAlign.Start\\n    }) {\\n      PhotoPickerComponent({\\n        pickerOptions: this.pickerOptions,\\n        onItemClicked: (itemInfo: ItemInfo, clickType: ClickType): boolean => this.onItemClicked(itemInfo, clickType),\\n        onEnterPhotoBrowser: (photoBrowserInfo: PhotoBrowserInfo): boolean => this.onEnterPhotoBrowser(photoBrowserInfo),\\n        onExitPhotoBrowser: (photoBrowserInfo: PhotoBrowserInfo): boolean => this.onExitPhotoBrowser(photoBrowserInfo),\\n        onPickerControllerReady: (): void => this.onPickerControllerReady(),\\n        onPhotoBrowserChanged: (browserItemInfo: BaseItemInfo): boolean => this.onPhotoBrowserChanged(browserItemInfo),\\n        onSelectedItemsDeleted: (BaseItemInfo: Array<BaseItemInfo>) => this.onSelectedItemsDeleted(BaseItemInfo),\\n        onExceedMaxSelected: (exceedMaxCountType: MaxCountType) => this.onExceedMaxSelected(exceedMaxCountType),\\n        onCurrentAlbumDeleted: () => this.onCurrentAlbumDeleted(),\\n        pickerController: this.pickerController,\\n      })\\n\\n      // 这里模拟应用侧底部的选择栏\\n      if (this.isBrowserShow) {\\n        //已选择的图片缩影图\\n        Row() {\\n          ForEach(this.selectUris, (uri: string) => {\\n            if (uri === this.currentUri) {\\n              Image(uri).height(50).width(50)\\n                .onClick(() => {\\n                })\\n                .borderWidth(1)\\n                .borderColor('red')\\n            } else {\\n              Image(uri).height(50).width(50).onClick(() => {\\n                this.pickerController.setData(DataType.SET_SELECTED_URIS, this.selectUris);\\n                this.pickerController.setPhotoBrowserItem(uri, PhotoBrowserRange.ALL);\\n              })\\n            }\\n          }, (uri: string) => JSON.stringify(uri))\\n        }.alignSelf(ItemAlign.Center).margin(this.selectUris.length ? 10 : 0)\\n      } else {\\n        // 进入大图，预览已选择的图片\\n        Button('预览').width('33%').alignSelf(ItemAlign.Start).height('5%').margin(10).onClick(() => {\\n          if (this.selectUris.length > 0) {\\n            this.pickerController.setPhotoBrowserItem(this.selectUris[0], PhotoBrowserRange.SELECTED_ONLY);\\n          }\\n        })\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "完整示例",
        "parent_text": "完整示例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section129721434173814\\\"'><a name='\\\"section129721434173814\\\"'></a><a name='\\\"section129721434173814\\\"'></a><h4>完整示例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/component-guidelines-photoviewpicker.html"
    },
    {
        "id": 1385,
        "pre": "import { FunctionalButton, functionalButtonComponentManager } from '@kit.ScenarioFusionKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Scenario Fusion Kit模块以及相关公共模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Scenario Fusion Kit模块以及相关公共模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-button-getphonenumber.html"
    },
    {
        "id": 1386,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customdnsconfig.html"
    },
    {
        "id": 1387,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customdnsconfig.html"
    },
    {
        "id": 1388,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n// JWTUtil为自定义类，可参见示例代码\\nimport { JWTUtil } from '../common/JWTUtil';\\n\\nqueryPurchases() {\\n  const param: iap.QueryPurchasesParameter = {\\n    productType: iap.ProductType.NONRENEWABLE,\\n    queryType: iap.PurchaseQueryType.UNFINISHED\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.queryPurchases(context, param).then((res: iap.QueryPurchaseResult) => {\\n    console.info('Succeeded in querying purchases.');\\n    const purchaseDataList: string[] = res.purchaseDataList;\\n    if (purchaseDataList === undefined || purchaseDataList.length <= 0) {\\n      return;\\n    }\\n    for (let i = 0; i < purchaseDataList.length; i++) {\\n      const jwsPurchaseOrder: string = JSON.parse(purchaseDataList[i]).jwsPurchaseOrder;\\n      if (!jwsPurchaseOrder) {\\n        continue;\\n      }\\n      const purchaseStr = JWTUtil.decodeJwtObj(jwsPurchaseOrder);\\n      // 需自定义PurchaseOrderPayload类，包含的信息请参见PurchaseOrderPayload\\n      const purchaseOrderPayload = JSON.parse(purchaseStr) as PurchaseOrderPayload;\\n      // 处理发货\\n      // ...\\n      // 发货成功后向IAP Kit发送finishPurchase请求，确认发货，完成购买\\n      this.finishPurchase(purchaseOrderPayload);\\n    }\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query purchases. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}\\n\\nfinishPurchase(purchaseOrder: PurchaseOrderPayload) {\\n  const finishPurchaseParam: iap.FinishPurchaseParameter = {\\n    productType: Number(purchaseOrder.productType),\\n    purchaseToken: purchaseOrder.purchaseToken,\\n    purchaseOrderId: purchaseOrder.purchaseOrderId\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.finishPurchase(context, finishPurchaseParam).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in finishing purchase.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query purchases. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "发货成功后，应用需调用finishPurchase接口确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发起请求时，需在请求参数FinishPurchaseParameter中携带PurchaseOrderPayload中的productType、purchaseToken、purchaseOrderId。 请求成功后，IAP服务器会将相应商品标记为已发货状态。  ",
        "import_module": null,
        "parent": "<li>发货成功后，应用需调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>接口确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。<p>发起请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section103714142118\\\"' target='\\\"_blank\\\"'>FinishPurchaseParameter</a>中携带<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>中的productType、purchaseToken、purchaseOrderId。</p> <p>请求成功后，IAP服务器会将相应商品标记为已发货状态。</p>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-delivering-nonrenewable.html"
    },
    {
        "id": 1389,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkts-no-use-any-export-current\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkts-no-use-any-export-current.html"
    },
    {
        "id": 1390,
        "pre": "export class User {\\n  id?: number;\\n  name?: string;\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "export class User {\\n  id?: number;\\n  name?: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkts-no-use-any-export-current.html"
    },
    {
        "id": 1391,
        "pre": "class User {\\n  id?: number;\\n  name?: string;\\n}\\n// 当前文件 User.ets\\nexport * from './User';\\n// 当前文件 User.ets\\nexport * as XX from './User';",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "export class User {\\n  id?: number;\\n  name?: string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkts-no-use-any-export-current.html"
    },
    {
        "id": 1392,
        "pre": "// renderMode.ets\\nimport { webview } from '@kit.ArkWeb';\\n\\n@Entry\\n@Component\\nstruct WebHeightPage {\\n  private webviewController: WebviewController = new webview.WebviewController()\\n\\n  build() {\\n     Column() {\\n         Web({\\n             src: \\\"https://www.example.com/\\\",\\n             controller: this.webviewController,\\n             renderMode: RenderMode.ASYNC_RENDER // 设置渲染模式\\n         })\\n     }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "使用场景",
        "parent_text": "  使用场景   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用场景\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213533521__%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\\\"'></a> <h4>使用场景</h4>  <p><span><img originheight='\\\"496\\\"' originwidth='\\\"252\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120454.96528813981514637627327995723946:50001231000000:2800:F122B272DD3A5D09ACF0F55B02BB10449E08A93A5386BD89DFBBE9099BCB5F20.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/web-render-mode.html"
    },
    {
        "id": 1393,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/restrict-plus-operands\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_restrict-plus-operands.html"
    },
    {
        "id": 1394,
        "pre": "{\\n  \\\"app\\\": {\\n    \\\"appEnvironments\\\": [\\n      {\\n        \\\"name\\\": \\\"ASAN_OPTIONS\\\",\\n        \\\"value\\\": \\\"log_exe_name=true abort_on_error=0 print_cmdline=true\\\" // 示例仅供参考，具体以实际为准\\n      },\\n    ],\\n    ...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]在app.json5中配置环境变量",
        "parent_text": "[h2]在app.json5中配置环境变量打开AppScope > app.json5文件，添加配置示例如下。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section178752423336\\\"'><a name='\\\"section178752423336\\\"'></a><a name='\\\"section178752423336\\\"'></a><h4>[h2]在app.json5中配置环境变量</h4><p id='\\\"ZH-CN_TOPIC_0000002202174865__p8651161019341\\\"'>打开AppScope &gt; app.json5文件，添加配置示例如下。</p>  <p id='\\\"ZH-CN_TOPIC_0000002202174865__p837533473013\\\"'></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-asan.html"
    },
    {
        "id": 1395,
        "pre": "int heapBufferOverflow() {\\n    char *buffer;\\n    buffer = (char *)malloc(10);\\n    *(buffer + 11) = 'n';\\n    *(buffer + 12) = 'n';\\n    free(buffer);\\n    return buffer[1];\\n}",
        "type": "Reference",
        "function_call": "overflowAndUnderflowOfBuffers()",
        "function_name": "[h2]heap-buffer-overflow",
        "parent_text": "[h2]heap-buffer-overflow背景/原理 访问越界。 错误代码实例  影响/报错 导致程序存在安全漏洞，并有崩溃风险。 开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:heap-buffer-overflow 定位思路 如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。 Reason:AddressSanitizer:heap-buffer-overflow\\nFault thread info:\\n==appspawn==17140==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x0060019ca8da at pc 0x005ec33c3250 bp 0x007fe9c392f0 sp 0x007fe9c392e8\\nWRITE of size 1 at 0x0060019ca8da thread T0 (easandemo_api12)\\n    #0 0x5ec33c324c  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x324c) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #1 0x5ec33c38e0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x38e0) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #2 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n0x0060019ca8da is located 0 bytes to the right of 10-byte region [0x0060019ca8d0,0x0060019ca8da)\\nallocated by thread T0 (easandemo_api12) here:\\n    #0 0x7f82652758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 0x5ec33c31ec  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x31ec) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #2 0x5ec33c38e0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x38e0) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #3 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ec6a1bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ec6847f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c) 如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。 Reason:AddressSanitizer:heap-buffer-overflow\\nFault thread info:\\n==appspawn==17140==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x0060019ca8da at pc 0x005ec33c3250 bp 0x007fe9c392f0 sp 0x007fe9c392e8\\nWRITE of size 1 at 0x0060019ca8da thread T0 (easandemo_api12)\\n    #0 overflowAndUnderflowOfBuffers() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:47)\\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:89)\\n    #2 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n0x0060019ca8da is located 0 bytes to the right of 10-byte region [0x0060019ca8d0,0x0060019ca8da)\\nallocated by thread T0 (easandemo_api12) here:\\n    #0 0x7f82652758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 overflowAndUnderflowOfBuffers() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:46)\\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:89)\\n    #3 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ec6a1bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ec6847f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c) 修改方法 注意数组容量不要访问越界。 推荐建议 已知大小的集合注意访问不要越界，位置大小的集合访问前先判断大小。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section12159124520107\\\"'><a name='\\\"section12159124520107\\\"'></a><a name='\\\"section12159124520107\\\"'></a><h4>[h2]heap-buffer-overflow</h4><p id='\\\"ZH-CN_TOPIC_0000002202174865__p1326075411102\\\"'><strong>背景/原理</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p125076111117\\\"'>访问越界。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p442031210111\\\"'><strong>错误代码实例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202174865__p3790182181115\\\"'><strong>影响/报错</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1177043311410\\\"'>导致程序存在安全漏洞，并有崩溃风险。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p877023381414\\\"'>开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:heap-buffer-overflow</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p206311125111117\\\"'><strong>定位思路</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p19713154111112\\\"'>如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen1625884891415\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:heap</span>-buffer-overflow\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>17140</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> heap-buffer-overflow on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x005ec33c3250</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fe9c392f0</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fe9c392e8</span>\\nWRITE of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec33c324c</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x324c</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span>f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec33c38e0</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x38e0</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span>f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f850b3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span> is located <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> bytes to the right of <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>10</span>-byte region [<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8d0</span>,<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span>)\\nallocated by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f82652758</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2758</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec33c31ec</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x31ec</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span>f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec33c38e0</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x38e0</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span>f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f850b3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec6a1bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec6847f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1246765914143\\\"'>如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen5480161311159\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:heap</span>-buffer-overflow\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>17140</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> heap-buffer-overflow on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x005ec33c3250</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fe9c392f0</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fe9c392e8</span>\\nWRITE of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> overflowAndUnderflowOfBuffers() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:47</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:89</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f850b3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span> is located <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> bytes to the right of <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>10</span>-byte region [<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8d0</span>,<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0060019ca8da</span>)\\nallocated by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f82652758</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2758</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> overflowAndUnderflowOfBuffers() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:46</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:89</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f850b3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec6a1bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec6847f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1188034119119\\\"'><strong>修改方法</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p221044181118\\\"'>注意数组容量不要访问越界。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1744164491113\\\"'><strong>推荐建议</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p4250947151118\\\"'>已知大小的集合注意访问不要越界，位置大小的集合访问前先判断大小。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-asan.html"
    },
    {
        "id": 1396,
        "pre": "int stackBufferUnderflow() {\\n    int subscript = -1;\\n    char buffer[42];\\n    buffer[subscript] = 42;\\n    return 0;\\n}",
        "type": "Reference",
        "function_call": "stackBufferUnderflow()",
        "function_name": "[h2]stack-buffer-underflow",
        "parent_text": "[h2]stack-buffer-underflow背景/原理 访问越下界。 错误代码实例  影响/报错 导致程序存在安全漏洞，并有崩溃风险。 开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:stack-buffer-underflow 定位思路 如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。 Reason:AddressSanitizer:stack-buffer-underflow\\nFault thread info:\\n==appspawn==17039==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x007e07c6027f at pc 0x007f1bdc3994 bp 0x007e07c60250 sp 0x007e07c60248\\nWRITE of size 1 at 0x007e07c6027f thread T0 (easandemo_api12)\\n    #0 0x7f1bdc3990  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3990) (BuildId: e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)\\n    #1 0x7f1bdc3fa8  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3fa8) (BuildId: e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)\\n    #2 0x7e838339a8  (/system/lib64/platformsdk/libace_napi.z.so+0x339a8) (BuildId: f48b24ee6f099a2107ef30b4ace050de)\\nAddress 0x007e07c6027f is located in stack of thread T0 (easandemo_api12) at offset 31 in frame\\n    #0 0x7f1bdc3820  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3820) (BuildId: e34349d8024d23ca83c7c7c3b9f69505d2beb3a0) 如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。 Reason:AddressSanitizer:stack-buffer-underflow\\nFault thread info:\\n==appspawn==17039==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x007e07c6027f at pc 0x007f1bdc3994 bp 0x007e07c60250 sp 0x007e07c60248\\nWRITE of size 1 at 0x007e07c6027f thread T0 (easandemo_api12)\\n    #0 stackBufferUnderflow() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:95)\\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:135)\\n    #2 0x7e838339a8  (/system/lib64/platformsdk/libace_napi.z.so+0x339a8) (BuildId: f48b24ee6f099a2107ef30b4ace050de)\\nAddress 0x007e07c6027f is located in stack of thread T0 (easandemo_api12) at offset 31 in frame\\n    #0 stackBufferUnderflow() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:92) 修改方法 访问索引不应小于下界。 推荐建议 访问索引不应小于下界。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section11197403124\\\"'><a name='\\\"section11197403124\\\"'></a><a name='\\\"section11197403124\\\"'></a><h4>[h2]stack-buffer-underflow</h4><p id='\\\"ZH-CN_TOPIC_0000002202174865__p619712061215\\\"'><strong>背景/原理</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p81972015128\\\"'>访问越下界。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1419730181218\\\"'><strong>错误代码实例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202174865__p151975010125\\\"'><strong>影响/报错</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1516735419156\\\"'>导致程序存在安全漏洞，并有崩溃风险。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p21676542159\\\"'>开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:stack-buffer-underflow</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p171978012126\\\"'><strong>定位思路</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1819714031219\\\"'>如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen19621133166\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:stack</span>-buffer-underflow\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>17039</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> stack-buffer-underflow on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c6027f</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007f1bdc3994</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c60250</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c60248</span>\\nWRITE of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c6027f</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f1bdc3990</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3990</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f1bdc3fa8</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3fa8</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7e838339a8</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x339a8</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> f48b24ee6f099a2107ef30b4ace050de)\\nAddress <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c6027f</span> is located in stack of thread T0 (easandemo_api12) at offset <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>31</span> in frame\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f1bdc3820</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3820</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p61869114168\\\"'>如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen3738182116163\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:stack</span>-buffer-underflow\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>17039</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> stack-buffer-underflow on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c6027f</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007f1bdc3994</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c60250</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c60248</span>\\nWRITE of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c6027f</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> stackBufferUnderflow() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:95</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:135</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7e838339a8</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x339a8</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> f48b24ee6f099a2107ef30b4ace050de)\\nAddress <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007e07c6027f</span> is located in stack of thread T0 (easandemo_api12) at offset <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>31</span> in frame\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> stackBufferUnderflow() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:92</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1197905126\\\"'><strong>修改方法</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1419790111215\\\"'>访问索引不应小于下界。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p12197150101218\\\"'><strong>推荐建议</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p119720121220\\\"'>访问索引不应小于下界。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-asan.html"
    },
    {
        "id": 1397,
        "pre": "int *gp;\\nbool b = true;\\nint stackUseAfterScope() {\\n    if (b) {\\n        int x[5];\\n        gp = x + 1;\\n    }\\n    return *gp;\\n}",
        "type": "Reference",
        "function_call": "stackUseAfterScope()",
        "function_name": "[h2]stack-use-after-scope",
        "parent_text": "[h2]stack-use-after-scope背景/原理 栈变量在作用域之外被使用。 错误代码实例  影响/报错 导致程序存在安全漏洞，并有崩溃风险。 开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:stack-use-after-scope 定位思路 如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。 Reason:AddressSanitizer:stack-use-after-scope\\nFault thread info:\\n==appspawn==7494==ERROR: AddressSanitizer: stack-use-after-scope on address 0x007ffa213b44 at pc 0x005ebf0431e4 bp 0x007ffa213b10 sp 0x007ffa213b08\\nREAD of size 4 at 0x007ffa213b44 thread T0 (easandemo_api12)\\n    #0 0x5ebf0431e0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x31e0) (BuildId: cf28a04a79da128bc344416e8d5f860e3e22f495)\\n    #1 0x5ebf0437f4  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x37f4) (BuildId: cf28a04a79da128bc344416e8d5f860e3e22f495)\\n    #2 0x7f868b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\nAddress 0x007ffa213b44 is located in stack of thread T0 (easandemo_api12) at offset 36 in frame\\n    #0 0x5ebf043024  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3024) (BuildId: cf28a04a79da128bc344416e8d5f860e3e22f495) 如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。 Reason:AddressSanitizer:stack-use-after-scope\\nFault thread info:\\n==appspawn==7494==ERROR: AddressSanitizer: stack-use-after-scope on address 0x007ffa213b44 at pc 0x005ebf0431e4 bp 0x007ffa213b10 sp 0x007ffa213b08\\nREAD of size 4 at 0x007ffa213b44 thread T0 (easandemo_api12)\\n    #0 stackUseAfterScope() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:53)\\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:92)\\n    #2 0x7f868b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\nAddress 0x007ffa213b44 is located in stack of thread T0 (easandemo_api12) at offset 36 in frame\\n    #0 stackUseAfterScope() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:48) 修改方法 在作用域内使用该变量。 推荐建议 注意变量的作用域。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section6425723161210\\\"'><a name='\\\"section6425723161210\\\"'></a><a name='\\\"section6425723161210\\\"'></a><h4>[h2]stack-use-after-scope</h4><p id='\\\"ZH-CN_TOPIC_0000002202174865__p19426142319127\\\"'><strong>背景/原理</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p4426112321220\\\"'>栈变量在作用域之外被使用。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p54262237123\\\"'><strong>错误代码实例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202174865__p642610231125\\\"'><strong>影响/报错</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p868875818163\\\"'>导致程序存在安全漏洞，并有崩溃风险。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p18688155861614\\\"'>开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:stack-use-after-scope</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p8426192319128\\\"'><strong>定位思路</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1426102320127\\\"'>如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen13136118171719\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:stack</span>-use-after-scope\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>7494</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> stack-use-after-scope on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b44</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x005ebf0431e4</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b10</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b08</span>\\nREAD of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b44</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ebf0431e0</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x31e0</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> cf28a04a79da128bc344416e8d5f860e3e22f495)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ebf0437f4</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x37f4</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> cf28a04a79da128bc344416e8d5f860e3e22f495)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f868b3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\nAddress <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b44</span> is located in stack of thread T0 (easandemo_api12) at offset <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>36</span> in frame\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ebf043024</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3024</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> cf28a04a79da128bc344416e8d5f860e3e22f495)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p163941691718\\\"'>如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen1989120319178\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:stack</span>-use-after-scope\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>7494</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> stack-use-after-scope on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b44</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x005ebf0431e4</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b10</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b08</span>\\nREAD of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b44</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> stackUseAfterScope() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:53</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:92</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f868b3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\nAddress <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ffa213b44</span> is located in stack of thread T0 (easandemo_api12) at offset <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>36</span> in frame\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> stackUseAfterScope() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:48</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p14426182361212\\\"'><strong>修改方法</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p442602341217\\\"'>在作用域内使用该变量。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p5426123121216\\\"'><strong>推荐建议</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p7426112311216\\\"'>注意变量的作用域。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-asan.html"
    },
    {
        "id": 1398,
        "pre": "int main() {\\n    int value = 42;\\n    free(&value);\\n    return 0;\\n}",
        "type": "Reference",
        "function_call": "doubleFree()",
        "function_name": "[h2]attempt-free-nonallocated-memory",
        "parent_text": "[h2]attempt-free-nonallocated-memory背景/原理 尝试释放了非堆对象（non-heap object）或未分配内存。 错误代码实例  影响/报错 导致程序存在安全漏洞，并有崩溃风险。 开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段： AddressSanitizer: attempting free on address which was not malloc()-ed 定位思路 如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。 Reason:AddressSanitizer:attempting\\nFault thread info:\\n==appspawn==20382==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x007fd59ae8c0 in thread T0 (easandemo_api12)\\n    #0 0x7f83a92630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 0x5ec45c3120  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3120) (BuildId: 743109db136e66f875a7bc47db74a8095758d4ff)\\n    #2 0x5ec45c3720  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3720) (BuildId: 743109db136e66f875a7bc47db74a8095758d4ff)\\n    #3 0x7f8a2f3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\nAddress 0x007fd59ae8c0 is located in stack of thread T0 (easandemo_api12) at offset 32 in frame\\n    #0 0x5ec45c2fbc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2fbc) (BuildId: 743109db136e66f875a7bc47db74a8095758d4ff) 如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。 Reason:AddressSanitizer:attempting\\nFault thread info:\\n==appspawn==20382==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x007fd59ae8c0 in thread T0 (easandemo_api12)\\n    #0 0x7f83a92630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:46)\\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:86)\\n    #3 0x7f8a2f3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\nAddress 0x007fd59ae8c0 is located in stack of thread T0 (easandemo_api12) at offset 32 in frame\\n    #0 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:44) 修改方法 不要对非堆对象或未分配的内存使用free函数。 推荐建议 不要对非堆对象或未分配的内存使用free函数。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section147851828141315\\\"'><a name='\\\"section147851828141315\\\"'></a><a name='\\\"section147851828141315\\\"'></a><h4>[h2]attempt-free-nonallocated-memory</h4><p id='\\\"ZH-CN_TOPIC_0000002202174865__p1478552821312\\\"'><strong>背景/原理</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p187861628161312\\\"'>尝试释放了非堆对象（non-heap object）或未分配内存。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p378614283135\\\"'><strong>错误代码实例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1078632821316\\\"'><strong>影响/报错</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p181661414191813\\\"'>导致程序存在安全漏洞，并有崩溃风险。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p191661514191810\\\"'>开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p316611431816\\\"'>AddressSanitizer: attempting free on address which was not malloc()-ed</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p20786132817138\\\"'><strong>定位思路</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p13786112814132\\\"'>如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen104751424131813\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:attempting</span>\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>20382</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> attempting free on address which was <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>not</span> malloc()-ed<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fd59ae8c0</span> in thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f83a92630</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2630</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec45c3120</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3120</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>743109</span>db136e66f875a7bc47db74a8095758d4ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec45c3720</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3720</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>743109</span>db136e66f875a7bc47db74a8095758d4ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f8a2f3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\nAddress <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fd59ae8c0</span> is located in stack of thread T0 (easandemo_api12) at offset <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>32</span> in frame\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ec45c2fbc</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x2fbc</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>743109</span>db136e66f875a7bc47db74a8095758d4ff)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p19255122121810\\\"'>如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen684163915187\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:attempting</span>\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>20382</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> attempting free on address which was <span rgb(0,0,255);\\\"=\"\" style='\\\"color:'>not</span> malloc()-ed<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fd59ae8c0</span> in thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f83a92630</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2630</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> doubleFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:46</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:86</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7f8a2f3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\nAddress <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007fd59ae8c0</span> is located in stack of thread T0 (easandemo_api12) at offset <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>32</span> in frame\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> doubleFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:44</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1378662812131\\\"'><strong>修改方法</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p16786152815135\\\"'>不要对非堆对象或未分配的内存使用free函数。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p8786128141318\\\"'><strong>推荐建议</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p207861028101317\\\"'>不要对非堆对象或未分配的内存使用free函数。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-asan.html"
    },
    {
        "id": 1399,
        "pre": "int main() {\\n    int *x = new int[42];\\n    delete [] x;\\n    delete [] x;\\n    return 0;\\n}",
        "type": "Reference",
        "function_call": "doubleFree()",
        "function_name": "[h2]double-free",
        "parent_text": "[h2]double-free背景/原理 重复释放内存。 错误代码实例  影响/报错 导致程序存在安全漏洞，并有崩溃风险。 开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer: attempting double-free 定位思路 如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。 Reason:AddressSanitizer:attempting\\nFault thread info:\\n==appspawn==9596==ERROR: AddressSanitizer: attempting double-free on 0x0061303ecc10 in thread T0 (easandemo_api12):\\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 0x5ef0b82ef4  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2ef4) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\\n    #2 0x5ef0b834bc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x34bc) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n0x0061303ecc10 is located 0 bytes inside of 32-byte region [0x0061303ecc10,0x0061303ecc30)\\nfreed by thread T0 (easandemo_api12) here:\\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 0x5ef0b82eec  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2eec) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\\n    #2 0x5ef0b834bc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x34bc) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ef459bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ef43c7f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\\npreviously allocated by thread T0 (easandemo_api12) here:\\n    #0 0x7fb3292758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 0x5ef0b82ee0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2ee0) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\\n    #2 0x5ef0b834bc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x34bc) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ef459bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ef43c7f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c) 如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。 Reason:AddressSanitizer:attempting\\nFault thread info:\\n==appspawn==9596==ERROR: AddressSanitizer: attempting double-free on 0x0061303ecc10 in thread T0 (easandemo_api12):\\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:47)\\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:87)\\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n0x0061303ecc10 is located 0 bytes inside of 32-byte region [0x0061303ecc10,0x0061303ecc30)\\nfreed by thread T0 (easandemo_api12) here:\\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:46)\\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:87)\\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ef459bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ef43c7f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\\npreviously allocated by thread T0 (easandemo_api12) here:\\n    #0 0x7fb3292758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:45)\\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:87) 修改方法 已经释放一次的指针，不要再重复释放。 推荐建议 变量定义声明时初始化为NULL，释放内存后也应立即将变量重置为NULL，这样每次释放之前都可以通过判断变量是否为NULL来判断是否可以释放。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section78203931316\\\"'><a name='\\\"section78203931316\\\"'></a><a name='\\\"section78203931316\\\"'></a><h4>[h2]double-free</h4><p id='\\\"ZH-CN_TOPIC_0000002202174865__p78293981312\\\"'><strong>背景/原理</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p16821139191319\\\"'>重复释放内存。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p982153918132\\\"'><strong>错误代码实例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202174865__p18243941316\\\"'><strong>影响/报错</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p10447112281917\\\"'>导致程序存在安全漏洞，并有崩溃风险。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p5447182216198\\\"'>开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer: attempting double-free</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p158213914139\\\"'><strong>定位思路</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1782153921316\\\"'>如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen5943183231913\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:attempting</span>\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>9596</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> attempting double-free on <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc10</span> in thread T0 (easandemo_api12)<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb3292630</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2630</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef0b82ef4</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x2ef4</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span>b44777ffb29e6665852feeb6f23712aef424077)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef0b834bc</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x34bc</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span>b44777ffb29e6665852feeb6f23712aef424077)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb4af3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc10</span> is located <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> bytes inside of <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>32</span>-byte region [<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc10</span>,<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc30</span>)\\nfreed by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb3292630</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2630</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef0b82eec</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x2eec</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span>b44777ffb29e6665852feeb6f23712aef424077)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef0b834bc</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x34bc</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span>b44777ffb29e6665852feeb6f23712aef424077)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb4af3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef459bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef43c7f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)\\npreviously allocated by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb3292758</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2758</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef0b82ee0</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x2ee0</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span>b44777ffb29e6665852feeb6f23712aef424077)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef0b834bc</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x34bc</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span>b44777ffb29e6665852feeb6f23712aef424077)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb4af3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef459bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef43c7f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p349513521914\\\"'>如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen17788959151918\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:attempting</span>\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>9596</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> attempting double-free on <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc10</span> in thread T0 (easandemo_api12)<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb3292630</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2630</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> doubleFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:47</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:87</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb4af3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc10</span> is located <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> bytes inside of <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>32</span>-byte region [<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc10</span>,<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x0061303ecc30</span>)\\nfreed by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb3292630</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2630</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> doubleFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:46</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:87</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb4af3780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef459bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ef43c7f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)\\npreviously allocated by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fb3292758</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xd2758</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> doubleFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:45</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:87</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p2821439201317\\\"'><strong>修改方法</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p7821399132\\\"'>已经释放一次的指针，不要再重复释放。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p1782103917135\\\"'><strong>推荐建议</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p18821539151316\\\"'>变量定义声明时初始化为NULL，释放内存后也应立即将变量重置为NULL，这样每次释放之前都可以通过判断变量是否为NULL来判断是否可以释放。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-asan.html"
    },
    {
        "id": 1400,
        "pre": "#include <stdlib.h>\\nint main() {\\n    int *array = new int[5];\\n    delete[] array;\\n    return array[5]; \\n}",
        "type": "Reference",
        "function_call": "实现一个free()",
        "function_name": "[h2]heap-use-after-free",
        "parent_text": "[h2]heap-use-after-free背景/原理 当指针指向的内存被释放后，仍然通过该指针访问已经被释放的内存，就会触发heap-use-after-free。 错误代码实例  影响/报错 导致程序存在安全漏洞，并有崩溃风险。 开启ASan检测后，触发demo中的函数，应用闪退报ASan，显示reason为AddressSanitizer:heap-use-after-free 定位思路 如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。 Reason:AddressSanitizer:heap-use-after-free\\nFault thread info:\\n==appspawn==10126==ERROR: AddressSanitizer: heap-use-after-free on address 0x006121870ce4 at pc 0x005ee1ec321c bp 0x007ff5959310 sp 0x007ff5959308\\nREAD of size 4 at 0x006121870ce4 thread T0 (easandemo_api12)\\n    #0 0x5ee1ec3218  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3218) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\\n    #1 0x5ee1ec3714  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3714) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\\n    #2 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n0x006121870ce4 is located 0 bytes to the right of 20-byte region [0x006121870cd0,0x006121870ce4)\\nfreed by thread T0 (easandemo_api12) here:\\n    #0 0x7fa569f0c4  (/system/lib64/libclang_rt.asan.so+0xdf0c4) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 0x5ee1ec31b8  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x31b8) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\\n    #2 0x5ee1ec3714  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3714) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\\npreviously allocated by thread T0 (easandemo_api12) here:\\n    #0 0x7fa569e888  (/system/lib64/libclang_rt.asan.so+0xde888) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 0x5ee1ec3194  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3194) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\\n    #2 0x5ee1ec3714  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3714) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c) 如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。 Reason:AddressSanitizer:heap-use-after-free\\nFault thread info:\\n==appspawn==10126==ERROR: AddressSanitizer: heap-use-after-free on address 0x006121870ce4 at pc 0x005ee1ec321c bp 0x007ff5959310 sp 0x007ff5959308\\nREAD of size 4 at 0x006121870ce4 thread T0 (easandemo_api12)\\n    #0 heapUseAfterFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:52)\\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:72)\\n    #2 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n0x006121870ce4 is located 0 bytes to the right of 20-byte region [0x006121870cd0,0x006121870ce4)\\nfreed by thread T0 (easandemo_api12) here:\\n    #0 0x7fa569f0c4  (/system/lib64/libclang_rt.asan.so+0xdf0c4) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 heapUseAfterFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:51)\\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:72)\\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\\npreviously allocated by thread T0 (easandemo_api12) here:\\n    #0 0x7fa569e888  (/system/lib64/libclang_rt.asan.so+0xde888) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #1 heapUseAfterFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:50)\\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:72)\\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c) 修改方法 已经释放的指针不要再使用，将指针设置为NULL/nullptr。 推荐建议 实现一个free()的替代版本或者 delete析构器来保证指针的重置。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section3562165119134\\\"'><a name='\\\"section3562165119134\\\"'></a><a name='\\\"section3562165119134\\\"'></a><h4>[h2]heap-use-after-free</h4><p id='\\\"ZH-CN_TOPIC_0000002202174865__p1256215513137\\\"'><strong>背景/原理</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p55627514134\\\"'>当指针指向的内存被释放后，仍然通过该指针访问已经被释放的内存，就会触发heap-use-after-free。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p956225117136\\\"'><strong>错误代码实例</strong></p>  <p id='\\\"ZH-CN_TOPIC_0000002202174865__p7562125120139\\\"'><strong>影响/报错</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p18410113402010\\\"'>导致程序存在安全漏洞，并有崩溃风险。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p194101434102019\\\"'>开启ASan检测后，触发demo中的函数，应用闪退报ASan，显示reason为AddressSanitizer:heap-use-after-free</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p95621451191312\\\"'><strong>定位思路</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p17562115114131\\\"'>如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen12760549132013\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:heap</span>-use-after-free\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>10126</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> heap-use-after-free on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x005ee1ec321c</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ff5959310</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ff5959308</span>\\nREAD of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee1ec3218</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3218</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span>b906822a911c973ab89188662a589eeedf639a4)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee1ec3714</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3714</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span>b906822a911c973ab89188662a589eeedf639a4)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa9133780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span> is located <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> bytes to the right of <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>20</span>-byte region [<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870cd0</span>,<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span>)\\nfreed by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa569f0c4</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xdf0c4</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee1ec31b8</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x31b8</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span>b906822a911c973ab89188662a589eeedf639a4)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee1ec3714</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3714</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span>b906822a911c973ab89188662a589eeedf639a4)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa9133780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee571bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee5547f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)\\npreviously allocated by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa569e888</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xde888</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee1ec3194</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3194</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span>b906822a911c973ab89188662a589eeedf639a4)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee1ec3714</span>  (/data/storage/el1/bundle/libs/arm64/libentry.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x3714</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span>b906822a911c973ab89188662a589eeedf639a4)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa9133780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee571bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee5547f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p114081243142011\\\"'>如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。</p> <pre class='\\\"screen\\\"' id='\\\"ZH-CN_TOPIC_0000002202174865__screen181435714208\\\"'>Reason<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:AddressSanitizer:heap</span>-use-after-free\\nFault thread info<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n==appspawn==<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>10126</span>==ERROR<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> AddressSanitizer<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> heap-use-after-free on address <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span> at pc <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x005ee1ec321c</span> bp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ff5959310</span> sp <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x007ff5959308</span>\\nREAD of size <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> at <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span> thread T0 (easandemo_api12)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> heapUseAfterFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:52</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:72</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa9133780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span> is located <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> bytes to the right of <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>20</span>-byte region [<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870cd0</span>,<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x006121870ce4</span>)\\nfreed by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa569f0c4</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xdf0c4</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> heapUseAfterFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:51</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:72</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa9133780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee571bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee5547f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)\\npreviously allocated by thread T0 (easandemo_api12) here<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>0</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa569e888</span>  (/system/lib64/libclang_rt.asan.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0xde888</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>1</span> heapUseAfterFree() at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:50</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>2</span> AsanCheck(napi_env__*, napi_callback_info__*) at (D<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span>/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:72</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>3</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x7fa9133780</span>  (/system/lib64/platformsdk/libace_napi.z.so+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x33780</span>) (BuildId<span rgb(224,0,0);\\\"=\"\" style='\\\"color:'>:</span> <span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>25</span>f88248f530c20439061db9eb4ed152)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>4</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee571bcd8</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x1dccd8</span>)\\n    #<span rgb(9,134,88);\\\"=\"\" style='\\\"color:'>5</span> <span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x5ee5547f4c</span>  (/system/lib64/module/arkcompiler/stub.an+<span rgb(48,48,192);\\\"=\"\" style='\\\"color:'>0x8f4c</span>)</pre> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p556285116137\\\"'><strong>修改方法</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p47726814218\\\"'>已经释放的指针不要再使用，将指针设置为NULL/nullptr。</p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p16562145161319\\\"'><strong>推荐建议</strong></p> <p id='\\\"ZH-CN_TOPIC_0000002202174865__p45621351121316\\\"'>实现一个free()的替代版本或者 delete析构器来保证指针的重置。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-asan.html"
    },
    {
        "id": 1401,
        "pre": "import { systemShare } from '@kit.ShareKit';\\nimport { uniformTypeDescriptor as utd } from '@kit.ArkData';\\nimport { common } from '@kit.AbilityKit';\\nimport { fileUri } from '@kit.CoreFileKit';\\nimport { image } from '@kit.ImageKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相关模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/share-utd-video.html"
    },
    {
        "id": 1402,
        "pre": "  \\\"skills\\\":[\\n    {\\n      \\\"entities\\\":[\\n        ...\\n      ],\\n      \\\"actions\\\":[\\n        ...\\n        \\\"ohos.want.action.viewData\\\"\\n      ]\\n    }\\n  ]",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "应用需要具备ohos.want.action.viewData或ohos.want.action.editData的skills，可在module.json5文件中增加相应配置： ",
        "import_module": null,
        "parent": "<li>应用需要具备ohos.want.action.viewData或ohos.want.action.editData的skills，可在module.json5文件中增加相应配置： </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/dlp-guidelines.html"
    },
    {
        "id": 1403,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-remove-container-without-property\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-remove-container-without-property.html"
    },
    {
        "id": 1404,
        "pre": "@Entry\\n@Component\\nstruct MyComponent{\\n  @State number: Number[] = Array.from(Array<number>(1000), (val, i) => i);\\n  scroller: Scroller = new Scroller()\\n  build() {\\n    Column() {\\n      Grid(this.scroller) {\\n        ForEach(this.number, (item: number) => {\\n          GridItem() {\\n            Text(item.toString())\\n              .fontSize(16)\\n              .backgroundColor(0xF9CF93)\\n              .width('100%')\\n              .height(80)\\n              .textAlign(TextAlign.Center)\\n              .border({width:1})\\n          }\\n        }, (item:string) => item)\\n      }\\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr')\\n      .columnsGap(0)\\n      .rowsGap(0)\\n      .size({ width: \\\"100%\\\", height: \\\"100%\\\" })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-remove-container-without-property.html"
    },
    {
        "id": 1405,
        "pre": "@Entry\\n@Component\\nstruct MyComponent{\\n  @State number: Number[] = Array.from(Array<number>(1000), (val, i) => i);\\n  scroller: Scroller = new Scroller()\\n  build() {\\n    Column() {\\n      Grid(this.scroller) {\\n        ForEach(this.number, (item: number) => {\\n          GridItem() {\\n            Flex() {\\n              Flex() {\\n                Flex() {\\n                  Text(item.toString())\\n                    .fontSize(16)\\n                    .backgroundColor(0xF9CF93)\\n                    .width('100%')\\n                    .height(80)\\n                    .textAlign(TextAlign.Center)\\n                    .border({width:1})\\n                }\\n              }\\n            }\\n          }\\n        }, (item:string) => item)\\n      }\\n      .columnsTemplate('1fr 1fr 1fr 1fr 1fr')\\n      .columnsGap(0)\\n      .rowsGap(0)\\n      .size({ width: \\\"100%\\\", height: \\\"100%\\\" })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-remove-container-without-property.html"
    },
    {
        "id": 1406,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入需要的模块。 ",
        "import_module": null,
        "parent": "<li><span>导入需要的模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-customprocessconfig.html"
    },
    {
        "id": 1407,
        "pre": "import { camera } from '@kit.CameraKit'; \\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相机等相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相机等相关模块。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1408,
        "pre": "import { display } from '@kit.ArkUI'; \\n\\nlet initDisplayRotation = display.getDefaultDisplaySync().rotation;\\nlet imageRotation = initDisplayRotation * camera.ImageRotation.ROTATION_90;",
        "type": "Reference",
        "function_call": "function getPreviewRotation(previewOutput: camera.PreviewOutput, imageRotation : camera.ImageRotation): camera",
        "function_name": null,
        "parent_text": "调用PreviewOutput类中的getPreviewRotation接口，获取预览旋转角度。displayRotation：显示设备的屏幕旋转角度，可通过display.getDefaultDisplaySync获取Display对象并读取其rotation属性值，并将对应角度填入。 例：Display.rotation = 1，表示显示设备屏幕顺时针旋转为90°，此处displayRotation填入90。  该接口需要在session调用commitConfig完成配流后调用，如果存在异步执行的情况，previewOutput未添加到session里或者已调用的session.release，导致两者关系未绑定，此时调用getPreviewRotation，则会调用失败，并抛出错误码CameraErrorCode.SERVICE_FATAL_ERROR。function getPreviewRotation(previewOutput: camera.PreviewOutput, imageRotation : camera.ImageRotation): camera.ImageRotation {\\n  let previewRotation: camera.ImageRotation = camera.ImageRotation.ROTATION_0;\\n  try {\\n    previewRotation = previewOutput.getPreviewRotation(imageRotation);\\n    hilog.log(`Preview rotation is: ${previewRotation}`);\\n  } catch (error) {\\n    // 失败返回错误码error.code并处理\\n    let err = error as BusinessError;\\n    hilog.error(`The previewOutput.getPreviewRotation call failed. error code: ${err.code}`);\\n  }\\n  return previewRotation;\\n}  ",
        "import_module": null,
        "parent": "<li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#previewoutput\\\"' target='\\\"_blank\\\"'>PreviewOutput</a>类中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#getpreviewrotation12\\\"' target='\\\"_blank\\\"'>getPreviewRotation</a>接口，获取<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/camera-rotation-term#section11826104333019\\\"'>预览旋转角度</a>。<p>displayRotation：<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/camera-rotation-term#section106421042912\\\"'>显示设备的屏幕旋转角度</a>，可通过<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-display#displaygetdefaultdisplaysync9\\\"' target='\\\"_blank\\\"'>display.getDefaultDisplaySync</a>获取<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-display#属性\\\"' target='\\\"_blank\\\"'>Display</a>对象并读取其rotation属性值，并将对应角度填入。</p> <p>例：Display.rotation = 1，表示显示设备屏幕顺时针旋转为90°，此处displayRotation填入90。</p>  <div class='\\\"p\\\"'>该接口需要在session调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#commitconfig11\\\"' target='\\\"_blank\\\"'>commitConfig</a>完成配流后调用，如果存在异步执行的情况，previewOutput未添加到session里或者已调用的session.release，导致两者关系未绑定，此时调用getPreviewRotation，则会调用失败，并抛出错误码<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/errorcode-camera#section7400201-相机服务异常\\\"' target='\\\"_blank\\\"'>CameraErrorCode.SERVICE_FATAL_ERROR</a>。<pre class='\\\"screen\\\"'>function getPreviewRotation(previewOutput: camera.PreviewOutput, imageRotation : camera.ImageRotation): camera.ImageRotation {\\n  let previewRotation: camera.ImageRotation = camera.ImageRotation.ROTATION_0;\\n  try {\\n    previewRotation = previewOutput.getPreviewRotation(imageRotation);\\n    hilog.log(`Preview rotation is: ${previewRotation}`);\\n  } catch (error) {\\n    // 失败返回错误码error.code并处理\\n    let err = error as BusinessError;\\n    hilog.error(`The previewOutput.getPreviewRotation call failed. error code: ${err.code}`);\\n  }\\n  return previewRotation;\\n}</pre> </div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1409,
        "pre": "function getPhotoRotation(photoOutput: camera.PhotoOutput, deviceDegree: number): camera.ImageRotation {\\n  let photoRotation: camera.ImageRotation = camera.ImageRotation.ROTATION_0;\\n  try {\\n    photoRotation = photoOutput.getPhotoRotation(deviceDegree); \\n    hilog.info(`Photo rotation is: ${photoRotation}`); \\n  } catch (error) {  \\n    // 失败返回错误码error.code并处理 \\n    let err = error as BusinessError;   \\n    hilog.error(`The photoOutput.getPhotoRotation call failed. error code: ${err.code}`); \\n  }\\n  return photoRotation; \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用PhotoOutput类中的getPhotoRotation可以获取到拍照旋转角度。该接口需要在session调用commitConfig完成配流后调用。 deviceDegree：设备旋转角度。获取方式请见计算设备旋转角度。  ",
        "import_module": null,
        "parent": "<li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#photooutput\\\"' target='\\\"_blank\\\"'>PhotoOutput</a>类中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#getphotorotation12\\\"' target='\\\"_blank\\\"'>getPhotoRotation</a>可以获取到拍照旋转角度。<p>该接口需要在session调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#commitconfig11\\\"' target='\\\"_blank\\\"'>commitConfig</a>完成配流后调用。</p> <p>deviceDegree：设备旋转角度。获取方式请见<a href='\\\"#section2034473052817\\\"'>计算设备旋转角度</a>。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1410,
        "pre": "function getVideoRotation(videoOutput: camera.VideoOutput, deviceDegree: number): camera.ImageRotation {\\n  let videoRotation: camera.ImageRotation = camera.ImageRotation.ROTATION_0;\\n  try {\\n    videoRotation = videoOutput.getVideoRotation(deviceDegree);\\n    hilog.info(`Video rotation is: ${videoRotation}`);\\n  } catch (error) {\\n    // 失败返回错误码error.code并处理\\n    let err = error as BusinessError;\\n    hilog.error(`The videoOutput.getVideoRotation call failed. error code: ${err.code}`);\\n  }\\n  return videoRotation;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用VideoOutput类中的getVideoRotation可以获取到录像的旋转角度。该接口需要在session调用commitConfig完成配流后调用。 deviceDegree：设备旋转角度。获取方式请见计算设备旋转角度。  ",
        "import_module": null,
        "parent": "<li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#videooutput\\\"' target='\\\"_blank\\\"'>VideoOutput</a>类中的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#getvideorotation12\\\"' target='\\\"_blank\\\"'>getVideoRotation</a>可以获取到录像的旋转角度。<p>该接口需要在session调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#commitconfig11\\\"' target='\\\"_blank\\\"'>commitConfig</a>完成配流后调用。</p> <p>deviceDegree：设备旋转角度。获取方式请见<a href='\\\"#section2034473052817\\\"'>计算设备旋转角度</a>。</p>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1411,
        "pre": "import { Decimal } from '@kit.ArkTS';\\nimport { sensor } from '@kit.SensorServiceKit';\\nimport { BusinessError } from '@ohos.base';\\n\\ngetRealData(data: sensor.GravityResponse): number {\\n  let getDeviceDegree: number = 0;\\n  hilog.info('Succeeded in invoki e. X-coordinate component: ' + data.x);\\n  hilog.info('Succeeded in invoking once. Y-coordinate component: ' + data.y);\\n  hilog.info('Succeeded in invoking once. Z-coordinate component: ' + data.z);\\n  let x = data.x;\\n  let y = data.y;\\n  let z = data.z;\\n  if ((x * x + y * y) * 3 < z * z) {\\n    return getDeviceDegree;\\n  } else {\\n    let sd: Decimal = Decimal.atan2(y, -x);\\n    let sc: Decimal = Decimal.round(Number(sd) / 3.141592653589 * 180)\\n    getDeviceDegree = 90 - Number(sc);\\n    getDeviceDegree = getDeviceDegree >= 0 ? getDeviceDegree % 360 : getDeviceDegree % 360 + 360;\\n  }\\n  return getDeviceDegree;\\n}\\n\\ngetGravity() : Promise<number> {\\n  sensor.getSensorList((error: BusinessError, data: Array<sensor.Sensor>) => {\\n    for (let i = 0; i < data.length; i++) {\\n      if (data[i].sensorId === sensor.SensorId.GRAVITY) {\\n        this.isSupported = true;\\n        break;\\n      }\\n    }});\\n  if (this.isSupported === true) {\\n    const promise: Promise<number> = new Promise((resolve, reject) => {\\n      sensor.once(sensor.SensorId.GRAVITY, (data: sensor.GravityResponse) => {\\n          resolve(this.getRealData(data));\\n      });\\n    })\\n    return promise;\\n  } else {\\n    const promise: Promise<number> = new Promise((resolve, reject) => {\\n      sensor.once(sensor.SensorId.ACCELEROMETER, (data: sensor.AccelerometerResponse) => {\\n        resolve(this.getRealData(data as sensor.GravityResponse));\\n      });\\n    })\\n    return promise;\\n  }\\n}",
        "type": "Reference",
        "function_call": "once(type: SensorId.GRAVITY, callback: Callback&lt;GravityResponse&gt;)",
        "function_name": "计算设备旋转角度",
        "parent_text": "计算设备旋转角度当前可通过调用once(type: SensorId.GRAVITY, callback: Callback<GravityResponse>)获取一次重力传感器在x、y、z三个方向上的数据，计算得出设备旋转角度deviceDegree，示例如下所示。 如果无法获得重力传感器数据，需要申请重力传感器权限ohos.permission.ACCELEROMETER。权限申请请参考声明权限，如何获取传感器数据请参考传感器开发指导。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2034473052817\\\"'><a name='\\\"section2034473052817\\\"'></a><a name='\\\"section2034473052817\\\"'></a><h4>计算设备旋转角度</h4><p>当前可通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-sensor#gravity9-1\\\"' target='\\\"_blank\\\"'>once(type: SensorId.GRAVITY, callback: Callback&lt;GravityResponse&gt;)</a>获取一次重力传感器在x、y、z三个方向上的数据，计算得出设备旋转角度deviceDegree，示例如下所示。</p> <p>如果无法获得重力传感器数据，需要申请重力传感器权限ohos.permission.ACCELEROMETER。权限申请请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/declare-permissions\\\"' target='\\\"_blank\\\"'>声明权限</a>，如何获取传感器数据请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/sensor-guidelines\\\"' target='\\\"_blank\\\"'>传感器开发指导</a>。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1412,
        "pre": "import { bundleManager } from '@kit.AbilityKit';\\nimport { BusinessError, deviceInfo } from '@kit.BasicServicesKit';\\n// ....\\n@State mXComponentWidth: number = Constants.X_COMPONENT_SURFACE_WIDTH;\\n@State mXComponentHeight: number = Constants.X_COMPONENT_SURFACE_HEIGHT;\\n@State mRotate: number = display.getDefaultDisplaySync().rotation * camera.ImageRotation.ROTATION_90;\\n@State mConfigRatio: number = 16 / 9;\\nprivate targetVersion: number = 0;\\nprivate mWindowHeight = 0;\\nprivate mWindowWidth = 0;\\n\\ngetBundleInfoForSelf() { // 获取应用的编译版本\\n  let bundleFlags = bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION | bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_METADATA;\\n  try {\\n    bundleManager.getBundleInfoForSelf(bundleFlags).then((data) => {\\n      hilog.info(TAG, `getBundleInfoForSelf successfully. Data: ${data.targetVersion}`);\\n      this.targetVersion = data.targetVersion;\\n    }).catch((err: BusinessError) => {\\n      hilog.error(TAG, `getBundleInfoForSelf failed ${err}`);\\n    });\\n  } catch (err) {\\n    let message = (err as BusinessError).message;\\n    Logger.error(TAG, `getBundleInfoForSelf failed ${message}`);\\n  }\\n}\\n\\nisIsolateForSpecialType(): boolean { // 兼容平板API14之前的设备\\n  return deviceInfo.deviceType == \\\"tablet\\\" && this.targetVersion <= 50000013;\\n}\\n\\naboutToAppear(): void {\\n  this.updateXcomponentSize()；\\n  this.getBundleInfoForSelf()；\\n  this.windowClass.on('windowSizeChange', (size) => {\\n    this.mWindowWidth = size.width;\\n    this.mWindowHeight = size.height;\\n    this.updateXcomponentSize();\\n  });\\n    display.on('change', (n: number) => {\\n      if (this.mRotate!= display.getDefaultDisplaySync().rotation * camera.ImageRotation.ROTATION_90) {\\n        this.mRotate= display.getDefaultDisplaySync().rotation * camera.ImageRotation.ROTATION_90; // 获取屏幕旋转角度\\n        this.updateXcomponentSize();\\n        let previewRotation = previewOutput.getPreviewRotation(imageRotation); // previewOutput是创建的预览流\\n        previewOutput.setPreviewRotation(previewRotation, false);\\n      }\\n    });\\n}\\n\\nupdateXcomponentSize(): void {\\n let angleDiff = (this.mRotate+ selectedCamera?.cameraOrientation) % 360;\\n if (this.isIsolateForSpecialType()) { // 平板并且API小于14\\n  if (angleDiff === 90 || angleDiff=== 270) {\\n    this.mXComponentWidth = this.mConfigRatio * this.mWindowHeight;\\n    this.mXComponentHeight = this.mWindowHeight;\\n  } else {\\n    this.mXComponentWidth = this.mWindowWidth;\\n    this.mXComponentHeight = this.mConfigRatio * this.mWindowWidth; //1920 *1080\\n  }\\n } else { // 非平板或者平板API大于等于14，\\n  if (angleDiff === 90 || angleDiff=== 270) { // 平板的api14以下 api14以上\\n    this.mXComponentWidth = this.mWindowWidth;\\n    this.mXComponentHeight = this.mConfigRatio * this.mWindowWidth; //1920 *1080\\n  } else {\\n    this.mXComponentWidth = this.mConfigRatio * this.mWindowHeight;\\n    this.mXComponentHeight = this.mWindowHeight;\\n  }\\n }\\n}\\n\\nasync aboutToDisAppear(): Promise<void> {\\n  display.off('change');\\n  this.windowClass.off('windowSizeChange');\\n  // 解注册\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "具体的实现方法如下，在需要进行横竖屏切换的页面中，通常建议在aboutToAppear中执行窗口变化的监听。 ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>具体的实现方法如下，在需要进行横竖屏切换的页面中，通常建议在aboutToAppear中执行窗口变化的监听。 </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1413,
        "pre": "bool isFront = (currentCameraPosition == camera.CAMERA_POSITION_FRONT);\\n// 通过previewOuput获取previewRotation角度\\nint32_t finalRotation = static_cast<int32_t>(previewRotation);\\n// 先旋转后镜像，前置与后置角度归一化处理\\nif (isFront &&(displayRotation == 90 || displayRotation == 270)) {\\n    finalRotation = (static_cast<int32_t>(previewRotation) + 180) % 360; // finalRotation值为图像转正需要旋转的角度\\n}\\nlibyuv::RotationMode mode = libyuv::kRotate0; // 图像要旋转的角度\\nswitch (finalRotation) {\\n    case IAMGE_ROTATION_0:\\n        mode = libyuv::kRotate0; break;\\n    case IAMGE_ROTATION_90:\\n        mode = libyuv::kRotate90; break;\\n    case IAMGE_ROTATION_180:\\n        mode = libyuv::kRotate180; break;\\n    case IAMGE_ROTATION_270:\\n        mode = libyuv::kRotate270; break;\\n    default:\\n        mode = libyuv::kRotate0;\\n    break;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "以下是libyuv处理方式： // dst_width, dst_height在90度 270度与src_width, src_height源数据进行交换\\n//uint8_t* i420_y 源buffer的Y分量\\n//uint8_t* i420_u 源buffer的U分量\\n//uint8_t* i420_v 源buffer的V分量\\nuint8_t* rotated_y = static_cast<uint8_t*>(aligned_alloc(alignment, dst_width * dst_height));\\nuint8_t* rotated_u = static_cast<uint8_t*>(aligned_alloc(alignment, dst_width * dst_height / 2));\\nuint8_t* rotated_v = static_cast<uint8_t*>(aligned_alloc(alignment, dst_width * dst_height / 2));\\n//旋转指定的角度\\nlibyuv::I420Rotate(\\n    i420_y, src_stride,\\n    i420_u, src_stride/2,\\n    i420_v, src_stride/2,\\n    rotated_y, dst_width,\\n    rotated_u, dst_width/2,\\n    rotated_v, dst_width/2,\\n    src_width, src_height,\\n    mode\\n);\\n// 如果是前置，根据业务需要确定是否做镜像处理，以下是水平镜像示例\\nif (isFront) {\\n    uint8_t* i420_mirror_y = static_cast<uint8_t*>(aligned_alloc(alignment, dst_width * dst_height));\\n    uint8_t* i420_mirror_u = static_cast<uint8_t*>(aligned_alloc(alignment, (dst_width/2) * (dst_height/2)));\\n    uint8_t* i420_mirror_v = static_cast<uint8_t*>(aligned_alloc(alignment, (dst_width/2) * (dst_height/2)));\\n    libyuv::I420Mirror(\\n        rotated_y, dst_width,\\n        rotated_u, dst_width/2,\\n        rotated_v, dst_width/2,\\n        i420_mirror_y, dst_width,\\n        i420_mirror_u, dst_width/2,\\n        i420_mirror_v, dst_width/2,\\n        dst_width, dst_height\\n    );\\n}\\n// 渲染显示，bufferhandle为自绘制组件持有的buffer句柄\\nvoid *mappedAddr = mmap(bufferHandle->virAddr, bufferHandle->size, PROT_READ | PROT_WRITE, MAP_SHARED, bufferHandle->fd, 0);\\nmemcpy(static_cast<unsigned char *>(mappedAddr), static_cast<unsigned char *>(nv21_dst), srcSize);\\nmunmap(mappedAddr, bufferHandle->size); ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>以下是libyuv处理方式： <pre class='\\\"screen\\\"'>// dst_width, dst_height在90度 270度与src_width, src_height源数据进行交换\\n//uint8_t* i420_y 源buffer的Y分量\\n//uint8_t* i420_u 源buffer的U分量\\n//uint8_t* i420_v 源buffer的V分量\\nuint8_t* rotated_y = static_cast&lt;uint8_t*&gt;(aligned_alloc(alignment, dst_width * dst_height));\\nuint8_t* rotated_u = static_cast&lt;uint8_t*&gt;(aligned_alloc(alignment, dst_width * dst_height / 2));\\nuint8_t* rotated_v = static_cast&lt;uint8_t*&gt;(aligned_alloc(alignment, dst_width * dst_height / 2));\\n//旋转指定的角度\\nlibyuv::I420Rotate(\\n    i420_y, src_stride,\\n    i420_u, src_stride/2,\\n    i420_v, src_stride/2,\\n    rotated_y, dst_width,\\n    rotated_u, dst_width/2,\\n    rotated_v, dst_width/2,\\n    src_width, src_height,\\n    mode\\n);\\n// 如果是前置，根据业务需要确定是否做镜像处理，以下是水平镜像示例\\nif (isFront) {\\n    uint8_t* i420_mirror_y = static_cast&lt;uint8_t*&gt;(aligned_alloc(alignment, dst_width * dst_height));\\n    uint8_t* i420_mirror_u = static_cast&lt;uint8_t*&gt;(aligned_alloc(alignment, (dst_width/2) * (dst_height/2)));\\n    uint8_t* i420_mirror_v = static_cast&lt;uint8_t*&gt;(aligned_alloc(alignment, (dst_width/2) * (dst_height/2)));\\n    libyuv::I420Mirror(\\n        rotated_y, dst_width,\\n        rotated_u, dst_width/2,\\n        rotated_v, dst_width/2,\\n        i420_mirror_y, dst_width,\\n        i420_mirror_u, dst_width/2,\\n        i420_mirror_v, dst_width/2,\\n        dst_width, dst_height\\n    );\\n}\\n// 渲染显示，bufferhandle为自绘制组件持有的buffer句柄\\nvoid *mappedAddr = mmap(bufferHandle-&gt;virAddr, bufferHandle-&gt;size, PROT_READ | PROT_WRITE, MAP_SHARED, bufferHandle-&gt;fd, 0);\\nmemcpy(static_cast&lt;unsigned char *&gt;(mappedAddr), static_cast&lt;unsigned char *&gt;(nv21_dst), srcSize);\\nmunmap(mappedAddr, bufferHandle-&gt;size);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1414,
        "pre": "@State mConfigRatio: number = 1; // 设置分辨率比例初始值\\n// 根据屏幕初步计算比例，长边/短边\\nthis.mConfigRatio = (this.mWindowWidth > this.mWindowHeight) ? (this.mWindowWidth / this.mWindowHeight) :\\n    (this.mWindowHeight / this.mWindowWidth); \\nlet previewProfile = getSurfaceSize(cameraDevice, this.mConfigRatio); // 获取最接近的分辨率\\nif (previewProfile === undefined || previewProfile.size === undefined) {\\n   return;\\n}\\nthis.mConfigRatio = previewProfile.size.width / previewProfile.size.height; // 以新的比例重新计算显示宽高\\n\\n// 获取最接近屏幕的分辨率\\ngetSurfaceSize(cameraDevice: camera.CameraDevice, configRatio: number): camera.Profile | undefined {\\n  Logger.info(TAG, `previewProfiles is ${configRatio}`);\\n  this.cameraOutputCapability =\\n    this.cameraManager.getSupportedOutputCapability(cameraDevice, this.curSceneMode);\\n  return this.getPreviewProfile(this.cameraOutputCapability, configRatio);\\n}\\ngetPreviewProfile(cameraOutputCapability: camera.CameraOutputCapability, configRatio: number): camera.Profile | undefined {\\n  let previewProfiles = cameraOutputCapability.previewProfiles;\\n  if (previewProfiles.length < 1) {\\n    return undefined;\\n  }\\n  Logger.info(TAG, `previewProfiles this.foramt: ${this.previewProfileObj.format} configRatio = ${configRatio}`);\\n  let optimalSize: camera.Profile|undefined;\\n  let minDiff = Number.MAX_VALUE;\\n  // 计算屏幕的宽高比\\n  for (let i = 0; i < previewProfiles.length; i++) {\\n    if (previewProfiles[i].format !== this.previewProfileObj.format) {\\n      continue;\\n    }\\n    let ratio = previewProfiles[i].size.width / previewProfiles[i].size.height; //1088*1080\\n    // 检查宽高比是否匹配\\n    if (Math.abs(ratio - configRatio) > 0.2) continue; // 0.2的误差可自行调整\\n    // 选择最接近的分辨率\\n    if (Math.abs(previewProfiles[i].size.height - this.reConfigType) < minDiff) {\\n      optimalSize = previewProfiles[i];\\n      minDiff = Math.abs(previewProfiles[i].size.height - this.reConfigType);\\n    }\\n  }\\n\\n  // 如果没有找到合适的分辨率，选择第一个\\n  if (optimalSize === undefined) {\\n    minDiff = Number.MAX_VALUE;\\n    for (let i = 0; i < previewProfiles.length; i++) {\\n      if (previewProfiles[i].format !== this.previewProfileObj.format) {\\n        continue;\\n      }\\n      if (Math.abs(previewProfiles[i].size.height - this.reConfigType) < minDiff) { // 720\\n        optimalSize = previewProfiles[i];\\n        minDiff = Math.abs(previewProfiles[i].size.height - this.reConfigType);\\n      }\\n    }\\n  }\\n  return optimalSize;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "根据上一步的比例计算XComponent宽高，可参考指定XComponent的大小，防止旋转后图像拉伸变形，将mConfigRatio应用于布局宽高的计算。 ",
        "import_module": null,
        "parent": "<li>根据上一步的比例计算XComponent宽高，可参考<a href='\\\"#section732372019415\\\"'>指定XComponent的大小，防止旋转后图像拉伸变形</a>，将mConfigRatio应用于布局宽高的计算。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1415,
        "pre": "//this.photoOutput是拍照输出output, this.getDeviceDegree是重力角度\\nlet photoSettings: camera.PhotoCaptureSetting = {\\n      quality: camera.QualityLevel.QUALITY_LEVEL_HIGH,\\n      mirror: this.photoOutput?.isMirrorSupported() // 设置拍照镜像，true表示镜像，false表示非镜像\\n    };\\n // ... 省略获取代码\\n    this.photoRotation=getPhotoRotation(this.photoOutput!!,this.getDeviceDegree)\\n    photoSettings.rotation = this.photoRotation //指定拍照旋转角度",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]拍照无法镜像",
        "parent_text": "[h2]拍照无法镜像通过设置PhotoCaptureSetting中的mirror属性改变拍照镜像。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section165619291913\\\"'><a name='\\\"section165619291913\\\"'></a><a name='\\\"section165619291913\\\"'></a><h4>[h2]拍照无法镜像</h4><p>通过设置<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-camera#photocapturesetting\\\"' target='\\\"_blank\\\"'>PhotoCaptureSetting</a>中的mirror属性改变拍照镜像。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-rotation-angle-adaptation.html"
    },
    {
        "id": 1416,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nqueryEnvironmentStatus() {\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.queryEnvironmentStatus(context).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in querying environment status.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to query environment status. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "检查应用引入IAP Kit的可用性。在使用应用内支付之前，应用客户端需要向IAP Kit发送queryEnvironmentStatus请求，以此判断用户当前登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，则隐藏相关IAP功能入口。     当前IAP Kit支持结算的国家/地区仅有中国大陆。   ",
        "import_module": null,
        "parent": "<li>检查应用引入IAP Kit的可用性。<p>在使用应用内支付之前，应用客户端需要向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section192192415554\\\"' target='\\\"_blank\\\"'>queryEnvironmentStatus</a>请求，以此判断用户当前登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，则隐藏相关IAP功能入口。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120123.90388171175186191475838338243290:50001231000000:2800:1DE7FE6FA952494469B4F051F98F2ABFA3D0EEEB202BF92AC60FCB6AFEDBD523.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>当前IAP Kit支持结算的国家/地区仅有中国大陆。</p> </div> </div> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-nonrenewable.html"
    },
    {
        "id": 1417,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ncreatePurchase() {\\n  const createPurchaseParam: iap.PurchaseParameter = {\\n    // iap.ProductType.NONRENEWABLE：非续期订阅商品\\n    productType: iap.ProductType.NONRENEWABLE,\\n    // productId需要替换成开发者在AppGallery Connect网站配置商品信息时设置的“商品ID”\\n    productId: 'ohos_nonrenewable_001'\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.createPurchase(context, createPurchaseParam).then(async (result) => {\\n    console.info('Succeeded in creating purchase.');\\n    // 购买成功，处理购买结果\\n    // dealPurchaseResult实现请参见下一步\\n    this.dealPurchaseResult(result);\\n  }).catch((err: BusinessError) => {\\n    // 购买失败\\n    console.error(`Failed to create purchase. Code is ${err.code}, message is ${err.message}`);\\n    // dealPurchaseError实现请参见下一步\\n    this.dealPurchaseError(err);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]发起购买",
        "parent_text": "  [h2]发起购买 用户发起购买时，应用客户端向IAP Kit发送createPurchase请求来拉起IAP Kit收银台。发起请求时，需在请求参数PurchaseParameter中携带此前已在华为AppGallery Connect网站上配置并生效的商品ID，并指定productType为NONRENEWABLE。 如需单次购买多个商品，可在PurchaseParameter中拼接quantity参数，quantity取值范围1-10。     开发过程中易出现频繁调用接口的现象，建议控制接口调用频度，具体可参见1001860004 接口访问过频。    ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section7929044255\\\"'> <a name='\\\"section7929044255\\\"'></a><a name='\\\"section7929044255\\\"'></a> <h4>[h2]发起购买</h4> <p>用户发起购买时，应用客户端向IAP Kit发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section18798154545516\\\"' target='\\\"_blank\\\"'>createPurchase</a>请求来拉起IAP Kit收银台。发起请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1340120344598\\\"' target='\\\"_blank\\\"'>PurchaseParameter</a>中携带此前已在华为<a href='\\\"https://developer.huawei.com/consumer/cn/service/josp/agc/index.html\\\"' target='\\\"_blank\\\"'>AppGallery Connect</a>网站上配置并生效的商品ID，并指定productType为NONRENEWABLE。</p> <p>如需单次购买多个商品，可在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section1340120344598\\\"' target='\\\"_blank\\\"'>PurchaseParameter</a>中拼接quantity参数，quantity取值范围1-10。</p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120123.72672556472749210880909825193168:50001231000000:2800:D4359A713C319E9384534F4F1CCF089D17D0BA6B17C5681A140D0B0579714871.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>开发过程中易出现频繁调用接口的现象，建议控制接口调用频度，具体可参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-error-code#section10919174355114\\\"' target='\\\"_blank\\\"'>1001860004 接口访问过频</a>。</p> </div> </div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-nonrenewable.html"
    },
    {
        "id": 1418,
        "pre": "import { iap } from '@kit.IAPKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n// JWTUtil为自定义类，可参见示例代码\\nimport { JWTUtil } from '../common/JWTUtil';\\n\\ndealPurchaseResult(result: iap.CreatePurchaseResult) {\\n  const jwsPurchaseOrder: string = JSON.parse(result.purchaseData).jwsPurchaseOrder;\\n  if (!jwsPurchaseOrder) {\\n    return;\\n  }\\n  // 对jwsPurchaseOrder进行解码验签\\n  const purchaseStr = JWTUtil.decodeJwtObj(jwsPurchaseOrder);\\n  // 需自定义PurchaseOrderPayload类，包含的信息请参见PurchaseOrderPayload\\n  const purchaseOrderPayload = JSON.parse(purchaseStr) as PurchaseOrderPayload;\\n  // 处理发货\\n  // ...\\n  // 发货成功后向IAP Kit发送finishPurchase请求，确认发货，完成购买\\n  // finishPurchase请求的参数来源于purchaseOrderPayload\\n  this.finishPurchase(purchaseOrderPayload);\\n}\\n\\n/**\\n * 确认发货，完成购买\\n *\\n * @param purchaseOrder 订单信息，来源于购买请求\\n */\\nfinishPurchase(purchaseOrder: PurchaseOrderPayload) {\\n  const finishPurchaseParam: iap.FinishPurchaseParameter = {\\n    productType: Number(purchaseOrder.productType),\\n    purchaseToken: purchaseOrder.purchaseToken,\\n    purchaseOrderId: purchaseOrder.purchaseOrderId\\n  };\\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  iap.finishPurchase(context, finishPurchaseParam).then(() => {\\n    // 请求成功\\n    console.info('Succeeded in finishing purchase.');\\n  }).catch((err: BusinessError) => {\\n    // 请求失败\\n    console.error(`Failed to finish purchase. Code is ${err.code}, message is ${err.message}`);\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "完成购买。发放权益后，应用客户端需要发送finishPurchase请求确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发送finishPurchase请求时，需在请求参数FinishPurchaseParameter中携带PurchaseOrderPayload中的productType、purchaseToken、purchaseOrderId。 应用成功执行此步骤后，IAP服务器会将相应商品标记为已发货状态。对于非续期订阅商品，IAP服务器会将相应商品重新设置为可购买状态，用户即可再次购买该商品。 ",
        "import_module": null,
        "parent": "<li>完成购买。<p>发放权益后，应用客户端需要发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>请求确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发送<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section124751324135814\\\"' target='\\\"_blank\\\"'>finishPurchase</a>请求时，需在请求参数<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-iap#section103714142118\\\"' target='\\\"_blank\\\"'>FinishPurchaseParameter</a>中携带<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/iap-data-model#section260562820380\\\"' target='\\\"_blank\\\"'>PurchaseOrderPayload</a>中的productType、purchaseToken、purchaseOrderId。</p> <p>应用成功执行此步骤后，IAP服务器会将相应商品标记为已发货状态。对于非续期订阅商品，IAP服务器会将相应商品重新设置为可购买状态，用户即可再次购买该商品。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/iap-integrate-nonrenewable.html"
    },
    {
        "id": 1419,
        "pre": "import { authentication } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { util } from '@kit.ArkTS';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入authentication模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-authentication\\\"' target='\\\"_blank\\\"'>authentication</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-unionid-login-api.html"
    },
    {
        "id": 1420,
        "pre": "export NODE_HOME=${COMMANDLINE_TOOL_DIR}/tool/node\\nexport PATH=$PATH:$NODE_HOME/",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "配置Node.js环境变量。 ",
        "import_module": null,
        "parent": "<li id='\\\"li158621113191116\\\"'><span>配置Node.js环境变量。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-command-line-building-app.html"
    },
    {
        "id": 1421,
        "pre": "export HDC_HOME=${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains\\nexport PATH=$PATH:$HDC_HOME",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        hdc工具存放路径示例：${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains。         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129061__p16824102617278\\\"'>        hdc工具存放路径示例：${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains。         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-command-line-building-app.html"
    },
    {
        "id": 1422,
        "pre": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "添加hvigorw路径到环境变量，指令如下。 ",
        "import_module": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "parent": "<li id='\\\"li62711152162216\\\"'><span>添加hvigorw路径到环境变量，指令如下。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-command-line-building-app.html"
    },
    {
        "id": 1423,
        "pre": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "添加ohpm路径到环境变量，指令如下。 ",
        "import_module": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "parent": "<li id='\\\"li161033210312\\\"'><span>添加ohpm路径到环境变量，指令如下。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-command-line-building-app.html"
    },
    {
        "id": 1424,
        "pre": "# 切换到指定目录$1并执行ohpm install指令\\nfunction ohpm_install() {     \\n    cd $1              # $1：函数第一个参数, 必须是路径     \\n    ohpm install --all # 安装所有依赖\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "定义ohpm安装函数，示例如下。 ",
        "import_module": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "parent": "<li id='\\\"li15623648132113\\\"'><span>定义ohpm安装函数，示例如下。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-command-line-building-app.html"
    },
    {
        "id": 1425,
        "pre": "# 将打包好的hap包推送至设备中\\nhdc file send \\\"{PROJECT_PATH}/entry/build/default/outputs/default/entry-default-signed.hap\\\" \\\"data/local/tmp/entry-default-signed.hap\\\"\\n# 安装hap包\\nhdc shell bm install -p \\\"data/local/tmp/entry-default-signed.hap\\\"\\n# 删除hap包\\nhdc shell rm -rf \\\"data/local/tmp/entry-default-signed.hap\\\"",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      推送HAP的命令如下：       ",
        "import_module": "export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH",
        "parent": "<div class='\\\"p\\\"' id='\\\"ZH-CN_TOPIC_0000002202129061__p132971711522\\\"'>      推送HAP的命令如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-command-line-building-app.html"
    },
    {
        "id": 1426,
        "pre": "import { UIAbility } from '@kit.AbilityKit';\\nimport { pushService } from '@kit.PushKit';\\nimport { window } from '@kit.ArkUI';\\nimport { voipCall } from '@kit.CallServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { image } from '@kit.ImageKit';\\nimport { resourceManager } from '@kit.LocalizationKit';\\nimport { TimeoutUtil } from '../utils/TimeoutUtil';\\nimport { VoipCallUtil } from '../utils/VoipCallUtil';\\nimport { CalleeUtil } from '../utils/CalleeUtil';\\n\\n// 定义端侧从云侧下发的消息中解析场景类型的字段，例如：端侧定义scene字段，此时从云侧传递extraData时携带scene字段，可决定是音频呼叫或视频呼叫\\ninterface VoipScene {\\n  scene: string;\\n}\\n\\ninterface Content {\\n  data: string;\\n  header: string;\\n  callId: string;\\n}\\n\\nexport default class PushMessageAbility extends UIAbility {\\n  onCreate(): void {\\n    try {\\n      pushService.receiveMessage('VoIP', this, (data) => {\\n        // process message，并建议对Callback进行try-catch\\n        try {\\n          hilog.info(0x0000, 'testTag', ` VOIP get message:${JSON.stringify(data)}`);\\n          this.processVoIPMainMsg(data.data);\\n        } catch (error) {\\n          hilog.error(0x0000, 'testTag', 'Failed to process data: %{public}d %{public}s', error.code, error.message);\\n        }\\n      });\\n      hilog.info(0x0000, 'testTag', 'Succeeded in registering VoIP.');\\n    } catch (e) {\\n      hilog.info(0x0000, 'testTag', `Failed to register VOIP, error: ${e.code}, ${e.message}.`);\\n    }\\n  }\\n  private async processVoIPMainMsg(data: string): Promise<void> {\\n    hilog.info(0x0000, 'testTag', 'processVoIPMainMsg');\\n    let content: Content = JSON.parse(data);\\n    let scene: VoipScene = JSON.parse(content.data);\\n    let callId: string = content.callId;\\n    hilog.info(0x0000, 'testTag', `callId: ${callId}.`);\\n    hilog.info(0x0000, 'testTag', `scene: ${scene}.`);\\n    if (callId) {\\n      AppStorage.setOrCreate('close', false);\\n      voipCall.on('voipCallUiEvent', async (event) => {\\n        hilog.info(0x0000, 'testTag', `DemoPushMessageAbility voipCallUiEvent: ${JSON.stringify(event)}.`);\\n        TimeoutUtil.stop();\\n        switch (event.voipCallUiEvent) {\\n          case voipCall.VoipCallUiEvent.VOIP_CALL_EVENT_VOICE_ANSWER:\\n          case voipCall.VoipCallUiEvent.VOIP_CALL_EVENT_VIDEO_ANSWER:\\n            VoipCallUtil.reportCallStateChange(voipCall.VoipCallState.VOIP_CALL_STATE_ACTIVE);\\n            AppStorage.setOrCreate('answered', true);\\n            break;\\n          case voipCall.VoipCallUiEvent.VOIP_CALL_EVENT_REJECT:\\n          case voipCall.VoipCallUiEvent.VOIP_CALL_EVENT_HANGUP:\\n            CalleeUtil.close();\\n            break;\\n          default: {\\n            break;\\n          }\\n        }\\n      })\\n      const resourceMgr : resourceManager.ResourceManager = this.context.resourceManager;\\n      // example.png表示用户头像，取值为“/resources/rawfile”路径下的文件名\\n      const fileData : Uint8Array = await resourceMgr.getRawFileContent('example.png');\\n      const buffer = fileData.buffer;\\n      const imageSource : image.ImageSource = image.createImageSource(buffer);\\n      const pixelMap : image.PixelMap = await imageSource.createPixelMap();\\n      if (pixelMap) {\\n        pixelMap.getImageInfo((err, imageInfo) => {\\n          if (imageInfo) {\\n            hilog.info(0x0000, 'testTag', `DemoPushMessageAbility imageInfo: ${imageInfo.size.width} * ${imageInfo.size.height}.`);\\n          }\\n        });\\n      }\\n      // 定义应用内通话时传入的数据。注意，voipCallType.scene为您自定义的场景类型字段，从云侧推送消息时，请注意与端侧取值保持一致\\n      let call: voipCall.VoipCallAttribute = {\\n        callId: callId,\\n        voipCallType: scene?.scene === 'video' ? voipCall.VoipCallType.VOIP_CALL_VIDEO : voipCall.VoipCallType.VOIP_CALL_VOICE,\\n        userName: 'push',\\n        userProfile: pixelMap,\\n        abilityName: 'PushMessageAbility',\\n        voipCallState: voipCall.VoipCallState.VOIP_CALL_STATE_RINGING\\n      };\\n      try {\\n        let error = await voipCall.reportIncomingCall(call);\\n        if (error) {\\n          hilog.info(0x0000, 'testTag', ` PushMessageAbility reportIncomingCall result: ${error}.`);\\n          let err: voipCall.ErrorReason = error as voipCall.ErrorReason;\\n          if (err !== voipCall.ErrorReason.ERROR_NONE) {\\n            hilog.info(0x0000, 'testTag', `PushMessageAbility reportIncomingCall failed: ${error}.`);\\n            return;\\n          }\\n        }\\n        VoipCallUtil.init(callId);\\n      } catch (e) {\\n        hilog.info(0x0000, 'testTag', ` PushMessageAbility reportIncomingCall exception: ${e}.`);\\n      }\\n    }\\n    hilog.info(0x0000, 'testTag', `processVoIPMainMsg end.`);\\n  }\\n  onWindowStageCreate(windowStage: window.WindowStage): void {\\n    hilog.info(0x0000, 'testTag', `PushMessageAbility onWindowStageCreate.`);\\n    windowStage.loadContent('pages/CalleePage');\\n  }\\n  onDestroy(): void {\\n    hilog.info(0x0000, 'testTag', 'PushMessageAbility onDestroy.');\\n  }\\n}",
        "type": "Reference",
        "function_call": "async reportCallStateChange(callState: voipCall.VoipCallState): Promise",
        "function_name": null,
        "parent_text": "在您的工程内创建一个UIAbility类型的组件，如PushMessageAbility.ets（在项目工程的src/main/ets/entryability目录下），负责处理应用内通话消息的主流程，并完成onCreate()、onWindowStageCreate()、onDestroy()方法的覆写，代码示例如下： CalleeUtil.ets（在项目工程的src/main/ets/utils目录下），处理应用内通话挂断，代码示例如下： import { router } from '@kit.ArkUI';\\nimport { voipCall } from '@kit.CallServiceKit';\\nimport { VoipCallUtil } from './VoipCallUtil';\\nimport { TimeoutUtil } from './TimeoutUtil';\\n\\nexport class CalleeUtil {\\n  static close(needBack = false): void {\\n    if (needBack) {\\n      router.back();\\n    }\\n    TimeoutUtil.stop();\\n    VoipCallUtil.reportCallStateChange(voipCall.VoipCallState.VOIP_CALL_STATE_DISCONNECTED);\\n    voipCall.off('voipCallUiEvent');\\n  }\\n} TimeoutUtil.ets（在项目工程的src/main/ets/utils目录下），处理应用内通话连接超时，代码示例如下： import { CalleeUtil } from './CalleeUtil';\\n\\nexport class TimeoutUtil {\\n  static timeout: number | undefined;\\n\\n  static start(): void {\\n    // 如果30秒内没有接听或挂断，连接将会超时\\n    TimeoutUtil.timeout = setTimeout(() => {\\n      CalleeUtil.close();\\n    }, 30_000);\\n  }\\n\\n  static stop(): void {\\n    if (TimeoutUtil.timeout !== undefined) {\\n      clearTimeout(TimeoutUtil.timeout);\\n      TimeoutUtil.timeout = undefined;\\n    }\\n  }\\n} VoipCallUtil.ets（在项目工程的src/main/ets/utils目录下），处理应用内通话状态变更，代码示例如下： import { voipCall } from '@kit.CallServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nexport class VoipCallUtil {\\n  static callId: string | undefined;\\n\\n  static init(callId: string) {\\n    VoipCallUtil.callId = callId;\\n  }\\n\\n  static async reportCallStateChange(callState: voipCall.VoipCallState): Promise<void> {\\n    if (VoipCallUtil.callId) {\\n      await voipCall.reportCallStateChange(VoipCallUtil.callId, callState);\\n      if (callState === voipCall.VoipCallState.VOIP_CALL_STATE_DISCONNECTED) {\\n        hilog.info(0x0000, 'testTag', 'Call end, reset callId');\\n        VoipCallUtil.callId = undefined;\\n      }\\n    } else {\\n      hilog.info(0x0000, 'testTag', 'CallId is undefined');\\n    }\\n  }\\n}     需要在项目工程的src/main/resources/rawfile目录下添加example.png，表示来电时的用户头像。    在receiveMessage()回调中接收应用内通话消息，应用提前和服务器建连，并调用voipCall.on()接口注册监听通话状态回调。用户点击接听或者拒绝接听之后，系统会通过应用注册的事件监听通话状态回调结果。 应用需要在10秒内调用voipCall.reportIncomingCall()接口上报通话来电状态，调用完成之后，系统会弹出应用内通话横幅通知。 应用内通话有三种回调状态，分别为：接听状态、拒绝状态和挂断状态。          在接听状态回调中，应用在建立连接成功之后，需要调用voipCall.reportCallStateChange()接口上报通话激活状态。 在拒绝接听状态回调中，应用断开和服务器的连接之后，需要调用voipCall.reportCallStateChange()接口上报通话拒绝状态。 在应用进行应用内通话的同时，若运营商来电，会弹出运营商来电接听界面，用户点击接听运营商来电之后，会回调应用内通话挂断状态，在回调方法中应用需要自行断开和服务器的连接，并调用voipCall.reportCallStateChange()接口上报通话断开状态。  有关应用内通话回调状态的更多信息，详情请参见Call Service Kit简介。  ",
        "import_module": null,
        "parent": "<li><span>在您的工程内创建一个UIAbility类型的组件，如PushMessageAbility.ets（在项目工程的<strong>src/main/ets/entryability</strong>目录下），负责处理应用内通话消息的主流程，并完成<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityoncreate\\\"' target='\\\"_blank\\\"'>onCreate</a>()、<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityonwindowstagecreate\\\"' target='\\\"_blank\\\"'>onWindowStageCreate</a>()、<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/js-apis-app-ability-uiability#uiabilityondestroy\\\"' target='\\\"_blank\\\"'>onDestroy</a>()方法的覆写，代码示例如下：</span><p></p> <p>CalleeUtil.ets（在项目工程的<strong>src/main/ets/utils</strong>目录下），处理应用内通话挂断，代码示例如下：</p> <pre class='\\\"typescript\\\"'>import { router } from '@kit.ArkUI';\\nimport { voipCall } from '@kit.CallServiceKit';\\nimport { VoipCallUtil } from './VoipCallUtil';\\nimport { TimeoutUtil } from './TimeoutUtil';\\n\\nexport class CalleeUtil {\\n  static close(needBack = false): void {\\n    if (needBack) {\\n      router.back();\\n    }\\n    TimeoutUtil.stop();\\n    VoipCallUtil.reportCallStateChange(voipCall.VoipCallState.VOIP_CALL_STATE_DISCONNECTED);\\n    voipCall.off('voipCallUiEvent');\\n  }\\n}</pre> <p>TimeoutUtil.ets（在项目工程的<strong>src/main/ets/utils</strong>目录下），处理应用内通话连接超时，代码示例如下：</p> <pre class='\\\"typescript\\\"'>import { CalleeUtil } from './CalleeUtil';\\n\\nexport class TimeoutUtil {\\n  static timeout: number | undefined;\\n\\n  static start(): void {\\n    // 如果30秒内没有接听或挂断，连接将会超时\\n    TimeoutUtil.timeout = setTimeout(() =&gt; {\\n      CalleeUtil.close();\\n    }, 30_000);\\n  }\\n\\n  static stop(): void {\\n    if (TimeoutUtil.timeout !== undefined) {\\n      clearTimeout(TimeoutUtil.timeout);\\n      TimeoutUtil.timeout = undefined;\\n    }\\n  }\\n}</pre> <p>VoipCallUtil.ets（在项目工程的<strong>src/main/ets/utils</strong>目录下），处理应用内通话状态变更，代码示例如下：</p> <pre class='\\\"typescript\\\"'>import { voipCall } from '@kit.CallServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\nexport class VoipCallUtil {\\n  static callId: string | undefined;\\n\\n  static init(callId: string) {\\n    VoipCallUtil.callId = callId;\\n  }\\n\\n  static async reportCallStateChange(callState: voipCall.VoipCallState): Promise&lt;void&gt; {\\n    if (VoipCallUtil.callId) {\\n      await voipCall.reportCallStateChange(VoipCallUtil.callId, callState);\\n      if (callState === voipCall.VoipCallState.VOIP_CALL_STATE_DISCONNECTED) {\\n        hilog.info(0x0000, 'testTag', 'Call end, reset callId');\\n        VoipCallUtil.callId = undefined;\\n      }\\n    } else {\\n      hilog.info(0x0000, 'testTag', 'CallId is undefined');\\n    }\\n  }\\n}</pre> <div class='\\\"notice\\\"'> <span class='\\\"noticetitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120216.79661797253537630719044288143991:50001231000000:2800:32F4500F861E4C9E0EE49647D141E66F486E1D77C0AACC01F93AC9112AA4F0E0.png\\\"'/> </span> <div class='\\\"noticebody\\\"'> <p>需要在项目工程的src/main/resources/rawfile目录下添加example.png，表示来电时的用户头像。</p> </div> </div> <ul> <li>在<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/push-pushservice#section111121842145313\\\"' target='\\\"_blank\\\"'>receiveMessage</a>()回调中接收应用内通话消息，应用提前和服务器建连，并调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/call-voipcall#section7587131203319\\\"' target='\\\"_blank\\\"'>voipCall.on</a>()接口注册监听通话状态回调。用户点击接听或者拒绝接听之后，系统会通过应用注册的事件监听通话状态回调结果。</li> <li>应用需要在10秒内调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/call-voipcall#section13177019143216\\\"' target='\\\"_blank\\\"'>voipCall.reportIncomingCall</a>()接口上报通话来电状态，调用完成之后，系统会弹出应用内通话横幅通知。</li> <li>应用内通话有三种回调状态，分别为：接听状态、拒绝状态和挂断状态。         <ul> <li>在接听状态回调中，应用在建立连接成功之后，需要调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/call-voipcall#section491515915329\\\"' target='\\\"_blank\\\"'>voipCall.reportCallStateChange</a>()接口上报通话激活状态。</li> <li>在拒绝接听状态回调中，应用断开和服务器的连接之后，需要调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/call-voipcall#section491515915329\\\"' target='\\\"_blank\\\"'>voipCall.reportCallStateChange</a>()接口上报通话拒绝状态。</li> <li>在应用进行应用内通话的同时，若运营商来电，会弹出运营商来电接听界面，用户点击接听运营商来电之后，会回调应用内通话挂断状态，在回调方法中应用需要自行断开和服务器的连接，并调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/call-voipcall#section491515915329\\\"' target='\\\"_blank\\\"'>voipCall.reportCallStateChange</a>()接口上报通话断开状态。</li> </ul></li> <li>有关应用内通话回调状态的更多信息，详情请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/call-introduction\\\"' target='\\\"_blank\\\"'>Call Service Kit简介</a>。</li> </ul> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/push-voip.html"
    },
    {
        "id": 1427,
        "pre": "import { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\nimport { skeletonDetection, visionBase } from '@kit.CoreVisionKit';\\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private imageSource: image.ImageSource | undefined = undefined;\\n  @State chooseImage: PixelMap | undefined = undefined\\n  @State dataValues: string = ''\\n\\n  build() {\\n    Column() {\\n      Image(this.chooseImage)\\n        .objectFit(ImageFit.Fill)\\n        .height('60%')\\n\\n      Text(this.dataValues)\\n        .copyOption(CopyOptions.LocalDevice)\\n        .height('15%')\\n        .margin(10)\\n        .width('60%')\\n\\n      Button('选择图片')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(() => {\\n          // 拉起图库\\n          this.selectImage()\\n        })\\n\\n      Button('开始骨骼点识别')\\n        .type(ButtonType.Capsule)\\n        .fontColor(Color.White)\\n        .alignSelf(ItemAlign.Center)\\n        .width('80%')\\n        .margin(10)\\n        .onClick(async () => {\\n          if(!this.chooseImage) {\\n            hilog.error(0x0000, 'skeletonDetectSample', `Failed to choose image. chooseImage: ${this.chooseImage}`);\\n            return;\\n          }\\n          // 调用骨骼点识别接口\\n          let request: visionBase.Request = {\\n            inputData: { pixelMap: this.chooseImage }\\n          };\\n          let data: skeletonDetection.SkeletonDetectionResponse = await (await skeletonDetection.SkeletonDetector.create()).process(request);\\n          let poseJson = JSON.stringify(data);\\n          hilog.info(0x0000, 'skeletonDetectSample', `Succeeded in face detect：${poseJson}`);\\n          this.dataValues = poseJson;\\n        })\\n    }\\n    .width('100%')\\n    .height('100%')\\n    .justifyContent(FlexAlign.Center)\\n  }\\n\\n  private async selectImage() {\\n    let uri = await this.openPhoto()\\n    if (uri === undefined) {\\n      hilog.error(0x0000, 'skeletonDetectSample', \\\"Failed to defined uri.\\\");\\n    }\\n    this.loadImage(uri)\\n  }\\n\\n  private openPhoto(): Promise<string> {\\n    return new Promise<string>((resolve, reject) => {\\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\\n      photoPicker.select({\\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE, maxSelectNumber: 1\\n      }).then(res => {\\n        resolve(res.photoUris[0])\\n      }).catch((err: BusinessError) => {\\n        hilog.error(0x0000, 'skeletonDetectSample', `Failed to get photo image uri. code：${err.code}，message：${err.message}`);\\n        reject('')\\n      })\\n    })\\n  }\\n\\n  private loadImage(name: string) {\\n    setTimeout(async () => {\\n      let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\\n      this.imageSource = image.createImageSource(fileSource.fd);\\n      this.chooseImage = await this.imageSource.createPixelMap();\\n    }, 100)\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "开发实例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1564831315485\\\"'><a name='\\\"section1564831315485\\\"'></a><a name='\\\"section1564831315485\\\"'></a><h4>开发实例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/core-vision-skeleton-detection.html"
    },
    {
        "id": 1428,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-namespace-keyword\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-namespace-keyword.html"
    },
    {
        "id": 1429,
        "pre": "export namespace Example {}",
        "type": "Import",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": "export namespace Example {}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-namespace-keyword.html"
    },
    {
        "id": 1430,
        "pre": "export module Example {}",
        "type": "Import",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": "export module Example {}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-namespace-keyword.html"
    },
    {
        "id": 1431,
        "pre": "{\\n  \\\"layered-image\\\":\\n  {\\n    \\\"background\\\" : \\\"$media:background\\\",\\n    \\\"foreground\\\" : \\\"$media:foreground\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "设置分层图标。将前景资源和背景资源，放到entry\\\\src\\\\main\\\\resources\\\\base\\\\media下，在该目录创建一个json文件（例如：drawable.json），内容为  ",
        "import_module": null,
        "parent": "<li><span>设置分层图标。</span><p></p><p>将前景资源和背景资源，放到entry\\\\src\\\\main\\\\resources\\\\base\\\\media下，在该目录创建一个json文件（例如：drawable.json），内容为</p>  <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ui-design-layered-process.html"
    },
    {
        "id": 1432,
        "pre": "import { LayeredDrawableDescriptor } from '@kit.ArkUI';\\nimport { hdsDrawable } from '@kit.UIDesignKit';\\nimport { image } from '@kit.ImageKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { resourceManager } from '@kit.LocalizationKit';\\n\\n@Entry\\n@Component\\nstruct Index{\\n  bundleName: string = 'com.example.uidesignkit';\\n  resManager: resourceManager.ResourceManager | undefined = undefined;\\n  layeredDrawableDescriptor: LayeredDrawableDescriptor | undefined = undefined;\\n  @State layeredIconsResult: Array<hdsDrawable.ProcessedIcon> = [];\\n\\n  build() {\\n    Column() {\\n      Column() {\\n        Text('getHdsLayeredIcon')\\n          .fontWeight(FontWeight.Bold)\\n          .fontSize(16)\\n          .margin(5)\\n\\n        Image(this.getHdsLayeredIcon())\\n          .width(48)\\n          .height(48)\\n      }\\n      .margin(20)\\n\\n      Text('getHdsLayeredIcons')\\n        .fontWeight(FontWeight.Bold)\\n        .fontSize(16)\\n        .margin(5)\\n\\n      List() {\\n        ForEach(this.layeredIconsResult,\\n          (item: hdsDrawable.ProcessedIcon, index?: number) => {\\n            ListItem() {\\n              Column() {\\n                Text(item.bundleName)\\n                  .fontWeight(FontWeight.Medium)\\n                  .fontSize(16)\\n                  .margin(5)\\n\\n                Image(item.pixelMap)\\n                  .width(48)\\n                  .height(48)\\n              }\\n              .margin(15)\\n            }\\n            .width('100%')\\n          }, (item: string) => item.toString())\\n      }\\n      .scrollBar(BarState.On)\\n      .height('60%')\\n    }\\n    .height('100%')\\n    .width('100%')\\n  }\\n\\n  aboutToAppear(): void {\\n    this.resManager = getContext().resourceManager;\\n    if (!this.resManager) {\\n      return;\\n    }\\n    this.layeredDrawableDescriptor = (this.resManager.getDrawableDescriptor($r('app.media.drawable')\\n      .id)) as LayeredDrawableDescriptor;\\n    this.getHdsLayeredIcons();\\n  }\\n\\n  private getHdsLayeredIcon(): image.PixelMap | null {\\n    try {\\n      return hdsDrawable.getHdsLayeredIcon(this.bundleName, this.layeredDrawableDescriptor, 48, true);\\n    } catch (err) {\\n      let message = (err as BusinessError).message;\\n      let code = (err as BusinessError).code;\\n      console.error(`getHdsLayeredIcon failed, code: ${code}, message: ${message}`);\\n      return null;\\n    }\\n  }\\n\\n  private getHdsLayeredIcons(): void {\\n    if (!this.layeredDrawableDescriptor) {\\n      console.error(`getHdsLayeredIcons layeredDrawableDescriptor is undefined.`);\\n      return;\\n    }\\n\\n    let options: hdsDrawable.Options = {\\n      size: 48,\\n      hasBorder: true,\\n      parallelNumber: 4\\n    };\\n\\n    let layeredIcons: Array<hdsDrawable.LayeredIcon> = [];\\n    for (let i = 0; i < 10; i++) {\\n      layeredIcons.push({\\n        bundleName: `${this.bundleName}-${i}`,\\n        layeredDrawableDescriptor: this.layeredDrawableDescriptor\\n      });\\n    }\\n\\n    try {\\n      hdsDrawable.getHdsLayeredIcons(layeredIcons, options)\\n        .then((data: Array<hdsDrawable.ProcessedIcon>) => {\\n          console.info(`getHdsLayeredIcons data size: ${data.length}`);\\n          this.layeredIconsResult = data;\\n        })\\n        .catch((err: BusinessError) => {\\n          console.error(`getHdsLayeredIcons return error, code: ${err.code}, msg: ${err.message}`);\\n        });\\n    } catch (err) {\\n      let message = (err as BusinessError).message;\\n      let code = (err as BusinessError).code;\\n      console.error(`getHdsLayeredIcons failed, code: ${code}, message: ${message}`);\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "开发实例",
        "parent_text": "  开发实例  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1817964534718\\\"'> <a name='\\\"section1817964534718\\\"'></a><a name='\\\"section1817964534718\\\"'></a> <h4>开发实例</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ui-design-layered-process.html"
    },
    {
        "id": 1433,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unnecessary-type-assertion\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-type-assertion.html"
    },
    {
        "id": 1434,
        "pre": "import { navigationInfoMgr } from '@kit.CarKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": "import { navigationInfoMgr } from '@kit.CarKit';",
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-set-sys-navi-data.html"
    },
    {
        "id": 1435,
        "pre": "import { pdfService, pdfViewManager } from '@kit.PDFKit';\\nimport { image } from '@kit.ImageKit';\\nimport { fileIo as fs } from '@kit.CoreFileKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\\n  private context = getContext() as common.UIAbilityContext;\\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    (async () => {\\n      this.loadResult = await this.controller.loadDocument(filePath);\\n    })()\\n  }\\n\\n  // 将 pixelMap 转成图片格式\\n  pixelMap2Buffer(pixelMap: image.PixelMap): Promise<ArrayBuffer> {\\n    return new Promise((resolve, reject) => {\\n      /**\\n       设置打包参数\\n       format：图片打包格式，只支持 jpg 和 webp\\n       quality：JPEG 编码输出图片质量\\n       bufferSize：图片大小，默认 10M\\n       */\\n      let packOpts: image.PackingOption = { format: 'image/jpeg', quality: 98 }\\n      // 创建ImagePacker实例\\n      const imagePackerApi = image.createImagePacker()\\n      imagePackerApi.packToData(pixelMap, packOpts).then((buffer: ArrayBuffer) => {\\n        resolve(buffer)\\n      }).catch((err: BusinessError) => {\\n        reject()\\n      })\\n    })\\n  }\\n\\n  build() {\\n    Column() {\\n      // 转换为图片并保存到应用沙箱\\n      Button('getPagePixelMap').onClick(async () => {\\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let pixmap: image.PixelMap = await this.controller.getPagePixelMap(0, true);\\n          if (!pixmap) {\\n            return\\n          }\\n          const imgBuffer = await this.pixelMap2Buffer(pixmap)\\n          const file =\\n            fs.openSync(this.context.filesDir + `/${Date.now()}.png`, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\\n          await fs.write(file.fd, imgBuffer);\\n          // 关闭文件\\n          await fs.close(file.fd)\\n        }\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法，加载PDF文档。 调用getPagePixelMap方法，获取image.PixelMap对象。 将image.PixelMap转化为二进制图片文件并保存。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section979953310306\\\"'> <a name='\\\"section979953310306\\\"'></a><a name='\\\"section979953310306\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法，加载PDF文档。</li> <li>调用getPagePixelMap方法，获取image.PixelMap对象。</li> <li>将image.PixelMap转化为二进制图片文件并保存。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-pdfview-page2img.html"
    },
    {
        "id": 1436,
        "pre": "import { pdfService, pdfViewManager, PdfView } from '@kit.PDFKit'\\nimport { common } from '@kit.AbilityKit';\\nimport { fileIo } from '@kit.CoreFileKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\\n\\n  aboutToAppear(): void {\\n    let context = getContext() as common.UIAbilityContext;\\n    let dir: string = context.filesDir\\n    // 确保在工程目录src/main/resources/rawfile里存在input.pdf文档\\n    let filePath: string = dir + '/input.pdf';\\n    let res = fileIo.accessSync(filePath);\\n    if (!res) {\\n      let content: Uint8Array = context.resourceManager.getRawFileContentSync('rawfile/input.pdf');\\n      let fdSand =\\n        fileIo.openSync(filePath, fileIo.OpenMode.WRITE_ONLY | fileIo.OpenMode.CREATE | fileIo.OpenMode.TRUNC);\\n      fileIo.writeSync(fdSand.fd, content.buffer);\\n      fileIo.closeSync(fdSand.fd);\\n    }\\n    (async () => {\\n      // 该监听方法只能在文档加载前调用一次\\n      this.controller.registerPageCountChangedListener((pageCount: number) => {\\n        hilog.info(0x0000, 'registerPageCountChanged-', pageCount.toString());\\n      });\\n      let loadResult1: pdfService.ParseResult = await this.controller.loadDocument(filePath);\\n      // 注意：这里刚加载文档，请不要在这里立即设置PDF文档的预览方式\\n    })()\\n  }\\n\\n  build() {\\n    Row() {\\n      PdfView({\\n        controller: this.controller,\\n        pageFit: pdfService.PageFit.FIT_WIDTH,\\n        showScroll: true\\n      })\\n        .id('pdfview_app_view')\\n        .layoutWeight(1);\\n    }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  导入相关模块。 以下示例代码中以预览“input.pdf”文件名为例，此时需要确保在工程目录“src/main/resources/rawfile”里存在input.pdf文档，并且拷贝input.pdf文档到沙箱目录。 调用loadDocument方法，加载PDF文档。 调用PdfView预览组件，渲染显示。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section979953310306\\\"'> <a name='\\\"section979953310306\\\"'></a><a name='\\\"section979953310306\\\"'></a> <h4>示例代码</h4> <ol> <li>导入相关模块。</li> <li>以下示例代码中以预览“input.pdf”文件名为例，此时需要确保在工程目录<span class='\\\"filepath\\\"'>“src/main/resources/rawfile”</span>里存在input.pdf文档，并且拷贝input.pdf文档到沙箱目录。</li> <li>调用loadDocument方法，加载PDF文档。</li> <li>调用PdfView预览组件，渲染显示。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-pdfview-component.html"
    },
    {
        "id": 1437,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-image-async-load\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-image-async-load.html"
    },
    {
        "id": 1438,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  build() {\\n    Row() {\\n      // 本地图片4k.png\\n      Image($r('app.media.4k'))\\n        .border({ width: 1 })\\n        .borderStyle(BorderStyle.Dashed)\\n        .height(100)\\n        .width(100)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-image-async-load.html"
    },
    {
        "id": 1439,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  build() {\\n    Row() {\\n      // 本地图片4k.png\\n      Image($r('app.media.4k'))\\n        .border({ width: 1 })\\n        .borderStyle(BorderStyle.Dashed)\\n        .height(100)\\n        .width(100)\\n        .syncLoad(true)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-image-async-load.html"
    },
    {
        "id": 1440,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-grid-layout-options\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-grid-layout-options.html"
    },
    {
        "id": 1441,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Reusable\\n@Component\\nstruct TextItem {\\n  @State item: string = \\\"\\\";\\n\\n  build() {\\n    Text(this.item)\\n      .fontSize(16)\\n      .backgroundColor(0xF9CF93)\\n      .width('100%')\\n      .height(80)\\n      .textAlign(TextAlign.Center)\\n      .onClick(() => {\\n        this.item = 'click';\\n      })\\n  }\\n}\\n\\n@Entry\\n@Component\\nexport struct MyComponent{\\n  private datasource: MyDataSource = new MyDataSource();\\n  scroller: Scroller = new Scroller();\\n  private irregularData: number[] = [];\\n  layoutOptions: GridLayoutOptions = {\\n    regularSize: [1, 1],\\n    irregularIndexes: this.irregularData,\\n  };\\n\\n  aboutToAppear() {\\n    for (let i = 1; i <= 2000; i++) {\\n      this.datasource.pushData(i + '');\\n      if ((i - 1) % 4 === 0) {\\n        this.irregularData.push(i - 1);\\n      }\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 5 }) {\\n      Text('Set GridItem size using GridLayoutOptions').fontColor(0xCCCCCC).fontSize(9).width('90%')\\n      Grid(this.scroller, this.layoutOptions) {\\n        LazyForEach(this.datasource, (item: string, index: number) => {\\n          GridItem() {\\n            TextItem({ item: item })\\n          }\\n        }, (item: string) => item)\\n      }\\n      .cachedCount(1)\\n      .columnsTemplate('1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(10)\\n      .width('90%')\\n      .height('40%')\\n\\n      Button(\\\"scrollToIndex:1900\\\").onClick(() => {\\n        this.scroller.scrollToIndex(1900);\\n      })\\n    }.width('100%')\\n    .margin({ top: 5 })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-grid-layout-options.html"
    },
    {
        "id": 1442,
        "pre": "// 源码文件，请以工程实际为准\\nimport { MyDataSource } from './MyDataSource';\\n\\n@Reusable\\n@Component\\nstruct TextItem {\\n  @State item: string = \\\"\\\";\\n\\n  build() {\\n    Text(this.item)\\n      .fontSize(16)\\n      .backgroundColor(0xF9CF93)\\n      .width('100%')\\n      .height(80)\\n      .textAlign(TextAlign.Center)\\n      .onClick(() => {\\n        this.item = 'click';\\n      })\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  private datasource: MyDataSource = new MyDataSource();\\n  scroller: Scroller = new Scroller();\\n\\n  aboutToAppear() {\\n    for (let i = 1; i <= 2000; i++) {\\n      this.datasource.pushData(i + '');\\n    }\\n  }\\n\\n  build() {\\n    Column({ space: 5 }) {\\n      Text('Use columnStart and columnEnd to set the GridItem size').fontColor(0xCCCCCC).fontSize(9).width('90%')\\n      Grid(this.scroller) {\\n        LazyForEach(this.datasource, (item: string, index: number) => {\\n          if ((index % 4) === 0) {\\n            GridItem() {\\n              TextItem({ item: item })\\n            }\\n            .columnStart(0).columnEnd(2)\\n          } else {\\n            GridItem() {\\n              TextItem({ item: item })\\n            }\\n          }\\n        }, (item: string) => item)\\n      }\\n      .cachedCount(1)\\n      .columnsTemplate('1fr 1fr 1fr')\\n      .columnsGap(10)\\n      .rowsGap(10)\\n      .width('90%')\\n      .height('40%')\\n\\n      Button(\\\"scrollToIndex:1900\\\").onClick(() => {\\n        this.scroller.scrollToIndex(1900);\\n      })\\n    }.width('100%')\\n    .margin({ top: 5 })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-grid-layout-options.html"
    },
    {
        "id": 1443,
        "pre": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { expect } from '@ohos/hypium';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。 ",
        "import_module": "import { rcp } from '@kit.RemoteCommunicationKit';\\nimport { expect } from '@ohos/hypium';",
        "parent": "<li><span>导入模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/remote-communication-syncstreamreq.html"
    },
    {
        "id": 1444,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/explicit-member-accessibility\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-member-accessibility.html"
    },
    {
        "id": 1445,
        "pre": "export class Animal {\\n  private animalName: string; // Property\\n\\n  public constructor(name: string) {\\n    // Parameter property and constructor\\n    this.animalName = name;\\n  }\\n\\n  public get name(): string {\\n    // get accessor\\n    return this.animalName;\\n  }\\n\\n  public set name(value: string) {\\n    // set accessor\\n    this.animalName = value;\\n  }\\n\\n  public walk() {\\n    // method\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-member-accessibility.html"
    },
    {
        "id": 1446,
        "pre": "export class Animal {\\n  private animalName: string; // Property\\n\\n  constructor(name: string) {\\n    // Parameter property and constructor\\n    this.animalName = name;\\n  }\\n\\n  get name(): string {\\n    // get accessor\\n    return this.animalName;\\n  }\\n\\n  set name(value: string) {\\n    // set accessor\\n    this.animalName = value;\\n  }\\n\\n  walk() {\\n    // method\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_explicit-member-accessibility.html"
    },
    {
        "id": 1447,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/operator-linebreak\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_operator-linebreak.html"
    },
    {
        "id": 1448,
        "pre": "export function test(n1: number, n2: number): void {\\n  if (n1 > n2) {\\n    console.info('hello');\\n  }\\n\\n  if (n1 >\\n    n2) {\\n    console.info('hello');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_operator-linebreak.html"
    },
    {
        "id": 1449,
        "pre": "export function test(n1: number, n2: number, n3: number): void {\\n  if (n1 > n2\\n    // '||' should be placed at the end of the line.\\n    || n1 < n3) {\\n    console.info('hello');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_operator-linebreak.html"
    },
    {
        "id": 1450,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-dh\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1411143704518\\\"'><a name='\\\"section1411143704518\\\"'></a><a name='\\\"section1411143704518\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-dh.html"
    },
    {
        "id": 1451,
        "pre": "import { filePreview } from '@kit.PreviewKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li>导入相关模块。 <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/preview-filepreview.html"
    },
    {
        "id": 1452,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/start-window-icon-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-start-window-icon-check.html"
    },
    {
        "id": 1453,
        "pre": "import { smartMobilityCommon } from '@kit.CarKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入Car Kit模块。 ",
        "import_module": null,
        "parent": "<li><span>导入Car Kit模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/car-unregister-connection-listener.html"
    },
    {
        "id": 1454,
        "pre": "addEventListener(\\\"focus\\\", (event) => {});\\n\\nonfocus = (event) => {};",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "Web组件内H5元素焦点控制",
        "parent_text": "  Web组件内H5元素焦点控制  W3C标准事件focus，前端感知网页获焦    W3C标准事件blur，前端感知网页失焦  addEventListener(\\\"blur\\\", (event) => {});\\n\\nonblur = (event) => {};  W3C autofocus，表示元素应在页面加载时或其所属的 dialog 显示时被聚焦  <input name=\\\"q\\\" autofocus /> 在文档或对话框中，最多只能有一个元素具有 autofocus 属性。如果应用于多个元素，第一个元素将获得焦点。 示例： // xxx.ets\\nimport { webview } from '@kit.ArkWeb';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct WebComponent {\\n  controller: webview.WebviewController = new webview.WebviewController();\\n\\n  build() {\\n    Column() {\\n      Web({ src: $rawfile(\\\"test.html\\\"), controller: this.controller })\\n    }\\n  }\\n} // test.html\\n<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<title>test</title>\\n</head>\\n<body>\\n  <form id=\\\"form\\\">\\n    <input type=\\\"text\\\" placeholder=\\\"text input\\\" />\\n    <input type=\\\"password\\\" placeholder=\\\"password\\\" />\\n  </form>\\n</body>\\n<script>\\nconst form = document.getElementById(\\\"form\\\");\\n\\nform.addEventListener(\\n  \\\"focus\\\",\\n  (event) => {\\n    event.target.style.background = \\\"pink\\\";\\n  },\\n  true,\\n);\\n\\nform.addEventListener(\\n  \\\"blur\\\",\\n  (event) => {\\n    event.target.style.background = \\\"\\\";\\n  },\\n  true,\\n);\\n</script>\\n</html> 示例图2 Web组件内元素焦点获焦/失焦事件 通过监听W3C接口focus、blur事件，改变输入背景色。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"web组件内h5元素焦点控制\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459157__web%E7%BB%84%E4%BB%B6%E5%86%85h5%E5%85%83%E7%B4%A0%E7%84%A6%E7%82%B9%E6%8E%A7%E5%88%B6\\\"'></a><a name='\\\"web%E7%BB%84%E4%BB%B6%E5%86%85h5%E5%85%83%E7%B4%A0%E7%84%A6%E7%82%B9%E6%8E%A7%E5%88%B6\\\"'></a> <h4>Web组件内H5元素焦点控制</h4> <ul> <li>W3C标准事件focus，前端感知网页获焦</li> </ul>  <ul> <li>W3C标准事件blur，前端感知网页失焦</li> </ul> <pre class='\\\"screen\\\"'>addEventListener(\\\"blur\\\", (event) =&gt; {});\\n\\nonblur = (event) =&gt; {};</pre> <ul> <li>W3C autofocus，表示元素应在页面加载时或其所属的 dialog 显示时被聚焦</li> </ul> <pre class='\\\"screen\\\"'>&lt;input name=\\\"q\\\" autofocus /&gt;</pre> <p>在文档或对话框中，最多只能有一个元素具有 autofocus 属性。如果应用于多个元素，第一个元素将获得焦点。</p> <p><strong>示例：</strong></p> <pre class='\\\"ts\\\"'>// xxx.ets\\nimport { webview } from '@kit.ArkWeb';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct WebComponent {\\n  controller: webview.WebviewController = new webview.WebviewController();\\n\\n  build() {\\n    Column() {\\n      Web({ src: $rawfile(\\\"test.html\\\"), controller: this.controller })\\n    }\\n  }\\n}</pre> <pre class='\\\"js\\\"'>// test.html\\n&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n&lt;meta charset=\\\"utf-8\\\"&gt;\\n&lt;title&gt;test&lt;/title&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n  &lt;form id=\\\"form\\\"&gt;\\n    &lt;input type=\\\"text\\\" placeholder=\\\"text input\\\" /&gt;\\n    &lt;input type=\\\"password\\\" placeholder=\\\"password\\\" /&gt;\\n  &lt;/form&gt;\\n&lt;/body&gt;\\n&lt;script&gt;\\nconst form = document.getElementById(\\\"form\\\");\\n\\nform.addEventListener(\\n  \\\"focus\\\",\\n  (event) =&gt; {\\n    event.target.style.background = \\\"pink\\\";\\n  },\\n  true,\\n);\\n\\nform.addEventListener(\\n  \\\"blur\\\",\\n  (event) =&gt; {\\n    event.target.style.background = \\\"\\\";\\n  },\\n  true,\\n);\\n&lt;/script&gt;\\n&lt;/html&gt;</pre> <p><strong>示例图2</strong> Web组件内元素焦点获焦/失焦事件</p> <p>通过监听W3C接口focus、blur事件，改变输入背景色。</p> <p><span><img originheight='\\\"126\\\"' originwidth='\\\"648\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120456.81039151108029921659322896693107:50001231000000:2800:548236237BDC4A3A3F815B73D912B1C152F685D322FC86F77A8B523B3EF8E5C2.gif\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/web-focus.html"
    },
    {
        "id": 1455,
        "pre": "import { cloudDatabase } from '@kit.CloudFoundationKit';\\nimport { Post } from './Post';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在代码文件中引入Cloud Foundation Kit和“Post”类。 ",
        "import_module": null,
        "parent": "<li id='\\\"li20204533135519\\\"'>在代码文件中引入Cloud Foundation Kit和“Post”类。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/agc-harmonyos-clouddev-invokeclouddatabase.html"
    },
    {
        "id": 1456,
        "pre": "module.exports.myHandler = function(event, context, callback, logger)",
        "type": "Reference",
        "function_call": null,
        "function_name": "入口方法",
        "parent_text": "入口方法入口方法定义如下：  myHandler：入口方法名称。event：调用方传递的事件对象，JSON格式。具体内容请参见event对象。context：函数运行时上下文对象，封装了日志接口、回调接口、环境变量env对象等。callback：事件处理结果。logger：记录日志。 函数必须通过显式调用callback(object)将事件处理结果返回给AppGallery Connect（简称AGC），结果可以是任意对象，但必须与JSON.stringify兼容，AGC会将结果转换成JSON字符串后，返回给调用方。callback执行完成，函数即执行结束。 完整的Node.js 20.x云函数示例代码请参考函数示例。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section69815160394\\\"'><a name='\\\"section69815160394\\\"'></a><a name='\\\"zh-cn_topic_0000001658990474_section69815160394\\\"'></a><h4>入口方法</h4><p class='\\\"msobodytextfirstindent\\\"'>入口方法定义如下：</p>  <ul><li class='\\\"msobodytextfirstindent\\\"'>myHandler：入口方法名称。</li><li class='\\\"msobodytextfirstindent\\\"'>event：调用方传递的事件对象，JSON格式。具体内容请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/AppGallery-connect-Guides/agc-cloudfunction-trigger-event-0000001620581529\\\"' target='\\\"_blank\\\"'>event对象</a>。</li><li class='\\\"msobodytextfirstindent\\\"'>context：函数运行时上下文对象，封装了日志接口、回调接口、环境变量env对象等。</li><li>callback：事件处理结果。</li><li>logger：记录日志。</li></ul> <p class='\\\"msobodytextfirstindent\\\"'>函数必须通过显式调用callback(object)将事件处理结果返回给AppGallery Connect（简称AGC），结果可以是任意对象，但必须与JSON.stringify兼容，AGC会将结果转换成JSON字符串后，返回给调用方。callback执行完成，函数即执行结束。</p> <p class='\\\"msobodytextfirstindent\\\"'>完整的Node.js 20.x云函数示例代码请参考<a href='\\\"#section817193312817\\\"'>函数示例</a>。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-develop-function-nodejs.html"
    },
    {
        "id": 1457,
        "pre": "let env1 = context.env.env1;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "开发者可在代码中使用context.env.key访问环境变量，获取环境变量env1示例如下： ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>开发者可在代码中使用context.env.key访问环境变量，获取环境变量env1示例如下： </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-develop-function-nodejs.html"
    },
    {
        "id": 1458,
        "pre": "error：\\n{\\n    \\\"code\\\": xxxxxx,\\n    \\\"message\\\": \\\"xxxxxxxx\\\"\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "异常处理",
        "parent_text": "异常处理开发者可以在函数代码中捕获异常，封装成error对象返回给调用方。对于函数执行期间被平台捕获的异常，平台同样以error对象形式返回给调用方。error对象定义如下。  其中code为错误码，message为错误码的描述信息。 示例代码如下： try {\\n    logger.info(JSON.stringify(event));\\n    let result = { \\\"message\\\": \\\"success\\\" };\\n    callback(result);\\n} catch (err) {\\n    let error = {\\n        code: 400,\\n        message: err.message\\n    }\\n    callback(error);\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section109010118418\\\"'><a name='\\\"section109010118418\\\"'></a><a name='\\\"zh-cn_topic_0000001658990474_section109010118418\\\"'></a><h4>异常处理</h4><p class='\\\"msobodytextfirstindent\\\"'>开发者可以在函数代码中捕获异常，封装成error对象返回给调用方。对于函数执行期间被平台捕获的异常，平台同样以error对象形式返回给调用方。error对象定义如下。</p>  <p>其中code为错误码，message为错误码的描述信息。</p> <p class='\\\"msobodytextfirstindent\\\"'>示例代码如下：</p> <pre class='\\\"typescript\\\"'>try {\\n    logger.info(JSON.stringify(event));\\n    let result = { \\\"message\\\": \\\"success\\\" };\\n    callback(result);\\n} catch (err) {\\n    let error = {\\n        code: 400,\\n        message: err.message\\n    }\\n    callback(error);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-develop-function-nodejs.html"
    },
    {
        "id": 1459,
        "pre": "/**\\n * Describe the basic method of Cloud Functions\\n */\\n\\nlet myHandler = function(event, context, callback, logger){\\n    // example of display environment variables\\n    let env1 = context.env.env1;\\n\\n    // example of display logs\\n    logger.info(\\\"Test info log\\\");\\n    logger.warn(\\\"Test warn log\\\");\\n    logger.debug(\\\"Test debug log\\\");\\n    logger.error(\\\"Test error log\\\");\\n\\n    logger.info(\\\"--------Start-------\\\");\\n    try {\\n        let startTime = new Date().getTime();\\n        let endTime = startTime;\\n        let interval = 0;\\n        startTime = process.uptime() * 1000;\\n\\n        // print input parameters and environment variables\\n        logger.info(\\\"request: \\\" + JSON.stringify(event.request));\\n        logger.info(\\\"env1: \\\" + env1);\\n\\n        endTime = process.uptime() * 1000;\\n        interval = endTime - startTime;\\n        logger.info(\\\"intervalTime: \\\" + interval);\\n        logger.info(\\\"--------Finished-------\\\");\\n\\n        let res = new context.HTTPResponse(context.env, {\\n            \\\"res-type\\\": \\\"context.env\\\",\\n            \\\"faas-content-type\\\": \\\"json\\\",\\n        }, \\\"application/json\\\", \\\"200\\\");\\n        res.body = {\\\"intervalTime\\\": interval};\\n        callback(res);\\n    } catch (error) {\\n        logger.error(\\\"--------Error-------\\\");\\n        logger.error(\\\"error: \\\" + error);\\n        callback(error);\\n    }\\n};\\n\\nmodule.exports.myHandler = myHandler;",
        "type": "Reference",
        "function_call": "myHandler()",
        "function_name": "函数示例",
        "parent_text": "函数示例示例函数如下：  示例代码中入口方法myHandler()的返回值类型仅供参考，开发者可以根据实际需要定义。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section817193312817\\\"'><a name='\\\"section817193312817\\\"'></a><a name='\\\"zh-cn_topic_0000001658990474_section817193312817\\\"'></a><h4>函数示例</h4><p>示例函数如下：</p> <div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120056.06584325085588449793973261291823:50001231000000:2800:BDD78AF044C213F8F216B3002846D80D44CF459D99CD8A319CDECA0D09974E2D.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>示例代码中入口方法<strong>myHandler()</strong>的返回值类型仅供参考，开发者可以根据实际需要定义。</p> </div></div>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-develop-function-nodejs.html"
    },
    {
        "id": 1460,
        "pre": "import { attributionManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-developmentguide.html"
    },
    {
        "id": 1461,
        "pre": "import { attributionManager } from '@kit.AppGalleryKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。 ",
        "import_module": null,
        "parent": "<li><span>导入相关模块。</span><p></p> <p></p></li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/store-attribution-developmentguide.html"
    },
    {
        "id": 1462,
        "pre": "module.exports.prefetchData = function(event, context, callback, logger)",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]示例",
        "parent_text": "[h2]示例定义名称为prefetchData的云函数，示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section63313919126\\\"'><a name='\\\"section63313919126\\\"'></a><a name='\\\"zh-cn_topic_0000002209197493_section63313919126\\\"'></a><h4>[h2]示例</h4><p>定义名称为prefetchData的云函数，示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/cloudfoundation-prefetch-cloud-interdev.html"
    },
    {
        "id": 1463,
        "pre": "import { minorsProtection } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError, commonEventManager } from '@kit.BasicServicesKit';\\n// 以上引入的模块为当前场景的全量模块，请按照具体实现按需引入",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入minorsProtection模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-minorsprotection\\\"' target='\\\"_blank\\\"'>minorsProtection</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-appself-trun-off-minorsprotection.html"
    },
    {
        "id": 1464,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-use-local-var-to-replace-state-var\\\": \\\"warn\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-local-var-to-replace-state-var.html"
    },
    {
        "id": 1465,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State message: string = '';\\n  appendMsg(newMsg: String) {\\n      let message = this.message;\\n      message += newMsg;\\n      message += \\\";\\\";\\n      message += \\\"<br/>\\\";\\n      this.message = message;\\n  }\\n  build() {\\n    // 业务代码...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-local-var-to-replace-state-var.html"
    },
    {
        "id": 1466,
        "pre": "@Entry\\n@Component\\nstruct MyComponent {\\n  @State message: string = '';\\n  appendMsg(newMsg: String) {\\n      this.message += newMsg;\\n      this.message += \\\";\\\";\\n      this.message += \\\"<br/>\\\";\\n  }\\n  build() {\\n    // 业务代码...\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-arkui-use-local-var-to-replace-state-var.html"
    },
    {
        "id": 1467,
        "pre": "//解封装头文件\\n#include \\\"multimedia/player_framework/native_avdemuxer.h\\\"\\n\\n// 解封装解码传递信息结构体\\nstruct AudioSampleInfo {\\nstd::string audioCodecMime = \\\"\\\";\\nint32_t audioSampleForamt = 0;\\nint32_t audioSampleRate = 0; \\nint32_t audioChannelCount = 0;\\nint64_t audioChannelLayout = 0;\\nuint8_t audioCodecConfig[100] = {0};\\nsize_t audioCodecSize = 0;\\n};\\n\\nAudioSampleInfo  info;",
        "type": "Reference",
        "function_call": null,
        "function_name": "添加头文件",
        "parent_text": "添加头文件 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14548942143912\\\"'><a name='\\\"section14548942143912\\\"'></a><a name='\\\"section14548942143912\\\"'></a><h4>添加头文件</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/audiovivid-avdemuxer.html"
    },
    {
        "id": 1468,
        "pre": "// ts code获取fd和size\\nlet inputFile = fs.openSync(filepath,fs.OpenMode.READ_ONLY);\\nif(inputFile){\\n    let inputFileState = fs.stateSync(inputFile.fd);\\n    let inputFileSize = inputFIleState.size;\\n}",
        "type": "Reference",
        "function_call": "get()",
        "function_name": null,
        "parent_text": "创建解封装实例。 //C++ code\\nOH_AVSource *source = OH_AVSource_CreateWithFD(inputFd,0,inputFileSize);\\nOH_AVDemuxer *demuxer = OH_AVDemuxer_CreateWithSource(source);\\nauto sourceFormat = std::shared_ptr<OH_AVFormat>(OH_AVSource_GetSourceFormat(source_), OH_AVFormat_Destroy);\\nint32_t trackCount = 0;\\nOH_AVFormat_GetIntValue(sourceFormat.get(), OH_MD_KEY_TRACK_COUNT, &trackCount); ",
        "import_module": null,
        "parent": "<li>创建解封装实例。 <pre class='\\\"screen\\\"'>//C++ code\\nOH_AVSource *source = OH_AVSource_CreateWithFD(inputFd,0,inputFileSize);\\nOH_AVDemuxer *demuxer = OH_AVDemuxer_CreateWithSource(source);\\nauto sourceFormat = std::shared_ptr&lt;OH_AVFormat&gt;(OH_AVSource_GetSourceFormat(source_), OH_AVFormat_Destroy);\\nint32_t trackCount = 0;\\nOH_AVFormat_GetIntValue(sourceFormat.get(), OH_MD_KEY_TRACK_COUNT, &amp;trackCount);</pre> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/audiovivid-avdemuxer.html"
    },
    {
        "id": 1469,
        "pre": "import { minorsProtection } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError, commonEventManager } from '@kit.BasicServicesKit';\\n// 以上引入的模块为当前场景的全量模块，请按照具体实现按需引入",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入minorsProtection模块及相关公共模块。",
        "import_module": null,
        "parent": "<li>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-minorsprotection\\\"' target='\\\"_blank\\\"'>minorsProtection</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-app-trun-on-minorsprotection.html"
    },
    {
        "id": 1470,
        "pre": "import { pdfService } from '@kit.PDFKit';\\nimport { image } from '@kit.ImageKit';\\nimport { fileIo as fs } from '@kit.CoreFileKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct PdfPage {\\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\\n  private context = getContext() as common.UIAbilityContext;\\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\\n\\n  aboutToAppear(): void {\\n    // 确保沙箱目录有input.pdf文档\\n    let filePath = this.context.filesDir + '/input.pdf';\\n    this.loadResult = this.pdfDocument.loadDocument(filePath);\\n  }\\n\\n  // 将 pixelMap 转成图片格式\\n  pixelMap2Buffer(pixelMap: image.PixelMap): Promise<ArrayBuffer> {\\n    return new Promise((resolve, reject) => {\\n      /**\\n       设置打包参数\\n       format：图片打包格式，只支持 jpg 和 webp\\n       quality：JPEG 编码输出图片质量\\n       bufferSize：图片大小，默认 10M\\n       */\\n      let packOpts: image.PackingOption = { format: 'image/jpeg', quality: 98 }\\n      // 创建ImagePacker实例\\n      const imagePackerApi = image.createImagePacker()\\n      imagePackerApi.packToData(pixelMap, packOpts).then((buffer: ArrayBuffer) => {\\n        resolve(buffer)\\n      }).catch((err: BusinessError) => {\\n        reject()\\n      })\\n    })\\n  }\\n\\n  build() {\\n    Column() {\\n      // 获取为图片并保存到应用沙箱\\n      Button('getPagePixelMap').onClick(async () => {\\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let page = this.pdfDocument.getPage(0)\\n          let pixmap: image.PixelMap = page.getPagePixelMap();\\n          if (!pixmap) {\\n            return\\n          }\\n          const imgBuffer = await this.pixelMap2Buffer(pixmap)\\n          const file =\\n            fs.openSync(this.context.filesDir + `/${Date.now()}.png`, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\\n          await fs.write(file.fd, imgBuffer)\\n          // 关闭文档\\n          await fs.close(file.fd)\\n        }\\n      })\\n      // 获取指定PdfPage区域的图片内容。\\n      Button('getCustomPagePixelMap').onClick(async () => {\\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let page = this.pdfDocument.getPage(0);\\n          let matrix = new pdfService.PdfMatrix();\\n          matrix.x = 100;\\n          matrix.y = 100;\\n          matrix.width = 500;\\n          matrix.height = 500;\\n          matrix.rotate = 0;\\n          let pixmap: image.PixelMap = page.getCustomPagePixelMap(matrix, false, false);\\n          if (!pixmap) {\\n            return;\\n          }\\n          const imgBuffer = await this.pixelMap2Buffer(pixmap);\\n          const file =\\n            fs.openSync(this.context.filesDir + `/${Date.now()}.jpeg`, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\\n          await fs.write(file.fd, imgBuffer);\\n          // 关闭文件\\n          await fs.close(file.fd);\\n        }\\n      })\\n      // 获取指定PdfPage区域的图片内容\\n      Button('getAreaPixelMap').onClick(async () => {\\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\\n          let page = this.pdfDocument.getPage(0);\\n          let matrix = new pdfService.PdfMatrix();\\n          matrix.x = 100;\\n          matrix.y = 100;\\n          matrix.width = 500;\\n          matrix.height = 500;\\n          matrix.rotate = 0;\\n          let pixmap: image.PixelMap = page.getAreaPixelMap(matrix, 400, 400, true, false);\\n          if (!pixmap) {\\n            return\\n          }\\n          const imgBuffer = await this.pixelMap2Buffer(pixmap)\\n          const file =\\n            fs.openSync(this.context.filesDir + `/${Date.now()}.bmp`, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\\n          await fs.write(file.fd, imgBuffer)\\n          // 关闭文件\\n          await fs.close(file.fd);\\n        }\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "  示例代码  调用loadDocument方法加载PDF文档。 调用getPage方法获取某个页面。 调用getPagePixelMap或getCustomPagePixelMap方法获取当前页面或者页面区域，这时获取的是image.PixelMap图像类型。 将image.PixelMap图像类型转化为二进制图片文件并保存，参考以下方法pixelMap2Buffer。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section291313010499\\\"'> <a name='\\\"section291313010499\\\"'></a><a name='\\\"section291313010499\\\"'></a> <h4>示例代码</h4> <ol> <li>调用loadDocument方法加载PDF文档。</li> <li>调用getPage方法获取某个页面。</li> <li>调用getPagePixelMap或getCustomPagePixelMap方法获取当前页面或者页面区域，这时获取的是image.PixelMap图像类型。</li> <li>将image.PixelMap图像类型转化为二进制图片文件并保存，参考以下方法pixelMap2Buffer。</li> </ol>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/pdf-get-img.html"
    },
    {
        "id": 1471,
        "pre": "agc.cloud.storage[\\n    match: /{bucket}/{path=**} {\\n        allow read, write: if true;\\n    }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "选择“安全”页签，在“配置策略”页面修改默认安全策略为始终可读写后，点击“发布”。  ",
        "import_module": null,
        "parent": "<li id='\\\"li93456199912\\\"'>选择“安全”页签，在“配置策略”页面修改默认安全策略为始终可读写后，点击“发布”。 <p id='\\\"ZH-CN_TOPIC_0000002214704297__p78114533226\\\"'><span><img originheight='\\\"634\\\"' originwidth='\\\"1177\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250314180450.04167164656346027622819217009602:50001231000000:2800:BB01096475CF61BA07298EF5F60D0350A764B5A657B056DB4B0EBC4CCC698F59.png\\\"'/></span></p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/agc-harmonyos-clouddev-emptyability.html"
    },
    {
        "id": 1472,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { common } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]用户授权",
        "parent_text": "  [h2]用户授权 1.导入运动健康功能模块及相关公共模块。  2.创建授权请求。 let authorizationParameter: healthStore.AuthorizationRequest = {\\n  readDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE],\\n  writeDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE]\\n}       3.调用requestAuthorizations方法执行登录授权请求，并处理返回结果。      try {\\n  let authorizationResponse = await healthStore.requestAuthorizations(getContext(this) as common.UIAbilityContext, authorizationParameter);\\n  hilog.info(0x0000, 'testTag', 'Succeeded in requesting authorization.');\\n  authorizationResponse.writeDataTypes.forEach(dataType => {\\n    hilog.info(0x0000, 'testTag', `grantedWriteDataType is : ${dataType.name}`);\\n  });\\n  authorizationResponse.readDataTypes.forEach(dataType => {\\n    hilog.info(0x0000, 'testTag', `grantedReadDataTypes is : ${dataType.name}`);  \\n  });\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to request authorization. Code: ${err.code}, message: ${err.message}`);\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section0247115178\\\"'> <a name='\\\"section0247115178\\\"'></a><a name='\\\"section0247115178\\\"'></a> <h4>[h2]用户授权</h4> <p>1.导入运动健康功能模块及相关公共模块。</p>  <p>2.创建授权请求。</p> <pre class='\\\"typescript\\\"'>let authorizationParameter: healthStore.AuthorizationRequest = {\\n  readDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE],\\n  writeDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE]\\n}</pre> <div class='\\\"p\\\"'>      3.调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/health-api-healthstore#section19461855171619\\\"' target='\\\"_blank\\\"'>requestAuthorizations</a>方法执行登录授权请求，并处理返回结果。      <pre class='\\\"typescript\\\"'>try {\\n  let authorizationResponse = await healthStore.requestAuthorizations(getContext(this) as common.UIAbilityContext, authorizationParameter);\\n  hilog.info(0x0000, 'testTag', 'Succeeded in requesting authorization.');\\n  authorizationResponse.writeDataTypes.forEach(dataType =&gt; {\\n    hilog.info(0x0000, 'testTag', `grantedWriteDataType is : ${dataType.name}`);\\n  });\\n  authorizationResponse.readDataTypes.forEach(dataType =&gt; {\\n    hilog.info(0x0000, 'testTag', `grantedReadDataTypes is : ${dataType.name}`);  \\n  });\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to request authorization. Code: ${err.code}, message: ${err.message}`);\\n}</pre> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-add-permissions.html"
    },
    {
        "id": 1473,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]查询权限",
        "parent_text": "  [h2]查询权限 1.导入运动健康服务功能模块及相关公共模块。  2.创建查询权限请求。 let queryAuthorizationRequest: healthStore.AuthorizationRequest = {\\n  readDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE],\\n  writeDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE]\\n}       3.调用getAuthorizations方法执行查询授权请求，并处理返回结果。      try {\\n  let queryAuthorizationResponse = await healthStore.getAuthorizations(queryAuthorizationRequest);\\n  hilog.info(0x0000, 'testTag', 'Succeeded in getting authorization.');\\n  queryAuthorizationResponse.writeDataTypes.forEach(dataType => {\\n    hilog.info(0x0000, 'testTag', `grantedWriteDataType is : ${dataType.name}`);\\n  });\\n  queryAuthorizationResponse.readDataTypes.forEach(dataType => {\\n    hilog.info(0x0000, 'testTag', `grantedReadDataTypes is : ${dataType.name}`);\\n  });\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to get authorization. Code: ${err.code}, message: ${err.message}`);\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2932421571\\\"'> <a name='\\\"section2932421571\\\"'></a><a name='\\\"section2932421571\\\"'></a> <h4>[h2]查询权限</h4> <p>1.导入运动健康服务功能模块及相关公共模块。</p>  <p>2.创建查询权限请求。</p> <pre class='\\\"typescript\\\"'>let queryAuthorizationRequest: healthStore.AuthorizationRequest = {\\n  readDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE],\\n  writeDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE]\\n}</pre> <div class='\\\"p\\\"'>      3.调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/health-api-healthstore#section68141073254\\\"' target='\\\"_blank\\\"'>getAuthorizations</a>方法执行查询授权请求，并处理返回结果。      <pre class='\\\"typescript\\\"'>try {\\n  let queryAuthorizationResponse = await healthStore.getAuthorizations(queryAuthorizationRequest);\\n  hilog.info(0x0000, 'testTag', 'Succeeded in getting authorization.');\\n  queryAuthorizationResponse.writeDataTypes.forEach(dataType =&gt; {\\n    hilog.info(0x0000, 'testTag', `grantedWriteDataType is : ${dataType.name}`);\\n  });\\n  queryAuthorizationResponse.readDataTypes.forEach(dataType =&gt; {\\n    hilog.info(0x0000, 'testTag', `grantedReadDataTypes is : ${dataType.name}`);\\n  });\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to get authorization. Code: ${err.code}, message: ${err.message}`);\\n}</pre> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-add-permissions.html"
    },
    {
        "id": 1474,
        "pre": "import { healthStore } from '@kit.HealthServiceKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": "cancelAuthorizations()",
        "function_name": "[h2]取消授权",
        "parent_text": "  [h2]取消授权 1.导入运动健康服务功能模块及相关公共模块。        2.调用cancelAuthorizations方法执行取消授权，并处理返回结果。      try {\\n  await healthStore.cancelAuthorizations();\\n  hilog.info(0x0000, 'testTag', 'Succeeded in cancelling authorization.');\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to cancel authorization. Code: ${err.code}, message: ${err.message}`);\\n}  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section125616501171\\\"'> <a name='\\\"section125616501171\\\"'></a><a name='\\\"section125616501171\\\"'></a> <h4>[h2]取消授权</h4> <p>1.导入运动健康服务功能模块及相关公共模块。</p>  <div class='\\\"p\\\"'>      2.调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/health-api-healthstore#section18660141352811\\\"' target='\\\"_blank\\\"'>cancelAuthorizations</a>方法执行取消授权，并处理返回结果。      <pre class='\\\"typescript\\\"'>try {\\n  await healthStore.cancelAuthorizations();\\n  hilog.info(0x0000, 'testTag', 'Succeeded in cancelling authorization.');\\n} catch (err) {\\n  hilog.error(0x0000, 'testTag', `Failed to cancel authorization. Code: ${err.code}, message: ${err.message}`);\\n}</pre> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-add-permissions.html"
    },
    {
        "id": 1475,
        "pre": "// library/src/main/ets/pages/library_menu.ets\\n@Builder\\nexport function PageOneBuilder() {\\n  Library_Menu()\\n}\\n\\n@Entry\\n@Component\\nexport struct Library_Menu {\\n  @State message: string = 'Hello World';\\n  pathStack: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Row() {\\n        Column() {\\n          Text(this.message)\\n            .fontSize($r('app.float.page_text_font_size'))\\n            .fontWeight(FontWeight.Bold)\\n            .onClick(() => {\\n              this.message = 'Welcome';\\n            })\\n          Button(\\\"back_to_index\\\").fontSize(50).onClick(() => {\\n            this.pathStack.pop();\\n          })\\n        }\\n        .width('100%')\\n      }\\n      .height('100%')\\n    }.title('Library_Menu')\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathStack = context.pathStack\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": "ListItem()",
        "function_name": "[h2]页面跳转和返回",
        "parent_text": "  [h2]页面跳转和返回 开发者想在entry模块中，添加一个按钮跳转至library模块中的menu页面（路径为：library/src/main/ets/pages/library_menu.ets），那么可以在使用方的代码（entry模块下的Index.ets，路径为：entry/src/main/ets/pages/Index.ets）里这样使用： // entry/src/main/ets/pages/Index.ets\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = '';\\n  pathStack: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    Navigation(this.pathStack) {\\n      Column() {\\n        List() {\\n          ListItem() {\\n            Text($r('app.string.click_to_menu'))\\n              .fontSize(18)\\n              .textAlign(TextAlign.Start)\\n              .width('100%')\\n              .fontWeight(500)\\n              .height('100%')\\n          }\\n          .id('clickToMenu')\\n          .borderRadius(24)\\n          .width('685px')\\n          .height('84px')\\n          .backgroundColor($r('sys.color.ohos_id_color_foreground_contrary'))\\n          .margin({ top: 10, bottom: 10 })\\n          .padding({\\n            left: 12,\\n            right: 12,\\n            top: 4,\\n            bottom: 4\\n          })\\n          .onClick(() => {\\n            this.pathStack.pushPathByName('library_menu', null)\\n          })\\n        }\\n        .alignListItem(ListItemAlign.Center)\\n      }\\n      .width('100%')\\n      .backgroundColor($r('app.color.page_background'))\\n      .height('100%')\\n    }.title(\\\"Navigation_index\\\")\\n    .mode(NavigationMode.Stack)\\n  }\\n} 在library下新增page文件（library/src/main/ets/pages/library_menu.ets），其中'back_to_index'的按钮返回上一页。  需要在library模块下新增route_map.json文件（library/src/main/resources/base/profile/route_map.json）。 {\\n  \\\"routerMap\\\": [\\n    {\\n      \\\"name\\\": \\\"library_menu\\\",\\n      \\\"pageSourceFile\\\": \\\"src/main/ets/pages/library_menu.ets\\\",\\n      \\\"buildFunction\\\": \\\"PageOneBuilder\\\",\\n      \\\"data\\\": {\\n        \\\"description\\\": \\\"this is library_menu\\\"\\n      }\\n    }\\n  ]\\n} 在library模块下的配置文件（library/src/main/module.json5）中配置json文件。 {\\n  \\\"module\\\": {\\n    \\\"name\\\": \\\"library\\\",\\n    \\\"type\\\": \\\"shared\\\",\\n    \\\"description\\\": \\\"$string:shared_desc\\\",\\n    \\\"deviceTypes\\\": [\\n      \\\"phone\\\",\\n      \\\"tablet\\\",\\n      \\\"2in1\\\"\\n    ],\\n    \\\"deliveryWithInstall\\\": true,\\n    \\\"pages\\\": \\\"$profile:main_pages\\\",\\n    \\\"routerMap\\\": \\\"$profile:route_map\\\" //新增\\n  }\\n} 页面跳转和页面返回都使用了Navigation的特性，详情参考Navigation跳转。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"页面跳转和返回\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052594__%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%92%8C%E8%BF%94%E5%9B%9E\\\"'></a><a name='\\\"%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E5%92%8C%E8%BF%94%E5%9B%9E\\\"'></a> <h4>[h2]页面跳转和返回</h4> <p>开发者想在entry模块中，添加一个按钮跳转至library模块中的menu页面（路径为：library/src/main/ets/pages/library_menu.ets），那么可以在使用方的代码（entry模块下的Index.ets，路径为：entry/src/main/ets/pages/Index.ets）里这样使用：</p> <pre class='\\\"ets\\\"'>// entry/src/main/ets/pages/Index.ets\\n\\n@Entry\\n@Component\\nstruct Index {\\n  @State message: string = '';\\n  pathStack: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    Navigation(this.pathStack) {\\n      Column() {\\n        List() {\\n          ListItem() {\\n            Text($r('app.string.click_to_menu'))\\n              .fontSize(18)\\n              .textAlign(TextAlign.Start)\\n              .width('100%')\\n              .fontWeight(500)\\n              .height('100%')\\n          }\\n          .id('clickToMenu')\\n          .borderRadius(24)\\n          .width('685px')\\n          .height('84px')\\n          .backgroundColor($r('sys.color.ohos_id_color_foreground_contrary'))\\n          .margin({ top: 10, bottom: 10 })\\n          .padding({\\n            left: 12,\\n            right: 12,\\n            top: 4,\\n            bottom: 4\\n          })\\n          .onClick(() =&gt; {\\n            this.pathStack.pushPathByName('library_menu', null)\\n          })\\n        }\\n        .alignListItem(ListItemAlign.Center)\\n      }\\n      .width('100%')\\n      .backgroundColor($r('app.color.page_background'))\\n      .height('100%')\\n    }.title(\\\"Navigation_index\\\")\\n    .mode(NavigationMode.Stack)\\n  }\\n}</pre> <p>在library下新增page文件（library/src/main/ets/pages/library_menu.ets），其中'back_to_index'的按钮返回上一页。</p>  <p>需要在library模块下新增route_map.json文件（library/src/main/resources/base/profile/route_map.json）。</p> <pre class='\\\"screen\\\"'>{\\n  \\\"routerMap\\\": [\\n    {\\n      \\\"name\\\": \\\"library_menu\\\",\\n      \\\"pageSourceFile\\\": \\\"src/main/ets/pages/library_menu.ets\\\",\\n      \\\"buildFunction\\\": \\\"PageOneBuilder\\\",\\n      \\\"data\\\": {\\n        \\\"description\\\": \\\"this is library_menu\\\"\\n      }\\n    }\\n  ]\\n}</pre> <p>在library模块下的配置文件（library/src/main/module.json5）中配置json文件。</p> <pre class='\\\"screen\\\"'>{\\n  \\\"module\\\": {\\n    \\\"name\\\": \\\"library\\\",\\n    \\\"type\\\": \\\"shared\\\",\\n    \\\"description\\\": \\\"$string:shared_desc\\\",\\n    \\\"deviceTypes\\\": [\\n      \\\"phone\\\",\\n      \\\"tablet\\\",\\n      \\\"2in1\\\"\\n    ],\\n    \\\"deliveryWithInstall\\\": true,\\n    \\\"pages\\\": \\\"$profile:main_pages\\\",\\n    \\\"routerMap\\\": \\\"$profile:route_map\\\" //新增\\n  }\\n}</pre> <p>页面跳转和页面返回都使用了Navigation的特性，详情参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-navigation-navigation#路由操作\\\"'>Navigation跳转</a>。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/in-app-hsp.html"
    },
    {
        "id": 1476,
        "pre": "HuaweiAttestation ::= SEQUENCE {\\n version             AttestationVersion DEFAULT v1,\\n claim1             AttestationClaim,\\n claim2             AttestationClaim,\\n claim3             AttestationClaim,\\n ... ...\\n}\\n\\nAttestationVersion ::= INTEGER { v1(0) }\\n\\nAttestationClaim ::= SEQUENCE {\\n   securityLevel       SecurityLevel,\\n   type             AttestationType,\\n   value            AttestationValue\\n}\\n\\nSecurityLevel ::= INTEGER\\nAttestationType ::= OBJECT IDENTIFIER\\nAttestationValue ::= ANY -- DEFINED BY AttestationType\\n\\nApplicationIDType ::= SEQUENCE {\\n   type                         OBJECT IDENTIFIER,\\n   value                        OCT_STR\\n}",
        "type": "Reference",
        "function_call": "close()",
        "function_name": "对密钥证明证书链进行校验",
        "parent_text": "对密钥证明证书链进行校验密钥证明证书链采用X509标准格式，证书链（证书数组）中的第一本证书为密钥证明证书，最后一本证书为根CA证书，中间的为子CA证书。 应用服务器对密钥证明证书链的校验处理过程： 使用Universal Keystore Kit官网提供的根CA证书对证书链合法性进行校验。（根CA证书下载地址） 请勿在应用服务器中使用子CA证书对密钥证明证书链进行校验，子CA证书可能会因为有效期结束、证书被吊销等发生变化。  解析密钥证明证书获取应用公钥、挑战值Challenge、应用ID、密钥管理部件ID。其中应用公钥直接从密钥证明证书的subjectPublicKeyInfo字段获取； 其他字段从密钥证明证书的扩展域段（Extensions）中获取，扩展域段的OID为1.3.6.1.4.1.2011.2.376.1.3（密钥证明扩展域段）。 校验挑战值Challenge是否有效。校验应用ID是否与预期的取值一致。根据应用ID判断请求是否来自预期的HarmonyOS应用。校验密钥来源是否与预期的取值一致。 密钥证明证书格式说明：  密钥证明扩展域段为Asn.1 DER标准编码格式，数据结构定义如下：  AttestationClaim类型取值说明： 序号  type（OID）取值  value的数据类型  securityLevel  Claim说明    1  1.3.6.1.4.1.2011.2.376.2.1.4  OCT_STR  保留字段，暂不使用  应用输入的挑战字Challenge   2  1.3.6.1.4.1.2011.2.376.2.1.3  ApplicationIDType  保留字段，暂不使用  应用ID。   3  1.3.6.1.4.1.2011.2.376.2.2.2.6  OCT_STR  保留字段，暂不使用  密钥管理部件ID。取值固定为：0x28c4fb4944afec11b9090242ac120002     ApplicationIDType类型取值说明： type（OID）取值  value取值说明    1.3.6.1.4.1.2011.2.376.2.1.3.1  HarmonyOS Hap应用ID，包含bundleName和签名证书公钥的hash。 value为json字符串，样例如下： { \\\"appId\\\":\\\"com.example.attesthcts_BDmjsOezxRmguzlYRVhQavW22Eswi5sX61wOAysWPOGS8TZ5tY1u1A9EcvarzyrfOEj5zT8BCGkfFkVjn0m5wzo=\\\", \\\"bundleName\\\":\\\"com.example.attesthcts\\\" }   1.3.6.1.4.1.2011.2.376.2.1.3.2  系统服务（Service Ability）的ID，样例： {processName: \\\"huawei_share\\\"}     样例代码： import org.bouncycastle.asn1.*;\\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.FileOutputStream;\\nimport java.security.PublicKey;\\nimport java.security.Security;\\nimport java.security.cert.CertPath;\\nimport java.security.cert.CertPathValidator;\\nimport java.security.cert.CertificateFactory;\\nimport java.security.cert.PKIXCertPathValidatorResult;\\nimport java.security.cert.PKIXParameters;\\nimport java.security.cert.TrustAnchor;\\nimport java.security.cert.X509Certificate;\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.HashSet;\\nimport java.util.List;\\n\\npublic class ParseAttestation {\\n    static {\\n        Security.addProvider(new BouncyCastleProvider());\\n    }\\n\\n    //HarmonyOS Hap应用通过anonAttestKeyItem接口获取到的 “密钥证明证书链”数据。\\n    static String[] g_attestCertStr = new String[]{\\\"-----BEGIN CERTIFICATE-----\\\\nMIIDCTCCAq+gAwIBAgIOCfq2SGImV3KTZ4HAOOUwCgYIKoZIzj0EAwIwXTE5MDcGA1UEAwwwSHVhd2VpIENCRyBFQ0MgRGV2aWNlIEFub255bW91cyBBdHRlc3RhdGlvbiBDQSAxMRMwEQYDVQQKDApIdWF3ZWkgQ0JHMQswCQYDVQQGEwJDTjAeFw0yNDA1MTQwODM5MzdaFw0yNDA1MjEwODM5MzdaMCwxKjAoBgNVBAMMIURldmljZSBDZXJ0aWZpY2F0ZSBNYW5hZ2VtZW50IEtleTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABF1cCJeIlyW6XmNK2awRQyCQm3L+qlDNGY8YONqeLKI/cOrNipUlggyRAqkG+L+b59U3zxjl1HiDo+Bw9yN47dOjggGCMIIBfjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFOMsy/92hzsS+0MiPz/7AgaB3yenMB0GA1UdDgQWBBRvhNZr2s9vp/ekndec4jmeawrZkDCCASwGDCsGAQQBj1sCgngBAwSCARowggEWAgEAMIHFAgECBg0rBgEEAY9bAoJ4AgEDMIGwBg4rBgEEAY9bAoJ4AgEDAQSBnXsiYXBwSWQiOiJjb20uZXhhbXBsZS5teXdhbmdlbl9CQUNabzJGNlB4MXM3RHhjL3psT3NWSTNpRUlNSnhNS3NoMlhPaW1ad01TNmJoWWg2ZG1iSC94bU9HaU1SMTdaSG93ZkI5dHBiQVVRVWtzTFJqSm0zMzA9IiwiYnVuZGxlTmFtZSI6ImNvbS5leGFtcGxlLm15d2FuZ2VuIn0wIgIBAAYNKwYBBAGPWwKCeAIBBAQOY2hhbGxlbmdlX2RhdGEwJQIBAwYOKwYBBAGPWwKCeAICAgYEECjE+0lEr+wRuQkCQqwSAAIwCgYIKoZIzj0EAwIDSAAwRQIgdIgfLZN86bDY+KyHbzpedXTFp7LIQYVY1p5Xurdy40oCIQDqDQGxzk5VE1xPZtSm4AzWBzBccfvpc58EiV0N1eZqxg==\\\\n-----END CERTIFICATE-----\\\", \\\"-----BEGIN CERTIFICATE-----\\\\nMIICyjCCAlCgAwIBAgIREj5jzbLehL8yzkDm5uwcSJUwCgYIKoZIzj0EAwMwSzETMBEGA1UEChMKSHVhd2VpIENCRzE0MDIGA1UEAxMrSHVhd2VpIENCRyBFQ0MgRGV2aWNlIEF0dGVzdGF0aW9uIFJvb3QgQ0EgMTAeFw0yMzEyMDUwMzE4MDRaFw0zMzEyMDUwMzE4MDRaMF0xOTA3BgNVBAMMMEh1YXdlaSBDQkcgRUNDIERldmljZSBBbm9ueW1vdXMgQXR0ZXN0YXRpb24gQ0EgMTETMBEGA1UECgwKSHVhd2VpIENCRzELMAkGA1UEBhMCQ04wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATYjeQrfijuZ/9HJPLlsfJ4/wnXbQXaxy5f5fEcMN+pTZ5RekpY7PnDp2zEdibvkSzjv1MuRs8JzORyGatSOrYFo4IBATCB/jAfBgNVHSMEGDAWgBTaRGLD5yvof1E6XEuPQ3w5JMPOrDAdBgNVHQ4EFgQU4yzL/3aHOxL7QyI/P/sCBoHfJ6cwRgYDVR0gBD8wPTA7BgRVHSAAMDMwMQYIKwYBBQUHAgEWJWh0dHA6Ly9wa2kuY29uc3VtZXIuaHVhd2VpLmNvbS9jYS9jcHMwEgYDVR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAQYwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cDovL3BraS5jb25zdW1lci5odWF3ZWkuY29tL2NhL2NybC9yb290X2RldmljZUF0dGVzdF9jcmwuY3JsMAoGCCqGSM49BAMDA2gAMGUCMQCE9qqNREq3AvCuznKeBl8biwC5GpV/Z1B0rsU4RqeTqNJ0Gvyz3g8Noaf4SpWzsLUCMBm5nr39UEOq89kx7QQjgYWLEWKcuSsgw2/6MckKP/6zrxjVld2SMtqiphKnrv1EkA==\\\\n-----END CERTIFICATE-----\\\", \\\"-----BEGIN CERTIFICATE-----\\\\nMIICCTCCAY6gAwIBAgIDVxAsMAoGCCqGSM49BAMDMEsxEzARBgNVBAoTCkh1YXdlaSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERldmljZSBBdHRlc3RhdGlvbiBSb290IENBIDEwIBcNMjMxMTMwMDIwNjU1WhgPMjA3MzExMzAwMjA2NTVaMEsxEzARBgNVBAoTCkh1YXdlaSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERldmljZSBBdHRlc3RhdGlvbiBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATDJzRdruaBeMoQBbdqCe51ezvkQn3OPYBoRmpL5KPktdFtD0b97FRp8jGLiUhPKyo8M15fxW5Ams4s80E8I1BSXoovDnkKllFfUadD8URgwEfOk5qttYNKzJcULavOhbijQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTaRGLD5yvof1E6XEuPQ3w5JMPOrDAKBggqhkjOPQQDAwNpADBmAjEA2zDQREvORPqcZyjwKDltu0T9zN8Cd3/hi4DQZvuRJdJOY57yIIO/LKxezzEcGiMMAjEAkX7r0U4Mcaw4uURMh+7tLMyvyxnlW8yJqBEOnZfqS8I8t0bQIY2r/5TQAPC0JhBm\\\\n-----END CERTIFICATE-----\\\"};\\n\\n    //从HarmonyOS官网下载的根CA证书。\\n    static String g_rootCertStr = \\\"-----BEGIN CERTIFICATE-----\\\\n\\\" +\\n            \\\"MIICCTCCAY6gAwIBAgIDVxAsMAoGCCqGSM49BAMDMEsxEzARBgNVBAoTCkh1YXdl\\\\n\\\" +\\n            \\\"aSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERldmljZSBBdHRlc3RhdGlv\\\\n\\\" +\\n            \\\"biBSb290IENBIDEwIBcNMjMxMTMwMDIwNjU1WhgPMjA3MzExMzAwMjA2NTVaMEsx\\\\n\\\" +\\n            \\\"EzARBgNVBAoTCkh1YXdlaSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERl\\\\n\\\" +\\n            \\\"dmljZSBBdHRlc3RhdGlvbiBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNi\\\\n\\\" +\\n            \\\"AATDJzRdruaBeMoQBbdqCe51ezvkQn3OPYBoRmpL5KPktdFtD0b97FRp8jGLiUhP\\\\n\\\" +\\n            \\\"Kyo8M15fxW5Ams4s80E8I1BSXoovDnkKllFfUadD8URgwEfOk5qttYNKzJcULavO\\\\n\\\" +\\n            \\\"hbijQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW\\\\n\\\" +\\n            \\\"BBTaRGLD5yvof1E6XEuPQ3w5JMPOrDAKBggqhkjOPQQDAwNpADBmAjEA2zDQREvO\\\\n\\\" +\\n            \\\"RPqcZyjwKDltu0T9zN8Cd3/hi4DQZvuRJdJOY57yIIO/LKxezzEcGiMMAjEAkX7r\\\\n\\\" +\\n            \\\"0U4Mcaw4uURMh+7tLMyvyxnlW8yJqBEOnZfqS8I8t0bQIY2r/5TQAPC0JhBm\\\\n\\\" +\\n            \\\"-----END CERTIFICATE-----\\\\n\\\";\\n\\n    //保存HarmonyOS Hap应用生成的证书公钥的文件名\\n    static String g_publicKeyFileName = \\\"d:\\\\\\\\attestPublicKey.pem\\\";\\n\\n    public static void main(String[] args) {\\n        ParseAttestation parseAttestation = new ParseAttestation();\\n        parseAttestation.parseAndValidateAttestCertChain(g_attestCertStr, g_rootCertStr, g_publicKeyFileName);\\n    }\\n\\n    void parseAndValidateAttestCertChain(String[] attestCertStr, String rootCertStr, String publicKeyFileName) {\\n        try {\\n            //解析密钥证明证书链\\n            List<X509Certificate> attestCerts = parseAttestationCerts(attestCertStr);\\n\\n            //校验密钥证明证书链\\n            Date curDate = new Date();\\n            validateAttestationCertChain(attestCerts, rootCertStr, curDate);\\n\\n            //解析密钥证明证书\\n            AttestationInfo attestInfo = extractAttestaionField(attestCerts.get(0));\\n\\n            //校验密钥证明信息是否正确\\n            if (!checkAttestInfo(attestInfo)) {\\n                //todo： 进行异常处理\\n            }\\n\\n            //保存HarmonyOS Hap应用生成的公钥\\n            saveAttestPublicKey(attestInfo.publicKey, publicKeyFileName);\\n        } catch (Exception e) {\\n            System.out.println(e);\\n        }\\n    }\\n\\n    List<X509Certificate> parseAttestationCerts(String[] certStr) throws Exception {\\n        List<X509Certificate> certificateList = new ArrayList<>(certStr.length);\\n        CertificateFactory certificateFactory = CertificateFactory.getInstance(\\\"X.509\\\", \\\"BC\\\");\\n\\n        for (int i = 0; i < certStr.length; i++) {\\n            certificateList.add((X509Certificate) certificateFactory.generateCertificate(\\n                    new ByteArrayInputStream(certStr[i].getBytes())));\\n        }\\n        return certificateList;\\n    }\\n\\n    void validateAttestationCertChain(List<X509Certificate> certs, String trustCAStr, Date date) throws Exception {\\n        //构造证书链\\n        CertificateFactory factory = CertificateFactory.getInstance(\\\"X.509\\\", \\\"BC\\\");\\n        CertPath certPath = factory.generateCertPath(certs);\\n\\n        //读取信任根证书和构建trustAnchor对象\\n        X509Certificate trustCA = (X509Certificate) factory.generateCertificate(\\n                new ByteArrayInputStream(trustCAStr.getBytes()));\\n\\n        TrustAnchor trustAnchor = new TrustAnchor(trustCA, null);\\n        HashSet trustAnchorSet = new HashSet<TrustAnchor>();\\n        trustAnchorSet.add(trustAnchor);\\n\\n        //构建validator和对应的参数\\n        PKIXParameters params = new PKIXParameters(trustAnchorSet);\\n        params.setDate(date);\\n        //密钥证明证书有效期比较短，不需要进行证书的吊销验证。\\n        params.setRevocationEnabled(false);\\n\\n        CertPathValidator validator = CertPathValidator.getInstance(\\\"PKIX\\\", \\\"BC\\\");\\n        try {\\n            PKIXCertPathValidatorResult result = (PKIXCertPathValidatorResult) validator.validate(certPath, params);\\n            System.out.println(\\\"Cert Chain validate success!\\\");\\n        } catch (Exception e) {\\n            System.out.println(\\\"Cert Chain validate fail!\\\" + e.getMessage());\\n        }\\n\\n    }\\n\\n    int getInteger(ASN1Encodable value) {\\n        if (value instanceof ASN1Integer) {\\n            return ((ASN1Integer) value).getValue().intValue();\\n        } else if (value instanceof ASN1Enumerated) {\\n            return ((ASN1Enumerated) value).getValue().intValue();\\n        } else {\\n            throw new IllegalArgumentException(\\n                    \\\"expected Integer value ; found \\\" + value.getClass().getName() + \\\" instead.\\\");\\n        }\\n    }\\n\\n    byte[] getOctetString(ASN1Encodable value) {\\n        if (value instanceof ASN1OctetString) {\\n            return ((ASN1OctetString) value).getOctets();\\n        } else {\\n            throw new RuntimeException(\\n                    \\\"expected OctetString value ; found \\\" + value.getClass().getName() + \\\" instead.\\\");\\n        }\\n    }\\n\\n    void printBytes(byte[] byteArray) {\\n        for (int i = 0; i < byteArray.length; i++) {\\n            System.out.printf(\\\"%02X \\\", byteArray[i]);\\n        }\\n        System.out.println();\\n    }\\n\\n    AttestationInfo extractAttestaionField(X509Certificate certificate) {\\n        AttestationInfo attestInfo = new AttestationInfo();\\n\\n        //获取应用公钥\\n        attestInfo.publicKey = certificate.getPublicKey();\\n\\n        //从密钥证明证书中获取 “密钥证明扩展域段”\\n        byte[] attestationValue = certificate.getExtensionValue(\\\"1.3.6.1.4.1.2011.2.376.1.3\\\");\\n        if (attestationValue == null || attestationValue.length == 0) {\\n            throw new IllegalArgumentException(\\\"Cann't found the attestation extension!\\\");\\n        }\\n        ASN1Sequence attestSequence = ASN1Sequence.getInstance(\\n                ASN1OctetString.getInstance(attestationValue).getOctets());\\n\\n        //获取Attestation Version\\n        attestInfo.version = getInteger(attestSequence.getObjectAt(0));\\n\\n        for (int i = 1; i < attestSequence.size(); i++) {\\n            ASN1Sequence attestClaim = ASN1Sequence.getInstance(attestSequence.getObjectAt(i));\\n            //获取Claim的oid\\n            ASN1ObjectIdentifier attestClaimOid = (ASN1ObjectIdentifier) attestClaim.getObjectAt(1);\\n\\n            if (\\\"1.3.6.1.4.1.2011.2.376.2.1.4\\\".equalsIgnoreCase(attestClaimOid.getId())) {\\n                //读取Challenge\\n                attestInfo.challenge = getOctetString(attestClaim.getObjectAt(2));\\n            } else if (\\\"1.3.6.1.4.1.2011.2.376.2.1.3\\\".equalsIgnoreCase(attestClaimOid.getId())) {\\n                //读取appid\\n\\n                ASN1Sequence appidAsn1 = (ASN1Sequence) attestClaim.getObjectAt(2);\\n                //获取appid的oid\\n                ASN1ObjectIdentifier appidOid = (ASN1ObjectIdentifier) appidAsn1.getObjectAt(0);\\n                if (!\\\"1.3.6.1.4.1.2011.2.376.2.1.3.1\\\".equalsIgnoreCase(appidOid.getId())) {\\n                    throw new IllegalArgumentException(\\\"the appid oid is not expected value!\\\" + appidOid.getId());\\n                }\\n\\n                attestInfo.appid = new String(getOctetString(appidAsn1.getObjectAt(1)));\\n            } else if (\\\"1.3.6.1.4.1.2011.2.376.2.2.2.6\\\".equalsIgnoreCase(attestClaimOid.getId())) {\\n                //读取密钥管理部件id，应该取值为0x28c4fb4944afec11b9090242ac120002\\n                attestInfo.keyManagerId = getOctetString(attestClaim.getObjectAt(2));\\n            } else {\\n                System.out.println(\\\"unknow oid :\\\" + attestClaimOid.getId());\\n            }\\n        }\\n\\n        return attestInfo;\\n    }\\n\\n    boolean checkAttestInfo(AttestationInfo attestInfo) {\\n        //todo: 校验Challenge\\n        System.out.println(\\\"challenge is:\\\");\\n        printBytes(attestInfo.challenge);\\n\\n        //todo: 校验appid中的bundleName字段\\n        System.out.println(\\\"appid is:\\\\n \\\" + attestInfo.appid);\\n\\n        //todo: 校验keyManagerId，固定为：0x28c4fb4944afec11b9090242ac120002\\n        System.out.println(\\\"key manager id is:\\\");\\n        printBytes(attestInfo.keyManagerId);\\n\\n        return true;\\n    }\\n\\n    void saveAttestPublicKey(PublicKey publicKey, String publicKeyFileName) throws Exception {\\n        //todo: 把attestInfo.publicKey.getEncoded()保存到数据库\\n        FileOutputStream file = new FileOutputStream(publicKeyFileName);\\n        file.write(publicKey.getEncoded());\\n        file.close();\\n\\n        System.out.println(\\\"the app public key: \\\\n\\\" + publicKey);\\n    }\\n\\n    class AttestationInfo {\\n        public PublicKey publicKey;\\n        public int version;\\n        public byte[] challenge;\\n        public String appid;\\n        public byte[] keyManagerId;\\n    }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8815174119330\\\"'><a name='\\\"section8815174119330\\\"'></a><a name='\\\"section8815174119330\\\"'></a><h4>对密钥证明证书链进行校验</h4><p>密钥证明证书链采用X509标准格式，证书链（证书数组）中的第一本证书为<strong>密钥证明证书</strong>，最后一本证书为根CA证书，中间的为子CA证书。</p> <p>应用服务器对密钥证明证书链的校验处理过程：</p> <ol><li>使用Universal Keystore Kit官网提供的根CA证书对证书链合法性进行校验。（<a href='\\\"https://pki.consumer.huawei.com/ca/cer/Huawei_CBG_ECC_Device_Attestation_Root_CA.cer\\\"' target='\\\"_blank\\\"'>根CA证书下载地址</a>）<div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121009.50443529559520814982725564007997:50001231000000:2800:84EE1CD8F8E13E216E3D37D0E882CF10AA39946C1FF721CA07368DA131C6105C.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>请勿在应用服务器中使用子CA证书对密钥证明证书链进行校验，子CA证书可能会因为有效期结束、证书被吊销等发生变化。</p> </div></div> </li><li>解析<strong>密钥证明证书</strong>获取应用公钥、挑战值Challenge、应用ID、密钥管理部件ID。<p>其中应用公钥直接从密钥证明证书的subjectPublicKeyInfo字段获取；</p> <p>其他字段从密钥证明证书的扩展域段（Extensions）中获取，扩展域段的OID为1.3.6.1.4.1.2011.2.376.1.3（密钥证明扩展域段）。</p> </li><li>校验挑战值Challenge是否有效。</li><li>校验应用ID是否与预期的取值一致。根据应用ID判断请求是否来自预期的HarmonyOS应用。</li><li>校验密钥来源是否与预期的取值一致。</li></ol> <p><strong>密钥证明证书格式说明：</strong></p> <p><span><img originheight='\\\"660\\\"' originwidth='\\\"470\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121009.61989112234231093510695257730652:50001231000000:2800:FB8F921FA3C95F758788AA6A84AF470E9B08CD91F2CEC7E4A19F0C0E9D7FD84A.png\\\"'/></span><span><img originheight='\\\"593\\\"' originwidth='\\\"786\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121009.66708666947006981778558866297393:50001231000000:2800:F9087BC511D273871EE0E1A1CC04DFEECCE997EA16FCC2C22BB54ACCC9E82DDA.png\\\"'/></span></p> <p>密钥证明扩展域段为Asn.1 DER标准编码格式，数据结构定义如下：</p>  <p><strong>AttestationClaim类型取值说明：</strong></p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.10.1.6.1.1\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p><strong>序号</strong></p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.10.1.6.1.2\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>type（<strong>OID</strong>）取值</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.10.1.6.1.3\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>value的数据类型</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.10.1.6.1.4\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>securityLevel</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.10.1.6.1.5\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p><strong>Claim说明</strong></p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>1</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>1.3.6.1.4.1.2011.2.376.2.1.4</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>OCT_STR</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>保留字段，暂不使用</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>应用输入的挑战字Challenge</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>2</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>1.3.6.1.4.1.2011.2.376.2.1.3</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>ApplicationIDType</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>保留字段，暂不使用</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>应用ID。</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>3</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>1.3.6.1.4.1.2011.2.376.2.2.2.6</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>OCT_STR</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>保留字段，暂不使用</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"20%\\\"'><p>密钥管理部件ID。取值固定为：0x28c4fb4944afec11b9090242ac120002</p> </td> </tr> </tbody></table> </div> <p><strong>ApplicationIDType类型取值说明：</strong></p> <div class='\\\"tablenoborder\\\"'><table><thead><tr><th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.12.1.3.1.1\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>type（OID）取值</p> </th> <th align='\\\"left\\\"' class='\\\"cellrowborder\\\"' id='\\\"mcps1.3.1.12.1.3.1.2\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>value取值说明</p> </th> </tr> </thead> <tbody><tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>1.3.6.1.4.1.2011.2.376.2.1.3.1</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>HarmonyOS Hap应用ID，包含bundleName和签名证书公钥的hash。</p> <p>value为json字符串，样例如下：</p> <p>{</p> <p>\\\"appId\\\":\\\"com.example.attesthcts_BDmjsOezxRmguzlYRVhQavW22Eswi5sX61wOAysWPOGS8TZ5tY1u1A9EcvarzyrfOEj5zT8BCGkfFkVjn0m5wzo=\\\",</p> <p>\\\"bundleName\\\":\\\"com.example.attesthcts\\\"</p> <p>}</p> </td> </tr> <tr><td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>1.3.6.1.4.1.2011.2.376.2.1.3.2</p> </td> <td class='\\\"cellrowborder\\\"' valign='\\\"top\\\"' width='\\\"50%\\\"'><p>系统服务（Service Ability）的ID，样例：</p> <p>{processName: \\\"huawei_share\\\"}</p> </td> </tr> </tbody></table> </div> <p><strong>样例代码：</strong></p> <pre class='\\\"screen\\\"'>import org.bouncycastle.asn1.*;\\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.io.FileOutputStream;\\nimport java.security.PublicKey;\\nimport java.security.Security;\\nimport java.security.cert.CertPath;\\nimport java.security.cert.CertPathValidator;\\nimport java.security.cert.CertificateFactory;\\nimport java.security.cert.PKIXCertPathValidatorResult;\\nimport java.security.cert.PKIXParameters;\\nimport java.security.cert.TrustAnchor;\\nimport java.security.cert.X509Certificate;\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.HashSet;\\nimport java.util.List;\\n\\npublic class ParseAttestation {\\n    static {\\n        Security.addProvider(new BouncyCastleProvider());\\n    }\\n\\n    //HarmonyOS Hap应用通过anonAttestKeyItem接口获取到的 “密钥证明证书链”数据。\\n    static String[] g_attestCertStr = new String[]{\\\"-----BEGIN CERTIFICATE-----\\\\nMIIDCTCCAq+gAwIBAgIOCfq2SGImV3KTZ4HAOOUwCgYIKoZIzj0EAwIwXTE5MDcGA1UEAwwwSHVhd2VpIENCRyBFQ0MgRGV2aWNlIEFub255bW91cyBBdHRlc3RhdGlvbiBDQSAxMRMwEQYDVQQKDApIdWF3ZWkgQ0JHMQswCQYDVQQGEwJDTjAeFw0yNDA1MTQwODM5MzdaFw0yNDA1MjEwODM5MzdaMCwxKjAoBgNVBAMMIURldmljZSBDZXJ0aWZpY2F0ZSBNYW5hZ2VtZW50IEtleTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABF1cCJeIlyW6XmNK2awRQyCQm3L+qlDNGY8YONqeLKI/cOrNipUlggyRAqkG+L+b59U3zxjl1HiDo+Bw9yN47dOjggGCMIIBfjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFOMsy/92hzsS+0MiPz/7AgaB3yenMB0GA1UdDgQWBBRvhNZr2s9vp/ekndec4jmeawrZkDCCASwGDCsGAQQBj1sCgngBAwSCARowggEWAgEAMIHFAgECBg0rBgEEAY9bAoJ4AgEDMIGwBg4rBgEEAY9bAoJ4AgEDAQSBnXsiYXBwSWQiOiJjb20uZXhhbXBsZS5teXdhbmdlbl9CQUNabzJGNlB4MXM3RHhjL3psT3NWSTNpRUlNSnhNS3NoMlhPaW1ad01TNmJoWWg2ZG1iSC94bU9HaU1SMTdaSG93ZkI5dHBiQVVRVWtzTFJqSm0zMzA9IiwiYnVuZGxlTmFtZSI6ImNvbS5leGFtcGxlLm15d2FuZ2VuIn0wIgIBAAYNKwYBBAGPWwKCeAIBBAQOY2hhbGxlbmdlX2RhdGEwJQIBAwYOKwYBBAGPWwKCeAICAgYEECjE+0lEr+wRuQkCQqwSAAIwCgYIKoZIzj0EAwIDSAAwRQIgdIgfLZN86bDY+KyHbzpedXTFp7LIQYVY1p5Xurdy40oCIQDqDQGxzk5VE1xPZtSm4AzWBzBccfvpc58EiV0N1eZqxg==\\\\n-----END CERTIFICATE-----\\\", \\\"-----BEGIN CERTIFICATE-----\\\\nMIICyjCCAlCgAwIBAgIREj5jzbLehL8yzkDm5uwcSJUwCgYIKoZIzj0EAwMwSzETMBEGA1UEChMKSHVhd2VpIENCRzE0MDIGA1UEAxMrSHVhd2VpIENCRyBFQ0MgRGV2aWNlIEF0dGVzdGF0aW9uIFJvb3QgQ0EgMTAeFw0yMzEyMDUwMzE4MDRaFw0zMzEyMDUwMzE4MDRaMF0xOTA3BgNVBAMMMEh1YXdlaSBDQkcgRUNDIERldmljZSBBbm9ueW1vdXMgQXR0ZXN0YXRpb24gQ0EgMTETMBEGA1UECgwKSHVhd2VpIENCRzELMAkGA1UEBhMCQ04wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATYjeQrfijuZ/9HJPLlsfJ4/wnXbQXaxy5f5fEcMN+pTZ5RekpY7PnDp2zEdibvkSzjv1MuRs8JzORyGatSOrYFo4IBATCB/jAfBgNVHSMEGDAWgBTaRGLD5yvof1E6XEuPQ3w5JMPOrDAdBgNVHQ4EFgQU4yzL/3aHOxL7QyI/P/sCBoHfJ6cwRgYDVR0gBD8wPTA7BgRVHSAAMDMwMQYIKwYBBQUHAgEWJWh0dHA6Ly9wa2kuY29uc3VtZXIuaHVhd2VpLmNvbS9jYS9jcHMwEgYDVR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAQYwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cDovL3BraS5jb25zdW1lci5odWF3ZWkuY29tL2NhL2NybC9yb290X2RldmljZUF0dGVzdF9jcmwuY3JsMAoGCCqGSM49BAMDA2gAMGUCMQCE9qqNREq3AvCuznKeBl8biwC5GpV/Z1B0rsU4RqeTqNJ0Gvyz3g8Noaf4SpWzsLUCMBm5nr39UEOq89kx7QQjgYWLEWKcuSsgw2/6MckKP/6zrxjVld2SMtqiphKnrv1EkA==\\\\n-----END CERTIFICATE-----\\\", \\\"-----BEGIN CERTIFICATE-----\\\\nMIICCTCCAY6gAwIBAgIDVxAsMAoGCCqGSM49BAMDMEsxEzARBgNVBAoTCkh1YXdlaSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERldmljZSBBdHRlc3RhdGlvbiBSb290IENBIDEwIBcNMjMxMTMwMDIwNjU1WhgPMjA3MzExMzAwMjA2NTVaMEsxEzARBgNVBAoTCkh1YXdlaSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERldmljZSBBdHRlc3RhdGlvbiBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATDJzRdruaBeMoQBbdqCe51ezvkQn3OPYBoRmpL5KPktdFtD0b97FRp8jGLiUhPKyo8M15fxW5Ams4s80E8I1BSXoovDnkKllFfUadD8URgwEfOk5qttYNKzJcULavOhbijQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTaRGLD5yvof1E6XEuPQ3w5JMPOrDAKBggqhkjOPQQDAwNpADBmAjEA2zDQREvORPqcZyjwKDltu0T9zN8Cd3/hi4DQZvuRJdJOY57yIIO/LKxezzEcGiMMAjEAkX7r0U4Mcaw4uURMh+7tLMyvyxnlW8yJqBEOnZfqS8I8t0bQIY2r/5TQAPC0JhBm\\\\n-----END CERTIFICATE-----\\\"};\\n\\n    //从HarmonyOS官网下载的根CA证书。\\n    static String g_rootCertStr = \\\"-----BEGIN CERTIFICATE-----\\\\n\\\" +\\n            \\\"MIICCTCCAY6gAwIBAgIDVxAsMAoGCCqGSM49BAMDMEsxEzARBgNVBAoTCkh1YXdl\\\\n\\\" +\\n            \\\"aSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERldmljZSBBdHRlc3RhdGlv\\\\n\\\" +\\n            \\\"biBSb290IENBIDEwIBcNMjMxMTMwMDIwNjU1WhgPMjA3MzExMzAwMjA2NTVaMEsx\\\\n\\\" +\\n            \\\"EzARBgNVBAoTCkh1YXdlaSBDQkcxNDAyBgNVBAMTK0h1YXdlaSBDQkcgRUNDIERl\\\\n\\\" +\\n            \\\"dmljZSBBdHRlc3RhdGlvbiBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNi\\\\n\\\" +\\n            \\\"AATDJzRdruaBeMoQBbdqCe51ezvkQn3OPYBoRmpL5KPktdFtD0b97FRp8jGLiUhP\\\\n\\\" +\\n            \\\"Kyo8M15fxW5Ams4s80E8I1BSXoovDnkKllFfUadD8URgwEfOk5qttYNKzJcULavO\\\\n\\\" +\\n            \\\"hbijQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW\\\\n\\\" +\\n            \\\"BBTaRGLD5yvof1E6XEuPQ3w5JMPOrDAKBggqhkjOPQQDAwNpADBmAjEA2zDQREvO\\\\n\\\" +\\n            \\\"RPqcZyjwKDltu0T9zN8Cd3/hi4DQZvuRJdJOY57yIIO/LKxezzEcGiMMAjEAkX7r\\\\n\\\" +\\n            \\\"0U4Mcaw4uURMh+7tLMyvyxnlW8yJqBEOnZfqS8I8t0bQIY2r/5TQAPC0JhBm\\\\n\\\" +\\n            \\\"-----END CERTIFICATE-----\\\\n\\\";\\n\\n    //保存HarmonyOS Hap应用生成的证书公钥的文件名\\n    static String g_publicKeyFileName = \\\"d:\\\\\\\\attestPublicKey.pem\\\";\\n\\n    public static void main(String[] args) {\\n        ParseAttestation parseAttestation = new ParseAttestation();\\n        parseAttestation.parseAndValidateAttestCertChain(g_attestCertStr, g_rootCertStr, g_publicKeyFileName);\\n    }\\n\\n    void parseAndValidateAttestCertChain(String[] attestCertStr, String rootCertStr, String publicKeyFileName) {\\n        try {\\n            //解析密钥证明证书链\\n            List&lt;X509Certificate&gt; attestCerts = parseAttestationCerts(attestCertStr);\\n\\n            //校验密钥证明证书链\\n            Date curDate = new Date();\\n            validateAttestationCertChain(attestCerts, rootCertStr, curDate);\\n\\n            //解析密钥证明证书\\n            AttestationInfo attestInfo = extractAttestaionField(attestCerts.get(0));\\n\\n            //校验密钥证明信息是否正确\\n            if (!checkAttestInfo(attestInfo)) {\\n                //todo： 进行异常处理\\n            }\\n\\n            //保存HarmonyOS Hap应用生成的公钥\\n            saveAttestPublicKey(attestInfo.publicKey, publicKeyFileName);\\n        } catch (Exception e) {\\n            System.out.println(e);\\n        }\\n    }\\n\\n    List&lt;X509Certificate&gt; parseAttestationCerts(String[] certStr) throws Exception {\\n        List&lt;X509Certificate&gt; certificateList = new ArrayList&lt;&gt;(certStr.length);\\n        CertificateFactory certificateFactory = CertificateFactory.getInstance(\\\"X.509\\\", \\\"BC\\\");\\n\\n        for (int i = 0; i &lt; certStr.length; i++) {\\n            certificateList.add((X509Certificate) certificateFactory.generateCertificate(\\n                    new ByteArrayInputStream(certStr[i].getBytes())));\\n        }\\n        return certificateList;\\n    }\\n\\n    void validateAttestationCertChain(List&lt;X509Certificate&gt; certs, String trustCAStr, Date date) throws Exception {\\n        //构造证书链\\n        CertificateFactory factory = CertificateFactory.getInstance(\\\"X.509\\\", \\\"BC\\\");\\n        CertPath certPath = factory.generateCertPath(certs);\\n\\n        //读取信任根证书和构建trustAnchor对象\\n        X509Certificate trustCA = (X509Certificate) factory.generateCertificate(\\n                new ByteArrayInputStream(trustCAStr.getBytes()));\\n\\n        TrustAnchor trustAnchor = new TrustAnchor(trustCA, null);\\n        HashSet trustAnchorSet = new HashSet&lt;TrustAnchor&gt;();\\n        trustAnchorSet.add(trustAnchor);\\n\\n        //构建validator和对应的参数\\n        PKIXParameters params = new PKIXParameters(trustAnchorSet);\\n        params.setDate(date);\\n        //密钥证明证书有效期比较短，不需要进行证书的吊销验证。\\n        params.setRevocationEnabled(false);\\n\\n        CertPathValidator validator = CertPathValidator.getInstance(\\\"PKIX\\\", \\\"BC\\\");\\n        try {\\n            PKIXCertPathValidatorResult result = (PKIXCertPathValidatorResult) validator.validate(certPath, params);\\n            System.out.println(\\\"Cert Chain validate success!\\\");\\n        } catch (Exception e) {\\n            System.out.println(\\\"Cert Chain validate fail!\\\" + e.getMessage());\\n        }\\n\\n    }\\n\\n    int getInteger(ASN1Encodable value) {\\n        if (value instanceof ASN1Integer) {\\n            return ((ASN1Integer) value).getValue().intValue();\\n        } else if (value instanceof ASN1Enumerated) {\\n            return ((ASN1Enumerated) value).getValue().intValue();\\n        } else {\\n            throw new IllegalArgumentException(\\n                    \\\"expected Integer value ; found \\\" + value.getClass().getName() + \\\" instead.\\\");\\n        }\\n    }\\n\\n    byte[] getOctetString(ASN1Encodable value) {\\n        if (value instanceof ASN1OctetString) {\\n            return ((ASN1OctetString) value).getOctets();\\n        } else {\\n            throw new RuntimeException(\\n                    \\\"expected OctetString value ; found \\\" + value.getClass().getName() + \\\" instead.\\\");\\n        }\\n    }\\n\\n    void printBytes(byte[] byteArray) {\\n        for (int i = 0; i &lt; byteArray.length; i++) {\\n            System.out.printf(\\\"%02X \\\", byteArray[i]);\\n        }\\n        System.out.println();\\n    }\\n\\n    AttestationInfo extractAttestaionField(X509Certificate certificate) {\\n        AttestationInfo attestInfo = new AttestationInfo();\\n\\n        //获取应用公钥\\n        attestInfo.publicKey = certificate.getPublicKey();\\n\\n        //从密钥证明证书中获取 “密钥证明扩展域段”\\n        byte[] attestationValue = certificate.getExtensionValue(\\\"1.3.6.1.4.1.2011.2.376.1.3\\\");\\n        if (attestationValue == null || attestationValue.length == 0) {\\n            throw new IllegalArgumentException(\\\"Cann't found the attestation extension!\\\");\\n        }\\n        ASN1Sequence attestSequence = ASN1Sequence.getInstance(\\n                ASN1OctetString.getInstance(attestationValue).getOctets());\\n\\n        //获取Attestation Version\\n        attestInfo.version = getInteger(attestSequence.getObjectAt(0));\\n\\n        for (int i = 1; i &lt; attestSequence.size(); i++) {\\n            ASN1Sequence attestClaim = ASN1Sequence.getInstance(attestSequence.getObjectAt(i));\\n            //获取Claim的oid\\n            ASN1ObjectIdentifier attestClaimOid = (ASN1ObjectIdentifier) attestClaim.getObjectAt(1);\\n\\n            if (\\\"1.3.6.1.4.1.2011.2.376.2.1.4\\\".equalsIgnoreCase(attestClaimOid.getId())) {\\n                //读取Challenge\\n                attestInfo.challenge = getOctetString(attestClaim.getObjectAt(2));\\n            } else if (\\\"1.3.6.1.4.1.2011.2.376.2.1.3\\\".equalsIgnoreCase(attestClaimOid.getId())) {\\n                //读取appid\\n\\n                ASN1Sequence appidAsn1 = (ASN1Sequence) attestClaim.getObjectAt(2);\\n                //获取appid的oid\\n                ASN1ObjectIdentifier appidOid = (ASN1ObjectIdentifier) appidAsn1.getObjectAt(0);\\n                if (!\\\"1.3.6.1.4.1.2011.2.376.2.1.3.1\\\".equalsIgnoreCase(appidOid.getId())) {\\n                    throw new IllegalArgumentException(\\\"the appid oid is not expected value!\\\" + appidOid.getId());\\n                }\\n\\n                attestInfo.appid = new String(getOctetString(appidAsn1.getObjectAt(1)));\\n            } else if (\\\"1.3.6.1.4.1.2011.2.376.2.2.2.6\\\".equalsIgnoreCase(attestClaimOid.getId())) {\\n                //读取密钥管理部件id，应该取值为0x28c4fb4944afec11b9090242ac120002\\n                attestInfo.keyManagerId = getOctetString(attestClaim.getObjectAt(2));\\n            } else {\\n                System.out.println(\\\"unknow oid :\\\" + attestClaimOid.getId());\\n            }\\n        }\\n\\n        return attestInfo;\\n    }\\n\\n    boolean checkAttestInfo(AttestationInfo attestInfo) {\\n        //todo: 校验Challenge\\n        System.out.println(\\\"challenge is:\\\");\\n        printBytes(attestInfo.challenge);\\n\\n        //todo: 校验appid中的bundleName字段\\n        System.out.println(\\\"appid is:\\\\n \\\" + attestInfo.appid);\\n\\n        //todo: 校验keyManagerId，固定为：0x28c4fb4944afec11b9090242ac120002\\n        System.out.println(\\\"key manager id is:\\\");\\n        printBytes(attestInfo.keyManagerId);\\n\\n        return true;\\n    }\\n\\n    void saveAttestPublicKey(PublicKey publicKey, String publicKeyFileName) throws Exception {\\n        //todo: 把attestInfo.publicKey.getEncoded()保存到数据库\\n        FileOutputStream file = new FileOutputStream(publicKeyFileName);\\n        file.write(publicKey.getEncoded());\\n        file.close();\\n\\n        System.out.println(\\\"the app public key: \\\\n\\\" + publicKey);\\n    }\\n\\n    class AttestationInfo {\\n        public PublicKey publicKey;\\n        public int version;\\n        public byte[] challenge;\\n        public String appid;\\n        public byte[] keyManagerId;\\n    }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/device-attestation-servers.html"
    },
    {
        "id": 1477,
        "pre": "target_include_directories(entry PUBLIC ${HMOS_SDK_NATIVE}/sysroot/usr/include)\\ntarget_link_directories(entry PUBLIC ${HMOS_SDK_NATIVE}/sysroot/usr/lib/aarch64-linux-ohos)\\ntarget_link_libraries(entry PUBLIC libgame_performance.z.so)",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]在 CMake 脚本中链接动态库",
        "parent_text": "  [h2]在 CMake 脚本中链接动态库  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1930155395119\\\"'> <a name='\\\"section1930155395119\\\"'></a><a name='\\\"section1930155395119\\\"'></a> <h4>[h2]在 CMake 脚本中链接动态库</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure-c.html"
    },
    {
        "id": 1478,
        "pre": "// 定义回调函数\\nstatic void onThermalLevelChanged(GamePerformance_DeviceInfo *deviceInfo, void *userData) {\\n    // 获取gpu负载等级（须订阅设备信息类型：GAME_PERFORMANCE_DEVICEINFO_TYPE_GPU）\\n    GamePerformance_GpuInfo *gpuInfo = NULL;\\n    HMS_GamePerformance_DeviceInfo_GetGpuInfo(deviceInfo, &gpuInfo);\\n    int32_t gpuloadLevel = -1;\\n    int32_t vertexLevel = -1;\\n    int32_t fragmentLoadLevel = -1;\\n    int32_t bandwidthLoadLevel = -1;\\n    int32_t textureLoadLevel = -1;\\n    int32_t currentFrequency = -1;\\n    HMS_GamePerformance_GpuInfo_GetGpuLoadLevel(gpuInfo, &gpuloadLevel);\\n    HMS_GamePerformance_GpuInfo_GetVertexLoadLevel(gpuInfo, &vertexLevel);\\n    HMS_GamePerformance_GpuInfo_GetFragmentLoadLevel(gpuInfo, &fragmentLoadLevel);\\n    HMS_GamePerformance_GpuInfo_GetBandwidthLoadLevel(gpuInfo, &bandwidthLoadLevel);\\n    HMS_GamePerformance_GpuInfo_GetTextureLoadLevel(gpuInfo, &textureLoadLevel);\\n    HMS_GamePerformance_GpuInfo_GetCurrentFrequency(gpuInfo, &currentFrequency);\\n\\n    // 获取温度相关信息（须订阅设备信息类型：GAME_PERFORMANCE_DEVICEINFO_TYPE_THERMAL）\\n    GamePerformance_ThermalInfo *thermalInfo = NULL;\\n    HMS_GamePerformance_DeviceInfo_GetThermalInfo(deviceInfo, &thermalInfo);\\n    int32_t margin = INT32_MIN;\\n    int32_t trend = INT32_MIN;\\n    int32_t level = -1;\\n    HMS_GamePerformance_ThermalInfo_GetThermalMargin(thermalInfo, &margin);\\n    HMS_GamePerformance_ThermalInfo_GetThermalTrend(thermalInfo, &trend);\\n    HMS_GamePerformance_ThermalInfo_GetThermalLevel(thermalInfo, &level);\\n\\n    // 使用完释放内存\\n    HMS_GamePerformance_DestroyGpuInfo(&gpuInfo);\\n    HMS_GamePerformance_DestroyThermalInfo(&thermalInfo);\\n}\\n // 注册回调\\nvoid demo(){\\n    // 按需订阅设备信息类型\\n    size_t size = 2; // 订阅的设备信息类型的数量，即下文types[]数组的长度\\n    GamePerformance_DeviceInfoType *types[] = {\\n        new GamePerformance_DeviceInfoType(GAME_PERFORMANCE_DEVICEINFO_TYPE_GPU),\\n        new GamePerformance_DeviceInfoType(GAME_PERFORMANCE_DEVICEINFO_TYPE_THERMAL)};\\n    void *userData = (void *)\\\"mydata\\\"; // 用户自定义任意类型，callback 透传返回\\n    GamePerformance_ErrorCode ret = HMS_GamePerformance_RegisterThermalLevelChangedCallback(types, size, onThermalLevelChanged, userData);\\n    if (ret != GAME_PERFORMANCE_SUCCESS) {\\n        // 异常处理\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]注册温度变化回调",
        "parent_text": "  [h2]注册温度变化回调 调用HMS_GamePerformance_RegisterThermalLevelChangedCallback接口可以注册温度变化回调，获取设备状态信息的通知（如温控档位、温升趋势、GPU负载等）。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section2023034211481\\\"'> <a name='\\\"section2023034211481\\\"'></a><a name='\\\"section2023034211481\\\"'></a> <h4>[h2]注册温度变化回调</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice_game_performance#gaa73a9464dbe4a973e7aed559835adbc6\\\"' target='\\\"_blank\\\"'>HMS_GamePerformance_RegisterThermalLevelChangedCallback</a>接口可以注册温度变化回调，获取设备状态信息的通知（如温控档位、温升趋势、GPU负载等）。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure-c.html"
    },
    {
        "id": 1479,
        "pre": "// 取消注册\\nGamePerformance_ErrorCode ret = HMS_GamePerformance_UnregisterThermalLevelChangedCallback(onThermalLevelChanged);\\nif (ret != GAME_PERFORMANCE_SUCCESS) {\\n    // 异常处理\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]取消注册指定温度变化回调",
        "parent_text": "  [h2]取消注册指定温度变化回调 调用HMS_GamePerformance_UnregisterThermalLevelChangedCallback接口可以取消注册指定温度变化回调。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section312014395493\\\"'> <a name='\\\"section312014395493\\\"'></a><a name='\\\"section312014395493\\\"'></a> <h4>[h2]取消注册指定温度变化回调</h4> <p>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice_game_performance#ga306734f0bee9af7697b5fbfa19bafec0\\\"' target='\\\"_blank\\\"'>HMS_GamePerformance_UnregisterThermalLevelChangedCallback</a>接口可以取消注册指定温度变化回调。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure-c.html"
    },
    {
        "id": 1480,
        "pre": "GamePerformance_PackageInfo *packageInfo = NULL;\\nHMS_GamePerformance_CreatePackageInfo(&packageInfo);\\n\\n// SetXXX接口的第二个参数均为示例，请替换成实际参数\\n// 设置必选参数\\nHMS_GamePerformance_PackageInfo_SetBundleName(packageInfo, \\\"com.example.demo\\\");  \\nHMS_GamePerformance_PackageInfo_SetAppVersion(packageInfo, \\\"1.0\\\");\\n\\n// 按需设置可选参数\\nHMS_GamePerformance_PackageInfo_SetEngineType(packageInfo, GAME_PERFORMANCE_ENGINE_TYPE_COCOS);  \\nHMS_GamePerformance_PackageInfo_SetEngineVersion(packageInfo, \\\"2.0\\\");\\nHMS_GamePerformance_PackageInfo_SetGameType(packageInfo, GAME_PERFORMANCE_GAME_TYPE_FPS);  \\n\\n// 上报游戏包信息\\nGamePerformance_ErrorCode ret = HMS_GamePerformance_UpdatePackageInfo(packageInfo);\\nif (ret != GAME_PERFORMANCE_SUCCESS) {\\n    // 异常处理\\n}\\n\\n// 使用完释放内存\\nHMS_GamePerformance_DestroyPackageInfo(&packageInfo);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]上报游戏包信息",
        "parent_text": "  [h2]上报游戏包信息 初始化成功后，可以通过调用HMS_GamePerformance_UpdatePackageInfo接口上报游戏包信息。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section17318926114911\\\"'> <a name='\\\"section17318926114911\\\"'></a><a name='\\\"section17318926114911\\\"'></a> <h4>[h2]上报游戏包信息</h4> <p>初始化成功后，可以通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice_game_performance#ga317ba7027076ce06ae73a6188bc3b129\\\"' target='\\\"_blank\\\"'>HMS_GamePerformance_UpdatePackageInfo</a>接口上报游戏包信息。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure-c.html"
    },
    {
        "id": 1481,
        "pre": "GamePerformance_ConfigInfo *configInfo = NULL;\\nHMS_GamePerformance_CreateConfigInfo(&configInfo);\\n\\n// 如需多次上报，若使用同一个实例上报，只需通过set方法更新参数即可（同一个实例将保留上一次设置的数据）\\n// SetXXX接口的第二个参数均为示例，请替换成实际参数\\n// 按需设置下列可选字段\\nHMS_GamePerformance_ConfigInfo_SetMaxPictureQualityLevel(configInfo, GAME_PERFORMANCE_PQL_BALANCED);\\nHMS_GamePerformance_ConfigInfo_SetCurrentPictureQualityLevel(configInfo, GAME_PERFORMANCE_PQL_HD);\\nHMS_GamePerformance_ConfigInfo_SetMaxFrameRate(configInfo, 120);\\nHMS_GamePerformance_ConfigInfo_SetCurrentFrameRate(configInfo, 60);\\nHMS_GamePerformance_ConfigInfo_SetMaxResolution(configInfo, \\\"1260*2720\\\");\\nHMS_GamePerformance_ConfigInfo_SetCurrentResolution(configInfo, \\\"1260*2720\\\");\\nHMS_GamePerformance_ConfigInfo_SetAntiAliasingEnabled(configInfo, true);\\nHMS_GamePerformance_ConfigInfo_SetShadowEnabled(configInfo, true);\\nHMS_GamePerformance_ConfigInfo_SetMultithreadingEnabled(configInfo, true);\\nHMS_GamePerformance_ConfigInfo_SetParticleEnabled(configInfo, true);\\nHMS_GamePerformance_ConfigInfo_SetHdModeEnabled(configInfo, true);\\n\\n// 上报游戏配置信息\\nGamePerformance_ErrorCode ret = HMS_GamePerformance_UpdateConfigInfo(configInfo);\\nif (ret != GAME_PERFORMANCE_SUCCESS) {\\n    // 异常处理\\n}\\n\\n// 使用完释放内存\\nHMS_GamePerformance_DestroyConfigInfo(&configInfo);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]上报游戏配置信息",
        "parent_text": "  [h2]上报游戏配置信息 初始化成功后，可以通过调用HMS_GamePerformance_UpdateConfigInfo接口上报游戏配置信息。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section17802105113812\\\"'> <a name='\\\"section17802105113812\\\"'></a><a name='\\\"section17802105113812\\\"'></a> <h4>[h2]上报游戏配置信息</h4> <p>初始化成功后，可以通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice_game_performance#ga6fe77ea4f43939333c7c3b07e1204448\\\"' target='\\\"_blank\\\"'>HMS_GamePerformance_UpdateConfigInfo</a>接口上报游戏配置信息。</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure-c.html"
    },
    {
        "id": 1482,
        "pre": "// 查询GPU信息\\nGamePerformance_GpuInfo *gpuInfo = NULL;\\nGamePerformance_ErrorCode ret = HMS_GamePerformance_QueryGpuInfo(&gpuInfo);\\nif (ret != GAME_PERFORMANCE_SUCCESS) {\\n    // 异常处理\\n    return;\\n}\\n\\n// 获取指标数据值\\nint32_t gpuloadLevel = -1;\\nint32_t bandwidth = -1;\\nint32_t currentFrequency = -1;\\nint32_t fragmentLoadLevel = -1;\\nint32_t textureLoadLevel = -1;\\nint32_t vertexLoadLevel = -1;\\nHMS_GamePerformance_GpuInfo_GetGpuLoadLevel(gpuInfo, &gpuloadLevel);\\nHMS_GamePerformance_GpuInfo_GetBandwidthLoadLevel(gpuInfo, &bandwidth);\\nHMS_GamePerformance_GpuInfo_GetCurrentFrequency(gpuInfo, &currentFrequency);\\nHMS_GamePerformance_GpuInfo_GetFragmentLoadLevel(gpuInfo, &fragmentLoadLevel);\\nHMS_GamePerformance_GpuInfo_GetTextureLoadLevel(gpuInfo, &textureLoadLevel);\\nHMS_GamePerformance_GpuInfo_GetVertexLoadLevel(gpuInfo, &vertexLoadLevel);\\n\\n// 使用完释放内存\\nHMS_GamePerformance_DestroyGpuInfo(&gpuInfo);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]查询GPU信息",
        "parent_text": "  [h2]查询GPU信息 除订阅设备状态变化的方式外，也可以通过调用HMS_GamePerformance_QueryGpuInfo接口主动查询设备GPU信息：   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section12803101194718\\\"'> <a name='\\\"section12803101194718\\\"'></a><a name='\\\"section12803101194718\\\"'></a> <h4>[h2]查询GPU信息</h4> <p>除订阅设备状态变化的方式外，也可以通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice_game_performance#ga93f67c2befdb52f4b59893a7a300f292\\\"' target='\\\"_blank\\\"'>HMS_GamePerformance_QueryGpuInfo</a>接口主动查询设备GPU信息：</p>  <p></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure-c.html"
    },
    {
        "id": 1483,
        "pre": "// 查询温度和温升趋势\\nGamePerformance_ThermalInfo *thermalInfo = NULL;\\nGamePerformance_ThermalInfoQueryParameters *parameters = NULL;\\n\\n// 创建查询参数\\nHMS_GamePerformance_CreateThermalInfoQueryParameters(&parameters);\\n\\n// 设置是否预测温升趋势； true：将查询温升趋势预测信息； false:不会查询温升趋势预测信息；默认：false\\nHMS_GamePerformance_ThermalInfoQueryParameters_SetNeedsPrediction(parameters, true); \\n\\n// needsPrediction=true时选填（false时无需设置该参数）。若设置目标温度等级, 将以该温度等级作为目标温度等级进行温升趋势预测；若不设置，将使用系统默认档位进行预测。\\nHMS_GamePerformance_ThermalInfoQueryParameters_SetTargetThermalLevel(parameters, 4); \\n\\n// 查询温度信息\\nGamePerformance_ErrorCode ret = HMS_GamePerformance_QueryThermalInfo(parameters, &thermalInfo);\\nif (ret != GAME_PERFORMANCE_SUCCESS) {\\n    // 异常处理\\n  return;\\n}\\nint32_t margin = INT32_MIN;\\nint32_t trend = INT32_MIN;\\nint32_t level = -1;\\nHMS_GamePerformance_ThermalInfo_GetThermalLevel(thermalInfo, &level);\\nHMS_GamePerformance_ThermalInfo_GetThermalMargin(thermalInfo, &margin); // needsPrediction=true时,返回有效值\\nHMS_GamePerformance_ThermalInfo_GetThermalTrend(thermalInfo, &trend);  // needsPrediction=true时,返回有效值\\n\\n// 使用完释放内存\\nHMS_GamePerformance_DestroyThermalInfo(&thermalInfo);\\nHMS_GamePerformance_DestroyThermalInfoQueryParameters(&parameters);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]查询温度信息",
        "parent_text": "  [h2]查询温度信息 除订阅设备状态变化的方式外，也可以通过调用HMS_GamePerformance_QueryThermalInfo接口主动查询设备温控档位和温升趋势：       查询温度变化趋势需要历史数据作为计算依据，调用该接口时请保证设备已启动至少一分钟，否则会返回1010300001错误。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section78701243203710\\\"'> <a name='\\\"section78701243203710\\\"'></a><a name='\\\"section78701243203710\\\"'></a> <h4>[h2]查询温度信息</h4> <p>除订阅设备状态变化的方式外，也可以通过调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/gameservice_game_performance#gab7cb47e0dc3cce1169a8104827f7edb7\\\"' target='\\\"_blank\\\"'>HMS_GamePerformance_QueryThermalInfo</a>接口主动查询设备温控档位和温升趋势：</p>  <p></p> <div class='\\\"note\\\"'> <img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120111.78089351110619878468919241269650:50001231000000:2800:FD678417DB8C6AC146425962509F34F0294FA910D77BF37B91C648F10F0AD4C9.png\\\"'/><span class='\\\"notetitle\\\"'> </span> <div class='\\\"notebody\\\"'> <p>查询温度变化趋势需要历史数据作为计算依据，调用该接口时请保证设备已启动至少一分钟，否则会返回1010300001错误。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/gameservice-gameperformance-access-procedure-c.html"
    },
    {
        "id": 1484,
        "pre": "Camera_ErrorCode PreviewOutputGetSupportedFrameRates(Camera_PreviewOutput* previewOutput,\\n    Camera_FrameRateRange** frameRateRange, uint32_t* size) {\\n    Camera_ErrorCode ret = OH_PreviewOutput_GetSupportedFrameRates(previewOutput, frameRateRange, size);\\n\\n    if (ret != CAMERA_OK) {\\n        OH_LOG_ERROR(LOG_APP, \\\"OH_PreviewOutput_GetSupportedFrameRates failed.\\\");\\n        return CAMERA_INVALID_ARGUMENT;\\n    }\\n    for (uint32_t i = 0; i < *size; i++) {\\n        OH_LOG_DEBUG(LOG_APP, \\\"PreviewOutputGetSupportedFrameRates: SupportedFrameRates min %{public}d\\\", (*frameRateRange)[i].min);\\n        OH_LOG_DEBUG(LOG_APP, \\\"PreviewOutputGetSupportedFrameRates: SupportedFrameRates max %{public}d\\\", (*frameRateRange)[i].max);\\n    }\\n    return ret;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "调用OH_PreviewOutput_GetSupportedFrameRates，查询当前previewOutput支持的帧率范围。 需要在Session调用OH_CaptureSession_CommitConfig完成配流之后调用。   ",
        "import_module": null,
        "parent": "<li>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/_o_h___camera#oh_previewoutput_getsupportedframerates\\\"' target='\\\"_blank\\\"'>OH_PreviewOutput_GetSupportedFrameRates</a>，查询当前previewOutput支持的帧率范围。<div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115937.08709327355345444845461314969341:50001231000000:2800:F3CD416A960BBE390EC01BC209EAD5FBCCB2A56FFD1E7540F3D56A90219A34B3.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><p>需要在Session调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/_o_h___camera#oh_capturesession_commitconfig\\\"' target='\\\"_blank\\\"'>OH_CaptureSession_CommitConfig</a>完成配流之后调用。</p> </div></div>  </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/camera-setframerate-native.html"
    },
    {
        "id": 1485,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/constant-property-referencing-check-in-loops\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-constant-property-check-in-loops.html"
    },
    {
        "id": 1486,
        "pre": "class Time {\\n  static start: number = 0;\\n  static info: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\\n}\\nfunction getNum(num: number): number {\\n  /* Year has (12 * 29 =) 348 days at least */\\n  let total: number = 348;\\n  const info = Time.info[num- Time.start];  \\n  for (let index: number = 0x8000; index > 0x8; index >>= 1) {\\n    if ((info & index) != 0) {\\n      total++;\\n    }\\n  }\\n  return total;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-constant-property-check-in-loops.html"
    },
    {
        "id": 1487,
        "pre": "class Time {\\n  static start: number = 0;\\n  static info: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\\n}\\nfunction getNum(num: number): number {\\n  /* Year has (12 * 29 =) 348 days at least */\\n  let total: number = 348;\\n  for (let index: number = 0x8000; index > 0x8; index >>= 1) {\\n    // warning\\n    total += ((Time.info[num - Time.start] & index) !== 0) ? 1 : 0;\\n  }\\n  return total;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-constant-property-check-in-loops.html"
    },
    {
        "id": 1488,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/prefer-optional-chain\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-optional-chain.html"
    },
    {
        "id": 1489,
        "pre": "class Foo {\\n  public a?: Foo = new Foo();\\n\\n  public b?: Foo = new Foo();\\n\\n  public c?: Foo = new Foo();\\n\\n  public method?(): void {\\n    console.info('method');\\n  }\\n}\\n\\nconst foo = new Foo();\\nexport const c = foo.a?.b?.c;\\nfoo.a?.b?.method?.();",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-optional-chain.html"
    },
    {
        "id": 1490,
        "pre": "class Foo {\\n  public a?: Foo = new Foo();\\n\\n  public b?: Foo = new Foo();\\n\\n  public c?: Foo = new Foo();\\n\\n  public method?(): void {\\n    console.info('method');\\n  }\\n}\\n\\nconst foo = new Foo();\\nlet c = foo.a;\\nc = c && c.b;\\nc = c && c.c;\\nexport { c };\\nif (foo.a && foo.a.b && foo.a.b.method) {\\n  foo.a.b.method();\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_prefer-optional-chain.html"
    },
    {
        "id": 1491,
        "pre": "Star({ value: this.value, $value: (val: number) => { this.value = val }})",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "双向绑定语法糖可视为： ",
        "import_module": null,
        "parent": "<li><p>双向绑定语法糖可视为：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-new-binding.html"
    },
    {
        "id": 1492,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/font-size\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_font-size.html"
    },
    {
        "id": 1493,
        "pre": "const FONT_SIZE = 12;\\n\\n@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    RelativeContainer() {\\n      Text('message').fontSize(12)\\n      Text('message').fontSize('12fp')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_font-size.html"
    },
    {
        "id": 1494,
        "pre": "const FONT_SIZE = 7;\\n\\n@Entry\\n@Component\\nstruct Index1 {\\n  build() {\\n    RelativeContainer() {\\n      Text('message').fontSize(FONT_SIZE)\\n      Text('message').fontSize('7fp')\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_font-size.html"
    },
    {
        "id": 1495,
        "pre": "export const registerWatcher: () => void;\\nexport const test: () => void;",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "将RegisterWatcher和Test注册为ArkTS接口： 编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher和Test注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr },\\n        { \\\"test\\\", nullptr, Test, nullptr, nullptr, nullptr, napi_default, nullptr}\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n} 编辑\\\"index.d.ts\\\"文件，定义ArkTS接口： ",
        "import_module": null,
        "parent": "<li><p>将RegisterWatcher和Test注册为ArkTS接口：</p> <p>编辑\\\"napi_init.cpp\\\"文件，将RegisterWatcher和Test注册为ArkTS接口：</p> <pre>static napi_value Init(napi_env env, napi_value exports)\\n{\\n    napi_property_descriptor desc[] = {\\n        { \\\"registerWatcher\\\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr },\\n        { \\\"test\\\", nullptr, Test, nullptr, nullptr, nullptr, napi_default, nullptr}\\n    };\\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\\n    return exports;\\n}</pre> <p>编辑\\\"index.d.ts\\\"文件，定义ArkTS接口：</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hiappevent-watcher-address-sanitizer-events-ndk.html"
    },
    {
        "id": 1496,
        "pre": "//解封装头文件\\n#include \\\"multimedia/player_framework/native_avdemuxer.h\\\"\\n\\n// 解封装解码传递信息结构体\\nstruct AudioSampleInfo {\\nstd::string audioCodecMime = \\\"\\\";\\nint32_t audioSampleForamt = 0;\\nint32_t audioSampleRate = 0; \\nint32_t audioChannelCount = 0;\\nint64_t audioChannelLayout = 0;\\nuint8_t audioCodecConfig[100] = {0};\\nsize_t audioCodecSize = 0;\\n};\\n\\nAudioSampleInfo  info;",
        "type": "Reference",
        "function_call": null,
        "function_name": "添加头文件",
        "parent_text": "添加头文件 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section14548942143912\\\"'><a name='\\\"section14548942143912\\\"'></a><a name='\\\"section14548942143912\\\"'></a><h4>添加头文件</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/audiovivid-audiodecoder.html"
    },
    {
        "id": 1497,
        "pre": "struct CodecBufferInfo {\\n    uint32_t bufferIndex = 0;\\n    uintptr_t *buffer = nullptr;\\n    uint8_t *bufferAddr = nullptr;\\n    OH_AVCodecBufferAttr attr = {0, 0, 0, AVCODEC_BUFFER_FLAGS_NONE};\\n\\n    CodecBufferInfo(uint8_t *addr) : bufferAddr(addr){};\\n    CodecBufferInfo(uint8_t *addr, int32_t bufferSize)\\n        : bufferAddr(addr), attr({0, bufferSize, 0, AVCODEC_BUFFER_FLAGS_NONE}){};\\n    CodecBufferInfo(uint32_t argBufferIndex, OH_AVMemory *argBuffer, OH_AVCodecBufferAttr argAttr)\\n        : bufferIndex(argBufferIndex), buffer(reinterpret_cast<uintptr_t *>(argBuffer)), attr(argAttr){};\\n    CodecBufferInfo(uint32_t argBufferIndex, OH_AVMemory *argBuffer)\\n        : bufferIndex(argBufferIndex), buffer(reinterpret_cast<uintptr_t *>(argBuffer)){};\\n    CodecBufferInfo(uint32_t argBufferIndex, OH_AVBuffer *argBuffer)\\n        : bufferIndex(argBufferIndex), buffer(reinterpret_cast<uintptr_t *>(argBuffer)) {\\n        OH_AVBuffer_GetBufferAttr(argBuffer, &attr);\\n    };\\n};",
        "type": "Reference",
        "function_call": "notify_all()",
        "function_name": "定义相关实例",
        "parent_text": "定义相关实例定义CodecBufferInfo 解码码流的属性定义，为后面传给播放的码流数据封装。  定义解码工作队列 class CodecUserData {\\npublic:\\n    SampleInfo *sampleInfo = nullptr;\\n\\n    // 输入帧数\\n    uint32_t inputFrameCount_ = 0;\\n    // 输入队列锁，防止多线程同时操作输入队列\\n    std::mutex inputMutex_;\\n    // 输入线程的条件变量，当输入队列为空时用于阻塞输入线程\\n    std::condition_variable inputCond_;\\n    // 输入buffer队列，存放编解码器传给用户用来写入输入数据的buffer\\n    std::queue<CodecBufferInfo> inputBufferInfoQueue_;\\n\\n    // 输出帧数\\n    uint32_t outputFrameCount_ = 0;\\n    // 输出队列锁，防止多线程同时操作输出队列\\n    std::mutex outputMutex_;\\n    // 输出线程的条件变量，当输出队列为空时用于阻塞输出线程\\n    std::condition_variable outputCond_;\\n    std::mutex renderMutex_;\\n    std::condition_variable renderCond_;\\n    // 输出buffer队列，存放编解码器传给用户用来存放输出数据的buffer\\n    std::queue<CodecBufferInfo> outputBufferInfoQueue_;\\n\\n    std::shared_ptr<AudioDecoder> audioCodec_;\\n    std::queue<unsigned char> renderQueue_;\\n\\n    void ClearQueue() {\\n        {\\n            std::unique_lock<std::mutex> lock(inputMutex_);\\n            auto emptyQueue = std::queue<CodecBufferInfo>();\\n            inputBufferInfoQueue_.swap(emptyQueue);\\n        }\\n        {\\n            std::unique_lock<std::mutex> lock(outputMutex_);\\n            auto emptyQueue = std::queue<CodecBufferInfo>();\\n            outputBufferInfoQueue_.swap(emptyQueue);\\n        }\\n    }\\n}; 定义回调函数 class SampleCallback {\\npublic:\\n    // 报错回调函数，当编解码器内部报错时调用，返回给用户相应错误码\\n    static void OnCodecError(OH_AVCodec *codec, int32_t errorCode, void *userData);\\n    // 参数修改回调函数，当编解码器参数被修改时调用，返回给用户被修改后的format参数\\n    static void OnCodecFormatChange(OH_AVCodec *codec, OH_AVFormat *format, void *userData);\\n    // 输入回调函数，当编解码器需要输入时调用，返回给用户用来写入输入数据的buffer及其对应的index\\n    static void OnNeedInputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData);\\n    // 输出回调函数，当编解码器生成新的输出数据时调用，返回给用户用来存放输出数据的buffer及其对应的index\\n    static void OnNewOutputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData);\\n};\\nvoid SampleCallback::OnCodecError(OH_AVCodec *codec, int32_t errorCode, void *userData) {\\n    (void)codec;\\n    (void)errorCode;\\n    (void)userData;\\n}\\nvoid SampleCallback::OnCodecFormatChange(OH_AVCodec *codec, OH_AVFormat *format, void *userData) {\\n}\\nvoid SampleCallback::OnNeedInputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData) {\\n    if (userData == nullptr) {\\n        return;\\n    }\\n    (void)codec;\\n    CodecUserData *codecUserData = static_cast<CodecUserData *>(userData);\\n    std::unique_lock<std::mutex> lock(codecUserData->inputMutex_);\\n    // 将输入buffer存放到输入队列中\\n    codecUserData->inputBufferInfoQueue_.emplace(index, buffer);\\n    // 通知输入线程开始运行\\n    codecUserData->inputCond_.notify_all();\\n}\\n\\nvoid SampleCallback::OnNewOutputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData) {\\n    if (userData == nullptr) {\\n        return;\\n    }\\n    (void)codec;\\n    CodecUserData *codecUserData = static_cast<CodecUserData *>(userData);\\n    std::unique_lock<std::mutex> lock(codecUserData->outputMutex_);\\n    // 将输出buffer存放到输出队列中\\n    codecUserData->outputBufferInfoQueue_.emplace(index, buffer);\\n    // 通知输出线程开始运行\\n    codecUserData->outputCond_.notify_all();\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section145092197477\\\"'><a name='\\\"section145092197477\\\"'></a><a name='\\\"section145092197477\\\"'></a><h4>定义相关实例</h4><p><strong>定义CodecBufferInfo</strong></p> <p>解码码流的属性定义，为后面传给播放的码流数据封装。</p>  <p><strong>定义解码工作队列</strong></p> <pre class='\\\"screen\\\"'>class CodecUserData {\\npublic:\\n    SampleInfo *sampleInfo = nullptr;\\n\\n    // 输入帧数\\n    uint32_t inputFrameCount_ = 0;\\n    // 输入队列锁，防止多线程同时操作输入队列\\n    std::mutex inputMutex_;\\n    // 输入线程的条件变量，当输入队列为空时用于阻塞输入线程\\n    std::condition_variable inputCond_;\\n    // 输入buffer队列，存放编解码器传给用户用来写入输入数据的buffer\\n    std::queue&lt;CodecBufferInfo&gt; inputBufferInfoQueue_;\\n\\n    // 输出帧数\\n    uint32_t outputFrameCount_ = 0;\\n    // 输出队列锁，防止多线程同时操作输出队列\\n    std::mutex outputMutex_;\\n    // 输出线程的条件变量，当输出队列为空时用于阻塞输出线程\\n    std::condition_variable outputCond_;\\n    std::mutex renderMutex_;\\n    std::condition_variable renderCond_;\\n    // 输出buffer队列，存放编解码器传给用户用来存放输出数据的buffer\\n    std::queue&lt;CodecBufferInfo&gt; outputBufferInfoQueue_;\\n\\n    std::shared_ptr&lt;AudioDecoder&gt; audioCodec_;\\n    std::queue&lt;unsigned char&gt; renderQueue_;\\n\\n    void ClearQueue() {\\n        {\\n            std::unique_lock&lt;std::mutex&gt; lock(inputMutex_);\\n            auto emptyQueue = std::queue&lt;CodecBufferInfo&gt;();\\n            inputBufferInfoQueue_.swap(emptyQueue);\\n        }\\n        {\\n            std::unique_lock&lt;std::mutex&gt; lock(outputMutex_);\\n            auto emptyQueue = std::queue&lt;CodecBufferInfo&gt;();\\n            outputBufferInfoQueue_.swap(emptyQueue);\\n        }\\n    }\\n};</pre> <p><strong>定义回调函数</strong></p> <pre class='\\\"screen\\\"'>class SampleCallback {\\npublic:\\n    // 报错回调函数，当编解码器内部报错时调用，返回给用户相应错误码\\n    static void OnCodecError(OH_AVCodec *codec, int32_t errorCode, void *userData);\\n    // 参数修改回调函数，当编解码器参数被修改时调用，返回给用户被修改后的format参数\\n    static void OnCodecFormatChange(OH_AVCodec *codec, OH_AVFormat *format, void *userData);\\n    // 输入回调函数，当编解码器需要输入时调用，返回给用户用来写入输入数据的buffer及其对应的index\\n    static void OnNeedInputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData);\\n    // 输出回调函数，当编解码器生成新的输出数据时调用，返回给用户用来存放输出数据的buffer及其对应的index\\n    static void OnNewOutputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData);\\n};\\nvoid SampleCallback::OnCodecError(OH_AVCodec *codec, int32_t errorCode, void *userData) {\\n    (void)codec;\\n    (void)errorCode;\\n    (void)userData;\\n}\\nvoid SampleCallback::OnCodecFormatChange(OH_AVCodec *codec, OH_AVFormat *format, void *userData) {\\n}\\nvoid SampleCallback::OnNeedInputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData) {\\n    if (userData == nullptr) {\\n        return;\\n    }\\n    (void)codec;\\n    CodecUserData *codecUserData = static_cast&lt;CodecUserData *&gt;(userData);\\n    std::unique_lock&lt;std::mutex&gt; lock(codecUserData-&gt;inputMutex_);\\n    // 将输入buffer存放到输入队列中\\n    codecUserData-&gt;inputBufferInfoQueue_.emplace(index, buffer);\\n    // 通知输入线程开始运行\\n    codecUserData-&gt;inputCond_.notify_all();\\n}\\n\\nvoid SampleCallback::OnNewOutputBuffer(OH_AVCodec *codec, uint32_t index, OH_AVBuffer *buffer, void *userData) {\\n    if (userData == nullptr) {\\n        return;\\n    }\\n    (void)codec;\\n    CodecUserData *codecUserData = static_cast&lt;CodecUserData *&gt;(userData);\\n    std::unique_lock&lt;std::mutex&gt; lock(codecUserData-&gt;outputMutex_);\\n    // 将输出buffer存放到输出队列中\\n    codecUserData-&gt;outputBufferInfoQueue_.emplace(index, buffer);\\n    // 通知输出线程开始运行\\n    codecUserData-&gt;outputCond_.notify_all();\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/audiovivid-audiodecoder.html"
    },
    {
        "id": 1498,
        "pre": "// 创建解码器\\nOH_AVCodec * decoder = OH_AudioCodec_CreateByMime(info.audioCodecMime,false);\\n\\n// 参数配置\\nOH_AVFormat *format = OH_AVFormat_Create();\\nOH_AVFormat_SetIntValue(format, OH_MD_KEY_AUDIO_SAMPLE_FORMAT, SAMPLE_S16LE); //或者S24LE\\nOH_AVFormat_SetIntValue(format, OH_MD_KEY_AUD_CHANNEL_COUNT, sampleInfo.audioChannelCount);\\nOH_AVFormat_SetIntValue(format, OH_MD_KEY_AUD_SAMPLE_RATE, sampleInfo.audioSampleRate);\\nOH_AVFormat_SetIntValue(format, OH_MD_KEY_AAC_IS_ADTS, 1);\\nOH_AVFormat_SetLongValue(format, OH_MD_KEY_BITRATE, 96422);//码率，当前作为参考，解封装也可以获取到\\nOH_AVFormat_SetBuffer(format, OH_MD_KEY_CODEC_CONFIG, sampleInfo.audioCodecConfig, sampleInfo.audioCodecSize);\\nbool res = OH_AVFormat_SetLongValue(format, OH_MD_KEY_CHANNEL_LAYOUT, sampleInfo.audioChannelLayout);\\nret = OH_AudioCodec_Configure(decoder, format);\\nOH_AVFormat_Destroy(format);\\nformat = nullptr;\\n\\n// 设置回调，用于输入输出buffer准备完毕后由系统回调出来\\nint32_t ret = OH_AudioCodec_RegisterCallback(decoder,\\n    {SampleCallback::OnCodecError, SampleCallback::OnCodecFormatChange,\\n     SampleCallback::OnNeedInputBuffer, SampleCallback::OnNewOutputBuffer},codecUserData);\\n// 准备回调和参数设置完毕后通知系统解码器准备好了，下一步准备启动。\\nret = OH_AudioCodec_Prepare(decoder)",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建解码实例。 ",
        "import_module": null,
        "parent": "<li>创建解码实例。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/audiovivid-audiodecoder.html"
    },
    {
        "id": 1499,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-annotation.html"
    },
    {
        "id": 1500,
        "pre": "let callback = (pointAnnotation: map.PointAnnotation) => {\\n  console.info(\\\"pointAnnotationClick\\\", `pointAnnotationClick: ${pointAnnotation.getId()}`);\\n};\\nthis.mapEventManager.on(\\\"pointAnnotationClick\\\", callback);",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]设置监听点注释点击事件",
        "parent_text": "  [h2]设置监听点注释点击事件  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section7182124719591\\\"'> <a name='\\\"section7182124719591\\\"'></a><a name='\\\"section7182124719591\\\"'></a> <h4>[h2]设置监听点注释点击事件</h4>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-annotation.html"
    },
    {
        "id": 1501,
        "pre": "let animation: map.ScaleAnimation = new map.ScaleAnimation(1, 3, 1, 3);\\n// 设置动画单次的时长\\nanimation.setDuration(3000);\\n// 设置动画开始监听\\nlet callbackStart = () => {\\n  console.info(\\\"animationStart\\\", `callback`);\\n};\\nanimation.on(\\\"animationStart\\\", callbackStart);\\n// 设置动画结束监听\\nlet callbackEnd = () => {\\n  console.info(\\\"animationEnd\\\", `callback`);\\n};\\nanimation.on(\\\"animationEnd\\\", callbackEnd);\\n// 设置动画执行完成的状态\\nanimation.setFillMode(map.AnimationFillMode.BACKWARDS);\\n// 设置动画重复的方式\\nanimation.setRepeatMode(map.AnimationRepeatMode.REVERSE);\\n// 设置动画插值器\\nanimation.setInterpolator(Curve.Linear);\\n// 设置动画的重复次数\\nanimation.setRepeatCount(100);\\nthis.pointAnnotation.setAnimation(animation);\\nthis.pointAnnotation.startAnimation();",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]点注释动画",
        "parent_text": "  [h2]点注释动画 PointAnnotation调用setAnimation(animation: Animation)设置动画。 PointAnnotation调用startAnimation启动动画。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section150619459810\\\"'> <a name='\\\"section150619459810\\\"'></a><a name='\\\"section150619459810\\\"'></a> <h4>[h2]点注释动画</h4> <p rgb(38,38,38);\\\"=\"\" style='\\\"color:'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1175213362253\\\"' target='\\\"_blank\\\"'>PointAnnotation</a>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section688810310374\\\"' target='\\\"_blank\\\"'>setAnimation</a>(animation: <a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section12142182165518\\\"' target='\\\"_blank\\\"'>Animation</a>)设置动画。</p> <p rgb(38,38,38);\\\"=\"\" style='\\\"color:'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1175213362253\\\"' target='\\\"_blank\\\"'>PointAnnotation</a>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section15532754163419\\\"' target='\\\"_blank\\\"'>startAnimation</a>启动动画。</p>  <p><span><img height='\\\"514.706941\\\"' originheight='\\\"726\\\"' originwidth='\\\"401\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120157.04994741842002079959590409918308:50001231000000:2800:103D77FA0CD92CB4F059CD39E62651E8183711EB79BC03FEC23BBCDA9E8B4BE1.gif\\\"' title='\\\"点击放大\\\"' width='\\\"284.2875\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-annotation.html"
    },
    {
        "id": 1502,
        "pre": "let animation: map.FontSizeAnimation = new map.FontSizeAnimation(15, 45);\\n// 设置动画单次的时长\\nanimation.setDuration(3000);\\n// 设置动画开始监听\\nlet callbackStart = () => {\\n  console.info(\\\"animationStart\\\", `callback`);\\n};\\nanimation.on(\\\"animationStart\\\", callbackStart);\\n// 设置动画结束监听\\nlet callbackEnd = () => {\\n  console.info(\\\"animationEnd\\\", `callback`);\\n};\\nanimation.on(\\\"animationEnd\\\", callbackEnd);\\n// 设置动画执行完成的状态\\nanimation.setFillMode(map.AnimationFillMode.FORWARDS);\\n// 设置动画重复的方式\\nanimation.setRepeatMode(map.AnimationRepeatMode.REVERSE);\\n// 设置动画插值器\\nanimation.setInterpolator(Curve.Linear);\\n// 设置动画的重复次数\\nanimation.setRepeatCount(100);\\nthis.pointAnnotation.setTitleAnimation(animation);\\nthis.pointAnnotation.startTitleAnimation();",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]点注释标题动画",
        "parent_text": "  [h2]点注释标题动画 PointAnnotation调用setTitleAnimation(animation:FontSizeAnimation )设置标题动画。 PointAnnotation调用startTitleAnimation启动标题动画。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section417211171118\\\"'> <a name='\\\"section417211171118\\\"'></a><a name='\\\"section417211171118\\\"'></a> <h4>[h2]点注释标题动画</h4> <p rgb(38,38,38);\\\"=\"\" style='\\\"color:'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1175213362253\\\"' target='\\\"_blank\\\"'>PointAnnotation</a>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section884818504399\\\"' target='\\\"_blank\\\"'>setTitleAnimation</a>(animation:<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section12248638193518\\\"' target='\\\"_blank\\\"'>FontSizeAnimation</a> )设置标题动画。</p> <p rgb(38,38,38);\\\"=\"\" style='\\\"color:'><a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section1175213362253\\\"' target='\\\"_blank\\\"'>PointAnnotation</a>调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/map-map#section108531150183916\\\"' target='\\\"_blank\\\"'>startTitleAnimation</a>启动标题动画。</p>  <p><span><img height='\\\"529.139835\\\"' originheight='\\\"726\\\"' originwidth='\\\"401\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120157.15917189860557249934804022423225:50001231000000:2800:EFA18AF4542D0498C88F267BB0216192B82DD23EAEDE19D6121B075EE2957745.gif\\\"' title='\\\"点击放大\\\"' width='\\\"292.26750000000004\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-annotation.html"
    },
    {
        "id": 1503,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/semi\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_semi.html"
    },
    {
        "id": 1504,
        "pre": "export const name = 'ESLint';\\n\\nexport class Foo {\\n  public bar = '1';\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_semi.html"
    },
    {
        "id": 1505,
        "pre": "// 默认在语句末尾需要加分号\\nexport const name = 'ESLint'\\n\\nexport class Foo {\\n  // 默认在语句末尾需要加分号\\n  public bar = '1'\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_semi.html"
    },
    {
        "id": 1506,
        "pre": "import hilog from '@ohos.hilog';\\nimport testNapi from 'libentry.so'\\n\\n@Entry\\n@Component\\nstruct Index {\\n    @State message: string = 'Hello World'\\n\\n    build() {\\n        Row() {\\n        Column() {\\n            Text(this.message)\\n            .fontSize(50)\\n            .fontWeight(FontWeight.Bold)\\n            .onClick(() => {\\n                hilog.info(0x0000, 'testTag', 'Test NAPI 2 + 3 = %{public}d', testNapi.add(2, 3));\\n            })\\n        }\\n        .width('100%')\\n        }\\n        .height('100%')\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "在Deveco Studio新建Native C++应用，默认生成的项目中包含index.ets文件，在entry\\\\src\\\\main\\\\cpp目录下会自动生成一个cpp文件(hello.cpp或napi_init.cpp，本示例以hello.cpp文件名为例)。 index.ets代码如下，onClick中调用了testNapi的add函数，该函数在hello.cpp中定义。 ",
        "import_module": null,
        "parent": "<li><p>在Deveco Studio新建Native C++应用，默认生成的项目中包含index.ets文件，在entry\\\\src\\\\main\\\\cpp目录下会自动生成一个cpp文件(hello.cpp或napi_init.cpp，本示例以hello.cpp文件名为例)。</p> <p>index.ets代码如下，onClick中调用了testNapi的add函数，该函数在hello.cpp中定义。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hitracechain-guidelines-ndk.html"
    },
    {
        "id": 1507,
        "pre": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入模块。",
        "import_module": "import { fileGuard } from '@kit.EnterpriseDataGuardKit';",
        "parent": "<li>导入模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/fileguard-kia-event.html"
    },
    {
        "id": 1508,
        "pre": "import { navi } from '@kit.MapKit';",
        "type": "Import",
        "function_call": null,
        "function_name": null,
        "parent_text": "      导入相关模块。       ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      导入相关模块。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-snap.html"
    },
    {
        "id": 1509,
        "pre": "async testSnapToRoads() {\\n  let params: navi.SnapToRoadsParams = {\\n    // 道路贴合点集合，不能超过100个，且相邻两个点距离需小于等于500米\\n    points: [{\\n      latitude: 31.984410259206815,\\n      longitude: 118.76625379397866\\n    }]\\n  };\\n  const result = await navi.snapToRoads(params);\\n  console.info(\\\"Succeeded in snapping to roads.\\\");\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      根据给定的坐标点捕捉道路，将用户的轨迹纠正到道路上，从而返回用户实际驾车经过的道路坐标。       ",
        "import_module": "import { navi } from '@kit.MapKit';",
        "parent": "<div class='\\\"p\\\"'>      根据给定的坐标点捕捉道路，将用户的轨迹纠正到道路上，从而返回用户实际驾车经过的道路坐标。       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-navi-snap.html"
    },
    {
        "id": 1510,
        "pre": "import { bundleManager, common, Want } from '@kit.AbilityKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { productViewManager } from '@kit.StoreKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关功能模块。",
        "import_module": null,
        "parent": "<li>导入相关功能模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/health-privacy-authorization.html"
    },
    {
        "id": 1511,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  controller: RichEditorController = new RichEditorController()\\n  options: RichEditorOptions = { controller: this.controller }\\n\\n  build() {\\n    Column() {\\n      Column() {\\n        RichEditor(this.options)\\n          .onWillChange((value: RichEditorChangeValue) => {\\n            if (value?.replacedImageSpans[0]?.imageStyle?.objectFit != 0) {\\n              return true;\\n            }\\n            for(let item of value.replacedImageSpans) {\\n              this.controller.addImageSpan(item.valuePixelMap, {\\n                imageStyle: {\\n                  size: [\\\"500px\\\", \\\"500px\\\"],\\n                  layoutStyle: {\\n                    borderRadius: '10px',\\n                  }\\n                }\\n              })\\n            }\\n            return false;\\n          })\\n          .borderWidth(1)\\n          .borderColor(Color.Green)\\n          .width(\\\"100%\\\")\\n          .height(\\\"100%\\\")\\n      }\\n      .borderWidth(1)\\n      .borderColor(Color.Red)\\n      .width(\\\"100%\\\")\\n      .height(\\\"70%\\\")\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "添加RichEditor富文本组件，即可在富文本组件中右键中选择其他设备进行导入，通过onWillChange属性对回传的照片进行处理。 使用流程如下： 1.在富文本区域右键。  2.选择想要使用的能力。  3.等待对端设备拍照回传。  4.图片回传后  ",
        "import_module": null,
        "parent": "<li>添加<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-richeditor\\\"' target='\\\"_blank\\\"'>RichEditor</a>富文本组件，即可在富文本组件中右键中选择其他设备进行导入，通过onWillChange属性对回传的照片进行处理。 <p>使用流程如下：</p> <p>1.在富文本区域右键。</p> <p><span><img originheight='\\\"274\\\"' originwidth='\\\"172\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121029.08206328723604528706002003606734:50001231000000:2800:48494574BC408128336015E73593311E5B1A73CBB514ACD3326BF67B8AAB231A.png\\\"'/></span></p> <p>2.选择想要使用的能力。</p> <p><span><img originheight='\\\"286\\\"' originwidth='\\\"185\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121029.17044300462770581871563764147845:50001231000000:2800:83931781AF86F83306CE15AE587534357CF77EB1CBB284C1D95F73D9CD24DF01.png\\\"'/></span></p> <p>3.等待对端设备拍照回传。</p> <p><span><img originheight='\\\"90\\\"' originwidth='\\\"294\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121029.94905531846341319219335886878299:50001231000000:2800:0F72A1231E24254B73F45B48B2F9CC7118CD4A5D583A746EDAE8DD864982F183.png\\\"'/></span></p> <p>4.图片回传后</p> <p><span><img originheight='\\\"245\\\"' originwidth='\\\"256\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408121029.88851919123027810995466785806941:50001231000000:2800:7613CC29D11A695AC54B1180E59B466241D761B815408DCAC330EC7C2457900F.png\\\"'/></span></p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/servicecollaboration-richeditor-title.html"
    },
    {
        "id": 1512,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  controller: RichEditorController = new RichEditorController()\\n  options: RichEditorOptions = { controller: this.controller }\\n\\n  build() {\\n    Column() {\\n      Column() {\\n        RichEditor(this.options)\\n          .editMenuOptions({\\n            onCreateMenu: (menuItems: Array<TextMenuItem>) => {\\n              if (menuItems.length === 0) {\\n                return menuItems;\\n              }\\n              let newMenuItems: TextMenuItem[] = [];\\n              menuItems.forEach((item, index) => {\\n                if(!item.id.equals(TextMenuItemId.COLLABORATION_SERVICE)) {\\n                  newMenuItems.push(item);\\n                }\\n              })\\n              return newMenuItems;\\n            },\\n            onMenuItemClick: (menuItem: TextMenuItem, textRange: TextRange) => {\\n              return false;\\n            }\\n          })\\n          .borderWidth(1)\\n          .borderColor(Color.Green)\\n          .width(\\\"100%\\\")\\n          .height(\\\"100%\\\")\\n      }\\n      .borderWidth(1)\\n      .borderColor(Color.Red)\\n      .width(\\\"100%\\\")\\n      .height(\\\"70%\\\")\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "关闭富文本跨设备互通能力",
        "parent_text": "关闭富文本跨设备互通能力如果需要关闭富文本右键菜单跨设备互通能力，可通过editMenuOptions属性自定义菜单内容去除跨设备互通菜单项即可规避，示例如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section159395516536\\\"'><a name='\\\"section159395516536\\\"'></a><a name='\\\"section159395516536\\\"'></a><h4>关闭富文本跨设备互通能力</h4><p>如果需要关闭富文本右键菜单跨设备互通能力，可通过editMenuOptions属性自定义菜单内容去除跨设备互通菜单项即可规避，示例如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/servicecollaboration-richeditor-title.html"
    },
    {
        "id": 1513,
        "pre": "\\\"requestPermissions\\\":[\\n    {\\n      \\\"name\\\" : \\\"ohos.permission.INTERNET\\\"\\n    }\\n  ]",
        "type": "Reference",
        "function_call": "getEmbedId()",
        "function_name": "Web页面中同层渲染输入框",
        "parent_text": "  Web页面中同层渲染输入框 在Web页面中，可以使用ArkUI原生的TextInput组件进行同层渲染。此处利用同层渲染展示三个输入框，渲染效果图如下： 图4 同层渲染输入框   在Web页面中标记需要同层渲染的HTML标签。 同层渲染支持<embed>/<object>两种标签。type类型可任意指定，两个字符串参数均不区分大小写，ArkWeb内核将会统一转换为小写。其中，tag字符串使用全字符串匹配，type使用字符串前缀匹配。 若开发者不使用该接口或该接口接收的为非法字符串（空字符串）时，ArkWeb内核将使用默认设置，即\\\"embed\\\" + \\\"native/\\\"前缀模式。若指定类型与w3c定义的object或embed标准类型重合，如registerNativeEmbedRule(\\\"object\\\", \\\"application/pdf\\\")，ArkWeb将遵循w3c标准行为，不会将其识别为同层标签。  采用<embed>标签。 <!--HAP's src/main/resources/rawfile/text.html-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>同层渲染测试html</title>\\n    <meta name=\\\"viewport\\\">\\n</head>\\n\\n<body style=\\\"background:white\\\">\\n\\n<embed id = \\\"input1\\\" type=\\\"native/view\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 600px\\\"/>\\n\\n<embed id = \\\"input2\\\" type=\\\"native/view2\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"/>\\n\\n<embed id = \\\"input3\\\" type=\\\"native/view3\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"/>\\n\\n</body>\\n</html> 采用<object>标签。 需要使用registerNativeEmbedRule注册object标签。 // ...\\nWeb({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n  // 注册同层标签为\\\"object\\\"，类型为\\\"test\\\"前缀\\n  .registerNativeEmbedRule(\\\"object\\\", \\\"test\\\")\\n  // ... 与registerNativeEmbedRule相对应的前端页面代码，类型可使用\\\"test\\\"及以\\\"test\\\"为前缀的字串。 <!--HAP's src/main/resources/rawfile/text.html-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>同层渲染测试html</title>\\n    <meta name=\\\"viewport\\\">\\n</head>\\n\\n<body style=\\\"background:white\\\">\\n\\n<object id = \\\"input1\\\" type=\\\"test/input\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 600px\\\"></object>\\n\\n<object id = \\\"input2\\\" type=\\\"test/input\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"></object>\\n\\n<object id = \\\"input3\\\" type=\\\"test/input\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"></object>\\n\\n</body>\\n</html>  在应用侧开启同层渲染功能。 同层渲染功能默认不开启，如果要使用同层渲染的功能，可通过enableNativeEmbedMode来开启。 // xxx.ets\\nimport { webview } from '@kit.ArkWeb';\\n@Entry\\n@Component\\nstruct WebComponent {\\n  controller: webview.WebviewController = new webview.WebviewController();\\n\\n  build() {\\n    Column() {\\n      Web({ src: 'www.example.com', controller: this.controller })\\n        // 配置同层渲染开关开启。\\n        .enableNativeEmbedMode(true)\\n    }\\n  }\\n} 创建自定义组件。 同层渲染功能开启后，展示在对应区域的原生组件。 @Component\\nstruct TextInputComponent {\\n  @Prop params: Params\\n  @State bkColor: Color = Color.White\\n\\n  build() {\\n    Column() {\\n      TextInput({text: '', placeholder: 'please input your word...'})\\n        .placeholderColor(Color.Gray)\\n        .id(this.params?.elementId)\\n        .placeholderFont({size: 13, weight: 400})\\n        .caretColor(Color.Gray)\\n        .width(this.params?.width)\\n        .height(this.params?.height)\\n        .fontSize(14)\\n        .fontColor(Color.Black)\\n    }\\n    //自定义组件中的最外层容器组件宽高应该为同层标签的宽高\\n    .width(this.params.width)\\n    .height(this.params.height)\\n  }\\n}\\n\\n@Builder\\nfunction TextInputBuilder(params:Params) {\\n  TextInputComponent({params: params})\\n    .width(params.width)\\n    .height(params.height)\\n    .backgroundColor(Color.White)\\n} 创建节点控制器。 用于控制和反馈对应NodeContainer上的节点行为。 class MyNodeController extends NodeController {\\n  private rootNode: BuilderNode<[Params]> | undefined | null;\\n  private embedId_: string = \\\"\\\";\\n  private surfaceId_: string = \\\"\\\";\\n  private renderType_: NodeRenderType = NodeRenderType.RENDER_TYPE_DISPLAY;\\n  private width_: number = 0;\\n  private height_: number = 0;\\n  private type_: string = \\\"\\\";\\n  private isDestroy_: boolean = false;\\n\\n  setRenderOption(params: NodeControllerParams) {\\n    this.surfaceId_ = params.surfaceId;\\n    this.renderType_ = params.renderType;\\n    this.embedId_ = params.embedId;\\n    this.width_ = params.width;\\n    this.height_ = params.height;\\n    this.type_ = params.type;\\n  }\\n\\n  // 必须要重写的方法，用于构建节点数、返回节点数挂载在对应NodeContainer中。\\n  // 在对应NodeContainer创建的时候调用、或者通过rebuild方法调用刷新。\\n  makeNode(uiContext: UIContext): FrameNode | null {\\n    if (this.isDestroy_) { // rootNode为null\\n      return null;\\n    }\\n    if (!this.rootNode) {// rootNode 为undefined时\\n      this.rootNode = new BuilderNode(uiContext, { surfaceId: this.surfaceId_, type: this.renderType_ });\\n      if(this.rootNode) {\\n        this.rootNode.build(wrapBuilder(TextInputBuilder), {  textOne: \\\"myTextInput\\\", width: this.width_, height: this.height_  })\\n        return this.rootNode.getFrameNode();\\n      }else{\\n        return null;\\n      }\\n    }\\n    // 返回FrameNode节点。\\n    return this.rootNode.getFrameNode();\\n  }\\n\\n  setBuilderNode(rootNode: BuilderNode<Params[]> | null): void {\\n    this.rootNode = rootNode;\\n  }\\n\\n  getBuilderNode(): BuilderNode<[Params]> | undefined | null {\\n    return this.rootNode;\\n  }\\n\\n  updateNode(arg: Object): void {\\n    this.rootNode?.update(arg);\\n  }\\n\\n  getEmbedId(): string {\\n    return this.embedId_;\\n  }\\n  \\n  setDestroy(isDestroy: boolean): void {\\n    this.isDestroy_ = isDestroy;\\n    if (this.isDestroy_) {\\n      this.rootNode = null;\\n    }\\n  }\\n \\n  postEvent(event: TouchEvent | undefined): boolean {\\n    return this.rootNode?.postTouchEvent(event) as boolean\\n  }\\n} 监听同层渲染的生命周期变化。 开启该功能后，每当网页中存在同层渲染支持的标签时，ArkWeb内核会触发由onNativeEmbedLifecycleChange注册的回调函数。 开发者则需要调用onNativeEmbedLifecycleChange来监听同层渲染标签的生命周期变化。 build() {\\n  Row() {\\n    Column() {\\n      Stack() {\\n        ForEach(this.componentIdArr, (componentId: string) => {\\n          NodeContainer(this.nodeControllerMap.get(componentId))\\n            .position(this.positionMap.get(componentId))\\n            .width(this.widthMap.get(componentId))\\n            .height(this.heightMap.get(componentId))\\n        }, (embedId: string) => embedId)\\n        // Web组件加载本地text.html页面\\n        Web({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n          // 配置同层渲染开关开启\\n          .enableNativeEmbedMode(true)\\n            // 注册同层标签为\\\"object\\\"，类型为\\\"test\\\"前缀\\n          .registerNativeEmbedRule(\\\"object\\\", \\\"test\\\")\\n            // 获取embed标签的生命周期变化数据\\n          .onNativeEmbedLifecycleChange((embed) => {\\n            console.log(\\\"NativeEmbed surfaceId\\\" + embed.surfaceId);\\n            // 如果使用embed.info.id作为映射nodeController的key，请在h5页面显式指定id\\n            const componentId = embed.info?.id?.toString() as string\\n            if (embed.status == NativeEmbedStatus.CREATE) {\\n              console.log(\\\"NativeEmbed create\\\" + JSON.stringify(embed.info));\\n              // 创建节点控制器、设置参数并rebuild\\n              let nodeController = new MyNodeController()\\n              // embed.info.width和embed.info.height单位是px格式，需要转换成ets侧的默认单位vp\\n              nodeController.setRenderOption({surfaceId : embed.surfaceId as string,\\n                type : embed.info?.type as string,\\n                renderType : NodeRenderType.RENDER_TYPE_TEXTURE,\\n                embedId : embed.embedId as string,\\n                width : px2vp(embed.info?.width),\\n                height : px2vp(embed.info?.height)})\\n              this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n              nodeController.setDestroy(false);\\n              //根据web传入的embed的id属性作为key，将nodeController存入Map\\n              this.nodeControllerMap.set(componentId, nodeController);\\n              this.widthMap.set(componentId, px2vp(embed.info?.width));\\n              this.heightMap.set(componentId, px2vp(embed.info?.height));\\n              this.positionMap.set(componentId, this.edges);\\n              // 将web传入的embed的id属性存入@State状态数组变量中，用于动态创建nodeContainer节点容器,需要将push动作放在set之后\\n              this.componentIdArr.push(componentId)\\n            } else if (embed.status == NativeEmbedStatus.UPDATE) {\\n              let nodeController = this.nodeControllerMap.get(componentId);\\n              console.log(\\\"NativeEmbed update\\\" + JSON.stringify(embed));\\n              this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n              this.positionMap.set(componentId, this.edges);\\n              this.widthMap.set(componentId, px2vp(embed.info?.width));\\n              this.heightMap.set(componentId, px2vp(embed.info?.height));\\n              nodeController?.updateNode({textOne: 'update', width: px2vp(embed.info?.width), height: px2vp(embed.info?.height)} as ESObject)\\n            } else if (embed.status == NativeEmbedStatus.DESTROY) {\\n              console.log(\\\"NativeEmbed destroy\\\" + JSON.stringify(embed));\\n              let nodeController = this.nodeControllerMap.get(componentId);\\n              nodeController?.setDestroy(true)\\n              this.nodeControllerMap.clear();\\n              this.positionMap.delete(componentId);\\n              this.widthMap.delete(componentId);\\n              this.heightMap.delete(componentId);\\n              this.componentIdArr.filter((value: string) => value != componentId)\\n            } else {\\n              console.log(\\\"NativeEmbed status\\\" + embed.status);\\n            }\\n          })\\n      }.height(\\\"80%\\\")\\n    }\\n  }\\n} 同层渲染手势事件。 开启该功能后，每当在同层渲染的区域进行触摸操作时，ArkWeb内核会触发onNativeEmbedGestureEvent注册的回调函数。 开发者则需要调用onNativeEmbedGestureEvent来监听同层渲染同层渲染区域的手势事件。 build() {\\n  Row() {\\n    Column() {\\n      Stack() {\\n        ForEach(this.componentIdArr, (componentId: string) => {\\n          NodeContainer(this.nodeControllerMap.get(componentId))\\n            .position(this.positionMap.get(componentId))\\n            .width(this.widthMap.get(componentId))\\n            .height(this.heightMap.get(componentId))\\n        }, (embedId: string) => embedId)\\n        // Web组件加载本地text.html页面。\\n        Web({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n          // 配置同层渲染开关开启。\\n          .enableNativeEmbedMode(true)\\n            // 获取embed标签的生命周期变化数据。\\n          .onNativeEmbedLifecycleChange((embed) => {\\n            // 生命周期变化实现\\n          })\\n          .onNativeEmbedGestureEvent((touch) => {\\n            console.log(\\\"NativeEmbed onNativeEmbedGestureEvent\\\" + JSON.stringify(touch.touchEvent));\\n            this.componentIdArr.forEach((componentId: string) => {\\n              let nodeController = this.nodeControllerMap.get(componentId);\\n              // 将获取到的同层区域的事件发送到该区域embedId对应的nodeController上\\n              if(nodeController?.getEmbedId() == touch.embedId) {\\n                let ret = nodeController?.postEvent(touch.touchEvent)\\n                if(ret) {\\n                  console.log(\\\"onNativeEmbedGestureEvent success \\\" + componentId);\\n                } else {\\n                  console.log(\\\"onNativeEmbedGestureEvent fail \\\" + componentId);\\n                }\\n                if(touch.result) {\\n                  // 通知Web组件手势事件消费结果\\n                  touch.result.setGestureEventResult(ret);\\n                }\\n              }\\n            })\\n          })\\n      }\\n    }\\n  }\\n}  完整示例： 使用前请在module.json5中添加网络权限，添加方法请参考在配置文件中声明权限。  应用侧代码。 // 创建NodeController\\nimport webview from '@ohos.web.webview';\\nimport { UIContext } from '@ohos.arkui.UIContext';\\nimport { NodeController, BuilderNode, NodeRenderType, FrameNode } from \\\"@ohos.arkui.node\\\";\\n\\n@Observed\\ndeclare class Params{\\n  elementId: string\\n  textOne: string\\n  textTwo: string\\n  width: number\\n  height: number\\n}\\n\\ndeclare class NodeControllerParams {\\n  surfaceId: string\\n  type: string\\n  renderType: NodeRenderType\\n  embedId: string\\n  width: number\\n  height: number\\n}\\n\\n// 用于控制和反馈对应的NodeContainer上的节点的行为，需要与NodeContainer一起使用。\\nclass MyNodeController extends NodeController {\\n  private rootNode: BuilderNode<[Params]> | undefined | null;\\n  private embedId_: string = \\\"\\\";\\n  private surfaceId_: string = \\\"\\\";\\n  private renderType_: NodeRenderType = NodeRenderType.RENDER_TYPE_DISPLAY;\\n  private width_: number = 0;\\n  private height_: number = 0;\\n  private type_: string = \\\"\\\";\\n  private isDestroy_: boolean = false;\\n\\n  setRenderOption(params: NodeControllerParams) {\\n    this.surfaceId_ = params.surfaceId;\\n    this.renderType_ = params.renderType;\\n    this.embedId_ = params.embedId;\\n    this.width_ = params.width;\\n    this.height_ = params.height;\\n    this.type_ = params.type;\\n  }\\n\\n  // 必须要重写的方法，用于构建节点数、返回节点数挂载在对应NodeContainer中。\\n  // 在对应NodeContainer创建的时候调用、或者通过rebuild方法调用刷新。\\n  makeNode(uiContext: UIContext): FrameNode | null {\\n    if (this.isDestroy_) { // rootNode为null\\n      return null;\\n    }\\n    if (!this.rootNode) {// rootNode 为undefined时\\n      this.rootNode = new BuilderNode(uiContext, { surfaceId: this.surfaceId_, type: this.renderType_ });\\n      if(this.rootNode) {\\n        this.rootNode.build(wrapBuilder(TextInputBuilder), {  textOne: \\\"myTextInput\\\", width: this.width_, height: this.height_  })\\n        return this.rootNode.getFrameNode();\\n      }else{\\n        return null;\\n      }\\n    }\\n    // 返回FrameNode节点。\\n    return this.rootNode.getFrameNode();\\n  }\\n\\n  setBuilderNode(rootNode: BuilderNode<Params[]> | null): void {\\n    this.rootNode = rootNode;\\n  }\\n\\n  getBuilderNode(): BuilderNode<[Params]> | undefined | null {\\n    return this.rootNode;\\n  }\\n\\n  updateNode(arg: Object): void {\\n    this.rootNode?.update(arg);\\n  }\\n\\n  getEmbedId(): string {\\n    return this.embedId_;\\n  }\\n\\n  setDestroy(isDestroy: boolean): void {\\n    this.isDestroy_ = isDestroy;\\n    if (this.isDestroy_) {\\n      this.rootNode = null;\\n    }\\n  }\\n\\n  postEvent(event: TouchEvent | undefined): boolean {\\n    return this.rootNode?.postTouchEvent(event) as boolean\\n  }\\n}\\n\\n@Component\\nstruct TextInputComponent {\\n  @Prop params: Params\\n  @State bkColor: Color = Color.White\\n\\n  build() {\\n    Column() {\\n      TextInput({text: '', placeholder: 'please input your word...'})\\n        .placeholderColor(Color.Gray)\\n        .id(this.params?.elementId)\\n        .placeholderFont({size: 13, weight: 400})\\n        .caretColor(Color.Gray)\\n        .fontSize(14)\\n        .fontColor(Color.Black)\\n    }\\n    //自定义组件中的最外层容器组件宽高应该为同层标签的宽高\\n    .width(this.params.width)\\n    .height(this.params.height)\\n  }\\n}\\n\\n// @Builder中为动态组件的具体组件内容。\\n@Builder\\nfunction TextInputBuilder(params:Params) {\\n  TextInputComponent({params: params})\\n    .width(params.width)\\n    .height(params.height)\\n    .backgroundColor(Color.White)\\n}\\n\\n@Entry\\n@Component\\nstruct Page{\\n  browserTabController: WebviewController = new webview.WebviewController()\\n  private nodeControllerMap: Map<string, MyNodeController> = new Map();\\n  @State componentIdArr: Array<string> = [];\\n  @State posMap: Map<string, Position | undefined> = new Map();\\n  @State widthMap: Map<string, number> = new Map();\\n  @State heightMap: Map<string, number> = new Map();\\n  @State positionMap: Map<string, Edges> = new Map();\\n  @State edges: Edges = {};\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Stack() {\\n          ForEach(this.componentIdArr, (componentId: string) => {\\n            NodeContainer(this.nodeControllerMap.get(componentId))\\n              .position(this.positionMap.get(componentId))\\n              .width(this.widthMap.get(componentId))\\n              .height(this.heightMap.get(componentId))\\n          }, (embedId: string) => embedId)\\n          // Web组件加载本地text.html页面。\\n          Web({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n            // 配置同层渲染开关开启。\\n            .enableNativeEmbedMode(true)\\n            // 获取embed标签的生命周期变化数据。\\n            .onNativeEmbedLifecycleChange((embed) => {\\n               console.log(\\\"NativeEmbed surfaceId\\\" + embed.surfaceId);\\n               // 如果使用embed.info.id作为映射nodeController的key，请在h5页面显式指定id\\n               const componentId = embed.info?.id?.toString() as string\\n               if (embed.status == NativeEmbedStatus.CREATE) {\\n                 console.log(\\\"NativeEmbed create\\\" + JSON.stringify(embed.info));\\n                 // 创建节点控制器、设置参数并rebuild\\n                 let nodeController = new MyNodeController()\\n                 // embed.info.width和embed.info.height单位是px格式，需要转换成ets侧的默认单位vp\\n                 nodeController.setRenderOption({surfaceId : embed.surfaceId as string,\\n                   type : embed.info?.type as string,\\n                   renderType : NodeRenderType.RENDER_TYPE_TEXTURE,\\n                   embedId : embed.embedId as string,\\n                   width : px2vp(embed.info?.width),\\n                   height : px2vp(embed.info?.height)})\\n                 this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n                 nodeController.setDestroy(false);\\n                 //根据web传入的embed的id属性作为key，将nodeController存入Map\\n                 this.nodeControllerMap.set(componentId, nodeController);\\n                 this.widthMap.set(componentId, px2vp(embed.info?.width));\\n                 this.heightMap.set(componentId, px2vp(embed.info?.height));\\n                 this.positionMap.set(componentId, this.edges);\\n                 // 将web传入的embed的id属性存入@State状态数组变量中，用于动态创建nodeContainer节点容器,需要将push动作放在set之后\\n                 this.componentIdArr.push(componentId)\\n               } else if (embed.status == NativeEmbedStatus.UPDATE) {\\n                 let nodeController = this.nodeControllerMap.get(componentId);\\n                 console.log(\\\"NativeEmbed update\\\" + JSON.stringify(embed));\\n                 this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n                 this.positionMap.set(componentId, this.edges);\\n                 this.widthMap.set(componentId, px2vp(embed.info?.width));\\n                 this.heightMap.set(componentId, px2vp(embed.info?.height));\\n                 nodeController?.updateNode({textOne: 'update', width: px2vp(embed.info?.width), height: px2vp(embed.info?.height)} as ESObject)\\n               } else if (embed.status == NativeEmbedStatus.DESTROY) {\\n                 console.log(\\\"NativeEmbed destroy\\\" + JSON.stringify(embed));\\n                 let nodeController = this.nodeControllerMap.get(componentId);\\n                 nodeController?.setDestroy(true)\\n                 this.nodeControllerMap.clear();\\n                 this.positionMap.delete(componentId);\\n                 this.widthMap.delete(componentId);\\n                 this.heightMap.delete(componentId);\\n                 this.componentIdArr.filter((value: string) => value != componentId)\\n               } else {\\n                 console.log(\\\"NativeEmbed status\\\" + embed.status);\\n               }\\n             })// 获取同层渲染组件触摸事件信息。\\n            .onNativeEmbedGestureEvent((touch) => {\\n              console.log(\\\"NativeEmbed onNativeEmbedGestureEvent\\\" + JSON.stringify(touch.touchEvent));\\n              this.componentIdArr.forEach((componentId: string) => {\\n                let nodeController = this.nodeControllerMap.get(componentId);\\n                // 将获取到的同层区域的事件发送到该区域embedId对应的nodeController上\\n                if(nodeController?.getEmbedId() == touch.embedId) {\\n                  let ret = nodeController?.postEvent(touch.touchEvent)\\n                  if(ret) {\\n                    console.log(\\\"onNativeEmbedGestureEvent success \\\" + componentId);\\n                  } else {\\n                    console.log(\\\"onNativeEmbedGestureEvent fail \\\" + componentId);\\n                  }\\n                  if(touch.result) {\\n                    // 通知Web组件手势事件消费结果\\n                    touch.result.setGestureEventResult(ret);\\n                  }\\n                }\\n              })\\n            })\\n        }\\n      }\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"web页面中同层渲染输入框\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459181__web%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E8%BE%93%E5%85%A5%E6%A1%86\\\"'></a><a name='\\\"web%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%90%8C%E5%B1%82%E6%B8%B2%E6%9F%93%E8%BE%93%E5%85%A5%E6%A1%86\\\"'></a> <h4>Web页面中同层渲染输入框</h4> <p>在Web页面中，可以使用ArkUI原生的TextInput组件进行同层渲染。此处利用同层渲染展示三个输入框，渲染效果图如下：</p> <p><strong>图4</strong> 同层渲染输入框</p> <p><span><img originheight='\\\"619\\\"' originwidth='\\\"388\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120458.00553219459142994586791371998507:50001231000000:2800:6EBB22FF02AF5C8E31A4087E2615A1F4A6035CF2733F26EBCC5E7CCAD3B2DD8C.png\\\"'/></span></p> <ol> <li><p>在Web页面中标记需要同层渲染的HTML标签。</p> <p>同层渲染支持&lt;embed&gt;/&lt;object&gt;两种标签。type类型可任意指定，两个字符串参数均不区分大小写，ArkWeb内核将会统一转换为小写。其中，tag字符串使用全字符串匹配，type使用字符串前缀匹配。</p> <p>若开发者不使用该接口或该接口接收的为非法字符串（空字符串）时，ArkWeb内核将使用默认设置，即\\\"embed\\\" + \\\"native/\\\"前缀模式。若指定类型与w3c定义的object或embed标准类型重合，如registerNativeEmbedRule(\\\"object\\\", \\\"application/pdf\\\")，ArkWeb将遵循w3c标准行为，不会将其识别为同层标签。</p> <ul> <li><p>采用&lt;embed&gt;标签。</p> <pre class='\\\"html\\\"'>&lt;!--HAP's src/main/resources/rawfile/text.html--&gt;\\n&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n    &lt;title&gt;同层渲染测试html&lt;/title&gt;\\n    &lt;meta name=\\\"viewport\\\"&gt;\\n&lt;/head&gt;\\n\\n&lt;body style=\\\"background:white\\\"&gt;\\n\\n&lt;embed id = \\\"input1\\\" type=\\\"native/view\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 600px\\\"/&gt;\\n\\n&lt;embed id = \\\"input2\\\" type=\\\"native/view2\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"/&gt;\\n\\n&lt;embed id = \\\"input3\\\" type=\\\"native/view3\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"/&gt;\\n\\n&lt;/body&gt;\\n&lt;/html&gt;</pre></li> <li><p>采用&lt;object&gt;标签。</p> <p>需要使用registerNativeEmbedRule注册object标签。</p> <pre class='\\\"ts\\\"'>// ...\\nWeb({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n  // 注册同层标签为\\\"object\\\"，类型为\\\"test\\\"前缀\\n  .registerNativeEmbedRule(\\\"object\\\", \\\"test\\\")\\n  // ...</pre> <p>与registerNativeEmbedRule相对应的前端页面代码，类型可使用\\\"test\\\"及以\\\"test\\\"为前缀的字串。</p> <pre class='\\\"html\\\"'>&lt;!--HAP's src/main/resources/rawfile/text.html--&gt;\\n&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n    &lt;title&gt;同层渲染测试html&lt;/title&gt;\\n    &lt;meta name=\\\"viewport\\\"&gt;\\n&lt;/head&gt;\\n\\n&lt;body style=\\\"background:white\\\"&gt;\\n\\n&lt;object id = \\\"input1\\\" type=\\\"test/input\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 600px\\\"&gt;&lt;/object&gt;\\n\\n&lt;object id = \\\"input2\\\" type=\\\"test/input\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"&gt;&lt;/object&gt;\\n\\n&lt;object id = \\\"input3\\\" type=\\\"test/input\\\" style=\\\"width: 100%; height: 100px; margin: 30px; margin-top: 50px\\\"&gt;&lt;/object&gt;\\n\\n&lt;/body&gt;\\n&lt;/html&gt;</pre></li> </ul></li> <li><p>在应用侧开启同层渲染功能。</p> <p>同层渲染功能默认不开启，如果要使用同层渲染的功能，可通过enableNativeEmbedMode来开启。</p> <pre class='\\\"ts\\\"'>// xxx.ets\\nimport { webview } from '@kit.ArkWeb';\\n@Entry\\n@Component\\nstruct WebComponent {\\n  controller: webview.WebviewController = new webview.WebviewController();\\n\\n  build() {\\n    Column() {\\n      Web({ src: 'www.example.com', controller: this.controller })\\n        // 配置同层渲染开关开启。\\n        .enableNativeEmbedMode(true)\\n    }\\n  }\\n}</pre></li> <li><p>创建自定义组件。</p> <p>同层渲染功能开启后，展示在对应区域的原生组件。</p> <pre class='\\\"ts\\\"'>@Component\\nstruct TextInputComponent {\\n  @Prop params: Params\\n  @State bkColor: Color = Color.White\\n\\n  build() {\\n    Column() {\\n      TextInput({text: '', placeholder: 'please input your word...'})\\n        .placeholderColor(Color.Gray)\\n        .id(this.params?.elementId)\\n        .placeholderFont({size: 13, weight: 400})\\n        .caretColor(Color.Gray)\\n        .width(this.params?.width)\\n        .height(this.params?.height)\\n        .fontSize(14)\\n        .fontColor(Color.Black)\\n    }\\n    //自定义组件中的最外层容器组件宽高应该为同层标签的宽高\\n    .width(this.params.width)\\n    .height(this.params.height)\\n  }\\n}\\n\\n@Builder\\nfunction TextInputBuilder(params:Params) {\\n  TextInputComponent({params: params})\\n    .width(params.width)\\n    .height(params.height)\\n    .backgroundColor(Color.White)\\n}</pre></li> <li><p>创建节点控制器。</p> <p>用于控制和反馈对应NodeContainer上的节点行为。</p> <pre class='\\\"ts\\\"'>class MyNodeController extends NodeController {\\n  private rootNode: BuilderNode&lt;[Params]&gt; | undefined | null;\\n  private embedId_: string = \\\"\\\";\\n  private surfaceId_: string = \\\"\\\";\\n  private renderType_: NodeRenderType = NodeRenderType.RENDER_TYPE_DISPLAY;\\n  private width_: number = 0;\\n  private height_: number = 0;\\n  private type_: string = \\\"\\\";\\n  private isDestroy_: boolean = false;\\n\\n  setRenderOption(params: NodeControllerParams) {\\n    this.surfaceId_ = params.surfaceId;\\n    this.renderType_ = params.renderType;\\n    this.embedId_ = params.embedId;\\n    this.width_ = params.width;\\n    this.height_ = params.height;\\n    this.type_ = params.type;\\n  }\\n\\n  // 必须要重写的方法，用于构建节点数、返回节点数挂载在对应NodeContainer中。\\n  // 在对应NodeContainer创建的时候调用、或者通过rebuild方法调用刷新。\\n  makeNode(uiContext: UIContext): FrameNode | null {\\n    if (this.isDestroy_) { // rootNode为null\\n      return null;\\n    }\\n    if (!this.rootNode) {// rootNode 为undefined时\\n      this.rootNode = new BuilderNode(uiContext, { surfaceId: this.surfaceId_, type: this.renderType_ });\\n      if(this.rootNode) {\\n        this.rootNode.build(wrapBuilder(TextInputBuilder), {  textOne: \\\"myTextInput\\\", width: this.width_, height: this.height_  })\\n        return this.rootNode.getFrameNode();\\n      }else{\\n        return null;\\n      }\\n    }\\n    // 返回FrameNode节点。\\n    return this.rootNode.getFrameNode();\\n  }\\n\\n  setBuilderNode(rootNode: BuilderNode&lt;Params[]&gt; | null): void {\\n    this.rootNode = rootNode;\\n  }\\n\\n  getBuilderNode(): BuilderNode&lt;[Params]&gt; | undefined | null {\\n    return this.rootNode;\\n  }\\n\\n  updateNode(arg: Object): void {\\n    this.rootNode?.update(arg);\\n  }\\n\\n  getEmbedId(): string {\\n    return this.embedId_;\\n  }\\n  \\n  setDestroy(isDestroy: boolean): void {\\n    this.isDestroy_ = isDestroy;\\n    if (this.isDestroy_) {\\n      this.rootNode = null;\\n    }\\n  }\\n \\n  postEvent(event: TouchEvent | undefined): boolean {\\n    return this.rootNode?.postTouchEvent(event) as boolean\\n  }\\n}</pre></li> <li><p>监听同层渲染的生命周期变化。</p> <p>开启该功能后，每当网页中存在同层渲染支持的标签时，ArkWeb内核会触发由<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-web#onnativeembedlifecyclechange11\\\"' target='\\\"_blank\\\"'>onNativeEmbedLifecycleChange</a>注册的回调函数。</p> <p>开发者则需要调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-web#onnativeembedlifecyclechange11\\\"' target='\\\"_blank\\\"'>onNativeEmbedLifecycleChange</a>来监听同层渲染标签的生命周期变化。</p> <pre class='\\\"ts\\\"'>build() {\\n  Row() {\\n    Column() {\\n      Stack() {\\n        ForEach(this.componentIdArr, (componentId: string) =&gt; {\\n          NodeContainer(this.nodeControllerMap.get(componentId))\\n            .position(this.positionMap.get(componentId))\\n            .width(this.widthMap.get(componentId))\\n            .height(this.heightMap.get(componentId))\\n        }, (embedId: string) =&gt; embedId)\\n        // Web组件加载本地text.html页面\\n        Web({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n          // 配置同层渲染开关开启\\n          .enableNativeEmbedMode(true)\\n            // 注册同层标签为\\\"object\\\"，类型为\\\"test\\\"前缀\\n          .registerNativeEmbedRule(\\\"object\\\", \\\"test\\\")\\n            // 获取embed标签的生命周期变化数据\\n          .onNativeEmbedLifecycleChange((embed) =&gt; {\\n            console.log(\\\"NativeEmbed surfaceId\\\" + embed.surfaceId);\\n            // 如果使用embed.info.id作为映射nodeController的key，请在h5页面显式指定id\\n            const componentId = embed.info?.id?.toString() as string\\n            if (embed.status == NativeEmbedStatus.CREATE) {\\n              console.log(\\\"NativeEmbed create\\\" + JSON.stringify(embed.info));\\n              // 创建节点控制器、设置参数并rebuild\\n              let nodeController = new MyNodeController()\\n              // embed.info.width和embed.info.height单位是px格式，需要转换成ets侧的默认单位vp\\n              nodeController.setRenderOption({surfaceId : embed.surfaceId as string,\\n                type : embed.info?.type as string,\\n                renderType : NodeRenderType.RENDER_TYPE_TEXTURE,\\n                embedId : embed.embedId as string,\\n                width : px2vp(embed.info?.width),\\n                height : px2vp(embed.info?.height)})\\n              this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n              nodeController.setDestroy(false);\\n              //根据web传入的embed的id属性作为key，将nodeController存入Map\\n              this.nodeControllerMap.set(componentId, nodeController);\\n              this.widthMap.set(componentId, px2vp(embed.info?.width));\\n              this.heightMap.set(componentId, px2vp(embed.info?.height));\\n              this.positionMap.set(componentId, this.edges);\\n              // 将web传入的embed的id属性存入@State状态数组变量中，用于动态创建nodeContainer节点容器,需要将push动作放在set之后\\n              this.componentIdArr.push(componentId)\\n            } else if (embed.status == NativeEmbedStatus.UPDATE) {\\n              let nodeController = this.nodeControllerMap.get(componentId);\\n              console.log(\\\"NativeEmbed update\\\" + JSON.stringify(embed));\\n              this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n              this.positionMap.set(componentId, this.edges);\\n              this.widthMap.set(componentId, px2vp(embed.info?.width));\\n              this.heightMap.set(componentId, px2vp(embed.info?.height));\\n              nodeController?.updateNode({textOne: 'update', width: px2vp(embed.info?.width), height: px2vp(embed.info?.height)} as ESObject)\\n            } else if (embed.status == NativeEmbedStatus.DESTROY) {\\n              console.log(\\\"NativeEmbed destroy\\\" + JSON.stringify(embed));\\n              let nodeController = this.nodeControllerMap.get(componentId);\\n              nodeController?.setDestroy(true)\\n              this.nodeControllerMap.clear();\\n              this.positionMap.delete(componentId);\\n              this.widthMap.delete(componentId);\\n              this.heightMap.delete(componentId);\\n              this.componentIdArr.filter((value: string) =&gt; value != componentId)\\n            } else {\\n              console.log(\\\"NativeEmbed status\\\" + embed.status);\\n            }\\n          })\\n      }.height(\\\"80%\\\")\\n    }\\n  }\\n}</pre></li> <li><p>同层渲染手势事件。</p> <p>开启该功能后，每当在同层渲染的区域进行触摸操作时，ArkWeb内核会触发<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-web#onnativeembedgestureevent11\\\"' target='\\\"_blank\\\"'>onNativeEmbedGestureEvent</a>注册的回调函数。</p> <p>开发者则需要调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-web#onnativeembedgestureevent11\\\"' target='\\\"_blank\\\"'>onNativeEmbedGestureEvent</a>来监听同层渲染同层渲染区域的手势事件。</p> <pre class='\\\"ts\\\"'>build() {\\n  Row() {\\n    Column() {\\n      Stack() {\\n        ForEach(this.componentIdArr, (componentId: string) =&gt; {\\n          NodeContainer(this.nodeControllerMap.get(componentId))\\n            .position(this.positionMap.get(componentId))\\n            .width(this.widthMap.get(componentId))\\n            .height(this.heightMap.get(componentId))\\n        }, (embedId: string) =&gt; embedId)\\n        // Web组件加载本地text.html页面。\\n        Web({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n          // 配置同层渲染开关开启。\\n          .enableNativeEmbedMode(true)\\n            // 获取embed标签的生命周期变化数据。\\n          .onNativeEmbedLifecycleChange((embed) =&gt; {\\n            // 生命周期变化实现\\n          })\\n          .onNativeEmbedGestureEvent((touch) =&gt; {\\n            console.log(\\\"NativeEmbed onNativeEmbedGestureEvent\\\" + JSON.stringify(touch.touchEvent));\\n            this.componentIdArr.forEach((componentId: string) =&gt; {\\n              let nodeController = this.nodeControllerMap.get(componentId);\\n              // 将获取到的同层区域的事件发送到该区域embedId对应的nodeController上\\n              if(nodeController?.getEmbedId() == touch.embedId) {\\n                let ret = nodeController?.postEvent(touch.touchEvent)\\n                if(ret) {\\n                  console.log(\\\"onNativeEmbedGestureEvent success \\\" + componentId);\\n                } else {\\n                  console.log(\\\"onNativeEmbedGestureEvent fail \\\" + componentId);\\n                }\\n                if(touch.result) {\\n                  // 通知Web组件手势事件消费结果\\n                  touch.result.setGestureEventResult(ret);\\n                }\\n              }\\n            })\\n          })\\n      }\\n    }\\n  }\\n}</pre></li> </ol> <p><strong>完整示例：</strong></p> <p>使用前请在module.json5中添加网络权限，添加方法请参考<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/declare-permissions\\\"'>在配置文件中声明权限</a>。</p>  <p>应用侧代码。</p> <pre class='\\\"ts\\\"'>// 创建NodeController\\nimport webview from '@ohos.web.webview';\\nimport { UIContext } from '@ohos.arkui.UIContext';\\nimport { NodeController, BuilderNode, NodeRenderType, FrameNode } from \\\"@ohos.arkui.node\\\";\\n\\n@Observed\\ndeclare class Params{\\n  elementId: string\\n  textOne: string\\n  textTwo: string\\n  width: number\\n  height: number\\n}\\n\\ndeclare class NodeControllerParams {\\n  surfaceId: string\\n  type: string\\n  renderType: NodeRenderType\\n  embedId: string\\n  width: number\\n  height: number\\n}\\n\\n// 用于控制和反馈对应的NodeContainer上的节点的行为，需要与NodeContainer一起使用。\\nclass MyNodeController extends NodeController {\\n  private rootNode: BuilderNode&lt;[Params]&gt; | undefined | null;\\n  private embedId_: string = \\\"\\\";\\n  private surfaceId_: string = \\\"\\\";\\n  private renderType_: NodeRenderType = NodeRenderType.RENDER_TYPE_DISPLAY;\\n  private width_: number = 0;\\n  private height_: number = 0;\\n  private type_: string = \\\"\\\";\\n  private isDestroy_: boolean = false;\\n\\n  setRenderOption(params: NodeControllerParams) {\\n    this.surfaceId_ = params.surfaceId;\\n    this.renderType_ = params.renderType;\\n    this.embedId_ = params.embedId;\\n    this.width_ = params.width;\\n    this.height_ = params.height;\\n    this.type_ = params.type;\\n  }\\n\\n  // 必须要重写的方法，用于构建节点数、返回节点数挂载在对应NodeContainer中。\\n  // 在对应NodeContainer创建的时候调用、或者通过rebuild方法调用刷新。\\n  makeNode(uiContext: UIContext): FrameNode | null {\\n    if (this.isDestroy_) { // rootNode为null\\n      return null;\\n    }\\n    if (!this.rootNode) {// rootNode 为undefined时\\n      this.rootNode = new BuilderNode(uiContext, { surfaceId: this.surfaceId_, type: this.renderType_ });\\n      if(this.rootNode) {\\n        this.rootNode.build(wrapBuilder(TextInputBuilder), {  textOne: \\\"myTextInput\\\", width: this.width_, height: this.height_  })\\n        return this.rootNode.getFrameNode();\\n      }else{\\n        return null;\\n      }\\n    }\\n    // 返回FrameNode节点。\\n    return this.rootNode.getFrameNode();\\n  }\\n\\n  setBuilderNode(rootNode: BuilderNode&lt;Params[]&gt; | null): void {\\n    this.rootNode = rootNode;\\n  }\\n\\n  getBuilderNode(): BuilderNode&lt;[Params]&gt; | undefined | null {\\n    return this.rootNode;\\n  }\\n\\n  updateNode(arg: Object): void {\\n    this.rootNode?.update(arg);\\n  }\\n\\n  getEmbedId(): string {\\n    return this.embedId_;\\n  }\\n\\n  setDestroy(isDestroy: boolean): void {\\n    this.isDestroy_ = isDestroy;\\n    if (this.isDestroy_) {\\n      this.rootNode = null;\\n    }\\n  }\\n\\n  postEvent(event: TouchEvent | undefined): boolean {\\n    return this.rootNode?.postTouchEvent(event) as boolean\\n  }\\n}\\n\\n@Component\\nstruct TextInputComponent {\\n  @Prop params: Params\\n  @State bkColor: Color = Color.White\\n\\n  build() {\\n    Column() {\\n      TextInput({text: '', placeholder: 'please input your word...'})\\n        .placeholderColor(Color.Gray)\\n        .id(this.params?.elementId)\\n        .placeholderFont({size: 13, weight: 400})\\n        .caretColor(Color.Gray)\\n        .fontSize(14)\\n        .fontColor(Color.Black)\\n    }\\n    //自定义组件中的最外层容器组件宽高应该为同层标签的宽高\\n    .width(this.params.width)\\n    .height(this.params.height)\\n  }\\n}\\n\\n// @Builder中为动态组件的具体组件内容。\\n@Builder\\nfunction TextInputBuilder(params:Params) {\\n  TextInputComponent({params: params})\\n    .width(params.width)\\n    .height(params.height)\\n    .backgroundColor(Color.White)\\n}\\n\\n@Entry\\n@Component\\nstruct Page{\\n  browserTabController: WebviewController = new webview.WebviewController()\\n  private nodeControllerMap: Map&lt;string, MyNodeController&gt; = new Map();\\n  @State componentIdArr: Array&lt;string&gt; = [];\\n  @State posMap: Map&lt;string, Position | undefined&gt; = new Map();\\n  @State widthMap: Map&lt;string, number&gt; = new Map();\\n  @State heightMap: Map&lt;string, number&gt; = new Map();\\n  @State positionMap: Map&lt;string, Edges&gt; = new Map();\\n  @State edges: Edges = {};\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        Stack() {\\n          ForEach(this.componentIdArr, (componentId: string) =&gt; {\\n            NodeContainer(this.nodeControllerMap.get(componentId))\\n              .position(this.positionMap.get(componentId))\\n              .width(this.widthMap.get(componentId))\\n              .height(this.heightMap.get(componentId))\\n          }, (embedId: string) =&gt; embedId)\\n          // Web组件加载本地text.html页面。\\n          Web({src: $rawfile(\\\"text.html\\\"), controller: this.browserTabController})\\n            // 配置同层渲染开关开启。\\n            .enableNativeEmbedMode(true)\\n            // 获取embed标签的生命周期变化数据。\\n            .onNativeEmbedLifecycleChange((embed) =&gt; {\\n               console.log(\\\"NativeEmbed surfaceId\\\" + embed.surfaceId);\\n               // 如果使用embed.info.id作为映射nodeController的key，请在h5页面显式指定id\\n               const componentId = embed.info?.id?.toString() as string\\n               if (embed.status == NativeEmbedStatus.CREATE) {\\n                 console.log(\\\"NativeEmbed create\\\" + JSON.stringify(embed.info));\\n                 // 创建节点控制器、设置参数并rebuild\\n                 let nodeController = new MyNodeController()\\n                 // embed.info.width和embed.info.height单位是px格式，需要转换成ets侧的默认单位vp\\n                 nodeController.setRenderOption({surfaceId : embed.surfaceId as string,\\n                   type : embed.info?.type as string,\\n                   renderType : NodeRenderType.RENDER_TYPE_TEXTURE,\\n                   embedId : embed.embedId as string,\\n                   width : px2vp(embed.info?.width),\\n                   height : px2vp(embed.info?.height)})\\n                 this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n                 nodeController.setDestroy(false);\\n                 //根据web传入的embed的id属性作为key，将nodeController存入Map\\n                 this.nodeControllerMap.set(componentId, nodeController);\\n                 this.widthMap.set(componentId, px2vp(embed.info?.width));\\n                 this.heightMap.set(componentId, px2vp(embed.info?.height));\\n                 this.positionMap.set(componentId, this.edges);\\n                 // 将web传入的embed的id属性存入@State状态数组变量中，用于动态创建nodeContainer节点容器,需要将push动作放在set之后\\n                 this.componentIdArr.push(componentId)\\n               } else if (embed.status == NativeEmbedStatus.UPDATE) {\\n                 let nodeController = this.nodeControllerMap.get(componentId);\\n                 console.log(\\\"NativeEmbed update\\\" + JSON.stringify(embed));\\n                 this.edges = {left: `${embed.info?.position?.x as number}px`, top: `${embed.info?.position?.y as number}px`}\\n                 this.positionMap.set(componentId, this.edges);\\n                 this.widthMap.set(componentId, px2vp(embed.info?.width));\\n                 this.heightMap.set(componentId, px2vp(embed.info?.height));\\n                 nodeController?.updateNode({textOne: 'update', width: px2vp(embed.info?.width), height: px2vp(embed.info?.height)} as ESObject)\\n               } else if (embed.status == NativeEmbedStatus.DESTROY) {\\n                 console.log(\\\"NativeEmbed destroy\\\" + JSON.stringify(embed));\\n                 let nodeController = this.nodeControllerMap.get(componentId);\\n                 nodeController?.setDestroy(true)\\n                 this.nodeControllerMap.clear();\\n                 this.positionMap.delete(componentId);\\n                 this.widthMap.delete(componentId);\\n                 this.heightMap.delete(componentId);\\n                 this.componentIdArr.filter((value: string) =&gt; value != componentId)\\n               } else {\\n                 console.log(\\\"NativeEmbed status\\\" + embed.status);\\n               }\\n             })// 获取同层渲染组件触摸事件信息。\\n            .onNativeEmbedGestureEvent((touch) =&gt; {\\n              console.log(\\\"NativeEmbed onNativeEmbedGestureEvent\\\" + JSON.stringify(touch.touchEvent));\\n              this.componentIdArr.forEach((componentId: string) =&gt; {\\n                let nodeController = this.nodeControllerMap.get(componentId);\\n                // 将获取到的同层区域的事件发送到该区域embedId对应的nodeController上\\n                if(nodeController?.getEmbedId() == touch.embedId) {\\n                  let ret = nodeController?.postEvent(touch.touchEvent)\\n                  if(ret) {\\n                    console.log(\\\"onNativeEmbedGestureEvent success \\\" + componentId);\\n                  } else {\\n                    console.log(\\\"onNativeEmbedGestureEvent fail \\\" + componentId);\\n                  }\\n                  if(touch.result) {\\n                    // 通知Web组件手势事件消费结果\\n                    touch.result.setGestureEventResult(ret);\\n                  }\\n                }\\n              })\\n            })\\n        }\\n      }\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/web-same-layer.html"
    },
    {
        "id": 1514,
        "pre": "bool videoIsEnd = false;\\n// 为资源实例创建对应的解封装器。\\nOH_AVDemuxer *demuxer = OH_AVDemuxer_CreateWithSource(source);\\n// 取出回调函数OnNeedInputBuffer存到输入队列的帧buffer。\\nCodecBufferInfo bufferInfo = inputBufferInfoQueue_.front();\\ninputBufferInfoQueue_.pop();\\n// 解封装帧数据。\\nint32_t ret = OH_AVDemuxer_ReadSampleBuffer(demuxer, videoTrackIndex, bufferInfo.buffer);\\nif (ret == AV_ERR_OK) {\\n   // 可通过buffer获取并处理视频帧数据。\\n    OH_AVBuffer_GetBufferAttr(bufferInfo.buffer, &bufferInfo.attr);\\n    if (bufferInfo.attr.flags == OH_AVCodecBufferFlags::AVCODEC_BUFFER_FLAGS_EOS) {\\n        videoIsEnd = true;\\n    }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "解封装，循环获取帧数据。 ",
        "import_module": null,
        "parent": "<li>解封装，循环获取帧数据。 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/hdr-vivid-video-player.html"
    },
    {
        "id": 1515,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@previewer/no-page-method-on-preview-component\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-page-method-on-preview-component.html"
    },
    {
        "id": 1516,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n  onPageShow(): void {}\\n  onPageHide(): void {}\\n  onBackPress(): void {}\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-page-method-on-preview-component.html"
    },
    {
        "id": 1517,
        "pre": "@Preview\\n@Component\\nstruct Index {\\n  @State message: string = 'Hello World';\\n  onPageShow(): void {}\\n  onPageHide(): void {}\\n  onBackPress(): void {}\\n  build() {\\n    Column() {\\n      Text(this.message)\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-page-method-on-preview-component.html"
    },
    {
        "id": 1518,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unsafe-call\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-call.html"
    },
    {
        "id": 1519,
        "pre": "declare const typedVar: () => void;\\ndeclare const typedNested: { prop: { a: () => void } };\\n\\ntypedVar();\\ntypedNested.prop.a();\\n\\n((): void => {\\n  console.info('hello');\\n})();\\n\\nnew Map();\\n\\nexport const raw = String.raw`foo`;",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-call.html"
    },
    {
        "id": 1520,
        "pre": "declare const anyVar: any;\\ndeclare const nestedAny: { prop: any };\\n// anyVar为any类型，禁止调用\\nanyVar();\\nanyVar.a.b();\\n// nestedAny中的prop属性为any类型，禁止调用\\nnestedAny.prop();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-call.html"
    },
    {
        "id": 1521,
        "pre": "// 混淆前：\\nclass TestA {\\n  static prop1: number = 0;\\n}\\nTestA.prop1;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]-enable-property-obfuscation",
        "parent_text": "  [h2]-enable-property-obfuscation 开启属性名称混淆，效果如下：  // 混淆后：\\nclass TestA {\\n  static i: number = 0;\\n}\\nTestA.i; 若配置该选项，那么所有的属性名都会被混淆，除了下面场景：  被import/export直接导入或导出的类、对象的属性名不会被混淆。例如下面例子中的属性名data不会被混淆。 export class MyClass {\\n   data: string;\\n} ArkUI组件中的属性名不会被混淆。例如下面例子中的message和data不会被混淆。 @Component struct MyExample {\\n    @State message: string = \\\"hello\\\";\\n    data: number[] = [];\\n    // ...\\n} 被保留选项指定的属性名不会被混淆。 SDK API列表中的属性名不会被混淆。SDK API列表是构建时从SDK中自动提取出来的一个名称列表，其缓存文件为systemApiCache.json，路径为工程目录下build/default/cache/{...}/release/obfuscation中。 字符串字面量属性名不会被混淆。例如下面例子中的\\\"name\\\"和\\\"age\\\"不会被混淆。 let person = {\\\"name\\\": \\\"abc\\\"};\\nperson[\\\"age\\\"] = 22;  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section-enable-property-obfuscation\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002214349162__-enable-property-obfuscation\\\"'></a><a name='\\\"-enable-property-obfuscation\\\"'></a> <h4>[h2]-enable-property-obfuscation</h4> <p>开启属性名称混淆，效果如下：</p>  <pre class='\\\"typescript\\\"'>// 混淆后：\\nclass TestA {\\n  static i: number = 0;\\n}\\nTestA.i;</pre> <p>若配置该选项，那么所有的属性名都会被混淆，除了下面场景：</p> <ul> <li><p>被import/export直接导入或导出的类、对象的属性名不会被混淆。例如下面例子中的属性名data不会被混淆。</p> <pre class='\\\"screen\\\"'>export class MyClass {\\n   data: string;\\n}</pre></li> <li><p>ArkUI组件中的属性名不会被混淆。例如下面例子中的message和data不会被混淆。</p> <pre class='\\\"screen\\\"'>@Component struct MyExample {\\n    @State message: string = \\\"hello\\\";\\n    data: number[] = [];\\n    // ...\\n}</pre></li> <li><p>被<a href='\\\"#section-keep-property-name\\\"'>保留选项</a>指定的属性名不会被混淆。</p></li> <li><p>SDK API列表中的属性名不会被混淆。SDK API列表是构建时从SDK中自动提取出来的一个名称列表，其缓存文件为systemApiCache.json，路径为工程目录下build/default/cache/{...}/release/obfuscation中。</p></li> <li><p>字符串字面量属性名不会被混淆。例如下面例子中的\\\"name\\\"和\\\"age\\\"不会被混淆。</p> <pre class='\\\"screen\\\"'>let person = {\\\"name\\\": \\\"abc\\\"};\\nperson[\\\"age\\\"] = 22;</pre></li> </ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation.html"
    },
    {
        "id": 1522,
        "pre": "// 混淆前：\\nlet count = 0;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]-enable-toplevel-obfuscation",
        "parent_text": "  [h2]-enable-toplevel-obfuscation 开启顶层作用域名称混淆，效果如下：  // 混淆后：\\nlet s = 0; 若配置该选项，那么所有的顶层作用域的名称都会被混淆，除了下面场景：  被import/export直接导入或导出的名称不会被混淆。 当前文件找不到声明的名称不会被混淆。 被保留选项指定的顶层作用域名称不会被混淆。 SDK API列表中的顶层作用域名称不会被混淆。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section-enable-toplevel-obfuscation\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002214349162__-enable-toplevel-obfuscation\\\"'></a><a name='\\\"-enable-toplevel-obfuscation\\\"'></a> <h4>[h2]-enable-toplevel-obfuscation</h4> <p>开启顶层作用域名称混淆，效果如下：</p>  <pre class='\\\"typescript\\\"'>// 混淆后：\\nlet s = 0;</pre> <p>若配置该选项，那么所有的顶层作用域的名称都会被混淆，除了下面场景：</p> <ul> <li>被import/export直接导入或导出的名称不会被混淆。</li> <li>当前文件找不到声明的名称不会被混淆。</li> <li>被<a href='\\\"#section-keep-global-name\\\"'>保留选项</a>指定的顶层作用域名称不会被混淆。</li> <li>SDK API列表中的顶层作用域名称不会被混淆。</li> </ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation.html"
    },
    {
        "id": 1523,
        "pre": "// 混淆前：\\nnamespace ns {\\n  export type customT = string;\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]-enable-export-obfuscation",
        "parent_text": "  [h2]-enable-export-obfuscation 开启直接导入或导出的名称混淆，效果如下：  // 混淆后：\\nnamespace ns {\\n  export type h = string;\\n} 若配置该选项，那么非顶层作用域中导入或导出的名称会被混淆。若想混淆顶层作用域中导入或导出的名称，需要在已配置-enable-toplevel-obfuscation的基础上使用；若想混淆导入或导出的属性名，需要在已配置-enable-property-obfuscation的基础上使用。 开启此选项时，以下特殊场景不会被混淆：  远程HAR(真实路径在oh_modules中的包)中导出的名称和属性名不会被混淆。 被保留选项指定的名称与属性名不会被混淆。 SDK API列表中的名称不会被混淆。  ",
        "import_module": "// 混淆前：\\nnamespace ns {\\n  export type customT = string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section-enable-export-obfuscation\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002214349162__-enable-export-obfuscation\\\"'></a><a name='\\\"-enable-export-obfuscation\\\"'></a> <h4>[h2]-enable-export-obfuscation</h4> <p>开启直接导入或导出的名称混淆，效果如下：</p>  <pre class='\\\"typescript\\\"'>// 混淆后：\\nnamespace ns {\\n  export type h = string;\\n}</pre> <p>若配置该选项，那么非顶层作用域中导入或导出的名称会被混淆。<strong>若想混淆顶层作用域中导入或导出的名称，需要在已配置-enable-toplevel-obfuscation的基础上使用；若想混淆导入或导出的属性名，需要在已配置-enable-property-obfuscation的基础上使用。</strong> 开启此选项时，以下特殊场景不会被混淆：</p> <ul> <li>远程HAR(真实路径在oh_modules中的包)中导出的名称和属性名不会被混淆。</li> <li>被<a href='\\\"#保留选项\\\"'>保留选项</a>指定的名称与属性名不会被混淆。</li> <li>SDK API列表中的名称不会被混淆。</li> </ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation.html"
    },
    {
        "id": 1524,
        "pre": "// 混淆前：\\nimport * as m from '../test1/test2';\\nimport { foo } from '../test1/test2';\\nconst module = import('../test1/test2');",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]-enable-filename-obfuscation",
        "parent_text": "  [h2]-enable-filename-obfuscation 开启文件/文件夹名称混淆，效果如下：  // 混淆后：\\nimport * as m from '../a/b';\\nimport { foo } from '../a/b';\\nconst module = import('../a/b'); 若配置该选项，那么所有的文件/文件夹名称都会被混淆，除了下面场景：  oh-package.json5文件中'main'、'types'字段配置的文件/文件夹名称不会被混淆。 模块内module.json5文件中'srcEntry'字段配置的文件/文件夹名称不会被混淆。 被-keep-file-name指定的文件/文件夹名称不会被混淆。 非ECMAScript模块引用方式（例如：const module = require('./module')）。 非路径引用方式，例如例子中的json5不会被混淆 import module from 'json5'。      由于系统会在应用运行时加载某些指定的文件，针对这类文件，开发者需要手动在-keep-file-name选项中配置相应的白名单，防止指定文件被混淆，导致运行失败。 编译入口、Ability组件、Worker多线程，这三种不能混淆的文件名在DevEco Studio 5.0.3.500版本已被自动收集进白名单中，无需再手动配置，其它不能混淆文件名的场景仍需开发者手动配置。   ",
        "import_module": "// 混淆前：\\nnamespace ns {\\n  export type customT = string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section-enable-filename-obfuscation\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002214349162__-enable-filename-obfuscation\\\"'></a><a name='\\\"-enable-filename-obfuscation\\\"'></a> <h4>[h2]-enable-filename-obfuscation</h4> <p>开启文件/文件夹名称混淆，效果如下：</p>  <pre class='\\\"screen\\\"'>// 混淆后：\\nimport * as m from '../a/b';\\nimport { foo } from '../a/b';\\nconst module = import('../a/b');</pre> <p>若配置该选项，那么所有的文件/文件夹名称都会被混淆，除了下面场景：</p> <ul> <li>oh-package.json5文件中'main'、'types'字段配置的文件/文件夹名称不会被混淆。</li> <li>模块内module.json5文件中'srcEntry'字段配置的文件/文件夹名称不会被混淆。</li> <li>被<a href='\\\"#section-keep-file-name\\\"'>-keep-file-name</a>指定的文件/文件夹名称不会被混淆。</li> <li>非ECMAScript模块引用方式（例如：const module = require('./module')）。</li> <li>非路径引用方式，例如例子中的json5不会被混淆 import module from 'json5'。</li> </ul> <div class='\\\"caution\\\"'> <span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120340.85901629668408460112772306573997:50001231000000:2800:0651725D20DF2BBF26E869FA60C4F7A0D540D30F76E6D1499F671624EA18AAF7.png\\\"'/> </span> <div class='\\\"cautionbody\\\"'> <p>由于系统会在应用运行时加载某些指定的文件，针对这类文件，开发者需要手动在<a href='\\\"#section-keep-file-name\\\"'>-keep-file-name</a>选项中配置相应的白名单，防止指定文件被混淆，导致运行失败。</p> <p>编译入口、Ability组件、Worker多线程，这三种不能混淆的文件名在DevEco Studio 5.0.3.500版本已被自动收集进白名单中，无需再手动配置，其它不能混淆文件名的场景仍需开发者手动配置。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation.html"
    },
    {
        "id": 1525,
        "pre": "// 混淆前：\\nclass TestA {\\n  static prop1: number = 0;\\n}\\nTestA.prop1;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]-compact",
        "parent_text": "  [h2]-compact 去除不必要的空格符和所有的换行符。 若配置该选项，那么所有代码会被压缩到一行。效果如下：  // 混淆后：\\nclass TestA { static prop1: number = 0; } TestA.prop1;     release模式构建的应用栈信息仅包含代码行号，不包含列号，因此compact功能开启后无法依据报错栈中的行号定位到源码具体位置。   ",
        "import_module": "// 混淆前：\\nnamespace ns {\\n  export type customT = string;\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section-compact\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002214349162__-compact\\\"'></a><a name='\\\"-compact\\\"'></a> <h4>[h2]-compact</h4> <p>去除不必要的空格符和所有的换行符。</p> <p>若配置该选项，那么所有代码会被压缩到一行。效果如下：</p>  <pre class='\\\"screen\\\"'>// 混淆后：\\nclass TestA { static prop1: number = 0; } TestA.prop1;</pre> <div class='\\\"caution\\\"'> <span class='\\\"cautiontitle\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120340.04068157783797303938481933893526:50001231000000:2800:FFD73A12FF2B7D68E8E197BFBB29C12FC8ECEBAF2EEF6267801166613750B18A.png\\\"'/> </span> <div class='\\\"cautionbody\\\"'> <p>release模式构建的应用栈信息仅包含代码行号，不包含列号，因此compact功能开启后无法依据报错栈中的行号定位到源码具体位置。</p> </div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation.html"
    },
    {
        "id": 1526,
        "pre": "// 混淆前：\\nif (flag) {\\n  console.log(\\\"hello\\\");\\n}",
        "type": "Import",
        "function_call": "function foo()",
        "function_name": "[h2]-remove-log",
        "parent_text": "  [h2]-remove-log 删除对console.*语句的调用，要求console.*语句返回值未被调用，效果如下：  // 混淆后：\\nif (flag) {\\n} 若配置该选项，以下场景中的console.*语句会被删除：  文件顶层的调用。 代码块中的调用。 例如： function foo() {\\n console.log('in block');\\n}  module或namespace中的调用。 例如： namespace ns {\\n console.log('in ns');\\n}  switch语句中的调用。  ",
        "import_module": "// 混淆前：\\nif (flag) {\\n  console.log(\\\"hello\\\");\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section-remove-log\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002214349162__-remove-log\\\"'></a><a name='\\\"-remove-log\\\"'></a> <h4>[h2]-remove-log</h4> <p>删除对console.*语句的调用，要求console.*语句返回值未被调用，效果如下：</p>  <pre class='\\\"screen\\\"'>// 混淆后：\\nif (flag) {\\n}</pre> <p>若配置该选项，以下场景中的console.*语句会被删除：</p> <ol> <li>文件顶层的调用。</li> <li><p>代码块中的调用。</p> <p>例如：</p> <pre class='\\\"screen\\\"'>function foo() {\\n console.log('in block');\\n}</pre> <p></p></li> <li><p>module或namespace中的调用。</p> <p>例如：</p> <pre class='\\\"screen\\\"'>namespace ns {\\n console.log('in ns');\\n}</pre> <p></p></li> <li>switch语句中的调用。</li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/source-obfuscation.html"
    },
    {
        "id": 1527,
        "pre": "// CMakeLists.txt\\n# the minimum version of CMake.\\ncmake_minimum_required(VERSION 3.4.1)\\nproject(myapplication)\\n\\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\\n\\nif(DEFINED PACKAGE_FIND_FILE)\\n    include(${PACKAGE_FIND_FILE})\\nendif()\\n\\ninclude_directories(${NATIVERENDER_ROOT_PATH}\\n                    ${NATIVERENDER_ROOT_PATH}/include)\\nadd_library(entry SHARED hello.cpp)\\ntarget_link_libraries(entry PUBLIC libace_napi.z.so)",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "CMakeLists.txt文件需要按照如下配置 ",
        "import_module": null,
        "parent": "<li>CMakeLists.txt文件需要按照如下配置 </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/use-napi-method-promise.html"
    },
    {
        "id": 1528,
        "pre": "\\\"requestPermissions\\\": [{\\n  \\\"name\\\": \\\"ohos.permission.INTERNET\\\",\\n  \\\"reason\\\": \\\"$string:app_name\\\",\\n  \\\"usedScene\\\": {\\n    \\\"abilities\\\": [\\n      \\\"FromAbility\\\"\\n    ],\\n    \\\"when\\\": \\\"inuse\\\"\\n  }\\n}]",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用 OH_JSVM_OpenInspector",
        "parent_text": "  [h2]使用 OH_JSVM_OpenInspector  在应用工程配置文件module.json中配置网络权限：    为避免debugger过程中的暂停被误报为无响应异常，可以开启DevEco Studio的Debug模式（无需设置断点），或者可以在非主线程的其他线程中运行JSVM。 在执行JS代码之前，调用OH_JSVM_OpenInspector在指定的主机和端口上激活inspector，创建socket。例如OH_JSVM_OpenInspector(env, \\\"localhost\\\", 9225)，在端侧本机端口9225创建socket。 调用OH_JSVM_WaitForDebugger，等待建立socket连接。 检查端侧端口是否打开成功。hdc shell \\\"netstat -anp | grep 9225\\\"。结果为9225端口状态为“LISTEN\\\"即可。 转发端口。hdc fport tcp:9229 tcp:9225。转发开发者个人计算机侧端口9229到端侧端口9225。结果为\\\"Forwardport result:OK\\\"即可。 在chrome浏览器地址栏输入\\\"localhost:9229/json\\\"，回车。获取端口连接信息。拷贝\\\"devtoolsFrontendUrl\\\"字段url内容到地址栏，回车，进入DevTools源码页，将看到在应用中通过OH_JSVM_RunScript执行的JS源码，此时暂停在第一行JS源码处。(注：\\\"devtoolsFrontendUrl\\\"字段url只支持使用Chrome、Edge浏览器打开，不支持使用Firefox、Safari等浏览器打开。) 用户可在源码页打断点，通过按钮发出各种调试命令控制JS代码执行，并查看变量。 调用OH_JSVM_CloseInspector关闭inspector，结束socket连接。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用-oh_jsvm_openinspector\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213534453__%E4%BD%BF%E7%94%A8-oh_jsvm_openinspector\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8-oh_jsvm_openinspector\\\"'></a> <h4>[h2]使用 OH_JSVM_OpenInspector</h4> <ol> <li>在应用工程配置文件module.json中配置网络权限：</li> </ol>  <ol> <li>为避免debugger过程中的暂停被误报为无响应异常，可以<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-debug-arkts-debug-V5\\\"' target='\\\"_blank\\\"'>开启DevEco Studio的Debug模式</a>（无需设置断点），或者可以在非主线程的其他线程中运行JSVM。</li> <li>在执行JS代码之前，调用OH_JSVM_OpenInspector在指定的主机和端口上激活inspector，创建socket。例如OH_JSVM_OpenInspector(env, \\\"localhost\\\", 9225)，在端侧本机端口9225创建socket。</li> <li>调用OH_JSVM_WaitForDebugger，等待建立socket连接。</li> <li>检查端侧端口是否打开成功。hdc shell \\\"netstat -anp | grep 9225\\\"。结果为9225端口状态为“LISTEN\\\"即可。</li> <li>转发端口。hdc fport tcp:9229 tcp:9225。转发开发者个人计算机侧端口9229到端侧端口9225。结果为\\\"Forwardport result:OK\\\"即可。</li> <li>在chrome浏览器地址栏输入\\\"localhost:9229/json\\\"，回车。获取端口连接信息。拷贝\\\"devtoolsFrontendUrl\\\"字段url内容到地址栏，回车，进入DevTools源码页，将看到在应用中通过OH_JSVM_RunScript执行的JS源码，此时暂停在第一行JS源码处。(注：\\\"devtoolsFrontendUrl\\\"字段url只支持使用Chrome、Edge浏览器打开，不支持使用Firefox、Safari等浏览器打开。)</li> <li>用户可在源码页打断点，通过按钮发出各种调试命令控制JS代码执行，并查看变量。</li> <li>调用OH_JSVM_CloseInspector关闭inspector，结束socket连接。</li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/jsvm-debugger-cpuprofiler-heapsnapshot.html"
    },
    {
        "id": 1529,
        "pre": "\\\"requestPermissions\\\": [{\\n  \\\"name\\\": \\\"ohos.permission.INTERNET\\\",\\n  \\\"reason\\\": \\\"$string:app_name\\\",\\n  \\\"usedScene\\\": {\\n    \\\"abilities\\\": [\\n      \\\"FromAbility\\\"\\n    ],\\n    \\\"when\\\": \\\"inuse\\\"\\n  }\\n}]",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用 OH_JSVM_OpenInspectorWithName",
        "parent_text": "  [h2]使用 OH_JSVM_OpenInspectorWithName  在应用工程配置文件module.json中配置网络权限：    为避免debugger过程中的暂停被误报为无响应异常，可以开启DevEco Studio的Debug模式（无需设置断点），或者可以在非主线程的其他线程中运行JSVM。 打开 inspector 端口，链接 devtools 用于调试，其流程如下: 在执行JS代码之前，调用OH_JSVM_OpenInspector在指定的主机和端口上激活inspector，创建socket。例如OH_JSVM_OpenInspectorWithName(env, 123, “test”)，创建 tcp socket 及其对应的 unixdomain 端口。 调用OH_JSVM_WaitForDebugger，等待建立socket连接。 检查端侧端口是否打开成功。hdc shell \\\"cat /proc/net/unix | grep jsvm\\\"。结果出现可用的 unix 端口即可，如: jsvm_devtools_remote_9229_123，其中 9229 为 tcp 端口号，123 为对应的 pid。 转发端口。hdc fport tcp:9229 tcp:9229。转发开发者个人计算机侧端口9229到端侧端口9229。结果为\\\"Forwardport result:OK\\\"即可。 在 chrome 浏览器地址栏输入 \\\"localhost:9229/json\\\"，回车。获取端口连接信息。打开Chrome开发者工具，拷贝\\\"devtoolsFrontendUrl\\\"字段url内容到地址栏，回车，进入DevTools源码页，将看到在应用中通过OH_JSVM_RunScript执行的JS源码，此时暂停在第一行JS源码处。(注：\\\"devtoolsFrontendUrl\\\"字段url只支持使用Chrome、Edge浏览器打开，不支持使用Firefox、Safari等浏览器打开。) 用户可在源码页打断点，通过按钮发出各种调试命令控制JS代码执行，并查看变量。 调用OH_JSVM_CloseInspector关闭inspector，结束socket连接。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用-oh_jsvm_openinspectorwithname\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213534453__%E4%BD%BF%E7%94%A8-oh_jsvm_openinspectorwithname\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8-oh_jsvm_openinspectorwithname\\\"'></a> <h4>[h2]使用 OH_JSVM_OpenInspectorWithName</h4> <ol> <li>在应用工程配置文件module.json中配置网络权限：</li> </ol>  <ol> <li>为避免debugger过程中的暂停被误报为无响应异常，可以<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-debug-arkts-debug-V5\\\"' target='\\\"_blank\\\"'>开启DevEco Studio的Debug模式</a>（无需设置断点），或者可以在非主线程的其他线程中运行JSVM。</li> <li>打开 inspector 端口，链接 devtools 用于调试，其流程如下: 在执行JS代码之前，调用OH_JSVM_OpenInspector在指定的主机和端口上激活inspector，创建socket。例如OH_JSVM_OpenInspectorWithName(env, 123, “test”)，创建 tcp socket 及其对应的 unixdomain 端口。</li> <li>调用OH_JSVM_WaitForDebugger，等待建立socket连接。</li> <li>检查端侧端口是否打开成功。hdc shell \\\"cat /proc/net/unix | grep jsvm\\\"。结果出现可用的 unix 端口即可，如: jsvm_devtools_remote_9229_123，其中 9229 为 tcp 端口号，123 为对应的 pid。</li> <li>转发端口。hdc fport tcp:9229 tcp:9229。转发开发者个人计算机侧端口9229到端侧端口9229。结果为\\\"Forwardport result:OK\\\"即可。</li> <li>在 chrome 浏览器地址栏输入 \\\"localhost:9229/json\\\"，回车。获取端口连接信息。打开Chrome开发者工具，拷贝\\\"devtoolsFrontendUrl\\\"字段url内容到地址栏，回车，进入DevTools源码页，将看到在应用中通过OH_JSVM_RunScript执行的JS源码，此时暂停在第一行JS源码处。(注：\\\"devtoolsFrontendUrl\\\"字段url只支持使用Chrome、Edge浏览器打开，不支持使用Firefox、Safari等浏览器打开。)</li> <li>用户可在源码页打断点，通过按钮发出各种调试命令控制JS代码执行，并查看变量。</li> <li>调用OH_JSVM_CloseInspector关闭inspector，结束socket连接。</li> </ol> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/jsvm-debugger-cpuprofiler-heapsnapshot.html"
    },
    {
        "id": 1530,
        "pre": "import { common } from '@kit.AbilityKit';\\nimport { walletTransitCard } from '@kit.WalletKit'\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\ntransitCardClient: walletTransitCard.TransitCardClient = new walletTransitCard.TransitCardClient(this.getUIContext().getHostContext() as common.UIAbilityContext, 'callerId');\\n\\nasync getCardMetadataInDevice() {\\n  this.transitCardClient.getCardMetadataInDevice(walletTransitCard.DeviceType.DEVICE_PHONE).then((result) => {\\n    console.info(`Succeeded in getting cardMetadataInDevice`);\\n    // 展示交通卡列表信息\\n  }).catch((err: BusinessError) => {\\n    console.error(`Failed to get CardMetadataInDevice, code:${err.code}, message:${err.message}`);\\n  })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>        初始化TransitCardClient时，构造方法的第二个入参callerId是接口调用方ID。开发者可以联系钱包运营申请交通卡服务时获取。         </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/wallet-transport-recharge.html"
    },
    {
        "id": 1531,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit';\\nimport { paymentService } from '@kit.PaymentKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  requestCashierPickerCallBack() {\\n    // use your own paymentInfo\\n    const paymentInfo: paymentService.PaymentInfo= {\\n      tradeSummary: \\\"***交易\\\",\\n      amount: 100,\\n      currency: \\\"CNY\\\",\\n      extraInfo: '{\\\"***\\\":\\\"***\\\"}'\\n    }\\n    paymentService.cashierPicker(this.context, paymentInfo)\\n      .then((pickerResult: paymentService.PickerResult) => {\\n        // succeeded in paying\\n        console.info('succeeded in paying, picker result: ', pickerResult);\\n      })\\n      .catch((error: BusinessError) => {\\n        // failed to pay\\n        console.error(`failed to pay, error.code: ${error.code}, error.message: ${error.message}`);\\n      });\\n  }\\n\\n  build() {\\n    Column() {\\n      Button('requestCashierPickerCallBack')\\n        .type(ButtonType.Capsule)\\n        .width('50%')\\n        .margin(20)\\n        .onClick(() => {\\n          this.requestCashierPickerCallBack();\\n        })\\n      }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": "catch()",
        "function_name": null,
        "parent_text": "      当接口通过.then()方法返回时，则表示当前接口请求响应正常，通过.catch()方法返回表示接口请求响应异常。当此次请求有异常时，可通过error.code获取错误码，错误码相关信息请参见错误码。示例代码如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      当接口通过.then()方法返回时，则表示当前接口请求响应正常，通过.catch()方法返回表示接口请求响应异常。当此次请求有异常时，可通过<strong>error.code</strong>获取错误码，错误码相关信息请参见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/payment-error-code\\\"' target='\\\"_blank\\\"'>错误码</a>。示例代码如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-common-pay-external.html"
    },
    {
        "id": 1532,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit';\\nimport { paymentService } from '@kit.PaymentKit';\\nimport { common } from '@kit.AbilityKit';\\n\\n@Entry\\n@Component\\nstruct Index {\\n  context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\\n  requestPaymentPromise() {\\n    // used orderStr to jump third-party payment, use your own orderStr.\\n    const orderStr = '{\\\"nextAction\\\":\\\"L\\\",\\\"linkUrl\\\":\\\"https://www.***.pay.com/h5pay?prepay_id=***&sign=***\\\",\\\"scheme\\\":\\\"\\\",\\\"clientToken\\\":\\\"***\\\"}';\\n    paymentService.requestPayment(this.context, orderStr, \\\"AP\\\")\\n      .then((payResult: paymentService.PayResult) => {\\n        // succeeded in paying\\n        console.info('succeeded in paying, pay result: ', payResult);\\n      })\\n      .catch((error: BusinessError) => {\\n        // failed to pay\\n        console.error(`failed to pay, error.code: ${error.code}, error.message: ${error.message}`);\\n      });\\n  }\\n\\n  build() {\\n    Column() {\\n      Button('requestPaymentPromise')\\n        .type(ButtonType.Capsule)\\n        .width('50%')\\n        .margin(20)\\n        .onClick(() => {\\n          this.requestPaymentPromise();\\n        })\\n      }\\n    .width('100%')\\n    .height('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "      示例代码如下：       ",
        "import_module": null,
        "parent": "<div class='\\\"p\\\"'>      示例代码如下：       </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/payment-common-pay-external.html"
    },
    {
        "id": 1533,
        "pre": "import { router } from '@kit.ArkUI';\\nimport { autoFillManager } from '@kit.AbilityKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n@Entry\\n@Component\\nstruct SmartFill {\\n  @State isClicked: boolean = false;\\n\\n  build() {\\n    Column({ space: 5 }) {\\n      Row() {\\n        Text('昵称：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.NICKNAME).selectionMenuHidden(true)\\n      }\\n\\n      Row() {\\n        Text('姓名：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.PERSON_FULL_NAME).selectionMenuHidden(true)\\n      }\\n\\n      Row() {\\n        Text('手机号码：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.PHONE_NUMBER).selectionMenuHidden(true)\\n      }\\n\\n      Row() {\\n        Text('邮箱：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.EMAIL_ADDRESS).selectionMenuHidden(true)\\n      }\\n\\n      Row() {\\n        Text('身份证号：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.ID_CARD_NUMBER).selectionMenuHidden(true)\\n      }\\n\\n      Row() {\\n        Text('地址：').textAlign(TextAlign.End).width('25%')\\n        TextInput().width('75%').contentType(ContentType.FORMAT_ADDRESS).selectionMenuHidden(true)\\n      }\\n\\n      Button('保存')\\n        .onClick(() => {\\n          if (!this.isClicked) {\\n            // Save recent forms actively.\\n            try {\\n              autoFillManager.requestAutoSave(this.getUIContext())\\n            } catch (err) {\\n              let e: BusinessError = err as BusinessError;\\n              hilog.error(0x0000, 'DemoTest', 'error: %{public}d %{public}s', e.code, e.message);\\n            }\\n            this.isClicked = true;\\n            // Set a timeout period to prevent saving recent form data repeatedly.\\n            setTimeout(() => {\\n              this.isClicked = false;\\n            }, 1000)\\n            // Or switch to another page through routing to trigger the saving of recent forms.\\n            router.pushUrl({\\n              url: 'xxx'\\n            })\\n          }\\n        })\\n        .width(\\\"50%\\\")\\n    }\\n    .alignItems(HorizontalAlign.Center)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "示例代码",
        "parent_text": "示例代码  智能填充在页面发生跳转的时候，或者手动触发保存逻辑的时候，方可触发保存表单逻辑。 剪贴板文本内容识别功能现已实现超过90%的准确率。尽管如此，我们认识到在特定场景下仍可能出现识别误差。为了提升填表数据的准确性，我们建议在关键环节引入增强校验。这些校验措施包括但不限于：格式校验：自动检测输入格式，确保数据符合预设标准。确认提示：在提交前通过弹窗提示用户再次确认信息，避免输入错误。 若您在页面中也提供了弹窗提醒填充建议的功能，为避免弹窗冲突，建议您将对应输入组件的enableAutoFill属性设置为“false”以关闭智能填充功能。   ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section114669733910\\\"'><a name='\\\"section114669733910\\\"'></a><a name='\\\"section114669733910\\\"'></a><h4>示例代码</h4> <div class='\\\"p\\\"'><div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120222.15292308764395565858514960517533:50001231000000:2800:F0F1DECB800BBCE646669CC11E3A3FC3349402E6702061382C00E7F8AD5E91D0.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'><ul><li>智能填充在页面发生跳转的时候，或者手动触发保存逻辑的时候，方可触发保存表单逻辑。</li></ul> <ul><li>剪贴板文本内容识别功能现已实现超过90%的准确率。尽管如此，我们认识到在特定场景下仍可能出现识别误差。为了提升填表数据的准确性，我们建议在关键环节引入增强校验。这些校验措施包括但不限于：<ol><li>格式校验：自动检测输入格式，确保数据符合预设标准。</li><li>确认提示：在提交前通过弹窗提示用户再次确认信息，避免输入错误。</li></ol> </li><li>若您在页面中也提供了弹窗提醒填充建议的功能，为避免弹窗冲突，建议您将对应输入组件的<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-textinput#enableautofill11\\\"' target='\\\"_blank\\\"'>enableAutoFill</a>属性设置为“false”以关闭智能填充功能。</li></ul> </div></div> </div> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scenario-fusion-introduction-typical-scenario.html"
    },
    {
        "id": 1534,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-unnecessary-boolean-literal-compare\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-boolean-literal-compare.html"
    },
    {
        "id": 1535,
        "pre": "declare const someCondition: boolean;\\nif (someCondition) {\\n}\\n\\ndeclare const someObjectBoolean: boolean | Record<string, object>;\\nif (someObjectBoolean === true) {\\n}\\n\\ndeclare const someStringBoolean: boolean | string;\\nif (someStringBoolean === true) {\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-boolean-literal-compare.html"
    },
    {
        "id": 1536,
        "pre": "declare const someCondition: boolean;\\n// 禁止将布尔变量和布尔字面量直接比较，直接使用someCondition判断即可\\nif (someCondition === true) {\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unnecessary-boolean-literal-compare.html"
    },
    {
        "id": 1537,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@correctness/listen-default-network-change\\\": \\\"suggestion\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_listen-default-network-change.html"
    },
    {
        "id": 1538,
        "pre": "// With the ohos.permission.GET_NETWORK_INFO permission configured\\nimport connection from '@ohos.net.connection';\\nexport function test() {\\n  const defaultNet = connection.getDefaultNetSync();\\n  const netCapabilities = connection.getNetCapabilitiesSync(defaultNet);\\n  let bearerTypes = netCapabilities.bearerTypes;\\n  const netConnection = connection.createNetConnection();\\n  netConnection.on('netCapabilitiesChange', (netCap: connection.NetCapabilityInfo) => {\\n    const newBearTypes = netCap.netCap.bearerTypes;\\n    if (newBearTypes !== bearerTypes) {\\n      bearerTypes = newBearTypes;\\n    }\\n  });\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_listen-default-network-change.html"
    },
    {
        "id": 1539,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-arkui-remove-unchanged-state-var\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-remove-unchanged-state-var.html"
    },
    {
        "id": 1540,
        "pre": "class Translate {\\n  translateX: number = 20;\\n}\\n\\n@Component\\nstruct Title {\\n  build() {\\n    Row() {\\n      // 本地资源 icon.png\\n      Image($r('app.media.icon')) \\n        .width(50)\\n        .height(50)\\n      Text(\\\"Title\\\")\\n        .fontSize(20)\\n    }\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent{\\n  @State translateObj: Translate = new Translate();\\n  // 直接使用一般变量即可\\n  button_msg: string = \\\"i am button\\\";\\n\\n  build() {\\n    Column() {\\n      Title()\\n      Stack() {\\n      }\\n      .backgroundColor(\\\"black\\\")\\n      .width(200)\\n      .height(400)\\n\\n      Button(this.button_msg)\\n        .onClick(() => {\\n          animateTo({\\n            duration: 50\\n          }, () => {\\n            this.translateObj.translateX = (this.translateObj.translateX + 50) % 150\\n          })\\n        })\\n    }\\n    .translate({\\n      x: this.translateObj.translateX\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-remove-unchanged-state-var.html"
    },
    {
        "id": 1541,
        "pre": "@Observed\\nclass Translate {\\n  translateX: number = 20;\\n}\\n@Component\\nstruct Title {\\n  build() {\\n    Row() {\\n      // 本地资源 icon.png\\n      Image($r('app.media.icon'))\\n        .width(50)\\n        .height(50)\\n      Text(\\\"Title\\\")\\n        .fontSize(20)\\n    }\\n  }\\n}\\n@Entry\\n@Component\\nstruct MyComponent{\\n  @State translateObj: Translate = new Translate();\\n  @State button_msg: string = \\\"i am button\\\";\\n\\n  build() {\\n    Column() {\\n      Title()\\n      Stack() {\\n      }\\n      .backgroundColor(\\\"black\\\")\\n      .width(200)\\n      .height(400)\\n      // 这里只是用了状态变量button_msg的值，没有任何写的操作\\n      Button(this.button_msg)\\n        .onClick(() => {\\n          animateTo({\\n            duration: 50\\n          },()=>{\\n            this.translateObj.translateX = (this.translateObj.translateX + 50) % 150\\n          })\\n        })\\n    }\\n    .translate({\\n      x: this.translateObj.translateX\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-hp-arkui-remove-unchanged-state-var.html"
    },
    {
        "id": 1542,
        "pre": "@Entry\\n@Component\\nstruct RegisterExample {\\n  pathInfos: NavPathStack = new NavPathStack();\\n  @State ReserveAccount: string = '';\\n  @State ReservePassword: string = '';\\n  @State enAbleAutoFill: boolean = true;\\n\\n  onBackPress() {\\n    // 当非成功登录、返回等页面跳转时将enAbleAutoFill设置为false，密码保险箱不使能\\n    this.enAbleAutoFill = false;\\n    return false;\\n  }\\n\\n  @Builder\\n  PageMap(name: string) {\\n    if (name === 'register_result_page') {\\n      RegisterResultPage()\\n    }\\n  }\\n\\n  build() {\\n    Navigation(this.pathInfos) {\\n      Column() {\\n        Text(\\\"注册账号\\\")\\n          .commonTitleStyles()\\n\\n        TextInput({ placeholder: '用户名' })\\n          .commonInputStyles()\\n          .type(InputType.USER_NAME) // 账号框使用USER_NAME属性\\n          .onChange((value: string) => {\\n            this.ReserveAccount = value;\\n          })\\n\\n        TextInput({ placeholder: '密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.Password)\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        TextInput({ placeholder: '新密码' })\\n          .showPasswordIcon(true)\\n          .commonInputStyles()\\n          .type(InputType.NEW_PASSWORD) // 密码框使用 new Password 属性,可以触发生成强密码\\n          .enableAutoFill(this.enAbleAutoFill)\\n          .passwordRules('begin:[upper],special:[yes],len:[maxlen:32,minlen:12]')\\n          .onChange((value: string) => {\\n            this.ReservePassword = value;\\n          })\\n\\n        Button('页面跳转')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n\\n        Button('页面跳转(跳转前关闭autofill）')\\n          .commonButtonStyles()\\n          .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\\n          .onClick(() => {\\n            this.enAbleAutoFill = false;\\n            this.pathInfos.pushPathByName('register_result_page', null)\\n          })\\n      }\\n    }\\n    .navDestination(this.PageMap)\\n    .height('100%')\\n    .width('100%')\\n  }\\n}\\n\\n@Component\\nstruct RegisterResultPage {\\n  pathInfos: NavPathStack = new NavPathStack();\\n\\n  build() {\\n    NavDestination() {\\n      Column() {\\n        Text(\\\"Result Page\\\").commonTitleStyles()\\n      }.width('100%').height('100%')\\n    }.title(\\\"Result Page\\\")\\n    .onReady((context: NavDestinationContext) => {\\n      this.pathInfos = context.pathStack;\\n    })\\n  }\\n}\\n\\n@Extend(Text)\\nfunction commonTitleStyles() {\\n  .fontSize(24)\\n  .fontColor('#000000')\\n  .fontWeight(FontWeight.Medium)\\n  .margin({ top: 24, bottom: 16 })\\n}\\n\\n@Extend(TextInput)\\nfunction commonInputStyles() {\\n  .placeholderColor(0x182431)\\n  .width('100%')\\n  .opacity(0.6)\\n  .placeholderFont({ size: 16, weight: FontWeight.Regular })\\n  .margin({ top: 16 })\\n}\\n\\n@Extend(Button)\\nfunction commonButtonStyles() {\\n  .width('100%')\\n  .height(40)\\n  .borderRadius(20)\\n  .margin({ top: 24 })\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "修改账号密码",
        "parent_text": "修改账号密码 示例代码如下：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section1660711384473\\\"'><a name='\\\"section1660711384473\\\"'></a><a name='\\\"section1660711384473\\\"'></a><h4>修改账号密码</h4><p><span><img height='\\\"330.6646\\\"' originheight='\\\"499\\\"' originwidth='\\\"579\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120958.78663202403156271008507000072571:50001231000000:2800:18EA887ECDAD4D2446388074CA1D4B427E628B195C7FCC81BD5962CD27B3E929.png\\\"' title='\\\"点击放大\\\"' width='\\\"383.04\\\"'/></span></p> <p>示例代码如下：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/passwordvault-update-acc-password.html"
    },
    {
        "id": 1543,
        "pre": "// 导入码图生成需要的图片模块、错误码模块\\nimport { scanCore, generateBarcode } from '@kit.ScanKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { image } from '@kit.ImageKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { buffer } from '@kit.ArkTS';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入码图生成接口模块，该模块提供了码图生成的参数和方法，导入方法如下。",
        "import_module": null,
        "parent": "<li>导入码图生成接口模块，该模块提供了码图生成的参数和方法，导入方法如下。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/scan-generatearray.html"
    },
    {
        "id": 1544,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/timezone-interface-check\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide-timezone-interface-check.html"
    },
    {
        "id": 1545,
        "pre": "foreach(item=>(node.rbegin(),node.rend(){\\n    item.TouchTest()\\n}\\nnode.collectEvent()",
        "type": "Reference",
        "function_call": null,
        "function_name": "事件响应链的收集",
        "parent_text": "  事件响应链的收集 事件响应链为触摸测试的结果。ArkUI事件响应链收集，遵循右子树（按组件布局的先后层级）优先的后序遍历。伪代码实现为：  事件响应链收集举例：按下图的组件树，hitTestBehavior属性均为默认，用户点按的动作如果发生在组件5上，则最终收集到的响应链，以及先后关系是5，3，1。 因为组件3的hitTestBehavior属性为Default，收集到事件后会阻塞兄弟节点，所以没有收集组件1的左子树。  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"事件响应链的收集\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002178052998__%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E9%93%BE%E7%9A%84%E6%94%B6%E9%9B%86\\\"'></a><a name='\\\"%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E9%93%BE%E7%9A%84%E6%94%B6%E9%9B%86\\\"'></a> <h4>事件响应链的收集</h4> <p>事件响应链为触摸测试的结果。ArkUI事件响应链收集，遵循右子树（按组件布局的先后层级）优先的后序遍历。伪代码实现为：</p>  <p>事件响应链收集举例：按下图的组件树，hitTestBehavior属性均为默认，用户点按的动作如果发生在组件5上，则最终收集到的响应链，以及先后关系是5，3，1。</p> <p>因为组件3的hitTestBehavior属性为Default，收集到事件后会阻塞兄弟节点，所以没有收集组件1的左子树。</p> <p><span><img originheight='\\\"308\\\"' originwidth='\\\"337\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408120415.34087290715451516297843952818145:50001231000000:2800:24404421D34792D7A0FDC7E7D2112EACCFA9D2BB052196EC3F5ABF2C595A2D59.png\\\"'/></span></p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-common-events-distribute.html"
    },
    {
        "id": 1546,
        "pre": "import { sceneMap } from '@kit.MapKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\nimport { common } from '@kit.AbilityKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-location-selecting.html"
    },
    {
        "id": 1547,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  @State items: string[] = [];\\n  @State ids: string[] = [];\\n  @State age: number[] = [];\\n  @State gender: string[] = [];\\n\\n  aboutToAppear() {\\n    this.items.push(\\\"Head\\\");\\n    this.items.push(\\\"List\\\");\\n    for (let i = 0; i < 20; i++) {\\n      this.ids.push(\\\"id: \\\" + Math.floor(Math.random() * 1000));\\n      this.age.push(Math.floor(Math.random() * 100 % 40));\\n      this.gender.push(Math.floor(Math.random() * 100) % 2 == 0 ? \\\"Male\\\" : \\\"Female\\\");\\n    }\\n  }\\n\\n  isRenderText(index: number) : number {\\n    console.log(`index ${index} is rendered`);\\n    return 1;\\n  }\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        ForEach(this.items, (item: string) => {\\n          if (item == \\\"Head\\\") {\\n            Text(\\\"Personal Info\\\")\\n              .fontSize(40)\\n          } else if (item == \\\"List\\\") {\\n            List() {\\n              ForEach(this.ids, (id: string, index) => {\\n                ListItem() {\\n                  Row() {\\n                    Text(id)\\n                      .fontSize(20)\\n                      .margin({\\n                        left: 30,\\n                        right: 5\\n                      })\\n                    Text(\\\"age: \\\" + this.age[index as number])\\n                      .fontSize(20)\\n                      .margin({\\n                        left: 5,\\n                        right: 5\\n                      })\\n                      .position({x: 100})\\n                      .opacity(this.isRenderText(index))\\n                      .onClick(() => {\\n                        this.age[index]++;\\n                      })\\n                    Text(\\\"gender: \\\" + this.gender[index as number])\\n                      .margin({\\n                        left: 5,\\n                        right: 5\\n                      })\\n                      .position({x: 180})\\n                      .fontSize(20)\\n                  }\\n                }\\n                .margin({\\n                  top: 5,\\n                  bottom: 5\\n                })\\n              })\\n            }\\n          }\\n        })\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "ListItem()",
        "function_name": "[h2]将简单属性数组合并成对象数组",
        "parent_text": "[h2]将简单属性数组合并成对象数组在开发过程中，我们经常会需要设置多个组件的同一种属性，比如Text组件的内容、组件的宽度、高度等样式信息等。将这些属性保存在一个数组中，配合ForEach进行使用是一种简单且方便的方法。  上述代码运行效果如下。  页面内通过ForEach显示了20条信息，当点击某一条信息中age的Text组件时，可以通过日志发现其他的19条信息中age的Text组件也进行了刷新(这体现在日志上，所有的age的Text组件都打出了日志)，但实际上其他19条信息的age的数值并没有改变，也就是说其他19个Text组件并不需要刷新。 这是因为当前状态管理的一个特性。假设存在一个被@State修饰的number类型的数组Num[]，其中有20个元素，值分别为0到19。这20个元素分别绑定了一个Text组件，当改变其中一个元素，例如第0号元素的值从0改成1，除了0号元素绑定的Text组件会刷新之外，其他的19个Text组件也会刷新，即使1到19号元素的值并没有改变。 这个特性普遍的出现在简单类型数组的场景中，当数组中的元素够多时，会对UI的刷新性能有很大的负面影响。这种“不需要刷新的组件被刷新”的现象即是“冗余刷新”，当“冗余刷新”的节点过多时，UI的刷新效率会大幅度降低，因此需要减少“冗余刷新”，也就是做到精准控制组件的更新范围。 为了减少由简单的属性相关的数组引起的“冗余刷新”，需要将属性数组转变为对象数组，配合自定义组件，实现精准控制更新范围。下面为修改后的代码。 @Observed\\nclass InfoList extends Array<Info> {\\n};\\n@Observed\\nclass Info {\\n  ids: number;\\n  age: number;\\n  gender: string;\\n\\n  constructor() {\\n    this.ids = Math.floor(Math.random() * 1000);\\n    this.age = Math.floor(Math.random() * 100 % 40);\\n    this.gender = Math.floor(Math.random() * 100) % 2 == 0 ? \\\"Male\\\" : \\\"Female\\\";\\n  }\\n}\\n@Component\\nstruct Information {\\n  @ObjectLink info: Info;\\n  @State index: number = 0;\\n  isRenderText(index: number) : number {\\n    console.log(`index ${index} is rendered`);\\n    return 1;\\n  }\\n\\n  build() {\\n    Row() {\\n      Text(\\\"id: \\\" + this.info.ids)\\n        .fontSize(20)\\n        .margin({\\n          left: 30,\\n          right: 5\\n        })\\n      Text(\\\"age: \\\" + this.info.age)\\n        .fontSize(20)\\n        .margin({\\n          left: 5,\\n          right: 5\\n        })\\n        .position({x: 100})\\n        .opacity(this.isRenderText(this.index))\\n        .onClick(() => {\\n          this.info.age++;\\n        })\\n      Text(\\\"gender: \\\" + this.info.gender)\\n        .margin({\\n          left: 5,\\n          right: 5\\n        })\\n        .position({x: 180})\\n        .fontSize(20)\\n    }\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State infoList: InfoList = new InfoList();\\n  @State items: string[] = [];\\n  aboutToAppear() {\\n    this.items.push(\\\"Head\\\");\\n    this.items.push(\\\"List\\\");\\n    for (let i = 0; i < 20; i++) {\\n      this.infoList.push(new Info());\\n    }\\n  }\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        ForEach(this.items, (item: string) => {\\n          if (item == \\\"Head\\\") {\\n            Text(\\\"Personal Info\\\")\\n              .fontSize(40)\\n          } else if (item == \\\"List\\\") {\\n            List() {\\n              ForEach(this.infoList, (info: Info, index) => {\\n                ListItem() {\\n                  Information({\\n                    info: info,\\n                    index: index\\n                  })\\n                }\\n                .margin({\\n                  top: 5,\\n                  bottom: 5\\n                })\\n              })\\n            }\\n          }\\n        })\\n      }\\n    }\\n  }\\n} 上述代码的运行效果如下。  修改后的代码使用对象数组代替了原有的多个属性数组，能够避免数组的“冗余刷新”的情况。这是因为对于数组来说，对象内的变化是无法感知的，数组只能观测数组项层级的变化，例如新增数据项，修改数据项（普通数组是直接修改数据项的值，在对象数组的场景下是整个对象被重新赋值，改变某个数据项对象中的属性不会被观测到）、删除数据项等。这意味着当改变对象内的某个属性时，对于数组来说，对象是没有变化的，也就不会去刷新。在当前状态管理的观测能力中，除了数组嵌套对象的场景外，对象嵌套对象的场景也是无法观测到变化的，这一部分内容将在将复杂对象拆分成多个小对象的集合中讲到。同时修改代码时使用了自定义组件与ForEach的结合，这一部分内容将在在ForEach中使用自定义组件搭配对象数组讲到。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"将简单属性数组合并成对象数组\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413073__%E5%B0%86%E7%AE%80%E5%8D%95%E5%B1%9E%E6%80%A7%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E6%88%90%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84\\\"'></a><a name='\\\"%E5%B0%86%E7%AE%80%E5%8D%95%E5%B1%9E%E6%80%A7%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E6%88%90%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84\\\"'></a><h4>[h2]将简单属性数组合并成对象数组</h4><p>在开发过程中，我们经常会需要设置多个组件的同一种属性，比如Text组件的内容、组件的宽度、高度等样式信息等。将这些属性保存在一个数组中，配合ForEach进行使用是一种简单且方便的方法。</p>  <p>上述代码运行效果如下。</p> <p><span><img originheight='\\\"1079\\\"' originwidth='\\\"2057\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.91704358272426664868429280640359:50001231000000:2800:718ADF56D663CA483A8B69A1C6132644CE0E202B7FE27A70F9AC4D38AEF1E996.gif\\\"'/></span></p> <p>页面内通过ForEach显示了20条信息，当点击某一条信息中age的Text组件时，可以通过日志发现其他的19条信息中age的Text组件也进行了刷新(这体现在日志上，所有的age的Text组件都打出了日志)，但实际上其他19条信息的age的数值并没有改变，也就是说其他19个Text组件并不需要刷新。</p> <p>这是因为当前状态管理的一个特性。假设存在一个被@State修饰的number类型的数组Num[]，其中有20个元素，值分别为0到19。这20个元素分别绑定了一个Text组件，当改变其中一个元素，例如第0号元素的值从0改成1，除了0号元素绑定的Text组件会刷新之外，其他的19个Text组件也会刷新，即使1到19号元素的值并没有改变。</p> <p>这个特性普遍的出现在简单类型数组的场景中，当数组中的元素够多时，会对UI的刷新性能有很大的负面影响。这种“不需要刷新的组件被刷新”的现象即是“冗余刷新”，当“冗余刷新”的节点过多时，UI的刷新效率会大幅度降低，因此需要减少“冗余刷新”，也就是做到<strong>精准控制组件的更新范围</strong>。</p> <p>为了减少由简单的属性相关的数组引起的“冗余刷新”，需要将属性数组转变为对象数组，配合自定义组件，实现精准控制更新范围。下面为修改后的代码。</p> <pre class='\\\"typescript\\\"'>@Observed\\nclass InfoList extends Array&lt;Info&gt; {\\n};\\n@Observed\\nclass Info {\\n  ids: number;\\n  age: number;\\n  gender: string;\\n\\n  constructor() {\\n    this.ids = Math.floor(Math.random() * 1000);\\n    this.age = Math.floor(Math.random() * 100 % 40);\\n    this.gender = Math.floor(Math.random() * 100) % 2 == 0 ? \\\"Male\\\" : \\\"Female\\\";\\n  }\\n}\\n@Component\\nstruct Information {\\n  @ObjectLink info: Info;\\n  @State index: number = 0;\\n  isRenderText(index: number) : number {\\n    console.log(`index ${index} is rendered`);\\n    return 1;\\n  }\\n\\n  build() {\\n    Row() {\\n      Text(\\\"id: \\\" + this.info.ids)\\n        .fontSize(20)\\n        .margin({\\n          left: 30,\\n          right: 5\\n        })\\n      Text(\\\"age: \\\" + this.info.age)\\n        .fontSize(20)\\n        .margin({\\n          left: 5,\\n          right: 5\\n        })\\n        .position({x: 100})\\n        .opacity(this.isRenderText(this.index))\\n        .onClick(() =&gt; {\\n          this.info.age++;\\n        })\\n      Text(\\\"gender: \\\" + this.info.gender)\\n        .margin({\\n          left: 5,\\n          right: 5\\n        })\\n        .position({x: 180})\\n        .fontSize(20)\\n    }\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State infoList: InfoList = new InfoList();\\n  @State items: string[] = [];\\n  aboutToAppear() {\\n    this.items.push(\\\"Head\\\");\\n    this.items.push(\\\"List\\\");\\n    for (let i = 0; i &lt; 20; i++) {\\n      this.infoList.push(new Info());\\n    }\\n  }\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        ForEach(this.items, (item: string) =&gt; {\\n          if (item == \\\"Head\\\") {\\n            Text(\\\"Personal Info\\\")\\n              .fontSize(40)\\n          } else if (item == \\\"List\\\") {\\n            List() {\\n              ForEach(this.infoList, (info: Info, index) =&gt; {\\n                ListItem() {\\n                  Information({\\n                    info: info,\\n                    index: index\\n                  })\\n                }\\n                .margin({\\n                  top: 5,\\n                  bottom: 5\\n                })\\n              })\\n            }\\n          }\\n        })\\n      }\\n    }\\n  }\\n}</pre> <p>上述代码的运行效果如下。</p> <p><span><img originheight='\\\"1074\\\"' originwidth='\\\"2072\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.57071679963850577042476468124289:50001231000000:2800:953F1646C6B38C8F879E20F42FD654EBC83A0150259819BC7D5B99B99FCC5A17.gif\\\"'/></span></p> <p>修改后的代码使用对象数组代替了原有的多个属性数组，能够避免数组的“冗余刷新”的情况。这是因为对于数组来说，对象内的变化是无法感知的，数组只能观测数组项层级的变化，例如新增数据项，修改数据项（普通数组是直接修改数据项的值，在对象数组的场景下是整个对象被重新赋值，改变某个数据项对象中的属性不会被观测到）、删除数据项等。这意味着当改变对象内的某个属性时，对于数组来说，对象是没有变化的，也就不会去刷新。在当前状态管理的观测能力中，除了数组嵌套对象的场景外，对象嵌套对象的场景也是无法观测到变化的，这一部分内容将在<a href='\\\"#将复杂大对象拆分成多个小对象的集合\\\"'>将复杂对象拆分成多个小对象的集合</a>中讲到。同时修改代码时使用了自定义组件与ForEach的结合，这一部分内容将在<a href='\\\"#在foreach中使用自定义组件搭配对象数组\\\"'>在ForEach中使用自定义组件搭配对象数组</a>讲到。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/properly-use-state-management-to-develope.html"
    },
    {
        "id": 1548,
        "pre": "@Observed\\nclass UIStyle {\\n  translateX: number = 0;\\n  translateY: number = 0;\\n  scaleX: number = 0.3;\\n  scaleY: number = 0.3;\\n  width: number = 336;\\n  height: number = 178;\\n  posX: number = 10;\\n  posY: number = 50;\\n  alpha: number = 0.5;\\n  borderRadius: number = 24;\\n  imageWidth: number = 78;\\n  imageHeight: number = 78;\\n  translateImageX: number = 0;\\n  translateImageY: number = 0;\\n  fontSize: number = 20;\\n}\\n@Component\\nstruct SpecialImage {\\n  @ObjectLink uiStyle: UIStyle;\\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\\n    console.log(\\\"SpecialImage is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      .width(this.uiStyle.imageWidth)\\n      .height(this.uiStyle.imageHeight)\\n      .margin({ top: 20 })\\n      .translate({\\n        x: this.uiStyle.translateImageX,\\n        y: this.uiStyle.translateImageY\\n      })\\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\\n  }\\n}\\n@Component\\nstruct PageChild {\\n  @ObjectLink uiStyle: UIStyle\\n  // 下面的函数用于显示组件是否被渲染\\n  private isRenderColumn() : number {\\n    console.log(\\\"Column is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderStack() : number {\\n    console.log(\\\"Stack is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderImage() : number {\\n    console.log(\\\"Image is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderText() : number {\\n    console.log(\\\"Text is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Column() {\\n      SpecialImage({\\n        uiStyle: this.uiStyle\\n      })\\n      Stack() {\\n        Column() {\\n            Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n              .opacity(this.uiStyle.alpha)\\n              .scale({\\n                x: this.uiStyle.scaleX,\\n                y: this.uiStyle.scaleY\\n              })\\n              .padding(this.isRenderImage())\\n              .width(300)\\n              .height(300)\\n        }\\n        .width('100%')\\n        .position({ y: -80 })\\n        Stack() {\\n          Text(\\\"Hello World\\\")\\n            .fontColor(\\\"#182431\\\")\\n            .fontWeight(FontWeight.Medium)\\n            .fontSize(this.uiStyle.fontSize)\\n            .opacity(this.isRenderText())\\n            .margin({ top: 12 })\\n        }\\n        .opacity(this.isRenderStack())\\n        .position({\\n          x: this.uiStyle.posX,\\n          y: this.uiStyle.posY\\n        })\\n        .width('100%')\\n        .height('100%')\\n      }\\n      .margin({ top: 50 })\\n      .borderRadius(this.uiStyle.borderRadius)\\n      .opacity(this.isRenderStack())\\n      .backgroundColor(\\\"#FFFFFF\\\")\\n      .width(this.uiStyle.width)\\n      .height(this.uiStyle.height)\\n      .translate({\\n        x: this.uiStyle.translateX,\\n        y: this.uiStyle.translateY\\n      })\\n      Column() {\\n        Button(\\\"Move\\\")\\n          .width(312)\\n          .fontSize(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .margin({ bottom: 10 })\\n          .onClick(() => {\\n            animateTo({\\n              duration: 500\\n            },() => {\\n              this.uiStyle.translateY = (this.uiStyle.translateY + 180) % 250;\\n            })\\n          })\\n        Button(\\\"Scale\\\")\\n          .borderRadius(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .fontSize(20)\\n          .width(312)\\n          .onClick(() => {\\n            this.uiStyle.scaleX = (this.uiStyle.scaleX + 0.6) % 0.8;\\n          })\\n      }\\n      .position({\\n        y:666\\n      })\\n      .height('100%')\\n      .width('100%')\\n\\n    }\\n    .opacity(this.isRenderColumn())\\n    .width('100%')\\n    .height('100%')\\n\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State uiStyle: UIStyle = new UIStyle();\\n  build() {\\n    Stack() {\\n      PageChild({\\n        uiStyle: this.uiStyle\\n      })\\n    }\\n    .backgroundColor(\\\"#F1F3F5\\\")\\n  }\\n}",
        "type": "Reference",
        "function_call": "Stack()",
        "function_name": "[h2]将复杂大对象拆分成多个小对象的集合",
        "parent_text": "[h2]将复杂大对象拆分成多个小对象的集合  从API version 11开始，推荐优先使用@Track装饰器解决该场景的问题。  在开发过程中，我们有时会定义一个大的对象，其中包含了很多样式相关的属性，并且在父子组件间传递这个对象，将其中的属性绑定在组件上。  上述代码的运行效果如下。  优化前点击move按钮的脏节点更新耗时如下图：  在上面的示例中，UIStyle定义了多个属性，并且这些属性分别被多个组件关联。当点击任意一个按钮更改其中的某些属性时，会导致所有这些关联uiStyle的组件进行刷新，虽然它们其实并不需要进行刷新（因为组件的属性都没有改变）。通过定义的一系列isRender函数，可以观察到这些组件的刷新。当点击“move”按钮进行平移动画时，由于translateY的值的多次改变，会导致每一次都存在“冗余刷新”的问题，这对应用的性能有着很大的负面影响。 这是因为当前状态管理的一个刷新机制，假设定义了一个有20个属性的类，创建类的对象实例，将20个属性绑定到组件上，这时修改其中的某个属性，除了这个属性关联的组件会刷新之外，其他的19个属性关联的组件也都会刷新，即使这些属性本身并没有发生变化。 这个机制会导致在使用一个复杂大对象与多个组件关联时，刷新性能的下降。对此，推荐将一个复杂大对象拆分成多个小对象的集合，在保留原有代码结构的基础上，减少“冗余刷新”，实现精准控制组件的更新范围。 @Observed\\nclass NeedRenderImage { // 在同一组件中使用的属性可以划分为相同的类\\n  public translateImageX: number = 0;\\n  public translateImageY: number = 0;\\n  public imageWidth:number = 78;\\n  public imageHeight:number = 78;\\n}\\n@Observed\\nclass NeedRenderScale { // 在一起使用的属性可以划分为相同的类\\n  public scaleX: number = 0.3;\\n  public scaleY: number = 0.3;\\n}\\n@Observed\\nclass NeedRenderAlpha { // 在不同地方使用的属性可以划分为相同的类\\n  public alpha: number = 0.5;\\n}\\n@Observed\\nclass NeedRenderSize { // 在一起使用的属性可以划分为相同的类\\n  public width: number = 336;\\n  public height: number = 178;\\n}\\n@Observed\\nclass NeedRenderPos { // 在一起使用的属性可以划分为相同的类\\n  public posX: number = 10;\\n  public posY: number = 50;\\n}\\n@Observed\\nclass NeedRenderBorderRadius { // 在不同地方使用的属性可以划分为相同的类\\n  public borderRadius: number = 24;\\n}\\n@Observed\\nclass NeedRenderFontSize { // 在不同地方使用的属性可以划分为相同的类\\n  public fontSize: number = 20;\\n}\\n@Observed\\nclass NeedRenderTranslate { // 在一起使用的属性可以划分为相同的类\\n  public translateX: number = 0;\\n  public translateY: number = 0;\\n}\\n@Observed\\nclass UIStyle {\\n  // 使用NeedRenderxxx类\\n  needRenderTranslate: NeedRenderTranslate = new NeedRenderTranslate();\\n  needRenderFontSize: NeedRenderFontSize = new NeedRenderFontSize();\\n  needRenderBorderRadius: NeedRenderBorderRadius = new NeedRenderBorderRadius();\\n  needRenderPos: NeedRenderPos = new NeedRenderPos();\\n  needRenderSize: NeedRenderSize = new NeedRenderSize();\\n  needRenderAlpha: NeedRenderAlpha = new NeedRenderAlpha();\\n  needRenderScale: NeedRenderScale = new NeedRenderScale();\\n  needRenderImage: NeedRenderImage = new NeedRenderImage();\\n}\\n@Component\\nstruct SpecialImage {\\n  @ObjectLink uiStyle : UIStyle;\\n  @ObjectLink needRenderImage: NeedRenderImage // 从其父组件接收新类\\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\\n    console.log(\\\"SpecialImage is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      .width(this.needRenderImage.imageWidth) // 使用this.needRenderImage.xxx\\n      .height(this.needRenderImage.imageHeight)\\n      .margin({top:20})\\n      .translate({\\n        x: this.needRenderImage.translateImageX,\\n        y: this.needRenderImage.translateImageY\\n      })\\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\\n  }\\n}\\n@Component\\nstruct PageChild {\\n  @ObjectLink uiStyle: UIStyle;\\n  @ObjectLink needRenderTranslate: NeedRenderTranslate; // 从其父组件接收新定义的NeedRenderxxx类的实例\\n  @ObjectLink needRenderFontSize: NeedRenderFontSize;\\n  @ObjectLink needRenderBorderRadius: NeedRenderBorderRadius;\\n  @ObjectLink needRenderPos: NeedRenderPos;\\n  @ObjectLink needRenderSize: NeedRenderSize;\\n  @ObjectLink needRenderAlpha: NeedRenderAlpha;\\n  @ObjectLink needRenderScale: NeedRenderScale;\\n  // 下面的函数用于显示组件是否被渲染\\n  private isRenderColumn() : number {\\n    console.log(\\\"Column is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderStack() : number {\\n    console.log(\\\"Stack is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderImage() : number {\\n    console.log(\\\"Image is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderText() : number {\\n    console.log(\\\"Text is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Column() {\\n      SpecialImage({\\n        uiStyle: this.uiStyle,\\n        needRenderImage: this.uiStyle.needRenderImage // 传递给子组件\\n      })\\n      Stack() {\\n        Column() {\\n          Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n            .opacity(this.needRenderAlpha.alpha)\\n            .scale({\\n              x: this.needRenderScale.scaleX, // 使用this.needRenderXxx.xxx\\n              y: this.needRenderScale.scaleY\\n            })\\n            .padding(this.isRenderImage())\\n            .width(300)\\n            .height(300)\\n        }\\n        .width('100%')\\n        .position({ y: -80 })\\n\\n        Stack() {\\n          Text(\\\"Hello World\\\")\\n            .fontColor(\\\"#182431\\\")\\n            .fontWeight(FontWeight.Medium)\\n            .fontSize(this.needRenderFontSize.fontSize)\\n            .opacity(this.isRenderText())\\n            .margin({ top: 12 })\\n        }\\n        .opacity(this.isRenderStack())\\n        .position({\\n          x: this.needRenderPos.posX,\\n          y: this.needRenderPos.posY\\n        })\\n        .width('100%')\\n        .height('100%')\\n      }\\n      .margin({ top: 50 })\\n      .borderRadius(this.needRenderBorderRadius.borderRadius)\\n      .opacity(this.isRenderStack())\\n      .backgroundColor(\\\"#FFFFFF\\\")\\n      .width(this.needRenderSize.width)\\n      .height(this.needRenderSize.height)\\n      .translate({\\n        x: this.needRenderTranslate.translateX,\\n        y: this.needRenderTranslate.translateY\\n      })\\n\\n      Column() {\\n        Button(\\\"Move\\\")\\n          .width(312)\\n          .fontSize(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .margin({ bottom: 10 })\\n          .onClick(() => {\\n            animateTo({\\n              duration: 500\\n            }, () => {\\n              this.needRenderTranslate.translateY = (this.needRenderTranslate.translateY + 180) % 250;\\n            })\\n          })\\n        Button(\\\"Scale\\\")\\n          .borderRadius(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .fontSize(20)\\n          .width(312)\\n          .margin({ bottom: 10 })\\n          .onClick(() => {\\n            this.needRenderScale.scaleX = (this.needRenderScale.scaleX + 0.6) % 0.8;\\n          })\\n        Button(\\\"Change Image\\\")\\n          .borderRadius(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .fontSize(20)\\n          .width(312)\\n          .onClick(() => { // 在父组件中，仍使用 this.uiStyle.endRenderXxx.xxx 更改属性\\n            this.uiStyle.needRenderImage.imageWidth = (this.uiStyle.needRenderImage.imageWidth + 30) % 160;\\n            this.uiStyle.needRenderImage.imageHeight = (this.uiStyle.needRenderImage.imageHeight + 30) % 160;\\n          })\\n      }\\n      .position({\\n        y: 616\\n      })\\n      .height('100%')\\n      .width('100%')\\n    }\\n    .opacity(this.isRenderColumn())\\n    .width('100%')\\n    .height('100%')\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State uiStyle: UIStyle = new UIStyle();\\n  build() {\\n    Stack() {\\n      PageChild({\\n        uiStyle: this.uiStyle,\\n        needRenderTranslate: this.uiStyle.needRenderTranslate, // 传递needRenderxxx类给子组件\\n        needRenderFontSize: this.uiStyle.needRenderFontSize,\\n        needRenderBorderRadius: this.uiStyle.needRenderBorderRadius,\\n        needRenderPos: this.uiStyle.needRenderPos,\\n        needRenderSize: this.uiStyle.needRenderSize,\\n        needRenderAlpha: this.uiStyle.needRenderAlpha,\\n        needRenderScale: this.uiStyle.needRenderScale\\n      })\\n    }\\n    .backgroundColor(\\\"#F1F3F5\\\")\\n  }\\n} 上述代码的运行效果如下。 优化后点击move按钮的脏节点更新耗时如下图：  修改后的代码将原来的大类中的十五个属性拆成了八个小类，并且在绑定的组件上也做了相应的适配。属性拆分遵循以下几点原则： 只作用在同一个组件上的多个属性可以被拆分进同一个新类，即示例中的NeedRenderImage。适用于组件经常被不关联的属性改变而引起刷新的场景，这个时候就要考虑拆分属性，或者重新考虑ViewModel设计是否合理。经常被同时使用的属性可以被拆分进同一个新类，即示例中的NeedRenderScale、NeedRenderTranslate、NeedRenderPos、NeedRenderSize。适用于属性经常成对出现，或者被作用在同一个样式上的情况，例如.translate、.position、.scale等（这些样式通常会接收一个对象作为参数）。可能被用在多个组件上或相对较独立的属性应该被单独拆分进一个新类，即示例中的NeedRenderAlpha，NeedRenderBorderRadius、NeedRenderFontSize。适用于一个属性作用在多个组件上或者与其他属性没有联系的情况，例如.opacity、.borderRadius等（这些样式通常相对独立）。 属性拆分的原理和属性合并类似，都是在嵌套场景下，状态管理无法观测二层以上的属性变化，所以不会因为二层的数据变化导致一层关联的其他属性被刷新，同时利用@Observed和@ObjectLink在父子节点间传递二层的对象，从而在子组件中正常的观测二层的数据变化，实现精准刷新。 使用@Track装饰器则无需做属性拆分，也能达到同样控制组件更新范围的作用。 @Observed\\nclass UIStyle {\\n  @Track translateX: number = 0;\\n  @Track translateY: number = 0;\\n  @Track scaleX: number = 0.3;\\n  @Track scaleY: number = 0.3;\\n  @Track width: number = 336;\\n  @Track height: number = 178;\\n  @Track posX: number = 10;\\n  @Track posY: number = 50;\\n  @Track alpha: number = 0.5;\\n  @Track borderRadius: number = 24;\\n  @Track imageWidth: number = 78;\\n  @Track imageHeight: number = 78;\\n  @Track translateImageX: number = 0;\\n  @Track translateImageY: number = 0;\\n  @Track fontSize: number = 20;\\n}\\n@Component\\nstruct SpecialImage {\\n  @ObjectLink uiStyle: UIStyle;\\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\\n    console.log(\\\"SpecialImage is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      .width(this.uiStyle.imageWidth)\\n      .height(this.uiStyle.imageHeight)\\n      .margin({ top: 20 })\\n      .translate({\\n        x: this.uiStyle.translateImageX,\\n        y: this.uiStyle.translateImageY\\n      })\\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\\n  }\\n}\\n@Component\\nstruct PageChild {\\n  @ObjectLink uiStyle: UIStyle\\n  // 下面的函数用于显示组件是否被渲染\\n  private isRenderColumn() : number {\\n    console.log(\\\"Column is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderStack() : number {\\n    console.log(\\\"Stack is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderImage() : number {\\n    console.log(\\\"Image is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderText() : number {\\n    console.log(\\\"Text is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Column() {\\n      SpecialImage({\\n        uiStyle: this.uiStyle\\n      })\\n      Stack() {\\n        Column() {\\n            Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n              .opacity(this.uiStyle.alpha)\\n              .scale({\\n                x: this.uiStyle.scaleX,\\n                y: this.uiStyle.scaleY\\n              })\\n              .padding(this.isRenderImage())\\n              .width(300)\\n              .height(300)\\n        }\\n        .width('100%')\\n        .position({ y: -80 })\\n        Stack() {\\n          Text(\\\"Hello World\\\")\\n            .fontColor(\\\"#182431\\\")\\n            .fontWeight(FontWeight.Medium)\\n            .fontSize(this.uiStyle.fontSize)\\n            .opacity(this.isRenderText())\\n            .margin({ top: 12 })\\n        }\\n        .opacity(this.isRenderStack())\\n        .position({\\n          x: this.uiStyle.posX,\\n          y: this.uiStyle.posY\\n        })\\n        .width('100%')\\n        .height('100%')\\n      }\\n      .margin({ top: 50 })\\n      .borderRadius(this.uiStyle.borderRadius)\\n      .opacity(this.isRenderStack())\\n      .backgroundColor(\\\"#FFFFFF\\\")\\n      .width(this.uiStyle.width)\\n      .height(this.uiStyle.height)\\n      .translate({\\n        x: this.uiStyle.translateX,\\n        y: this.uiStyle.translateY\\n      })\\n      Column() {\\n        Button(\\\"Move\\\")\\n          .width(312)\\n          .fontSize(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .margin({ bottom: 10 })\\n          .onClick(() => {\\n            animateTo({\\n              duration: 500\\n            },() => {\\n              this.uiStyle.translateY = (this.uiStyle.translateY + 180) % 250;\\n            })\\n          })\\n        Button(\\\"Scale\\\")\\n          .borderRadius(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .fontSize(20)\\n          .width(312)\\n          .onClick(() => {\\n            this.uiStyle.scaleX = (this.uiStyle.scaleX + 0.6) % 0.8;\\n          })\\n      }\\n      .position({\\n        y:666\\n      })\\n      .height('100%')\\n      .width('100%')\\n\\n    }\\n    .opacity(this.isRenderColumn())\\n    .width('100%')\\n    .height('100%')\\n\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State uiStyle: UIStyle = new UIStyle();\\n  build() {\\n    Stack() {\\n      PageChild({\\n        uiStyle: this.uiStyle\\n      })\\n    }\\n    .backgroundColor(\\\"#F1F3F5\\\")\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"将复杂大对象拆分成多个小对象的集合\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413073__%E5%B0%86%E5%A4%8D%E6%9D%82%E5%A4%A7%E5%AF%B9%E8%B1%A1%E6%8B%86%E5%88%86%E6%88%90%E5%A4%9A%E4%B8%AA%E5%B0%8F%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%9B%86%E5%90%88\\\"'></a><a name='\\\"%E5%B0%86%E5%A4%8D%E6%9D%82%E5%A4%A7%E5%AF%B9%E8%B1%A1%E6%8B%86%E5%88%86%E6%88%90%E5%A4%9A%E4%B8%AA%E5%B0%8F%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%9B%86%E5%90%88\\\"'></a><h4>[h2]将复杂大对象拆分成多个小对象的集合</h4><div class='\\\"note\\\"'><img originheight='\\\"38\\\"' originwidth='\\\"102\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115829.84834378796887216276865522038705:50001231000000:2800:DAFD96C94E7D8505EB90E1601D23DA9E78EEB09C0028E36B18AC581302A75990.png\\\"'/><span class='\\\"notetitle\\\"'> </span><div class='\\\"notebody\\\"'> <p>从API version 11开始，推荐优先使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-track\\\"'>@Track装饰器</a>解决该场景的问题。</p> </div></div> <p>在开发过程中，我们有时会定义一个大的对象，其中包含了很多样式相关的属性，并且在父子组件间传递这个对象，将其中的属性绑定在组件上。</p>  <p>上述代码的运行效果如下。</p> <p><span><img originheight='\\\"1075\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.98313276970204468827478491295999:50001231000000:2800:939FCD6A0758D4A5049A6A024F5338A816B9E4E60605777C46EA08EDFF6E3708.gif\\\"'/></span></p> <p>优化前点击move按钮的脏节点更新耗时如下图：</p> <p><span><img originheight='\\\"560\\\"' originwidth='\\\"1438\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.57062522252489683042520144323110:50001231000000:2800:D130221378137A2552965EE97197868F30C090F59F5AAA2EFC4534444162167D.png\\\"'/></span></p> <p>在上面的示例中，UIStyle定义了多个属性，并且这些属性分别被多个组件关联。当点击任意一个按钮更改其中的某些属性时，会导致所有这些关联uiStyle的组件进行刷新，虽然它们其实并不需要进行刷新（因为组件的属性都没有改变）。通过定义的一系列isRender函数，可以观察到这些组件的刷新。当点击“move”按钮进行平移动画时，由于translateY的值的多次改变，会导致每一次都存在“冗余刷新”的问题，这对应用的性能有着很大的负面影响。</p> <p>这是因为当前状态管理的一个刷新机制，假设定义了一个有20个属性的类，创建类的对象实例，将20个属性绑定到组件上，这时修改其中的某个属性，除了这个属性关联的组件会刷新之外，其他的19个属性关联的组件也都会刷新，即使这些属性本身并没有发生变化。</p> <p>这个机制会导致在使用一个复杂大对象与多个组件关联时，刷新性能的下降。对此，推荐将一个复杂大对象拆分成多个小对象的集合，在保留原有代码结构的基础上，减少“冗余刷新”，实现精准控制组件的更新范围。</p> <pre class='\\\"typescript\\\"'>@Observed\\nclass NeedRenderImage { // 在同一组件中使用的属性可以划分为相同的类\\n  public translateImageX: number = 0;\\n  public translateImageY: number = 0;\\n  public imageWidth:number = 78;\\n  public imageHeight:number = 78;\\n}\\n@Observed\\nclass NeedRenderScale { // 在一起使用的属性可以划分为相同的类\\n  public scaleX: number = 0.3;\\n  public scaleY: number = 0.3;\\n}\\n@Observed\\nclass NeedRenderAlpha { // 在不同地方使用的属性可以划分为相同的类\\n  public alpha: number = 0.5;\\n}\\n@Observed\\nclass NeedRenderSize { // 在一起使用的属性可以划分为相同的类\\n  public width: number = 336;\\n  public height: number = 178;\\n}\\n@Observed\\nclass NeedRenderPos { // 在一起使用的属性可以划分为相同的类\\n  public posX: number = 10;\\n  public posY: number = 50;\\n}\\n@Observed\\nclass NeedRenderBorderRadius { // 在不同地方使用的属性可以划分为相同的类\\n  public borderRadius: number = 24;\\n}\\n@Observed\\nclass NeedRenderFontSize { // 在不同地方使用的属性可以划分为相同的类\\n  public fontSize: number = 20;\\n}\\n@Observed\\nclass NeedRenderTranslate { // 在一起使用的属性可以划分为相同的类\\n  public translateX: number = 0;\\n  public translateY: number = 0;\\n}\\n@Observed\\nclass UIStyle {\\n  // 使用NeedRenderxxx类\\n  needRenderTranslate: NeedRenderTranslate = new NeedRenderTranslate();\\n  needRenderFontSize: NeedRenderFontSize = new NeedRenderFontSize();\\n  needRenderBorderRadius: NeedRenderBorderRadius = new NeedRenderBorderRadius();\\n  needRenderPos: NeedRenderPos = new NeedRenderPos();\\n  needRenderSize: NeedRenderSize = new NeedRenderSize();\\n  needRenderAlpha: NeedRenderAlpha = new NeedRenderAlpha();\\n  needRenderScale: NeedRenderScale = new NeedRenderScale();\\n  needRenderImage: NeedRenderImage = new NeedRenderImage();\\n}\\n@Component\\nstruct SpecialImage {\\n  @ObjectLink uiStyle : UIStyle;\\n  @ObjectLink needRenderImage: NeedRenderImage // 从其父组件接收新类\\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\\n    console.log(\\\"SpecialImage is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      .width(this.needRenderImage.imageWidth) // 使用this.needRenderImage.xxx\\n      .height(this.needRenderImage.imageHeight)\\n      .margin({top:20})\\n      .translate({\\n        x: this.needRenderImage.translateImageX,\\n        y: this.needRenderImage.translateImageY\\n      })\\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\\n  }\\n}\\n@Component\\nstruct PageChild {\\n  @ObjectLink uiStyle: UIStyle;\\n  @ObjectLink needRenderTranslate: NeedRenderTranslate; // 从其父组件接收新定义的NeedRenderxxx类的实例\\n  @ObjectLink needRenderFontSize: NeedRenderFontSize;\\n  @ObjectLink needRenderBorderRadius: NeedRenderBorderRadius;\\n  @ObjectLink needRenderPos: NeedRenderPos;\\n  @ObjectLink needRenderSize: NeedRenderSize;\\n  @ObjectLink needRenderAlpha: NeedRenderAlpha;\\n  @ObjectLink needRenderScale: NeedRenderScale;\\n  // 下面的函数用于显示组件是否被渲染\\n  private isRenderColumn() : number {\\n    console.log(\\\"Column is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderStack() : number {\\n    console.log(\\\"Stack is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderImage() : number {\\n    console.log(\\\"Image is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderText() : number {\\n    console.log(\\\"Text is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Column() {\\n      SpecialImage({\\n        uiStyle: this.uiStyle,\\n        needRenderImage: this.uiStyle.needRenderImage // 传递给子组件\\n      })\\n      Stack() {\\n        Column() {\\n          Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n            .opacity(this.needRenderAlpha.alpha)\\n            .scale({\\n              x: this.needRenderScale.scaleX, // 使用this.needRenderXxx.xxx\\n              y: this.needRenderScale.scaleY\\n            })\\n            .padding(this.isRenderImage())\\n            .width(300)\\n            .height(300)\\n        }\\n        .width('100%')\\n        .position({ y: -80 })\\n\\n        Stack() {\\n          Text(\\\"Hello World\\\")\\n            .fontColor(\\\"#182431\\\")\\n            .fontWeight(FontWeight.Medium)\\n            .fontSize(this.needRenderFontSize.fontSize)\\n            .opacity(this.isRenderText())\\n            .margin({ top: 12 })\\n        }\\n        .opacity(this.isRenderStack())\\n        .position({\\n          x: this.needRenderPos.posX,\\n          y: this.needRenderPos.posY\\n        })\\n        .width('100%')\\n        .height('100%')\\n      }\\n      .margin({ top: 50 })\\n      .borderRadius(this.needRenderBorderRadius.borderRadius)\\n      .opacity(this.isRenderStack())\\n      .backgroundColor(\\\"#FFFFFF\\\")\\n      .width(this.needRenderSize.width)\\n      .height(this.needRenderSize.height)\\n      .translate({\\n        x: this.needRenderTranslate.translateX,\\n        y: this.needRenderTranslate.translateY\\n      })\\n\\n      Column() {\\n        Button(\\\"Move\\\")\\n          .width(312)\\n          .fontSize(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .margin({ bottom: 10 })\\n          .onClick(() =&gt; {\\n            animateTo({\\n              duration: 500\\n            }, () =&gt; {\\n              this.needRenderTranslate.translateY = (this.needRenderTranslate.translateY + 180) % 250;\\n            })\\n          })\\n        Button(\\\"Scale\\\")\\n          .borderRadius(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .fontSize(20)\\n          .width(312)\\n          .margin({ bottom: 10 })\\n          .onClick(() =&gt; {\\n            this.needRenderScale.scaleX = (this.needRenderScale.scaleX + 0.6) % 0.8;\\n          })\\n        Button(\\\"Change Image\\\")\\n          .borderRadius(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .fontSize(20)\\n          .width(312)\\n          .onClick(() =&gt; { // 在父组件中，仍使用 this.uiStyle.endRenderXxx.xxx 更改属性\\n            this.uiStyle.needRenderImage.imageWidth = (this.uiStyle.needRenderImage.imageWidth + 30) % 160;\\n            this.uiStyle.needRenderImage.imageHeight = (this.uiStyle.needRenderImage.imageHeight + 30) % 160;\\n          })\\n      }\\n      .position({\\n        y: 616\\n      })\\n      .height('100%')\\n      .width('100%')\\n    }\\n    .opacity(this.isRenderColumn())\\n    .width('100%')\\n    .height('100%')\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State uiStyle: UIStyle = new UIStyle();\\n  build() {\\n    Stack() {\\n      PageChild({\\n        uiStyle: this.uiStyle,\\n        needRenderTranslate: this.uiStyle.needRenderTranslate, // 传递needRenderxxx类给子组件\\n        needRenderFontSize: this.uiStyle.needRenderFontSize,\\n        needRenderBorderRadius: this.uiStyle.needRenderBorderRadius,\\n        needRenderPos: this.uiStyle.needRenderPos,\\n        needRenderSize: this.uiStyle.needRenderSize,\\n        needRenderAlpha: this.uiStyle.needRenderAlpha,\\n        needRenderScale: this.uiStyle.needRenderScale\\n      })\\n    }\\n    .backgroundColor(\\\"#F1F3F5\\\")\\n  }\\n}</pre> <p>上述代码的运行效果如下。<span><img originheight='\\\"1075\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.62568292396723780757830441532346:50001231000000:2800:097F3A33FBF7301C96CA453B8F056642CE14662505B62D702BA3123C6DF08532.gif\\\"'/></span></p> <p>优化后点击move按钮的脏节点更新耗时如下图：</p> <p><span><img originheight='\\\"459\\\"' originwidth='\\\"1146\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.87953232920748997971374538409606:50001231000000:2800:9D8478F15DBDD0F196D28E2576AE8215451EEC9E0ED5AFC9904EB08022F586EF.png\\\"'/></span></p> <p>修改后的代码将原来的大类中的十五个属性拆成了八个小类，并且在绑定的组件上也做了相应的适配。属性拆分遵循以下几点原则：</p> <ul><li>只作用在同一个组件上的多个属性可以被拆分进同一个新类，即示例中的NeedRenderImage。适用于组件经常被不关联的属性改变而引起刷新的场景，这个时候就要考虑拆分属性，或者重新考虑ViewModel设计是否合理。</li><li>经常被同时使用的属性可以被拆分进同一个新类，即示例中的NeedRenderScale、NeedRenderTranslate、NeedRenderPos、NeedRenderSize。适用于属性经常成对出现，或者被作用在同一个样式上的情况，例如.translate、.position、.scale等（这些样式通常会接收一个对象作为参数）。</li><li>可能被用在多个组件上或相对较独立的属性应该被单独拆分进一个新类，即示例中的NeedRenderAlpha，NeedRenderBorderRadius、NeedRenderFontSize。适用于一个属性作用在多个组件上或者与其他属性没有联系的情况，例如.opacity、.borderRadius等（这些样式通常相对独立）。</li></ul> <p>属性拆分的原理和属性合并类似，都是在嵌套场景下，状态管理无法观测二层以上的属性变化，所以不会因为二层的数据变化导致一层关联的其他属性被刷新，同时利用@Observed和@ObjectLink在父子节点间传递二层的对象，从而在子组件中正常的观测二层的数据变化，实现精准刷新。</p> <p>使用@Track装饰器则无需做属性拆分，也能达到同样控制组件更新范围的作用。</p> <pre class='\\\"ts\\\"'>@Observed\\nclass UIStyle {\\n  @Track translateX: number = 0;\\n  @Track translateY: number = 0;\\n  @Track scaleX: number = 0.3;\\n  @Track scaleY: number = 0.3;\\n  @Track width: number = 336;\\n  @Track height: number = 178;\\n  @Track posX: number = 10;\\n  @Track posY: number = 50;\\n  @Track alpha: number = 0.5;\\n  @Track borderRadius: number = 24;\\n  @Track imageWidth: number = 78;\\n  @Track imageHeight: number = 78;\\n  @Track translateImageX: number = 0;\\n  @Track translateImageY: number = 0;\\n  @Track fontSize: number = 20;\\n}\\n@Component\\nstruct SpecialImage {\\n  @ObjectLink uiStyle: UIStyle;\\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\\n    console.log(\\\"SpecialImage is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      .width(this.uiStyle.imageWidth)\\n      .height(this.uiStyle.imageHeight)\\n      .margin({ top: 20 })\\n      .translate({\\n        x: this.uiStyle.translateImageX,\\n        y: this.uiStyle.translateImageY\\n      })\\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\\n  }\\n}\\n@Component\\nstruct PageChild {\\n  @ObjectLink uiStyle: UIStyle\\n  // 下面的函数用于显示组件是否被渲染\\n  private isRenderColumn() : number {\\n    console.log(\\\"Column is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderStack() : number {\\n    console.log(\\\"Stack is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderImage() : number {\\n    console.log(\\\"Image is rendered\\\");\\n    return 1;\\n  }\\n  private isRenderText() : number {\\n    console.log(\\\"Text is rendered\\\");\\n    return 1;\\n  }\\n  build() {\\n    Column() {\\n      SpecialImage({\\n        uiStyle: this.uiStyle\\n      })\\n      Stack() {\\n        Column() {\\n            Image($r('app.media.icon')) // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n              .opacity(this.uiStyle.alpha)\\n              .scale({\\n                x: this.uiStyle.scaleX,\\n                y: this.uiStyle.scaleY\\n              })\\n              .padding(this.isRenderImage())\\n              .width(300)\\n              .height(300)\\n        }\\n        .width('100%')\\n        .position({ y: -80 })\\n        Stack() {\\n          Text(\\\"Hello World\\\")\\n            .fontColor(\\\"#182431\\\")\\n            .fontWeight(FontWeight.Medium)\\n            .fontSize(this.uiStyle.fontSize)\\n            .opacity(this.isRenderText())\\n            .margin({ top: 12 })\\n        }\\n        .opacity(this.isRenderStack())\\n        .position({\\n          x: this.uiStyle.posX,\\n          y: this.uiStyle.posY\\n        })\\n        .width('100%')\\n        .height('100%')\\n      }\\n      .margin({ top: 50 })\\n      .borderRadius(this.uiStyle.borderRadius)\\n      .opacity(this.isRenderStack())\\n      .backgroundColor(\\\"#FFFFFF\\\")\\n      .width(this.uiStyle.width)\\n      .height(this.uiStyle.height)\\n      .translate({\\n        x: this.uiStyle.translateX,\\n        y: this.uiStyle.translateY\\n      })\\n      Column() {\\n        Button(\\\"Move\\\")\\n          .width(312)\\n          .fontSize(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .margin({ bottom: 10 })\\n          .onClick(() =&gt; {\\n            animateTo({\\n              duration: 500\\n            },() =&gt; {\\n              this.uiStyle.translateY = (this.uiStyle.translateY + 180) % 250;\\n            })\\n          })\\n        Button(\\\"Scale\\\")\\n          .borderRadius(20)\\n          .backgroundColor(\\\"#FF007DFF\\\")\\n          .fontSize(20)\\n          .width(312)\\n          .onClick(() =&gt; {\\n            this.uiStyle.scaleX = (this.uiStyle.scaleX + 0.6) % 0.8;\\n          })\\n      }\\n      .position({\\n        y:666\\n      })\\n      .height('100%')\\n      .width('100%')\\n\\n    }\\n    .opacity(this.isRenderColumn())\\n    .width('100%')\\n    .height('100%')\\n\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State uiStyle: UIStyle = new UIStyle();\\n  build() {\\n    Stack() {\\n      PageChild({\\n        uiStyle: this.uiStyle\\n      })\\n    }\\n    .backgroundColor(\\\"#F1F3F5\\\")\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/properly-use-state-management-to-develope.html"
    },
    {
        "id": 1549,
        "pre": "@Observed\\nclass Child {\\n  count: number;\\n  constructor(count: number) {\\n    this.count = count\\n  }\\n}\\n@Observed\\nclass ChildList extends Array<Child> {\\n};\\n@Observed\\nclass Ancestor {\\n  childList: ChildList;\\n  constructor(childList: ChildList) {\\n    this.childList = childList;\\n  }\\n  public loadData() {\\n    let tempList = [new Child(1), new Child(2), new Child(3), new Child(4), new Child(5)];\\n    this.childList = tempList;\\n  }\\n\\n  public clearData() {\\n    this.childList = []\\n  }\\n}\\n@Component\\nstruct CompChild {\\n  @Link childList: ChildList;\\n  @ObjectLink child: Child;\\n\\n  build() {\\n    Row() {\\n      Text(this.child.count+'')\\n        .height(70)\\n        .fontSize(20)\\n        .borderRadius({\\n          topLeft: 6,\\n          topRight: 6\\n        })\\n        .margin({left: 50})\\n      Button('X')\\n        .backgroundColor(Color.Red)\\n        .onClick(()=>{\\n          let index = this.childList.findIndex((item) => {\\n            return item.count === this.child.count\\n          })\\n          if (index !== -1) {\\n            this.childList.splice(index, 1);\\n          }\\n        })\\n        .margin({\\n          left: 200,\\n          right:30\\n        })\\n    }\\n    .margin({\\n      top:15,\\n      left: 15,\\n      right:10,\\n      bottom:15\\n    })\\n    .borderRadius(6)\\n    .backgroundColor(Color.Grey)\\n  }\\n}\\n@Component\\nstruct CompList {\\n  @ObjectLink@Watch('changeChildList') childList: ChildList;\\n\\n  changeChildList() {\\n    console.log('CompList ChildList change');\\n  }\\n\\n  isRenderCompChild(index: number) : number {\\n    console.log(\\\"Comp Child is render\\\" + index);\\n    return 1;\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        ForEach(this.childList, (item: Child, index) => {\\n          ListItem() {\\n            CompChild({\\n              childList: this.childList,\\n              child: item\\n            })\\n              .opacity(this.isRenderCompChild(index))\\n          }\\n\\n        })\\n      }\\n      .height('70%')\\n    }\\n  }\\n}\\n@Component\\nstruct CompAncestor {\\n  @ObjectLink ancestor: Ancestor;\\n\\n  build() {\\n    Column() {\\n      CompList({ childList: this.ancestor.childList })\\n      Row() {\\n        Button(\\\"Clear\\\")\\n          .onClick(() => {\\n            this.ancestor.clearData()\\n          })\\n          .width(100)\\n          .margin({right: 50})\\n        Button(\\\"Recover\\\")\\n          .onClick(() => {\\n            this.ancestor.loadData()\\n          })\\n          .width(100)\\n      }\\n    }\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\\n  @State ancestor: Ancestor = new Ancestor(this.childList)\\n\\n  build() {\\n    Column() {\\n      CompAncestor({ ancestor: this.ancestor})\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "new ChildList()",
        "function_name": "[h2]使用@Observed装饰或被声明为状态变量的类对象绑定组件",
        "parent_text": "[h2]使用@Observed装饰或被声明为状态变量的类对象绑定组件在开发过程中，会有“重置数据”的场景，将一个新创建的对象赋值给原有的状态变量，实现数据的刷新。如果不注意新创建对象的类型，可能会出现UI不刷新的现象。  上述代码运行效果如下。  上述代码维护了一个ChildList类型的数据源，点击\\\"X\\\"按钮删除一些数据后再点击Recover进行恢复ChildList，发现再次点击\\\"X\\\"按钮进行删除时，UI并没有刷新，同时也没有打印出“CompList ChildList change”的日志。 代码中对数据源childList重新赋值时，是通过Ancestor对象的方法loadData。   public loadData() {\\n    let tempList = [new Child(1), new Child(2), new Child(3), new Child(4), new Child(5)];\\n    this.childList = tempList;\\n  } 在loadData方法中，创建了一个临时的Child类型的数组tempList，并且将Ancestor对象的成员变量的childList指向了tempList。但是这里创建的Child[]类型的数组tempList其实并没有能被观测的能力（也就说它的变化无法主动触发UI刷新）。当它被赋值给childList之后，触发了ForEach的刷新，使得界面完成了重建，但是再次点击删除时，由于此时的childList已经指向了新的tempList代表的数组，并且这个数组并没有被观测的能力，是个静态的量，所以它的更改不会被观测到，也就不会引起UI的刷新。实际上这个时候childList里的数据已经减少了，只是UI没有刷新。 有些开发者会注意到，在Page中初始化定义childList的时候，也是以这样一种方法去进行初始化的。 @State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\\n@State ancestor: Ancestor = new Ancestor(this.childList) 但是由于这里的childList实际上是被@State装饰了，根据当前状态管理的观测能力，尽管右边赋值的是一个Child[]类型的数据，它并没有被@Observed装饰，这里的childList却依然具备了被观测的能力，所以能够正常的触发UI的刷新。当去掉childList的@State的装饰器后，不去重置数据源，也无法通过点击“X”按钮触发刷新。 因此，需要将具有观测能力的类对象绑定组件，来确保当改变这些类对象的内容时，UI能够正常的刷新。 @Observed\\nclass Child {\\n  count: number;\\n  constructor(count: number) {\\n    this.count = count\\n  }\\n}\\n@Observed\\nclass ChildList extends Array<Child> {\\n};\\n@Observed\\nclass Ancestor {\\n  childList: ChildList;\\n  constructor(childList: ChildList) {\\n    this.childList = childList;\\n  }\\n  public loadData() {\\n    let tempList = new ChildList();\\n    for (let i = 1; i < 6; i ++) {\\n      tempList.push(new Child(i));\\n    }\\n    this.childList = tempList;\\n  }\\n\\n  public clearData() {\\n    this.childList = []\\n  }\\n}\\n@Component\\nstruct CompChild {\\n  @Link childList: ChildList;\\n  @ObjectLink child: Child;\\n\\n  build() {\\n    Row() {\\n      Text(this.child.count+'')\\n        .height(70)\\n        .fontSize(20)\\n        .borderRadius({\\n          topLeft: 6,\\n          topRight: 6\\n        })\\n        .margin({left: 50})\\n      Button('X')\\n        .backgroundColor(Color.Red)\\n        .onClick(()=>{\\n          let index = this.childList.findIndex((item) => {\\n            return item.count === this.child.count\\n          })\\n          if (index !== -1) {\\n            this.childList.splice(index, 1);\\n          }\\n        })\\n        .margin({\\n          left: 200,\\n          right:30\\n        })\\n    }\\n    .margin({\\n      top:15,\\n      left: 15,\\n      right:10,\\n      bottom:15\\n    })\\n    .borderRadius(6)\\n    .backgroundColor(Color.Grey)\\n  }\\n}\\n@Component\\nstruct CompList {\\n  @ObjectLink@Watch('changeChildList') childList: ChildList;\\n\\n  changeChildList() {\\n    console.log('CompList ChildList change');\\n  }\\n\\n  isRenderCompChild(index: number) : number {\\n    console.log(\\\"Comp Child is render\\\" + index);\\n    return 1;\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        ForEach(this.childList, (item: Child, index) => {\\n          ListItem() {\\n            CompChild({\\n              childList: this.childList,\\n              child: item\\n            })\\n              .opacity(this.isRenderCompChild(index))\\n          }\\n\\n        })\\n      }\\n      .height('70%')\\n    }\\n  }\\n}\\n@Component\\nstruct CompAncestor {\\n  @ObjectLink ancestor: Ancestor;\\n\\n  build() {\\n    Column() {\\n      CompList({ childList: this.ancestor.childList })\\n      Row() {\\n        Button(\\\"Clear\\\")\\n          .onClick(() => {\\n            this.ancestor.clearData()\\n          })\\n          .width(100)\\n          .margin({right: 50})\\n        Button(\\\"Recover\\\")\\n          .onClick(() => {\\n            this.ancestor.loadData()\\n          })\\n          .width(100)\\n      }\\n    }\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\\n  @State ancestor: Ancestor = new Ancestor(this.childList)\\n\\n  build() {\\n    Column() {\\n      CompAncestor({ ancestor: this.ancestor})\\n    }\\n  }\\n} 上述代码运行效果如下。  核心的修改点是将原本Child[]类型的tempList修改为具有被观测能力的ChildList类。 public loadData() {\\n    let tempList = new ChildList();\\n    for (let i = 1; i < 6; i ++) {\\n      tempList.push(new Child(i));\\n    }\\n    this.childList = tempList;\\n  } ChildList类型在定义的时候使用了@Observed进行装饰，所以用new创建的对象tempList具有被观测的能力，因此在点击“X”按钮删除其中一条内容时，变量childList就能够观测到变化，所以触发了ForEach的刷新，最终UI渲染刷新。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用observed装饰或被声明为状态变量的类对象绑定组件\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413073__%E4%BD%BF%E7%94%A8observed%E8%A3%85%E9%A5%B0%E6%88%96%E8%A2%AB%E5%A3%B0%E6%98%8E%E4%B8%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A%E7%BB%84%E4%BB%B6\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8observed%E8%A3%85%E9%A5%B0%E6%88%96%E8%A2%AB%E5%A3%B0%E6%98%8E%E4%B8%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A%E7%BB%84%E4%BB%B6\\\"'></a><h4>[h2]使用@Observed装饰或被声明为状态变量的类对象绑定组件</h4><p>在开发过程中，会有“重置数据”的场景，将一个新创建的对象赋值给原有的状态变量，实现数据的刷新。如果不注意新创建对象的类型，可能会出现UI不刷新的现象。</p>  <p>上述代码运行效果如下。</p> <p><span><img originheight='\\\"1076\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.69581958353466990881170897044071:50001231000000:2800:ABCC7A66620BA67B1565197D0BDA94AF5961A1C742DDAABFEA32C910284C24C7.gif\\\"'/></span></p> <p>上述代码维护了一个ChildList类型的数据源，点击\\\"X\\\"按钮删除一些数据后再点击Recover进行恢复ChildList，发现再次点击\\\"X\\\"按钮进行删除时，UI并没有刷新，同时也没有打印出“CompList ChildList change”的日志。</p> <p>代码中对数据源childList重新赋值时，是通过Ancestor对象的方法loadData。</p> <pre class='\\\"typescript\\\"'>  public loadData() {\\n    let tempList = [new Child(1), new Child(2), new Child(3), new Child(4), new Child(5)];\\n    this.childList = tempList;\\n  }</pre> <p>在loadData方法中，创建了一个临时的Child类型的数组tempList，并且将Ancestor对象的成员变量的childList指向了tempList。但是这里创建的Child[]类型的数组tempList其实并没有能被观测的能力（也就说它的变化无法主动触发UI刷新）。当它被赋值给childList之后，触发了ForEach的刷新，使得界面完成了重建，但是再次点击删除时，由于此时的childList已经指向了新的tempList代表的数组，并且这个数组并没有被观测的能力，是个静态的量，所以它的更改不会被观测到，也就不会引起UI的刷新。实际上这个时候childList里的数据已经减少了，只是UI没有刷新。</p> <p>有些开发者会注意到，在Page中初始化定义childList的时候，也是以这样一种方法去进行初始化的。</p> <pre class='\\\"typescript\\\"'>@State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\\n@State ancestor: Ancestor = new Ancestor(this.childList)</pre> <p>但是由于这里的childList实际上是被@State装饰了，根据当前状态管理的观测能力，尽管右边赋值的是一个Child[]类型的数据，它并没有被@Observed装饰，这里的childList却依然具备了被观测的能力，所以能够正常的触发UI的刷新。当去掉childList的@State的装饰器后，不去重置数据源，也无法通过点击“X”按钮触发刷新。</p> <p>因此，需要将具有观测能力的类对象绑定组件，来确保当改变这些类对象的内容时，UI能够正常的刷新。</p> <pre class='\\\"typescript\\\"'>@Observed\\nclass Child {\\n  count: number;\\n  constructor(count: number) {\\n    this.count = count\\n  }\\n}\\n@Observed\\nclass ChildList extends Array&lt;Child&gt; {\\n};\\n@Observed\\nclass Ancestor {\\n  childList: ChildList;\\n  constructor(childList: ChildList) {\\n    this.childList = childList;\\n  }\\n  public loadData() {\\n    let tempList = new ChildList();\\n    for (let i = 1; i &lt; 6; i ++) {\\n      tempList.push(new Child(i));\\n    }\\n    this.childList = tempList;\\n  }\\n\\n  public clearData() {\\n    this.childList = []\\n  }\\n}\\n@Component\\nstruct CompChild {\\n  @Link childList: ChildList;\\n  @ObjectLink child: Child;\\n\\n  build() {\\n    Row() {\\n      Text(this.child.count+'')\\n        .height(70)\\n        .fontSize(20)\\n        .borderRadius({\\n          topLeft: 6,\\n          topRight: 6\\n        })\\n        .margin({left: 50})\\n      Button('X')\\n        .backgroundColor(Color.Red)\\n        .onClick(()=&gt;{\\n          let index = this.childList.findIndex((item) =&gt; {\\n            return item.count === this.child.count\\n          })\\n          if (index !== -1) {\\n            this.childList.splice(index, 1);\\n          }\\n        })\\n        .margin({\\n          left: 200,\\n          right:30\\n        })\\n    }\\n    .margin({\\n      top:15,\\n      left: 15,\\n      right:10,\\n      bottom:15\\n    })\\n    .borderRadius(6)\\n    .backgroundColor(Color.Grey)\\n  }\\n}\\n@Component\\nstruct CompList {\\n  @ObjectLink@Watch('changeChildList') childList: ChildList;\\n\\n  changeChildList() {\\n    console.log('CompList ChildList change');\\n  }\\n\\n  isRenderCompChild(index: number) : number {\\n    console.log(\\\"Comp Child is render\\\" + index);\\n    return 1;\\n  }\\n\\n  build() {\\n    Column() {\\n      List() {\\n        ForEach(this.childList, (item: Child, index) =&gt; {\\n          ListItem() {\\n            CompChild({\\n              childList: this.childList,\\n              child: item\\n            })\\n              .opacity(this.isRenderCompChild(index))\\n          }\\n\\n        })\\n      }\\n      .height('70%')\\n    }\\n  }\\n}\\n@Component\\nstruct CompAncestor {\\n  @ObjectLink ancestor: Ancestor;\\n\\n  build() {\\n    Column() {\\n      CompList({ childList: this.ancestor.childList })\\n      Row() {\\n        Button(\\\"Clear\\\")\\n          .onClick(() =&gt; {\\n            this.ancestor.clearData()\\n          })\\n          .width(100)\\n          .margin({right: 50})\\n        Button(\\\"Recover\\\")\\n          .onClick(() =&gt; {\\n            this.ancestor.loadData()\\n          })\\n          .width(100)\\n      }\\n    }\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\\n  @State ancestor: Ancestor = new Ancestor(this.childList)\\n\\n  build() {\\n    Column() {\\n      CompAncestor({ ancestor: this.ancestor})\\n    }\\n  }\\n}</pre> <p>上述代码运行效果如下。</p> <p><span><img originheight='\\\"1076\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.32171079116629043613087894412991:50001231000000:2800:3A71C075EFC608C81FBA11C97453AC26495E42BA01ACF6962CE22F9C133FA0F9.gif\\\"'/></span></p> <p>核心的修改点是将原本Child[]类型的tempList修改为具有被观测能力的ChildList类。</p> <pre class='\\\"typescript\\\"'>public loadData() {\\n    let tempList = new ChildList();\\n    for (let i = 1; i &lt; 6; i ++) {\\n      tempList.push(new Child(i));\\n    }\\n    this.childList = tempList;\\n  }</pre> <p>ChildList类型在定义的时候使用了@Observed进行装饰，所以用new创建的对象tempList具有被观测的能力，因此在点击“X”按钮删除其中一条内容时，变量childList就能够观测到变化，所以触发了ForEach的刷新，最终UI渲染刷新。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/properly-use-state-management-to-develope.html"
    },
    {
        "id": 1550,
        "pre": "class BasicDataSource implements IDataSource {\\n  private listeners: DataChangeListener[] = [];\\n  private originDataArray: StringData[] = [];\\n\\n  public totalCount(): number {\\n    return 0;\\n  }\\n\\n  public getData(index: number): StringData {\\n    return this.originDataArray[index];\\n  }\\n\\n  registerDataChangeListener(listener: DataChangeListener): void {\\n    if (this.listeners.indexOf(listener) < 0) {\\n      console.info('add listener');\\n      this.listeners.push(listener);\\n    }\\n  }\\n\\n  unregisterDataChangeListener(listener: DataChangeListener): void {\\n    const pos = this.listeners.indexOf(listener);\\n    if (pos >= 0) {\\n      console.info('remove listener');\\n      this.listeners.splice(pos, 1);\\n    }\\n  }\\n\\n  notifyDataReload(): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataReloaded();\\n    })\\n  }\\n\\n  notifyDataAdd(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataAdd(index);\\n    })\\n  }\\n\\n  notifyDataChange(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataChange(index);\\n    })\\n  }\\n\\n  notifyDataDelete(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataDelete(index);\\n    })\\n  }\\n\\n  notifyDataMove(from: number, to: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataMove(from, to);\\n    })\\n  }\\n}\\n\\nclass MyDataSource extends BasicDataSource {\\n  private dataArray: StringData[] = [];\\n\\n  public totalCount(): number {\\n    return this.dataArray.length;\\n  }\\n\\n  public getData(index: number): StringData {\\n    return this.dataArray[index];\\n  }\\n\\n  public addData(index: number, data: StringData): void {\\n    this.dataArray.splice(index, 0, data);\\n    this.notifyDataAdd(index);\\n  }\\n\\n  public pushData(data: StringData): void {\\n    this.dataArray.push(data);\\n    this.notifyDataAdd(this.dataArray.length - 1);\\n  }\\n\\n  public reloadData(): void {\\n    this.notifyDataReload();\\n  }\\n}\\n\\nclass StringData {\\n  message: string;\\n  imgSrc: Resource;\\n  constructor(message: string, imgSrc: Resource) {\\n    this.message = message;\\n    this.imgSrc = imgSrc;\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  private data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear() {\\n    for (let i = 0; i <= 9; i++) {\\n      // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      this.data.pushData(new StringData(`Click to add ${i}`, $r('app.media.icon')));\\n    }\\n  }\\n\\n  build() {\\n    List({ space: 3 }) {\\n      LazyForEach(this.data, (item: StringData, index: number) => {\\n        ListItem() {\\n          Column() {\\n            Text(item.message).fontSize(20)\\n              .onAppear(() => {\\n                console.info(\\\"text appear:\\\" + item.message);\\n              })\\n            Image(item.imgSrc)\\n              .width(100)\\n              .height(100)\\n              .onAppear(() => {\\n                console.info(\\\"image appear\\\");\\n              })\\n          }.margin({ left: 10, right: 10 })\\n        }\\n        .onClick(() => {\\n          item.message += '0';\\n          this.data.reloadData();\\n        })\\n      }, (item: StringData, index: number) => JSON.stringify(item))\\n    }.cachedCount(5)\\n  }\\n}",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "[h2]减少使用LazyForEach的重建机制刷新UI",
        "parent_text": "[h2]减少使用LazyForEach的重建机制刷新UI开发过程中通常会将LazyForEach和状态变量结合起来使用。  上述代码运行效果如下。  可以观察到在点击更改message之后，图片“闪烁”了一下，同时输出了组件的onAppear日志，这说明组件进行了重建。这是因为在更改message之后，导致LazyForEach中这一项的key值发生了变化，使得LazyForEach在reloadData的时候将这一项ListItem进行了重建。Text组件仅仅更改显示的内容却发生了重建，而不是更新。而尽管Image组件没有需要重新绘制的内容，但是因为触发LazyForEach的重建，会使得同样位于ListItem下的Image组件重新创建。 当前LazyForEach与状态变量都能触发UI的刷新，两者的性能开销是不一样的。使用LazyForEach刷新会对组件进行重建，如果包含了多个组件，则会产生比较大的性能开销。使用状态变量刷新会对组件进行刷新，具体到状态变量关联的组件上，相对于LazyForEach的重建来说，范围更小更精确。因此，推荐使用状态变量来触发LazyForEach中的组件刷新，这就需要使用自定义组件。 class BasicDataSource implements IDataSource {\\n  private listeners: DataChangeListener[] = [];\\n  private originDataArray: StringData[] = [];\\n\\n  public totalCount(): number {\\n    return 0;\\n  }\\n\\n  public getData(index: number): StringData {\\n    return this.originDataArray[index];\\n  }\\n\\n  registerDataChangeListener(listener: DataChangeListener): void {\\n    if (this.listeners.indexOf(listener) < 0) {\\n      console.info('add listener');\\n      this.listeners.push(listener);\\n    }\\n  }\\n\\n  unregisterDataChangeListener(listener: DataChangeListener): void {\\n    const pos = this.listeners.indexOf(listener);\\n    if (pos >= 0) {\\n      console.info('remove listener');\\n      this.listeners.splice(pos, 1);\\n    }\\n  }\\n\\n  notifyDataReload(): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataReloaded();\\n    })\\n  }\\n\\n  notifyDataAdd(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataAdd(index);\\n    })\\n  }\\n\\n  notifyDataChange(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataChange(index);\\n    })\\n  }\\n\\n  notifyDataDelete(index: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataDelete(index);\\n    })\\n  }\\n\\n  notifyDataMove(from: number, to: number): void {\\n    this.listeners.forEach(listener => {\\n      listener.onDataMove(from, to);\\n    })\\n  }\\n}\\n\\nclass MyDataSource extends BasicDataSource {\\n  private dataArray: StringData[] = [];\\n\\n  public totalCount(): number {\\n    return this.dataArray.length;\\n  }\\n\\n  public getData(index: number): StringData {\\n    return this.dataArray[index];\\n  }\\n\\n  public addData(index: number, data: StringData): void {\\n    this.dataArray.splice(index, 0, data);\\n    this.notifyDataAdd(index);\\n  }\\n\\n  public pushData(data: StringData): void {\\n    this.dataArray.push(data);\\n    this.notifyDataAdd(this.dataArray.length - 1);\\n  }\\n}\\n\\n@Observed\\nclass StringData {\\n  @Track message: string;\\n  @Track imgSrc: Resource;\\n  constructor(message: string, imgSrc: Resource) {\\n    this.message = message;\\n    this.imgSrc = imgSrc;\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  @State data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear() {\\n    for (let i = 0; i <= 9; i++) {\\n      // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      this.data.pushData(new StringData(`Click to add ${i}`, $r('app.media.icon')));\\n    }\\n  }\\n\\n  build() {\\n    List({ space: 3 }) {\\n      LazyForEach(this.data, (item: StringData, index: number) => {\\n        ListItem() {\\n          ChildComponent({data: item})\\n        }\\n        .onClick(() => {\\n          item.message += '0';\\n        })\\n      }, (item: StringData, index: number) => index.toString())\\n    }.cachedCount(5)\\n  }\\n}\\n\\n@Component\\nstruct ChildComponent {\\n  @ObjectLink data: StringData\\n  build() {\\n    Column() {\\n      Text(this.data.message).fontSize(20)\\n        .onAppear(() => {\\n          console.info(\\\"text appear:\\\" + this.data.message)\\n        })\\n      Image(this.data.imgSrc)\\n        .width(100)\\n        .height(100)\\n    }.margin({ left: 10, right: 10 })\\n  }\\n} 上述代码运行效果如下。  可以观察到UI能够正常刷新，图片没有“闪烁”，且没有输出日志信息，说明没有对Text组件和Image组件进行重建。 这是因为使用自定义组件之后，可以通过@Observed和@ObjectLink配合去直接更改自定义组件内的状态变量实现刷新，而不需要利用LazyForEach进行重建。使用@Track装饰器分别装饰StringData类型中的message和imgSrc属性可以使更新范围进一步缩小到指定的Text组件。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"减少使用lazyforeach的重建机制刷新ui\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413073__%E5%87%8F%E5%B0%91%E4%BD%BF%E7%94%A8lazyforeach%E7%9A%84%E9%87%8D%E5%BB%BA%E6%9C%BA%E5%88%B6%E5%88%B7%E6%96%B0ui\\\"'></a><a name='\\\"%E5%87%8F%E5%B0%91%E4%BD%BF%E7%94%A8lazyforeach%E7%9A%84%E9%87%8D%E5%BB%BA%E6%9C%BA%E5%88%B6%E5%88%B7%E6%96%B0ui\\\"'></a><h4>[h2]减少使用LazyForEach的重建机制刷新UI</h4><p>开发过程中通常会将<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-rendering-control-lazyforeach\\\"'>LazyForEach</a>和状态变量结合起来使用。</p>  <p>上述代码运行效果如下。</p> <p><span><img originheight='\\\"1040\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.07433602691267571212119597147377:50001231000000:2800:0EA34FDDF7C72C479FC036E3F2878C0773B685E3F4CE673F425063D76A5A5D73.gif\\\"'/></span></p> <p>可以观察到在点击更改message之后，图片“闪烁”了一下，同时输出了组件的onAppear日志，这说明组件进行了重建。这是因为在更改message之后，导致LazyForEach中这一项的key值发生了变化，使得LazyForEach在reloadData的时候将这一项ListItem进行了重建。Text组件仅仅更改显示的内容却发生了重建，而不是更新。而尽管Image组件没有需要重新绘制的内容，但是因为触发LazyForEach的重建，会使得同样位于ListItem下的Image组件重新创建。</p> <p>当前LazyForEach与状态变量都能触发UI的刷新，两者的性能开销是不一样的。使用LazyForEach刷新会对组件进行重建，如果包含了多个组件，则会产生比较大的性能开销。使用状态变量刷新会对组件进行刷新，具体到状态变量关联的组件上，相对于LazyForEach的重建来说，范围更小更精确。因此，推荐使用状态变量来触发LazyForEach中的组件刷新，这就需要使用自定义组件。</p> <pre class='\\\"typescript\\\"'>class BasicDataSource implements IDataSource {\\n  private listeners: DataChangeListener[] = [];\\n  private originDataArray: StringData[] = [];\\n\\n  public totalCount(): number {\\n    return 0;\\n  }\\n\\n  public getData(index: number): StringData {\\n    return this.originDataArray[index];\\n  }\\n\\n  registerDataChangeListener(listener: DataChangeListener): void {\\n    if (this.listeners.indexOf(listener) &lt; 0) {\\n      console.info('add listener');\\n      this.listeners.push(listener);\\n    }\\n  }\\n\\n  unregisterDataChangeListener(listener: DataChangeListener): void {\\n    const pos = this.listeners.indexOf(listener);\\n    if (pos &gt;= 0) {\\n      console.info('remove listener');\\n      this.listeners.splice(pos, 1);\\n    }\\n  }\\n\\n  notifyDataReload(): void {\\n    this.listeners.forEach(listener =&gt; {\\n      listener.onDataReloaded();\\n    })\\n  }\\n\\n  notifyDataAdd(index: number): void {\\n    this.listeners.forEach(listener =&gt; {\\n      listener.onDataAdd(index);\\n    })\\n  }\\n\\n  notifyDataChange(index: number): void {\\n    this.listeners.forEach(listener =&gt; {\\n      listener.onDataChange(index);\\n    })\\n  }\\n\\n  notifyDataDelete(index: number): void {\\n    this.listeners.forEach(listener =&gt; {\\n      listener.onDataDelete(index);\\n    })\\n  }\\n\\n  notifyDataMove(from: number, to: number): void {\\n    this.listeners.forEach(listener =&gt; {\\n      listener.onDataMove(from, to);\\n    })\\n  }\\n}\\n\\nclass MyDataSource extends BasicDataSource {\\n  private dataArray: StringData[] = [];\\n\\n  public totalCount(): number {\\n    return this.dataArray.length;\\n  }\\n\\n  public getData(index: number): StringData {\\n    return this.dataArray[index];\\n  }\\n\\n  public addData(index: number, data: StringData): void {\\n    this.dataArray.splice(index, 0, data);\\n    this.notifyDataAdd(index);\\n  }\\n\\n  public pushData(data: StringData): void {\\n    this.dataArray.push(data);\\n    this.notifyDataAdd(this.dataArray.length - 1);\\n  }\\n}\\n\\n@Observed\\nclass StringData {\\n  @Track message: string;\\n  @Track imgSrc: Resource;\\n  constructor(message: string, imgSrc: Resource) {\\n    this.message = message;\\n    this.imgSrc = imgSrc;\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct MyComponent {\\n  @State data: MyDataSource = new MyDataSource();\\n\\n  aboutToAppear() {\\n    for (let i = 0; i &lt;= 9; i++) {\\n      // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\\n      this.data.pushData(new StringData(`Click to add ${i}`, $r('app.media.icon')));\\n    }\\n  }\\n\\n  build() {\\n    List({ space: 3 }) {\\n      LazyForEach(this.data, (item: StringData, index: number) =&gt; {\\n        ListItem() {\\n          ChildComponent({data: item})\\n        }\\n        .onClick(() =&gt; {\\n          item.message += '0';\\n        })\\n      }, (item: StringData, index: number) =&gt; index.toString())\\n    }.cachedCount(5)\\n  }\\n}\\n\\n@Component\\nstruct ChildComponent {\\n  @ObjectLink data: StringData\\n  build() {\\n    Column() {\\n      Text(this.data.message).fontSize(20)\\n        .onAppear(() =&gt; {\\n          console.info(\\\"text appear:\\\" + this.data.message)\\n        })\\n      Image(this.data.imgSrc)\\n        .width(100)\\n        .height(100)\\n    }.margin({ left: 10, right: 10 })\\n  }\\n}</pre> <p>上述代码运行效果如下。</p> <p><span><img originheight='\\\"1040\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.39318268762024760202550274500467:50001231000000:2800:C49EED24368D418C1FE20E4C7AFA02EE5ED0025C0BD3158C9816F89455B89D22.gif\\\"'/></span></p> <p>可以观察到UI能够正常刷新，图片没有“闪烁”，且没有输出日志信息，说明没有对Text组件和Image组件进行重建。</p> <p>这是因为使用自定义组件之后，可以通过@Observed和@ObjectLink配合去直接更改自定义组件内的状态变量实现刷新，而不需要利用LazyForEach进行重建。使用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-track\\\"'>@Track装饰器</a>分别装饰StringData类型中的message和imgSrc属性可以使更新范围进一步缩小到指定的Text组件。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/properly-use-state-management-to-develope.html"
    },
    {
        "id": 1551,
        "pre": "@Observed\\nclass StyleList extends Array<TextStyles> {\\n};\\n@Observed\\nclass TextStyles {\\n  fontSize: number;\\n\\n  constructor(fontSize: number) {\\n    this.fontSize = fontSize;\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State styleList: StyleList = new StyleList();\\n  aboutToAppear() {\\n    for (let i = 15; i < 50; i++)\\n    this.styleList.push(new TextStyles(i));\\n  }\\n  build() {\\n    Column() {\\n      Text(\\\"Font Size List\\\")\\n        .fontSize(50)\\n        .onClick(() => {\\n          for (let i = 0; i < this.styleList.length; i++) {\\n            this.styleList[i].fontSize++;\\n          }\\n          console.log(\\\"change font size\\\");\\n        })\\n      List() {\\n        ForEach(this.styleList, (item: TextStyles) => {\\n          ListItem() {\\n            Text(\\\"Hello World\\\")\\n              .fontSize(item.fontSize)\\n          }\\n        })\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "ListItem()",
        "function_name": "[h2]在ForEach中使用自定义组件搭配对象数组",
        "parent_text": "[h2]在ForEach中使用自定义组件搭配对象数组开发过程中经常会使用对象数组和ForEach结合起来使用，但是写法不当的话会出现UI不刷新的情况。  上述代码运行效果如下。  由于ForEach中生成的item是一个常量，因此当点击改变item中的内容时，没有办法观测到UI刷新，尽管日志表面item中的值已经改变了(这体现在打印了“change font size”的日志)。因此，需要使用自定义组件，配合@ObjectLink来实现观测的能力。 @Observed\\nclass StyleList extends Array<TextStyles> {\\n};\\n@Observed\\nclass TextStyles {\\n  fontSize: number;\\n\\n  constructor(fontSize: number) {\\n    this.fontSize = fontSize;\\n  }\\n}\\n@Component\\nstruct TextComponent {\\n  @ObjectLink textStyle: TextStyles;\\n  build() {\\n    Text(\\\"Hello World\\\")\\n      .fontSize(this.textStyle.fontSize)\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State styleList: StyleList = new StyleList();\\n  aboutToAppear() {\\n    for (let i = 15; i < 50; i++)\\n      this.styleList.push(new TextStyles(i));\\n  }\\n  build() {\\n    Column() {\\n      Text(\\\"Font Size List\\\")\\n        .fontSize(50)\\n        .onClick(() => {\\n          for (let i = 0; i < this.styleList.length; i++) {\\n            this.styleList[i].fontSize++;\\n          }\\n          console.log(\\\"change font size\\\");\\n        })\\n      List() {\\n        ForEach(this.styleList, (item: TextStyles) => {\\n          ListItem() {\\n            TextComponent({ textStyle: item})\\n          }\\n        })\\n      }\\n    }\\n  }\\n} 上述代码的运行效果如下。  使用@ObjectLink接受传入的item后，使得TextComponent组件内的textStyle变量具有了被观测的能力。在父组件更改styleList中的值时，由于@ObjectLink是引用传递，所以会观测到styleList每一个数据项的地址指向的对应item的fontSize的值被改变，因此触发UI的刷新。 这是一个较为实用的使用状态管理进行刷新的开发方式。 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"在foreach中使用自定义组件搭配对象数组\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213413073__%E5%9C%A8foreach%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%90%AD%E9%85%8D%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84\\\"'></a><a name='\\\"%E5%9C%A8foreach%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%90%AD%E9%85%8D%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84\\\"'></a><h4>[h2]在ForEach中使用自定义组件搭配对象数组</h4><p>开发过程中经常会使用对象数组和<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/arkts-rendering-control-foreach\\\"'>ForEach</a>结合起来使用，但是写法不当的话会出现UI不刷新的情况。</p>  <p>上述代码运行效果如下。</p> <p><span><img originheight='\\\"1040\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.25689994316347082655232553349630:50001231000000:2800:46C6A6097842D6A50CF0BE1F343E05586D90CDDF7EA99B9D128031CFAFCA084B.gif\\\"'/></span></p> <p>由于ForEach中生成的item是一个常量，因此当点击改变item中的内容时，没有办法观测到UI刷新，尽管日志表面item中的值已经改变了(这体现在打印了“change font size”的日志)。因此，需要使用自定义组件，配合@ObjectLink来实现观测的能力。</p> <pre class='\\\"typescript\\\"'>@Observed\\nclass StyleList extends Array&lt;TextStyles&gt; {\\n};\\n@Observed\\nclass TextStyles {\\n  fontSize: number;\\n\\n  constructor(fontSize: number) {\\n    this.fontSize = fontSize;\\n  }\\n}\\n@Component\\nstruct TextComponent {\\n  @ObjectLink textStyle: TextStyles;\\n  build() {\\n    Text(\\\"Hello World\\\")\\n      .fontSize(this.textStyle.fontSize)\\n  }\\n}\\n@Entry\\n@Component\\nstruct Page {\\n  @State styleList: StyleList = new StyleList();\\n  aboutToAppear() {\\n    for (let i = 15; i &lt; 50; i++)\\n      this.styleList.push(new TextStyles(i));\\n  }\\n  build() {\\n    Column() {\\n      Text(\\\"Font Size List\\\")\\n        .fontSize(50)\\n        .onClick(() =&gt; {\\n          for (let i = 0; i &lt; this.styleList.length; i++) {\\n            this.styleList[i].fontSize++;\\n          }\\n          console.log(\\\"change font size\\\");\\n        })\\n      List() {\\n        ForEach(this.styleList, (item: TextStyles) =&gt; {\\n          ListItem() {\\n            TextComponent({ textStyle: item})\\n          }\\n        })\\n      }\\n    }\\n  }\\n}</pre> <p>上述代码的运行效果如下。</p> <p><span><img originheight='\\\"1040\\\"' originwidth='\\\"2037\\\"' src='\\\"https://communityfile-drcn.op.dbankcloud.cn/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250408115830.87786020576827401173161005796547:50001231000000:2800:1B505CE7421999AFEFD86B5A6A74F569C13A8035032C68A66F1824BAEF221329.gif\\\"'/></span></p> <p>使用@ObjectLink接受传入的item后，使得TextComponent组件内的textStyle变量具有了被观测的能力。在父组件更改styleList中的值时，由于@ObjectLink是引用传递，所以会观测到styleList每一个数据项的地址指向的对应item的fontSize的值被改变，因此触发UI的刷新。</p> <p>这是一个较为实用的使用状态管理进行刷新的开发方式。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/properly-use-state-management-to-develope.html"
    },
    {
        "id": 1552,
        "pre": "ArkUI_NodeHandle testGestureExample() {\\n    auto column = nodeAPI->createNode(ARKUI_NODE_COLUMN);\\n\\n    // 创建手势并设置回调\\n    ArkUI_NumberValue value[] = {{.u32 = 0xff112233}};\\n    ArkUI_AttributeItem item = {value, 1};\\n    nodeAPI->setAttribute(column, NODE_BACKGROUND_COLOR, &item);\\n    ArkUI_NumberValue widthValue[] = {{200}};\\n    ArkUI_AttributeItem width = {widthValue, 1};\\n    nodeAPI->setAttribute(column, NODE_WIDTH, &width);\\n    ArkUI_NumberValue heightValue[] = {{200}};\\n    ArkUI_AttributeItem height = {heightValue, 1};\\n    nodeAPI->setAttribute(column, NODE_HEIGHT, &height);\\n\\n    // 判断是否有手势API\\n    auto gestureApi = reinterpret_cast<ArkUI_NativeGestureAPI_1 *>(\\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_GESTURE, \\\"ArkUI_NativeGestureAPI_1\\\"));\\n    if (gestureApi->createGroupGesture) {\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, createGroupGesture api exist\\\");\\n    } else {\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, createGroupGesture api not exist\\\");\\n    }\\n    auto groupGesture = gestureApi->createGroupGesture(ArkUI_GroupGestureMode::SEQUENTIAL_GROUP);\\n\\n    // 创建长按手势\\n    auto longPressGesture = gestureApi->createLongPressGesture(1, true, 500);\\n    if (gestureApi->getGestureType) {\\n        ArkUI_GestureRecognizerType type = gestureApi->getGestureType(longPressGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack longPressGesture,ArkUI_GestureRecognizerType%{public}d\\\", type);\\n    }\\n    // 给长按手势定回调\\n    auto onActionCallBackPanLongPress = [](ArkUI_GestureEvent *event, void *extraParam) {\\n        ArkUI_GestureEventActionType actionType = OH_ArkUI_GestureEvent_GetActionType(event);\\n\\n        float velocity = OH_ArkUI_PanGesture_GetVelocity(event);\\n        float velocityX = OH_ArkUI_PanGesture_GetVelocityX(event);\\n        float velocityY = OH_ArkUI_PanGesture_GetVelocityY(event);\\n       float OffsetX = OH_ArkUI_PanGesture_GetOffsetX(event);\\n        float OffsetY = OH_ArkUI_PanGesture_GetOffsetY(event);\\n        float scale = OH_ArkUI_PinchGesture_GetScale(event);\\n        float CenterX = OH_ArkUI_PinchGesture_GetCenterX(event);\\n        float CenterY = OH_ArkUI_PinchGesture_GetCenterY(event);\\n        float angle = OH_ArkUI_SwipeGesture_GetAngle(event);\\n        float VelocityS = OH_ArkUI_SwipeGesture_GetVelocity(event);\\n        float angleR = OH_ArkUI_RotationGesture_GetAngle(event);\\n       float repeat = OH_ArkUI_LongPress_GetRepeatCount(event);\\n\\n        OH_LOG_Print(\\n            LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n            \\\"onPanActionCallBack,longPressGesturecallback actionType:%{public}d,velocity%{public}f,velocityX\\\"\\n            \\\"%{public}f;\\\"\\n            \\\"velocityY%{public}f,OffsetX%{public}f,OffsetY%{public}f,scale%{public}fCenterX\\\"\\n            \\\"%{public}fCenterY\\\"\\n            \\\"%{public}fangle%{public}fVelocityS%{public}fangleR%{public}frepeat%{public}f\\\",\\n            actionType, velocity, velocityX, velocityY, OffsetX, OffsetY, scale, CenterX, CenterY, angle, VelocityS,\\n            angleR, repeat);\\n    };\\n    gestureApi->setGestureEventTarget(longPressGesture,\\n                                      GESTURE_EVENT_ACTION_ACCEPT | GESTURE_EVENT_ACTION_UPDATE | GESTURE_EVENT_ACTION_CANCEL,\\n                                      column, onActionCallBackPanLongPress);\\n\\n    // 将长按手势添加到手势组\\n    if (gestureApi->addChildGesture) {\\n        gestureApi->addChildGesture(groupGesture, longPressGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\", \\\"onPanActionCallBack, addChildGesture longPressGesture\\\");\\n    }\\n    // 创建滑动手势 swipe\\n    auto swipeGesture = gestureApi->createSwipeGesture(1, GESTURE_DIRECTION_ALL, 100);\\n    if (gestureApi->getGestureType) {\\n        ArkUI_GestureRecognizerType type = gestureApi->getGestureType(swipeGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, ArkUI_GestureRecognizerType %{public}d\\\", type);\\n    }\\n    // 给滑动手势绑定回调\\n    auto onActionCallBack = [](ArkUI_GestureEvent *event, void *extraParam) {\\n        ArkUI_GestureEventActionType actionType = OH_ArkUI_GestureEvent_GetActionType(event);\\n\\n        float velocity = OH_ArkUI_PanGesture_GetVelocity(event);\\n        float velocityX = OH_ArkUI_PanGesture_GetVelocityX(event);\\n        float velocityY = OH_ArkUI_PanGesture_GetVelocityY(event);\\n        float OffsetX = OH_ArkUI_PanGesture_GetOffsetX(event);\\n        float OffsetY = OH_ArkUI_PanGesture_GetOffsetY(event);\\n        float scale = OH_ArkUI_PinchGesture_GetScale(event);\\n        float CenterX = OH_ArkUI_PinchGesture_GetCenterX(event);\\n        float CenterY = OH_ArkUI_PinchGesture_GetCenterY(event);\\n        float angle = OH_ArkUI_SwipeGesture_GetAngle(event);\\n        float VelocityS = OH_ArkUI_SwipeGesture_GetVelocity(event);\\n        float angleR = OH_ArkUI_RotationGesture_GetAngle(event);\\n        float repeat = OH_ArkUI_LongPress_GetRepeatCount(event);\\n\\n\\n        // 通过日志查看\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, swipeGesture callback actionType: %{public}d, velocity \\\"\\n                     \\\"%{public}f,velocityX \\\"\\n                     \\\"%{public}f; \\\"\\n                     \\\"velocityY %{public}f, OffsetX %{public}f, OffsetY %{public}f, scale %{public}fCenterX \\\"\\n                     \\\"%{public}f CenterY\\\"\\n                     \\\" %{public}f angle %{public}f VelocityS %{public}f angleR %{public}f repeat %{public}f\\\",\\n                     actionType, velocity, velocityX, velocityY, OffsetX, OffsetY, scale, CenterX, CenterY, angle,\\n                     VelocityS, angleR, repeat);\\n\\n        ArkUI_NumberValue value[] = {{.f32 = 0}, {.f32 = 0}, {.f32 = 0}, {.f32 = angleR}, {.f32 = 0}};\\n        ArkUI_AttributeItem item = {value, 5};\\n        auto column = reinterpret_cast<ArkUI_NodeHandle>(extraParam);\\n        nodeAPI->setAttribute(column, NODE_ROTATE, &item);\\n    };\\n\\n    gestureApi->setGestureEventTarget(\\n        swipeGesture, GESTURE_EVENT_ACTION_ACCEPT | GESTURE_EVENT_ACTION_UPDATE | GESTURE_EVENT_ACTION_END, column,\\n        onActionCallBack);\\n\\n    // 将滑动手势添加到手势组\\n    if (gestureApi->addChildGesture) {\\n        gestureApi->addChildGesture(groupGesture, swipeGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, addChildGesture swipeGesture\\\");\\n    }\\n    // 将手势组设置到组件上\\n    gestureApi->addGestureToNode(column, groupGesture, PRIORITY, NORMAL_GESTURE_MASK);\\n    return column;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]顺序识别",
        "parent_text": "  [h2]顺序识别 顺序识别组合手势对应的ArkUI_GroupGestureMode为SEQUENTIAL_GROUP。顺序识别组合手势将按照手势的注册顺序识别手势，直到所有的手势识别成功。当顺序识别组合手势中有一个手势识别失败时，后续手势识别均失败。顺序识别手势组仅有最后一个手势可以响应GESTURE_EVENT_ACTION_END。 以顺序识别长按和滑动手势为例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"顺序识别\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459041__%E9%A1%BA%E5%BA%8F%E8%AF%86%E5%88%AB\\\"'></a><a name='\\\"%E9%A1%BA%E5%BA%8F%E8%AF%86%E5%88%AB\\\"'></a> <h4>[h2]顺序识别</h4> <p>顺序识别组合手势对应的ArkUI_GroupGestureMode为SEQUENTIAL_GROUP。顺序识别组合手势将按照手势的注册顺序识别手势，直到所有的手势识别成功。当顺序识别组合手势中有一个手势识别失败时，后续手势识别均失败。顺序识别手势组仅有最后一个手势可以响应<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/_ark_u_i___native_module#arkui_gestureeventactiontype\\\"' target='\\\"_blank\\\"'>GESTURE_EVENT_ACTION_END</a>。</p> <p>以顺序识别长按和滑动手势为例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ndk-bind-gesture-events.html"
    },
    {
        "id": 1553,
        "pre": "ArkUI_NodeHandle testGestureExample() {\\n    auto column = nodeAPI->createNode(ARKUI_NODE_COLUMN);\\n\\n    // 创建手势并设置回调\\n    ArkUI_NumberValue value[] = {{.u32 = 0xff112233}};\\n    ArkUI_AttributeItem item = {value, 1};\\n    nodeAPI->setAttribute(column, NODE_BACKGROUND_COLOR, &item);\\n    ArkUI_NumberValue widthValue[] = {{200}};\\n    ArkUI_AttributeItem width = {widthValue, 1};\\n    nodeAPI->setAttribute(column, NODE_WIDTH, &width);\\n    ArkUI_NumberValue heightValue[] = {{200}};\\n    ArkUI_AttributeItem height = {heightValue, 1};\\n    nodeAPI->setAttribute(column, NODE_HEIGHT, &height);\\n\\n    // 判断是否有手势API\\n    auto gestureApi = reinterpret_cast<ArkUI_NativeGestureAPI_1 *>(\\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_GESTURE, \\\"ArkUI_NativeGestureAPI_1\\\"));\\n    if (gestureApi->createGroupGesture) {\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, createGroupGesture api exist\\\");\\n    } else {\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, createGroupGesture api not exist\\\");\\n    }\\n\\n    // 创建手势组\\n    auto groupGesture = gestureApi->createGroupGesture(ArkUI_GroupGestureMode::PARALLEL_GROUP);\\n\\n    // 创建长按手势\\n    auto longPressGesture = gestureApi->createLongPressGesture(1, true, 500);\\n    if (gestureApi->getGestureType) {\\n        ArkUI_GestureRecognizerType type = gestureApi->getGestureType(longPressGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack,ArkUI_GestureRecognizerType%{public}d\\\", type);\\n    }\\n    // 给长按手势定回调\\n    auto onActionCallBackPanLongPress = [](ArkUI_GestureEvent *event, void *extraParam) {\\n        ArkUI_GestureEventActionType actionType = OH_ArkUI_GestureEvent_GetActionType(event);\\n\\n        float velocity = OH_ArkUI_PanGesture_GetVelocity(event);\\n        float velocityX = OH_ArkUI_PanGesture_GetVelocityX(event);\\n        float velocityY = OH_ArkUI_PanGesture_GetVelocityY(event);\\n        float OffsetX = OH_ArkUI_PanGesture_GetOffsetX(event);\\n        float OffsetY = OH_ArkUI_PanGesture_GetOffsetY(event);\\n        float scale = OH_ArkUI_PinchGesture_GetScale(event);\\n        float CenterX = OH_ArkUI_PinchGesture_GetCenterX(event);\\n        float CenterY = OH_ArkUI_PinchGesture_GetCenterY(event);\\n        float angle = OH_ArkUI_SwipeGesture_GetAngle(event);\\n        float VelocityS = OH_ArkUI_SwipeGesture_GetVelocity(event);\\n        float angleR = OH_ArkUI_RotationGesture_GetAngle(event);\\n        float repeat = OH_ArkUI_LongPress_GetRepeatCount(event);\\n\\n        OH_LOG_Print(\\n            LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n            \\\"onPanActionCallBack,longPressGesturecallback actionType:%{public}d,velocity%{public}f,velocityX\\\"\\n            \\\"%{public}f;\\\"\\n            \\\"velocityY%{public}f,OffsetX%{public}f,OffsetY%{public}f,scale%{public}fCenterX\\\"\\n            \\\"%{public}fCenterY\\\"\\n            \\\"%{public}fangle%{public}fVelocityS%{public}fangleR%{public}frepeat%{public}f\\\",\\n            actionType, velocity, velocityX, velocityY, OffsetX, OffsetY, scale, CenterX, CenterY, angle, VelocityS,\\n            angleR, repeat);\\n    };\\n    gestureApi->setGestureEventTarget(longPressGesture,\\n                                      GESTURE_EVENT_ACTION_ACCEPT | GESTURE_EVENT_ACTION_UPDATE |\\n                                            GESTURE_EVENT_ACTION_CANCEL,\\n                                      column, onActionCallBackPanLongPress);\\n\\n    // 将长按手势添加到手势组\\n    if (gestureApi->addChildGesture) {\\n        gestureApi->addChildGesture(groupGesture, longPressGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\", \\\"onPanActionCallBack, addChildGesture longPressGesture\\\");\\n    }\\n    // 创建滑动手势 swipe\\n    auto swipeGesture = gestureApi->createSwipeGesture(1, GESTURE_DIRECTION_ALL, 100);\\n    if (gestureApi->getGestureType) {\\n        ArkUI_GestureRecognizerType type = gestureApi->getGestureType(swipeGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, ArkUI_GestureRecognizerType %{public}d\\\", type);\\n    }\\n    // 给滑动手势绑定回调\\n    auto onActionCallBack = [](ArkUI_GestureEvent *event, void *extraParam) {\\n        ArkUI_GestureEventActionType actionType = OH_ArkUI_GestureEvent_GetActionType(event);\\n\\n        float velocity = OH_ArkUI_PanGesture_GetVelocity(event);\\n        float velocityX = OH_ArkUI_PanGesture_GetVelocityX(event);\\n        float velocityY = OH_ArkUI_PanGesture_GetVelocityY(event);\\n        float OffsetX = OH_ArkUI_PanGesture_GetOffsetX(event);\\n        float OffsetY = OH_ArkUI_PanGesture_GetOffsetY(event);\\n        float scale = OH_ArkUI_PinchGesture_GetScale(event);\\n        float CenterX = OH_ArkUI_PinchGesture_GetCenterX(event);\\n        float CenterY = OH_ArkUI_PinchGesture_GetCenterY(event);\\n        float angle = OH_ArkUI_SwipeGesture_GetAngle(event);\\n        float VelocityS = OH_ArkUI_SwipeGesture_GetVelocity(event);\\n        float angleR = OH_ArkUI_RotationGesture_GetAngle(event);\\n        float repeat = OH_ArkUI_LongPress_GetRepeatCount(event);\\n\\n\\n        // 通过日志查看\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, swipeGesture callback actionType: %{public}d, velocity \\\"\\n                     \\\"%{public}f,velocityX \\\"\\n                     \\\"%{public}f; \\\"\\n                     \\\"velocityY %{public}f, OffsetX %{public}f, OffsetY %{public}f, scale %{public}fCenterX \\\"\\n                     \\\"%{public}f CenterY\\\"\\n                     \\\" %{public}f angle %{public}f VelocityS %{public}f angleR %{public}f repeat %{public}f\\\",\\n                     actionType, velocity, velocityX, velocityY, OffsetX, OffsetY, scale, CenterX, CenterY, angle,\\n                     VelocityS, angleR, repeat);\\n\\n        ArkUI_NumberValue value[] = {{.f32 = 0}, {.f32 = 0}, {.f32 = 0}, {.f32 = angleR}, {.f32 = 0}};\\n        ArkUI_AttributeItem item = {value, 5};\\n        auto column = reinterpret_cast<ArkUI_NodeHandle>(extraParam);\\n        nodeAPI->setAttribute(column, NODE_ROTATE, &item);\\n    };\\n\\n    gestureApi->setGestureEventTarget(\\n        swipeGesture, GESTURE_EVENT_ACTION_ACCEPT | GESTURE_EVENT_ACTION_UPDATE | GESTURE_EVENT_ACTION_END, column,\\n        onActionCallBack);\\n\\n    // 将滑动手势添加到手势组\\n    if (gestureApi->addChildGesture) {\\n        gestureApi->addChildGesture(groupGesture, swipeGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, addChildGesture swipeGesture\\\");\\n    }\\n    // 将手势组设置到组件上\\n    gestureApi->addGestureToNode(column, groupGesture, PRIORITY, NORMAL_GESTURE_MASK);\\n    return column;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]并行识别",
        "parent_text": "  [h2]并行识别 并行识别组合手势对应的ArkUI_GroupGestureMode为PARALLEL_GROUP。并行识别组合手势中注册的手势将同时进行识别，直到所有手势识别结束。并行识别手势组合中的手势进行识别时互不影响。 以并行识别长按和滑动手势为例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"并行识别\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459041__%E5%B9%B6%E8%A1%8C%E8%AF%86%E5%88%AB\\\"'></a><a name='\\\"%E5%B9%B6%E8%A1%8C%E8%AF%86%E5%88%AB\\\"'></a> <h4>[h2]并行识别</h4> <p>并行识别组合手势对应的ArkUI_GroupGestureMode为PARALLEL_GROUP。并行识别组合手势中注册的手势将同时进行识别，直到所有手势识别结束。并行识别手势组合中的手势进行识别时互不影响。</p> <p>以并行识别长按和滑动手势为例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ndk-bind-gesture-events.html"
    },
    {
        "id": 1554,
        "pre": "ArkUI_NodeHandle testGestureExample() {\\n    auto column = nodeAPI->createNode(ARKUI_NODE_COLUMN);\\n    auto button = nodeAPI->createNode(ARKUI_NODE_BUTTON);\\n\\n    // 创建手势并设置回调\\n    ArkUI_NumberValue value[] = {{.u32 = 0xff112233}};\\n    ArkUI_AttributeItem item = {value, 1};\\n    nodeAPI->setAttribute(column, NODE_BACKGROUND_COLOR, &item);\\n    ArkUI_NumberValue widthValue[] = {{200}};\\n    ArkUI_AttributeItem width = {widthValue, 1};\\n    nodeAPI->setAttribute(column, NODE_WIDTH, &width);\\n    ArkUI_NumberValue heightValue[] = {{200}};\\n    ArkUI_AttributeItem height = {heightValue, 1};\\n    nodeAPI->setAttribute(column, NODE_HEIGHT, &height);\\n\\n    // 判断是否有手势API\\n    auto gestureApi = reinterpret_cast<ArkUI_NativeGestureAPI_1 *>(\\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_GESTURE, \\\"ArkUI_NativeGestureAPI_1\\\"));\\n    if (gestureApi->createGroupGesture) {\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, createGroupGesture api exist\\\");\\n    } else {\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack, createGroupGesture api not exist\\\");\\n    }\\n    auto groupGesture = gestureApi->createGroupGesture(ArkUI_GroupGestureMode::EXCLUSIVE_GROUP);\\n\\n    // 创建拖动手势\\n    auto panGesture = gestureApi->createPanGesture(1, GESTURE_DIRECTION_VERTICAL, 5);\\n    if (gestureApi->getGestureType) {\\n        ArkUI_GestureRecognizerType type = gestureApi->getGestureType(panGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack panGesture, ArkUI_GestureRecognizerType %{public}d\\\", type);\\n    }\\n    // 给拖动手势绑定回调\\n    auto onActionCallBackPan = [](ArkUI_GestureEvent *event, void *extraParam) {\\n        ArkUI_GestureEventActionType actionType = OH_ArkUI_GestureEvent_GetActionType(event);\\n\\n        float velocity = OH_ArkUI_PanGesture_GetVelocity(event);\\n        float velocityX = OH_ArkUI_PanGesture_GetVelocityX(event);\\n        float velocityY = OH_ArkUI_PanGesture_GetVelocityY(event);\\n        float OffsetX = OH_ArkUI_PanGesture_GetOffsetX(event);\\n        float OffsetY = OH_ArkUI_PanGesture_GetOffsetY(event);\\n        float scale = OH_ArkUI_PinchGesture_GetScale(event);\\n        float CenterX = OH_ArkUI_PinchGesture_GetCenterX(event);\\n        float CenterY = OH_ArkUI_PinchGesture_GetCenterY(event);\\n        float angle = OH_ArkUI_SwipeGesture_GetAngle(event);\\n        float VelocityS = OH_ArkUI_SwipeGesture_GetVelocity(event);\\n        float angleR = OH_ArkUI_RotationGesture_GetAngle(event);\\n        float repeat = OH_ArkUI_LongPress_GetRepeatCount(event);\\n\\n        // 通过日志查看\\n        OH_LOG_Print(\\n            LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n            \\\"onPanActionCallBack, panGesture callback actionType: %{public}d, velocity %{public}f,velocityX \\\"\\n            \\\"%{public}f; \\\"\\n            \\\"velocityY %{public}f, OffsetX %{public}f, OffsetY %{public}f, scale %{public}fCenterX \\\"\\n            \\\"%{public}f CenterY\\\"\\n            \\\" %{public}f angle %{public}f VelocityS %{public}f angleR %{public}f repeat %{public}f\\\",\\n            actionType, velocity, velocityX, velocityY, OffsetX, OffsetY, scale, CenterX, CenterY, angle, VelocityS,\\n            angleR, repeat);\\n    };\\n    gestureApi->setGestureEventTarget(panGesture,\\n                                      GESTURE_EVENT_ACTION_ACCEPT | GESTURE_EVENT_ACTION_UPDATE |\\n                                          GESTURE_EVENT_ACTION_END | GESTURE_EVENT_ACTION_CANCEL,\\n                                      column, onActionCallBackPan);\\n    // 将拖动手势添加到手势组\\n    if (gestureApi->addChildGesture) {\\n        gestureApi->addChildGesture(groupGesture, panGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\", \\\"onPanActionCallBack, addChildGesture panGesture\\\");\\n    }\\n    // 创建捏合手势\\n    auto pinchGesture = gestureApi->createPinchGesture(0, 0);\\n    if (gestureApi->getGestureType) {\\n        ArkUI_GestureRecognizerType type = gestureApi->getGestureType(pinchGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n                     \\\"onPanActionCallBack pinchGesture, ArkUI_GestureRecognizerType %{public}d\\\", type);\\n    }\\n    // 给捏合手势绑定回调\\n    auto onActionCallBack = [](ArkUI_GestureEvent *event, void *extraParam) {\\n        ArkUI_GestureEventActionType actionType = OH_ArkUI_GestureEvent_GetActionType(event);\\n\\n        float velocity = OH_ArkUI_PanGesture_GetVelocity(event);\\n        float velocityX = OH_ArkUI_PanGesture_GetVelocityX(event);\\n        float velocityY = OH_ArkUI_PanGesture_GetVelocityY(event);\\n        float OffsetX = OH_ArkUI_PanGesture_GetOffsetX(event);\\n        float OffsetY = OH_ArkUI_PanGesture_GetOffsetY(event);\\n        float scale = OH_ArkUI_PinchGesture_GetScale(event);\\n        float CenterX = OH_ArkUI_PinchGesture_GetCenterX(event);\\n        float CenterY = OH_ArkUI_PinchGesture_GetCenterY(event);\\n        float angle = OH_ArkUI_SwipeGesture_GetAngle(event);\\n        float VelocityS = OH_ArkUI_SwipeGesture_GetVelocity(event);\\n        float angleR = OH_ArkUI_RotationGesture_GetAngle(event);\\n        float repeat = OH_ArkUI_LongPress_GetRepeatCount(event);\\n\\n\\n        OH_LOG_Print(\\n            LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\",\\n            \\\"onPanActionCallBack, pinchGesture callback actionType: %{public}d, velocity %{public}f,velocityX \\\"\\n            \\\"%{public}f; \\\"\\n            \\\"velocityY %{public}f, OffsetX %{public}f, OffsetY %{public}f, scale %{public}fCenterX \\\"\\n            \\\"%{public}f CenterY\\\"\\n            \\\" %{public}f angle %{public}f VelocityS %{public}f angleR %{public}f repeat %{public}f\\\",\\n            actionType, velocity, velocityX, velocityY, OffsetX, OffsetY, scale, CenterX, CenterY, angle, VelocityS,\\n            angleR, repeat);\\n\\n\\n        ArkUI_NumberValue value[] = {{.f32 = scale}, {.f32 = scale}};\\n        ArkUI_AttributeItem item = {value, 2};\\n        auto column = reinterpret_cast<ArkUI_NodeHandle>(extraParam);\\n        nodeAPI->setAttribute(column, NODE_SCALE, &item);\\n    };\\n    gestureApi->setGestureEventTarget(pinchGesture,\\n                                      GESTURE_EVENT_ACTION_ACCEPT | GESTURE_EVENT_ACTION_UPDATE |\\n                                          GESTURE_EVENT_ACTION_END | GESTURE_EVENT_ACTION_CANCEL,\\n                                      column, onActionCallBack);\\n    // 将捏合手势添加到手势组\\n    if (gestureApi->addChildGesture) {\\n        gestureApi->addChildGesture(groupGesture, pinchGesture);\\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \\\"Manager\\\", \\\"onPanActionCallBack, addChildGesture pinchGesture\\\");\\n    }\\n    // 将手势组设置到组件上\\n    gestureApi->addGestureToNode(column, groupGesture, PRIORITY, NORMAL_GESTURE_MASK);\\n    return column;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]互斥识别",
        "parent_text": "  [h2]互斥识别 互斥识别组合手势对应的ArkUI_GroupGestureMode为EXCLUSIVE_GROUP。互斥识别组合手势中注册的手势将同时进行识别，若有一个手势识别成功，则结束手势识别，其他所有手势识别失败。 以互斥识别平移手势和捏合手势为例：  ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"互斥识别\\\"'> <a name='\\\"ZH-CN_TOPIC_0000002213459041__%E4%BA%92%E6%96%A5%E8%AF%86%E5%88%AB\\\"'></a><a name='\\\"%E4%BA%92%E6%96%A5%E8%AF%86%E5%88%AB\\\"'></a> <h4>[h2]互斥识别</h4> <p>互斥识别组合手势对应的ArkUI_GroupGestureMode为EXCLUSIVE_GROUP。互斥识别组合手势中注册的手势将同时进行识别，若有一个手势识别成功，则结束手势识别，其他所有手势识别失败。</p> <p>以互斥识别平移手势和捏合手势为例：</p>  </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ndk-bind-gesture-events.html"
    },
    {
        "id": 1555,
        "pre": "    auto onInterruptCallback = [](ArkUI_GestureInterruptInfo *info) -> ArkUI_GestureInterruptResult {\\n        // 获取是否系统手势\\n        auto systag = OH_ArkUI_GestureInterruptInfo_GetSystemFlag(info);\\n        // 获取拦截的手势指针\\n        auto recognizer = OH_ArkUI_GestureInterruptInfo_GetRecognizer(info);\\n        // 获取系统手势类型\\n        auto systemRecognizerType = OH_ArkUI_GestureInterruptInfo_GetSystemRecognizerType(info);\\n        // 获取手势事件\\n        auto gestureEvent = OH_ArkUI_GestureInterruptInfo_GetGestureEvent(info);\\n        auto inputevent = OH_ArkUI_GestureEvent_GetRawInputEvent(gestureEvent);\\n\\n        if (systag) {\\n            // 如果是系统手势则不拦截\\n            return GESTURE_INTERRUPT_RESULT_CONTINUE;\\n        } else {\\n            // 不是系统手势则拒绝\\n            return GESTURE_INTERRUPT_RESULT_REJECT;\\n        }\\n    };",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "创建自定义手势判定回调。 ",
        "import_module": null,
        "parent": "<li><p>创建自定义手势判定回调。</p> </li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ndk-bind-gesture-events.html"
    },
    {
        "id": 1556,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@hw-stylistic/object-property-newline\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_object-property-newline.html"
    },
    {
        "id": 1557,
        "pre": "export {a, b};\\n\\ninterface II {\\n  p1: string;\\n  p2: string;\\n  p3: string;\\n  p4: string;\\n  p5?: string;\\n}\\n\\nconst a: II = {\\n  p1: 'p1',\\n  p2: 'p2',\\n  p3: 'pe',\\n  p4: 'p4',\\n  p5: 'p5'\\n};\\n\\nconst b: II = { p1: 'p1', p2: 'p2', p3: 'p3', p4: 'p4' };",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_object-property-newline.html"
    },
    {
        "id": 1558,
        "pre": "export {a, b};\\n\\ninterface II {\\n  p1: string;\\n  p2: string;\\n  p3: string;\\n  p4: string;\\n  p5?: string;\\n}\\n\\n// Object properties must go on a new line.\\nconst a: II = { p1: 'p1', p2: 'p2',\\n  p3: 'p3', p4: 'p4' };\\n\\n// Object properties must go on a new line.\\nconst b: II = { p1: 'p1', p2: 'p2', p3: 'p3', p4: 'p4', p5: 'p5' };",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_object-property-newline.html"
    },
    {
        "id": 1559,
        "pre": "interface W {\\n  bundleName: string\\n  action: string\\n  entities: string[]\\n}\\n\\nlet wantInfo: W = {\\n  'bundleName': 'com.huawei.hmos.browser',\\n  'action': 'ohos.want.action.viewData',\\n  'entities': ['entity.system.browsable']\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-identifiers-as-prop-names",
        "parent_text": "arkts-identifiers-as-prop-names应用代码  建议改法 interface W {\\n  bundleName: string\\n  action: string\\n  entities: string[]\\n}\\n\\nlet wantInfo: W = {\\n  bundleName: 'com.huawei.hmos.browser',\\n  action: 'ohos.want.action.viewData',\\n  entities: ['entity.system.browsable']\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-identifiers-as-prop-names\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-identifiers-as-prop-names\\\"'></a><a name='\\\"arkts-identifiers-as-prop-names\\\"'></a><h4>arkts-identifiers-as-prop-names</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>interface W {\\n  bundleName: string\\n  action: string\\n  entities: string[]\\n}\\n\\nlet wantInfo: W = {\\n  bundleName: 'com.huawei.hmos.browser',\\n  action: 'ohos.want.action.viewData',\\n  entities: ['entity.system.browsable']\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1560,
        "pre": "function printObj(obj: any) {\\n  console.log(obj);\\n}\\n\\nprintObj('abc');",
        "type": "Reference",
        "function_call": "function printObj(obj: string)",
        "function_name": "[h2]按照业务逻辑，将代码中的any, unknown改为具体的类型",
        "parent_text": "[h2]按照业务逻辑，将代码中的any, unknown改为具体的类型 建议改法 function printObj(obj: string) {\\n  console.log(obj);\\n}\\n\\nprintObj('abc'); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"按照业务逻辑将代码中的any-unknown改为具体的类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E6%8C%89%E7%85%A7%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%B0%86%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84any-unknown%E6%94%B9%E4%B8%BA%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E6%8C%89%E7%85%A7%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%B0%86%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84any-unknown%E6%94%B9%E4%B8%BA%E5%85%B7%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]按照业务逻辑，将代码中的any, unknown改为具体的类型</h4> <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>function printObj(obj: string) {\\n  console.log(obj);\\n}\\n\\nprintObj('abc');</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1561,
        "pre": "class A {\\n  v: number = 0\\n  s: string = ''\\n  \\n  foo(str: string) {\\n    let tmpStr = JSON.parse(str);\\n    if (tmpStr.add != undefined) {\\n      this.v = tmpStr.v;\\n      this.s = tmpStr.s;\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "foo(str: string)",
        "function_name": "[h2]标注JSON.parse返回值类型",
        "parent_text": "[h2]标注JSON.parse返回值类型应用代码  建议改法 class A {\\n  v: number = 0\\n  s: string = ''\\n  \\n  foo(str: string) {\\n    let tmpStr: Record<string, Object> = JSON.parse(str);\\n    if (tmpStr.add != undefined) {\\n      this.v = tmpStr.v as number;\\n      this.s = tmpStr.s as string;\\n    }\\n  }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"标注jsonparse返回值类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E6%A0%87%E6%B3%A8jsonparse%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E6%A0%87%E6%B3%A8jsonparse%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]标注JSON.parse返回值类型</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  v: number = 0\\n  s: string = ''\\n  \\n  foo(str: string) {\\n    let tmpStr: Record&lt;string, Object&gt; = JSON.parse(str);\\n    if (tmpStr.add != undefined) {\\n      this.v = tmpStr.v as number;\\n      this.s = tmpStr.s as string;\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1562,
        "pre": "function printProperties(obj: any) {\\n  console.log(obj.name);\\n  console.log(obj.value);\\n}",
        "type": "Reference",
        "function_call": "function printProperties(obj: Record&lt;string, Object&gt;)",
        "function_name": "[h2]使用Record类型",
        "parent_text": "[h2]使用Record类型应用代码  建议改法 function printProperties(obj: Record<string, Object>) {\\n  console.log(obj.name as string);\\n  console.log(obj.value as string);\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"使用record类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BD%BF%E7%94%A8record%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8record%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]使用Record类型</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>function printProperties(obj: Record&lt;string, Object&gt;) {\\n  console.log(obj.name as string);\\n  console.log(obj.value as string);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1563,
        "pre": "interface I {\\n  (value: string): void;\\n}\\n\\nfunction foo(fn: I) {\\n  fn('abc');\\n}\\n\\nfoo((value: string) => {\\n  console.log(value);\\n})",
        "type": "Reference",
        "function_call": "nfunction foo(fn: I)",
        "function_name": "arkts-no-call-signature",
        "parent_text": "arkts-no-call-signature使用函数类型来替代。 应用代码  建议改法 type I = (value: string) => void\\n\\nfunction foo(fn: I) {\\n  fn('abc');\\n}\\n\\nfoo((value: string) => {\\n  console.log(value);\\n}) ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-call-signature\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-call-signature\\\"'></a><a name='\\\"arkts-no-call-signature\\\"'></a><h4>arkts-no-call-signature</h4><p>使用函数类型来替代。</p> <p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>type I = (value: string) =&gt; void\\n\\nfunction foo(fn: I) {\\n  fn('abc');\\n}\\n\\nfoo((value: string) =&gt; {\\n  console.log(value);\\n})</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1564,
        "pre": "class Controller {\\n  value: string = ''\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ntype ControllerConstructor = {\\n  new (value: string): Controller;\\n}\\n\\nclass Menu {\\n  controller: ControllerConstructor = Controller\\n  createController() {\\n    if (this.controller) {\\n      return new this.controller(123);\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t = new Menu();\\nconsole.log(t.createController()!.value);",
        "type": "Reference",
        "function_call": "createController()",
        "function_name": "arkts-no-ctor-signatures-type",
        "parent_text": "arkts-no-ctor-signatures-type应用代码  建议改法 class Controller {\\n  value: string = ''\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ntype ControllerConstructor = () => Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () => {\\n    return new Controller('abc');\\n  }\\n\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-ctor-signatures-type\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-ctor-signatures-type\\\"'></a><a name='\\\"arkts-no-ctor-signatures-type\\\"'></a><h4>arkts-no-ctor-signatures-type</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Controller {\\n  value: string = ''\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ntype ControllerConstructor = () =&gt; Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () =&gt; {\\n    return new Controller('abc');\\n  }\\n\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1565,
        "pre": "function foo(data: { [key: string]: string }) {\\n  data['a'] = 'a';\\n  data['b'] = 'b';\\n  data['c'] = 'c';\\n}",
        "type": "Reference",
        "function_call": "function foo(data: Record&lt;string, string&gt;)",
        "function_name": "arkts-no-indexed-signatures",
        "parent_text": "arkts-no-indexed-signatures使用Record类型来替代。 应用代码  建议改法 function foo(data: Record<string, string>) {\\n  data['a'] = 'a';\\n  data['b'] = 'b';\\n  data['c'] = 'c';\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-indexed-signatures\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-indexed-signatures\\\"'></a><a name='\\\"arkts-no-indexed-signatures\\\"'></a><h4>arkts-no-indexed-signatures</h4><p>使用Record类型来替代。</p> <p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>function foo(data: Record&lt;string, string&gt;) {\\n  data['a'] = 'a';\\n  data['b'] = 'b';\\n  data['c'] = 'c';\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1566,
        "pre": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "type": "Import",
        "function_call": "getInstance(): C",
        "function_name": "arkts-no-typing-with-this",
        "parent_text": "arkts-no-typing-with-this应用代码  建议改法 class C {\\n  getInstance(): C {\\n    return this;\\n  }\\n} ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-typing-with-this\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-typing-with-this\\\"'></a><a name='\\\"arkts-no-typing-with-this\\\"'></a><h4>arkts-no-typing-with-this</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  getInstance(): C {\\n    return this;\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1567,
        "pre": "class Person {\\n  constructor(readonly name: string) {}\\n\\n  getName(): string {\\n    return this.name;\\n  }\\n}",
        "type": "Reference",
        "function_call": "getName(): string",
        "function_name": "arkts-no-ctor-prop-decls",
        "parent_text": "arkts-no-ctor-prop-decls应用代码  建议改法 class Person {\\n  name: string\\n  constructor(name: string) {\\n    this.name = name;\\n  }\\n\\n  getName(): string {\\n    return this.name;\\n  }\\n} ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-ctor-prop-decls\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-ctor-prop-decls\\\"'></a><a name='\\\"arkts-no-ctor-prop-decls\\\"'></a><h4>arkts-no-ctor-prop-decls</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Person {\\n  name: string\\n  constructor(name: string) {\\n    this.name = name;\\n  }\\n\\n  getName(): string {\\n    return this.name;\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1568,
        "pre": "class Controller {\\n  value: string = ''\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ninterface ControllerConstructor {\\n  new (value: string): Controller;\\n}\\n\\nclass Menu {\\n  controller: ControllerConstructor = Controller\\n  createController() {\\n    if (this.controller) {\\n      return new this.controller('abc');\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t = new Menu();\\nconsole.log(t.createController()!.value);",
        "type": "Reference",
        "function_call": "createController()",
        "function_name": "arkts-no-ctor-signatures-iface",
        "parent_text": "arkts-no-ctor-signatures-iface应用代码  建议改法 class Controller {\\n  value: string = ''\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ntype ControllerConstructor = () => Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () => {\\n    return new Controller('abc');\\n  }\\n\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value); ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-ctor-signatures-iface\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-ctor-signatures-iface\\\"'></a><a name='\\\"arkts-no-ctor-signatures-iface\\\"'></a><h4>arkts-no-ctor-signatures-iface</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Controller {\\n  value: string = ''\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ntype ControllerConstructor = () =&gt; Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () =&gt; {\\n    return new Controller('abc');\\n  }\\n\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1569,
        "pre": "import { router } from '@kit.ArkUI';\\nlet params: Object = router.getParams();\\nlet funNum: number = params['funNum'];\\nlet target: string = params['target'];",
        "type": "Reference",
        "function_call": "getParams()",
        "function_name": "arkts-no-props-by-index",
        "parent_text": "arkts-no-props-by-index可以转换成Record类型，用来访问对象的属性。 应用代码  建议改法 import { router } from '@kit.ArkUI';\\nlet params = router.getParams() as Record<string, string | number>;\\nlet funNum: number = params.funNum as number;\\nlet target: string = params.target as string; ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-props-by-index\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-props-by-index\\\"'></a><a name='\\\"arkts-no-props-by-index\\\"'></a><h4>arkts-no-props-by-index</h4><p>可以转换成Record类型，用来访问对象的属性。</p> <p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>import { router } from '@kit.ArkUI';\\nlet params = router.getParams() as Record&lt;string, string | number&gt;;\\nlet funNum: number = params.funNum as number;\\nlet target: string = params.target as string;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1570,
        "pre": "class A {\\n  str: string = ''\\n}\\nclass B extends A {}\\nclass C extends A {}\\n\\nlet arr: Array<A> = [];\\n\\nlet originMenusMap:Map<string, C> = new Map(arr.map(item => [item.str, (item instanceof C) ? item: null]));",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-inferred-generic-params",
        "parent_text": "arkts-no-inferred-generic-params应用代码  建议改法 class A {\\n  str: string = ''\\n}\\nclass B extends A {}\\nclass C extends A {}\\n\\nlet arr: Array<A> = [];\\n\\nlet originMenusMap: Map<string, C | null> = new Map<string, C | null>(arr.map<[string, C | null]>(item => [item.str, (item instanceof C) ? item: null])); 原因 (item instanceof C) ? item: null 需要声明类型为C | null，由于编译器无法推导出map的泛型类型参数，需要显式标注。 ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-inferred-generic-params\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-inferred-generic-params\\\"'></a><a name='\\\"arkts-no-inferred-generic-params\\\"'></a><h4>arkts-no-inferred-generic-params</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  str: string = ''\\n}\\nclass B extends A {}\\nclass C extends A {}\\n\\nlet arr: Array&lt;A&gt; = [];\\n\\nlet originMenusMap: Map&lt;string, C | null&gt; = new Map&lt;string, C | null&gt;(arr.map&lt;[string, C | null]&gt;(item =&gt; [item.str, (item instanceof C) ? item: null]));</pre> <p><strong>原因</strong></p> <p>(item instanceof C) ? item: null 需要声明类型为C | null，由于编译器无法推导出map的泛型类型参数，需要显式标注。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1571,
        "pre": "let regex: RegExp = /\\\\s*/g;",
        "type": "Reference",
        "function_call": "需要将其作为new RegExp()",
        "function_name": "arkts-no-regexp-literals",
        "parent_text": "arkts-no-regexp-literals应用代码  建议改法 let regexp: RegExp = new RegExp('\\\\\\\\s*','g'); 原因 如果正则表达式中使用了标志符，需要将其作为new RegExp()的参数。 ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-regexp-literals\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-regexp-literals\\\"'></a><a name='\\\"arkts-no-regexp-literals\\\"'></a><h4>arkts-no-regexp-literals</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>let regexp: RegExp = new RegExp('\\\\\\\\s*','g');</pre> <p><strong>原因</strong></p> <p>如果正则表达式中使用了标志符，需要将其作为new RegExp()的参数。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1572,
        "pre": "const area = {\\n  pixels: new ArrayBuffer(8),\\n  offset: 0,\\n  stride: 8,\\n  region: { size: { height: 1,width:2 }, x: 0, y: 0 }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]从SDK中导入类型，标注object literal类型",
        "parent_text": "[h2]从SDK中导入类型，标注object literal类型应用代码  建议改法 import { image } from '@kit.ImageKit';\\n\\nconst area: image.PositionArea = {\\n  pixels: new ArrayBuffer(8),\\n  offset: 0,\\n  stride: 8,\\n  region: { size: { height: 1, width: 2 }, x: 0, y: 0 }\\n} ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"从sdk中导入类型标注object-literal类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BB%8Esdk%E4%B8%AD%E5%AF%BC%E5%85%A5%E7%B1%BB%E5%9E%8B%E6%A0%87%E6%B3%A8object-literal%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E4%BB%8Esdk%E4%B8%AD%E5%AF%BC%E5%85%A5%E7%B1%BB%E5%9E%8B%E6%A0%87%E6%B3%A8object-literal%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]从SDK中导入类型，标注object literal类型</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>import { image } from '@kit.ImageKit';\\n\\nconst area: image.PositionArea = {\\n  pixels: new ArrayBuffer(8),\\n  offset: 0,\\n  stride: 8,\\n  region: { size: { height: 1, width: 2 }, x: 0, y: 0 }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1573,
        "pre": "class Test {\\n  value: number = 1\\n\\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nlet t: Test = { value: 2 };",
        "type": "Reference",
        "function_call": "constructor(n: number)",
        "function_name": "[h2]用class为object literal标注类型，需要class的构造函数无参数",
        "parent_text": "[h2]用class为object literal标注类型，需要class的构造函数无参数应用代码  建议改法1 // 去除构造函数\\nclass Test {\\n  value: number = 1\\n}\\n\\nlet t: Test = { value: 2 }; 建议改法2 // 使用new\\nclass Test {\\n  value: number = 1\\n  \\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nlet t: Test = new Test(2); 原因 class C {\\n  value: number = 1\\n  \\n  constructor(n: number) {\\n    if (n < 0) {\\n      throw new Error('Negative');\\n    }\\n    this.value = n;\\n  }\\n}\\n\\nlet s: C = new C(-2); \\t//抛出异常\\nlet t: C = { value: -2 };\\t//ArkTS不支持 例如在上面的例子中，如果允许使用C来标注object literal的类型，那么上述代码中的变量t会导致行为的二义性。ArkTS禁止通过object literal来绕过这一行为。 ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"用class为object-literal标注类型需要class的构造函数无参数\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E7%94%A8class%E4%B8%BAobject-literal%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81class%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%97%A0%E5%8F%82%E6%95%B0\\\"'></a><a name='\\\"%E7%94%A8class%E4%B8%BAobject-literal%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81class%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%97%A0%E5%8F%82%E6%95%B0\\\"'></a><h4>[h2]用class为object literal标注类型，需要class的构造函数无参数</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法1</strong></p> <pre class='\\\"typescript\\\"'>// 去除构造函数\\nclass Test {\\n  value: number = 1\\n}\\n\\nlet t: Test = { value: 2 };</pre> <p><strong>建议改法2</strong></p> <pre class='\\\"typescript\\\"'>// 使用new\\nclass Test {\\n  value: number = 1\\n  \\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nlet t: Test = new Test(2);</pre> <p><strong>原因</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  value: number = 1\\n  \\n  constructor(n: number) {\\n    if (n &lt; 0) {\\n      throw new Error('Negative');\\n    }\\n    this.value = n;\\n  }\\n}\\n\\nlet s: C = new C(-2); \\t//抛出异常\\nlet t: C = { value: -2 };\\t//ArkTS不支持</pre> <p>例如在上面的例子中，如果允许使用C来标注object literal的类型，那么上述代码中的变量t会导致行为的二义性。ArkTS禁止通过object literal来绕过这一行为。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1574,
        "pre": "class Test {\\n  value: number = 0\\n}\\n\\nlet arr: Test[] = [\\n  {\\n    'value': 1\\n  },\\n  {\\n    'value': 2\\n  },\\n  {\\n    'value': 3\\n  }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]用class/interface为object literal标注类型，需要使用identifier作为object literal的key",
        "parent_text": "[h2]用class/interface为object literal标注类型，需要使用identifier作为object literal的key应用代码  建议改法 class Test {\\n  value: number = 0\\n}\\nlet arr: Test[] = [\\n  {\\n    value: 1\\n  },\\n  {\\n    value: 2\\n  },\\n  {\\n    value: 3\\n  }\\n] ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"用classinterface为object-literal标注类型需要使用identifier作为object-literal的key\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E7%94%A8classinterface%E4%B8%BAobject-literal%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8identifier%E4%BD%9C%E4%B8%BAobject-literal%E7%9A%84key\\\"'></a><a name='\\\"%E7%94%A8classinterface%E4%B8%BAobject-literal%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8identifier%E4%BD%9C%E4%B8%BAobject-literal%E7%9A%84key\\\"'></a><h4>[h2]用class/interface为object literal标注类型，需要使用identifier作为object literal的key</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Test {\\n  value: number = 0\\n}\\nlet arr: Test[] = [\\n  {\\n    value: 1\\n  },\\n  {\\n    value: 2\\n  },\\n  {\\n    value: 3\\n  }\\n]</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1575,
        "pre": "let obj: Record<string, number | string> = {\\n  value: 123,\\n  name: 'abc'\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用Record为object literal标注类型，需要使用字符串作为object literal的key",
        "parent_text": "[h2]使用Record为object literal标注类型，需要使用字符串作为object literal的key应用代码  建议改法 let obj: Record<string, number | string> = {\\n  'value': 123,\\n  'name': 'abc'\\n} ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用record为object-literal标注类型需要使用字符串作为object-literal的key\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BD%BF%E7%94%A8record%E4%B8%BAobject-literal%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BAobject-literal%E7%9A%84key\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8record%E4%B8%BAobject-literal%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BAobject-literal%E7%9A%84key\\\"'></a><h4>[h2]使用Record为object literal标注类型，需要使用字符串作为object literal的key</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>let obj: Record&lt;string, number | string&gt; = {\\n  'value': 123,\\n  'name': 'abc'\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1576,
        "pre": "function foo(obj: { [key: string]: string}): string {\\n  if (obj != undefined && obj != null) {\\n    return obj.value1 + obj.value2;\\n  }\\n  return '';\\n}",
        "type": "Reference",
        "function_call": "function foo(obj: Record&lt;string, string&gt;): string",
        "function_name": "[h2]函数参数类型包含index signature",
        "parent_text": "[h2]函数参数类型包含index signature应用代码  建议改法 function foo(obj: Record<string, string>): string {\\n  if (obj != undefined && obj != null) {\\n    return obj.value1 + obj.value2;\\n  }\\n  return '';\\n} ",
        "import_module": "class C {\\n  getInstance(): this {\\n    return this;\\n  }\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"函数参数类型包含index-signature\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%8C%85%E5%90%ABindex-signature\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%8C%85%E5%90%ABindex-signature\\\"'></a><h4>[h2]函数参数类型包含index signature</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>function foo(obj: Record&lt;string, string&gt;): string {\\n  if (obj != undefined &amp;&amp; obj != null) {\\n    return obj.value1 + obj.value2;\\n  }\\n  return '';\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1577,
        "pre": "(fn) => {\\n  fn({ value: 123, name:'' });\\n}",
        "type": "Import",
        "function_call": "n(fn: (v: T)",
        "function_name": "[h2]函数实参使用了object literal",
        "parent_text": "[h2]函数实参使用了object literal应用代码  建议改法 class T {\\n  value: number = 0\\n  name: string = ''\\n}\\n\\n(fn: (v: T) => void) => {\\n  fn({ value: 123, name: '' });\\n} ",
        "import_module": "(fn) => {\\n  fn({ value: 123, name:'' });\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"函数实参使用了object-literal\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E5%87%BD%E6%95%B0%E5%AE%9E%E5%8F%82%E4%BD%BF%E7%94%A8%E4%BA%86object-literal\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E5%AE%9E%E5%8F%82%E4%BD%BF%E7%94%A8%E4%BA%86object-literal\\\"'></a><h4>[h2]函数实参使用了object literal</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class T {\\n  value: number = 0\\n  name: string = ''\\n}\\n\\n(fn: (v: T) =&gt; void) =&gt; {\\n  fn({ value: 123, name: '' });\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1578,
        "pre": "interface T {\\n  foo(value: number): number\\n}\\n\\nlet t:T = { foo: (value) => { return value } };",
        "type": "Reference",
        "function_call": "new T()",
        "function_name": "[h2]class/interface 中包含方法",
        "parent_text": "[h2]class/interface 中包含方法应用代码  建议改法1 interface T {\\n  foo: (value: number) => number\\n}\\n\\nlet t:T = { foo: (value) => { return value } }; 建议改法2 class T {\\n  foo: (value: number) => number = (value: number) => {\\n    return value;\\n  }\\n}\\n\\nlet t:T = new T(); 原因 class/interface中声明的方法应该被所有class的实例共享。ArkTS不支持通过object literal改写实例方法。ArkTS支持函数类型的属性。 ",
        "import_module": "(fn) => {\\n  fn({ value: 123, name:'' });\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"classinterface-中包含方法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__classinterface-%E4%B8%AD%E5%8C%85%E5%90%AB%E6%96%B9%E6%B3%95\\\"'></a><a name='\\\"classinterface-%E4%B8%AD%E5%8C%85%E5%90%AB%E6%96%B9%E6%B3%95\\\"'></a><h4>[h2]class/interface 中包含方法</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法1</strong></p> <pre class='\\\"typescript\\\"'>interface T {\\n  foo: (value: number) =&gt; number\\n}\\n\\nlet t:T = { foo: (value) =&gt; { return value } };</pre> <p><strong>建议改法2</strong></p> <pre class='\\\"typescript\\\"'>class T {\\n  foo: (value: number) =&gt; number = (value: number) =&gt; {\\n    return value;\\n  }\\n}\\n\\nlet t:T = new T();</pre> <p><strong>原因</strong></p> <p>class/interface中声明的方法应该被所有class的实例共享。ArkTS不支持通过object literal改写实例方法。ArkTS支持函数类型的属性。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1579,
        "pre": "export default {\\n  onCreate() {\\n    // ...\\n  },\\n  onDestroy() {\\n    // ...\\n  }\\n}",
        "type": "Reference",
        "function_call": "new Test()",
        "function_name": "[h2]export default对象",
        "parent_text": "[h2]export default对象应用代码  建议改法 class Test {\\n  onCreate() {\\n    // ...\\n  }\\n  onDestroy() {\\n    // ...\\n  }\\n}\\n\\nexport default new Test() ",
        "import_module": "(fn) => {\\n  fn({ value: 123, name:'' });\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"export-default对象\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__export-default%E5%AF%B9%E8%B1%A1\\\"'></a><a name='\\\"export-default%E5%AF%B9%E8%B1%A1\\\"'></a><h4>[h2]export default对象</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Test {\\n  onCreate() {\\n    // ...\\n  }\\n  onDestroy() {\\n    // ...\\n  }\\n}\\n\\nexport default new Test()</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1580,
        "pre": "// test.d.ets\\ndeclare namespace test {\\n  interface I {\\n    id: string;\\n    type: number;\\n  }\\n\\n  function foo(name: string, option: I): void;\\n}\\n\\nexport default test;\\n\\n// app.ets\\nimport { test } from 'test';\\n\\nlet option = { id: '', type: 0 };\\ntest.foo('', option);",
        "type": "Reference",
        "function_call": "function foo(name: string, option: I): void",
        "function_name": "[h2]通过导入namespace获取类型",
        "parent_text": "[h2]通过导入namespace获取类型应用代码  建议改法 // test.d.ets\\ndeclare namespace test {\\n  interface I {\\n    id: string;\\n    type: number;\\n  }\\n\\n  function foo(name: string, option: I): void;\\n}\\n\\nexport default test;\\n\\n// app.ets\\nimport { test } from 'test';\\n\\nlet option: test.I = { id: '', type: 0 };\\ntest.foo('', option); 原因 对象字面量缺少类型，根据test.foo分析可以得知，option的类型来源于声明文件，那么只需要将类型导入即可。 注意到在test.d.ets中，I是定义在namespace中的，所以在ets文件中，先导入namespace，再通过名称获取相应的类型。 ",
        "import_module": "(fn) => {\\n  fn({ value: 123, name:'' });\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"通过导入namespace获取类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E9%80%9A%E8%BF%87%E5%AF%BC%E5%85%A5namespace%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"%E9%80%9A%E8%BF%87%E5%AF%BC%E5%85%A5namespace%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]通过导入namespace获取类型</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>// test.d.ets\\ndeclare namespace test {\\n  interface I {\\n    id: string;\\n    type: number;\\n  }\\n\\n  function foo(name: string, option: I): void;\\n}\\n\\nexport default test;\\n\\n// app.ets\\nimport { test } from 'test';\\n\\nlet option: test.I = { id: '', type: 0 };\\ntest.foo('', option);</pre> <p><strong>原因</strong></p> <p>对象字面量缺少类型，根据test.foo分析可以得知，option的类型来源于声明文件，那么只需要将类型导入即可。</p> <p>注意到在test.d.ets中，I是定义在namespace中的，所以在ets文件中，先导入namespace，再通过名称获取相应的类型。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1581,
        "pre": "function emit(event: string, ...args: Object[]): void {}\\n\\nemit('', {\\n  'action': 11,\\n  'outers': false\\n});",
        "type": "Reference",
        "function_call": "function emit(event: string, ...args: Object[]): void",
        "function_name": "[h2]object literal传参给Object类型",
        "parent_text": "[h2]object literal传参给Object类型应用代码  建议改法 function emit(event: string, ...args: Object[]): void {}\\n\\nlet emitArg: Record<string, number | boolean> = {\\n   'action': 11,\\n   'outers': false\\n}\\n\\nemit('', emitArg); ",
        "import_module": "(fn) => {\\n  fn({ value: 123, name:'' });\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"object-literal传参给object类型\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__object-literal%E4%BC%A0%E5%8F%82%E7%BB%99object%E7%B1%BB%E5%9E%8B\\\"'></a><a name='\\\"object-literal%E4%BC%A0%E5%8F%82%E7%BB%99object%E7%B1%BB%E5%9E%8B\\\"'></a><h4>[h2]object literal传参给Object类型</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>function emit(event: string, ...args: Object[]): void {}\\n\\nlet emitArg: Record&lt;string, number | boolean&gt; = {\\n   'action': 11,\\n   'outers': false\\n}\\n\\nemit('', emitArg);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1582,
        "pre": "type Person = { name: string, age: number }",
        "type": "Import",
        "function_call": null,
        "function_name": "arkts-no-obj-literals-as-types",
        "parent_text": "arkts-no-obj-literals-as-types应用代码  建议改法 interface Person {\\n  name: string,\\n  age: number\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-obj-literals-as-types\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-obj-literals-as-types\\\"'></a><a name='\\\"arkts-no-obj-literals-as-types\\\"'></a><h4>arkts-no-obj-literals-as-types</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>interface Person {\\n  name: string,\\n  age: number\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1583,
        "pre": "let permissionList = [\\n  { name: '设备信息', value: '用于分析设备的续航、通话、上网、SIM卡故障等' },\\n  { name: '麦克风', value: '用于反馈问题单时增加语音' },\\n  { name: '存储', value: '用于反馈问题单时增加本地文件附件' }\\n]",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-noninferrable-arr-literals",
        "parent_text": "arkts-no-noninferrable-arr-literals应用代码  建议改法 为对象字面量声明类型 class PermissionItem {\\n  name?: string\\n  value?: string\\n}\\n\\nlet permissionList: PermissionItem[] = [\\n  { name: '设备信息', value: '用于分析设备的续航、通话、上网、SIM卡故障等' },\\n  { name: '麦克风', value: '用于反馈问题单时增加语音' },\\n  { name: '存储', value: '用于反馈问题单时增加本地文件附件' }\\n] ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-noninferrable-arr-literals\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-noninferrable-arr-literals\\\"'></a><a name='\\\"arkts-no-noninferrable-arr-literals\\\"'></a><h4>arkts-no-noninferrable-arr-literals</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <p>为对象字面量声明类型</p> <pre class='\\\"typescript\\\"'>class PermissionItem {\\n  name?: string\\n  value?: string\\n}\\n\\nlet permissionList: PermissionItem[] = [\\n  { name: '设备信息', value: '用于分析设备的续航、通话、上网、SIM卡故障等' },\\n  { name: '麦克风', value: '用于反馈问题单时增加语音' },\\n  { name: '存储', value: '用于反馈问题单时增加本地文件附件' }\\n]</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1584,
        "pre": "class C {\\n  add(left: number, right: number): number {\\n    return left + right;\\n  }\\n}\\n\\nfunction sub(left: number, right: number): number {\\n  return left - right;\\n}\\n\\nlet c1 = new C();\\nc1.add = sub;",
        "type": "Reference",
        "function_call": "new C()",
        "function_name": "arkts-no-method-reassignment",
        "parent_text": "arkts-no-method-reassignment应用代码  建议改法 class C {\\n  add: (left: number, right: number) => number = \\n    (left: number, right: number) => {\\n      return left + right;\\n    }\\n}\\n\\nfunction sub(left: number, right: number): number {\\n  return left - right;\\n}\\n\\nlet c1 = new C();\\nc1.add = sub; ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-method-reassignment\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-method-reassignment\\\"'></a><a name='\\\"arkts-no-method-reassignment\\\"'></a><h4>arkts-no-method-reassignment</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  add: (left: number, right: number) =&gt; number = \\n    (left: number, right: number) =&gt; {\\n      return left + right;\\n    }\\n}\\n\\nfunction sub(left: number, right: number): number {\\n  return left - right;\\n}\\n\\nlet c1 = new C();\\nc1.add = sub;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1585,
        "pre": "let a = +'5';\\nlet b = -'5';\\nlet c = ~'5';\\nlet d = +'string';",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-polymorphic-unops",
        "parent_text": "arkts-no-polymorphic-unops应用代码  建议改法 let a = Number.parseInt('5');\\nlet b = -Number.parseInt('5');\\nlet c = ~Number.parseInt('5');\\nlet d = new Number('string'); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-polymorphic-unops\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-polymorphic-unops\\\"'></a><a name='\\\"arkts-no-polymorphic-unops\\\"'></a><h4>arkts-no-polymorphic-unops</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>let a = Number.parseInt('5');\\nlet b = -Number.parseInt('5');\\nlet c = ~Number.parseInt('5');\\nlet d = new Number('string');</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1586,
        "pre": "// module1.ts\\nclass C {\\n  value: number = 0\\n}\\n\\nexport let c = new C()\\n\\n// module2.ts\\nimport { c } from './module1'\\nlet t: typeof c = { value: 123 };",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-type-query",
        "parent_text": "arkts-no-type-query应用代码  建议改法 // module1.ts\\nclass C {\\n  value: number = 0\\n}\\n\\nexport { C }\\n\\n// module2.ts\\nimport { C } from './module1'\\nlet t: C = { value: 123 }; ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-type-query\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-type-query\\\"'></a><a name='\\\"arkts-no-type-query\\\"'></a><h4>arkts-no-type-query</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>// module1.ts\\nclass C {\\n  value: number = 0\\n}\\n\\nexport { C }\\n\\n// module2.ts\\nimport { C } from './module1'\\nlet t: C = { value: 123 };</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1587,
        "pre": "function test(str: string, obj: Record<string, Object>) {\\n  return str in obj;\\n}",
        "type": "Reference",
        "function_call": "function test(str: string, obj: Record&lt;string, Object&gt;)",
        "function_name": "[h2]使用Object.keys判断属性是否存在",
        "parent_text": "[h2]使用Object.keys判断属性是否存在应用代码  建议改法 function test(str: string, obj: Record<string, Object>) {\\n  for (let i of Object.keys(obj)) {\\n    if (i == str) {\\n      return true;\\n    }\\n  }\\n  return false;\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用objectkeys判断属性是否存在\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BD%BF%E7%94%A8objectkeys%E5%88%A4%E6%96%AD%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8objectkeys%E5%88%A4%E6%96%AD%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8\\\"'></a><h4>[h2]使用Object.keys判断属性是否存在</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>function test(str: string, obj: Record&lt;string, Object&gt;) {\\n  for (let i of Object.keys(obj)) {\\n    if (i == str) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1588,
        "pre": "let map = new Map<string, string>([['a', 'a'], ['b', 'b']]);\\nfor (let [key, value] of map) {\\n  console.log(key);\\n  console.log(value);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-destruct-assignment",
        "parent_text": "arkts-no-destruct-assignment应用代码  建议改法 使用数组 let map = new Map<string, string>([['a', 'a'], ['b', 'b']]);\\nfor (let arr of map) {\\n  let key = arr[0];\\n  let value = arr[1];\\n  console.log(key);\\n  console.log(value);\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-destruct-assignment\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-destruct-assignment\\\"'></a><a name='\\\"arkts-no-destruct-assignment\\\"'></a><h4>arkts-no-destruct-assignment</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <p>使用数组</p> <pre class='\\\"typescript\\\"'>let map = new Map&lt;string, string&gt;([['a', 'a'], ['b', 'b']]);\\nfor (let arr of map) {\\n  let key = arr[0];\\n  let value = arr[1];\\n  console.log(key);\\n  console.log(value);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1589,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit'\\n\\ntry {\\n  // ...\\n} catch (e: BusinessError) {\\n  console.error(e.message, e.code);\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-types-in-catch",
        "parent_text": "arkts-no-types-in-catch应用代码  建议改法 import { BusinessError } from '@kit.BasicServicesKit'\\n\\ntry {\\n  // ...\\n} catch (error) {\\n  let e: BusinessError = error as BusinessError;\\n  console.error(e.message, e.code);\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-types-in-catch\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-types-in-catch\\\"'></a><a name='\\\"arkts-no-types-in-catch\\\"'></a><h4>arkts-no-types-in-catch</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>import { BusinessError } from '@kit.BasicServicesKit'\\n\\ntry {\\n  // ...\\n} catch (error) {\\n  let e: BusinessError = error as BusinessError;\\n  console.error(e.message, e.code);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1590,
        "pre": "interface Person {\\n  [name: string]: string\\n}\\nlet p: Person = {\\n  name: 'tom',\\n  age: '18'\\n};\\n\\nfor (let t in p) {\\n  console.log(p[t]);  // log: \\\"tom\\\", \\\"18\\\" \\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-for-in",
        "parent_text": "arkts-no-for-in应用代码  建议改法 let p: Record<string, string> = {\\n  'name': 'tom',\\n  'age': '18'\\n};\\n\\nfor (let ele of Object.entries(p)) {\\n  console.log(ele[1]);  // log: \\\"tom\\\", \\\"18\\\" \\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-for-in\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-for-in\\\"'></a><a name='\\\"arkts-no-for-in\\\"'></a><h4>arkts-no-for-in</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>let p: Record&lt;string, string&gt; = {\\n  'name': 'tom',\\n  'age': '18'\\n};\\n\\nfor (let ele of Object.entries(p)) {\\n  console.log(ele[1]);  // log: \\\"tom\\\", \\\"18\\\" \\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1591,
        "pre": "class C {\\n  a: number = 0\\n  b: number = 0\\n  c: number = 0\\n}\\ntype OptionsFlags = {\\n  [Property in keyof C]: string\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-mapped-types",
        "parent_text": "arkts-no-mapped-types应用代码  建议改法 class C {\\n  a: number = 0\\n  b: number = 0\\n  c: number = 0\\n}\\n\\ntype OptionsFlags = Record<keyof C, string> ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-mapped-types\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-mapped-types\\\"'></a><a name='\\\"arkts-no-mapped-types\\\"'></a><h4>arkts-no-mapped-types</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class C {\\n  a: number = 0\\n  b: number = 0\\n  c: number = 0\\n}\\n\\ntype OptionsFlags = Record&lt;keyof C, string&gt;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1592,
        "pre": "import { BusinessError } from '@kit.BasicServicesKit'\\n\\nfunction ThrowError(error: BusinessError) {\\n  throw error;\\n}",
        "type": "Reference",
        "function_call": "nfunction ThrowError(error: BusinessError)",
        "function_name": "arkts-limited-throw",
        "parent_text": "arkts-limited-throw应用代码  建议改法 import { BusinessError } from '@kit.BasicServicesKit'\\n\\nfunction ThrowError(error: BusinessError) {\\n  throw error as Error;\\n} 原因 throw语句中值的类型必须为Error或者其继承类，如果继承类是一个泛型，会有编译期报错。建议使用as将类型转换为Error。 ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-limited-throw\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-limited-throw\\\"'></a><a name='\\\"arkts-limited-throw\\\"'></a><h4>arkts-limited-throw</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>import { BusinessError } from '@kit.BasicServicesKit'\\n\\nfunction ThrowError(error: BusinessError) {\\n  throw error as Error;\\n}</pre> <p><strong>原因</strong></p> <p>throw语句中值的类型必须为Error或者其继承类，如果继承类是一个泛型，会有编译期报错。建议使用as将类型转换为Error。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1593,
        "pre": "function foo() {\\n  console.log(this.value);\\n}\\n\\nlet obj = { value: 'abc' };\\nfoo.apply(obj);",
        "type": "Reference",
        "function_call": "function foo(value: string)",
        "function_name": "[h2]函数内使用this",
        "parent_text": "[h2]函数内使用this应用代码  建议改法1 使用类的方法实现,如果该方法被多个类使用,可以考虑采用继承的机制 class Test {\\n  value: string = ''\\n  constructor (value: string) {\\n    this.value = value\\n  }\\n  \\n  foo() {\\n    console.log(this.value);\\n  }\\n}\\n\\nlet obj: Test = new Test('abc');\\nobj.foo(); 建议改法2 将this作为参数传入 function foo(obj: Test) {\\n  console.log(obj.value);\\n}\\n\\nclass Test {\\n  value: string = ''\\n}\\n\\nlet obj: Test = { value: 'abc' };\\nfoo(obj); 建议改法3 将属性作为参数传入 function foo(value: string) {\\n  console.log(value);\\n}\\n\\nclass Test {\\n  value: string = ''\\n}\\n\\nlet obj: Test = { value: 'abc' };\\nfoo(obj.value); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"函数内使用this\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E5%87%BD%E6%95%B0%E5%86%85%E4%BD%BF%E7%94%A8this\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E5%86%85%E4%BD%BF%E7%94%A8this\\\"'></a><h4>[h2]函数内使用this</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法1</strong></p> <p>使用类的方法实现,如果该方法被多个类使用,可以考虑采用继承的机制</p> <pre class='\\\"typescript\\\"'>class Test {\\n  value: string = ''\\n  constructor (value: string) {\\n    this.value = value\\n  }\\n  \\n  foo() {\\n    console.log(this.value);\\n  }\\n}\\n\\nlet obj: Test = new Test('abc');\\nobj.foo();</pre> <p><strong>建议改法2</strong></p> <p>将this作为参数传入</p> <pre class='\\\"typescript\\\"'>function foo(obj: Test) {\\n  console.log(obj.value);\\n}\\n\\nclass Test {\\n  value: string = ''\\n}\\n\\nlet obj: Test = { value: 'abc' };\\nfoo(obj);</pre> <p><strong>建议改法3</strong></p> <p>将属性作为参数传入</p> <pre class='\\\"typescript\\\"'>function foo(value: string) {\\n  console.log(value);\\n}\\n\\nclass Test {\\n  value: string = ''\\n}\\n\\nlet obj: Test = { value: 'abc' };\\nfoo(obj.value);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1594,
        "pre": "class Test {\\n  static value: number = 123\\n  static foo(): number {\\n    return this.value\\n  }\\n}",
        "type": "Reference",
        "function_call": "static foo(): number",
        "function_name": "[h2]class的静态方法内使用this",
        "parent_text": "[h2]class的静态方法内使用this应用代码  建议改法 class Test {\\n  static value: number = 123\\n  static foo(): number {\\n    return Test.value\\n  }\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"class的静态方法内使用this\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__class%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%86%85%E4%BD%BF%E7%94%A8this\\\"'></a><a name='\\\"class%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%86%85%E4%BD%BF%E7%94%A8this\\\"'></a><h4>[h2]class的静态方法内使用this</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Test {\\n  static value: number = 123\\n  static foo(): number {\\n    return Test.value\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1595,
        "pre": "// test.d.ets\\ndeclare namespace test {\\n  interface I {\\n    id: string;\\n    type: number;\\n  }\\n\\n  function foo(): I;\\n}\\n\\nexport default test\\n\\n// app.ets\\nimport test from 'test';\\n\\nlet t: test.I = {\\n  ...test.foo(),\\n  type: 0\\n}",
        "type": "Reference",
        "function_call": "foo()",
        "function_name": "arkts-no-spread",
        "parent_text": "arkts-no-spread应用代码  建议改法 // test.d.ets\\ndeclare namespace test {\\n  interface I {\\n    id: string;\\n    type: number;\\n  }\\n\\n  function foo(): I;\\n}\\n\\nexport default test\\n\\n// app.ets\\nimport test from 'test';\\n\\nlet t: test.I = test.foo();\\nt.type = 0; 原因 ArkTS中，对象布局在编译期是确定的。如果需要将一个对象的所有属性展开赋值给另一个对象可以通过逐个属性赋值语句完成。在本例中，需要展开的对象和赋值的目标对象类型恰好相同，可以通过改变该对象属性的方式重构代码。 ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-spread\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-spread\\\"'></a><a name='\\\"arkts-no-spread\\\"'></a><h4>arkts-no-spread</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>// test.d.ets\\ndeclare namespace test {\\n  interface I {\\n    id: string;\\n    type: number;\\n  }\\n\\n  function foo(): I;\\n}\\n\\nexport default test\\n\\n// app.ets\\nimport test from 'test';\\n\\nlet t: test.I = test.foo();\\nt.type = 0;</pre> <p><strong>原因</strong></p> <p>ArkTS中，对象布局在编译期是确定的。如果需要将一个对象的所有属性展开赋值给另一个对象可以通过逐个属性赋值语句完成。在本例中，需要展开的对象和赋值的目标对象类型恰好相同，可以通过改变该对象属性的方式重构代码。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1596,
        "pre": "class Controller {\\n  value: string = ''\\n  constructor(value: string) {\\n    this.value = value\\n  }\\n}\\n\\ntype ControllerConstructor = new (value: string) => Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = Controller\\n  createController() {\\n    if (this.controller) {\\n      return new this.controller('abc');\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t = new Menu()\\nconsole.log(t.createController()!.value)",
        "type": "Reference",
        "function_call": "createController()",
        "function_name": "arkts-no-ctor-signatures-funcs",
        "parent_text": "arkts-no-ctor-signatures-funcs在class内声明属性，而不是在构造函数上。 应用代码  建议改法 class Controller {\\n  value: string = ''\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ntype ControllerConstructor = () => Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () => { return new Controller('abc') }\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-ctor-signatures-funcs\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-ctor-signatures-funcs\\\"'></a><a name='\\\"arkts-no-ctor-signatures-funcs\\\"'></a><h4>arkts-no-ctor-signatures-funcs</h4><p>在class内声明属性，而不是在构造函数上。</p> <p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Controller {\\n  value: string = ''\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\ntype ControllerConstructor = () =&gt; Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () =&gt; { return new Controller('abc') }\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1597,
        "pre": "// 构造单例对象\\nexport class GlobalContext {\\n  private constructor() {}\\n  private static instance: GlobalContext;\\n  private _objects = new Map<string, Object>();\\n\\n  public static getContext(): GlobalContext {\\n    if (!GlobalContext.instance) {\\n      GlobalContext.instance = new GlobalContext();\\n    }\\n    return GlobalContext.instance;\\n  }\\n\\n  getObject(value: string): Object | undefined {\\n    return this._objects.get(value);\\n  }\\n\\n  setObject(key: string, objectClass: Object): void {\\n    this._objects.set(key, objectClass);\\n  }\\n}",
        "type": "Reference",
        "function_call": "getContext()",
        "function_name": "arkts-no-globalthis",
        "parent_text": "arkts-no-globalthis由于无法为globalThis添加静态类型，只能通过查找的方式访问globalThis的属性，造成额外的性能开销。另外，无法为globalThis的属性标记类型，无法保证对这些属性操作的安全和高性能。因此ArkTS不支持globalThis。 建议按照业务逻辑根据import/export语法实现数据在不同模块的传递。 必要情况下，可以通过构造的单例对象来实现全局对象的功能。(说明： 不能在har中定义单例对象，har在打包时会在不同的hap中打包两份，无法实现单例。)  构造单例对象  应用代码 // file1.ts\\n\\nexport class Test {\\n  value: string = '';\\n  foo(): void {\\n    globalThis.value = this.value;\\n  }\\n}\\n\\n// file2.ts\\n\\nglobalThis.value; 建议改法 // file1.ts\\n\\nimport { GlobalContext } from '../GlobalContext'\\n\\nexport class Test {\\n  value: string = '';\\n  foo(): void {\\n    GlobalContext.getContext().setObject('value', this.value);\\n  }\\n}\\n\\n// file2.ts\\n\\nimport { GlobalContext } from '../GlobalContext'\\n\\nGlobalContext.getContext().getObject('value'); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-globalthis\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-globalthis\\\"'></a><a name='\\\"arkts-no-globalthis\\\"'></a><h4>arkts-no-globalthis</h4><p>由于无法为globalThis添加静态类型，只能通过查找的方式访问globalThis的属性，造成额外的性能开销。另外，无法为globalThis的属性标记类型，无法保证对这些属性操作的安全和高性能。因此ArkTS不支持globalThis。</p> <ol><li><p>建议按照业务逻辑根据import/export语法实现数据在不同模块的传递。</p> </li><li><p>必要情况下，可以通过构造的<strong>单例对象</strong>来实现全局对象的功能。(<strong>说明：</strong> 不能在har中定义单例对象，har在打包时会在不同的hap中打包两份，无法实现单例。)</p> </li></ol> <p><strong>构造单例对象</strong></p>  <p><strong>应用代码</strong></p> <pre class='\\\"typescript\\\"'>// file1.ts\\n\\nexport class Test {\\n  value: string = '';\\n  foo(): void {\\n    globalThis.value = this.value;\\n  }\\n}\\n\\n// file2.ts\\n\\nglobalThis.value;</pre> <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>// file1.ts\\n\\nimport { GlobalContext } from '../GlobalContext'\\n\\nexport class Test {\\n  value: string = '';\\n  foo(): void {\\n    GlobalContext.getContext().setObject('value', this.value);\\n  }\\n}\\n\\n// file2.ts\\n\\nimport { GlobalContext } from '../GlobalContext'\\n\\nGlobalContext.getContext().getObject('value');</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1598,
        "pre": "let arr: number[] = [1, 2, 3, 4];\\nlet str = String.fromCharCode.apply(null, Array.from(arr));",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用标准库中接口",
        "parent_text": "[h2]使用标准库中接口应用代码  建议改法 let arr: number[] = [1, 2, 3, 4];\\nlet str = String.fromCharCode(...Array.from(arr)); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用标准库中接口\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E4%B8%AD%E6%8E%A5%E5%8F%A3\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93%E4%B8%AD%E6%8E%A5%E5%8F%A3\\\"'></a><h4>[h2]使用标准库中接口</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>let arr: number[] = [1, 2, 3, 4];\\nlet str = String.fromCharCode(...Array.from(arr));</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1599,
        "pre": "class A {\\n  value: string = ''\\n  foo: Function = () => {}\\n}\\n\\nclass Test {\\n  value: string = '1234'\\n  obj: A = {\\n    value: this.value,\\n    foo: this.foo.bind(this)\\n  }\\n  \\n  foo() {\\n    console.log(this.value);\\n  }\\n}",
        "type": "Reference",
        "function_call": "void = ()",
        "function_name": "[h2]bind定义方法",
        "parent_text": "[h2]bind定义方法应用代码  建议改法1 class A {\\n  value: string = ''\\n  foo: Function = () => {}\\n}\\n\\nclass Test {\\n  value: string = '1234'\\n  obj: A = {\\n    value: this.value,\\n    foo: (): void => this.foo()\\n  }\\n  \\n  foo() {\\n    console.log(this.value);\\n  }\\n} 建议改法2 class A {\\n  value: string = ''\\n  foo: Function = () => {}\\n}\\n\\nclass Test {\\n  value: string = '1234'\\n  foo: () => void = () => {\\n    console.log(this.value);\\n  }\\n  obj: A = {\\n    value: this.value,\\n    foo: this.foo\\n  }\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"bind定义方法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__bind%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95\\\"'></a><a name='\\\"bind%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95\\\"'></a><h4>[h2]bind定义方法</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法1</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  value: string = ''\\n  foo: Function = () =&gt; {}\\n}\\n\\nclass Test {\\n  value: string = '1234'\\n  obj: A = {\\n    value: this.value,\\n    foo: (): void =&gt; this.foo()\\n  }\\n  \\n  foo() {\\n    console.log(this.value);\\n  }\\n}</pre> <p><strong>建议改法2</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  value: string = ''\\n  foo: Function = () =&gt; {}\\n}\\n\\nclass Test {\\n  value: string = '1234'\\n  foo: () =&gt; void = () =&gt; {\\n    console.log(this.value);\\n  }\\n  obj: A = {\\n    value: this.value,\\n    foo: this.foo\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1600,
        "pre": "class A {\\n  value: string;\\n  constructor (value: string) {\\n    this.value = value;\\n  }\\n\\n  foo() {\\n    console.log(this.value);\\n  }\\n}\\n\\nlet a1 = new A('1');\\nlet a2 = new A('2');\\n\\na1.foo();\\na1.foo.apply(a2);",
        "type": "Reference",
        "function_call": "foo()",
        "function_name": "[h2]使用apply",
        "parent_text": "[h2]使用apply应用代码  建议改法 class A {\\n  value: string;\\n  constructor (value: string) {\\n    this.value = value;\\n  }\\n\\n  foo() {\\n    this.fooApply(this);\\n  }\\n\\n  fooApply(a: A) {\\n    console.log(a.value);\\n  }\\n}\\n\\nlet a1 = new A('1');\\nlet a2 = new A('2');\\n\\na1.foo();\\na1.fooApply(a2); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用apply\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BD%BF%E7%94%A8apply\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8apply\\\"'></a><h4>[h2]使用apply</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  value: string;\\n  constructor (value: string) {\\n    this.value = value;\\n  }\\n\\n  foo() {\\n    this.fooApply(this);\\n  }\\n\\n  fooApply(a: A) {\\n    console.log(a.value);\\n  }\\n}\\n\\nlet a1 = new A('1');\\nlet a2 = new A('2');\\n\\na1.foo();\\na1.fooApply(a2);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1601,
        "pre": "let entries = new Map([\\n  ['foo', 123],\\n  ['bar', 456]\\n]);\\n\\nlet obj = Object.fromEntries(entries);",
        "type": "Reference",
        "function_call": "fromEntries()",
        "function_name": "[h2]Object.fromEntries()",
        "parent_text": "[h2]Object.fromEntries()应用代码  建议改法 let entries = new Map([\\n  ['foo', 123],\\n  ['bar', 456]\\n]);\\n\\nlet obj: Record<string, Object> = {};\\nentries.forEach((value, key) => {\\n  if (key != undefined && key != null) {\\n    obj[key] = value;\\n  }\\n}) ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"objectfromentries\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__objectfromentries\\\"'></a><a name='\\\"objectfromentries\\\"'></a><h4>[h2]Object.fromEntries()</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>let entries = new Map([\\n  ['foo', 123],\\n  ['bar', 456]\\n]);\\n\\nlet obj: Record&lt;string, Object&gt; = {};\\nentries.forEach((value, key) =&gt; {\\n  if (key != undefined &amp;&amp; key != null) {\\n    obj[key] = value;\\n  }\\n})</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1602,
        "pre": "NaN;\\nisFinite(123);\\nparseInt('123');",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]使用Number的属性和方法",
        "parent_text": "[h2]使用Number的属性和方法ArkTS不允许使用全局对象的属性和方法： Infinity, NaN, isFinite, isNaN, parseFloat, parseInt 可以使用Number的属性和方法： Infinity, NaN, isFinite, isNaN, parseFloat, parseInt 应用代码  建议改法 Number.NaN;\\nNumber.isFinite(123);\\nNumber.parseInt('123'); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用number的属性和方法\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BD%BF%E7%94%A8number%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8number%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95\\\"'></a><h4>[h2]使用Number的属性和方法</h4><p>ArkTS不允许使用全局对象的属性和方法： Infinity, NaN, isFinite, isNaN, parseFloat, parseInt</p> <p>可以使用Number的属性和方法： Infinity, NaN, isFinite, isNaN, parseFloat, parseInt</p> <p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>Number.NaN;\\nNumber.isFinite(123);\\nNumber.parseInt('123');</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1603,
        "pre": "interface I {\\n  name:string\\n}\\n\\nclass A {}\\n\\nclass Test {\\n  a: number;\\n  b: string;\\n  c: boolean;\\n  d: I;\\n  e: A;\\n}",
        "type": "Reference",
        "function_call": "constructor(a:number, b:string, c:boolean)",
        "function_name": "[h2]strictPropertyInitialization",
        "parent_text": "[h2]strictPropertyInitialization应用代码  建议改法 interface I {\\n  name:string\\n}\\n\\nclass A {}\\n\\nclass Test {\\n  a: number;\\n  b: string;\\n  c: boolean;\\n  d: I = { name:'abc' };\\n  e: A | null = null;\\n  constructor(a:number, b:string, c:boolean) {\\n    this.a = a;\\n    this.b = b;\\n    this.c = c;\\n  }\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"strictpropertyinitialization\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__strictpropertyinitialization\\\"'></a><a name='\\\"strictpropertyinitialization\\\"'></a><h4>[h2]strictPropertyInitialization</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>interface I {\\n  name:string\\n}\\n\\nclass A {}\\n\\nclass Test {\\n  a: number;\\n  b: string;\\n  c: boolean;\\n  d: I = { name:'abc' };\\n  e: A | null = null;\\n  constructor(a:number, b:string, c:boolean) {\\n    this.a = a;\\n    this.b = b;\\n    this.c = c;\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1604,
        "pre": "class A {\\n  bar() {}\\n}\\nfunction foo(n: number) {\\n  if (n === 0) {\\n    return null;\\n  }\\n  return new A();\\n}\\nfunction getNumber() {\\n  return 5;\\n}\\nlet a:A = foo(getNumber());\\na.bar();",
        "type": "Reference",
        "function_call": "bar()",
        "function_name": "[h2]Type *** | null is not assignable to type ***",
        "parent_text": "[h2]Type *** | null is not assignable to type ***应用代码  建议改法 class A {\\n  bar() {}\\n}\\nfunction foo(n: number) {\\n  if (n === 0) {\\n    return null;\\n  }\\n  return new A();\\n}\\nfunction getNumber() {\\n  return 5;\\n}\\n\\nlet a: A | null = foo(getNumber());\\na?.bar(); ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"type---null-is-not-assignable-to-type-\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__type---null-is-not-assignable-to-type-\\\"'></a><a name='\\\"type---null-is-not-assignable-to-type-\\\"'></a><h4>[h2]Type *** | null is not assignable to type ***</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class A {\\n  bar() {}\\n}\\nfunction foo(n: number) {\\n  if (n === 0) {\\n    return null;\\n  }\\n  return new A();\\n}\\nfunction getNumber() {\\n  return 5;\\n}\\n\\nlet a: A | null = foo(getNumber());\\na?.bar();</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1605,
        "pre": "//code with error\\nclass Test {\\n  value: number\\n  flag: boolean\\n}\\n\\n//方式一，在声明时初始化\\nclass Test {\\n  value: number = 0\\n  flag: boolean = false\\n}\\n\\n//方式二，在构造函数中赋值\\nclass Test {\\n  value: number\\n  flag: boolean\\n  constructor(value: number, flag: boolean) {\\n    this.value = value;\\n    this.flag = flag;\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]严格属性初始化检查",
        "parent_text": "[h2]严格属性初始化检查在class中，如果一个属性没有初始化，且没有在构造函数中被赋值，那么ArkTS将报错。 建议改法 1.一般情况下，建议按照业务逻辑在声明时初始化属性，或者在构造函数中为属性赋值。如：  2.对于对象类型（包括函数类型）A，如果不确定如何初始化，建议按照以下方式之一进行初始化 ​ 方式(i) prop: A | null = null ​ 方式(ii) prop?: A ​ 方式三(iii) prop： A | undefined = undefined 从性能角度来说，null类型只用在编译期的类型检查中，对虚拟机的性能无影响。而undefined | A被视为联合类型，运行时可能有额外的开销。从代码可读性、简洁性的角度来说，prop?:A是prop： A | undefined = undefined的语法糖，推荐使用可选属性的写法 ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"严格属性初始化检查\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%B8%A5%E6%A0%BC%E5%B1%9E%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A3%80%E6%9F%A5\\\"'></a><a name='\\\"%E4%B8%A5%E6%A0%BC%E5%B1%9E%E6%80%A7%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A3%80%E6%9F%A5\\\"'></a><h4>[h2]严格属性初始化检查</h4><p>在class中，如果一个属性没有初始化，且没有在构造函数中被赋值，那么ArkTS将报错。</p> <p><strong>建议改法</strong></p> <p>1.一般情况下，<strong>建议按照业务逻辑</strong>在声明时初始化属性，或者在构造函数中为属性赋值。如：</p>  <p>2.对于对象类型（包括函数类型）A，如果不确定如何初始化，建议按照以下方式之一进行初始化</p> <p>​ 方式(i) prop: A | null = null</p> <p>​ 方式(ii) prop?: A</p> <p>​ 方式三(iii) prop： A | undefined = undefined</p> <ul><li>从性能角度来说，null类型只用在编译期的类型检查中，对虚拟机的性能无影响。而undefined | A被视为联合类型，运行时可能有额外的开销。</li><li>从代码可读性、简洁性的角度来说，prop?:A是prop： A | undefined = undefined的语法糖，<strong>推荐使用可选属性的写法</strong></li></ul> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1606,
        "pre": "function foo(fn: (value?: string) => void, value: string): void {}\\n\\nfoo((value: string) => {}, ''); //error",
        "type": "Reference",
        "function_call": "toUpperCase()",
        "function_name": "[h2]严格函数类型检查",
        "parent_text": "[h2]严格函数类型检查应用代码  建议改法 function foo(fn: (value?: string) => void, value: string): void {}\\n\\nfoo((value?: string) => {}, ''); 原因 例如，在以下的例子中，如果编译期不开启严格函数类型的检查，那么该段代码可以编译通过，但是在运行时会产生非预期的行为。具体来看，在foo的函数体中，一个undefined被传入fn（这是可以的，因为fn可以接受undefined），但是在代码第6行foo的调用点，传入的(value： string) => { console.log(value.toUpperCase()) }的函数实现中，始终将参数value当做string类型，允许其调用toUpperCase方法。如果不开启严格函数类型的检查，那么这段代码在运行时，会出现在undefined上无法找到属性的错误。 function foo(fn: (value?: string) => void, value: string): void {\\n  let v: string | undefined = undefined;\\n  fn(v);\\n}\\n\\nfoo((value: string) => { console.log(value.toUpperCase()) }, ''); // Cannot read properties of undefined (reading 'toUpperCase') 为了避免运行时的非预期行为，如果在编译时开启了严格类型检查，这段代码将编译不通过，从而可以提醒开发者修改代码，保证程序安全。 ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"严格函数类型检查\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%B8%A5%E6%A0%BC%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\\\"'></a><a name='\\\"%E4%B8%A5%E6%A0%BC%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\\\"'></a><h4>[h2]严格函数类型检查</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>function foo(fn: (value?: string) =&gt; void, value: string): void {}\\n\\nfoo((value?: string) =&gt; {}, '');</pre> <p><strong>原因</strong></p> <p>例如，在以下的例子中，如果编译期不开启严格函数类型的检查，那么该段代码可以编译通过，但是在运行时会产生非预期的行为。具体来看，在foo的函数体中，一个undefined被传入fn（这是可以的，因为fn可以接受undefined），但是在代码第6行foo的调用点，传入的(value： string) =&gt; { console.log(value.toUpperCase()) }的函数实现中，始终将参数value当做string类型，允许其调用toUpperCase方法。如果不开启严格函数类型的检查，那么这段代码在运行时，会出现在undefined上无法找到属性的错误。</p> <pre class='\\\"typescript\\\"'>function foo(fn: (value?: string) =&gt; void, value: string): void {\\n  let v: string | undefined = undefined;\\n  fn(v);\\n}\\n\\nfoo((value: string) =&gt; { console.log(value.toUpperCase()) }, ''); // Cannot read properties of undefined (reading 'toUpperCase')</pre> <p>为了避免运行时的非预期行为，如果在编译时开启了严格类型检查，这段代码将编译不通过，从而可以提醒开发者修改代码，保证程序安全。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1607,
        "pre": "class Test {\\n  private value?: string\\n  \\n  public printValue () {\\n    console.log(this.value.toLowerCase());\\n  }\\n}\\n\\nlet t = new Test();\\nt.printValue();",
        "type": "Reference",
        "function_call": "printValue()",
        "function_name": "[h2]严格空值检查",
        "parent_text": "[h2]严格空值检查应用代码  建议改法 在编写代码时，建议减少可空类型的使用。如果对变量、属性标记了可空类型，那么在使用它们之间，需要进行空值的判断，根据是否为空值处理不同的逻辑。 class Test {\\n  private value?: string\\n\\n  public printValue () {\\n    if (this.value) {\\n      console.log(this.value.toLowerCase());\\n    }\\n  }\\n}\\n\\nlet t = new Test();\\nt.printValue(); 原因 在第一段代码中，如果编译期不开启严格空值检查，那么该段代码可以编译通过，但是在运行时会产生非预期的行为。这是因为t的属性value为undefined（这是因为value?: string是value: string | undefined = undefined的语法糖），在第11行调用printValue方法时，由于在该方法体内未对this.value的值进行空值检查，而直接按照string类型访问其属性，这就导致了运行时的错误。为了避免运行时的非预期行为，如果在编译时开起来严格空值检查，这段代码将编译不通过从而可以提醒开发者修改代码（如按照第二段代码的方式），保证程序安全。 ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"严格空值检查\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%B8%A5%E6%A0%BC%E7%A9%BA%E5%80%BC%E6%A3%80%E6%9F%A5\\\"'></a><a name='\\\"%E4%B8%A5%E6%A0%BC%E7%A9%BA%E5%80%BC%E6%A3%80%E6%9F%A5\\\"'></a><h4>[h2]严格空值检查</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <p>在编写代码时，建议减少可空类型的使用。如果对变量、属性标记了可空类型，那么在使用它们之间，需要进行空值的判断，根据是否为空值处理不同的逻辑。</p> <pre class='\\\"typescript\\\"'>class Test {\\n  private value?: string\\n\\n  public printValue () {\\n    if (this.value) {\\n      console.log(this.value.toLowerCase());\\n    }\\n  }\\n}\\n\\nlet t = new Test();\\nt.printValue();</pre> <p><strong>原因</strong></p> <p>在第一段代码中，如果编译期不开启严格空值检查，那么该段代码可以编译通过，但是在运行时会产生非预期的行为。这是因为t的属性value为undefined（这是因为value?: string是value: string | undefined = undefined的语法糖），在第11行调用printValue方法时，由于在该方法体内未对this.value的值进行空值检查，而直接按照string类型访问其属性，这就导致了运行时的错误。为了避免运行时的非预期行为，如果在编译时开起来严格空值检查，这段代码将编译不通过从而可以提醒开发者修改代码（如按照第二段代码的方式），保证程序安全。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1608,
        "pre": "class Test {\\n  handleClick: (action: string, externInfo?: string) => void | null = null;\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]函数返回类型不匹配",
        "parent_text": "[h2]函数返回类型不匹配应用代码  建议改法 在这种写法下，函数返回类型被解析为 void | undefined，需要添加括号用来区分union类型。 class Test {\\n  handleClick: ((action: string, externInfo?: string) => void) | null = null;\\n} ",
        "import_module": "type Person = { name: string, age: number }",
        "parent": "<div class='\\\"section\\\"' id='\\\"函数返回类型不匹配\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D\\\"'></a><a name='\\\"%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D\\\"'></a><h4>[h2]函数返回类型不匹配</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <p>在这种写法下，函数返回类型被解析为 void | undefined，需要添加括号用来区分union类型。</p> <pre class='\\\"typescript\\\"'>class Test {\\n  handleClick: ((action: string, externInfo?: string) =&gt; void) | null = null;\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1609,
        "pre": "try {\\n  \\n} catch (error) {\\n  console.log(error.message);\\n}",
        "type": "Import",
        "function_call": null,
        "function_name": "[h2]'***' is of type 'unknown'",
        "parent_text": "[h2]'***' is of type 'unknown'应用代码  建议改法 import { BusinessError } from '@kit.BasicServicesKit'\\n\\ntry {\\n  \\n} catch (error) {\\n  console.log((error as BusinessError).message);\\n} ",
        "import_module": "try {\\n  \\n} catch (error) {\\n  console.log(error.message);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"section-is-of-type-unknown\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__-is-of-type-unknown\\\"'></a><a name='\\\"-is-of-type-unknown\\\"'></a><h4>[h2]'***' is of type 'unknown'</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>import { BusinessError } from '@kit.BasicServicesKit'\\n\\ntry {\\n  \\n} catch (error) {\\n  console.log((error as BusinessError).message);\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1610,
        "pre": "class A {\\n  value: number\\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nfunction foo(v: number): A | null {\\n  if (v > 0) {\\n    return new A(v);\\n  }\\n  return null;\\n}\\n\\nlet a: A = foo();",
        "type": "Reference",
        "function_call": "nfunction foo(v: number): A",
        "function_name": "[h2]Type '*** | null' is not assignable to type '***'",
        "parent_text": "[h2]Type '*** | null' is not assignable to type '***'应用代码  建议改法1 修改变量a的类型：let a: A | null = foo()。 class A {\\n  value: number\\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nfunction foo(v: number): A | null {\\n  if (v > 0) {\\n    return new A(v);\\n  }\\n  return null;\\n}\\n\\nlet a: A | null = foo(123);\\n\\nif (a != null) {\\n  // 非空分支\\n} else {\\n  // 处理null\\n} 建议改法2 如果可以断定此处调用foo一定返回非空值，可以使用非空断言!。 class A {\\n  value: number\\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nfunction foo(v: number): A | null {\\n  if (v > 0) {\\n    return new A(v);\\n  }\\n  return null;\\n}\\n\\nlet a: A = foo(123)!; ",
        "import_module": "try {\\n  \\n} catch (error) {\\n  console.log(error.message);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"type---null-is-not-assignable-to-type--1\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__type---null-is-not-assignable-to-type--1\\\"'></a><a name='\\\"type---null-is-not-assignable-to-type--1\\\"'></a><h4>[h2]Type '*** | null' is not assignable to type '***'</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法1</strong></p> <p>修改变量a的类型：let a: A | null = foo()。</p> <pre class='\\\"typescript\\\"'>class A {\\n  value: number\\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nfunction foo(v: number): A | null {\\n  if (v &gt; 0) {\\n    return new A(v);\\n  }\\n  return null;\\n}\\n\\nlet a: A | null = foo(123);\\n\\nif (a != null) {\\n  // 非空分支\\n} else {\\n  // 处理null\\n}</pre> <p><strong>建议改法2</strong></p> <p>如果可以断定此处调用foo一定返回非空值，可以使用非空断言!。</p> <pre class='\\\"typescript\\\"'>class A {\\n  value: number\\n  constructor(value: number) {\\n    this.value = value;\\n  }\\n}\\n\\nfunction foo(v: number): A | null {\\n  if (v &gt; 0) {\\n    return new A(v);\\n  }\\n  return null;\\n}\\n\\nlet a: A = foo(123)!;</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1611,
        "pre": "interface A {\\n  foo?: () => void\\n}\\n\\nlet a:A = { foo: () => {} };\\na.foo();",
        "type": "Reference",
        "function_call": "foo()",
        "function_name": "[h2]Cannot invoke an object which possibly 'undefined'",
        "parent_text": "[h2]Cannot invoke an object which possibly 'undefined'应用代码  建议改法1 interface A {\\n  foo: () => void\\n}\\nlet a: A = { foo: () => {} };\\na.foo(); 建议改法2 interface A {\\n  foo?: () => void\\n}\\n\\nlet a: A = { foo: () => {} };\\nif (a.foo) {\\n  a.foo();\\n} 原因 在原先代码的定义中，foo是可选属性，有可能为undefined，对undefined的调用会导致报错。建议按照业务逻辑判断是否需要为可选属性。如果确实需要，那么在访问到该属性后需要进行空值检查。 ",
        "import_module": "try {\\n  \\n} catch (error) {\\n  console.log(error.message);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"cannot-invoke-an-object-which-possibly-undefined\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__cannot-invoke-an-object-which-possibly-undefined\\\"'></a><a name='\\\"cannot-invoke-an-object-which-possibly-undefined\\\"'></a><h4>[h2]Cannot invoke an object which possibly 'undefined'</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法1</strong></p> <pre class='\\\"typescript\\\"'>interface A {\\n  foo: () =&gt; void\\n}\\nlet a: A = { foo: () =&gt; {} };\\na.foo();</pre> <p><strong>建议改法2</strong></p> <pre class='\\\"typescript\\\"'>interface A {\\n  foo?: () =&gt; void\\n}\\n\\nlet a: A = { foo: () =&gt; {} };\\nif (a.foo) {\\n  a.foo();\\n}</pre> <p><strong>原因</strong></p> <p>在原先代码的定义中，foo是可选属性，有可能为undefined，对undefined的调用会导致报错。建议按照业务逻辑判断是否需要为可选属性。如果确实需要，那么在访问到该属性后需要进行空值检查。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1612,
        "pre": "class Test {\\n  value: number = 0\\n}\\n\\nlet a: Test\\ntry {\\n  a = { value: 1};\\n} catch (e) {\\n  a.value;\\n}\\na.value;",
        "type": "Reference",
        "function_call": null,
        "function_name": "[h2]Variable '***' is used before being assigned",
        "parent_text": "[h2]Variable '***' is used before being assigned应用代码  建议改法 class Test {\\n  value: number = 0\\n}\\n\\nlet a: Test | null = null;\\ntry {\\n  a = { value:1 };\\n} catch (e) {\\n  if (a) {\\n    a.value;\\n  }\\n}\\n\\nif (a) {\\n  a.value;\\n} 原因 对于primitive types，可以根据业务逻辑赋值，例如0，''，false。 对于对象类型，可以将类型修改为和null的联合类型，并赋值null，使用时需要进行非空检查。 ",
        "import_module": "try {\\n  \\n} catch (error) {\\n  console.log(error.message);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"variable--is-used-before-being-assigned\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__variable--is-used-before-being-assigned\\\"'></a><a name='\\\"variable--is-used-before-being-assigned\\\"'></a><h4>[h2]Variable '***' is used before being assigned</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Test {\\n  value: number = 0\\n}\\n\\nlet a: Test | null = null;\\ntry {\\n  a = { value:1 };\\n} catch (e) {\\n  if (a) {\\n    a.value;\\n  }\\n}\\n\\nif (a) {\\n  a.value;\\n}</pre> <p><strong>原因</strong></p> <p>对于primitive types，可以根据业务逻辑赋值，例如0，''，false。</p> <p>对于对象类型，可以将类型修改为和null的联合类型，并赋值null，使用时需要进行非空检查。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1613,
        "pre": "function foo(a: number): number {\\n  if (a > 0) {\\n    return a;\\n  }\\n}",
        "type": "Reference",
        "function_call": "function foo(a: number): number",
        "function_name": "[h2]Function lacks ending return statement and return type does not include 'undefined'.",
        "parent_text": "[h2]Function lacks ending return statement and return type does not include 'undefined'.应用代码  建议改法1  根据业务逻辑，在else分支中返回合适的数值 建议改法2 function foo(a: number): number | undefined {\\n  if (a > 0) {\\n    return a;\\n  }\\n  return\\n} ",
        "import_module": "try {\\n  \\n} catch (error) {\\n  console.log(error.message);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"function-lacks-ending-return-statement-and-return-type-does-not-include-undefined\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__function-lacks-ending-return-statement-and-return-type-does-not-include-undefined\\\"'></a><a name='\\\"function-lacks-ending-return-statement-and-return-type-does-not-include-undefined\\\"'></a><h4>[h2]Function lacks ending return statement and return type does not include 'undefined'.</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法1</strong> </p> <p>根据业务逻辑，在else分支中返回合适的数值</p> <p><strong>建议改法2</strong></p> <pre class='\\\"typescript\\\"'>function foo(a: number): number | undefined {\\n  if (a &gt; 0) {\\n    return a;\\n  }\\n  return\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1614,
        "pre": "// @ts-nocheck\\nvar a: any = 123;",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-strict-typing-required",
        "parent_text": "arkts-strict-typing-required应用代码  建议改法 let a: number = 123; 原因 ArkTS不支持通过注释的方式绕过严格类型检查。首先将注释（// @ts-nocheck或者// @ts-ignore）删去，再根据报错信息修改其他代码。 ",
        "import_module": "try {\\n  \\n} catch (error) {\\n  console.log(error.message);\\n}",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-strict-typing-required\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-strict-typing-required\\\"'></a><a name='\\\"arkts-strict-typing-required\\\"'></a><h4>arkts-strict-typing-required</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>let a: number = 123;</pre> <p><strong>原因</strong></p> <p>ArkTS不支持通过注释的方式绕过严格类型检查。首先将注释（// @ts-nocheck或者// @ts-ignore）删去，再根据报错信息修改其他代码。</p> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1615,
        "pre": "import type {A, B, C, D } from '***'",
        "type": "Import",
        "function_call": null,
        "function_name": "arkts-no-special-imports",
        "parent_text": "arkts-no-special-imports应用代码  建议改法 import {A, B, C, D } from '***' ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-special-imports\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-special-imports\\\"'></a><a name='\\\"arkts-no-special-imports\\\"'></a><h4>arkts-no-special-imports</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>import {A, B, C, D } from '***'</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1616,
        "pre": "class Controller {\\n  value: string = ''\\n  constructor(value: string) {\\n    this.value = value\\n  }\\n}\\n\\ninterface ControllerConstructor {\\n  new (value: string): Controller;\\n}\\n\\nclass Menu {\\n  controller: ControllerConstructor = Controller\\n  createController() {\\n    if (this.controller) {\\n      return new this.controller('abc');\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t = new Menu();\\nconsole.log(t.createController()!.value);",
        "type": "Reference",
        "function_call": "createController()",
        "function_name": "[h2]使用class构造实例",
        "parent_text": "[h2]使用class构造实例应用代码  建议改法 class Controller {\\n  value: string = ''\\n  constructor(value: string) {\\n    this.value = value\\n  }\\n}\\n\\ntype ControllerConstructor = () => Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () => { return new Controller('abc'); }\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value); ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"使用class构造实例\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E4%BD%BF%E7%94%A8class%E6%9E%84%E9%80%A0%E5%AE%9E%E4%BE%8B\\\"'></a><a name='\\\"%E4%BD%BF%E7%94%A8class%E6%9E%84%E9%80%A0%E5%AE%9E%E4%BE%8B\\\"'></a><h4>[h2]使用class构造实例</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Controller {\\n  value: string = ''\\n  constructor(value: string) {\\n    this.value = value\\n  }\\n}\\n\\ntype ControllerConstructor = () =&gt; Controller;\\n\\nclass Menu {\\n  controller: ControllerConstructor = () =&gt; { return new Controller('abc'); }\\n  createController() {\\n    if (this.controller) {\\n      return this.controller();\\n    }\\n    return null;\\n  }\\n}\\n\\nlet t: Menu = new Menu();\\nconsole.log(t.createController()!.value);</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1617,
        "pre": "class C1 {\\n  static value: string = 'abc'\\n}\\n\\nclass C2 {\\n  static value: string = 'def'\\n}\\n\\nfunction getValue(obj: any) {\\n  return obj['value'];\\n}\\n\\nconsole.log(getValue(C1));\\nconsole.log(getValue(C2));",
        "type": "Reference",
        "function_call": "getC2Value()",
        "function_name": "[h2]访问静态属性",
        "parent_text": "[h2]访问静态属性应用代码  建议改法 class C1 {\\n  static value: string = 'abc'\\n}\\n\\nclass C2 {\\n  static value: string = 'def'\\n}\\n\\nfunction getC1Value(): string {\\n  return C1.value;\\n}\\n\\nfunction getC2Value(): string {\\n  return C2.value;\\n}\\n\\nconsole.log(getC1Value());\\nconsole.log(getC2Value()); ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"访问静态属性\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7\\\"'></a><a name='\\\"%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7\\\"'></a><h4>[h2]访问静态属性</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class C1 {\\n  static value: string = 'abc'\\n}\\n\\nclass C2 {\\n  static value: string = 'def'\\n}\\n\\nfunction getC1Value(): string {\\n  return C1.value;\\n}\\n\\nfunction getC2Value(): string {\\n  return C2.value;\\n}\\n\\nconsole.log(getC1Value());\\nconsole.log(getC2Value());</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1618,
        "pre": "import 'module'",
        "type": "Reference",
        "function_call": null,
        "function_name": "arkts-no-side-effects-imports",
        "parent_text": "arkts-no-side-effects-imports改用动态import 应用代码  建议改法 import('module') ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-side-effects-imports\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-side-effects-imports\\\"'></a><a name='\\\"arkts-no-side-effects-imports\\\"'></a><h4>arkts-no-side-effects-imports</h4><p>改用动态import</p> <p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>import('module')</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1619,
        "pre": "function foo(value: number): void {\\n  console.log(value.toString());\\n}\\n\\nfoo.add = (left: number, right: number) => {\\n  return left + right;\\n}\\n\\nfoo.sub = (left: number, right: number) => {\\n  return left - right;\\n}",
        "type": "Reference",
        "function_call": "static sub(left: number, right: number): number",
        "function_name": "arkts-no-func-props",
        "parent_text": "arkts-no-func-props应用代码  建议改法 class Foo {\\n  static foo(value: number): void {\\n    console.log(value.toString());\\n  }\\n\\n  static add(left: number, right: number): number {\\n    return left + right;\\n  }\\n\\n  static sub(left: number, right: number): number {\\n    return left - right;\\n  }\\n} ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-no-func-props\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-no-func-props\\\"'></a><a name='\\\"arkts-no-func-props\\\"'></a><h4>arkts-no-func-props</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>class Foo {\\n  static foo(value: number): void {\\n    console.log(value.toString());\\n  }\\n\\n  static add(left: number, right: number): number {\\n    return left + right;\\n  }\\n\\n  static sub(left: number, right: number): number {\\n    return left - right;\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1620,
        "pre": "// lib.d.ts\\ndeclare function foo(): any;\\n\\n// main.ets\\nlet e0: ESObject = foo();\\n\\nfunction f() {\\n  let e1 = foo();\\n  let e2: ESObject = 1;\\n  let e3: ESObject = {};\\n  let e4: ESObject = '';\\n}",
        "type": "Reference",
        "function_call": "foo()",
        "function_name": "arkts-limited-esobj",
        "parent_text": "arkts-limited-esobj应用代码  建议改法 // lib.d.ts\\ndeclare function foo(): any;\\n\\n// main.ets\\ninterface I {}\\n\\nfunction f() {\\n  let e0: ESObject = foo();\\n  let e1: ESObject = foo();\\n  let e2: number = 1;\\n  let e3: I = {};\\n  let e4: string = '';\\n} ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"arkts-limited-esobj\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__arkts-limited-esobj\\\"'></a><a name='\\\"arkts-limited-esobj\\\"'></a><h4>arkts-limited-esobj</h4><p><strong>应用代码</strong></p>  <p><strong>建议改法</strong></p> <pre class='\\\"typescript\\\"'>// lib.d.ts\\ndeclare function foo(): any;\\n\\n// main.ets\\ninterface I {}\\n\\nfunction f() {\\n  let e0: ESObject = foo();\\n  let e1: ESObject = foo();\\n  let e2: number = 1;\\n  let e3: I = {};\\n  let e4: string = '';\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1621,
        "pre": "function shallowCopy(obj: object): object {\\n  let newObj = {};\\n  Object.assign(newObj, obj);\\n  return newObj;\\n}",
        "type": "Reference",
        "function_call": "function shallowCopy(obj: object): object",
        "function_name": "[h2]浅拷贝",
        "parent_text": "[h2]浅拷贝TypeScript  ArkTS function shallowCopy(obj: object): object {\\n  let newObj: Record<string, Object> = {};\\n  for (let key of Object.keys(obj)) {\\n    newObj[key] = obj[key];\\n  }\\n  return newObj;\\n} ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"浅拷贝\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E6%B5%85%E6%8B%B7%E8%B4%9D\\\"'></a><a name='\\\"%E6%B5%85%E6%8B%B7%E8%B4%9D\\\"'></a><h4>[h2]浅拷贝</h4><p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function shallowCopy(obj: object): object {\\n  let newObj: Record&lt;string, Object&gt; = {};\\n  for (let key of Object.keys(obj)) {\\n    newObj[key] = obj[key];\\n  }\\n  return newObj;\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1622,
        "pre": "function deepCopy(obj: object): object {\\n  let newObj = Array.isArray(obj) ? [] : {};\\n  for (let key in obj) {\\n    if (typeof obj[key] === 'object') {\\n      newObj[key] = deepCopy(obj[key]);\\n    } else {\\n      newObj[key] = obj[key];\\n    }\\n  }\\n  return newObj;\\n}",
        "type": "Reference",
        "function_call": "function deepCopy(obj: object): object",
        "function_name": "[h2]深拷贝",
        "parent_text": "[h2]深拷贝TypeScript  ArkTS function deepCopy(obj: object): object {\\n  let newObj: Record<string, Object> | Object[] = Array.isArray(obj) ? [] : {};\\n  for (let key of Object.keys(obj)) {\\n    if (typeof obj[key] === 'object') {\\n      newObj[key] = deepCopy(obj[key]);\\n    } else {\\n      newObj[key] = obj[key];\\n    }\\n  }\\n  return newObj;\\n} ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"深拷贝\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__%E6%B7%B1%E6%8B%B7%E8%B4%9D\\\"'></a><a name='\\\"%E6%B7%B1%E6%8B%B7%E8%B4%9D\\\"'></a><h4>[h2]深拷贝</h4><p><strong>TypeScript</strong></p>  <p><strong>ArkTS</strong></p> <pre class='\\\"typescript\\\"'>function deepCopy(obj: object): object {\\n  let newObj: Record&lt;string, Object&gt; | Object[] = Array.isArray(obj) ? [] : {};\\n  for (let key of Object.keys(obj)) {\\n    if (typeof obj[key] === 'object') {\\n      newObj[key] = deepCopy(obj[key]);\\n    } else {\\n      newObj[key] = obj[key];\\n    }\\n  }\\n  return newObj;\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1623,
        "pre": "export class MyComponentController {\\n  item: MyComponent = null;\\n\\n  setItem(item: MyComponent) {\\n    this.item = item;\\n  }\\n\\n  changeText(value: string) {\\n    this.item.value = value;\\n  }\\n}\\n\\n@Component\\nexport default struct MyComponent {\\n  public controller: MyComponentController = null;\\n  @State value: string = 'Hello World';\\n\\n  build() {\\n    Column() {\\n      Text(this.value)\\n        .fontSize(50)\\n    }\\n  }\\n\\n  aboutToAppear() {\\n    if (this.controller)\\n      this.controller.setItem(this); // 不建议把this作为参数传递到struct外部使用\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct ObjThisOldPage {\\n  controller = new MyComponentController();\\n\\n  build() {\\n    Column() {\\n      MyComponent({ controller: this.controller })\\n      Button('change value').onClick(() => {\\n        this.controller.changeText('Text');\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "Column()",
        "function_name": "[h2]Struct组件外使用状态变量",
        "parent_text": "[h2]Struct组件外使用状态变量由于struct和class不同，不建议把this作为参数传递到struct外部使用，避免引起实例引用无法释放的情况，导致内存泄露。建议将状态变量对象传递到struct外面使用，通过修改对象的属性，来触发UI刷新。 不推荐用法  推荐用法 class CC {\\n  value: string = '1';\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\nexport class MyComponentController {\\n  item: CC = new CC('1');\\n\\n  setItem(item: CC) {\\n    this.item = item;\\n  }\\n\\n  changeText(value: string) {\\n    this.item.value = value;\\n  }\\n}\\n\\n@Component\\nexport default struct MyComponent {\\n  public controller: MyComponentController | null = null;\\n  @State value: CC = new CC('Hello World');\\n\\n  build() {\\n    Column() {\\n      Text(`${this.value.value}`)\\n        .fontSize(50)\\n    }\\n  }\\n\\n  aboutToAppear() {\\n    if (this.controller)\\n      this.controller.setItem(this.value);\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct StyleExample {\\n  controller: MyComponentController = new MyComponentController();\\n\\n  build() {\\n    Column() {\\n      MyComponent({ controller: this.controller })\\n      Button('change value').onClick(() => {\\n        this.controller.changeText('Text');\\n      })\\n    }\\n  }\\n} ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"struct组件外使用状态变量\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__struct%E7%BB%84%E4%BB%B6%E5%A4%96%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\\\"'></a><a name='\\\"struct%E7%BB%84%E4%BB%B6%E5%A4%96%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\\\"'></a><h4>[h2]Struct组件外使用状态变量</h4><p>由于struct和class不同，不建议把this作为参数传递到struct外部使用，避免引起实例引用无法释放的情况，导致内存泄露。建议将状态变量对象传递到struct外面使用，通过修改对象的属性，来触发UI刷新。</p> <p><strong>不推荐用法</strong></p>  <p><strong>推荐用法</strong></p> <pre class='\\\"typescript\\\"'>class CC {\\n  value: string = '1';\\n\\n  constructor(value: string) {\\n    this.value = value;\\n  }\\n}\\n\\nexport class MyComponentController {\\n  item: CC = new CC('1');\\n\\n  setItem(item: CC) {\\n    this.item = item;\\n  }\\n\\n  changeText(value: string) {\\n    this.item.value = value;\\n  }\\n}\\n\\n@Component\\nexport default struct MyComponent {\\n  public controller: MyComponentController | null = null;\\n  @State value: CC = new CC('Hello World');\\n\\n  build() {\\n    Column() {\\n      Text(`${this.value.value}`)\\n        .fontSize(50)\\n    }\\n  }\\n\\n  aboutToAppear() {\\n    if (this.controller)\\n      this.controller.setItem(this.value);\\n  }\\n}\\n\\n@Entry\\n@Component\\nstruct StyleExample {\\n  controller: MyComponentController = new MyComponentController();\\n\\n  build() {\\n    Column() {\\n      MyComponent({ controller: this.controller })\\n      Button('change value').onClick(() =&gt; {\\n        this.controller.changeText('Text');\\n      })\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1624,
        "pre": "class Data {\\n  aa: number = 11;\\n}\\n\\n@Entry\\n@Component\\nstruct DatauionOldPage {\\n  @State array: Data[] = [new Data(), new Data(), new Data()];\\n\\n  @Builder\\n  componentCloser(data: Data) {\\n    Text(data.aa + '').fontSize(50)\\n  }\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        ForEachCom({ arrayList: this.array, closer: this.componentCloser })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n\\n@Component\\nexport struct ForEachCom {\\n  arrayList: any[]; // struct不支持泛型，有arkts-no-any-unknown报错\\n  @BuilderParam closer: (data: any) => void = this.componentCloser; // struct不支持泛型，有arkts-no-any-unknown报错\\n\\n  @Builder\\n  componentCloser() {\\n  }\\n\\n  build() {\\n    Column() {\\n      ForEach(this.arrayList, (item: any) => { // struct不支持泛型，有arkts-no-any-unknown报错\\n        Row() {\\n          this.closer(item)\\n        }.width('100%').height(200).backgroundColor('#eee')\\n      })\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": "Row()",
        "function_name": "[h2]Struct支持联合类型的方案",
        "parent_text": "[h2]Struct支持联合类型的方案下面这段代码有arkts-no-any-unknown的报错，由于struct不支持泛型，建议使用联合类型，实现自定义组件类似泛型的功能。 不推荐用法  推荐用法 class Data {\\n  aa: number = 11;\\n}\\n\\nclass Model {\\n  aa: string = '11';\\n}\\n\\ntype UnionData = Data | Model;\\n\\n@Entry\\n@Component\\nstruct DatauionPage {\\n  array: UnionData[] = [new Data(), new Data(), new Data()];\\n\\n  @Builder\\n  componentCloser(data: UnionData) {\\n    if (data instanceof Data) {\\n      Text(data.aa + '').fontSize(50)\\n    }\\n  }\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        ForEachCom({ arrayList: this.array, closer: this.componentCloser })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n\\n@Component\\nexport struct ForEachCom {\\n  arrayList: UnionData[] = [new Data(), new Data(), new Data()];\\n  @BuilderParam closer: (data: UnionData) => void = this.componentCloser;\\n\\n  @Builder\\n  componentCloser() {\\n  }\\n\\n  build() {\\n    Column() {\\n      ForEach(this.arrayList, (item: UnionData) => {\\n        Row() {\\n          this.closer(item)\\n        }.width('100%').height(200).backgroundColor('#eee')\\n      })\\n    }\\n  }\\n} ",
        "import_module": "import type {A, B, C, D } from '***'",
        "parent": "<div class='\\\"section\\\"' id='\\\"struct支持联合类型的方案\\\"'><a name='\\\"ZH-CN_TOPIC_0000002213458629__struct%E6%94%AF%E6%8C%81%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%A1%88\\\"'></a><a name='\\\"struct%E6%94%AF%E6%8C%81%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%A1%88\\\"'></a><h4>[h2]Struct支持联合类型的方案</h4><p>下面这段代码有arkts-no-any-unknown的报错，由于struct不支持泛型，建议使用联合类型，实现自定义组件类似泛型的功能。</p> <p><strong>不推荐用法</strong></p>  <p><strong>推荐用法</strong></p> <pre class='\\\"typescript\\\"'>class Data {\\n  aa: number = 11;\\n}\\n\\nclass Model {\\n  aa: string = '11';\\n}\\n\\ntype UnionData = Data | Model;\\n\\n@Entry\\n@Component\\nstruct DatauionPage {\\n  array: UnionData[] = [new Data(), new Data(), new Data()];\\n\\n  @Builder\\n  componentCloser(data: UnionData) {\\n    if (data instanceof Data) {\\n      Text(data.aa + '').fontSize(50)\\n    }\\n  }\\n\\n  build() {\\n    Row() {\\n      Column() {\\n        ForEachCom({ arrayList: this.array, closer: this.componentCloser })\\n      }\\n      .width('100%')\\n    }\\n    .height('100%')\\n  }\\n}\\n\\n@Component\\nexport struct ForEachCom {\\n  arrayList: UnionData[] = [new Data(), new Data(), new Data()];\\n  @BuilderParam closer: (data: UnionData) =&gt; void = this.componentCloser;\\n\\n  @Builder\\n  componentCloser() {\\n  }\\n\\n  build() {\\n    Column() {\\n      ForEach(this.arrayList, (item: UnionData) =&gt; {\\n        Row() {\\n          this.closer(item)\\n        }.width('100%').height(200).backgroundColor('#eee')\\n      })\\n    }\\n  }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/arkts-more-cases.html"
    },
    {
        "id": 1625,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@performance/hp-performance-no-closures\\\": \\\"suggestion\\\",\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section118281715182614\\\"'><a name='\\\"section118281715182614\\\"'></a><a name='\\\"section118281715182614\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-performance-no-closures.html"
    },
    {
        "id": 1626,
        "pre": "let arr = [0, 1, 2];\\nfunction foo(array: Array<number>): number {\\n  // arr 尽量通过参数传递\\n  return array[0] + array[1];\\n}\\nfoo(arr);",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-performance-no-closures.html"
    },
    {
        "id": 1627,
        "pre": "let arr = [0, 1, 2];\\nfunction foo() {\\n  // arr 尽量通过参数传递\\n  return arr[0] + arr[1];\\n}\\nfoo();",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_hp-performance-no-closures.html"
    },
    {
        "id": 1628,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/no-namespace\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-namespace.html"
    },
    {
        "id": 1629,
        "pre": "// foo为模块名\\ndeclare module 'foo' {}\\n// anything inside a d.ts file",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-namespace.html"
    },
    {
        "id": 1630,
        "pre": "module foo {}\\nnamespace foo {}\\n\\ndeclare module foo {}\\ndeclare namespace foo {}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-namespace.html"
    },
    {
        "id": 1631,
        "pre": "import { MapComponent, mapCommon, map } from '@kit.MapKit';\\nimport { AsyncCallback } from '@kit.BasicServicesKit';",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入相关模块。",
        "import_module": null,
        "parent": "<li>导入相关模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/map-circel.html"
    },
    {
        "id": 1632,
        "pre": "import { minorsProtection } from '@kit.AccountKit';\\nimport { hilog } from '@kit.PerformanceAnalysisKit';\\nimport { BusinessError, commonEventManager } from '@kit.BasicServicesKit';\\n// 以上引入的模块为当前场景的全量模块，请按照具体实现按需引入",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "导入minorsProtection模块及相关公共模块。",
        "import_module": null,
        "parent": "<li id='\\\"li11701219154719\\\"'>导入<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/account-api-minorsprotection\\\"' target='\\\"_blank\\\"'>minorsProtection</a>模块及相关公共模块。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/account-system-minorsprotection.html"
    },
    {
        "id": 1633,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@typescript-eslint/return-await\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_return-await.html"
    },
    {
        "id": 1634,
        "pre": "export async function validInTryCatch1() {\\n  try {\\n    return await Promise.resolve('try');\\n  } catch (e) {\\n    return await Promise.resolve('catch');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_return-await.html"
    },
    {
        "id": 1635,
        "pre": "export async function validInTryCatch1() {\\n  try {\\n    return Promise.resolve('try');\\n  } catch (e) {\\n    return Promise.resolve('catch');\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_return-await.html"
    },
    {
        "id": 1636,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@cross-device-app-dev/color-contrast\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_color-contrast.html"
    },
    {
        "id": 1637,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    RelativeContainer() {\\n      Text('message')\\n        // app.color.color1=#ffffff\\n        .fontColor($r('app.color.color1'))\\n          // app.color.color2=#000000\\n        .backgroundColor($r('app.color.color2'))\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_color-contrast.html"
    },
    {
        "id": 1638,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  build() {\\n    RelativeContainer() {\\n      Text('message')\\n        // app.color.color1=#000000\\n        .fontColor($r('app.color.color1'))\\n        // app.color.color2=#333333\\n        .backgroundColor($r('app.color.color2'))\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_color-contrast.html"
    },
    {
        "id": 1639,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@previewer/mandatory-default-value-for-local-initialization\\\": \\\"warn\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section360119186717\\\"'><a name='\\\"section360119186717\\\"'></a><a name='\\\"section360119186717\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_value-for-local-initialization.html"
    },
    {
        "id": 1640,
        "pre": "@Builder function MyBuilderFunction(): void {}\\n@Entry\\n@Component\\nstruct Index {\\n  messageA?: string;\\n  message: string = 'Hello World';\\n  @Provide messageB: string = 'messageB';\\n  @StorageLink('varA') varA: number = 2;\\n  @StorageProp('languageCode') lang: string = 'en';\\n  @LocalStorageLink('PropA') storageLink1: number = 1;\\n  @LocalStorageProp('PropB') storageLink2: number = 2;\\n  @BuilderParam myBuilder: () => void = MyBuilderFunction;\\n  build() {\\n    Row() {\\n      Column() {\\n        Text(this.message)\\n        this.myBuilder()\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "正例",
        "parent_text": "正例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section8953121019164\\\"'><a name='\\\"section8953121019164\\\"'></a><a name='\\\"section8953121019164\\\"'></a><h4>正例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_value-for-local-initialization.html"
    },
    {
        "id": 1641,
        "pre": "@Entry\\n@Component\\nstruct Index {\\n  @BuilderParam myBuilder: () => void;\\n  build() {\\n    Row() {\\n      Column() {\\n        Text('Hello World')\\n        this.myBuilder()\\n      }\\n    }\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "反例",
        "parent_text": "反例 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section470091981618\\\"'><a name='\\\"section470091981618\\\"'></a><a name='\\\"section470091981618\\\"'></a><h4>反例</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_value-for-local-initialization.html"
    },
    {
        "id": 1642,
        "pre": "#include \\\"service_collaboration/service_collaboration_api.h\\\"",
        "type": "Reference",
        "function_call": "sleep_for(std::chrono::seconds(three)",
        "function_name": "开发步骤",
        "parent_text": "  开发步骤 1.引入头文件        2.编写CMakeList.txt      find_library(\\n    # Sets the name of the path variable.\\n    service_collaboration-lib\\n    # Specifies the name of the NDK library that\\n    # you want CMake to locate.\\n    libservice_collaboration_ndk.z.so\\n)\\ntarget_link_libraries(entry PUBLIC\\n    ${service_collaboration-lib}\\n)  3.实例代码调用接口，分为以下三步。  通过调用HMS_ServiceCollaboration_GetCollaborationDeviceInfos接口获取设备列表信息，传入需要的ServiceCollaborationFilterType能力数组，接口会返回支持对应能力设备。 创建回调ServiceCollaborationCallback，其中包括事件回调OnEventProc和图片数据回调OnDataCallbackProc；创建ServiceCollaboration_SelectInfo，示例中传入了TAKE_PHOTO能力，并选择了列表的第一个设备。 HMS_ServiceCollaboration_StartCollaboration入参传入第二步构造的ServiceCollaborationCallback和ServiceCollaboration_SelectInfo，此时被调用的设备会拉起相机，操作被拉起相机的设备进行拍照。事件和图片数据会通过第二步构造的回调通知给应用。  #include \\\"service_collaboration/service_collaboration_api.h\\\"\\n#include <thread>\\n\\nstatic int32_t OnEventProc(ServiceCollaborationEventCode code, uint32_t extraCode)\\n{\\n    return 0;\\n}\\nstatic int32_t OnDataCallbackProc(\\n    ServiceCollaborationEventCode code, ServiceCollaborationDataType dataType, uint32_t dataSize, char* data)\\n{\\n    return 0;\\n}\\nint main(int argc, char* argv[])\\n{\\n    int two = 2;\\n    int three = 3;\\n    int filter = 1;\\n    const int size = 3;\\n    int shouldCancel = 0;\\n    \\n    // 构建所需跨设备互通能力，并调用HMS_ServiceCollaboration_GetCollaborationDeviceInfos接口获取设备信息\\n    ServiceCollaborationFilterType serviceFilterTypes[size] = {TAKE_PHOTO, SCAN_DOCUMENT, IMAGE_PICKER};\\n    ServiceCollaboration_CollaborationDeviceInfoSets* info = HMS_ServiceCollaboration_GetCollaborationDeviceInfos(3, serviceFilterTypes);\\n    // 构建callback回调\\n    ServiceCollaboration_SelectInfo taskInfo = { TAKE_PHOTO, { 0 } };\\n    for (uint32_t i = 0; i < info->size; i++) {\\n        ServiceCollaboration_CollaborationDeviceInfo *deviceInfo =\\n            (ServiceCollaboration_CollaborationDeviceInfo *)&(info->deviceInfoSets[i]);\\n        if (filter == 1) {\\n            taskInfo.serviceFilterType = TAKE_PHOTO;\\n        }\\n        if (filter == two) {\\n            taskInfo.serviceFilterType = SCAN_DOCUMENT;\\n        }\\n        if (filter == three) {\\n            taskInfo.serviceFilterType = IMAGE_PICKER;\\n        }\\n        std::memcpy(taskInfo.deviceNetworkId, deviceInfo->deviceNetworkId, COLLABORATIONDEVICEINFO_DEVICENETWORKID_MAXLENGTH-1);\\n    }\\n    ServiceCollaborationCallback callback = {.OnEvent = OnEventProc, .OnDataCallback = OnDataCallbackProc};\\n    // 传入拍照参数、callback回调并调用HMS_ServiceCollaboration_StartCollaboration接口\\n    uint32_t id = HMS_ServiceCollaboration_StartCollaboration(&taskInfo, &callback);\\n    std::this_thread::sleep_for(std::chrono::seconds(three));\\n    if (shouldCancel) {\\n        // 三秒后主动调用HMS_ServiceCollaboration_StopCollaboration关闭跨设备互通\\n        int32_t ret = HMS_ServiceCollaboration_StopCollaboration(id);\\n    }\\n} ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section11757163410599\\\"'> <a name='\\\"section11757163410599\\\"'></a><a name='\\\"section11757163410599\\\"'></a> <h4>开发步骤</h4> <p>1.引入头文件</p>  <div class='\\\"p\\\"'>      2.编写CMakeList.txt      <pre class='\\\"typescript\\\"'>find_library(\\n    # Sets the name of the path variable.\\n    service_collaboration-lib\\n    # Specifies the name of the NDK library that\\n    # you want CMake to locate.\\n    libservice_collaboration_ndk.z.so\\n)\\ntarget_link_libraries(entry PUBLIC\\n    ${service_collaboration-lib}\\n)</pre> </div> <p>3.实例代码调用接口，分为以下三步。</p> <ol> <li><span>通过调用HMS_ServiceCollaboration_GetCollaborationDeviceInfos接口获取设备列表信息，传入需要的ServiceCollaborationFilterType能力数组，接口会返回支持对应能力设备。</span></li> <li><span>创建回调ServiceCollaborationCallback，其中包括事件回调OnEventProc和图片数据回调OnDataCallbackProc；创建ServiceCollaboration_SelectInfo，示例中传入了TAKE_PHOTO能力，并选择了列表的第一个设备。</span></li> <li><span>HMS_ServiceCollaboration_StartCollaboration入参传入第二步构造的ServiceCollaborationCallback和ServiceCollaboration_SelectInfo，此时被调用的设备会拉起相机，操作被拉起相机的设备进行拍照。事件和图片数据会通过第二步构造的回调通知给应用。</span></li> </ol> <pre class='\\\"screen\\\"'>#include \\\"service_collaboration/service_collaboration_api.h\\\"\\n#include &lt;thread&gt;\\n\\nstatic int32_t OnEventProc(ServiceCollaborationEventCode code, uint32_t extraCode)\\n{\\n    return 0;\\n}\\nstatic int32_t OnDataCallbackProc(\\n    ServiceCollaborationEventCode code, ServiceCollaborationDataType dataType, uint32_t dataSize, char* data)\\n{\\n    return 0;\\n}\\nint main(int argc, char* argv[])\\n{\\n    int two = 2;\\n    int three = 3;\\n    int filter = 1;\\n    const int size = 3;\\n    int shouldCancel = 0;\\n    \\n    // 构建所需跨设备互通能力，并调用HMS_ServiceCollaboration_GetCollaborationDeviceInfos接口获取设备信息\\n    ServiceCollaborationFilterType serviceFilterTypes[size] = {TAKE_PHOTO, SCAN_DOCUMENT, IMAGE_PICKER};\\n    ServiceCollaboration_CollaborationDeviceInfoSets* info = HMS_ServiceCollaboration_GetCollaborationDeviceInfos(3, serviceFilterTypes);\\n    // 构建callback回调\\n    ServiceCollaboration_SelectInfo taskInfo = { TAKE_PHOTO, { 0 } };\\n    for (uint32_t i = 0; i &lt; info-&gt;size; i++) {\\n        ServiceCollaboration_CollaborationDeviceInfo *deviceInfo =\\n            (ServiceCollaboration_CollaborationDeviceInfo *)&amp;(info-&gt;deviceInfoSets[i]);\\n        if (filter == 1) {\\n            taskInfo.serviceFilterType = TAKE_PHOTO;\\n        }\\n        if (filter == two) {\\n            taskInfo.serviceFilterType = SCAN_DOCUMENT;\\n        }\\n        if (filter == three) {\\n            taskInfo.serviceFilterType = IMAGE_PICKER;\\n        }\\n        std::memcpy(taskInfo.deviceNetworkId, deviceInfo-&gt;deviceNetworkId, COLLABORATIONDEVICEINFO_DEVICENETWORKID_MAXLENGTH-1);\\n    }\\n    ServiceCollaborationCallback callback = {.OnEvent = OnEventProc, .OnDataCallback = OnDataCallbackProc};\\n    // 传入拍照参数、callback回调并调用HMS_ServiceCollaboration_StartCollaboration接口\\n    uint32_t id = HMS_ServiceCollaboration_StartCollaboration(&amp;taskInfo, &amp;callback);\\n    std::this_thread::sleep_for(std::chrono::seconds(three));\\n    if (shouldCancel) {\\n        // 三秒后主动调用HMS_ServiceCollaboration_StopCollaboration关闭跨设备互通\\n        int32_t ret = HMS_ServiceCollaboration_StopCollaboration(id);\\n    }\\n}</pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/servicecollaboration-servicendk-guide.html"
    },
    {
        "id": 1643,
        "pre": "// code-linter.json5\\n{\\n  \\\"rules\\\": {\\n    \\\"@security/no-unsafe-aes\\\": \\\"error\\\"\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": "规则配置",
        "parent_text": "规则配置 ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section89692598167\\\"'><a name='\\\"section89692598167\\\"'></a><a name='\\\"section89692598167\\\"'></a><h4>规则配置</h4> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/ide_no-unsafe-aes.html"
    },
    {
        "id": 1644,
        "pre": "import { insightIntent } from '@kit.IntentsKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nlet playMusicIntent1: insightIntent.InsightIntent;\\nlet playMusicIntent2: insightIntent.InsightIntent;\\n// 共享数据接口  意图数组可以是更多的实体\\n// 根据实际代码上下文自行传入合适的context\\ninsightIntent.shareIntent(context, [playMusicIntent1, playMusicIntent2]).then(() => {\\n  console.info('shareIntent succeed');\\n}).catch((err: BusinessError) => {\\n  console.error(`error.code: ${err?.code}, failed because ${err?.message}`);\\n});",
        "type": "Reference",
        "function_call": "shareIntent()",
        "function_name": "端侧意图共享",
        "parent_text": "  端侧意图共享 构建意图对象，并且调用shareIntent()，实现意图共享。可同时构建多个PlayMusic或PlayMusicList的意图对象。  PlayMusic的意图共享字段定义见各垂域意图Schema定义，代码示例如下： import { insightIntent } from '@kit.IntentsKit';\\n\\nlet playMusicIntent: insightIntent.InsightIntent = {\\n  intentName: \\\"PlayMusic\\\",\\n  intentVersion: \\\"1.0\\\",\\n  identifier: \\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\",\\n  intentActionInfo: {\\n    actionMode: \\\"EXECUTED\\\",\\n    executedTimeSlots: {\\n      executedStartTime: 1637393212000,\\n      executedEndTime: 1637393112000,\\n    },\\n    currentPercentage: 50,\\n  },\\n  intentEntityInfo: {\\n    entityName: \\\"Music\\\",\\n    entityId: \\\"C10194368\\\",\\n    entityGroupId: \\\"C10194321312\\\",\\n    displayName: \\\"测试歌曲1\\\",\\n    description: \\\"NA\\\",\\n    logoURL: \\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\",\\n    keywords: [\\\"华为音乐\\\", \\\"化妆\\\"],\\n    rankingHint: 99,\\n    expirationTime: 1637393212000,\\n    metadataModificationTime: 1637393212000,\\n    activityType: [\\\"1\\\", \\\"2\\\", \\\"3\\\"],\\n    artist: [\\\"测试歌手1\\\", \\\"测试歌手2\\\"],\\n    lyricist: [\\\"测试词作者1\\\", \\\"测试词作者2\\\"],\\n    composer: [\\\"测试曲作者1\\\", \\\"测试曲作者2\\\"],\\n    albumName: \\\"测试专辑\\\",\\n    duration: 244000,\\n    playCount: 100000,\\n    musicalGenre: [\\\"流行\\\", \\\"华语\\\", \\\"金曲\\\", \\\"00后\\\"],\\n    isPublicData: false,\\n  }\\n} 完整的意图共享示例如下所示，该示例构建了一个PlayMusic意图，并进行了shareIntent调用。 import { insightIntent } from '@kit.IntentsKit';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\nlet playMusicIntent: insightIntent.InsightIntent = {\\n  intentName: \\\"PlayMusic\\\",\\n  intentVersion: \\\"1.0\\\",\\n  identifier: \\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\",\\n  intentActionInfo: {\\n    actionMode: \\\"EXECUTED\\\",\\n    executedTimeSlots: {\\n      executedStartTime: 1637393212000,\\n      executedEndTime: 1637393112000,\\n    },\\n    currentPercentage: 50,\\n  },\\n  intentEntityInfo: {\\n    entityName: \\\"Music\\\",\\n    entityId: \\\"C10194368\\\",\\n    entityGroupId: \\\"C10194321312\\\",\\n    displayName: \\\"测试歌曲1\\\",\\n    description: \\\"NA\\\",\\n    logoURL: \\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\",\\n    keywords: [\\\"华为音乐\\\", \\\"化妆\\\"],\\n    rankingHint: 99,\\n    expirationTime: 1637393212000,\\n    metadataModificationTime: 1637393212000,\\n    activityType: [\\\"1\\\", \\\"2\\\", \\\"3\\\"],\\n    artist: [\\\"测试歌手1\\\", \\\"测试歌手2\\\"],\\n    lyricist: [\\\"测试词作者1\\\", \\\"测试词作者2\\\"],\\n    composer: [\\\"测试曲作者1\\\", \\\"测试曲作者2\\\"],\\n    albumName: \\\"测试专辑\\\",\\n    duration: 244000,\\n    playCount: 100000,\\n    musicalGenre: [\\\"流行\\\", \\\"华语\\\", \\\"金曲\\\", \\\"00后\\\"],\\n    isPublicData: false,\\n  }\\n}\\n// 共享数据接口  意图数组可以是更多的实体\\n// 根据实际代码上下文自行传入合适的context\\ninsightIntent.shareIntent(context, [playMusicIntent]).then(() => {\\n  console.info('shareIntent succeed');\\n}).catch((err: BusinessError) => {\\n  console.error(`error.code: ${err?.code}, failed because ${err?.message}`);\\n}); ",
        "import_module": null,
        "parent": "<div class='\\\"section\\\"' id='\\\"section726721462916\\\"'> <a name='\\\"section726721462916\\\"'></a><a name='\\\"section726721462916\\\"'></a> <h4>端侧意图共享</h4> <p>构建意图对象，并且调用<a href='\\\"https://developer.huawei.com/consumer/cn/doc/harmonyos-references/intents-arkts-api-insightintent#section161911659112211\\\"' target='\\\"_blank\\\"'>shareIntent()</a>，实现意图共享。可同时构建多个PlayMusic或PlayMusicList的意图对象。</p>  <p>PlayMusic的意图共享字段定义见<a href='\\\"https://developer.huawei.com/consumer/cn/doc/service/intents-schema-0000001901962713\\\"' target='\\\"_blank\\\"'>各垂域意图Schema</a>定义，代码示例如下：</p> <pre class='\\\"typescript\\\"'>import <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>insightIntent </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>} </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'@kit.IntentsKit'</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n\\nlet <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playMusicIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(0,0,128);\\\"=\"\" style='\\\"color:'>insightIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>InsightIntent </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>= </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"PlayMusic\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentVersion</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1.0\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>identifier</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentActionInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>actionMode</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"EXECUTED\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedTimeSlots</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedStartTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedEndTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393112000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>currentPercentage</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>50</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentEntityInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"Music\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194368\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityGroupId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194321312\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>displayName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌曲1</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>description</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"NA\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>logoURL</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>keywords</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>华为音乐</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>化妆</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>rankingHint</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>99</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>expirationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>metadataModificationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>activityType</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"2\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"3\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>artist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>lyricist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>composer</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>albumName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试专辑</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>duration</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>244000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playCount</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>100000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>musicalGenre</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>流行</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"华语\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>金曲</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"00</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>后</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(108,113,196);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>isPublicData</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span>false<span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(233,134,205);\\\"=\"\" style='\\\"color:'>}</span></pre> <p>完整的意图共享示例如下所示，该示例构建了一个PlayMusic意图，并进行了shareIntent调用。</p> <pre class='\\\"screen\\\"'>import <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>insightIntent </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>} </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'@kit.IntentsKit'</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\nimport <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{ </span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>BusinessError </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>} </span>from <span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'@kit.BasicServicesKit'</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n\\nlet <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playMusicIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(0,0,128);\\\"=\"\" style='\\\"color:'>insightIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>InsightIntent </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>= </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"PlayMusic\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentVersion</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1.0\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>identifier</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"52dac3b0-6520-4974-81e5-25f0879449b5\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentActionInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>actionMode</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"EXECUTED\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedTimeSlots</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>{</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedStartTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n      <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>executedEndTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393112000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>currentPercentage</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>50</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>}</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>intentEntityInfo</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>{</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"Music\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194368\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>entityGroupId</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"C10194321312\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>displayName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌曲</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>description</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"NA\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>logoURL</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>keywords</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>华为音乐</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>化妆</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>rankingHint</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>99</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>expirationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>metadataModificationTime</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>1637393212000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>activityType</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"2\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"3\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>artist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试歌手</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>lyricist</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试词作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>composer</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>1\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试曲作者</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>2\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>albumName</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>测试专辑</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>duration</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>244000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playCount</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(255,145,112);\\\"=\"\" style='\\\"color:'>100000</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>musicalGenre</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>流行</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>华语</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>金曲</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"00</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>后</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>\\\"</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n    <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>isPublicData</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span>false<span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>,</span>\\n  <span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>共享数据接口  意图数组可以是更多的实体</span>\\n<span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>// </span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>根据实际代码上下文自行传入合适的</span><span rgb(128,128,128);\\\"=\"\" style='\\\"color:'>context</span>\\n<span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>insightIntent</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>shareIntent</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>(</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>context</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>, </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>[</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>playMusicIntent</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>]</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>then</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>(</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>() </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>=</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>console</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>info</span><span rgb(188,11,162);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>'shareIntent succeed'</span><span rgb(188,11,162);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n<span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>catch</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>(</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>(</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>err</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>: </span><span rgb(0,0,128);\\\"=\"\" style='\\\"color:'>BusinessError</span><span rgb(14,74,142);\\\"=\"\" style='\\\"color:'>) </span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>=</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>&gt;</span> <span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>{</span>\\n  <span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>console</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>.</span><span rgb(0,169,158);\\\"=\"\" style='\\\"color:'>error</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>(</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>`error.code: </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>${</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>err</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>code</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>, failed because </span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>${</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>err</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>?.</span><span rgb(17,64,142);\\\"=\"\" style='\\\"color:'>message</span><span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>}</span><span rgb(101,49,112);\\\"=\"\" style='\\\"color:'>`</span><span rgb(180,150,10);\\\"=\"\" style='\\\"color:'>)</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span>\\n<span rgb(63,145,1);\\\"=\"\" style='\\\"color:'>})</span><span rgb(133,152,1);\\\"=\"\" style='\\\"color:'>;</span></pre> </div>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/intents-search-rec-access-programme.html"
    },
    {
        "id": 1645,
        "pre": "import { insightIntent, InsightIntentExecutor } from '@kit.AbilityKit';\\nimport { window } from '@kit.ArkUI';\\nimport { BusinessError } from '@kit.BasicServicesKit';\\n\\n/**\\n * 意图调用样例\\n */\\nexport default class InsightIntentExecutorImpl extends InsightIntentExecutor {\\n  private static readonly PLAY_MUSIC = 'PlayMusic';\\n  /**\\n   * override 执行前台UIAbility意图\\n   *\\n   * @param name 意图名称\\n   * @param param 意图参数\\n   * @param pageLoader 窗口\\n   * @returns 意图调用结果\\n   */\\n  onExecuteInUIAbilityForegroundMode(name: string, param: Record<string, Object>, pageLoader: window.WindowStage):\\n    Promise<insightIntent.ExecuteResult> {\\n    // 根据意图名称分发处理逻辑。接入方可根据实际业务实现页面跳转\\n    switch (name) {\\n      case InsightIntentExecutorImpl.PLAY_MUSIC:\\n        return this.playMusic(param, pageLoader);\\n      default:\\n        break;\\n    }\\n    return Promise.resolve({\\n      code: -1,\\n      result: {\\n        message: 'unknown intent'\\n      }\\n    } as insightIntent.ExecuteResult)\\n  }\\n  /**\\n   * 实现调用播放歌曲功能\\n   *\\n   * @param param 意图参数\\n   * @param pageLoader 窗口\\n   */\\n  private playMusic(param: Record<string, Object>, pageLoader: window.WindowStage): Promise<insightIntent.ExecuteResult> {\\n    return new Promise((resolve, reject) => {\\n      let para: Record<string, string> = {\\n        'result': JSON.stringify(param)\\n      };\\n      let localStorage: LocalStorage = new LocalStorage(para);\\n      // TODO 实现意图调用，loadContent的入参为歌曲落地页路径，例如：pages/Index\\n      pageLoader.loadContent('pages/Index', localStorage)\\n        .then(() => {\\n          let entityId: string = (param.items as Array<object>)?.[0]?.['entityId'];\\n          // TODO 调用成功的情况，此处可以打印日志\\n          resolve({\\n            code: 0,\\n            result: {\\n              message: 'Intent execute succeed'\\n            }\\n          });\\n        })\\n        .catch((err: BusinessError) => {\\n          // TODO 调用失败的情况\\n          resolve({\\n            code: -1,\\n            result: {\\n              message: 'Intent execute failed'\\n            }\\n          })\\n        });\\n    })\\n  }\\n}",
        "type": "Reference",
        "function_call": null,
        "function_name": null,
        "parent_text": "通过意图名称，识别播放歌曲意图（PlayMusic），在对应的方法中传递意图参数（param），并拉起对应落地页（如播放歌曲落地页）或后台执行（播放歌曲）。",
        "import_module": null,
        "parent": "<li>通过意图名称，识别播放歌曲意图（PlayMusic），在对应的方法中传递意图参数（param），并拉起对应落地页（如播放歌曲落地页）或后台执行（播放歌曲）。</li>",
        "file_path": "/Users/liuxuejin/Desktop/Projects/HMDataAugmentation/harmonyos-guides/intents-search-rec-access-programme.html"
    }
]
