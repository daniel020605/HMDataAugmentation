{
    "https://box.nju.edu.cn/seafhttp/files/ad961078-d529-4457-8b62-10d4d1c98cae/Stats.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Column() {\n        Row() {\n          Column() {\n            Text(this.songs.length.toString())\n              .fontSize(28)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n            Text(\"歌曲\")\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n              .margin({ top: 5 })\n          }\n\n          Column() {\n            Text(this.albums.length.toString())\n              .fontSize(28)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n            Text(\"专辑\")\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n              .margin({ top: 5 })\n          }\n\n          Column() {\n            Text(this.artists.length.toString())\n              .fontSize(28)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n            Text(\"艺术家\")\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n              .margin({ top: 5 })\n          }\n        }\n        .width('100%')\n        .height('auto')\n        .padding(20)\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .width('100%')\n      .backgroundColor($r('app.color.bar_background'))\n      .borderRadius(10)\n      .margin({ top: 10 })\n      .padding(20)\n    }\n    .width('100%')\n    .height('100%')\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "https://box.nju.edu.cn/seafhttp/files/a279126b-f87a-4dca-ae11-cc077202de81/Setting.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll() {\n      Column() {\n        Column() {\n          Text(\"服务器设置\")\n            .width('100%')\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n            .fontWeight(FontWeight.Bold)\n            .padding({ left: 20, right: 20 })\n            .margin({ top: 15 })\n            .textAlign(TextAlign.Center)\n          Row() {\n            Text(\"服务器\")\n              .width(60)\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n            TextInput({\n              placeholder: 'https://my.navidrome.com',\n              text: $$this.baseURL\n            })\n              .width(\"100%\")\n              .height(40)\n              .layoutWeight(1)\n              .borderRadius(15)\n              .margin({ left: 15 })\n              .caretColor($r('app.color.font_secondary'))\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .placeholderFont({\n                size: 20\n              })\n              .type(InputType.URL)\n              .enterKeyType(EnterKeyType.Next)\n          }\n          .width('100%')\n          .padding({ left: 20, right: 20 })\n          .margin({ top: 15 })\n\n          Row() {\n            Text(\"账号\")\n              .width(60)\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n            TextInput({\n              placeholder: 'Username',\n              text: $$this.username\n            })\n              .width(\"100%\")\n              .height(40)\n              .layoutWeight(1)\n              .borderRadius(15)\n              .margin({ left: 15 })\n              .caretColor($r('app.color.font_secondary'))\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .placeholderFont({\n                size: 20\n              })\n              .type(InputType.USER_NAME)\n              .enterKeyType(EnterKeyType.Next)\n          }\n          .width('100%')\n          .padding({ left: 20, right: 20 })\n          .margin({ top: 15 })\n\n          Row() {\n            Text(\"密码\")\n              .width(60)\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n            TextInput({\n              placeholder: 'Password',\n              text: $$this.password\n            })\n              .width(\"100%\")\n              .height(40)\n              .layoutWeight(1)\n              .borderRadius(15)\n              .margin({ left: 15 })\n              .caretColor($r('app.color.font_secondary'))\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .placeholderFont({\n                size: 20\n              })\n              .type(InputType.Password)\n              .enterKeyType(EnterKeyType.Next)\n          }\n          .width('100%')\n          .padding({ left: 20, right: 20 })\n          .margin({ top: 15, bottom: 20 })\n        }\n        .width('100%')\n        .backgroundColor($r('app.color.bar_background'))\n        .borderRadius(10)\n        .margin({ top: 10 })\n\n        Column() {\n          Text(\"播放设置\")\n            .width('100%')\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n            .fontWeight(FontWeight.Bold)\n            .padding({ left: 20, right: 20 })\n            .margin({ top: 15 })\n            .textAlign(TextAlign.Center)\n          Row() {\n            Text(\"统一音量\")\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n            Toggle({ type: ToggleType.Switch, isOn: $$this.audioNormalization })\n              .selectedColor($r('app.color.radio'))\n              .switchPointColor($r('app.color.font'))\n          }\n          .width('100%')\n          .margin({ top: 20, bottom: 20 })\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Row() {\n            Text(\"淡入淡出\")\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n            Toggle({ type: ToggleType.Switch, isOn: $$this.fadeVolume })\n              .selectedColor($r('app.color.radio'))\n              .switchPointColor($r('app.color.font'))\n          }\n          .width('100%')\n          .margin({ bottom: 20 })\n          .justifyContent(FlexAlign.SpaceBetween)\n        }\n        .width('100%')\n        .backgroundColor($r('app.color.bar_background'))\n        .borderRadius(10)\n        .padding({ left: 20, right: 20 })\n        .margin({ top: 20 })\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .padding({ left: 20, right: 20 })\n    .align(Alignment.Top)\n  }"
        }
    ],
    "https://box.nju.edu.cn/seafhttp/files/eb4daa80-bf50-41cf-8125-b2c0b7aab031/About.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Column() {\n        Text(\"Harmonic\")\n          .fontSize(34)\n          .fontWeight(FontWeight.Bold)\n          .fontColor($r('app.color.font'))\n        Text(\"Navidrome的鸿蒙Next客户端\")\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .margin({ top: 5 })\n        Row() {\n          Text(\"版本号\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n          Text('v' + bundleInfo.versionName)\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n        }\n        .width('100%')\n        .margin({ top: 20 })\n        .justifyContent(FlexAlign.SpaceBetween)\n\n        Row() {\n          Text(\"项目地址\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n          Image($r('app.media.github'))\n            .width(25)\n            .height(25)\n            .onClick(() => {\n              let want: Want = {\n                action: 'ohos.want.action.viewData',\n                entities: ['entity.system.browsable'],\n                uri: 'https://github.com/shanyan-wcx/Harmonic'\n              };\n              context.startAbility(want)\n            })\n        }\n        .width('100%')\n        .margin({ top: 12 })\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .width('100%')\n      .backgroundColor($r('app.color.bar_background'))\n      .borderRadius(10)\n      .margin({ top: 10 })\n      .padding(20)\n    }\n    .width('100%')\n    .height('100%')\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "https://box.nju.edu.cn/seafhttp/files/ccdde304-fa4a-49af-933c-cad63f2a95eb/CreatePlaylist.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text(\"新建歌单\")\n        .width('100%')\n        .height(60)\n        .textAlign(TextAlign.Center)\n        .fontSize(20)\n        .fontColor($r('app.color.font'))\n        .fontWeight(FontWeight.Bold)\n\n      Row() {\n        Text(\"名称\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n        TextInput({\n          placeholder: '歌单名称',\n          text: $$this.name\n        })\n          .width(\"100%\")\n          .height(40)\n          .layoutWeight(1)\n          .borderRadius(15)\n          .margin({ left: 15 })\n          .caretColor($r('app.color.font_secondary'))\n          .fontColor($r('app.color.font'))\n          .fontSize(20)\n          .placeholderFont({\n            size: 20\n          })\n          .enterKeyType(EnterKeyType.Next)\n      }\n      .width('100%')\n      .margin({ bottom: 20 })\n\n      Row() {\n        Text(\"注释\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n          .margin({ top: 5 })\n        TextArea({\n          placeholder: '歌单注释',\n          text: $$this.comment\n        })\n          .width(\"100%\")\n          .height(100)\n          .layoutWeight(1)\n          .borderRadius(15)\n          .margin({ left: 15 })\n          .caretColor($r('app.color.font_secondary'))\n          .fontColor($r('app.color.font'))\n          .fontSize(20)\n          .placeholderFont({\n            size: 20\n          })\n          .enterKeyType(EnterKeyType.Next)\n      }\n      .width('100%')\n      .margin({ bottom: 20 })\n      .alignItems(VerticalAlign.Top)\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"确认\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(50)\n      .borderRadius(15)\n      .backgroundColor($r('app.color.content_background'))\n      .onClick(async () => {\n        if(this.name!==''){\n          this.createPlaylist.close()\n          let success = await createPlaylist(this.name, this.comment)\n          if (success === true) {\n            promptAction.showToast({\n              message: '新建成功！',\n              duration: 500\n            });\n            this.playlists = (await getPlaylists()).sort((a, b) => {\n              return Date.parse(b.changed) - Date.parse(a.changed);\n            })\n          } else {\n            promptAction.showToast({\n              message: '新建失败，请检查网络！',\n              duration: 500\n            });\n          }\n        }else{\n          promptAction.showToast({\n            message: '歌单名称不能为空！',\n            duration: 500\n          });\n        }\n      })\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('app.color.bar_background'))\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "https://box.nju.edu.cn/seafhttp/files/afac5a5d-7901-4d8c-8838-b5aa6a76d515/Index.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      SideBarContainer(this.sidebarType) {\n        Column() {\n          Column() {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"歌曲\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 0\n              this.title = '歌曲'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"专辑\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 1\n              this.title = '专辑'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"艺术家\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 2\n              this.title = '艺术家'\n            })\n          }\n          .width('90%')\n          .height('auto')\n          .borderRadius(20)\n          .clip(true)\n          .backgroundColor($r('app.color.bar_background'))\n\n          Column() {\n            Playlists()\n          }\n          .width('90%')\n          .height('100%')\n          .layoutWeight(1)\n          .margin({ top: 20, bottom: 20 })\n          .borderRadius(20)\n          .clip(true)\n          .backgroundColor($r('app.color.bar_background'))\n\n          Column() {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"统计\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 3\n              this.title = '统计'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"设置\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 4\n              this.title = '设置'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"关于\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 5\n              this.title = '关于'\n            })\n          }\n          .width('90%')\n          .height('auto')\n          .borderRadius(20)\n          .clip(true)\n          .backgroundColor($r('app.color.bar_background'))\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor($r('app.color.content_background'))\n        .padding({\n          top: this.sidebarType === SideBarContainerType.Embed ? this.statusBarHeight + 12 : this.statusBarHeight + 57,\n          bottom: 27\n        })\n        .shadow({\n          radius: this.shadowRadius,\n          color: $r('app.color.sidebarShadow'),\n          offsetX: 0,\n          offsetY: 0\n        })\n\n        Stack() {\n          Navigation(this.pageStack) {\n            Stack() {\n              Column() {\n                Column() {\n                  Songs()\n                }\n                .height('100%')\n                .width('100%')\n                .visibility(this.nowPage === 0 && this.showProgress === false ? Visibility.Visible : Visibility.None)\n\n                Column() {\n                  Albums()\n                }\n                .height('100%')\n                .width('100%')\n                .visibility(this.nowPage === 1 && this.showProgress === false ? Visibility.Visible : Visibility.None)\n\n                Column() {\n                  Artists()\n                }\n                .height('100%')\n                .width('100%')\n                .visibility(this.nowPage === 2 && this.showProgress === false ? Visibility.Visible : Visibility.None)\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.serverStatus === true ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                Stats()\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.nowPage === 3 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                Setting()\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.nowPage === 4 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                About()\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.nowPage === 5 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                LoadingProgress()\n                  .width(\"100%\")\n                  .height(80)\n                  .color($r('app.color.font'))\n                Text(\"加载时请勿退至后台\")\n                  .fontSize(21)\n                  .fontColor($r('app.color.font'))\n                  .margin({ bottom: 160 })\n              }\n              .height('100%')\n              .width('100%')\n              .justifyContent(FlexAlign.Center)\n              .visibility(this.showProgress === true && this.nowPage <= 2 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                Text(\"连接服务器失败\")\n                  .fontSize(24)\n                  .fontColor($r('app.color.font'))\n                Button() {\n                  Text(\"重试\")\n                    .fontSize(20)\n                    .fontColor($r('app.color.font'))\n                }\n                .width(100)\n                .height(50)\n                .margin({ top: 20 })\n                .backgroundColor($r('app.color.bar_background'))\n                .onClick(async () => {\n                  if (this.baseURL === '') {\n                    promptAction.showToast({\n                      message: '请先设置服务器！',\n                      duration: 500\n                    });\n                  } else {\n                    this.serverStatus = true\n                    this.showProgress = true\n                    let status: string | null = await ping()\n                    console.log(\"Server status\", status)\n                    if (status === 'ok') {\n                      this.artists = []\n                      this.albums = []\n                      this.songs = []\n                      this.playlists = []\n                      this.artists = await getIndexes()\n                      this.artists = this.clearArtists(this.artists)\n                      for (const artist of this.artists) {\n                        artist.album = await getArtist(artist.id);\n                        this.albums = this.albums.concat(artist.album!);\n                        this.albums = this.clearAlbums(this.albums)\n                        for (const album of artist.album!) {\n                          album.song = await getAlbum(album.id);\n                          this.songs = this.songs.concat(album.song!);\n                          this.songs = this.claerSongs(this.songs)\n                        }\n                      }\n                      this.playlists = (await getPlaylists()).sort((a, b) => {\n                        return Date.parse(b.changed) - Date.parse(a.changed);\n                      })\n                      this.selectedPlaylists = []\n                      for (let playlist of this.playlists) {\n                        this.selectedPlaylists.push(false)\n                      }\n                      let starred = await getStarred()\n                      if (starred !== null) {\n                        this.starredSongs = starred!.song!\n                      }\n                      this.selectedIndex = 0\n                      this.songs.sort((a, b) => {\n                        return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n                      })\n                      this.albums.sort((a, b) => {\n                        return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n                      })\n                      this.artists.sort((a, b) => {\n                        return collator.compare(transliterator.transform(a.name), transliterator.transform(b.name));\n                      })\n                      console.log(\"获取到艺术家\", this.artists.length)\n                      console.log(\"获取到专辑\", this.albums.length)\n                      console.log(\"获取到歌曲\", this.songs.length)\n                      console.log(\"获取到歌单\", this.playlists.length)\n                    } else {\n                      this.serverStatus = false\n                      promptAction.showToast({\n                        message: '连接服务器失败，请检查网络或设置！',\n                        duration: 500\n                      });\n                    }\n                    this.showProgress = false\n                  }\n                })\n              }\n              .height('100%')\n              .width('100%')\n              .justifyContent(FlexAlign.Center)\n              .visibility(this.serverStatus === false && this.nowPage <= 2 ? Visibility.Visible : Visibility.None)\n            }\n          }\n          .mode(NavigationMode.Stack)\n          .title(this.titlebar())\n          .titleMode(NavigationTitleMode.Mini)\n          .hideBackButton(true)\n          .padding({ top: this.statusBarHeight })\n          .menus(this.menuBuilder())\n          .bindSheet($$this.showMenu, this.bindMenuBuilder, {\n            showClose: false,\n            height: SheetSize.FIT_CONTENT,\n            backgroundColor: $r('app.color.content_background'),\n          })\n          .onClick(() => {\n            animateTo({\n              duration: 300,\n              curve: Curve.EaseOut,\n            }, () => {\n              this.showSidebar = false\n            })\n          })\n\n          Row() {\n            Row() {\n              Image(this.baseURL + this.getCoverUrl + this.auth +\n                `&id=${this.nowPlayingSong?.id}&size=${this.coverSize}`)\n                .alt($rawfile('nocover.png'))\n                .objectFit(ImageFit.Fill)\n                .width(60)\n                .aspectRatio(1)\n                .borderRadius(5)\n              Column() {\n                Marquee({\n                  start: true,\n                  step: 3,\n                  src: this.nowPlayingSong?.title\n                })\n                  .fontSize(18)\n                  .fontColor($r('app.color.font'))\n                Marquee({\n                  start: true,\n                  step: 3,\n                  src: this.nowPlayingSong?.artist + \" - \" + this.nowPlayingSong?.album\n                })\n                  .fontSize(15)\n                  .fontColor($r('app.color.font_secondary'))\n                  .margin({ top: 5 })\n              }\n              .margin({ left: 10, right: 10 })\n              .alignItems(HorizontalAlign.Start)\n              .width('100%')\n              .layoutWeight(1)\n            }\n            .width('100%')\n            .layoutWeight(1)\n            .justifyContent(FlexAlign.Start)\n\n            Row() {\n              Button({ type: ButtonType.Circle }) {\n                Image($r('app.media.prev'))\n                  .width(30)\n                  .height(30)\n              }\n              .width(35)\n              .height(35)\n              .backgroundColor('#00000000')\n              .onClick(async () => {\n                animateTo({\n                  duration: 300,\n                  curve: Curve.EaseOut,\n                }, () => {\n                  this.showSidebar = false\n                })\n                await this.avPlayer!.reset();\n                if (this.nowPlayingIndex === 0) {\n                  this.nowPlayingIndex = this.nowPlayingList.length - 1\n                } else {\n                  this.nowPlayingIndex -= 1\n                }\n                this.nowPlayingSong = this.nowPlayingList[this.nowPlayingIndex]\n                this.nowPlayingLyrics = await getLyrics(this.nowPlayingSong.id)\n                if (this.nowPlayingLyrics !== null) {\n                  this.groupLyrics()\n                }\n                this.avPlayer!.url =\n                  this.baseURL + '/rest/stream' + this.auth + `&id=${this.nowPlayingSong.id}&format=raw`;\n              })\n\n              Stack() {\n                Progress({\n                  value: this.nowPlayedTime / this.nowPlayingSong?.duration! * 100,\n                  total: 100,\n                  type: ProgressType.Ring\n                })\n                  .width(45)\n                  .height(45)\n                  .color($r('app.color.progress'))\n                  .backgroundColor($r('app.color.progress_background'))\n                  .style({\n                    strokeWidth: 3\n                  })\n\n                Button({ type: ButtonType.Circle }) {\n                  Image(this.isPlaying === true ? $r('app.media.play') : $r('app.media.pause'))\n                    .width(25)\n                    .height(25)\n                }\n                .width(45)\n                .height(45)\n                .backgroundColor('#00000000')\n                .onClick(() => {\n                  this.isPlaying = !this.isPlaying\n                  if (this.isPlaying === false) {\n                    if (this.fadeVolume === true) {\n                      this.fadeOut()\n                    } else {\n                      this.avPlayer!.pause()\n                    }\n                  } else {\n                    if (this.fadeVolume === true) {\n                      this.fadeIn()\n                    } else {\n                      this.avPlayer!.play()\n                    }\n                  }\n                  animateTo({\n                    duration: 300,\n                    curve: Curve.EaseOut,\n                  }, () => {\n                    this.showSidebar = false\n                  })\n                })\n              }\n\n              Button({ type: ButtonType.Circle }) {\n                Image($r('app.media.next'))\n                  .width(30)\n                  .height(30)\n              }\n              .width(35)\n              .height(35)\n              .backgroundColor('#00000000')\n              .onClick(async () => {\n                animateTo({\n                  duration: 300,\n                  curve: Curve.EaseOut,\n                }, () => {\n                  this.showSidebar = false\n                })\n                await this.avPlayer!.reset();\n                if (this.nowPlayingIndex === this.nowPlayingList.length - 1) {\n                  this.nowPlayingIndex = 0\n                } else {\n                  this.nowPlayingIndex += 1\n                }\n                this.nowPlayingSong = this.nowPlayingList[this.nowPlayingIndex]\n                this.nowPlayingLyrics = await getLyrics(this.nowPlayingSong.id)\n                if (this.nowPlayingLyrics !== null) {\n                  this.groupLyrics()\n                }\n                this.avPlayer!.url =\n                  this.baseURL + '/rest/stream' + this.auth + `&id=${this.nowPlayingSong.id}&format=raw`;\n              })\n            }\n            .width(125)\n            .justifyContent(FlexAlign.SpaceBetween)\n          }\n          .width('100%')\n          .height(85)\n          .backgroundBlurStyle(BlurStyle.COMPONENT_THICK)\n          .padding({ left: 15, right: 15, bottom: 5 })\n          .position({\n            bottom: 0\n          })\n          .bindContentCover($$this.showPlay, this.bindContentCoverBuilder(), {\n            modalTransition: ModalTransition.NONE,\n          })\n          .onClick(() => {\n            if (this.showPlay === true) {\n              this.showPlay = false\n            }\n            this.showPlay = true\n          })\n          .visibility(this.startPlaying === true ? Visibility.Visible : Visibility.Hidden)\n          .transition(TransitionEffect.translate({ y: 100 }).animation({ curve: curves.springMotion(0.6, 1) }))\n        }\n        .width(\"100%\")\n        .height('100%')\n        .onTouch(() => {\n          animateTo({\n            duration: 300,\n            curve: Curve.EaseOut,\n          }, () => {\n            this.showSidebar = false\n          })\n        })\n      }\n      .width(\"100%\")\n      .height('100%')\n      .backgroundColor($r('app.color.content_background'))\n      .sideBarWidth(this.sideBarWidth)\n      .showSideBar(this.sidebarType === SideBarContainerType.Embed ? true : this.showSidebar)\n      .showControlButton(false)\n      .autoHide(this.sidebarType === SideBarContainerType.Embed ? false : true)\n      .sideBarPosition(SideBarPosition.Start)\n      .onChange((show: boolean) => {\n        if (show === true && this.sidebarType === SideBarContainerType.Overlay) {\n          this.shadowRadius = 100\n          this.showSidebar = true\n        } else {\n          setTimeout(() => {\n            this.shadowRadius = 0\n            this.showSidebar = false\n          }, 300)\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Image($r('app.media.sidebar'))\n          .width(24)\n          .aspectRatio(1)\n      }\n      .position({\n        x: 10,\n        y: this.statusBarHeight + 4\n      })\n      .width(this.controlButtonWidth)\n      .height(48)\n      .borderRadius(8)\n      .backgroundColor('#00000000')\n      .onClick(async () => {\n        animateTo({\n          duration: 300,\n          curve: Curve.EaseOut,\n        }, () => {\n          this.showSidebar = !this.showSidebar\n        })\n      })\n      .visibility(this.sidebarType === SideBarContainerType.Overlay && this.showControlButton === true ?\n      Visibility.Visible : Visibility.Hidden)\n    }\n    .width(\"100%\")\n    .height('100%')\n  }"
        },
        {
            "function_name": "menuBuilder",
            "content": "@Builder\n  menuBuilder() {\n    Row() {\n      Button({ type: ButtonType.Normal }) {\n        Image($r('app.media.refresh'))\n          .width(24)\n          .aspectRatio(1)\n      }\n      .width(48)\n      .aspectRatio(1)\n      .borderRadius(8)\n      .backgroundColor('#00000000')\n      .onClick(async () => {\n        animateTo({\n          duration: 300,\n          curve: Curve.EaseOut,\n        }, () => {\n          this.showSidebar = false\n        })\n        this.serverStatus = true\n        this.showProgress = true\n        let status: string | null = await ping()\n        console.log(\"Server status\", status)\n        if (status === 'ok') {\n          this.artists = []\n          this.albums = []\n          this.songs = []\n          this.playlists = []\n          this.artists = await getIndexes()\n          this.artists = this.clearArtists(this.artists)\n          for (const artist of this.artists) {\n            artist.biography = await getArtistInfo(artist.id)\n            artist.album = await getArtist(artist.id);\n            this.albums = this.albums.concat(artist.album!);\n            this.albums = this.clearAlbums(this.albums)\n            for (const album of artist.album!) {\n              album.song = await getAlbum(album.id);\n              this.songs = this.songs.concat(album.song!);\n              this.songs = this.claerSongs(this.songs)\n            }\n          }\n          this.playlists = (await getPlaylists()).sort((a, b) => {\n            return Date.parse(b.changed) - Date.parse(a.changed);\n          })\n          this.selectedPlaylists = []\n          for (let playlist of this.playlists) {\n            this.selectedPlaylists.push(false)\n          }\n          let starred = await getStarred()\n          if (starred !== null) {\n            this.starredSongs = starred!.song!\n          }\n          this.selectedIndex = 0\n          this.songs.sort((a, b) => {\n            return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n          })\n          this.albums.sort((a, b) => {\n            return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n          })\n          this.artists.sort((a, b) => {\n            return collator.compare(transliterator.transform(a.name), transliterator.transform(b.name));\n          })\n          console.log(\"获取到艺术家\", this.artists.length)\n          console.log(\"获取到专辑\", this.albums.length)\n          console.log(\"获取到歌曲\", this.songs.length)\n          console.log(\"获取到歌单\", this.playlists.length)\n        } else {\n          this.serverStatus = false\n          promptAction.showToast({\n            message: '连接服务器失败，请检查网络！',\n            duration: 500\n          });\n        }\n        this.showProgress = false\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Image(this.themeIcon)\n          .width(24)\n          .aspectRatio(1)\n      }\n      .width(48)\n      .aspectRatio(1)\n      .borderRadius(8)\n      .backgroundColor('#00000000')\n      .onClick(() => {\n        animateTo({\n          duration: 300,\n          curve: Curve.EaseOut,\n        }, () => {\n          this.showSidebar = false\n        })\n        if (this.theme === ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET) {\n          this.theme = ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT\n          this.themeIcon = $r('app.media.light')\n        } else if (this.theme === 1) {\n          this.theme = ConfigurationConstant.ColorMode.COLOR_MODE_DARK\n          this.themeIcon = $r('app.media.dark')\n        } else {\n          this.theme = ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET\n          this.themeIcon = $r('app.media.auto')\n        }\n        context.getApplicationContext().setColorMode(this.theme)\n      })\n    }\n    .height('100%')\n    .padding({ right: 10 })\n    .alignItems(VerticalAlign.Center)\n  }"
        },
        {
            "function_name": "bindMenuBuilder",
            "content": "@Builder\n  bindMenuBuilder() {\n    Column() {\n      Button({ type: ButtonType.Normal }) {\n        Text(\"歌曲信息\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        this.info.open()\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"下一首播放\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        if (this.nowPlayingList.length !== 0) {\n          this.nowPlayingListOriginal.splice(this.nowPlayingIndex + 1, 0, this.longPressSong!)\n          this.nowPlayingList.splice(this.nowPlayingIndex + 1, 0, this.longPressSong!)\n          promptAction.showToast({\n            message: '添加成功！',\n            duration: 500\n          });\n        } else {\n          promptAction.showToast({\n            message: '播放队列不存在！',\n            duration: 500\n          });\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"加入播放队列\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        if (this.nowPlayingList.length !== 0) {\n          this.nowPlayingListOriginal.push(this.longPressSong!)\n          this.nowPlayingList.push(this.longPressSong!)\n          promptAction.showToast({\n            message: '添加成功！',\n            duration: 500\n          });\n        } else {\n          promptAction.showToast({\n            message: '播放队列不存在！',\n            duration: 500\n          });\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"添加到歌单\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .visibility(this.addOrDelete === true ? Visibility.Visible : Visibility.None)\n      .onClick(async () => {\n        this.showMenu = false\n        this.selectPlaylist.open()\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"从歌单中删除\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .visibility(this.addOrDelete === false ? Visibility.Visible : Visibility.None)\n      .onClick(async () => {\n        this.showMenu = false\n        let success = await updatePlaylist(this.playlist!.id, undefined, undefined, undefined, this.longPressIndex)\n        if (success === true) {\n          promptAction.showToast({\n            message: '删除成功！',\n            duration: 500\n          });\n          this.playlist = await getPlaylist(this.playlist!.id)\n          this.playlists = (await getPlaylists()).sort((a, b) => {\n            return Date.parse(b.changed) - Date.parse(a.changed);\n          })\n        } else {\n          promptAction.showToast({\n            message: '删除失败，请检查网络！',\n            duration: 500\n          });\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(this.longPressStar === true ? \"取消收藏\" : \"添加到收藏\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        if (this.longPressStar === true) {\n          let starStatus = await unstar(this.longPressSong!.id)\n          if (starStatus === true) {\n            promptAction.showToast({\n              message: '取消收藏成功！',\n              duration: 500\n            });\n            if (this.startPlaying === true && this.longPressSong!.id === this.nowPlayingSong!.id) {\n              this.nowPlayingStar = false\n              if (this.isPlaying === true) {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PLAY)\n              } else {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PAUSE)\n              }\n            }\n          }\n        } else {\n          let starStatus = await star(this.longPressSong!.id)\n          if (starStatus === true) {\n            promptAction.showToast({\n              message: '收藏成功！',\n              duration: 500\n            });\n            if (this.startPlaying === true && this.longPressSong!.id === this.nowPlayingSong!.id) {\n              this.nowPlayingStar = true\n              if (this.isPlaying === true) {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PLAY)\n              } else {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PAUSE)\n              }\n            }\n          }\n        }\n      })\n    }\n    .width('90%')\n    .height('auto')\n    .borderRadius(10)\n    .margin({ top: 20, bottom: 25 })\n    .clip(true)\n    .backgroundColor($r('app.color.bar_background'))\n  }"
        },
        {
            "function_name": "bindContentCoverBuilder",
            "content": "@Builder\n  bindContentCoverBuilder() {\n    Column() {\n      Play()\n    }\n    .transition(TransitionEffect.translate({ y: 1000 }).animation({ curve: curves.springMotion(0.6, 1) }))\n  }"
        },
        {
            "function_name": "titlebar",
            "content": "@Builder\n  titlebar() {\n    Row() {\n      Text(this.title)\n        .fontSize(23)\n        .fontColor($r('app.color.font'))\n        .fontWeight(FontWeight.Medium)\n    }\n    .width(\"100%\")\n    .height('100%')\n    .alignItems(VerticalAlign.Center)\n    .justifyContent(FlexAlign.SpaceBetween)\n    .padding({ left: 72, top: 1 })\n  }"
        }
    ]
}