{
    "https://box.nju.edu.cn/seafhttp/files/f14857ae-9376-41e9-b652-ffd89fbd41fb/Index.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text(this.title)\n          .fontSize(20)\n          .layoutWeight(1)\n          .margin({ left: 16 })\n          .align(Alignment.Start)\n        Blank()\n      }\n      .height(56)\n      .width('100%')\n    }\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Start }) {\n      TitleBar({ title: '蓝牙Socket测试' })\n        .flexGrow(0)\n        .onClick(() => {\n          this.logCnt++;\n          if (this.logCnt % 2 === 0) {\n            this.debug = false;\n          } else {\n            this.debug = true;\n          }\n          if (this.debug) {\n            this.logButColor = Color.Pink;\n          } else {\n            this.logButColor = Color.White;\n          }\n          this.print(`this.debug is ${this.debug}`);\n          this.print(`this.logButColor is ${this.logButColor}`);\n        })\n        .backgroundColor(this.logButColor)\n\n      // tab页签\n      Column() {\n        Tabs({ barPosition: BarPosition.Start }) {\n          // 子页签：WaterFlow控制\n          TabContent() {\n            Column() {\n              Row() {\n                Text('服务端')\n                Select(this.devicesSelectOptions)\n                  .value('已配对的设备')\n                  .backgroundColor(Color.White)\n                  .borderRadius(19)\n                  .constraintSize({ minWidth: 100 })\n                  .selected(this.deviceIndex)\n                  .onSelect((index) => {\n                    this.nameIndex = index;\n                    this.serverMac = this.pairDevices[this.nameIndex].id;\n                  })\n                  .width('70%')\n                  .margin(10)\n                  .borderRadius(2)\n              }\n              Row() {\n                Text('次数')\n                Select([{ value: '1'}, { value: '10' }, { value: '100' }, { value: '1000' }])\n                  .value(this.sendCnt)\n                  .backgroundColor(Color.White)\n                  .borderRadius(19)\n                  .constraintSize({ minWidth: 100 })\n                  .selected(this.cntIndex)\n                  .onSelect((index, value) => {\n                    this.cntIndex = index;\n                    this.sendCnt = value;\n                  })\n                  .width(50)\n                  .margin(10)\n                  .borderRadius(2)\n\n                Text('长度')\n                Select([{ value: '10' }, { value: '1024' }, { value: '4096' }])\n                  .value(this.packageSize)\n                  .backgroundColor(Color.White)\n                  .borderRadius(19)\n                  .constraintSize({ minWidth: 100 })\n                  .selected(this.packageIndex)\n                  .onSelect((index, value) => {\n                    this.packageIndex = index;\n                    this.packageSize = value;\n                  })\n                  .margin(10)\n                  .borderRadius(2)\n              }\n\n              //客户端按钮\n              Button(this.workParam.cliButtText)\n                .height(50)\n                .width('80%')\n                .onClick(() => {\n                  this.workParam.cliButtText = '数据发送中...';\n                  this.workParam.cliColor = Color.Grey;\n                  this.acceptNum = 0;\n                  this.numberArray.length = 0;//服务端切至客户端清除收包信息列表\n                  this.workParam.numArr.length = 0;\n                  this.workParam.cliCnt = 0;\n                  this.workParam.cliLen = 0;\n                  this.workParam.cliBol = false;\n                  // 主线程中创建Worker对象\n                  const workerInstance = new worker.ThreadWorker('entry/ets/workers/Worker.ets');\n                  let workerParam: WorkerParam = {\n                    cnt: Number(this.sendCnt),\n                    packageSize: Number(this.packageSize),\n                    deviceId: this.serverMac,\n                    debug: this.debug\n                  }\n                  let paramStr = JSON.stringify(workerParam);\n                  // 主线程向worker线程传递信息\n                  workerInstance.postMessage(paramStr);\n                  // 主线程接收worker线程信息\n                  workerInstance.onmessage = (e: MessageEvents): void => {\n                    this.print('main thread onmessage');\n                    // data：worker线程发送的信息\n                    let data: WorkParam = JSON.parse(e.data)\n                    this.workParam = data;\n                  }\n                  workerInstance.onerror = (err: ErrorEvent) => {\n                    this.print('main error message ' + err.message);\n                  }\n                })\n                .backgroundColor(this.workParam.cliColor)\n                .enabled(this.workParam.cliBol)\n                .stateEffect(true)\n            }\n            .height('100%')\n          }.tabBar(new SubTabBarStyle($r('app.string.Socket_client')))\n\n          // 子页签：WaterFlow属性\n          TabContent() {\n            Column() {\n              //服务端按钮\n              Button(`${this.serverButtonText}`)\n                .height(50)\n                .width('80%')\n                .onClick(() => {\n                  this.serverButtonText = '数据接收中...';\n                  this.serverColor = Color.Grey;\n                  this.serBol = false;//禁用按钮\n                  this.workParam.cliCnt = 0;\n                  this.workParam.numArr.length = 0;//客户端切至服务端清除发包信息列表\n                  this.workParam.packArr.length = 0;\n                  this.workParam.messArr.length = 0;\n                  this.messageArr.length = 0;\n                  this.numberArray.length = 0;\n                  this.deltaDateArr.length = 0;\n                  this.packageNumArr.length = 0;\n                  this.velocityArr.length = 0;\n                  this.messageArr.length = 0;\n                  this.recvSize = 0;\n                  this.recvDuration = 0;\n                  this.recvPackageNum = 0;\n                  this.acceptNum = 0;\n                  let times = new Date().getTime();\n                  console.info(`times : ===== ${times} =====`);\n                  //创建服务端监听Socket\n                  socket.sppListen('server', this.sppOption, (code: BusinessError, serverId: number) => {\n                    if (code) {\n                      this.print('服务端监听失败，code：' + JSON.stringify(code));\n                      this.serverButtonText = '服务端监听失败，请再试一次';\n                      this.serBol = true;\n                      this.serverColor = Color.Red;\n                      return;\n                    } else {\n                      this.serverNumber = serverId;\n                      this.print(`服务端监听成功, serverNumber = ${this.serverNumber}`);\n                      this.print('服务端等待连接');\n                      try {\n                        //与客户端连接\n                        socket.sppAccept(this.serverNumber, (code: BusinessError, cliendId: number) => {\n                          if (code) {\n                            this.print('服务端等待连接失败，code: ' + JSON.stringify(code));\n                            if ((code.code === -1) && (code.message === 'Inner error.')) {\n                              this.serverButtonText = '蓝牙未打开，请再试一次';\n                              this.serBol = true;\n                              this.serverColor = Color.Red;\n                            }\n                            return;\n                          } else {\n                            this.clientNumber = cliendId;\n                            this.print(`服务端等待连接成功, clientNumber = ${this.clientNumber}`);\n                            try {\n                              let dataRead = this.onRead;\n                              //服务端接收数据\n                              socket.on('sppRead', cliendId, dataRead);\n                              this.print('订阅spp读请求事件成功！');\n                            } catch (err) {\n                              this.print('订阅spp读请求事件失败，err: ' + JSON.stringify(err));\n                              this.serverButtonText = '订阅spp读请求事件失败，请再试一次';\n                              this.serBol = true;\n                              this.serverColor = Color.Red;\n                            }\n                          }\n                        })\n                      } catch (err) {\n                        this.print('创建监听Socket服务端crash， err: ' + JSON.stringify(err));\n                      }\n                    }\n                  })\n                })\n                .backgroundColor(this.serverColor)\n                .enabled(this.serBol)\n                .stateEffect(true)\n            }\n            .height('100%')\n          }.tabBar(new SubTabBarStyle($r('app.string.Socket_server')))\n        }\n        .vertical(false)\n        .scrollable(true)\n        .barMode(BarMode.Fixed)\n        .backgroundColor(Color.Pink)\n        .onChange((index: number) => {\n          console.info(index.toString())\n        })\n        .width('100%')\n        .backgroundColor(0xF1F3F5)\n      }\n      .height('30%')\n      .width('100%')\n\n      // List\n      Column() {\n        //客户端发送信息列表\n        List({ scroller: this.controller, initialIndex: this.initIndex, space: this.space }) {\n          ForEach(this.workParam.numArr, (item: number, index: number) => {\n            ListItem() {\n              Column() {\n                Text(`第${ this.workParam.numArr[item-1] }次，发包${ this.workParam.packArr[item-1] }个，长${\n                this.workParam.messArr[item-1] }字节`)\n                  .margin(5)\n                  .width('90%')\n                  .align(Alignment.Center)\n                  .textAlign(TextAlign.Center)\n              }\n              .width('100%')\n              .backgroundColor('#0d000000')\n              .height(40)\n            }\n          })\n        }\n\n        //服务端接收信息列表\n        List({ scroller: this.controller, initialIndex: this.initIndex, space: this.space }) {\n          ForEach(this.numberArray, (item: number, index: number) => {\n            ListItem() {\n              Column() {\n                Text(`第${this.numberArray[item-1]}次，收包${ this.packageNumArr[item-1] }个，长${this.messageArr[item-1]}字节`)\n                  .margin(5)\n                  .width('90%')\n                  .align(Alignment.TopStart)\n                  .textAlign(TextAlign.Start)\n                Text(`用时${this.deltaDateArr[item-1]}毫秒，速度${ Math.round(this.velocityArr[item-1]) } KB/s`)\n                  .margin(5)\n                  .width('90%')\n                  .align(Alignment.BottomEnd)\n                  .textAlign(TextAlign.End)\n              }\n              .width('100%')\n              .backgroundColor('#0d000000')\n              .height(60)\n            }\n          })\n        }\n        .alignListItem(this.alignListItem)\n        .height('100%')\n        .width('100%')\n        .listDirection(this.listDirection)\n        .scrollBar(this.barState)\n        .scrollBarColor(this.scrollBarColor)\n        .scrollBarWidth(this.scrollBarWidth)\n        .edgeEffect(this.edgeEffect)\n        .multiSelectable(this.multiSelectable)\n        .chainAnimation(this.isChainAnimation)\n        .lanes(this.lanes)\n        .divider(\n          {\n            strokeWidth: this.strokeWidth,\n            color: this.color\n          }\n        )\n      }\n      .padding({ left: 12, right: 12 })\n      .backgroundStyle()\n      .height('40%')\n      .width('100%')\n      .flexGrow(0)\n\n      Column() {\n        if (this.acceptNum !== 0) {\n          Text() {\n            Span(`共测试次数: ${this.acceptNum}`)\n          }\n\n          Text(`共收到字节: ${this.recvSize}字节`)\n            .textAlign(TextAlign.Start)\n            .fontColor(Color.Gray)\n\n          Text(`共收到包数: ${this.recvPackageNum}`)\n            .textAlign(TextAlign.Start)\n            .fontColor(Color.Gray)\n\n          Text(`总计时: ${(this.recvDuration * 0.001).toFixed(6)}s`)\n            .textAlign(TextAlign.Start)\n            .fontColor(Color.Gray)\n\n          Text(`平均速度：${Math.round(this.recvSize * 1000 / (this.recvDuration * 1024))}KB/s`)\n            .textAlign(TextAlign.Start)\n            .fontColor(Color.Gray)\n        }\n        if (this.workParam.cliCnt !== 0) {\n          Text() {\n            Span(`共测试次数: ${this.workParam.cliCnt}`)\n          }\n\n          Text(`共发送字节: ${this.workParam.cliLen}字节`)\n            .textAlign(TextAlign.Start)\n            .fontColor(Color.Gray)\n        }\n      }\n      .height('16%')\n      .width('100%')\n      .padding({left:12})\n      .alignItems(HorizontalAlign.Start)\n      .justifyContent(FlexAlign.Center)\n      .flexGrow(0)\n    }\n    .padding({ left: 12, right: 12 })\n    .height('100%')\n    .width('100%')\n    .backgroundColor('$color:index_background')\n  }"
        }
    ]
}