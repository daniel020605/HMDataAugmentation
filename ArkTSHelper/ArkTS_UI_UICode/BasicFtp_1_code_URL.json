{
    "https://box.nju.edu.cn/seafhttp/files/3d30beb1-1fe9-4bd7-ae14-414458cc8508/SamplePage.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text($r('app.string.enter_folder_name')).fontSize(20).margin({ top: 10, bottom: 10 }).width('90%')\n      TextInput({ placeholder: '', text: this.textValue }).height(60).width('90%')\n        .onChange((value: string) => {\n          this.textValue = value;\n        })\n      Text($r('app.string.Tips'))\n        .margin({ top: 10, bottom: 10 })\n        .width('90%')\n        .fontSize(8)\n        .fontColor(Color.Red)\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button($r('app.string.cancel'))\n          .onClick(() => {\n            this.controller.close()\n            this.cancel()\n          })\n        Button($r('app.string.ok'))\n          .onClick(() => {\n            this.inputValue = this.textValue\n            this.controller.close()\n            this.confirm()\n          })\n\n      }\n\n    }\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    if (!this.isLogin) {\n      Row() {\n        Column() {\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Text($r('app.string.Server_address'))\n              .fontSize(20)\n              .height(50)\n              .width(200)\n              .margin({ left: 10 })\n              .textAlign(TextAlign.Center)\n              .fontWeight(FontWeight.Bold)\n\n            TextInput({ placeholder: 'Please enter the server address', text: this.host })\n              .width('100%')\n              .height(50)\n              .margin({ left: 15 })\n              .borderWidth(2)\n              .borderColor(Color.Gray)\n              .type(InputType.Normal)\n              .onChange((data) => {\n                this.host = data\n              })\n          }\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Text($r('app.string.Port'))\n              .fontSize(20)\n              .height(50)\n              .width(200)\n              .margin({ left: 10 })\n              .textAlign(TextAlign.Center)\n              .fontWeight(FontWeight.Bold)\n\n            TextInput({ placeholder: 'Please enter the port', text: '21' })\n              .width('100%')\n              .height(50)\n              .margin({ left: 15 })\n              .borderWidth(2)\n              .borderColor(Color.Gray)\n              .type(InputType.Normal)\n              .onChange((data) => {\n                this.port = Number.parseInt(data)\n              })\n          }\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Text($r('app.string.Username'))\n              .fontSize(20)\n              .height(50)\n              .width(80)\n              .margin({ left: 10 })\n              .textAlign(TextAlign.Center)\n              .fontWeight(FontWeight.Bold)\n\n            TextInput({ placeholder: 'Please enter the username', text: this.user })\n              .width('100%')\n              .height(50)\n              .margin({ left: 15 })\n              .borderWidth(2)\n              .borderColor(Color.Gray)\n              .type(InputType.Normal)\n              .onChange((data) => {\n                this.user = data\n              })\n          }\n          .margin({ top: 20 })\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Text($r('app.string.Password'))\n              .fontSize(20)\n              .height(50)\n              .width(80)\n              .margin({ left: 10 })\n              .textAlign(TextAlign.Center)\n              .fontWeight(FontWeight.Bold)\n\n            TextInput({ placeholder: 'Please enter the password', text: this.password })\n              .width('100%')\n              .height(50)\n              .borderWidth(2)\n              .margin({ left: 15 })\n              .borderColor(Color.Gray)\n              .type(InputType.Normal)\n              .onChange((data) => {\n                this.password = data\n              })\n          }\n          .margin({ top: 20 })\n\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Text($r('app.string.TLS'))\n              .fontSize(20)\n              .height(50)\n              .margin({ left: 15 })\n              .textAlign(TextAlign.Center)\n              .fontWeight(FontWeight.Bold)\n\n\n            Checkbox({ name: '是否开启SSL/TLS', group: 'ssl' })\n              .height(40)\n              .select(false)\n              .margin({ left: 10 })\n              .selectedColor(Color.Blue)\n              .onChange((value) => {\n                this.secure = value\n              })\n          }\n          .margin({ top: 20 })\n\n          Button($r('app.string.Login'))\n            .margin(20)\n            .width('80%')\n            .height(50)\n            .backgroundColor(Color.Blue)\n            .fontColor(Color.White)\n            .onClick(() => {\n              this.loginServer()\n            })\n        }\n        .justifyContent(FlexAlign.Center)\n        .height('100%')\n        .width('100%')\n      }\n      .width('100%')\n      .height('100%')\n    } else {\n      Row() {\n        Column() {\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Start }) {\n            MenuItem({\n              startIcon: $r('app.media.icon'),\n              content: '更多操作',\n              endIcon: $r('app.media.more'),\n              builder: this.SubMenu\n            })\n              .bindMenu(this.SubMenu)\n\n            Text(`${getResourceString($r('app.string.current_folder'))}：${this.remoteRoot}`)\n              .layoutWeight(1)\n              .fontSize(12)\n              .textAlign(TextAlign.Start)\n              .height(50)\n          }\n          .padding(20)\n\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Start }) {\n            List({ space: 10, initialIndex: 0 }) {\n              ForEach(this.currentFileList, (item: FileInfo, index: number) => {\n                ListItem() {\n                  if (item.type == FileType.Directory) {\n                    Flex({\n                      justifyContent: FlexAlign.Start,\n                      direction: FlexDirection.Row,\n                      alignItems: ItemAlign.Center\n                    }) {\n                      Toggle({ type: ToggleType.Checkbox, isOn: true })\n                        .size({ width: 30, height: 30 })\n                        .selectedColor('#007DFF')\n                        .visibility(this.selectDirPath && this.selectDirPath.length > 0 && this.selectDirPath == item.name ? Visibility.Visible : Visibility.None)\n\n                      Image($r('app.media.fileDir'))\n                        .height(40)\n                        .width(40)\n                        .margin({ left: 10 })\n\n\n                      Text(item.name)\n                        .fontSize(20)\n                        .height(50)\n                        .margin({ left: 10 })\n                        .fontWeight(FontWeight.Bold)\n                    }\n                    .margin({ top: 10 })\n                  } else if (item.type == FileType.File) {\n                    Flex({\n                      justifyContent: FlexAlign.Start,\n                      direction: FlexDirection.Row,\n                      alignItems: ItemAlign.Center\n                    }) {\n                      Toggle({ type: ToggleType.Checkbox, isOn: true })\n                        .size({ width: 30, height: 30 })\n                        .selectedColor('#007DFF')\n                        .visibility(this.selectFilePath && this.selectFilePath === item.name ? Visibility.Visible : Visibility.None)\n\n                      Image($r('app.media.file'))\n                        .height(40)\n                        .width(40)\n                        .margin({ left: 10 })\n\n\n                      Text(item.name)\n                        .fontSize(20)\n                        .height(50)\n                        .margin({ left: 10 })\n                        .fontWeight(FontWeight.Bold)\n                    }\n                    .margin({ top: 10 })\n                  } else {\n                    Flex({\n                      justifyContent: FlexAlign.Start,\n                      direction: FlexDirection.Row,\n                      alignItems: ItemAlign.Center\n                    }) {\n                      Toggle({ type: ToggleType.Checkbox, isOn: true })\n                        .size({ width: 30, height: 30 })\n                        .selectedColor('#007DFF')\n                        .visibility(this.selectDirPath && this.selectDirPath.length > 0 && this.selectDirPath == item.name ? Visibility.Visible : Visibility.None)\n\n\n                      Image($r('app.media.unknow'))\n                        .height(40)\n                        .width(40)\n                        .margin({ left: 10 })\n\n\n                      Text(item.name)\n                        .fontSize(20)\n                        .height(50)\n                        .margin({ left: 10 })\n                        .fontWeight(FontWeight.Bold)\n                    }\n                    .margin({ top: 10 })\n                  }\n\n                }\n                .parallelGesture(TapGesture().onAction((event) => {\n                  if (this.currentFileList && this.currentFileList.length > 0 && item) {\n                    let name = item.name\n                    this.showToast(`${name}`, `ListItem---${item}`)\n                    if (item.type != FileType.Directory) {\n                      if (this.selectFilePath == undefined) {\n                        this.selectFilePath = name\n                        this.showToast(`selectFilePath ${this.selectFilePath}`, 'selectFilePath')\n                      } else {\n                        this.selectFilePath = null;\n                        this.showToast(`select cancle `, 'selectFilePath')\n                      }\n                    } else {\n                      this.enterChildDir(item.name)\n                    }\n                  }\n\n                }), GestureMask.Normal)\n                .gesture(LongPressGesture().onAction((event) => {\n                  if (this.selectDirPath && this.selectDirPath.length > 0) {\n                    this.selectDirPath = null\n                  } else {\n                    this.selectDirPath = item.name\n                  }\n                }), GestureMask.Normal)\n\n              }, (item: FileInfo, index: number) => item.name)\n            }\n            .width('100%')\n            .listDirection(Axis.Vertical)\n            .divider({ strokeWidth: 2, color: 0x888888 })\n            .edgeEffect(EdgeEffect.None)\n            .chainAnimation(false)\n          }\n          .border({\n            width: 5,\n            color: Color.Green,\n            style: BorderStyle.Solid\n          })\n          .visibility(this.isShowLog ? Visibility.None : Visibility.Visible)\n          .layoutWeight(1)\n          .margin({ left: 20, right: 20 })\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Scroll() {\n              Text(this.message)\n                .width('100%')\n                .fontSize(20)\n                .textAlign(TextAlign.Start)\n                .padding(10)\n            }\n            .width('100%')\n          }\n          .border({\n            width: 5,\n            color: Color.Green,\n            style: BorderStyle.Solid\n          })\n          .visibility(this.isShowLog ? Visibility.Visible : Visibility.None)\n          .layoutWeight(1)\n          .margin(20)\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Button(this.isShowLog ? getResourceString($r('app.string.View_file_list')) : getResourceString($r('app.string.View_log')))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.isShowLog = !this.isShowLog;\n              })\n\n            Button($r('app.string.Log_out'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(async () => {\n                this.isLogin = false;\n                if (this.ftpUtil) {\n                  await this.ftpUtil.close();\n                }\n                if (GlobalObj?.getInstance()?.getContext()) {\n                  GlobalObj?.getInstance()?.getContext()?.terminateSelf()\n                }\n              })\n          }\n          .margin({ top: 10 })\n\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Button($r('app.string.Generate_files'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.createSingleFile()\n              })\n            Button($r('app.string.Upload_a_file'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.operationType = 'uploadSingleFile'\n                if (this.dialogController) {\n                  this.dialogController.open()\n                }\n              })\n\n          }\n          .border({\n            width: 5,\n            color: Color.Green,\n            style: BorderStyle.Solid\n          })\n          .padding({ top: 5, bottom: 5 })\n          .margin({ top: 10 })\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Button($r('app.string.Generate_files'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.createSingleFile()\n              })\n            Button($r('app.string.Add_upload'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.appendFile()\n              })\n\n          }\n          .border({\n            width: 5,\n            color: Color.Green,\n            style: BorderStyle.Solid\n          })\n          .padding({ top: 5, bottom: 5 })\n          .margin({ top: 10 })\n\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n\n            Button($r('app.string.Generate_folder'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.createFileDir()\n              })\n            Button($r('app.string.Upload_folder'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.operationType = 'uploadDir'\n                if (this.dialogController) {\n                  this.dialogController.open()\n                }\n              })\n          }\n          .border({\n            width: 5,\n            color: Color.Green,\n            style: BorderStyle.Solid\n          })\n          .padding({ top: 5, bottom: 5 })\n          .margin({ top: 10 })\n\n          Flex({ justifyContent: FlexAlign.Start, direction: FlexDirection.Row, alignItems: ItemAlign.Center }) {\n            Button($r('app.string.Download_a_file'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.downloadSingleFile()\n              })\n\n            Button($r('app.string.Download_folder'))\n              .fontSize(14)\n              .height(30)\n              .margin({ left: 10 })\n              .fontWeight(FontWeight.Bold)\n              .onClick(() => {\n                this.downloadDir()\n              })\n          }\n          .margin({ top: 10, bottom: 20 })\n        }\n        .margin(15)\n        .border({\n          width: 2,\n          color: Color.Red,\n          radius: 10,\n          style: BorderStyle.Solid\n        })\n        .width('100%')\n        .height('100%')\n      }\n      .width('100%')\n      .height('100%')\n    }\n  }"
        },
        {
            "function_name": "SubMenu",
            "content": "@Builder\n  SubMenu() {\n    Menu() {\n      MenuItem({ content: $r('app.string.Get_working_directory'), labelInfo: 'getCurrentDirectory' })\n        .onChange((selected) => {\n          if (selected) {\n            this.getCurrentDirectory()\n          }\n        })\n\n      MenuItem({ content: $r('app.string.Go_Back'), labelInfo: 'back' })\n        .onChange((selected) => {\n          if (selected) {\n            this.backToParent()\n          }\n        })\n\n      MenuItem({ content: $r('app.string.Get_File_Size'), labelInfo: 'getFileSize' })\n        .onChange((selected) => {\n          if (selected) {\n            this.getFileSize()\n          }\n        })\n\n\n      MenuItem({ content: $r('app.string.Get_last_modification_time'), labelInfo: 'getLastModifyTime' })\n        .onChange((selected) => {\n          if (selected) {\n            this.getLastModifyTime()\n          }\n        })\n\n      MenuItem({ content: $r('app.string.Ability_to_obtain_server_support'), labelInfo: 'getServerFeatures' })\n        .onChange((selected) => {\n          if (selected) {\n            this.getServerFeatures()\n          }\n        })\n\n      MenuItem({ content: $r('app.string.Delete_individual_files'), labelInfo: 'deleteSingleFile' })\n        .onChange((selected) => {\n          if (selected) {\n            this.deleteSingleFile()\n          }\n        })\n      MenuItem({ content: $r('app.string.ensureRemotePath'), labelInfo: 'ensureRemotePath' })\n        .onChange((selected) => {\n          if (selected) {\n            this.operationType = 'dir'\n            if (this.dialogController) {\n              this.dialogController.open()\n            }\n          } else {\n            this.operationType = ''\n          }\n        })\n      MenuItem({ content: $r('app.string.remove_empty_directories'), labelInfo: 'deleteEmptyDirectory' })\n        .onChange((selected) => {\n          if (selected) {\n            this.deleteEmptyDirectory()\n          }\n        })\n      MenuItem({ content: $r('app.string.remove_folders'), labelInfo: 'deleteAll' })\n        .onChange((selected) => {\n          if (selected) {\n            this.deleteAll()\n          }\n        })\n      MenuItem({ content: $r('app.string.Clear_current_working_directory'), labelInfo: 'deleteAllButSelf' })\n        .onChange((selected) => {\n          if (selected) {\n            this.deleteAllButSelf()\n          }\n        })\n      MenuItem({ content: $r('app.string.rename_file'), labelInfo: 'renameFile' })\n        .onChange((selected) => {\n          if (selected) {\n            this.operationType = 'rename'\n            if (this.dialogController) {\n              this.dialogController.open()\n            }\n          } else {\n            this.operationType = ''\n          }\n        })\n    }\n  }"
        }
    ]
}