{
    "https://box.nju.edu.cn/seafhttp/files/a4dcea37-38b1-473d-aea5-98c568def24f/Setting.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text('设置API服务器')\n        .fontSize(20)\n        .fontWeight(FontWeight.Medium)\n        .margin({ bottom: 16, top: 8 })\n        .width('100%')\n        .fontColor($r('app.color.text_primary'))\n\n      TextInput({\n        text: this.value,\n        placeholder: '请输入API服务器地址',\n      })\n        .onChange((value: string) => {\n          this.value = value\n        })\n        .width('100%')\n        .height(48)\n        .margin({ bottom: 24 })\n        .borderRadius(8)\n\n      Row({ space: 12 }) {\n        Button('取消', { type: ButtonType.Capsule })\n          .onClick(() => {\n            this.controller.close()\n            this.cancel()\n          })\n          .backgroundColor(Color.Transparent)\n          .fontColor($r('app.color.text_secondary'))\n          .width(100)\n\n        Button('确定', { type: ButtonType.Capsule })\n          .onClick(() => {\n            if (!this.value) {\n              promptAction.showToast({ message: '请输入服务器地址' })\n              return\n            }\n            if (!this.validateUrl(this.value)) {\n              promptAction.showToast({ message: '请输入有效的URL' })\n              return\n            }\n            this.confirm(this.value)\n            this.controller.close()\n          })\n          .width(100)\n      }\n    }\n    .backgroundColor($r('app.color.dialog_background'))\n    .width('100%')\n    .expandSafeArea()\n    .padding(24)\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text('设置')\n          .fontSize(24)\n          .fontWeight(FontWeight.Bold)\n          .fontColor($r('app.color.text_primary'))\n      }\n      .width('100%')\n      .padding({\n        left: 16,\n        right: 16,\n        top: 16,\n        bottom: 4\n      })\n\n      Scroll() {\n        Column({ space: 12 }) {\n          this.ApiUrlSetting()\n          this.QualitySetting()\n          this.AutoCacheSetting()\n          this.ForceWebApiSetting()\n          this.IgnoreGraySetting()\n          this.CacheClear()\n        }\n        .width('100%')\n        .padding(16)\n      }\n      .layoutWeight(1)\n      .scrollBar(BarState.Off)\n      .width('100%')\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .height(StyleConstants.FULL_HEIGHT)\n    .backgroundColor($r('app.color.page_background'))\n    .expandSafeArea()\n  }"
        },
        {
            "function_name": "ForceWebApiSetting",
            "content": "@Builder\n  ForceWebApiSetting() {\n    Column() {\n      Row() {\n        Column() {\n          Row() {\n            Text('强制使用网页端协议')\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.text_primary'))\n\n            Toggle({ type: ToggleType.Switch, isOn: this.forceWebApi })\n              .onChange((isOn: boolean) => {\n                this.forceWebApi = isOn\n                PreferencesUtil.put('forceWebApi', isOn)\n                promptAction.showToast({\n                  message: isOn ? '已强制网页端协议' : '已关闭强制网页端协议'\n                })\n              })\n              .margin({ left: 8 })\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Text('避免官方模式下混用API造成的灰标')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "IgnoreGraySetting",
            "content": "@Builder\n  IgnoreGraySetting() {\n    Column() {\n      Row() {\n        Column() {\n          Row() {\n            Text('忽略灰标')\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.text_primary'))\n\n            Toggle({ type: ToggleType.Switch, isOn: this.ignoreGray })\n              .onChange((isOn: boolean) => {\n                this.ignoreGray = isOn\n                PreferencesUtil.put('ignoreGray', isOn)\n                setIgnoreGray(isOn)\n                promptAction.showToast({\n                  message: isOn ? '已开启忽略灰标' : '已关闭忽略灰标'\n                })\n              })\n              .margin({ left: 8 })\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Text('在列表内不展示灰标情况，但并不保证播放正常')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n          Text('如果一首歌长时间没有加载，那么可能是真的没办法播放')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "AutoCacheSetting",
            "content": "@Builder\n  AutoCacheSetting() {\n    Column() {\n      Row() {\n        Column() {\n          Row() {\n            Text('自动缓存下一首')\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.text_primary'))\n\n            Toggle({ type: ToggleType.Switch, isOn: this.autoCache })\n              .onChange((isOn: boolean) => {\n                this.autoCache = isOn\n                PreferencesUtil.put('autoCache', isOn)\n                promptAction.showToast({\n                  message: isOn ? '已开启自动缓存' : '已关闭自动缓存'\n                })\n              })\n              .margin({ left: 8 })\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Text('注意流量，可以提升播放体验')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "ApiUrlSetting",
            "content": "@Builder\n  ApiUrlSetting() {\n    Column() {\n      Row() {\n        Column() {\n          Text('API 服务器')\n            .fontSize(16)\n            .fontWeight(FontWeight.Medium)\n            .fontColor($r('app.color.text_primary'))\n\n          if (this.customApiUrl) {\n            Text('当前: ' + this.customApiUrl)\n              .fontSize(14)\n              .fontColor($r('app.color.text_secondary'))\n              .margin({ top: 4 })\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n          } else {\n            Text('请立即填写API服务器，否则功能无法正常使用')\n              .fontSize(14)\n              .fontColor($r('app.color.text_secondary'))\n              .margin({ top: 4 })\n          }\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n\n        if (this.customApiUrl) {\n          Button({ type: ButtonType.Circle }) {\n            Image($r('app.media.ic_close'))\n              .width(20)\n              .height(20)\n              .fillColor($r('app.color.icon_color'))\n          }\n          .width(32)\n          .height(32)\n          .backgroundColor($r('app.color.button_ghost_background'))\n          .margin({ right: 8 })\n          .onClick(() => {\n            PreferencesUtil.delete('customURL')\n            this.customApiUrl = ''\n            updateBaseURL()\n            promptAction.showToast({ message: '请及时填写API服务器，否则功能无法正常使用' })\n          })\n        }\n\n        Button({ type: ButtonType.Circle }) {\n          Image($r('app.media.ic_edit'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.icon_color'))\n        }\n        .width(32)\n        .height(32)\n        .backgroundColor($r('app.color.button_ghost_background'))\n        .onClick(() => {\n          this.dialogController.open()\n        })\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "QualitySetting",
            "content": "@Builder\n  QualitySetting() {\n    Column() {\n      Text('音质设置')\n        .fontSize(16)\n        .fontWeight(FontWeight.Medium)\n        .margin({ bottom: 12 })\n        .width('100%')\n        .fontColor($r('app.color.text_primary'))\n\n      List() {\n        ForEach(Object.keys(qualityDescriptions), (key: string) => {\n          ListItem() {\n            Row() {\n              Radio({ value: key, group: 'quality' })\n                .checked(this.selectedQuality === key)\n                .onChange((isChecked: boolean) => {\n                  if (isChecked) {\n                    this.selectedQuality = key as QualityLevel\n                    PreferencesUtil.put('defaultLevel', key)\n                    promptAction.showToast({ message: '音质设置已更新' })\n                  }\n                })\n              Text(Object(qualityDescriptions)[key])\n                .fontSize(14)\n                .margin({ left: 8 })\n                .fontColor($r('app.color.text_primary'))\n            }\n            .width('100%')\n            .height(48)\n            .onClick(() => {\n              this.selectedQuality = key as QualityLevel\n              PreferencesUtil.put('defaultLevel', key)\n              promptAction.showToast({ message: '音质设置已更新' })\n            })\n          }\n        })\n      }\n      .width('100%')\n    }\n    .width('100%')\n    .padding(16)\n    .backgroundColor($r('app.color.card_background_two'))\n    .borderRadius(12)\n    .shadow({\n      radius: 12,\n      color: $r('app.color.card_shadow'),\n      offsetX: 0,\n      offsetY: 2\n    })\n  }"
        },
        {
            "function_name": "CacheClear",
            "content": "@Builder\n  CacheClear() {\n    Column() {\n      Row() {\n        Text('清除所有请求缓存')\n          .fontSize(16)\n          .fontWeight(FontWeight.Medium)\n          .fontColor($r('app.color.text_primary'))\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }.onClick(() => {\n      const caches = PreferencesUtil.getAll()\n      if (!caches) {\n        promptAction.showToast({ message: '没有可以清除缓存' })\n        return\n      }\n      // 获取所有key为url_开头的缓存\n      const cacheKeys = Object.keys(caches).filter(key => key.startsWith('url_'))\n\n      if (cacheKeys.length === 0) {\n        promptAction.showToast({ message: '没有可以清除缓存' })\n        return\n      }\n\n      cacheKeys.forEach(key => {\n        PreferencesUtil.delete(key)\n      })\n\n      promptAction.showToast({ message: `已清除${cacheKeys.length}条缓存` })\n    })\n  }"
        }
    ],
    "https://box.nju.edu.cn/seafhttp/files/22428aff-3358-40cc-88ab-3644dcd96627/Collection.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Image(this.basePlayListInfo ? cover(this.basePlayListInfo.coverImgUrl, 512) : '')\n        .width(StyleConstants.FULL_WIDTH)\n        .height(260)\n        .blur(20)\n        .opacity(0.6)\n        .backgroundColor($r('app.color.skeleton_background'))\n        .position({ x: 0, y: 0 })\n        .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])\n\n      if (this.loadingPlaylist) {\n        this.SkeletonLoading()\n      } else {\n        Column() {\n          if (this.isSelectMode) {\n            this.SelectModeTopBar()\n          }\n\n          Row() {\n            Image(this.basePlayListInfo ? cover(this.basePlayListInfo.coverImgUrl, 512) : '')\n              .width(120)\n              .height(120)\n              .borderRadius(12)\n              .margin({ right: 16 })\n              .shadow({\n                radius: 12,\n                color: '#00000020',\n                offsetX: 0,\n                offsetY: 2\n              })\n\n            Column() {\n              Text(this.basePlayListInfo?.name ?? '')\n                .fontSize(22)\n                .fontWeight(FontWeight.Bold)\n                .maxLines(2)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n              Row() {\n                Image(this.basePlayListInfo?.creator?.avatarUrl ?? '')\n                  .width(24)\n                  .height(24)\n                  .borderRadius(12)\n                  .margin({ right: 8 })\n                Text(this.basePlayListInfo?.creator?.nickname ?? '')\n                  .fontSize(14)\n                  .fontWeight(StyleConstants.FONT_WEIGHT_FIVE)\n              }\n              .margin({ top: 6 })\n            }\n            .layoutWeight(1)\n            .alignItems(HorizontalAlign.Start)\n          }\n          .height(180)\n          .width(StyleConstants.FULL_WIDTH)\n          .padding(16)\n\n          Column() {\n            this.ActionBar()\n\n            List({ space: 16 }) {\n              if (this.dataSource !== null) {\n                ListItem() {\n                  Grid() {\n                    LazyForEach(this.dataSource, (item: Track, index: number) => {\n                      GridItem() {\n                        this.TrackItem(item, index)\n                      }.reuseId(`track-${item.id}`)\n                    })\n                  }\n                  .width(StyleConstants.FULL_WIDTH)\n                  .columnsTemplate('repeat(1, 1fr)')\n                  .columnsGap(8)\n                  .rowsGap(8)\n                  .padding({ left: 8, right: 8, bottom: 0 })\n                }\n              } else {\n                ListItem() {\n                  Text(\"什么都没有\")\n                }\n              }\n\n              ListItem() {\n                if (this.profile === null && this.dataSource!.totalCount() > 20) {\n                  Text('官方限制未登录只能查看20首')\n                    .fontSize(14)\n                    .fontColor($r('app.color.text_tertiary'))\n                    .margin({ top: 12, bottom: 12 })\n                    .width('100%')\n                    .textAlign(TextAlign.Center)\n                }\n\n                this.LoadingAnimation()\n              }\n            }\n            .cachedCount(5) // Increased for smoother scrolling\n            .padding({ top: 8 })\n            .width(StyleConstants.FULL_WIDTH)\n            .layoutWeight(1)\n            .edgeEffect(EdgeEffect.Spring)\n            .scrollBar(BarState.Off)\n            .onReachEnd(() => {\n              this.loadMoreTracks()\n            })\n            .onWillScroll((scrollOffset: number, scrollState: ScrollState) => {\n              // Optional: Track scroll position if needed for future optimizations\n              this.scrollY = scrollOffset\n            })\n            .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])\n          }\n          .width(StyleConstants.FULL_WIDTH)\n          .layoutWeight(1)\n          .backgroundColor($r('app.color.page_background'))\n          .borderRadius({ topLeft: 32, topRight: 32 })\n          .shadow({\n            radius: 24,\n            color: $r('app.color.shadow_light'),\n            offsetX: 0,\n            offsetY: -2\n          })\n\n          if (this.isSelectMode) {\n            Column() {\n              this.SelectModeBottomBar()\n            }\n            .width(\"100%\")\n            .height(40)\n          }\n        }\n        .width(StyleConstants.FULL_WIDTH)\n        .height(StyleConstants.FULL_HEIGHT)\n        .opacity(this.loadingPlaylist ? 0 : 1)\n        .transition({ type: TransitionType.All })\n        .animation({\n          duration: 300,\n          curve: Curve.EaseOut\n        })\n      }\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .height(StyleConstants.FULL_HEIGHT)\n    .backgroundColor($r('app.color.page_background'))\n    .expandSafeArea()\n    .bindSheet($$this.showPlayList, this.PlayList(), {\n      showClose: false,\n      detents: [SheetSize.MEDIUM, SheetSize.LARGE],\n      dragBar: false,\n      scrollSizeMode: ScrollSizeMode.CONTINUOUS,\n      backgroundColor: $r('app.color.playlist_bg'),\n      preferType: SheetType.BOTTOM,\n    })\n  }"
        },
        {
            "function_name": "SkeletonLoading",
            "content": "@Builder\n  SkeletonLoading() {\n    Column() {\n      Row() {\n        Column()\n          .width(120)\n          .height(120)\n          .borderRadius(12)\n          .backgroundColor($r('app.color.skeleton_background'))\n          .margin({ right: 16 })\n\n        Column() {\n          Row()\n            .width('60%')\n            .height(24)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .margin({ bottom: 8 })\n          Row()\n            .width('40%')\n            .height(16)\n            .backgroundColor($r('app.color.skeleton_background'))\n        }\n        .layoutWeight(1)\n        .alignItems(HorizontalAlign.Start)\n      }\n      .height(180)\n      .padding(16)\n\n      Column() {\n        Row() {\n          Row()\n            .width(100)\n            .height(40)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .borderRadius(20)\n          Row()\n            .width(100)\n            .height(40)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .borderRadius(20)\n        }\n        .width('100%')\n        .justifyContent(FlexAlign.SpaceBetween)\n        .padding({ left: 16, right: 16, top: 12 })\n\n        ForEach([1, 2, 3, 4, 5], () => {\n          Row() {\n            Row()\n              .width(40)\n              .height(40)\n              .backgroundColor($r('app.color.skeleton_background'))\n              .borderRadius(4)\n              .margin({ right: 12 })\n            Column() {\n              Row()\n                .width('80%')\n                .height(16)\n                .backgroundColor($r('app.color.skeleton_background'))\n                .margin({ bottom: 8 })\n              Row()\n                .width('50%')\n                .height(14)\n                .backgroundColor($r('app.color.skeleton_background'))\n            }\n            .alignItems(HorizontalAlign.Start)\n            .layoutWeight(1)\n          }\n          .padding(16)\n          .margin({ bottom: 8 })\n        })\n      }\n      .width('100%')\n      .backgroundColor($r('app.color.page_background'))\n      .borderRadius({ topLeft: 32, topRight: 32 })\n    }\n    .width('100%')\n    .transition({ type: TransitionType.All })\n    .animation({\n      duration: 300,\n      curve: Curve.EaseOut\n    })\n  }"
        },
        {
            "function_name": "SelectModeBottomBar",
            "content": "@Builder\n  SelectModeBottomBar() {\n    Row({ space: 12 }) {\n      if (this.isCreator) {\n        Button({ type: ButtonType.Capsule }) {\n          Row() {\n            Image($r('app.media.ic_trash'))\n              .width(20)\n              .height(20)\n              .fillColor($r('app.color.text_primary'))\n              .margin({ right: 4 })\n            Text('移除')\n              .fontSize(14)\n              .fontColor($r('app.color.text_primary'))\n          }\n        }\n        .backgroundColor(Color.Transparent)\n        .height(40)\n        .padding({ left: 16, right: 16 })\n        .onClick(async () => {\n          AlertDialog.show({\n            title: '移除歌曲',\n            message: '确定要移除选中的歌曲吗？',\n            primaryButton: {\n              value: '取消',\n              action: () => {\n              }\n            },\n            secondaryButton: {\n              value: '确定',\n              action: async () => {\n                const ids = Array.from(this.selectedTracks)\n                await collectSong(this.collectionId, ids, \"del\")\n                this.isSelectMode = false\n                this.selectedTracks.clear()\n                promptAction.showToast({ message: \"已移除歌曲\" })\n              }\n            }\n          })\n        })\n      }\n\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image($r('app.media.ic_star'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.text_primary'))\n            .margin({ right: 4 })\n          Text('收藏')\n            .fontSize(14)\n            .fontColor($r('app.color.text_primary'))\n        }\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .padding({ left: 16, right: 16 })\n      .margin({ right: 12 })\n      .onClick(() => {\n        this.showPlayList = true\n      })\n\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image($r('app.media.ic_plus'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.text_primary'))\n            .margin({ right: 4 })\n          Text('添加到播放列表')\n            .fontSize(14)\n            .fontColor($r('app.color.text_primary'))\n        }\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .padding({ left: 16, right: 16 })\n      .onClick(() => {\n        const selectedSongs = this.allTracks\n          .filter(track => this.selectedTracks.has(track.id))\n          .map(track => {\n            const song = new TrackAndPrivilege()\n            song.track = track\n            song.privilege = this.privilegeMap.get(track.id)!\n            return song\n          })\n\n        selectedSongs.forEach(song => globalPlaylist.addSong(song))\n        promptAction.showToast({\n          message: `已添加 ${selectedSongs.length} 首歌曲到播放列表`\n        })\n        this.isSelectMode = false\n        this.selectedTracks.clear()\n      })\n    }\n    .padding(8)\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height(\"100%\")\n    .backgroundColor($r('app.color.page_background'))\n    .position({ x: 0, y: 'calc(100% - 40)' })\n    .expandSafeArea()\n    .animation({\n      duration: 200,\n      curve: Curve.EaseInOut\n    })\n  }"
        },
        {
            "function_name": "PlayList",
            "content": "@Builder\n  PlayList() {\n    Column() {\n      PlaylistSelector({\n        onSelect: async (id: string | number) => {\n          const ids = Array.from(this.selectedTracks)\n          await collectSong(id, ids)\n          promptAction.showToast({ message: \"已添加到收藏夹\" })\n          this.showPlayList = false\n          this.isSelectMode = false\n          this.selectedTracks.clear()\n        }\n      })\n    }\n    .expandSafeArea()\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "LoadingAnimation",
            "content": "@Builder\n  LoadingAnimation() {\n    if (this.isLoading) {\n      Row() {\n        LoadingProgress()\n          .width(24)\n          .height(24)\n          .color($r('app.color.text_secondary'))\n      }\n      .width('100%')\n      .height(48)\n      .justifyContent(FlexAlign.Center)\n      .transition({\n        type: TransitionType.All,\n        opacity: 0\n      })\n      .animation({\n        duration: 300,\n        curve: Curve.EaseOut\n      })\n    }\n  }"
        },
        {
            "function_name": "SelectModeTopBar",
            "content": "@Builder\n  SelectModeTopBar() {\n    Row() {\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_close'))\n          .width(24)\n          .height(24)\n          .fillColor($r('app.color.icon_color'))\n      }\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        this.isSelectMode = false\n        this.selectedTracks.clear()\n      })\n\n      Text(`已选择 ${this.selectedTracks.size} 首`)\n        .fontSize(16)\n        .fontWeight(FontWeight.Medium)\n        .fontColor($r('app.color.text_primary'))\n        .margin({ left: 12 })\n\n      Blank()\n\n      Button({ type: ButtonType.Circle }) {\n        Text('全选')\n          .fontColor($r('app.color.text_primary'))\n          .fontSize(14)\n      }\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        if (this.selectedTracks.size === this.allTracks.length) {\n          this.selectedTracks.clear()\n        } else {\n          this.allTracks.forEach(track => {\n            this.selectedTracks.add(track.id)\n          })\n        }\n      })\n    }\n    .width('100%')\n    .height(56)\n    .padding({ left: 16, right: 16 })\n    .backgroundColor(Color.Transparent)\n  }"
        },
        {
            "function_name": "ActionBar",
            "content": "@Builder\n  ActionBar() {\n    Row() {\n      Row() {\n        Button({ type: ButtonType.Capsule }) {\n          Row() {\n            Image($r('app.media.ic_play'))\n              .width(20)\n              .height(20)\n              .fillColor($r('app.color.icon_color'))\n              .margin({ right: 8 })\n            Text('播放全部')\n              .fontColor($r('app.color.text_secondary'))\n              .fontSize(16)\n          }\n          .padding({ left: 16, right: 16 })\n        }\n        .backgroundColor(Color.Transparent)\n        .height(40)\n        .enabled(!this.isLoading)\n        .onClick(async () => {\n          this.isLoading = true\n          try {\n            if (!this.finished) {\n              await this.loadAllTracks()\n            }\n\n            if (this.isQuit) {\n              return\n            }\n\n            animateTo({ duration: 0 }, () => {\n              const tempSongs = this.allTracks.map(track => {\n                const song = new TrackAndPrivilege()\n                song.track = track\n                song.privilege = this.privilegeMap.get(track.id)!\n                return song\n              })\n\n              globalPlaylist.overwrite(tempSongs)\n\n              const song = new TrackAndPrivilege()\n              song.track = this.allTracks[0]\n              song.privilege = this.privilegeMap.get(this.allTracks[0].id)!\n\n              AppStorage.setOrCreate(\"Track\", song)\n            })\n\n            router.pushUrl({ url: \"pages/Playing\" })\n          } catch (error) {\n            Logger.error('Failed to play all tracks:', error)\n            promptAction.showToast({ message: \"加载失败，请重试\" })\n          } finally {\n            this.isLoading = false\n          }\n        })\n      }\n\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image(this.subscribed ? $r(\"app.media.ic_checkmark\") : $r('app.media.ic_plus'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.icon_color'))\n            .margin({ right: 8 })\n          Text(this.subscribed ? '取消收藏' : '收藏歌单')\n            .fontColor($r('app.color.text_secondary'))\n            .fontSize(16)\n        }\n        .visibility(this.isCreator ? Visibility.None : Visibility.Visible)\n        .padding({ left: 16, right: 16 })\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .onClick(async () => {\n        if (!this.isCreator) {\n          const t = this.subscribed ? 0 : 1\n          await playlistSubscribe(this.collectionId!, t)\n          this.subscribed = !this.subscribed\n        }\n      })\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .padding({ left: 16, right: 16, top: 12 })\n    .justifyContent(FlexAlign.SpaceBetween)\n  }"
        }
    ],
    "https://box.nju.edu.cn/seafhttp/files/9c8296e4-3077-4b1a-9e30-60c9e1fba9d9/Playing.png": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      this.BlurBackground()\n\n      Column() {\n        if (this.currentBreakpoint === BreakpointConstants.BREAKPOINT_LG || this.currentBreakpoint === BreakpointConstants.BREAKPOINT_MD) {\n          Row() {\n            Column() {\n              Image(cover(this.track?.track.al.picUrl ?? \"\", 512))\n                .width(this.coverWidth.getValue(this.currentBreakpoint))\n                .aspectRatio(1)\n                .borderRadius(24)\n                .margin({ top: 48 })\n                .shadow({ radius: 24, color: 'rgba(0, 0, 0, 0.2)', offsetY: 12 })\n\n              Text(this.track?.track.name)\n                .fontSize(this.getFontSize(this.track?.track.name ?? \"\", 28, 24))\n                .fontWeight(FontWeight.Bold)\n                .maxLines(1)\n                .margin({ top: 24 })\n                .fontColor(Color.White)\n\n              Text(this.track?.track.ar.map(item => item.name).join(\" / \"))\n                .fontSize(16)\n                .fontColor('rgba(255, 255, 255, 0.6)')\n                .margin({ top: 8 })\n\n              Column() {\n                this.ActionControls()\n                this.ProgressBar()\n                this.PlayerControls()\n              }\n              .margin({ top: 8 })\n              .layoutWeight(1)\n              .justifyContent(FlexAlign.End)\n            }\n            .width(this.playingView.getValue(this.currentBreakpoint))\n            .height('100%')\n            .alignItems(HorizontalAlign.Center)\n            .padding({ bottom: 32 })\n\n            Column() {\n              LyricView()\n            }\n            .width(this.lyricView.getValue(this.currentBreakpoint))\n            .height('100%')\n            .expandSafeArea()\n            .padding(16)\n          }\n          .expandSafeArea()\n        } else {\n          Tabs({ barPosition: BarPosition.End, index: this.selectedTabIndex }) {\n            TabContent() {\n              Column() {\n                Image(cover(this.track?.track.al.picUrl ?? \"\", 512))\n                  .width(this.coverWidth.getValue(this.currentBreakpoint))\n                  .aspectRatio(1)\n                  .borderRadius(24)\n                  .margin({ top: 48 })\n                  .shadow({ radius: 24, color: 'rgba(0, 0, 0, 0.2)', offsetY: 12 })\n\n                Text(this.track?.track.name)\n                  .fontSize(this.getFontSize(this.track?.track.name ?? \"\", 28, 24))\n                  .fontWeight(FontWeight.Bold)\n                  .maxLines(1)\n                  .margin({ top: 24 })\n                  .fontColor(Color.White)\n\n                Text(this.track?.track.ar.map(item => item.name).join(\" / \"))\n                  .fontSize(16)\n                  .fontColor('rgba(255, 255, 255, 0.6)')\n                  .margin({ top: 8 })\n\n                this.ActionControls()\n                this.ProgressBar()\n                this.PlayerControls()\n              }\n              .width('100%')\n              .height('100%')\n              .alignItems(HorizontalAlign.Center)\n            }\n            .expandSafeArea()\n\n            TabContent() {\n              Column() {\n                LyricView()\n              }\n              .width('100%')\n              .height('100%')\n              .expandSafeArea()\n              .padding(16)\n            }\n            .expandSafeArea()\n          }\n          .scrollable(true)\n          .clip(false)\n          .barHeight(0)\n          .onChange((index: number) => {\n            this.selectedTabIndex = index\n          })\n        }\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .expandSafeArea()\n    .gesture(\n      SwipeGesture({\n        // 竖直方向滑动\n        direction: SwipeDirection.Vertical,\n      }).onAction((event) => {\n        if (event.angle < 0) {\n          this.showPlaylist = true;\n        } else {\n          router.back()\n        }\n      })\n    )\n    .bindSheet($$this.showPlaylist, this.sheet , {\n      showClose: false,\n      height: this.selector == \"timeSelector\" ? SheetSize.FIT_CONTENT : SheetSize.MEDIUM,\n      // detents: [SheetSize.MEDIUM, SheetSize.LARGE],\n      dragBar: false,\n      scrollSizeMode: ScrollSizeMode.CONTINUOUS,\n      preferType: SheetType.BOTTOM,\n      backgroundColor: $r('app.color.playlist_bg'),\n      onWillDismiss: () => {\n        this.showPlaylist = false;\n        this.selector = \"playlist\"\n      }\n    })\n  }"
        },
        {
            "function_name": "PlayList",
            "content": "@Builder\n  PlayList() {\n    Column() {\n      PlaylistSelector({\n        onSelect: async (id: string | number) => {\n          await collectSong(id, [this.track?.track.id!])\n          promptAction.showToast({ message: \"已添加到收藏夹\" })\n          this.showPlaylist = false;\n          this.selector = \"playlist\"\n        }\n      })\n    }\n    .expandSafeArea()\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "Timer",
            "content": "@Builder\n  Timer() {\n    Column() {\n      TimerSelector()\n    }\n    .expandSafeArea()\n    .backgroundColor($r('app.color.playlist_bg'))\n  }"
        },
        {
            "function_name": "PlayListBuilder",
            "content": "@Builder\n  PlayListBuilder() {\n    Column() {\n      PlayList({ showPlaylist: $showPlaylist })\n    }\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "BlurBackground",
            "content": "@Builder\n  BlurBackground() {\n    Stack() {\n      Image(cover(this.track?.track.al.picUrl ?? \"\", 512))\n        .width('100%')\n        .height('100%')\n        .objectFit(ImageFit.Cover)\n        .blur(98)\n        .opacity(0.6)\n        .expandSafeArea()\n\n      Column()\n        .width('100%')\n        .height('100%')\n        .linearGradient({\n          angle: 180,\n          colors: [['rgba(0,0,0,0.3)', 0.0], ['rgba(0,0,0,0.7)', 1.0]]\n        })\n        .expandSafeArea()\n    }\n    .width('100%')\n    .height('100%')\n    .position({ x: 0, y: 0 })\n    .expandSafeArea()\n  }"
        },
        {
            "function_name": "ProgressBar",
            "content": "@Builder\n  ProgressBar() {\n    Column() {\n      Text(this.formatTime(this.currentTime))\n        .fontSize(12)\n        .fontColor('rgba(255, 255, 255, 0.6)')\n\n      Slider({\n        value: this.currentTime,\n        max: this.duration || 100,\n        step: 1,\n        style: SliderStyle.NONE\n      })\n        .trackThickness(this.isProgressBarExpanded ? 12 : 4)\n        .selectedColor(Color.White)\n        .trackColor('rgba(255, 255, 255, 0.3)')\n        .width('100%')\n        .onChange((value: number) => {\n          this.currentTime = value\n        })\n        .onTouch((event) => {\n          if (event.type === TouchType.Down) {\n            this.isProgressBarExpanded = true\n          } else if (event.type === TouchType.Up) {\n            this.isProgressBarExpanded = false\n            this.playerManager.getAVPlayerInstance().then(player => {\n              player.seek(this.currentTime)\n            })\n          }\n        })\n\n      Text(this.formatTime(this.duration))\n        .fontSize(12)\n        .fontColor('rgba(255, 255, 255, 0.6)')\n    }\n    .padding(16)\n    .width('100%')\n  }"
        },
        {
            "function_name": "PlayerControls",
            "content": "@Builder\n  PlayerControls() {\n    Row() {\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_prev'))\n          .width(40)\n          .height(40)\n          .fillColor(Color.White)\n      }\n      .width(this.buttonSize.getValue(this.currentBreakpoint))\n      .height(this.buttonSize.getValue(this.currentBreakpoint))\n      .margin(12)\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        globalPlaylist.playPrevious()\n      })\n\n      Button({ type: ButtonType.Circle }) {\n        Image(this.isPlaying ? $r('app.media.ic_pause') : $r('app.media.ic_play'))\n          .width(44)\n          .height(44)\n          .fillColor(Color.White)\n      }\n      .width(this.buttonSize.getValue(this.currentBreakpoint) + 20)\n      .height(this.buttonSize.getValue(this.currentBreakpoint) + 20)\n      .margin(12)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        if (this.isPlaying) {\n          this.playerManager.pause()\n        } else {\n          this.playerManager.play()\n        }\n      })\n\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_next'))\n          .width(40)\n          .height(40)\n          .fillColor(Color.White)\n      }\n      .width(this.buttonSize.getValue(this.currentBreakpoint))\n      .height(this.buttonSize.getValue(this.currentBreakpoint))\n      .margin(12)\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        globalPlaylist.playNext()\n      })\n    }\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }"
        },
        {
            "function_name": "ActionControls",
            "content": "@Builder\n  ActionControls() {\n    Row({ space: 8 }) {\n      Button({ type: ButtonType.Circle }) {\n        Image(this.getPlayModeResource(this.playMode))\n          .width(28)\n          .height(28)\n          .fillColor(Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        this.playMode = globalPlaylist.switchPlayMode()\n      })\n\n      Button({ type: ButtonType.Circle }) {\n        Image(this.isFavorite ? $r('app.media.ic_heart_fill') : $r('app.media.ic_heart'))\n          .width(28)\n          .height(28)\n          .fillColor(this.isFavorite ? '#FF4081' : Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        EventBus.send(\"ToggleFavorite\")\n      })\n\n      if (this.collectionId) {\n        Button({ type: ButtonType.Circle }) {\n          Image($r('app.media.ic_discover_fill'))\n            .width(28)\n            .height(28)\n            .fillColor(Color.White)\n        }\n        .width(44)\n        .height(44)\n        .margin(8)\n        .backgroundColor('rgba(255, 255, 255, 0.1)')\n        .onClick(async () => {\n          // 心动模式\n          promptAction.showToast({ message: \"正在进入心动模式~\" })\n          const intelligenceSongs = await intelligence(this.collectionId!, this.track!.track.id)\n          globalPlaylist.overwrite(intelligenceSongs.data.map(item => {\n            const trackAndPrivilege = new TrackAndPrivilege()\n            trackAndPrivilege.track = item.songInfo as ESObject as Track\n            trackAndPrivilege.privilege = item.songInfo.privilege as ESObject as Privilege\n            return trackAndPrivilege\n          }))\n          animateTo({ duration: 0 }, () => {\n            AppStorage.setOrCreate(\"Track\", globalPlaylist.getCurrentSong())\n          })\n          globalPlaylist.setCurrentIndex(0)\n          promptAction.showToast({ message: \"成功进入心动模式~\" })\n        })\n      }\n\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_more'))\n          .width(28)\n          .height(28)\n          .fillColor(Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .bindMenu([\n        {\n          value: '收藏该歌曲',\n          action: () => {\n            this.selector = \"playlistSelector\"\n            this.showPlaylist = true;\n          }\n        },\n        {\n          value: '定时关闭',\n          action: () => {\n            this.selector = \"timeSelector\"\n            this.showPlaylist = true;\n          }\n        },\n      ])\n\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_list'))\n          .width(28)\n          .height(28)\n          .fillColor(Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        if (globalPlaylist.playType == PlayType.PERSONAL_FM) {\n          promptAction.showToast({ message: \"当前模式下需要保留一点神秘感哦！\" })\n          return\n        }\n        this.selector = \"playlist\"\n        this.showPlaylist = true;\n      })\n    }\n    .margin({ top: 16 })\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }"
        },
        {
            "function_name": "sheet",
            "content": "@Builder\n  sheet() {\n    if (this.selector === \"playlist\") {\n      this.PlayListBuilder()\n    } else if (this.selector === \"playlistSelector\") {\n      this.PlayList()\n    } else if (this.selector === \"timeSelector\") {\n      this.Timer()\n    }\n  }"
        }
    ]
}