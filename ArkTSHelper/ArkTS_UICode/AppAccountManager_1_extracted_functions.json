{
    "entry\\src\\main\\ets\\component\\AccountInfo.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll() {\n      Column() {\n        this.infoShow($r('app.string.appname'), this.bundleName)\n        this.infoShow($r('app.string.unusername'), this.username)\n        this.infoShow($r('app.string.email'), this.email)\n        this.infoShow($r('app.string.signature'), this.signature)\n\n        Button($r('app.string.modify'))\n          .id('modify')\n          .margin(10)\n          .width('60%')\n          .fontSize(20)\n          .fontColor(Color.White)\n          .type(ButtonType.Capsule)\n          .onClick(() => {\n            router.replaceUrl({\n              url: 'pages/Modify',\n              params: {\n                username: this.username,\n                bundleName: this.bundleName,\n                email: this.email,\n                signature: this.signature\n              }\n            })\n          })\n\n        Button($r('app.string.application'))\n          .id('application')\n          .margin(10)\n          .width('60%')\n          .fontSize(20)\n          .fontColor(Color.White)\n          .type(ButtonType.Capsule)\n          .onClick(() => {\n            AlertDialog.show(\n              {\n                title: $r('app.string.warning'),\n                message: $r('app.string.switch_app'),\n                primaryButton: {\n                  value: $r('app.string.confirm'),\n                  action: () => {\n                    router.replaceUrl({\n                      url: 'pages/Index'\n                    })\n                  }\n                },\n                secondaryButton: {\n                  value: $r('app.string.cancel'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          })\n\n        Button($r('app.string.delete'))\n          .id('delete')\n          .margin(10)\n          .width('60%')\n          .fontSize(20)\n          .fontColor(Color.White)\n          .type(ButtonType.Capsule)\n          .onClick(() => {\n            AlertDialog.show(\n              {\n                title: $r('app.string.warning'),\n                message: $r('app.string.delete_account'),\n                primaryButton: {\n                  value: $r('app.string.confirm'),\n                  action: () => {\n                    this.accountModel.deleteAccount(`${this.username}_${this.bundleName}`);\n                    this.storage.deleteStorageValue(getContext(), this.username, this.bundleName)\n                    router.replaceUrl({\n                      url: 'pages/Login',\n                      params: {\n                        bundleName: this.bundleName\n                      }\n                    })\n                  }\n                },\n                secondaryButton: {\n                  value: $r('app.string.cancel'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          })\n      }\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\BundleInfo.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      LazyForEach(this.dataSet, (item: DataArray) => {\n        Row() {\n          Image(item.img)\n            .margin(10)\n            .width('40%')\n            .height('60%')\n            .objectFit(ImageFit.Contain)\n\n          Text(item.text)\n            .margin(10)\n            .fontSize(20)\n\n          Image($r('app.media.right'))\n            .margin(10)\n            .width('15%')\n            .height('20%')\n            .layoutWeight(1)\n            .objectFit(ImageFit.Contain)\n        }\n        .id(item.name + 'App')\n        .margin(5)\n        .width('95%')\n        .height('20%')\n        .borderRadius(20)\n        .backgroundColor('#f6f6f6')\n        .onClick(() => {\n          router.replaceUrl({\n            url: 'pages/Login',\n            params: {\n              bundleName: item.name\n            }\n          })\n        })\n      }, (item: DataArray) => item.name.toString())\n    }\n    .layoutWeight(1)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\LoginInfo.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text($r('app.string.appname'))\n          .margin(10)\n          .fontSize(18)\n          .width('20%')\n          .textAlign(TextAlign.End)\n        Text(this.bundleName)\n          .margin(10)\n          .width('55%')\n          .fontSize(20)\n          .textAlign(TextAlign.Center)\n      }\n      .margin({ top: '10%' })\n      .padding({ left: 5 })\n\n      Row() {\n        Text($r('app.string.username'))\n          .margin(10)\n          .fontSize(18)\n          .width('20%')\n          .textAlign(TextAlign.End)\n\n        TextInput({ placeholder: 'xxxxxxx' })\n          .id('nameInput')\n          .margin(10)\n          .width('55%')\n          .fontSize(20)\n          .maxLength(20)\n          .fontWeight(FontWeight.Bold)\n          .placeholderFont({ size: 16, weight: FontWeight.Normal })\n          .onChange((value: string) => {\n            this.name = value\n          })\n      }\n      .padding({ left: 5 })\n\n      Row() {\n        Text($r('app.string.password'))\n          .margin(10)\n          .fontSize(18)\n          .width('20%')\n          .textAlign(TextAlign.End)\n\n        TextInput({ placeholder: 'xxxxxxx' })\n          .id('passwordInput')\n          .margin(10)\n          .width('55%')\n          .fontSize(20)\n          .maxLength(20)\n          .type(InputType.Password)\n          .fontWeight(FontWeight.Bold)\n          .placeholderFont({ size: 16, weight: FontWeight.Normal })\n          .onChange((value: string) => {\n            this.password = value\n          })\n      }\n      .padding({ left: 5 })\n\n      Button($r('app.string.register'))\n        .id('register')\n        .margin(10)\n        .width('60%')\n        .fontSize(20)\n        .fontColor(Color.White)\n        .type(ButtonType.Capsule)\n        .onClick(() => {\n          router.replaceUrl({\n            url: 'pages/Register',\n            params: {\n              bundleName: this.bundleName\n            }\n          })\n        })\n\n      Button($r('app.string.login'))\n        .id('login')\n        .margin(10)\n        .width('60%')\n        .fontSize(20)\n        .fontColor(Color.White)\n        .type(ButtonType.Capsule)\n        .onClick(async () => {\n          let result: preferences.ValueType = await this.storage.getStorageValue(getContext(), this.name, this.bundleName);\n          let effect: preferences.ValueType = await this.storage.getStorageValue(getContext(), this.bundleName, `${this.name}_${this.bundleName}`);\n          if (this.name === '') {\n            AlertDialog.show(\n              {\n                message: $r('app.string.blank'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.password === '') {\n            AlertDialog.show(\n              {\n                message: $r('app.string.password_blank'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (result === this.password && effect === 'true') {\n            let email: string = ''\n            let signature: string = ''\n            try {\n              email = await this.accountModel.getAccountCredential(`${this.name}_${this.bundleName}`, `email_${this.bundleName}`)\n              Logger.info(TAG, `getAccountCredential email is ${email}`)\n            } catch (err) {\n              email = ''\n              Logger.info(TAG, `getAccountCredential failed err is ${JSON.stringify(err)}`)\n            }\n            try {\n              signature = await this.accountModel.getAccountCredential(`${this.name}_${this.bundleName}`, `signature_${this.bundleName}`)\n              Logger.info(TAG, `getAccountCredential signature is ${signature}`)\n            } catch (err) {\n              signature = ''\n              Logger.info(TAG, `getAccountCredential failed err is ${JSON.stringify(err)}`)\n            }\n            router.replaceUrl({\n              url: 'pages/Account',\n              params: {\n                email: email,\n                username: this.name,\n                signature: signature,\n                bundleName: this.bundleName\n              }\n            })\n          } else {\n            AlertDialog.show(\n              {\n                message: $r('app.string.password_message'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          }\n        })\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\ModifyInfo.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text($r('app.string.appname'))\n          .margin(10)\n          .fontSize(18)\n          .width('25%')\n          .textAlign(TextAlign.End)\n        Text(this.bundleName)\n          .margin(20)\n          .width('55%')\n          .fontSize(20)\n          .textAlign(TextAlign.Start)\n      }\n      .margin(5)\n\n      Row() {\n        Text($r('app.string.unusername'))\n          .margin(10)\n          .fontSize(18)\n          .width('25%')\n          .textAlign(TextAlign.End)\n        Text(this.username)\n          .margin(10)\n          .width('55%')\n          .fontSize(20)\n          .textAlign(TextAlign.Start)\n      }\n      .margin(5)\n\n      LazyForEach(this.dataSet, (item: DataArray, index: number) => {\n        Row() {\n          Text(item.text)\n            .margin(10)\n            .fontSize(18)\n            .width('25%')\n            .textAlign(TextAlign.End)\n            .backgroundColor('#ffffff')\n          Column() {\n            Text(item.promptText)\n              .fontSize(14)\n              .width('80%')\n              .fontColor('#ffb0b0b0')\n              .textAlign(TextAlign.Center)\n\n            TextInput({ placeholder: 'xxxxx' })\n              .id('Modify' + (index + 1))\n              .margin(10)\n              .width('55%')\n              .fontSize(20)\n              .maxLength(20)\n              .type(item.inputType)\n              .maxLength(item.length)\n              .fontWeight(FontWeight.Bold)\n              .placeholderFont({ size: 16, weight: FontWeight.Normal })\n              .onChange(async (value: string) => {\n                switch (item.event) {\n                  case 0:\n                    this.emailInfo = value\n                    break\n                  case 1:\n                    this.signature = value\n                    break\n                  case 2:\n                    this.passWord = value\n                    break\n                  case 3:\n                    this.confirmPassword = value\n                    break\n                  default:\n                    break\n                }\n              })\n          }\n        }\n        .margin(5)\n      }, (item: DataArray) => JSON.stringify(item))\n\n      Button($r('app.string.setting'))\n        .id('modComplete')\n        .margin(10)\n        .width('60%')\n        .fontSize(20)\n        .fontColor(Color.White)\n        .type(ButtonType.Capsule)\n        .onClick(async () => {\n          if (this.emailInfo !== '') {\n            await this.accountModel.setAccountCredential(`${this.username}_${this.bundleName}`, `email_${this.bundleName}`, this.emailInfo)\n          }\n          if (this.signature !== '') {\n            await this.accountModel.setAccountCredential(`${this.username}_${this.bundleName}`, `signature_${this.bundleName}`, this.signature)\n          }\n          let res: RegExp = new RegExp(`^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z0-9]{2,6}$`);\n          let userPassWord: preferences.ValueType = await this.storage.getStorageValue(getContext(), this.username, this.bundleName);\n          if (this.emailInfo !== '' && !res.test(this.emailInfo)) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.emailinfo'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    this.emailInfo = ''\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.passWord !== '' && this.passWord.length < 6) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.min_password'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.passWord !== '' && this.passWord === userPassWord) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.userpassword'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.confirmPassword !== this.passWord) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.password_error'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.passWord !== '' && this.confirmPassword !== '') {\n            await this.storage.putStorageValue(getContext(), this.username, this.passWord, this.bundleName)\n            let email = await this.getInfo('', `${this.username}_${this.bundleName}`, `email_${this.bundleName}`)\n            let signature = await this.getInfo('', `${this.username}_${this.bundleName}`, `signature_${this.bundleName}`)\n            AlertDialog.show(\n              {\n                message: $r('app.string.modify_info'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    router.replaceUrl({\n                      url: 'pages/Account',\n                      params: {\n                        email: email,\n                        signature: signature,\n                        bundleName: this.bundleName,\n                        username: this.username\n                      }\n                    })\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          }\n          else {\n            let email = await this.getInfo('', `${this.username}_${this.bundleName}`, `email_${this.bundleName}`)\n            let signature = await this.getInfo('', `${this.username}_${this.bundleName}`, `signature_${this.bundleName}`)\n            AlertDialog.show(\n              {\n                message: $r('app.string.modify_info'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    router.replaceUrl({\n                      url: 'pages/Account',\n                      params: {\n                        email: email,\n                        signature: signature,\n                        bundleName: this.bundleName,\n                        username: this.username\n                      }\n                    })\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          }\n        })\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\NavigationBar.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      if (this.flag) {\n        Row() {\n          Row() {\n            Image($r('app.media.left'))\n              .objectFit(ImageFit.Contain)\n              .width('10%')\n            Text($r('app.string.back'))\n              .fontSize(18)\n              .textAlign(TextAlign.End)\n              .fontColor(Color.White)\n          }\n          .id('back')\n          .layoutWeight(1)\n          .onClick(() => {\n            AlertDialog.show(\n              {\n                title: $r('app.string.warning'),\n                message: $r('app.string.routerback'),\n                primaryButton: {\n                  value: $r('app.string.confirm'),\n                  action: () => {\n                    router.replaceUrl({\n                      url: this.url,\n                      params: {\n                        bundleName: this.bundleName,\n                        username: this.username,\n                        email: this.email,\n                        signature: this.signature\n                      }\n                    })\n                  }\n                },\n                secondaryButton: {\n                  value: $r('app.string.cancel'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          })\n\n          Text(this.title)\n            .fontSize(18)\n            .fontColor(Color.White)\n            .textAlign(TextAlign.Start)\n            .margin({ right: '5%' })\n        }\n        .height('8%')\n        .width('100%')\n        .padding({ left: 15 })\n        .backgroundColor('#0D9FFB')\n        .constraintSize({ minHeight: 50 })\n      } else {\n        Row() {\n          Text(this.title)\n            .fontSize(18)\n            .fontColor(Color.White)\n            .textAlign(TextAlign.Center)\n        }\n        .height('8%')\n        .width('100%')\n        .padding({ left: 15 })\n        .backgroundColor('#0D9FFB')\n        .constraintSize({ minHeight: 50 })\n      }\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\RegisterInfo.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text($r('app.string.appname'))\n          .margin(10)\n          .fontSize(18)\n          .width('25%')\n          .textAlign(TextAlign.End)\n        Text(this.bundleName)\n          .margin(10)\n          .width('55%')\n          .fontSize(20)\n          .textAlign(TextAlign.Center)\n      }\n      .margin(5)\n\n      LazyForEach(this.dataSet, (item: DataArray, index: number) => {\n        Row() {\n          Text(item.text)\n            .margin(10)\n            .fontSize(18)\n            .width('25%')\n            .textAlign(TextAlign.End)\n            .backgroundColor('#ffffff')\n          Column() {\n            Text(item.promptText)\n              .fontSize(14)\n              .width('80%')\n              .fontColor('#ffb0b0b0')\n              .textAlign(TextAlign.Center)\n\n            TextInput({ placeholder: 'xxxxx' })\n              .id('Register' + (index + 1))\n              .margin(10)\n              .width('55%')\n              .fontSize(20)\n              .maxLength(20)\n              .type(item.inputType)\n              .maxLength(item.length)\n              .inputFilter(item.inputFilter)\n              .fontWeight(FontWeight.Bold)\n              .placeholderFont({ size: 16, weight: FontWeight.Normal })\n              .onChange(async (value: string) => {\n                switch (item.event) {\n                  case 0:\n                    this.username = value\n                    break\n                  case 1:\n                    this.emailInfo = value\n                    break\n                  case 2:\n                    this.signature = value\n                    break\n                  case 3:\n                    this.passWord = value\n                    break\n                  case 4:\n                    this.confirmPassword = value\n                    break\n                  default:\n                    break\n                }\n              })\n          }\n        }\n        .margin(5)\n      }, (item: DataArray) => JSON.stringify(item))\n\n      Button($r('app.string.setting'))\n        .id('complete')\n        .margin(10)\n        .width('60%')\n        .fontSize(20)\n        .fontColor(Color.White)\n        .type(ButtonType.Capsule)\n        .onClick(async () => {\n          let res: RegExp = new RegExp(`^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z0-9]{2,6}`);\n          let result: boolean = await this.storage.hasStorageValue(getContext(), this.username, this.bundleName);\n          Logger.info(TAG, `This result is ${result}`);\n          if (this.username === '') {\n            AlertDialog.show(\n              {\n                message: $r('app.string.blank'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (result) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.has'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.emailInfo !== '' && !res.test(this.emailInfo)) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.emailinfo'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.passWord === '') {\n            AlertDialog.show(\n              {\n                message: $r('app.string.password_blank'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.passWord !== '' && this.passWord.length < 6) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.min_password'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else if (this.confirmPassword !== this.passWord) {\n            AlertDialog.show(\n              {\n                message: $r('app.string.password_error'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    Logger.info(TAG, `AlertDialog enter`)\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          } else {\n            if (this.username !== '') {\n              await this.accountModel.addAccount(`${this.username}_${this.bundleName}`)\n            }\n            if (this.emailInfo !== '') {\n              await this.accountModel.setAccountCredential(`${this.username}_${this.bundleName}`, `email_${this.bundleName}`, this.emailInfo)\n            }\n            if (this.signature !== '') {\n              await this.accountModel.setAccountCredential(`${this.username}_${this.bundleName}`, `signature_${this.bundleName}`, this.signature)\n            }\n            await this.accountModel.setAssociatedData(`${this.username}_${this.bundleName}`, `key_${this.bundleName}`, this.passWord)\n            await this.storage.putStorageValue(getContext(), this.username, this.passWord, this.bundleName)\n            await this.storage.putStorageValue(getContext(), this.bundleName, 'true', `${this.username}_${this.bundleName}`)\n            AlertDialog.show(\n              {\n                message: $r('app.string.register_info'),\n                confirm: {\n                  value: $r('app.string.close'),\n                  action: () => {\n                    router.replaceUrl({\n                      url: 'pages/Login',\n                      params: {\n                        bundleName: this.bundleName\n                      }\n                    })\n                  }\n                },\n                cancel: () => {\n                  Logger.info(TAG, `AlertDialog close`)\n                }\n              })\n          }\n        })\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Account.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      NavigationBar({ title: $r('app.string.account'), flag: false })\n\n      AccountInfo({\n        email: this.email,\n        username: this.username,\n        signature: this.signature,\n        bundleName: this.bundleName\n      })\n    }\n    .width('100%')\n    .height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      NavigationBar({ title: $r('app.string.entry_MainAbility'), flag: false })\n\n      BundleInfo()\n    }\n    .width('100%')\n    .height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Login.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      NavigationBar({ title: $r('app.string.register_login'), flag: true, url: 'pages/Index' })\n\n      LoginInfo({ bundleName: this.bundleName })\n    }\n    .width('100%')\n    .height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Modify.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll() {\n      Column() {\n        NavigationBar({\n          title: $r('app.string.modify'),\n          flag: true,\n          url: 'pages/Account',\n          username: this.username,\n          bundleName: this.bundleName,\n          email: this.email,\n          signature: this.signature\n        })\n\n        ModifyInfo({ bundleName: this.bundleName, username: this.username })\n      }\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Register.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll() {\n      Column() {\n        NavigationBar({ title: $r('app.string.register'), flag: true, url: 'pages/Login', bundleName: this.bundleName })\n\n        RegisterInfo({ bundleName: this.bundleName })\n      }\n    }\n  }"
        }
    ]
}