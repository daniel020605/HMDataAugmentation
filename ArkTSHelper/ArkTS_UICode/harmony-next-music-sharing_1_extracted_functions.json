{
    "entry\\src\\main\\ets\\component\\AnimatedDots.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Circle()\n        .width(4)\n        .height(4)\n        .margin({ left: 2 })\n        .fill(Color.White)\n        .scale({ y: this.scale1 })\n      Circle()\n        .width(4)\n        .height(4)\n        .margin({ left: 2 })\n        .fill(Color.White)\n        .scale({ y: this.scale2 })\n      Circle()\n        .width(4)\n        .height(4)\n        .margin({ left: 2 })\n        .fill(Color.White)\n        .scale({ y: this.scale3 })\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\ArtistCircleCard.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column({ space: 8 }) {\n      // 圆形图片容器\n      Stack() {\n        // 主图片层\n        Image(this.imageUrl)\n          .width('100%')\n          .height('100%')\n          .objectFit(ImageFit.Cover)\n      }\n      .width(this.sizeCard)\n      .aspectRatio(1)\n      .clip(true)\n      .borderRadius(\"100%\")\n      .backgroundColor($r('app.color.artist_card_placeholder'))\n\n      // 艺人名称\n      Text(this.name)\n        .fontSize(14)\n        .fontWeight(StyleConstants.FONT_WEIGHT_SEVEN)\n        .fontColor($r('app.color.artist_name'))\n        .maxLines(1)\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\n        .width(this.sizeCard)\n        .textAlign(TextAlign.Center)\n    }\n    .alignItems(HorizontalAlign.Center)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\DailyRecommendCard.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Stack({ alignContent: Alignment.Start }) {\n        // 背景图层\n        Stack() {\n          Image(this.randomCover)\n            .width(\"120%\")\n            .height(\"120%\")\n            .objectFit(ImageFit.Cover)\n            .translate({ x: this.offsetX, y: this.offsetY })\n            .blur(1)\n        }\n        .width(StyleConstants.FULL_WIDTH)\n        .height(StyleConstants.FULL_HEIGHT)\n\n        // 内容层\n        Column() {\n          Text('今日推荐')\n            .fontSize(20)\n            .fontWeight(StyleConstants.FONT_WEIGHT_SEVEN)\n            .fontColor(Color.White)\n            .padding({ left: 12, top: 12 })\n        }\n        .width(StyleConstants.FULL_WIDTH)\n        .alignItems(HorizontalAlign.Start)\n      }\n      .width(StyleConstants.FULL_WIDTH)\n      .height(StyleConstants.FULL_HEIGHT)\n    }\n    .width(\"100%\")\n    .height(100)\n    .clip(true)\n    .borderRadius(16)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\HorizontalScroll.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll() {\n      Row() {\n        this.content()\n      }\n      .padding(16)\n      .alignItems(VerticalAlign.Top)\n      .justifyContent(FlexAlign.Start)\n    }\n    .scrollBar(BarState.Off)\n    .scrollable(ScrollDirection.Horizontal)\n    .width(StyleConstants.FULL_WIDTH)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\LyricDisplay.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      Column() {\n        if (this.parsedLyrics.length === 0) {\n          Text('暂无歌词')\n            .fontSize(this.baseFontSize.getValue(this.currentBreakpoint) * this.fontSize)\n            .fontColor($r('app.color.text_secondary'))\n            .margin(16)\n        } else {\n          List({ scroller: this.scroller }) {\n            ListItem().height(160)\n\n            ForEach(this.parsedLyrics, (item: Lyric, index) => {\n              ListItem() {\n                Column() {\n                  Text(item.text)\n                    .fontSize(this.getHighlightStyle(index).fontSize)\n                    .fontWeight(this.getHighlightStyle(index).fontWeight)\n                    .fontColor(this.getHighlightStyle(index).fontColor)\n                    .margin({ top: 8, bottom: item.translation ? 4 : 8 })\n                    .textAlign(TextAlign.Start)\n                    .alignSelf(ItemAlign.Start)\n                    .animation({\n                      duration: 300,\n                      curve: Curve.EaseInOut\n                    })\n                    .onClick(() => {\n                      this.playerManager.getAVPlayerInstance().then(player => {\n                        player.seek(item.time)\n                      })\n                    })\n\n                  if (item.translation) {\n                    Text(item.translation)\n                      .fontSize(this.baseFontSizeTranslation.getValue(this.currentBreakpoint) * this.fontSize)\n                      .fontWeight(this.getHighlightStyle(index).fontWeight)\n                      .fontColor(this.getHighlightStyle(index).fontColor)\n                      .margin({ bottom: 8 })\n                      .textAlign(TextAlign.Start)\n                      .alignSelf(ItemAlign.Start)\n                      .animation({\n                        duration: 300,\n                        curve: Curve.EaseInOut\n                      })\n                      .onClick(() => {\n                        this.playerManager.getAVPlayerInstance().then(player => {\n                          player.seek(item.time)\n                        })\n                      })\n                  }\n                }\n                .width('100%')\n                .alignItems(HorizontalAlign.Start)\n                .padding({ left: 32, right: 32 })\n                .backgroundColor(this.getHighlightStyle(index).background)\n                .borderRadius(8)\n                .animation({\n                  duration: 300,\n                  curve: Curve.EaseInOut\n                })\n              }\n            })\n          }\n          .width('100%')\n          .layoutWeight(1)\n          .scrollBar(BarState.Off)\n          .onWillScroll((scrollOffset: number, scrollState: ScrollState) => {\n            this.isUserScrolling = true\n            if (this.userScrollTimer !== -1) {\n              clearTimeout(this.userScrollTimer)\n            }\n            this.userScrollTimer = setTimeout(() => {\n              this.isUserScrolling = false\n            }, 3000)\n          })\n        }\n      }\n      .width('100%')\n      .height('100%')\n\n      // 固定在底部的字号控制栏\n      Column() {\n        this.FontSizeControls()\n      }\n      .position({ x: 0, y: '100%' })\n      .translate({ y: -16 })  // 控制栏高度\n      .width('100%')\n    }\n    .width('100%')\n    .height('100%')\n  }"
        },
        {
            "function_name": "FontSizeControls",
            "content": "@Builder\n  FontSizeControls() {\n    Row() {\n      Button({ type: ButtonType.Circle, stateEffect: true }) {\n        Image($r('app.media.ic_font_decrease'))\n          .width(24)\n          .height(24)\n          .fillColor(\"rgba(255, 255, 255, 0.5)\")\n      }\n      .width(36)\n      .height(36)\n      .backgroundColor(Color.Transparent)\n      .enabled(this.fontSize > 0.6)\n      .onClick(() => {\n        this.fontSize = Math.max(0.8, this.fontSize - 0.2)\n        PreferencesUtil.put(\"lyricSize\", this.fontSize)\n      })\n\n      Text()\n        .width(1)\n        .height(24)\n        .backgroundColor($r('app.color.border_color'))\n        .margin({ left: 6, right: 6 })\n        .opacity(0.6)\n\n      Button({ type: ButtonType.Circle, stateEffect: true }) {\n        Image($r('app.media.ic_font_increase'))\n          .width(24)\n          .height(24)\n          .fillColor(\"rgba(255, 255, 255, 0.5)\")\n      }\n      .width(36)\n      .height(36)\n      .backgroundColor(Color.Transparent)\n      .enabled(this.fontSize < 5)\n      .onClick(() => {\n        this.fontSize = Math.min(5, this.fontSize + 0.2)\n        PreferencesUtil.put(\"lyricSize\", this.fontSize)\n      })\n    }\n    .height(48)\n    .width('100%')\n    .justifyContent(FlexAlign.End)\n    .backgroundColor(Color.Transparent)\n    .borderRadius({ topLeft: 12, topRight: 12 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\PersonalFMCard.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Stack({ alignContent: Alignment.Start }) {\n        // 渐变背景\n        Column()\n          .width(StyleConstants.FULL_WIDTH)\n          .height(StyleConstants.FULL_HEIGHT)\n          .linearGradient({\n            angle: 145,\n            colors: this.gradientColors,\n            repeating: false\n          })\n          .blur(20)\n\n        // 内容层\n        Row() {\n          Column() {\n            Text('私人FM')\n              .fontSize(20)\n              .fontWeight(StyleConstants.FONT_WEIGHT_SEVEN)\n              .fontColor(Color.White)\n              .margin({ bottom: 8 })\n\n            Row() {\n              Text(this.isPlaying ? '正在播放' : '点击开启')\n                .fontSize(14)\n                .fontWeight(StyleConstants.FONT_WEIGHT_FOUR)\n                .fontColor('rgba(255, 255, 255, 0.8)')\n\n              if (this.isPlaying) {\n                AnimatedDots()\n                  .margin({ left: 8 })\n              }\n            }\n          }\n          .alignItems(HorizontalAlign.Start)\n          .layoutWeight(1)\n\n          // 右侧按钮\n          Column() {\n            Button() {\n              Image(this.isPlaying ? $r('app.media.ic_pause_round_triangle_fill') : $r('app.media.ic_play_circle_fill'))\n                .width(24)\n                .height(24)\n                .fillColor(Color.White)\n            }\n            .width(40)\n            .height(40)\n            .backgroundColor('rgba(255, 255, 255, 0.2)')\n            .borderRadius(20)\n          }\n          .justifyContent(FlexAlign.Center)\n        }\n        .width(StyleConstants.FULL_WIDTH)\n        .height(StyleConstants.FULL_HEIGHT)\n        .padding({\n          left: 16,\n          right: 16,\n          top: 12,\n          bottom: 12\n        })\n        .onClick(() => this.handleClick())\n      }\n      .width(StyleConstants.FULL_WIDTH)\n      .height(StyleConstants.FULL_HEIGHT)\n    }\n    .width(\"100%\")\n    .height(100)\n    .clip(true)\n    .borderRadius(16)\n    .backdropBlur(12)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\PersonFavorite.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Stack({ alignContent: Alignment.Start }) {\n        // 渐变背景\n        Column()\n          .width(StyleConstants.FULL_WIDTH)\n          .height(StyleConstants.FULL_HEIGHT)\n          .linearGradient({\n            angle: 145,\n            colors: this.gradientColors,\n            repeating: false\n          })\n          .blur(20)\n\n        // 内容层\n        Column() {\n          // 标语\n          if (this.hitokoto) {\n            Column() {\n              Text(this.hitokoto)\n                .fontSize(12)\n                .fontWeight(FontWeight.Normal)\n                .fontColor('rgba(255, 255, 255, 0.9)')\n                .textAlign(TextAlign.End)\n                .padding({ bottom: 4 })\n\n              Text(`—— ${this.from}`)\n                .fontSize(10)\n                .fontWeight(FontWeight.Normal)\n                .fontColor('rgba(255, 255, 255, 0.6)')\n                .textAlign(TextAlign.End)\n            }\n            .width('100%')\n            .alignItems(HorizontalAlign.End)\n            .padding({ left: 12, right: 12, top: 8 })\n          }\n\n          Row() {\n            // 标题\n            Text('我喜欢的')\n              .fontSize(20)\n              .fontWeight(StyleConstants.FONT_WEIGHT_SEVEN)\n              .fontColor(Color.White)\n              .padding(16)\n\n            // 底部统计信息\n            if (this.count !== null) {\n              Text(`${this.count} 首`)\n                .fontSize(14)\n                .fontColor('rgba(255, 255, 255, 0.8)')\n                .padding(16)\n            }\n          }\n          .width(StyleConstants.FULL_WIDTH)\n          .justifyContent(FlexAlign.SpaceBetween)\n        }\n        .width(StyleConstants.FULL_WIDTH)\n        .height(StyleConstants.FULL_HEIGHT)\n        .alignItems(HorizontalAlign.Start)\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .width(StyleConstants.FULL_WIDTH)\n      .height(StyleConstants.FULL_HEIGHT)\n    }\n    .width(\"90%\")\n    .height(140)\n    .clip(true)\n    .borderRadius(16)\n    .backdropBlur(12)\n    .margin({ top: 16 })\n    .justifyContent(FlexAlign.Center)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\PlaybackControlBar.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      // 背景色\n      Column()\n        .width('100%')\n        .height('100%')\n        .backgroundColor($r('app.color.playbar_background'))\n\n      Column({ space: 4 }) {\n        // 主控制栏\n        Row() {\n          // 封面图\n          Image(cover(this.track?.track.al.picUrl ?? \"\", 512))\n            .width(52)\n            .height(52)\n            .borderRadius(8)\n\n          // 标题和艺术家信息\n          Column() {\n            Text(this.track?.track.name ?? \"\")\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.song_title'))\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n            Text(this.track?.track.ar.map(item => item.name).join(\" / \") ?? \"\")\n              .fontSize(13)\n              .fontColor($r('app.color.song_artist'))\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n          }\n          .layoutWeight(1)\n          .alignItems(HorizontalAlign.Start)\n          .margin({ left: 12 })\n\n          // 控制按钮组\n          Row({ space: 4 }) {\n            // 上一首\n            Button({ type: ButtonType.Circle }) {\n              Image($r('app.media.ic_prev'))\n                .width(22)\n                .height(22)\n                .fillColor($r('app.color.song_title'))\n            }\n            .width(36)\n            .height(36)\n            .backgroundColor($r('app.color.control_button_bg'))\n            .onClick(() => {\n              globalPlaylist.playPrevious()\n            })\n\n            // 播放/暂停\n            Button({ type: ButtonType.Circle }) {\n              Image(this.isPlaying ? $r('app.media.ic_pause') : $r('app.media.ic_play'))\n                .width(28)\n                .height(28)\n                .fillColor($r('app.color.song_title'))\n            }\n            .width(44)\n            .height(44)\n            .backgroundColor($r('app.color.control_button_bg'))\n            .onClick(() => {\n              if (this.isPlaying) {\n                this.playerManager.pause()\n              } else {\n                this.playerManager.play()\n              }\n            })\n\n            // 下一首\n            Button({ type: ButtonType.Circle }) {\n              Image($r('app.media.ic_next'))\n                .width(22)\n                .height(22)\n                .fillColor($r('app.color.song_title'))\n            }\n            .width(36)\n            .height(36)\n            .backgroundColor($r('app.color.control_button_bg'))\n            .onClick(() => {\n              globalPlaylist.playNext()\n            })\n\n            // 播放列表按钮\n            Button({ type: ButtonType.Circle }) {\n              Image($r('app.media.ic_list'))\n                .width(22)\n                .height(22)\n                .fillColor($r('app.color.song_title'))\n            }\n            .width(36)\n            .height(36)\n            .margin({ left: 4 })\n            .backgroundColor($r('app.color.control_button_bg'))\n            .onClick(() => {\n              if (globalPlaylist.playType == PlayType.PERSONAL_FM) {\n                promptAction.showToast({ message: \"当前模式下需要保留一点神秘感哦！\" })\n                return\n              }\n              this.showPlaylist = true\n            })\n          }\n          .margin({ right: 12 })\n        }\n        .width('100%')\n        .height(52)\n        .padding({ left: 16, right: 4, top: 16 })\n        .justifyContent(FlexAlign.Center)\n\n        // 进度条\n        this.ProgressBar()\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.SpaceBetween)\n    }\n    .width('100%')\n    .height(84)\n    .zIndex(999)\n    .onClick(() => {\n      router.pushUrl({\n        url: \"pages/Playing\",\n      })\n    })\n    .bindSheet($$this.showPlaylist, this.PlayListBuilder(), {\n      showClose: false,\n      detents: [SheetSize.MEDIUM, SheetSize.LARGE],\n      dragBar: false,\n      scrollSizeMode: ScrollSizeMode.CONTINUOUS,\n      backgroundColor: $r('app.color.playlist_bg'),\n      preferType: SheetType.BOTTOM,\n    })\n  }"
        },
        {
            "function_name": "PlayListBuilder",
            "content": "@Builder\n  PlayListBuilder() {\n    Column() {\n      PlayList({ showPlaylist: $showPlaylist })\n    }\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "ProgressBar",
            "content": "@Builder\n  ProgressBar() {\n    Row() {\n      Row({ space: 8 }) {\n        Text(this.formatTime(this.currentTime))\n          .fontSize(12)\n          .fontColor($r('app.color.time_text'))\n          .margin({ top: 2 })\n\n        Slider({\n          value: this.currentTime,\n          max: this.duration || 100,\n          step: 1,\n          style: SliderStyle.NONE\n        })\n          .trackThickness(this.isProgressBarExpanded ? 12 : 4)\n          .selectedColor($r('app.color.progress_thumb'))\n          .trackColor($r('app.color.progress_track'))\n          .width(\"70%\")\n          .onChange((value: number) => {\n            this.currentTime = value\n          })\n          .onTouch((event) => {\n            if (event.type === TouchType.Down) {\n              this.isProgressBarExpanded = true\n            } else if (event.type === TouchType.Up) {\n              this.isProgressBarExpanded = false\n              this.playerManager.getAVPlayerInstance().then(player => {\n                player.seek(this.currentTime)\n              })\n            }\n          })\n\n        Text(this.formatTime(this.duration))\n          .fontSize(12)\n          .fontColor($r('app.color.time_text'))\n          .margin({ top: 2 })\n      }\n      .justifyContent(FlexAlign.Center)\n      .width('100%')\n    }\n    .width('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\PlayList.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      // Header\n      Row() {\n        Text('当前播放列表')\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n          .fontColor($r('app.color.text_primary'))\n\n        Blank()\n\n        Button() {\n          Image($r('app.media.ic_close'))\n            .width(24)\n            .height(24)\n            .fillColor($r('app.color.icon_color'))\n        }\n        .width(36)\n        .height(36)\n        .type(ButtonType.Circle)\n        .backgroundColor($r('app.color.playlist_close_button_bg'))\n        .onClick(() => {\n          this.showPlaylist = false;\n        })\n      }\n      .width('100%')\n      .height(56)\n      .padding({ left: 16, right: 16 })\n      .backgroundColor($r('app.color.playlist_bg'))\n\n      // List\n      List({ space: 4, scroller: this.scroller }) {\n        LazyForEach(this.dataSource, (track: TrackAndPrivilege) => {\n          ListItem() {\n            SongListCard({\n              title: track.track.name,\n              tns: track.track.tns,\n              artist: track.track.ar,\n              index: globalPlaylist.getPlaylist().findIndex(item => item.track.id === track.track.id),\n              coverUrl: cover(track.track.al?.picUrl ?? \"\", 64),\n              active: this.track?.track.id === track.track.id,\n              disabled: !isTrackPlayableWithParams(track.track, track.privilege).isPlayable,\n              showIndex: false,\n            })\n              .onClick(() => {\n                const playableResult = isTrackPlayableWithParams(track.track, track.privilege);\n                if (!playableResult.isPlayable) {\n                  promptAction.showToast({ message: playableResult.reason })\n                  return\n                }\n                const globalIndex = globalPlaylist.getPlaylist()\n                  .findIndex(item => item.track.id === track.track.id);\n                if (globalIndex !== -1) {\n                  globalPlaylist.setCurrentSongIndex(globalIndex);\n                }\n              })\n          }\n          .reuseId('playlist')\n          .swipeAction({ end: this.DeleteButton(track) })\n          .animation({\n            duration: 300,\n            curve: Curve.EaseInOut\n          })\n        }, (track: TrackAndPrivilege) => track.track.id.toString())\n\n        // Loading indicator at the bottom\n        if (this.currentPage * this.PAGE_SIZE < globalPlaylist.getPlaylist().length) {\n          ListItem() {\n            this.LoadingRow()\n          }\n        }\n      }\n      .cachedCount(3)\n      .width('100%')\n      .layoutWeight(1)\n      .listDirection(Axis.Vertical)\n      .margin({ top: 8 })\n      .scrollBar(BarState.Off)\n      .onReachEnd(() => {\n        this.loadMoreData();\n      })\n    }\n    .width('100%')\n    .height('100%')\n  }"
        },
        {
            "function_name": "LoadingRow",
            "content": "@Builder\n  LoadingRow() {\n    Row() {\n      LoadingProgress()\n        .width(24)\n        .height(24)\n        .color($r('app.color.loading_color'))\n      Text('加载中...')\n        .fontSize(14)\n        .fontColor($r('app.color.text_tertiary'))\n        .margin({ left: 8 })\n    }\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n    .padding(16)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\PlayListCard.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      Column() {\n        Row() {\n          // 序号\n          Column() {\n            Text((this.index + 1).toString())\n              .fontSize(16)\n              .fontColor($r('app.color.playlist_index'))\n              .width(36)\n              .textAlign(TextAlign.Center)\n          }\n          .height('100%')\n          .justifyContent(FlexAlign.Center)\n\n          // 封面图\n          Image(this.coverUrl)\n            .width(this.coverSize)\n            .height(this.coverSize)\n            .borderRadius(8)\n            .margin({ left: 8 })\n            .objectFit(ImageFit.Cover)\n\n          // 标题和创建者信息\n          Column() {\n            Text(`${this.count}首`)\n              .fontSize(12)\n              .fontWeight(StyleConstants.FONT_WEIGHT_FIVE)\n              .fontColor($r('app.color.playlist_count'))\n              .maxLines(1)\n              .padding({ right: 12 })\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n            Text(this.title)\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.text_primary'))\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n            Row() {\n              Text(this.creator)\n                .fontSize(14)\n                .fontColor($r('app.color.playlist_creator'))\n                .maxLines(1)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n            }\n            .margin({ top: 4 })\n          }\n          .layoutWeight(1)\n          .margin({ left: 12 })\n          .alignItems(HorizontalAlign.Start)\n          .justifyContent(FlexAlign.Center)\n\n          // 右侧插槽\n          if (this.rightSlot) {\n            Column() {\n              this.rightSlot()\n            }\n            .height('100%')\n            .justifyContent(FlexAlign.Center)\n          }\n        }\n        .width('100%')\n        .height(80)\n        .padding({ left: 12, right: 16 })\n        .borderRadius(16)\n      }\n      .width('100%')\n      .backgroundColor(Color.Transparent)\n      .borderRadius(16)\n      .shadow({\n        radius: 20,\n        color: $r('app.color.playlist_card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n      .backdropBlur(8)\n      .margin({\n        left: 16,\n        right: 16,\n        top: 8,\n        bottom: 8\n      })\n    }\n    .width('100%')\n    .animation({\n      duration: 200,\n      curve: Curve.EaseOut\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\PlaylistSelector.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text('创建歌单')\n        .fontSize(20)\n        .fontWeight(FontWeight.Medium)\n        .margin({ bottom: 16, top: 8 })\n        .width('100%')\n        .fontColor($r('app.color.text_primary'))\n\n      TextInput({\n        placeholder: '请输入歌单标题',\n      })\n        .onChange((value: string) => {\n          this.value = value\n        })\n        .width('100%')\n        .height(48)\n        .margin({ bottom: 24 })\n        .borderRadius(8)\n\n      Row({ space: 12 }) {\n        Button('取消', { type: ButtonType.Capsule })\n          .onClick(() => {\n            this.controller.close()\n            this.cancel()\n          })\n          .backgroundColor(Color.Transparent)\n          .fontColor($r('app.color.text_secondary'))\n          .width(100)\n\n        Button('确定', { type: ButtonType.Capsule })\n          .onClick(() => {\n            if (!this.value) {\n              promptAction.showToast({ message: '请输入歌单标题' })\n              return\n            }\n            this.confirm(this.value)\n            this.controller.close()\n          })\n          .width(100)\n      }\n    }\n    .backgroundColor($r('app.color.dialog_background'))\n    .width('100%')\n    .expandSafeArea()\n    .padding(24)\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      this.HeaderButton()\n\n      List({ space: 8 }) {\n        ForEach(this.getCreatedPlaylists(), (item: Playlist) => {\n          ListItem() {\n            this.PlaylistItem(item)\n          }\n        })\n      }\n      .scrollBar(BarState.Off)\n      .width('100%')\n      .layoutWeight(1)\n    }\n    .width('100%')\n    .height('100%')\n    .padding(16)\n  }"
        },
        {
            "function_name": "HeaderButton",
            "content": "@Builder\n  HeaderButton() {\n    Button({ type: ButtonType.Normal }) {\n      Row() {\n        Image($r('app.media.ic_plus'))\n          .width(20)\n          .height(20)\n          .fillColor($r('app.color.text_primary'))\n          .margin({ right: 8 })\n        Text('新建歌单')\n          .fontSize(16)\n          .fontColor($r('app.color.text_primary'))\n      }\n      .width('100%')\n      .justifyContent(FlexAlign.Start)\n    }\n    .backgroundColor(Color.Transparent)\n    .height(48)\n    .padding(16)\n    .borderRadius(20)\n    .width('100%')\n    .onClick(() => {\n      this.dialogController.open()\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\SearchBar.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack({ alignContent: Alignment.Start }) {\n      Row({ space: 8 }) {\n        Search({\n          value: this.searchText,\n          placeholder: this.placeholder,\n          controller: this.searchController,\n        })\n          .focusable(false)\n          .width(this.barWidth)\n          .height(40)\n          .placeholderColor($r('app.color.search_placeholder'))\n          .placeholderFont({ size: 16 })\n          .textFont({ size: 16 })\n          .fontColor($r('app.color.search_text'))\n          .backgroundColor($r('app.color.search_background'))\n          .borderRadius(8)\n          .onClick(() => {\n            router.pushUrl({\n              url: \"pages/CloudSearch\"\n            })\n          })\n          .onChange((value: string) => {\n            this.searchText = value\n          })\n          .onSubmit(() => {\n            this.onSearch?.(this.searchText)\n          })\n\n        if (this.rightSlot) {\n          this.rightSlot()\n        }\n      }\n      .expandSafeArea()\n      .width(StyleConstants.FULL_WIDTH)\n      .justifyContent(FlexAlign.SpaceBetween)\n      .padding({\n        left: 16,\n        right: 16,\n        top: 8,\n        bottom: 8\n      })\n    }\n    .width(StyleConstants.FULL_WIDTH)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\SongListCard.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        if (this.showIndex) {\n          // 序号\n          Stack({ alignContent: Alignment.Center }) {\n            // 毛玻璃背景\n            Column()\n              .width(36)\n              .height(36)\n              .borderRadius(8)\n              .backdropBlur(16)\n              .backgroundColor(!this.active ? $r('app.color.song_number_bg') : 'transparent')\n\n            // 序号文本\n            Text((this.index + 1).toString())\n              .fontSize(14)\n              .fontColor(this.getTextColor($r('app.color.song_number_text_normal')))\n              .fontWeight(FontWeight.Medium)\n          }\n          .width(36)\n          .height(36)\n          .margin({ right: 16 })\n        }\n\n        // 封面图片\n        Image(this.coverUrl)\n          .width(this.coverSize)\n          .height(this.coverSize)\n          .borderRadius(8)\n\n        // 标题和创建者信息\n        Column() {\n          Column() {\n            Text() {\n              Span(this.title)\n                .fontSize(16)\n                .fontWeight(FontWeight.Medium)\n                .fontColor(this.getTextColor($r('app.color.text_primary')))\n              if (this.tns) {\n                Span(`(${this.tns.join(\"/\")})`)\n                  .fontSize(16)\n                  .fontWeight(FontWeight.Medium)\n                  .fontColor(this.getTextColor($r('app.color.song_translation')))\n              }\n            }\n            .maxLines(1)\n            .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n            Text(this.artist.map(item => item.name).join(\"/\"))\n              .fontSize(14)\n              .fontColor(this.getTextColor($r('app.color.song_translation')))\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n              .alignSelf(ItemAlign.Start)\n          }\n          .alignItems(HorizontalAlign.Start)\n        }\n        .layoutWeight(1)\n        .margin({ left: 12 })\n        .alignItems(HorizontalAlign.Start)\n\n        // 右侧插槽\n        if (this.rightSlot) {\n          Row() {\n            this.rightSlot()\n          }\n          .height('100%')\n          .alignItems(VerticalAlign.Center)\n          .margin({ left: 12 })\n        }\n      }\n      .width(StyleConstants.FULL_WIDTH)\n      .height(this.active ? 80 : 64)\n      .padding({ left: 12, right: 16 })\n      .opacity(this.disabled ? 0.6 : 1)\n      .borderRadius(16)\n      .backgroundColor(this.active ? $r('app.color.song_active_bg') : 'transparent')\n      .animation({\n        duration: 200,\n        curve: Curve.EaseOut\n      })\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .padding(this.active ? 8 : 0)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\TimerSelector.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text('自定义时间')\n        .fontSize(20)\n        .fontWeight(FontWeight.Medium)\n        .margin({ bottom: 16, top: 8 })\n        .width('100%')\n        .fontColor($r('app.color.text_primary'))\n\n      TextInput({\n        placeholder: '请输入时间（分钟）',\n      })\n        .onChange((value: string) => {\n          this.value = value\n        })\n        .type(InputType.Number)\n        .width('100%')\n        .height(48)\n        .margin({ bottom: 24 })\n        .borderRadius(8)\n        .backgroundColor($r('app.color.search_background'))\n\n      Row({ space: 12 }) {\n        Button('取消', { type: ButtonType.Capsule })\n          .onClick(() => {\n            this.controller.close()\n          })\n          .backgroundColor(Color.Transparent)\n          .fontColor($r('app.color.text_secondary'))\n          .width(100)\n\n        Button('确定', { type: ButtonType.Capsule })\n          .onClick(() => {\n            const minutes = parseInt(this.value)\n            if (!this.value || isNaN(minutes) || minutes <= 0) {\n              promptAction.showToast({ message: '请输入有效的时间' })\n              return\n            }\n            EventBus.send('SetTimer', minutes)\n            this.controller.close()\n          })\n          .width(100)\n      }\n    }\n    .backgroundColor($r('app.color.dialog_background'))\n    .width('100%')\n    .padding(24)\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text('定时关闭')\n          .fontSize(16)\n          .fontWeight(FontWeight.Medium)\n          .fontColor($r('app.color.text_primary'))\n\n        if (this.remainingTime !== '') {\n          Toggle({ type: ToggleType.Switch, isOn: true })\n            .onChange((isOn) => {\n              if (!isOn) {\n                EventBus.send('SetTimer', null)\n              }\n            })\n        }\n      }\n      .width('100%')\n      .justifyContent(FlexAlign.SpaceBetween)\n      .padding({ top: 8, bottom: 16 })\n\n      if (this.remainingTime) {\n        Text(this.remainingTime)\n          .fontSize(36)\n          .fontWeight(FontWeight.Bold)\n          .fontColor($r('app.color.text_primary'))\n          .margin({ bottom: 16 })\n      }\n\n      // 预设时间选项\n      Flex({ wrap: FlexWrap.Wrap, justifyContent: FlexAlign.SpaceBetween }) {\n        ForEach(this.timeOptions, (minutes: number) => {\n          this.TimeOption(minutes)\n        })\n      }\n      .padding({ top: 8, bottom: 8 })\n      .margin({ bottom: 24 })\n\n      // 自定义时间文本按钮\n      Text('自定义时间')\n        .fontColor($r('app.color.text_secondary'))\n        .fontSize(14)\n        .onClick(() => {\n          this.dialogController.open()\n        })\n        .margin({ bottom: 16 })\n    }\n    .width('100%')\n    .padding(16)\n    .backgroundColor($r('app.color.dialog_background'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\About.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      this.Header()\n      this.AppInfo()\n      this.Disclaimer()\n      this.Credits()\n\n      // Spacer\n      Blank()\n        .layoutWeight(1)\n\n      this.GitHubLink()\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .height(StyleConstants.FULL_HEIGHT)\n    .backgroundColor($r('app.color.page_background'))\n    .expandSafeArea()\n  }"
        },
        {
            "function_name": "Header",
            "content": "@Builder\n  Header() {\n    Row() {\n      Text('关于')\n        .fontSize(24)\n        .fontWeight(FontWeight.Bold)\n        .fontColor($r('app.color.text_primary'))\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .height(56)\n    .padding({ left: 16, right: 16 })\n  }"
        },
        {
            "function_name": "AppInfo",
            "content": "@Builder\n  AppInfo() {\n    Column() {\n      // App Icon\n      Image($r('app.media.icon'))\n        .width(80)\n        .height(80)\n        .borderRadius(16)\n        .margin({ top: 32, bottom: 16 })\n\n      // App Name\n      Text($r(\"app.string.EntryAbility_label\"))\n        .fontSize(24)\n        .fontWeight(FontWeight.Bold)\n        .fontColor($r('app.color.text_primary'))\n        .margin({ bottom: 8 })\n\n      // Version\n      Text(`版本 ${this.version}`)\n        .fontSize(14)\n        .fontColor($r('app.color.text_secondary'))\n        .margin({ bottom: 4 })\n\n      // Build Date\n      Text(`构建于 ${this.buildDate}`)\n        .fontSize(14)\n        .fontColor($r('app.color.text_secondary'))\n        .margin({ bottom: 32 })\n    }\n    .width('100%')\n    .alignItems(HorizontalAlign.Center)\n  }"
        },
        {
            "function_name": "Disclaimer",
            "content": "@Builder\n  Disclaimer() {\n    Column() {\n      Text('免责声明')\n        .fontSize(16)\n        .fontWeight(FontWeight.Medium)\n        .fontColor($r('app.color.text_primary'))\n        .margin({ bottom: 8 })\n\n      Text('此为第三方数据展示平台，一切信息均有你的API服务器提供返回而呈现，请合理开发API服务器。')\n        .fontSize(14)\n        .fontColor($r('app.color.text_secondary'))\n        .textAlign(TextAlign.Center)\n        .margin({ left: 32, right: 32 })\n        .lineHeight(20)\n    }\n    .width('100%')\n    .alignItems(HorizontalAlign.Center)\n    .padding({ top: 24, bottom: 24 })\n    .borderRadius(16)\n    .backgroundColor($r('app.color.card_background'))\n    .margin({ left: 16, right: 16 })\n  }"
        },
        {
            "function_name": "GitHubLink",
            "content": "@Builder\n  GitHubLink() {\n    Column() {\n      Text('开源项目地址')\n        .fontSize(14)\n        .fontColor($r('app.color.text_secondary'))\n        .margin({ bottom: 4 })\n\n      Text('github.com/Okysu/harmony-next-music-sharing')\n        .fontSize(14)\n        .fontColor($r('app.color.primary_blue'))\n        .fontWeight(FontWeight.Medium)\n    }\n    .width('100%')\n    .alignItems(HorizontalAlign.Center)\n    .margin({ bottom: 32 })\n  }"
        },
        {
            "function_name": "Credits",
            "content": "@Builder\n  Credits() {\n    Column() {\n      Text('鸣谢')\n        .fontSize(16)\n        .fontWeight(FontWeight.Medium)\n        .fontColor($r('app.color.text_primary'))\n        .margin({ bottom: 8 })\n\n      Text('Logo 设计：△皂')\n        .fontSize(14)\n        .fontColor($r('app.color.text_secondary'))\n        .textAlign(TextAlign.Center)\n        .margin({ left: 32, right: 32 })\n        .lineHeight(20)\n    }\n    .width('100%')\n    .alignItems(HorizontalAlign.Center)\n    .padding({ top: 24, bottom: 24 })\n    .borderRadius(16)\n    .backgroundColor($r('app.color.card_background'))\n    .margin({ left: 16, right: 16, top: 12 }) // 添加上边距，与免责声明保持间距\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\CloudSearch.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      Column() {\n        this.SearchHeader()\n\n        Stack() {\n          this.EmptyState()\n          this.LoadingState()\n          if (this.currentTab === 0) {\n            this.SearchResults()\n          } else {\n            this.PlaylistResults()\n          }\n        }\n        .layoutWeight(1)\n      }\n      .width('100%')\n      .height('100%')\n      .backgroundColor($r('app.color.search_background'))\n      .expandSafeArea()\n    }\n    .width('100%')\n    .height('100%')\n    .expandSafeArea()\n    .bindSheet($$this.showPlayListSelector, this.PlayList(), {\n      showClose: false,\n      detents: [SheetSize.MEDIUM, SheetSize.LARGE],\n      dragBar: false,\n      scrollSizeMode: ScrollSizeMode.CONTINUOUS,\n      backgroundColor: $r('app.color.playlist_bg'),\n      preferType: SheetType.BOTTOM,\n    })\n  }"
        },
        {
            "function_name": "PlayList",
            "content": "@Builder\n  PlayList() {\n    Column() {\n      PlaylistSelector({\n        onSelect: async (id: string | number) => {\n          await collectSong(id, [this.nowSelected])\n          promptAction.showToast({ message: \"已添加到收藏夹\" })\n          this.showPlayListSelector = false;\n        }\n      })\n    }\n    .expandSafeArea()\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "SearchHeader",
            "content": "@Builder\n  SearchHeader() {\n    Column() {\n      // 搜索框\n      Row() {\n        Search({\n          value: this.searchText,\n          placeholder: '搜索音乐、歌手、专辑、歌单',\n          controller: this.searchController\n        })\n          .width('100%')\n          .height(40)\n          .backgroundColor($r('app.color.search_background'))\n          .expandSafeArea()\n          .placeholderColor($r('app.color.search_placeholder'))\n          .fontColor($r('app.color.search_text'))\n          .placeholderFont({ size: 16 })\n          .textFont({ size: 16 })\n          .borderRadius(20)\n          .onChange((value: string) => {\n            this.searchText = value\n            this.debounce(() => {\n              this.fetchSuggestions(value)\n            })\n          })\n          .onSubmit(() => {\n            this.suggestions = []\n            this.handleSearch()\n          })\n      }\n      .width('100%')\n      .padding({\n        left: 16,\n        right: 16,\n        top: 8,\n        bottom: 8\n      })\n\n      // 搜索建议标签\n      if (this.suggestions.length > 0) {\n        Flex({\n          direction: FlexDirection.Row,\n          wrap: FlexWrap.Wrap\n        }) {\n          ForEach(this.suggestions, (item: SearchSuggest) => {\n            Text(item.keyword)\n              .fontSize(14)\n              .fontColor($r('app.color.text_secondary'))\n              .backgroundColor($r('app.color.search_background'))\n              .padding({\n                left: 12,\n                right: 12,\n                top: 6,\n                bottom: 6\n              })\n              .borderRadius(16)\n              .margin({ right: 8, bottom: 8 })\n              .opacity(this.animationState)\n              .animation({\n                duration: 200,\n                curve: Curve.EaseOut\n              })\n              .onClick(() => {\n                this.ignoreNextSuggestions = true\n                this.searchText = item.keyword\n                this.suggestions = []\n                this.handleSearch()\n              })\n          })\n        }\n        .width('100%')\n        .padding({ left: 16, right: 16, bottom: 8 })\n        .opacity(this.animationState)\n        .animation({\n          duration: 200,\n          curve: Curve.EaseOut\n        })\n      }\n\n      // 分类标签\n      Row() {\n        Row() {\n          ForEach(this.tabs, (tab: TabItem, index: number) => {\n            Text(tab.name)\n              .fontSize(14)\n              .fontWeight(FontWeight.Medium)\n              .height(32)\n              .padding({ left: 16, right: 16 })\n              .backgroundColor(this.currentTab === index ? $r('app.color.primary_blue') : Color.Transparent)\n              .borderRadius(16)\n              .fontColor(this.currentTab === index ? Color.White : $r('app.color.text_secondary'))\n              .textAlign(TextAlign.Center)\n              .margin({ right: index === this.tabs.length - 1 ? 0 : 8 })\n              .onClick(() => {\n                if (this.currentTab !== index) {\n                  animateTo({ duration: 250, curve: Curve.EaseOut }, () => {\n                    this.currentTab = index\n                    this.handleSearch()\n                  })\n                }\n              })\n          })\n        }\n        .padding(4)\n        .borderRadius(20)\n        .backgroundColor($r('app.color.button_ghost_background'))\n      }\n      .width('100%')\n      .padding({ left: 16, right: 16, bottom: 8 })\n      .justifyContent(FlexAlign.Start)\n    }\n    .width('100%')\n    .backgroundColor($r('app.color.card_background'))\n    .expandSafeArea()\n  }"
        },
        {
            "function_name": "PlaylistResults",
            "content": "@Builder\n  PlaylistResults() {\n    if (!this.isLoading && this.showResults && this.playlistResults?.length > 0) {\n      List({ space: 4 }) {\n        ListItem() {\n          Text('歌单')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .padding({ left: 16, top: 8, bottom: 8 })\n        }\n\n        ForEach(this.playlistResults, (playlist: Playlist, index: number) => {\n          ListItem() {\n            PlaylistCard({\n              count: playlist.trackCount,\n              coverUrl: playlist.coverImgUrl,\n              title: playlist.name,\n              creator: playlist.creator.nickname,\n              index: index\n            })\n              .onClick(() => {\n                AppStorage.setOrCreate(\"CollectionId\", playlist.id);\n                router.pushUrl({\n                  url: \"pages/Collection\",\n                });\n              })\n          }\n        })\n\n        ListItem() {\n          this.LoadMoreIndicator()\n        }\n      }\n      .scrollBar(BarState.Off)\n      .width('100%')\n      .layoutWeight(1)\n      .onReachEnd(() => {\n        if (this.hasMore && !this.isLoadingMore) {\n          this.handleSearch(true)\n        }\n      })\n      .expandSafeArea()\n    }\n  }"
        },
        {
            "function_name": "LoadingState",
            "content": "@Builder\n  LoadingState() {\n    if (this.isLoading) {\n      Column() {\n        LoadingProgress()\n          .width(48)\n          .height(48)\n          .color($r('app.color.primary_blue'))\n        Text('搜索中...')\n          .fontSize(14)\n          .fontColor($r('app.color.text_secondary'))\n          .margin({ top: 12 })\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center)\n    }\n  }"
        },
        {
            "function_name": "LoadMoreIndicator",
            "content": "@Builder\n  LoadMoreIndicator() {\n    if (this.isLoadingMore) {\n      Row() {\n        LoadingProgress()\n          .width(24)\n          .height(24)\n          .color($r('app.color.text_secondary'))\n        Text('加载更多...')\n          .fontSize(14)\n          .fontColor($r('app.color.text_secondary'))\n          .margin({ left: 8 })\n      }\n      .width('100%')\n      .height(48)\n      .justifyContent(FlexAlign.Center)\n    } else if (!this.hasMore && (this.searchResults.length > 0 || this.playlistResults.length > 0)) {\n      Row() {\n        Text('没有更多了')\n          .fontSize(14)\n          .fontColor($r('app.color.text_tertiary'))\n      }\n      .width('100%')\n      .height(48)\n      .justifyContent(FlexAlign.Center)\n    }\n  }"
        },
        {
            "function_name": "EmptyState",
            "content": "@Builder\n  EmptyState() {\n    if (!this.searchText) {\n      Column() {\n        Text('搜索你想听的')\n          .fontSize(16)\n          .fontColor($r('app.color.text_secondary'))\n          .margin({ top: 16 })\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center)\n    } else if (this.showResults && (!this.searchResults || this.searchResults.length === 0) &&\n      (!this.playlistResults || this.playlistResults.length === 0)) {\n      Column() {\n        Image($r('app.media.ic_brush'))\n          .width(120)\n          .height(120)\n          .fillColor($r('app.color.icon_color'))\n          .opacity(0.5)\n        Text('暂无搜索结果')\n          .fontSize(16)\n          .fontColor($r('app.color.text_secondary'))\n          .margin({ top: 16 })\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center)\n    }\n  }"
        },
        {
            "function_name": "SearchResults",
            "content": "@Builder\n  SearchResults() {\n    if (!this.isLoading && this.showResults && this.searchResults?.length > 0) {\n      List({ space: 4 }) {\n        ListItem() {\n          Text('搜索结果')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .padding({ left: 16, top: 8, bottom: 8 })\n        }\n\n        ForEach(this.searchResults, (song: SongDetail, index: number) => {\n          ListItem() {\n            SongListCard({\n              title: song.name,\n              artist: song.ar as ESObject as Artist[],\n              coverUrl: cover(song.al.picUrl, 100),\n              index,\n              coverSize: 56,\n              tns: song.tns,\n              disabled: !isTrackPlayableWithParams(song as ESObject as Track, song.privilege as ESObject as Privilege)\n                .isPlayable,\n              active: (!!this.track && this.track.track.id == song.id) ?? false,\n              rightSlot: () => {\n                this.MoreActions(song)\n              }\n            })\n              .onClick(() => {\n                if (this.searchResults && this.searchResults.length > 0) {\n                  const info = new TrackAndPrivilege()\n                  info.track = song as ESObject as Track\n                  info.privilege = song.privilege as ESObject as Privilege\n                  const playableResult = isTrackPlayableWithParams(info.track, info.privilege)\n                  if (!playableResult.isPlayable) {\n                    promptAction.showToast({ message: playableResult.reason })\n                    return\n                  }\n                  globalPlaylist.insertTop(info)\n                  AppStorage.setOrCreate(\"Track\", info);\n                  router.pushUrl({\n                    url: 'pages/Playing'\n                  }, router.RouterMode.Single)\n                }\n              })\n          }.expandSafeArea()\n        })\n\n        ListItem() {\n          this.LoadMoreIndicator()\n        }\n      }\n      .scrollBar(BarState.Off)\n      .width('100%')\n      .layoutWeight(1)\n      .onReachEnd(() => {\n        if (this.hasMore && !this.isLoadingMore) {\n          this.handleSearch(true)\n        }\n      })\n      .expandSafeArea()\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Collection.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Image(this.basePlayListInfo ? cover(this.basePlayListInfo.coverImgUrl, 512) : '')\n        .width(StyleConstants.FULL_WIDTH)\n        .height(260)\n        .blur(20)\n        .opacity(0.6)\n        .backgroundColor($r('app.color.skeleton_background'))\n        .position({ x: 0, y: 0 })\n        .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])\n\n      if (this.loadingPlaylist) {\n        this.SkeletonLoading()\n      } else {\n        Column() {\n          if (this.isSelectMode) {\n            this.SelectModeTopBar()\n          }\n\n          Row() {\n            Image(this.basePlayListInfo ? cover(this.basePlayListInfo.coverImgUrl, 512) : '')\n              .width(120)\n              .height(120)\n              .borderRadius(12)\n              .margin({ right: 16 })\n              .shadow({\n                radius: 12,\n                color: '#00000020',\n                offsetX: 0,\n                offsetY: 2\n              })\n\n            Column() {\n              Text(this.basePlayListInfo?.name ?? '')\n                .fontSize(22)\n                .fontWeight(FontWeight.Bold)\n                .maxLines(2)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n              Row() {\n                Image(this.basePlayListInfo?.creator?.avatarUrl ?? '')\n                  .width(24)\n                  .height(24)\n                  .borderRadius(12)\n                  .margin({ right: 8 })\n                Text(this.basePlayListInfo?.creator?.nickname ?? '')\n                  .fontSize(14)\n                  .fontWeight(StyleConstants.FONT_WEIGHT_FIVE)\n              }\n              .margin({ top: 6 })\n            }\n            .layoutWeight(1)\n            .alignItems(HorizontalAlign.Start)\n          }\n          .height(180)\n          .width(StyleConstants.FULL_WIDTH)\n          .padding(16)\n\n          Column() {\n            this.ActionBar()\n\n            List({ space: 16 }) {\n              if (this.dataSource !== null) {\n                ListItem() {\n                  Grid() {\n                    LazyForEach(this.dataSource, (item: Track, index: number) => {\n                      GridItem() {\n                        this.TrackItem(item, index)\n                      }.reuseId(`track-${item.id}`)\n                    })\n                  }\n                  .width(StyleConstants.FULL_WIDTH)\n                  .columnsTemplate('repeat(1, 1fr)')\n                  .columnsGap(8)\n                  .rowsGap(8)\n                  .padding({ left: 8, right: 8, bottom: 0 })\n                }\n              } else {\n                ListItem() {\n                  Text(\"什么都没有\")\n                }\n              }\n\n              ListItem() {\n                if (this.profile === null && this.dataSource!.totalCount() > 20) {\n                  Text('官方限制未登录只能查看20首')\n                    .fontSize(14)\n                    .fontColor($r('app.color.text_tertiary'))\n                    .margin({ top: 12, bottom: 12 })\n                    .width('100%')\n                    .textAlign(TextAlign.Center)\n                }\n\n                this.LoadingAnimation()\n              }\n            }\n            .cachedCount(5) // Increased for smoother scrolling\n            .padding({ top: 8 })\n            .width(StyleConstants.FULL_WIDTH)\n            .layoutWeight(1)\n            .edgeEffect(EdgeEffect.Spring)\n            .scrollBar(BarState.Off)\n            .onReachEnd(() => {\n              this.loadMoreTracks()\n            })\n            .onWillScroll((scrollOffset: number, scrollState: ScrollState) => {\n              // Optional: Track scroll position if needed for future optimizations\n              this.scrollY = scrollOffset\n            })\n            .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])\n          }\n          .width(StyleConstants.FULL_WIDTH)\n          .layoutWeight(1)\n          .backgroundColor($r('app.color.page_background'))\n          .borderRadius({ topLeft: 32, topRight: 32 })\n          .shadow({\n            radius: 24,\n            color: $r('app.color.shadow_light'),\n            offsetX: 0,\n            offsetY: -2\n          })\n\n          if (this.isSelectMode) {\n            Column() {\n              this.SelectModeBottomBar()\n            }\n            .width(\"100%\")\n            .height(40)\n          }\n        }\n        .width(StyleConstants.FULL_WIDTH)\n        .height(StyleConstants.FULL_HEIGHT)\n        .opacity(this.loadingPlaylist ? 0 : 1)\n        .transition({ type: TransitionType.All })\n        .animation({\n          duration: 300,\n          curve: Curve.EaseOut\n        })\n      }\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .height(StyleConstants.FULL_HEIGHT)\n    .backgroundColor($r('app.color.page_background'))\n    .expandSafeArea()\n    .bindSheet($$this.showPlayList, this.PlayList(), {\n      showClose: false,\n      detents: [SheetSize.MEDIUM, SheetSize.LARGE],\n      dragBar: false,\n      scrollSizeMode: ScrollSizeMode.CONTINUOUS,\n      backgroundColor: $r('app.color.playlist_bg'),\n      preferType: SheetType.BOTTOM,\n    })\n  }"
        },
        {
            "function_name": "SkeletonLoading",
            "content": "@Builder\n  SkeletonLoading() {\n    Column() {\n      Row() {\n        Column()\n          .width(120)\n          .height(120)\n          .borderRadius(12)\n          .backgroundColor($r('app.color.skeleton_background'))\n          .margin({ right: 16 })\n\n        Column() {\n          Row()\n            .width('60%')\n            .height(24)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .margin({ bottom: 8 })\n          Row()\n            .width('40%')\n            .height(16)\n            .backgroundColor($r('app.color.skeleton_background'))\n        }\n        .layoutWeight(1)\n        .alignItems(HorizontalAlign.Start)\n      }\n      .height(180)\n      .padding(16)\n\n      Column() {\n        Row() {\n          Row()\n            .width(100)\n            .height(40)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .borderRadius(20)\n          Row()\n            .width(100)\n            .height(40)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .borderRadius(20)\n        }\n        .width('100%')\n        .justifyContent(FlexAlign.SpaceBetween)\n        .padding({ left: 16, right: 16, top: 12 })\n\n        ForEach([1, 2, 3, 4, 5], () => {\n          Row() {\n            Row()\n              .width(40)\n              .height(40)\n              .backgroundColor($r('app.color.skeleton_background'))\n              .borderRadius(4)\n              .margin({ right: 12 })\n            Column() {\n              Row()\n                .width('80%')\n                .height(16)\n                .backgroundColor($r('app.color.skeleton_background'))\n                .margin({ bottom: 8 })\n              Row()\n                .width('50%')\n                .height(14)\n                .backgroundColor($r('app.color.skeleton_background'))\n            }\n            .alignItems(HorizontalAlign.Start)\n            .layoutWeight(1)\n          }\n          .padding(16)\n          .margin({ bottom: 8 })\n        })\n      }\n      .width('100%')\n      .backgroundColor($r('app.color.page_background'))\n      .borderRadius({ topLeft: 32, topRight: 32 })\n    }\n    .width('100%')\n    .transition({ type: TransitionType.All })\n    .animation({\n      duration: 300,\n      curve: Curve.EaseOut\n    })\n  }"
        },
        {
            "function_name": "SelectModeBottomBar",
            "content": "@Builder\n  SelectModeBottomBar() {\n    Row({ space: 12 }) {\n      if (this.isCreator) {\n        Button({ type: ButtonType.Capsule }) {\n          Row() {\n            Image($r('app.media.ic_trash'))\n              .width(20)\n              .height(20)\n              .fillColor($r('app.color.text_primary'))\n              .margin({ right: 4 })\n            Text('移除')\n              .fontSize(14)\n              .fontColor($r('app.color.text_primary'))\n          }\n        }\n        .backgroundColor(Color.Transparent)\n        .height(40)\n        .padding({ left: 16, right: 16 })\n        .onClick(async () => {\n          AlertDialog.show({\n            title: '移除歌曲',\n            message: '确定要移除选中的歌曲吗？',\n            primaryButton: {\n              value: '取消',\n              action: () => {\n              }\n            },\n            secondaryButton: {\n              value: '确定',\n              action: async () => {\n                const ids = Array.from(this.selectedTracks)\n                await collectSong(this.collectionId, ids, \"del\")\n                this.isSelectMode = false\n                this.selectedTracks.clear()\n                promptAction.showToast({ message: \"已移除歌曲\" })\n              }\n            }\n          })\n        })\n      }\n\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image($r('app.media.ic_star'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.text_primary'))\n            .margin({ right: 4 })\n          Text('收藏')\n            .fontSize(14)\n            .fontColor($r('app.color.text_primary'))\n        }\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .padding({ left: 16, right: 16 })\n      .margin({ right: 12 })\n      .onClick(() => {\n        this.showPlayList = true\n      })\n\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image($r('app.media.ic_plus'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.text_primary'))\n            .margin({ right: 4 })\n          Text('添加到播放列表')\n            .fontSize(14)\n            .fontColor($r('app.color.text_primary'))\n        }\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .padding({ left: 16, right: 16 })\n      .onClick(() => {\n        const selectedSongs = this.allTracks\n          .filter(track => this.selectedTracks.has(track.id))\n          .map(track => {\n            const song = new TrackAndPrivilege()\n            song.track = track\n            song.privilege = this.privilegeMap.get(track.id)!\n            return song\n          })\n\n        selectedSongs.forEach(song => globalPlaylist.addSong(song))\n        promptAction.showToast({\n          message: `已添加 ${selectedSongs.length} 首歌曲到播放列表`\n        })\n        this.isSelectMode = false\n        this.selectedTracks.clear()\n      })\n    }\n    .padding(8)\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height(\"100%\")\n    .backgroundColor($r('app.color.page_background'))\n    .position({ x: 0, y: 'calc(100% - 40)' })\n    .expandSafeArea()\n    .animation({\n      duration: 200,\n      curve: Curve.EaseInOut\n    })\n  }"
        },
        {
            "function_name": "PlayList",
            "content": "@Builder\n  PlayList() {\n    Column() {\n      PlaylistSelector({\n        onSelect: async (id: string | number) => {\n          const ids = Array.from(this.selectedTracks)\n          await collectSong(id, ids)\n          promptAction.showToast({ message: \"已添加到收藏夹\" })\n          this.showPlayList = false\n          this.isSelectMode = false\n          this.selectedTracks.clear()\n        }\n      })\n    }\n    .expandSafeArea()\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "LoadingAnimation",
            "content": "@Builder\n  LoadingAnimation() {\n    if (this.isLoading) {\n      Row() {\n        LoadingProgress()\n          .width(24)\n          .height(24)\n          .color($r('app.color.text_secondary'))\n      }\n      .width('100%')\n      .height(48)\n      .justifyContent(FlexAlign.Center)\n      .transition({\n        type: TransitionType.All,\n        opacity: 0\n      })\n      .animation({\n        duration: 300,\n        curve: Curve.EaseOut\n      })\n    }\n  }"
        },
        {
            "function_name": "SelectModeTopBar",
            "content": "@Builder\n  SelectModeTopBar() {\n    Row() {\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_close'))\n          .width(24)\n          .height(24)\n          .fillColor($r('app.color.icon_color'))\n      }\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        this.isSelectMode = false\n        this.selectedTracks.clear()\n      })\n\n      Text(`已选择 ${this.selectedTracks.size} 首`)\n        .fontSize(16)\n        .fontWeight(FontWeight.Medium)\n        .fontColor($r('app.color.text_primary'))\n        .margin({ left: 12 })\n\n      Blank()\n\n      Button({ type: ButtonType.Circle }) {\n        Text('全选')\n          .fontColor($r('app.color.text_primary'))\n          .fontSize(14)\n      }\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        if (this.selectedTracks.size === this.allTracks.length) {\n          this.selectedTracks.clear()\n        } else {\n          this.allTracks.forEach(track => {\n            this.selectedTracks.add(track.id)\n          })\n        }\n      })\n    }\n    .width('100%')\n    .height(56)\n    .padding({ left: 16, right: 16 })\n    .backgroundColor(Color.Transparent)\n  }"
        },
        {
            "function_name": "ActionBar",
            "content": "@Builder\n  ActionBar() {\n    Row() {\n      Row() {\n        Button({ type: ButtonType.Capsule }) {\n          Row() {\n            Image($r('app.media.ic_play'))\n              .width(20)\n              .height(20)\n              .fillColor($r('app.color.icon_color'))\n              .margin({ right: 8 })\n            Text('播放全部')\n              .fontColor($r('app.color.text_secondary'))\n              .fontSize(16)\n          }\n          .padding({ left: 16, right: 16 })\n        }\n        .backgroundColor(Color.Transparent)\n        .height(40)\n        .enabled(!this.isLoading)\n        .onClick(async () => {\n          this.isLoading = true\n          try {\n            if (!this.finished) {\n              await this.loadAllTracks()\n            }\n\n            if (this.isQuit) {\n              return\n            }\n\n            animateTo({ duration: 0 }, () => {\n              const tempSongs = this.allTracks.map(track => {\n                const song = new TrackAndPrivilege()\n                song.track = track\n                song.privilege = this.privilegeMap.get(track.id)!\n                return song\n              })\n\n              globalPlaylist.overwrite(tempSongs)\n\n              const song = new TrackAndPrivilege()\n              song.track = this.allTracks[0]\n              song.privilege = this.privilegeMap.get(this.allTracks[0].id)!\n\n              AppStorage.setOrCreate(\"Track\", song)\n            })\n\n            router.pushUrl({ url: \"pages/Playing\" })\n          } catch (error) {\n            Logger.error('Failed to play all tracks:', error)\n            promptAction.showToast({ message: \"加载失败，请重试\" })\n          } finally {\n            this.isLoading = false\n          }\n        })\n      }\n\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image(this.subscribed ? $r(\"app.media.ic_checkmark\") : $r('app.media.ic_plus'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.icon_color'))\n            .margin({ right: 8 })\n          Text(this.subscribed ? '取消收藏' : '收藏歌单')\n            .fontColor($r('app.color.text_secondary'))\n            .fontSize(16)\n        }\n        .visibility(this.isCreator ? Visibility.None : Visibility.Visible)\n        .padding({ left: 16, right: 16 })\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .onClick(async () => {\n        if (!this.isCreator) {\n          const t = this.subscribed ? 0 : 1\n          await playlistSubscribe(this.collectionId!, t)\n          this.subscribed = !this.subscribed\n        }\n      })\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .padding({ left: 16, right: 16, top: 12 })\n    .justifyContent(FlexAlign.SpaceBetween)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Daily.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack({ alignContent: Alignment.Top }) {\n      Image(this.profile?.backgroundUrl ?? '')\n        .width(StyleConstants.FULL_WIDTH)\n        .height(260)\n        .blur(20)\n        .opacity(0.6)\n        .backgroundColor($r('app.color.skeleton_background'))\n        .position({ x: 0, y: 0 })\n        .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP])\n\n      if (this.isLoading) {\n        this.SkeletonLoading()\n      } else {\n        Column() {\n          if (this.isSelectMode) {\n            this.SelectModeTopBar()\n          }\n          Row() {\n            Column() {\n              Text(String(this.getCurrentDate().day))\n                .fontSize(40)\n                .fontWeight(FontWeight.Bold)\n                .margin({ bottom: 4 })\n              Text(String(this.getCurrentDate().month) + '月')\n                .fontSize(14)\n                .fontColor($r('app.color.text_tertiary'))\n            }\n            .width(120)\n            .height(120)\n            .borderRadius(12)\n            .margin({ right: 16 })\n            .backgroundColor('rgba(255, 255, 255, 0.6)')\n            .backdropBlur(16)\n            .justifyContent(FlexAlign.Center)\n            .shadow({\n              radius: 12,\n              color: $r('app.color.shadow_color'),\n              offsetX: 0,\n              offsetY: 2\n            })\n\n            Column() {\n              Text(\"今日推荐\")\n                .fontSize(22)\n                .fontWeight(FontWeight.Bold)\n                .maxLines(2)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n              Row() {\n                Image(this.profile?.avatarUrl ?? '')\n                  .width(24)\n                  .height(24)\n                  .borderRadius(12)\n                  .margin({ right: 8 })\n                Text(this.profile?.nickname ?? '')\n                  .fontSize(14)\n                  .fontWeight(StyleConstants.FONT_WEIGHT_FIVE)\n              }\n              .margin({ top: 6 })\n            }\n            .layoutWeight(1)\n            .alignItems(HorizontalAlign.Start)\n          }\n          .height(180)\n          .width(StyleConstants.FULL_WIDTH)\n          .padding(16)\n\n          Column() {\n            this.ActionBar()\n\n            List({ space: 16 }) {\n              ListItem() {\n                Grid() {\n                  ForEach(this.dailySong ?? [], (item: DailySong, index: number) => {\n                    GridItem() {\n                      this.TrackItem(item, index)\n                    }\n                  })\n                }\n                .width(StyleConstants.FULL_WIDTH)\n                .columnsTemplate('repeat(1, 1fr)')\n                .columnsGap(8)\n                .rowsGap(8)\n                .padding({ left: 8, right: 8, bottom: 0 })\n              }\n            }\n            .padding({ top: 8 })\n            .width(StyleConstants.FULL_WIDTH)\n            .layoutWeight(1)\n            .edgeEffect(EdgeEffect.Spring)\n            .scrollBar(BarState.Off)\n            .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])\n          }\n          .width(StyleConstants.FULL_WIDTH)\n          .layoutWeight(1)\n          .backgroundColor($r('app.color.page_background'))\n          .borderRadius({ topLeft: 32, topRight: 32 })\n          .shadow({\n            radius: 24,\n            color: $r('app.color.shadow_light'),\n            offsetX: 0,\n            offsetY: -2\n          })\n\n          if (this.isSelectMode) {\n            Column() {\n              this.SelectModeBottomBar()\n            }\n            .width(\"100%\")\n            .height(40)\n          }\n        }\n        .width(StyleConstants.FULL_WIDTH)\n        .height(StyleConstants.FULL_HEIGHT)\n        .opacity(this.isLoading ? 0 : 1)\n        .transition({ type: TransitionType.All })\n        .animation({\n          duration: 300,\n          curve: Curve.EaseOut\n        })\n      }\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .height(StyleConstants.FULL_HEIGHT)\n    .backgroundColor($r('app.color.page_background'))\n    .expandSafeArea()\n    .bindSheet($$this.showPlayList, this.PlayList(), {\n      showClose: false,\n      detents: [SheetSize.MEDIUM, SheetSize.LARGE],\n      dragBar: false,\n      scrollSizeMode: ScrollSizeMode.CONTINUOUS,\n      backgroundColor: $r('app.color.playlist_bg'),\n      preferType: SheetType.BOTTOM,\n    })\n  }"
        },
        {
            "function_name": "PlayList",
            "content": "@Builder\n  PlayList() {\n    Column() {\n      PlaylistSelector({\n        onSelect: async (id: string | number) => {\n          const ids = Array.from(this.selectedTracks)\n          await collectSong(id, ids)\n          promptAction.showToast({ message: \"已添加到收藏夹\" })\n          this.showPlayList = false;\n          this.isSelectMode = false\n          this.selectedTracks.clear()\n        }\n      })\n    }\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .expandSafeArea()\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "SelectModeTopBar",
            "content": "@Builder\n  SelectModeTopBar() {\n    Row() {\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_close'))\n          .width(24)\n          .height(24)\n          .fillColor($r('app.color.icon_color'))\n      }\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        this.isSelectMode = false\n        this.selectedTracks.clear()\n      })\n\n      Text(`已选择 ${this.selectedTracks.size} 首`)\n        .fontSize(16)\n        .fontWeight(FontWeight.Medium)\n        .fontColor($r('app.color.text_primary'))\n        .margin({ left: 12 })\n\n      Blank()\n\n      Button({ type: ButtonType.Circle }) {\n        Text('全选')\n          .fontColor($r('app.color.text_primary'))\n          .fontSize(14)\n      }\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n\n      })\n    }\n    .width('100%')\n    .height(56)\n    .padding({ left: 16, right: 16 })\n    .backgroundColor(Color.Transparent)\n  }"
        },
        {
            "function_name": "SelectModeBottomBar",
            "content": "@Builder\n  SelectModeBottomBar() {\n    Row({ space: 12 }) {\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image($r('app.media.ic_star'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.text_primary'))\n            .margin({ right: 4 })\n          Text('收藏')\n            .fontSize(14)\n            .fontColor($r('app.color.text_primary'))\n        }\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .padding({ left: 16, right: 16 })\n      .margin({ right: 12 })\n      .onClick(() => {\n        this.showPlayList = true\n      })\n\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image($r('app.media.ic_plus'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.text_primary'))\n            .margin({ right: 4 })\n          Text('添加到播放列表')\n            .fontSize(14)\n            .fontColor($r('app.color.text_primary'))\n        }\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .padding({ left: 16, right: 16 })\n      .onClick(() => {\n        const selectedSongs = this.dailySong!.filter((_, index) => this.selectedTracks.has(index))\n        selectedSongs.forEach(song => {\n          const track = new TrackAndPrivilege()\n          track.track = song as ESObject as Track\n          track.privilege = song.privilege as ESObject as Privilege\n          globalPlaylist.insertOrMoveNext(track)\n        })\n        promptAction.showToast({\n          message: `已添加 ${selectedSongs.length} 首歌曲到播放列表`\n        })\n        this.isSelectMode = false\n        this.selectedTracks.clear()\n      })\n    }\n    .padding(8)\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height(\"100%\")\n    .backgroundColor($r('app.color.page_background'))\n    .position({ x: 0, y: 'calc(100% - 40)' })\n    .expandSafeArea()\n    .animation({\n      duration: 200,\n      curve: Curve.EaseInOut\n    })\n  }"
        },
        {
            "function_name": "SkeletonLoading",
            "content": "@Builder\n  SkeletonLoading() {\n    Column() {\n      Row() {\n        Column()\n          .width(120)\n          .height(120)\n          .borderRadius(12)\n          .backgroundColor($r('app.color.skeleton_background'))\n          .margin({ right: 16 })\n\n        Column() {\n          Row()\n            .width('60%')\n            .height(24)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .margin({ bottom: 8 })\n          Row()\n            .width('40%')\n            .height(16)\n            .backgroundColor($r('app.color.skeleton_background'))\n        }\n        .layoutWeight(1)\n        .alignItems(HorizontalAlign.Start)\n      }\n      .height(180)\n      .padding(16)\n\n      Column() {\n        Row() {\n          Row()\n            .width(100)\n            .height(40)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .borderRadius(20)\n          Row()\n            .width(100)\n            .height(40)\n            .backgroundColor($r('app.color.skeleton_background'))\n            .borderRadius(20)\n        }\n        .width('100%')\n        .justifyContent(FlexAlign.SpaceBetween)\n        .padding({ left: 16, right: 16, top: 12 })\n\n        ForEach([1, 2, 3, 4, 5], () => {\n          Row() {\n            Row()\n              .width(40)\n              .height(40)\n              .backgroundColor($r('app.color.skeleton_background'))\n              .borderRadius(4)\n              .margin({ right: 12 })\n            Column() {\n              Row()\n                .width('80%')\n                .height(16)\n                .backgroundColor($r('app.color.skeleton_background'))\n                .margin({ bottom: 8 })\n              Row()\n                .width('50%')\n                .height(14)\n                .backgroundColor($r('app.color.skeleton_background'))\n            }\n            .alignItems(HorizontalAlign.Start)\n            .layoutWeight(1)\n          }\n          .padding(16)\n          .margin({ bottom: 8 })\n        })\n      }\n      .width('100%')\n      .backgroundColor($r('app.color.page_background'))\n      .borderRadius({ topLeft: 32, topRight: 32 })\n    }\n    .width('100%')\n    .transition({ type: TransitionType.All })\n    .animation({\n      duration: 300,\n      curve: Curve.EaseOut\n    })\n  }"
        },
        {
            "function_name": "ActionBar",
            "content": "@Builder\n  ActionBar() {\n    Row() {\n      Button({ type: ButtonType.Capsule }) {\n        Row() {\n          Image($r('app.media.ic_play'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.icon_color'))\n            .margin({ right: 8 })\n          Text('播放全部')\n            .fontColor($r('app.color.text_secondary'))\n            .fontSize(16)\n        }\n        .padding({ left: 16, right: 16 })\n      }\n      .backgroundColor(Color.Transparent)\n      .height(40)\n      .onClick(() => {\n        if (this.dailySong) {\n          const tempSongs: TrackAndPrivilege[] = []\n          this.dailySong.forEach((song) => {\n            const track = new TrackAndPrivilege()\n            track.track = song as ESObject as Track\n            track.privilege = song.privilege as ESObject as Privilege\n            tempSongs.push(track)\n          })\n          globalPlaylist.overwrite(tempSongs)\n          // 加载第一首歌\n          const info = new TrackAndPrivilege()\n          info.track = this.dailySong[0] as ESObject as Track\n          info.privilege = this.dailySong[0].privilege as ESObject as Privilege\n          AppStorage.setOrCreate(\"Track\", info)\n          router.pushUrl({\n            url: \"pages/Playing\",\n          })\n        }\n      })\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .padding({ left: 16, right: 16, top: 12 })\n    .justifyContent(FlexAlign.Center)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Tabs({\n        barPosition: this.currentBreakpoint === BreakpointConstants.BREAKPOINT_LG ?\n        BarPosition.Start : BarPosition.End,\n        index: this.currentPageIndex,\n        controller: this.controller\n      }) {\n        TabContent() {\n          Column() {\n            Scroll() {\n              LookUp()\n            }\n            .width('100%')\n            .layoutWeight(1)\n\n            if (this.track) {\n              PlaybackControlBar()\n            }\n          }\n          .width('100%')\n          .height('100%')\n        }\n        .tabBar(this.BottomNavigation(buttonInfo[0]))\n\n        TabContent() {\n          Column() {\n            Scroll() {\n              Library()\n            }\n            .width('100%')\n            .layoutWeight(1)\n\n            if (this.track) {\n              PlaybackControlBar()\n            }\n          }\n          .width('100%')\n          .height('100%')\n        }\n        .tabBar(this.BottomNavigation(buttonInfo[1]))\n\n        TabContent() {\n          Column() {\n            Scroll() {\n              Cached()\n            }\n            .width('100%')\n            .layoutWeight(1)\n\n            if (this.track) {\n              PlaybackControlBar()\n            }\n          }\n          .width('100%')\n          .height('100%')\n        }\n        .tabBar(this.BottomNavigation(buttonInfo[2]))\n      }\n      .barWidth(this.currentBreakpoint === BreakpointConstants.BREAKPOINT_LG ?\n      $r('app.float.bar_width') : StyleConstants.FULL_WIDTH)\n      .barHeight(this.currentBreakpoint === BreakpointConstants.BREAKPOINT_LG ?\n      StyleConstants.SIXTY_HEIGHT : $r('app.float.vp_fifty_six'))\n      .vertical(this.currentBreakpoint === BreakpointConstants.BREAKPOINT_LG)\n      .scrollable(false)\n      .clip(false)\n      .layoutWeight(1)\n      .expandSafeArea()\n      .onChange(async (index: number) => {\n        this.currentPageIndex = index;\n        if (index !== 0) {\n          EventBus.send(\"ViewChange\", index == 1 ? \"library\" : \"cached\")\n        }\n      })\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('app.color.page_background'))\n    .expandSafeArea()\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Playing.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      this.BlurBackground()\n\n      Column() {\n        if (this.currentBreakpoint === BreakpointConstants.BREAKPOINT_LG || this.currentBreakpoint === BreakpointConstants.BREAKPOINT_MD) {\n          Row() {\n            Column() {\n              Image(cover(this.track?.track.al.picUrl ?? \"\", 512))\n                .width(this.coverWidth.getValue(this.currentBreakpoint))\n                .aspectRatio(1)\n                .borderRadius(24)\n                .margin({ top: 48 })\n                .shadow({ radius: 24, color: 'rgba(0, 0, 0, 0.2)', offsetY: 12 })\n\n              Text(this.track?.track.name)\n                .fontSize(this.getFontSize(this.track?.track.name ?? \"\", 28, 24))\n                .fontWeight(FontWeight.Bold)\n                .maxLines(1)\n                .margin({ top: 24 })\n                .fontColor(Color.White)\n\n              Text(this.track?.track.ar.map(item => item.name).join(\" / \"))\n                .fontSize(16)\n                .fontColor('rgba(255, 255, 255, 0.6)')\n                .margin({ top: 8 })\n\n              Column() {\n                this.ActionControls()\n                this.ProgressBar()\n                this.PlayerControls()\n              }\n              .margin({ top: 8 })\n              .layoutWeight(1)\n              .justifyContent(FlexAlign.End)\n            }\n            .width(this.playingView.getValue(this.currentBreakpoint))\n            .height('100%')\n            .alignItems(HorizontalAlign.Center)\n            .padding({ bottom: 32 })\n\n            Column() {\n              LyricView()\n            }\n            .width(this.lyricView.getValue(this.currentBreakpoint))\n            .height('100%')\n            .expandSafeArea()\n            .padding(16)\n          }\n          .expandSafeArea()\n        } else {\n          Tabs({ barPosition: BarPosition.End, index: this.selectedTabIndex }) {\n            TabContent() {\n              Column() {\n                Image(cover(this.track?.track.al.picUrl ?? \"\", 512))\n                  .width(this.coverWidth.getValue(this.currentBreakpoint))\n                  .aspectRatio(1)\n                  .borderRadius(24)\n                  .margin({ top: 48 })\n                  .shadow({ radius: 24, color: 'rgba(0, 0, 0, 0.2)', offsetY: 12 })\n\n                Text(this.track?.track.name)\n                  .fontSize(this.getFontSize(this.track?.track.name ?? \"\", 28, 24))\n                  .fontWeight(FontWeight.Bold)\n                  .maxLines(1)\n                  .margin({ top: 24 })\n                  .fontColor(Color.White)\n\n                Text(this.track?.track.ar.map(item => item.name).join(\" / \"))\n                  .fontSize(16)\n                  .fontColor('rgba(255, 255, 255, 0.6)')\n                  .margin({ top: 8 })\n\n                this.ActionControls()\n                this.ProgressBar()\n                this.PlayerControls()\n              }\n              .width('100%')\n              .height('100%')\n              .alignItems(HorizontalAlign.Center)\n            }\n            .expandSafeArea()\n\n            TabContent() {\n              Column() {\n                LyricView()\n              }\n              .width('100%')\n              .height('100%')\n              .expandSafeArea()\n              .padding(16)\n            }\n            .expandSafeArea()\n          }\n          .scrollable(true)\n          .clip(false)\n          .barHeight(0)\n          .onChange((index: number) => {\n            this.selectedTabIndex = index\n          })\n        }\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .expandSafeArea()\n    .gesture(\n      SwipeGesture({\n        // 竖直方向滑动\n        direction: SwipeDirection.Vertical,\n      }).onAction((event) => {\n        if (event.angle < 0) {\n          this.showPlaylist = true;\n        } else {\n          router.back()\n        }\n      })\n    )\n    .bindSheet($$this.showPlaylist, this.sheet , {\n      showClose: false,\n      height: this.selector == \"timeSelector\" ? SheetSize.FIT_CONTENT : SheetSize.MEDIUM,\n      // detents: [SheetSize.MEDIUM, SheetSize.LARGE],\n      dragBar: false,\n      scrollSizeMode: ScrollSizeMode.CONTINUOUS,\n      preferType: SheetType.BOTTOM,\n      backgroundColor: $r('app.color.playlist_bg'),\n      onWillDismiss: () => {\n        this.showPlaylist = false;\n        this.selector = \"playlist\"\n      }\n    })\n  }"
        },
        {
            "function_name": "PlayList",
            "content": "@Builder\n  PlayList() {\n    Column() {\n      PlaylistSelector({\n        onSelect: async (id: string | number) => {\n          await collectSong(id, [this.track?.track.id!])\n          promptAction.showToast({ message: \"已添加到收藏夹\" })\n          this.showPlaylist = false;\n          this.selector = \"playlist\"\n        }\n      })\n    }\n    .expandSafeArea()\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "Timer",
            "content": "@Builder\n  Timer() {\n    Column() {\n      TimerSelector()\n    }\n    .expandSafeArea()\n    .backgroundColor($r('app.color.playlist_bg'))\n  }"
        },
        {
            "function_name": "PlayListBuilder",
            "content": "@Builder\n  PlayListBuilder() {\n    Column() {\n      PlayList({ showPlaylist: $showPlaylist })\n    }\n    .height(\"100%\")\n    .backgroundColor($r('app.color.playlist_bg'))\n    .layoutWeight(1)\n  }"
        },
        {
            "function_name": "BlurBackground",
            "content": "@Builder\n  BlurBackground() {\n    Stack() {\n      Image(cover(this.track?.track.al.picUrl ?? \"\", 512))\n        .width('100%')\n        .height('100%')\n        .objectFit(ImageFit.Cover)\n        .blur(98)\n        .opacity(0.6)\n        .expandSafeArea()\n\n      Column()\n        .width('100%')\n        .height('100%')\n        .linearGradient({\n          angle: 180,\n          colors: [['rgba(0,0,0,0.3)', 0.0], ['rgba(0,0,0,0.7)', 1.0]]\n        })\n        .expandSafeArea()\n    }\n    .width('100%')\n    .height('100%')\n    .position({ x: 0, y: 0 })\n    .expandSafeArea()\n  }"
        },
        {
            "function_name": "ProgressBar",
            "content": "@Builder\n  ProgressBar() {\n    Column() {\n      Text(this.formatTime(this.currentTime))\n        .fontSize(12)\n        .fontColor('rgba(255, 255, 255, 0.6)')\n\n      Slider({\n        value: this.currentTime,\n        max: this.duration || 100,\n        step: 1,\n        style: SliderStyle.NONE\n      })\n        .trackThickness(this.isProgressBarExpanded ? 12 : 4)\n        .selectedColor(Color.White)\n        .trackColor('rgba(255, 255, 255, 0.3)')\n        .width('100%')\n        .onChange((value: number) => {\n          this.currentTime = value\n        })\n        .onTouch((event) => {\n          if (event.type === TouchType.Down) {\n            this.isProgressBarExpanded = true\n          } else if (event.type === TouchType.Up) {\n            this.isProgressBarExpanded = false\n            this.playerManager.getAVPlayerInstance().then(player => {\n              player.seek(this.currentTime)\n            })\n          }\n        })\n\n      Text(this.formatTime(this.duration))\n        .fontSize(12)\n        .fontColor('rgba(255, 255, 255, 0.6)')\n    }\n    .padding(16)\n    .width('100%')\n  }"
        },
        {
            "function_name": "PlayerControls",
            "content": "@Builder\n  PlayerControls() {\n    Row() {\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_prev'))\n          .width(40)\n          .height(40)\n          .fillColor(Color.White)\n      }\n      .width(this.buttonSize.getValue(this.currentBreakpoint))\n      .height(this.buttonSize.getValue(this.currentBreakpoint))\n      .margin(12)\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        globalPlaylist.playPrevious()\n      })\n\n      Button({ type: ButtonType.Circle }) {\n        Image(this.isPlaying ? $r('app.media.ic_pause') : $r('app.media.ic_play'))\n          .width(44)\n          .height(44)\n          .fillColor(Color.White)\n      }\n      .width(this.buttonSize.getValue(this.currentBreakpoint) + 20)\n      .height(this.buttonSize.getValue(this.currentBreakpoint) + 20)\n      .margin(12)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        if (this.isPlaying) {\n          this.playerManager.pause()\n        } else {\n          this.playerManager.play()\n        }\n      })\n\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_next'))\n          .width(40)\n          .height(40)\n          .fillColor(Color.White)\n      }\n      .width(this.buttonSize.getValue(this.currentBreakpoint))\n      .height(this.buttonSize.getValue(this.currentBreakpoint))\n      .margin(12)\n      .backgroundColor(Color.Transparent)\n      .onClick(() => {\n        globalPlaylist.playNext()\n      })\n    }\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }"
        },
        {
            "function_name": "ActionControls",
            "content": "@Builder\n  ActionControls() {\n    Row({ space: 8 }) {\n      Button({ type: ButtonType.Circle }) {\n        Image(this.getPlayModeResource(this.playMode))\n          .width(28)\n          .height(28)\n          .fillColor(Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        this.playMode = globalPlaylist.switchPlayMode()\n      })\n\n      Button({ type: ButtonType.Circle }) {\n        Image(this.isFavorite ? $r('app.media.ic_heart_fill') : $r('app.media.ic_heart'))\n          .width(28)\n          .height(28)\n          .fillColor(this.isFavorite ? '#FF4081' : Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        EventBus.send(\"ToggleFavorite\")\n      })\n\n      if (this.collectionId) {\n        Button({ type: ButtonType.Circle }) {\n          Image($r('app.media.ic_discover_fill'))\n            .width(28)\n            .height(28)\n            .fillColor(Color.White)\n        }\n        .width(44)\n        .height(44)\n        .margin(8)\n        .backgroundColor('rgba(255, 255, 255, 0.1)')\n        .onClick(async () => {\n          // 心动模式\n          promptAction.showToast({ message: \"正在进入心动模式~\" })\n          const intelligenceSongs = await intelligence(this.collectionId!, this.track!.track.id)\n          globalPlaylist.overwrite(intelligenceSongs.data.map(item => {\n            const trackAndPrivilege = new TrackAndPrivilege()\n            trackAndPrivilege.track = item.songInfo as ESObject as Track\n            trackAndPrivilege.privilege = item.songInfo.privilege as ESObject as Privilege\n            return trackAndPrivilege\n          }))\n          animateTo({ duration: 0 }, () => {\n            AppStorage.setOrCreate(\"Track\", globalPlaylist.getCurrentSong())\n          })\n          globalPlaylist.setCurrentIndex(0)\n          promptAction.showToast({ message: \"成功进入心动模式~\" })\n        })\n      }\n\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_more'))\n          .width(28)\n          .height(28)\n          .fillColor(Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .bindMenu([\n        {\n          value: '收藏该歌曲',\n          action: () => {\n            this.selector = \"playlistSelector\"\n            this.showPlaylist = true;\n          }\n        },\n        {\n          value: '定时关闭',\n          action: () => {\n            this.selector = \"timeSelector\"\n            this.showPlaylist = true;\n          }\n        },\n      ])\n\n      Button({ type: ButtonType.Circle }) {\n        Image($r('app.media.ic_list'))\n          .width(28)\n          .height(28)\n          .fillColor(Color.White)\n      }\n      .width(44)\n      .height(44)\n      .margin(8)\n      .backgroundColor('rgba(255, 255, 255, 0.1)')\n      .onClick(() => {\n        if (globalPlaylist.playType == PlayType.PERSONAL_FM) {\n          promptAction.showToast({ message: \"当前模式下需要保留一点神秘感哦！\" })\n          return\n        }\n        this.selector = \"playlist\"\n        this.showPlaylist = true;\n      })\n    }\n    .margin({ top: 16 })\n    .width('100%')\n    .justifyContent(FlexAlign.Center)\n  }"
        },
        {
            "function_name": "sheet",
            "content": "@Builder\n  sheet() {\n    if (this.selector === \"playlist\") {\n      this.PlayListBuilder()\n    } else if (this.selector === \"playlistSelector\") {\n      this.PlayList()\n    } else if (this.selector === \"timeSelector\") {\n      this.Timer()\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Setting.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text('设置API服务器')\n        .fontSize(20)\n        .fontWeight(FontWeight.Medium)\n        .margin({ bottom: 16, top: 8 })\n        .width('100%')\n        .fontColor($r('app.color.text_primary'))\n\n      TextInput({\n        text: this.value,\n        placeholder: '请输入API服务器地址',\n      })\n        .onChange((value: string) => {\n          this.value = value\n        })\n        .width('100%')\n        .height(48)\n        .margin({ bottom: 24 })\n        .borderRadius(8)\n\n      Row({ space: 12 }) {\n        Button('取消', { type: ButtonType.Capsule })\n          .onClick(() => {\n            this.controller.close()\n            this.cancel()\n          })\n          .backgroundColor(Color.Transparent)\n          .fontColor($r('app.color.text_secondary'))\n          .width(100)\n\n        Button('确定', { type: ButtonType.Capsule })\n          .onClick(() => {\n            if (!this.value) {\n              promptAction.showToast({ message: '请输入服务器地址' })\n              return\n            }\n            if (!this.validateUrl(this.value)) {\n              promptAction.showToast({ message: '请输入有效的URL' })\n              return\n            }\n            this.confirm(this.value)\n            this.controller.close()\n          })\n          .width(100)\n      }\n    }\n    .backgroundColor($r('app.color.dialog_background'))\n    .width('100%')\n    .expandSafeArea()\n    .padding(24)\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text('设置')\n          .fontSize(24)\n          .fontWeight(FontWeight.Bold)\n          .fontColor($r('app.color.text_primary'))\n      }\n      .width('100%')\n      .padding({\n        left: 16,\n        right: 16,\n        top: 16,\n        bottom: 4\n      })\n\n      Scroll() {\n        Column({ space: 12 }) {\n          this.ApiUrlSetting()\n          this.QualitySetting()\n          this.AutoCacheSetting()\n          this.ForceWebApiSetting()\n          this.IgnoreGraySetting()\n          this.CacheClear()\n        }\n        .width('100%')\n        .padding(16)\n      }\n      .layoutWeight(1)\n      .scrollBar(BarState.Off)\n      .width('100%')\n    }\n    .width(StyleConstants.FULL_WIDTH)\n    .height(StyleConstants.FULL_HEIGHT)\n    .backgroundColor($r('app.color.page_background'))\n    .expandSafeArea()\n  }"
        },
        {
            "function_name": "ForceWebApiSetting",
            "content": "@Builder\n  ForceWebApiSetting() {\n    Column() {\n      Row() {\n        Column() {\n          Row() {\n            Text('强制使用网页端协议')\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.text_primary'))\n\n            Toggle({ type: ToggleType.Switch, isOn: this.forceWebApi })\n              .onChange((isOn: boolean) => {\n                this.forceWebApi = isOn\n                PreferencesUtil.put('forceWebApi', isOn)\n                promptAction.showToast({\n                  message: isOn ? '已强制网页端协议' : '已关闭强制网页端协议'\n                })\n              })\n              .margin({ left: 8 })\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Text('避免官方模式下混用API造成的灰标')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "IgnoreGraySetting",
            "content": "@Builder\n  IgnoreGraySetting() {\n    Column() {\n      Row() {\n        Column() {\n          Row() {\n            Text('忽略灰标')\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.text_primary'))\n\n            Toggle({ type: ToggleType.Switch, isOn: this.ignoreGray })\n              .onChange((isOn: boolean) => {\n                this.ignoreGray = isOn\n                PreferencesUtil.put('ignoreGray', isOn)\n                setIgnoreGray(isOn)\n                promptAction.showToast({\n                  message: isOn ? '已开启忽略灰标' : '已关闭忽略灰标'\n                })\n              })\n              .margin({ left: 8 })\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Text('在列表内不展示灰标情况，但并不保证播放正常')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n          Text('如果一首歌长时间没有加载，那么可能是真的没办法播放')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "AutoCacheSetting",
            "content": "@Builder\n  AutoCacheSetting() {\n    Column() {\n      Row() {\n        Column() {\n          Row() {\n            Text('自动缓存下一首')\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n              .fontColor($r('app.color.text_primary'))\n\n            Toggle({ type: ToggleType.Switch, isOn: this.autoCache })\n              .onChange((isOn: boolean) => {\n                this.autoCache = isOn\n                PreferencesUtil.put('autoCache', isOn)\n                promptAction.showToast({\n                  message: isOn ? '已开启自动缓存' : '已关闭自动缓存'\n                })\n              })\n              .margin({ left: 8 })\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Text('注意流量，可以提升播放体验')\n            .fontSize(14)\n            .fontColor($r('app.color.text_secondary'))\n            .margin({ top: 4 })\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "ApiUrlSetting",
            "content": "@Builder\n  ApiUrlSetting() {\n    Column() {\n      Row() {\n        Column() {\n          Text('API 服务器')\n            .fontSize(16)\n            .fontWeight(FontWeight.Medium)\n            .fontColor($r('app.color.text_primary'))\n\n          if (this.customApiUrl) {\n            Text('当前: ' + this.customApiUrl)\n              .fontSize(14)\n              .fontColor($r('app.color.text_secondary'))\n              .margin({ top: 4 })\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n          } else {\n            Text('请立即填写API服务器，否则功能无法正常使用')\n              .fontSize(14)\n              .fontColor($r('app.color.text_secondary'))\n              .margin({ top: 4 })\n          }\n        }\n        .alignItems(HorizontalAlign.Start)\n        .layoutWeight(1)\n\n        if (this.customApiUrl) {\n          Button({ type: ButtonType.Circle }) {\n            Image($r('app.media.ic_close'))\n              .width(20)\n              .height(20)\n              .fillColor($r('app.color.icon_color'))\n          }\n          .width(32)\n          .height(32)\n          .backgroundColor($r('app.color.button_ghost_background'))\n          .margin({ right: 8 })\n          .onClick(() => {\n            PreferencesUtil.delete('customURL')\n            this.customApiUrl = ''\n            updateBaseURL()\n            promptAction.showToast({ message: '请及时填写API服务器，否则功能无法正常使用' })\n          })\n        }\n\n        Button({ type: ButtonType.Circle }) {\n          Image($r('app.media.ic_edit'))\n            .width(20)\n            .height(20)\n            .fillColor($r('app.color.icon_color'))\n        }\n        .width(32)\n        .height(32)\n        .backgroundColor($r('app.color.button_ghost_background'))\n        .onClick(() => {\n          this.dialogController.open()\n        })\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }\n  }"
        },
        {
            "function_name": "QualitySetting",
            "content": "@Builder\n  QualitySetting() {\n    Column() {\n      Text('音质设置')\n        .fontSize(16)\n        .fontWeight(FontWeight.Medium)\n        .margin({ bottom: 12 })\n        .width('100%')\n        .fontColor($r('app.color.text_primary'))\n\n      List() {\n        ForEach(Object.keys(qualityDescriptions), (key: string) => {\n          ListItem() {\n            Row() {\n              Radio({ value: key, group: 'quality' })\n                .checked(this.selectedQuality === key)\n                .onChange((isChecked: boolean) => {\n                  if (isChecked) {\n                    this.selectedQuality = key as QualityLevel\n                    PreferencesUtil.put('defaultLevel', key)\n                    promptAction.showToast({ message: '音质设置已更新' })\n                  }\n                })\n              Text(Object(qualityDescriptions)[key])\n                .fontSize(14)\n                .margin({ left: 8 })\n                .fontColor($r('app.color.text_primary'))\n            }\n            .width('100%')\n            .height(48)\n            .onClick(() => {\n              this.selectedQuality = key as QualityLevel\n              PreferencesUtil.put('defaultLevel', key)\n              promptAction.showToast({ message: '音质设置已更新' })\n            })\n          }\n        })\n      }\n      .width('100%')\n    }\n    .width('100%')\n    .padding(16)\n    .backgroundColor($r('app.color.card_background_two'))\n    .borderRadius(12)\n    .shadow({\n      radius: 12,\n      color: $r('app.color.card_shadow'),\n      offsetX: 0,\n      offsetY: 2\n    })\n  }"
        },
        {
            "function_name": "CacheClear",
            "content": "@Builder\n  CacheClear() {\n    Column() {\n      Row() {\n        Text('清除所有请求缓存')\n          .fontSize(16)\n          .fontWeight(FontWeight.Medium)\n          .fontColor($r('app.color.text_primary'))\n      }\n      .width('100%')\n      .padding(16)\n      .backgroundColor($r('app.color.card_background_two'))\n      .borderRadius(12)\n      .shadow({\n        radius: 12,\n        color: $r('app.color.card_shadow'),\n        offsetX: 0,\n        offsetY: 2\n      })\n    }.onClick(() => {\n      const caches = PreferencesUtil.getAll()\n      if (!caches) {\n        promptAction.showToast({ message: '没有可以清除缓存' })\n        return\n      }\n      // 获取所有key为url_开头的缓存\n      const cacheKeys = Object.keys(caches).filter(key => key.startsWith('url_'))\n\n      if (cacheKeys.length === 0) {\n        promptAction.showToast({ message: '没有可以清除缓存' })\n        return\n      }\n\n      cacheKeys.forEach(key => {\n        PreferencesUtil.delete(key)\n      })\n\n      promptAction.showToast({ message: `已清除${cacheKeys.length}条缓存` })\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Splash.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      // 应用图标\n      Image($r('app.media.icon'))\n        .width(120)\n        .height(120)\n        .opacity(this.iconOpacity)\n        .margin({ bottom: 48 })\n        .borderRadius(20)\n        .transition({\n          type: TransitionType.All,\n          opacity: this.iconOpacity\n        })\n        .animation({\n          duration: 1000,\n          curve: Curve.EaseInOut\n        })\n\n      Column() {\n        // 文字部分\n        Text('献给那些知道我名字的人')\n          .fontSize(22)\n          .fontWeight(FontWeight.Normal)\n          .fontColor('#333333')\n          .margin({ bottom: 48 })\n          .opacity(this.textOpacity)\n          .transition({\n            type: TransitionType.All,\n            opacity: this.textOpacity\n          })\n          .animation({\n            duration: 2000,\n            curve: Curve.EaseInOut\n          })\n\n        // 按钮部分\n        Button('立即使用', { type: ButtonType.Capsule })\n          .width(240)\n          .height(48)\n          .fontSize(18)\n          .fontWeight(FontWeight.Medium)\n          .backgroundColor('#333333')\n          .opacity(this.buttonOpacity)\n          .transition({\n            type: TransitionType.All,\n            opacity: this.buttonOpacity\n          })\n          .animation({\n            duration: 1000,\n            curve: Curve.EaseInOut\n          })\n          .onClick(() => {\n            router.pushUrl({ url: 'pages/Index' })\n          })\n      }\n      .translate({ y: this.contentTranslateY })\n      .transition({\n        type: TransitionType.All,\n        translate: { y: this.contentTranslateY }\n      })\n      .animation({\n        duration: 800,\n        curve: Curve.EaseInOut\n      })\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(Color.White)\n    .justifyContent(FlexAlign.Center)\n    .alignItems(HorizontalAlign.Center)\n  }"
        }
    ]
}