{
    "entry\\src\\main\\ets\\components\\Console.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      List() {\n        ForEach(this.logInfos, (logInfo: ESObject) => {\n          ListItem() {\n            Text(logInfo.message).fontColor(ConsoleN.parseLogColor(logInfo.level))\n          }\n        }, (logInfo: ESObject) => {\n          return logInfo.id.toString()\n        });\n      }\n      .width('100%')\n      .height('100%')\n      .alignListItem(ListItemAlign.Start)\n      .backgroundColor(Color.White)\n      .borderRadius(10)\n      .shadow({ radius: 20 })\n    }.width('100%')\n    .height('100%')\n    .padding(5)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n\n    Column({ space: 20 }) {\n      ForEach(this.routes, (item: routeBean) => {\n        Text(item.name)\n          .fontSize(30)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            router.pushUrl({ url: item.path } as router.RouterOptions);\n          })\n      })\n    }\n    .width('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\PubSub.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Column() {\n        Console({ model: $consoleSend }).height('40%')\n        Button($r('app.string.Publish_a_message')).onClick(async () => {\n          // 发布消息\n          const message = 'Hello, World!';\n          const publishOptions: Options.Publish = { persistent: true };\n          let isPush: boolean | undefined = this.channel?.publish(exchangeName, routingKey, Buffer.from(message), publishOptions);\n          this.consoleSend.info('publish message:' + isPush)\n        })\n        Console({ model: $consoleReceive }).height('40%')\n        Button($r('app.string.Consumer_News')).onClick(async () => {\n          // 消费消息\n          const consumeOptions: Options.Consume = { noAck: false };\n          await this.channel?.consume(queueName, (msg: ConsumeMessage | null) => {\n            this.consoleReceive.log('Received message: ' + Unit8ArrayUtils.Uint8ArrayToString(msg?.content));\n            this.channel?.ack(msg);\n          }, consumeOptions);\n        })\n      }.width('100%')\n    }.height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Routing.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Column() {\n        Console({ model: $consoleSend }).height('40%')\n        Button($r('app.string.Publish_a_message')).onClick(async () => {\n          // 发布消息\n          const publishOptions: Options.Publish = { persistent: true };\n          let isPush: boolean | undefined = this.channel?.sendToQueue(infoQueue, Buffer.from('this is a harmless log'), publishOptions);\n          this.channel?.sendToQueue(infoQueue, Buffer.from('this one is more important'), publishOptions);\n          this.channel?.sendToQueue(errorQueue, Buffer.from('pay attention to me!'), publishOptions);\n          this.consoleSend.info('publish message:' + isPush)\n        })\n        Console({ model: $consoleReceive }).height('40%')\n        Button($r('app.string.Consumer_News')).onClick(async () => {\n          // 消费消息\n          const consumeOptions: Options.Consume = { noAck: false };\n          await this.channel?.consume(infoQueue, (msg: ConsumeMessage | null) => {\n            this.consoleReceive.log('Writing to console: ' + Unit8ArrayUtils.Uint8ArrayToString(msg?.content));\n            this.channel?.ack(msg);\n          }, consumeOptions);\n          await this.channel?.consume(errorQueue, (msg: ConsumeMessage | null) => {\n            this.consoleReceive.log('Writing to disk: ' + Unit8ArrayUtils.Uint8ArrayToString(msg?.content));\n            this.channel?.ack(msg);\n          }, consumeOptions);\n        })\n      }.width('100%')\n    }.height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Topics.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Column() {\n        Console({ model: $consoleSend }).height('40%')\n        Button($r('app.string.Publish_a_message')).onClick(async () => {\n          // 发布消息\n          const publishOptions: Options.Publish = { persistent: true };\n          this.channel?.sendToQueue(firstName, Buffer.from('both queues 1'), publishOptions);\n          this.channel?.sendToQueue(firstName, Buffer.from('both queues 2'), publishOptions);\n          this.channel?.sendToQueue(firstName, Buffer.from('first queue 1'), publishOptions);\n          this.channel?.sendToQueue(secondName, Buffer.from('second queue 3'), publishOptions);\n          this.channel?.sendToQueue(secondName, Buffer.from('second queue 1'), publishOptions);\n          this.channel?.sendToQueue(secondName, Buffer.from('second queue 2'), publishOptions);\n          this.channel?.sendToQueue(secondName, Buffer.from('discarded 1'), publishOptions);\n          let isPush =  this.channel?.sendToQueue(firstName, Buffer.from('discarded 2'), publishOptions);\n          this.consoleSend.info('publish message:' + isPush)\n        })\n        Console({ model: $consoleReceive }).height('40%')\n        Button($r('app.string.Consumer_News')).onClick(async () => {\n          // 消费消息\n          await this.channel?.consume('first', (msg: ConsumeMessage | null) => {\n              this.consoleReceive.log('First:' + Unit8ArrayUtils.Uint8ArrayToString(msg?.content));\n              this.channel?.ack(msg);\n            },{ exclusive: true });\n\n          await this.channel?.consume('second', (msg: ConsumeMessage | null) => {\n              this.consoleReceive.log('Second: ' + Unit8ArrayUtils.Uint8ArrayToString(msg?.content));\n              this.channel?.ack(msg);\n            },{ exclusive: true });\n        })\n      }.width('100%')\n    }.height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\WorkQueues.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Column() {\n        Console({ model: $consoleSend }).height('40%')\n        Button($r('app.string.Publish_a_message')).onClick(async () => {\n          // 发布消息\n          const message = 'Hello, World!';\n          const publishOptions: Options.Publish = { persistent: true };\n          let isPush: boolean | undefined = this.channel?.publish(exchangeName, routingKey, Buffer.from(message), publishOptions);\n          let isPush2: boolean | undefined = this.channel?.publish(exchangeName, routingKey, Buffer.from(message+'2'), publishOptions);\n          this.consoleSend.info('publish message:' + isPush)\n          this.consoleSend.info('publish message:' + isPush2)\n        })\n        Console({ model: $consoleReceive }).height('40%')\n        Button($r('app.string.Consumer_News')).onClick(async () => {\n          // 消费消息\n          const consumeOptions: Options.Consume = { noAck: false };\n          await this.channel?.consume(queueName, (msg: ConsumeMessage | null) => {\n            this.consoleReceive.log('Received message: ' + Unit8ArrayUtils.Uint8ArrayToString(msg?.content));\n            this.channel?.ack(msg);\n          }, consumeOptions);\n        })\n      }.width('100%')\n    }.height('100%')\n  }"
        }
    ]
}