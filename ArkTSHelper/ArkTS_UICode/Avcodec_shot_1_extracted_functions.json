{
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      this.Window()\n      this.SettingButton()\n\n      Column() {\n        Button(this.buttonEnabled ? $r('app.string.play') : $r('app.string.playing'))\n          .onClick(() => {\n            this.selectFile();\n          })\n          .size({\n            width: '100%',\n            height: $r('app.float.index_button_height')\n          })\n          .enabled(this.buttonEnabled)\n          .margin({ bottom: $r('app.float.button_margin_bottom') })\n\n        Button($r('app.string.record'))\n          .onClick(() => {\n            this.isShow = true;\n          })\n          .bindSheet($$this.isShow, this.Authorized, {\n            height: 210,\n            title: {\n              title: $r('app.string.saveButtonTitle')\n            }\n          })\n          .size({\n            width: '100%',\n            height: $r('app.float.index_button_height')\n          })\n          .enabled(this.buttonEnabled)\n      }\n      .margin({ top: (this.display.height * 0.7) + 'px' })\n      .alignRules({\n        'bottom': { 'anchor': '__container__', 'align': VerticalAlign.Bottom },\n        'left': { 'anchor': '__container__', 'align': HorizontalAlign.Start }\n      })\n      .padding({ left: '16vp', right: '16vp', bottom: '16vp' })\n      .width($r('app.string.full_width'))\n      .height($r('app.float.index_column_height'))\n      .justifyContent(FlexAlign.End)\n    }\n    .width($r('app.string.full_width'))\n    .height($r('app.string.full_height'))\n  }"
        },
        {
            "function_name": "SettingButton",
            "content": "@Builder\n  SettingButton() {\n    Button('选择相机分辨率')\n      .enabled(this.buttonEnabled)\n      .margin({ left: (this.display.width * 0.6) + 'px', bottom: (this.display.height * 0.8) + 'px' })\n      .onClick(() => {\n        TextPickerDialog.show({\n          defaultPickerItemHeight: Const.DEFAULT_PICKER_ITEM_HEIGHT,\n          selectedTextStyle: ({\n            font: ({\n              size: Const.SELECTED_TEXT_STYLE_FONT_SIZE\n            })\n          }),\n          range: Const.RECORDER_INFO,\n          canLoop: false,\n          alignment: DialogAlignment.Center,\n          backgroundColor: Color.White,\n          backgroundBlurStyle: BlurStyle.BACKGROUND_ULTRA_THICK,\n          onAccept: (value: TextPickerResult) => {\n            switch (value.value[0]) {\n              case Const.VIDEO_MIMETYPE[0]: {\n                this.cameraData.setCodecFormat(Const.TRUE, Const.MIME_VIDEO_HEVC);\n                break;\n              }\n              case Const.VIDEO_MIMETYPE[1]: {\n                this.cameraData.setCodecFormat(Const.FALSE, Const.MIME_VIDEO_AVC);\n                break;\n              }\n              case Const.VIDEO_MIMETYPE[2]: {\n                this.cameraData.setCodecFormat(Const.FALSE, Const.MIME_VIDEO_HEVC);\n                break;\n              }\n              default:\n                break;\n            }\n\n            switch (value.value[1]) {\n              case Const.VIDEO_RESOLUTION[0]: {\n                this.cameraData.setResolution(Const.VIDEO_WIDTH_4K, Const.VIDEO_HEIGHT_4K, Const.BITRATE_VIDEO_30M);\n                break;\n              }\n              case Const.VIDEO_RESOLUTION[1]: {\n                this.cameraData.setResolution(Const.VIDEO_WIDTH_1080P, Const.VIDEO_HEIGHT_1080P,\n                  Const.BITRATE_VIDEO_20M);\n                break;\n              }\n              case Const.VIDEO_RESOLUTION[2]: {\n                this.cameraData.setResolution(Const.VIDEO_WIDTH_720P, Const.VIDEO_HEIGHT_720P, Const.BITRATE_VIDEO_10M);\n                break;\n              }\n              default:\n                break;\n            }\n\n            switch (value.value[2]) {\n              case Const.VIDEO_FRAMERATE[0]: {\n                this.cameraData.frameRate = Const.FRAMERATE_VIDEO_30FPS;\n                break;\n              }\n              case Const.VIDEO_FRAMERATE[1]: {\n                this.cameraData.frameRate = Const.FRAMERATE_VIDEO_60FPS;\n                break;\n              }\n              default:\n                break;\n            }\n            this.checkIsProfileSupport();\n          }\n        });\n      })\n  }"
        },
        {
            "function_name": "Authorized",
            "content": "@Builder\n  Authorized() {\n    Column() {\n      Text($r('app.string.saveButtonNote'))\n        .width('100%')\n        .fontSize('16vp')\n        .margin({ bottom: '12vp' })\n\n      Row() {\n        Button($r('app.string.saveButtonCancel'))\n          .onClick(() => {\n            this.isShow = false;\n          })\n          .width('48%')\n\n        Blank()\n\n        SaveButton({ text: SaveDescription.SAVE })\n          .onClick(async () => {\n            const context = getContext(this);\n            let helper = photoAccessHelper.getPhotoAccessHelper(context);\n            let uri = await helper.createAsset(photoAccessHelper.PhotoType.VIDEO, 'mp4', {\n              title: `AVCodecVideo_${DATETIME.getDate()}_${DATETIME.getTime()}`\n            });\n            let file = await fileIo.open(uri, fileIo.OpenMode.READ_WRITE | fileIo.OpenMode.CREATE);\n            this.cameraData.outputfd = file.fd;\n            if (this.cameraData.outputfd !== null) {\n              recorder.initNative(this.cameraData.outputfd, this.cameraData.videoCodecMime, this.cameraData.cameraWidth,\n                this.cameraData.cameraHeight, this.cameraData.frameRate, this.cameraData.isHDRVivid,\n                this.cameraData.bitRate).then((data) => {\n                if (data.surfaceId !== null) {\n                  this.cameraData.surfaceId = data.surfaceId;\n                  router.pushUrl({\n                    url: 'recorder/Recorder',\n                    params: this.cameraData\n                  });\n                }\n              })\n            } else {\n              Logger.error(TAG, 'get outputfd failed!');\n            }\n          })\n          .width('48%')\n          .height('40vp')\n      }\n      .justifyContent(FlexAlign.SpaceAround)\n      .alignItems(VerticalAlign.Bottom)\n      .margin({ bottom: '44vp' })\n      .width('100%')\n      .height('52vp')\n    }\n    .justifyContent(FlexAlign.End)\n    .padding({ left: '16vp', right: '16vp' })\n    .width('100%')\n    .height('100%')\n  }"
        },
        {
            "function_name": "Window",
            "content": "@Builder\n  Window() {\n    Row() {\n      XComponent({\n        id: 'player',\n        type: XComponentType.SURFACE,\n        libraryname: 'player'\n      })\n        .height(Const.FULL_SIZE)\n        .width(Const.FULL_SIZE)\n    }\n    .alignRules({\n      'top': { 'anchor': '__container__', 'align': VerticalAlign.Top },\n      'left': { 'anchor': '__container__', 'align': HorizontalAlign.Start }\n    })\n  }"
        }
    ]
}