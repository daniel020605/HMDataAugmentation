{
    "entry\\src\\main\\ets\\component\\CodeInputView.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Stack() {\n            if (this.codeKids != null) {\n                Row({ space: 10 }) {\n                    ForEach(this.codeKids, (item: string, index: number) => {\n                        Text(item)\n                            .backgroundColor(\"#CCFFFFFF\")\n                            .height(\"100%\")\n                            .layoutWeight(1)\n                            .fontSize(25)\n                            .textAlign(TextAlign.Center)\n                            .align(Alignment.Center)\n                            .borderRadius(15)\n                            .focusable(false)\n                            .defaultFocus(false)\n                            .focusOnTouch(false)\n                            .onClick(() => {\n                                focusControl.requestFocus(this.inputKey)\n                            })\n                    }, (item: string) => item)\n                }.height(\"100%\").width(\"100%\")\n\n                TextInput()\n                    .maxLength(this.viewSize)\n                    .fontSize(25)\n                    .borderRadius(15)\n                    .type(InputType.Number)\n                    .key(this.inputKey)\n                    .onChange((value) => {\n                        let a = value.split('')\n                        this.codeKids.forEach((value, index) => {\n                            this.codeKids[index] = a[index] || ''\n                        })\n                        if (a.length >= this.viewSize) {\n                            this.inputResultCallback(value)\n                        }\n                        this.showCaret = (a.length == 0)\n                    })\n                    .copyOption(CopyOptions.None)\n                    .caretColor(this.showCaret ? Color.Black : Color.Transparent)\n                    .fontColor(Color.Transparent)\n                    .backgroundColor(Color.Transparent)\n                        //TODO 系统问题，如果背景色是透明的也没用，非透明可以\n                        // .stateStyles({ pressed: {.backgroundColor(\"跟背景一样的颜色（纯透明会黑色闪一下）\")}})\n                    .height(\"100%\")\n                    .width(\"100%\")\n            }\n        }.height(80).backgroundColor(Color.Gray)\n    }"
        }
    ],
    "entry\\src\\main\\ets\\component\\CropAvatarView.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Stack() {\n            Image(this.model.src)\n                .width('100%')\n                .height('100%')\n                .alt(this.model.previewSource)\n                .objectFit(ImageFit.Contain)\n                .transform(this.matrix)\n                .onComplete((msg) => {\n                    if (msg) { // 图片加载成功\n                        this.model.imageWidth = msg.width;\n                        this.model.imageHeight = msg.height;\n                        this.model.componentWidth = msg.componentWidth;\n                        this.model.componentHeight = msg.componentHeight;\n                        this.checkImageAdapt();\n\n                        if (this.model.imageLoadEventListener != null && msg.loadingStatus == 1) {\n                            this.model.imageLoadEventListener.onImageLoaded(msg);\n                        }\n                    }\n                })\n                .onError((error) => {\n                    if (this.model.imageLoadEventListener != null) {\n                        this.model.imageLoadEventListener.onImageLoadError(error);\n                    }\n                })\n            Canvas(this.context)\n                .width('100%')\n                .height('100%')\n                .backgroundColor(Color.Transparent)\n                .onReady(() => {\n                    if (this.context == null) {\n                        return\n                    }\n\n                    let height = this.context.height\n                    let width = this.context.width\n                    this.context.fillStyle= this.model.maskColor;\n                    this.context.fillRect(0, 0, width, height)\n\n                    // 计算圆形的中心点和半径\n                    let centerX = width / 2;\n                    let centerY = height / 2;\n                    let minDimension = Math.min(width, height);\n                    let frameRadiusInVp = (minDimension - px2vp(this.model.frameWidth)) / 2; // 减去边框宽度\n\n                    // 把中间的取景框透出来\n                    this.context.globalCompositeOperation = 'destination-out'\n                    this.context.fillStyle = 'white'\n                    let frameWidthInVp = px2vp(this.model.frameWidth);\n                    let frameHeightInVp = px2vp(this.model.getFrameHeight());\n                    let x = (width - px2vp(this.model.frameWidth)) / 2;\n                    let y = (height - px2vp(this.model.getFrameHeight())) / 2;\n                    // this.context.fillRect(x, y, frameWidthInVp, frameHeightInVp)\n                    console.info(`width:${width}`)\n                    console.info(`height:${height}`)\n                    console.info(`x:${x}`)\n                    console.info(`y:${y}`)\n                    console.info(`this.model.frameWidth:${this.model.frameWidth}`)\n                    console.info(`this.model.getFrameHeight():${this.model.getFrameHeight()}`)\n                    console.info(`frameWidthInVp:${frameWidthInVp}`)\n                    console.info(`frameHeightInVp:${frameHeightInVp}`)\n                    console.info(`frameRadiusInVp:${frameRadiusInVp}`)\n                    this.context.beginPath();\n                    this.context.arc(centerX, centerY, px2vp(this.model.frameWidth/2), 0, 2 * Math.PI);\n                    this.context.fill();\n\n                    // 设置综合操作模式为源覆盖，以便在现有图形上添加新的图形\n                    this.context.globalCompositeOperation = 'source-over';\n\n                    // 设置描边颜色\n                    this.context.strokeStyle = this.model.strokeColor;\n\n                    // 计算圆形的半径，这里我们取正方形边框的较短边的一半作为半径\n                    let radius = Math.min(frameWidthInVp, frameHeightInVp) / 2;\n\n                    // 开始绘制路径\n                    this.context.beginPath();\n\n                    // 使用 arc 方法绘制圆形\n                    this.context.arc(centerX, centerY, radius, 0, 2 * Math.PI);\n\n                    // 关闭路径\n                    this.context.closePath();\n\n                    // 描绘圆形边框\n                    this.context.lineWidth = 1; // 边框宽度\n                    this.context.stroke();\n\n                })\n                .enabled(false)\n        }\n        .clip(true)\n        .width('100%')\n        .height('100%')\n        .backgroundColor(\"#00000080\")\n        .priorityGesture(\n            TapGesture({ count: 2, fingers: 1 })\n                .onAction((event:GestureEvent) => {\n                    if(!event){\n                        return\n                    }\n                    if (this.model.zoomEnabled) {\n                        if (this.model.scale != 1) {\n                            this.model.scale = 1;\n                            this.model.reset();\n                            this.updateMatrix();\n                        } else {\n                            this.zoomTo(2);\n                        }\n                    }\n\n                    this.checkImageAdapt();\n                })\n        )\n        .gesture(\n            GestureGroup(GestureMode.Parallel,\n                // 拖动手势\n                PanGesture({})\n                    .onActionStart(() => {\n                        hilog.info(0, \"CropView\", \"Pan gesture start\");\n                        this.startOffsetX = this.model.offsetX;\n                        this.startOffsetY = this.model.offsetY;\n                    })\n                    .onActionUpdate((event:GestureEvent) => {\n                        hilog.info(0, \"CropView\", `Pan gesture update: ${JSON.stringify(event)}`);\n                        if (event) {\n                            if (this.model.panEnabled) {\n                                let distanceX: number = this.startOffsetX + vp2px(event.offsetX) / this.model.scale;\n                                let distanceY: number = this.startOffsetY + vp2px(event.offsetY) / this.model.scale;\n                                this.model.offsetX = distanceX;\n                                this.model.offsetY = distanceY;\n                                this.updateMatrix()\n                            }\n                        }\n                    })\n                    .onActionEnd(() => {\n                        hilog.info(0, \"CropView\", \"Pan gesture end\");\n                        this.checkImageAdapt();\n                    }),\n\n                // 缩放手势处理\n                PinchGesture({ fingers: 2 })\n                    .onActionStart(() => {\n                        this.tempScale = this.model.scale\n                    })\n                    .onActionUpdate((event) => {\n                        if (event) {\n                            if (!this.model.zoomEnabled) return;\n                            this.zoomTo(this.tempScale * event.scale);\n                        }\n                    })\n                    .onActionEnd(() => {\n                        this.checkImageAdapt();\n                    })\n            )\n        )\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\ArktsUiPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Column() {\n            Text(\"验证码输入框\")\n            CodeInputView({\n                codeKids:this.codeKids,\n                inputResultCallback:this.inputResultCallback.bind(this)\n            }).margin({\n                top:10\n            }).width('90%').height(50)\n        }\n        .height('100%')\n        .width('100%')\n        .justifyContent(FlexAlign.Center);\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\CropAvatarPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Column() {\n            HdNav({\n                title:\"裁剪圆形头像\"\n            })\n\n            CropAvatarView({\n                model: this.model,\n            }).layoutWeight(1).width('100%')\n\n            Row({space:20}){\n                Button('选择图片').onClick(()=>{\n                    this.openPicker()\n                })\n\n                Button('测试剪裁').onClick(async () => {\n                    try {\n                        this.pm = await this.model.crop(image.PixelMapFormat.RGBA_8888);\n                    } catch (e) {\n                        console.info(`e:${JSON.stringify(e)}`)\n                    }\n                })\n            }.margin({\n                top:10,bottom:10\n            })\n            Image(this.pm).width('300lpx').height('300lpx').borderRadius('150lpx')\n        }\n        .height('100%')\n        .width('100%')\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\DialogPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Column(){\n            HdNav({\n                title:\"弹窗\"\n            })\n\n            RelativeContainer(){\n                Column({space:20}){\n                    Button(\"警告弹窗\").onClick(event=>{\n                        this.showAlertDialog();\n                    })\n\n                    Button(\"自定义弹窗\").onClick(event=>{\n                        this.privacyPolicyDialog.open();\n                    })\n\n                    Button(\"加载中弹窗\").onClick(event=>{\n                        this.loadingDialog.open();\n                    })\n\n                    Button(\"全局弹窗，多组件复用\").onClick(event=>{\n                        GlobalDialog.show(this.getUIContext(),{\n                            content:\"您确定要删除这条记录吗？\",\n                            onConfirm:()=>{\n                                GlobalDialog.close(this.getUIContext())//关闭弹窗\n                                AppUtil.showToast(\"确定按钮点击\");\n                            },\n                            onCancel:()=>{\n                                GlobalDialog.close(this.getUIContext())//关闭弹窗\n                                AppUtil.showToast(\"取消按钮点击\");\n                            }\n                        })\n                    })\n\n                    //文章说明:https://mp.weixin.qq.com/s?__biz=MzIxODI4NzQ1Nw==&mid=2652474041&idx=1&sn=2d75e31dd16a6ac67abf4e7af4970c6a\n                    Button(\"模拟弹窗，点击隐私协议后，保证新页面不会被弹窗遮住\").onClick(event=>{\n                        this.isAgreePrivacyPolicy = !this.isAgreePrivacyPolicy;\n                    })\n\n                }.justifyContent(FlexAlign.Center).margin({\n                    top:180\n                })\n\n                if (this.isAgreePrivacyPolicy){\n                    PrivacyPolicyDialogTwo({\n                        cancel:()=>{\n                            this.isAgreePrivacyPolicy=false\n                            AppUtil.showToast(\"拒绝隐私政策\");\n                        },\n                        confirm:()=>{\n                            this.isAgreePrivacyPolicy=false\n                            AppUtil.showToast(\"同意隐私政策\");\n                        },\n                    })\n                }\n            }\n\n\n        }.height('100%')\n        .width('100%')\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\HomePage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Column({space:10}) {\n            Button(\"弹窗\").onClick(event=>{\n                router.pushUrl({url: Pages.DialogPage}, router.RouterMode.Single)\n            })\n\n            Button(\"选择图片/视频\").onClick(event=>{\n                router.pushUrl({url: Pages.SelectMediaPage}, router.RouterMode.Single)\n            })\n\n            Button(\"头像裁剪圆形遮罩\").onClick(event=>{\n                router.pushUrl({url: Pages.CropAvatarPage}, router.RouterMode.Single)\n            })\n\n            Button(\"头像裁剪圆形遮罩\").onClick(event=>{\n                router.pushUrl({url: Pages.CropAvatarPage}, router.RouterMode.Single)\n            })\n\n            Button(\"省市区三级联动\").onClick(event=>{\n                router.pushUrl({url: Pages.SelectRegionPage}, router.RouterMode.Single)\n            })\n        }\n        .height('100%')\n        .width('100%')\n        .justifyContent(FlexAlign.Center)\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Main.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Tabs({\n            index: this.activeIndex\n        }) {\n            ForEach(this.tabBarItems,(item: TabBarItem, index: number) => {\n                TabContent() {\n                    if (index === 0) HomePage()\n                    else if (index === 1) ArktsUiPage()\n                }\n                .tabBar(this.TabBarBuilder(item, index))\n                .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])\n            })\n        }\n        .divider({ strokeWidth: $r('app.float.border_width'), color: $r('app.color.splite_color') })\n        .vertical(this.isLandscape)\n        .barPosition(this.isLandscape ? BarPosition.Start : BarPosition.End)\n        .onTabBarClick((index) => {\n            this.activeIndex = index\n        })\n        .barHeight(this.isLandscape ? $r('app.float.tab_bar_item_height_lg') : $r('app.float.tab_bar_item_height_sm'))\n        .scrollable(false)\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\SelectMediaPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Column(){\n            HdNav({\n                title:\"选择图片/视频\"\n            })\n\n            Flex({ wrap: FlexWrap.Wrap }){ // 子组件多行布局\n                ForEach(this.list, (item:string,index) => {\n                    ListItem() {\n                        Stack({alignContent:Alignment.TopEnd}){\n                            Image(item).width('100%').height(90).onClick(event=>{\n                                this.onAlbumClick(index);\n                            })\n                            Image($r('app.media.icon_delete_image')).width(25).height(25).padding(5).onClick(event=>{\n                                this.onDeleteAlbumImage(item,index);\n                            })\n                        }.width('23.5%').height(90).margin({\n                            left:2,right:2,top:2,bottom:2\n                        })\n                    }\n                }, (item:string) => util.generateRandomUUID(true))\n\n                if (this.list.length < SelectMediaPage.MAX_ALBUM_NUM){\n                    Image($r('app.media.icon_album_add')).width(90).height(90).onClick(event=>{\n                        this.onSelectAlbum();\n                    })\n                }\n            }.margin({\n                top:15,bottom:15\n            }).width('100%').backgroundColor($r('app.color.white'))\n            .padding({\n                left:10,right:10,top:5,bottom:5\n            })\n        }\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\SelectRegionPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Column(){\n            HdNav({\n                title:\"省市区三级联动\"\n            })\n\n            Text(this.selectProvince+this.selectCity).fontColor($r('app.color.title_color')).fontSize(24).margin({\n                top:150\n            })\n\n            Button(\"选择省市区\").onClick(event=>{\n                this.onSelectRegion();\n            }).margin({\n                top:20\n            })\n        }\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\WebViewPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n        Column() {\n            HdNav({\n                title:this.title\n            })\n\n            Web({ src: this.url, controller: this.controller })\n                .javaScriptAccess(true)\n                .onTitleReceive((event) => {\n                    this.title = event?.title;\n            }).layoutWeight(1).onLoadIntercept(event=>{\n                let url = event.data.getRequestUrl();\n                console.log('可以在这里拦截请求 url:' + event.data.getRequestUrl());\n                return false;\n            })\n\n        }.justifyContent(FlexAlign.Start)\n    }"
        }
    ]
}