{
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Button(this.strSelectFile)\n        .fontSize(20)\n        .margin({ top: 20 })\n        .height(50)\n        .width(\"80%\")\n        .onClick(() => {\n          this.fileSelectDialogController.open()\n        })\n      Row() {\n        Text(this.strLocalFile)\n          .fontSize(15)\n          .fontColor(Color.Black)\n        Text(this.fileNameTest)\n      }.margin({ top: 10 })\n\n      Row() {\n        Toggle({\n          type: ToggleType.Switch,\n          isOn: false,\n        })\n          .padding(0)\n          .width(50)\n          .height(20)\n          .borderRadius(20)\n          .selectedColor(Color.Blue)\n          .margin({ right: 1 })\n          .onChange(isOn => {\n            if (isOn) {\n              this.isLoop = true;\n            } else {\n              this.isLoop = false;\n            }\n          })\n        Text(\"循环测功耗\").margin({ right: 1 }).fontSize(12)\n\n        Toggle({\n          type: ToggleType.Switch,\n          isOn: false,\n        })\n          .padding(0)\n          .width(50)\n          .height(20)\n          .borderRadius(20)\n          .selectedColor(Color.Blue)\n          .margin({ left: 5 })\n          .onChange(isOn => {\n            if (isOn) {\n              this.isTestFPS = true;\n            } else {\n              this.isTestFPS = false;\n            }\n          })\n        Text(\"测帧率\").margin({ left: 1 }).fontSize(12)\n\n        Toggle({\n          type: ToggleType.Switch,\n          isOn: false,\n        })\n          .padding(0)\n          .width(50)\n          .height(20)\n          .borderRadius(20)\n          .selectedColor(Color.Blue)\n          .margin({ left: 5 })\n          .onChange(isOn => {\n            if (isOn) {\n              this.dSurfaceNotDisplay = true;\n            } else {\n              this.dSurfaceNotDisplay = false;\n            }\n          })\n        Text(\"解码不显示\").margin({ left: 1 }).fontSize(12)\n      }.margin({ top: 10, left: 13 })\n\n      Row() {\n        Toggle({\n          type: ToggleType.Switch,\n          isOn: false,\n        })\n          .padding(0)\n          .width(60)\n          .height(25)\n          .borderRadius(40)\n          .selectedColor(Color.Blue)\n          .margin({ right: 5 })\n          .onChange(isOn => {\n            if (isOn) {\n              this.isEncode = true;\n              this.encodeDialogController.open()\n            } else {\n              this.isEncode = false;\n            }\n          })\n        Text(this.encode).margin({ right: 40 })\n        Toggle({\n          type: ToggleType.Switch,\n          isOn: false,\n        })\n          .padding(0)\n          .width(60)\n          .height(25)\n          .borderRadius(40)\n          .selectedColor(Color.Blue)\n          .margin({ left: 40 })\n          .onChange(isOn => {\n            if (isOn) {\n              this.isDecode = true;\n              this.decodeDialogController.open()\n            } else {\n              this.isDecode = false;\n            }\n          })\n        Text(this.decode).margin({ left: 5 })\n      }.margin({ top: 10 })\n\n      Row() {\n        Text(this.encodeStr).margin({ right: 75 }).fontSize(14).onClick(() => this.encodeDialogController.open())\n        Text(this.decodeStr).margin({ left: 15 }).fontSize(14).onClick(() => this.decodeDialogController.open())\n      }.margin({ top: 5 })\n\n      Row() {\n        Text(\"自定义:\").fontSize(12).margin({ left: 12 })\n        Toggle({\n          type: ToggleType.Switch,\n          isOn: false,\n        })\n          .padding(0)\n          .width(50)\n          .height(20)\n          .borderRadius(20)\n          .selectedColor(Color.Blue)\n          .onChange(isOn => {\n            if (isOn) {\n              this.customAttribute = true;\n            } else {\n              this.customAttribute = false;\n            }\n          })\n        Text(\"帧率:\").margin({ left: 10 }).fontSize(12)\n        TextInput({ text: this.inputFPS })\n          .placeholderColor(Color.Grey)\n          .caretColor(Color.Blue)\n          .width(50)\n          .height(30)\n          .type(InputType.Number)\n          .fontSize(12)\n          .fontColor(Color.Black)\n          .onChange((value: string) => {\n            this.inputFPS = value\n          })\n\n        Text(\"间隔(us):\").margin({ left: 10 }).fontSize(12)\n        TextInput({ text: this.inputIntervalUs })\n          .placeholderColor(Color.Grey)\n          .caretColor(Color.Blue)\n          .width(70)\n          .height(30)\n          .type(InputType.Number)\n          .fontSize(12)\n          .fontColor(Color.Black)\n          .onChange((value: string) => {\n            this.inputIntervalUs = value\n          })\n      }.margin({ top: 5 })\n      // 开始按钮\n      Button(this.strStart)\n        .fontSize(20)\n        .margin({ top: 20 })\n        .height(50)\n        .backgroundColor(this.startColor)\n        .width(\"80%\")\n        .onClick(() => {\n          //          if(this.isWorking) {\n          //            this.showToast(\"正在进行任务...\");\n          //            return;\n          //          }\n          if (!this.isDecode && !this.isEncode) {\n            this.showToast(\"不能两个都不选\");\n            return;\n          }\n          if (this.isDecode && !this.isEncode) {\n            this.startDecode()\n            return;\n          }\n          if (!this.isDecode && this.isEncode) {\n            this.startEncode()\n            return;\n          }\n          if (this.isDecode && this.isEncode) {\n            this.startEncodeAndDecode();\n            return;\n          }\n        })\n\n      XComponent({\n        id: 'xcomponentId',\n        type: 'surface',\n        libraryname: 'entry'\n      })\n        .onLoad((xComponentContext) => {\n          globalThis.xComponentContext = xComponentContext;\n        })\n        .onDestroy(() => {\n          console.log('onDestroy');\n        })\n        .height(108)\n        .width(192)\n        .margin({ top: 20 })\n\n      Text(this.decodeResult).margin({ left: 40, right: 40, top: 10 }).fontSize(12)\n\n      Row() {\n        Button(\"解封装本地流\")\n          .fontSize(15)\n          .height(50)\n          .backgroundColor(this.startColor)\n          .margin({ right: 5 })\n          .width(\"40%\")\n          .onClick(() => {\n            this.decodeCallback();\n            this.isWorking = true\n            this.startColor = Color.Gray\n            testNapi.startDemuxer(0);\n          })\n        Button(\"解封装网络流\")\n          .fontSize(15)\n          .height(50)\n          .margin({ left: 5 })\n          .backgroundColor(this.startColor)\n          .width(\"40%\")\n          .onClick(() => {\n            this.decodeCallback();\n            this.isWorking = true\n            this.startColor = Color.Gray\n            testNapi.startDemuxer(1);\n          })\n      }.margin({ top: 30 })\n\n      Row() {\n        Button(this.muxerMessage)\n          .fontSize(15)\n          .height(50)\n          .backgroundColor(this.startColor)\n          .margin({ right: 5 })\n          .width(\"40%\")\n          .onClick(() => {\n            this.muxerMessage = \"封装中\"\n            testNapi.startMuxer(globalThis.context.filesDir);\n            this.muxerMessage = '封装结束'\n          })\n        Button(this.audioMessage)\n          .fontSize(15)\n          .height(50)\n          .margin({ left: 5 })\n          .backgroundColor(this.startColor)\n          .width(\"40%\")\n          .onClick(() => {\n            this.audioMessage = \"任务中\"\n            testNapi.startAudioWork(globalThis.context.filesDir);\n            this.audioMessage = '任务结束'\n          })\n      }.margin({ top: 30 })\n\n      Row() {\n        Button(this.allTaskText)\n          .fontSize(15)\n          .height(50)\n          .backgroundColor(this.startColor)\n          .margin({ right: 5 })\n          .width(\"40%\")\n          .onClick(() => {\n            this.startColor = Color.Gray;\n            this.filePath = globalThis.context.filesDir + \"/test.mp4\";\n            hilog.info(0x0000, 'testTag', '%{public}s', this.filePath);\n            try {\n              globalThis.context.resourceManager.getRawFd(\"avcc_10sec.mp4\", (error:BusinessError, value:ESObject) => {\n                if (error != null) {\n                  console.log(`callback getRawFd failed error code: ${error.code}, message: ${error.message}.`);\n                } else {\n                  let fd:number = value.fd;\n                  let offset:number = value.offset;\n                  let length:number = value.length;\n                  let file = fs.openSync(this.filePath, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n                  testNapi.startAllTask(file.fd, fd, offset, length);\n                  fs.closeSync(file.fd);\n                  this.startColor = Color.Blue;\n                  router.pushUrl({ url: 'pages/Play', })\n                }\n              })\n            } catch (error) {\n              console.error(`callback getRawFd failed, error code: ${error.code}, message: ${error.message}.`)\n            }\n            ;\n          })\n        Button(this.demuxBtnText)\n          .fontSize(15)\n          .height(50)\n          .margin({ left: 5 })\n          .backgroundColor(this.startColor)\n          .width(\"40%\")\n          .onClick(() => {\n            this.startColor = Color.Gray;\n            try {\n              globalThis.context.resourceManager.getRawFd(\"avcc_10sec.mp4\", (error:BusinessError, value:ESObject) => {\n                if (error != null) {\n                  console.log(`callback getRawFd failed error code: ${error.code}, message: ${error.message}.`);\n                } else {\n                  let fd:number = value[\"fd\"];\n                  let offset:number = value.offset;\n                  let length:number = value.length;\n                  testNapi.startDeTask(fd, offset, length);\n                }\n              });\n            } catch (error) {\n              console.error(`callback getRawFd failed, error code: ${error.code}, message: ${error.message}.`)\n            }\n            ;\n            this.startColor = Color.Blue;\n          })\n      }.margin({ top: 30 })\n\n    }.width('100%')\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text('编码器参数设定').fontSize(20).margin({ top: 10, bottom: 10 })\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('编码模式：')\n          Radio({ value: 'sync', group: 'encodeType1' }).checked(this.type)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.type = true;\n              }\n            })\n          Text('同步')\n          Radio({ value: 'asyn', group: 'encodeType1' }).checked(!this.type)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.type = false;\n              }\n            })\n          Text('异步')\n        }\n      }.margin({ top: 5 }).visibility(Visibility.None)\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('编码格式：')\n          Radio({ value: 'h264', group: 'encodeType2' }).checked(this.format)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.format = true;\n              }\n            })\n          Text('h264')\n          Radio({ value: 'h265', group: 'encodeType2' }).checked(!this.format)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.format = false;\n              }\n            })\n          Text('h265')\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('帧率：')\n          Radio({ value: '30', group: 'encodeType3' }).checked(this.FPS)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.FPS = true;\n              }\n            })\n          Text('30')\n          Radio({ value: '60', group: 'encodeType3' }).checked(!this.FPS)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.FPS = false;\n              }\n            })\n          Text('60')\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('编码输入：')\n          Radio({ value: 'surface', group: 'decodeType2' }).checked(this.surface)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.surface = true;\n              }\n            })\n          Text('Surface')\n          Radio({ value: 'buffer', group: 'decodeType2' }).checked(!this.surface)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.surface = false;\n              }\n            })\n          Text('Buffer')\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('解码器：')\n          Radio({ value: 'hardware', group: 'encodeType4' }).checked(this.ware)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.ware = true;\n              }\n            })\n          Text('硬件')\n          Radio({ value: 'software', group: 'encodeType4' }).checked(!this.ware)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.ware = false;\n              }\n            })\n          Text('软件')\n        }\n      }.margin({ top: 5 }).visibility(Visibility.None)\n\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button('取消')\n          .onClick(() => {\n            this.controller.close()\n            this.cancel()\n          }).backgroundColor(0xffffff).fontColor(Color.Black)\n        Button('确定')\n          .onClick(() => {\n            this.controller.close()\n            this.confirm(this.type, this.format, this.FPS, this.ware, this.surface)\n          }).backgroundColor(0xffffff).fontColor(Color.Blue)\n      }.margin({ bottom: 10 })\n    }\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text('解码器参数设定').fontSize(20).margin({ top: 10, bottom: 10 })\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('解码模式：')\n          Radio({ value: 'sync', group: 'decodeType1' }).checked(this.type)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.type = true;\n              }\n            })\n          Text('同步')\n          Radio({ value: 'asyn', group: 'decodeType1' }).checked(!this.type)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.type = false;\n              }\n            })\n          Text('异步')\n        }\n      }.margin({ top: 5 }).visibility(Visibility.None)\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('解码格式：')\n          Radio({ value: 'surface', group: 'decodeType2' }).checked(this.format)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.format = true;\n              }\n            })\n          Text('Surface')\n          Radio({ value: 'buffer', group: 'decodeType2' }).checked(!this.format)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.format = false;\n              }\n            })\n          Text('Buffer')\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Text('解码器：')\n          Radio({ value: 'hardware', group: 'decodeType3' }).checked(this.ware)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.ware = true;\n              }\n            })\n          Text('硬件')\n          Radio({ value: 'software', group: 'decodeType3' }).checked(!this.ware)\n            .height(20)\n            .width(20)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.ware = false;\n              }\n            })\n          Text('软件')\n        }\n      }.margin({ top: 5 })\n\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button('取消')\n          .onClick(() => {\n            this.controller.close()\n            this.cancel()\n          }).backgroundColor(0xffffff).fontColor(Color.Black)\n        Button('确定')\n          .onClick(() => {\n            this.controller.close()\n            this.confirm(this.type, this.format, this.ware)\n          }).backgroundColor(0xffffff).fontColor(Color.Blue)\n      }.margin({ bottom: 10 })\n    }\n  }"
        },
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text('序列选择').fontSize(15).margin({ top: 10, bottom: 10 })\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1280_720_10M_30.h264';\n                this.fileWidth = 1280\n                this.fileHeight = 720\n              }\n            })\n          Text('1280_720_10M_30.h264').fontSize(10).margin({ right: 20 })\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1280_720_10M_30.h265';\n                this.fileWidth = 1280\n                this.fileHeight = 720\n              }\n            })\n          Text('1280_720_10M_30.h265').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1280_720_10M_60.h264';\n                this.fileWidth = 1280\n                this.fileHeight = 720\n              }\n            })\n          Text('1280_720_10M_60.h264').fontSize(10).margin({ right: 20 })\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1280_720_10M_60.h265';\n                this.fileWidth = 1280\n                this.fileHeight = 720\n              }\n            })\n          Text('1280_720_10M_60.h265').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1920_1080_20M_30.h264';\n                this.fileWidth = 1920\n                this.fileHeight = 1080\n              }\n            })\n          Text('1920_1080_20M_30.h264').fontSize(10).margin({ right: 20 })\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1920_1080_20M_30.h265';\n                this.fileWidth = 1920\n                this.fileHeight = 1080\n              }\n            })\n          Text('1920_1080_20M_30.h265').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1920_1080_20M_60.h264';\n                this.fileWidth = 1920\n                this.fileHeight = 1080\n              }\n            })\n          Text('1920_1080_20M_60.h264').fontSize(10).margin({ right: 20 })\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1920_1080_20M_60.h265';\n                this.fileWidth = 1920\n                this.fileHeight = 1080\n              }\n            })\n          Text('1920_1080_20M_60.h265').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '3840_2160_30M_30.h264';\n                this.fileWidth = 3840\n                this.fileHeight = 2160\n              }\n            })\n          Text('3840_2160_30M_30.h264').fontSize(10).margin({ right: 20 })\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '3840_2160_30M_30.h265';\n                this.fileWidth = 3840\n                this.fileHeight = 2160\n              }\n            })\n          Text('3840_2160_30M_30.h265').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '3840_2160_30M_60.h264';\n                this.fileWidth = 3840\n                this.fileHeight = 2160\n              }\n            })\n          Text('3840_2160_30M_60.h264').fontSize(10).margin({ right: 20 })\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '3840_2160_30M_60.h265';\n                this.fileWidth = 3840\n                this.fileHeight = 2160\n              }\n            })\n          Text('3840_2160_30M_60.h265').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1280_720_nv.yuv';\n                this.fileWidth = 1280\n                this.fileHeight = 720\n              }\n            })\n          Text('1280_720_nv.yuv').fontSize(10)\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1920_1080_nv.yuv';\n                this.fileWidth = 1920\n                this.fileHeight = 1088\n              }\n            })\n          Text('1920_1080_nv.yuv').fontSize(10)\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '3840_2160_nv.yuv';\n                this.fileWidth = 3840\n                this.fileHeight = 2160\n              }\n            })\n          Text('3840_2160_nv.yuv').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Row() {\n        Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {\n          Radio({ value: 'h264_720_10M_30', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1280_720_rgba.yuv';\n                this.fileWidth = 1280\n                this.fileHeight = 720\n              }\n            })\n          Text('1280_720_rgba.yuv').fontSize(10)\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '1920_1088_rgba.yuv';\n                this.fileWidth = 1920\n                this.fileHeight = 1088\n              }\n            })\n          Text('1920_1080_rgba.yuv').fontSize(10)\n\n          Radio({ value: 'asyn', group: 'fileNameGroup' }).checked(false)\n            .height(15)\n            .width(15)\n            .onChange((isChecked: boolean) => {\n              if (isChecked) {\n                this.fileName = '3840_2160_500_rgba.yuv';\n                this.fileWidth = 3840\n                this.fileHeight = 2160\n              }\n            })\n          Text('3840_2160_rgba.yuv').fontSize(10)\n        }\n      }.margin({ top: 5 })\n\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button('取消')\n          .onClick(() => {\n            this.controller.close()\n            this.cancel()\n          }).backgroundColor(0xffffff).fontColor(Color.Black)\n        Button('确定')\n          .onClick(() => {\n            this.controller.close()\n            this.confirm(this.fileName, this.fileWidth, this.fileHeight)\n          }).backgroundColor(0xffffff).fontColor(Color.Blue)\n      }.margin({ bottom: 10 })\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Play.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll() {\n      Column() {\n        Stack() {\n          Video({\n            src: this.videoURI,\n            controller: this.fullVideoController\n          })\n            .width('100%')\n            .height('100%')\n            .autoPlay(true)\n            .loop(true)\n            .controls(false)\n            .objectFit(ImageFit.Contain)\n            .id('fullVideo')\n            .onPause(() => {\n              this.isHidden = true\n            })\n            .onFullscreenChange((e) => {\n              this.isHidden = false\n            })\n            .onStart(() => {\n              this.isHidden = false\n            })\n            .onPrepared((e) => {\n              this.fullVideoController.setCurrentTime(this.playTime)\n              this.maxValue = e.duration\n              hilog.info(0x0000, 'testTag', 'read video time %{public}d.',e.duration);\n            })\n            .onUpdate((e) => {\n              this.nowValue = e.time\n            })\n            .onClick(() => {\n              this.fullVideoController.pause();\n            })\n            .onError(() => {\n              hilog.info(0x0000, 'testTag', 'read video failed.');\n            })\n\n\n          // 暂停按钮\n          if(this.isHidden){\n            Column() {\n              Image($r('app.media.play'))\n                .id('fullPlayBtn')\n                .width(78).height(78)\n                .onClick(() => {\n                  this.fullVideoController.start()\n                  this.isHidden = !this.isHidden\n                })\n            }\n            .position({ x: this.isPhone ? '42%' : '47%', y: '45%' })\n          }\n        }.width('100%').height('100%')\n\n        // 返回上一页按钮\n        Column() {\n          Image($r('app.media.back'))\n            .id('backBtn')\n            .width(42).height(42)\n            .onClick(() => {\n              router.back()\n            })\n        }\n        .position({ x: '5%', y: '5%' })\n\n        // 底部时间条\n        Row() {\n          Text(this.changTime(Number(this.nowValue.toFixed(0)))).fontSize(18).fontColor(Color.White)\n          Slider({\n            value: this.nowValue,\n            min: 0,\n            max: this.maxValue,\n            style: SliderStyle.OutSet\n          })\n            .width('75%')\n            .blockColor(Color.White)\n            .trackColor('#cccccc')\n            .selectedColor('#E92F4F')\n            .showSteps(false)\n            .onChange((value: number, mode: SliderChangeMode) => {\n              this.nowValue = value\n              this.fullVideoController.setCurrentTime(value)\n              console.info('value:' + value + 'mode:' + mode.toString())\n            })\n          Text(this.changTime(Number(this.maxValue.toFixed(0)))).fontSize(18).fontColor(Color.White)\n        }\n        .padding({ top: 50 })\n        .width('100%')\n        .position({ x: this.isPhone ? '3%' : '10%', y: '88%' })\n      }\n      .width('100%')\n      .height('100%')\n      .backgroundColor('#000000')\n    }\n  }"
        }
    ]
}