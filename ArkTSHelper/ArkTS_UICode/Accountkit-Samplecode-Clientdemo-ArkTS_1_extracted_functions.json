{
    "entry\\src\\main\\ets\\components\\Address.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    // Shipping address.\n    Flex({ direction: FlexDirection.RowReverse, alignItems: ItemAlign.Center }) {\n      Image($r('app.media.ic_public_arrow_right'))\n        .fillColor($r('sys.color.ohos_id_color_foreground'))\n        .opacity(0.2)\n        .width(12)\n        .height(24)\n        .margin({ left: 4 })\n\n      Row() {\n        Text($r('app.string.shippingAddress'))\n          .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n          .fontWeight(FontWeight.Medium)\n\n        Row() {\n          if (this.address !== undefined) {\n            Column() {\n              Text(`${this.address.userName} ${this.address.mobileNumber}`)\n                .fontSize($r('sys.float.ohos_id_text_size_sub_title3'))\n                .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n                .maxLines(1)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n                .wordBreak(WordBreak.BREAK_ALL)\n              Text(`${this.address.provinceName} ${this.address.cityName} ${this.address.districtName} ${this.address.streetName} ${this.address.detailedAddress}`)\n                .fontSize($r('sys.float.ohos_id_text_size_sub_title3'))\n                .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n                .maxLines(1)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n                .wordBreak(WordBreak.BREAK_ALL)\n            }\n            .alignItems(HorizontalAlign.End)\n          } else {\n            Text($r('app.string.addAddress'))\n              .fontSize($r('sys.float.ohos_id_text_size_sub_title3'))\n              .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n              .fontWeight(FontWeight.Medium)\n              .textAlign(TextAlign.End)\n              .maxLines(2)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n              .wordBreak(WordBreak.BREAK_ALL)\n          }\n        }.padding({ top: 8, bottom: 8 })\n        .justifyContent(FlexAlign.End)\n        .constraintSize({ minHeight: 48, maxWidth: '60%' })\n        .padding({ left: 16 })\n\n      }.justifyContent(FlexAlign.SpaceBetween)\n      .layoutWeight(1)\n    }\n    .width('100%')\n    .constraintSize({ minHeight: 56 })\n    .padding({\n      left: 12,\n      right: 12,\n      top: 4,\n      bottom: 4\n    })\n    .margin({ top: 12 })\n    .backgroundColor($r('sys.color.ohos_fa_list_card_bg'))\n    .borderRadius(20)\n    .id('shippingAddressRow')\n    .onClick(() => {\n      AvoidRepeatClick.avoidRepeatClick(() => {\n        this.chooseAddress();\n      });\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\components\\AgreementDialog.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Text($r('app.string.user_agreement_and_privacy_policy'))\n          .id('loginPanel_agreement_dialog_privacy_title')\n          .maxFontSize($r('sys.float.ohos_id_text_size_headline8'))\n          .minFontSize($r('sys.float.ohos_id_text_size_body1'))\n          .fontColor($r('sys.color.ohos_id_color_text_primary'))\n          .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n          .fontWeight(FontWeight.Bold)\n          .textAlign(TextAlign.Center)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .maxLines(2)\n      }\n      .alignItems(VerticalAlign.Center)\n      .constraintSize({ minHeight: 56, maxWidth: 400 })\n      .margin({\n        left: $r('sys.float.ohos_id_max_padding_start'),\n        right: $r('sys.float.ohos_id_max_padding_start')\n      })\n\n      Row() {\n        Text() {\n          if (this.privacyText && this.privacyText.length > 0) {\n            ForEach(this.privacyText, (item: loginComponentManager.PrivacyText) => {\n              if (item?.type === loginComponentManager.TextType.PLAIN_TEXT && item?.text) {\n                Span(item?.text)\n                  .fontSize($r('sys.float.ohos_id_text_size_body1'))\n                  .fontColor($r('sys.color.ohos_id_color_text_primary'))\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n                  .fontWeight(FontWeight.Regular)\n              } else if (item?.type === loginComponentManager.TextType.RICH_TEXT && item?.text) {\n                Span(item?.text)\n                  .fontSize($r('sys.float.ohos_id_text_size_body1'))\n                  .fontColor($r('app.color.activity_color'))\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                  .fontWeight(FontWeight.Medium)\n                  .focusable(true)\n                  .focusOnTouch(true)\n                  .id('protocolUrlToPrivacyWebViewSpan')\n                  .onClick(() => {\n                    hilog.info(domainId, logTag, 'protocol url click');\n                    AvoidRepeatClick.avoidRepeatClick(() => {\n                      if (item?.tag !== '') {\n                        try {\n                          this.jumpToPrivacyWebView(true, item?.tag);\n                        } catch (error) {\n                          hilog.error(domainId, logTag,\n                            `failed to jump privacy webview , errCode: ${error.code}, errMessage: ${error.message}`);\n                        }\n                      }\n                    });\n                  })\n              }\n            }, (item: loginComponentManager.PrivacyText, index: number) => `${item.text}_${index}}`)\n          }\n        }\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\n        .maxLines(10)\n        .textAlign(TextAlign.Start)\n        .focusable(true)\n        .focusOnTouch(true)\n      }\n      .width('100%')\n      .padding({\n        left: $r('sys.float.ohos_id_max_padding_start'),\n        right: $r('sys.float.ohos_id_max_padding_start')\n      })\n\n      Flex({\n        direction: FlexDirection.Row\n      }) {\n        Button($r('app.string.cancel'),\n          { type: ButtonType.Capsule, stateEffect: true })\n          .id('loginPanel_agreement_cancel_btn')\n          .fontColor($r('sys.color.ohos_id_color_text_primary'))\n          .fontSize($r('sys.float.ohos_id_text_size_button1'))\n          .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n          .backgroundColor(Color.Transparent)\n          .fontWeight(FontWeight.Medium)\n          .focusable(true)\n          .focusOnTouch(true)\n          .margin({ right: 8 })\n          .width('50%')\n          .constraintSize({ minHeight: 40, maxWidth: 400 })\n          .id('cancelAgreementDialogButton')\n          .onClick(() => {\n            hilog.info(domainId, logTag, 'AgreementDialog cancel');\n            AvoidRepeatClick.avoidRepeatClick(() => {\n              this.cancel();\n            });\n          })\n\n        Button($r('app.string.agree_and_sign_in'),\n          { type: ButtonType.Capsule, stateEffect: true })\n          .id('loginPanel_agreement_dialog_huawei_id_login_btn')\n          .fontColor(Color.White)\n          .backgroundColor($r('app.color.activity_color'))\n          .fontSize($r('sys.float.ohos_id_text_size_button1'))\n          .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n          .fontWeight(FontWeight.Medium)\n          .focusable(true)\n          .focusOnTouch(true)\n          .margin({ left: 8 })\n          .width('50%')\n          .constraintSize({ minHeight: 40, maxWidth: 400 })\n          .id('agreeAndSignInButton')\n          .onClick(() => {\n            hilog.info(domainId, logTag, 'AgreementDialog confirm');\n            AvoidRepeatClick.avoidRepeatClick(() => {\n              this.confirm();\n            });\n          })\n      }\n      .margin({\n        top: 8,\n        left: $r('sys.float.ohos_id_elements_margin_horizontal_l'),\n        right: $r('sys.float.ohos_id_elements_margin_horizontal_l'),\n        bottom: 16\n      })\n    }"
        }
    ],
    "entry\\src\\main\\ets\\components\\AvatarAndNickname.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    // Avatar and nickname.\n    Row() {\n      Row() {\n        Image(this.avatar ? this.avatar : $r('app.media.dear_user'))\n          .borderRadius(20)\n          .height(40)\n          .width(40)\n          .margin({\n            left: 4,\n            right: 12\n          })\n\n        Text(this.nickName ? this.nickName : $r('app.string.dearUser'))\n          .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n          .fontWeight(FontWeight.Medium)\n          .height('100%')\n      }\n\n      Image($r('app.media.ic_public_arrow_right'))\n        .fillColor($r('sys.color.ohos_id_color_foreground'))\n        .opacity(0.2)\n        .width(12)\n        .height(24)\n    }\n    .width('100%')\n    .height(64)\n    .padding({ left: 8, right: 12 })\n    .margin({ top: 16 })\n    .backgroundColor($r('sys.color.ohos_fa_list_card_bg'))\n    .justifyContent(FlexAlign.SpaceBetween)\n    .borderRadius(20)\n    .id('dearUserRow')\n    .onClick(() => {\n      AvoidRepeatClick.avoidRepeatClick(() => {\n        this.getAvatarAndNickName();\n      });\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\components\\InvoiceTitle.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    // Invoice title.\n    Flex({ direction: FlexDirection.RowReverse, alignItems: ItemAlign.Center }) {\n      Image($r('app.media.ic_public_arrow_right'))\n        .fillColor($r('sys.color.ohos_id_color_foreground'))\n        .opacity(0.2)\n        .width(12)\n        .height(24)\n        .margin({ left: 4 })\n\n      Row() {\n        Text($r('app.string.invoiceTitle'))\n          .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n          .fontWeight(FontWeight.Medium)\n\n        Row() {\n          Text(this.invoiceTitle ? this.invoiceTitle : $r('app.string.addInvoiceTitle'))\n            .fontSize($r('sys.float.ohos_id_text_size_sub_title3'))\n            .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n            .fontWeight(FontWeight.Medium)\n            .textAlign(TextAlign.End)\n        }.padding({ top: 8, bottom: 8 })\n        .justifyContent(FlexAlign.End)\n        .constraintSize({ minHeight: 48, maxWidth: '60%' })\n        .width('100%')\n      }.justifyContent(FlexAlign.SpaceBetween)\n      .layoutWeight(1)\n    }\n    .width('100%')\n    .constraintSize({ minHeight: 56 })\n    .padding({\n      left: 12,\n      right: 12,\n      top: 4,\n      bottom: 4\n    })\n    .margin({ top: 12 })\n    .backgroundColor($r('sys.color.ohos_fa_list_card_bg'))\n    .borderRadius(20)\n    .id('invoiceTitleRow')\n    .onClick(() => {\n      AvoidRepeatClick.avoidRepeatClick(() => {\n        this.selectInvoiceTitle();\n      });\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\components\\MinorsProtection.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    // Youth mode.\n    Row() {\n      Column() {\n        Row() {\n          Text($r('app.string.minorProtection'))\n            .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n            .fontWeight(FontWeight.Medium)\n            .height('50%')\n\n          Button({ type: ButtonType.Normal }) {\n            Toggle({ type: ToggleType.Switch, isOn: this.minorsProtectionMode })\n              .selectedColor($r('app.color.activity_color'))\n              .hitTestBehavior(HitTestMode.None)\n          }\n          .height(50)\n          .width(50)\n          .borderRadius(8)\n          .id('minorProtectionButton')\n          .onClick(() => {\n            hilog.info(domainId, logTag, 'minorProtection onClick');\n            AvoidRepeatClick.avoidRepeatClick(() => {\n              // If the youth mode is enabled, a dialog box needs to be displayed when the user taps the switch.\n              if (this.minorsProtectionMode) {\n                AlertDialog.show(\n                  {\n                    title: '',\n                    subtitle: '',\n                    message: $r('app.string.closeMinorsTitle'),\n                    autoCancel: true,\n                    alignment: DialogAlignment.Center,\n                    gridCount: 4,\n                    offset: { dx: 0, dy: -20 },\n                    primaryButton: {\n                      value: $r('app.string.cancel'),\n                      action: () => {\n                        hilog.info(domainId, logTag, 'Callback when the first button is clicked');\n                      }\n                    },\n                    secondaryButton: {\n                      value: $r('app.string.close'),\n                      action: () => {\n                        // The user taps the button to disable the youth mode. The API for disabling the youth mode is called.\n                        this.turnOffMinorsMode();\n                      }\n                    },\n                    cancel: () => {\n                      hilog.info(domainId, logTag, 'Closed callbacks');\n                    },\n                    textStyle: {\n                      wordBreak: WordBreak.BREAK_WORD\n                    }\n                  }\n                )\n              } else {\n                // Call the API for enabling the youth mode.\n                this.turnOnMinorsMode();\n              }\n            });\n          })\n          .backgroundColor(Color.Transparent)\n        }.width('100%')\n        .justifyContent(FlexAlign.SpaceBetween)\n\n        Row() {\n          Stack() {\n            if (this.minorsProtectionMode) {\n              Row() {\n                Divider().strokeWidth(0.5)\n              }\n            }\n          }\n        }.width('100%')\n\n        Row() {\n          Stack() {\n            // This entry is available only when the youth mode is enabled.\n            if (this.minorsProtectionMode) {\n              Row() {\n                Text($r('app.string.availableTime'))\n                  .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n                  .fontWeight(FontWeight.Medium)\n                  .height('50%')\n                Button({ type: ButtonType.Normal }) {\n                  Toggle({ type: ToggleType.Switch, isOn: this.availableTimeMode })\n                    .selectedColor($r('app.color.activity_color'))\n                    .hitTestBehavior(HitTestMode.None)\n                }\n                .height(48)\n                .width(48)\n                .borderRadius(8)\n                .id('availableTimeButton')\n                .onClick(() => {\n                  AvoidRepeatClick.avoidRepeatClick(() => {\n                    // Password is required for adjusting youth mode–related settings.\n                    this.verifyMinorsProtectionCredential();\n                  });\n                })\n                .backgroundColor(Color.Transparent)\n              }.width('100%')\n              .justifyContent(FlexAlign.SpaceBetween)\n            }\n          }\n        }.width('100%')\n      }\n    }\n    .width('100%')\n    .height(this.minorsProtectionMode ? 112 : 56)\n    .padding({\n      left: 12,\n      right: 12,\n      top: 4,\n      bottom: 4\n    })\n    .margin({ top: 12 })\n    .backgroundColor($r('sys.color.ohos_fa_list_card_bg'))\n    .justifyContent(FlexAlign.SpaceBetween)\n    .borderRadius(20)\n    .width('100%')\n    .constraintSize({\n      minHeight: 56\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\components\\Phone.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Text($r('app.string.phone'))\n        .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n        .fontWeight(FontWeight.Medium)\n        .height('100%')\n      Row() {\n        Text(this.quickLoginAnonymousPhone)\n          .fontSize($r('sys.float.ohos_id_text_size_sub_title3'))\n          .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n          .height(19)\n          .width(100)\n          .padding({ left: 20 })\n        Image($r('app.media.ic_public_arrow_right'))\n          .fillColor($r('sys.color.ohos_id_color_foreground'))\n          .opacity(0.2)\n          .width(12)\n          .height(24)\n          .margin({ left: 4 })\n      }\n      .width(115)\n    }\n    .width('100%')\n    .height(56)\n    .padding({\n      left: 12,\n      right: 12,\n      top: 4,\n      bottom: 4\n    })\n    .margin({ top: 12 })\n    .backgroundColor($r('sys.color.ohos_fa_list_card_bg'))\n    .justifyContent(FlexAlign.SpaceBetween)\n    .borderRadius(20)\n    .id('phoneRow')\n    .onClick(() => {\n      AvoidRepeatClick.avoidRepeatClick(() => {\n        this.getPhone();\n      });\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\components\\SilentlyLoginSwitch.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Text($r('app.string.use_hwid_silently_login'))\n        .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n        .fontWeight(FontWeight.Medium)\n        .height('100%')\n      Row() {\n        Button({ type: ButtonType.Normal }) {\n          Toggle({ type: ToggleType.Switch, isOn: this.isSilentLogin })\n            .selectedColor($r('app.color.activity_color'))\n            .hitTestBehavior(HitTestMode.None)\n        }\n        .height(50)\n        .width(50)\n        .borderRadius(8)\n        .backgroundColor(Color.Transparent)\n        .id('useHwidSilentlyLoginButton')\n        .onClick(() => {\n          AvoidRepeatClick.avoidRepeatClick(() => {\n            this.updateIsSilentLogin();\n          });\n        })\n      }\n    }\n    .width('100%')\n    .height(56)\n    .padding({\n      left: 12,\n      right: 12,\n      top: 4,\n      bottom: 4\n    })\n    .margin({ top: 12 })\n    .backgroundColor($r('sys.color.ohos_fa_list_card_bg'))\n    .justifyContent(FlexAlign.SpaceBetween)\n    .borderRadius(20)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\components\\UserAgreement.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    // Agreement.\n    Flex({\n      justifyContent: FlexAlign.Center,\n      alignItems: ItemAlign.Start\n    }) {\n      Row() {\n        Checkbox({ name: 'privacyCheckbox', group: 'privacyCheckboxGroup' })\n          .width(24)\n          .height(24)\n          .focusable(true)\n          .focusOnTouch(true)\n          .selectedColor('rgba(206,14,45,1)')\n          .opacity(this.enableStatus ? 1 : $r('sys.float.interactive_disable'))\n          .select(this.isSelected)\n          .enabled(this.enableStatus)\n          .margin({ top: 0, right: 12 })\n          .onChange((value: boolean) => {\n            this.isSelected = value;\n            if(this.onChange !== undefined) {\n              this.onChange(value);\n            }\n          })\n      }\n\n      Row() {\n        Text() {\n          if (this.privacyText && this.privacyText.length > 0) {\n            ForEach(this.privacyText, (item: loginComponentManager.PrivacyText) => {\n              if (item?.type === loginComponentManager.TextType.PLAIN_TEXT && item?.text) {\n                Span(item?.text)\n                  .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n                  .fontWeight(FontWeight.Regular)\n                  .opacity(this.enableStatus ? 1 : 0.6)\n                  .fontSize($r('sys.float.ohos_id_text_size_body3'))\n              } else if (item?.type === loginComponentManager.TextType.RICH_TEXT && item?.text) {\n                Span(item?.text)\n                  .fontColor(this.enableStatus ? $r('sys.color.ohos_id_color_text_primary') :\n                  $r('sys.color.ohos_id_color_text_secondary'))\n                  .opacity(this.enableStatus ? 1 : 0.6)\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                  .fontWeight(FontWeight.Medium)\n                  .fontSize($r('sys.float.ohos_id_text_size_body3'))\n                  .focusable(true)\n                  .focusOnTouch(true)\n                  .enabled(this.enableStatus)\n                  .id('userAgreeProtocolUrlSpan')\n                  .onClick(() => {\n                    hilog.info(domainId, logTag, 'protocol url click');\n                    if (this.enableStatus) {\n                      try {\n                        this.jumpToPrivacyWebView(item);\n                      } catch (error) {\n                        const code: number = error.code;\n                        const message: string = error.message;\n                        hilog.error(domainId, logTag,\n                          `Failed to jump privacy webview , errCode: ${code}, errMessage: ${message}`);\n                      }\n                    }\n                  })\n              }\n            }, (item: loginComponentManager.PrivacyText, index: number) => `${item.text}_${index}}`)\n          }\n        }\n        .opacity(this.enableStatus ? 1 : 0.6)\n      }\n      .constraintSize({ minHeight: 24 })\n    }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\HomePage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Navigation(this.pageInfos) {\n    }\n    .onSizeChange(() => {\n      this.setDeviceDisplayData();\n    })\n    .onAppear(async () => {\n      // Save the UnionID.\n      try {\n        this.unionID = await getUnionID();\n      } catch (error) {\n        this.unionID = '';\n        hilog.error(domainId, logTag, `Failed to authorize, errorCode: ${error.code}, errorMsg: ${error.message}`);\n      }\n      // Uses persistently stored data to simulate silent sign-in.\n      this.setUserInfo(this.unionID);\n      const userInfo = this.silentLoginMap.get(this.unionID) as UserInfo;\n      // If the user has selected silent sign-in:\n      if (userInfo?.isSilentLogin) {\n        this.silentLogin();\n      }\n      this.pageInfos.pushPathByName('PrepareLoginPage', null, false);\n    })\n    .titleMode(NavigationTitleMode.Full)\n    .hideTitleBar(true)\n    .hideToolBar(true)\n    .mode(NavigationMode.Stack)\n    .navDestination(this.PageMap)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\OtherLoginPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Scroll() {\n        Column() {\n          // Back button.\n          Row() {\n            Button({ type: ButtonType.Normal }) {\n              Image($r('app.media.hwid_next_ic_appback'))\n                .backgroundColor(Color.Transparent)\n                .borderRadius(20)\n                .width(40)\n                .height(40)\n                .draggable(false)\n                .autoResize(false)\n                .focusable(true)\n                .fillColor($r('sys.color.ohos_id_color_titlebar_icon'))\n                .matchTextDirection(true)\n            }\n            .alignSelf(ItemAlign.Start)\n            .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n            .borderRadius(20)\n            .width(40)\n            .height(40)\n            .id('otherLoginAppBackButton')\n            .onClick(() => {\n              AvoidRepeatClick.avoidRepeatClick(() => {\n                this.backToLastPage();\n              });\n            })\n          }\n          .height(56)\n          .padding({ top: 8, bottom: 8 })\n          .width('100%')\n          .margin({\n            top: (this.isPhone && this.isLandScape || this.isDevice2in1) ? 0 : 36,\n            left: this.isPhone && this.isLandScape ? -16 : 0,\n          })\n          .zIndex(2024);\n\n          Flex({\n            direction: this.isPhone && this.isLandScape ? FlexDirection.Row : FlexDirection.Column,\n            alignItems: ItemAlign.Center\n          }) {\n            Column() {\n              // App icon.\n              Row() {\n                Image($r('app.media.appmarket'))\n                  .width(this.isPhone ? 80 : 96)\n                  .height(this.isPhone ? 80 : 96)\n\n                  .draggable(false)\n                  .copyOption(CopyOptions.None)\n                  .borderRadius(20)\n                  .onComplete(() => {\n                    hilog.info(domainId, logTag, 'Succeeded in loading appIcon.');\n                  })\n                  .onError(() => {\n                    hilog.error(domainId, logTag, 'Failed to load appIcon.');\n                  })\n              }\n              .height(this.isPhone && this.isLandScape ? 80 : '100%');\n\n              // Mobile number input box.\n              Row() {\n                Column() {\n                  Stack({ alignContent: Alignment.End }) {\n                    // Mobile number input box.\n                    TextInput({\n                      placeholder: $r('app.string.phone'),\n                    })\n                      .id('inp_hwid_bind_phone')\n                      .type(InputType.PhoneNumber)\n                      .enterKeyType(EnterKeyType.Next)\n                      .enableKeyboardOnFocus(true)\n                      .defaultFocus(true)\n                      .backgroundColor($r('sys.color.ohos_id_color_card_bg'))\n                      .placeholderColor($r('sys.color.ohos_id_color_text_hint'))\n                      .placeholderFont({ size: $r('sys.float.ohos_id_text_size_body1') })\n                      .fontSize($r('sys.float.ohos_id_text_size_body1'))\n                      .maxLength(24)\n                      .constraintSize({ minHeight: 56 })\n                      .padding({\n                        left: 82\n                      }\n                      )\n                      .borderRadius($r('sys.float.ohos_id_corner_radius_notification'))\n                      .borderColor($r('sys.color.ohos_id_color_warning'))\n                      .inputFilter('^[0-9*]{0,11}$')\n                      .onChange((value: string) => {\n                        this.inputContent = value;\n                        this.allowClick = (this.inputContent.length === 11 ? true : false);\n                      })\n\n                    // Prefix.\n                    Row() {\n                      Text('+' + 86)\n                        .fontColor($r('sys.color.ohos_id_color_text_primary'))\n                        .fontSize($r('sys.float.ohos_id_text_size_body1'))\n                        .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n                        .margin({\n                          left: 12,\n                          right: $r('sys.float.ohos_id_elements_margin_horizontal_m')\n                        })\n                        .id('text_hwid_bind_phone_area_code')\n                        .direction(Direction.Ltr)\n                      // Drop-down arrow.\n                      Image($r('app.media.hwid_ic_public_spinner'))\n                        .width(12)\n                        .margin({\n                          right: 12\n                        })\n                      // Divider.\n                      Divider()\n                        .vertical(true)\n                        .height(22)\n                        .color($r('sys.color.ohos_id_color_list_separator'))\n                    }.width('100%')\n                    .enabled(false)\n                    .constraintSize({\n                      minHeight: 56\n                    })\n\n                  }.width('100%')\n                }.width('100%')\n              }\n              .id('row_hwid_bind_phone')\n              .padding({\n                top: 8,\n                bottom: 8\n              })\n              .width('100%')\n              .height(72)\n              .constraintSize({\n                maxWidth: 448\n              })\n              .margin({\n                top: this.isPhone && this.isLandScape ? 32 : -36\n              })\n            }\n            .width(this.isPhone && this.isLandScape ? '50%' : '100%')\n            .height(this.isPhone && this.isLandScape ? '100%' : this.isBigDisplay ? '50%' : '40%')\n            .justifyContent(this.isPhone && this.isLandScape ? FlexAlign.Center : FlexAlign.SpaceBetween)\n\n            Column() {\n              Column() {\n                // Next step.\n                Column() {\n                  Button({ type: ButtonType.Capsule, stateEffect: true }) {\n                    Text($r('app.string.next_step'))\n                      .fontColor(Color.White)\n                      .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                      .fontWeight(FontWeight.Medium)\n                      .fontSize(16)\n                      .focusable(true)\n                      .focusOnTouch(true)\n                      .id('loginPanel_huawei_id_login_btn_text')\n                      .textOverflow({ overflow: TextOverflow.Ellipsis })\n                      .maxLines(1)\n                      .padding({ left: 4, right: 4 })\n                      .textAlign(TextAlign.Center)\n                  }\n                  .enabled(this.allowClick)\n                  .focusable(true)\n                  .focusOnTouch(true)\n                  .backgroundColor($r('app.color.activity_color'))\n                  .constraintSize({ minHeight: 40 })\n                  .width('100%')\n                  .id('prepareLoginPageButton')\n                  .onClick(() => {\n                    this.isLogin = true;\n                    // Return to PrepareLoginPage.\n                    this.pageInfos?.popToName('PrepareLoginPage', true);\n                  })\n                }\n                .height(40)\n                .width('100%')\n                .constraintSize({ maxWidth: 448 })\n\n                // Sign in with the password.\n                Column() {\n                  LoginButton($r('app.string.pwd_login'), $r('sys.color.ohos_id_color_button_normal'),\n                    $r('sys.color.ohos_id_color_text_primary'))\n                }.margin({ top: 16 });\n\n                Text($r('app.string.other_login_models'))\n                  .fontSize($r('sys.float.ohos_id_text_size_body3'))\n                  .fontColor($r('sys.color.ohos_id_color_text_tertiary'))\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n                  .fontWeight(FontWeight.Regular)\n                  .textAlign(TextAlign.Center)\n                  .constraintSize({ maxWidth: '100%' })\n                  .textAlign(TextAlign.Center)\n                  .margin({\n                    top: 24,\n                    bottom: 12\n                  })\n\n                Row() {\n                  this.Star()\n                  this.Star()\n                  this.Star()\n                  this.Star()\n                  this.Star()\n                }.alignItems(VerticalAlign.Center)\n                .justifyContent(FlexAlign.SpaceBetween)\n                .width(324)\n                .padding({\n                  left: 16,\n                  right: 16\n                })\n              }\n              .margin({\n                top: this.isPhone && this.isLandScape ? 40 : 68,\n              })\n\n              Row() {\n                UserAgreement({\n                  isSelected: this.isSelected,\n                  privacyText: this.privacyText,\n                  enableStatus: true\n                })\n              }\n              .margin({\n                top: 24,\n                bottom: this.isPhone && this.isLandScape ? 0 : (this.isDevice2in1 ? 16 : this.aiBarHeight + 16)\n              })\n            }\n            .height(this.isPhone && this.isLandScape ? '100%' : (this.isBigDisplay ? '50%' : '60%'))\n            .width(this.isPhone && this.isLandScape ? '50%' : '100%')\n            .margin({\n              left: this.isPhone && this.isLandScape ? 40 : 0,\n            })\n            .justifyContent(this.isPhone && this.isLandScape ? FlexAlign.Center : FlexAlign.SpaceBetween)\n          }\n          .width('100%')\n          .height('100%')\n          .margin({ top: (this.isPhone && this.isLandScape || this.isDevice2in1) ? -56 : -92 });\n        }\n        .justifyContent(FlexAlign.SpaceBetween)\n        .constraintSize({ minHeight: '100%' })\n        .padding({\n          left: this.isPhone && this.isLandScape ? 40 : 16,\n          right: this.isPhone && this.isLandScape ? 40 : 16\n        })\n      }\n      .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n      .width('100%')\n      .height('100%')\n    }\n    .hideTitleBar(true)\n    .backgroundColor($r('sys.color.ohos_id_color_panel_bg'))\n    .onBackPressed(() => {\n      this.backToLastPage();\n      return true;\n    })\n  }"
        },
        {
            "function_name": "Star",
            "content": "@Builder\n  Star() {\n    Row() {\n      Image($r('app.media.ic_collected'))\n        .fillColor($r('sys.color.ohos_id_color_tertiary'))\n        .width(20)\n        .height(20)\n    }\n    .alignItems(VerticalAlign.Center)\n    .justifyContent(FlexAlign.Center)\n    .width(36)\n    .height(36)\n    .borderRadius(20)\n    .backgroundColor($r('sys.color.ohos_fa_list_card_bg'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\PersonalInfoPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Column() {\n        // Page title and back button.\n        Row() {\n          Button({ type: ButtonType.Normal }) {\n            Image($r('app.media.hwid_next_ic_appback'))\n              .backgroundColor(Color.Transparent)\n              .borderRadius(20)\n              .width(40)\n              .height(40)\n              .draggable(false)\n              .autoResize(false)\n              .focusable(true)\n              .fillColor($r('sys.color.ohos_id_color_titlebar_icon'))\n              .matchTextDirection(true)\n          }\n          .alignSelf(ItemAlign.Start)\n          .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n          .borderRadius(20)\n          .width(40)\n          .height(40)\n          .margin({\n            top: 8\n          })\n          .id('personalInfoBackPressButton')\n          .onClick(() => {\n            AvoidRepeatClick.avoidRepeatClick(() => {\n              this.onBackPress();\n            });\n          })\n\n          Text($r('app.string.personalInfo'))\n            .fontSize($r('sys.float.ohos_id_text_size_headline8'))\n            .fontWeight(FontWeight.Bold)\n            .padding({ left: 8 })\n        }.alignSelf(ItemAlign.Start)\n        .height(56)\n        .padding({\n          left: getWhiteSpaceWidthByDisplayWidth(this.displayWidth),\n          right: getWhiteSpaceWidthByDisplayWidth(this.displayWidth)\n        })\n        Scroll() {\n          Column() {\n            Column() {\n              // Avatar and nickname.\n              AvatarAndNickname({\n                avatar: this.avatar,\n                nickName: this.nickName,\n                onChange: (unionID) => {\n                  this.updateSilentLoginMap(unionID);\n                }\n              })\n\n              // Mobile number.\n              Phone({\n                quickLoginAnonymousPhone: this.quickLoginAnonymousPhone,\n                onChange: (unionID) => {\n                  this.updateSilentLoginMap(unionID);\n                }\n              })\n\n              // Shipping address.\n              Address({\n                address: this.address\n              })\n\n              // Invoice title.\n              InvoiceTitle({\n                invoiceTitle: this.invoiceTitle\n              })\n\n              /*\n               * Use the canIUse and supportMinorsMode APIs to check whether the device supports the youth mode. If not,\n               * the youth mode entry will not be displayed.\n               * */\n              if (canIUse('SystemCapability.AuthenticationServices.HuaweiID.MinorsProtection')) {\n                if(minorsProtection.supportMinorsMode()) {\n                  // Youth mode.\n                  MinorsProtection({\n                    minorsProtectionMode: this.minorsProtectionMode,\n                    availableTimeMode: this.availableTimeMode\n                  })\n                }\n              }\n\n              // Silent sign-in switch.\n              SilentlyLoginSwitch({\n                isSilentLogin: this.isSilentLogin,\n                onChange: (unionID) => {\n                  this.updateSilentLoginMap(unionID);\n                }\n              })\n            }.margin({\n              bottom: 56\n            })\n\n            Row().layoutWeight(1)\n\n            // Sign out.\n            Row() {\n              Button() {\n                Text($r('app.string.logout'))\n                  .fontWeight(FontWeight.Medium)\n              }\n              .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n              .fontColor($r('app.color.activity_color'))\n              .width('100%')\n              .height(40)\n              .constraintSize({\n                maxWidth: 448\n              })\n              .id('logoutButton')\n              .onClick(() => {\n                AvoidRepeatClick.avoidRepeatClick(() => {\n                  this.logout();\n                });\n              })\n            }\n            .padding({\n              bottom: this.isDevice2in1 ? 12 : 44,\n              top: 24\n            })\n            .offset({\n              top: this.isLandScape && this.isPhone ? 0 : -56\n            })\n          }\n        }\n        .padding({\n          left: getWhiteSpaceWidthByDisplayWidth(this.displayWidth),\n          right: getWhiteSpaceWidthByDisplayWidth(this.displayWidth),\n          bottom: this.isLandScape && this.isPhone ? 56 : 0\n        })\n      }\n      .padding({\n        // There is no need to avoid the top status bar when the device is a phone in landscape mode or 2-in-1 device.\n        top: this.isLandScape && this.isPhone || this.isDevice2in1 ? 0 : this.statusBarHeight\n      })\n      .alignItems(HorizontalAlign.Start)\n      .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n      .height('100%')\n    }.hideTitleBar(true)\n    .backgroundColor($r('sys.color.ohos_id_color_panel_bg'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\PrepareLoginPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Stack({ alignContent: Alignment.Bottom }) {\n        Flex({\n          direction: this.isLandScape && this.isPad ? FlexDirection.RowReverse : FlexDirection.Column,\n          justifyContent: FlexAlign.SpaceAround,\n          alignItems: this.isLandScape && this.isPad ? ItemAlign.Center : ItemAlign.Start\n        }) {\n          Column() {\n            Row() {\n              Image((this.isLogin ? this.avatar ?? $r('app.media.dear_user') : $r('app.media.avatar')))\n                .borderRadius(28)\n                .width(56)\n                .height(56)\n                .margin(12)\n              Column() {\n                Row() {\n                  Text(this.isLogin ? this.nickName ?? $r('app.string.dearUser') : $r('app.string.login'))\n                    .fontFamily('HarmonyHeiTi')\n                    .fontWeight(FontWeight.Bold)\n                    .fontColor($r('sys.color.ohos_id_color_text_primary'))\n                    .fontSize($r('sys.float.ohos_id_text_size_sub_title1'))\n                    .height(24)\n                }\n                .width('100%')\n\n                Row() {\n                  Text(this.isLogin ? $r('app.string.dear_user_good_morning') :\n                  $r('app.string.login_for_enjoy_service'))\n                    .fontFamily('HarmonyHeiTi')\n                    .fontWeight(FontWeight.Regular)\n                    .fontColor($r('sys.color.ohos_id_color_text_primary'))\n                    .fontSize($r('sys.float.ohos_id_text_size_body2'))\n                    .height(18)\n                }.width('100%')\n              }.alignItems(HorizontalAlign.Start)\n            }\n            .padding({\n              left: getWhiteSpaceWidthByDisplayWidth(this.displayWidth),\n              right: getWhiteSpaceWidthByDisplayWidth(this.displayWidth),\n              /*\n               * There is no need to avoid the top status bar\n               * when the device is a phone in landscape mode or 2-in-1 device.\n               * */\n              top: this.isLandScape && this.isPhone || this.isDevice2in1 ? 0 : this.statusBarHeight\n            })\n            .margin({ top: 12, bottom: 12 })\n            .id('dearUserOrLoginRow')\n            .onClick(() => {\n              AvoidRepeatClick.avoidRepeatClick(() => {\n                if (this.isLogin) {\n                  // Redirect to PersonalInfoPage.\n                  this.jumpPersonalInfo();\n                } else {\n                  // Redirect to the sign-in screen.\n                  this.jumpLoginPage();\n                }\n              })\n            })\n\n            Scroll() {\n              Column() {\n                ForEach(this.cards, (item: number) => {\n                  Card(item)\n                }, (item: number, index: number) => `${item}_${index}`)\n              }\n              .height('100%')\n              .constraintSize({\n                minHeight: this.cards.reduce((p: number, c: number) => p + c + 12, 2)\n              })\n            }\n            .padding({\n              left: getWhiteSpaceWidthByDisplayWidth(this.displayWidth),\n              right: getWhiteSpaceWidthByDisplayWidth(this.displayWidth),\n              bottom: this.isLandScape && this.isPad ? 28 : 0\n            })\n            .layoutWeight(1)\n          }\n          .layoutWeight(1)\n          .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n\n          if (this.isDevice2in1) {\n            this.NavBar2in1()\n          } else {\n            this.NavBar()\n          }\n        }\n      }\n    }\n    .hideTitleBar(true)\n    .backgroundColor(Color.Transparent)\n    .onBackPressed(() => {\n      // Directly exit the app after a gesture is performed.\n      hilog.info(domainId, logTag, 'PrepareLoginPage onBackPressed');\n      try {\n        (getContext() as common.UIAbilityContext).terminateSelf();\n      } catch (error) {\n        hilog.error(domainId, logTag,\n          `Failed to terminateSelf. errCode: ${error.code}, errMessage: ${error.message}`);\n      }\n      return true;\n    })\n  }"
        },
        {
            "function_name": "NavBar",
            "content": "@Builder\n  NavBar() {\n    Flex({\n      direction: this.isPad && this.isLandScape ? FlexDirection.Column : FlexDirection.Row,\n      justifyContent: FlexAlign.Center\n    }) {\n      this.Unit()\n      this.Unit()\n      this.Unit()\n      this.Unit(true)\n    }\n    .shadow({\n      type: ShadowType.COLOR,\n      color: '#ff807b7b',\n      offsetX: 0,\n      offsetY: 0,\n      fill: true\n    } as ShadowOptions)\n    .width(this.isPad && this.isLandScape ? 96 : '100%')\n    .height(this.isPad && this.isLandScape ? '100%' : 80)\n    .alignSelf(ItemAlign.Center)\n    .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n  }"
        },
        {
            "function_name": "NavBar2in1",
            "content": "@Builder\n  NavBar2in1() {\n    Column() {\n      Row() {\n        Image($r('app.media.appmarket'))\n          .width(24)\n          .height(24)\n          .margin({ left: 8 })\n\n        Text($r('app.string.app_name'))\n          .fontSize($r('sys.float.ohos_id_text_size_sub_title2'))\n          .fontColor($r('sys.color.ohos_id_color_text_primary'))\n          .fontWeight(FontWeight.Medium)\n          .margin({ left: 12 })\n      }\n      .height(56)\n      .justifyContent(FlexAlign.Start)\n      .width('100%')\n      .backgroundColor(Color.Transparent)\n      .margin({ bottom: 8 })\n\n      this.Unit2in1()\n      this.Unit2in1()\n      this.Unit2in1()\n      this.Unit2in1(true)\n    }\n    .width(240)\n    .padding({\n      left: 16,\n      right: 16\n    })\n    .backgroundColor(Color.Transparent)\n    .border({\n      width: { right: 1 },\n      color: $r('sys.color.ohos_id_color_button_normal')\n    })\n    .height('100%')\n    .backgroundEffect({ radius: 50 })\n    .shadow({ radius: 20, offsetX: -20 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\ProtocolWebView.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Column() {\n        Button({ type: ButtonType.Normal }) {\n          Image($r('app.media.hwid_next_ic_appback'))\n            .backgroundColor(Color.Transparent)\n            .borderRadius(20)\n            .width(40)\n            .height(40)\n            .draggable(false)\n            .autoResize(false)\n            .focusable(true)\n            .fillColor($r('sys.color.ohos_id_color_titlebar_icon'))\n            .matchTextDirection(true)\n        }\n        .alignSelf(ItemAlign.Start)\n        .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n        .borderRadius(20)\n        .width(40)\n        .height(40)\n        .margin({\n          top: 36,\n          bottom: $r('sys.float.ohos_id_elements_margin_horizontal_m'),\n          left: getWhiteSpaceWidthByDisplayWidth(this.displayWidth)\n        })\n        .id('hwidNextIcAppBackButton')\n        .onClick(() => {\n          AvoidRepeatClick.avoidRepeatClick(() => {\n            if (this.isFromDialog) {\n              this.backPress();\n            } else {\n              if (this.pageInfos && this.pageInfos.size() > 1) {\n                this.pageInfos.pop();\n              }\n            }\n          });\n        })\n\n        Progress({ value: this.progress, type: ProgressType.Linear })\n          .width('100%')\n          .visibility(this.progress <= 99 ? Visibility.Visible : Visibility.None)\n        Web({\n          src: this.colorMode === ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT ? this.url :\n            this.url + '&bgmode=black',\n          controller: this.controller\n        })\n          .javaScriptAccess(true)\n          .geolocationAccess(false)\n          .fileAccess(false)\n          .width(this.getWebviewWidth())\n          .margin({\n            bottom: 60\n          })\n          .darkMode(WebDarkMode.Auto)\n          .backgroundColor($r('sys.color.ohos_id_color_background'))\n          .onProgressChange((event) => {\n            hilog.info(domainId, logTag,\n              'onProgressChange: ', (event !== undefined ? event.newProgress : -1));\n            this.progress = event !== undefined ? event.newProgress : 0;\n          })\n          .onAppear(() => {\n            try {\n              const checkNetConn = connection.hasDefaultNetSync();\n              hilog.info(domainId, logTag, `network status: ${checkNetConn}`);\n              if (!checkNetConn) {\n                this.showToast($r('app.string.service_error'));\n                return;\n              }\n            } catch (error) {\n              const message = error.message as string;\n              const code = error.code as string;\n              hilog.error(domainId, logTag,\n                `Failed to invoke the hasDefaultNetSync method. errCode is ${code}, errMessage is ${message}`);\n            }\n          })\n      }\n      .width('100%')\n      .height('100%')\n      .padding({ bottom: 60 })\n    }.hideTitleBar(true)\n    .onBackPressed(() => {\n      if (this.onCheckOtherWeb()) {\n        return true;\n      }\n      this.backPress();\n      // Directly return to the sign-in screen from a pop-up window. No gesture is needed.\n      return this.isFromDialog;\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\QuickLoginPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Scroll() {\n        Column() {\n          // Back button.\n          Row() {\n            Button({ type: ButtonType.Normal }) {\n              Image($r('app.media.hwid_next_ic_appback'))\n                .backgroundColor(Color.Transparent)\n                .borderRadius(20)\n                .width(40)\n                .height(40)\n                .draggable(false)\n                .autoResize(false)\n                .focusable(true)\n                .fillColor($r('sys.color.ohos_id_color_titlebar_icon'))\n                .matchTextDirection(true)\n            }\n            .alignSelf(ItemAlign.Start)\n            .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n            .borderRadius(20)\n            .width(40)\n            .height(40)\n            .id('quickLoginAppBackButton')\n            .onClick(() => {\n              AvoidRepeatClick.avoidRepeatClick(() => {\n                if (this.pageInfos && this.pageInfos.size() > 0) {\n                  this.pageInfos.pop();\n                }\n              })\n            })\n          }\n          .height(56)\n          .padding({ top: 8, bottom: 8 })\n          .width('100%')\n          .margin({\n            top: (this.isPhone && this.isLandScape || this.isDevice2in1) ? 0 : 36,\n            left: this.isPhone && this.isLandScape ? -16 : 0\n          })\n          .zIndex(2024);\n\n          Flex({\n            direction: this.isPhone && this.isLandScape ? FlexDirection.Row : FlexDirection.Column,\n            alignItems: ItemAlign.Center\n          }) {\n            Column() {\n              // App icon.\n              Row() {\n                Image($r('app.media.appmarket'))\n                  .width(this.isPhone ? 80 : 96)\n                  .height(this.isPhone ? 80 : 96)\n                  .draggable(false)\n                  .copyOption(CopyOptions.None)\n                  .borderRadius(20)\n                  .onComplete(() => {\n                    hilog.info(domainId, logTag, 'Succeeded in loading appIcon.');\n                  })\n                  .onError(() => {\n                    hilog.error(domainId, logTag, 'Failed to load appIcon.');\n                  })\n              }\n              .height(this.isPhone && this.isLandScape ? 80 : '100%')\n\n              // Mobile number and its description.\n              Column() {\n                Text(this.quickLoginAnonymousPhone)\n                  .fontSize(36)\n                  .fontColor($r('sys.color.ohos_id_color_text_primary'))\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                  .fontWeight(FontWeight.Bold)\n                  .lineHeight(48)\n                  .textAlign(TextAlign.Center)\n                  .maxLines(1)\n                  .constraintSize({ maxWidth: '100%', minHeight: 48 })\n\n                Text($r('app.string.bind_huaweiId_number'))\n                  .fontSize(12)\n                  .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n                  .fontWeight(FontWeight.Regular)\n                  .lineHeight(16)\n                  .textAlign(TextAlign.Center)\n                  .maxLines(1)\n                  .constraintSize({ maxWidth: '100%' })\n                  .margin({\n                    top: 8\n                  })\n              }\n              .margin({\n                top: this.isPhone && this.isLandScape ? 32 : -36\n              })\n            }\n            .width(this.isPhone && this.isLandScape ? '50%' : '100%')\n            .height(this.isPhone && this.isLandScape ? '100%' : this.isBigDisplay ? '50%' : '40%')\n            .justifyContent(this.isPhone && this.isLandScape ? FlexAlign.Center : FlexAlign.SpaceBetween);\n\n            Column() {\n              // Two sign-in buttons.\n              Column() {\n                // One-tap sign-in.\n                Column() {\n                  LoginWithHuaweiIDButton({\n                    params: {\n                      // Custom button style.\n                      style: loginComponentManager.Style.BUTTON_CUSTOM,\n                      extraStyle: {\n                        buttonStyle: new loginComponentManager.ButtonStyle().loadingStyle({\n                          show: true\n                        })\n                      },\n                      loginType: loginComponentManager.LoginType.QUICK_LOGIN,\n                      supportDarkMode: true\n                    },\n                    controller: this.controller\n                  }).id('login_with_huaweiId_button')\n                }\n                .height(40)\n                .width('100%')\n                .constraintSize({\n                  minHeight: 40,\n                  maxWidth: 448\n                })\n\n                // Other ways to sign in.\n                Column() {\n                  Button({\n                    type: ButtonType.Capsule,\n                    stateEffect: true\n                  }) {\n                    Text($r('app.string.other_login_models'))\n                      .fontColor($r('sys.color.ohos_id_color_text_primary'))\n                      .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                      .fontWeight(FontWeight.Medium)\n                      .fontSize($r('sys.float.ohos_id_text_size_button1'))\n                      .focusable(true)\n                      .focusOnTouch(true)\n                      .id('loginPanel_huawei_id_other_login_btn_text')\n                      .textOverflow({ overflow: TextOverflow.Ellipsis })\n                      .maxLines(1)\n                      .padding({ left: 8, right: 8 })\n                  }\n                  .id('loginPanel_other_login_btn')\n                  .fontColor($r('sys.color.font_primary'))\n                  .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                  .fontWeight(FontWeight.Medium)\n                  .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n                  .focusable(true)\n                  .opacity(this.enableStatus ? 1 : 0.6)\n                  .focusOnTouch(true)\n                  .enabled(this.enableStatus)\n                  .width('100%')\n                  .constraintSize({\n                    minHeight: 40,\n                    maxWidth: 448\n                  })\n                  .onClick(() => {\n                    // Redirect to the screen for another way to sign in.\n                    AvoidRepeatClick.avoidRepeatClick(() => {\n                      // Redirect to the custom sign-in screen.\n                      if (this.enableStatus) {\n                        const params: Record<string, Object> = { 'isFromQuickLogin': true };\n                        this.pageInfos?.pushPathByName('OtherLoginPage', params, (popInfo: PopInfo) => {\n                          if (popInfo.result) {\n                            // Receive data after a successful sign-in.\n                            hilog.info(domainId, logTag,\n                              `pop to PrepareLoginPage result: ${JSON.stringify(popInfo.result)}}`);\n                            this.pageInfos?.popToName('PrepareLoginPage', popInfo.result, true);\n                          }\n                        }, true);\n                      }\n                    });\n                  })\n                }.margin({ top: 16 })\n              }\n              .margin({\n                top: this.isPhone && this.isLandScape ? 0 : 92\n              })\n\n              // Agreement.\n              Row() {\n                UserAgreement({\n                  isSelected: this.isSelected,\n                  privacyText: this.privacyText,\n                  enableStatus: this.enableStatus,\n                  onChange: (value) => {\n                    this.checkboxChange(value);\n                  }\n                })\n              }\n              .margin({\n                top: 24,\n                bottom: this.isPhone && this.isLandScape ? 0 : (this.isDevice2in1 ? 16 : this.aiBarHeight + 16)\n              })\n            }\n            .height(this.isPhone && this.isLandScape ? '100%' : (this.isBigDisplay ? '50%' : '60%'))\n            .width(this.isPhone && this.isLandScape ? '50%' : '100%')\n            .margin({\n              left: this.isPhone && this.isLandScape ? 40 : 0\n            })\n            .justifyContent(this.isPhone && this.isLandScape ? FlexAlign.Center : FlexAlign.SpaceBetween)\n          }\n          .width('100%')\n          .height('100%')\n          .margin({ top: (this.isPhone && this.isLandScape || this.isDevice2in1) ? -56 : -92 })\n        }\n        .padding({\n          left: this.isPhone && this.isLandScape ? 40 : 16,\n          right: this.isPhone && this.isLandScape ? 40 : 16\n        })\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n      .width('100%')\n      .height('100%')\n    }"
        }
    ]
}