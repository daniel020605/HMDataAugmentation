{
    "entry\\src\\main\\ets\\pages\\About.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Column() {\n        Text(\"Harmonic\")\n          .fontSize(34)\n          .fontWeight(FontWeight.Bold)\n          .fontColor($r('app.color.font'))\n        Text(\"Navidrome的鸿蒙Next客户端\")\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .margin({ top: 5 })\n        Row() {\n          Text(\"版本号\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n          Text('v' + bundleInfo.versionName)\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n        }\n        .width('100%')\n        .margin({ top: 20 })\n        .justifyContent(FlexAlign.SpaceBetween)\n\n        Row() {\n          Text(\"项目地址\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n          Image($r('app.media.github'))\n            .width(25)\n            .height(25)\n            .onClick(() => {\n              let want: Want = {\n                action: 'ohos.want.action.viewData',\n                entities: ['entity.system.browsable'],\n                uri: 'https://github.com/shanyan-wcx/Harmonic'\n              };\n              context.startAbility(want)\n            })\n        }\n        .width('100%')\n        .margin({ top: 12 })\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .width('100%')\n      .backgroundColor($r('app.color.bar_background'))\n      .borderRadius(10)\n      .margin({ top: 10 })\n      .padding(20)\n    }\n    .width('100%')\n    .height('100%')\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\AlbumDetail.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Scroll() {\n        Column() {\n          Row() {\n            Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${this.album.id}&size=${this.coverSize}`)\n              .width(140)\n              .aspectRatio(1)\n              .borderRadius(10)\n              .margin({ left: 20 })\n              .shadow({\n                offsetX: 0,\n                offsetY: 0,\n                radius: 25,\n                color: '#25000000'\n              })\n            Column() {\n              Text(this.album.title)\n                .fontSize(24)\n                .fontColor($r('app.color.font'))\n                .fontWeight(FontWeight.Bold)\n              Button({ type: ButtonType.Normal }) {\n                Text(this.album.artist)\n                  .fontSize(17)\n                  .fontColor($r('app.color.font_secondary'))\n              }\n              .margin({ top: 5 })\n              .backgroundColor('#00000000')\n              .stateEffect(false)\n              .onClick(async () => {\n                this.getArtist()\n                this.pageStack.replacePathByName('ArtistDetail', null);\n              })\n            }\n            .margin({ left: 15, right: 15 })\n            .padding({ bottom: 20 })\n            .width('100%')\n            .layoutWeight(1)\n            .alignItems(HorizontalAlign.Start)\n          }\n          .width('100%')\n          .height('auto')\n          .margin({ top: 15 })\n          .justifyContent(FlexAlign.Start)\n\n          Row() {\n            Column() {\n              Text(this.album.songCount.toString())\n                .fontSize(20)\n                .fontColor($r('app.color.font'))\n                .fontWeight(FontWeight.Bold)\n              Text(\"歌曲\")\n                .fontSize(15)\n                .fontColor($r('app.color.font_secondary'))\n                .margin({ top: 5 })\n            }\n\n            Column() {\n              Text(formatDuration(this.album.duration))\n                .fontSize(20)\n                .fontColor($r('app.color.font'))\n                .fontWeight(FontWeight.Bold)\n              Text(\"时长\")\n                .fontSize(15)\n                .fontColor($r('app.color.font_secondary'))\n                .margin({ top: 5 })\n            }\n\n            Column() {\n              Text(this.album.year !== undefined ? this.album.year!.toString() : '-')\n                .fontSize(20)\n                .fontColor($r('app.color.font'))\n                .fontWeight(FontWeight.Bold)\n              Text(\"年份\")\n                .fontSize(15)\n                .fontColor($r('app.color.font_secondary'))\n                .margin({ top: 5 })\n            }\n          }\n          .width('100%')\n          .height('auto')\n          .padding(20)\n          .justifyContent(FlexAlign.SpaceAround)\n\n          Divider()\n            .width('90%')\n            .height(1)\n            .color($r('app.color.divider'))\n\n          ForEach(this.discs, (disc: Song[], index) => {\n            Text(\"DISC \" + (index + 1))\n              .width('100%')\n              .fontSize(17)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n              .padding({ left: 20, top: 20 })\n            ForEach(disc, (song: Song, index2) => {\n              Button({ type: ButtonType.Normal }) {\n                Row() {\n                  Text(song.track !== undefined ? song.track.toString() : '-')\n                    .fontSize(18)\n                    .fontColor($r('app.color.font_secondary'))\n                    .width(80)\n                    .textAlign(TextAlign.Center)\n                  Column() {\n                    Text(song.title)\n                      .fontSize(18)\n                      .fontColor($r('app.color.font'))\n                      .maxLines(1)\n                      .textOverflow({ overflow: TextOverflow.Ellipsis })\n                    Text(song.artist)\n                      .fontSize(15)\n                      .fontColor($r('app.color.font_secondary'))\n                      .margin({ top: 5 })\n                      .maxLines(1)\n                      .textOverflow({ overflow: TextOverflow.Ellipsis })\n                  }\n                  .alignItems(HorizontalAlign.Start)\n                  .padding({ right: 15 })\n                  .width('100%')\n                  .layoutWeight(1)\n                }\n                .width('100%')\n                .height('100%')\n              }\n              .width('100%')\n              .height(80)\n              .borderRadius(10)\n              .backgroundColor('#00000000')\n              .onClick(async () => {\n                await this.avPlayer!.reset()\n                this.nowPlayingSong = song\n                this.nowPlayingLyrics = await getLyrics(song.id)\n                if (this.nowPlayingLyrics !== null) {\n                  this.groupLyrics()\n                }\n                this.nowPlayingListOriginal = this.album.song!.slice()\n                if (this.playMode === AVSessionManager.LoopMode.LOOP_MODE_SHUFFLE) {\n                  this.nowPlayingList = this.shuffleList(this.nowPlayingListOriginal.slice())\n                } else {\n                  this.nowPlayingList = this.nowPlayingListOriginal.slice()\n                }\n                this.getNowPlayingIndex(song, this.nowPlayingList)\n                this.nowPlayingStar = await this.getStar(song)\n                this.isPlaying = true\n                this.avPlayer!.url = this.baseURL + '/rest/stream' + this.auth + `&id=${song.id}&format=raw`;\n                this.startPlaying = true\n              })\n              .gesture(\n                LongPressGesture()\n                  .onAction(async (event: GestureEvent) => {\n                    this.longPressSong = song\n                    this.longPressStar = await this.getStar(song)\n                    this.showMenu = true\n                  })\n              )\n            })\n            Divider()\n              .width('90%')\n              .height(1)\n              .color($r('app.color.divider'))\n              .visibility(index === this.discs.length - 1 ? Visibility.None : Visibility.Visible)\n          })\n        }\n      }\n      .width('100%')\n      .height('100%')\n      .padding({ bottom: this.startPlaying === true ? 85 : 0 })\n      .animation({ curve: curves.springMotion(0.6, 1) })\n      .scrollBar(BarState.Off)\n      .align(Alignment.Top)\n    }\n    .backgroundColor($r('app.color.content_background'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Albums.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Grid() {\n        ForEach(this.albums, (album: Album, index) => {\n          GridItem() {\n            Button({ type: ButtonType.Normal }) {\n              Column() {\n                Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${album.id}&size=${this.coverSize}`)\n                  .alt($rawfile('nocover.png'))\n                  .objectFit(ImageFit.Fill)\n                  .width('100%')\n                  .aspectRatio(1)\n                  .borderRadius(10)\n                  .margin(10)\n              }\n              .width('100%')\n              .height('auto')\n            }\n            .width('100%')\n            .height('auto')\n            .margin({ bottom: this.startPlaying === true && index === this.albums.length - 1 ? 85 : 0 })\n            .animation({ curve: curves.springMotion(0.6, 1) })\n            .borderRadius(10)\n            .backgroundColor('#00000000')\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.album = album\n              this.pageStack.pushPathByName('AlbumDetail', null);\n            })\n          }\n        })\n      }\n      .width('100%')\n      .height('100%')\n      .columnsTemplate(\"1fr 1fr\")\n      .columnsGap(0)\n      .rowsGap(0)\n      .scrollBar(BarState.Off)\n      .edgeEffect(EdgeEffect.Fade)\n      .padding({ left: 10, right: 10 })\n      .visibility(this.albums.length > 0 ? Visibility.Visible : Visibility.None)\n\n      Column() {\n        Text(\"没有专辑\")\n          .fontSize(32)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center)\n      .visibility(this.albums.length === 0 && this.serverStatus === true ? Visibility.Visible : Visibility.None)\n    }\n    .width('100%')\n    .height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\ArtistDetail.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Scroll() {\n        Column() {\n          Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${this.artist!.id}&size=${this.profileSize}`)\n            .alt($rawfile('noprofile.jpg'))\n            .objectFit(ImageFit.Fill)\n            .width(120)\n            .aspectRatio(1)\n            .borderRadius(100)\n          Column() {\n            Text(this.artist!.name)\n              .fontSize(24)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n            Text(this.artist!.biography)\n              .fontSize(18)\n              .fontColor($r('app.color.font_secondary'))\n              .margin({ top: 10 })\n              .maxLines(3)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n              .textAlign(TextAlign.JUSTIFY)\n          }\n          .width('100%')\n          .height('auto')\n          .padding({\n            top: 20,\n            bottom: 20,\n            left: 40,\n            right: 40\n          })\n\n          Divider()\n            .width('90%')\n            .height(1)\n            .color($r('app.color.divider'))\n\n          Text(\"专辑\")\n            .width('100%')\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n            .fontWeight(FontWeight.Bold)\n            .padding({ left: 20, top: 20, bottom: 5 })\n\n          Grid() {\n            ForEach(this.artist!.album, (album: Album, index) => {\n              GridItem() {\n                Button({ type: ButtonType.Normal }) {\n                  Column() {\n                    Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${album.id}&size=${this.coverSize}`)\n                      .alt($rawfile('nocover.png'))\n                      .objectFit(ImageFit.Fill)\n                      .width('100%')\n                      .aspectRatio(1)\n                      .borderRadius(10)\n                      .margin(10)\n                  }\n                  .width('100%')\n                  .aspectRatio(1)\n                }\n                .width('100%')\n                .aspectRatio(1)\n                .borderRadius(10)\n                .backgroundColor('#00000000')\n                .onClick(() => {\n                  this.album = album\n                  this.pageStack.replacePathByName('AlbumDetail', null);\n                })\n              }\n            })\n          }\n          .width('100%')\n          .height((this.displayWidth - 20) / this.albumPerRow * Math.ceil(this.artist!.albumCount / this.albumPerRow))\n          .columnsTemplate(calculateColumns(this.albumPerRow))\n          .rowsTemplate(calculateRow(this.albumPerRow, this.artist!.albumCount))\n          .columnsGap(0)\n          .rowsGap(0)\n          .scrollBar(BarState.Off)\n          .edgeEffect(EdgeEffect.Fade)\n          .padding({ left: 10, right: 10 })\n        }\n        .width('100%')\n        .height('auto')\n      }\n      .width('100%')\n      .height('100%')\n      .padding({ bottom: this.startPlaying === true ? 85 : 0 })\n      .animation({ curve: curves.springMotion(0.6, 1) })\n      .scrollBar(BarState.Off)\n      .align(Alignment.Top)\n    }\n    .backgroundColor($r('app.color.content_background'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Artists.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Grid() {\n        ForEach(this.artists, (artist: Artist, index) => {\n          GridItem() {\n            Button({ type: ButtonType.Normal }) {\n              Column() {\n                Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${artist.id}&size=${this.profileSize}`)\n                  .alt($rawfile('nocover.png'))\n                  .objectFit(ImageFit.Fill)\n                  .width('100%')\n                  .aspectRatio(1)\n                  .borderRadius(100)\n                  .margin({ top: 10, left: 10, right: 10 })\n                Text(artist.name)\n                  .width('100%')\n                  .fontSize(16)\n                  .fontColor($r('app.color.font'))\n                  .margin(10)\n                  .maxLines(1)\n                  .textAlign(TextAlign.Center)\n                  .textOverflow({ overflow: TextOverflow.Ellipsis })\n              }\n              .width('100%')\n              .height('auto')\n            }\n            .width('100%')\n            .height('auto')\n            .margin({ bottom: this.startPlaying === true && index === this.artists.length - 1 ? 85 : 0 })\n            .animation({ curve: curves.springMotion(0.6, 1) })\n            .borderRadius(10)\n            .backgroundColor('#00000000')\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.artist = artist\n              this.pageStack.pushPathByName('ArtistDetail', null);\n            })\n          }\n        })\n      }\n      .width('100%')\n      .height('100%')\n      .columnsTemplate(\"1fr 1fr 1fr\")\n      .columnsGap(0)\n      .rowsGap(0)\n      .scrollBar(BarState.Off)\n      .edgeEffect(EdgeEffect.Fade)\n      .padding({ left: 10, right: 10 })\n      .visibility(this.artists.length > 0 ? Visibility.Visible : Visibility.None)\n\n      Column() {\n        Text(\"没有艺术家\")\n          .fontSize(32)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center)\n      .visibility(this.artists.length === 0 && this.serverStatus === true ? Visibility.Visible : Visibility.None)\n    }\n    .width('100%')\n    .height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      SideBarContainer(this.sidebarType) {\n        Column() {\n          Column() {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"歌曲\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 0\n              this.title = '歌曲'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"专辑\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 1\n              this.title = '专辑'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"艺术家\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 2\n              this.title = '艺术家'\n            })\n          }\n          .width('90%')\n          .height('auto')\n          .borderRadius(20)\n          .clip(true)\n          .backgroundColor($r('app.color.bar_background'))\n\n          Column() {\n            Playlists()\n          }\n          .width('90%')\n          .height('100%')\n          .layoutWeight(1)\n          .margin({ top: 20, bottom: 20 })\n          .borderRadius(20)\n          .clip(true)\n          .backgroundColor($r('app.color.bar_background'))\n\n          Column() {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"统计\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 3\n              this.title = '统计'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"设置\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 4\n              this.title = '设置'\n            })\n\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(\"\")\n                Text(\"关于\")\n                  .fontSize(20)\n                  .fontColor($r('app.color.font'))\n              }\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(20)\n            .backgroundColor($r('app.color.bar_background'))\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.pageStack.clear()\n              this.nowPage = 5\n              this.title = '关于'\n            })\n          }\n          .width('90%')\n          .height('auto')\n          .borderRadius(20)\n          .clip(true)\n          .backgroundColor($r('app.color.bar_background'))\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor($r('app.color.content_background'))\n        .padding({\n          top: this.sidebarType === SideBarContainerType.Embed ? this.statusBarHeight + 12 : this.statusBarHeight + 57,\n          bottom: 27\n        })\n        .shadow({\n          radius: this.shadowRadius,\n          color: $r('app.color.sidebarShadow'),\n          offsetX: 0,\n          offsetY: 0\n        })\n\n        Stack() {\n          Navigation(this.pageStack) {\n            Stack() {\n              Column() {\n                Column() {\n                  Songs()\n                }\n                .height('100%')\n                .width('100%')\n                .visibility(this.nowPage === 0 && this.showProgress === false ? Visibility.Visible : Visibility.None)\n\n                Column() {\n                  Albums()\n                }\n                .height('100%')\n                .width('100%')\n                .visibility(this.nowPage === 1 && this.showProgress === false ? Visibility.Visible : Visibility.None)\n\n                Column() {\n                  Artists()\n                }\n                .height('100%')\n                .width('100%')\n                .visibility(this.nowPage === 2 && this.showProgress === false ? Visibility.Visible : Visibility.None)\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.serverStatus === true ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                Stats()\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.nowPage === 3 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                Setting()\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.nowPage === 4 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                About()\n              }\n              .height('100%')\n              .width('100%')\n              .visibility(this.nowPage === 5 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                LoadingProgress()\n                  .width(\"100%\")\n                  .height(80)\n                  .color($r('app.color.font'))\n                Text(\"加载时请勿退至后台\")\n                  .fontSize(21)\n                  .fontColor($r('app.color.font'))\n                  .margin({ bottom: 160 })\n              }\n              .height('100%')\n              .width('100%')\n              .justifyContent(FlexAlign.Center)\n              .visibility(this.showProgress === true && this.nowPage <= 2 ? Visibility.Visible : Visibility.None)\n\n              Column() {\n                Text(\"连接服务器失败\")\n                  .fontSize(24)\n                  .fontColor($r('app.color.font'))\n                Button() {\n                  Text(\"重试\")\n                    .fontSize(20)\n                    .fontColor($r('app.color.font'))\n                }\n                .width(100)\n                .height(50)\n                .margin({ top: 20 })\n                .backgroundColor($r('app.color.bar_background'))\n                .onClick(async () => {\n                  if (this.baseURL === '') {\n                    promptAction.showToast({\n                      message: '请先设置服务器！',\n                      duration: 500\n                    });\n                  } else {\n                    this.serverStatus = true\n                    this.showProgress = true\n                    let status: string | null = await ping()\n                    console.log(\"Server status\", status)\n                    if (status === 'ok') {\n                      this.artists = []\n                      this.albums = []\n                      this.songs = []\n                      this.playlists = []\n                      this.artists = await getIndexes()\n                      this.artists = this.clearArtists(this.artists)\n                      for (const artist of this.artists) {\n                        artist.album = await getArtist(artist.id);\n                        this.albums = this.albums.concat(artist.album!);\n                        this.albums = this.clearAlbums(this.albums)\n                        for (const album of artist.album!) {\n                          album.song = await getAlbum(album.id);\n                          this.songs = this.songs.concat(album.song!);\n                          this.songs = this.claerSongs(this.songs)\n                        }\n                      }\n                      this.playlists = (await getPlaylists()).sort((a, b) => {\n                        return Date.parse(b.changed) - Date.parse(a.changed);\n                      })\n                      this.selectedPlaylists = []\n                      for (let playlist of this.playlists) {\n                        this.selectedPlaylists.push(false)\n                      }\n                      let starred = await getStarred()\n                      if (starred !== null) {\n                        this.starredSongs = starred!.song!\n                      }\n                      this.selectedIndex = 0\n                      this.songs.sort((a, b) => {\n                        return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n                      })\n                      this.albums.sort((a, b) => {\n                        return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n                      })\n                      this.artists.sort((a, b) => {\n                        return collator.compare(transliterator.transform(a.name), transliterator.transform(b.name));\n                      })\n                      console.log(\"获取到艺术家\", this.artists.length)\n                      console.log(\"获取到专辑\", this.albums.length)\n                      console.log(\"获取到歌曲\", this.songs.length)\n                      console.log(\"获取到歌单\", this.playlists.length)\n                    } else {\n                      this.serverStatus = false\n                      promptAction.showToast({\n                        message: '连接服务器失败，请检查网络或设置！',\n                        duration: 500\n                      });\n                    }\n                    this.showProgress = false\n                  }\n                })\n              }\n              .height('100%')\n              .width('100%')\n              .justifyContent(FlexAlign.Center)\n              .visibility(this.serverStatus === false && this.nowPage <= 2 ? Visibility.Visible : Visibility.None)\n            }\n          }\n          .mode(NavigationMode.Stack)\n          .title(this.titlebar())\n          .titleMode(NavigationTitleMode.Mini)\n          .hideBackButton(true)\n          .padding({ top: this.statusBarHeight })\n          .menus(this.menuBuilder())\n          .bindSheet($$this.showMenu, this.bindMenuBuilder, {\n            showClose: false,\n            height: SheetSize.FIT_CONTENT,\n            backgroundColor: $r('app.color.content_background'),\n          })\n          .onClick(() => {\n            animateTo({\n              duration: 300,\n              curve: Curve.EaseOut,\n            }, () => {\n              this.showSidebar = false\n            })\n          })\n\n          Row() {\n            Row() {\n              Image(this.baseURL + this.getCoverUrl + this.auth +\n                `&id=${this.nowPlayingSong?.id}&size=${this.coverSize}`)\n                .alt($rawfile('nocover.png'))\n                .objectFit(ImageFit.Fill)\n                .width(60)\n                .aspectRatio(1)\n                .borderRadius(5)\n              Column() {\n                Marquee({\n                  start: true,\n                  step: 3,\n                  src: this.nowPlayingSong?.title\n                })\n                  .fontSize(18)\n                  .fontColor($r('app.color.font'))\n                Marquee({\n                  start: true,\n                  step: 3,\n                  src: this.nowPlayingSong?.artist + \" - \" + this.nowPlayingSong?.album\n                })\n                  .fontSize(15)\n                  .fontColor($r('app.color.font_secondary'))\n                  .margin({ top: 5 })\n              }\n              .margin({ left: 10, right: 10 })\n              .alignItems(HorizontalAlign.Start)\n              .width('100%')\n              .layoutWeight(1)\n            }\n            .width('100%')\n            .layoutWeight(1)\n            .justifyContent(FlexAlign.Start)\n\n            Row() {\n              Button({ type: ButtonType.Circle }) {\n                Image($r('app.media.prev'))\n                  .width(30)\n                  .height(30)\n              }\n              .width(35)\n              .height(35)\n              .backgroundColor('#00000000')\n              .onClick(async () => {\n                animateTo({\n                  duration: 300,\n                  curve: Curve.EaseOut,\n                }, () => {\n                  this.showSidebar = false\n                })\n                await this.avPlayer!.reset();\n                if (this.nowPlayingIndex === 0) {\n                  this.nowPlayingIndex = this.nowPlayingList.length - 1\n                } else {\n                  this.nowPlayingIndex -= 1\n                }\n                this.nowPlayingSong = this.nowPlayingList[this.nowPlayingIndex]\n                this.nowPlayingLyrics = await getLyrics(this.nowPlayingSong.id)\n                if (this.nowPlayingLyrics !== null) {\n                  this.groupLyrics()\n                }\n                this.avPlayer!.url =\n                  this.baseURL + '/rest/stream' + this.auth + `&id=${this.nowPlayingSong.id}&format=raw`;\n              })\n\n              Stack() {\n                Progress({\n                  value: this.nowPlayedTime / this.nowPlayingSong?.duration! * 100,\n                  total: 100,\n                  type: ProgressType.Ring\n                })\n                  .width(45)\n                  .height(45)\n                  .color($r('app.color.progress'))\n                  .backgroundColor($r('app.color.progress_background'))\n                  .style({\n                    strokeWidth: 3\n                  })\n\n                Button({ type: ButtonType.Circle }) {\n                  Image(this.isPlaying === true ? $r('app.media.play') : $r('app.media.pause'))\n                    .width(25)\n                    .height(25)\n                }\n                .width(45)\n                .height(45)\n                .backgroundColor('#00000000')\n                .onClick(() => {\n                  this.isPlaying = !this.isPlaying\n                  if (this.isPlaying === false) {\n                    if (this.fadeVolume === true) {\n                      this.fadeOut()\n                    } else {\n                      this.avPlayer!.pause()\n                    }\n                  } else {\n                    if (this.fadeVolume === true) {\n                      this.fadeIn()\n                    } else {\n                      this.avPlayer!.play()\n                    }\n                  }\n                  animateTo({\n                    duration: 300,\n                    curve: Curve.EaseOut,\n                  }, () => {\n                    this.showSidebar = false\n                  })\n                })\n              }\n\n              Button({ type: ButtonType.Circle }) {\n                Image($r('app.media.next'))\n                  .width(30)\n                  .height(30)\n              }\n              .width(35)\n              .height(35)\n              .backgroundColor('#00000000')\n              .onClick(async () => {\n                animateTo({\n                  duration: 300,\n                  curve: Curve.EaseOut,\n                }, () => {\n                  this.showSidebar = false\n                })\n                await this.avPlayer!.reset();\n                if (this.nowPlayingIndex === this.nowPlayingList.length - 1) {\n                  this.nowPlayingIndex = 0\n                } else {\n                  this.nowPlayingIndex += 1\n                }\n                this.nowPlayingSong = this.nowPlayingList[this.nowPlayingIndex]\n                this.nowPlayingLyrics = await getLyrics(this.nowPlayingSong.id)\n                if (this.nowPlayingLyrics !== null) {\n                  this.groupLyrics()\n                }\n                this.avPlayer!.url =\n                  this.baseURL + '/rest/stream' + this.auth + `&id=${this.nowPlayingSong.id}&format=raw`;\n              })\n            }\n            .width(125)\n            .justifyContent(FlexAlign.SpaceBetween)\n          }\n          .width('100%')\n          .height(85)\n          .backgroundBlurStyle(BlurStyle.COMPONENT_THICK)\n          .padding({ left: 15, right: 15, bottom: 5 })\n          .position({\n            bottom: 0\n          })\n          .bindContentCover($$this.showPlay, this.bindContentCoverBuilder(), {\n            modalTransition: ModalTransition.NONE,\n          })\n          .onClick(() => {\n            if (this.showPlay === true) {\n              this.showPlay = false\n            }\n            this.showPlay = true\n          })\n          .visibility(this.startPlaying === true ? Visibility.Visible : Visibility.Hidden)\n          .transition(TransitionEffect.translate({ y: 100 }).animation({ curve: curves.springMotion(0.6, 1) }))\n        }\n        .width(\"100%\")\n        .height('100%')\n        .onTouch(() => {\n          animateTo({\n            duration: 300,\n            curve: Curve.EaseOut,\n          }, () => {\n            this.showSidebar = false\n          })\n        })\n      }\n      .width(\"100%\")\n      .height('100%')\n      .backgroundColor($r('app.color.content_background'))\n      .sideBarWidth(this.sideBarWidth)\n      .showSideBar(this.sidebarType === SideBarContainerType.Embed ? true : this.showSidebar)\n      .showControlButton(false)\n      .autoHide(this.sidebarType === SideBarContainerType.Embed ? false : true)\n      .sideBarPosition(SideBarPosition.Start)\n      .onChange((show: boolean) => {\n        if (show === true && this.sidebarType === SideBarContainerType.Overlay) {\n          this.shadowRadius = 100\n          this.showSidebar = true\n        } else {\n          setTimeout(() => {\n            this.shadowRadius = 0\n            this.showSidebar = false\n          }, 300)\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Image($r('app.media.sidebar'))\n          .width(24)\n          .aspectRatio(1)\n      }\n      .position({\n        x: 10,\n        y: this.statusBarHeight + 4\n      })\n      .width(this.controlButtonWidth)\n      .height(48)\n      .borderRadius(8)\n      .backgroundColor('#00000000')\n      .onClick(async () => {\n        animateTo({\n          duration: 300,\n          curve: Curve.EaseOut,\n        }, () => {\n          this.showSidebar = !this.showSidebar\n        })\n      })\n      .visibility(this.sidebarType === SideBarContainerType.Overlay && this.showControlButton === true ?\n      Visibility.Visible : Visibility.Hidden)\n    }\n    .width(\"100%\")\n    .height('100%')\n  }"
        },
        {
            "function_name": "menuBuilder",
            "content": "@Builder\n  menuBuilder() {\n    Row() {\n      Button({ type: ButtonType.Normal }) {\n        Image($r('app.media.refresh'))\n          .width(24)\n          .aspectRatio(1)\n      }\n      .width(48)\n      .aspectRatio(1)\n      .borderRadius(8)\n      .backgroundColor('#00000000')\n      .onClick(async () => {\n        animateTo({\n          duration: 300,\n          curve: Curve.EaseOut,\n        }, () => {\n          this.showSidebar = false\n        })\n        this.serverStatus = true\n        this.showProgress = true\n        let status: string | null = await ping()\n        console.log(\"Server status\", status)\n        if (status === 'ok') {\n          this.artists = []\n          this.albums = []\n          this.songs = []\n          this.playlists = []\n          this.artists = await getIndexes()\n          this.artists = this.clearArtists(this.artists)\n          for (const artist of this.artists) {\n            artist.biography = await getArtistInfo(artist.id)\n            artist.album = await getArtist(artist.id);\n            this.albums = this.albums.concat(artist.album!);\n            this.albums = this.clearAlbums(this.albums)\n            for (const album of artist.album!) {\n              album.song = await getAlbum(album.id);\n              this.songs = this.songs.concat(album.song!);\n              this.songs = this.claerSongs(this.songs)\n            }\n          }\n          this.playlists = (await getPlaylists()).sort((a, b) => {\n            return Date.parse(b.changed) - Date.parse(a.changed);\n          })\n          this.selectedPlaylists = []\n          for (let playlist of this.playlists) {\n            this.selectedPlaylists.push(false)\n          }\n          let starred = await getStarred()\n          if (starred !== null) {\n            this.starredSongs = starred!.song!\n          }\n          this.selectedIndex = 0\n          this.songs.sort((a, b) => {\n            return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n          })\n          this.albums.sort((a, b) => {\n            return collator.compare(transliterator.transform(a.title), transliterator.transform(b.title));\n          })\n          this.artists.sort((a, b) => {\n            return collator.compare(transliterator.transform(a.name), transliterator.transform(b.name));\n          })\n          console.log(\"获取到艺术家\", this.artists.length)\n          console.log(\"获取到专辑\", this.albums.length)\n          console.log(\"获取到歌曲\", this.songs.length)\n          console.log(\"获取到歌单\", this.playlists.length)\n        } else {\n          this.serverStatus = false\n          promptAction.showToast({\n            message: '连接服务器失败，请检查网络！',\n            duration: 500\n          });\n        }\n        this.showProgress = false\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Image(this.themeIcon)\n          .width(24)\n          .aspectRatio(1)\n      }\n      .width(48)\n      .aspectRatio(1)\n      .borderRadius(8)\n      .backgroundColor('#00000000')\n      .onClick(() => {\n        animateTo({\n          duration: 300,\n          curve: Curve.EaseOut,\n        }, () => {\n          this.showSidebar = false\n        })\n        if (this.theme === ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET) {\n          this.theme = ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT\n          this.themeIcon = $r('app.media.light')\n        } else if (this.theme === 1) {\n          this.theme = ConfigurationConstant.ColorMode.COLOR_MODE_DARK\n          this.themeIcon = $r('app.media.dark')\n        } else {\n          this.theme = ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET\n          this.themeIcon = $r('app.media.auto')\n        }\n        context.getApplicationContext().setColorMode(this.theme)\n      })\n    }\n    .height('100%')\n    .padding({ right: 10 })\n    .alignItems(VerticalAlign.Center)\n  }"
        },
        {
            "function_name": "bindMenuBuilder",
            "content": "@Builder\n  bindMenuBuilder() {\n    Column() {\n      Button({ type: ButtonType.Normal }) {\n        Text(\"歌曲信息\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        this.info.open()\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"下一首播放\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        if (this.nowPlayingList.length !== 0) {\n          this.nowPlayingListOriginal.splice(this.nowPlayingIndex + 1, 0, this.longPressSong!)\n          this.nowPlayingList.splice(this.nowPlayingIndex + 1, 0, this.longPressSong!)\n          promptAction.showToast({\n            message: '添加成功！',\n            duration: 500\n          });\n        } else {\n          promptAction.showToast({\n            message: '播放队列不存在！',\n            duration: 500\n          });\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"加入播放队列\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        if (this.nowPlayingList.length !== 0) {\n          this.nowPlayingListOriginal.push(this.longPressSong!)\n          this.nowPlayingList.push(this.longPressSong!)\n          promptAction.showToast({\n            message: '添加成功！',\n            duration: 500\n          });\n        } else {\n          promptAction.showToast({\n            message: '播放队列不存在！',\n            duration: 500\n          });\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"添加到歌单\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .visibility(this.addOrDelete === true ? Visibility.Visible : Visibility.None)\n      .onClick(async () => {\n        this.showMenu = false\n        this.selectPlaylist.open()\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"从歌单中删除\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .visibility(this.addOrDelete === false ? Visibility.Visible : Visibility.None)\n      .onClick(async () => {\n        this.showMenu = false\n        let success = await updatePlaylist(this.playlist!.id, undefined, undefined, undefined, this.longPressIndex)\n        if (success === true) {\n          promptAction.showToast({\n            message: '删除成功！',\n            duration: 500\n          });\n          this.playlist = await getPlaylist(this.playlist!.id)\n          this.playlists = (await getPlaylists()).sort((a, b) => {\n            return Date.parse(b.changed) - Date.parse(a.changed);\n          })\n        } else {\n          promptAction.showToast({\n            message: '删除失败，请检查网络！',\n            duration: 500\n          });\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(this.longPressStar === true ? \"取消收藏\" : \"添加到收藏\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMenu = false\n        if (this.longPressStar === true) {\n          let starStatus = await unstar(this.longPressSong!.id)\n          if (starStatus === true) {\n            promptAction.showToast({\n              message: '取消收藏成功！',\n              duration: 500\n            });\n            if (this.startPlaying === true && this.longPressSong!.id === this.nowPlayingSong!.id) {\n              this.nowPlayingStar = false\n              if (this.isPlaying === true) {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PLAY)\n              } else {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PAUSE)\n              }\n            }\n          }\n        } else {\n          let starStatus = await star(this.longPressSong!.id)\n          if (starStatus === true) {\n            promptAction.showToast({\n              message: '收藏成功！',\n              duration: 500\n            });\n            if (this.startPlaying === true && this.longPressSong!.id === this.nowPlayingSong!.id) {\n              this.nowPlayingStar = true\n              if (this.isPlaying === true) {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PLAY)\n              } else {\n                await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PAUSE)\n              }\n            }\n          }\n        }\n      })\n    }\n    .width('90%')\n    .height('auto')\n    .borderRadius(10)\n    .margin({ top: 20, bottom: 25 })\n    .clip(true)\n    .backgroundColor($r('app.color.bar_background'))\n  }"
        },
        {
            "function_name": "bindContentCoverBuilder",
            "content": "@Builder\n  bindContentCoverBuilder() {\n    Column() {\n      Play()\n    }\n    .transition(TransitionEffect.translate({ y: 1000 }).animation({ curve: curves.springMotion(0.6, 1) }))\n  }"
        },
        {
            "function_name": "titlebar",
            "content": "@Builder\n  titlebar() {\n    Row() {\n      Text(this.title)\n        .fontSize(23)\n        .fontColor($r('app.color.font'))\n        .fontWeight(FontWeight.Medium)\n    }\n    .width(\"100%\")\n    .height('100%')\n    .alignItems(VerticalAlign.Center)\n    .justifyContent(FlexAlign.SpaceBetween)\n    .padding({ left: 72, top: 1 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Play.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Stack() {\n        Column()\n          .backgroundImage(this.baseURL + this.getCoverUrl + this.auth +\n            `&id=${this.nowPlayingSong?.id}&size=${this.coverSize}`)\n          .backgroundImageSize(ImageSize.FILL)\n          .backgroundBlurStyle(BlurStyle.BACKGROUND_ULTRA_THICK)\n          .backgroundBrightness({\n            rate: context.config.colorMode === ConfigurationConstant.ColorMode.COLOR_MODE_DARK ? 0.2 : 0.5,\n            lightUpDegree: context.config.colorMode === ConfigurationConstant.ColorMode.COLOR_MODE_DARK ? 0.1 : 0.5\n          })\n          .width('100%')\n          .height('100%')\n        Row() {\n          Column() {\n            Row() {\n              Button({ type: ButtonType.Circle }) {\n                Image($r('app.media.down'))\n                  .width(30)\n                  .height(30)\n              }\n              .width(40)\n              .height(40)\n              .backgroundColor('#00000000')\n              .margin({ left: 25 })\n              .onClick(() => {\n                if (this.showPlay === false) {\n                  this.showPlay = true\n                }\n                this.showPlay = false\n              })\n\n              Row() {\n                Text(\"睡眠定时\")\n                  .fontSize(18)\n                  .fontColor($r('app.color.font'))\n                  .margin({ right: 10 })\n                Text(formatSleepTime(this.sleepTime))\n                  .fontSize(18)\n                  .fontColor($r('app.color.font'))\n              }\n              .width('auto')\n              .height(40)\n              .padding({ left: 15, right: 15 })\n              .borderRadius(10)\n              .backgroundColor($r('app.color.content_background'))\n              .visibility(this.sleepTime > 0 ? Visibility.Visible : Visibility.None)\n\n              Button({ type: ButtonType.Circle }) {\n                Image($r('app.media.radiowave'))\n                  .width(30)\n                  .height(30)\n              }\n              .width(40)\n              .height(40)\n              .margin({ right: 25 })\n              .backgroundColor('#00000000')\n              .onClick(async () => {\n                let url = await createShare(this.nowPlayingSong!.id)\n                if (url !== null) {\n                  let shareData: systemShare.SharedData = new systemShare.SharedData({\n                    utd: utd.UniformDataType.HYPERLINK,\n                    content: url,\n                    description: this.nowPlayingSong!.title + \" - \" + this.nowPlayingSong!.artist,\n                    thumbnail: new Uint8Array(await getCover(this.nowPlayingSong!.id, 128))\n                  });\n                  let controller: systemShare.ShareController = new systemShare.ShareController(shareData);\n                  let context = getContext(this) as common.UIAbilityContext;\n                  controller.show(context, {\n                    selectionMode: systemShare.SelectionMode.SINGLE,\n                    previewMode: systemShare.SharePreviewMode.DEFAULT,\n                  }).then(() => {\n                    console.info('分享成功。');\n                  }).catch((error: BusinessError) => {\n                    console.error(`分享失败，code: ${error.code}, message: ${error.message}`);\n                  });\n                } else {\n                  promptAction.showToast({\n                    message: '创建分享链接失败，请检查网络！',\n                    duration: 500\n                  });\n                }\n              })\n            }\n            .width(\"100%\")\n            .justifyContent(FlexAlign.SpaceBetween)\n            .padding({ top: 20 })\n\n            Row() {\n              Column() {\n                Marquee({\n                  start: true,\n                  step: 3,\n                  src: this.nowPlayingSong?.title\n                })\n                  .fontSize(28)\n                  .fontColor($r('app.color.font'))\n                  .fontWeight(FontWeight.Medium)\n                Text(this.nowPlayingSong?.artist)\n                  .fontSize(18)\n                  .fontColor($r('app.color.font'))\n                  .margin({ top: 5 })\n                  .maxLines(1)\n                  .textOverflow({ overflow: TextOverflow.Ellipsis })\n              }\n              .width(\"100%\")\n              .layoutWeight(1)\n              .margin({ right: 20 })\n              .alignItems(HorizontalAlign.Start)\n\n              Button() {\n                Image(this.nowPlayingStar === true ? $r('app.media.star') : $r('app.media.unstar'))\n                  .width(30)\n                  .height(30)\n              }\n              .width(40)\n              .height(40)\n              .backgroundColor('#00000000')\n              .onClick(async () => {\n                if (this.nowPlayingStar === true) {\n                  let starStatus = await unstar(this.nowPlayingSong!.id)\n                  if (starStatus === true) {\n                    this.nowPlayingStar = false\n                    let starred = await getStarred()\n                    if (starred !== null) {\n                      this.starredSongs = starred!.song!\n                    }\n                    if (this.isPlaying === true) {\n                      await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PLAY)\n                    } else {\n                      await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PAUSE)\n                    }\n                  }\n                } else {\n                  let starStatus = await star(this.nowPlayingSong!.id)\n                  if (starStatus === true) {\n                    this.nowPlayingStar = true\n                    let starred = await getStarred()\n                    if (starred !== null) {\n                      this.starredSongs = starred!.song!\n                    }\n                    if (this.isPlaying === true) {\n                      await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PLAY)\n                    } else {\n                      await this.setPlaybackState(AVSessionManager.PlaybackState.PLAYBACK_STATE_PAUSE)\n                    }\n                  }\n                }\n              })\n            }\n            .width(\"80%\")\n            .justifyContent(FlexAlign.SpaceBetween)\n            .padding({ top: 20, bottom: 20 })\n\n            if (this.sidebarType === SideBarContainerType.Overlay) {\n              Swiper(this.controller) {\n                Column() {\n                  Image(this.baseURL + this.getCoverUrl + this.auth +\n                    `&id=${this.nowPlayingSong?.id}&size=${this.coverSize}`)\n                    .alt($rawfile('nocover.png'))\n                    .height('100%')\n                    .aspectRatio(1)\n                    .borderRadius(10)\n                    .objectFit(ImageFit.Fill)\n                }\n                .width('100%')\n                .height('100%')\n                .margin({ bottom: 40 })\n                .onTouch((event?: TouchEvent) => {\n                  if (event?.type === TouchType.Move) {\n                    this.lyricsScroller.scrollToIndex(this.lyricsIndex, false, ScrollAlign.CENTER)\n                  }\n                })\n\n                Column() {\n                  List({ scroller: this.lyricsScroller }) {\n                    if (this.nowPlayingLyrics !== null && this.nowPlayingLyricsByGroup.length > 0) {\n                      ForEach(this.nowPlayingLyricsByGroup, (group: Line[], index) => {\n                        ListItem() {\n                          Column() {\n                            ForEach(group, (line: Line, index2) => {\n                              Text(line.value)\n                                .width('100%')\n                                .height('auto')\n                                .padding({ left: 20, right: 20 })\n                                .margin({ bottom: index2 === 0 ? 5 : 0 })\n                                .fontSize(this.lyricsIndex === index &&\n                                  this.nowPlayingLyrics?.synced === true ?\n                                  28 :\n                                  23)\n                                .fontWeight(FontWeight.Bold)\n                                .fontColor(this.lyricsIndex === index &&\n                                  this.nowPlayingLyrics?.synced === true ?\n                                $r('app.color.font_lyrics') :\n                                $r('app.color.font_lyrics_secondary'))\n                                .textAlign(TextAlign.Center)\n                                .animation({ duration: 400 })\n                            })\n                          }\n                        }\n                        .margin({\n                          top: index === 0 ? 125 : 15,\n                          bottom: index === this.nowPlayingLyricsByGroup.length - 1 ? 125 : 15\n                        })\n                      })\n                    } else {\n                      ListItem() {\n                        Column() {\n                          Text(\"没有歌词\")\n                            .fontSize(28)\n                            .fontWeight(FontWeight.Bold)\n                            .fontColor($r('app.color.font_lyrics'))\n                        }\n                        .width('100%')\n                        .height('100%')\n                        .justifyContent(FlexAlign.Center)\n                      }\n                      .width('100%')\n                      .height('100%')\n                    }\n                  }\n                  .height('100%')\n                  .aspectRatio(1)\n                  .borderRadius(10)\n                  .listDirection(Axis.Vertical)\n                  .scrollBar(BarState.Off)\n                }\n                .width('100%')\n                .height('100%')\n                .margin({ bottom: 40 })\n              }\n              .loop(false)\n              .indicator(\n                Indicator.dot()\n                  .selectedColor($r('app.color.indicator'))\n              )\n              .height('45%')\n              .width('90%')\n              .margin({ top: 20 })\n              .visibility(this.showCover === true ? Visibility.Visible : Visibility.None)\n            } else {\n              Column() {\n                Image(this.baseURL + this.getCoverUrl + this.auth +\n                  `&id=${this.nowPlayingSong?.id}&size=${this.coverSize}`)\n                  .alt($rawfile('nocover.png'))\n                  .height('100%')\n                  .aspectRatio(1)\n                  .borderRadius(10)\n                  .objectFit(ImageFit.Fill)\n              }\n              .height('45%')\n              .width('90%')\n              .margin({ top: 20 })\n              .padding({ bottom: 40 })\n              .visibility(this.showCover === true ? Visibility.Visible : Visibility.None)\n            }\n\n            Column() {\n              Column() {\n                Row() {\n                  Text(formatDuration(this.nowPlayedTime))\n                    .fontSize(16)\n                    .fontColor($r('app.color.font'))\n                    .fontWeight(FontWeight.Medium)\n                  Text(formatDuration(this.nowPlayingSong?.duration!))\n                    .fontSize(16)\n                    .fontColor($r('app.color.font'))\n                    .fontWeight(FontWeight.Medium)\n                }\n                .width('100%')\n                .justifyContent(FlexAlign.SpaceBetween)\n\n                Progress({\n                  value: this.nowPlayedTime / this.nowPlayingSong?.duration! * 100,\n                  total: 100,\n                  type: ProgressType.Linear\n                })\n                  .style({ strokeWidth: 5 })\n                  .width('100%')\n                  .margin({ top: 10, bottom: 15 })\n                  .color($r('app.color.progress'))\n                  .onAreaChange((oldValue: Area, newValue: Area) => {\n                    this.progressWidth = newValue.width as number;\n                  })\n                  .gesture(\n                    GestureGroup(\n                      GestureMode.Exclusive,\n                      TapGesture({ fingers: 1, count: 1 })\n                        .onAction((event: GestureEvent) => {\n                          let touchProgress = Math.round((event.fingerList[0].localX / this.progressWidth) * 100)\n                          let progress = 0\n                          if (touchProgress < 0) {\n                            progress = 0\n                          } else if (touchProgress >= 100) {\n                            progress = 99\n                          } else {\n                            progress = touchProgress\n                          }\n                          this.avPlayer!.seek(progress * this.nowPlayingSong!.duration * 10)\n                        })\n                    )\n                  )\n              }\n              .width('100%')\n              .visibility(this.displayHeight > 300 ? Visibility.Visible : Visibility.None)\n\n              Row() {\n                Button({ type: ButtonType.Circle }) {\n                  Image($r('app.media.prev'))\n                    .width(45)\n                    .height(45)\n                }\n                .width(55)\n                .height(55)\n                .backgroundColor('#00000000')\n                .onClick(async () => {\n                  await this.avPlayer!.reset();\n                  if (this.nowPlayingIndex === 0) {\n                    this.nowPlayingIndex = this.nowPlayingList.length - 1\n                  } else {\n                    this.nowPlayingIndex -= 1\n                  }\n                  this.nowPlayingSong = this.nowPlayingList[this.nowPlayingIndex]\n                  this.nowPlayingLyrics = await getLyrics(this.nowPlayingSong.id)\n                  if (this.nowPlayingLyrics !== null) {\n                    this.groupLyrics()\n                  }\n                  this.avPlayer!.url =\n                    this.baseURL + '/rest/stream' + this.auth + `&id=${this.nowPlayingSong.id}&format=raw`;\n                })\n\n                Button({ type: ButtonType.Circle }) {\n                  Image(this.isPlaying === true ? $r('app.media.play') : $r('app.media.pause'))\n                    .width(47)\n                    .height(47)\n                }\n                .width(70)\n                .height(70)\n                .backgroundColor('#00000000')\n                .onClick(() => {\n                  this.isPlaying = !this.isPlaying\n                  if (this.isPlaying === false) {\n                    if (this.fadeVolume === true) {\n                      this.fadeOut()\n                    } else {\n                      this.avPlayer!.pause()\n                    }\n                  } else {\n                    if (this.fadeVolume === true) {\n                      this.fadeIn()\n                    } else {\n                      this.avPlayer!.play()\n                    }\n                  }\n                })\n\n                Button({ type: ButtonType.Circle }) {\n                  Image($r('app.media.next'))\n                    .width(45)\n                    .height(45)\n                }\n                .width(55)\n                .height(55)\n                .backgroundColor('#00000000')\n                .onClick(async () => {\n                  await this.avPlayer!.reset();\n                  if (this.nowPlayingIndex === this.nowPlayingList.length - 1) {\n                    this.nowPlayingIndex = 0\n                  } else {\n                    this.nowPlayingIndex += 1\n                  }\n                  this.nowPlayingSong = this.nowPlayingList[this.nowPlayingIndex]\n                  this.nowPlayingLyrics = await getLyrics(this.nowPlayingSong.id)\n                  if (this.nowPlayingLyrics !== null) {\n                    this.groupLyrics()\n                  }\n                  this.avPlayer!.url =\n                    this.baseURL + '/rest/stream' + this.auth + `&id=${this.nowPlayingSong.id}&format=raw`;\n                })\n              }\n              .width('80%')\n              .alignItems(VerticalAlign.Center)\n              .justifyContent(FlexAlign.SpaceBetween)\n\n              Row() {\n                Button({ type: ButtonType.Circle }) {\n                  Image(this.playModeIcon)\n                    .width(30)\n                    .height(30)\n                }\n                .width(40)\n                .height(40)\n                .backgroundColor('#00000000')\n                .onClick(async () => {\n                  if (this.playMode === AVSessionManager.LoopMode.LOOP_MODE_SINGLE) {\n                    this.playMode = AVSessionManager.LoopMode.LOOP_MODE_LIST\n                  } else if (this.playMode === AVSessionManager.LoopMode.LOOP_MODE_LIST) {\n                    this.playMode = AVSessionManager.LoopMode.LOOP_MODE_SHUFFLE\n                  } else {\n                    this.playMode = AVSessionManager.LoopMode.LOOP_MODE_SINGLE\n                  }\n                })\n\n                Button({ type: ButtonType.Circle }) {\n                  Image($r('app.media.sleep'))\n                    .width(30)\n                    .height(30)\n                }\n                .width(40)\n                .height(40)\n                .backgroundColor('#00000000')\n                .onClick(() => {\n                  this.showSleep = true\n                })\n                .bindSheet($$this.showSleep, this.sleepBuilder, {\n                  showClose: false,\n                  height: SheetSize.FIT_CONTENT,\n                  preferType: SheetType.BOTTOM,\n                  backgroundColor: $r('app.color.content_background'),\n                  title: {\n                    title: '睡眠定时'\n                  }\n                })\n\n                Button({ type: ButtonType.Circle }) {\n                  Image($r('app.media.list'))\n                    .width(30)\n                    .height(30)\n                }\n                .width(40)\n                .height(40)\n                .backgroundColor('#00000000')\n                .onClick(() => {\n                  this.showList = true\n                })\n                .bindSheet($$this.showList, this.listBuilder, {\n                  showClose: false,\n                  height: SheetSize.FIT_CONTENT,\n                  preferType: SheetType.BOTTOM,\n                  backgroundColor: $r('app.color.content_background'),\n                  title: {\n                    title: '播放队列'\n                  }\n                })\n\n                Button({ type: ButtonType.Circle }) {\n                  Image($r('app.media.more'))\n                    .width(30)\n                    .height(30)\n                }\n                .width(40)\n                .height(40)\n                .backgroundColor('#00000000')\n                .onClick(() => {\n                  this.showMore = true\n                })\n                .bindSheet($$this.showMore, this.moreBuilder, {\n                  showClose: false,\n                  height: SheetSize.FIT_CONTENT,\n                  preferType: SheetType.BOTTOM,\n                  backgroundColor: $r('app.color.content_background'),\n                  title: {\n                    title: '更多'\n                  }\n                })\n              }\n              .width('100%')\n              .justifyContent(FlexAlign.SpaceBetween)\n              .visibility(this.displayHeight > 300 ? Visibility.Visible : Visibility.None)\n            }\n            .width('80%')\n            .height('100%')\n            .layoutWeight(1)\n            .justifyContent(FlexAlign.SpaceBetween)\n            .padding({ top: this.showCover === true ? 20 : 40, bottom: 20 })\n            .offset({\n              y: -20\n            })\n          }\n          .width('100%')\n          .height('100%')\n          .layoutWeight(1)\n          .alignItems(HorizontalAlign.Center)\n\n          if (this.sidebarType === SideBarContainerType.Embed) {\n            Column() {\n              List({ scroller: this.lyricsScroller }) {\n                if (this.nowPlayingLyrics !== null && this.nowPlayingLyricsByGroup.length > 0) {\n                  ForEach(this.nowPlayingLyricsByGroup, (group: Line[], index) => {\n                    ListItem() {\n                      Column() {\n                        ForEach(group, (line: Line, index2) => {\n                          Text(line.value)\n                            .width('100%')\n                            .height('auto')\n                            .padding({ left: 20, right: 20 })\n                            .margin({ bottom: index2 === 0 ? 5 : 0 })\n                            .fontSize(this.lyricsIndex === index &&\n                              this.nowPlayingLyrics?.synced === true ?\n                              28 :\n                              23)\n                            .fontWeight(FontWeight.Bold)\n                            .fontColor(this.lyricsIndex === index &&\n                              this.nowPlayingLyrics?.synced === true ?\n                            $r('app.color.font_lyrics') :\n                            $r('app.color.font_lyrics_secondary'))\n                            .textAlign(TextAlign.Center)\n                            .animation({ duration: 400 })\n                        })\n                      }\n                    }\n                    .margin({\n                      top: index === 0 ? '50%' : 15,\n                      bottom: index === this.nowPlayingLyricsByGroup.length - 1 ? '50%' : 15\n                    })\n                  })\n                } else {\n                  ListItem() {\n                    Column() {\n                      Text(\"没有歌词\")\n                        .fontSize(28)\n                        .fontWeight(FontWeight.Bold)\n                        .fontColor($r('app.color.font_lyrics'))\n                    }\n                    .width('100%')\n                    .height('100%')\n                    .justifyContent(FlexAlign.Center)\n                  }\n                  .width('100%')\n                  .height('100%')\n                }\n              }\n              .width('100%')\n              .height('100%')\n              .borderRadius(10)\n              .listDirection(Axis.Vertical)\n              .scrollBar(BarState.Off)\n            }\n            .width('50%')\n            .height('65%')\n            .margin({ bottom: 20 })\n          }\n        }\n        .width('100%')\n        .height('100%')\n        .padding({ top: this.statusBarHeight })\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.SpaceAround)\n  }"
        },
        {
            "function_name": "sleepBuilder",
            "content": "@Builder\n  sleepBuilder() {\n    Column() {\n      Column() {\n        Row() {\n          Text('时长')\n            .fontSize(19)\n            .fontColor($r('app.color.font'))\n          Text(Math.floor(this.sleepValue) + \" 分钟\")\n            .fontSize(19)\n            .fontColor($r('app.color.font'))\n        }\n        .width('100%')\n        .justifyContent(FlexAlign.SpaceBetween)\n\n        Slider({\n          value: $$this.sleepValue,\n          min: 0,\n          max: 120,\n          step: 1,\n          style: SliderStyle.OutSet,\n          direction: Axis.Horizontal,\n          reverse: false\n        })\n          .width('100%')\n          .blockColor($r('app.color.progress'))\n          .selectedColor($r('app.color.progress'))\n          .trackThickness(5)\n      }\n      .width('90%')\n      .borderRadius(10)\n      .margin({ bottom: 20 })\n      .padding({\n        top: 20,\n        left: 20,\n        right: 20,\n        bottom: 10\n      })\n      .clip(true)\n      .backgroundColor($r('app.color.bar_background'))\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"设置\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n      }\n      .width('80%')\n      .height(60)\n      .borderRadius(15)\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(() => {\n        this.sleepTime = this.sleepValue * 60\n        this.showSleep = false\n      })\n    }\n    .margin({ bottom: 25 })\n  }"
        },
        {
            "function_name": "listBuilder",
            "content": "@Builder\n  listBuilder() {\n    Column() {\n      List({ scroller: this.listScroller }) {\n        ForEach(this.nowPlayingList, (song: Song, index) => {\n          ListItem() {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${song.id}&size=${this.coverSize}`)\n                  .alt($rawfile('nocover.png'))\n                  .objectFit(ImageFit.Fill)\n                  .width(45)\n                  .aspectRatio(1)\n                  .borderRadius(5)\n                Column() {\n                  Text(song.title)\n                    .fontSize(17)\n                    .fontColor($r('app.color.font'))\n                    .maxLines(1)\n                    .textOverflow({ overflow: TextOverflow.Ellipsis })\n                  Text(song.artist + \" - \" + song.album)\n                    .fontSize(14)\n                    .fontColor($r('app.color.font_secondary'))\n                    .margin({ top: 5 })\n                    .maxLines(1)\n                    .textOverflow({ overflow: TextOverflow.Ellipsis })\n                }\n                .width('100%')\n                .layoutWeight(1)\n                .margin({ left: 10 })\n                .alignItems(HorizontalAlign.Start)\n              }\n              .width('100%')\n              .height('100%')\n            }\n            .width('100%')\n            .height(60)\n            .borderRadius(10)\n            .padding({ left: 20, right: 20 })\n            .backgroundColor(index === this.nowPlayingIndex ? $r('app.color.progress_background') :\n            $r('app.color.bar_background'))\n            .onClick(async () => {\n              this.showList = false\n              await this.avPlayer!.reset()\n              this.nowPlayingSong = song\n              this.nowPlayingLyrics = await getLyrics(song.id)\n              if (this.nowPlayingLyrics !== null) {\n                this.groupLyrics()\n              }\n              this.nowPlayingIndex = index\n              this.isPlaying = true\n              this.avPlayer!.url = this.baseURL + '/rest/stream' + this.auth + `&id=${song.id}&format=raw`;\n            })\n          }\n          .swipeAction({\n            end: {\n              builder: () => {\n                this.playlistEnd(index)\n              },\n            }\n          })\n        })\n      }\n      .width('100%')\n      .height('100%')\n      .listDirection(Axis.Vertical)\n      .scrollBar(BarState.Off)\n      .edgeEffect(EdgeEffect.Fade)\n    }\n    .width('90%')\n    .height(this.nowPlayingList.length > 7 ? 420 : this.nowPlayingList.length * 60)\n    .borderRadius(10)\n    .margin({ bottom: 25 })\n    .clip(true)\n    .backgroundColor($r('app.color.bar_background'))\n    .onAppear(() => {\n      this.listScroller.scrollToIndex(this.nowPlayingIndex, false, ScrollAlign.CENTER)\n    })\n  }"
        },
        {
            "function_name": "moreBuilder",
            "content": "@Builder\n  moreBuilder() {\n    Column() {\n      Button({ type: ButtonType.Normal }) {\n        Text(\"歌曲信息\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMore = false\n        this.info.open()\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"添加到歌单\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMore = false\n        this.selectPlaylist.open()\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"下载歌曲\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMore = false\n        try {\n          let sanPath = context.filesDir + `/${this.nowPlayingSong!.title}.${this.nowPlayingSong!.suffix}`;\n          let res = fs.accessSync(sanPath)\n          if (res === true) {\n            fs.unlinkSync(sanPath);\n          }\n          request.downloadFile(context, {\n            url: this.baseURL + '/rest/download' + this.auth + `&id=${this.nowPlayingSong!.id}`,\n            filePath: sanPath\n          }).then((downloadTask: request.DownloadTask) => {\n            downloadTask.on('complete', () => {\n              console.info('下载完成');\n              const documentSaveOptions = new picker.DocumentSaveOptions();\n              documentSaveOptions.pickerMode = picker.DocumentPickerMode.DOWNLOAD\n              const documentViewPicker = new picker.DocumentViewPicker;\n              documentViewPicker.save(documentSaveOptions)\n                .then(async (documentSaveResult) => {\n                  let uri = documentSaveResult[0];\n                  let path: string = new fileUri.FileUri(uri).path\n                  let filePath: string = path + `/${this.nowPlayingSong!.title}.${this.nowPlayingSong!.suffix}`;\n                  let sanFile = fs.openSync(sanPath, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE)\n                  let pubFile = fs.openSync(filePath, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE)\n                  fs.copyFileSync(sanFile.fd, pubFile.fd)\n                  fs.closeSync(sanFile.fd)\n                  fs.closeSync(pubFile.fd)\n                  fs.unlinkSync(sanPath);\n                }).catch((err: Error) => {\n                console.error(`调用documentPicker.select失败, message is ${err.message}`);\n              })\n            })\n          }).catch((err: BusinessError) => {\n            console.error(`下载失败, code is ${err.code}, 1message is ${err.message}`);\n          });\n          promptAction.showToast({\n            message: '下载成功！',\n            duration: 500\n          });\n        } catch (error) {\n          promptAction.showToast({\n            message: '下载失败！',\n            duration: 500\n          });\n        }\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"艺术家：\" + this.nowPlayingSong?.artist)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMore = false\n        this.showPlay = false\n        this.getArtist()\n        this.pageStack.replacePathByName('ArtistDetail', null);\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"专辑：\" + this.nowPlayingSong?.album)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMore = false\n        this.showPlay = false\n        this.getAlbum()\n        this.pageStack.replacePathByName('AlbumDetail', null);\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"清除睡眠定时\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMore = false\n        this.sleepTime = 0\n      })\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"关闭播放器\")\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .borderRadius(10)\n      .padding({ left: 20, right: 20 })\n      .backgroundColor($r('app.color.bar_background'))\n      .onClick(async () => {\n        this.showMore = false\n        this.nowPlayingSong = null\n        this.nowPlayingList = []\n        this.avPlayer!.stop()\n        setTimeout(() => {\n          this.isPlaying = false\n          this.startPlaying = false\n          this.showPlay = false\n          this.sleepTime = 0\n        }, 10)\n      })\n    }\n    .width('90%')\n    .height('auto')\n    .borderRadius(10)\n    .margin({ bottom: 25 })\n    .clip(true)\n    .backgroundColor($r('app.color.bar_background'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\PlaylistDetail.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    NavDestination() {\n      Scroll() {\n        Column() {\n          Column() {\n            Flex({ direction: FlexDirection.Row }) {\n              Text(this.playlist!.name)\n                .fontSize(28)\n                .fontColor($r('app.color.font'))\n                .fontWeight(FontWeight.Bold)\n                .maxLines(1)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n              Button({ type: ButtonType.Circle }) {\n                Image($r('app.media.edit'))\n                  .width(20)\n                  .height(20)\n              }\n              .width(35)\n              .height(35)\n              .margin({ left: 5 })\n              .backgroundColor('#00000000')\n              .onClick(() => {\n                this.editPlaylist.open()\n              })\n            }\n            .width('100%')\n            .padding({ left: 40, right: 35 })\n\n            Text(this.playlist!.comment)\n              .fontSize(18)\n              .fontColor($r('app.color.font_secondary'))\n              .margin({ top: 5 })\n              .maxLines(2)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n              .padding({ left: 40, right: 40 })\n              .visibility(this.playlist!.comment !== undefined ? Visibility.Visible : Visibility.None)\n            Row() {\n              Text(formatDate(this.playlist!.created))\n                .fontSize(15)\n                .fontColor($r('app.color.font_secondary'))\n              Text(\"创建\")\n                .fontSize(15)\n                .fontColor($r('app.color.font_secondary'))\n            }\n            .margin({ top: 5 })\n            .padding({ left: 40, right: 40 })\n          }\n          .padding({ top: 15 })\n          .width('100%')\n          .height('auto')\n          .alignItems(HorizontalAlign.Start)\n\n          Row() {\n            Column() {\n              Text(this.playlist!.songCount.toString())\n                .fontSize(20)\n                .fontColor($r('app.color.font'))\n                .fontWeight(FontWeight.Bold)\n              Text(\"歌曲\")\n                .fontSize(15)\n                .fontColor($r('app.color.font_secondary'))\n                .margin({ top: 5 })\n            }\n\n            Column() {\n              Text(formatDuration(this.playlist!.duration))\n                .fontSize(20)\n                .fontColor($r('app.color.font'))\n                .fontWeight(FontWeight.Bold)\n              Text(\"时长\")\n                .fontSize(15)\n                .fontColor($r('app.color.font_secondary'))\n                .margin({ top: 5 })\n            }\n          }\n          .width('100%')\n          .height('auto')\n          .padding(20)\n          .justifyContent(FlexAlign.SpaceAround)\n\n          Divider()\n            .width('90%')\n            .height(1)\n            .color($r('app.color.divider'))\n\n          ForEach(this.playlist!.entry, (song: Song, index) => {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Text((index + 1).toString())\n                  .fontSize(18)\n                  .fontColor($r('app.color.font_secondary'))\n                  .width(70)\n                  .textAlign(TextAlign.Center)\n                Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${song.id}&size=${this.coverSize}`)\n                  .alt($rawfile('nocover.png'))\n                  .objectFit(ImageFit.Fill)\n                  .width(60)\n                  .aspectRatio(1)\n                  .borderRadius(5)\n                Column() {\n                  Text(song.title)\n                    .fontSize(18)\n                    .fontColor($r('app.color.font'))\n                    .maxLines(1)\n                    .textOverflow({ overflow: TextOverflow.Ellipsis })\n                  Text(song.artist)\n                    .fontSize(15)\n                    .fontColor($r('app.color.font_secondary'))\n                    .margin({ top: 5 })\n                    .maxLines(1)\n                    .textOverflow({ overflow: TextOverflow.Ellipsis })\n                }\n                .alignItems(HorizontalAlign.Start)\n                .padding({ left: 15, right: 15 })\n                .width('100%')\n                .layoutWeight(1)\n              }\n              .width('100%')\n              .height('100%')\n            }\n            .width('100%')\n            .height(80)\n            .borderRadius(10)\n            .backgroundColor('#00000000')\n            .onClick(async () => {\n              await this.avPlayer!.reset()\n              this.nowPlayingSong = song\n              this.nowPlayingLyrics = await getLyrics(song.id)\n              if (this.nowPlayingLyrics !== null) {\n                this.groupLyrics()\n              }\n              this.nowPlayingListOriginal = this.playlist!.entry!.slice()\n              if (this.playMode === AVSessionManager.LoopMode.LOOP_MODE_SHUFFLE) {\n                this.nowPlayingList = this.shuffleList(this.nowPlayingListOriginal.slice())\n              } else {\n                this.nowPlayingList = this.nowPlayingListOriginal.slice()\n              }\n              this.getNowPlayingIndex(song, this.nowPlayingList)\n              this.nowPlayingStar = await this.getStar(song)\n              this.isPlaying = true\n              this.avPlayer!.url = this.baseURL + '/rest/stream' + this.auth + `&id=${song.id}&format=raw`;\n              this.startPlaying = true\n            })\n            .gesture(\n              LongPressGesture()\n                .onAction(async (event: GestureEvent) => {\n                  this.longPressSong = song\n                  this.longPressStar = await this.getStar(song)\n                  this.longPressIndex = index\n                  this.showMenu = true\n                })\n            )\n          })\n        }\n      }\n      .width('100%')\n      .height('100%')\n      .padding({ bottom: this.startPlaying === true ? 85 : 0 })\n      .animation({ curve: curves.springMotion(0.6, 1) })\n      .scrollBar(BarState.Off)\n      .align(Alignment.Top)\n    }\n    .backgroundColor($r('app.color.content_background'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Playlists.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row() {\n        Image(\"\")\n        Text(\"歌单\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(60)\n      .backgroundColor($r('app.color.bar_background'))\n      .justifyContent(FlexAlign.Center)\n\n      Divider()\n        .width('90%')\n        .height(1)\n        .color($r('app.color.divider'))\n\n      List() {\n        ForEach(this.playlists, (playlist: Playlist, index) => {\n          ListItem() {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Text(playlist.name)\n                  .fontSize(19)\n                  .fontColor($r('app.color.font'))\n                  .maxLines(1)\n                  .textOverflow({ overflow: TextOverflow.Ellipsis })\n              }\n              .width('100%')\n              .height('100%')\n              .padding({ left: 20, right: 20 })\n            }\n            .width('100%')\n            .height(50)\n            .borderRadius(15)\n            .backgroundColor('#00000000')\n            .padding({ left: 20, right: 20 })\n            .onClick(() => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              this.playlist = playlist\n              this.pageStack.pushPathByName('PlaylistDetail', null);\n            })\n          }\n        })\n      }\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n      .listDirection(Axis.Vertical)\n      .scrollBar(BarState.Off)\n      .edgeEffect(EdgeEffect.Fade)\n      .visibility(this.playlists.length > 0 ? Visibility.Visible : Visibility.None)\n\n      Column() {\n        Text(\"没有歌单\")\n          .fontSize(19)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n      .justifyContent(FlexAlign.Center)\n      .visibility(this.playlists.length > 0 ? Visibility.None : Visibility.Visible)\n\n      Divider()\n        .width('90%')\n        .height(1)\n        .color($r('app.color.divider'))\n\n      Row() {\n        Button({type:ButtonType.Normal}) {\n          Text(\"新建\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n        }\n        .width('90%')\n        .height(50)\n        .borderRadius(15)\n        .backgroundColor($r('app.color.content_background'))\n        .onClick(() => {\n          animateTo({\n            duration: 300,\n            curve: Curve.EaseOut,\n          }, () => {\n            this.showSidebar = false\n          })\n          this.createPlaylist.open()\n        })\n      }\n      .width('100%')\n      .height(60)\n      .backgroundColor($r('app.color.bar_background'))\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Setting.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll() {\n      Column() {\n        Column() {\n          Text(\"服务器设置\")\n            .width('100%')\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n            .fontWeight(FontWeight.Bold)\n            .padding({ left: 20, right: 20 })\n            .margin({ top: 15 })\n            .textAlign(TextAlign.Center)\n          Row() {\n            Text(\"服务器\")\n              .width(60)\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n            TextInput({\n              placeholder: 'https://my.navidrome.com',\n              text: $$this.baseURL\n            })\n              .width(\"100%\")\n              .height(40)\n              .layoutWeight(1)\n              .borderRadius(15)\n              .margin({ left: 15 })\n              .caretColor($r('app.color.font_secondary'))\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .placeholderFont({\n                size: 20\n              })\n              .type(InputType.URL)\n              .enterKeyType(EnterKeyType.Next)\n          }\n          .width('100%')\n          .padding({ left: 20, right: 20 })\n          .margin({ top: 15 })\n\n          Row() {\n            Text(\"账号\")\n              .width(60)\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n            TextInput({\n              placeholder: 'Username',\n              text: $$this.username\n            })\n              .width(\"100%\")\n              .height(40)\n              .layoutWeight(1)\n              .borderRadius(15)\n              .margin({ left: 15 })\n              .caretColor($r('app.color.font_secondary'))\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .placeholderFont({\n                size: 20\n              })\n              .type(InputType.USER_NAME)\n              .enterKeyType(EnterKeyType.Next)\n          }\n          .width('100%')\n          .padding({ left: 20, right: 20 })\n          .margin({ top: 15 })\n\n          Row() {\n            Text(\"密码\")\n              .width(60)\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n            TextInput({\n              placeholder: 'Password',\n              text: $$this.password\n            })\n              .width(\"100%\")\n              .height(40)\n              .layoutWeight(1)\n              .borderRadius(15)\n              .margin({ left: 15 })\n              .caretColor($r('app.color.font_secondary'))\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .placeholderFont({\n                size: 20\n              })\n              .type(InputType.Password)\n              .enterKeyType(EnterKeyType.Next)\n          }\n          .width('100%')\n          .padding({ left: 20, right: 20 })\n          .margin({ top: 15, bottom: 20 })\n        }\n        .width('100%')\n        .backgroundColor($r('app.color.bar_background'))\n        .borderRadius(10)\n        .margin({ top: 10 })\n\n        Column() {\n          Text(\"播放设置\")\n            .width('100%')\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n            .fontWeight(FontWeight.Bold)\n            .padding({ left: 20, right: 20 })\n            .margin({ top: 15 })\n            .textAlign(TextAlign.Center)\n          Row() {\n            Text(\"统一音量\")\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n            Toggle({ type: ToggleType.Switch, isOn: $$this.audioNormalization })\n              .selectedColor($r('app.color.radio'))\n              .switchPointColor($r('app.color.font'))\n          }\n          .width('100%')\n          .margin({ top: 20, bottom: 20 })\n          .justifyContent(FlexAlign.SpaceBetween)\n\n          Row() {\n            Text(\"淡入淡出\")\n              .fontColor($r('app.color.font'))\n              .fontSize(20)\n              .maxLines(1)\n              .textOverflow({ overflow: TextOverflow.Ellipsis })\n            Toggle({ type: ToggleType.Switch, isOn: $$this.fadeVolume })\n              .selectedColor($r('app.color.radio'))\n              .switchPointColor($r('app.color.font'))\n          }\n          .width('100%')\n          .margin({ bottom: 20 })\n          .justifyContent(FlexAlign.SpaceBetween)\n        }\n        .width('100%')\n        .backgroundColor($r('app.color.bar_background'))\n        .borderRadius(10)\n        .padding({ left: 20, right: 20 })\n        .margin({ top: 20 })\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .padding({ left: 20, right: 20 })\n    .align(Alignment.Top)\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Songs.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack({ alignContent: Alignment.End }) {\n      List({ scroller: this.listScroller }) {\n        ForEach(this.songs, (song: Song, index) => {\n          ListItem() {\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                Image(this.baseURL + this.getCoverUrl + this.auth + `&id=${song.id}&size=${this.coverSize}`)\n                  .alt($rawfile('nocover.png'))\n                  .objectFit(ImageFit.Fill)\n                  .width(60)\n                  .aspectRatio(1)\n                  .borderRadius(5)\n                Column() {\n                  Text(song.title)\n                    .fontSize(18)\n                    .fontColor($r('app.color.font'))\n                    .maxLines(1)\n                    .textOverflow({ overflow: TextOverflow.Ellipsis })\n                  Text(song.artist + \" - \" + song.album)\n                    .fontSize(15)\n                    .fontColor($r('app.color.font_secondary'))\n                    .margin({ top: 5 })\n                    .maxLines(1)\n                    .textOverflow({ overflow: TextOverflow.Ellipsis })\n                }\n                .width('100%')\n                .layoutWeight(1)\n                .margin({ left: 10 })\n                .alignItems(HorizontalAlign.Start)\n              }\n              .width('100%')\n              .height('100%')\n              .padding({ right: 15 })\n            }\n            .width('100%')\n            .height(80)\n            .borderRadius(10)\n            .backgroundColor('#00000000')\n            .padding({ left: 20, right: 20 })\n            .margin({ bottom: this.startPlaying === true && index === this.songs.length - 1 ? 85 : 0 })\n            .animation({ curve: curves.springMotion(0.6, 1) })\n            .onClick(async () => {\n              animateTo({\n                duration: 300,\n                curve: Curve.EaseOut,\n              }, () => {\n                this.showSidebar = false\n              })\n              await this.avPlayer!.reset()\n              this.nowPlayingSong = song\n              this.nowPlayingLyrics = await getLyrics(song.id)\n              if (this.nowPlayingLyrics !== null) {\n                this.groupLyrics()\n              }\n              this.nowPlayingListOriginal = this.songs.slice()\n              if (this.playMode === AVSessionManager.LoopMode.LOOP_MODE_SHUFFLE) {\n                this.nowPlayingList = this.shuffleList(this.nowPlayingListOriginal.slice())\n              } else {\n                this.nowPlayingList = this.nowPlayingListOriginal.slice()\n              }\n              this.getNowPlayingIndex(song, this.nowPlayingList)\n              this.nowPlayingStar = await this.getStar(song)\n              this.isPlaying = true\n              this.avPlayer!.url = this.baseURL + '/rest/stream' + this.auth + `&id=${song.id}&format=raw`;\n              this.startPlaying = true\n            })\n            .gesture(\n              LongPressGesture()\n                .onAction(async (event: GestureEvent) => {\n                  this.longPressSong = song\n                  this.longPressStar = await this.getStar(song)\n                  this.showMenu = true\n                })\n            )\n          }\n        })\n      }\n      .width('100%')\n      .height('100%')\n      .listDirection(Axis.Vertical)\n      .scrollBar(BarState.Off)\n      .edgeEffect(EdgeEffect.Fade)\n      .visibility(this.songs.length > 0 ? Visibility.Visible : Visibility.None)\n      .onScrollIndex((firstIndex: number) => {\n        let initial = indexUtil.getIndex(this.songs[firstIndex].title);\n        if (initial === '…') {\n          this.selectedIndex = 0\n        } else {\n          for (let index = 0; index < indexList.length; index++) {\n            if (indexList[index] === initial) {\n              this.selectedIndex = index\n              break\n            }\n          }\n        }\n      })\n\n      Column() {\n        Text(\"没有歌曲\")\n          .fontSize(32)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height('100%')\n      .justifyContent(FlexAlign.Center)\n      .visibility(this.songs.length === 0 && this.serverStatus === true ? Visibility.Visible : Visibility.None)\n\n      AlphabetIndexer({ arrayValue: indexList, selected: 0 })\n        .selected(this.selectedIndex)\n        .color($r('app.color.font_secondary'))\n        .selectedColor($r('app.color.font'))\n        .selectedBackgroundColor($r('app.color.index'))\n        .itemSize(20)\n        .itemBorderRadius(20)\n        .font({\n          size: 12\n        })\n        .selectedFont({\n          size: 13\n        })\n        .margin({ right: 5 })\n        .visibility(this.songs.length > 0 ? Visibility.Visible : Visibility.None)\n        .onSelect((index: number) => {\n          if (index === 0) {\n            this.listScroller.scrollToIndex(0, false, ScrollAlign.START)\n          } else {\n            let find = false\n            while (index) {\n              for (let index2 = 0; index2 < this.songs.length; index2++) {\n                if (indexUtil.getIndex(this.songs[index2].title) === indexList[index]) {\n                  this.listScroller.scrollToIndex(index2, false, ScrollAlign.START)\n                  find = true\n                  break;\n                }\n              }\n              if (find === true) {\n                break\n              }\n              index--\n            }\n            if (find === false) {\n              this.listScroller.scrollToIndex(0, false, ScrollAlign.START)\n            }\n          }\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Stats.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Column() {\n        Row() {\n          Column() {\n            Text(this.songs.length.toString())\n              .fontSize(28)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n            Text(\"歌曲\")\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n              .margin({ top: 5 })\n          }\n\n          Column() {\n            Text(this.albums.length.toString())\n              .fontSize(28)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n            Text(\"专辑\")\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n              .margin({ top: 5 })\n          }\n\n          Column() {\n            Text(this.artists.length.toString())\n              .fontSize(28)\n              .fontColor($r('app.color.font'))\n              .fontWeight(FontWeight.Bold)\n            Text(\"艺术家\")\n              .fontSize(20)\n              .fontColor($r('app.color.font'))\n              .margin({ top: 5 })\n          }\n        }\n        .width('100%')\n        .height('auto')\n        .padding(20)\n        .justifyContent(FlexAlign.SpaceBetween)\n      }\n      .width('100%')\n      .backgroundColor($r('app.color.bar_background'))\n      .borderRadius(10)\n      .margin({ top: 10 })\n      .padding(20)\n    }\n    .width('100%')\n    .height('100%')\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\dialogs\\CreatePlaylist.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text(\"新建歌单\")\n        .width('100%')\n        .height(60)\n        .textAlign(TextAlign.Center)\n        .fontSize(20)\n        .fontColor($r('app.color.font'))\n        .fontWeight(FontWeight.Bold)\n\n      Row() {\n        Text(\"名称\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n        TextInput({\n          placeholder: '歌单名称',\n          text: $$this.name\n        })\n          .width(\"100%\")\n          .height(40)\n          .layoutWeight(1)\n          .borderRadius(15)\n          .margin({ left: 15 })\n          .caretColor($r('app.color.font_secondary'))\n          .fontColor($r('app.color.font'))\n          .fontSize(20)\n          .placeholderFont({\n            size: 20\n          })\n          .enterKeyType(EnterKeyType.Next)\n      }\n      .width('100%')\n      .margin({ bottom: 20 })\n\n      Row() {\n        Text(\"注释\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n          .margin({ top: 5 })\n        TextArea({\n          placeholder: '歌单注释',\n          text: $$this.comment\n        })\n          .width(\"100%\")\n          .height(100)\n          .layoutWeight(1)\n          .borderRadius(15)\n          .margin({ left: 15 })\n          .caretColor($r('app.color.font_secondary'))\n          .fontColor($r('app.color.font'))\n          .fontSize(20)\n          .placeholderFont({\n            size: 20\n          })\n          .enterKeyType(EnterKeyType.Next)\n      }\n      .width('100%')\n      .margin({ bottom: 20 })\n      .alignItems(VerticalAlign.Top)\n\n      Button({ type: ButtonType.Normal }) {\n        Text(\"确认\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height(50)\n      .borderRadius(15)\n      .backgroundColor($r('app.color.content_background'))\n      .onClick(async () => {\n        if(this.name!==''){\n          this.createPlaylist.close()\n          let success = await createPlaylist(this.name, this.comment)\n          if (success === true) {\n            promptAction.showToast({\n              message: '新建成功！',\n              duration: 500\n            });\n            this.playlists = (await getPlaylists()).sort((a, b) => {\n              return Date.parse(b.changed) - Date.parse(a.changed);\n            })\n          } else {\n            promptAction.showToast({\n              message: '新建失败，请检查网络！',\n              duration: 500\n            });\n          }\n        }else{\n          promptAction.showToast({\n            message: '歌单名称不能为空！',\n            duration: 500\n          });\n        }\n      })\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('app.color.bar_background'))\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\dialogs\\EditPlaylist.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text(\"编辑歌单\")\n        .width('100%')\n        .height(60)\n        .textAlign(TextAlign.Center)\n        .fontSize(20)\n        .fontColor($r('app.color.font'))\n        .fontWeight(FontWeight.Bold)\n\n      Row() {\n        Text(\"名称\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n        TextInput({\n          placeholder: '歌单名称',\n          text: $$this.name\n        })\n          .width(\"100%\")\n          .height(40)\n          .layoutWeight(1)\n          .borderRadius(15)\n          .margin({ left: 15 })\n          .caretColor($r('app.color.font_secondary'))\n          .fontColor($r('app.color.font'))\n          .fontSize(20)\n          .placeholderFont({\n            size: 20\n          })\n          .enterKeyType(EnterKeyType.Next)\n      }\n      .width('100%')\n      .margin({ bottom: 20 })\n\n      Row() {\n        Text(\"注释\")\n          .fontSize(20)\n          .fontColor($r('app.color.font'))\n          .margin({ top: 5 })\n        TextArea({\n          placeholder: '歌单注释',\n          text: $$this.comment\n        })\n          .width(\"100%\")\n          .height(100)\n          .layoutWeight(1)\n          .borderRadius(15)\n          .margin({ left: 15 })\n          .caretColor($r('app.color.font_secondary'))\n          .fontColor($r('app.color.font'))\n          .fontSize(20)\n          .placeholderFont({\n            size: 20\n          })\n          .enterKeyType(EnterKeyType.Next)\n      }\n      .width('100%')\n      .margin({ bottom: 20 })\n      .alignItems(VerticalAlign.Top)\n\n      Row() {\n        Button({ type: ButtonType.Normal }) {\n          Text(\"确认\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n        }\n        .width('47%')\n        .height(50)\n        .borderRadius(15)\n        .backgroundColor($r('app.color.content_background'))\n        .onClick(async () => {\n          this.editPlaylist.close()\n          let success = await updatePlaylist(this.playlist!.id, this.name, this.comment)\n          if (success === true) {\n            promptAction.showToast({\n              message: '修改成功！',\n              duration: 500\n            });\n            this.playlist = await getPlaylist(this.playlist!.id)\n            this.playlists = (await getPlaylists()).sort((a, b) => {\n              return Date.parse(b.changed) - Date.parse(a.changed);\n            })\n          } else {\n            promptAction.showToast({\n              message: '修改失败，请检查网络！',\n              duration: 500\n            });\n          }\n        })\n\n        Button({ type: ButtonType.Normal }) {\n          Text(\"删除\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n        }\n        .width('47%')\n        .height(50)\n        .borderRadius(15)\n        .backgroundColor(Color.Red)\n        .onClick(async () => {\n          this.editPlaylist.close()\n          let success = await deletePlaylist(this.playlist!.id)\n          if (success === true) {\n            promptAction.showToast({\n              message: '删除成功！',\n              duration: 500\n            });\n            this.playlists = (await getPlaylists()).sort((a, b) => {\n              return Date.parse(b.changed) - Date.parse(a.changed);\n            })\n            this.pageStack.pop()\n          } else {\n            promptAction.showToast({\n              message: '删除失败，请检查网络！',\n              duration: 500\n            });\n          }\n        })\n      }\n      .width('100%')\n      .justifyContent(FlexAlign.SpaceBetween)\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('app.color.bar_background'))\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\dialogs\\Info.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text(\"歌曲信息\")\n        .width('100%')\n        .textAlign(TextAlign.Start)\n        .fontSize(20)\n        .fontColor($r('app.color.font'))\n        .fontWeight(FontWeight.Bold)\n        .margin({ top: 20, bottom: 10 })\n\n      Row() {\n        Text(\"标题\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? this.nowPlayingSong!.title : this.longPressSong!.title)\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n\n      Row() {\n        Text(\"专辑\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? this.nowPlayingSong!.album : this.longPressSong!.album)\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n\n      Row() {\n        Text(\"艺术家\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? this.nowPlayingSong!.artist : this.longPressSong!.artist)\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n\n      Row() {\n        Text(\"时长\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? formatDuration(this.nowPlayingSong!.duration) :\n        formatDuration(this.longPressSong!.duration))\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n\n      Row() {\n        Text(\"大小\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? bytesToMB(this.nowPlayingSong!.size)+\" MB\" :\n        bytesToMB(this.longPressSong!.size)+\" MB\")\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n\n      Row() {\n        Text(\"格式\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? this.nowPlayingSong!.suffix.toUpperCase() : this.longPressSong!.suffix.toUpperCase())\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n\n      Row() {\n        Text(\"比特率\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? this.nowPlayingSong!.bitRate + \" kbps\" : this.longPressSong!.bitRate + \" kbps\")\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n\n      Row() {\n        Text(\"声道\")\n          .fontSize(18)\n          .fontColor($r('app.color.font'))\n        Text(this.showPlay === true ? this.nowPlayingSong!.channelCount.toString() :\n        this.longPressSong!.channelCount.toString())\n          .fontSize(18)\n          .fontColor($r('app.color.font_secondary'))\n          .width('100%')\n          .layoutWeight(1)\n          .margin({ left: 15 })\n          .textAlign(TextAlign.End)\n          .maxLines(1)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n      }\n      .width('100%')\n      .height(35)\n      .justifyContent(FlexAlign.SpaceBetween)\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('app.color.bar_background'))\n    .padding({ left: 20, right: 20 })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\dialogs\\SelectPlaylist.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Text(\"添加到歌单\")\n        .width('100%')\n        .height(60)\n        .textAlign(TextAlign.Center)\n        .fontSize(20)\n        .fontColor($r('app.color.font'))\n        .fontWeight(FontWeight.Bold)\n\n      Divider()\n        .width('90%')\n        .height(1)\n        .color($r('app.color.divider'))\n\n      List() {\n        ForEach(this.playlists, (playlist: Playlist, index) => {\n          ListItem() {\n            Row() {\n              Text(playlist.name)\n                .width('100%')\n                .layoutWeight(1)\n                .fontSize(20)\n                .margin({ right: 15 })\n                .fontColor($r('app.color.font'))\n                .maxLines(1)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n              Radio({ value: playlist.id, group: playlist.id })\n                .width(22)\n                .checked(this.selectedPlaylists[index])\n                .radioStyle({\n                  checkedBackgroundColor: $r('app.color.radio')\n                })\n                .onClick(() => {\n                  this.selectedPlaylists[index] = !this.selectedPlaylists[index]\n                })\n            }\n            .width('100%')\n            .height(50)\n            .borderRadius(10)\n            .padding({ left: 20, right: 15 })\n            .justifyContent(FlexAlign.SpaceBetween)\n          }\n        })\n      }\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n      .listDirection(Axis.Vertical)\n      .scrollBar(BarState.Off)\n      .edgeEffect(EdgeEffect.Fade)\n      .visibility(this.playlists.length > 0 ? Visibility.Visible : Visibility.None)\n\n      Column() {\n        Text(\"没有歌单\")\n          .fontSize(19)\n          .fontColor($r('app.color.font'))\n      }\n      .width('100%')\n      .height('100%')\n      .layoutWeight(1)\n      .justifyContent(FlexAlign.Center)\n      .visibility(this.playlists.length > 0 ? Visibility.None : Visibility.Visible)\n\n      Divider()\n        .width('90%')\n        .height(1)\n        .color($r('app.color.divider'))\n\n      Row() {\n        Button({ type: ButtonType.Normal }) {\n          Text(\"确认\")\n            .fontSize(20)\n            .fontColor($r('app.color.font'))\n        }\n        .width('90%')\n        .height(50)\n        .borderRadius(15)\n        .backgroundColor($r('app.color.content_background'))\n        .onClick(async () => {\n          this.selectPlaylist.close()\n          let success: boolean = true\n          for (let index = 0; index < this.selectedPlaylists.length; index++) {\n            if (this.selectedPlaylists[index] === true) {\n              let tmp: boolean = await updatePlaylist(this.playlists[index].id, undefined, undefined,\n                this.showPlay === true ? this.nowPlayingSong!.id : this.longPressSong!.id)\n              if (tmp === false) {\n                success = false\n              }\n            }\n          }\n          if (success === true) {\n            promptAction.showToast({\n              message: '添加成功！',\n              duration: 500\n            });\n          } else {\n            promptAction.showToast({\n              message: '部分添加失败，请检查网络！',\n              duration: 500\n            });\n          }\n          if (this.playlist !== null) {\n            this.playlist = await getPlaylist(this.playlist!.id)\n          }\n          this.playlists = (await getPlaylists()).sort((a, b) => {\n            return Date.parse(b.changed) - Date.parse(a.changed);\n          })\n        })\n      }\n      .width('100%')\n      .height(60)\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('app.color.bar_background'))\n  }"
        }
    ]
}