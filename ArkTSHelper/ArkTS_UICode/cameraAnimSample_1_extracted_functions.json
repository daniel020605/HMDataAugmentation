{
    "entry\\src\\main\\ets\\component\\FlashingLightComponent.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n      Row() {\n        Button() {\n          Image(this.flashIconResource)\n            .width($r('app.string.200px'))\n            .height($r('app.string.200px'))\n            .fillColor($r('app.color.white'))\n        }\n        .width($r('app.string.200px'))\n        .height($r('app.string.200px'))\n        .backgroundColor($r('app.color.flash_background_color'))\n        .borderRadius($r('app.string.50px'))\n        .onClick(() => {\n          this.flashMode = (this.flashMode + 1) % 4;\n          Logger.info(TAG, `flashMode: ${this.flashMode}`);\n          CameraService.hasFlashFn(this.flashMode);\n        })\n      }\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\FocusAreaComponent.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Row() {\n    }\n    .width(this.xComponentWidth)\n    .height(this.xComponentHeight)\n    .opacity(1)\n    .onTouch((e: TouchEvent) => {\n      if (e.type === TouchType.Down) {\n        this.focusPointBol = true;\n        this.focusPointVal[0] = e.touches[0].windowX;\n        this.focusPointVal[1] = e.touches[0].windowY;\n        // 归一化焦点。 设置的焦点与相机sensor角度和窗口方向有关（相机sensor角度可通过CameraDevice的cameraOrientation属性获取）\n        // 下面焦点是以竖屏窗口，相机sensor角度为90度场景下的焦点设置\n        CameraService.setFocusPoint({\n          x: e.touches[0].y / this.xComponentHeight,\n          y: 1 - (e.touches[0].x / this.xComponentWidth)\n        });\n      }\n      if (e.type === TouchType.Up) {\n        if (this.areaTimer) {\n          clearTimeout(this.areaTimer);\n        }\n        this.areaTimer = setTimeout(() => {\n          this.focusPointBol = false;\n        }, this.focusFrameDisplayDuration);\n      }\n    })\n    .onClick((event: ClickEvent) => {\n      Logger.info(TAG, 'onClick is called');\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\FocusComponent.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    if (this.focusPointBol) {\n      Row() {\n        // 对焦框\n        Flex({ direction: FlexDirection.Column, justifyContent: FlexAlign.SpaceBetween }) {\n          Flex({ justifyContent: FlexAlign.SpaceBetween }) {\n            Row() {\n            }\n            .border({\n              width: {\n                left: this.mBorderWidth,\n                top: this.mBorderWidth\n              },\n              color: Color.White,\n              radius: { topLeft: this.mBorderRadius }\n            })\n            .size({ width: this.mRowSize, height: this.mRowSize })\n\n            Row() {\n            }\n            .border({\n              width: {\n                right: this.mBorderWidth,\n                top: this.mBorderWidth\n              },\n              color: Color.White,\n              radius: { topRight: this.mBorderRadius }\n            })\n            .size({ width: this.mRowSize, height: this.mRowSize })\n          }\n\n          Flex({ justifyContent: FlexAlign.SpaceBetween }) {\n            Row() {\n            }\n            .border({\n              width: {\n                left: this.mBorderWidth,\n                bottom: this.mBorderWidth\n              },\n              color: Color.White,\n              radius: { bottomLeft: this.mBorderRadius }\n            })\n            .size({ width: this.mRowSize, height: this.mRowSize })\n\n            Row() {\n            }\n            .border({\n              width: {\n                right: this.mBorderWidth,\n                bottom: this.mBorderWidth\n              },\n              color: Color.White,\n              radius: { bottomRight: this.mBorderRadius }\n            })\n            .size({ width: this.mRowSize, height: this.mRowSize })\n          }\n        }\n        .width(this.focusFrameSize)\n        .height(this.focusFrameSize)\n        .position({\n          x: this.focusPointVal[0] - this.mFocusPoint,\n          y: this.focusPointVal[1] - this.mFocusPoint\n        })\n      }\n      .zIndex(1)\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\ModeComponent.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Row({ space: Constants.COLUMN_SPACE_24 }) {\n        Column() {\n          Text('拍照')\n            .fontSize(Constants.FONT_SIZE_14)\n            .fontColor(Color.White)\n        }\n        .width(Constants.CAPTURE_COLUMN_WIDTH)\n        .backgroundColor(this.sceneMode === camera.SceneMode.NORMAL_PHOTO ? $r('app.color.theme_color') : '')\n        .borderRadius(Constants.BORDER_RADIUS_14)\n        .onClick(async () => {\n          if (this.sceneMode === camera.SceneMode.NORMAL_PHOTO) {\n            return;\n          }\n          this.sceneMode = camera.SceneMode.NORMAL_PHOTO;\n          CameraService.setSceneMode(this.sceneMode);\n          let cameraDeviceIndex = GlobalContext.get().getT<number>('cameraDeviceIndex');\n          let surfaceId = GlobalContext.get().getT<string>('xComponentSurfaceId');\n          Logger.info(TAG, 'surface shot E');\n          await BlurAnimateUtil.doSurfaceShot(surfaceId);\n          Logger.info(TAG, 'surface shot X');\n          AppStorage.setOrCreate('modeChange', ++this.modeChangeFlag);\n          Logger.info(TAG, 'switch to photo E');\n          await CameraService.initCamera(surfaceId, cameraDeviceIndex);\n          Logger.info(TAG, 'switch to photo X');\n        })\n\n        // 录像\n        Column() {\n          Text('录像')\n            .fontSize(Constants.FONT_SIZE_14)\n            .fontColor(Color.White)\n        }\n        .width(Constants.CAPTURE_COLUMN_WIDTH)\n        .backgroundColor(this.sceneMode === camera.SceneMode.NORMAL_VIDEO ? $r('app.color.theme_color') : '')\n        .borderRadius(Constants.BORDER_RADIUS_14)\n        .onClick(async () => {\n          if (this.sceneMode === camera.SceneMode.NORMAL_VIDEO) {\n            return;\n          }\n          this.sceneMode = camera.SceneMode.NORMAL_VIDEO;\n          CameraService.setSceneMode(this.sceneMode);\n          let cameraDeviceIndex = GlobalContext.get().getT<number>('cameraDeviceIndex');\n          let surfaceId = GlobalContext.get().getT<string>('xComponentSurfaceId');\n          Logger.info(TAG, 'surface shot E');\n          await BlurAnimateUtil.doSurfaceShot(surfaceId);\n          Logger.info(TAG, 'surface shot X');\n          AppStorage.setOrCreate('modeChange', ++this.modeChangeFlag);\n          Logger.info(TAG, 'switch to video E');\n          await CameraService.initCamera(surfaceId, cameraDeviceIndex);\n          Logger.info(TAG, 'switch to video X');\n        })\n      }\n      .height(Constants.CAPTURE_ROW_HEIGHT)\n      .width(Constants.FULL_PERCENT)\n      .justifyContent(FlexAlign.Center)\n      .alignItems(VerticalAlign.Center)\n\n      Row() {\n        Column() {\n        }\n        .width($r('app.string.200px'))\n\n        // 拍照-录像 按键\n        Column() {\n          if (!this.isRecording) {\n            Row() {\n              Button() {\n                Text()\n                  .width($r('app.string.120px'))\n                  .height($r('app.string.120px'))\n                  .borderRadius($r('app.string.40px'))\n                  .backgroundColor(this.sceneMode === camera.SceneMode.NORMAL_VIDEO ?\n                    $r('app.color.theme_color') : Color.White)\n              }\n              .border({\n                width: Constants.CAPTURE_BUTTON_BORDER_WIDTH,\n                color: $r('app.color.border_color'),\n                radius: Constants.CAPTURE_BUTTON_BORDER_RADIUS\n              })\n              .width($r('app.string.200px'))\n              .height($r('app.string.200px'))\n              .backgroundColor(Color.Black)\n              .onClick(async () => {\n                if (this.sceneMode === camera.SceneMode.NORMAL_PHOTO) {\n                  Logger.info('capture onClick');\n                  AppStorage.setOrCreate('captureClick', ++this.captureClickFlag);\n                  await CameraService.takePicture();\n                } else {\n                  await CameraService.startVideo();\n                  this.isRecording = true;\n                }\n              })\n            }\n          } else {\n            Row() {\n              // 录像停止键\n              Button() {\n                Image($r('app.media.ic_camera_video_close'))\n                  .size({ width: Constants.IMAGE_SIZE, height: Constants.IMAGE_SIZE })\n              }\n              .width($r('app.string.120px'))\n              .height($r('app.string.120px'))\n              .backgroundColor($r('app.color.theme_color'))\n              .onClick(() => {\n                this.isRecording = !this.isRecording;\n                CameraService.stopVideo().then(() => {\n                  this.isOpenEditPage = true;\n                  Logger.info(TAG, 'stopVideo success');\n                })\n              })\n            }\n            .width($r('app.string.200px'))\n            .height($r('app.string.200px'))\n            .borderRadius($r('app.string.60px'))\n            .backgroundColor($r('app.color.theme_color'))\n            .justifyContent(FlexAlign.SpaceAround)\n          }\n        }\n\n        // 前后置摄像头切换\n        Column() {\n          Row() {\n            Button() {\n              Image($r('app.media.switch_camera'))\n                .width($r('app.string.120px'))\n                .height($r('app.string.120px'))\n            }\n            .width($r('app.string.200px'))\n            .height($r('app.string.200px'))\n            .backgroundColor($r('app.color.flash_background_color'))\n            .borderRadius($r('app.string.40px'))\n            .onClick(async () => {\n              let cameraDeviceIndex = GlobalContext.get().getT<number>('cameraDeviceIndex');\n              let surfaceId = GlobalContext.get().getT<string>('xComponentSurfaceId');\n              cameraDeviceIndex ? cameraDeviceIndex = 0 : cameraDeviceIndex = 1;\n              GlobalContext.get().setObject('cameraDeviceIndex', cameraDeviceIndex);\n              AppStorage.setOrCreate('curPosition', cameraDeviceIndex);\n              Logger.info(TAG, 'surface shot E');\n              await BlurAnimateUtil.doSurfaceShot(surfaceId);\n              Logger.info(TAG, 'surface shot X');\n              AppStorage.setOrCreate('switchCamera', ++this.switchCameraFlag);\n              await CameraService.initCamera(surfaceId, cameraDeviceIndex);\n            })\n          }\n        }\n        .visibility(this.isRecording ? Visibility.Hidden : Visibility.Visible)\n      }\n      .padding({\n        left: Constants.CAPTURE_BUTTON_COLUMN_PADDING,\n        right: Constants.CAPTURE_BUTTON_COLUMN_PADDING\n      })\n      .width(Constants.FULL_PERCENT)\n      .justifyContent(FlexAlign.SpaceBetween)\n      .alignItems(VerticalAlign.Center)\n    }\n    .justifyContent(FlexAlign.End)\n    .height(Constants.TEN_PERCENT)\n    .padding({\n      left: Constants.CAPTURE_BUTTON_COLUMN_PADDING,\n      right: Constants.CAPTURE_BUTTON_COLUMN_PADDING\n    })\n    .margin({ bottom: Constants.CAPTURE_BUTTON_COLUMN_MARGIN })\n    .position({\n      x: Constants.ZERO_PERCENT,\n      y: Constants.EIGHTY_FIVE_PERCENT\n    })\n  }"
        }
    ],
    "entry\\src\\main\\ets\\component\\SlideComponent.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    if (this.sliderValue) {\n      Column() {\n        Row() {\n          Text(this.zoomRatio + this.xString)\n            .fontColor($r('app.color.slide_text_font_color'))\n            .width($r('app.string.120px'))\n            .height($r('app.string.50px'))\n            .borderRadius(Constants.TEXT_BORDER_RADIUS)\n            .backgroundColor(Color.White)\n            .fontSize(Constants.FONT_SIZE_14)\n            .textAlign(TextAlign.Center)\n        }\n        .justifyContent(FlexAlign.Center)\n        .width(Constants.FULL_PERCENT)\n\n        Row() {\n          Text(this.sliderValue?.min + this.xString).fontColor(Color.White)\n          Text(this.sliderValue?.max + this.xString).fontColor(Color.White)\n        }\n        .justifyContent(FlexAlign.SpaceBetween).width(Constants.FULL_PERCENT)\n\n        Row() {\n          Slider({\n            value: this.zoomRatio,\n            min: this.sliderValue?.min,\n            max: this.sliderValue?.max,\n            step: this.sliderValue?.step,\n            style: SliderStyle.OutSet\n          })\n            .showSteps(false)\n            .trackColor($r('app.color.slider_track_color'))\n            .selectedColor($r('app.color.theme_color'))\n            .onChange((value: number) => {\n              Logger.info(TAG, 'onChange');\n              let val = Number(value.toFixed(this.fractionDigits));\n              this.slideChange(val);\n              this.zoomRatio = val;\n            })\n        }\n        .width(Constants.FULL_PERCENT)\n      }\n      .height($r('app.string.60px'))\n      .width(Constants.FORTY_PERCENT)\n      .position({\n        x: Constants.THIRTY_PERCENT,\n        y: Constants.SEVENTY_FIVE_PERCENT\n      })\n    }\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\EditPage.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Column() {\n      Column() {\n        Image($r('app.media.ic_public_back'))\n          .objectFit(ImageFit.Fill)\n          .onClick(() => {\n            Logger.info(TAG, 'back onClick');\n            // delete video file when router back\n            fileIo.unlink(this.videoUri);\n            router.back();\n          })\n          .width(Constants.BACK_ICON_SIZE)\n          .height(Constants.BACK_ICON_SIZE)\n      }\n      .padding({ left: Constants.BACK_ICON_MARGIN })\n      .width(Constants.FULL_PERCENT)\n      .layoutWeight(this.backIconLayoutWeight)\n      .alignItems(HorizontalAlign.Start)\n      .justifyContent(FlexAlign.Center)\n\n      Column() {\n        if (this.sceneMode === camera.SceneMode.NORMAL_PHOTO) {\n          Image(this.curPixelMap)\n            .objectFit(ImageFit.Contain)\n            .width(Constants.FULL_PERCENT)\n            .height(Constants.EIGHTY_PERCENT)\n        } else if (this.sceneMode === camera.SceneMode.NORMAL_VIDEO) {\n          Video({\n            src: this.videoUri,\n            controller: this.videoController\n          })\n            .width(Constants.FULL_PERCENT)\n            .height(Constants.EIGHTY_PERCENT)\n            .controls(this.controls)\n            .objectFit(ImageFit.Contain)\n            .onClick(() => {\n              if (this.controls) {\n                this.videoController?.start();\n              } else {\n                this.videoController?.stop();\n              }\n              this.controls = !this.controls;\n            })\n            .onFinish(() => {\n              this.controls = true;\n            })\n        }\n      }\n      .width(Constants.FULL_PERCENT)\n      .layoutWeight(this.textLayoutWeight)\n    }\n    .width(Constants.FULL_PERCENT)\n    .height(Constants.FULL_PERCENT)\n    .backgroundColor($r('app.color.dialog_background_color'))\n  }"
        }
    ],
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      if (this.isShow) {\n        XComponent({\n          id: 'componentId',\n          type: 'surface',\n          controller: this.mXComponentController\n        })\n          .onLoad(async () => {\n            Logger.info(TAG, 'onLoad is called');\n            this.surfaceId = this.mXComponentController.getXComponentSurfaceId();\n            GlobalContext.get().setObject('cameraDeviceIndex', this.defaultCameraDeviceIndex);\n            GlobalContext.get().setObject('xComponentSurfaceId', this.surfaceId);\n            let surfaceRect: SurfaceRect = {\n              surfaceWidth: Constants.X_COMPONENT_SURFACE_HEIGHT,\n              surfaceHeight: Constants.X_COMPONENT_SURFACE_WIDTH\n            };\n            this.mXComponentController.setXComponentSurfaceRect(surfaceRect);\n            Logger.info(TAG, `onLoad surfaceId: ${this.surfaceId}`);\n            await CameraService.initCamera(this.surfaceId, this.defaultCameraDeviceIndex);\n          })// The width and height of the surface are opposite to those of the Xcomponent.\n          .width(px2vp(Constants.X_COMPONENT_SURFACE_HEIGHT))\n          .height(px2vp(Constants.X_COMPONENT_SURFACE_WIDTH))\n      }\n\n      // 拍照闪黑及前后置切换时显示，用来遮挡XComponent组件\n      if (this.isShowBlack) {\n        Column()\n          .key('black')\n          .width(px2vp(Constants.X_COMPONENT_SURFACE_HEIGHT))\n          .height(px2vp(Constants.X_COMPONENT_SURFACE_WIDTH))\n          .backgroundColor(Color.Black)\n          .opacity(this.flashBlackOpacity)\n      }\n\n\n      if (this.isShowBlur) {\n        Column() {\n          Image(this.screenshotPixelMap)\n            .blur(this.shotImgBlur)\n            .opacity(this.shotImgOpacity)\n            .rotate(this.shotImgRotation)// ArkUI提供的旋转，用于组件沿指定坐标系进行旋转\n            .scale(this.shotImgScale)\n            .width(px2vp(Constants.X_COMPONENT_SURFACE_HEIGHT))\n            .height(px2vp(Constants.X_COMPONENT_SURFACE_WIDTH))\n            .syncLoad(true)\n        }\n        .width(px2vp(Constants.X_COMPONENT_SURFACE_HEIGHT))\n        .height(px2vp(Constants.X_COMPONENT_SURFACE_WIDTH))\n      }\n\n      // 曝光框和对焦框\n      FocusComponent({\n        focusPointBol: $focusPointBol,\n        focusPointVal: $focusPointVal\n      })\n\n      // 曝光对焦手指点击区域\n      FocusAreaComponent({\n        focusPointBol: $focusPointBol,\n        focusPointVal: $focusPointVal,\n        xComponentWidth: px2vp(Constants.X_COMPONENT_SURFACE_HEIGHT),\n        xComponentHeight: px2vp(Constants.X_COMPONENT_SURFACE_WIDTH)\n      })\n\n      SlideComponent()\n\n      // 拍照\n      ModeComponent()\n\n      Row({ space: Constants.ROW_SPACE_24 }) {\n        // 闪光灯\n        FlashingLightComponent({\n          flashMode: $flashMode\n        })\n      }\n      .margin({ left: Constants.CAPTURE_BUTTON_COLUMN_MARGIN })\n      .alignItems(VerticalAlign.Top)\n      .justifyContent(FlexAlign.Start)\n      .position({\n        x: Constants.FLASH_POSITION_X,\n        y: Constants.FLASH_POSITION_Y\n      })\n    }\n    .size({\n      width: Constants.FULL_PERCENT,\n      height: Constants.FULL_PERCENT\n    })\n    .backgroundColor(Color.Black)\n  }"
        }
    ]
}