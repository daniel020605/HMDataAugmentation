{
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Scroll(this.scroller) {\n      Column() {\n\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n\n\n        Text($r('app.string.Click_test'))\n          .fontSize(30)\n          .fontWeight(FontWeight.Bold)\n          .padding(8)\n          .border({ width: 2, color: '#535353', radius: 6 })\n          .onClick(() => {\n            try {\n\n              tb('220983929785.7', '48833897223529771949253.378778868849049559624562513592321569', 1, 4);\n              tb('1180052939140.7', '1392524939174533146207410.12619352287', 1, 4);\n              tb('120468836204612.6', '14512740496493785900839846763.82328768609126547', 1, 4);\n              tb('76418328144.477890944', '5839760876397101738682.29836547353', 10, 4);\n              tb('263359760985014.62241224437474495709', '69358363706084030080212405554.3002793975414740876419285502', 20, 4);\n              tb('492974271191746.46231483998877250102', '243023632057033585989741137703.800100153395469328387', 20, 4);\n              tb('23762326490698.34975320239967323205', '564648160250544549780100380.5514166040523', 20, 4);\n              tb('316358493873927157.1740897995245240711', '100082696646179606634487051294887359.5035240594546', 20, 4);\n              tb('19107253881509743.3779260316306131671181869224843248420235662435238492667857670998535738552', '365087150892469154433642273521263.83276841', 73, 4);\n              tb('20416269776260474006.927083982432268806569265768750039002235065141713481228428261', '416824071577046905366185925400975939799.8', 60, 1);\n              tb('907424493602245756936.066129375330541537462629768', '823419211589292150660922033473258691103594.23268549807171826865266573694', 27, 0);\n              tb('74542661576900.1739714442102128431140459355738187797819043083309413315', '5556608394968269531202589612.9', 55, 2);\n              tb('92093628036.6480124503328403126750210810151658188780763586760022178450462311', '8481236324952480852423.718960437545027', 64, 1);\n              tb('3.3219621290607638259315016171393711588977731624802456157919679857160686287774881e+24', '11035432386913922898118885283020330437836330418535.765864', 55, 5);\n              tb('374863740368.0156985152529892838083189109926642299794', '140522823842699082383715.919571886197001394994582', 40, 4);\n              tb('23603002885797536.790280728725364655699852314300322649', '557101745226966849549415425061219.969394346783798760227', 36, 1);\n              tb('247788926631.668855265587728589', '61399352161274570866824.398764295216033428917127', 18, 1);\n              tb('57915787478641.83665522345250623634912714466', '3354238439271206551123435622.197210160416', 29, 1);\n              tb('744842151657434987604.2791022189701', '554789830885677382051879929528491741366735.693239816410110026056705884', 13, 3);\n              tb('4.544263396953483598942089836714002627162343460178e+26', '206503298208912140516268973108976781377094781756302253.10316325966', 22, 3);\n              tb('2.0019209241842586055583598727675929480248543e+39', '4007687386686756091822637898553155471331634538521264108680442236674656851419653.351763057', 4, 4);\n              tb('6.576613095964895855186161492615465e+30', '43251839814016972458988090681594663492334963080297610004985253.9613', 3, 3);\n              tb('6.07284120868169228806782907964188066871171e+34', '3687940034586251730077294264351100568013474596967205874685411761358250.20335920865', 7, 0);\n              tb('45974968665.29964986693286971876228807290133907777', '2113697743775284668710.510', 38, 6);\n              tb('9.39851185518650310576202501936615855344549247e+23', '883320250920812443260322053150977725907138537017.6109350', 21, 6);\n              tb('3.07926577824804164817768119357737974040003e+37', '948187773308951760156602418478473823522730515817565059043672065724339252452.6444', 4, 2);\n              tb('2.611751832666679532237559742004135839298e+31', '682124763543775920380116102948198971902395978922979169982661154.965777107019', 8, 0);\n              tb('2.355735861300212899781981274e+21', '5549491448215855908992552523083142006504786.98270', 6, 5);\n              tb('2.148665877305983003246901853661043e+30', '4616765052299089605130822036135055816921350866756700565077388.7685983542855487709', 3, 4);\n              tb('9679153997438690735.573001818', '93686022106133386382529030832963639287.904519199', 9, 6);\n              tb('8.0002250603549316133021057523452459826997456e+29', '640036010163310691747774480314864168983618826504059678896941.563828701', 14, 2);\n              tb('5013216366623851214.1896508660273321751', '25132338338585248190238248636234491768.941684121900', 19, 6);\n              tb('2.769026363487970868792191331612149e+26', '76675070016914161693612991003380354517429223150278706.17849523', 7, 6);\n              tb('2.423119730416880716999556301580963194716353e+22', '587150922793557668101013208341938836941193210.8', 20, 4);\n              tb('37838002948618379.82724648128060201962219175', '1431714467139653206157054572446837.45539086584', 26, 5);\n              tb('1336693769272.52325053384226966971097495236409237893207026280721123585', '1786750232811985622866694.6930741720574199999999999999', 56, 1);\n              tb('24311351864975.074869841182393118014836563', '591041829502627051005856744.915583060322969111', 27, 3);\n              tb('42984058671789597132.7221112172629645', '1847629299899850465200384668635639967676.41', 16, 3);\n              tb('571382471180033.53319393302415277060828996943848848613781018317122334349', '326477928371801851150832020172.11648736659691111111111', 56, 6);\n              tb('18354976800132.7205784689505763982983253834776256454914296697190444244517734', '336905173333410406277377949.452223919511111111111111111111', 61, 0);\n              tb('24590607446647400780.287370661652288997152', '604697974595110599812980781794694145333.72111111111', 21, 1);\n              tb('2263343854329.638037260235405086446634', '5122725402931741767463814.840999999', 24, 4);\n              tb('218875865535828595.704079834928718536449349620686728272', '47906644514058120040043799772367208.9448736248559332241111111111111', 36, 1);\n              tb('63216259733951.59', '3996295494750428253401001163.9486336398226471847', 2, 0);\n              AlertDialog.show({ title: 'squareRoot test success',\n                message: '',\n                confirm: { value: 'OK', action: () => {\n                } }\n              })\n            } catch (err) {\n              console.log('errerr ' + err)\n              AlertDialog.show({ title: 'squareRoot test fail',\n                message: err,\n                confirm: { value: 'OK', action: () => {\n                } }\n              })\n            }\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number') })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathatanSignum = value\n          })\n\n        Text('absoluteValue test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathSignum = new BigNumber(this.mathatanSignum).abs().toString()\n              let time1 = Date.now()\n              this.mathTimeSignum = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text( getContext().resourceManager.getStringByNameSync('Result')  + this.mathSignum)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeSignum)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathatanSignum1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathatanSignum2 = value\n          })\n\n        Text('comparedTo test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathposSignum = new BigNumber(this.mathatanSignum1).comparedTo(this.mathatanSignum2)\n              let time1 = Date.now()\n              this.mathTimeSignum1 = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n        Text(getContext().resourceManager.getStringByNameSync('Result') + this.mathposSignum)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeSignum1)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathUnaryMinus1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathUnaryMinus2 = value\n          })\n\n        Text('decimalPlaces test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathUnaryMinus = new BigNumber(this.mathUnaryMinus1).decimalPlaces(Number(this.mathUnaryMinus2)).toString()\n              let time1 = Date.now()\n              this.mathTimeUnaryMinus = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathUnaryMinus)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time') + this.mathTimeUnaryMinus)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathTan1 = value\n          })\n\n        TextInput({ placeholder:$r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathTan2 = value\n          })\n\n        Text('dividedBy test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathTan =  new BigNumber(this.mathTan1).dividedBy(this.mathTan2).toString()\n              let time1 = Date.now()\n              this.mathTimeTan = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathTan)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeTan)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathSubtract1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathSubtract2 = value\n          })\n\n        Text('subtract test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathSubtract =new BigNumber(this.mathSubtract1).dividedToIntegerBy(this.mathSubtract2).toString()\n              let time1 = Date.now()\n              this.mathTimeSubtract = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathSubtract)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeSubtract)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number') })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathSqrt1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathSqrt2 = value\n          })\n\n        Text('pow test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathSqrt =new BigNumber(this.mathSqrt1).pow(this.mathSqrt2).toString()\n              let time1 = Date.now()\n              this.mathTimeSqrt = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathSqrt)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeSqrt)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathSin1 = value\n          })\n\n        Text('integerValue test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathSin =  new BigNumber(this.mathSin1).integerValue().toString()\n              let time1 = Date.now()\n              this.mathTimeSin = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathSin)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeSin)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder:$r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathRound1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathRound2 = value\n          })\n\n        Text('isEqualTo test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathRound = new BigNumber(this.mathRound1).eq(this.mathRound2)\n              let time1 = Date.now()\n              this.mathTimeRound = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathRound)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeRound)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathRightArithShift1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathRightArithShift2 = value\n          })\n\n        Text('isGreaterThan test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathRightArithShift =  new BigNumber(this.mathRightArithShift1).isGreaterThan(this.mathRightArithShift2)\n              let time1 = Date.now()\n              this.mathTimeRightArithShift = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')   + this.mathRightArithShift)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeRightArithShift)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathRadix1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathRadix2 = Number(value)\n          })\n\n        Text('isLessThan test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathRadix = new BigNumber(this.mathRadix1).isLessThan(this.mathRadix2)\n              let time1 = Date.now()\n              this.mathTimeRadix = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathRadix)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeRadix)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder:$r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathMultiply1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathMultiply2 = value\n          })\n\n        Text('minus test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathMultiply = new BigNumber(this.mathMultiply1).minus(this.mathMultiply2).toString()\n              let time1 = Date.now()\n              this.mathTimeMultiply = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result') + this.mathMultiply)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeMultiply)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder:$r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathMin1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathMin2 = value\n          })\n\n        Text('modulo test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathMin = new BigNumber(this.mathMin1).modulo(this.mathMin2).toString()\n              let time1 = Date.now()\n              this.mathTimeMin = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathMin)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeMin)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathMax1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathMax2 = value\n          })\n\n        Text('multipliedBy test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathMax = new BigNumber(this.mathMax1).multipliedBy(this.mathMax2).toString()\n              let time1 = Date.now()\n              this.mathTimeMax = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathMax)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeMax)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathLongValue1 = value\n          })\n\n        Text('negated test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathLongValue = new BigNumber(this.mathLongValue1).negated().toString()\n              let time1 = Date.now()\n              this.mathTimeLongValue = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathLongValue)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeLongValue)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number') })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathLog1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number') })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathLog2 = value\n          })\n\n        Text('plus test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathLog = new BigNumber(this.mathLog1).plus(this.mathLog2).toString()\n              let time1 = Date.now()\n              this.mathTimeLog = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathLog)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeLog)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathLeftShift1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathLeftShift2 = value\n          })\n\n        Text('shiftedBy test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathLeftShift = new BigNumber(this.mathLeftShift1).shiftedBy(Number(this.mathLeftShift2)).toString()\n              let time1 = Date.now()\n              this.mathTimeLeftShift = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathLeftShift)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeLeftShift)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder:$r('app.string.Input_Any_Number') })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathIntValue1 = value\n          })\n\n        Text('squareRoot test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathIntValue = new BigNumber(this.mathIntValue1).squareRoot().toString()\n              let time1 = Date.now()\n              this.mathTimeIntValue = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathIntValue)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeIntValue)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number') })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathFormat1 = value\n          })\n\n        Text('toExponential test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathFormat = new BigNumber(this.mathFormat1).toExponential()\n              let time1 = Date.now()\n              this.mathTimeFormat = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathFormat)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeFormat)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathExp1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathExp2 = value\n          })\n\n        Text('toFraction test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathExp = new BigNumber(this.mathExp1).toFraction(this.mathExp2).toString()\n              let time1 = Date.now()\n              this.mathTimeExp = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathExp)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeExp)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathDivide1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathDivide2 = value\n          })\n\n        Text('divide test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathDivide = new BigNumber(this.mathDivide1).toPrecision(Number(this.mathDivide2))\n              let time1 = Date.now()\n              this.mathTimeDivide = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathDivide)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeDivide)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number') })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathCos1 = value\n          })\n\n        Text('isZero test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathCos = new BigNumber(this.mathCos1).isZero()\n              let time1 = Date.now()\n              this.mathTimeCos = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathCos)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time') + this.mathTimeCos)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathCompare1 = value\n          })\n\n        TextInput({ placeholder:$r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathCompare2 = value\n          })\n\n        Text('precision test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathCompare = new BigNumber(this.mathCompare1).precision(Number(this.mathCompare2)).toString()\n              let time1 = Date.now()\n              this.mathTimeCompare = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathCompare)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeCompare)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathByteValue1 = value\n          })\n\n        Text('isPositive test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathByteValue = new BigNumber(this.mathByteValue1).isPositive()\n              let time1 = Date.now()\n              this.mathTimeByteValue = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathByteValue)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeByteValue)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathAtan1 = value\n          })\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathAtan2 = value\n          })\n\n        Text('isLessThan test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathAtan = new BigNumber(this.mathAtan1).isLessThan(this.mathAtan2)\n              let time1 = Date.now()\n              this.mathTimeAtan = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathAtan)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeAtan)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        TextInput({ placeholder: $r('app.string.Input_Any_Number')  })\n          .caretColor(Color.Blue)\n          .height(50)\n          .fontSize(30)\n          .onChange((value: string) => {\n            this.mathAsin1 = value\n          })\n\n        Text('isNegative test')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            try {\n              let time = Date.now()\n              this.mathAsin = new BigNumber(this.mathAsin1).isNegative()\n              let time1 = Date.now()\n              this.mathTimeAsin = (time1 - time).toString()\n            } catch (err) {\n              console.log('errerr ' + err)\n            }\n          })\n\n        Text(getContext().resourceManager.getStringByNameSync('Result')  + this.mathAsin)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n        Text(getContext().resourceManager.getStringByNameSync('Time')  + this.mathTimeAsin)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n\n      }\n      .width('100%')\n    }\n    .scrollable(ScrollDirection.Vertical)\n    .scrollBar(BarState.On)\n    .scrollBarColor(Color.Gray)\n    .scrollBarWidth(30)\n    .onScroll((xOffset: number, yOffset: number) => {\n      console.info(xOffset + ' ' + yOffset)\n    })\n    .onScrollEdge((side: Edge) => {\n      console.info('To the edge')\n    })\n    .onScrollEnd(() => {\n      console.info('Scroll Stop')\n    })\n  }"
        }
    ]
}