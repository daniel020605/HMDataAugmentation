{
    "entry\\src\\main\\ets\\pages\\Index.ets": [
        {
            "function_name": "build",
            "content": "build() {\n    Stack() {\n      Scroll() {\n        Flex() {\n          Column() {\n            Text(this.title)\n              .fontSize(16)\n              .fontWeight(FontWeight.Bold)\n              .fontColor(Color.Grey)\n\n            Text(this.fps)\n              .fontSize(16)\n              .fontWeight(FontWeight.Bold)\n              .fontColor(Color.Grey)\n\n            Text(\"Tests\")\n              .fontSize(16)\n              .fontWeight(FontWeight.Bold)\n              .fontColor(Color.Grey)\n\n            Select(this.selectArr)\n              .space(8)\n              .selected(this.index)\n              .value(this.selectArr[this.index].value)\n              .font({ size: 20, weight: 200, family: 'serif', style: FontStyle.Normal })\n              .selectedOptionFont({ size: 30, weight: 300, family: 'serif', style: FontStyle.Normal })\n              .optionFont({ size: 20, weight: 200, family: 'serif', style: FontStyle.Normal })\n              .onSelect((index: number) => {\n                this.index = index;\n                if (this.app) {\n                  this.app.m_test_index = index;\n                  this.app.LoadTest();\n                }\n              })\n\n            this.connect_number_input(\"Vel Iters\", this.m_settings.velocityIterations, (value: number): void => {\n              this.m_settings.velocityIterations = value;\n            }, 1, 20, 1);\n            this.connect_number_input(\"Pos Iters\", this.m_settings.positionIterations, (value: number): void => {\n              this.m_settings.positionIterations = value;\n            }, 1, 20, 1);\n            // #if B2_ENABLE_PARTICLE\n            this.connect_number_input(\"Pcl Iters\", this.m_settings.particleIterations, (value: number): void => {\n              this.m_settings.particleIterations = value;\n            }, 1, 100, 1);\n            // #endif\n            this.connect_number_input(\"Hertz\", this.m_settings.hz, (value: number): void => {\n              this.m_settings.hz = value;\n            }, 10, 120, 1);\n\n\n            this.connect_checkbox_input(\"Sleep\", this.m_settings.enableSleep, (value: boolean): void => {\n              this.m_settings.enableSleep = value;\n            });\n            this.connect_checkbox_input(\"Warm Starting\", this.m_settings.enableWarmStarting, (value: boolean): void => {\n              this.m_settings.enableWarmStarting = value;\n            });\n            this.connect_checkbox_input(\"Time of Impact\", this.m_settings.enableContinuous, (value: boolean): void => {\n              this.m_settings.enableContinuous = value;\n            });\n            this.connect_checkbox_input(\"Sub-Stepping\", this.m_settings.enableSubStepping, (value: boolean): void => {\n              this.m_settings.enableSubStepping = value;\n            });\n            // #if B2_ENABLE_PARTICLE\n            this.connect_checkbox_input(\"Strict Particle/Body Contacts\", this.m_settings.strictContacts, (value: boolean): void => {\n              this.m_settings.strictContacts = value;\n            });\n            //    // #endif\n\n            Text(\"Draw\")\n              .fontSize(16)\n              .fontWeight(FontWeight.Bold)\n              .fontColor(Color.Grey)\n\n            this.connect_checkbox_input(\"Shapes\", this.m_settings.drawShapes, (value: boolean): void => {\n              this.m_settings.drawShapes = value;\n            });\n            // #if B2_ENABLE_PARTICLE\n            this.connect_checkbox_input(\"Particles\", this.m_settings.drawParticles, (value: boolean): void => {\n              this.m_settings.drawParticles = value;\n            });\n            // #endif\n            this.connect_checkbox_input(\"Joints\", this.m_settings.drawJoints, (value: boolean): void => {\n              this.m_settings.drawJoints = value;\n            });\n            this.connect_checkbox_input(\"AABBs\", this.m_settings.drawAABBs, (value: boolean): void => {\n              this.m_settings.drawAABBs = value;\n            });\n            this.connect_checkbox_input(\"Contact Points\", this.m_settings.drawContactPoints, (value: boolean): void => {\n              this.m_settings.drawContactPoints = value;\n            });\n            this.connect_checkbox_input(\"Contact Normals\", this.m_settings.drawContactNormals, (value: boolean): void => {\n              this.m_settings.drawContactNormals = value;\n            });\n            this.connect_checkbox_input(\"Contact Impulses\", this.m_settings.drawContactImpulse, (value: boolean): void => {\n              this.m_settings.drawContactImpulse = value;\n            });\n            this.connect_checkbox_input(\"Friction Impulses\", this.m_settings.drawFrictionImpulse, (value: boolean): void => {\n              this.m_settings.drawFrictionImpulse = value;\n            });\n            this.connect_checkbox_input(\"Center of Masses\", this.m_settings.drawCOMs, (value: boolean): void => {\n              this.m_settings.drawCOMs = value;\n            });\n            this.connect_checkbox_input(\"Statistics\", this.m_settings.drawStats, (value: boolean): void => {\n              this.m_settings.drawStats = value;\n            });\n            this.connect_checkbox_input(\"Profile\", this.m_settings.drawProfile, (value: boolean): void => {\n              this.m_settings.drawProfile = value;\n            });\n\n\n            this.connect_button_input(\"Pause (P)\", (e: ClickEvent\n            ): void => {\n              this.app.Pause();\n            });\n            this.connect_button_input(\"Single Step (O)\", (e: ClickEvent\n            ): void => {\n              this.app.SingleStep();\n            });\n            this.connect_button_input(\"Restart (R)\", (e: ClickEvent\n            ): void => {\n              this.app.LoadTest();\n            });\n            this.connect_button_input(\"Demo\", (e: ClickEvent\n            ): void => {\n              this.app.ToggleDemo();\n            });\n          }\n          .width('100%')\n        }\n\n      }.zIndex(this.controlZindex)\n      .visibility(this.visibile)\n\n      Flex() {\n        Canvas(this.context)\n          .width('100%')\n          .height('100%')\n          .backgroundColor('#ffff00')\n          .onReady(() => {\n            this.isLoad = true\n          })\n      }\n      .width('100%')\n      .height('100%')\n      .position({ x: 0, y: 0 })\n      .zIndex(this.canvasZindex)\n      .onClick((event: ClickEvent) => {\n\n      })\n      .onHover((isHover: boolean) => {\n\n      })\n      .onMouse((e: MouseEvent) => {\n        switch (e.action) {\n          case MouseAction.Press:\n            this.app.HandleMouseDown(e);\n            break;\n          case MouseAction.Release:\n            this.app.HandleMouseUp(e);\n            break;\n          case MouseAction.Move:\n            this.app.HandleMouseMove(e);\n            break;\n          case MouseAction.Hover:\n            this.app.HandleMouseWheel(e)\n            break;\n        }\n      })\n      .onTouch((e: TouchEvent) => {\n        switch (e.type) {\n          case TouchType.Down:\n            this.app.HandleTouchStart(e);\n            break;\n          case TouchType.Up:\n            this.app.HandleTouchEnd(e);\n            break;\n          case TouchType.Move:\n            this.app.HandleTouchMove(e);\n            break;\n          case TouchType.Cancel:\n            break;\n        }\n      })\n\n      Flex() {\n        Button($r('app.string.switch_layer'))\n          .fontColor(Color.White)\n          .margin({ left: '10', top: '10' })\n          .padding({ left: 20, right: 20, bottom: 10, top: 10 })\n          .fontSize(this.commonFontSize)\n          .onClick((event: ClickEvent) => {\n            this.zindexRevers = !this.zindexRevers;\n            if (!this.zindexRevers) {\n              this.controlZindex = 99;\n              this.canvasZindex = 1;\n              this.visibile = Visibility.Visible;\n            } else {\n              this.controlZindex = 1;\n              this.canvasZindex = 99;\n              this.visibile = Visibility.None;\n            }\n\n          });\n      }.width(\"30%\")\n      .position({ x: -10, y: 70 })\n      .zIndex(999)\n\n    }.onKeyEvent((e: KeyEvent) => {\n      switch (e.type) {\n        case KeyType.Down:\n          this.app.HandleKeyDown(e);\n          break;\n        case KeyType.Up:\n          this.app.HandleKeyUp(e);\n          break;\n      }\n    })\n\n  }"
        }
    ]
}