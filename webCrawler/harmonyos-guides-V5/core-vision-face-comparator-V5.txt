人脸比对
适用场景
输入的两张比对图片是同一个人的照片时，可以看见其比对结果为同一个人，置信分数比较高；当两张比对图片不是同一个人的照片时，可以看见其比对结果为非同一个人，置信分数很低。可以用于APP中需要用到人脸比对功能的场景，比如娱乐类APP中比较两个人的相似度，与明星的相似度等等。
约束与限制
该能力当前不支持模拟器。
开发步骤
 在使用人脸比对时，将实现人脸比对相关的类添加至工程。import { faceComparator } from '@kit.CoreVisionKit';  简单配置页面的布局，并在Button组件添加点击事件，拉起图库，选择图片。Button('选择图片')\n  .type(ButtonType.Capsule)\n  .fontColor(Color.White)\n  .alignSelf(ItemAlign.Center)\n  .width('80%')\n  .margin(10)\n  .onClick(() => {\n    // 拉起图库，获取图片资源\n    this.selectImage();\n  })  通过图库获取图片资源，将图片转换为PixelMap，并添加初始化和释放方法。async aboutToAppear(): Promise<void> {\n  const initResult = await faceComparator.init();\n  hilog.info(0x0000, TAG, `Face comparator initialization result:${initResult}`);\n}\n\nasync aboutToDisappear(): Promise<void> {\n  await faceComparator.release();\n  hilog.info(0x0000, TAG, 'Face comparator released successfully');\n}\n\nprivate async selectImage() {\n  let uri = await this.openPhoto()\n  if (uri === undefined) {\n    hilog.error(0x0000, 'faceCompare', \"Failed to get two image uris.\");\n  }\n  this.loadImage(uri);\n}\n\nprivate openPhoto(): Promise<string[]> {\n  return new Promise<string[]>((resolve, reject) => {\n    let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n    photoPicker.select({\n      MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\n      maxSelectNumber: 2\n    }).then(res => {\n      resolve(res.photoUris);\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, TAG, `Failed to get photo image uris. code: ${err.code}, message: ${err.message}`);\n      reject();\n    });\n  });\n}\n\nprivate loadImage(names: string[]) {\n  setTimeout(async () => {\n    let imageSource: image.ImageSource | undefined = undefined;\n    let fileSource = await fileIo.open(names[0], fileIo.OpenMode.READ_ONLY);\n    imageSource = image.createImageSource(fileSource.fd);\n    this.chooseImage = await imageSource.createPixelMap();\n    fileSource = await fileIo.open(names[1], fileIo.OpenMode.READ_ONLY);\n    imageSource = image.createImageSource(fileSource.fd);\n    this.chooseImage1 = await imageSource.createPixelMap();\n    hilog.info(0x0000, 'faceCompare', 'this.chooseImage:', this.chooseImage, 'this.chooseImage1:', this.chooseImage1);\n  }, 100\n  )\n}  实现人脸比对功能。实例化VisionInfo对象，传入两张图片的PixelMap，调用faceComparator.compareFaces方法进行人脸比对。// 调用人脸比对接口\nlet visionInfo: faceComparator.VisionInfo = {\n  pixelMap: this.chooseImage,\n};\nlet visionInfo1: faceComparator.VisionInfo = {\n  pixelMap: this.chooseImage1,\n};\nlet data:faceComparator.FaceCompareResult = await faceComparator.compareFaces(visionInfo, visionInfo1);  （可选）如果需要将结果展示在界面上，可以用下列代码。let data:faceComparator.FaceCompareResult = await faceComparator.compareFaces(visionInfo, visionInfo1);\nlet faceString = \"degree of similarity：\"+ this.toPercentage(data.similarity)+((data.isSamePerson)?\". is\":\". no\")+ \" same person\";\nhilog.info(0x0000, 'testTag', \"faceString data is \" + faceString);\nthis.dataValues = faceString;  
开发实例
import { faceComparator } from '@kit.CoreVisionKit';\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo } from '@kit.CoreFileKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\n\nconst TAG: string = \"FaceCompareSample\";\n\n@Entry\n@Component\nstruct Index {\n  @State chooseImage: PixelMap | undefined = undefined\n  @State chooseImage1: PixelMap | undefined = undefined\n  @State dataValues: string = ''\n\n  async aboutToAppear(): Promise<void> {\n    const initResult = await faceComparator.init();\n    hilog.info(0x0000, TAG, `Face comparator initialization result:${initResult}`);\n  }\n\n  async aboutToDisappear(): Promise<void> {\n    await faceComparator.release();\n    hilog.info(0x0000, TAG, 'Face comparator released successfully');\n  }\n\n  build() {\n    Column() {\n      Image(this.chooseImage)\n        .objectFit(ImageFit.Fill)\n        .height('30%')\n        .accessibilityDescription(\"默认图片1\")\n      Image(this.chooseImage1)\n        .objectFit(ImageFit.Fill)\n        .height('30%')\n        .accessibilityDescription(\"默认图片2\")\n      Text(this.dataValues)\n        .copyOption(CopyOptions.LocalDevice)\n        .height('15%')\n        .margin(10)\n        .width('60%')\n      Button('选择图片')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          // 拉起图库\n          this.selectImage()\n        })\n      Button('人脸比对')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          if(!this.chooseImage || !this.chooseImage1) {\n            hilog.error(0x0000, TAG, \"Failed to choose image\");\n            return;\n          }\n          // 调用人脸比对接口\n          let visionInfo: faceComparator.VisionInfo = {\n            pixelMap: this.chooseImage,\n          };\n          let visionInfo1: faceComparator.VisionInfo = {\n            pixelMap: this.chooseImage1,\n          };\n          faceComparator.compareFaces(visionInfo, visionInfo1)\n            .then((data: faceComparator.FaceCompareResult) => {\n              let faceString = \"degree of similarity：\"+ this.toPercentage(data.similarity)+((data.isSamePerson)?\". is\":\". no\")+ \" same person\";\n              hilog.info(0x0000, TAG, \"faceString data is \" + faceString);\n              this.dataValues = faceString;\n            })\n            .catch((error: BusinessError) => {\n              hilog.error(0x0000, TAG, `Face comparison failed. Code: ${error.code}, message: ${error.message}`);\n              this.dataValues = `Error: ${error.message}`;\n            });\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  private toPercentage(num: number): string {\n    return `${(num * 100).toFixed(2)}%`;\n  }\n\n  private async selectImage() {\n    let uri = await this.openPhoto()\n    if (uri === undefined) {\n      hilog.error(0x0000, TAG, \"Failed to get two image uris.\");\n    }\n    this.loadImage(uri);\n  }\n\n  private openPhoto(): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n      photoPicker.select({\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\n        maxSelectNumber: 2\n      }).then(res => {\n        resolve(res.photoUris);\n      }).catch((err: BusinessError) => {\n        hilog.error(0x0000, TAG, `Failed to get photo image uris. code: ${err.code}, message: ${err.message}`);\n        reject();\n      });\n    });\n  }\n\n  private loadImage(names: string[]) {\n    setTimeout(async () => {\n      let imageSource: image.ImageSource | undefined = undefined;\n      let fileSource = await fileIo.open(names[0], fileIo.OpenMode.READ_ONLY);\n      imageSource = image.createImageSource(fileSource.fd);\n      this.chooseImage = await imageSource.createPixelMap();\n      fileSource = await fileIo.open(names[1], fileIo.OpenMode.READ_ONLY);\n      imageSource = image.createImageSource(fileSource.fd);\n      this.chooseImage1 = await imageSource.createPixelMap();\n      hilog.info(0x0000, TAG, 'this.chooseImage:', this.chooseImage, 'this.chooseImage1:', this.chooseImage1);\n    }, 100\n    )\n  }\n}
