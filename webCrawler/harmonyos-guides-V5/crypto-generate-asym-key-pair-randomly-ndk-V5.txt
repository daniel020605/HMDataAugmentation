随机生成非对称密钥对(C/C++)
以RSA和SM2为例，随机生成非对称密钥对（OH_CryptoKeyPair），并获得二进制数据。
非对称密钥对可用于后续加解密等操作，二进制数据可用于存储或运输。
在CMake脚本中链接相关动态库
   target_link_libraries(entry PUBLIC libohcrypto.so)
随机生成RSA密钥对
对应的算法规格请查看非对称密钥生成和转换规格：RSA。
 调用OH_CryptoAsymKeyGenerator_Create，指定字符串参数'RSA1024|PRIMES_2'，创建RSA密钥类型为RSA1024、素数个数为2的非对称密钥生成器（OH_CryptoAsymKeyGenerator）。 调用OH_CryptoAsymKeyGenerator_Generate，随机生成非对称密钥对象（OH_CryptoKeyPair）。 调用OH_CryptoPubKey_Encode获取公钥密钥对象的二进制数据。 
#include \"CryptoArchitectureKit/crypto_common.h\"\n#include \"CryptoArchitectureKit/crypto_asym_key.h\"\n\nstatic OH_Crypto_ErrCode randomGenerateAsymKey()\n{\n    OH_CryptoAsymKeyGenerator *ctx = nullptr;\n    OH_CryptoKeyPair *keyPair = nullptr;\n    OH_Crypto_ErrCode ret;\n\n    ret = OH_CryptoAsymKeyGenerator_Create(\"RSA1024|PRIMES_2\", &ctx);\n    if (ret != CRYPTO_SUCCESS) {\n        OH_CryptoAsymKeyGenerator_Destroy(ctx);\n        return ret;\n    }\n\n\n    ret = OH_CryptoAsymKeyGenerator_Generate(ctx, &keyPair);\n    if (ret != CRYPTO_SUCCESS) {\n        OH_CryptoAsymKeyGenerator_Destroy(ctx);\n        OH_CryptoKeyPair_Destroy(keyPair);\n        return ret;\n    }\n\n    OH_CryptoPubKey *pubKey = OH_CryptoKeyPair_GetPubKey(keyPair);\n    Crypto_DataBlob retBlob = { .data = nullptr, .len = 0 };\n    ret = OH_CryptoPubKey_Encode(pubKey, CRYPTO_PEM, \"PKCS1\", &retBlob);\n    if (ret != CRYPTO_SUCCESS) {\n        OH_CryptoAsymKeyGenerator_Destroy(ctx);\n        OH_CryptoKeyPair_Destroy(keyPair);\n        return ret;\n    }\n\n    OH_Crypto_FreeDataBlob(&retBlob);\n\n    OH_CryptoAsymKeyGenerator_Destroy(ctx);\n    OH_CryptoKeyPair_Destroy(keyPair);\n    return ret;\n}
随机生成SM2密钥对
对应的算法规格请查看非对称密钥生成和转换规格：SM2。
 调用OH_CryptoAsymKeyGenerator_Create，指定字符串参数'SM2_256'，创建密钥算法为SM2、密钥长度为256位的非对称密钥生成器（OH_CryptoAsymKeyGenerator）。 调用OH_CryptoAsymKeyGenerator_Generate，随机生成非对称密钥对象（OH_CryptoKeyPair）。 调用OH_CryptoPubKey_Encode获取公钥密钥对象的二进制数据。 
#include \"CryptoArchitectureKit/crypto_common.h\"\n#include \"CryptoArchitectureKit/crypto_asym_key.h\"\n\nstatic OH_Crypto_ErrCode randomGenerateRSA()\n{\n    OH_CryptoAsymKeyGenerator *ctx = nullptr;\n    OH_CryptoKeyPair *dupKeyPair = nullptr;\n    OH_Crypto_ErrCode ret;\n\n    ret = OH_CryptoAsymKeyGenerator_Create(\"SM2_256\", &ctx);\n    if (ret != CRYPTO_SUCCESS) {\n        OH_CryptoAsymKeyGenerator_Destroy(ctx);\n        return ret;\n    }\n\n    ret = OH_CryptoAsymKeyGenerator_Generate(ctx, &dupKeyPair);\n    if (ret != CRYPTO_SUCCESS) {\n        OH_CryptoAsymKeyGenerator_Destroy(ctx);\n        OH_CryptoKeyPair_Destroy(dupKeyPair);\n        return ret;\n    }\n\n    OH_CryptoPubKey *pubKey = OH_CryptoKeyPair_GetPubKey(dupKeyPair);\n    Crypto_DataBlob retBlob = { .data = nullptr, .len = 0 };\n    ret = OH_CryptoPubKey_Encode(pubKey, CRYPTO_DER, nullptr, &retBlob);\n    if (ret != CRYPTO_SUCCESS) {\n        OH_CryptoAsymKeyGenerator_Destroy(ctx);\n        OH_CryptoKeyPair_Destroy(dupKeyPair);\n        return ret;\n    }\n\n    OH_CryptoAsymKeyGenerator_Destroy(ctx);\n    OH_CryptoKeyPair_Destroy(dupKeyPair);\n    return ret;\n}
