订阅和处理用户信息变更
概述
通过订阅用户信息变更，您可以接收有关用户及其账户的重要更新。当用户取消应用的授权信息、注销华为账号时，华为账号服务器会发送通知到应用服务器，应用服务器可以根据通知消息进行自身业务处理。
用户信息变更事件介绍
事件类型
事件描述
https://schemas.openid.net/secevent/oauth/event-type/tokens-revoked
用户取消应用的授权信息
https://schemas.openid.net/secevent/risc/event-type/account-purged
用户注销华为账号
订阅用户信息变更
登录华为开发者联盟，选择“管理中心  > API服务 > API库”。在App Services找到RISC。 点击启用按钮，选择您的项目，点击确定。 点击订阅通知按钮，在弹窗中配置回调地址及订阅范围。 回调地址：在开启订阅通知后，若华为用户信息存在变更，会通过发送消息到该地址。 订阅范围：订阅的用户信息变更事件，详见用户信息变更事件介绍。   
处理通知消息
华为账号服务器向开发者应用服务器投递消息。开发者应用服务器接收到消息后需要先对消息头中的令牌进行验签，确保消息的完整有效性后解析并获取用户信息变更事件详情。具体步骤如下：
验证消息头中的令牌签名。您可通过任何JWT库（例如：jwt.io）对其进行验证与解码。 无论使用哪种库，您均需完成如下操作： 调用接口（https://risc.cloud.huawei.com/v1beta/public/risc/.well-known/risc-configuration），获取发行者标识（issuer）与签名密钥证书URI（jwks_uri）。通过依赖的JWT库，对消息头中的令牌进行进行解析，获取签名的KeyId。通过签名的KeyId，从签名密钥证书URI中获取到JWT签名的公钥。校验JWT签名中的aud与订阅用户信息变更中提供的应用ID一致。校验JWT签名中的issuer与发行者标识（issuer）一致。 具体验签逻辑，请参考如下示例代码： Maven依赖配置<dependencies>\n   <dependency>\n      <groupId>com.google.guava</groupId>\n      <artifactId>guava</artifactId>\n      <version>32.1.1-jre</version> <!--此处替换为您项目需要的版本-->\n   </dependency>\n   <dependency>   \n      <groupId>com.auth0</groupId> \n      <artifactId>jwks-rsa</artifactId>\n      <version>0.21.2</version> <!--此处替换为您项目需要的版本-->\n   </dependency>\n   <dependency>\n      <groupId>io.jsonwebtoken</groupId>\n      <artifactId>jjwt-impl</artifactId>\n      <version>0.11.5</version> <!--此处替换为您项目需要的版本-->\n   </dependency>\n   <dependency\n      <groupId>io.jsonwebtoken</groupId>\n      <artifactId>jjwt-jackson</artifactId>\n      <version>0.11.5</version> <!--此处替换为您项目需要的版本-->\n   </dependency>\n</dependencies>  Java验签代码示例 import com.auth0.jwk.JwkProvider;\nimport com.auth0.jwk.UrlJwkProvider;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.cache.CacheLoader;\nimport com.google.common.cache.LoadingCache;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Header;\nimport io.jsonwebtoken.IncorrectClaimException;\nimport io.jsonwebtoken.JwsHeader;\nimport io.jsonwebtoken.Jwt;\nimport io.jsonwebtoken.JwtParser;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SigningKeyResolver;\nimport io.jsonwebtoken.security.SignatureException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.Key;\nimport java.security.PublicKey;\nimport java.util.Objects;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport javax.annotation.Nonnull;\n\npublic class RiscDemo {\n\n    public static void main(String[] args) {\n        // 消息请求头中Authorization: Bearer <token>中的<token>\n        String token = \"<token>\";\n        // 应用ID\n        String clientId = \"<应用ID>\";\n        Jwt<?, Object> jwt = validateSecurityEventToken(token, clientId);\n        if (Objects.isNull(jwt)) {\n            // 验签失败，应用进行自己逻辑处理\n        } else {\n            // 验签成功，应用进行自己逻辑处理\n        }\n    }\n\n    /**\n     * 对Authorization头域中的token进行验签\n     *\n     * @param token 消息请求头中Authorization: Bearer <token>中的<token>\n     * @param clientId 应用ID\n     *\n     * @return 返回为null，则表示验签失败，否则表示验证成功\n     */\n    public static <H extends Header<H>, B> Jwt<H, B> validateSecurityEventToken(String token, String clientId) {\n        Jwt<H, B> jwt = null;\n        try {\n            /**\n             * 公开配置信息地址：https://risc.cloud.huawei.com/v1beta/public/risc/.well-known/risc-configuration\n             * 公开配置信息中的issuer值\n             */\n            String issuer = \"id.cloud.huawei.com\";\n            // 公开配置信息中的jwks_uri值\n            String jwksUri = \"https://risc.cloud.huawei.com/v1beta/public/risc/certs\";\n            // 获取公钥信息\n            JwkProvider huaweiCerts = new UrlJwkProvider(new URL(jwksUri), null, null);\n            LoadingCache<String, PublicKey> cache = CacheBuilder.newBuilder()\n                .expireAfterWrite(1, TimeUnit.DAYS)\n                .build(new CacheLoader<String, PublicKey>() {\n                    @Override\n                    @Nonnull\n                    public PublicKey load(@Nonnull String key) throws Exception {\n                        return huaweiCerts.get(key).getPublicKey();\n                    }\n                });\n            SigningKeyResolver signingKeyResolver = new SigningKeyResolver() {\n                private PublicKey getPublicKey(JwsHeader<?> jwsHeader) {\n                    try {\n                        return cache.get(jwsHeader.getKeyId());\n                    } catch (ExecutionException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n                @Override\n                public Key resolveSigningKey(JwsHeader jwsHeader, Claims claims) {\n                    return getPublicKey(jwsHeader);\n                }\n                @Override\n                public Key resolveSigningKey(JwsHeader jwsHeader, String s) {\n                    return getPublicKey(jwsHeader);\n                }\n            };\n            // 验证并解析消息内容\n            JwtParser parser = Jwts.parserBuilder()\n                .requireIssuer(issuer)\n                .requireAudience(clientId)\n                .setAllowedClockSkewSeconds(60)\n                .setSigningKeyResolver(signingKeyResolver)\n                .build();\n            jwt = parser.parse(token);\n        } catch (IncorrectClaimException e) {\n            // 消息的claim无效，应用针对异常进行处理（如：日志记录）\n            e.printStackTrace();\n        } catch (SignatureException e) {\n            // 验签失败，应用针对异常进行处理（如：日志记录）\n            e.printStackTrace();\n        } catch (MalformedURLException e) {\n            // 无效的jwksUri，检查传入的jwksUri是否与https://risc.cloud.huawei.com/v1beta/public/risc/.well-known/risc-configuration返回jwks_uri一致\n            e.printStackTrace();\n        } catch (Exception e) {\n            // 其他异常，业务自行处理\n            e.printStackTrace();\n        }\n        return jwt;\n    }\n} 处理消息体。消息体格式如下： {\n  \"aud\": \"<开发者应用ID>\",\n  \"iss\": \"id.cloud.huawei.com\",\n  \"iat\": 1727619834,\n  \"jti\": \"<唯一随机字符串>\",\n  \"events\": {\n    \"https://schemas.openid.net/secevent/risc/event-type/account-purged\": {\n      \"subject\": {\n        \"sub\": \"<触发事件用户的UnionID>\",\n        \"subject_type\": \"iss_sub\",\n        \"extra\": \"<触发事件用户的OpenID>\",\n        \"iss\": \"id.cloud.huawei.com\"\n      }\n    }\n  }\n} 其中，各字段含义如下： 参数  描述    aud  开发者应用ID（与订阅用户信息变更中提供的应用ID一致）。   iss  消息投递者标识，固定值“id.cloud.huawei.com”。   iat  生成该事件的UTC时间戳（秒级）。   jti  唯一随机字符串，用于标识此消息体，开发者可根据此字段来识别重投消息体。   events  用户信息变更事件与事件消息体，格式为json。key是用户信息变更事件类型，value为其对应事件消息信息。   subject  用户信息变更事件对应的消息体，格式为json，包含字段说明如下： sub：触发事件用户的UnionID（同一个开发者下的所有应用，此值唯一）。具体格式要求请参考OpenID和UnionID的格式说明。subject_type：固定为“iss_sub”。extra：触发事件用户的OpenID（用户在同一个应用中，此值唯一）。具体格式要求请参考OpenID和UnionID的格式说明。iss：标识消息投递者，固定为“id.cloud.huawei.com”。     
