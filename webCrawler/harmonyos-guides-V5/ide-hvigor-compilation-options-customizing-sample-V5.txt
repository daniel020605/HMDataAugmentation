实践说明
应用正式对外布版本前，需要对应用进行代码调试。调试和正式发布版本，两者编译行为可能不同。此时，可以利用buildMode能力，来定制两个版本的编译差异性。
假设其中构建产物均为default，但编译行为不同：release模式下使能混淆，debug模式下使能debug调试。
示例工程中包含一个模块entry，将entry模块交付到构建产物default中，模块定制两种不同的编译模式debug、release，将两种构建模式均绑定到构建产物default中。工程示例图如下（模块）：
工程级build-profile.json5示例
{\n  \"app\": {\n    \"signingConfigs\": [],\n    \"products\": [\n      {\n        \"name\": \"default\",\n        \"signingConfig\": \"default\",\n        \"compatibleSdkVersion\": \"5.0.0(12)\",\n        \"runtimeOS\": \"HarmonyOS\",\n        \"buildOption\": {\n          \"strictMode\": {\n            \"caseSensitiveCheck\": true\n            \"useNormalizedOHMUrl\": true\n          }\n        }\n      }\n    ],\n    \"buildModeSet\": [\n      {\n        \"name\": \"debug\",\n      },\n      {\n        \"name\": \"release\",\n      }\n    ]\n  },\n  \"modules\": [\n    {\n      \"name\": \"entry\",\n      \"srcPath\": \"./entry\",\n      \"targets\": [\n        {\n          \"name\": \"default\",\n          \"applyToProducts\": [\n            \"default\"\n          ]\n        }\n      ]\n    }\n  ]\n}
模块级build-profile.json5示例
[h2]entry模块
{\n  \"apiType\": \"stageMode\",\n  \"buildOption\": {\n  },\n  \"buildOptionSet\": [\n    {\n      \"name\": \"release\",\n      \"arkOptions\": {\n        \"obfuscation\": {\n          \"ruleOptions\": {\n            \"enable\": true,\n            \"files\": [\n              \"./obfuscation-rules.txt\"\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"debug\",\n      \"debuggable\": true,\n      \"arkOptions\": {\n        \"obfuscation\": {\n          \"ruleOptions\": {\n            \"enable\": false\n          }\n        }\n      }\n    }\n  ],\n  \"buildModeBinder\": [\n    {\n      \"buildModeName\": \"release\",\n      \"mappings\": [\n        {\n          \"buildOptionName\": \"release\",\n          \"targetName\": \"default\"\n        }\n      ]\n    },\n    {\n      \"buildModeName\": \"debug\",\n      \"mappings\": [\n        {\n          \"buildOptionName\": \"debug\",\n          \"targetName\": \"default\"\n        }\n      ]\n    }\n  ],\n  \"targets\": [\n    {\n      \"name\": \"default\",\n    },\n    {\n      \"name\": \"ohosTest\",\n    }\n  ]\n}
指定构建模式
[h2]命令行
示例1：构建APP时，构建产物为default，指定构建模式为debug，可执行如下命令时：
hvigorw --mode project -p product=default -p buildMode=debug assembleApp
编译产物示例如下：
示例2：构建APP时，构建产物为default，指定构建模式为release，可执行如下命令时：
hvigorw --mode project -p product=default -p buildMode=release assembleApp
编译产物示例如下：
[h2]DevEco Studio界面
在DevEco Studio界面进行可视化配置，Build Mode下拉选择对应配置选项debug后，点击Build -> Build Hap(s)/APP(s) -> Build APP(s) ，构建编译模式为debug，构建产物为default的APP包。
