DRM会话管理(ArkTS)
DRM会话管理（MediaKeySession）支持媒体密钥管理及媒体解密等，MediaKeySession实例由系统管理里的MediaKeySystem实例创建和销毁。
开发步骤
详细的API说明请参考DRM API参考。
 导入相关接口，导入方法如下。 import { drm } from '@kit.DrmKit'; 导入BusinessError模块，用于获取drm模块相关接口抛出的错误码。 import { BusinessError } from '@kit.BasicServicesKit'; 状态监听。 监听MediaKeySession实例的事件，包括密钥请求事件、密钥过期事件、第三方自定义事件、密钥过期更新事件、密钥变换事件。  监听密钥请求事件，媒体密钥请求时触发。 mediaKeySession.on('keyRequired', (eventInfo: drm.EventInfo) => {\n  console.log('keyRequired' + 'info:' + eventInfo.info + ' extraInfo:' + eventInfo.extraInfo);\n}); 监听媒体密钥过期事件，媒体密钥过期时触发。 mediaKeySession.on('keyExpired', (eventInfo: drm.EventInfo) => {\n   console.log('keyExpired' + 'info:' + eventInfo.info + ' extraInfo:' + eventInfo.extraInfo);\n}); 监听DRM解决方案自定义事件，DRM解决方案自定义事件发生时触发。 mediaKeySession.on('vendorDefined', (eventInfo: drm.EventInfo) => {\n  console.log('vendorDefined' + 'info:' + eventInfo.info + ' extraInfo:' + eventInfo.extraInfo);\n}); 监听媒体密钥过期更新事件，媒体密钥过期更新时触发。 mediaKeySession.on('expirationUpdate', (eventInfo: drm.EventInfo) => {\n  console.log('expirationUpdate' + 'info:' + eventInfo.info + ' extraInfo:' + eventInfo.extraInfo);\n}); 监听密钥变换事件，媒体密钥变换时触发。 mediaKeySession.on('keysChange', (keyInfo : drm.KeysInfo[], newKeyAvailable:boolean) => {\n  for(let i = 0; i < keyInfo.length; i++){\n    console.log('keysChange' + 'info:' + keyInfo[i].keyId + ' extraInfo:' + keyInfo[i].value);\n  }\n});  生成媒体密钥请求、设置媒体密钥请求响应。 let initData = new Uint8Array([0x00, 0x00, 0x00, 0x00]);\n// 根据DRM解决方案要求设置可选数据的值\nlet optionalData:drm.OptionsData[] = [{\n  name: \"...\",\n  value: \"...\"\n}];\n// 以下示例完成在线媒体密钥请求和响应设置\nmediaKeySession.generateMediaKeyRequest(\"video/avc\", initData, drm.MediaKeyType.MEDIA_KEY_TYPE_ONLINE, optionalData).then(async (licenseRequest) => {\n   console.info(\"generateMediaKeyRequest success\", licenseRequest.mediaKeyRequestType, licenseRequest.data, licenseRequest.defaultURL);\n   // 将媒体密钥请求返回的licenseRequest.data通过网络请求发送给DRM服务获取媒体密钥请求响应，设置媒体密钥请求响应\n   let licenseResponse = new Uint8Array([0x00, 0x00, 0x00, 0x00]);\n   mediaKeySession.processMediaKeyResponse(licenseResponse).then((mediaKeyId: Uint8Array) => {\n     console.info(\"processMediaKeyResponse success\");\n   }).catch((err:BusinessError) =>{\n     console.info(\"processMediaKeyResponse err end\", err.code);\n  });\n}).catch((err:BusinessError) =>{\n  console.info(\"generateMediaKeyRequest err end\", err.code);\n});\n// 以下示例完成离线媒体密钥请求和响应设置\nlet offlineMediaKeyId = new Uint8Array([0x00, 0x00, 0x00, 0x00]);\nmediaKeySession.generateMediaKeyRequest(\"video/avc\", initData, drm.MediaKeyType.MEDIA_KEY_TYPE_OFFLINE, optionalData).then((licenseRequest: drm.MediaKeyRequest) => {\n   console.info(\"generateMediaKeyRequest success\", licenseRequest.mediaKeyRequestType, licenseRequest.data, licenseRequest.defaultURL);\n   // 将媒体密钥请求返回的licenseRequest.data通过网络请求发送给DRM服务获取媒体密钥请求响应，设置媒体密钥请求响应\n   let licenseResponse = new Uint8Array([0x00, 0x00, 0x00, 0x00]);\n   mediaKeySession.processMediaKeyResponse(licenseResponse).then((mediaKeyId: Uint8Array) => {\n offlineMediaKeyId = mediaKeyId;\n     console.info(\"processMediaKeyResponse success\");\n   }).catch((err:BusinessError) =>{\n     console.info(\"processMediaKeyResponse err end\", err.code);\n  });\n}).catch((err:BusinessError) =>{\n  console.info(\"generateMediaKeyRequest err end\", err.code);\n}); （可选）检查当前MediaKeySession会话的媒体密钥状态。 try {\n  let keyvalue: drm.MediaKeyStatus[] = mediaKeySession.checkMediaKeyStatus();\n  console.info(\"checkMediaKeyStatus success\", keyvalue[0].value);\n} catch (err) {\n  let error = err as BusinessError;\n  console.error(`checkMediaKeyStatus ERROR: ${error}`);\n} （可选）生成离线媒体密钥释放请求和处理离线媒体密钥释放响应。 mediaKeySession.generateOfflineReleaseRequest(offlineMediaKeyId).then((OfflineReleaseRequest: Uint8Array) => {\n  console.info(\"generateOfflineReleaseRequest success\", OfflineReleaseRequest);\n  // 将媒体密钥释放请求返回的OfflineReleaseRequest通过网络请求发送给DRM服务获取媒体密钥释放请求响应，设置媒体密钥释放请求响应\n  let OfflineReleaseResponse = new Uint8Array([0x00, 0x00, 0x00, 0x00]);\n  mediaKeySession.processOfflineReleaseResponse(offlineMediaKeyId, OfflineReleaseResponse).then(() => {\n    console.info(\"processOfflineReleaseResponse success\");\n  }).catch((err:BusinessError) =>{\n    console.info(\"processOfflineReleaseResponse err end\", err.code);\n  });\n}).catch((err:BusinessError) =>{\n  console.info(\"generateOfflineReleaseRequest err end\", err.code);\n}); （可选）恢复离线媒体密钥。 // 恢复指定媒体密钥信息到当前会话\nmediaKeySession.restoreOfflineMediaKeys(offlineMediaKeyId).then(() => {\n  console.log(\"restoreOfflineMediaKeys success.\");\n}).catch((err: BusinessError) => {\n  console.error(`restoreOfflineMediaKeys: ERROR: ${err}`);\n}); （可选）获取当前会话的安全级别。 try {\n  let contentProtectionLevel: drm.ContentProtectionLevel = mediaKeySession.getContentProtectionLevel();\n} catch (err) {\n  let error = err as BusinessError;\n  console.error(`getContentProtectionLevel ERROR: ${error}`);\n} （可选）查询是否需要安全解码。 try {\n  let status: boolean = mediaKeySession.requireSecureDecoderModule(\"video/avc\");\n} catch (err) {\n  let error = err as BusinessError;\n  console.error(`requireSecureDecoderModule ERROR: ${error}`);\n} （可选）删除当前会话的媒体密钥。 try {\n   mediaKeySession.clearMediaKeys();\n} catch (err) {\n  let error = err as BusinessError;\n  console.error(`clearMediaKeys ERROR: ${error}`);\n} 
