设备真实性证明能力简介
设备真实性证明能力，提供了设备真实性证明和应用身份证明的能力，采用标准的X509证书格式，基于密码算法、证书链实现校验业务请求是否来自真实设备和合法应用，帮助开发者识别黑灰产的攻击行为。
亮点/特征
基于硬件级的设备证书认证支持对应用身份的证明采用标准的X509证书格式
使用场景
设备真实性证明能力主要可以抵御以下攻击场景：
模拟器、云手机等非真实设备：由于只有真实的设备才具备出厂灌装的设备证书，并且只有拥有设备证书的设备才具备此能力，所以通过本方案可以确保请求来自真实的设备。重打包应用、仿冒应用等非真实应用：由于设备真实性证明证书链包含对应应用包名和签名公钥hash信息，可以通过验证这些信息保证所有带签名的信息来自合法的应用。通过抓包等方法修改或伪造应用请求：使用设备真实性证明私钥对重要的业务请求附加签名，可以确保重要的请求的完整性，并通过挑战值机制杜绝重放攻击。
具体潜在的使用场景包括但不限于：
金融支付应用开通免密支付：用于金融应用服务器验证开通免密支付的设备真实和安全性，确保应用运行在真实的设备环境下，及用于免密支付认证的密钥安全性。营销活动中，防黑灰产利用工具“薅羊毛”：通过验证请求是否来自真实的设备，防范黑灰产仿冒真实设备（如通过模拟器仿冒真实设备）发送抽奖、抢购、刷优惠券等营销活动请求。游戏防作弊/外挂、自动化操控打击工作室：游戏服务器通过识别请求是否来自真实的设备和应用身份，识别应用重打包、模拟器、云手机等外挂和自动化操作行为。
与相关Kit的关系
设备真实性证明由设备证书Kit（Device Certificate Kit）提供基于设备证书的安全证明能力，开放接口通过密钥管理服务Kit（Universal Keystore Kit）进行开放。
约束与限制
当前仅在中国大陆（不包含香港、澳门、台湾地区）开放设备真实性证明能力。设备真实性证明能力不支持模拟器。参考网络连接安全配置开发实践建议，设备真实性证明能力不支持用户手动设置代理场景。
[h2]服务配额
接口
配额
配额说明
匿名密钥证明接口
50万次/天/应用
且 35次/秒/应用
默认情况下，每个应用每天最多可以调用50万次的匿名密钥证明接口（anonAttestKeyItem / OH_Huks_AnonAttestKeyItem）且瞬时流量每秒不超过35次请求。如果您的应用需要修改服务配额，请通过在线提单申请修改配额。
框架原理
设备真实性证明能力提供了设备真实性证明和应用身份证明的能力，该能力基于硬件级的设备证书进行认证。
如图所示，过程大致为：
应用调用Universal Keystore Kit的接口，创建一对公私钥对，该公私钥对存储在基于硬件的安全环境。应用再调用Universal Keystore Kit接口对该密钥对的公钥和应用的身份签发证书链。应用服务器将基于证书链，校验公钥来自一个真实的设备和正确的应用身份。应用服务器验证证书链成功后，保存证书链中的应用公钥。在应用进行业务处理时（如开通免密支付、营销活动）调用Universal Keystore Kit接口使用应用私钥对业务请求进行签名，应用服务器使用保存的应用公钥对签名进行验签。
交互流程
设备真实性证明的开发流程可以划分为2个子流程：
密钥证明和保存流程：把证明来自真实设备和正确应用的密钥注册和保存到业务的服务器，一个设备只需要进行一次或一个用户登录时进行一次。针对有用户登录的场景：建议在用户登录后进行密钥证明和保存流程，应用服务器在数据库中保存应用公钥时绑定登录的用户ID。针对无用户登录的场景：建议在应用首次启动或首次使用设备真实性证明能力时进行密钥证明和保存流程，应用服务器在数据库中保存应用公钥。 校验业务请求的流程：使用保存在应用服务器数据库中的应用公钥对业务请求进行验证，业务请求中请勿携带密钥证明证书链。 设备证明服务器可能会限制来自特定应用的认证流量，以避免在太多应用同时进行调用时出现过载，从而导致应用处理失败，因此请勿在每次的业务请求中都对应用公钥进行证明。 当设备真实性证明能力由于流量过载或其他原因不可用时，应用需要考虑异常处理方案，避免出现应用基本功能不可用。  
[h2]密钥证明和保存流程
查询应用公私钥对是否存在：如果应用公私钥对已存在，则流程结束（说明应用已经完成了密钥证明和保存流程）。创建应用公私钥对：创建一个用于证明设备真实性和应用身份的非对称算法密钥对（包含应用公钥和应用私钥），比如RSA、EC算法的密钥对。 获取挑战值Challenge：为了在步骤6“发送密钥证明证书链”中，能够防重放攻击，建议应用先从应用服务器获取一次性的挑战值Challenge。应用服务器采用安全随机数生成挑战值Challenge，并缓存到服务器中。对应用公钥进行证明：调用Universal Keystore Kit接口对生成的应用公钥和调用的应用身份进行证明，证明公钥来自真实的设备。应用可以输入挑战值Challenge。请求服务器签发密钥证明证书链：设备证明服务器对设备真实性进行证明并签发密钥证明证书链。获取密钥证明证书链：Universal Keystore Kit将返回密钥证明的证书链，包含应用公钥、挑战值Challenge、应用身份信息等。发送密钥证明证书链：应用将密钥证明证书链发送到应用服务器。对密钥证明证书链进行校验：应用服务器使用Universal Keystore Kit官网提供的根证书对证书链合法性进行校验，以及对挑战值Challenge、应用身份信息进行校验。 无论校验是否通过，均需要删除服务器缓存的挑战值Challenge。  保存应用公钥到数据库：应用服务器对证书链校验通过后，把从密钥证明证书中解析出的应用公钥保存到服务器的数据库中。
[h2]校验业务请求的流程
获取挑战值Challenge：为了在步骤4“发送业务请求，携带签名和应用公钥标识”中，能够防重放攻击，建议应用先从应用服务器获取一次性的挑战值Challenge。应用服务器采用安全随机数生成挑战值Challenge，并缓存到服务器中。使用应用私钥对业务请求进行签名：调用Universal Keystore Kit接口使用指定的应用私钥对业务请求数据进行签名。获取签名数据：Universal Keystore Kit返回签名数据给应用。发送业务请求：应用发送业务请求到应用服务器，携带签名数据、应用公钥的密钥ID、挑战值Challenge等。根据应用公钥标识查找应用公钥：应用服务器根据应用公钥的密钥ID查找应用公钥，并校验挑战值Challenge。使用应用公钥对请求的签名进行校验：应用服务器使用应用公钥对请求中的签名进行校验。
无论校验是否通过，均需要删除服务器缓存的挑战值Challenge。
