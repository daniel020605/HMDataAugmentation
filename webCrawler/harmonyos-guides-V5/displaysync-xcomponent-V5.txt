请求自绘制内容绘制帧率
对于基于XComponent进行Native开发的业务，可以请求独立的绘制帧率进行内容开发，如游戏、自绘制UI框架对接等场景。
接口说明
开发步骤
本范例是通过Drawing在Native侧实现图形的绘制，并将其呈现在NativeWindow上，具体可参考使用Drawing实现图形绘制与显示。
 定义ArkTS接口文件XComponentContext.ts，用来对接Native层。 export default interface XComponentContext {\nregister(): void;\nunregister(): void;\n}; 定义演示页面，包含两个XComponent组件。 import XComponentContext from \"../interface/XComponentContext\";\n\n@Entry\n@Component\nstruct Index {\n  private xComponentContext1: XComponentContext | undefined = undefined;\n  private xComponentContext2: XComponentContext | undefined = undefined;\n  \n build() {\n   Column() {\n     Row() {\n       XComponent({ id: 'xcomponentId_30', type: 'surface', libraryname: 'entry' })\n         .onLoad((xComponentContext) => {\n           this.xComponentContext1 = xComponentContext as XComponentContext;\n         }).width('832px')\n     }.height('40%')\n\n     Row() {\n       XComponent({ id: 'xcomponentId_120', type: 'surface', libraryname: 'entry' })\n         .onLoad((xComponentContext) => {\n           this.xComponentContext2 = xComponentContext as XComponentContext;\n         }).width('832px') // Multiples of 64\n     }.height('40%')\n   }\n }\n} Native层配置帧率和注册回调函数。 static void TestCallback(OH_NativeXComponent *component, uint64_t timestamp, uint64_t targetTimestamp) // 定义每帧的回调函数\n{\n    // ...\n    // 获取XComponent的surface大小\n    int32_t xSize = OH_NativeXComponent_GetXComponentSize(component, nativeWindow, &width, &height);\n    if ((xSize == OH_NATIVEXCOMPONENT_RESULT_SUCCESS) && (render != nullptr)) {\n        render->Prepare();\n        render->Create();\n        if (id == \"xcomponentId_30\") {\n            // 30Hz绘制时,每帧移动的距离为16像素\n            render->ConstructPath(16, 16, render->defaultOffsetY);\n        }\n        if (id == \"xcomponentId_120\") {\n            // 120Hz绘制时，每帧移动的距离为4像素\n            render->ConstructPath(4, 4, render->defaultOffsetY);\n        }\n       // ...\n    }\n}      Callback回调函数运行于UI主线程，故涉及UI线程的耗时操作不应运行于回调函数中，以免影响性能。 实例在调用NapiRegister后，在不需要进行帧率控制时，应进行NapiUnregister操作，避免内存泄漏问题。    void SampleXComponent::RegisterOnFrameCallback(OH_NativeXComponent *nativeXComponent) \n{\n    OH_NativeXComponent_RegisterOnFrameCallback(nativeXComponent, TestCallback); // 注册回调函数，并使能每帧回调\n}\n\nnapi_value SampleXComponent::NapiRegister(napi_env env, napi_callback_info info)\n{\n    // ...\n    render->RegisterOnFrameCallback(nativeXComponent); // 在TS层使能注册与使能每帧回调\n    // ...\n}\n\nnapi_value SampleXComponent::NapiUnregister(napi_env env, napi_callback_info info)\n{\n    // ...\n    OH_NativeXComponent_UnregisterOnFrameCallback(nativeXComponent); // 在TS层取消注册每帧回调\n    // ...\n} TS层注册和取消注册每帧回调。 Row() {\n    Button('Start')\n      .id('Start')\n      .fontSize(14)\n      .fontWeight(500)\n      .margin({ bottom: 20, right: 6, left: 6 })\n      .onClick(() => {\n        if (this.xComponentContext1) {\n          this.xComponentContext1.register();\n        }\n        if (this.xComponentContext2) {\n          this.xComponentContext2.register();\n        }\n      })\n      .width('30%')\n      .height(40)\n      .shadow(ShadowStyle.OUTER_DEFAULT_LG)\n    \n    Button('Stop')\n      .id('Stop')\n      .fontSize(14)\n      .fontWeight(500)\n      .margin({ bottom: 20, left: 6 })\n      .onClick(() => {\n        if (this.xComponentContext1) {\n          this.xComponentContext1.unregister();\n        }\n        if (this.xComponentContext2) {\n          this.xComponentContext2.unregister();\n        }\n      })\n      .width('30%')\n      .height(40)\n      .shadow(ShadowStyle.OUTER_DEFAULT_LG)\n} 
