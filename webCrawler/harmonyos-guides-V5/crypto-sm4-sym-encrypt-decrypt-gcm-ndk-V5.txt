使用SM4对称密钥（GCM模式）加解密(C/C++)
对应的算法规格请查看对称密钥加解密算法规格：SM4。
在CMake脚本中链接相关动态库
   target_link_libraries(entry PUBLIC libohcrypto.so)
加密
 调用OH_CryptoSymKeyGenerator_Create、OH_CryptoSymKeyGenerator_Generate，生成密钥算法为SM4、密钥长度为128位的对称密钥（OH_CryptoSymKey）。 如何生成SM4对称密钥，开发者可参考下文示例，并结合对称密钥生成和转换规格：SM4和随机生成对称密钥理解，参考文档与当前示例可能存在入参差异，请在阅读时注意区分。 调用OH_CryptoSymCipher_Create，指定字符串参数'SM4_128|GCM|PKCS7'，创建对称密钥类型为SM4_128、分组模式为GCM、填充模式为PKCS7的Cipher实例，用于完成加解密操作。 调用OH_CryptoSymCipherParams_Create创建参数对象，调用OH_CryptoSymCipherParams_SetParam设置对应的加密参数。 调用OH_CryptoSymCipher_Init，设置模式为加密（CRYPTO_ENCRYPT_MODE），指定加密密钥（OH_CryptoSymKey）和GCM模式对应的加密参数（OH_CryptoSymCipherParams），初始化加密Cipher实例。 调用OH_CryptoSymCipher_Update，更新数据（明文）。 当前单次update长度没有限制，开发者可以根据数据量判断如何调用update。  当数据量较小时，可以在init完成后直接调用final。 当数据量较大时，可以多次调用update，即分段加解密。  调用OH_CryptoSymCipher_Final，获取加密后的数据。  由于已使用update传入数据，此处data传入null。 final输出结果可能为null，在访问具体数据前，需要先判断结果是否为null，避免产生异常。  使用OH_CryptoSymCipherParams_Create创建Params，使用OH_CryptoSymCipherParams_SetParam设置authTag，作为解密的认证信息。在GCM模式下，需要从加密后的数据中取出末尾16字节，作为解密时初始化的认证信息。示例中authTag恰好为16字节。 调用OH_CryptoSymKeyGenerator_Destroy、OH_CryptoSymCipher_Destroy、OH_CryptoSymCipherParams_Destroy销毁各对象。 
解密
 调用OH_CryptoSymCipher_Init，设置模式为解密（CRYPTO_DECRYPT_MODE），指定解密密钥（OH_CryptoSymKey）和GCM模式对应的解密参数（OH_CryptoSymCipherParams），初始化解密Cipher实例。 调用OH_CryptoSymCipher_Update，更新数据（密文）。 调用OH_CryptoSymCipher_Final，获取解密后的数据。 
 示例： 
#include \"CryptoArchitectureKit/crypto_common.h\"\n#include \"CryptoArchitectureKit/crypto_sym_cipher.h\"\n#include <string.h>\n\nstatic OH_Crypto_ErrCode doTestSm4Gcm()\n{\n    OH_CryptoSymKeyGenerator *genCtx = nullptr;\n    OH_CryptoSymCipher *encCtx = nullptr;\n    OH_CryptoSymCipher *decCtx = nullptr;\n    OH_CryptoSymKey *keyCtx = nullptr;\n    OH_CryptoSymCipherParams *params = nullptr;\n\n    Crypto_DataBlob outUpdate = {.data = nullptr, .len = 0};\n    Crypto_DataBlob decUpdate = {.data = nullptr, .len = 0};\n\n    uint8_t aad[8] = {1, 2, 3, 4, 5, 6, 7, 8};\n    uint8_t tag[16] = {0};\n    uint8_t iv[12] = {1, 2, 4, 12, 3, 4, 2, 3, 3, 2, 0, 4}; // iv使用安全随机数生成\n    Crypto_DataBlob ivData = {.data = iv, .len = sizeof(iv)};\n    Crypto_DataBlob aadData = {.data = aad, .len = sizeof(aad)};\n    Crypto_DataBlob tagData = {.data = tag, .len = sizeof(tag)};\n    Crypto_DataBlob tagOutPut = {.data = nullptr, .len = 0};\n    char *plainText = const_cast<char *>(\"this is test!\");\n    Crypto_DataBlob msgBlob = {.data = (uint8_t *)(plainText), .len = strlen(plainText)};\n    // 生成对称密钥\n    OH_Crypto_ErrCode ret;\n    ret = OH_CryptoSymKeyGenerator_Create(\"SM4_128\", &genCtx);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymKeyGenerator_Generate(genCtx, &keyCtx);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n\n    // 设置参数\n    ret = OH_CryptoSymCipherParams_Create(&params);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipherParams_SetParam(params, CRYPTO_IV_DATABLOB, &ivData);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipherParams_SetParam(params, CRYPTO_AAD_DATABLOB, &aadData);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipherParams_SetParam(params, CRYPTO_TAG_DATABLOB, &tagData);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n\n    // 加密\n    ret = OH_CryptoSymCipher_Create(\"SM4_128|GCM|PKCS7\", &encCtx);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipher_Init(encCtx, CRYPTO_ENCRYPT_MODE, keyCtx, params);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipher_Update(encCtx, &msgBlob, &outUpdate);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipher_Final(encCtx, nullptr, &tagOutPut);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n\n    // 解密\n    ret = OH_CryptoSymCipher_Create(\"SM4_128|GCM|PKCS7\", &decCtx);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipherParams_SetParam(params, CRYPTO_TAG_DATABLOB, &tagOutPut);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipher_Init(decCtx, CRYPTO_DECRYPT_MODE, keyCtx, params);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n    ret = OH_CryptoSymCipher_Final(decCtx, &outUpdate, &decUpdate);\n    if (ret != CRYPTO_SUCCESS) {\n        goto end;\n    }\n\n    // 释放资源\nend:\n    OH_CryptoSymCipherParams_Destroy(params);\n    OH_CryptoSymCipher_Destroy(encCtx);\n    OH_CryptoSymCipher_Destroy(decCtx);\n    OH_CryptoSymKeyGenerator_Destroy(genCtx);\n    OH_CryptoSymKey_Destroy(keyCtx);\n    OH_Crypto_FreeDataBlob(&outUpdate);\n    OH_Crypto_FreeDataBlob(&decUpdate);\n    OH_Crypto_FreeDataBlob(&tagOutPut);\n    return ret;\n}
