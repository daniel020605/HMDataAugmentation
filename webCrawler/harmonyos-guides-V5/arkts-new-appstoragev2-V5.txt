AppStorageV2: 应用全局UI状态存储
为了增强状态管理框架对应用全局UI状态变量存储的能力，开发者可以使用AppStorageV2存储应用全局UI状态变量数据。
AppStorageV2是提供状态变量在应用级全局共享的能力，开发者可以通过connect绑定同一个key，进行跨ability的数据共享。
在阅读本文当前，建议提前阅读：@ComponentV2，@ObservedV2和@Trace，配合阅读：AppStorageV2-API文档。
AppStorageV2从API version 12开始支持。
概述
AppStorageV2是在应用UI启动时会被创建的单例。它的目的是为了提供应用状态数据的中心存储，这些状态数据在应用级别都是可访问的。AppStorageV2将在应用运行过程保留其数据。数据通过唯一的键字符串值访问。
AppStorageV2可以和UI组件同步，且可以在应用业务逻辑中被访问。
AppStorageV2支持应用的主线程内多个UIAbility实例间的状态共享。
使用说明
[h2]connect：创建或获取储存的数据
static connect<T extends object>(\n    type: TypeConstructorWithArgs<T>,\n    keyOrDefaultCreator?: string | StorageDefaultCreator<T>,\n    defaultCreator?: StorageDefaultCreator<T> \n): T | undefined;
type：指定的类型，若未指定key，则使用type的name作为key；
keyOrDefaultCreater：指定的key，或者是默认数据的构造器；
defaultCreator：默认数据的构造器。
1、若未指定key，使用第二个参数作为默认构造器；否则使用第三个参数作为默认构造器（第二个参数非法也使用第三个参数作为默认构造器）。
2、确保数据已经存储在AppStorageV2中，可省略默认构造器，获取存储的数据；否则必须指定默认构造器，不指定将导致应用异常。
3、同一个key，connect不同类型的数据会导致应用异常，应用需要确保类型匹配。
4、key建议使用有意义的值，可由字母、数字、下划线组成，长度不超过255，使用非法字符或空字符的行为是未定义的。
5、关联@Observed对象时，由于该类型的name属性未定义，需要指定key或者自定义name属性。
[h2]remove：删除指定key的储存数据
static remove<T>(keyOrType: string | TypeConstructorWithArgs<T>): void;
删除AppStorageV2中不存在的key会报警告。
[h2]keys：返回所有AppStorageV2中的key
static keys(): Array<string>;
使用限制
1、需要配合UI使用（UI线程），不能在其他线程使用，如不支持@Sendable。
2、不支持collections.Set、collections.Map等类型。
3、不支持非buildin类型，如PixelMap、NativePointer、ArrayList等Native类型。
使用场景
[h2]在两个页面之间存储数据
页面1
import { AppStorageV2 } from '@kit.ArkUI';\nimport { Sample } from '../Sample';\n\n@Entry\n@ComponentV2\nstruct Page1 {\n  // 在AppStorageV2中创建一个key为Sample的键值对（如果存在，则返回AppStorageV2中的数据），并且和prop关联\n  @Local prop: Sample = AppStorageV2.connect(Sample, () => new Sample())!;\n  pageStack: NavPathStack = new NavPathStack();\n\n  build() {\n    Navigation(this.pageStack) {\n      Column() {\n        Button('Go to page2')\n          .onClick(() => {\n            this.pageStack.pushPathByName('Page2', null);\n          })\n\n        Button('Page1 connect the key Sample')\n          .onClick(() => {\n            // 在AppStorageV2中创建一个key为Sample的键值对（如果存在，则返回AppStorageV2中的数据），并且和prop关联\n            this.prop = AppStorageV2.connect(Sample, 'Sample', () => new Sample())!;\n          })\n\n        Button('Page1 remove the key Sample')\n          .onClick(() => {\n            // 从AppStorageV2中删除后，prop将不会再与key为Sample的值关联\n            AppStorageV2.remove(Sample);\n          })\n\n        Text(`Page1 add 1 to prop.p1: ${this.prop.p1}`)\n          .fontSize(30)\n          .onClick(() => {\n            this.prop.p1++;\n          })\n\n        Text(`Page1 add 1 to prop.p2: ${this.prop.p2}`)\n          .fontSize(30)\n          .onClick(() => {\n            // 页面不刷新，但是p2的值改变了\n            this.prop.p2++;\n          })\n\n        // 获取当前AppStorageV2里面的所有key\n        Text(`all keys in AppStorage: ${AppStorageV2.keys()}`)\n          .fontSize(30)\n      }\n    }\n  }\n}
页面2
import { AppStorageV2 } from '@kit.ArkUI';\nimport { Sample } from '../Sample';\n\n@Builder\nexport function Page2Builder() {\n  Page2()\n}\n\n@ComponentV2\nstruct Page2 {\n  // 在AppStorageV2中创建一个key为Sample的键值对（如果存在，则返回AppStorageV2中的数据），并且和prop关联\n  @Local prop: Sample = AppStorageV2.connect(Sample, () => new Sample())!;\n  pathStack: NavPathStack = new NavPathStack();\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button('Page2 connect the key Sample1')\n          .onClick(() => {\n            // 在AppStorageV2中创建一个key为Sample1的键值对（如果存在，则返回AppStorageV2中的数据），并且和prop关联\n            this.prop = AppStorageV2.connect(Sample, 'Sample1', () => new Sample())!;\n          })\n\n        Text(`Page2 add 1 to prop.p1: ${this.prop.p1}`)\n          .fontSize(30)\n          .onClick(() => {\n            this.prop.p1++;\n          })\n\n        Text(`Page2 add 1 to prop.p2: ${this.prop.p2}`)\n          .fontSize(30)\n          .onClick(() => {\n            // 页面不刷新，但是p2的值改变了；只有重新初始化才会改变\n            this.prop.p2++;\n          })\n\n        // 获取当前AppStorageV2里面的所有key\n        Text(`all keys in AppStorage: ${AppStorageV2.keys()}`)\n          .fontSize(30)\n      }\n    }\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack;\n    })\n  }\n}
使用Navigation时，需要添加配置系统路由表文件src/main/resources/base/profile/route_map.json，并替换pageSourceFile为Page2页面的路径，并且在module.json5中添加：\"routerMap\": \"$profile:route_map\"。
{\n  \"routerMap\": [\n    {\n      \"name\": \"Page2\",\n      \"pageSourceFile\": \"src/main/ets/pages/PersistenceV2-2.ets\",\n      \"buildFunction\": \"Page2Builder\",\n      \"data\": {\n        \"description\" : \"PersistenceV2 example\"\n      }\n    }\n  ]\n}
数据页面
// 数据中心\n@ObservedV2\nexport class Sample {\n  @Trace p1: number = 0;\n  p2: number = 10;\n}
