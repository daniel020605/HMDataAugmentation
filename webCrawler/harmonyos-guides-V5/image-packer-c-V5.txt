使用Image_NativeModule完成图片编码
图像打包类，用于创建以及释放ImagePacker实例。
开发步骤
[h2]添加链接库
在进行应用开发之前，开发者需要打开native工程的src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加libimage_packer.so 以及日志依赖libhilog_ndk.z.so。
target_link_libraries(entry PUBLIC libhilog_ndk.z.so libimage_packer.so)
[h2]Native接口调用
具体接口说明请参考API文档。
在hello.cpp中实现C API接口调用逻辑，示例代码如下：
编码接口使用示例
在创建ImagePacker实例，指定打包参数后将ImageSource或Pixelmap图片源打包至文件或者缓冲区。
根据MIME标准，标准编码格式为image/jpeg。当使用image编码时，打包参数中的编码格式image_MimeType设置为image/jpeg，image编码后的文件扩展名可设为.jpg或.jpeg，可在支持image/jpeg解码的平台上使用。
   #include <linux/kd.h>\n   #include <string>\n\n   #include <hilog/log.h>\n   #include <multimedia/image_framework/image/image_packer_native.h>\n   #include <multimedia/image_framework/image/pixelmap_native.h>\n   #include <multimedia/image_framework/image/image_source_native.h>\n\n   #undef LOG_DOMAIN\n   #undef LOG_TAG\n   #define LOG_DOMAIN 0x3200\n   #define LOG_TAG \"MY_TAG\"\n\n   Image_ErrorCode packToFileFromImageSourceTest(int fd)\n   {\n       //创建ImagePacker实例\n       OH_ImagePackerNative *testPacker = nullptr;\n       Image_ErrorCode errCode = OH_ImagePackerNative_Create(&testPacker);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest CreatePacker OH_ImagePackerNative_Create failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //创建ImageSource实例\n       OH_ImageSourceNative* imageSource = nullptr;\n       errCode = OH_ImageSourceNative_CreateFromFd(fd, &imageSource);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest OH_ImageSourceNative_CreateFromFd  failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //指定打包参数，将ImageSource图片源编码后直接打包进文件\n       OH_PackingOptions *option = nullptr;\n       OH_PackingOptions_Create(&option);\n       char type[] = \"image/jpeg\";\n       Image_MimeType image_MimeType = {type, strlen(type)};\n       OH_PackingOptions_SetMimeType(option, &image_MimeType);\n       // 编码为hdr内容(需要资源本身为hdr，支持jpeg格式)\n       OH_PackingOptions_SetDesiredDynamicRange(option, IMAGE_PACKER_DYNAMIC_RANGE_AUTO);\n       errCode = OH_ImagePackerNative_PackToFileFromImageSource(testPacker, option, imageSource, fd);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest OH_ImagePackerNative_PackToFileFromImageSource failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //释放ImagePacker实例\n       errCode = OH_ImagePackerNative_Release(testPacker);\n       if (errCode != IMAGE_SUCCESS)\n       {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest ReleasePacker OH_ImagePackerNative_Release failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n       //释放ImageSource实例\n       errCode = OH_ImageSourceNative_Release(imageSource);\n       if (errCode != IMAGE_SUCCESS)\n       {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest ReleasePacker OH_ImageSourceNative_Release failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       return IMAGE_SUCCESS;\n   }\n\n   Image_ErrorCode packToFileFromPixelmapTest(uint8_t *buffer, size_t buffSize, int fd)\n   {\n       //创建ImagePacker实例\n       OH_ImagePackerNative *testPacker = nullptr;\n       Image_ErrorCode errCode = OH_ImagePackerNative_Create(&testPacker);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest CreatePacker OH_ImagePackerNative_Create failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //创建Pixelmap实例\n       OH_Pixelmap_InitializationOptions *createOpts;\n       OH_PixelmapInitializationOptions_Create(&createOpts);\n       OH_PixelmapInitializationOptions_SetWidth(createOpts, 6);\n       OH_PixelmapInitializationOptions_SetHeight(createOpts, 4);\n       OH_PixelmapInitializationOptions_SetPixelFormat(createOpts, 3);\n       OH_PixelmapInitializationOptions_SetAlphaType(createOpts, 0);\n       OH_PixelmapNative *pixelmap = nullptr;\n       errCode = OH_PixelmapNative_CreatePixelmap(buffer, bufferSize, createOpts, &pixelmap);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest OH_PixelmapNative_CreatePixelmap  failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //指定打包参数，将PixelMap图片源编码后直接打包进文件\n       OH_PackingOptions *option = nullptr;\n       OH_PackingOptions_Create(&option);\n       char type[] = \"image/jpeg\";\n       Image_MimeType image_MimeType = {type, strlen(type)};\n       OH_PackingOptions_SetMimeType(option, &image_MimeType);\n       errCode = OH_ImagePackerNative_PackToFileFromPixelmap(testPacker, option, pixelmap, fd);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest OH_ImagePackerNative_PackToFileFromPixelmap  failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //释放ImagePacker实例\n       errCode = OH_ImagePackerNative_Release(testPacker);\n       if (errCode != IMAGE_SUCCESS)\n       {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest ReleasePacker OH_ImagePackerNative_Release failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //释放Pixelmap实例\n       errCode = OH_PixelmapNative_Release(pixelmap);\n       if (errCode != IMAGE_SUCCESS)\n       {\n           OH_LOG_ERROR(LOG_APP, \"ImagePackerNativeCTest ReleasePacker OH_PixelmapNative_Release failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       return IMAGE_SUCCESS;\n   }
