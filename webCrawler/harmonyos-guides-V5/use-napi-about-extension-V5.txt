使用Node-API扩展能力接口
简介
扩展能力接口进一步扩展了Node-API的功能，提供了一些额外的接口，用于在Node-API模块中与ArkTS进行更灵活的交互和定制，这些接口可以用于创建自定义ArkTS对象等场景。
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
模块加载
[h2]接口描述
[h2]使用示例
napi_load_module
使用Node-API接口在主线程中进行模块加载
napi_load_module_with_info
使用Node-API接口进行模块加载
napi_module_register
在ArkTS代码环境中使用Node-API模块编写的代码来实现特定的功能，可以将这部分功能封装成自定义模块，然后通过napi_module_register将其注册到ArkTS代码环境中，以实现功能的扩展和复用。
cpp部分代码
#include \"napi/native_api.h\"\n\n// 此模块是一个Node-API的回调函数\nstatic napi_value Add(napi_env env, napi_callback_info info)\n{\n    // 接受传入两个参数\n    size_t requireArgc = 2;\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n\n    // 将传入的napi_value类型的参数转化为double类型\n    double valueLeft;\n    double valueRight;\n    napi_get_value_double(env, args[0], &valueLeft);\n    napi_get_value_double(env, args[1], &valueRight);\n\n    // 将转化后的double值相加并转成napi_value返回给ArkTS代码使用\n    napi_value sum;\n    napi_create_double(env, valueLeft + valueRight, &sum);\n\n    return sum;\n}\n\n// C++函数Init用于初始化插件，用于将ArkTS层的函数或属性与C++层的函数进行关联\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    // 通过napi_property_descriptor结构体，可以定义需要导出的属性，并在Node-API模块中使用。napi_define_properties将属性与实际的C++函数进行关联，使其可以被ArkTS层访问和调用\n    napi_property_descriptor desc[] = {\n        { \"add\", nullptr, Add, nullptr, nullptr, nullptr, napi_default, nullptr }\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END\n\n// 插件的初始化被定义在一个名为demoModule的结构体中，其中包含了模块的基本信息，比如模块的版本号、注册函数等\nstatic napi_module demoModule = {\n    .nm_version =1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = ((void*)0),\n    .reserved = { 0 },\n};\n\n// 在RegisterEntryModule函数中，使用napi_module_register函数注册并导出了这个插件\nextern \"C\" __attribute__((constructor)) void RegisterEntryModule(void)\n{\n    napi_module_register(&demoModule);\n}
接口声明
// index.d.ts\nexport const add: (a: number, b: number) => number;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nhilog.info(0x0000, 'testTag', 'Test Node-API 2 + 3 = %{public}d', testNapi.add(2, 3));
ArkTS Object相关
[h2]接口描述
[h2]使用示例
napi_create_object_with_properties
用给定的napi_property_descriptor作为属性去创建一个ArkTS对象，并且descriptor的键名必须为string，且不可转为number。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateObjectWithProperties(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value argv[1] = {nullptr};\n    // 获取解析传递的参数\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 声明了一个napi_property_descriptor数组desc，其中包含了一个名为\"name\"的属性，其值为传入的第一个参数argv[0]。\n    napi_property_descriptor desc[] = {\n        {\"name\", nullptr, nullptr, nullptr, nullptr, argv[0], napi_default_jsproperty, nullptr}};\n    napi_value object = nullptr;\n    // 调用napi_create_object_with_properties来创建一个新的ArkTS对象，并将属性值添加到该对象中。\n    napi_create_object_with_properties(env, &object, sizeof(desc) / sizeof(desc[0]), desc);\n    napi_valuetype valueType;\n    napi_typeof(env, object, &valueType);\n    if (valueType == napi_object) {\n        return object;\n    }\n}
接口声明
// index.d.ts\nexport const createObjectWithProperties: (data: string) => Object;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.createObjectWithProperties('createObject');\nhilog.info(0x0000, 'testTag', 'Node-API napi_create_object_with_properties:%{public}s', JSON.stringify(value));
napi_create_object_with_named_properties
用于使用给定的napi_value和键名创建一个ArkTS对象，并且给定的键名必须为string，且不可转为number。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateObjectWithNameProperties(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value argv[1] = {nullptr};\n    // 获取解析传递的参数\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    napi_value obj = nullptr;\n    const char *key[] = {\n        \"name\",\n    };\n    const napi_value values[] = {\n        argv[0],\n    };\n    napi_property_descriptor desc[] = {{\"name\", nullptr, nullptr,\n                                        nullptr, nullptr, nullptr, napi_default, nullptr}};\n    napi_status status;\n    status = napi_create_object_with_named_properties(env, &obj, sizeof(desc) / sizeof(desc[0]), key, values);\n    if (status != napi_ok) {\n        return argv[0];\n    }\n    return obj;\n}
接口声明
// index.d.ts\nexport const createObjectWithNameProperties: (data: string) => string | { name: string };
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.createObjectWithNameProperties('ls');\nhilog.info(0x0000, 'testTag', 'Node-API napi_create_object_with_named_properties:%{public}s', JSON.stringify(value));
运行指定abc文件
[h2]接口描述
[h2]使用示例
napi_run_script_path
在Node-API模块中运行abc文件。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value RunScriptPath(napi_env env, napi_callback_info info)\n{\n    napi_value value = nullptr;\n    // 注意：记得在应用rawfile目录下放置.abc文件\n    const char *scriptPath = \"/entry/resources/rawfile/test.abc\";\n    // 使用napi_run_script_path函数执行指定路径中的文件\n    napi_status status = napi_run_script_path(env, scriptPath, &value);\n    // 检查是否执行成功，如果失败，返回false\n    napi_value returnValue = nullptr;\n    if (value == nullptr || status != napi_ok) {\n        napi_get_boolean(env, false, &returnValue);\n    } else {\n        napi_get_boolean(env, true, &returnValue);\n    }\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const runScriptPath: () => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ntry {\n  // 在此处执行错误返回false，成功就返回true\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_run_script_path: %{public}s', testNapi.runScriptPath());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_run_script_path errorMessage: %{public}s', error.message);\n}
test.js代码，将js代码编成.abc文件，步骤如下:
在SDK的ets/build-tools/ets-loader/bin/ark/build-win/bin目录下放置test.js文件执行命令如es2abc.exe test.js --output test.abc后便可生成test.abc文件
放入指定路径中：/entry/resources/rawfile
function add(a, b) {\n  return a+b;\n}\nadd(1, 2);
异步工作对象加入队列并指定优先级
[h2]接口描述
[h2]使用示例
napi_queue_async_work_with_qos
将异步工作对象加到队列，由底层根据传入的qos优先级去调度执行。
给ArkTS对象绑定回调和回调所需的参数
[h2]接口描述
[h2]使用示例
napi_coerce_to_native_binding_object
用于给ArkTS Object绑定回调和回调所需的参数，给ArkTS Object携带Native信息。
cpp部分代码
#include <bits/alltypes.h>\n#include <hilog/log.h>\n#include <mutex>\n#include <unordered_set>\n#include <uv.h>\n#include \"napi/native_api.h\"\n\nclass Object {\npublic:\n    Object() = default;\n    ~Object() = default;\n\n    static Object* GetInstance()\n    {\n        Object* instance = new Object();\n        return instance;\n    }\n\n    static napi_value GetAddress(napi_env env, napi_callback_info info)\n    {\n        napi_value thisVar = nullptr;\n        napi_get_cb_info(env, info, nullptr, nullptr, &thisVar, nullptr);\n        if (thisVar == nullptr) {\n            return nullptr;\n        }\n        void* object = nullptr;\n        napi_unwrap(env, thisVar, &object);\n        if (object == nullptr) {\n            return nullptr;\n        }\n        uint64_t addressVal = reinterpret_cast<uint64_t>(object);\n        napi_value address = nullptr;\n        napi_create_bigint_uint64(env, addressVal, &address);\n        return address;\n    }\n\n    // 获取数组大小\n    static napi_value GetSetSize(napi_env env, napi_callback_info info)\n    {\n        napi_value thisVar = nullptr;\n        napi_get_cb_info(env, info, nullptr, nullptr, &thisVar, nullptr);\n        if (thisVar == nullptr) {\n            return nullptr;\n        }\n        void* object = nullptr;\n        napi_unwrap(env, thisVar, &object);\n        if (object == nullptr) {\n            return nullptr;\n        }\n        std::lock_guard<std::mutex> lock(reinterpret_cast<Object*>(object)->numberSetMutex_);\n        uint32_t setSize = reinterpret_cast<Object*>(object)->numberSet_.size();\n        napi_value napiSize = nullptr;\n        napi_create_uint32(env, setSize, &napiSize);\n        return napiSize;\n    }\n\n    // 往数组里插入元素\n    static napi_value Store(napi_env env, napi_callback_info info)\n    {\n        size_t argc = 1;\n        napi_value args[1] = {nullptr};\n        napi_value thisVar = nullptr;\n        napi_get_cb_info(env, info, &argc, args, &thisVar, nullptr);\n        if (argc != 1) {\n            napi_throw_error(env, nullptr, \"Store args number must be one.\");\n            return nullptr;\n        }\n        napi_valuetype type = napi_undefined;\n        napi_typeof(env, args[0], &type);\n        if (type != napi_number) {\n            napi_throw_error(env, nullptr, \"Store args is not number.\");\n            return nullptr;\n        }\n        if (thisVar == nullptr) {\n            return nullptr;\n        }\n        uint32_t value = 0;\n        napi_get_value_uint32(env, args[0], &value);\n        void* object = nullptr;\n        napi_unwrap(env, thisVar, &object);\n        if (object == nullptr) {\n            return nullptr;\n        }\n        std::lock_guard<std::mutex> lock(reinterpret_cast<Object*>(object)->numberSetMutex_);\n        reinterpret_cast<Object *>(object)-> numberSet_.insert(value);\n        return nullptr;\n    }\n\n    // 删除数组元素\n    static napi_value Erase(napi_env env, napi_callback_info info)\n    {\n        size_t argc = 1;\n        napi_value args[1] = {nullptr};\n        napi_value thisVar = nullptr;\n        napi_get_cb_info(env, info, &argc, args, &thisVar, nullptr);\n        if (argc != 1) {\n            napi_throw_error(env, nullptr, \"Erase args number must be one.\");\n            return nullptr;\n        }\n        napi_valuetype type = napi_undefined;\n        napi_typeof(env, args[0], &type);\n        if (type != napi_number) {\n            napi_throw_error(env, nullptr, \"Erase args is not number.\");\n            return nullptr;\n        }\n        if (thisVar == nullptr) {\n            return nullptr;\n        }\n        uint32_t value = 0;\n        napi_get_value_uint32(env, args[0], &value);\n        void* object = nullptr;\n        napi_unwrap(env, thisVar, &object);\n        if (object == nullptr) {\n            return nullptr;\n        }\n        std::lock_guard<std::mutex> lock(reinterpret_cast<Object*>(object)->numberSetMutex_);\n        reinterpret_cast<Object *>(object)->numberSet_.erase(value);\n        return nullptr;\n    }\n\n    // 清空数组\n    static napi_value Clear(napi_env env, napi_callback_info info)\n    {\n        napi_value thisVar = nullptr;\n        napi_get_cb_info(env, info, nullptr, nullptr, &thisVar, nullptr);\n        if (thisVar == nullptr) {\n            return nullptr;\n        }\n        void* object = nullptr;\n        napi_unwrap(env, thisVar, &object);\n        if (object == nullptr) {\n            return nullptr;\n        }\n        std::lock_guard<std::mutex> lock(reinterpret_cast<Object*>(object)->numberSetMutex_);\n        reinterpret_cast<Object *>(object)->numberSet_.clear();\n        return nullptr;\n    }\n\nprivate:\n    Object(const Object &) = delete;\n    Object &operator=(const Object &) = delete;\n\n    std::unordered_set<uint32_t> numberSet_{};\n    std::mutex numberSetMutex_{};\n};\n\nvoid FinializerCallback(napi_env env, void *data, void *hint)\n{\n    return;\n}\n\n// 解绑回调，在序列化时调用，可在对象解绑时执行一些清理操作\nvoid* DetachCallback(napi_env env, void *value, void *hint)\n{\n    return value;\n}\n\n// 绑定回调，在反序列化时调用\nnapi_value AttachCallback(napi_env env, void* value, void* hint)\n{\n    napi_value object = nullptr;\n    napi_create_object(env, &object);\n    napi_property_descriptor desc[] = {\n        {\"getAddress\", nullptr, Object::GetAddress, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"getSetSize\", nullptr, Object::GetSetSize, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"store\", nullptr, Object::Store, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"erase\", nullptr, Object::Erase, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"clear\", nullptr, Object::Clear, nullptr, nullptr, nullptr, napi_default, nullptr}};\n    napi_define_properties(env, object, sizeof(desc) / sizeof(desc[0]), desc);\n    // 将JS对象object和native对象value生命周期进行绑定\n    napi_status status = napi_wrap(env, object, value, FinializerCallback, nullptr, nullptr);\n    if (status != napi_ok) {\n        OH_LOG_INFO(LOG_APP, \"Node-API attachCallback is failed.\");\n    }\n    // JS对象携带native信息\n    napi_coerce_to_native_binding_object(env, object, DetachCallback, AttachCallback, value, hint);\n    return object;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        {\"getAddress\", nullptr, Object::GetAddress, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"getSetSize\", nullptr, Object::GetSetSize, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"store\", nullptr, Object::Store, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"erase\", nullptr, Object::Erase, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"clear\", nullptr, Object::Clear, nullptr, nullptr, nullptr, napi_default, nullptr}};\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    auto object = Object::GetInstance();\n    napi_status status = napi_wrap(env, exports, reinterpret_cast<void*>(object), FinializerCallback, nullptr, nullptr);\n    if (status != napi_ok) {\n        delete object;\n    }\n    napi_coerce_to_native_binding_object(env, exports, DetachCallback, AttachCallback, reinterpret_cast<void*>(object),\n                                         nullptr);\n    return exports;\n}\nEXTERN_C_END\n\nstatic napi_module demoModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = ((void*)0),\n    .reserved = { 0 },\n};\n\nextern \"C\" __attribute__((constructor)) void RegisterEntryModule(void)\n{\n    napi_module_register(&demoModule);\n}
接口声明
// index.d.ts\nexport const getAddress: () => number;\nexport const getSetSize: () => number;\nexport const store: (a: number) => void;\nexport const erase: (a: number) => void;\nexport const clear: () => void;
ArkTS侧示例代码
// index.ets\nimport testNapi from 'libentry.so';\nimport taskpool from '@ohos.taskpool';\n\n@Concurrent\nfunction getAddress() {\n  let address: number = testNapi.getAddress();\n  console.info(\"taskpool:: address is \" + address);\n}\n\n@Concurrent\nfunction store(a:number, b:number, c:number) {\n  let size:number = testNapi.getSetSize();\n  console.info(\"set size is \" + size + \" before store\");\n  testNapi.store(a);\n  testNapi.store(b);\n  testNapi.store(c);\n  size = testNapi.getSetSize();\n  console.info(\"set size is \" + size + \" after store\");\n}\n\n@Concurrent\nfunction erase(a:number) {\n  let size:number = testNapi.getSetSize();\n  console.info(\"set size is \" + size + \" before erase\");\n  testNapi.erase(a);\n  size = testNapi.getSetSize();\n  console.info(\"set size is \" + size + \" after erase\");\n}\n\n@Concurrent\nfunction clear() {\n  let size:number = testNapi.getSetSize();\n  console.info(\"set size is \" + size + \" before clear\");\n  testNapi.clear();\n  size = testNapi.getSetSize();\n  console.info(\"set size is \" + size + \" after clear\");\n}\n\nasync function test01(): Promise<void> {\n    let address:number = testNapi.getAddress();\n    console.info(\"host thread address is \" + address);\n\n    let task1 = new taskpool.Task(getAddress);\n    await taskpool.execute(task1);\n\n    let task2 = new taskpool.Task(store, 1, 2, 3);\n    await taskpool.execute(task2);\n\n    let task3 = new taskpool.Task(store, 4, 5, 6);\n    await taskpool.execute(task3);\n\n    let task4 = new taskpool.Task(erase, 3);\n    await taskpool.execute(task4);\n\n    let task5 = new taskpool.Task(erase, 5);\n    await taskpool.execute(task5);\n\n    let task6 = new taskpool.Task(clear);\n    await taskpool.execute(task6);\n}\n\ntest01();
注意事项
对ArkTs对象A调用napi_coerce_to_native_binding_object将开发者实现的detach/attach回调和native对象信息加到A上，再将A跨线程传递。跨线程传递需要对A进行序列化和反序列化，在当前线程thread1序列化A得到数据data，序列化阶段执行detach回调。然后将data传给目标线程thread2，在thread2中反序列化data，执行attach回调，最终得到ArkTS对象A。
事件循环
[h2]接口描述
[h2]使用示例
napi_run_event_loop、napi_stop_event_loop
使用扩展的Node-API接口在异步线程中运行和停止事件循环
ArkTS基础运行时环境
[h2]接口描述
[h2]使用示例
napi_create_ark_runtime、napi_destroy_ark_runtime
使用Node-API接口创建ArkTS运行时环境
序列化和反序列化
[h2]接口描述
[h2]使用示例
napi_serialize、napi_deserialize、napi_delete_serialization_data
用于将ArkTS对象转换为native数据、将native数据转为ArkTS对象、删除序列化数据等操作。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value AboutSerialize(napi_env env, napi_callback_info info)\n{\n    // 获取传入的ts的一个对象作为参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    napi_value undefined = nullptr;\n    // 构造napi_serialize方法所需参数\n    napi_get_undefined(env, &undefined);\n    void *data = nullptr;\n    // 调用napi_serialize方法将ts对象转化为native数据\n    napi_status status = napi_serialize(env, args[0], undefined, undefined, &data);\n    if (status != napi_ok ||data == nullptr) {\n        napi_throw_error(env, nullptr, \"Node-API napi_serialize fail\");\n        return nullptr;\n    }\n    // 构造napi_value类型的数据，用于接收将native数据转化为ts对象后的数据\n    napi_value result = nullptr;\n    napi_deserialize(env, data, &result);\n    napi_value number = nullptr;\n    // 获取native数据转化为ts对象后的数据中的numKey属性的值\n    napi_get_named_property(env, result, \"numKey\", &number);\n    // 判断获取到的属性值是否为number类型\n    napi_valuetype valuetype;\n    napi_typeof(env, number, &valuetype);\n    if (valuetype != napi_number) {\n        napi_throw_error(env, nullptr, \"Node-API Wrong type of argument. Expects a number.\");\n        return nullptr;\n    }\n    // 调用napi_delete_serialization_data方法删除序列化数据\n    napi_delete_serialization_data(env, data);\n    // 返回获取到的属性值\n    return number;\n}
接口声明
// index.d.ts\nexport const aboutSerialize: (obj: Object) => number;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nclass Obj {\n  numKey:number = 0;\n}\nlet obj: Obj = { numKey: 500 };\nhilog.info(0x0000, 'testTag', ' Node-API aboutSerialize: %{public}d', testNapi.aboutSerialize(obj));
根据任务指定的优先级和入队方式进行处理异步线程向ArkTS线程投递的任务
[h2]接口描述
[h2]使用示例
napi_call_threadsafe_function_with_priority
使用Node-API接口从异步线程向ArkTS线程投递指定优先级和入队方式的的任务
Sendable相关
[h2]接口描述
[h2]使用示例
napi_is_sendable
判断给定ArkTS value是否是Sendable的。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value IsSendable(napi_env env, napi_callback_info info) {\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    bool isSendable = false;\n    napi_is_sendable(env, args[0], &isSendable);\n    napi_value result;\n    napi_get_boolean(env, isSendable, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const isSendable: <T>(a: T) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.isSendable('createObject');\nhilog.info(0x0000, 'testTag', 'Node-API napi_is_sendable: %{public}s', JSON.stringify(value));
napi_define_sendable_class
创建一个sendable类。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value func(napi_env env, napi_callback_info info) {\n    napi_value val;\n    napi_create_string_utf8(env, \"func result\", NAPI_AUTO_LENGTH, &val);\n    return val;\n}\n\nstatic napi_value DefineSendableClass(napi_env env) {\n    napi_value str;\n    napi_create_string_utf8(env, \"str\", NAPI_AUTO_LENGTH, &str);\n\n    napi_property_descriptor props[] = {\n        {\"staticStr\", nullptr, nullptr, nullptr, nullptr, str,\n         static_cast<napi_property_attributes>(napi_static | napi_writable), nullptr},\n        {\"staticFunc\", nullptr, func, nullptr, nullptr, nullptr, napi_static, nullptr},\n        {\"str\", nullptr, nullptr, nullptr, nullptr, str, static_cast<napi_property_attributes>(1 << 9 | napi_writable),\n         nullptr},\n        {\"func\", nullptr, nullptr, nullptr, nullptr, nullptr,\n         static_cast<napi_property_attributes>(1 << 11 | napi_writable), nullptr},\n    };\n\n    napi_value sendableClass = nullptr;\n    napi_define_sendable_class(\n        env, \"SendableClass\", NAPI_AUTO_LENGTH,\n        [](napi_env env, napi_callback_info info) -> napi_value {\n            napi_value thisVar = nullptr;\n            napi_get_cb_info(env, info, nullptr, nullptr, &thisVar, nullptr);\n            napi_value str;\n            napi_create_string_utf8(env, \"instance str\", NAPI_AUTO_LENGTH, &str);\n            napi_property_descriptor props[] = {\n                {\"str\", nullptr, nullptr, nullptr, nullptr, str, napi_default, nullptr},\n                {\"func\", nullptr, func, nullptr, nullptr, nullptr, napi_default, nullptr},\n            };\n            napi_define_properties(env, thisVar, sizeof(props) / sizeof(props[0]), props);\n            return thisVar;\n        },\n        nullptr, sizeof(props) / sizeof(props[0]), props, nullptr, &sendableClass);\n\n    return sendableClass;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {};\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    napi_value cons = DefineSendableClass(env);\n    napi_set_named_property(env, exports, \"SendableClass\", cons);\n    return exports;\n}\nEXTERN_C_END\n\nstatic napi_module demoModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = ((void*)0),\n    .reserved = { 0 },\n};\n\nextern \"C\" __attribute__((constructor)) void RegisterEntryModule(void)\n{\n    napi_module_register(&demoModule);\n}
接口声明
// index.d.ts\n@Sendable\nexport class SendableClass {\n  static staticStr: string;\n  static staticFunc(): string;\n  str: string;\n  func(): string;\n}
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = new testNapi.SendableClass();\nhilog.info(0x0000, 'testTag', 'Node-API napi_define_sendable_class: %{public}s', value.str);
napi_create_sendable_object_with_properties
使用给定的napi_property_descriptor创建一个sendable对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetSendableObject(napi_env env, napi_callback_info info) {\n    napi_value val_true;\n    napi_get_boolean(env, true, &val_true);\n    napi_property_descriptor desc1[] = {\n        {\"x\", nullptr, nullptr, nullptr, nullptr, val_true, napi_default_jsproperty, nullptr},\n    };\n    napi_value obj;\n    napi_create_sendable_object_with_properties(env, 1, desc1, &obj);\n    return obj;\n}
接口声明
// index.d.ts\nexport const getSendableObject: () => { x: true };
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.getSendableObject();\nhilog.info(0x0000, 'testTag', 'Node-API napi_create_sendable_object_with_properties: %{public}s', JSON.stringify(value));
napi_create_sendable_array
创建一个sendable数组。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetSendableArray(napi_env env, napi_callback_info info) {\n    napi_value result = nullptr;\n    napi_create_sendable_array(env, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const getSendableArray: () => [];
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.getSendableArray();\nhilog.info(0x0000, 'testTag', 'Node-API napi_create_sendable_array: %{public}s', JSON.stringify(value));
napi_create_sendable_array_with_length
创建一个指定长度的sendable数组。
cpp部分代码
static napi_value GetSendableArrayWithLength(napi_env env, napi_callback_info info) {\n    napi_value result = nullptr;\n    napi_create_sendable_array_with_length(env, 1, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const getSendableArrayWithLength: () => [];
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.getSendableArrayWithLength();\nhilog.info(0x0000, 'testTag', 'Node-API napi_create_sendable_array_with_length: %{public}s', JSON.stringify(value.length));
napi_create_sendable_arraybuffer
创建一个sendable ArrayBuffer。
cpp部分代码
#include \"napi/native_api.h\"\n#include \"hilog/log.h\"\n\nstatic napi_value GetSendableArrayBuffer(napi_env env, napi_callback_info info) {\n    static size_t LENGTH = 1024;\n    void *data;\n    napi_value result = nullptr;\n    napi_create_sendable_arraybuffer(env, LENGTH, &data, &result);\n    bool isArrayBuffer = false;\n    napi_is_arraybuffer(env, result, &isArrayBuffer);\n    OH_LOG_INFO(LOG_APP, \"isArrayBuffer: %{public}d\", isArrayBuffer);\n    return result;\n}
接口声明
// index.d.ts\nexport const getSendableArrayBuffer: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ntestNapi.getSendableArrayBuffer();
napi_create_sendable_typedarray
创建一个sendable TypedArray。
cpp部分代码
#include \"napi/native_api.h\"\n#include \"hilog/log.h\"\n\nstatic napi_value GetSendableTypedArray(napi_env env, napi_callback_info info) {\n    static size_t LENGTH = 1024;\n    static size_t OFFSET = 0;\n    void *data;\n    napi_value arraybuffer = nullptr;\n    napi_create_sendable_arraybuffer(env, LENGTH, &data, &arraybuffer);\n\n    napi_value result = nullptr;\n    napi_create_sendable_typedarray(env, napi_uint8_array, LENGTH, arraybuffer, OFFSET, &result);\n    bool isTypedArray = false;\n    napi_is_typedarray(env, result, &isTypedArray);\n    OH_LOG_INFO(LOG_APP, \"isTypedArray: %{public}d\", isTypedArray);\n    return result;\n}
接口声明
// index.d.ts\nexport const getSendableTypedArray: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ntestNapi.getSendableTypedArray();
napi_wrap_sendable
包裹一个native实例到ArkTS对象中。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value WrapSendable(napi_env env, napi_callback_info info) {\n    napi_value val_true;\n    napi_get_boolean(env, true, &val_true);\n    napi_property_descriptor desc1[] = {\n        {\"x\", nullptr, nullptr, nullptr, nullptr, val_true, napi_default_jsproperty, nullptr},\n    };\n    napi_value obj;\n    napi_create_sendable_object_with_properties(env, 1, desc1, &obj);\n\n    const char* testStr = \"test\";\n    napi_wrap_sendable(env, obj, (void*)testStr, [](napi_env env, void* data, void* hint) {}, nullptr);\n\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const wrapSendable: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ntestNapi.wrapSendable();
napi_wrap_sendable_with_size
包裹一个native实例到ArkTS对象中并指定大小。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value WrapSendableWithSize(napi_env env, napi_callback_info info) {\n    napi_value val_true;\n    napi_get_boolean(env, true, &val_true);\n    napi_property_descriptor desc1[] = {\n        {\"x\", nullptr, nullptr, nullptr, nullptr, val_true, napi_default_jsproperty, nullptr},\n    };\n    napi_value obj;\n    napi_create_sendable_object_with_properties(env, 1, desc1, &obj);\n\n    const char* testStr = \"test\";\n    napi_wrap_sendable_with_size(env, obj, (void*)testStr, [](napi_env env, void* data, void* hint) {}, nullptr, 100);\n\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const wrapSendableWithSize: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ntestNapi.wrapSendableWithSize();
napi_unwrap_sendable
获取ArkTS对象包裹的native实例。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value UnwrapSendable(napi_env env, napi_callback_info info) {\n    napi_value val_true;\n    napi_get_boolean(env, true, &val_true);\n    napi_property_descriptor desc1[] = {\n        {\"x\", nullptr, nullptr, nullptr, nullptr, val_true, napi_default_jsproperty, nullptr},\n    };\n    napi_value obj;\n    napi_create_sendable_object_with_properties(env, 1, desc1, &obj);\n\n    const char* testStr = \"test\";\n    napi_wrap_sendable(env, obj, (void*)testStr, [](napi_env env, void* data, void* hint) {}, nullptr);\n\n    char* tmpTestStr = nullptr;\n    napi_unwrap_sendable(env, obj, (void**)&tmpTestStr);\n    OH_LOG_INFO(LOG_APP, \"native value is %{public}s\", tmpTestStr);\n\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const unwrapSendable: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ntestNapi.unwrapSendable();
napi_remove_wrap_sendable
移除并获取ArkTS对象包裹的native实例。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value RemoveWrapSendable(napi_env env, napi_callback_info info) {\n    napi_value val_true;\n    napi_get_boolean(env, true, &val_true);\n    napi_property_descriptor desc1[] = {\n        {\"x\", nullptr, nullptr, nullptr, nullptr, val_true, napi_default_jsproperty, nullptr},\n    };\n    napi_value obj;\n    napi_create_sendable_object_with_properties(env, 1, desc1, &obj);\n\n    const char* testStr = \"test\";\n    napi_wrap_sendable(env, obj, (void*)testStr, [](napi_env env, void* data, void* hint) {}, nullptr);\n\n    char* tmpTestStr = nullptr;\n    napi_remove_wrap_sendable(env, obj, (void**)&tmpTestStr);\n    OH_LOG_INFO(LOG_APP, \"native value is %{public}s\", tmpTestStr);\n\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const removeWrapSendable: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ntestNapi.removeWrapSendable();
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
