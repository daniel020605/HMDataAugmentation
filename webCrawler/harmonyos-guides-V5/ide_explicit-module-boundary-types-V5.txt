@typescript-eslint/explicit-module-boundary-types
导出到外部的函数和公共类方法，需要显式的定义返回类型和参数类型。
该规则仅支持对.js/.ts文件进行检查。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/explicit-module-boundary-types\": \"error\"\n  }\n}
选项
详情请参考@typescript-eslint/explicit-module-boundary-types选项。
正例
// A function with no return value (void)\nexport function test1(): void {\n  return;\n}\n\n// A return value of type string\nexport const arrowFn1 = (): string => 'test';\n\n// All arguments should be typed\nexport const arrowFn2 = (arg: string): string => `test ${arg}`;\n\nexport class Test {\n  // A class method with no return value (void)\n  public method(): void {\n    return;\n  }\n}\n\n// The function does not apply because it is not an exported function.\nfunction test2() {\n  return;\n}\n\ntest2();
反例
// Should indicate that no value is returned (void)\nexport function test() {\n  return;\n}\n\n// Should indicate that a string is returned\nexport const arrowFn = () => 'test';\n\n// All arguments should be typed\nexport const arrowFn = (arg): string => `test ${arg}`;\nexport const arrowFn = (arg: any): string => `test ${arg}`;\n\nexport class Test {\n  // Should indicate that no value is returned (void)\n  public method() {\n    return;\n  }\n}
规则集
plugin:@typescript-eslint/recommended\nplugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
