应用接入状态栏
应用接入状态栏之后，状态栏会显示应用自定义的图标，图标提供左键显示自定义弹窗以及右键显示菜单的功能；应用退出时，状态栏图标会随着应用进程的销毁而消失。
接口说明
以下列出应用接入状态栏的相关API，具体API说明详见接口文档。
接口名
描述
addToStatusBar(context: common.Context, statusbarItem: StatusBarItem): void
添加应用图标到状态栏。
removeFromStatusBar(context: common.Context): void
移除状态栏的应用图标。
updateQuickOperationHeight(context: common.Context, height: number): void
更新状态栏图标左键弹窗应用定制区域的高度。
updateStatusBarMenu(context: common.Context, statusBarGroupMenus: Array<StatusBarGroupMenu>): void
更新接入状态栏图标的右键菜单内容。
updateStatusBarIcon(context: common.Context, statusBarIcon: StatusBarIcon): void
更新状态栏图标。
开发步骤
 导入相关模块。import { statusBarManager, StatusBarViewExtensionAbility } from '@kit.StatusBarExtensionKit';\nimport { UIExtensionContentSession, Want } from '@kit.AbilityKit';\nimport { image } from '@kit.ImageKit';  新建一个MyStatusBarViewAbility.ets文件（例如在entry/src/main/ets/statusbarviewextensionability文件夹下），同时新建一个StatusBarPage的页面（例如在entry/src/main/ets/pages目录下），该页面用于在状态栏图标的左键业务弹窗中显示，然后构建自定义的StatusBarViewExtensionAbility。let TAG = 'MyStatusBarViewExtAbility';\nexport default class MyStatusBarViewAbility extends StatusBarViewExtensionAbility {\n  onCreate() {\n    console.info(TAG, `onCreate`);\n  }\n\n  onSessionCreate(want: Want, session: UIExtensionContentSession) {\n    console.info(TAG, `onSessionCreate, want: ${want.abilityName}`);\n    // pages/StatusBarPage为状态栏图标左键业务弹窗显示的页面\n    session.loadContent('pages/StatusBarPage');\n  }\n\n  onForeground() {\n    console.info(TAG, `onForeground`);\n  }\n\n  onBackground() {\n    console.info(TAG, `onBackground`);\n  }\n\n  onSessionDestroy(session: UIExtensionContentSession) {\n    console.info(TAG, `onSessionDestroy`);\n  }\n\n  onDestroy() {\n    console.info(TAG, `onDestroy`);\n  }\n}  在MyStatusBarViewAbility所在模块下的module.json5文件中配置状态栏扩展Ability的信息。\"extensionAbilities\": [\n  {\n    \"name\": \"MyStatusBarViewAbility\",\n    \"icon\": \"$media:startIcon\",\n    \"description\": \"statusBar\",\n    \"type\": \"statusBarView\",\n    \"exported\": true,\n    // 此处为MyStatusBarViewAbility类所在的文件路径\n    \"srcEntry\": \"./ets/statusbarviewextensionability/MyStatusBarViewAbility.ets\"\n  }\n]  在对应模块的rawfile文件夹（例如entry/src/main/resources/rawfile）下预置两张24vp * 24vp尺寸的图片（例如本示例中testWhite.png和testBlack.png两张图片），配置应用接入状态栏显示的图标信息。let context = getContext(this);\n// 获取resourceManager资源管理器\nconst resourceMgr = context.resourceManager;\n\n// 创建white pixelMap，需在资源rawfile文件夹中预置testWhite.png图片，图片大小为24vp * 24vp\nconst whiteFileData = resourceMgr.getRawFileContentSync('testWhite.png');\nconst whiteBuffer = whiteFileData.buffer;\nconst whiteImageSource = image.createImageSource(whiteBuffer);\nlet whitePixelMap = await whiteImageSource.createPixelMap();\n\n// 创建black pixelMap，需在资源rawfile文件夹中预置testBlack.png图片，图片大小为24vp * 24vp\nconst blackFileData = resourceMgr.getRawFileContentSync('testBlack.png');\nconst blackBuffer = blackFileData.buffer;\nconst blackImageSource = image.createImageSource(blackBuffer);\nlet blackPixelMap = await blackImageSource.createPixelMap();\n\n// 构建图标信息\nlet icon: statusBarManager.StatusBarIcon = {\n  white: whitePixelMap,\n  black: blackPixelMap\n}  配置状态栏左键点击弹窗相关信息。// 构建左键业务弹窗信息\nlet operation: statusBarManager.QuickOperation = {\n  // 此处abilityName为上述配置的module.json5中配置的自定义StatusBarViewExtensionAbility名称\n  abilityName: \"MyStatusBarViewAbility\",\n  title: \"测试Demo\",\n  height: 300,\n  // 可缺省\n  moduleName: 'entry'\n};  （可选）配置状态栏右键菜单内容信息，可在状态栏图标的右键菜单中增加自定义菜单选项。// 构建右键菜单项内容\nlet subMenus: Array<statusBarManager.StatusBarSubMenuItem> = [];\nlet subMenuItemAction: statusBarManager.StatusBarMenuAction = {\n  abilityName: \"EntryAbility\"\n}\nlet subMenu: statusBarManager.StatusBarSubMenuItem = {\n  subTitle: \"子菜单项\",\n  menuAction: subMenuItemAction\n}\nsubMenus.push(subMenu);\n\nlet statusBarMenuItems: Array<statusBarManager.StatusBarMenuItem> = [];\nlet menuItem: statusBarManager.StatusBarMenuItem = {\n  title: \"一级菜单项\",\n  // 一级menuAction和subMenu两项不可都缺省\n  subMenu: subMenus\n};\nstatusBarMenuItems.push(menuItem);\n\nlet statusBarGroupMenus: Array<statusBarManager.StatusBarGroupMenu> = [];\nstatusBarGroupMenus.push(statusBarMenuItems);  整合配置信息，接入状态栏，显示应用图标。// 构建添加到状态栏的图标详细信息\nlet item: statusBarManager.StatusBarItem = {\n  icons: icon,\n  quickOperation: operation,\n  // 该参数可选\n  statusBarGroupMenu: statusBarGroupMenus\n};\n\ntry {\n  statusBarManager.addToStatusBar(context, item);\n} catch (error) {\n  console.error(`addToStatusBar failed. error code: ${error.code}, error message: ${error.message}`);\n}  （可选）应用接入状态栏之后，可以通过updateStatusBarMenu接口更新状态栏的右键菜单。// 构建右键菜单项内容\nlet subMenus: Array<statusBarManager.StatusBarSubMenuItem> = [];\nlet subMenuItemAction: statusBarManager.StatusBarMenuAction = {\n  abilityName: \"EntryAbility\"\n}\nlet subMenu: statusBarManager.StatusBarSubMenuItem = {\n  subTitle: \"二级菜单项\",\n  menuAction: subMenuItemAction\n}\nsubMenus.push(subMenu);\n\nlet statusBarMenuItems: Array<statusBarManager.StatusBarMenuItem> = [];\nlet menuItem: statusBarManager.StatusBarMenuItem = {\n  title: \"一级菜单项\",\n  // 一级menuAction和subMenu两项不可都缺省\n  subMenu: subMenus\n};\nstatusBarMenuItems.push(menuItem);\n\nlet statusBarGroupMenus: Array<statusBarManager.StatusBarGroupMenu> = [];\nstatusBarGroupMenus.push(statusBarMenuItems);\n\nlet context = getContext(this);\ntry {\n  statusBarManager.updateStatusBarMenu(context, statusBarGroupMenus);\n} catch (error) {\n  console.error(`updateStatusBarMenu failed. error code: ${error.code}, error message: ${error.message}`);\n}  （可选）应用接入状态栏之后，可以通过updateQuickOperationHeight接口更新状态栏图标左键业务弹窗的高度。let context = getContext(this);\nlet height = 200;\nstatusBarManager.updateQuickOperationHeight(context, height);  （可选）应用接入状态栏之后，可以通过updateStatusBarIcon接口将状态栏中对应的应用图标进行更改。let context = getContext(this);\n// 获取resourceManager资源管理器\nconst resourceMgr = context.resourceManager;\n\n// 创建white pixelMap，需在资源rawfile文件夹中预置testWhite.png图片，图片大小为24vp * 24vp\nconst whiteFileData = resourceMgr.getRawFileContentSync('testWhite.png');\nconst whiteBuffer = whiteFileData.buffer;\nconst whiteImageSource = image.createImageSource(whiteBuffer);\nlet whitePixelMap = await whiteImageSource.createPixelMap();\n\n// 创建black pixelMap，需在资源rawfile文件夹中预置testBlack.png图片，图片大小为24vp * 24vp\nconst blackFileData = resourceMgr.getRawFileContentSync('testBlack.png');\nconst blackBuffer = blackFileData.buffer;\nconst blackImageSource = image.createImageSource(blackBuffer);\nlet blackPixelMap = await blackImageSource.createPixelMap();\n\n// 构建图标信息\nlet icons: statusBarManager.StatusBarIcon = {\n  white: whitePixelMap,\n  black: blackPixelMap\n}\nstatusBarManager.updateStatusBarIcon(context, icons);  
