属性更新器 (AttributeUpdater)
概述
在大量属性频繁更新的场景下，使用状态变量可能导致前端状态管理的计算量过大，并且需要对单个组件进行全量属性更新。尽管可以通过AttributeModifier机制实现按需更新属性，但前端仍会采用一定的diff和reset策略，这可能带来性能问题。
AttributeUpdater作为一个特殊的AttributeModifier，不仅继承了AttributeModifier的功能，还提供了直接获取属性对象的能力。通过属性对象，开发者能够直接更新对应属性，无需经过状态变量。开发者可以利用AttributeUpdater实现自定义的更新策略，从而进一步提升属性更新的性能。
由于AttributeUpdater提供了较高的灵活性，无法限制“单一数据源”的规则，因此在与状态变量同时更新同一属性时，存在相互覆盖的情况。这要求开发者必须确保属性设置的合理性。
接口定义
export declare class AttributeUpdater<T, C = Initializer<T>> implements AttributeModifier<T> {\n\n  applyNormalAttribute?(instance: T): void;\n\n  initializeModifier(instance: T): void;\n\n  get attribute(): T | undefined;\n\n  updateConstructorParams: C;\n}
AttributeUpdater实现了AttributeModifier接口，并额外提供了initializeModifier，可以对组件的属性进行初始化。通过attribute属性方法可以获取属性对象，直接更新对应组件的属性。另外也可以直接通过updateConstructorParams更新组件的构造参数。
使用说明
 开发者可以继承AttributeUpdater<T>类，并通过组件的通用方法attributeModifier设置，首次绑定时会触发initializeModifier方法，进行属性的初始化，后续其它的生命周期和AttributeModifier保持一致。 组件初始化完成之后，开发者可以通过AttributeUpdater实例的attribute属性方法，获取到属性对象，若获取不到则为undefined。 通过attribute属性对象直接修改属性，会将最新设置的属性记录在当前对象中，并立即触发组件属性的更新。 如果将AttributeUpdater实例标记为状态变量进行修改，或者通过其它状态变量更新对应组件的属性，会触发applyNormalAttribute的流程，如果开发者没有复写该逻辑，默认会将属性对象记录的所有属性，进行一次批量更新。 如果开发者复写applyNormalAttribute的逻辑，并且不调用super的该方法，将会失去获取attribute属性对象的能力，不会调用initializeModifier方法。 一个AttributeUpdater对象只能同时关联一个组件，否则只会有一个组件的属性设置生效。 
通过modifier直接修改属性
组件初始化完成之后，开发者可以通过AttributeUpdater实例的attribute属性方法，获取到属性对象。通过属性对象直接修改属性，会立即触发组件属性的更新。
import { AttributeUpdater } from '@ohos.arkui.modifier'\n\nclass MyButtonModifier extends AttributeUpdater<ButtonAttribute> {\n  // 首次绑定时触发initializeModifier方法，进行属性初始化\n  initializeModifier(instance: ButtonAttribute): void {\n    instance.backgroundColor('#2787D9')\n      .width('50%')\n      .height(30)\n  }\n}\n\n@Entry\n@Component\nstruct updaterDemo {\n  modifier: MyButtonModifier = new MyButtonModifier()\n\n  build() {\n    Row() {\n      Column() {\n        Button(\"Button\")\n          .attributeModifier(this.modifier)\n          .onClick(() => {\n            // 通过attribute，直接修改组件属性，并立即触发组件属性更新\n            this.modifier.attribute?.backgroundColor('#17A98D').width('30%')\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
通过modifier更新组件的构造参数
可以通过AttributeUpdater实例的updateConstructorParams方法，直接更新组件的构造参数。
import { AttributeUpdater } from '@ohos.arkui.modifier'\n\nclass MyTextModifier extends AttributeUpdater<TextAttribute, TextInterface> {\n  initializeModifier(instance: TextAttribute): void {\n  }\n}\n\n@Entry\n@Component\nstruct updaterDemo {\n  modifier: MyTextModifier = new MyTextModifier()\n\n  build() {\n    Row() {\n      Column() {\n        Text(\"Text\")\n          .attributeModifier(this.modifier)\n          .fontColor(Color.White)\n          .fontSize(14)\n          .border({ width: 1 })\n          .textAlign(TextAlign.Center)\n          .lineHeight(20)\n          .width(200)\n          .height(50)\n          .backgroundColor('#2787D9')\n          .onClick(() => {\n            // 调用updateConstructorParams方法，直接更新组件的构造参数\n            this.modifier.updateConstructorParams('Update');\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
