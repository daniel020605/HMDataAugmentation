密钥派生(C/C++)
以HKDF256密钥为例，完成密钥派生。具体的场景介绍及支持的算法规格，请参考密钥生成支持的算法。
在CMake脚本中链接相关动态库
target_link_libraries(entry PUBLIC libhuks_ndk.z.so)
开发步骤
生成密钥
 指定密钥别名。 初始化密钥属性集，可指定参数，OH_HUKS_TAG_DERIVED_AGREED_KEY_STORAGE_FLAG（可选），用于标识基于该密钥派生出的密钥是否由HUKS管理。  当TAG设置为OH_HUKS_STORAGE_ONLY_USED_IN_HUKS时，表示基于该密钥派生出的密钥，由HUKS管理，可保证派生密钥全生命周期不出安全环境。 当TAG设置为OH_HUKS_STORAGE_KEY_EXPORT_ALLOWED时，表示基于该密钥派生出的密钥，返回给调用方管理，由业务自行保证密钥安全。 若业务未设置TAG的具体值，表示基于该密钥派生出的密钥，即可由HUKS管理，也可返回给调用方管理，业务可在后续派生时再选择使用何种方式保护密钥。  调用OH_Huks_GenerateKeyItem生成密钥，具体请参考密钥生成。 
除此之外，开发者也可以参考密钥导入，导入已有的密钥。
密钥派生
 获取密钥别名，指定对应的属性参数HuksOptions。 可指定参数OH_HUKS_TAG_DERIVED_AGREED_KEY_STORAGE_FLAG（可选），用于标识派生得到的密钥是否由HUKS管理。     生成 派生 规格    OH_HUKS_STORAGE_ONLY_USED_IN_HUKS OH_HUKS_STORAGE_ONLY_USED_IN_HUKS 密钥由HUKS管理   OH_HUKS_STORAGE_KEY_EXPORT_ALLOWED OH_HUKS_STORAGE_KEY_EXPORT_ALLOWED 密钥返回给调用方管理   未指定TAG具体值 OH_HUKS_STORAGE_ONLY_USED_IN_HUKS 密钥由HUKS管理   未指定TAG具体值 OH_HUKS_STORAGE_KEY_EXPORT_ALLOWED 密钥返回给调用方管理   未指定TAG具体值 未指定TAG具体值 密钥返回给调用方管理    注：派生时指定的TAG值，不可与生成时指定的TAG值冲突。表格中仅列举有效的指定方式。 调用OH_Huks_InitSession初始化密钥会话，并获取会话的句柄handle。 调用OH_Huks_UpdateSession更新密钥会话。 调用OH_Huks_FinishSession结束密钥会话，完成派生。 
删除密钥
当密钥废弃不用时，需要调用OH_Huks_DeleteKeyItem删除密钥，具体请参考密钥删除。
#include \"huks/native_huks_api.h\"\n#include \"huks/native_huks_param.h\"\n#include \"napi/native_api.h\"\n#include <string.h>\nOH_Huks_Result InitParamSet(\n    struct OH_Huks_ParamSet **paramSet,\n    const struct OH_Huks_Param *params,\n    uint32_t paramCount)\n{\n    OH_Huks_Result ret = OH_Huks_InitParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        return ret;\n    }\n    ret = OH_Huks_AddParams(*paramSet, params, paramCount);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    ret = OH_Huks_BuildParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    return ret;\n}\nstatic const uint32_t DERIVE_KEY_SIZE_32 = 32;\nstatic const uint32_t DERIVE_KEY_SIZE_256 = 256;\nstatic struct OH_Huks_Blob g_deriveKeyAlias = {\n    (uint32_t)strlen(\"test_derive\"),\n    (uint8_t *)\"test_derive\"\n};\nstatic struct OH_Huks_Param g_genDeriveParams[] = {\n    {\n        .tag =  OH_HUKS_TAG_ALGORITHM,\n        .uint32Param = OH_HUKS_ALG_AES\n    }, {\n        .tag =  OH_HUKS_TAG_PURPOSE,\n        .uint32Param = OH_HUKS_KEY_PURPOSE_DERIVE\n    }, {\n        .tag =  OH_HUKS_TAG_DIGEST,\n        .uint32Param = OH_HUKS_DIGEST_SHA256\n    }, {\n        .tag =  OH_HUKS_TAG_KEY_SIZE,\n        .uint32Param = OH_HUKS_AES_KEY_SIZE_256\n    }\n};\nstatic struct OH_Huks_Param g_hkdfParams[] = {\n    {\n        .tag =  OH_HUKS_TAG_ALGORITHM,\n        .uint32Param = OH_HUKS_ALG_HKDF\n    }, {\n        .tag =  OH_HUKS_TAG_PURPOSE,\n        .uint32Param = OH_HUKS_KEY_PURPOSE_DERIVE\n    }, {\n        .tag =  OH_HUKS_TAG_DIGEST,\n        .uint32Param = OH_HUKS_DIGEST_SHA256\n    }, {\n        .tag =  OH_HUKS_TAG_DERIVE_KEY_SIZE,\n        .uint32Param = DERIVE_KEY_SIZE_32\n    }\n};\nstatic struct OH_Huks_Param g_hkdfFinishParams[] = {\n    {\n        .tag =  OH_HUKS_TAG_DERIVED_AGREED_KEY_STORAGE_FLAG,\n        .uint32Param = OH_HUKS_STORAGE_ONLY_USED_IN_HUKS\n    }, {\n        .tag =  OH_HUKS_TAG_KEY_ALIAS,\n        .blob = g_deriveKeyAlias\n    }, {\n        .tag =  OH_HUKS_TAG_ALGORITHM,\n        .uint32Param = OH_HUKS_ALG_AES\n    }, {\n        .tag =  OH_HUKS_TAG_KEY_SIZE,\n        .uint32Param = DERIVE_KEY_SIZE_256\n    }, {\n        .tag =  OH_HUKS_TAG_PURPOSE,\n        .uint32Param = OH_HUKS_KEY_PURPOSE_DERIVE\n    }, {\n        .tag =  OH_HUKS_TAG_DIGEST,\n        .uint32Param = OH_HUKS_DIGEST_SHA256\n    }\n};\nstatic const uint32_t COMMON_SIZE = 2048;\nstatic const char *g_deriveInData = \"Hks_HKDF_Derive_Test_00000000000000000000000000000000000000000000000000000000000\"\n                                    \"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n                                    \"0000000000000000000000000000000000000000000000000000000000000000000000000_string\";\nstatic napi_value DeriveKey(napi_env env, napi_callback_info info)\n{\n    struct OH_Huks_Blob genAlias = {\n        (uint32_t)strlen(\"test_signVerify\"),\n        (uint8_t *)\"test_signVerify\"\n    };\n    struct OH_Huks_Blob inData = {\n        (uint32_t)strlen(g_deriveInData),\n        (uint8_t *)g_deriveInData\n    };\n    struct OH_Huks_ParamSet *genParamSet = nullptr;\n    struct OH_Huks_ParamSet *hkdfParamSet = nullptr;\n    struct OH_Huks_ParamSet *hkdfFinishParamSet = nullptr;\n    OH_Huks_Result ohResult;\n    do {\n        ohResult = InitParamSet(&genParamSet, g_genDeriveParams, sizeof(g_genDeriveParams) / sizeof(OH_Huks_Param));\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n\n        ohResult = InitParamSet(&hkdfParamSet, g_hkdfParams, sizeof(g_hkdfParams) / sizeof(OH_Huks_Param));\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n           break;\n        }\n\n        // finish paramset\n        ohResult = InitParamSet(&hkdfFinishParamSet, g_hkdfFinishParams, sizeof(g_hkdfFinishParams) / sizeof(OH_Huks_Param));\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n\n        /* 1. Generate Key */\n        ohResult = OH_Huks_GenerateKeyItem(&genAlias, genParamSet, nullptr);\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        /* 2. Derive */\n        // Init\n        uint8_t handleD[sizeof(uint64_t)] = {0};\n        struct OH_Huks_Blob handleDerive = { sizeof(uint64_t), handleD };\n        ohResult = OH_Huks_InitSession(&genAlias, hkdfParamSet, &handleDerive, nullptr);\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        // Update\n        uint8_t tmpOut[COMMON_SIZE] = {0};\n        struct OH_Huks_Blob outData = { COMMON_SIZE, tmpOut };\n        ohResult = OH_Huks_UpdateSession(&handleDerive, hkdfParamSet, &inData, &outData);\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        // Finish\n        uint8_t outDataD[COMMON_SIZE] = {0};\n        struct OH_Huks_Blob outDataDerive = { COMMON_SIZE, outDataD };\n        ohResult = OH_Huks_FinishSession(&handleDerive, hkdfFinishParamSet, &inData, &outDataDerive);\n    } while (0);\n    (void)OH_Huks_DeleteKeyItem(&genAlias, nullptr);\n    (void)OH_Huks_DeleteKeyItem(&g_deriveKeyAlias, nullptr);\n    OH_Huks_FreeParamSet(&genParamSet);\n    OH_Huks_FreeParamSet(&hkdfParamSet);\n    OH_Huks_FreeParamSet(&hkdfFinishParamSet);\n\n    napi_value ret;\n    napi_create_int32(env, ohResult.errorCode, &ret);\n    return ret;\n}
