新增关键资产(C/C++)
接口介绍
可通过API文档查看新增关键资产的接口OH_Asset_Add的详细介绍。
在新增关键资产时，关键资产属性的内容参数如下表所示：
下表中名称包含“ASSET_TAG_DATA_LABEL”的关键资产属性，用于存储业务自定义信息，其内容不会被加密，请勿存放个人数据。
在应用卸载时是否需要保留关键资产。
注意： 设置此属性时，需申请权限ohos.permission.STORE_PERSISTENT_DATA。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
约束和限制
 基于别名的访问 关键资产以密文的形式存储在ASSET数据库中，以业务身份 + 别名作为唯一索引。故业务需要保证每条关键资产的别名唯一。 业务自定义数据存储 ASSET为业务预留了12个关键资产自定义属性，名称以\"ASSET_TAG_DATA_LABEL\"开头。对于超过12个自定义属性的情况，业务可以将多段数据按照一定的格式（如JSON）拼接到同一个ASSET属性中。 ASSET对部分属性会进行完整性保护，这部分属性名称以\"ASSET_TAG_DATA_LABEL_CRITICAL\"开头，且写入后不支持更新。 
代码示例
新增一条密码是demo_pwd，别名是demo_alias，附属信息是demo_label的数据，该数据在用户首次解锁设备后可被访问。
 在CMake脚本中链接相关动态库 target_link_libraries(entry PUBLIC libasset_ndk.z.so) 参考如下示例代码，进行业务功能开发 #include <string.h>\n\n#include \"asset/asset_api.h\"\n\nvoid AddAsset() {\n   static const char *SECRET = \"demo_pwd\";\n   static const char *ALIAS = \"demo_alias\";\n   static const char *LABEL = \"demo_label\";\n\n   Asset_Blob secret = { (uint32_t)(strlen(SECRET)), (uint8_t *)SECRET };\n   Asset_Blob alias = { (uint32_t)(strlen(ALIAS)), (uint8_t *)ALIAS };\n   Asset_Blob label = { (uint32_t)(strlen(LABEL)), (uint8_t *)LABEL };\n   Asset_Attr attr[] = {\n      { .tag = ASSET_TAG_ACCESSIBILITY, .value.u32 = ASSET_ACCESSIBILITY_DEVICE_FIRST_UNLOCKED },\n      { .tag = ASSET_TAG_SECRET, .value.blob = secret },\n      { .tag = ASSET_TAG_ALIAS, .value.blob = alias },\n      { .tag = ASSET_TAG_DATA_LABEL_NORMAL_1, .value.blob = label },\n   };\n\n   int32_t ret = OH_Asset_Add(attr, sizeof(attr) / sizeof(attr[0]));\n   if (ret == ASSET_SUCCESS) {\n      // Asset added successfully.\n   } else {\n      // Failed to add Asset.\n   }\n} 
