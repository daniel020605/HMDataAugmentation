使用JSVM-API接口操作bigint类型值
简介
BigInt是JavaScript中用于表示任意精度整数的数据类型，它能够处理比Number类型更大范围的整数值。通过JSVM-API提供的接口，可以在JSVM模块中创建、获取和操作BigInt类型值，从而实现与BigInt相关的功能扩展。
基本概念
在使用JSVM-API接口操作BigInt类型值时，需要理解以下基本概念：
BigInt类型： BigInt是JavaScript中的一种数据类型，用于表示任意精度的整数。与Number类型不同，BigInt类型可以精确表示非常大的整数，而不会丢失精度或溢出。BigInt创建： 使用JSVM-API提供的接口，可以通过传递C的int64或uint64数据来创建对应的JavaScript BigInt。这使得在JSVM模块中可以方便地创建BigInt类型值。BigInt操作： JSVM-API提供了多个接口用于操作BigInt类型值。通过这些接口，可以获取BigInt的数值，进行数值转换，以及执行常见的算术和位运算操作。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]OH_JSVM_GetValueBigintWords
获取给定JavaScript BigInt对象的底层数据，即BigInt数据的字词表示。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// OH_JSVM_GetValueBigintWords的样例方法\nstatic JSVM_Value GetValueBigintWords(JSVM_Env env, JSVM_CallbackInfo info) {\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    int signBit = 0;\n    size_t wordCount = 0;\n    uint64_t* words{nullptr};\n    // 调用OH_JSVM_GetValueBigintWords接口获取wordCount\n    JSVM_Status status = OH_JSVM_GetValueBigintWords(env, args[0], nullptr, &wordCount, nullptr);\n    OH_LOG_INFO(LOG_APP, \"OH_JSVM_GetValueBigintWords wordCount:%{public}d.\", wordCount);\n    words = (uint64_t*)malloc(wordCount*sizeof(uint64_t));\n    if (words == nullptr) {\n        OH_LOG_ERROR(LOG_APP, \"OH_JSVM_GetValueBigintWords malloc failed.\");\n        return nullptr;\n    }\n    // 调用OH_JSVM_GetValueBigintWords接口获取传入bigInt相关信息，如：signBit传入bigInt正负信息\n    status = OH_JSVM_GetValueBigintWords(env, args[0], &signBit, &wordCount, words);\n    free(words);\n    words = nullptr;\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_JSVM_GetValueBigintWords fail, status:%{public}d.\", status);\n    } else {\n        OH_LOG_INFO(LOG_APP, \"OH_JSVM_GetValueBigintWords signBit: %{public}d.\", signBit);\n    }\n    // 将符号位转化为int类型传出去\n    JSVM_Value returnValue = nullptr;\n    OH_JSVM_CreateInt32(env, signBit, &returnValue);\n    return returnValue;\n}\n// GetValueBigintWords注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetValueBigintWords},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetValueBigintWords方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getValueBigintWords\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char* srcCallNative = R\"JS(getValueBigintWords(BigInt(5555555555555555)))JS\";
预期的输出结果
OH_JSVM_GetValueBigintWords wordCount:1.\nOH_JSVM_GetValueBigintWords signBit: 1.
[h2]OH_JSVM_CreateBigintWords
根据给定的Uint64_t数组创建一个JavaScript BigInt对象。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// OH_JSVM_CreateBigintWords的样例方法\nstatic int DIFF_VALUE_THREE = 3;\nstatic JSVM_Value CreateBigintWords(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 使用OH_JSVM_CreateBigintWords接口创建一个BigInt对象\n    int signBit = 0;\n    size_t wordCount = DIFF_VALUE_THREE;\n    uint64_t words[] = {12ULL, 34ULL, 56ULL};\n    JSVM_Value returnValue = nullptr;\n    JSVM_Status status = OH_JSVM_CreateBigintWords(env, signBit, wordCount, words, &returnValue);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_CreateBigintWords fail\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CreateBigintWords success\");\n    }\n    return returnValue;\n}\n// CreateBigintWords注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CreateBigintWords},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CreateBigintWords方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"createBigintWords\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char* srcCallNative = R\"JS(createBigintWords())JS\";
预期的输出结果
JSVM OH_JSVM_CreateBigintWords success
[h2]OH_JSVM_CreateBigintUint64
根据Uint64类型对象创建 JavaScript Bigint对象。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// 声明uint64_t的变量value\nstatic uint64_t TEST_VALUE = 5555555555555555555;\n// OH_JSVM_CreateBigintUint64的样例方法\nstatic JSVM_Value CreateBigintUint64(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 将value转化为JSVM_Value类型返回\n    JSVM_Value returnValue = nullptr;\n    JSVM_Status status = OH_JSVM_CreateBigintUint64(env, TEST_VALUE, &returnValue);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_CreateBigintUint64 fail\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CreateBigintUint64 success\");\n    }\n    return returnValue;\n}\n// CreateBigintUint64注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CreateBigintUint64},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CreateBigintUint64方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"createBigintUint64\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char* srcCallNative = R\"JS(createBigintUint64())JS\";
预期的输出结果
JSVM OH_JSVM_CreateBigintUint64 success
[h2]OH_JSVM_GetValueBigintUint64
获取给定JavaScript BigInt的Uint64_t基础类型值。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// OH_JSVM_GetValueBigintUint64的样例方法\nstatic JSVM_Value GetValueBigintUint64(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 从参数值中获取BigInt的数值\n    uint64_t value = 0;\n    bool lossLess = false;\n    OH_JSVM_GetValueBigintUint64(env, args[0], &value, &lossLess);\n    // 判断从JS侧获取bigint是否为无损转换，如果不是抛出异常\n    if (!lossLess) {\n        OH_JSVM_ThrowError(env, nullptr, \"BigInt values have no lossless converted\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM GetValueBigintUint64 success:%{public}d\", lossLess);\n    }\n    JSVM_Value returnValue = nullptr;\n    OH_JSVM_CreateBigintUint64(env, value, &returnValue);\n    return returnValue;\n}\n// GetValueBigintUint64注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetValueBigintUint64},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetValueBigintUint64方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getValueBigintUint64\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char* srcCallNative = R\"JS(getValueBigintUint64(BigInt(5555555555555555)))JS\";
预期的输出结果
JSVM GetValueBigintUint64 success:1
[h2]OH_JSVM_CreateBigintInt64
根据Uint64类型对象创建JavaScript Bigint对象。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// 声明int64_t的变量value\nstatic int64_t TEST_VALUE_DEMO = -5555555555555555555;\n// OH_JSVM_CreateBigintInt64的样例方法\nstatic JSVM_Value CreateBigintInt64(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    JSVM_Value returnValue = nullptr;\n    JSVM_Status status = OH_JSVM_CreateBigintInt64(env, TEST_VALUE_DEMO, &returnValue);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_CreateBigintInt64 fail\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CreateBigintInt64 success\");\n    }\n    return returnValue;\n}\n// CreateBigintInt64注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CreateBigintInt64},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CreateBigintInt64方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"createBigintInt64\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char* srcCallNative = R\"JS(createBigintInt64())JS\";
预期的输出结果
JSVM OH_JSVM_CreateBigintInt64 success
[h2]OH_JSVM_GetValueBigintInt64
用于从传入的参数中提取64位整数的BigInt数据，以供后续处理。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// OH_JSVM_GetValueBigintInt64的样例方法\nstatic JSVM_Value GetBigintInt64(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 从传入的参数中提取64位整数的BigInt数据\n    int64_t value;\n    bool lossLess;\n    OH_JSVM_GetValueBigintInt64(env, args[0], &value, &lossLess);\n    // 判断从JS侧获取bigint是否为无损转换，如果不是抛出异常\n    if (!lossLess) {\n        OH_JSVM_ThrowError(env, nullptr, \"BigInt values have no lossless converted\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM GetBigintInt64 success:%{public}d\", lossLess);\n    }\n    JSVM_Value returnValue = nullptr;\n    OH_JSVM_CreateBigintInt64(env, value, &returnValue);\n    return returnValue;\n}\n// GetBigintInt64注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetBigintInt64},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetBigintInt64方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getBigintInt64\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char* srcCallNative = R\"JS(getBigintInt64(BigInt(-5555555555555555)))JS\";
预期的输出结果
JSVM GetBigintInt64 success:1
