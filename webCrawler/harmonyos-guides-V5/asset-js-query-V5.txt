查询关键资产(ArkTS)
接口介绍
可通过API文档查询新增关键资产的异步接口query(query: AssetMap)、同步接口querySync(query: AssetMap)的详细介绍。
在查询关键资产时，关键资产属性的内容（AssetMap）参数如下表所示：
下表中名称包含“DATA_LABEL”的关键资产属性，用于存储业务自定义信息，其内容不会被加密，请勿存放个人数据。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产查询返回的结果偏移量。
说明： 用于分批查询场景，指定从第几个开始返回。
关键资产查询返回的结果排序依据，仅支持按照附属信息排序。
说明： 默认按照关键资产新增的顺序返回。
约束和限制
批量查询出的关键资产需要通过IPC通道传输给业务，受IPC缓冲区大小限制，建议对查询超过40条关键资产时，进行分批查询，且每次查询数量不超过40条。
代码示例
本模块提供了异步和同步两套接口，以下为异步接口的使用示例，同步接口详见API文档。
[h2]查询单条关键资产明文
查询别名是demo_alias的关键资产明文。
import { asset } from '@kit.AssetStoreKit';\nimport { util } from '@kit.ArkTS';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nfunction stringToArray(str: string): Uint8Array {\n  let textEncoder = new util.TextEncoder();\n  return textEncoder.encodeInto(str);\n}\n\nfunction arrayToString(arr: Uint8Array): string {\n  let textDecoder = util.TextDecoder.create(\"utf-8\", { ignoreBOM: true });\n  let str = textDecoder.decodeToString(arr, { stream: false })\n  return str;\n}\n\nlet query: asset.AssetMap = new Map();\nquery.set(asset.Tag.ALIAS, stringToArray('demo_alias')); // 指定了关键资产别名，最多查询到一条满足条件的关键资产\nquery.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ALL);  // 此处表示需要返回关键资产的所有信息，即属性+明文\ntry {\n  asset.query(query).then((res: Array<asset.AssetMap>) => {\n    for (let i = 0; i < res.length; i++) {\n      // parse the secret.\n      let secret: Uint8Array = res[i].get(asset.Tag.SECRET) as Uint8Array;\n      // parse uint8array to string\n      let secretStr: string = arrayToString(secret);\n    }\n  }).catch ((err: BusinessError) => {\n    console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\n  });\n} catch (error) {\n  let err = error as BusinessError;\n  console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\n}
[h2]查询单条关键资产属性
查询别名是demo_alias的关键资产属性。
import { asset } from '@kit.AssetStoreKit';\nimport { util } from '@kit.ArkTS';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nfunction stringToArray(str: string): Uint8Array {\n  let textEncoder = new util.TextEncoder();\n  return textEncoder.encodeInto(str);\n}\n\nlet query: asset.AssetMap = new Map();\nquery.set(asset.Tag.ALIAS, stringToArray('demo_alias'));       // 指定了关键资产别名，最多查询到一条满足条件的关键资产\nquery.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ATTRIBUTES); // 此处表示仅返回关键资产属性，不包含关键资产明文\ntry {\n  asset.query(query).then((res: Array<asset.AssetMap>) => {\n    for (let i = 0; i < res.length; i++) {\n      // parse the attribute.\n      let accessibility: number = res[i].get(asset.Tag.ACCESSIBILITY) as number;\n    }\n  }).catch ((err: BusinessError) => {\n    console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\n  });\n} catch (error) {\n  let err = error as BusinessError;\n  console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\n}
[h2]批量查询关键资产属性
批量查询标签1是demo_label的关键资产属性，从第5条满足条件的结果开始返回，一共返回10条，且返回结果以DATA_LABEL_NORMAL_1属性内容排序。
import { asset } from '@kit.AssetStoreKit';\nimport { util } from '@kit.ArkTS';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nfunction stringToArray(str: string): Uint8Array {\n  let textEncoder = new util.TextEncoder();\n  return textEncoder.encodeInto(str);\n}\n\nlet query: asset.AssetMap = new Map();\nquery.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ATTRIBUTES); // 此处表示仅返回关键资产属性，不包含关键资产明文\nquery.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray('demo_label'));\nquery.set(asset.Tag.RETURN_OFFSET, 5); // 此处表示查询结果的偏移量，即从满足条件的第5条关键资产开始返回\nquery.set(asset.Tag.RETURN_LIMIT, 10); // 此处表示查询10条满足条件的关键资产\nquery.set(asset.Tag.RETURN_ORDERED_BY, asset.Tag.DATA_LABEL_NORMAL_1); // 此处查询结果以DATA_LABEL_NORMAL_1属性内容排序\ntry {\n  asset.query(query).then((res: Array<asset.AssetMap>) => {\n    for (let i = 0; i < res.length; i++) {\n      // parse the attribute.\n      let accessibility: number = res[i].get(asset.Tag.ACCESSIBILITY) as number;\n    }\n  }).catch ((err: BusinessError) => {\n    console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\n  });\n} catch (error) {\n  let err = error as BusinessError;\n  console.error(`Failed to query Asset. Code is ${err.code}, message is ${err.message}`);\n}
