属性字符串（StyledString/MutableStyledString）
属性字符串StyledString/MutableStyledString（其中MutableStyledString继承自StyledString，下文统称为StyledString），可用于在字符或段落级别上设置文本样式。将StyledString应用到文本组件上，可以采用多种方式修改文本，包括调整字号、添加字体颜色、使文本具备可点击性，以及通过自定义方式绘制文本等。具体使用方法请参考属性字符串的文档。
属性字符串提供多种类型样式对象，涵盖各种常见的文本样式格式，例如文本装饰线样式、文本行高样式、文本阴影样式等。也可以自行创建CustomSpan，以应用自定义样式。
创建并应用StyledString和MutableStyledString
可以通过TextController提供的setStyledString方法，将属性字符串附加到文本组件，并推荐在onPageShow中触发绑定。
在aboutToAppear中调用setStyledString方法时，由于该方法运行阶段组件尚未完成创建并成功挂载节点树，因此无法在页面初始化时显示属性字符串。
@Entry\n@Component\nstruct styled_string_demo1 {\n  styledString1: StyledString = new StyledString(\"运动45分钟\");\n  mutableStyledString1: MutableStyledString = new MutableStyledString(\"运动35分钟\");\n  controller1: TextController = new TextController();\n  controller2: TextController = new TextController();\n\n  async onPageShow() {\n    this.controller1.setStyledString(this.styledString1);\n    this.controller2.setStyledString(this.mutableStyledString1);\n  }\n\n  build() {\n    Column() {\n      // 显示属性字符串\n      Text(undefined, { controller: this.controller1 })\n      Text(undefined, { controller: this.controller2 })\n    }\n    .width('100%')\n  }\n}
设置文本样式
属性字符串目前提供了TextStyle、TextShadowStyle、DecorationStyle、BaselineOffsetStyle、LineHeightStyle、LetterSpacingStyle各种Style对象来实现设置文本的各类样式。
 创建及应用文本字体样式对象（TextStyle） import { LengthMetrics } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct styled_string_demo2 {\n  textStyleAttrs: TextStyle =\n    new TextStyle({ fontWeight: FontWeight.Bolder, fontSize: LengthMetrics.vp(24), fontStyle: FontStyle.Italic });\n  mutableStyledString: MutableStyledString = new MutableStyledString(\"运动35分钟 目标达成\", [\n    {\n      start: 2,\n      length: 2,\n      styledKey: StyledStringKey.FONT,\n      styledValue: this.textStyleAttrs\n    },\n    {\n      start: 7,\n      length: 4,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontColor: Color.Orange, fontSize: LengthMetrics.vp(12) })\n    }\n  ]);\n  controller: TextController = new TextController();\n\n  async onPageShow() {\n    this.controller.setStyledString(this.mutableStyledString);\n  }\n\n  build() {\n    Column() {\n      // 显示属性字符串\n      Text(undefined, { controller: this.controller })\n        .margin({ top: 10 })\n    }\n    .width('100%')\n  }\n}  创建及应用文本阴影对象（TextShadowStyle） // xxx.ets\n@Entry\n@Component\nstruct styled_string_demo3 {\n  mutableStyledString: MutableStyledString = new MutableStyledString(\"运动35分钟\", [\n    {\n      start: 0,\n      length: 3,\n      styledKey: StyledStringKey.TEXT_SHADOW,\n      styledValue: new TextShadowStyle({\n        radius: 5,\n        type: ShadowType.COLOR,\n        color: Color.Red,\n        offsetX: 10,\n        offsetY: 10\n      })\n    }\n  ]);\n  controller: TextController = new TextController();\n\n  async onPageShow() {\n    this.controller.setStyledString(this.mutableStyledString);\n  }\n\n  build() {\n    Column() {\n      // 显示属性字符串\n      Text(undefined, { controller: this.controller })\n    }\n    .width('100%')\n  }\n}  创建及应用文本装饰线对象（DecorationStyle） // xxx.ets\n@Entry\n@Component\nstruct styled_string_demo4 {\n  mutableStyledString: MutableStyledString = new MutableStyledString(\"运动35分钟\", [\n    {\n      start: 0,\n      length: 3,\n      styledKey: StyledStringKey.DECORATION,\n      styledValue: new DecorationStyle({ type: TextDecorationType.LineThrough, color: Color.Red })\n    }\n  ]);\n  controller: TextController = new TextController();\n\n  async onPageShow() {\n    this.controller.setStyledString(this.mutableStyledString);\n  }\n\n  build() {\n    Column() {\n      // 显示属性字符串\n      Text(undefined, { controller: this.controller })\n    }\n    .width('100%')\n  }\n}  创建及应用文本基线偏移量对象（BaselineOffsetStyle） import { LengthMetrics } from '@kit.ArkUI';\n\n// xxx.ets\n@Entry\n@Component\nstruct styled_string_demo5 {\n  mutableStyledString: MutableStyledString = new MutableStyledString(\"运动35分钟\", [\n    {\n      start: 0,\n      length: 3,\n      styledKey: StyledStringKey.BASELINE_OFFSET,\n      styledValue: new BaselineOffsetStyle(LengthMetrics.px(20))\n    }\n  ]);\n  controller: TextController = new TextController();\n\n  async onPageShow() {\n    this.controller.setStyledString(this.mutableStyledString);\n  }\n\n  build() {\n    Column() {\n      // 显示属性字符串\n      Text(undefined, { controller: this.controller })\n    }\n    .width('100%')\n  }\n}  创建及应用文本行高对象（LineHeightStyle） import { LengthMetrics } from '@kit.ArkUI';\n\n// xxx.ets\n@Entry\n@Component\nstruct styled_string_demo6 {\n  mutableStyledString: MutableStyledString = new MutableStyledString(\"运动35分钟\\n顶顶顶\\n得到\", [\n    {\n      start: 8,\n      length: 3,\n      styledKey: StyledStringKey.LINE_HEIGHT,\n      styledValue: new LineHeightStyle(LengthMetrics.vp(50))\n    }\n  ]);\n  controller: TextController = new TextController();\n\n  async onPageShow() {\n    this.controller.setStyledString(this.mutableStyledString);\n  }\n\n  build() {\n    Column() {\n      // 显示属性字符串\n      Text(undefined, { controller: this.controller })\n    }\n    .width('100%')\n    .margin({ top: 10 })\n  }\n}  创建及应用文本字符间距对象（LetterSpacingStyle） import { LengthMetrics, LengthUnit } from '@kit.ArkUI';\n\n// xxx.ets\n@Entry\n@Component\nstruct styled_string_demo7 {\n  mutableStyledString: MutableStyledString = new MutableStyledString(\"运动35分钟\", [\n    {\n      start: 0,\n      length: 2,\n      styledKey: StyledStringKey.LETTER_SPACING,\n      styledValue: new LetterSpacingStyle(new LengthMetrics(20, LengthUnit.VP))\n    }\n  ]);\n  controller: TextController = new TextController();\n\n  async onPageShow() {\n    this.controller.setStyledString(this.mutableStyledString);\n  }\n\n  build() {\n    Column() {\n      // 显示属性字符串\n      Text(undefined, { controller: this.controller })\n    }\n    .width('100%')\n  }\n}  
设置段落样式
可通过ParagraphStyle设置段落样式布局。下图显示了如何分割文本中的段落，段落以换行符 \\n 结尾。
以下代码示例展示了如何创建ParagraphStyle并应用。如果将ParagraphStyle附加到段落开头末尾或之间的任何位置，均会应用样式，非段落区间内则不会应用样式。
import { LengthMetrics } from '@kit.ArkUI';\ntitleParagraphStyleAttr: ParagraphStyle = new ParagraphStyle({ textAlign: TextAlign.Center });\n//段落首行缩进15vp\nparagraphStyleAttr1: ParagraphStyle = new ParagraphStyle({ textIndent: LengthMetrics.vp(15) });\n//行高样式对象\nlineHeightStyle1: LineHeightStyle= new LineHeightStyle(new LengthMetrics(24));\n//创建含段落样式的对象paragraphStyledString1\nparagraphStyledString1: MutableStyledString = new MutableStyledString(\"段落标题\\n正文第一段落开始0123456789正文第一段落结束。\", [\n  {\n    start: 0,\n    length: 4,\n    styledKey: StyledStringKey.PARAGRAPH_STYLE,\n    styledValue: this.titleParagraphStyleAttr\n  },\n  {\n    start: 0,\n    length: 4,\n    styledKey: StyledStringKey.LINE_HEIGHT,\n    styledValue: new LineHeightStyle(new LengthMetrics(50))\n  },{\n  start: 0,\n  length: 4,\n  styledKey: StyledStringKey.FONT,\n  styledValue: new TextStyle({ fontSize: LengthMetrics.vp(24), fontWeight: FontWeight.Bolder })\n},\n  {\n    start: 5,\n    length: 3,\n    styledKey: StyledStringKey.PARAGRAPH_STYLE,\n    styledValue: this.paragraphStyleAttr1\n  },\n  {\n    start: 5,\n    length: 20,\n    styledKey: StyledStringKey.LINE_HEIGHT,\n    styledValue: this.lineHeightStyle1\n  }\n]);
除了可以在创建属性字符串时就预设样式，也可以后续通过replaceStyle清空原样式替换新样式, 同时需要在附加的文本组件controller上主动触发更新绑定的属性字符串。
import { LengthMetrics } from '@kit.ArkUI';\n//段落不设置缩进配置最大行数及超长显示方式\nparagraphStyleAttr3: ParagraphStyle = new ParagraphStyle({ textAlign: TextAlign.End, maxLines: 1, wordBreak: WordBreak.BREAK_ALL, overflow: TextOverflow.Ellipsis});\n// 后续某个节点触发更新段落样式\ncontroller: TextController = new TextController();\nthis.paragraphStyledString1.replaceStyle({\n  start: 5,\n  length: 3,\n  styledKey: StyledStringKey.PARAGRAPH_STYLE,\n  styledValue: this.paragraphStyleAttr3\n});\nthis.controller.setStyledString(this.paragraphStyledString1);
使用图片
可通过ImageAttachment来添加图片。
以下示例展示了如何将图片和文本附加到同一个MutableStyledString对象上，并实现图文混排。
// xxx.ets\nimport { image } from '@kit.ImageKit';\nimport { LengthMetrics } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct styled_string_demo4 {\n  @State message: string = 'Hello World';\n  imagePixelMap: image.PixelMap | undefined = undefined;\n  @State imagePixelMap3: image.PixelMap | undefined = undefined;\n  mutableStr: MutableStyledString = new MutableStyledString('123');\n  controller: TextController = new TextController();\n  mutableStr2: MutableStyledString = new MutableStyledString('This is set decoration line style to the mutableStr2', [{\n    start: 0,\n    length: 15,\n    styledKey: StyledStringKey.DECORATION,\n    styledValue: new DecorationStyle({\n      type: TextDecorationType.Overline,\n      color: Color.Orange,\n      style: TextDecorationStyle.DOUBLE\n    })\n  }]);\n\n  async aboutToAppear() {\n    console.info(\"aboutToAppear initial imagePixelMap\");\n    this.imagePixelMap = await this.getPixmapFromMedia($r('app.media.sea'));\n  }\n\n  private async getPixmapFromMedia(resource: Resource) {\n    let unit8Array = await this.getUIContext().getHostContext()?.resourceManager?.getMediaContent({\n      bundleName: resource.bundleName,\n      moduleName: resource.moduleName,\n      id: resource.id\n    });\n    let imageSource = image.createImageSource(unit8Array?.buffer?.slice(0, unit8Array?.buffer?.byteLength));\n    let createPixelMap: image.PixelMap = await imageSource.createPixelMap({\n      desiredPixelFormat: image.PixelMapFormat.RGBA_8888\n    });\n    await imageSource.release();\n    return createPixelMap;\n  }\n\n  leadingMarginValue: ParagraphStyle = new ParagraphStyle({ leadingMargin: LengthMetrics.vp(5)});\n  //行高样式对象\n  lineHeightStyle1: LineHeightStyle= new LineHeightStyle(new LengthMetrics(24));\n  //Bold样式\n  boldTextStyle: TextStyle = new TextStyle({ fontWeight: FontWeight.Bold });\n  //创建含段落样式的对象paragraphStyledString1\n  paragraphStyledString1: MutableStyledString = new MutableStyledString(\"\\n品牌相纸 高清冲印30张\\n限时直降5.15元 限量增送\", [\n    {\n      start: 0,\n      length: 28,\n      styledKey: StyledStringKey.PARAGRAPH_STYLE,\n      styledValue: this.leadingMarginValue\n    },\n    {\n      start: 14,\n      length: 9,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontSize: LengthMetrics.vp(14), fontColor: '#B22222' })\n    },\n    {\n      start: 24,\n      length: 4,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontSize: LengthMetrics.vp(14), fontWeight: FontWeight.Lighter })\n    },\n    {\n      start: 11,\n      length: 4,\n      styledKey: StyledStringKey.LINE_HEIGHT,\n      styledValue: this.lineHeightStyle1\n    }\n  ]);\n  paragraphStyledString2: MutableStyledString = new MutableStyledString(\"\\n￥16.21 3000+人好评\", [\n    {\n      start: 0,\n      length: 5,\n      styledKey: StyledStringKey.PARAGRAPH_STYLE,\n      styledValue: this.leadingMarginValue\n    },\n    {\n      start: 0,\n      length: 4,\n      styledKey: StyledStringKey.LINE_HEIGHT,\n      styledValue: new LineHeightStyle(new LengthMetrics(60))\n    },\n    {\n      start: 0,\n      length: 7,\n      styledKey: StyledStringKey.FONT,\n      styledValue: this.boldTextStyle\n    },\n    {\n      start: 1,\n      length: 1,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontSize: LengthMetrics.vp(18) })\n    },\n    {\n      start: 2,\n      length: 2,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontSize: LengthMetrics.vp(36) })\n    },\n    {\n      start: 4,\n      length: 3,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontSize: LengthMetrics.vp(20) })\n    },\n    {\n      start: 7,\n      length: 9,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontColor: Color.Grey, fontSize: LengthMetrics.vp(14)})\n    }\n  ]);\n\n  build() {\n    Row() {\n      Column({ space: 10 }) {\n        Text(undefined, { controller: this.controller })\n          .copyOption(CopyOptions.InApp)\n          .draggable(true)\n          .backgroundColor('#FFFFFF')\n          .borderRadius(5)\n\n        Button('点击查看商品卡片')\n          .onClick(() => {\n            if (this.imagePixelMap !== undefined) {\n              this.mutableStr = new MutableStyledString(new ImageAttachment({\n                value: this.imagePixelMap,\n                size: { width: 180, height: 160 },\n                verticalAlign: ImageSpanAlignment.BASELINE,\n                objectFit: ImageFit.Fill\n              }));\n              this.paragraphStyledString1.appendStyledString(this.paragraphStyledString2);\n              this.mutableStr.appendStyledString(this.paragraphStyledString1);\n              this.controller.setStyledString(this.mutableStr);\n            }\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n    .backgroundColor('#F8F8FF')\n  }\n}
设置事件
可通过GestureStyle设置onClick、onLongPress事件来使文本响应点击长按事件。
除了初始化属性字符串对象即初始样式对象，亦可通过setStyle接口再叠加新样式或更新已有样式，同时需要在附加的文本组件controller上主动触发更新绑定的属性字符串。
import { drawing } from '@kit.ArkGraphics2D';\n\nclass MyCustomSpan extends CustomSpan {\n  constructor(word: string, width: number, height: number, fontSize: number) {\n    super();\n    this.word = word;\n    this.width = width;\n    this.height = height;\n    this.fontSize = fontSize;\n  }\n\n  onMeasure(measureInfo: CustomSpanMeasureInfo): CustomSpanMetrics {\n    return { width: this.width, height: this.height };\n  } \n\n  onDraw(context: DrawContext, options: CustomSpanDrawInfo) {\n    let canvas = context.canvas;\n\n    const brush = new drawing.Brush();\n    brush.setColor({\n      alpha: 255,\n      red: 0,\n      green: 0,\n      blue: 0\n    });\n    const font = new drawing.Font();\n    font.setSize(vp2px(this.fontSize));\n    const textBlob =\n      drawing.TextBlob.makeFromString(this.word.substring(0, 5), font, drawing.TextEncoding.TEXT_ENCODING_UTF8);\n    canvas.attachBrush(brush);\n\n    this.onDrawRectByRadius(context, options.x, options.x + vp2px(this.width), options.lineTop, options.lineBottom, 20);\n    brush.setColor({\n      alpha: 255,\n      red: 255,\n      green: 255,\n      blue: 255\n    });\n    canvas.attachBrush(brush);\n    canvas.drawTextBlob(textBlob, options.x, options.lineBottom - 30);\n    brush.setColor({\n      alpha: 255,\n      red: 255,\n      green: 228,\n      blue: 196\n    });\n    canvas.attachBrush(brush);\n    const textBlob1 =\n      drawing.TextBlob.makeFromString(this.word.substring(5), font, drawing.TextEncoding.TEXT_ENCODING_UTF8);\n    canvas.drawTextBlob(textBlob1, options.x + vp2px(100), options.lineBottom - 30);\n\n    canvas.detachBrush();\n  }\n\n  onDrawRectByRadius(context: DrawContext, left: number, right: number, top: number, bottom: number, radius: number) {\n    let canvas = context.canvas;\n    let path = new drawing.Path();\n\n    // 画带radius的rect\n    path.moveTo(left + radius, top);\n    path.lineTo(right - radius, top);\n    path.arcTo(right - 2 * radius, top, right, top + 2 * radius, 270, 90);\n    path.lineTo(right, bottom - radius);\n    path.arcTo(right - 2 * radius, bottom - 2 * radius, right, bottom, 0, 90);\n\n    path.lineTo(left + 2 * radius, bottom);\n    path.arcTo(left, bottom - 2 * radius, left + 2 * radius, bottom, 90, 90);\n    path.lineTo(left, top + 2 * radius);\n    path.arcTo(left, top, left + 2 * radius, top + 2 * radius, 180, 90);\n\n    canvas.drawPath(path);\n  }\n\n  setWord(word: string) {\n    this.word = word;\n  }\n\n  width: number = 160;\n  word: string = \"drawing\";\n  height: number = 10;\n  fontSize: number = 16;\n}\n\n@Entry\n@Component\nstruct styled_string_demo6 {\n  customSpan3: MyCustomSpan = new MyCustomSpan(\"99VIP88%off\", 200, 40, 30);\n  textStyle: MutableStyledString = new MutableStyledString(\"123\");\n  textController: TextController = new TextController();\n  isPageShow: boolean = true;\n\n  async onPageShow() {\n    if (!this.isPageShow) {\n      return;\n    }\n    this.isPageShow = false;\n    this.textController.setStyledString(new StyledString(this.customSpan3));\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text(undefined, { controller: this.textController })\n          .copyOption(CopyOptions.InApp)\n          .fontSize(30)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
场景示例
该示例通过ParagraphStyle、LineHeightStyle、TextStyle对象展示了会员过期提示的效果。
import { LengthMetrics } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  alignCenterParagraphStyleAttr: ParagraphStyle = new ParagraphStyle({ textAlign: TextAlign.Center });\n  //行高样式对象\n  lineHeightStyle1: LineHeightStyle = new LineHeightStyle(LengthMetrics.vp(24));\n  //Bold样式\n  boldTextStyle: TextStyle = new TextStyle({ fontWeight: FontWeight.Bold });\n  //创建含段落样式的对象paragraphStyledString1\n  paragraphStyledString1: MutableStyledString =\n    new MutableStyledString(\"您的豪华钻石已过期1天\\n续费可继续享受会员专属权益\", [\n      {\n        start: 0,\n        length: 4,\n        styledKey: StyledStringKey.PARAGRAPH_STYLE,\n        styledValue: this.alignCenterParagraphStyleAttr\n      },\n      {\n        start: 0,\n        length: 4,\n        styledKey: StyledStringKey.LINE_HEIGHT,\n        styledValue: new LineHeightStyle(LengthMetrics.vp(40))\n      },\n      {\n        start: 11,\n        length: 14,\n        styledKey: StyledStringKey.FONT,\n        styledValue: new TextStyle({ fontSize: LengthMetrics.vp(14), fontColor: Color.Grey })\n      },\n      {\n        start: 11,\n        length: 4,\n        styledKey: StyledStringKey.PARAGRAPH_STYLE,\n        styledValue: this.alignCenterParagraphStyleAttr\n      },\n      {\n        start: 11,\n        length: 4,\n        styledKey: StyledStringKey.LINE_HEIGHT,\n        styledValue: this.lineHeightStyle1\n      }\n    ]);\n  paragraphStyledString2: MutableStyledString = new MutableStyledString(\"\\n￥4.88￥15\", [\n    {\n      start: 0,\n      length: 4,\n      styledKey: StyledStringKey.PARAGRAPH_STYLE,\n      styledValue: this.alignCenterParagraphStyleAttr\n    },\n    {\n      start: 0,\n      length: 4,\n      styledKey: StyledStringKey.LINE_HEIGHT,\n      styledValue: new LineHeightStyle(LengthMetrics.vp(60))\n    },\n    {\n      start: 0,\n      length: 6,\n      styledKey: StyledStringKey.FONT,\n      styledValue: this.boldTextStyle\n    },\n    {\n      start: 1,\n      length: 1,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontSize: LengthMetrics.vp(18) })\n    },\n    {\n      start: 2,\n      length: 4,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontSize: LengthMetrics.vp(40) })\n    },\n    {\n      start: 6,\n      length: 3,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontColor: Color.Grey, fontSize: LengthMetrics.vp(14) })\n    },\n    {\n      start: 6,\n      length: 3,\n      styledKey: StyledStringKey.DECORATION,\n      styledValue: new DecorationStyle({ type: TextDecorationType.LineThrough, color: Color.Grey })\n    }\n  ]);\n  paragraphStyledString3: MutableStyledString = new MutableStyledString(\"\\n02时06分后将失去该优惠\", [\n    {\n      start: 0,\n      length: 4,\n      styledKey: StyledStringKey.PARAGRAPH_STYLE,\n      styledValue: this.alignCenterParagraphStyleAttr\n    },\n    {\n      start: 0,\n      length: 4,\n      styledKey: StyledStringKey.LINE_HEIGHT,\n      styledValue: new LineHeightStyle(LengthMetrics.vp(30))\n    },\n    {\n      start: 1,\n      length: 2,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontColor: '#FFD700', fontWeight: FontWeight.Bold })\n    },\n    {\n      start: 4,\n      length: 2,\n      styledKey: StyledStringKey.FONT,\n      styledValue: new TextStyle({ fontColor: '#FFD700', fontWeight: FontWeight.Bold })\n    }\n  ]);\n  controller: TextController = new TextController();\n\n  build() {\n    Row() {\n      Column({ space: 5 }) {\n        Text(undefined, { controller: this.controller })\n          .width(240)\n          .copyOption(CopyOptions.InApp)\n          .draggable(true)\n          .onAppear(() => {\n            this.paragraphStyledString2.appendStyledString(this.paragraphStyledString3);\n            this.paragraphStyledString1.appendStyledString(this.paragraphStyledString2);\n            this.controller.setStyledString(this.paragraphStyledString1);\n          })\n\n        Button(\"限时4.88元 立即续费\")\n          .width(200)\n          .fontColor(Color.White)\n          .fontSize(18)\n          .backgroundColor('#3CB371')\n          .margin({ bottom: 10 })\n      }\n      .borderWidth(1).borderColor('#FFDEAD')\n      .margin({ left: 10 })\n    }\n    .height('60%')\n  }\n}
