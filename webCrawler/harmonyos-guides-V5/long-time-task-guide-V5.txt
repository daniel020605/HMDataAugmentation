长时任务开发指导（TaskPool）
此处提供使用TaskPool进行长时任务的开发指导，以定期采集传感器数据为例。
使用TaskPool进行传感器数据监听
导入需要用到的模块。 // Index.ets\nimport { sensor } from '@kit.SensorServiceKit';\nimport { taskpool } from '@kit.ArkTS';\nimport { BusinessError, emitter } from '@kit.BasicServicesKit'; 定义长时任务，内部监听sensor数据，并通过emitter注册销毁通知。 // Index.ets\n@Concurrent\nasync function SensorListener() : Promise<void> {\n  sensor.on(sensor.SensorId.ACCELEROMETER, (data) => {\n    emitter.emit({ eventId: 0 }, { data: data });\n  }, { interval: 1000000000 });\n\n  emitter.on({ eventId: 1 }, () => {\n    sensor.off(sensor.SensorId.ACCELEROMETER)\n    emitter.off(1)\n  })\n} 宿主线程定义注册及销毁的行为。 注册：发起长时任务，并通过emitter接收监听数据。销毁：发送取消传感器监听的事件，并结束长时任务。 // Index.ets\n@Entry\n@Component\nstruct Index {\n  sensorTask?: taskpool.LongTask\n\n  build() {\n    Column() {\n      Text(\"Add listener\")\n        .id('HelloWorld')\n        .fontSize(50)\n        .fontWeight(FontWeight.Bold)\n        .onClick(() => {\n          this.sensorTask = new taskpool.LongTask(SensorListener);\n          emitter.on({ eventId: 0 }, (data) => {\n            // Do something here\n            console.info(`Receive ACCELEROMETER data: {${data.data?.x}, ${data.data?.y}, ${data.data?.z}`);\n          });\n          taskpool.execute(this.sensorTask).then(() => {\n            console.info(\"Add listener of ACCELEROMETER success\");\n          }).catch((e: BusinessError) => {\n            // Process error\n          })\n        })\n      Text(\"Delete listener\")\n        .id('HelloWorld')\n        .fontSize(50)\n        .fontWeight(FontWeight.Bold)\n        .onClick(() => {\n          emitter.emit({ eventId: 1 });\n          emitter.off(0);\n          if(this.sensorTask != undefined) {\n            taskpool.terminateTask(this.sensorTask);\n          } else {\n            console.error(\"sensorTask is undefined.\");\n          }\n        })\n    }\n    .height('100%')\n    .width('100%')\n  }\n} 
