用户相册资源使用指导
photoAccessHelper提供用户相册相关的接口，供开发者创建、删除用户相册，往用户相册中添加和删除图片和视频资源等。
在进行功能开发前，请开发者查阅开发准备，了解如何获取相册管理模块实例和如何申请相册管理模块功能开发相关权限。
文档中使用到photoAccessHelper的地方默认为使用开发准备中获取的对象，如未添加此段代码报photoAccessHelper未定义的错误请自行添加。
为了保证应用的运行效率，大部分photoAccessHelper的接口调用都是异步的。以下异步调用的API示例均采用Promise函数，更多方式可以查阅API参考。
如无特别说明，文档中涉及的待获取的资源均视为已经预置且在数据库中存在相应数据。如出现按照示例代码执行出现获取资源为空的情况请确认文件是否已预置，数据库中是否存在该文件的数据。
获取用户相册
通过PhotoAccessHelper.getAlbums接口获取用户相册。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'。 
下面以获取一个相册名为'albumName'的用户相册为例。
开发步骤
 建立检索条件，用于获取用户相册。 调用PhotoAccessHelper.getAlbums接口获取用户相册资源。 调用FetchResult.getFirstObject接口获取第一个用户相册。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let albumName: photoAccessHelper.AlbumKeys = photoAccessHelper.AlbumKeys.ALBUM_NAME;\n  predicates.equalTo(albumName, 'albumName');\n  let fetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: predicates\n  };\n\n  try {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = await phAccessHelper.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n    let album: photoAccessHelper.Album = await fetchResult.getFirstObject();\n    console.info('getAlbums successfully, albumName: ' + album.albumName);\n    fetchResult.close();\n  } catch (err) {\n    console.error('getAlbums failed with err: ' + err);\n  }\n}
重命名用户相册
重命名用户相册修改的是相册的Album.albumName属性。
调用MediaAlbumChangeRequest.setAlbumName重命名用户相册后再通过PhotoAccessHelper.applyChanges更新到数据库中完成修改。
在重命名用户相册之前，需要先获取相册对象，可以通过FetchResult中的接口获取对应位置的用户相册。
重命名的相册名参数规格为：
 相册名字符串长度为1~255。 不允许出现的非法英文字符，包括： . \\ / : * ? \" ' ` < > | { } [ ] 英文字符大小写不敏感。 相册名不允许重名。 
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以将一个相册名为'albumName'的用户相册重命名为例。
开发步骤
 建立检索条件，用于获取用户相册。 调用PhotoAccessHelper.getAlbums接口获取用户相册资源。 调用FetchResult.getFirstObject接口获取第一个用户相册。 调用MediaAlbumChangeRequest.setAlbumName接口设置新的相册名。 调用PhotoAccessHelper.applyChanges接口将修改的相册属性更新到数据中完成修改。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let albumName: photoAccessHelper.AlbumKeys = photoAccessHelper.AlbumKeys.ALBUM_NAME;\n  predicates.equalTo(albumName, 'albumName');\n  let fetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: predicates\n  };\n\n  try {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = await phAccessHelper.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n    let album: photoAccessHelper.Album = await fetchResult.getFirstObject();\n    console.info('getAlbums successfully, albumName: ' + album.albumName);\n    let albumChangeRequest: photoAccessHelper.MediaAlbumChangeRequest = new photoAccessHelper.MediaAlbumChangeRequest(album);\n    let newAlbumName: string = 'newAlbumName';\n    albumChangeRequest.setAlbumName(newAlbumName);\n    await phAccessHelper.applyChanges(albumChangeRequest);\n    console.info('setAlbumName successfully, new albumName: ' + album.albumName);\n    fetchResult.close();\n  } catch (err) {\n    console.error('setAlbumName failed with err: ' + err);\n  }\n}
添加图片和视频到用户相册中
先获取用户相册对象和需要添加到相册中的图片或视频的对象数组，然后调用MediaAlbumChangeRequest.addAssets和PhotoAccessHelper.applyChanges接口往用户相册中添加图片或视频。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以将往相册名为'albumName'的用户相册中添加一张图片为例。
开发步骤
 建立相册检索条件，用于获取用户相册。 建立图片检索条件，用于获取图片。 调用PhotoAccessHelper.getAlbums接口获取用户相册资源。 调用FetchResult.getFirstObject接口获取第一个用户相册。 调用PhotoAccessHelper.getAssets接口获取图片资源。 调用FetchResult.getFirstObject接口获取第一张图片。 调用MediaAlbumChangeRequest.addAssets接口往用户相册中添加图片。 调用PhotoAccessHelper.applyChanges接口提交相册变更请求。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let albumPredicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let albumName: photoAccessHelper.AlbumKeys = photoAccessHelper.AlbumKeys.ALBUM_NAME;\n  albumPredicates.equalTo(albumName, 'albumName');\n  let albumFetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: albumPredicates\n  };\n\n  let photoPredicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let photoFetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: photoPredicates\n  };\n\n  try {\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = await phAccessHelper.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, albumFetchOptions);\n    let album: photoAccessHelper.Album = await albumFetchResult.getFirstObject();\n    console.info('getAlbums successfully, albumName: ' + album.albumName);\n    let photoFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = await phAccessHelper.getAssets(photoFetchOptions);\n    let photoAsset: photoAccessHelper.PhotoAsset = await photoFetchResult.getFirstObject();\n    console.info('getAssets successfully, albumName: ' + photoAsset.displayName);\n    let albumChangeRequest: photoAccessHelper.MediaAlbumChangeRequest = new photoAccessHelper.MediaAlbumChangeRequest(album);\n    albumChangeRequest.addAssets([photoAsset]);\n    await phAccessHelper.applyChanges(albumChangeRequest);\n    console.info('succeed to add ' + photoAsset.displayName + ' to ' + album.albumName);\n    albumFetchResult.close();\n    photoFetchResult.close();\n  } catch (err) {\n    console.error('addAssets failed with err: ' + err);\n  }\n}
获取用户相册中的图片和视频
先获取用户相册对象，然后调用Album.getAssets接口获取用户相册中的图片资源。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以获取相册名为'albumName'的用户相册中的一张图片为例。
开发步骤
 建立相册检索条件，用于获取用户相册。 建立图片检索条件，用于获取图片。 调用PhotoAccessHelper.getAlbums接口获取用户相册资源。 调用FetchResult.getFirstObject接口获取第一个用户相册。 调用Album.getAssets接口获取用户相册中的图片资源。 调用FetchResult.getFirstObject接口获取第一张图片。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let albumPredicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let albumName: photoAccessHelper.AlbumKeys = photoAccessHelper.AlbumKeys.ALBUM_NAME;\n  albumPredicates.equalTo(albumName, 'albumName');\n  let albumFetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: albumPredicates\n  };\n\n  let photoPredicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let photoFetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: photoPredicates\n  };\n\n  try {\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = await phAccessHelper.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, albumFetchOptions);\n    let album: photoAccessHelper.Album = await albumFetchResult.getFirstObject();\n    console.info('getAlbums successfully, albumName: ' + album.albumName);\n    let photoFetchResult = await album.getAssets(photoFetchOptions);\n    let photoAsset = await photoFetchResult.getFirstObject();\n    console.info('album getAssets successfully, albumName: ' + photoAsset.displayName);\n    albumFetchResult.close();\n    photoFetchResult.close();\n  } catch (err) {\n    console.error('album getAssets failed with err: ' + err);\n  }\n}
从用户相册中移除图片和视频
先获取用户相册对象，然后调用Album.getAssets接口获取用户相册中的资源。
选择其中要移除的资源，然后调用MediaAlbumChangeRequest.removeAssets和PhotoAccessHelper.applyChanges接口移除。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以将往相册名为'albumName'的用户相册中移除一张图片为例。
开发步骤
 建立相册检索条件，用于获取用户相册。 建立图片检索条件，用于获取图片。 调用PhotoAccessHelper.getAlbums接口获取用户相册资源。 调用FetchResult.getFirstObject接口获取第一个用户相册。 调用Album.getAssets接口获取图片资源。 调用FetchResult.getFirstObject接口获取第一张图片。 调用MediaAlbumChangeRequest.removeAssets接口从用户相册中移除图片。 调用PhotoAccessHelper.applyChanges接口提交相册变更请求。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let albumPredicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let albumName: photoAccessHelper.AlbumKeys = photoAccessHelper.AlbumKeys.ALBUM_NAME;\n  albumPredicates.equalTo(albumName, 'albumName');\n  let albumFetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: albumPredicates\n  };\n\n  let photoPredicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let photoFetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: photoPredicates\n  };\n\n  try {\n    let albumFetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = await phAccessHelper.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, albumFetchOptions);\n    let album: photoAccessHelper.Album = await albumFetchResult.getFirstObject();\n    console.info('getAlbums successfully, albumName: ' + album.albumName);\n    let photoFetchResult = await album.getAssets(photoFetchOptions);\n    let photoAsset = await photoFetchResult.getFirstObject();\n    console.info('album getAssets successfully, albumName: ' + photoAsset.displayName);\n    let albumChangeRequest: photoAccessHelper.MediaAlbumChangeRequest = new photoAccessHelper.MediaAlbumChangeRequest(album);\n    albumChangeRequest.removeAssets([photoAsset]);\n    await phAccessHelper.applyChanges(albumChangeRequest);\n    console.info('succeed to remove ' + photoAsset.displayName + ' from ' + album.albumName);\n    albumFetchResult.close();\n    photoFetchResult.close();\n  } catch (err) {\n    console.error('removeAssets failed with err: ' + err);\n  }\n}
