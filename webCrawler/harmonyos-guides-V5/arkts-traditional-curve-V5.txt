传统曲线
传统曲线基于数学公式，创造形状符合开发者预期的动画曲线。以三阶贝塞尔曲线为代表，通过调整曲线控制点，可以改变曲线形状，从而带来缓入、缓出等动画效果。对于同一条传统曲线，由于不具备物理含义，其形状不会因为用户行为发生任何改变，缺少物理动画的自然感和生动感。建议优先采用物理曲线创建动画，将传统曲线作为辅助用于极少数必要场景中。
ArkUI提供了贝塞尔曲线、阶梯曲线等传统曲线接口，开发者可参照插值计算进行查阅。
传统曲线的示例和效果如下：
class MyCurve {\n  public title: string;\n  public curve: Curve;\n  public color: Color | string;\n\n  constructor(title: string, curve: Curve, color: Color | string = '') {\n    this.title = title;\n    this.curve = curve;\n    this.color = color;\n  }\n}\n\nconst myCurves: MyCurve[] = [\n  new MyCurve(' Linear', Curve.Linear, '#317AF7'),\n  new MyCurve(' Ease', Curve.Ease, '#D94838'),\n  new MyCurve(' EaseIn', Curve.EaseIn, '#DB6B42'),\n  new MyCurve(' EaseOut', Curve.EaseOut, '#5BA854'),\n  new MyCurve(' EaseInOut', Curve.EaseInOut, '#317AF7'),\n  new MyCurve(' FastOutSlowIn', Curve.FastOutSlowIn, '#D94838')\n]\n\n@Entry\n@Component\nexport struct CurveDemo {\n  @State dRotate: number = 0; // 旋转角度\n\n  build() {\n    Column() {\n      // 曲线图例\n      Grid() {\n        ForEach(myCurves, (item: MyCurve) => {\n          GridItem() {\n            Column() {\n              Row()\n                .width(30)\n                .height(30)\n                .borderRadius(15)\n                .backgroundColor(item.color)\n              Text(item.title)\n                .fontSize(15)\n                .fontColor(0x909399)\n            }\n            .width('100%')\n          }\n        })\n      }\n      .columnsTemplate('1fr 1fr 1fr')\n      .rowsTemplate('1fr 1fr 1fr 1fr 1fr')\n      .padding(10)\n      .width('100%')\n      .height(300)\n      .margin({ top: 50 })\n\n      Stack() {\n        // 摆动管道\n        Row()\n          .width(290)\n          .height(290)\n          .border({\n            width: 15,\n            color: 0xE6E8EB,\n            radius: 145\n          })\n\n        ForEach(myCurves, (item: MyCurve) => {\n          // 小球\n          Column() {\n            Row()\n              .width(30)\n              .height(30)\n              .borderRadius(15)\n              .backgroundColor(item.color)\n          }\n          .width(20)\n          .height(300)\n          .rotate({ angle: this.dRotate })\n          .animation({\n            duration: 2000,\n            iterations: -1,\n            curve: item.curve,\n            delay: 100\n          })\n        })\n      }\n      .width('100%')\n      .height(200)\n      .onClick(() => {\n        this.dRotate ? null : this.dRotate = 360;\n      })\n    }\n    .width('100%')\n  }\n}
