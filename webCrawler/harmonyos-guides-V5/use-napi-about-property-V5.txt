使用Node-API接口设置ArkTS对象的属性
简介
使用Node-API接口获取和设置ArkTS对象的属性。通过合理使用这些函数，实现更复杂的功能和逻辑。
基本概念
在ArkTS对象属性的相关开发中，需要处理ArkTS对象属性，确保正确地访问、设置、删除属性，并了解属性的继承关系和枚举特性。以下是一些关键概念：
对象（Object）：在ArkTS中，对象是一种复合数据类型，它允许存储多个不同类型的值作为一个单独的实体。对象是属性和方法的集合。属性是与对象相关联的值，而方法则是对象可以执行的操作。属性（Property）：在ArkTS中，属性是对象特征的键值对。每个属性都有一个名字（也称为键或标识符）和一个值。属性的值可以是任意数据类型，包括基本类型、对象和函数。可枚举属性（EnumerableProperty）：在ArkTS中，对象的属性分为可枚举和不可枚举之分，它们是由属性的enumerable值决定的，即内部 “可枚举” 标志设置为true或false。可枚举性决定了这个属性能否被 for...in 查找遍历到。自有属性（OwnProperty）：自有属性直接定义在对象上的属性，而不是从原型链上继承来的属性。
场景和功能介绍
以下Node-API接口提供了对ArkTS对象属性的基本操作，包括设置、获取、删除和检查属性是否存在。使用场景如下：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_get_property_names
以字符串数组的形式获取对象的可枚举属性的名称。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetPropertyNames(napi_env env, napi_callback_info info)\n{\n    // 解析ArkTS的传参\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 以字符串数组的形式获取对象的可枚举属性的名称，以result传出\n    napi_value result;\n    napi_status status = napi_get_property_names(env, args[0], &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_get_property_names fail\");\n        return nullptr;\n    }\n    return result;\n}
接口声明
// index.d.ts\nexport const getPropertyNames: (obj: Object) => Array<string> | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  class Obj {\n    data: number = 0\n    message: string = \"\"\n  }\n  let obj: Obj = { data: 0, message: \"hello world\"};\n  let propertyNames = testNapi.getPropertyNames(obj);\n  if (Array.isArray(propertyNames) && propertyNames.length > 0) {\n    hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_property_names: %{public}s', propertyNames[0]);\n    hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_property_names: %{public}s', propertyNames[1]);\n  }\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_get_property_names error: %{public}s', error.message);\n}
[h2]napi_set_property
将给定的属性与值设置入给定的Object。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value SetProperty(napi_env env, napi_callback_info info)\n{\n    // 接收ArkTS侧传入的三个参数：第一个参数为想要设置的object，第二个参数为属性，第三个参数为属性对应的值\n    size_t argc = 3;\n    napi_value args[3] = {nullptr};\n    napi_status status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_get_cb_info fail\");\n    }\n    // 通过调用napi_set_property接口将属性与值设置入object，如果失败，直接抛出错误\n    status = napi_set_property(env, args[0], args[1], args[2]);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_set_property fail\");\n        return nullptr;\n    }\n    // 返回设置成功的object对象\n    return args[0];\n}
接口声明
// index.d.ts\nexport const setProperty: (obj: Object, key: String, value: string) => Object | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  class Obj {\n    data: number = 0\n    message: string = \"\"\n  }\n  let obj: Obj = { data: 0, message: \"hello world\"};\n  let result = testNapi.setProperty(obj, \"code\", \"hi\");\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_set_property: %{public}s', JSON.stringify(result));\n} catch (error) {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_set_property error: %{public}s', error.message);\n}
[h2]napi_get_property
获取object指定的属性的值。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetProperty(napi_env env, napi_callback_info info)\n{\n    // 接收两个ArkTS传来的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 传入的第一个参数为要检测的object，第二个对象为要检测的属性，通过调用napi_get_property接口获取对应的值\n    napi_value result;\n    napi_status status = napi_get_property(env, args[0], args[1], &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_get_property fail\");\n        return nullptr;\n    }\n    return result;\n}
接口声明
// index.d.ts\nexport const getProperty: (obj: Object, key: string) => string | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  class Obj {\n    data: number = 0\n    message: string = \"\"\n  }\n  let obj: Obj = { data: 0, message: \"hello world\"};\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_property: %{public}s', testNapi.getProperty(obj, \"message\"));\n} catch (error) {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_property error: %{public}s', error.message);\n}
[h2]napi_has_property
检查对象中是否存在指定的属性，可以避免访问不存在属性导致的异常或错误。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value HasProperty(napi_env env, napi_callback_info info)\n{\n    // 从ArkTS侧传入两个参数：第一个参数为要检验的对象，第二个参数为要检测是否存在对象的属性\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 将参数传入napi_has_property方法中，若接口调用成功则将结果转化为napi_value类型抛出，否则抛出错误\n    bool result;\n    napi_status status = napi_has_property(env, args[0], args[1], &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_has_property fail\");\n        return nullptr;\n    }\n\n    // 若传入属性存在传入对象中，则输出true将结果转化为napi_value类型抛出\n    napi_value returnResult;\n    napi_get_boolean(env, result, &returnResult);\n    return returnResult;\n}
接口声明
// index.d.ts\nexport const hasProperty: (obj: Object, key: number | string) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  class Obj {\n    data: number = 0\n    message: string = \"\"\n  }\n  let obj: Obj = { data: 0, message: \"hello world\"};\n  let resultFalse = testNapi.hasProperty(obj, 0);\n  let resultTrue = testNapi.hasProperty(obj, \"data\");\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_has_property: %{public}s', JSON.stringify(resultFalse));\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_has_property: %{public}s', JSON.stringify(resultTrue));\n} catch (error) {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_has_property error: %{public}s', error.message);\n}
[h2]napi_delete_property
尝试从给定的Object中删除由key指定的属性，并返回操作的结果。
如果对象是一个不可扩展的对象，或者属性是不可配置的，则可能无法删除该属性。
cpp部分代码
#include \"napi/native_api.h\"\n\n// 从传入的Object对象中删除指定属性，返回是否删除成功的bool结果值\nstatic napi_value DeleteProperty(napi_env env, napi_callback_info info)\n{\n    // 接收两个ArkTS传来的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    napi_valuetype valueType;\n    napi_typeof(env, args[0], &valueType);\n    if (valueType != napi_object) {\n        napi_throw_error(env, nullptr, \"Expects an object as argument.\");\n        return nullptr;\n    }\n    // 删除指定属性，结果存储在result中\n    bool result = false;\n    napi_status status = napi_delete_property(env, args[0], args[1], &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_delete_property failed\");\n        return nullptr;\n    }\n    // 将bool结果转换为napi_value并返回\n    napi_value ret;\n    napi_get_boolean(env, result, &ret);\n    return ret;\n}
接口声明
// index.d.ts\nexport const deleteProperty: (obj: Object, key:string) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nclass Obj {\n  first: number = 0;\n}\nlet obj: Obj = { first: 1};\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_delete_property first: %{public}s', testNapi.deleteProperty(obj, 'first'));\n// 设置新的属性为不可配置\n// 这里的Object.defineProperty方法在DevEco Studio 4.1.0.400及其以上版本不支持，需在ts使用\nObject.defineProperty(obj, 'config', {\n  configurable: false,\n  value: \"value\"\n})\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_delete_property config: %{public}s', testNapi.deleteProperty(obj, 'config'));
[h2]napi_has_own_property
用于检查传入的Object是否具有自己的命名属性，不包括从原型链上继承的属性。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiHasOwnProperty(napi_env env, napi_callback_info info)\n{\n    // 接收两个ArkTS传来的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 检查第一个参数是否为对象\n    napi_valuetype valueTypeObj;\n    napi_typeof(env, args[0], &valueTypeObj);\n    if (valueTypeObj != napi_object) {\n        napi_throw_error(env, nullptr, \"First argument must be an object.\");\n        return nullptr;\n    }\n    // 检查第二个参数是否为string\n    napi_valuetype valuetypeStr;\n    napi_typeof(env, args[1], &valuetypeStr);\n    if (valuetypeStr != napi_string) {\n        napi_throw_error(env, nullptr, \"Second argument must be a string.\");\n        return nullptr;\n    }\n    // 检查对象是否具有指定属性，结果存储在hasProperty中\n    bool hasProperty;\n    napi_status status = napi_has_own_property(env, args[0], args[1], &hasProperty);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_has_own_property failed\");\n        return nullptr;\n    }\n    // 将bool结果转换为napi_value并返回\n    napi_value result;\n    napi_get_boolean(env, hasProperty, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const napiHasOwnProperty: (obj: Object, key:string) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet myObj = { 'myProperty': 1 };\nlet inheritedObj = { 'inheritedProperty': 2 };\n// 这里的Object.setPrototypeOf方法在DevEco Studio 4.1.0.400及其以上版本不支持，需在ts使用\nObject.setPrototypeOf(myObj, inheritedObj);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_own_property my: %{public}s', testNapi.napiHasOwnProperty(myObj, 'myProperty'));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_own_property inherited: %{public}s', testNapi.napiHasOwnProperty(myObj, 'inheritedProperty'));
[h2]napi_set_named_property
用于在传入的ArkTS对象上设置一个命名属性。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiSetNamedProperty(napi_env env, napi_callback_info info)\n{\n    // 接收一个ArkTS传来的参数\n    size_t argc = 1;\n    napi_value str;\n    const int32_t strLength = 32;\n    char strKey[strLength] = \"\";\n    napi_get_cb_info(env, info, &argc, &str, nullptr, nullptr);\n    // 获取传入参数字符串并存储在strKey中\n    size_t keyLength;\n    napi_get_value_string_utf8(env, str, strKey, strLength, &keyLength);\n    // 创建一个新对象\n    napi_value newObj;\n    napi_create_object(env, &newObj);\n    // 设置整数值1234为属性值\n    int32_t value = 1234;\n    napi_value numValue;\n    napi_create_int32(env, value, &numValue);\n    // 将整数值与指定属性名关联\n    napi_status status = napi_set_named_property(env, newObj, strKey, numValue);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_set_named_property failed\");\n        return nullptr;\n    }\n    // 返回设置了命名属性的对象newObj\n    return newObj;\n}
接口声明
// index.d.ts\nexport const napiSetNamedProperty: (key: string) => Object | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet obj = testNapi.napiSetNamedProperty('myProperty');\nlet objAsString = JSON.stringify(obj);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_set_named_property: %{public}s', objAsString);
[h2]napi_get_named_property
用于从ArkTS对象中获取命名属性的值。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiGetNamedProperty(napi_env env, napi_callback_info info)\n{\n    // 接收两个ArkTS传来的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    const int32_t strLength = 32;\n    char strKey[strLength] = \"\";\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 获取要获取的属性名\n    size_t keyLength;\n    napi_get_value_string_utf8(env, args[1], strKey, strLength, &keyLength);\n    // 获取指定属性的值并存储在result中\n    napi_value result;\n    napi_status status = napi_get_named_property(env, args[0], strKey, &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_get_named_property failed\");\n        return nullptr;\n    }\n    // 返回result\n    return result;\n}
接口声明
// index.d.ts\nexport const napiGetNamedProperty: (obj: Object, key:string) => boolean | number | string | Object | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ninterface NestedObj {\n  nestedStr: string;\n  nestedNum: number;\n}\nclass Obj {\n  str: string = \"\";\n  num: number = 0;\n  bol: boolean = false;\n  nestedObj: NestedObj = { nestedStr: \"\", nestedNum: 0 };\n}\nlet obj: Obj = {str: \"bar\", num: 42, bol: true,\n  nestedObj: { nestedStr: \"nestedValue\", nestedNum: 123 }};\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_named_property : %{public}s', testNapi.napiGetNamedProperty(obj, 'str'));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_named_property : %{public}d', testNapi.napiGetNamedProperty(obj, 'num'));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_named_property : %{public}s', testNapi.napiGetNamedProperty(obj, 'bol'));\nlet nestedObj = testNapi.napiGetNamedProperty(obj, 'nestedObj');\nlet objAsString = JSON.stringify(nestedObj);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_named_property : %{public}s', objAsString);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_named_property : %{public}s', testNapi.napiGetNamedProperty(obj, 'null'));
[h2]napi_has_named_property
用于检查ArkTS对象中是否包含指定的命名属性。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiHasNamedProperty(napi_env env, napi_callback_info info)\n{\n    // 接收两个ArkTS传来的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    const int32_t strLength = 32;\n    char strKey[strLength] = \"\";\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 获取要检查的属性名\n    size_t keyLength;\n    napi_get_value_string_utf8(env, args[1], strKey, strLength, &keyLength);\n    // 检查对象是否具有指定命名的属性，并将结果存储在hasProperty中\n    bool hasProperty = false;\n    napi_status status = napi_has_named_property(env, args[0], strKey, &hasProperty);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_has_named_property failed\");\n        return nullptr;\n    }\n    // 将bool结果转换为napi_value并返回\n    napi_value result;\n    napi_get_boolean(env, hasProperty, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const napiHasNamedProperty: (obj: Object, key:string) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ninterface NestedObj {\n  nestedStr: string;\n  nestedNum: number;\n}\nclass Obj {\n  str: string = \"\";\n  num: number = 0;\n  bol: boolean = false;\n  nestedObj: NestedObj = { nestedStr: \"\", nestedNum: 0 };\n}\nlet obj: Obj = {str: \"bar\", num: 42, bol: true,\n  nestedObj: { nestedStr: \"nestedValue\", nestedNum: 123 }};\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_named_property : %{public}s', testNapi.napiHasNamedProperty(obj, 'str'));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_named_property : %{public}s', testNapi.napiHasNamedProperty(obj, 'nestedStr'));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_named_property : %{public}s', testNapi.napiHasNamedProperty(obj, 'bol'));
[h2]napi_define_properties
用于定义对象的属性。
cpp部分代码
#include <string>\n#include \"napi/native_api.h\"\n\nstatic napi_value DefineMethodPropertiesExample(napi_env env, napi_callback_info info)\n{\n    // 创建一个int32类型的属性值\n    int32_t propValue = 26;\n    napi_value returnValue = nullptr;\n    napi_create_int32(env, propValue, &returnValue);\n    return returnValue;\n}\n// Getter回调函数\nstatic napi_value GetterCallback(napi_env env, napi_callback_info info)\n{\n    napi_value result;\n    const char *str = u8\"World!\";\n    size_t length = strlen(str);\n    // 创建属性的值\n    napi_create_string_utf8(env, str, length, &result);\n    return result;\n}\n\n// Setter回调函数\nstatic napi_value SetterCallback(napi_env env, napi_callback_info info)\n{\n    // 获取传递给setter的参数\n    size_t argc = 1;\n    napi_value argv[1] = {nullptr};\n    napi_value result;\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    size_t length = 0;\n    napi_get_value_string_utf8(env, argv[0], nullptr, 0, &length);\n    char* buf = new char[length + 1];\n    std::memset(buf, 0, length + 1);\n    napi_get_value_string_utf8(env, argv[0], buf, length + 1, &length);\n    napi_create_string_utf8(env, buf, length, &result);\n    delete buf;\n    return result;\n}\nstatic napi_value DefineMethodProperties(napi_env env, napi_callback_info info)\n{\n    napi_value obj;\n    napi_create_object(env, &obj);\n    // 在obj对象上定义了一个函数defineMethodPropertiesExample，在函数defineMethodPropertiesExample中定义了一个变量并返回，在调用obj的这个对象时可以调用这个函数\n    napi_property_descriptor descriptor[] = {\n        {\"defineMethodPropertiesExample\", nullptr, DefineMethodPropertiesExample, nullptr, nullptr, nullptr, napi_default, nullptr}};\n    napi_define_properties(env, obj, sizeof(descriptor) / sizeof(descriptor[0]), descriptor);\n    return obj;\n}\nstatic napi_value DefineStringProperties(napi_env env, napi_callback_info info)\n{\n    napi_value obj;\n    napi_create_object(env, &obj);\n    // 创建一个string类型的属性值\n    napi_value string_value;\n    napi_create_string_utf8(env, \"Hello!\", NAPI_AUTO_LENGTH, &string_value);\n    napi_property_descriptor descriptor[] = {\n        {\"defineStringPropertiesExample\", nullptr, nullptr, nullptr, nullptr, string_value, napi_default, nullptr}};\n    napi_define_properties(env, obj, sizeof(descriptor) / sizeof(descriptor[0]), descriptor);\n    return obj;\n}\n\nstatic napi_value CreateStringWithGetterSetter(napi_env env, napi_callback_info info)\n{\n    napi_value obj;\n    napi_create_object(env, &obj);\n    // 定义getter函数\n    napi_value getterFn;\n    napi_create_function(env, nullptr, 0, GetterCallback, nullptr, &getterFn);\n    napi_set_named_property(env, obj, \"getterCallback\", getterFn);\n    // 定义setter函数\n    napi_value setterFn;\n    napi_create_function(env, nullptr, 0, SetterCallback, nullptr, &setterFn);\n    napi_set_named_property(env, obj, \"setterCallback\", setterFn);\n    // 定义带有getter和setter的属性\n    napi_property_descriptor desc = {\"defineGetterSetter\", nullptr, GetterCallback, SetterCallback, nullptr, obj, napi_enumerable, nullptr};\n    napi_define_properties(env, obj, 1, &desc);\n    return obj;\n}
接口声明
// index.d.ts\nexport class DefineMethodObj {\n  defineMethodPropertiesExample: Function;\n}\nexport class DefineStringObj {\n  defineStringPropertiesExample: string;\n}\nexport class DefineGetterSetterObj {\n  getterCallback: Function;\n  setterCallback: Function;\n}\nexport const defineMethodProperties: () => DefineMethodObj;\nexport const defineStringProperties: () => DefineStringObj;\nexport const createStringWithGetterSetter: () => DefineGetterSetterObj;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n// 定义method类型的属性\nhilog.info(0x0000, 'testTag', 'Test Node-API define_method_properties:%{public}d', testNapi.defineMethodProperties()\n  .defineMethodPropertiesExample());\n// 定义string类型的属性\nhilog.info(0x0000, 'testTag', 'Test Node-API define_string_properties::%{public}s ', testNapi.defineStringProperties()\n  .defineStringPropertiesExample);\n// getter和setter\nhilog.info(0x0000, 'testTag', 'Test Node-API get::%{public}s ', testNapi.createStringWithGetterSetter()\n  .getterCallback());\nhilog.info(0x0000, 'testTag', 'Test Node-API setter::%{public}s ', testNapi.createStringWithGetterSetter()\n  .setterCallback('set data'));
[h2]napi_get_all_property_names
用于获取传入的ArkTS对象的所有属性名。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetAllPropertyNames(napi_env env, napi_callback_info info)\n{\n    // 传入一个参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取给定对象的所有属性名称\n    napi_value result;\n    napi_status status = napi_get_all_property_names(env, args[0], napi_key_own_only, napi_key_writable,\n                                                     napi_key_numbers_to_strings, &result);\n    // 如果获取属性名失败，抛出一个错误\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_get_all_property_names fail\");\n        return nullptr;\n    }\n\n    return result;\n}
接口声明
// index.d.ts\nexport const getAllPropertyNames : (obj: Object) => Array<string> | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  class Obj {\n    data: number = 0\n    message: string = \"\"\n  }\n  let obj: Obj = { data: 0, message: \"hello world\"};\n  let propertyNames = testNapi.getAllPropertyNames(obj);\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_all_property_names: %{public}s', JSON.stringify(propertyNames));\n} catch (error) {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_all_property_names error: %{public}s', error.message);\n}
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
