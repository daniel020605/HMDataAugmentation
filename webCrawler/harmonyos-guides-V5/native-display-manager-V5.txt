使用OH_DisplayManager实现屏幕基础信息查询和状态监听 (C/C++)
场景介绍
OH_DisplayManager屏幕管理模块用于提供屏幕的信息查询、屏幕状态变化监听、折叠设备的折叠状态变化监听等能力，应用可根据对应的屏幕信息、屏幕状态变化、屏幕折叠状态适配不同的UI界面显示。
 支持查询的屏幕信息，包括屏幕的分辨率、物理像素密度、逻辑像素密度、刷新率、屏幕尺寸、屏幕旋转方向、屏幕旋转角度等。 支持屏幕状态变化的监听，包括屏幕旋转变化，屏幕分辨率变化、屏幕刷新率变化等。 支持查询当前设备是否为可折叠设备，同时支持折叠状态（展开/折叠）变化的监听。 
基本概念
 屏幕的物理像素密度(densityDPI)：代表每英寸屏幕所拥有的物理像素点数。 屏幕的逻辑像素的密度(densityPixels)：代表物理像素与逻辑像素的缩放系数比，计算方法为物理像素密度除以160。 
接口说明
常用接口如下表所示。更多API说明请参考OH_DisplayManager。
在CMake脚本中链接动态库
target_link_libraries(entry PUBLIC libhilog_ndk.z.so)\ntarget_link_libraries(entry PUBLIC libnative_display_manager.so )
添加头文件
#include <window_manager/oh_display_info.h>\n#include <window_manager/oh_display_manager.h>\n#include <hilog/log.h>
获取屏幕状态
 可以通过OH_NativeDisplayManager_GetDefaultDisplayRotation获取默认屏幕的旋转角度。 #include \"napi/native_api.h\"\n#include <window_manager/oh_display_info.h>\n#include <window_manager/oh_display_manager.h>\n#include <hilog/log.h>\n\nstatic napi_value GetDefaultDisplayRotation(napi_env env, napi_callback_info info)\n{\n    NativeDisplayManager_Rotation displayRotation;\n    NativeDisplayManager_ErrorCode errCode = OH_NativeDisplayManager_GetDefaultDisplayRotation(&displayRotation);\n    if (errCode == NativeDisplayManager_ErrorCode::DISPLAY_MANAGER_OK) {\n        napi_value rotation;\n        napi_create_int32(env, displayRotation, &rotation);\n        return rotation;\n    } else {\n        napi_value errorCode;\n        napi_create_int32(env, errCode, &errorCode);\n        return errorCode;  \n    }\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_property_descriptor desc[] = {\n       {\"getDisplayRotation\", nullptr, GetDefaultDisplayRotation, nullptr, nullptr, nullptr, napi_default, nullptr},\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END 可以通过OH_NativeDisplayManager_CreateDefaultDisplayCutoutInfo获取挖孔屏、刘海屏、瀑布屏等不可用屏幕区域信息。 可通过OH_NativeDisplayManager_DestroyDefaultDisplayCutoutInfo销毁挖孔屏、刘海屏、瀑布屏等不可用屏幕区域信息。 #include \"napi/native_api.h\"\n#include <window_manager/oh_display_info.h>\n#include <window_manager/oh_display_manager.h>\n#include <hilog/log.h>\n\nstatic napi_value CreateDefaultDisplayCutoutInfo(napi_env env, napi_callback_info info)\n{\n    NativeDisplayManager_CutoutInfo *cutOutInfo = NULL;\n    NativeDisplayManager_ErrorCode errCode = OH_NativeDisplayManager_CreateDefaultDisplayCutoutInfo(&cutOutInfo);\n    OH_LOG_INFO(LOG_APP, \"GetDefaultCutoutInfo errCode=%{public}d\", errCode);\n    if (errCode == NativeDisplayManager_ErrorCode::DISPLAY_MANAGER_OK) {\n        if (cutOutInfo != NULL && cutOutInfo->boundingRectsLength != 0) {\n            OH_LOG_INFO(LOG_APP, \"GetDefaultCutoutInfo cutOutInfo length=%{public}d\", cutOutInfo->boundingRectsLength);\n            for (int i = 0; i < cutOutInfo->boundingRectsLength; i++) {\n                OH_LOG_INFO(LOG_APP, \"cutOutInfo[%{public}d]=[%{public}d %{public}d %{public}d %{public}d]\",\n                    i, cutOutInfo->boundingRects[i].left, cutOutInfo->boundingRects[i].top,\n                    cutOutInfo->boundingRects[i].width, cutOutInfo->boundingRects[i].height);\n            }\n            OH_LOG_INFO(LOG_APP, \"cutOutInfo waterfall left rect=[%{public}d %{public}d %{public}d %{public}d]\",\n            cutOutInfo->waterfallDisplayAreaRects.left.left, cutOutInfo->waterfallDisplayAreaRects.left.top,\n            cutOutInfo->waterfallDisplayAreaRects.left.left, cutOutInfo->waterfallDisplayAreaRects.left.left);\n            OH_LOG_INFO(LOG_APP, \"cutOutInfo waterfall top rect=[%{public}d %{public}d %{public}d %{public}d]\",\n            cutOutInfo->waterfallDisplayAreaRects.top.left, cutOutInfo->waterfallDisplayAreaRects.top.top,\n            cutOutInfo->waterfallDisplayAreaRects.top.left, cutOutInfo->waterfallDisplayAreaRects.top.left);\n            OH_LOG_INFO(LOG_APP, \"cutOutInfo waterfall right rect=[%{public}d %{public}d %{public}d %{public}d]\",\n            cutOutInfo->waterfallDisplayAreaRects.right.left, cutOutInfo->waterfallDisplayAreaRects.right.top,\n            cutOutInfo->waterfallDisplayAreaRects.right.left, cutOutInfo->waterfallDisplayAreaRects.right.left);\n            OH_LOG_INFO(LOG_APP, \"cutOutInfo waterfall bottom rect=[%{public}d %{public}d %{public}d %{public}d]\",\n            cutOutInfo->waterfallDisplayAreaRects.bottom.left, cutOutInfo->waterfallDisplayAreaRects.bottom.top,\n            cutOutInfo->waterfallDisplayAreaRects.bottom.left, cutOutInfo->waterfallDisplayAreaRects.bottom.left);            \n        }\n        napi_value boundingRectsLength;\n        napi_create_int32(env, cutOutInfo->boundingRectsLength, &boundingRectsLength);\n        OH_NativeDisplayManager_DestroyDefaultDisplayCutoutInfo(cutOutInfo);   \n        return boundingRectsLength;\n    } else {\n        napi_value errorCode;\n        napi_create_int32(env, errCode, &errorCode);\n        return errorCode;  \n    }\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_property_descriptor desc[] = {\n        {\"getCutoutInfo\", nullptr, CreateDefaultDisplayCutoutInfo, nullptr, nullptr, nullptr, napi_default, nullptr},\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END 
监听屏幕状态变化
可以通过OH_NativeDisplayManager_RegisterDisplayChangeListener接口注册屏幕变化的监听，包括屏幕旋转、分辨率变化、刷新率变化、DPI变化等。 通过OH_NativeDisplayManager_UnregisterDisplayChangeListener接口取消屏幕状态变化的监听。
#include \"napi/native_api.h\"\n#include <window_manager/oh_display_info.h>\n#include <window_manager/oh_display_manager.h>\n#include <hilog/log.h>\n\nvoid DisplayChangeCallback(uint64_t displayId)\n{\n    OH_LOG_INFO(LOG_APP, \"DisplayChangeCallback displayId=%{public}lu.\", displayId);\n}\n\nstatic napi_value RegisterDisplayChangeListener(napi_env env, napi_callback_info info)\n{\n    uint32_t listenerIndex;\n    NativeDisplayManager_ErrorCode errCode = OH_NativeDisplayManager_RegisterDisplayChangeListener(\n        DisplayChangeCallback, &listenerIndex);\n    OH_LOG_INFO(LOG_APP, \"RegisterDisplayChangeListener listenerIndex =%{public}d errCode=%{public}d.\",\n        listenerIndex, errCode);\n    if (errCode == NativeDisplayManager_ErrorCode::DISPLAY_MANAGER_OK) {\n        napi_value registerIndex;\n        napi_create_int32(env, listenerIndex, &registerIndex);\n        return registerIndex;\n    } else {\n        napi_value errorCode;\n        napi_create_int32(env, errCode, &errorCode);\n        return errorCode;  \n    }\n}\n\nstatic napi_value UnregisterDisplayChangeListener(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = { nullptr };\n\n    uint32_t listenerIndex;\n    napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n    napi_get_value_uint32(env, args[0], &listenerIndex);\n    OH_LOG_INFO(LOG_APP, \"UnregisterDisplayChangeListener listenerIndex =%{public}d.\", listenerIndex);\n    NativeDisplayManager_ErrorCode errCode = OH_NativeDisplayManager_UnregisterDisplayChangeListener(listenerIndex);\n    OH_LOG_INFO(LOG_APP, \"UnregisterDisplayChangeListener errCode=%{public}d.\", errCode);\n    napi_value errorCode;\n    napi_create_int32(env, errCode, &errorCode);\n    return errorCode;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_property_descriptor desc[] = {\n        {\"registerDisplayChange\", nullptr, RegisterDisplayChangeListener, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"unregisterDisplayChange\", nullptr, UnregisterDisplayChangeListener, nullptr, nullptr, nullptr,\n            napi_default, nullptr},\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END
监听折叠设备状态变化
 可以通过OH_NativeDisplayManager_IsFoldable接口查询设备是不是折叠设备。 #include \"napi/native_api.h\"\n#include <window_manager/oh_display_info.h>\n#include <window_manager/oh_display_manager.h>\n#include <hilog/log.h>\n\nstatic napi_value IsFoldable(napi_env env, napi_callback_info info)\n{\n    bool isFoldDevice = OH_NativeDisplayManager_IsFoldable();\n    OH_LOG_INFO(LOG_APP, \"IsFoldable isFoldDevice =%{public}d.\", isFoldDevice);\n    napi_value isFold;\n    napi_get_boolean(env, isFoldDevice, &isFold);\n    return isFold;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_property_descriptor desc[] = {\n        {\"checkIsFoldDevice\", nullptr, IsFoldable, nullptr, nullptr, nullptr, napi_default, nullptr},\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END 可以通过OH_NativeDisplayManager_RegisterFoldDisplayModeChangeListener注册屏幕展开/折叠状态变化的监听。 通过OH_NativeDisplayManager_UnregisterFoldDisplayModeChangeListener接口取消屏幕展开/折叠状态变化的监听。 #include \"napi/native_api.h\"\n#include <window_manager/oh_display_info.h>\n#include <window_manager/oh_display_manager.h>\n#include <hilog/log.h>\n\nvoid FoldDisplayModeChangeCallback(NativeDisplayManager_FoldDisplayMode displayMode)\n{\n    OH_LOG_INFO(LOG_APP, \"displayMode=%{public}d.\", displayMode);\n}\n\nstatic napi_value RegisterFoldDisplayModeChangeListener(napi_env env, napi_callback_info info)\n{\n    uint32_t listenerIndex = 0;\n    NativeDisplayManager_ErrorCode errCode = OH_NativeDisplayManager_RegisterFoldDisplayModeChangeListener(\n        FoldDisplayModeChangeCallback, &listenerIndex);\n    OH_LOG_INFO(LOG_APP, \"listenerIndex =%{public}d errCode=%{public}d.\",\n        listenerIndex, errCode);\n    if (errCode == NativeDisplayManager_ErrorCode::DISPLAY_MANAGER_OK) {\n        napi_value registerIndex;\n        napi_create_int32(env, listenerIndex, &registerIndex);\n        return registerIndex;\n    } else {\n        napi_value errorCode;\n        napi_create_int32(env, errCode, &errorCode);\n        return errorCode;  \n    }\n}\n\nstatic napi_value UnregisterFoldDisplayModeChangeListener(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = { nullptr };\n    uint32_t listenerIndex;\n    napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n    napi_get_value_uint32(env, args[0], &listenerIndex);\n    OH_LOG_INFO(LOG_APP, \"listenerIndex =%{public}d.\", listenerIndex);\n    NativeDisplayManager_ErrorCode errCode = OH_NativeDisplayManager_UnregisterFoldDisplayModeChangeListener(listenerIndex);\n    OH_LOG_INFO(LOG_APP, \"errorCode=%{public}d\", errCode);\n    napi_value errorCode;\n    napi_create_int32(env, errCode, &errorCode);\n    return errorCode;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_property_descriptor desc[] = {\n    { \"registerFoldDisplayModeChange\", nullptr, RegisterFoldDisplayModeChangeListener, nullptr, nullptr, nullptr,\n        napi_default, nullptr },\n    { \"unregisterFoldDisplayModeChange\", nullptr, UnregisterFoldDisplayModeChangeListener, nullptr, nullptr,\n        nullptr, napi_default, nullptr },\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END 
