使用Node-API接口关联数据，使其生命周期与当前环境的生命周期相关联
简介
在Node-API模块中，我们可以使用Node-API接口将特定数据与当前的环境相关联，并在需要时检索该数据。
基本概念
在Node-API中的关联数据是指将自定义的C++数据结构的生命周期与当前环境的生命周期相关联，这意味着只要当前运行环境存在，关联数据就会保持有效。
场景和功能介绍
以下接口可以帮助我们在Node-API模块中更方便地管理对象实例所需的状态信息、引用计数或其他自定义数据，他们的使用场景如下:
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_set_instance_data
将需要绑定的数据与当前运行的环境相关联。
cpp部分代码
#include <cstdlib>\n#include \"napi/native_api.h\"\n\n// 定义一个结构来存储实例数据\nstruct InstanceData {\n    int32_t value;\n};\n\n// 对象被释放时的回调函数，用于清理实例数据\nvoid FinalizeCallback(napi_env env, void *finalize_data, void *finalize_hint)\n{\n    if (finalize_data) {\n        InstanceData *data = reinterpret_cast<InstanceData *>(finalize_data);\n        // 释放内存，清除指针指向地址\n        delete (data);\n        *(InstanceData **)finalize_data = nullptr;\n    }\n}\n\nstatic napi_value SetInstanceData(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value argv[1];\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    int32_t instanceDataValue;\n    napi_get_value_int32(env, argv[0], &instanceDataValue);\n    InstanceData *instanceData = new InstanceData;\n    instanceData->value = instanceDataValue;\n    // 调用napi_set_instance_data将实例数据关联到Node-API环境，并指定FinalizeCallback函数\n    napi_status status = napi_set_instance_data(env, instanceData, FinalizeCallback, nullptr);\n    bool success = true;\n    napi_value result;\n    if (status == napi_ok) {\n        napi_get_boolean(env, success, &result);\n    }\n    return result;\n}
接口声明
// index.d.ts\nexport const setInstanceData: (data: number) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nlet data = 5;\nlet value = testNapi.setInstanceData(data);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_set_instance_data:%{public}s', value);
[h2]napi_get_instance_data
检索出与当前运行的环境相关联的数据项。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetInstanceData(napi_env env, napi_callback_info info) {\n    InstanceData *resData = nullptr;\n    // napi_get_instance_data获取之前想关联的数据项\n    napi_get_instance_data(env, (void **)&resData);\n    napi_value result;\n    napi_create_int32(env, resData->value, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const getInstanceData: () => number;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nlet data = 5;\ntestNapi.setInstanceData(data);\nlet value = testNapi.getInstanceData();\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_set_instance_data:%{public}d', value);
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
