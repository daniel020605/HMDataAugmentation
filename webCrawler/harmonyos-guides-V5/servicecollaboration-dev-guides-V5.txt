跨设备互通开发指导
跨设备互通提供跨设备的相机、扫描、图库访问能力，平板或2in1设备可以调用手机的相机、扫描、图库等功能。
场景介绍
您通过此能力实现跨设备交互，可以使用其他设备的相机、扫描和图库功能。
约束与限制
需同时满足以下条件，才能使用该功能：
 设备限制  本端设备：HarmonyOS版本为HarmonyOS NEXT及以上的平板或2in1设备。 远端设备：HarmonyOS版本为HarmonyOS NEXT及以上、具有相机能力的手机或平板设备。  使用限制  双端设备需要登录同一华为账号。 双端设备需要打开WLAN和蓝牙开关。条件允许时，建议双端设备接入同一个局域网，可提升唤醒相机的速度。  
接口说明
在开发具体功能前，请先查阅参考文档。
接口名
描述
createCollaborationServiceMenuItems
设备列表选择器，用于获取组网内具有对应相机能力的设备列表。
CollaborationServiceStateDialog
弹窗组件，用于提示对端相机拍摄状态。
开发步骤
 导入模块。import { createCollaborationServiceMenuItems, CollaborationServiceStateDialog, CollaborationServiceFilter } from '@kit.ServiceCollaborationKit'; createCollaborationServiceMenuItems是设备列表菜单项模块，传入CollaborationServiceFilter的能力枚举值；CollaborationServiceStateDialog是状态提示框模块。 在Menu中调用createCollaborationServiceMenuItems添加设备列表选择器，在菜单项内显示设备列表。           在调用createCollaborationServiceMenuItems前，需了解：  该方法需要在Menu组件内调用。 该方法是自定义构建函数，您在使用前需要先了解@Builder。    传入Array类型的CollaborationServiceFilter枚举值即可使用对应能力，目前支持ALL、TAKE_PHOTO、SCAN_DOCUMENT和IMAGE_PICKER。               ALL为预留值，匹配所有业务，功能将在后续拓展，TAKE_PHOTO匹配跨设备拍照能力，SCAN_DOCUMENT匹配跨设备扫描能力，IMAGE_PICKER匹配跨设备图库能力。        @Builder\nMyTestMenu() {\n  Menu() {\n    createCollaborationServiceMenuItems([CollaborationServiceFilter.ALL], 30) \n  }\n}  在build方法中添加弹窗组件CollaborationServiceStateDialog，用于提示远端相机拍摄状态和回传数据，需要实现其中的onState方法。CollaborationServiceStateDialog是全局的提示框，不会对原有布局产生影响。 为弹窗组件绑定和实现onState方法，用于接收和处理照片数据。回调函数的传入参数stateCode是完成状态，buffer是回传的图片数据，可通过状态和图片数据结合自身的业务逻辑实现onState方法。 CollaborationServiceStateDialog({\n  onState: (stateCode: number, bufferType: string, buffer: ArrayBuffer):void => this.doInsertPicture(stateCode, bufferType, buffer)\n}) 
完整示例
通过以下示例，您可以完成一次调用对端相机拍摄的操作。
import {\n  createCollaborationServiceMenuItems,\n  CollaborationServiceStateDialog,\n  CollaborationServiceFilter\n} from '@kit.ServiceCollaborationKit';\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct Index {\n  @State picture: PixelMap | undefined = undefined;\n\n  @Builder\n  MyTestMenu() {\n    Menu() {\n      createCollaborationServiceMenuItems([CollaborationServiceFilter.ALL], 30)\n    }\n  }\n\n  build() {\n    Column({ space: 20 }) {\n      CollaborationServiceStateDialog({\n        onState: (stateCode: number, bufferType: string, buffer: ArrayBuffer): void => this.doInsertPicture(stateCode, bufferType, buffer)\n      })\n      Button('使用远端设备进行拍照')\n        .type(ButtonType.Normal)\n        .borderRadius(10)\n        .bindMenu(this.MyTestMenu)\n\n      if (this.picture) {\n        Image(this.picture)\n          .borderStyle(BorderStyle.Dotted)\n          .borderWidth(1)\n          .objectFit(ImageFit.Contain)\n          .height('80%')\n          .onComplete((event) => {\n            if (event != undefined) {\n              hilog.info(0, \"MEMOMOCK\", \"onComplete \" + event.loadingStatus)\n            }\n          })\n      }\n    }\n    .padding(20)\n    .width('100%')\n    .alignItems(HorizontalAlign.Center)\n  }\n\n  doInsertPicture(stateCode: number, bufferType: string, buffer: ArrayBuffer): void {\n    if (stateCode != 0) {\n      return\n    }\n    if (bufferType == \"general.image\") {\n      let imageSource = image.createImageSource(buffer)\n      imageSource.createPixelMap().then((pixelMap) => {\n        this.picture = pixelMap;\n      })\n    }\n  }\n}
示例代码
 跨设备互通 
