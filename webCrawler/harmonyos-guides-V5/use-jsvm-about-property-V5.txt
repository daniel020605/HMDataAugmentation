使用Node-API接口设置JavaScript对象的属性
简介
使用JSVM-API接口获取和设置JavaScript对象的属性。通过合理使用这些函数，实现更复杂的功能和逻辑。
基本概念
在JavaScript对象属性的相关开发中，需要处理JavaScript对象属性，确保正确地访问、设置、删除属性，并了解属性的继承关系和枚举特性。以下是一些关键概念：
对象（Object）：在JavaScript中，对象是一种复合数据类型，它允许存储多个不同类型的值作为一个单独的实体。对象是属性和方法的集合。属性是与对象相关联的值，而方法则是对象可以执行的操作。属性（Property）：在JavaScript中，属性是对象特征的键值对。每个属性都有一个名字（也称为键或标识符）和一个值。属性的值可以是任意数据类型，包括基本类型、对象和函数。可枚举属性（EnumerableProperty）：在JavaScript中，对象的属性分为可枚举和不可枚举之分，它们是由属性的enumerable值决定的，即内部 “可枚举” 标志设置为true或false。可枚举性决定了这个属性能否被 for...in 查找遍历到。自有属性（OwnProperty）：自有属性是直接定义在对象上的属性，而不是从原型链上继承来的属性。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++相关代码进行展示。
[h2]OH_JSVM_GetPropertyNames
以字符串数组的形式获取对象的可枚举属性的名称，如果接口调用成功则返回JSVM_OK。
cpp部分代码
// OH_JSVM_GetPropertyNames的样例方法\nstatic JSVM_Value GetPropertyNames(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 将obj作为参数传入\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 以字符串数组的形式获取对象的可枚举属性的名称，以result传出\n    JSVM_Value result = nullptr;\n    JSVM_Status status = OH_JSVM_GetPropertyNames(env, args[0], &result);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"Failed to get propertynames\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetPropertyNames success\");\n    }\n    return result;\n}\n// GetPropertyNames注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetPropertyNames},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetPropertyNames方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getPropertyNames\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = '{ data: 0, message: \"hello world\"}';\n    let script = getPropertyNames(obj);\n)JS\";
预期输出结果
JSVM OH_JSVM_GetPropertyNames success
[h2]OH_JSVM_SetProperty
将给定的属性与值设置入给定的Object
cpp部分代码
// OH_JSVM_SetProperty的样例方法\nstatic JSVM_Value SetProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 接收js侧传入的三个参数：第一个参数为想要设置的object，第二个参数为属性，第三个参数为属性对应的值\n    size_t argc = 3;\n    JSVM_Value args[3] = {nullptr};\n    JSVM_Status status = OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_GetCbInfo fail\");\n        return nullptr;\n    }\n    // 通过调用OH_JSVM_SetProperty接口将属性与值设置入object如果失败，直接抛出错误\n    status = OH_JSVM_SetProperty(env, args[0], args[1], args[2]);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_SetProperty fail\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_SetProperty success\");\n    }\n    // 将设置成功后的object返回出去\n    return args[0];\n}\n// SetProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = SetProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// SetProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"setProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = { data: 0, message: \"hello world\", 50: 1};\n    setProperty(obj, \"code\", \"hi\")\n)JS\";
预期输出结果
JSVM OH_JSVM_SetProperty success
[h2]OH_JSVM_GetProperty
获取给定Object的给定属性对应的值
cpp部分代码
// OH_JSVM_GetProperty的样例方法\nstatic JSVM_Value GetProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 接收两个js传来的参数\n    size_t argc = 2;\n    JSVM_Value args[2] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 传入的第一个参数为要检测的object，第二个对象为要检测的属性，通过调用OH_JSVM_GetProperty接口获取对应的值\n    JSVM_Value result = nullptr;\n    JSVM_Status status = OH_JSVM_GetProperty(env, args[0], args[1], &result);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_GetProperty fail\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetProperty success\");\n    }\n    return result;\n}\n// GetProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = { data: 0, message: \"hello world\", 50: 1};\n    getProperty(obj, \"message\")\n)JS\";
预期输出结果
JSVM OH_JSVM_GetProperty success
[h2]OH_JSVM_HasProperty
检查对象中是否存在指定的属性，可以避免访问不存在属性导致的异常或错误
cpp部分代码
// OH_JSVM_HasProperty的样例方法\nstatic JSVM_Value HasProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 从js侧传入两个参数：第一个参数为要检验的对象，第二个参数为要检测是否存在对象的属性\n    size_t argc = 2;\n    JSVM_Value args[2] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 将参数传入OH_JSVM_HasProperty方法中，若接口调用成功则将结果转化为JSVM_Value类型抛出，否则抛出错误\n    bool result;\n    JSVM_Status status = OH_JSVM_HasProperty(env, args[0], args[1], &result);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_HasProperty fail\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_HasProperty success:%{public}d\", result);\n    }\n    // 若传入属性存在传入对象中，则输出true将结果转化为JSVM_Value类型抛出\n    JSVM_Value returnReslut = nullptr;\n    OH_JSVM_GetBoolean(env, result, &returnReslut);\n    return returnReslut;\n}\n// HasProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = HasProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// HasProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"hasProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = { data: 0, message: \"hello world\", 50: 1};\n    hasProperty(obj, \"data\")\n    hasProperty(obj, 0)\n)JS\";
预期输出结果
// hasProperty(obj, \"data\")输出\nJSVM OH_JSVM_HasProperty success:1\n// hasProperty(obj, 0)输出\nJSVM OH_JSVM_HasProperty success:0
[h2]OH_JSVM_DeleteProperty
尝试从给定的Object中删除由key指定的属性，并返回操作的结果。
如果对象是一个不可扩展的对象，或者属性是不可配置的，则可能无法删除该属性。
cpp部分代码
// OH_JSVM_DeleteProperty的样例方法\nstatic JSVM_Value DeleteProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获取js侧传入的两个参数\n    size_t argc = 2;\n    JSVM_Value args[2] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    JSVM_ValueType valueType;\n    OH_JSVM_Typeof(env, args[0], &valueType);\n    if (valueType != JSVM_OBJECT) {\n        OH_JSVM_ThrowError(env, nullptr, \"Expects an object as argument.\");\n        return nullptr;\n    }\n    // 从传入的Object对象中删除指定属性，返回是否删除成功的bool结果值\n    bool result = false;\n    JSVM_Status status = OH_JSVM_DeleteProperty(env, args[0], args[1], &result);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_DeleteProperty failed\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_DeleteProperty success:%{public}d\", result);\n    }\n    // 将bool结果转换为JSVM_value并返回\n    JSVM_Value ret;\n    OH_JSVM_GetBoolean(env, result, &ret);\n    return ret;\n}\n// DeleteProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = DeleteProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// DeleteProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"deleteProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = { data: 0, message: \"hello world\", 50: 1};\n    deleteProperty(obj, \"message\")\n)JS\";
预期输出结果
JSVM OH_JSVM_DeleteProperty success:1
[h2]OH_JSVM_HasOwnProperty
用于检查传入的Object是否具有自己的命名属性，不包括从原型链上继承的属性。
cpp部分代码
// OH_JSVM_HasOwnProperty的样例方法\nstatic JSVM_Value HasOwnProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获取js侧传入的两个参数\n    size_t argc = 2;\n    JSVM_Value args[2] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 检查第一个参数是否为对象\n    JSVM_ValueType valueType1;\n    OH_JSVM_Typeof(env, args[0], &valueType1);\n    if (valueType1 != JSVM_OBJECT) {\n        OH_JSVM_ThrowError(env, nullptr, \"First argument must be an object.\");\n        return nullptr;\n    }\n    // 检查第二个参数是否为string\n    JSVM_ValueType valuetype2;\n    OH_JSVM_Typeof(env, args[1], &valuetype2);\n    if (valuetype2 != JSVM_STRING ) {\n        OH_JSVM_ThrowError(env, nullptr, \"Second argument must be a string.\");\n        return nullptr;\n    }\n    // 检查对象是否具有指定属性，结果存储在hasProperty中\n    bool hasProperty;\n    JSVM_Status status = OH_JSVM_HasOwnProperty(env, args[0], args[1], &hasProperty);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_HasOwnProperty failed\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_HasOwnProperty success:%{public}d\", hasProperty);\n    }\n    // 将bool结果转换为JSVM_Value并返回\n    JSVM_Value result;\n    OH_JSVM_GetBoolean(env, hasProperty, &result);\n    return result;\n}\n// HasOwnProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = HasOwnProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// HasOwnProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"hasOwnProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = { data: 0, message: \"hello world\", 50: 1};\n    hasOwnProperty(obj, \"message\")\n    hasOwnProperty(obj, \"__defineGetter__\")\n)JS\";
预期输出结果
// hasOwnProperty(obj, \"message\")输出\nJSVM OH_JSVM_HasOwnProperty success:1\n// hasOwnProperty(obj, \"__defineGetter__\")输出\n// `__defineGetter__`为Object原型方法，非OwnProperty，预期返回0\nJSVM OH_JSVM_HasOwnProperty success:0
[h2]OH_JSVM_SetNamedProperty
用于在传入的Javascript对象上设置一个命名属性。
cpp部分代码
// OH_JSVM_SetNamedProperty的样例方法\nstatic JSVM_Value SetNamedProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获取js侧传入的一个参数\n    size_t argc = 1;\n    JSVM_Value str;\n    char strKey[32] = \"\";\n    OH_JSVM_GetCbInfo(env, info, &argc, &str, nullptr, nullptr);\n    // 获取传入参数字符串并存储在strKey中\n    size_t keyLength;\n    OH_JSVM_GetValueStringUtf8(env, str, strKey, 32, &keyLength);\n    // 创建一个新对象\n    JSVM_Value newObj;\n    OH_JSVM_CreateObject(env, &newObj);\n    // 设置整数值1234为属性值\n    int32_t value = 1234;\n    JSVM_Value numValue;\n    OH_JSVM_CreateInt32(env, value, &numValue);\n    // 将整数值与指定属性名关联\n    JSVM_Status status = OH_JSVM_SetNamedProperty(env, newObj, strKey, numValue);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_SetNamedProperty failed\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_SetNamedProperty success\");\n    }\n    // 返回新创建并设置命名属性的对象\n    return newObj;\n}\n// SetNamedProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = SetNamedProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// SetNamedProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"setNamedProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    setNamedProperty(\"message\")\n)JS\";
预期输出结果
JSVM OH_JSVM_SetNamedProperty success
[h2]OH_JSVM_GetNamedProperty
用于从Javascript对象中获取命名属性的值。
cpp部分代码
// OH_JSVM_GetNamedProperty的样例方法\nstatic JSVM_Value GetNamedProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获取js侧传入的两个参数\n    size_t argc = 2;\n    JSVM_Value args[2] = {nullptr};\n    char strKey[32] = \"\";\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 获取要获取的属性名\n    size_t keyLength;\n    OH_JSVM_GetValueStringUtf8(env, args[1], strKey, 32, &keyLength);\n    // 获取指定属性的值并存储在result中\n    JSVM_Value result;\n    JSVM_Status status = OH_JSVM_GetNamedProperty(env, args[0], strKey, &result);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_GetNamedProperty failed\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetNamedProperty success\");\n    }\n    return result;\n}\n// GetNamedProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetNamedProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetNamedProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getNamedProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = { data: 0, message: \"hello world\", 50: 1};\n    getNamedProperty(obj, \"message\")\n)JS\";
预期输出结果
JSVM OH_JSVM_GetNamedProperty success
[h2]OH_JSVM_HasNamedProperty
用于检查Javascript对象中是否包含指定的命名属性。
cpp部分代码
// OH_JSVM_HasNamedProperty的样例方法\nstatic JSVM_Value HasNamedProperty(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获取js侧传入的两个参数\n    size_t argc = 2;\n    JSVM_Value args[2] = {nullptr};\n    char strKey[32] = \"\";\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 获取要检查的属性名\n    size_t keyLength;\n    OH_JSVM_GetValueStringUtf8(env, args[1], strKey, 32, &keyLength);\n    // 检查对象是否具有指定命名的属性，并将结果存储在hasProperty中\n    bool hasProperty = false;\n    JSVM_Status status = OH_JSVM_HasNamedProperty(env, args[0], strKey, &hasProperty);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_HasNamedProperty failed\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_HasNamedProperty success:%{public}d\", hasProperty);\n    }\n    // 将bool结果转换为JSVM_Value并返回\n    JSVM_Value result;\n    OH_JSVM_GetBoolean(env, hasProperty, &result);\n    return result;\n}\n// HasNamedProperty注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = HasNamedProperty},\n};\nstatic JSVM_CallbackStruct *method = param;\n// HasNamedProperty方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"hasNamedProperty\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = { data: 0, message: \"hello world\", 50: 1};\n    hasNamedProperty(obj, \"message\")\n)JS\";
预期输出结果
JSVM OH_JSVM_HasNamedProperty success:1
[h2]OH_JSVM_DefineProperties
用于定义对象的自定义属性，可一次性为对象设置多个属性。
cpp部分代码
// 属性描述符列表中defineMethodPropertiesExample属性的回调函数\nstatic JSVM_Value DefineMethodPropertiesExample(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    int32_t propValue = 26;\n    JSVM_Value returnValue;\n    OH_JSVM_CreateInt32(env, propValue, &returnValue);\n    return returnValue;\n}\n// 属性描述符列表中getterCallback属性的回调函数\nstatic JSVM_Value GetterCallback(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    JSVM_Value result;\n    const char *str = \"Hello world!\";\n    size_t length = strlen(str);\n    // 创建属性的值\n    OH_JSVM_CreateStringUtf8(env, str, length, &result);\n    return result;\n}\n\n// 执行JavaScript字符串的函数\nstatic JSVM_Value RunScriptAndLogResult(JSVM_Env env, const std::string &srcCode) {\n    JSVM_Value sourceCodeValue;\n    OH_JSVM_CreateStringUtf8(env, srcCode.c_str(), srcCode.size(), &sourceCodeValue);\n    JSVM_Script script;\n    // 编译JavaScript代码字符串并返回编译后的脚本\n    OH_JSVM_CompileScript(env, sourceCodeValue, nullptr, 0, true, nullptr, &script);\n    JSVM_Value jsVmResult;\n    // 执行JavaScript代码字符串\n    OH_JSVM_RunScript(env, script, &jsVmResult);\n    return jsVmResult;\n}\n\n// OH_JSVM_DefineProperties的样例方法\nstatic JSVM_Value DefineProperties(JSVM_Env env, JSVM_CallbackInfo info) {\n    // 接受一个JavaScript侧传入的空object\n    size_t argc = 1;\n    JSVM_Value argv[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, argv, nullptr, nullptr);\n    // 创建一个string类型的属性值\n    JSVM_Value stringValue;\n    OH_JSVM_CreateStringUtf8(env, \"Hello!\", JSVM_AUTO_LENGTH, &stringValue);\n    // 创建属性描述符对应的回调函数列表\n    JSVM_CallbackStruct param[] = {\n        {.data = nullptr, .callback = DefineMethodPropertiesExample},\n        {.data = nullptr, .callback = GetterCallback},\n\n    };\n    // 创建属性描述符列表，不同类型属性值添加位置参考JSVM_PropertyDescriptor定义\n    JSVM_PropertyDescriptor descriptor[] = {\n        // 定义method类型的属性值\n        {\"defineMethodPropertiesExample\", nullptr, &param[0], nullptr, nullptr, nullptr, JSVM_DEFAULT},\n        // 定义string类型的属性值\n        {\"defineStringPropertiesExample\", nullptr, nullptr, nullptr, nullptr, stringValue, JSVM_DEFAULT},\n        // 定义getter类型的属性值\n        {\"getterCallback\", nullptr, nullptr, &param[1], nullptr, nullptr,JSVM_DEFAULT}};\n    // 根据属性描述符列表为obj对象创建属性\n    JSVM_Status statusProperty;\n    statusProperty = OH_JSVM_DefineProperties(env, *argv, sizeof(descriptor) / sizeof(descriptor[0]), descriptor);\n    if (statusProperty != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM DefineProperties fail\");\n        return nullptr;\n    }\n    // 调用obj对象中添加的属性\n    // 运行obj.defineMethodPropertiesExample()并将结果返回给JavaScript\n    static std::string srcMethod;\n    srcMethod = R\"JS(obj.defineMethodPropertiesExample();)JS\";\n    JSVM_Value jsVmResult = RunScriptAndLogResult(env, srcMethod);\n    if (jsVmResult != nullptr) {\n        int32_t number;\n        OH_JSVM_GetValueInt32(env, jsVmResult, &number);\n        OH_LOG_INFO(LOG_APP, \"JSVM DefineMethodPropertiesExample success:%{public}d\", number);\n    }\n    // 运行obj.defineStringPropertiesExample()并将结果返回给JavaScript\n    static std::string srcString;\n    srcString = R\"JS(obj.defineStringPropertiesExample;)JS\";\n    JSVM_Value jsVmResult1 = RunScriptAndLogResult(env, srcString);\n    if (jsVmResult1 != nullptr) {\n        size_t length = 0;\n        OH_JSVM_GetValueStringUtf8(env, jsVmResult1, nullptr, 0, &length);\n        char *buf = (char *)malloc(length + 1);\n        OH_JSVM_GetValueStringUtf8(env, jsVmResult1, buf, length + 1, &length);\n        OH_LOG_INFO(LOG_APP, \"JSVM defineStringPropertiesExample success:%{public}s\", buf);\n    }\n    // 调用obj的getterCallback()并将结果字符串返回给JavaScript\n    static std::string srcGetter;\n    srcGetter = R\"JS(obj.getterCallback;)JS\";\n    JSVM_Value jsVmResult2 = RunScriptAndLogResult(env, srcGetter);\n    if (jsVmResult2 != nullptr) {\n        size_t length = 0;\n        OH_JSVM_GetValueStringUtf8(env, jsVmResult2, nullptr, 0, &length);\n        char *buf = (char *)malloc(length + 1);\n        OH_JSVM_GetValueStringUtf8(env, jsVmResult2, buf, length + 1, &length);\n        OH_LOG_INFO(LOG_APP, \"JSVM getterCallback success:%{public}s\", buf);\n    }\n    return jsVmResult;\n}\n\n// DefineProperties注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = DefineProperties},\n};\nstatic JSVM_CallbackStruct *method = param;\n// DefineProperties方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"defineProperties\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = {};\n    defineProperties(obj)\n)JS\";
预期输出结果
JSVM DefineMethodPropertiesExample success:26\nJSVM defineStringPropertiesExample success:Hello!\nJSVM getterCallback success:Hello world!
[h2]OH_JSVM_GetAllPropertyNames
获取给定对象的所有可用属性名称, 结果变量将存储一个包含所有可枚举属性名称的JavaScript数组。
cpp部分代码
// OH_JSVM_GetAllPropertyNames的样例方法\nstatic JSVM_Value GetAllPropertyNames(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // // 获取js侧传入的一个参数\n    size_t argc = 1;\n    JSVM_Value args[1];\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 获取给定对象的所有属性名称(自有属性)\n    JSVM_Value result;\n    JSVM_Status status = OH_JSVM_GetAllPropertyNames(env, args[0],\n                                         JSVM_KeyCollectionMode::JSVM_KEY_OWN_ONLY,\n                                         JSVM_KeyFilter::JSVM_KEY_WRITABLE,\n                                         JSVM_KeyConversion::JSVM_KEY_NUMBERS_TO_STRINGS, &result);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"Failed to get allpropertynames\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetAllPropertyNames success\");\n    }\n    return result;\n}\n// GetAllPropertyNames注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetAllPropertyNames},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetAllPropertyNames方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getAllPropertyNames\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n\n// 样例测试js\nconst char *srcCallNative = R\"JS(\n    let obj = '{ data: 0, message: \"hello world\", 50: 1}';\n    let script = getAllPropertyNames(obj);\n)JS\";
预期输出结果
JSVM OH_JSVM_GetAllPropertyNames success
