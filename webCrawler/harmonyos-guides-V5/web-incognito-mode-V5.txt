使用隐私模式
开发者在创建Web组件时，可以将可选参数incognitoMode设置为true，来开启Web组件的隐私模式。 当使用隐私模式时，浏览网页时的Cookie、 Cache Data等数据不会保存在本地的持久化文件，当隐私模式的Web组件被销毁时，Cookie、 Cache Data等数据将不被记录下来。
 创建隐私模式的Web组件。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct WebComponent {\n controller: webview.WebviewController = new webview.WebviewController();\n\n build() {\n   Column() {\n     Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n   }\n }\n} 通过isIncogntoMode 判断当前Web组件是否是隐私模式。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('isIncognitoMode')\n        .onClick(() => {\n          try {\n            let result = this.controller.isIncognitoMode();\n            console.log('isIncognitoMode' + result);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n} 
隐私模式提供了一系列接口，用于操作地理位置、Cookie以及Cache Data。
 通过allowGeolocation设置隐私模式下的Web组件允许指定来源使用地理位置。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  origin: string = \"file:///\";\n\n  build() {\n    Column() {\n      Button('allowGeolocation')\n        .onClick(() => {\n          try {\n            // allowGeolocation第二个参数表示隐私模式（true）或非隐私模式（false）下，允许指定来源使用地理位置。\n            webview.GeolocationPermissions.allowGeolocation(this.origin, true);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n    }\n  }\n} 通过deleteGeolocation清除隐私模式下指定来源的地理位置权限状态。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  origin: string = \"file:///\";\n\n  build() {\n    Column() {\n      Button('deleteGeolocation')\n        .onClick(() => {\n          try {\n            // deleteGeolocation第二个参数表示隐私模式（true）或非隐私模式（false）下，清除指定来源的地理位置权限状态。\n            webview.GeolocationPermissions.deleteGeolocation(this.origin, true);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n    }\n  }\n} 通过getAccessibleGeolocation以回调方式异步获取隐私模式下指定源的地理位置权限状态。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  origin: string = \"file:///\";\n\n  build() {\n    Column() {\n      Button('getAccessibleGeolocation')\n        .onClick(() => {\n          try {\n            // getAccessibleGeolocation第三个参数表示隐私模式（true）或非隐私模式（false）下，以回调方式异步获取指定源的地理位置权限状态。\n            webview.GeolocationPermissions.getAccessibleGeolocation(this.origin, (error, result) => {\n              if (error) {\n                console.log('getAccessibleGeolocationAsync error: ' + JSON.stringify(error));\n                return;\n              }\n              console.log('getAccessibleGeolocationAsync result: ' + result);\n            }, true);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n    }\n  }\n} 通过deleteAllData清除隐私模式下Web SQL当前使用的所有存储。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('deleteAllData')\n        .onClick(() => {\n          try {\n            // deleteAllData参数表示删除所有隐私模式（true）或非隐私模式（false）下，内存中的web数据。\n            webview.WebStorage.deleteAllData(true);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.controller, incognitoMode: true })\n        .databaseAccess(true)\n    }\n  }\n} 加载的html文件。 <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n <meta charset=\"UTF-8\">\n <title>test</title>\n <script type=\"text/javascript\">\n\n   var db = openDatabase('mydb','1.0','Test DB',2 * 1024 * 1024);\n   var msg;\n\n   db.transaction(function(tx){\n     tx.executeSql('INSERT INTO LOGS (id,log) VALUES(1,\"test1\")');\n     tx.executeSql('INSERT INTO LOGS (id,log) VALUES(2,\"test2\")');\n     msg = '<p>数据表已创建,且插入了两条数据。</p>';\n\n     document.querySelector('#status').innerHTML = msg;\n   });\n\n   db.transaction(function(tx){\n     tx.executeSql('SELECT * FROM LOGS', [], function (tx, results) {\n       var len = results.rows.length,i;\n       msg = \"<p>查询记录条数：\" + len + \"</p>\";\n\n       document.querySelector('#status').innerHTML += msg;\n\n           for(i = 0; i < len; i++){\n             msg = \"<p><b>\" + results.rows.item(i).log + \"</b></p>\";\n\n       document.querySelector('#status').innerHTML += msg;\n       }\n     },null);\n   });\n\n   </script>\n</head>\n<body>\n<div id=\"status\" name=\"status\">状态信息</div>\n</body>\n</html> 通过fetchCookieSync获取隐私模式下指定url对应cookie的值。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('fetchCookieSync')\n        .onClick(() => {\n          try {\n            // fetchCookieSync第二个参数表示获取隐私模式（true）或非隐私模式（false）下，webview的内存cookies。\n            let value = webview.WebCookieManager.fetchCookieSync('https://www.example.com', true);\n            console.log(\"fetchCookieSync cookie = \" + value);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n    }\n  }\n} 通过configCookieSync设置隐私模式下指定url的单个cookie的值。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('configCookieSync')\n        .onClick(() => {\n          try {\n            // configCookieSync第三个参数表示获取隐私模式（true）或非隐私模式（false）下，对应url的cookies。\n            webview.WebCookieManager.configCookieSync('https://www.example.com', 'a=b', true);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n    }\n  }\n} 通过existCookie查询隐私模式下是否存在cookie。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('existCookie')\n        .onClick(() => {\n          // existCookie参数表示隐私模式（true）或非隐私模式（false）下，查询是否存在cookies。\n          let result = webview.WebCookieManager.existCookie(true);\n          console.log(\"result: \" + result);\n        })\n      Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n    }\n  }\n} 通过clearAllCookiesSync清除隐私模式下所有cookie。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('clearAllCookiesSync')\n        .onClick(() => {\n          // clearAllCookiesSync参数表示清除隐私模式（true）或非隐私模式（false）下，webview的所有内存cookies。\n          webview.WebCookieManager.clearAllCookiesSync(true);\n        })\n      Web({ src: 'www.example.com', controller: this.controller, incognitoMode: true })\n    }\n  }\n} 
