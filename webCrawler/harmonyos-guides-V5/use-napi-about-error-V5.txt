使用Node-API接口进行错误处理开发
简介
使用Node-API接口进行错误处理开发，使得在Node-API模块中能够更好地管理和响应错误情况。通过合理使用这些函数，可以提高模块的稳定性和可靠性。
基本概念
在ArkTS编程中，异常和错误是常见的概念。异常表示发生了某种意外情况，而错误则指示程序无法正确执行某些操作。Node-API提供了一系列方法来帮助开发者在Node-API模块中处理ArkTS中的异常和错误。下面是一些基本概念：
异常（Exception）：在程序执行过程中可能会出现的意外情况，可以是语法错误、运行时错误或逻辑错误，例如除以零或对未定义变量的操作。错误（Error）：表示程序无法顺利执行某些操作，可以是由底层系统、API函数或开发者自定义的。类型错误（Type Error）：表示操作或值的类型不符合预期的情况，通常是由于错误的数据类型导致的。范围错误（Range Error）：表示一个值不在预期的范围内，例如对数组长度之外的索引进行访问。
这些基本概念在异常和错误处理中非常重要，开发者需要通过适当的方法来捕获、处理或向用户报告这些异常和错误，以确保程序的稳定性和正确性。Node-API提供的方法可以帮助开发者在Node-API模块中处理ArkTS中的异常和错误。
场景和功能介绍
以下Node-API接口主要用于与ArkTS交互时处理错误和异常情况。他们的使用场景如下：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_get_last_error_info
用于获取最后一次发生的错误信息，包括错误码、错误消息以及错误进栈信息，即使存在挂起的ArkTS异常，也可以调用此API。
cpp部分代码
#include \"napi/native_api.h\"\n#include <assert.h>\nstatic napi_value GetLastErrorInfo(napi_env env, napi_callback_info info)\n{\n    // 获取输入参数（这里以字符串message作为参数传入）\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将传入的字符串参数以napi_get_value_int32取出，主动制造错误\n    int32_t value = 0;\n    napi_status status = napi_get_value_int32(env, args[0], &value);\n    // 接口使用错误，故返回值不为napi_ok\n    assert(status != napi_ok);\n    // 调用接口napi_get_last_error_info获取最后一次错误信息\n    const napi_extended_error_info *errorInfo;\n    napi_get_last_error_info(env, &errorInfo);\n    // 取出错误码与接口调用错误后其返回值作比较\n    assert(errorInfo->error_code == status);\n    // 取出错误消息作为返回值带出去打印\n    napi_value result = nullptr;\n    napi_create_string_utf8(env, errorInfo->error_message, NAPI_AUTO_LENGTH, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const getLastErrorInfo: (str: string) => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_last_error_info: %{public}s', testNapi.getLastErrorInfo('message'));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_get_last_error_info error: %{public}s', error);\n}
[h2]napi_create_type_error
创建并获取一个带文本信息的ArkTS TypeError。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreatTypeError(napi_env env, napi_callback_info info)\n{\n    // 构造errorCode和errorMessage\n    napi_value errorCode = nullptr;\n    napi_create_string_utf8(env, \"napi_create_error errorCode\", NAPI_AUTO_LENGTH, &errorCode);\n    napi_value errorMessage = nullptr;\n    napi_create_string_utf8(env, \"napi_create_error errorMessage\", NAPI_AUTO_LENGTH, &errorMessage);\n    // 调用napi_create_type_error创建一个typeError错误对象\n    napi_value error = nullptr;\n    napi_create_type_error(env, errorCode, errorMessage, &error);\n    return error;\n}
接口声明
// index.d.ts\nexport const creatTypeError: () => Error;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  throw testNapi.creatTypeError();\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_create_type_error errorCode: %{public}s, errorMessage %{public}s', error.code, error.message);\n}
[h2]napi_create_range_error
创建并获取一个带文本信息的ArkTS RangeError。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreatRangeError(napi_env env, napi_callback_info info)\n{\n    // 构造errorCode和errorMessage\n    napi_value errorCode = nullptr;\n    napi_create_string_utf8(env, \"napi_create_error errorCode\", NAPI_AUTO_LENGTH, &errorCode);\n    napi_value errorMessage = nullptr;\n    napi_create_string_utf8(env, \"napi_create_error errorMessage\", NAPI_AUTO_LENGTH, &errorMessage);\n    // 调用napi_create_range_error创建一个typeError错误对象\n    napi_value error = nullptr;\n    napi_create_range_error(env, errorCode, errorMessage, &error);\n    return error;\n}
接口声明
// index.d.ts\nexport const creatRangeError: () => Error;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  throw testNapi.creatRangeError();\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_create_range_error errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}
[h2]napi_create_error
创建并获取一个带文本信息的ArkTS Error。
[h2]napi_throw
用于在Node-API模块中抛出ArkTS异常的函数。当在本机代码中发生错误或检测到不符合预期的情况时，可以使用此接口来抛出一个ArkTS异常，使其能够被捕获并处理。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiThrow(napi_env env, napi_callback_info info)\n{\n    // 代码中发生某些错误后，可执行以下操作抛出异常\n    // 在Node-API环境中创建一个字符串，并将其存储在errorCode变量中\n    napi_value errorCode = nullptr;\n    napi_create_string_utf8(env, \"throw errorCode\", NAPI_AUTO_LENGTH, &errorCode);\n    // 在Node-API环境中创建一个字符串，并将其存储在errorMessage变量中\n    napi_value errorMessage = nullptr;\n    napi_create_string_utf8(env, \"throw errorMessage\", NAPI_AUTO_LENGTH, &errorMessage);\n    // 创建一个ArkTS对象error\n    napi_value error = nullptr;\n    napi_create_error(env, errorCode, errorMessage, &error);\n    // 通过napi_throw接口将对象抛出\n    napi_throw(env, error);\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const napiThrow: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  testNapi.napiThrow();\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_throw errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}
[h2]napi_throw_error
用于抛出一个带文本信息的ArkTS Error。
cpp部分代码
#include \"napi/native_api.h\"\n\n// 这里直接抛出一个带有errorMessage的错误\nstatic napi_value NapiThrowErrorMessage(napi_env env, napi_callback_info info)\n{\n    napi_throw_error(env, nullptr, \"napi_throw_error throwing an error\");\n    return nullptr;\n}\n// 传入两个参数，在第二个参数，也就是除数为0的时候抛出一个错误\nstatic napi_value NapiThrowError(napi_env env, napi_callback_info info)\n{\n    // ArkTS侧传入两个参数\n    size_t argc = 2;\n    napi_value argv[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 将其转换为double类型的值作为被除数和除数\n    double dividend, divisor;\n    napi_get_value_double(env, argv[0], &dividend);\n    napi_get_value_double(env, argv[1], &divisor);\n    // 在这里判断除数如果为0则直接抛出一个错误，errorCode为：DIVIDE_BY_ZERO，errorMessage为：Cannot divide by zero\n    if (divisor == 0) {\n        napi_throw_error(env, \"DIVIDE_BY_ZERO\", \"Cannot divide by zero\");\n    }\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const napiThrowErrorMessage: () => void;\nexport const napiThrowError: (dividend: number, divisor: number) => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  testNapi.napiThrowErrorMessage();\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_throw_error error code: %{public}s , message: %{public}s', error.code, error.message);\n}\ntry {\n  testNapi.napiThrowError(5, 0);\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_throw_error errorCode: %{public}s , errorManager: %{public}s', error.code, error.message);\n}
[h2]napi_throw_type_error
创建并获取一个带文本信息的ArkTS TypeError。
cpp部分代码
#include \"napi/native_api.h\"\n\n// 这里直接抛出一个带有errorMessage的TypeError\nstatic napi_value ThrowTypeErrorMessage(napi_env env, napi_callback_info info)\n{\n    napi_throw_type_error(env, nullptr, \"napi_throw_type_error throwing an error\");\n    return nullptr;\n}\n// 传入一个类型不匹配的参数，判断类型不匹配之后抛出typeError\nstatic napi_value ThrowTypeError(napi_env env, napi_callback_info info)\n{\n    // ArkTS侧传入一个参数\n    size_t argc = 1;\n    napi_value argv[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 将传入参数转换为napi_valuetype类型的值\n    napi_valuetype valueType;\n    napi_typeof(env, argv[0], &valueType);\n    // 如果传入参数不为napi_number类型的值则抛出TypeError\n    if (valueType != napi_number) {\n        // 这里抛出一个既带有errorCode也带有errorMessage的TypeError\n        napi_throw_type_error(env, \"napi_throw_type_error\", \"Argument must be a number\");\n    }\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const throwTypeErrorMessage: () => void;\nexport const throwTypeError: (message: string) => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  testNapi.throwTypeErrorMessage();\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_throw_type_error errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}\ntry {\n  testNapi.throwTypeError('str');\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_throw_type_error errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}
[h2]napi_throw_range_error
创建并获取一个带文本信息的ArkTS RangeError。
cpp部分代码
#include \"napi/native_api.h\"\n\n// 这里直接抛出一个带有errorMessage的RangeError\nstatic napi_value ThrowRangeErrorMessage(napi_env env, napi_callback_info info)\n{\n    napi_throw_range_error(env, nullptr, \"napi_throw_range_error one\");\n    return nullptr;\n}\n// 传入不匹配的参数个数，判断不匹配之后抛出rangeError\nstatic napi_value ThrowRangeError(napi_env env, napi_callback_info info)\n{\n    // ArkTS侧传入两个参数\n    size_t argc = 2;\n    napi_value argv[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 如果传入参数个数不为2\n    if (argc != 2) {\n        // 这里抛出一个RangeError\n        napi_throw_range_error(env, \"napi_throw_range_error\", \"Expected two numbers as arguments\");\n        return nullptr;\n    }\n    // 下面将传入的两值相加并传出去\n    double numOne = 0;\n    double numTwo = 0;\n    napi_get_value_double(env, argv[0], &numOne);\n    napi_get_value_double(env, argv[1], &numTwo);\n    double result = numOne + numTwo;\n    napi_value resultValue;\n    napi_create_double(env, result, &resultValue);\n    return resultValue;\n}
接口声明
// index.d.ts\nexport const throwRangeErrorMessage: () => void;\nexport const throwRangeError: (num: number) => number | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  testNapi.throwRangeErrorMessage();\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_throw_range_error errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}\n\ntry {\n  testNapi.throwRangeError(1);\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_throw_range_error errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}
[h2]napi_is_error
用于判断给定的napi_value是否表示一个error对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiIsError(napi_env env, napi_callback_info info)\n{\n    // 接收一个入参\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 调用接口napi_is_error判断入参是否为一个error对象\n    bool result = false;\n    // 如果napi_value为一个error对象，则设置result为true的布尔值，否则设置为false\n    napi_is_error(env, args[0], &result);\n    // 取出result通过napi_get_boolean接口将取出的bool值转换为napi_value类型的值返回出去\n    napi_value returnValue = nullptr;\n    napi_get_boolean(env, result, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const napiIsError: <T>(obj: T) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  throw new Error(\"throwing an error\");\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_error error: %{public}s', testNapi.napiIsError(error)\n    .toString());\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_error error: %{public}s', testNapi.napiIsError(1)\n    .toString());\n}
[h2]napi_get_and_clear_last_exception
用于获取并清除最近一次出现的异常。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetAndClearLastException(napi_env env, napi_callback_info info)\n{\n    // 抛出异常，创造异常情况\n    napi_throw_error(env, \"napi_create_error errorCode\", \"napi_create_error errorMessage\");\n    // 调用napi_get_and_clear_last_exception接口获取并清除最后一个未处理的异常。即使存在挂起的ArkTS异常，也可以调用此API\n    napi_value result = nullptr;\n    napi_status status = napi_get_and_clear_last_exception(env, &result);\n    if (status != napi_ok) {\n        return nullptr;\n    }\n    return result;\n}
接口声明
// index.d.ts\nexport const getAndClearLastException: () => Error | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n// 这里获取到最后一个未处理的异常\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_and_clear_last_exception, error.message: %{public}s',\n           testNapi.getAndClearLastException());
[h2]napi_is_exception_pending
用于判断是否出现了异常。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value IsExceptionPending(napi_env env, napi_callback_info info)\n{\n    napi_status status;\n    bool isExceptionPending = false;\n    // 在执行一些可能引发异常的操作后\n    napi_throw_error(env, \"napi_create_error errorCode\", \"napi_create_error errorMessage\");\n    // 检查当前环境中是否有异常挂起\n    status = napi_is_exception_pending(env, &isExceptionPending);\n    if (status != napi_ok) {\n        return nullptr;\n    }\n    if (isExceptionPending) {\n        // 处理异常挂起的情况\n        napi_value result = nullptr;\n        status = napi_get_and_clear_last_exception(env, &result);\n        if (status != napi_ok) {\n            return nullptr;\n        }\n        // 将处理的异常返回出去\n        return result;\n    }\n    return nullptr;\n}
接口声明
// index.d.ts\nexport interface MyObject {\n  code: string;\n  message: string;\n}\nexport const isExceptionPending: () => Object | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  let result = testNapi.isExceptionPending() as MyObject;\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_exception_pending, error.Code: %{public}s, error.message: %{public}s',\n    result.code, result.message);\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_exception_pending error');\n}
[h2]napi_fatal_error
用于引发致命错误以立即终止进程。在调用napi_fatal_error函数后，导致应用程序终止，因此应该慎重使用，避免在正常操作中频繁调用该函数。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value FatalError(napi_env env, napi_callback_info info)\n{\n    // 请注意，使用napi_fatal_error函数会导致应用进程直接终止，因此应该谨慎使用，仅在遇到无法恢复的严重错误时才应该调用该函数\n    // 模拟一个致命错误条件\n    bool errorCondition = true;\n    if (errorCondition) {\n        // 创建一个致命错误信息\n        napi_fatal_error(\"napi_fatal_error test\", NAPI_AUTO_LENGTH, \"napi_create_error errorMessage\", NAPI_AUTO_LENGTH);\n    }\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const fatalError: () => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  testNapi.fatalError();\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_fatal_error error');\n}
[h2]napi_fatal_exception
在主线程的上下文环境中调用napi_fatal_exception函数后，抛出一个致命异常，导致应用程序终止，同时会生成相应的crash日志。因此应该慎重使用，避免在正常操作中频繁调用该函数。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value FatalException(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n\n    napi_status status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    if (status != napi_ok) {\n      return nullptr;\n    }\n    // 请注意，使用napi_fatal_exception函数会导致应用进程直接终止，因此应该谨慎使用，仅在主线程遇到无法恢复的严重错误时才应该调用该函数\n    // 模拟一个致命错误条件\n    status = napi_fatal_exception(env, args[0]);\n    if (status != napi_ok) {\n      return nullptr;\n    }\n    return nullptr;\n}
接口声明
// index.d.ts\nexport const fatalException: (err: Error) => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nconst err = new Error(\"a fatal exception occurred\");\ntestNapi.fatalException(err);
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
