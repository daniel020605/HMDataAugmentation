@typescript-eslint/no-base-to-string
要求当一个对象在字符串化时提供了有用的信息，才能调用“toString()”方法。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/no-base-to-string\": \"error\"\n  }\n}
选项
详情请参考@typescript-eslint/no-base-to-string选项。
正例
// These types all have useful .toString()s\nconst num = 123;\nexport const v1 = 'Text' + true;\nexport const v2 = `Value: ${num}`;\n(() => {\n  console.info('arrow function');\n}).toString();
反例
interface MyType {\n  name: string;\n}\n// Passing an object or class instance to string concatenation:\nconst obj: MyType = {\n  name: 'object'\n};\nexport const v1 = '' + obj;\n\nclass MyClass {}\nconst value = new MyClass();\nexport const v2 = value + '';\n\n// Interpolation and manual .toString() calls too:\nexport const v3 = `Value: ${value}`;\nexport const v4 = obj.toString();
规则集
plugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
