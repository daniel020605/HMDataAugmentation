账号密码保存
密码保险箱在应用的登录、注册、修改密码等场景具备自动保存用户名和密码的能力。
保存后的用户名和密码可以在下次登录、修改密码时中自动填充到界面上的对应输入框，用户可以在密码保险箱内对已保存的用户名和密码进行查看，修改，添加备注，删除。
应用界面触发账号密码自动保存时，若密码保险箱中不存在同应用下的相同账号，则弹出账号密码保存提示框，用户点击“保存密码”按钮，即可将本次使用的账号和密码保存至密码保险箱。
应用触发账号登录或注册时，均可触发保存功能，下面分别介绍两种布局的标准适配场景。
触发条件及注意事项：
已设置锁屏密码并且开启密码保险箱自动保存和填入账号和密码开关。界面中TextInput输入框组件的enableAutoFill属性的值应为true（默认为true）。密码保险箱的自动保存功能只适用用户名和密码保存场景，在界面中必须同时存在用户名和密码的TextInput输入框组件。具体类型请参考输入框类型说明。用户名输入框应设置type属性为InputType.USER_NAME。 密码输入框应设置type属性为InputType.Password或InputType.NEW_PASSWORD。 其中，InputType.Password表示普通密码输入框，适用于登录界面的密码和修改密码界面的旧密码， InputType.NEW_PASSWORD表示新密码输入框，适用于注册界面和修改密码界面的新密码。 用户名和密码输入框中需要输入内容，不能为空也不能超长。用户名长度不能超过128字符，密码长度不能超过256字符。页面跳转时触发保存功能。在只有type为InputType.USER_NAME和InputType.Password的两个TextInput组件时，如果使用账号密码填充-修改密码自动填充了用户名和密码并没有修改，则不会触发保存和更新功能。
账号密码登录
示例代码如下：
import router from '@ohos.router';\n\n@Entry\n@Component\nstruct LoginPage {\n  @State ReserveAccount: string = '';\n  @State ReservePassword: string = '';\n  private length: number = 0;\n\n  onBackPress() {\n    router.back();\n    return true;\n  }\n\n  build() {\n    Column() {\n      Text(\"账户登录\")\n        .fontSize(24)\n        .fontColor('#000000')\n        .fontWeight(FontWeight.Medium)\n        .textAlign(TextAlign.Start)\n        .width('100%')\n        .margin({ top: 18 })\n\n      TextInput({ placeholder: '用户名' })\n        .opacity(0.6)\n        .type(InputType.USER_NAME)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .margin({ top: 32, bottom: 8 })\n        .onChange((value: string) => {\n          this.ReserveAccount = value;\n          this.length = value.length;\n        })\n        .caretPosition(this.length)\n\n      TextInput({ placeholder: '密码' })\n        .type(InputType.Password)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .opacity(0.6)\n        .showPasswordIcon(true)\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .onChange((value: string) => {\n          this.ReservePassword = value;\n        })\n        .margin({ bottom: 36 })\n\n      Button('登录', { type: ButtonType.Capsule, stateEffect: false })\n        .borderRadius(20)\n        .width('100%')\n        .height(40)\n        .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\n        .onClick(() => {\n          router.pushUrl({\n            url: 'pages/Index', //此处pages/Index为跳转界面地址，请自行修改\n            params: {\n              src: '账户登录'\n            }\n          }, (err) => {\n            if (err) {\n              console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n              return;\n            }\n            console.info('Invoke pushUrl succeeded.');\n          })\n        })\n    }\n    .padding({ left: 24, right: 24 })\n    .height('100%')\n    .width('100%')\n  }\n}
账号密码注册
示例代码如下：
import router from '@ohos.router';\n\n@Entry\n@Component\nstruct RegisterPage {\n  @State ReserveAccount: string = '';\n  @State ReservePassword: string = '';\n  @State enAbleAutoFill: boolean = true;\n  private length: number = 0;\n\n  onBackPress() {\n    this.enAbleAutoFill = false;\n    router.back();\n    return true;\n  }\n\n  aboutToAppear() {\n\n  }\n\n  build() {\n    Column() {\n      Text('注册账号')\n        .fontSize(24)\n        .fontColor('#000000')\n        .fontWeight(FontWeight.Medium)\n        .textAlign(TextAlign.Center)\n        .width('100%')\n        .margin({ top: 18})\n\n      TextInput({ placeholder: '用户名' })\n        .opacity(0.6)\n        .type(InputType.USER_NAME)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .margin({ top: 32, bottom: 8 })\n        .onChange((value: string) => {\n          this.ReserveAccount = value;\n          this.length = value.length;\n        })\n        .caretPosition(this.length)\n\n      TextInput({ placeholder: '新密码' })\n        .enableAutoFill(this.enAbleAutoFill)\n        .type(InputType.NEW_PASSWORD)\n        .passwordRules('begin:[upper],special:[yes],len:[maxlen:32,minlen:12]')\n        .placeholderColor(0x182431)\n        .width('100%')\n        .opacity(0.6)\n        .showPasswordIcon(true)\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .onChange((value: string) => {\n          this.ReservePassword = value;\n        })\n        .margin({ bottom: 36 })\n\n      Button('页面跳转', { type: ButtonType.Capsule, stateEffect: false })\n        .borderRadius(20)\n        .width('80%')\n        .height(40)\n        .margin({ top: 24 })\n        .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\n        .onClick(() => {\n          router.pushUrl({\n            url: 'pages/Index', //此处pages/Index为跳转界面地址，请自行修改\n            params: {\n              src: '注册账号'\n            }\n          }, (err) => {\n            if (err) {\n              console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n              return;\n            }\n            console.info('Invoke pushUrl succeeded.');\n          })\n        })\n\n      Button('页面跳转(跳转前关闭autofill）', { type: ButtonType.Capsule, stateEffect: false })\n        .borderRadius(20)\n        .width('80%')\n        .height(40)\n        .margin({ top: 24 })\n        .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\n        .onClick(() => {\n          this.enAbleAutoFill = false;\n          router.pushUrl({\n            url: 'pages/Index', //此处pages/Index为跳转界面地址，请自行修改\n            params: {\n              src: '注册账号'\n            }\n          }, (err) => {\n            if (err) {\n              console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n              return;\n            }\n            console.info('Invoke pushUrl succeeded.');\n          })\n        })\n    }\n  }\n}
