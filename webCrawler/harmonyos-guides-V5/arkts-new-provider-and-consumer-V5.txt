@Provider装饰器和@Consumer装饰器：跨组件层级双向同步
@Provider和@Consumer用于跨组件层级数据双向同步，可以使得开发者不用拘泥于组件层级。
@Provider和@Consumer属于状态管理V2装饰器，所以只能在@ComponentV2中才能使用，在@Component中使用会编译报错。
@Provider和@Consumer提供了跨组件层级数据双向同步的能力。在阅读本文档前，建议提前阅读：@ComponentV2。
@Provider和@Consumer装饰器从API version 12开始支持。
概述
@Provider，即数据提供方，其所有的子组件都可以通过@Consumer绑定相同的key来获取@Provider提供的数据。
@Consumer，即数据消费方，可以通过绑定同样的key获取其最近父节点的@Provider的数据，当查找不到@Provider的数据时，使用本地默认值。
@Provider和@Consumer装饰数据类型需要一致。
开发者在使用@Provider和@Consumer时要注意：
@Provider和@Consumer强依赖自定义组件层级，@Consumer会因为所在组件的父组件不同，而被初始化为不同的值。@Provider和@Consumer相当于把组件粘合在一起了，从组件独立角度，要减少使用@Provider和@Consumer。
@Provider和@Consumer vs @Provide和@Consume能力对比
在状态管理V1版本中，提供跨组件层级双向的装饰器为@Provide和@Consume，当前文档介绍的是状态管理V2装饰器@Provider和@Consumer。虽然两者名字和功能类似，但在特性上还存在一些差异。
如果开发者对状态管理V1中@Provide和@Consume完全不曾了解过，可以直接跳过本节。
装饰器说明
[h2]基本规则
@Provider语法：
@Provider(alias?: string) varName : varType = initValue
@Consumer语法：
@Consumer(alias?: string) varName : varType = initValue
[h2]aliasName和属性名
@Provider和@Consumer可接受可选参数aliasName，如果开发者没有配置参数，则使用属性名作为默认的aliasName。注意：aliasName是用于@Provider和@Consumer进行匹配的唯一指定key。
以下三个例子可清楚介绍@Provider和@Consumer如何使用aliasName进行查找匹配。
@ComponentV2\nstruct Parent {\n  // 未定义aliasName, 使用属性名'str'作为aliasName\n  @Provider() str: string = 'hello';\n}\n\n@ComponentV2\nstruct Child {\n  // 定义aliasName为'str'，使用aliasName去寻找\n  // 能够在Parent组件上找到, 使用@Provider的值'hello'\n  @Consumer('str') str: string = 'world';\n}
@ComponentV2\nstruct Parent {\n  // 定义aliasName为'alias'\n  @Provider('alias') str: string = 'hello';\n}\n\n@ComponentV2 struct Child {\n  // 定义aliasName为 'alias'，找到@Provider并获得值'hello'\n  @Consumer('alias') str: string = 'world';\n}
@ComponentV2\nstruct Parent {\n  // 定义aliasName为'alias'\n  @Provider('alias') str: string = 'hello';\n}\n\n@ComponentV2\nstruct Child {\n  // 未定义aliasName，使用属性名'str'作为aliasName\n  // 没有找到对应的@Provider，使用本地值'world'\n  @Consumer() str: string = 'world';\n}
变量传递
使用限制
@Provider和@Consumer为自定义组件的属性装饰器，仅能装饰自定义组件内的属性，不能装饰class的属性。@Provider和@Consumer为状态管理V2装饰器，只能在@ComponentV2中使用，不能在@Component中使用。@Provider和@Consumer仅支持本地初始化，不支持外部传入初始化。
使用场景
[h2]@Provider和@Consumer双向同步
建立双向绑定
自定义组件Parent和Child初始化:Child中@Consumer() str: string = 'world'向上查找，查找到Parent中声明的@Provider() str: string = 'hello'。@Consumer() str: string = 'world'初始化为其查找到的@Provider的值，即‘hello’。两者建立双向同步关系。 点击Parent中的Button，改变@Provider装饰的str，通知其对应的@Consumer，对应UI刷新。点击Child中Button，改变@Consumer装饰的str，通知其对应的@Provider，对应UI刷新。
@Entry\n@ComponentV2\nstruct Parent {\n  @Provider() str: string = 'hello';\n\n  build() {\n    Column() {\n      Button(this.str)\n        .onClick(() => {\n          this.str += '0';\n        })\n      Child()\n    }\n  }\n}\n\n@ComponentV2\nstruct Child {\n  @Consumer() str: string = 'world';\n\n  build() {\n    Column() {\n      Button(this.str)\n        .onClick(() => {\n          this.str += '0';\n        })\n    }\n  }\n}
未建立双向绑定
下面的例子中，@Provider和@Consumer由于aliasName值不同，无法建立双向同步关系。
自定义组件Parent和Child初始化:Child中@Consumer() str: string = 'world'向上查找，未查找到其数据提供方@Provider。@Consumer() str: string = 'world'使用其本地默认值为‘world’。两者未建立双向同步关系。 点击Parent中的Button，改变@Provider装饰的str1，仅刷新@Provider关联的Button组件。点击Child中Button，改变@Consumer装饰的str，仅刷新@Consumer关联的Button组件。
@Entry\n@ComponentV2\nstruct Parent {\n  @Provider() str1: string = 'hello';\n\n  build() {\n    Column() {\n      Button(this.str1)\n        .onClick(() => {\n          this.str1 += '0';\n        })\n      Child()\n    }\n  }\n}\n\n@ComponentV2\nstruct Child {\n  @Consumer() str: string = 'world';\n\n  build() {\n    Column() {\n      Button(this.str)\n        .onClick(() => {\n          this.str += '0';\n        })\n    }\n  }\n}
[h2]@Provider和@Consumer装饰回调事件，用于组件之间完成行为抽象
当需要在父组件中向子组件注册回调函数时，可以通过使用@Provider和@Consumer装饰回调方法来解决。
比如拖拽场景，当发生拖拽事件时，如果希望将子组件拖拽的起始位置信息同步给父组件，可以参考下面的例子。
@Entry\n@ComponentV2\nstruct Parent {\n  @Local childX: number = 0;\n  @Local childY: number = 1;\n  @Provider() onDrag: (x: number, y: number) => void = (x: number, y: number) => {\n    console.log(`onDrag event at x=${x} y:${y}`);\n    this.childX = x;\n    this.childY = y;\n  }\n\n  build() {\n    Column() {\n      Text(`child position x: ${this.childX}, y: ${this.childY}`)\n      Child()\n    }\n  }\n}\n\n@ComponentV2\nstruct Child {\n  @Consumer() onDrag: (x: number, y: number) => void = (x: number, y: number) => {};\n\n  build() {\n    Button(\"changed\")\n      .draggable(true)\n      .onDragStart((event: DragEvent) => {\n        // 当前预览器上不支持通用拖拽事件\n        this.onDrag(event.getDisplayX(), event.getDisplayY());\n      })\n  }\n}
[h2]@Provider和@Consumer装饰复杂类型，配合@Trace一起使用
@Provider和@Consumer只能观察到数据本身的变化。如果当其装饰复杂数据类型，需要观察属性的变化时，需要配合@Trace一起使用。装饰内置类型：Array、Map、Set、Date时，可以观察到某些API的变化，观察能力同@Trace。
@ObservedV2\nclass User {\n  @Trace name: string;\n  @Trace age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n}\nconst data: User[] = [new User('Json', 10), new User('Eric', 15)];\n@Entry\n@ComponentV2\nstruct Parent {\n  @Provider('data') users: User[] = data;\n\n  build() {\n    Column() {\n      Child()\n      Button('add new user')\n        .onClick(() => {\n          this.users.push(new User('Molly', 18));\n        })\n      Button('age++')\n        .onClick(() => {\n          this.users[0].age++;\n        })\n      Button('change name')\n        .onClick(() => {\n          this.users[0].name = 'Shelly';\n        })\n    }\n  }\n}\n\n@ComponentV2\nstruct Child {\n  @Consumer('data') users: User[] = [];\n\n  build() {\n    Column() {\n      ForEach(this.users, (item: User) => {\n        Column() {\n          Text(`name: ${item.name}`).fontSize(30)\n          Text(`age: ${item.age}`).fontSize(30)\n          Divider()\n        }\n      })\n    }\n  }\n}
[h2]@Provider重名时，@Consumer向上查找其最近的@Provider
@Provider可以在组件树上重名，@Consumer会向上查找其最近父节点的@Provider的数据。
@Entry\n@ComponentV2\nstruct Index {\n  @Provider() val: number = 10;\n\n  build() {\n    Column() {\n      Parent()\n    }\n  }\n}\n\n@ComponentV2\nstruct Parent {\n  @Provider() val: number = 20;\n  @Consumer(\"val\") val2: number = 0; // 10\n\n  build() {\n    Column() {\n      Text(`${this.val2}`)\n      Child()\n    }\n  }\n}\n\n@ComponentV2\nstruct Child {\n  @Consumer() val: number = 0; // 20\n\n  build() {\n    Column() {\n      Text(`${this.val}`)\n    }\n  }\n}
上面的例子中：
Parent中@Consumer向上查找，查找到Index中定义的 @Provider() val: number = 10，所以初始化为10。Child中@Consumer向上查找，查找到Parent中定义的@Provider() val: number = 20后停止，不会继续向上查找，所以初始化为20。
[h2]@Provider和@Consumer初始化@Param
点击Text(`Parent @Consumer val: ${this.val}`)，触发@Consumer() val的变化，变化同步给Index中@Provider() val，从而触发子组件Text(Parent @Param val2: ${this.val2})的刷新。Parent @Consumer() val的变化也会同步给Child，触发Text(Child @Param val ${this.val})的刷新。
@Entry\n@ComponentV2\nstruct Index {\n  @Provider() val: number = 10;\n\n  build() {\n    Column() {\n      Parent({ val2: this.val })\n    }\n  }\n}\n\n@ComponentV2\nstruct Parent {\n  @Consumer() val: number = 0;\n  @Param val2: number = 0;\n\n  build() {\n    Column() {\n      Text(`Parent @Consumer val: ${this.val}`).fontSize(30).onClick(() => {\n        this.val++;\n      })\n      Text(`Parent @Param val2: ${this.val2}`).fontSize(30)\n      Child({ val: this.val })\n    }.border({ width: 2, color: Color.Green })\n  }\n}\n\n@ComponentV2\nstruct Child {\n  @Param val: number = 0;\n\n  build() {\n    Column() {\n      Text(`Child @Param val ${this.val}`).fontSize(30)\n    }.border({ width: 2, color: Color.Pink })\n  }\n}
