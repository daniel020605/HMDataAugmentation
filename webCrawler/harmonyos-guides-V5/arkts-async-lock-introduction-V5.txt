异步锁
为了解决多线程并发任务间的数据竞争问题，ArkTS引入了异步锁能力。异步锁可能会被类对象持有，因此为了更方便地在并发实例间获取同一个异步锁对象，AsyncLock对象支持跨线程引用传递。
由于ArkTS语言支持异步操作，阻塞锁容易产生死锁问题，因此在ArkTS中仅支持异步锁（非阻塞式锁）。同时，异步锁还可以用于保证单线程内的异步任务时序一致性，防止异步任务时序不确定导致的同步问题。
更多异步锁相关接口，可见异步锁ArkTSUtils.locks。
使用异步锁的方法需要标记为async，调用方需要使用await修饰，才能保证时序正确。
使用示例
为了解决@Sendable共享对象在不同线程修改共享变量导致的竞争问题，可以采用异步锁进行数据保护。示例如下：
import { ArkTSUtils, taskpool } from '@kit.ArkTS';\n\n@Sendable\nexport class A {\n  private count_: number = 0;\n  lock_: ArkTSUtils.locks.AsyncLock = new ArkTSUtils.locks.AsyncLock();\n\n  public async getCount(): Promise<number> {\n    // 对需要保护的数据加异步锁\n    return this.lock_.lockAsync(() => {\n      return this.count_;\n    })\n  }\n\n  public async increaseCount() {\n    // 对需要保护的数据加异步锁\n    await this.lock_.lockAsync(() => {\n      this.count_++;\n    })\n  }\n}\n\n@Concurrent\nasync function printCount(a: A) {\n  console.info(\"InputModule: count is:\" + await a.getCount());\n}\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    RelativeContainer() {\n      Text(this.message)\n        .id('HelloWorld')\n        .fontSize(50)\n        .fontWeight(FontWeight.Bold)\n        .alignRules({\n          center: { anchor: '__container__', align: VerticalAlign.Center },\n          middle: { anchor: '__container__', align: HorizontalAlign.Center }\n        })\n        .onClick(async () => {\n          // 创建sendable对象a\n          let a: A = new A();\n          // 将实例a传递给子线程\n          await taskpool.execute(printCount, a);\n        })\n    }\n    .height('100%')\n    .width('100%')\n  }\n}
