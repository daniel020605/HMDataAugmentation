使用Node-API接口处理异步操作
简介
使用Node-API接口处理异步操作。异步操作是指需要一定时间才能完成的操作，例如从网络下载数据或读取大型文件。与同步操作不同，异步操作不会阻塞主线程，而是会在后台执行。当异步操作完成后，事件循环将把它放入任务队列中，等待主线程空闲时执行。
基本概念
Promise是ArkTS中用来处理异步操作的对象，Promise有pending（待定）、fulfilled（已兑现）和rejected（已拒绝）三种状态，Promise的初始状态是pending，resolve函数可以使其状态从pending变为fulfilled（已兑现），reject函数可以使其状态从pending变为rejected(已拒绝)，一旦兑现或拒绝Promise的状态将不能更改。下面是一些基本概念：
同步： 同步是指代码按照顺序一行一行地执行，每行代码的执行都会等待上一行代码执行完成后再继续执行。在同步执行中，如果某个操作需要花费较长时间，那么整个程序的执行就会被阻塞，直到该操作完成才能继续执行后续代码。异步：异步是指任务可以同时执行，不需要等待上一个任务结束。在ArkTS中，常见的异步操作包括定时器、事件监听、网络请求等。异步任务不会阻塞后续任务的执行，而是通过回调函数或Promise对象来处理任务的结果。Promise：Promise是一个ArkTS对象，用于处理异步操作。Promise作用于外部，通常通过then、catch和finally方法暴露给外部以添加自定义逻辑。deferred：deferred是延迟对象，它可以与Promise对象关联，设置Promise的回调函数resolve和reject。deferred作用于内部，维护异步模型的状态并设置回调函数resolve和reject。resolve：此函数可以将Promise的状态从pending（待定）改为fulfilled（已兑现），向resolve中传入的参数可以在Promise对象的then方法中获取。reject：此函数可以将Promise的状态从pending（待定）改为rejected（已拒绝），向reject中传入的参数可以在Promise对象的catch方法中获取。
这些基本概念在处理异步操作中非常重要，开发者需要通过适当的方法来处理异步操作，Promise可以链式调用多个异步操作，使代码清晰整洁，便于维护。Node-API提供的方法可以帮助开发者在C/C++应用中处理ArkTS中的异步操作。
场景和功能介绍
以下Node-API接口主要用于与ArkTS Promise对象进行交互。他们的使用场景如下：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_is_promise
判断给定的napi_value是否表示一个Promise对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value IsPromise(napi_env env, napi_callback_info info) \n{\n    napi_value argv[1] = {nullptr};\n    size_t argc = 1;\n    napi_status status;\n    // 获取传入的参数\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    bool isPromise = false;\n    // 检查给定的入参是否为Promise对象，将结果保存在isPromise变量中\n    status = napi_is_promise(env, argv[0], &isPromise);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_is_promise failed\");\n        return nullptr;\n    }\n    napi_value result = nullptr;\n    // 将isPromise的值转换为napi_value中的类型返回\n    napi_get_boolean(env, isPromise, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const isPromise: <T>(value: T) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = Promise.resolve();\n// 传入的对象为Promise时，返回true，否则返回false\nhilog.info(0x0000, 'Node-API', 'napi_is_promise %{public}s', testNapi.isPromise(value));\nhilog.info(0x0000, 'Node-API', 'napi_is_promise string %{public}s', testNapi.isPromise(''));
[h2]napi_create_promise
napi_create_promise用于创建一个Promise对象。
使用该接口时应注意：
当有异常未处理时调用napi_create_promise，会返回napi_pending_exception。使用napi_create_promise后未判断返回值是否为napi_ok，之后使用了无效的deferred和promise导致应用崩溃。
napi_value NapiPromiseDemo(napi_env env, napi_callback_info)\n{\n    napi_deferred deferred = nullptr;\n    napi_value promise = nullptr;\n    napi_status status = napi_ok;\n\n    napi_throw_error(env, \"500\", \"common error\");\n\n    status = napi_create_promise(env, &deferred, &promise); // 有异常返回napi_pending_exception，且deferred、promise都为nullptr\n    if (status == napi_ok) {\n        // do something\n    }\n\n    return nullptr;\n}
[h2]napi_resolve_deferred & napi_reject_deferred
用于对Promise关联的deferred对象进行解析，napi_resolve_deferred将其从挂起状态转换为已兑现状态，napi_reject_deferred将其从挂起状态转换为已拒绝状态。
为确保微任务能正确的被执行，ArkTS运行时在使用Node-API方法兑现Promise时，将会触发一次微任务的执行。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreatePromise(napi_env env, napi_callback_info info)\n{\n    // deferred是一个延迟对象，作用是将函数延迟一定时间再执行\n    napi_deferred deferred = nullptr;\n    napi_value promise = nullptr;\n    // 调用接口创建Promise对象\n    napi_status status = napi_create_promise(env, &deferred, &promise);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Create promise failed\");\n        return nullptr;\n    }\n    // 调用napi_is_promise判断napi_create_promise接口创建的是不是Promise对象\n    bool isPromise = false;\n    napi_value returnIsPromise = nullptr;\n    napi_is_promise(env, promise, &isPromise);\n    // 将布尔值转为可以返回的napi_value\n    napi_get_boolean(env, isPromise, &returnIsPromise);\n    return returnIsPromise;\n}\n\nstatic napi_value ResolveRejectDeferred(napi_env env, napi_callback_info info) \n{\n    // 获得并解析参数\n    size_t argc = 3;\n    napi_value args[3] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 第一个参数为向resolve传入的信息，第二个参数为向reject传入的信息，第三个参数为Promise的状态\n    bool status;\n    napi_get_value_bool(env, args[2], &status);\n    // 创建Promise对象\n    napi_deferred deferred = nullptr;\n    napi_value promise = nullptr;\n    napi_status createStatus = napi_create_promise(env, &deferred, &promise);\n    if (createStatus != napi_ok) {\n        napi_throw_error(env, nullptr, \"Create promise failed\");\n        return nullptr;\n    }\n    // 根据第三个参数设置resolve或reject\n    if (status) {\n        napi_resolve_deferred(env, deferred, args[0]);\n    } else {\n        napi_reject_deferred(env, deferred, args[1]);\n    }\n    // 返回设置了resolve或reject的Promise对象\n    return promise;\n}
接口声明
// index.d.ts\nexport const createPromise: () => boolean | void;\nexport const resolveRejectDeferred: (resolve: string, reject: string, status: boolean) => Promise<string> | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\n// 创建promise如果创建成功返回true，创建失败返回false\nhilog.info(0x0000, 'Node-API', 'napi_create_promise %{public}s', testNapi.createPromise());\n// 调用resolveRejectDeferred函数设置resolve和reject的返回结果以及Promise状态\n// Promise状态为true时设置resolve，返回结果在then函数中获得\nlet promiseSuccess: Promise<string> = testNapi.resolveRejectDeferred('success', 'fail', true) as Promise<string>;\npromiseSuccess.then((res) => {\n  hilog.info(0x0000, 'Node-API', 'get_resolve_deferred resolve %{public}s', res)\n}).catch((err: Error) => {\n  hilog.info(0x0000, 'Node-API', 'get_resolve_deferred reject %{public}s', err)\n})\n// Promise状态为false时设置reject，返回结果在catch函数中获得\nlet promiseFail: Promise<string> = testNapi.resolveRejectDeferred('success', 'fail', false) as Promise<string>;\npromiseFail.then((res) => {\n  hilog.info(0x0000, 'Node-API', 'get_resolve_deferred resolve %{public}s', res)\n}).catch((err: Error) => {\n  hilog.info(0x0000, 'Node-API', 'get_resolve_deferred reject %{public}s', err)\n})
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
