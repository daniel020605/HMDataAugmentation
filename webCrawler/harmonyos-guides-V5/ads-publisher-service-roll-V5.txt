贴片广告
场景介绍
贴片广告是一种在视频播放前、视频播放中或视频播放结束后插入的视频或图片广告。
接口说明
接口名
描述
loadAd(adParam: AdRequestParams, adOptions: AdOptions, listener: AdLoadListener): void
请求单广告位广告，通过AdRequestParams、AdOptions进行广告请求参数设置，通过AdLoadListener监听广告请求回调。
AdComponent(ads: advertising.Advertisement[], displayOptions: advertising.AdDisplayOptions, interactionListener: advertising.AdInteractionListener, @BuilderParam adRenderer?: () => void): void
展示广告，通过AdDisplayOptions进行广告展示参数设置，通过AdInteractionListener监听广告状态回调。
为了保证广告能正确展示，该接口必须和请求广告接口配套使用。
开发步骤
获取OAID。如果想要为用户更精准的推送广告，可以在请求参数AdRequestParams中添加oaid属性。 如何获取OAID参见获取OAID信息。  使用以下示例中提供的测试广告位必须先获取OAID信息。  请求单广告位广告。需要创建一个AdLoader对象，通过AdLoader的loadAd方法请求广告，最后通过AdLoadListener来监听广告的加载状态。 在请求贴片广告时，需要在AdOptions中设置两个参数：totalDuration和placementAdCountDownDesc。 请求广告关键参数如下所示： 请求广告参数名  类型  必填  说明    adType  number  是  请求广告类型，贴片广告类型为60。   adId  string  是  广告位ID。 如果仅调测广告，可使用测试广告位ID：testy3cglm3pj0。如果要接入正式广告，则需要申请正式的广告位ID。可在应用发布前进入流量变现官网，点击“开始变现”，登录鲸鸿动能媒体服务平台进行申请，具体操作详情请参见展示位创建。   oaid  string  否  开放匿名设备标识符，用于精准推送广告。不填无法获取到个性化广告。      示例代码如下所示：import { advertising, identifier } from '@kit.AdsKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  // 获取到的OAID\n  private oaid: string = '';\n\n  aboutToAppear() {\n    try {\n      // 使用Promise回调方式获取OAID\n      identifier.getOAID().then((data: string) => {\n        this.oaid = data;\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\n      }).catch((error: BusinessError) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to get adsIdentifierInfo, code: ${error.code}, message: ${error.message}`);\n      })\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  build() {\n    Row() {\n      Button('加载广告', { type: ButtonType.Normal, stateEffect: true })\n        .onClick(() => {\n          // 调用加载广告方法\n          requestAd(this.context, this.oaid);\n        })\n        .borderRadius(8)\n        .backgroundColor(0x317aff)\n        .width(90)\n        .height(40)\n    }\n    .height('100%')\n  }\n}\n\n/**\n * 加载广告\n *\n * @param context 上下文环境\n * @param oaid OAID信息\n */\nfunction requestAd(context: common.Context, oaid: string): void {\n  const adRequestParam: advertising.AdRequestParams = {\n    // 广告类型\n    adType: 60,\n    // 'testy3cglm3pj0'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n    adId: 'testy3cglm3pj0',\n    // 在AdRequestParams中添加oaid参数\n    oaid: oaid,\n    // 用于区分普通请求和预加载请求，默认值false代表普通请求，true代表预加载请求\n    isPreload: false\n  };\n  const adOptions: advertising.AdOptions = {\n    // 在AdOptions中添加totalDuration参数，用于设置贴片广告展示时长（贴片广告必填）\n    totalDuration: 30,\n    // 在AdOptions中添加placementAdCountDownDesc参数，设置贴片广告倒计时文案（可选，填写了则展示文案，不填写则只展示倒计时）\n    placementAdCountDownDesc: encodeURI('VIP免广告'),\n    // 是否允许流量下载 0不允许 1允许，不设置以广告主设置为准\n    allowMobileTraffic: 0,\n    // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\n    tagForChildProtection: -1,\n    // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\n    tagForUnderAgeOfPromise: -1,\n    // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\n    adContentClassification: 'A'\n  };\n  // 广告请求回调监听\n  const adLoaderListener: advertising.AdLoadListener = {\n    // 广告请求失败回调\n    onAdLoadFailure: (errorCode: number, errorMsg: string) => {\n      hilog.error(0x0000, 'testTag', '%{public}s',\n        `Failed to request single ad, errorCode is: ${errorCode}, errorMsg is: ${errorMsg}`);\n    },\n    // 广告请求成功回调\n    onAdLoadSuccess: (ads: Array<advertising.Advertisement>) => {\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting single ad!');\n      // 保存请求到的广告内容用于展示\n      const returnAds = ads;\n      // 路由到广告展示页面\n      routePage('pages/PlacementAdPage', returnAds);\n\n    }\n  };\n  // 创建AdLoader广告对象\n  const load: advertising.AdLoader = new advertising.AdLoader(context);\n  // 调用广告请求接口\n  hilog.info(0x0000, 'testTag', '%{public}s', 'Request single ad!');\n  load.loadAd(adRequestParam, adOptions, adLoaderListener);\n}\n\n/**\n * 路由跳转\n *\n * @param pageUri 要路由到的页面\n */\nasync function routePage(pageUri: string, ads: Array<advertising.Advertisement | null>) {\n  let options: router.RouterOptions = {\n    url: pageUri,\n    params: {\n      ads: ads\n    }\n  }\n  try {\n    hilog.info(0x0000, 'testTag', '%{public}s', `RoutePage: ${pageUri}`);\n    router.pushUrl(options);\n  } catch (error) {\n    hilog.error(0x0000, 'testTag', '%{public}s',\n      `Failed to routePage callback, code: ${error.code}, msg: ${error.message}`);\n  }\n}  展示广告。在您的页面中使用AdComponent组件展示贴片广告，由媒体判断流量场景下，可以自动播放则展示广告，反之则不展示。以前贴广告为例，前贴广告播放完成后进入正片播放。您需要在entry/src/main/resources/base/profile/main_pages.json文件中添加页面，如下图所示。  您需要在media和rawfile目录下分别指定正片未播放时的预览图video_preview.PNG和对应的正片文件videoTest.mp4，如下图所示。  示例代码如下所示：import { router, window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { advertising, AdComponent } from '@kit.AdsKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct PlacementAdPage {\n  // 是否竖屏\n  private portrait: boolean = true;\n  // 请求到的广告内容\n  private ads: Array<advertising.Advertisement> = [];\n  // 广告展示参数\n  private adDisplayOptions: advertising.AdDisplayOptions = {\n    // 是否静音，默认不静音\n    mute: false\n  }\n  // 广告参数\n  private adOptions: advertising.AdOptions = {\n    // 设置贴片广告展示时长（贴片广告必填）\n    totalDuration: 30,\n    // 设置贴片广告倒计时文案，文案需要使用encodeURI编码（可选，填写了则展示文案，不填写则只展示倒计时）\n    placementAdCountDownDesc: encodeURI('VIP免广告'),\n    // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\n    tagForChildProtection: -1,\n    // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\n    tagForUnderAgeOfPromise: -1,\n    // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\n    adContentClassification: 'A'\n  }\n  // 已经播放的贴片广告数量\n  private playedAdSize: number = 0;\n  // 是否播放正片\n  @State isPlayVideo: boolean = false;\n  // 视频播放控制器\n  private controller: VideoController = new VideoController();\n  // 指定视频未播放时的预览图片路径\n  private previewUris: Resource = $r('app.media.video_preview');\n  // 指定视频播放源的路径，这里取本地视频资源\n  private innerResource: Resource = $rawfile('videoTest.mp4');\n  // 用于渲染右上角倒计时\n  private countDownTxtPlaceholder: string = '%d | %s';\n  @State countDownTxt: string = '';\n\n  aboutToAppear() {\n    const params: Record<string, Object> = router.getParams() as Record<string, Object>;\n    if (params && params.ads as Array<advertising.Advertisement>) {\n      this.ads = params.ads as Array<advertising.Advertisement>;\n      this.adOptions = params.adOptions as advertising.AdOptions;\n      this.initData();\n    }\n  }\n\n  build() {\n    Stack({ alignContent: Alignment.TopEnd }) {\n      // AdComponent组件用于展示非全屏广告\n      AdComponent({\n        ads: this.ads, displayOptions: this.adDisplayOptions,\n        interactionListener: {\n          // 广告状态变化回调\n          onStatusChanged: (status: string, ad: advertising.Advertisement, data: string) => {\n            switch (status) {\n              case 'onPortrait':\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onPortrait');\n              // 设置屏幕方向为竖屏或返回上一页\n                this.setWindowPortrait();\n                break;\n              case 'onLandscape':\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onLandscape');\n              // 设置屏幕方向为横屏\n                this.setWindowLandscape();\n                break;\n              case 'onMediaProgress':\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onMediaProgress');\n                break;\n              case 'onMediaStart':\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onMediaStart');\n                break;\n              case 'onMediaPause':\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onMediaPause');\n                break;\n              case 'onMediaStop':\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onMediaStop');\n                break;\n              case 'onMediaComplete':\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onMediaComplete');\n              // 所有广告都播放完毕后，开始播放正片\n                this.playedAdSize++;\n                if (this.playedAdSize === this.ads.length) {\n                  this.isPlayVideo = true;\n                }\n                break;\n              case 'onMediaError':\n                hilog.error(0x0000, 'testTag', '%{public}s', 'Status is onMediaError');\n                break;\n              case 'onMediaCountdown':\n                try {\n                  hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onMediaCountdown');\n                  const parseData: Record<string, number> = JSON.parse(JSON.stringify(data));\n                  this.updateCountDownTxt(parseData.countdownTime);\n                } catch (e) {\n                  hilog.error(0x0000, 'testTag', '%{public}s',\n                    `Failed to parse data, code: ${e.code}, msg: ${e.message}`);\n                }\n                break;\n            }\n          }\n        }\n      })\n        .visibility(!this.isPlayVideo ? Visibility.Visible : Visibility.None)\n        .width('100%')\n        .height('100%')\n\n      Row() {\n        if (this.countDownTxt) {\n          Text(this.countDownTxt.split('').join('\\u200B'))\n            .fontSize(12)\n            .textAlign(TextAlign.Center)\n            .maxLines(1)\n            .fontColor(Color.White)\n            .lineHeight(12)\n            .textOverflow({ overflow: TextOverflow.Ellipsis })\n            .maxLines(1)\n            .backgroundColor('#66000000')\n            .border({ radius: 25 })\n            .padding({\n              left: 8,\n              right: 8,\n              top: 6,\n              bottom: 6\n            })\n            .margin({ right: 16, top: 16 })\n            .height(24)\n            .constraintSize({ minWidth: 60, maxWidth: 100 })\n            .onClick((event: ClickEvent) => {\n              hilog.info(0x0000, 'testTag', '%{public}s', 'OnVipClicked, do something...');\n            })\n        }\n      }\n      .alignItems(VerticalAlign.Top)\n      .justifyContent(FlexAlign.End)\n\n      Video({\n        src: this.innerResource,\n        previewUri: this.previewUris,\n        controller: this.controller\n      })\n        .visibility(this.isPlayVideo ? Visibility.Visible : Visibility.None)\n        .autoPlay(this.isPlayVideo ? true : false)\n        .controls(false)\n        .width('100%')\n        .height('100%')\n    }.width('100%').height('100%')\n  }\n\n  /**\n   * 设置竖屏或返回上一页\n   */\n  private setWindowPortrait() {\n    hilog.info(0x0000, 'testTag', '%{public}s', `Set WindowPortrait, portrait: ${this.portrait}`);\n    if (!this.portrait) {\n      window.getLastWindow(getContext(this), (err: BusinessError, win) => {\n        win.setPreferredOrientation(window.Orientation.PORTRAIT)\n      });\n      this.portrait = true;\n    } else {\n      router.back();\n    }\n  }\n\n  /**\n   * 设置横屏（正向）\n   */\n  private setWindowLandscape() {\n    hilog.info(0x0000, 'testTag', '%{public}s', `Set WindowLandscape, portrait: ${this.portrait}`);\n    if (this.portrait) {\n      window.getLastWindow(getContext(this), (err: BusinessError, win) => {\n        win.setPreferredOrientation(window.Orientation.LANDSCAPE)\n      });\n      this.portrait = false;\n    }\n  }\n\n  private initData() {\n    this.initCountDownText();\n  }\n\n  private initCountDownText() {\n    const decodeText = this.decodeString(this.adOptions?.placementAdCountDownDesc as string);\n    if (!this.isBlank(decodeText)) {\n      this.countDownTxtPlaceholder = this.countDownTxtPlaceholder.replace('%s', decodeText);\n    } else {\n      this.countDownTxtPlaceholder = '%d';\n    }\n  }\n\n  private updateCountDownTxt(leftTime: number) {\n    hilog.info(0x0000, 'testTag', '%{public}s', `Show LeftTime: ${leftTime}`);\n    this.countDownTxt = this.countDownTxtPlaceholder.replace('%d', leftTime + '');\n  }\n\n  private decodeString(str: string): string {\n    if (!str) {\n      return str;\n    }\n    let decodeUrl = str;\n    try {\n      decodeUrl = decodeURIComponent(str.replace(/\\+/g, '%20'));\n    } catch (e) {\n      hilog.error(0x0000, 'testTag', '%{public}s', `Failed to decodeURIComponent, code:${e.code}, msg: ${e.message}`);\n    }\n    return decodeUrl;\n  }\n\n  private isBlank(str: string): boolean {\n    if (str === null || str === undefined) {\n      return true;\n    }\n    if (typeof str === 'string') {\n      return str.trim().length === 0;\n    }\n    return false;\n  }\n}  
