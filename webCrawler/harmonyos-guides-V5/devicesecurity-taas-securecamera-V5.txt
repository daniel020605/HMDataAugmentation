安全摄像头场景
场景介绍
在安全摄像头场景中，通过创建证明密钥、打开证明会话的方式，对安全摄像头捕捉到的图像数据进行签名，确保图像数据的真实性和完整性。
约束与限制
目前仅支持“Mate60 Pro”的“ALN-AL00”机型。
业务流程
接口说明
接口及使用方法请参见API参考。
接口名
描述
createAttestKey(options: AttestOptions): Promise<void>
创建证明密钥。
initializeAttestContext(userData: string, options: AttestOptions): Promise<AttestReturnResult>
初始化证明会话。
finalizeAttestContext(options: AttestOptions): Promise<void>
结束证明会话。
destroyAttestKey(): Promise<void>
销毁证明密钥。
开发步骤
 导入camera模块、trustedAppService模块和相关依赖模块。import { camera } from '@kit.CameraKit';\nimport { trustedAppService } from '@kit.DeviceSecurityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';  参考安全相机开发指导，初始化安全相机。开发者需要完成：  选择支持安全相机的设备。 查询相机设备在安全模式下支持的输出能力。 创建设备输入输出。 打开安全设备（安全摄像头），并获取安全设备序列号。   创建证明密钥和初始化证明会话。// 创建证明密钥的参数\nconst createProperties: Array<trustedAppService.AttestParam> = [\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_ALGORITHM,\n    value: trustedAppService.AttestKeyAlg.ATTEST_ALG_ECC\n  },\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_KEY_SIZE,\n    value: trustedAppService.AttestKeySize.ATTEST_ECC_KEY_SIZE_256\n  }\n];\nconst createOptions: trustedAppService.AttestOptions = {\n  properties: createProperties\n};\n// 初始化证明会话的参数\nconst userData = \"trusted_app_service_demo\"; // 示例值，实际值请自行生成，长度在16到128字符之间\nconst deviceId = 7483679320805398131; // 示例值，实际值请通过Camera Kit获取\nconst initProperties: Array<trustedAppService.AttestParam> = [\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_TYPE,\n    value: trustedAppService.AttestType.ATTEST_TYPE_CAMERA\n  },\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_ID,\n    value: BigInt(deviceId)\n  }\n];\nconst initOptions: trustedAppService.AttestOptions = {\n  properties: initProperties\n};\n// 创建证明密钥并打开证明会话\nlet certChainList: Array<string>;\ntry {\n  await trustedAppService.createAttestKey(createOptions);\n  const result = await trustedAppService.initializeAttestContext(userData, initOptions);\n  certChainList = result.certChains;\n} catch (err) {\n  const error = err as BusinessError;\n  console.error(`Failed to initialize attest context, message:${error.message}, code:${error.code}`);\n}      只有创建证明密钥成功后，才能初始化证明会话。 证明密钥的有效期为7天，为了避免反复创建证明密钥，建议先调用初始化证明会话，如果初始化失败，再去销毁、创建证明密钥，然后重新初始化证明密钥。 每次打开安全摄像头都需要获取设备序列号，只有初始化安全相机证明会话时需要传入有效值，其他场景传“0”即可。 调用initializeAttestContext初始化证明会话时，userData的长度必须在16到128之间。     参考安全相机开发指导，完成安全相机会话的创建，配置输入、输出流，启动预览流和安全数据流。 结束证明会话。// 结束证明会话的参数\nconst finalProperties: Array<trustedAppService.AttestParam> = [\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_TYPE,\n    value: trustedAppService.AttestType.ATTEST_TYPE_CAMERA\n  }\n];\nconst finalOptions: trustedAppService.AttestOptions = {\n  properties: finalProperties,\n};\n// 结束证明会话\ntry {\n  await trustedAppService.finalizeAttestContext(finalOptions);\n} catch (err) {\n  const error = err as BusinessError;\n  console.error(`Failed to finalize attest context, message:${error.message}, code:${error.code}`);\n} 如果需要销毁证明密钥，请在结束证明会话后，调用destroyAttestKey接口。由于安全摄像头和安全地理位置共用同一个证明密钥，销毁前需要保证安全地理位置功能未在使用该证明密钥。  
