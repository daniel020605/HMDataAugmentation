使用运动和方向传感器监测设备状态
概述
运动和方向传感器，如加速度计、陀螺仪等，能够监测设备的运动状态和方向变化，例如设备的旋转、倾斜等。
通过W3C标准协议接口，Web组件能够访问这些传感器的数据，进而实现更加丰富的用户交互功能。例如，开发者在网页应用中可以利用加速度计识别运动模式，指导用户进行健身运动，利用陀螺仪捕获玩家手中设备的倾斜和旋转动作，实现无按钮操控的游戏体验。
通过在JavaScript中调用以下支持的W3C标准协议接口，可以访问运动和方向传感器。
需要权限
使用加速度、陀螺仪及设备运动事件接口时，需在配置文件module.json5中声明相应的传感器权限。具体配置方法请参考在配置文件中声明权限。
    \"requestPermissions\":[\n      {\n        \"name\" : \"ohos.permission.ACCELEROMETER\" // 加速度权限\n      },\n      {\n        \"name\" : \"ohos.permission.GYROSCOPE\"     // 陀螺仪权限\n      }\n    ]
Web组件在对接运动和方向传感器时，需配置onPermissionRequest接口，通过该接口接收权限请求通知。
开发步骤
 应用侧代码中，Web组件配置onPermissionRequest接口，可通过PermissionRequest的getAccessibleResource接口获取请求权限的资源类型，当资源类型为TYPE_SENSOR时，进行传感器授权处理。 import { webview } from '@kit.ArkWeb';\nimport { abilityAccessCtrl, PermissionRequestResult } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController()\n  aboutToAppear() {\n    // 配置Web开启调试模式\n    webview.WebviewController.setWebDebuggingAccess(true);\n    // 访问控制管理, 获取访问控制模块对象。\n    let atManager = abilityAccessCtrl.createAtManager();\n    try {\n      atManager.requestPermissionsFromUser(getContext(this), ['ohos.permission.ACCELEROMETER', 'ohos.permission.GYROSCOPE']\n        , (err: BusinessError, data: PermissionRequestResult) => {\n        console.info('data:' + JSON.stringify(data));\n        console.info('data permissions:' + data.permissions);\n        console.info('data authResults:' + data.authResults);\n      })\n    } catch (error) {\n      console.error(`ErrorCode: ${(error as BusinessError).code}, Message: ${(error as BusinessError).message}`);\n    }\n  }\n\n  build() {\n    Column() {\n      Web({ src: $rawfile('index.html'), controller: this.controller })\n        .onPermissionRequest((event) => {\n          if (event) {\n            AlertDialog.show({\n              title: 'title',\n              message: 'text',\n              primaryButton: {\n                value: 'deny',\n                action: () => {\n                  event.request.deny();\n                }\n              },\n              secondaryButton: {\n                value: 'onConfirm',\n                action: () => {\n                  event.request.grant(event.request.getAccessibleResource());\n                }\n              },\n              autoCancel: false,\n              cancel: () => {\n                event.request.deny();\n              }\n            })\n          }\n        })\n    }\n  }\n} 在前端页面代码中，利用JavaScript调用传感器相关的W3C标准协议接口。 <!DOCTYPE HTML>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    <meta name=\"misapplication-tap-highlight\" content=\"no\" />\n    <meta name=\"HandheldFriendly\" content=\"true\" />\n    <meta name=\"MobileOptimized\" content=\"320\" />\n    <title>运动和方向传感器</title>\n    <meta charset=\"UTF-8\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        // 访问设备的加速度计传感器，并获取其数据。\n        function getAccelerometer() {\n            var acc = new Accelerometer({frequency: 60});\n            acc.addEventListener('activate', () => console.log('Ready to measure.'));\n            acc.addEventListener('error', error => console.log('Error type: ' + error.type + ', error: ' + error.error ));\n            acc.addEventListener('reading', () => {\n                console.log(`Accelerometer ${acc.timestamp}, ${acc.x}, ${acc.y}, ${acc.z}.`);\n            });\n            acc.start();\n        }\n\n        // 访问设备的陀螺仪传感器，并获取其数据。\n        function getGyroscope() {\n            var gyr = new Gyroscope({frequency: 60});\n            gyr.addEventListener('activate', () => console.log('Ready to measure.'));\n            gyr.addEventListener('error', error => console.log('Error type: ' + error.type + ', error: ' + error.error ));\n            gyr.addEventListener('reading', () => {\n                console.log(`Gyroscope ${gyr.timestamp}, ${gyr.x}, ${gyr.y}, ${gyr.z}.`);\n            });\n            gyr.start();\n        }\n\n        // 访问设备的方向传感器，并获取其数据。\n        function getAbsoluteOrientationSensor() {\n            var aos = new AbsoluteOrientationSensor({frequency: 60});\n            aos.addEventListener('activate', () => console.log('Ready to measure.'));\n            aos.addEventListener('error', error => console.log('Error type: ' + error.type + ', error: ' + error.error ));\n            aos.addEventListener('reading', () => {\n                console.log(`AbsoluteOrientationSensor data: ${aos.timestamp}, ${aos.quaternion}`);\n            });\n            aos.start();\n        }\n\n        // 监听设备的运动事件，并执行相应的处理逻辑。\n        function listenDeviceMotionEvent() {\n            removeDeviceMotionEvent();\n            if ('DeviceMotionEvent' in window) {\n                window.addEventListener('devicemotion', handleMotionEvent, false);\n            } else {\n              console.log('不支持DeviceMotionEvent');\n            }\n        }\n\n        // 移除之前添加的设备运动事件监听器。\n        function removeDeviceMotionEvent() {\n            if ('DeviceMotionEvent' in window) {\n              window.removeEventListener('devicemotion', handleMotionEvent, false);\n            } else {\n              console.log('不支持DeviceOrientationEvent');\n            }\n        }\n\n        // 处理运动事件。\n        function handleMotionEvent(event) {\n            const x = event.accelerationIncludingGravity.x;\n            const y = event.accelerationIncludingGravity.y;\n            const z = event.accelerationIncludingGravity.z;\n            console.log(`DeviceMotionEvent data: ${event.timeStamp}, ${x}, ${y}, ${z}`);\n        }\n\n        // 监听设备方向的变化，并执行相应的处理逻辑。\n        function listenDeviceOrientationEvent() {\n            removeDeviceOrientationEvent();\n            if ('DeviceOrientationEvent' in window) {\n                window.addEventListener('deviceorientation', handleOrientationEvent, false);\n            } else {\n                console.log('不支持DeviceOrientationEvent');\n            }\n        }\n\n        // 移除之前添加的设备方向事件监听器。\n        function removeDeviceOrientationEvent() {\n            if ('DeviceOrientationEvent' in window) {\n              window.removeEventListener('deviceorientation', handleOrientationEvent, false);\n            } else {\n              console.log('不支持DeviceOrientationEvent');\n            }\n        }\n\n        // 监听设备方向的变化，并执行相应的处理逻辑。\n        function listenDeviceOrientationEvent2() {\n            removeDeviceOrientationEvent2();\n            if ('DeviceOrientationEvent' in window) {\n                window.addEventListener('deviceorientationabsolute', handleOrientationEvent, false);\n            } else {\n                console.log('不支持DeviceOrientationEvent');\n            }\n        }\n\n        // 移除之前添加的设备方向事件监听器。\n        function removeDeviceOrientationEvent2() {\n            if ('DeviceOrientationEvent' in window) {\n              window.removeEventListener('deviceorientationabsolute', handleOrientationEvent, false);\n            } else {\n              console.log('不支持DeviceOrientationEvent');\n            }\n        }\n\n        // 处理方向事件。\n        function handleOrientationEvent(event) {\n            console.log(`DeviceOrientationEvent data: ${event.timeStamp}, ${event.absolute}, ${event.alpha}, ${event.beta}, ${event.gamma}`);\n        }\n    </script>\n</head>\n<body>\n<div id=\"dcontent\" class=\"dcontent\">\n    <h3>运动和方向:</h3>\n    <ul class=\"dlist\">\n        <li><button type=\"button\" onclick=\"getAccelerometer()\">加速度</button></li>\n        <li><button type=\"button\" onclick=\"getGyroscope()\">陀螺仪</button></li>\n        <li><button type=\"button\" onclick=\"getAbsoluteOrientationSensor()\">设备方向(绝对定位)</button></li>\n        <li><button type=\"button\" onclick=\"listenDeviceMotionEvent()\">设备运动事件</button></li>\n        <li><button type=\"button\" onclick=\"listenDeviceOrientationEvent()\">设备方向事件</button></li>\n        <li><button type=\"button\" onclick=\"listenDeviceOrientationEvent2()\">设备方向事件(绝对定位)</button></li>\n    </ul>\n</div>\n</body>\n</html> 
