使用AVImageGenerator提取视频指定时间图像(ArkTS)
使用AVImageGenerator可以实现从原始媒体资源中获取视频指定时间的缩略图，本开发指导将以获取一个视频资源的缩略图作为示例，向开发者讲解AVImageGenerator相关功能。
获取视频资源的缩略图的全流程包含：创建AVImageGenerator对象，设置资源，获取缩略图，销毁资源。
开发步骤及注意事项
详细的API说明请参考AVImageGenerator API参考。
 使用createAVImageGenerator()创建实例。 设置资源：需要设置属性fdSrc（表示文件描述符）。     开发者需根据实际情况，确认资源有效性并设置fdSrc：  可以使用ResourceManager.getRawFd打开HAP资源文件描述符，使用方法可参考ResourceManager API参考。 也可以使用应用沙箱路径访问对应资源（必须确认资源文件可用），参考获取应用文件路径。应用沙箱的介绍及如何向应用沙箱推送文件，请参考文件管理。 不同AVImageGenerator或者AVMetadataExtractor，如果需要操作同一资源，需要多次打开文件描述符，不要共用同一文件描述符。    获取指定时间图像：调用fetchFrameByTime()，可以获取到一个PixelMap对象，该对象可用于图片显示。 释放资源：调用release()销毁实例，释放资源。 
完整示例
参考以下示例，设置文件描述符，获取一个视频指定时间的缩略图。
import { media } from '@kit.MediaKit';\nimport { image } from '@kit.ImageKit';\n\nconst TAG = 'MetadataDemo';\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  // pixelMap对象声明，用于图片显示\n  @State pixelMap: image.PixelMap | undefined = undefined;\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message).fontSize(50).fontWeight(FontWeight.Bold)\n        Button() {\n          Text('TestButton')\n            .fontSize(30)\n            .fontWeight(FontWeight.Bold)\n        }\n        .type(ButtonType.Capsule)\n        .margin({\n          top: 20\n        })\n        .backgroundColor('#0D9FFB')\n        .width('60%')\n        .height('5%')\n        .onClick(() => {\n          // 设置fdSrc, 获取视频的缩略图\n          this.testFetchFrameByTime();\n        })\n        Image(this.pixelMap).width(300).height(300)\n          .margin({\n            top: 20\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n\n  // 在以下demo中，使用资源管理接口获取打包在HAP内的视频文件，通过设置fdSrc属性，\n  // 获取视频指定时间的缩略图，并通过Image控件显示在屏幕上。\n  async testFetchFrameByTime() {\n    // 创建AVImageGenerator对象\n    let avImageGenerator: media.AVImageGenerator = await media.createAVImageGenerator();\n    // 设置fdSrc\n    avImageGenerator.fdSrc = await getContext(this).resourceManager.getRawFd('demo.mp4');\n\n    // 初始化入参\n    let timeUs = 0;\n    let queryOption = media.AVImageQueryOptions.AV_IMAGE_QUERY_NEXT_SYNC;\n    let param: media.PixelMapParams = {\n      width : 300,\n      height : 300\n    };\n\n    // 获取缩略图（promise模式）\n    this.pixelMap = await avImageGenerator.fetchFrameByTime(timeUs, queryOption, param);\n\n    // 释放资源（promise模式）\n    avImageGenerator.release();\n    console.info(TAG, `release success.`);\n  }\n}
