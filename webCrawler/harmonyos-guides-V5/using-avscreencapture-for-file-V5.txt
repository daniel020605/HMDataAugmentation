使用AVScreenCapture录屏写文件(C/C++)
屏幕录制主要为主屏幕录屏功能。
开发者可以调用录屏（AVScreenCapture）模块的C API接口，完成屏幕录制，采集设备内、麦克风等的音视频源数据。可以调用录屏模块获取音视频文件，然后通过文件的形式流转到其他模块进行播放或处理，达成文件形式分享屏幕内容的场景。
录屏模块和窗口（Window）、图形（Graphic）等模块协同完成整个视频采集的流程。
使用AVScreenCapture录制屏幕涉及到AVScreenCapture实例的创建、音视频采集参数的配置、采集的开始与停止、资源的释放等。
开始屏幕录制时正在通话中或者屏幕录制过程中来电，录屏将自动停止。因通话中断的录屏会上报OH_SCREEN_CAPTURE_STATE_STOPPED_BY_CALL状态。
屏幕录制过程中发生系统用户切换事件时，录屏将自动停止。因系统用户切换中断的录屏会上报OH_SCREEN_CAPTURE_STATE_STOPPED_BY_USER_SWITCHES状态。
本开发指导将以完成一次屏幕数据录制的过程为例，向开发者讲解如何使用AVScreenCapture进行屏幕录制，详细的API声明请参考AVScreenCapture API参考。
如果配置了采集麦克风音频数据，需对应配置麦克风权限ohos.permission.MICROPHONE和申请长时任务，配置方式请参见向用户申请权限、申请长时任务。
开发步骤及注意事项
使用AVScreenCapture时要明确其状态的变化，在创建实例后，调用对应的方法可以进入指定的状态实现对应的行为。
在确定的状态下执行不合适的方法会导致AVScreenCapture发生错误，开发者需要在调用状态转换的方法前进行状态检查，避免程序运行异常。
在 CMake 脚本中链接动态库
target_link_libraries(entry PUBLIC libnative_avscreen_capture.so)
 添加头文件。 #include \"napi/native_api.h\"\n#include <multimedia/player_framework/native_avscreen_capture.h>\n#include <multimedia/player_framework/native_avscreen_capture_base.h>\n#include <multimedia/player_framework/native_avscreen_capture_errors.h>\n#include <fcntl.h>\n#include \"string\"\n#include \"unistd.h\" 创建AVScreenCapture实例capture。 OH_AVScreenCapture* capture = OH_AVScreenCapture_Create(); 配置屏幕录制参数。 创建AVScreenCapture实例capture后，可以设置屏幕录制所需要的参数。 其中，录屏存文件时默认录制内录，麦克风可以动态开关，可以同时内外录制。 同时，录屏存文件需要设置状态回调，感知录制状态。 //录屏时获取麦克风或者内录，内录参数必填，如果都设置了，内录和麦克风的参数设置需要一致\nOH_AudioCaptureInfo micCapInfo = {\n    .audioSampleRate = 48000,\n    .audioChannels = 2,\n    .audioSource = OH_MIC\n};\n\nOH_AudioCaptureInfo innerCapInfo = {\n    .audioSampleRate = 48000,\n    .audioChannels = 2,\n    .audioSource = OH_ALL_PLAYBACK\n};\n\nOH_AudioEncInfo audioEncInfo = {\n    .audioBitrate = 48000,\n    .audioCodecformat = OH_AAC_LC\n};\n\nOH_VideoCaptureInfo videoCapInfo = {\n    .videoFrameWidth = 768,\n    .videoFrameHeight = 1280,\n    .videoSource = OH_VIDEO_SOURCE_SURFACE_RGBA\n};\n\nOH_VideoEncInfo videoEncInfo = {\n    .videoCodec = OH_H264,\n    .videoBitrate = 2000000,\n    .videoFrameRate = 30\n};\n\nOH_AudioInfo audioInfo = {\n    .innerCapInfo = innerCapInfo,\n    .audioEncInfo = audioEncInfo\n};\n\nOH_VideoInfo videoInfo = {\n    .videoCapInfo = videoCapInfo,\n    .videoEncInfo = videoEncInfo\n};\n\nconfig = {\n    .captureMode = OH_CAPTURE_HOME_SCREEN,\n    .dataType = OH_CAPTURE_FILE,\n    .audioInfo = audioInfo,\n    .videoInfo = videoInfo,\n};\n\nOH_AVScreenCapture_Init(capture, config); 调用StartScreenRecording()方法开始进行屏幕录制。 OH_AVScreenCapture_StartScreenRecording(capture); 调用StopScreenRecording()方法停止录制。 OH_AVScreenCapture_StopScreenRecording(capture); 调用Release()方法销毁实例，释放资源。 OH_AVScreenCapture_Release(capture); 
完整示例
下面展示了使用AVScreenCapture屏幕录制存文件的完整示例代码。
#include \"napi/native_api.h\"\n#include <multimedia/player_framework/native_avscreen_capture.h>\n#include <multimedia/player_framework/native_avscreen_capture_base.h>\n#include <multimedia/player_framework/native_avscreen_capture_errors.h>\n#include <fcntl.h>\n#include \"string\"\n#include \"unistd.h\"\n\nvoid OnStateChange(struct OH_AVScreenCapture *capture, OH_AVScreenCaptureStateCode stateCode, void *userData) {\n    (void)capture;\n    \n    if (stateCode == OH_SCREEN_CAPTURE_STATE_STARTED) {\n        // 处理状态变更\n    }\n    if (stateCode == OH_SCREEN_CAPTURE_STATE_STOPPED_BY_CALL ||\n        stateCode == OH_SCREEN_CAPTURE_STATE_STOPPED_BY_USER_SWITCHES) {\n        // 录屏中断状态处理\n    }\n    if (stateCode == OH_SCREEN_CAPTURE_STATE_INTERRUPTED_BY_OTHER) {\n        // 处理状态变更\n    }\n    (void)userData;\n}\n\nstatic napi_value Screencapture(napi_env env, napi_callback_info info) {\n    OH_AVScreenCaptureConfig config;\n    OH_AudioCaptureInfo micCapInfo = {\n        .audioSampleRate = 48000, \n        .audioChannels = 2, \n        .audioSource = OH_MIC\n    };\n\n    OH_AudioCaptureInfo innerCapInfo = {\n        .audioSampleRate = 48000, \n        .audioChannels = 2, \n        .audioSource = OH_ALL_PLAYBACK\n    };\n\n    OH_AudioEncInfo audioEncInfo = {\n        .audioBitrate = 48000, \n        .audioCodecformat = OH_AudioCodecFormat::OH_AAC_LC\n    };\n\n    OH_VideoCaptureInfo videoCapInfo = {\n        .videoFrameWidth = 768, \n        .videoFrameHeight = 1280, \n        .videoSource = OH_VIDEO_SOURCE_SURFACE_RGBA\n    };\n\n    OH_VideoEncInfo videoEncInfo = {\n        .videoCodec = OH_VideoCodecFormat::OH_H264, \n        .videoBitrate = 2000000, \n        .videoFrameRate = 30\n    };\n\n    OH_AudioInfo audioInfo = {\n        .micCapInfo = micCapInfo,\n        .innerCapInfo = innerCapInfo,\n        .audioEncInfo = audioEncInfo\n    };\n\n    OH_VideoInfo videoInfo = {\n        .videoCapInfo = videoCapInfo, \n        .videoEncInfo = videoEncInfo\n    };\n\n    config = {\n        .captureMode = OH_CAPTURE_HOME_SCREEN,\n        .dataType = OH_CAPTURE_FILE,\n        .audioInfo = audioInfo,\n        .videoInfo = videoInfo,\n    };\n\n    struct OH_AVScreenCapture *capture = OH_AVScreenCapture_Create();\n\n    // 初始化录屏参数，传入配置信息OH_AVScreenRecorderConfig\n    OH_RecorderInfo recorderInfo;\n    const std::string SCREEN_CAPTURE_ROOT = \"/data/storage/el2/base/files/\";\n    int32_t outputFd = open((SCREEN_CAPTURE_ROOT + \"screen01.mp4\").c_str(), O_RDWR | O_CREAT, 0777);\n    std::string fileUrl = \"fd://\" + std::to_string(outputFd);\n    recorderInfo.url = const_cast<char *>(fileUrl.c_str());\n    recorderInfo.fileFormat = OH_ContainerFormatType::CFT_MPEG_4;\n    config.recorderInfo = recorderInfo;\n\n    //设置状态回调\n    OH_AVScreenCapture_SetStateCallback(capture, OnStateChange, nullptr);\n\n    // 进行初始化操作\n    int32_t retInit = OH_AVScreenCapture_Init(capture, config);\n    \n    // 开始录屏\n    int32_t retStart = OH_AVScreenCapture_StartScreenRecording(capture);\n\n    // 录制10s\n    sleep(10);\n\n    // 结束录屏\n    int32_t retStop = OH_AVScreenCapture_StopScreenRecording(capture);\n\n    // 释放ScreenCapture\n    int32_t retRelease = OH_AVScreenCapture_Release(capture);\n\n    // 返回调用结果，示例仅返回随意值\n    napi_value sum;\n    napi_create_double(env, 5, &sum);\n\n    return sum;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_property_descriptor desc[] = {\n        {\"screencapture\", nullptr, Screencapture, nullptr, nullptr, nullptr, napi_default, nullptr}};\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END\n\nstatic napi_module demoModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = ((void *)0),\n    .reserved = {0},\n};\n\nextern \"C\" __attribute__((constructor)) void RegisterEntryModule(void) { napi_module_register(&demoModule); }
