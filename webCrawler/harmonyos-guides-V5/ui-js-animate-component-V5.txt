组件动画
在组件上创建和运行动画的快捷方式。具体用法请参考通用方法。
获取动画对象
通过调用animate方法获得animation对象，animation对象支持动画属性、动画方法和动画事件。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div id=\"content\" class=\"box\" onclick=\"Show\"></div>\n</div>
/* xxx.css */\n.container {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n}\n.box{\n  width: 200px;\n  height: 200px;\n  background-color: #ff0000;\n  margin-top: 30px;\n}
/* xxx.js */\nexport default {\n    data: {\n        animation: '',\n        options: {},\n        frames: {}\n    },\n    onInit() {\n        this.options = {\n            duration: 1500,\n        };\n        this.frames = [\n            {\n                width: 200, height: 200,\n            },\n            {\n                width: 300, height: 300,\n            }\n        ];\n    },\n    Show() {\n        this.animation = this.$element('content').animate(this.frames, this.options); //获取动画对象\n        this.animation.play();\n    }\n}
 使用animate方法时必须传入Keyframes和Options参数。 多次调用animate方法时，采用replace策略，即最后一次调用时传入的参数生效。 
设置动画参数
在获取动画对象后，通过设置参数Keyframes设置动画在组件上的样式。
<!-- xxx.hml -->\n<div class=\"container\">\n   <div id=\"content\" class=\"box\" onclick=\"Show\"></div>\n</div>
/* xxx.css */\n.container {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\n.box{\n  width: 200px;\n  height: 200px;\n  background-color: #ff0000;\n  margin-top: 30px;\n}
/* xxx.js */\nexport default {\n  data: {\n    animation: '',\n    keyframes:{},\n    options:{}\n  },\n  onInit() {\n    this.options = {\n      duration: 4000,\n    }\n    this.keyframes = [\n    {\n      transform: {\n        translate: '-120px -0px',   \n        scale: 1,        \n        rotate: 0\n        },   \n        transformOrigin: '100px 100px',  \n        offset: 0.0, \n        width: 200,  \n        height: 200   \n      }, \n      {\n        transform: {      \n          translate: '120px 0px',     \n          scale: 1.5,     \n          rotate: 90   \n          },\n          transformOrigin: '100px 100px',\n          offset: 1.0,\n          width: 300,\n          height: 300   \n      }    \n    ]\n  },\n  Show() {\n    this.animation = this.$element('content').animate(this.keyframes, this.options)\n    this.animation.play()\n  }\n}
 translate、scale和rtotate的先后顺序会影响动画效果。 transformOrigin只对scale和rtotate起作用。 
在获取动画对象后，通过设置参数Options来设置动画的属性。
<!-- xxx.hml -->\n<div class=\"container\">\n   <div id=\"content\" class=\"box\" onclick=\"Show\"></div>\n</div>
/* xxx.css */\n.container {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n}\n.box{\n  width: 200px;\n  height: 200px;\n  background-color: #ff0000;\n  margin-top: 30px;\n}
/* xxx.js */\nexport default {\n    data: {\n        animation: '',\n        options: {},\n        frames: {}\n    },\n    onInit() {\n        this.options = {\n            duration: 1500,\n            easing: 'ease-in',\n            delay: 5,\n            iterations: 2,\n            direction: 'normal',\n        };\n        this.frames = [\n            {\n                transform: {\n                    translate: '-150px -0px'\n                }\n            },\n            {\n                transform: {\n                    translate: '150px 0px'\n                }\n            }\n        ];\n    },\n    Show() {\n        this.animation = this.$element('content').animate(this.frames, this.options);\n        this.animation.play();\n    }\n}
direction：指定动画的播放模式。
normal： 动画正向循环播放。
reverse： 动画反向循环播放。
alternate：动画交替循环播放，奇数次正向播放，偶数次反向播放。
alternate-reverse：动画反向交替循环播放，奇数次反向播放，偶数次正向播放。
