随机生成非对称密钥对(ArkTS)
以RSA和SM2为例，随机生成非对称密钥对（KeyPair），并获得二进制数据。
非对称密钥对可用于后续加解密等操作，二进制数据可用于存储或运输。
随机生成RSA密钥对
对应的算法规格请查看非对称密钥生成和转换规格：RSA。
 调用cryptoFramework.createAsyKeyGenerator，指定字符串参数'RSA1024|PRIMES_2'，创建RSA密钥类型为RSA1024、素数个数为2的非对称密钥生成器（AsyKeyGenerator）。 调用AsyKeyGenerator.generateKeyPair，随机生成非对称密钥对象（KeyPair）。 KeyPair对象中包括公钥PubKey、私钥PriKey。 调用PubKey.getEncoded和PriKey.getEncoded，分别获取密钥对象的二进制数据。 
 以使用Promise方式随机生成RSA密钥对为例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\n\nfunction generateAsyKey() {\n  // 创建一个AsyKeyGenerator实例\n  let rsaGenerator = cryptoFramework.createAsyKeyGenerator('RSA1024|PRIMES_2');\n  // 使用密钥生成器随机生成非对称密钥对\n  let keyGenPromise = rsaGenerator.generateKeyPair();\n  keyGenPromise.then(keyPair => {\n    let pubKey = keyPair.pubKey;\n    let priKey = keyPair.priKey;\n    // 获取非对称密钥对的二进制数据\n    let pkBlob = pubKey.getEncoded();\n    let skBlob = priKey.getEncoded();\n    console.info('pk bin data' + pkBlob.data);\n    console.info('sk bin data' + skBlob.data);\n  });\n} 同步返回结果（调用方法generateKeyPairSync）： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\n\nfunction generateAsyKeySync() {\n  // 创建一个AsyKeyGenerator实例\n  let rsaGenerator = cryptoFramework.createAsyKeyGenerator('RSA1024|PRIMES_2');\n  // 使用密钥生成器随机生成非对称密钥对\n  try {\n    let keyPair = rsaGenerator.generateKeyPairSync();\n    if (keyPair != null) {\n      let pubKey = keyPair.pubKey;\n      let priKey = keyPair.priKey;\n      // 获取非对称密钥对的二进制数据\n      let pkBlob = pubKey.getEncoded();\n      let skBlob = priKey.getEncoded();\n      console.info('pk bin data' + pkBlob.data);\n      console.info('sk bin data' + skBlob.data);\n    } else {\n      console.error(\"[Sync]: get key pair result fail!\");\n    }\n  } catch (e) {\n    console.error(`get key pair failed, ${e.code}, ${e.message}`);\n  }\n} 
随机生成SM2密钥对
对应的算法规格请查看非对称密钥生成和转换规格：SM2。
 调用cryptoFramework.createAsyKeyGenerator，指定字符串参数'SM2_256'，创建密钥算法为SM2、密钥长度为256位的非对称密钥生成器（AsyKeyGenerator）。 调用AsyKeyGenerator.generateKeyPair，随机生成非对称密钥对象（KeyPair）。 KeyPair对象中包括公钥PubKey、私钥PriKey。 调用PubKey.getEncoded和PriKey.getEncoded，分别获取密钥对象的二进制数据。 
 以使用Promise方式随机生成SM2密钥对为例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\n\nfunction generateSM2Key() {\n  // 创建一个AsyKeyGenerator实例\n  let sm2Generator = cryptoFramework.createAsyKeyGenerator('SM2_256');\n  // 使用密钥生成器随机生成非对称密钥对\n  let keyGenPromise = sm2Generator.generateKeyPair();\n  keyGenPromise.then(keyPair => {\n    let pubKey = keyPair.pubKey;\n    let priKey = keyPair.priKey;\n    // 获取非对称密钥对的二进制数据\n    let pkBlob = pubKey.getEncoded();\n    let skBlob = priKey.getEncoded();\n    console.info('pk bin data' + pkBlob.data);\n    console.info('sk bin data' + skBlob.data);\n  });\n} 同步返回结果（调用方法generateKeyPairSync）： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\n\nfunction generateSM2KeySync() {\n  // 创建一个AsyKeyGenerator实例\n  let rsaGenerator = cryptoFramework.createAsyKeyGenerator('SM2_256');\n  // 使用密钥生成器随机生成非对称密钥对\n  try {\n    let keyPair = rsaGenerator.generateKeyPairSync();\n    if (keyPair != null) {\n      let pubKey = keyPair.pubKey;\n      let priKey = keyPair.priKey;\n      // 获取非对称密钥对的二进制数据\n      let pkBlob = pubKey.getEncoded();\n      let skBlob = priKey.getEncoded();\n      console.info('pk bin data' + pkBlob.data);\n      console.info('sk bin data' + skBlob.data);\n    } else {\n      console.error(\"[Sync]: get key pair result fail!\");\n    }\n  } catch (e) {\n    console.error(`get key pair failed, ${e.code}, ${e.message}`);\n  }\n} 
