SmartPerf Device性能工具使用指导
工具简介
SmartPerf Device是一款基于系统开发的性能功耗测试工具，操作简单易用。该工具可以监测性能、功耗相关指标，包括FPS、CPU、GPU、RAM、Temp等，通过量化的指标项了解应用、整机性能状况。
Device-daemon端支持shell命令行方式，同时适用于有屏和无屏设备。
[h2]指标说明
CPU：每秒读取一次设备节点下CPU大中小核的频点和各核使用率，衡量应用占用CPU资源的情况，占用过多的CPU资源会导致芯片发烫。GPU：每秒读取一次设备节点下GPU的频点和负载信息，衡量应用占用GPU资源的情况，当GPU占用过多时，会导致性能下降，应用程序的运行速度变慢。FPS：应用界面每秒刷新次数，衡量应用画面的流畅度，FPS越高通常表示图像流畅度越好，用户体验也越好。TEMP：每秒读取一次设备节点下GPU温度、系统芯片温度信息。RAM：每秒读取一次应用进程的实际物理内存，衡量应用的内存占比情况。snapshot：每2秒截取一张应用界面截图。
实现原理
下图展示了SmartPerf Device工具的主要功能组成。Device-hap端设置好采集项和采集参数后，启动应用，FPS、RAM、Trace等指标通过消息发送给Device-daemon端，Device-daemon端进行数据采集、持久化和数据分析。
约束与限制
Device-daemon端在API 9版本开始预置使用。 Device-daemon端执行需连接硬件设备。 Device-daemon端执行前需完成hdc环境配置。 
执行性能测试
[h2]采集前提
进入shell
C:\\Users\\issusser>hdc shell\n#
拉起和查看daemon进程
C:\\Users\\issusser>hdc shell\n// 拉起daemon进程\n# SP_daemon \n// 查看daemon进程是否存在\n# ps -ef | grep SP_daemon\nroot          1584     1 0 21:50:05 ?     00:00:00 SP_daemon\nroot          1595  1574 3 21:51:02 pts/0 00:00:00 grep SP_daemon\n#
执行和查看帮助命令
    # SP_daemon --help\n    HarmonyOS performance testing tool SmartPerf command-line version\n    Usage: SP_daemon <options> <arguments>\n    options:\n    -N             set the collection times(default value is 0) range[1,2147483647], for example: -N 10\n    -PKG           set package name, must add, for example: -PKG ohos.samples.ecg\n    -c             get device CPU frequency and CPU usage, process CPU usage and CPU load ..\n    -g             get device GPU frequency and GPU load \n    -f             get app refresh fps(frames per second) and fps jitters and refreshrate\n    -profilerfps   get refresh fps and timestamp\n    -sections      set collection time period(using with profilerfps)\n    -t             get remaining battery power and temperature..\n    -p             get battery power consumption and voltage\n    -r             get process memory and total memory\n    -snapshot      get screen capture\n    -net           get uplink and downlink traffic\n    -start         collection start command\n    -stop          collection stop command\n    -VIEW          set layler, for example: -VIEW DisplayNode\n    -screen        get screen resolution\n    -OUT           set csv output path\n    -d             get device DDR information\n    -nav           get page navigation info\n    example:\n    SP_daemon -N 20 -c -g -t -p -r -net -snapshot -d\n    SP_daemon -N 20 -PKG ohos.samples.ecg -c -g -t -p -f -r -net -snapshot -d -nav\n    SP_daemon -start -c\n    SP_daemon -stop\n    SP_daemon -screen\n  \n    command exec finished!\n    #
[h2]基础采集
通过-N开启采集
采集cpu的频点和使用率。
设置应用包名时，采集整机和应用CPU信息 
不设置应用包名时，采集整机CPU信息
采集内存。
设置应用包名时，采集整机和应用内存信息 
不设置应用包名时，采集整机内存信息
使用示例
采集2次整机CPU大中小核频率、各核使用率   # SP_daemon -N 2 -c\n\n  order:0 timestamp=1503078645909\n  order:1 cpu0Frequency=1992000\n  order:2 cpu0Usage=34.042553\n  order:3 cpu0idleUsage=65.957447\n  order:4 cpu0ioWaitUsage=0.000000\n  order:5 cpu0irqUsage=0.000000\n  order:6 cpu0niceUsage=0.000000\n  order:7 cpu0softIrqUsage=0.000000\n  order:8 cpu0systemUsage=15.957447\n  order:9 cpu0userUsage=18.085106\n  order:10 cpu1Frequency=1992000\n  order:11 cpu1Usage=43.877551\n  order:12 cpu1idleUsage=56.122449\n  order:13 cpu1ioWaitUsage=0.000000\n  order:14 cpu1irqUsage=0.000000\n  order:15 cpu1niceUsage=0.000000\n  order:16 cpu1softIrqUsage=0.000000\n  order:17 cpu1systemUsage=17.346939\n  order:18 cpu1userUsage=26.530612\n  order:19 cpu2Frequency=1992000\n  order:20 cpu2Usage=38.043478\n  order:21 cpu2idleUsage=61.956522\n  order:22 cpu2ioWaitUsage=0.000000\n  order:23 cpu2irqUsage=0.000000\n  order:24 cpu2niceUsage=0.000000\n  order:25 cpu2softIrqUsage=0.000000\n  order:26 cpu2systemUsage=11.956522\n  order:27 cpu2userUsage=26.086957\n  order:28 cpu3Frequency=1992000\n  order:29 cpu3Usage=68.421053\n  order:30 cpu3idleUsage=31.578947\n  order:31 cpu3ioWaitUsage=0.000000\n  order:32 cpu3irqUsage=0.000000\n  order:33 cpu3niceUsage=0.000000\n  order:34 cpu3softIrqUsage=0.000000\n  order:35 cpu3systemUsage=13.684211\n  order:36 cpu3userUsage=54.736842\n\n  ...\n\n  command exec finished!\n  # 采集2次整机CPU大中小核频率、各核使用率以及进程CPU使用率、负载   # SP_daemon -N 2 -PKG com.ohos.settings -c\n\n\n\n  order:0 timestamp=1503078694916\n  order:1 ProcAppName=com.ohos.settings\n  order:2 ProcCpuLoad=0\n  order:3 ProcCpuUsage=0\n  order:4 ProcId=0\n  order:5 ProcSCpuUsage=0\n  order:6 ProcUCpuUsage=0\n  order:7 cpu0Frequency=1992000\n  order:8 cpu0Usage=31.868132\n  order:9 cpu0idleUsage=68.131868\n  order:10 cpu0ioWaitUsage=0.000000\n  order:11 cpu0irqUsage=0.000000\n  order:12 cpu0niceUsage=0.000000\n  order:13 cpu0softIrqUsage=0.000000\n  order:14 cpu0systemUsage=15.384615\n  order:15 cpu0userUsage=16.483516\n  order:16 cpu1Frequency=1992000\n  order:17 cpu1Usage=44.791667\n  order:18 cpu1idleUsage=55.208333\n  order:19 cpu1ioWaitUsage=0.000000\n  order:20 cpu1irqUsage=0.000000\n  order:21 cpu1niceUsage=0.000000\n  order:22 cpu1softIrqUsage=0.000000\n  order:23 cpu1systemUsage=13.541667\n  order:24 cpu1userUsage=31.250000\n  order:25 cpu2Frequency=1992000\n  order:26 cpu2Usage=37.894737\n  order:27 cpu2idleUsage=62.105263\n  order:28 cpu2ioWaitUsage=0.000000\n  order:29 cpu2irqUsage=0.000000\n  order:30 cpu2niceUsage=0.000000\n  order:31 cpu2softIrqUsage=1.052632\n  order:32 cpu2systemUsage=13.684211\n  order:33 cpu2userUsage=23.157895\n  order:34 cpu3Frequency=1992000\n  order:35 cpu3Usage=81.632653\n  order:36 cpu3idleUsage=18.367347\n  order:37 cpu3ioWaitUsage=0.000000\n  order:38 cpu3irqUsage=0.000000\n  order:39 cpu3niceUsage=0.000000\n  order:40 cpu3softIrqUsage=0.000000\n  order:41 cpu3systemUsage=15.306122\n  order:42 cpu3userUsage=66.326531\n\n  ...\n\n  command exec finished!\n  #   使用该命令采集时需进入被测应用内。  采集1次整机GPU频率和负载   # SP_daemon -N 1 -g\n  \n  \n  \n  order:0 timestamp=1503078740268\n  order:1 gpuFrequency=200000000\n  order:2 gpuLoad=38.000000\n  \n  command exec finished!\n  # 采集2次整机温度   # SP_daemon -N 2 -t\n\n  order:0 timestamp=1502720711191\n  order:1 gpu-thermal=42500.000000\n  order:2 soc-thermal=43.125000\n  \n  \n  order:0 timestamp=1502720712191\n  order:1 gpu-thermal=41875.000000\n  order:2 soc-thermal=42.500000\n\n  command exec finished!\n  # 采集2次整机内存   # SP_daemon -N 2 -r\n  order:0 timestamp=1705041562521\n  order:1 memAvailable=7339224\n  order:2 memFree=7164708\n  order:3 memTotal=11641840\n\n  order:0 timestamp=1705041563527\n  order:1 memAvailable=7339136\n  order:2 memFree=7164684\n  order:3 memTotal=11641840\n\n  command exec finished!\n  # 采集1次整机和指定应用进程内存   # SP_daemon -N 1 -PKG ohos.samples.ecg -r\n\n  order:0 timestamp=1720427095197\n  order:1 arktsHeapPss=17555\n  order:2 gpuPss=7021\n  order:3 graphicPss=163320\n  order:4 heapAlloc=120344\n  order:5 heapFree=14362\n  order:6 heapSize=133436\n  order:7 memAvailable=2757504\n  order:8 memFree=190852\n  order:9 memTotal=11742716\n  order:10 nativeHeapPss=49102\n  order:11 privateClean=1100020\n  order:12 privateDirty=175169\n  order:13 pss=422172\n  order:14 sharedClean=89348\n  order:15 sharedDirty=19084\n  order:16 stackPss=1588\n  order:17 swap=122076\n  order:18 swapPss=122076\n\n\n  command exec finished!\n  #   使用该命令采集时需进入被测应用内。该命令集成了历史版本-m的数据（arktsHeapPss、gpuPss、graphicPss...）。  采集2次截图   # SP_daemon -N 2 -snapshot\n\n  order:0 timestamp=1705041753321\n  order:1 capture=data/local/tmp/capture/screenCap_1705041753321.png\n\n  /data/local/tmp/capture created!\n\n  order:0 timestamp=1705041754324\n  order:1 capture=NA\n\n  command exec finished!\n  #   截图采集是2秒截取一次。 截图报告存放路径为：data/local/tmp/capture。 采集结束后：进入 data/local/tmp/capture 查看生成的截图。 导出截图到D盘：重启一个命令行工具执行命令： hdc file recv data/local/tmp/capture/screenCap_1700725192774.png D:\\。   采集2次网络速率   # SP_daemon -N 2 -net\n\n  order:0 timestamp=1705041904832\n  order:1 networkDown=0\n  order:2 networkUp=0\n\n  order:0 timestamp=1705041905870\n  order:1 networkDown=22931\n  order:2 networkUp=2004\n\n  command exec finished!\n  # 采集5次指定应用帧率   # SP_daemon -N 5 -PKG ohos.samples.ecg -f\n\n  order:0 timestamp=1705306472232\n  order:1 fps=43\n  order:2 fpsJitters=602261688;;8352083;;8267708;;8305209;;8298437;;8308854;;8313542;;8569271;;8061458;;8300521;;8308333;;8309896;;8429167;;8241667;;8258333;;8318229;;8312500;;8304167;;41760937;;16418750;;8298959;;8319270;;8308334;;8313541;;8302605;;8320312;;8298958;;8326042;;8321354;;8301042;;8310417;;8309895;;8308855;;8331250;;8286458;;8343229;;8278125;;8311458;;8306250;;8312500;;8320834;;8346875;;8283333\n  order:3 refreshrate=120\n\n  order:0 timestamp=1705306473234\n  order:1 fps=40\n  order:2 fpsJitters=674427313;;8191145;;8310417;;8319271;;8301562;;8318750;;8302084;;8314062;;8333334;;8283854;;8307812;;8311979;;8310417;;8307813;;8309375;;8323958;;8306250;;8308333;;8317709;;8296875;;8721875;;7895833;;8320833;;8340625;;8276563;;8409896;;8216145;;8310938;;8301042;;8362500;;8252604;;8317708;;8376042;;8256250;;8292187;;8303125;;8313542;;8310417;;8520312\n  order:3 refreshrate=120\n  ...\n\n  command exec finished!\n  #   使用该命令采集时需进入被测应用内，滑动或切换页面。在智能刷新率情况下，刷新率是实时变化的（一秒内可能存在多次变化），refreshrate取值是采集时刻（timestamp）的刷新率。  采集10次指定图层帧率   # SP_daemon -N 10 -VIEW DisplayNode -f\n  order:0 timestamp=1705306822850\n  order:1 fps=15\n  order:2 fpsJitters=876291843;;8314062;;8308334;;8314583;;8310417;;8308333;;8326042;;8314583;;8292708;;8492709;;8143750;;8340104;;8294271;;8302604;;8297396\n  order:3 refreshrate=120\n\n  order:0 timestamp=1705306823852\n  order:1 fps=12\n  order:2 fpsJitters=906667363;;8279167;;8311458;;8315625;;8291146;;8313021;;8323438;;8293750;;8303125;;8313541;;8301563;;8317708\n  order:3 refreshrate=120\n  ...\n\n  command exec finished!\n  #   DisplayNode 是指定的图层名。 使用该命令采集时，需在传入的图层上操作页面。 该命令不能与指定应用帧率一起采集（SP_daemon -N 20 -PKG ohos.samples.ecg -f 或 SP_daemon -N 20 -VIEW DisplayNode -f）。   采集1次DDR信息   # SP_daemon -N 1 -d\n  \n  order:0 timestamp=1710916175201\n  order:1 ddrFrequency=1531000000\n  \n  command exec finished!\n  # 采集1次页面navigation信息   # SP_daemon -N 1 -PKG ohos.samples.ecg -nav\n\n  order:0 timestamp=1719993861090\n  order:1 navPathName=about_device\n\n  command exec finished!\n  #   使用该命令采集时需进入被测应用内。 navPathName值是页面跳转时页面的name值，具体请参考页面跳转普通跳转中this.pageStack.pushPath示例，若未用Navigation方式实现页面跳转，返回No Navigation Info.   全量采集示例1，采集整机信息，包括cpu、gpu、温度、内存信息、DDR信息、网络速率、屏幕截图   # SP_daemon -N 10 -c -g -t -r -d -net -snapshot\n\n  order:0 timestamp=1502725274844\n  order:1 cpu0Frequency=1992000\n  order:2 cpu0Usage=37.634409\n  order:3 cpu0idleUsage=62.365591\n  order:4 cpu0ioWaitUsage=0.000000\n  order:5 cpu0irqUsage=0.000000\n  order:7 cpu0softIrqUsage=1.075269\n  order:8 cpu0systemUsage=17.204301\n  order:9 cpu0userUsage=19.354839\n  order:10 cpu1Frequency=1992000\n  order:11 cpu1Usage=87.878788\n  order:12 cpu1idleUsage=12.121212\n  order:13 cpu1ioWaitUsage=0.000000\n  order:14 cpu1irqUsage=0.000000\n  order:15 cpu1niceUsage=0.000000\n  order:16 cpu1softIrqUsage=0.000000\n  order:17 cpu1systemUsage=15.151515\n  order:18 cpu1userUsage=72.727273\n  order:19 cpu2Frequency=1992000\n  order:20 cpu2Usage=45.544554\n  order:21 cpu2idleUsage=54.455446\n  order:22 cpu2ioWaitUsage=0.000000\n  order:23 cpu2irqUsage=0.000000\n  order:24 cpu2niceUsage=0.000000\n  order:25 cpu2softIrqUsage=0.990099\n  order:26 cpu2systemUsage=14.851485\n  order:27 cpu2userUsage=29.702970\n  order:28 cpu3Frequency=1992000\n  order:29 cpu3Usage=39.175258\n  order:30 cpu3idleUsage=60.824742\n  order:31 cpu3ioWaitUsage=0.000000\n  order:32 cpu3irqUsage=0.000000\n  order:33 cpu3niceUsage=0.000000\n  order:34 cpu3softIrqUsage=1.030928\n  order:35 cpu3systemUsage=14.432990\n  order:36 cpu3userUsage=23.711340\n  order:37 gpuFrequency=300000000\n  order:38 gpuLoad=25.000000\n  order:39 gpu-thermal=43750.000000\n  order:40 soc-thermal=45.555000\n  order:41 memAvailable=1118792\n  order:42 memFree=688032\n  order:43 memTotal=1990104\n  order:44 ddrFrequency=0\n  order:45 networkDown=0\n  order:46 networkUp=0\n  order:47 capture=data/local/tmp/capture/screenCap_1502725274893.png\n\n  ...\n\n  command exec finished!\n  # 全量采集示例2，采集指定应用信息，包括cpu、gpu、温度、fps、内存信息、DDR信息、网络速率、屏幕截图 
    # SP_daemon -N 10 -PKG ohos.samples.ecg -c -g -t -p -f -r -d -net -snapshot -nav\n\n    order:0 timestamp=1705307489445\n    order:1 ProcAppName=ohos.samples.ecg\n    order:2 ProcCpuLoad=0.000001\n    order:3 ProcCpuUsage=0.000000\n    order:4 ProcId=13131\n    order:5 ProcSCpuUsage=0.000000\n    order:6 ProcUCpuUsage=0.000000\n    order:7 cpu0Frequency=418000\n    order:8 cpu0Usage=27.884615\n    order:9 cpu0idleUsage=72.115385\n    order:10 cpu0ioWaitUsage=0.000000\n    order:11 cpu0irqUsage=0.961538\n    order:12 cpu0niceUsage=0.000000\n    order:13 cpu0softIrqUsage=0.000000\n    order:14 cpu0systemUsage=12.500000\n    order:15 cpu0userUsage=14.423077\n    ...\n    order:115 gpuFrequency=279000000\n    order:116 gpuload=61.000000\n    order:117 Battery=28.000000\n    order:118 shell_back=31.529000\n    order:119 shell_frame=30.529000\n    order:120 shell_front=30.548000\n    order:121 soc_thermal=49.624000\n    order:122 system_h=30.150000\n    order:123 currentNow=278\n    order:124 voltageNow=4250532\n    order:125 fps=3\n    order:126 fpsJitters=881659966;;108846354;;8289583\n    order:127 refreshrate=120\n    order:128 arktsHeapPss=16464\n    order:129 gpuPss=7021\n    order:130 graphicPss=163320\n    order:131 heapAlloc=118870\n    order:132 heapFree=14075\n    order:133 heapSize=131948\n    order:134 memAvailable=2776508\n    order:135 memFree=258668\n    order:136 memTotal=11742716\n    order:137 nativeHeapPss=45361\n    order:138 privateClean=104828\n    order:139 privateDirty=175189\n    order:140 pss=419476\n    order:141 sharedClean=87744\n    order:142 sharedDirty=19084\n    order:143 stackPss=1592\n    order:144 swap=125408\n    order:145 swapPss=125408\n    order:146 ddrFrequency=749000000\n    order:147 networkDown=7893\n    order:148 networkUp=1546\n    order:149 capture=data/local/tmp/capture/screenCap_1711190737580.png\n    order:150 navPathName=about_device\n\n    ...\n\n    command exec finished!\n    #
使用该命令采集时需进入被测应用内。
通过-start开启采集
先执行start开始采集命令，然后操作设备或应用，最后执行stop结束采集命令。
使用示例
开始采集\n# SP_daemon -start -c\nSP_daemon Collection begins\ncommand exec finished!\n#\n   \n结束采集\n# SP_daemon -stop\nSP_daemon Collection ended\nOutput Path: data/local/tmp/smartperf/1/t_index_info_csv\ncommand exec finished!\n#
开始采集示例1（采整机）：SP_daemon -start -c -g -t -r -d -net -snapshot。 开始采集示例2（采整机和进程）：SP_daemon -start -PKG ohos.samples.ecg -c -g -t -f -r -d -net -snapshot。 启停服务文件输出路径为：data/local/tmp/smartperf/1/t_index_info.csv，可通过hdc file recv的方式导出查看报告。具体请参考查看csv采集结果。 
查看csv采集结果
若采集结果保存在csv文件中，可以按照如下操作导出和查看结果内容。
采集结果默认输出路径：/data/local/tmp/data.csv 查看文件位置 C:\\Users\\issusser>hdc shell\n# cd data/local/tmp\n# ls\ndata.csv\n# 导出文件 C:\\Users\\issusser>hdc file recv data/local/tmp/data.csv D:\\\n[I][2023-11-08 16:16:41] HdcFile::TransferSummary success\nFileTransfer finish, Size:429, File count = 1, time:6ms rate:71.50kB/s\n\nC:\\Users\\issusser> 打开data.csv查看采集数据 在自定义导出路径里找到data.csv文件打开查看采集数据表，data.csv数据名描述如下： 数据项 说明 备注   cpuFrequency CPU大中小核频率 单位：Hz  cpuUasge CPU各核使用率 %  cpuidleUsage CPU空闲态使用率 %  cpuioWaitUsage 等待I/O的使用率 %  cpuirqUsage 硬中断的使用率 %  cpuniceUsage 低优先级用户态使用率 %  cpusoftIrqUsage 软中断的使用率 %  cpusystemUsage 系统/内核态使用率 %  cpuuserUsage 用户态使用率 %  ProcId 进程id -  ProcAppName app包名 -  ProcCpuLoad 进程CPU负载占比 %  ProcCpuUsage 进程CPU使用率 %  ProcUCpuUsage 进程用户态CPU使用率 %  ProcSCpuUsage 进程内核态CPU使用率 %  gpuFrequ 整机GPU的频率 %  gpuLoad 整机GPU的负载占比 %  currentNow 当前读到的电流值 单位：mA  voltageNow 当前读到的电压值 单位：μV  fps 每秒帧数 单位：fps  fpsJitters 每一帧绘制间隔 单位：ns  refreshrate 屏幕刷新率 单位：Hz  networkDown 下行速率 单位：byte/s  networkUp 上行速率 单位：byte/s  ddrFrequency DDR频率 单位：Hz  gpu-thermal GPU温度 单位：°C  soc-thermal 系统芯片温度 单位：°C  memAvailable 整机可用内存 单位：KB  memFree 整机空闲内存 单位：KB  memTotal 整机总内存 单位：KB  pss 进程实际使用内存 单位：KB  sharedClean 共享的未改写页面 单位：KB  sharedDirty 共享的已改写页面 单位：KB  priviateClean 私有的未改写页面 单位：KB  privateDirty 私有的已改写页面 单位：KB  swapTotal 总的交换内存 单位：KB  swapPss 交换的pss内存 单位：KB  HeapSize 堆内存大小 单位：KB  HeapAlloc 可分配的堆内存大小 单位：KB  HeapFree 剩余的堆内存大小 单位：KB  gpuPss 使用的gpu内存大小 单位：KB  graphicPss 使用的图形内存大小 单位：KB  arktsHeapPss 使用的arkts内存大小 单位：KB  nativeHeapPss 使用的native内存大小 单位：KB  stackPss 使用的栈内存大小 单位：KB  timeStamp 当前时间戳 对应采集时间    
| navPathName | 页面导航信息 |- |
[h2]场景化采集
场景化采集是对应用页面滑动、切换场景下的性能测试，针对不同操作场景执行相对应的采集命令，获取应用性能数据，包括页面的滑动帧率，页面切换或滑动的卡顿率、响应时延、完成时延以及最大连续丢帧，对采集数据进行输出打印，以便用户分析并优化应用性能。场景化采集结果不写入data.csv，采集结果直接在命令框显示。
采集输出各参数含义说明：
ResponseTime：页面切换、页面滑动的响应时延，单位：ms。ResponseTime：页面切换的完成时延，单位：ms。HitchTimeRate：页面切换、页面滑动的卡顿率，单位：ms/s。MAX_RENDER_SEQ_MISSED_FRAMES：页面切换、页面滑动的最大连续丢帧。FPS：页面滑动帧率，单位：fps。
使用示例
页面切换
打开被测应用，进入需要测试的页面。在cmd命令行中输入命令并回车：SP_daemon -editor timeDelay。等待1-2秒钟，然后手动点击页面内的按钮，跳转到下一个页面，等待测试完成。测试完成后，打印结果示例如下： # SP_daemon -editor timeDelay\n ResponseTime:41ms\n CompleteTime:593ms\n HitchTimeRate:68.65ms/s\n MAX_RENDER_SEQ_MISSED_FRAMES:3\n # 
时延计算受系统打点上报限制，开始时间为点击事件上报时间点，响应时延结束时间点为点击后系统响应首帧的上屏时间点，完成时延是切换后页面的首帧上屏时间点，与端到端用户感知时延存在差异。
页面切换卡顿率：目前只支持ArKUI子系统的router、navigation、tabs、swiper控件内的页面切换/内容切换。计算公式：页面滑动卡顿率=页面切换动效时间内每一帧的累计丢帧时间（ms）/ 动效时长（s）。
最大连续丢帧受系统打点上报限制，与端到端用户感知时延存在差异。
页面切换同时会抓取trace，文件路径：data/local/tmp/sp_trace_delay.ftrace，通过hdc file recv的方式导出查看trace。
页面滑动
打开被测应用，进入需要测试的页面。在cmd命令行中输入命令并回车：SP_daemon -editor slideList。等待1-2秒钟，然后手动点击页面内的按钮，跳转到下一个页面，等待测试完成。测试完成后，打印结果示例如下： # SP_daemon -editor slideList\n FPS:107.181fps\n ResponseTime:20ms\n HitchTimeRate:1.49ms/s\n MAX_RENDER_SEQ_MISSED_FRAMES:0\n # 
时延计算受系统打点上报限制，开始时间为点击事件上报时间点，响应时延结束时间点为滑动后系统响应首帧的上屏时间点，与端到端用户感知时延存在差异。 
页面滑动帧率：指的是在页面滑动时，屏幕能够刷新的频率。需要注意的是，该场景目前只支持滑动一次页面。
页面滑动卡顿率：目前只支持Web、ArKUI子系统的List、grid、scroll、waterflow滚动组件。计算公式：页面滑动卡顿率=页面滑动动效时间内每一帧的累计丢帧时间（ms）/ 动效时长（s）。
最大连续丢帧受系统打点上报限制，与端到端用户感知时延存在差异。
页面滑动同时会抓取trace，文件路径：data/local/tmp/sp_trace_fps.ftrace，通过hdc file recv的方式导出查看trace。
[h2]其他采集
当前设备电量采集结果可写入csv文件，其它命令需单独采集，采集结果不写入data.csv，仅在命令框显示。
使用示例
获取屏幕分辨率  # SP_daemon -screen\n activeMode: 1260x2720, refreshrate=120\n command exec finished!\n #   activeMode表示当前屏幕分辨率，refreshrate表示屏幕刷新率。  获取设备信息  # SP_daemon -deviceinfo\n abilist: default\n activeMode: 720x1280\n board: hw\n brand: default\n cpu_c1_cluster: 0 1 2 3\n cpu_c1_max: 1992000\n cpu_c1_min: 408000\n cpu_cluster_name: policy0\n deviceTypeName: rk3568\n fullname: HarmonyOS-5.0.2.43\n gpu_max_freq: 800000000\n gpu_min_freq: 200000000\n model: ohos\n name: HarmonyOS 3.2\n sn: 7001005458323933328a26dbb7bd3900\n version: HarmonyOS 5.0.2.43\n\n command exec finished!\n # 启动一个进程来监听start和stop命令的socket消息。  # SP_daemon -server\n #\n # pidof SP_daemon\n 7024\n #\n\n command exec finished!\n #   可执行pidof SP_daemon查看进程id。  清除SP_daemon进程ID  # pidof SP_daemon\n 9923 11402   \n # SP_daemon -clear\n #\n # pidof SP_daemon\n #\n\n command exec finished!\n #   可执行pidof SP_daemon查看进程id。  validator用于获取当前页面帧率  # SP_daemon -ohtestfps 10\n set num:10 success\n fps:1|1501926684532\n fps:18|1501926685532\n fps:37|1501926686532\n fps:41|1501926687532\n fps:42|1501926688532\n fps:16|1501926689532\n fps:40|1501926690532\n fps:40|1501926691532\n fps:42|1501926692532\n fps:41|1501926693532\n SP_daemon exec finished!\n #\n\n command exec finished!\n #   该条命令里的10表示采集的次数（一秒采集一次），可以设置为其他正整数。  启动一个进程来监听editor工具的socket消息  # SP_daemon -editorServer\n Socket Process called!\n Socket TCP Init called!\n Socket Process called!\n Socket Process called!\n — 获取电池电量  # SP_daemon -recordcapacity\n recordTime: 1726903063\n recordPower: 5502   recordTime表示时间戳，recordPower表示当前时刻的电量。 该命令需单独采集，采集结果写入/data/local/tmp/powerLeftRecord.csv，可以使用hdc file recv导出到本地。具体请参考查看csv采集结果。   采集当前界面fps   # SP_daemon -profilerfps 10\n  set num:10 success\n  fps:0|1711692357278\n  fps:0|1711692358278\n  fps:1|1711692359278\n  fps:0|1711692360278\n  fps:0|1711692361278\n  fps:0|1711692362278\n  fps:0|1711692363278\n  fps:0|1711692364278\n  fps:26|1711692365278\n  fps:53|1711692366278\n  SP_daemon exec finished!\n  #   该条命令里的100表示采集的次数（一秒采集一次），可以设置为其他正整数。  fps分段采集   # SP_daemon -profilerfps 100 -sections 10\n  set num:100 success\n  fps:0|1711692393278\n  fps:0|1711692394278\n  fps:0|1711692395278\n  fps:44|1711692396278\n  sectionsFps:0|1711692396278\n  sectionsFps:0|1711692396378\n  sectionsFps:40|1711692396478\n  sectionsFps:60|1711692396578\n  sectionsFps:60|1711692396678\n  sectionsFps:60|1711692396778\n  sectionsFps:60|1711692396878\n  sectionsFps:40|1711692396978\n  sectionsFps:60|1711692397078\n  sectionsFps:60|1711692397178\n  fps:51|1711692397278\n\n  ...\n\n  SP_daemon exec finished!\n  #   该条命令里的100表示采集的次数（一秒采集一次），可以设置为其他正整数，10表示分段：目前支持设置 1-10（正整数）段采集。  
