录像实现方案(C/C++)
在开发相机应用时，需要先参考开发准备申请相关权限。
当前示例提供完整的录像流程及其接口调用顺序的介绍。对于单个流程（如设备输入、会话管理、录像）的介绍请参考相机开发指导(Native)的具体章节。
开发流程
在获取到相机支持的输出流能力后，开始创建录像流，开发流程如下。
完整示例
在CMake脚本中链接相关动态库。     target_link_libraries(entry PUBLIC libohcamera.so libhilog_ndk.z.so) 创建头文件ndk_camera.h。 #include \"ohcamera/camera.h\"\n#include \"ohcamera/camera_input.h\"\n#include \"ohcamera/capture_session.h\"\n#include \"ohcamera/photo_output.h\"\n#include \"ohcamera/preview_output.h\"\n#include \"ohcamera/video_output.h\"\n#include \"ohcamera/camera_manager.h\"\n\nclass NDKCamera {\npublic:\n    ~NDKCamera();\n    NDKCamera(char *previewId, char *videoId);\n}; cpp侧导入NDK接口，并根据传入的SurfaceId进行录像。 #include \"hilog/log.h\"\n#include \"ndk_camera.h\"\n\nvoid OnCameraInputError(const Camera_Input* cameraInput, Camera_ErrorCode errorCode)\n{\n    OH_LOG_INFO(LOG_APP, \"OnCameraInput errorCode = %{public}d\", errorCode);\n}\n\nCameraInput_Callbacks* GetCameraInputListener(void)\n{\n    static CameraInput_Callbacks cameraInputCallbacks = {\n        .onError = OnCameraInputError\n    };\n    return &cameraInputCallbacks;\n}\n\nvoid CaptureSessionOnFocusStateChange(Camera_CaptureSession* session, Camera_FocusState focusState)\n{\n    OH_LOG_INFO(LOG_APP, \"CaptureSessionOnFocusStateChange\");\n}\n\nvoid CaptureSessionOnError(Camera_CaptureSession* session, Camera_ErrorCode errorCode)\n{\n    OH_LOG_INFO(LOG_APP, \"CaptureSessionOnError = %{public}d\", errorCode);\n}\n\nCaptureSession_Callbacks* GetCaptureSessionRegister(void)\n{\n    static CaptureSession_Callbacks captureSessionCallbacks = {\n        .onFocusStateChange = CaptureSessionOnFocusStateChange,\n        .onError = CaptureSessionOnError\n    };\n    return &captureSessionCallbacks;\n}\n\nvoid VideoOutputOnFrameStart(Camera_VideoOutput* videoOutput)\n{\n    OH_LOG_INFO(LOG_APP, \"VideoOutputOnFrameStart\");\n}\n\nvoid VideoOutputOnFrameEnd(Camera_VideoOutput* videoOutput, int32_t frameCount)\n{\n    OH_LOG_INFO(LOG_APP, \"VideoOutput frameCount = %{public}d\", frameCount);\n}\n\nvoid VideoOutputOnError(Camera_VideoOutput* videoOutput, Camera_ErrorCode errorCode)\n{\n    OH_LOG_INFO(LOG_APP, \"VideoOutput errorCode = %{public}d\", errorCode);\n}\n\nVideoOutput_Callbacks* GetVideoOutputListener(void)\n{\n    static VideoOutput_Callbacks videoOutputListener = {\n        .onFrameStart = VideoOutputOnFrameStart,\n        .onFrameEnd = VideoOutputOnFrameEnd,\n        .onError = VideoOutputOnError\n    };\n    return &videoOutputListener;\n}\n\nvoid CameraManagerStatusCallback(Camera_Manager* cameraManager, Camera_StatusInfo* status)\n{\n    OH_LOG_INFO(LOG_APP, \"CameraManagerStatusCallback is called\");\n}\n\nCameraManager_Callbacks* GetCameraManagerListener()\n{\n    static CameraManager_Callbacks cameraManagerListener = {\n        .onCameraStatus = CameraManagerStatusCallback\n    };\n    return &cameraManagerListener;\n}\n\nNDKCamera::NDKCamera(char *previewId, char *videoId)\n{\n    Camera_Manager* cameraManager = nullptr;\n    Camera_Device* cameras = nullptr;\n    Camera_CaptureSession* captureSession = nullptr;\n    Camera_OutputCapability* cameraOutputCapability = nullptr;\n    Camera_VideoOutput* videoOutput = nullptr;\n    const Camera_Profile* previewProfile = nullptr;\n    const Camera_Profile* photoProfile = nullptr;\n    const Camera_VideoProfile* videoProfile = nullptr;\n    Camera_PreviewOutput* previewOutput = nullptr;\n    Camera_PhotoOutput* photoOutput = nullptr;\n    Camera_Input* cameraInput = nullptr;\n    uint32_t size = 0;\n    uint32_t cameraDeviceIndex = 0;\n    char* videoSurfaceId = videoId;\n    char* previewSurfaceId = previewId;\n    // 创建CameraManager对象\n    Camera_ErrorCode ret = OH_Camera_GetCameraManager(&cameraManager);\n    if (cameraManager == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_Camera_GetCameraMananger failed.\");\n    }\n    // 监听相机状态变化\n    ret = OH_CameraManager_RegisterCallback(cameraManager, GetCameraManagerListener());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_RegisterCallback failed.\");\n    }\n\n    // 获取相机列表\n    ret = OH_CameraManager_GetSupportedCameras(cameraManager, &cameras, &size);\n    if (cameras == nullptr || size < 0 || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameras failed.\");\n    }\n\n    for (int index = 0; index < size; index++) {\n        OH_LOG_ERROR(LOG_APP, \"cameraId  =  %{public}s \", cameras[index].cameraId);              // 获取相机ID\n        OH_LOG_ERROR(LOG_APP, \"cameraPosition  =  %{public}d \", cameras[index].cameraPosition);  // 获取相机位置\n        OH_LOG_ERROR(LOG_APP, \"cameraType  =  %{public}d \", cameras[index].cameraType);          // 获取相机类型\n        OH_LOG_ERROR(LOG_APP, \"connectionType  =  %{public}d \", cameras[index].connectionType);  // 获取相机连接类型\n    }\n\n    // 获取相机设备支持的输出流能力\n    ret = OH_CameraManager_GetSupportedCameraOutputCapability(cameraManager, &cameras[cameraDeviceIndex],\n                                                            &cameraOutputCapability);\n    if (cameraOutputCapability == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameraOutputCapability failed.\");\n    }\n\n    if (cameraOutputCapability->previewProfilesSize < 0) {\n        OH_LOG_ERROR(LOG_APP, \"previewProfilesSize == null\");\n    }\n    previewProfile = cameraOutputCapability->previewProfiles[0];\n\n    if (cameraOutputCapability->photoProfilesSize < 0) {\n        OH_LOG_ERROR(LOG_APP, \"photoProfilesSize == null\");\n    }\n    photoProfile = cameraOutputCapability->photoProfiles[0];\n\n    if (cameraOutputCapability->videoProfilesSize < 0) {\n        OH_LOG_ERROR(LOG_APP, \"videorofilesSize == null\");\n    }\n    videoProfile = cameraOutputCapability->videoProfiles[0];\n\n    // 创建VideoOutput对象\n    ret = OH_CameraManager_CreateVideoOutput(cameraManager, videoProfile, videoSurfaceId, &videoOutput);\n    if (videoProfile == nullptr || videoOutput == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreateVideoOutput failed.\");\n    }\n\n    // 监听视频输出错误信息\n    ret = OH_VideoOutput_RegisterCallback(videoOutput, GetVideoOutputListener());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_VideoOutput_RegisterCallback failed.\");\n    }\n\n    //创建会话\n    ret = OH_CameraManager_CreateCaptureSession(cameraManager, &captureSession);\n    if (captureSession == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreateCaptureSession failed.\");\n    }\n    // 监听session错误信息\n    ret = OH_CaptureSession_RegisterCallback(captureSession, GetCaptureSessionRegister());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_RegisterCallback failed.\");\n    }\n\n    // 开始配置会话\n    ret = OH_CaptureSession_BeginConfig(captureSession);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_BeginConfig failed.\");\n    }\n\n    // 创建相机输入流\n    ret = OH_CameraManager_CreateCameraInput(cameraManager, &cameras[cameraDeviceIndex], &cameraInput);\n    if (cameraInput == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreateCameraInput failed.\");\n    }\n\n    // 监听cameraInput错误信息\n    ret = OH_CameraInput_RegisterCallback(cameraInput, GetCameraInputListener());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_RegisterCallback failed.\");\n    }\n\n    // 打开相机\n    ret = OH_CameraInput_Open(cameraInput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_Open failed.\");\n    }\n\n    // 向会话中添加相机输入流\n    ret = OH_CaptureSession_AddInput(captureSession, cameraInput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_AddInput failed.\");\n    }\n\n    // 创建预览输出流,其中参数 surfaceId 参考下面 XComponent 组件，预览流为XComponent组件提供的surface\n    ret = OH_CameraManager_CreatePreviewOutput(cameraManager, previewProfile, previewSurfaceId, &previewOutput);\n    if (previewProfile == nullptr || previewOutput == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreatePreviewOutput failed.\");\n    }\n\n    // 向会话中添加预览输出流\n    ret = OH_CaptureSession_AddPreviewOutput(captureSession, previewOutput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_AddPreviewOutput failed.\");\n    }\n\n    // 向会话中添加录像输出流\n    ret = OH_CaptureSession_AddVideoOutput(captureSession, videoOutput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_AddVideoOutput failed.\");\n    }\n\n    // 提交会话配置\n    ret = OH_CaptureSession_CommitConfig(captureSession);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_CommitConfig failed.\");\n    }\n\n    // 启动会话\n    ret = OH_CaptureSession_Start(captureSession);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Start failed.\");\n    }\n\n    // 启动录像输出流\n    ret = OH_VideoOutput_Start(videoOutput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_VideoOutput_Start failed.\");\n    }\n\n    // 开始录像 ts侧调用avRecorder.start()\n\n    // 停止录像输出流\n    ret = OH_VideoOutput_Stop(videoOutput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_VideoOutput_Stop failed.\");\n    }\n\n    // 停止录像 ts侧调用avRecorder.stop()\n\n    // 停止当前会话\n    ret = OH_CaptureSession_Stop(captureSession);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_Stop success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Stop failed. %d \", ret);\n    }\n\n    // 释放相机输入流\n    ret = OH_CameraInput_Close(cameraInput);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CameraInput_Close success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_Close failed. %d \", ret);\n    }\n\n    // 释放预览输出流\n    ret = OH_PreviewOutput_Release(previewOutput);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_PreviewOutput_Release success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_PreviewOutput_Release failed. %d \", ret);\n    }\n\n    // 释放录像输出流\n    ret = OH_VideoOutput_Release(videoOutput);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_VideoOutput_Release success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_VideoOutput_Release failed. %d \", ret);\n    }\n\n    // 释放会话\n    ret = OH_CaptureSession_Release(captureSession);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_Release success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Release failed. %d \", ret);\n    }\n\n    // 资源释放\n    ret = OH_CameraManager_DeleteSupportedCameras(cameraManager, cameras, size);\n    if (ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"Delete Cameras failed.\");\n    } else {\n      OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_DeleteSupportedCameras. ok\");\n    }\n    ret = OH_CameraManager_DeleteSupportedCameraOutputCapability(cameraManager, cameraOutputCapability);\n    if (ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"Delete Cameras failed.\");\n    } else {\n      OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_DeleteSupportedCameraOutputCapability. ok\");\n    }\n    ret = OH_Camera_DeleteCameraManager(cameraManager);\n    if (ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"Delete Cameras failed.\");\n    } else {\n      OH_LOG_ERROR(LOG_APP, \"OH_Camera_DeleteCameraManager. ok\");\n    }\n} 
