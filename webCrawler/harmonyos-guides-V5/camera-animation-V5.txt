相机基础动效(ArkTS)
在使用相机过程中，如相机模式切换，前后置镜头切换等场景，不可避免出现预览流替换，为优化用户体验，可合理使用动效过渡。本文主要介绍如何使用预览流截图，并通过ArkUI提供的显示动画能力实现下方三种核心场景动效：
 模式切换动效，使用预览流截图做模糊动效过渡。 图片为从录像模式切换为拍照模式的效果。  前后置切换动效，使用预览流截图做翻转模糊动效过渡。 图片为从前置摄像头切换为后置摄像头的效果。  拍照闪黑动效，使用闪黑组件覆盖预览流实现闪黑动效过渡。 图片为点击完成拍摄的效果。  
闪黑动效
使用组件覆盖的形式实现闪黑效果。
 导入依赖，需要导入相机框架、图片、ArkUI相关领域依赖。 import { curves } from '@kit.ArkUI'; 构建闪黑组件。 此处定义一个闪黑组件，在拍照闪黑及前后置切换时显示，用来遮挡XComponent组件。 属性定义： @State isShowBlack: boolean = false; // 是否显示闪黑组件\n@StorageLink('captureClick') @Watch('onCaptureClick') captureClickFlag: number = 0; // 拍照闪黑动效入口\n@State flashBlackOpacity: number = 1; // 闪黑组件透明度 闪黑组件的实现逻辑参考： // 拍照闪黑及前后置切换时显示，用来遮挡XComponent组件\nif (this.isShowBlack) {\n  Column()\n    .key('black')\n    .width(px2vp(1080)) // 与预览流XComponent宽高保持一致，图层在预览流之上，截图组件之下\n    .height(px2vp(1920))\n    .backgroundColor(Color.Black)\n    .opacity(this.flashBlackOpacity)\n} 实现闪黑动效。 function flashBlackAnim() {\n  console.info('flashBlackAnim E');\n  this.flashBlackOpacity = 1; // 闪黑组件不透明\n  this.isShowBlack = true; // 显示闪黑组件\n  animateToImmediately({\n    curve: curves.interpolatingSpring(1, 1, 410, 38),\n    delay: 50, // 延时50ms，实现黑屏\n    onFinish: () => {\n      this.isShowBlack = false; // 闪黑组件下树\n      this.flashBlackOpacity = 1;\n      console.info('flashBlackAnim X');\n    }\n  }, () => {\n    this.flashBlackOpacity = 0; // 闪黑组件从不透明到透明\n  })\n} 触发闪黑动效。 点击或触控拍照按钮，更新StorageLink绑定CaptureClick的值，触发onCaptureClick方法，动效开始播放。 onCaptureClick(): void {\n  console.info('onCaptureClick');\n    console.info('onCaptureClick');\n    this.flashBlackAnim();\n} 
模糊动效
通过预览流截图，实现模糊动效，从而完成模式切换，或是前后置切换的动效。
 导入依赖，需要导入相机框架、图片、ArkUI相关领域依赖。 import { camera } from '@kit.CameraKit';\nimport { image } from '@kit.ImageKit';\nimport { curves } from '@kit.ArkUI'; 获取预览流截图。 预览流截图通过图形提供的image.createPixelMapFromSurface接口实现，surfaceId为当前预览流的surfaceId，size为当前预览流profile的宽高。创建截图工具类(ts文件)，导入依赖，导出获取截图方法供页面使用，截图工具类实现参考： import { image } from '@kit.ImageKit';\n\nexport class BlurAnimateUtil {\n  public static surfaceShot: image.PixelMap;\n\n  /**\n   * 获取surface截图\n   * @param surfaceId\n   * @returns\n   */\n  public static async doSurfaceShot(surfaceId: string) {\n    console.info(`doSurfaceShot surfaceId:${surfaceId}.`);\n    if (surfaceId === '') {\n      console.error('surface not ready!');\n      return;\n    }\n    try {\n      if (this.surfaceShot) {\n        await this.surfaceShot.release();\n      }\n      this.surfaceShot = await image.createPixelMapFromSurface(surfaceId, {\n        size: { width: 1920, height: 1080 }, // 取预览流profile的宽高\n        x: 0,\n        y: 0\n      });\n      let imageInfo: image.ImageInfo = await this.surfaceShot.getImageInfo();\n      console.info('doSurfaceShot surfaceShot:' + JSON.stringify(imageInfo.size));\n    } catch (err) {\n      console.error(JSON.stringify(err));\n    }\n  }\n\n  /**\n   * 获取doSurfaceShot得到的截图\n   * @returns\n   */\n  public static getSurfaceShot(): image.PixelMap {\n    return this.surfaceShot;\n  }\n} 构建截图组件。 此处定义一个截图组件，置于预览流XComponent组件之上，用来遮挡XComponent组件。 属性定义： @State isShowBlur: boolean = false; // 是否显示截图组件\n@StorageLink('modeChange') @Watch('onModeChange') modeChangeFlag: number = 0; // 模式切换动效触发入口\n@StorageLink('switchCamera') @Watch('onSwitchCamera') switchCameraFlag: number = 0;// 前后置切换动效触发入口\n@StorageLink('frameStart') @Watch('onFrameStart') frameStartFlag: number = 0; // 动效消失入口\n@State screenshotPixelMap: image.PixelMap | undefined = undefined; // 截图组件PixelMap\n@State surfaceId: string = ''; // 当前预览流XComponent的surfaceId\n@StorageLink('curPosition') curPosition: number = 0; // 当前镜头前后置状态\n@State shotImgBlur: number = 0; // 截图组件模糊度\n@State shotImgOpacity: number = 1; // 截图组件透明度\n@State shotImgScale: ScaleOptions = { x: 1, y: 1 }; // 截图组件比例\n@State shotImgRotation: RotateOptions = { y: 0.5, angle: 0 } // 截图组件旋转角度 截图组件的实现参考： // 截图组件，置于预览流XComponent组件之上\nif (this.isShowBlur) {\n  Column() {\n    Image(this.screenshotPixelMap)\n      .blur(this.shotImgBlur)\n      .opacity(this.shotImgOpacity)\n      .rotate(this.shotImgRotation)// ArkUI提供，用于组件旋转\n      .scale(this.shotImgScale)\n      .width(px2vp(1080)) // 与预览流XComponent宽高保持一致，图层在预览流之上\n      .height(px2vp(1920))\n      .syncLoad(true)\n  }\n  .width(px2vp(1080))\n  .height(px2vp(1920))\n} （按实际情况选择）实现模糊出现动效。 模式切换动效分两段实现，模糊出现动效和模糊消失动效。 模糊出现动效：用户点击或触控事件触发预览流截图，显示截图组件，截图清晰到模糊，覆盖旧预览流。 注意：由于图形提供的image.createPixelMapFromSurface接口是截取surface内容获取PixelMap，其内容和XComponent组件绘制逻辑不同，需要根据前后置镜头做不同的图片内容旋转补偿和组件旋转补偿。 async function showBlurAnim() {\n  console.info('showBlurAnim E');\n  // 获取已完成的surface截图\n  let shotPixel = BlurAnimateUtil.getSurfaceShot();\n  // 后置\n  if (this.curPosition === 0) {\n    console.info('showBlurAnim BACK');\n    // 直板机后置截图初始内容旋转补偿90°\n    await shotPixel.rotate(90); //ImageKit提供，用于图片内容旋转\n    // 直板机后置截图初始组件旋转补偿0°\n    this.shotImgRotation = { y: 0.5, angle: 0 };\n  } else {\n    console.info('showBlurAnim FRONT');\n    // 直板机前置截图内容旋转补偿270°\n    await shotPixel.rotate(270);\n    // 直板机前置截图组件旋转补偿180°\n    this.shotImgRotation = { y: 0.5, angle: 180 };\n  }\n  this.screenshotPixelMap = shotPixel;\n  // 初始化动效参数\n  this.shotImgBlur = 0; // 无模糊\n  this.shotImgOpacity = 1; // 不透明\n  this.isShowBlur = true;  // 显示截图组件\n  animateToImmediately(\n    {\n      duration: 200,\n      curve: Curve.Friction,\n      onFinish: async () => {\n        console.info('showBlurAnim X');\n      }\n    },\n    () => {\n      this.shotImgBlur = 48; // 截图组件模糊度变化动效\n    }\n  );\n} 实现模糊消失动效。 模糊消失动效：由新模式预览流首帧回调on('frameStart')触发，截图组件模糊到清晰，显示新预览流。 function hideBlurAnim(): void {\n  this.isShowBlack = false;\n  console.info('hideBlurAnim E');\n  animateToImmediately({\n    duration: 200,\n    curve: Curve.FastOutSlowIn,\n    onFinish: () => {\n      this.isShowBlur = false; // 模糊组件下树\n      this.shotImgBlur = 0;\n      this.shotImgOpacity = 1;\n      console.info('hideBlurAnim X');\n    }\n  }, () => {\n    // 截图透明度变化动效\n    this.shotImgOpacity = 0; // 截图组件透明度变化动效\n  });\n} （按实际情况选择）实现模糊翻转动效。 模糊翻转动效分两段实现，模糊翻转动效和模糊消失动效，其中模糊消失动效同第5步。 模糊翻转动效：分两段组件翻转实现，先向外翻转90°再向内翻转90°，同时还执行了模糊度、透明度、比例缩放等动效。 为保证预览流在翻转时不露出，需要构建一个闪黑组件用于遮挡XComponent组件，构建方式参考闪黑动效-步骤2。 /**\n * 先向外翻转90°，前后置切换触发\n */\nasync function rotateFirstAnim() {\n  console.info('rotateFirstAnim E');\n  // 获取已完成的surface截图\n  let shotPixel = BlurAnimateUtil.getSurfaceShot();\n  // 后置切前置\n  if (this.curPosition === 1) {\n    console.info('rotateFirstAnim BACK');\n    // 直板机后置切前置截图初始内容旋转补偿90°\n    await shotPixel.rotate(90); //ImageKit提供，用于图片内容旋转\n    // 直板机后置切前置截图初始组件旋转补偿0°\n    this.shotImgRotation = { y: 0.5, angle: 0 };\n  } else {\n    console.info('rotateFirstAnim FRONT');\n    // 直板机前置切后置截图初始内容旋转补偿270°\n    await shotPixel.rotate(270);\n    // 直板机前置切后置截图初始组件旋转补偿180°\n    this.shotImgRotation = { y: 0.5, angle: 180 };\n  }\n  this.screenshotPixelMap = shotPixel;\n  this.isShowBlack = true; // 显示闪黑组件，覆盖预览流保证视觉效果\n  this.isShowBlur = true; // 显示截图组件\n  animateToImmediately(\n    {\n      duration: 200,\n      delay: 50, // 时延保证组件缩放模糊动效先行，再翻转,视觉效果更好\n      curve: curves.cubicBezierCurve(0.20, 0.00, 0.83, 1.00),\n      onFinish: () => {\n        console.info('rotateFirstAnim X');\n        // 在onFinish后触发二段翻转\n        this.rotateSecondAnim();\n      }\n    },\n    () => {\n      // 截图向外翻转动效\n      if (this.curPosition === 1) {\n        this.shotImgRotation = { y: 0.5, angle: 90 };\n      } else {\n        this.shotImgRotation = { y: 0.5, angle: 270 };\n      }\n    }\n  )\n}\n\n/**\n * 再向内翻转90°\n */\nasync function rotateSecondAnim() {\n  console.info('rotateSecondAnim E');\n  // 获取已完成的surface截图\n  let shotPixel = BlurAnimateUtil.getSurfaceShot();\n  // 后置\n  if (this.curPosition === 1) {\n    // 直板机后置镜头内容旋转补偿90°\n    await shotPixel.rotate(90);\n    // 组件旋转调整为-90°，保证二段翻转后，图片不是镜像的\n    this.shotImgRotation = { y: 0.5, angle: 90 };\n  } else { // 前置\n    // 直板机前置截图内容旋转补偿270°\n    await shotPixel.rotate(270);\n    // 直板机前置截图组件旋转补偿180°\n    this.shotImgRotation = { y: 0.5, angle: 180 };\n  }\n  this.screenshotPixelMap = shotPixel;\n  animateToImmediately(\n    {\n      duration: 200,\n      curve: curves.cubicBezierCurve(0.17, 0.00, 0.20, 1.00),\n      onFinish: () => {\n        console.info('rotateSecondAnim X');\n      }\n    },\n    () => {\n      // 截图向内翻转动效，翻转至初始状态\n      if (this.curPosition === 1) {\n        this.shotImgRotation = { y: 0.5, angle: 0 };\n      } else {\n        this.shotImgRotation = { y: 0.5, angle: 180 };\n      }\n    }\n  )\n}\n\n/**\n * 向外翻转90°同时\n */\nfunction blurFirstAnim() {\n  console.info('blurFirstAnim E');\n  // 初始化动效参数\n  this.shotImgBlur = 0; //无模糊\n  this.shotImgOpacity = 1; //不透明\n  this.shotImgScale = { x: 1, y: 1 };\n  animateToImmediately(\n    {\n      duration: 200,\n      curve: Curve.Sharp,\n      onFinish: () => {\n        console.info('blurFirstAnim X');\n        this.blurSecondAnim();\n      }\n    },\n    () => {\n      // 截图模糊动效\n      this.shotImgBlur = 48;\n      // 截图比例缩小动效\n      this.shotImgScale = { x: 0.75, y: 0.75 };\n    }\n  );\n}\n\n/**\n * 向内翻转90°同时\n */\nfunction blurSecondAnim() {\n  console.info('blurSecondAnim E');\n  animateToImmediately(\n    {\n      duration: 200,\n      curve: Curve.Sharp,\n      onFinish: () => {\n        console.info('blurSecondAnim X');\n      }\n    },\n    () => {\n      // 截图比例恢复动效\n      this.shotImgScale = { x: 1, y: 1 };\n    }\n  )\n} 按需触发动效。 模式切换动效触发：点击或触控模式按钮立即执行doSurfaceShot截图方法，更新StorageLink绑定modeChange的值，触发onModeChange方法，开始动效。 onModeChange(): void {\n  console.info('onModeChange');\n  this.showBlurAnim();\n} 前后置切换动效触发：点击或触控前后置切换按钮立即执行doSurfaceShot截图方法，更新StorageLink绑定switchCamera的值，触发onSwitchCamera方法，开始动效。 onSwitchCamera(): void {\n  console.info('onSwitchCamera');\n  this.blurFirstAnim();\n  this.rotateFirstAnim();\n} 模糊消失动效触发：监听预览流首帧回调on('frameStart')，更新StorageLink绑定frameStart的值，触发onFrameStart方法，开始动效。 onFrameStart(): void {\n  console.info('onFrameStart');\n  this.hideBlurAnim();\n} 
