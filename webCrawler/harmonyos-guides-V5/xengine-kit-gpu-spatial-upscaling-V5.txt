空域GPU超分
XEngine Kit提供空域GPU超分能力，其基于单帧输入图像，使用空间邻域信息实现超采样，开销较小同时收益可观，建议使用超分倍率为[1.2, 1.5]。
接口说明
以下接口为GLES和Vulkan空域GPU超分设置接口，如要使用更丰富的设置和查询接口，具体API说明详见接口文档。
接口名
描述
const GLubyte * HMS_XEG_GetString (GLenum name)
XEngine GLES扩展特性查询接口。
GL_APICALL void GL_APIENTRY HMS_XEG_SpatialUpscaleParameter (GLenum pname, GLvoid *param)
设置空域GPU超分输入参数。
GL_APICALL void GL_APIENTRY HMS_XEG_RenderSpatialUpscale (GLuint inputTexture)
执行空域GPU超分渲染命令。
VKAPI_ATTR VkResult VKAPI_CALL HMS_XEG_EnumerateDeviceExtensionProperties (VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, XEG_ExtensionProperties *pProperties)
XEngine Vulkan扩展特性查询接口。
VKAPI_ATTR VkResult VKAPI_CALL HMS_XEG_CreateSpatialUpscale (VkDevice device, const XEG_SpatialUpscaleCreateInfo *pXegSpatialUpscaleCreateInfo, XEG_SpatialUpscale *pXegSpatialUpscale)
创建XEG_SpatialUpscale对象。
VKAPI_ATTR void VKAPI_CALL HMS_XEG_CmdRenderSpatialUpscale (VkCommandBuffer commandBuffer, XEG_SpatialUpscale xegSpatialUpscale, XEG_SpatialUpscaleDescription *pXegSpatialUpscaleDescription)
执行空域GPU超分渲染命令。
VKAPI_ATTR void VKAPI_CALL HMS_XEG_DestroySpatialUpscale (XEG_SpatialUpscale xegSpatialUpscale)
销毁XEG_SpatialUpscale对象。
开发步骤
本章以GLES/Vulkan图像API集成为例，说明XEngine集成操作过程。
[h2]配置项目
编译HAP时，Native层so编译需要依赖NDK中的libxengine.so。
 头文件引用按需引用XEngine的头文件，如使用GLES空域GPU超分。 #include <cstring>\n#include <cstdlib>\n#include <xengine/xeg_gles_extension.h>\n#include <xengine/xeg_gles_spatial_upscale.h> 按需引用XEngine的头文件，如使用Vulkan空域GPU超分。 #include <string>\n#include <vector>\n#include <algorithm>\n#include <xengine/xeg_vulkan_extension.h>\n#include <xengine/xeg_vulkan_spatial_upscale.h> 编写CMakeLists.txt按需引用XEngine的CMakeLists，如使用GLES空域GPU超分功能，CMakeLists.txt部分示例代码如下，完整示例代码请参见Demo（GPU加速引擎-GLES）。 find_library(\n    # Sets the name of the path variable.\n    xengine-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    xengine\n)\nfind_library(\n    # Sets the name of the path variable.\n    EGL-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    EGL\n)\nfind_library(\n    # Sets the name of the path variable.\n    GLES-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    GLESv3\n)\n\ntarget_link_libraries(nativerender PUBLIC\n${EGL-lib} ${GLES-lib} ${xengine-lib}) 按需引用XEngine的CMakeLists，如使用Vulkan空域GPU超分功能，CMakeLists.txt部分示例代码如下，完整示例代码请参见Demo（GPU加速引擎-Vulkan）。 find_library(\n    # Sets the name of the path variable.\n    xengine-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    xengine\n)\nfind_library(\n    # Sets the name of the path variable.\n    EGL-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    EGL\n)\nfind_library(\n    # Sets the name of the path variable.\n    Vulkan-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    vulkan\n)\n\ntarget_link_libraries(nativerender PUBLIC\n${EGL-lib} ${Vulkan-lib} ${xengine-lib}) 
[h2]集成XEngine空域GPU超分（GLES）
使用EGL和GLES图形API搭建图像渲染管线并集成空域GPU超分在Native层实现，渲染结果通过XComponent组件显示到屏幕。
本节阐述GLES图形API的空域GPU超分的使用，详细代码请参见Demo（GPU加速引擎-GLES）。
在调用XEngine Kit能力前，需要先通过Syscap查询您的目标设备是否支持SystemCapability.Graphic.XEngine系统能力。
 调用HMS_XEG_GetString接口，获取XEngine支持的扩展信息，只有在支持XEG_SPATIAL_UPSCALE_EXTENSION_NAME扩展时才可以使用空域GPU超分的相关接口。// 查询XEngine支持的GLES扩展信息\nconst char* extensions = (const char*)HMS_XEG_GetString(XEG_EXTENSIONS);\n// 检查是否支持空域GPU超分\nif (!strstr(extensions, XEG_SPATIAL_UPSCALE_EXTENSION_NAME)) {\n    exit(1); // return error\n}  
 调用HMS_XEG_SpatialUpscaleParameter接口，对空域GPU超分的参数赋值。// m_sharpness为用户自定义超分锐化参数，此处以参数为0.3f为例\nfloat m_sharpness = 0.3f;\n// m_renderWidth与m_renderHeight分别为用户自定义的渲染宽度与渲染高度，此处以800*600分辨率为例\nuint32_t m_renderWidth = 800;\nuint32_t m_renderHeight = 600;\nHMS_XEG_SpatialUpscaleParameter(XEG_SPATIAL_UPSCALE_SHARPNESS, &m_sharpness);\n// upscaleScissor为超分输入图像的采样区域\nint upscaleScissor[4] = {0, 0, static_cast<int>(m_renderWidth), static_cast<int>(m_renderHeight)}; \nHMS_XEG_SpatialUpscaleParameter(XEG_SPATIAL_UPSCALE_SCISSOR, upscaleScissor);  
 调用HMS_XEG_RenderSpatialUpscale接口进行超分。// upscaleFBO为用户自定义创建的framebuffer\nunsigned int upscaleFBO;\nglBindFramebuffer(GL_FRAMEBUFFER, upscaleFBO); \n// m_upscaleWidth和m_upscaleHeight分别为用户自定义超分宽度和超分高度，此处以超分至1200*900分辨率为例\nuint32_t m_upscaleWidth = 1200;\nuint32_t m_upscaleHeight = 900;\nglViewport(0, 0, m_upscaleWidth, m_upscaleHeight);\nglScissor(0, 0, m_upscaleWidth, m_upscaleHeight); \n// upscaleColorBuffer为纹理附件，用户可自定义\nunsigned int upscaleColorBuffer;\nHMS_XEG_RenderSpatialUpscale(upscaleColorBuffer); upscaleFBO是已创建完成的framebuffer，并绑定纹理，超分接口调用后绘制到纹理上。  
[h2]集成XEngine空域GPU超分（Vulkan）
使用Vulkan图形API搭建图像渲染管线并集成空域GPU超分在Native层实现，渲染结果通过XComponent组件显示到屏幕。
本节阐述Vulkan图形API的空域GPU超分使用，详细代码请参见Demo（GPU加速引擎-Vulkan）。
在调用XEngine Kit能力前，需要先通过Syscap查询您的目标设备是否支持SystemCapability.Graphic.XEngine系统能力。
 调用HMS_XEG_EnumerateDeviceExtensionProperties接口，获取XEngine支持的扩展信息，只有在支持XEG_SPATIAL_UPSCALE_EXTENSION_NAME扩展时才可以使用空域GPU超分的相关接口。// physicalDevice为Vulkan物理设备，用户需进行初始化\nVkPhysicalDevice physicalDevice;\n// 查询XEngine支持的Vulkan扩展列表\nstd::vector<std::string> supportedExtensions;\nuint32_t pPropertyCount;\nHMS_XEG_EnumerateDeviceExtensionProperties(physicalDevice, &pPropertyCount, nullptr);\nif (pPropertyCount > 0) {\n    std::vector<XEG_ExtensionProperties> pProperties(pPropertyCount);\n    if (HMS_XEG_EnumerateDeviceExtensionProperties(physicalDevice, &pPropertyCount, &pProperties.front()) == VK_SUCCESS) {\n        for (auto ext : pProperties) {\n\t    supportedExtensions.push_back(ext.extensionName);\n\t}\n    }\n}\n// 查询是否支持空域GPU超分\nif (std::find(supportedExtensions.begin(), supportedExtensions.end(), XEG_SPATIAL_UPSCALE_EXTENSION_NAME) == supportedExtensions.end()) {\n    exit(1); // return error\n}  
 声明实例句柄。XEG_SpatialUpscale xegSpatialUpscale;  调用HMS_XEG_CreateSpatialUpscale接口，创建超分实例。// 渲染宽高和超分后宽高均为用户自定义参数，此处以将800*600分辨率超分至1200*900分辨率为例\nuint32_t m_renderWidth = 800;\nuint32_t m_renderHeight = 600;\nuint32_t m_upscaleWidth = 1200;\nuint32_t m_upscaleHeight = 900;\n// Vulkan逻辑设备，用户需进行初始化\nVkDevice device;\n// VkRect2D为Vulkan指定的二维区域结构\n// srcRect2D为超分输入纹理区域，用户可自定义\nVkRect2D srcRect2D;\n// srcRect2D.offset.x和srcRect2D.offset.y为原点偏移量\nsrcRect2D.offset.x = 0;\nsrcRect2D.offset.y = 0;\n// srcRect2D.extent.width与srcRect2D.extent.height为输入纹理宽高\nsrcRect2D.extent.width = m_renderWidth; \nsrcRect2D.extent.height = m_renderHeight; \n// dstRect2D为超分输出纹理区域，用户可自定义\nVkRect2D dstRect2D;\n// dstRect2D.offset.x和dstRect2D.offset.y为原点偏移量\ndstRect2D.offset.x = 0;\ndstRect2D.offset.y = 0;\n// dstRect2D.extent.width与dstRect2D.extent.height为超分纹理宽高\ndstRect2D.extent.width = m_upscaleWidth; \ndstRect2D.extent.height = m_upscaleHeight; \nXEG_SpatialUpscaleCreateInfo createInfo;\ncreateInfo.format = VK_FORMAT_R8G8B8A8_UNORM;\n// sharpness为用户自定义超分锐化参数，此处以参数为0.3f为例\ncreateInfo.sharpness = 0.3f;\ncreateInfo.outputSize = dstRect2D.extent;\ncreateInfo.inputRegion = srcRect2D;\ncreateInfo.outputRegion = dstRect2D;\ncreateInfo.inputSize = srcRect2D.extent;\nHMS_XEG_CreateSpatialUpscale(device, &createInfo, &xegSpatialUpscale);  
 调用HMS_XEG_CmdRenderSpatialUpscale接口下发超分，每帧都需要调用。// inputImageView为用户创建的超分输入图像的vkImageView\nVkImageView inputImageView = VK_NULL_HANDLE; \n// outputImageView为用户创建的超分输出图像的vkImageView\nVkImageView outputImageView = VK_NULL_HANDLE;\n// cmdBuff为命令缓冲区，用户需进行初始化\nVkCommandBuffer cmdBuff = VK_NULL_HANDLE ;\nXEG_SpatialUpscaleDescription xegDescription;\nxegDescription.inputImage = inputImageView; \nxegDescription.outputImage = outputImageView; \nHMS_XEG_CmdRenderSpatialUpscale(cmdBuff, xegSpatialUpscale, &xegDescription);  
 调用HMS_XEG_DestroySpatialUpscale接口销毁实例。HMS_XEG_DestroySpatialUpscale(xegSpatialUpscale);  
