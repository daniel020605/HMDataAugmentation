屏幕朗读应用适配指导
概述
屏幕朗读软件（Screen Reader）主要帮助视障人士使用移动智能设备，通过语音输出，获取屏幕或界面中的信息。视障用户无法通过视觉直接感知和理解用户界面。他/她们需要在屏幕上使用手指探索或手势逐步在界面上进行导航，同时通过设备的朗读反馈来理解界面信息和潜在的交互功能。因此，让用户能够快速、准确地感知界面内容并进行正确交互是无障碍开发的关键。视障用户需要先通过手势使某个UI对象获得焦点，同时系统朗读出该对象的内容和功能，然后视障用户双击屏幕点击或选择该对象。
因此，进行开发时应遵循以下原则：
确保视障用户可以通过手势快速、符合使用逻辑顺序地导航至页面内所有有效UI对象。确保用户在当前获焦的UI对象下接收到适当的语音朗读反馈，朗读内容应简洁清晰地告知用户当前所在UI对象内容、功能、以及可执行的操作。
同时，进行开发时，组件可以设置相应的无障碍属性和事件来更好地使用无障碍能力。
标注屏幕朗读内容的场景
控件包含显示文本（text）、无障碍文本（accessibilityText）2个属性，其中，显示文本为用户界面上呈现的信息，无障碍文本为无障碍专有的朗读信息，不在界面上显示。屏幕朗读提取信息进行朗读时无障碍文本的优先级大于显示文本，即当无障碍文本不为空时，会朗读无障碍文本，否则朗读显示文本。
所以：
对于文本类控件，尽量使用显示文本来表达信息，使视障用户和视力健全用户可以获取到相同的信息。对于文本类控件，如果除显示文本外，还额外提供了颜色等视觉效果为视力健全用户提供了更多信息的场景，可采用无障碍文本为视障用户提供更多的信息用于朗读。对于非文本类控件，可采用无障碍文本为视障用户提供朗读信息。
accessibilityText( ) 设置无障碍文本。聚焦button时朗读效果为：\"按钮, Accessibility text\"。
export struct Rule_2_1_1 {\n  title: string = 'Rule 2.1.1';\n  shortText: string = 'Button';\n  longText: string = 'Accessibility text';\n\n  build() {\n    NavDestination() {\n      Column() {\n        Blank()\n        Button(this.shortText)\n          .accessibilityText(this.longText)\n          .align(Alignment.Center)\n          .fontSize(20)\n        Blank()\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .title(this.title)\n  }\n}
禁用屏幕朗读焦点的场景
装饰性的控件一般为分隔符、占位符和美化图标等，这类图形元素仅仅起到调整页面布局或装饰性效果，并不会向用户传达有效的信息或提供交互功能，删除后不影响指引用户体验。可以设置控件的无障碍是否可见的属性将其设置对无障碍不可见，这样在屏幕朗读模式下控件就不会获取焦点和朗读。
accessibilityGroup(true) 用于多个组件的组合，组合内的默认没有焦点。
.accessibilityLevel(\"no\")用于组件设置不可聚焦，不被无障碍感知。
例如：以下代码同时显示“Broadcast”和“No broadcast”消息，但当ScreenReader处于“打开”状态时，message可被聚焦，但message1将不被聚焦。
@Component\nexport struct Rule_2_1_3 {\n  title: string = 'Rule 2.1.3'\n  @State message: string = 'Broadcast';\n  @State message1: string = 'No broadcast';\n\n  build() {\n    NavDestination() {\n      Column() {\n        Row() {\n          Text(this.message)\n            .fontSize(40)\n            .fontWeight(FontWeight.Bold)\n            .fontColor(Color.Blue)\n            .margin({\n              left: 40\n            })\n        }\n        .width('100%')\n        .height('50%')\n        Row() {\n          Text(this.message1)\n            .fontSize(40)\n            .fontWeight(FontWeight.Bold)\n            .fontColor(Color.Grey)\n            .margin({\n              left: 40\n            }).accessibilityLevel(\"no\") // use for component\n        }\n        //.accessibilityGroup(true)\n        //.accessibilityLevel(\"no-hide-descendants\") // use for container\n        // 可以使用这两行代替28行的accessibilityLevel(\"no\")\n        .width('100%')\n        .height('50%')\n      }\n      .height('100%')\n    }\n    .title(this.title)\n  }\n}
多维嵌套场景
如果应用展示的是多维信息，还可能出现“嵌套组”的情况。在嵌套组中，应避免两个可获焦对象的功能或朗读内容产生重复。比如下图的天气卡片，时间和地点信息获取到焦点时，都是朗读的时间信息；不同焦点的重复朗读会额外增减用户的操作步骤，焦点控制杂乱，这些对同一个信息结构的完整描述应该统一标注在这几个子控件的父控件上。
@Component\nexport struct Rule_2_1_4 {\n  title: string = 'Rule 2.1.4'\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text('Incorrect behavior:') // 播报 \"Time Group 12:05 Beijing\" + \"12:05\" + \"Beijing\".\n                                    //继续下滑焦点可聚焦至子控件文本重复了两次。这是不正确的。\n          .width('100%')\n          .fontSize(12)\n          .fontColor(Color.Black)\n          .margin({bottom: 12})\n        Row(){\n          Text(\"12:05\") // time information\n            .fontSize(32)\n            .fontColor(Color.Red)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n            .margin({right: 20})\n\n          Text(\"Beijing\") // location information\n            .fontSize(20)\n            .fontColor(Color.Green)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n        }\n        .accessibilityText(\"Time Group\") // 时间信息、位置信息和此可访问性文本在获得焦点时被朗读。\n                                         // 带有时间信息的文本组件可聚焦并朗读\n                                         // 具有位置信息的文本组件可聚焦并朗读\n        .height(50)\n        .margin({bottom: 150})\n\n        Text('Correct behavior:') // 只朗读 \"07:05 Moscow\" ，不重复文本。是正确的。\n          .width('100%')\n          .fontSize(12)\n          .fontColor(Color.Black)\n          .margin({bottom: 12})\n        Row(){\n          Text(\"07:05\") // time information\n            .fontSize(32)\n            .fontColor(Color.Red)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n            .margin({right: 20})\n\n          Text(\"Moscow\") // location information\n            .fontSize(20)\n            .fontColor(Color.Green)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n        }\n        .height(50)\n        .accessibilityGroup(true) // 获取焦点时朗读时间和位置信息。\n                                  // 带有时间信息的文本组件无法聚焦和朗读\n                                  //具有位置信息的文本组件无法获得焦点并朗读\n      }\n      .alignItems(HorizontalAlign.Start)\n      .padding(10)\n    }\n    .title(this.title)\n  }\n}
组合场景
在一些场景中，一个功能上完整的UI对象可能是由若干个更小的UI组件组合而成的。若每一个小的UI组件都可以获焦并朗读，则会造成信息冗余和效率降低。同时由于可聚焦的组件过多过细，也会影响触摸浏览时走焦的性能体验。在这种情况下，将它们在功能或语义上聚合成一个自然组并作为一个独立可获焦的UI元素来向视障用户表达内容更加合理，且更加高效。
总体原则是：对于表示同一个对象信息的多个组件，需要进行组合标注，对外只暴露一个无障碍焦点。
如下，可以将多个控件设置为一个组，通过对组设置朗读标签，达到整组播报的效果，组内的子控件设置不可获取焦点。
@Component\nexport struct Rule_2_1_5 {\n  title: string = 'Rule 2.1.5'\n\n  build() {\n    NavDestination() {\n      Column() {\n\n        Row(){\n          //默认只有子组件才能获取焦点\n         //日期、天气、温度等信息在每个组件独立获取焦点时分别朗读\n         //在组合式组件规范里是不正确的。\n          Text(\"23 Dec 2023\") // 日期信息。组件可独立对焦和朗读\n            .fontSize(32)\n            .fontColor(Color.Red)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n            .margin({right: 20})\n\n          Column() // 天气信息。组件可独立对焦和朗读\n            .backgroundColor(Color.Blue)\n            .width(50)\n            .height(50)\n            .accessibilityText(\"Snow\") // 当该组件被屏幕阅读器选中时，该组件不包含文本信息，因此将读取此文本\n            .margin({right: 20})\n\n          Text(\"-1\") // 温度信息。组件可独立对焦和朗读\n            .fontSize(20)\n            .fontColor(Color.Green)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n        }\n        .height(50)\n        .margin({bottom: 20})\n\n        Row(){\n          //因为accessibilityGroup属性设置为true，子组件无法获取焦点。\n          //获取焦点时，日期、天气、温度信息一起朗读\n         //此时只有Row可以获取焦点，这是符合组合式组件规范的。\n          Text(\"24 Dec 2023\") //日期信息。组件无法聚焦，无法朗读，因为父组件的accessibilityGroup属性设置为true\n            .fontSize(32)\n            .fontColor(Color.Red)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n            .margin({right: 20})\n\n          Column() //天气信息组件无法聚焦，无法朗读，因为父组件的accessibilityGroup为true\n            .backgroundColor(Color.Yellow)\n            .width(50)\n            .height(50)\n            .accessibilityText(\"Sunny\") // 组件不包含文本信息，当组件被屏幕阅读器选中时，因此将读取此文本\n            .margin({right: 20})\n\n          Text(\"-7\") // //温度信息。组件无法聚焦，无法朗读因为父组件的accessibilityGroup为true\n            .fontSize(20)\n            .fontColor(Color.Green)\n            .fontWeight(FontWeight.Bold)\n            .textAlign(TextAlign.Center)\n        }\n        .height(50)\n        .margin({bottom: 20})\n        .accessibilityGroup(true) // 将accessibilityGroup属性设置为true\n      }\n      .alignItems(HorizontalAlign.Start)\n      .padding(10)\n    }\n    .title(this.title)\n  }\n}
按钮标注场景
对于用户可点击等操作的任何按钮，如果不是文本类控件，则须通过给出标注信息，包括用户自定义的控件中的虚拟按钮区域，否则可能会导致屏幕朗读用户无法完成对应的功能。
此类控件在进行标注时，标注文本不要包含控件类型、“单指双击即可打开”之类的字符串，此部分指引由屏幕朗读根据控件类型、控件状态，并结合用户是否开启了“新手指引”自动追加朗读。
在下面的代码片段中，您可以看到Image组件（它实际上是一个播放/暂停按钮），通过设置accessibilityText属性提供标注信息：
const RESOURCE_STR_PLAY = $r('app.media.play')\nconst RESOURCE_STR_PAUSE = $r('app.media.pause')\n\n@Component\nexport struct Rule_2_1_6 {\n  title: string = 'Rule 2.1.6'\n  @State isPlaying: boolean = false\n\n  play() {\n    // play audio file\n  }\n\n  pause() {\n    // pause playing of audio file\n  }\n\n  build() {\n    NavDestination() {\n      Column() {\n        Flex({\n          direction: FlexDirection.Column,\n          alignItems: ItemAlign.Center,\n          justifyContent: FlexAlign.Center,\n        }) {\n          Row() {\n            Image(this.isPlaying ? RESOURCE_STR_PAUSE : RESOURCE_STR_PLAY)\n              .width(50)\n              .height(50)\n              .onClick(() => {\n                this.isPlaying = !this.isPlaying\n                if (this.isPlaying) {\n                  this.play()\n                } else {\n                  this.pause()\n                }\n              })\n              .accessibilityText(this.isPlaying ? 'Pause' : 'Play') // 设置注释信息\n            Text('Good_morning.mp3')\n              .margin({\n                left: 10\n              })\n          }\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor(Color.White)\n      }\n    }\n    .title(this.title)\n  }\n}
插画/视频/动画的播报场景
如下图，插画信息有一定提示作用，插画和对应的功能介绍应该组合在一起，当焦点落到插画或者包含插画的符合控件时，需要朗读出对应的功能描述。建议插画和功能介绍作为一个组合使用一个焦点朗读。它可以借助“accessibilityGroup(true)”属性来实现。
@Component\nexport struct Rule_2_1_7 {\n  title: string = 'Rule 2.1.7'\n  private description: string = 'gesture swipe left then up'\n\n  build() {\n    NavDestination() {\n      Column() {\n        Flex({\n          direction: FlexDirection.Column,\n          alignItems: ItemAlign.Center,\n          justifyContent: FlexAlign.Center,\n        }) {\n          Column() {\n            Image($r(\"app.media.gesture_swipe_left_then_up\"))\n              .width(220)\n              .height(220)\n            Text(this.description)\n              .fontSize(22)\n              .fontColor(Color.Red)\n              .fontWeight(FontWeight.Bold)\n              .textAlign(TextAlign.Center)\n          }.accessibilityGroup(true) // 将图像和文本合并为一个辅助功能对象\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor(Color.White)\n      }\n    }\n    .title(this.title)\n  }\n}
以下List的每个Item，应该进行组合标注，从而给用户一个完整的提示信息：
对于列表/网格控件，控件中的每个项目默认需要一起标记。列表/网格控件，每个item应提供item包含的元素的所有信息。建议朗读列表每一项的所有嵌套元素的组合信息。
它可以借助“accessibilityGroup(true)”属性来实现：
@Preview\n@Component\nexport struct Rule_2_1_9 {\n  title: string = 'Rule 2.1.9'\n\n  build() {\n    NavDestination() {\n      Flex({\n        direction: FlexDirection.Column,\n        alignItems: ItemAlign.Center,\n        justifyContent: FlexAlign.Center,\n      }) {\n        Column() {\n          Item_2_1_9({\n            title: 'Video card',\n            subtitle: 'provided with options',\n            time: '1:23 hrs',\n            color: '#ffdee5ff'\n          })\n          Item_2_1_9({\n            title: 'Music card',\n            subtitle: 'sound feedback available',\n            time: '2:75 min',\n            color: '#92e1ffd8'\n          })\n          Item_2_1_9({\n            title: 'Live card',\n            subtitle: 'health support on request',\n            time: '10:55',\n            color: '#fff3deff'\n          })\n          Item_2_1_9({\n            title: 'Play card',\n            subtitle: 'play station tournament',\n            time: '5:12 hrs',\n            color: '#92e1ffd8'\n          })\n          Item_2_1_9({\n            title: 'Theater card',\n            subtitle: 'ticket on concert',\n            time: '2:75 min',\n            color: '#ffdee5ff'\n          })\n        }\n      }\n    }.title(this.title)\n  }\n}\n\n@Component\nexport struct Item_2_1_9 {\n  title: string = 'Video card'\n  subtitle: string = 'provided with additional options'\n  time: string = '1:23 hr'\n  color: ResourceColor = \"#80FAFAFA\"\n\n  build() {\n    Flex({\n      direction: FlexDirection.Row,\n      alignItems: ItemAlign.Center,\n      justifyContent: FlexAlign.SpaceBetween,\n    }) {\n      Column() {\n        Text(this.title)\n          .fontSize(22)\n          .fontWeight(FontWeight.Bold)\n          .textAlign(TextAlign.Center)\n          .padding({ left: 20, right: 0 })\n        Text(this.subtitle)\n          .fontSize(14)\n          .fontColor(Color.Gray)\n          .fontWeight(FontWeight.Normal)\n          .textAlign(TextAlign.Center)\n          .padding({ left: 20, right: 0 })\n      }\n\n      Column() {\n        Text(this.time)\n          .fontSize(20)\n          .fontWeight(FontWeight.Normal)\n          .textAlign(TextAlign.Center)\n          .padding({ left: 10, right: 10 })\n      }\n\n      Column() {\n        Image($r(\"app.media.ic_arrow\"))\n          .width(28)\n          .height(28)\n          .fillColor(Color.Gray)\n      }.align(Alignment.End)\n\n    }\n    .width('90%')\n    .height(75)\n    .border({\n      width: 1,\n      color: '#FFC0C0C0',\n      radius: 8,\n      style: {\n        top: BorderStyle.Solid,\n      }\n    })\n    .backgroundColor(this.color)\n    .accessibilityGroup(true) // combines text and image into single object\n    .margin({ top: 10 })\n  }\n}
内容动态变化场景
适用场景：界面上重要内容在动态变化后，需要实时发送变化后的朗读内容说明：如果界面上内容发生动态变化且其内容对用户具有必要的提示/告知/指导作用，则其发生变化后需对其变化内容进行朗读，可调用无障碍提供的主动朗读接口进行播报。
import accessibility from '@ohos.accessibility';\n\nlet eventInfo: accessibility.EventInfo = ({\n  type: 'announceForAccessibility',\n  bundleName: 'com.example.pagesrouter',\n  triggerAction: 'common',\n  textAnnouncedForAccessibility: 'test123 text'\n});\n\naccessibility.sendAccessibilityEvent(eventInfo).then(() => {\n  console.info(`test123 Succeeded in send event, eventInfo is ${JSON.stringify(eventInfo)}`);\n});
属性
类型
说明
例
type
EventType
主动播报事件类型
announceForAccessibility
bundleName
string
目标应用名
当前应用包名
triggerAction
Action
触发事件的Action
click或其他都不会有任何影响
textAnnouncedForAccessibility
string
主动播报的内容
test123 text
控件状态变化场景
例如下图，播放暂停按钮对应着两种状态，在状态切换时需要实时变化对应的标注信息。
import prompt from '@system.prompt'\n\nconst RESOURCE_STR_PLAY = $r('app.media.play')\nconst RESOURCE_STR_PAUSE = $r('app.media.pause')\n\n@Component\nexport struct Rule_2_1_12 {\n  title: string = 'Rule 2.1.12'\n  @State isPlaying: boolean = true\n\n  play() {\n    // play audio file\n  }\n\n  pause() {\n    // pause playing of audio file\n  }\n\n  build() {\n    NavDestination() {\n      Column() {\n        Flex({\n          direction: FlexDirection.Column,\n          alignItems: ItemAlign.Center,\n          justifyContent: FlexAlign.Center,\n        }) {\n          Row() {\n\n            Image(this.isPlaying ? RESOURCE_STR_PAUSE : RESOURCE_STR_PLAY)\n              .width(50)\n              .height(50)\n              .onClick(() => {\n                prompt.showToast({\n                  message :this.isPlaying ? \"Play\" : \"Pause\"\n                })\n                this.isPlaying = !this.isPlaying\n                if (this.isPlaying) {\n                  this.play()\n                } else {\n                  this.pause()\n                }\n              })\n              .accessibilityText(this.isPlaying ? 'Pause' : 'Play') // 设置可访问性框架的注释信息\n          }\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor(Color.White)\n      }\n    }.title(this.title)\n  }\n}
操作错误场景
比如网络连接错误，或者其他警告信息，不能仅仅以颜色区分，需要实时告诉用户错误提示和改进方法。
如下是一个将连接中断播报出来的例子。
@Component\nexport struct Rule_2_1_14 {\n  title: string = 'Rule 2.1.14'\n\n  build() {\n    NavDestination() {\n      Column() {\n        Flex({\n          direction: FlexDirection.Column,\n          alignItems: ItemAlign.Center,\n          justifyContent: FlexAlign.Center,\n        }) {\n          Row() {\n            Text('Connection state').fontSize(30)\n          }\n          Row() {\n            Radio({ value: 'Radio1', group: 'radioGroup' }).checked(true)\n              .radioStyle({\n                checkedBackgroundColor: Color.Red\n              })\n              .height(50)\n              .width(50)\n              .onChange((isChecked: boolean) => {\n                console.log('Radio1 status is ' + isChecked)\n              })\n            Text('Connection interrupted').fontColor(Color.Red)\n          }.width('80%')\n          .accessibilityGroup(true) //将单选和文本合并到单个对象中\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor(Color.White)\n      }\n    }.title(this.title)\n  }\n}
多语种场景
当对朗读内容进行标注时，须对标注字符串进行多语种翻译，具体支持的语种和应用本身界面支持的语种保持一致。若采用多个字符串进行朗读内容的拼接，需考虑多语种的情况，避免拼接后朗读错误，例如阿拉伯语从右到左。
@Component\nexport struct Rule_2_1_16 {\n  title: string = 'Rule 2.1.16'\n  private multilingual: string = 'It is convenient: 屏幕朗读已开启 and use'\n\n  build() {\n    NavDestination() {\n      Column() {\n        Flex({\n          direction: FlexDirection.Column,\n          alignItems: ItemAlign.Center,\n          justifyContent: FlexAlign.Center,\n        }) {\n          Row() {\n            Text(this.multilingual)\n              .fontSize(30)\n              .fontColor(Color.Blue)\n          }\n          .width('80%')\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor(Color.White)\n      }\n    }.title(this.title)\n  }\n}
控件位置调整场景
移动过程中需要实时播报即将移动到的位置，新位置的播报会打断老位置的播报，放置到确定位置后，需要再播报已经放置的位置信息，尽量保证视障用户耳朵听到的信息和我们通过眼睛看到的信息是一致的。例如，网页书签被托起时，会播报已托起，移动的过程中，根据即将放置的位置播报“移至第几行，第几列”，放置后播报“已放至第几行，第几列”。应用可调用主动播报的接口来进行主动播报。
重新设置新焦点位置的场景
适用场景：当前焦点所在的控件消失或者隐藏后，需要重新设置新的焦点位置说明：一般情况下，新焦点应该在原控件位置的下一个控件上，不应该跳变到前面的控件。应用可以调用主动聚焦的接口对想要聚焦的组件进行主动聚焦。示例代码：
build() {\n    Column() {\n        Button(`待聚焦组件`).id(\"abc345\")\n    }\n}
import accessibility from '@ohos.accessibility';\n\nlet eventInfo: accessibility.EventInfo = ({\n  type: 'requestFocusForAccessibility',\n  bundleName: 'com.example.pagesrouter',\n  triggerAction: 'common',\n  customId: 'abc345'\n});\n\naccessibility.sendAccessibilityEvent(eventInfo).then(() => {\nconsole.info(`test123 Succeeded in send event, eventInfo is ${JSON.stringify(eventInfo)}`);\n});
属性
类型
说明
例
type
EventType
主动聚焦事件类型
requestFocusForAccessibility
bundleName
string
目标应用名
当前应用包名
triggerAction
Action
触发事件的Action
click或其他都不会有任何影响
customId
string
组件id
abc345
