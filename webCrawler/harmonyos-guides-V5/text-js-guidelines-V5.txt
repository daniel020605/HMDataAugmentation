使用Text模块实现文本显示
场景介绍
@ohos.graphics.text模块提供了接口创建复杂的文本段落，包括多样的文本样式、段落样式、换行规则等，并最终将这些信息转换为能在屏幕上高效渲染的布局数据。
接口说明
@ohos.graphics.text常用接口如下表所示，详细的接口说明请参考@ohos.graphics.text。
开发步骤
使用TextEngine进行文字绘制与显示时，需要使用@ohos.graphics.text模块的字体管理器和段落样式、段落生成器创建文本段落，最终在应用上显示文本。
本文以实现段落文字的创建与显示为例，给出具体的开发指导。
[h2]添加开发依赖
依赖文件
import { NodeController, FrameNode, RenderNode, DrawContext } from '@kit.ArkUI'\nimport { UIContext } from '@kit.ArkUI'\nimport { drawing } from '@kit.ArkGraphics2D'\nimport { text } from '@kit.ArkGraphics2D'\nimport { image } from '@kit.ImageKit'\nimport { common2D } from '@kit.ArkGraphics2D'
接下来介绍如何使用text接口进行文本绘制。
[h2]绘制文本
以下步骤描述了如何使用@ohos.graphics.text模块的接口创建段落对象以及显示段落文本。
 创建RenderNode子类。创建RenderNode子类MyRenderNode，并在其中定义绘图函数draw，下方第2步及第3步为draw函数的具体实现。RenderNode中包含树结构的操作，以及对绘制属性的操作。 // 创建一个MyRenderNode类，并绘制文本。\nclass MyRenderNode extends RenderNode {\n\n    async draw(context: DrawContext) {\n        // ...\n    }\n} 创建canvas并设置画笔和画刷样式。使用Pen接口创建一个画笔实例pen，并设置抗锯齿、颜色、线宽等属性，画笔用于形状边框线的绘制。使用Brush接口创建一个画刷实例brush，并设置填充颜色，画刷用于形状内部的填充。使用canvas中的attachPen和attachBrush接口将画笔画刷的实例设置到画布实例中。 // 创建画布canvas对象\nconst canvas = context.canvas\n// 创建一个画笔Pen对象，Pen对象用于形状的边框线绘制\nlet pen = new drawing.Pen()\nlet pen_color : common2D.Color = { alpha: 0xFF, red: 0xFF, green: 0x00, blue: 0x00 }\npen.setColor(pen_color)\n\n// 将Pen画笔设置到canvas中\ncanvas.attachPen(pen)\n\n// 创建一个画刷Brush对象，Brush对象用于形状的填充\nlet brush = new drawing.Brush()\nlet brush_color : common2D.Color = { alpha: 0xFF, red: 0x00, green: 0xFF, blue: 0x00 }\nbrush.setColor(brush_color)\n\n// 将Brush画刷设置到canvas中\ncanvas.attachBrush(brush) 绘制文本。使用TextStyle接口创建一个文本样式实例myTextStyle，示例只设置了文本颜色，使用ParagraphStyle接口创建一个段落样式实例myParagraphStyle，并设置文本样式等属性，使用FontCollection接口创建一个字体管理器实例fontCollection，使用ParagraphBuilder的接口，以myParagraphStyle和fontCollection为参数创建一个段落生成器实例ParagraphGraphBuilder，并调用其接口使文本样式更新以及添加段落文本，在调用build()接口生成段落实例paragraph，最后调用paint接口在屏幕上显示。 //字体颜色，字重，字体大小等属性由此设置\nlet myTextStyle: text.TextStyle = {\n    color: { alpha: 255, red: 255, green: 0, blue: 0 },\n};\n//断词类型，换行策略，文本方向以及对齐方式由此设置\nlet myParagraphStyle: text.ParagraphStyle = {\n    textStyle: myTextStyle,\n    align: 3,\n    //wordBreak:text.WordBreak.NORMAL 文本断词类型\n};\nlet fontCollection = new text.FontCollection();\nlet ParagraphGraphBuilder = new text.ParagraphBuilder(myParagraphStyle, fontCollection);\n//更新文本样式\nParagraphGraphBuilder.pushStyle(myTextStyle);\n//添加文本\nParagraphGraphBuilder.addText(\"0123456789\");\n//生成段落\nlet paragraph = ParagraphGraphBuilder.build();\n// 布局\nparagraph.layoutSync(600);\n//绘制文本\nparagraph.paint(canvas, 0, 0); 创建MyRenderNode对象。以上1到3步构建出了MyRenderNode类并在其中定义了绘图的主要函数，接下来创建一个MyRenderNode对象，并设置它的像素格式。 // 创建一个MyRenderNode对象\nconst textNode = new MyRenderNode()\n// 定义newNode的像素格式\ntextNode.frame = { x: 100, y: 100, width: 200, height: 800 }\ntextNode.pivot = { x: 0.2, y: 0.8 }\ntextNode.scale = { x: 1, y: 1 } 创建NodeController子类。创建NodeController的子类MyNodeController，并在其中定义创建FrameNode的函数。NodeController定义了节点容器的控制器，控制着容器里在生命周期中的节点。FrameNode定义了节点的基本类型，并包含一个RenderNode。 class MyNodeController extends NodeController {\n    private rootNode: FrameNode | null = null;\n\n    makeNode(uiContext: UIContext): FrameNode {\n        this.rootNode = new FrameNode(uiContext)\n        if (this.rootNode == null) {\n            return this.rootNode\n        }\n        const renderNode = this.rootNode.getRenderNode()\n        if (renderNode != null) {\n            renderNode.frame = { x: 0, y: 0, width: 10, height: 500 }\n            renderNode.pivot = { x: 50, y: 50 }\n        }\n        return this.rootNode\n    }\n} 创建添加节点的接口。在第5步中创建的MyNodeController类中创建添加RenderNode的接口。 addNode(node: RenderNode): void {\n    if (this.rootNode == null) {\n        return\n    }\n    const renderNode = this.rootNode.getRenderNode()\n    if (renderNode != null) {\n        renderNode.appendChild(node)\n    }\n} 创建删除节点的接口。在第5步中创建的MyNodeController类中创建删除RenderNode的接口。 clearNodes(): void {\n    if (this.rootNode == null) {\n        return\n    }\n    const renderNode = this.rootNode.getRenderNode()\n    if (renderNode != null) {\n        renderNode.clearChildren()\n    }\n} 绘制图形和文字。创建MyNodeController实例并将其存入NodeContainer，添加button控件供用户点击，并调用已定义的接口。 @Entry\n@Component\nstruct RenderTest {\n    private myNodeController: MyNodeController = new MyNodeController()\n    build() {\n        Column() {\n            Row() {\n                NodeContainer(this.myNodeController)\n                    .height('100%')\n                Button(\"Draw Text\")\n                    .margin({ bottom: 200, right: 12 })\n                    .onClick(() => {\n                        this.myNodeController.clearNodes()\n                        this.myNodeController.addNode(textNode)\n                    })\n            }\n            .width('100%')\n            .justifyContent(FlexAlign.Center)\n            .shadow(ShadowStyle.OUTER_DEFAULT_SM)\n            .alignItems(VerticalAlign.Bottom)\n            .layoutWeight(1)\n        }\n    }\n} 绘制与显示的效果图如下：     主页 绘制文字(不设置wordBreak) 绘制文字(设置wordBreak)          
