原生广告
场景介绍
原生广告是与应用内容融于一体的广告，通过“和谐”的内容呈现广告信息，在不破坏用户体验的前提下，为用户提供有价值的信息，展示形式包含图片和视频，支持您自由定制界面。
接口说明
接口名
描述
loadAd(adParam: AdRequestParams, adOptions: AdOptions, listener: AdLoadListener): void
请求单广告位广告，通过AdRequestParams、AdOptions进行广告请求参数设置，通过AdLoadListener监听广告请求回调。
loadAdWithMultiSlots(adParams: AdRequestParams[], adOptions: AdOptions, listener: MultiSlotsAdLoadListener): void
请求多广告位广告，通过AdRequestParams[]、AdOptions进行广告请求参数设置，通过MultiSlotsAdLoadListener监听广告请求回调。
AdComponent(ads: advertising.Advertisement[], displayOptions: advertising.AdDisplayOptions, interactionListener: advertising.AdInteractionListener, @BuilderParam adRenderer?: () => void): void
展示广告，通过AdDisplayOptions进行广告展示参数设置，通过AdInteractionListener监听广告状态回调。
为了保证广告能正确展示，该接口必须和请求广告接口配套使用。
开发步骤
获取OAID。如果想要为用户更精准的推送广告，可以在请求参数AdRequestParams中添加oaid属性。 如何获取OAID参见获取OAID信息。  使用以下示例中提供的测试广告位必须先获取OAID信息。  请求广告。请求单广告位广告，需要创建一个AdLoader对象，通过AdLoader的loadAd方法请求广告，最后通过AdLoadListener，来监听广告的加载状态。 如果想要为用户更精准的推送广告，可以在请求参数AdRequestParams中添加oaid属性。 请求广告关键参数如下所示： 请求广告参数名  类型  必填  说明    adType  number  是  请求广告类型，原生广告类型为3。   adId  string  是  广告位ID。 如果仅调测广告，可使用测试广告位ID：testy63txaom86（原生视频），testu7m3hc4gvm（原生大图），testb65czjivt9（原生小图），testr6w14o0hqz（原生三图）。如果要接入正式广告，则需要申请正式的广告位ID。可在应用发布前进入流量变现官网，点击“开始变现”，登录鲸鸿动能媒体服务平台进行申请，具体操作详情请参见展示位创建。   oaid  string  否  开放匿名设备标识符，用于精准推送广告。不填无法获取到个性化广告。      示例代码如下所示：import { advertising, identifier } from '@kit.AdsKit';\nimport { router } from '@kit.ArkUI';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct LoadAd {\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  private oaid: string = '';\n\n  aboutToAppear() {\n    try {\n      // 使用Promise回调方式获取OAID\n      identifier.getOAID().then((data: string) => {\n        this.oaid = data;\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\n      }).catch((error: BusinessError) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to get adsIdentifierInfo, error code: ${error.code}, message: ${error.message}`);\n      })\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  build() {\n    Column() {\n      Column() {\n        // 跳转到原生广告展示页面\n        Button(\"请求原生广告\", { type: ButtonType.Normal, stateEffect: true }).onClick(() => {\n          this.requestAd();\n        })\n      }.width('100%').height('80%').justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n  }\n\n  private requestAd(): void {\n    // 广告展示参数\n    const adDisplayOptions: advertising.AdDisplayOptions = {\n      // 是否静音，默认不静音\n      mute: false\n    }\n    // 原生广告配置\n    const adOptions: advertising.AdOptions = {\n      // 设置是否请求非个性化广告\n      nonPersonalizedAd: 1,\n      // 是否允许流量下载0：不允许，1：允许，不设置以广告主设置为准\n      allowMobileTraffic: 0,\n      // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\n      tagForChildProtection: -1,\n      // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\n      tagForUnderAgeOfPromise: -1,\n      // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\n      adContentClassification: 'A'\n    }\n    // 原生广告请求参数\n    const nativeVideoAdReqParams: advertising.AdRequestParams = {\n      // 'testu7m3hc4gvm'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n      adId: 'testu7m3hc4gvm',\n      adType: 3,\n      adCount: 1,\n      // 原生广告自定义扩展参数。等所有广告素材下载完后再回调\n      enableDirectReturnVideoAd: true,\n      oaid: this.oaid\n    }\n    // 广告请求回调监听\n    const adLoaderListener: advertising.AdLoadListener = {\n      // 广告请求失败回调\n      onAdLoadFailure: (errorCode: number, errorMsg: string) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to request ad, message: ${errorMsg}, error code: ${errorCode}`);\n      },\n      // 广告请求成功回调\n      onAdLoadSuccess: (ads: Array<advertising.Advertisement>) => {\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting ad');\n        // 调用原生广告展示页面\n        routePage('pages/NativeAdPage', ads, adDisplayOptions);\n      }\n    };\n    // 创建AdLoader广告对象\n    const load: advertising.AdLoader = new advertising.AdLoader(this.context);\n    // 调用广告请求接口\n    load.loadAd(nativeVideoAdReqParams, adOptions, adLoaderListener);\n  }\n}\n\nasync function routePage(pageUri: string, ads: Array<advertising.Advertisement | null>,\n  displayOptions: advertising.AdDisplayOptions) {\n  let options: router.RouterOptions = {\n    url: pageUri,\n    params: {\n      ads: ads,\n      displayOptions: displayOptions\n    }\n  }\n  try {\n    router.pushUrl(options);\n  } catch (error) {\n    hilog.error(0x0000, 'testTag', '%{public}s',\n      `Failed to routePage callback, code: ${error.code}, msg: ${error.message}`);\n  }\n}   请求多广告与请求单广告类似，需要创建一个AdLoader对象，通过AdLoader的loadAdWithMultiSlots方法请求广告，最后通过MultiSlotsAdLoadListener，来监听广告的加载状态。示例代码如下：import { advertising, identifier } from '@kit.AdsKit';\nimport { router } from '@kit.ArkUI';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct LoadAd {\n  private ads: Array<advertising.Advertisement> = [];\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  private oaid: string = '';\n\n  aboutToAppear() {\n    try {\n      // 使用Promise回调方式获取OAID\n      identifier.getOAID().then((data: string) => {\n        this.oaid = data;\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\n      }).catch((error: BusinessError) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to get adsIdentifierInfo, code: ${error.code}, message: ${error.message}`);\n      })\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  build() {\n    Column() {\n      Column() {\n        // 跳转到原生广告展示页面\n        Button(\"请求原生广告\", { type: ButtonType.Normal, stateEffect: true }).onClick(() => {\n          this.requestAd();\n        })\n      }.width('100%').height('80%').justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n  }\n\n  private requestAd(): void {\n    // 广告展示参数\n    const adDisplayOptions: advertising.AdDisplayOptions = {\n      // 是否静音，默认不静音\n      mute: false\n    }\n    // 原生广告配置\n    const adOptions: advertising.AdOptions = {\n      // 是否允许流量下载 0不允许 1允许，不设置以广告主设置为准\n      allowMobileTraffic: 0,\n      // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\n      tagForChildProtection: -1,\n      // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\n      tagForUnderAgeOfPromise: -1,\n      // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\n      adContentClassification: 'A'\n    };\n\n    // 原生广告请求参数\n    const nativeVideoAdReqParams: advertising.AdRequestParams[] = [{\n      // 'testy63txaom86'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n      adId: 'testy63txaom86',\n      adType: 3,\n      adCount: 1,\n      // 原生广告自定义扩展参数。等所有广告素材下载完后再回调\n      enableDirectReturnVideoAd: true,\n      oaid: this.oaid\n    }, {\n      // 'testu7m3hc4gvm'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n      adId: 'testu7m3hc4gvm',\n      adType: 3,\n      adCount: 1,\n      // 原生广告自定义扩展参数。等所有广告素材下载完后再回调\n      enableDirectReturnVideoAd: true,\n      oaid: this.oaid\n    }]\n    // 广告请求回调监听\n    const adLoaderListener: advertising.MultiSlotsAdLoadListener = {\n      // 广告请求失败回调\n      onAdLoadFailure: (errorCode: number, errorMsg: string) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to request ad errorCode is: ${errorCode}, errorMsg is: ${errorMsg}`);\n      },\n      // 广告请求成功回调\n      onAdLoadSuccess: (ads: Map<string, Array<advertising.Advertisement>>) => {\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting ad!');\n        ads.forEach((adsArray) => this.ads.push(...adsArray));\n        // 调用原生广告展示页面\n        routePage('pages/NativeAdPage', this.ads, adDisplayOptions);\n      }\n    };\n    // 创建AdLoader广告对象\n    const load: advertising.AdLoader = new advertising.AdLoader(this.context);\n    // 调用广告请求接口\n    load.loadAdWithMultiSlots(nativeVideoAdReqParams, adOptions, adLoaderListener);\n  }\n}\n\nasync function routePage(pageUri: string, ads: Array<advertising.Advertisement | null>,\n  displayOptions: advertising.AdDisplayOptions) {\n  let options: router.RouterOptions = {\n    url: pageUri,\n    params: {\n      ads: ads,\n      displayOptions: displayOptions\n    }\n  }\n  try {\n    router.pushUrl(options);\n  } catch (error) {\n    hilog.error(0x0000, 'testTag', '%{public}s',\n      `Failed to routePage callback, code: ${error.code}, msg: ${error.message}`);\n  }\n}  展示广告在您的页面中使用AdComponent组件展示原生广告。您需要在entry/src/main/resources/base/profile/main_pages.json文件中添加pages/NativeAdPage页面，如下图所示。  示例代码如下所示：import { advertising, AdComponent } from '@kit.AdsKit';\nimport { Prompt, router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct NativeAdPage {\n  // 广告内容\n  private ads: Array<advertising.Advertisement> = [];\n  private adDisplayOptions: advertising.AdDisplayOptions = {\n    // 是否静音，默认不静音\n    mute: false\n  }\n\n  aboutToAppear() {\n    const params: Record<string, Object> = router.getParams() as Record<string, Object>;\n    if (params && params.ads as Array<advertising.Advertisement> &&\n      params.displayOptions as advertising.AdDisplayOptions) {\n      this.ads = params.ads as Array<advertising.Advertisement>;\n      this.adDisplayOptions = params.displayOptions as advertising.AdDisplayOptions;\n    }\n  }\n\n  build() {\n    Column() {\n      List({ space: 20, initialIndex: 0 }) {\n        ForEach(this.ads, (ad: advertising.Advertisement) => {\n          ListItem() {\n            AdComponent({\n              ads: [ad],\n              displayOptions: this.adDisplayOptions,\n              interactionListener: {\n                onStatusChanged: (status: string, ad: advertising.Advertisement, data: string) => {\n                  switch (status) {\n                    case 'onAdOpen':\n                      Prompt.showToast({\n                        message: 'native ad open',\n                        duration: 1000\n                      });\n                      break;\n                    case 'onAdClick':\n                      Prompt.showToast({\n                        message: 'native ad click',\n                        duration: 1000\n                      });\n                      break;\n                    case 'onAdClose':\n                      Prompt.showToast({\n                        message: 'native ad close',\n                        duration: 1000\n                      });\n                      break;\n                    default:\n                  }\n                }\n              }\n            })\n              .width('100%')\n          }\n        })\n      }\n      .listDirection(Axis.Vertical)\n      .scrollBar(BarState.Off)\n      .friction(0.6)\n      .divider({\n        strokeWidth: 2,\n        color: Color.White,\n        startMargin: 20,\n        endMargin: 20\n      })\n      .edgeEffect(EdgeEffect.Spring)\n      .width('100%')\n      .height('100%')\n    }.width('100%').height('100%')\n  }\n}  在原生广告场景中通常不需要显式设置AdComponent组件的高度，AdComponent组件会自动调整高度以适应需要展示的内容   
