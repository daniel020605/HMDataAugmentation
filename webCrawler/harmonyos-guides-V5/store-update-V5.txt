应用市场更新功能
应用市场更新功能为开发者提供版本检测、显示更新提醒功能。开发者使用应用市场更新功能可以提醒用户及时更新到最新版本。
场景介绍
当应用启动完成或用户在应用中主动检查应用新版本时，开发者可以通过本服务，来查询应用是否有可更新的版本。如果存在可更新版本，您可以通过本服务为用户显示更新提醒。
业务流程
 应用调用检查更新接口。 升级服务API返回是否有新版本。 调用显示升级对话框接口。 升级服务API向应用返回显示结果。 
接口说明
应用市场更新服务提供以下接口，具体API说明详见接口文档。
接口名
描述
checkAppUpdate(context: common.UIAbilityContext): Promise<CheckUpdateResult>
检查更新接口，用于检测当前是否有新版本。
showUpdateDialog(context:common.UIAbilityContext): Promise<ShowUpdateResultCode>
显示升级对话框接口，用于提示用户进行升级。
开发步骤
[h2]检测新版本
 导入updateManager模块及相关公共模块。import { updateManager } from '@kit.StoreKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport type { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';  构造参数。         入参为common.UIAbilityContext类型的Context。        let context: common.UIAbilityContext = getContext() as common.UIAbilityContext;   调用checkAppUpdate方法。try {\n  updateManager.checkAppUpdate(context)\n    .then((checkResult: updateManager.CheckUpdateResult) => {\n      hilog.info(0, 'TAG', \"Succeeded in checking Result updateAvailable:\" + checkResult.updateAvailable);\n    }).catch((error: BusinessError) => {\n    hilog.error(0, 'TAG', `checkAppUpdate onError.code is ${error.code}, message is ${error.message}`);\n  });\n} catch (error) {\n  hilog.error(0, 'TAG', `checkAppUpdate onError.code is ${error.code}, message is ${error.message}`);\n}  
[h2]显示升级对话框
 导入updateManager 模块及相关公共模块。import { updateManager } from '@kit.StoreKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport type { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';  构造参数。         入参为common.UIAbilityContext类型的Context。        let context: common.UIAbilityContext = getContext() as common.UIAbilityContext;   调用showUpdateDialog方法。try {\n  updateManager.showUpdateDialog(context)\n    .then((resultCode: updateManager.ShowUpdateResultCode) => {\n      hilog.info(0, 'TAG', \"Succeeded in showing UpdateDialog resultCode:\" + resultCode);\n    })\n    .catch((error: BusinessError) => {\n      hilog.error(0, 'TAG', `showUpdateDialog onError.code is ${error.code}, message is ${error.message}`);\n    });\n} catch (error) {\n  hilog.error(0, 'TAG', `showUpdateDialog onError.code is ${error.code}, message is ${error.message}`);\n}  
