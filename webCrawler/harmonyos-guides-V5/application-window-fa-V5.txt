管理应用窗口（FA模型）
基本概念
窗口沉浸式能力：指对状态栏、导航栏等系统窗口进行控制，减少状态栏导航栏等系统界面的突兀感，从而使用户获得最佳体验的能力。
沉浸式能力只在应用主窗口作为全屏窗口时生效。通常情况下，应用子窗口（弹窗、悬浮窗口等辅助窗口）和处于自由窗口下的应用主窗口无法使用沉浸式能力。
当前沉浸式界面开发仅支持window级别的配置，暂不支持Page级别的配置。若有Page级别切换的需要，可以在页面生命周期开始，例如onPageShow中设置沉浸模式，然后在页面退出，例如onPageHide中恢复默认设置来实现。
场景介绍
在FA模型下，管理应用窗口的典型场景有：
 设置应用子窗口属性及目标页面 体验窗口沉浸式能力 
以下分别介绍具体开发方式。
接口说明
上述场景涉及的常用接口如下表所示。更多API说明请参见API参考。
创建子窗口。
-config：创建窗口时的参数。
根据当前工程中某个页面的路径为窗口加载具体的页面内容。
其中path为要加载到窗口中的页面内容的路径，在FA模型下该路径需添加到工程的config.json文件中。
设置窗口内导航栏、状态栏属性。
systemBarProperties：导航栏、状态栏的属性集合。
设置应用子窗口
开发者可以按需创建应用子窗口，如弹窗等，并对其进行属性设置等操作。
由于以下几种情况，移动设备场景下不推荐使用子窗口，优先推荐使用控件overlay能力实现。
 移动设备场景下子窗不能超出主窗口范围，与控件一致。 分屏窗口与自由窗口模式下，主窗口位置大小发生改变时控件实时跟随变化能力优于子窗。 部分设备平台下根据实际的系统配置限制，子窗只有系统默认的动效和圆角阴影，应用无法设置，自由度低。 
[h2]开发步骤
 创建/获取子窗口对象。  可以通过window.createWindow接口创建子窗口。 也可以通过window.findWindow接口来查找已经创建的窗口从而得到子窗口。  import { window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet windowClass: window.Window | null = null;\n// 方式一：创建子窗口。\nlet config: window.Configuration = { name: \"subWindow\", windowType: window.WindowType.TYPE_APP };\nwindow.createWindow(config, (err: BusinessError, data) => {\n  let errCode: number = err.code;\n  if (errCode) {\n    console.error('Failed to create the subWindow. Cause: ' + JSON.stringify(err));\n    return;\n  }\n  console.info('Succeeded in creating subWindow. Data: ' + JSON.stringify(data));\n  windowClass = data;\n});\n// 方式二：查找得到子窗口。\ntry {\n  windowClass = window.findWindow('subWindow');\n} catch (exception) {\n  console.error('Failed to find the Window. Cause: ' + JSON.stringify(exception));\n} 设置子窗口属性。 子窗口创建成功后，可以改变其大小、位置等，还可以根据应用需要设置窗口背景色、亮度等属性。 // 移动子窗口位置。\nlet windowClass: window.Window = window.findWindow(\"test\");\nwindowClass.moveWindowTo(300, 300, (err: BusinessError) => {\n  let errCode: number = err.code;\n  if (errCode) {\n    console.error('Failed to move the window. Cause:' + JSON.stringify(err));\n    return;\n  }\n  console.info('Succeeded in moving the window.');\n});\n// 改变子窗口大小。\nwindowClass.resize(500, 500, (err: BusinessError) => {\n  let errCode: number = err.code;\n  if (errCode) {\n    console.error('Failed to change the window size. Cause:' + JSON.stringify(err));\n    return;\n  }\n  console.info('Succeeded in changing the window size.');\n}); 加载显示子窗口的具体内容。 使用setUIContent和showWindow接口加载显示子窗口的具体内容。 // 为子窗口加载对应的目标页面。\nlet windowClass: window.Window = window.findWindow(\"test\");\nwindowClass.setUIContent(\"pages/page2\", (err: BusinessError) => {\n  let errCode: number = err.code;\n  if (errCode) {\n    console.error('Failed to load the content. Cause: ' + JSON.stringify(err));\n    return;\n  }\n  console.info('Succeeded in loading the content.');\n  // 显示子窗口。\n  windowClass.showWindow((err: BusinessError) => {\n    let errCode: number = err.code;\n    if (errCode) {\n      console.error('Failed to show the window. Cause: ' + JSON.stringify(err));\n      return;\n    }\n    console.info('Succeeded in showing the window.');\n  });\n}); 销毁子窗口。 当不再需要某些子窗口时，可根据场景的具体实现逻辑，使用destroyWindow接口销毁子窗口。 // 销毁子窗口。当不再需要某些子窗口时，可根据场景的具体实现逻辑，使用destroy接口销毁子窗口。\nlet windowClass: window.Window = window.findWindow(\"test\");\nwindowClass.destroyWindow((err: BusinessError) => {\n  let errCode: number = err.code;\n  if (errCode) {\n    console.error('Failed to destroy the subwindow. Cause:' + JSON.stringify(err));\n    return;\n  }\n  console.info('Succeeded in destroying the subwindow.');\n}); 
体验窗口沉浸式能力
在看视频、玩游戏等场景下，用户往往希望隐藏状态栏、导航栏等不必要的系统窗口，从而获得更佳的沉浸式体验。此时可以借助窗口沉浸式能力（窗口沉浸式能力都是针对应用主窗口而言的），达到预期效果。从API version 10开始，沉浸式窗口默认配置为全屏大小并由组件模块控制布局，状态栏、导航栏背景颜色为透明，文字颜色为黑色；应用窗口调用setWindowLayoutFullScreen接口，设置为true表示由组件模块控制忽略状态栏、导航栏的沉浸式全屏布局，设置为false表示由组件模块控制避让状态栏、导航栏的非沉浸式全屏布局。
[h2]开发步骤
 获取主窗口对象。     沉浸式能力需要在成功获取应用主窗口对象的前提下进行。 确保应用内最后显示的窗口为主窗口，然后再使用window.getLastWindow接口来获取得到主窗口。   import { window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet mainWindowClass: window.Window | null = null;\n\n// 获取主窗口。\nclass BaseContext {\n  stageMode: boolean = false;\n}\n\nlet context: BaseContext = { stageMode: false };\nwindow.getLastWindow(context, (err: BusinessError, data) => {\n  let errCode: number = err.code;\n  if (errCode) {\n    console.error('Failed to get the subWindow. Cause: ' + JSON.stringify(err));\n    return;\n  }\n  console.info('Succeeded in getting subWindow. Data: ' + JSON.stringify(data));\n  mainWindowClass = data;\n}); 实现沉浸式效果。有以下两种方式：  方式一：应用主窗口为全屏窗口时，调用setWindowSystemBarEnable接口，设置导航栏、状态栏不显示，从而达到沉浸式效果。 方式二：调用setWindowLayoutFullScreen接口，设置应用主窗口为全屏布局；然后调用setWindowSystemBarProperties接口，设置导航栏、状态栏的透明度、背景/文字颜色以及高亮图标等属性，使之保持与主窗口显示协调一致，从而达到沉浸式效果。  // 实现沉浸式效果。方式一：设置导航栏、状态栏不显示。\nlet names: Array<'status' | 'navigation'> = [];\nlet mainWindowClass: window.Window = window.findWindow(\"test\");\nmainWindowClass.setWindowSystemBarEnable(names)\n .then(() => {\n   console.info('Succeeded in setting the system bar to be visible.');\n })\n .catch((err: BusinessError) => {\n   console.error('Failed to set the system bar to be visible. Cause:' + JSON.stringify(err));\n });\n// 实现沉浸式效果。\n// 方式二：设置窗口为全屏布局，配合设置状态栏、导航栏的透明度、背景/文字颜色及高亮图标等属性，与主窗口显示保持协调一致。\nlet isLayoutFullScreen: boolean = true;\nmainWindowClass.setWindowLayoutFullScreen(isLayoutFullScreen)\n .then(() => {\n   console.info('Succeeded in setting the window layout to full-screen mode.');\n })\n .catch((err: BusinessError) => {\n   console.error('Failed to set the window layout to full-screen mode. Cause:' + JSON.stringify(err));\n });\nlet sysBarProps: window.SystemBarProperties = {\n  statusBarColor: '#ff00ff',\n  navigationBarColor: '#00ff00',\n  // 以下两个属性从API Version8开始支持。\n  statusBarContentColor: '#ffffff',\n  navigationBarContentColor: '#ffffff'\n};\nmainWindowClass.setWindowSystemBarProperties(sysBarProps)\n .then(() => {\n   console.info('Succeeded in setting the system bar properties.');\n })\n .catch((err: BusinessError) => {\n   console.error('Failed to set the system bar properties. Cause: ' + JSON.stringify(err));\n }); 加载显示沉浸式窗口的具体内容。 使用setUIContent和showWindow接口加载显示沉浸式窗口的具体内容。 // 为沉浸式窗口加载对应的目标页面。\nlet mainWindowClass: window.Window = window.findWindow(\"test\");\nmainWindowClass.setUIContent(\"pages/page3\", (err: BusinessError) => {\n  let errCode: number = err.code;\n  if (errCode) {\n    console.error('Failed to load the content. Cause: ' + JSON.stringify(err));\n    return;\n  }\n  console.info('Succeeded in loading the content.');\n  // 显示沉浸式窗口。\n  mainWindowClass.showWindow((err: BusinessError) => {\n    let errCode: number = err.code;\n    if (errCode) {\n      console.error('Failed to show the window. Cause: ' + JSON.stringify(err));\n      return;\n    }\n    console.info('Succeeded in showing the window.');\n  });\n}); 
