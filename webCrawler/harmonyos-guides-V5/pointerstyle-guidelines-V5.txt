鼠标光标开发指导
场景介绍
鼠标光标控制提供鼠标光标显示和隐藏、光标样式查询和设置的能力。使用场景例如：用户在全屏观看视频时，开发者可以控制鼠标光标的显示隐藏；当用户执行取色时，开发者可以将鼠标光标样式切换为取色器样式。
导入模块
import { pointer } from '@kit.InputKit';
接口说明
鼠标光标控制常用接口如下表所示，接口详细介绍请参见ohos.multimodalInput.pointer文档。
设置鼠标光标隐藏
用户在全屏观看视频时，可以调用鼠标光标的隐藏接口设置鼠标光标不可见，提升用户体验。
[h2]开发步骤
 应用切换到全屏播放。 在应用中调用鼠标光标隐藏接口隐藏光标。 应用退出全屏播放。 在应用中调用鼠标光标显示接口显示光标。 
import { pointer } from '@kit.InputKit';\n\n// 1.应用切换到全屏播放\n// 2.调用鼠标光标隐藏接口隐藏光标\ntry {\n  pointer.setPointerVisible(false, (error: Error) => {\n    if (error) {\n      console.log(`Set pointer visible failed, error: ${JSON.stringify(error, [`code`, `message`])}`);\n      return;\n    }\n    console.log(`Set pointer visible success.`);\n  });\n} catch (error) {\n  console.log(`The mouse pointer hide attributes is failed. ${JSON.stringify(error, [`code`, `message`])}`);\n}\n\n// 3.应用退出全屏播放\n// 4.调用鼠标光标显示接口显示光标\ntry {\n  pointer.setPointerVisible(true, (error: Error) => {\n    if (error) {\n      console.log(`Set pointer visible failed, error: ${JSON.stringify(error, [`code`, `message`])}`);\n      return;\n    }\n    console.log(`Set pointer visible success.`);\n  });\n} catch (error) {\n  console.log(`Set pointer visible failed, ${JSON.stringify(error, [`code`, `message`])}`);\n}
设置鼠标光标样式
当开发者设计取色器特性时，可以将鼠标光标样式切换为取色器样式，完成取色后，设置鼠标光标样式为默认样式，该接口设置和查询当前应用内指定窗口的光标样式，总共可设置43种光标样式，具体参考光标样式。
[h2]开发步骤
 开发者使能取色功能。 调用窗口实例获取对应的窗口id。 设置鼠标光标样式为取色器样式。 取色结束。 设置鼠标光标样式为默认样式。 
import { pointer } from '@kit.InputKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { window } from '@kit.ArkUI';\n\n// 1.开发者使能取色功能\n// 2.调用窗口实例获取对应的窗口id\nwindow.getLastWindow(getContext(), (error: BusinessError, windowClass: window.Window) => {\n  if (error.code) {\n    console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(error));\n    return;\n  }\n  let windowId = windowClass.getWindowProperties().id;\n  if (windowId < 0) {\n    console.log(`Invalid windowId`);\n    return;\n  }\n  try {\n    // 3.设置鼠标光标样式为取色器样式\n    pointer.setPointerStyle(windowId, pointer.PointerStyle.COLOR_SUCKER).then(() => {\n      console.log(`Successfully set mouse pointer style`);\n    });\n  } catch (error) {\n    console.log(`Failed to set the pointer style, error=${JSON.stringify(error)}, msg=${JSON.stringify(`message`)}`);\n  }\n});\n// 4.取色结束\nwindow.getLastWindow(getContext(), (error: BusinessError, windowClass: window.Window) => {\n  if (error.code) {\n    console.error('Failed to obtain the top window. Cause: ' + JSON.stringify(error));\n    return;\n  }\n  let windowId = windowClass.getWindowProperties().id;\n  if (windowId < 0) {\n    console.log(`Invalid windowId`);\n    return;\n  }\n  try {\n    // 5.设置鼠标光标样式为默认样式\n    pointer.setPointerStyle(windowId, pointer.PointerStyle.DEFAULT).then(() => {\n      console.log(`Successfully set mouse pointer style`);\n    });\n  } catch (error) {\n    console.log(`Failed to set the pointer style, error=${JSON.stringify(error)}, msg=${JSON.stringify(`message`)}`);\n  }\n});
