适配相机旋转角度(ArkTS)
屏幕处于不同的屏幕状态时，原始图像需旋转不同的角度，以确保图像在合适的方向显示，效果如图所示。
本开发指导将指导开发者在预览、拍照、录像等不同场景下，如何适配相机的旋转角度。
在预览时，图像旋转角度与屏幕显示旋转角度（Display.rotation）相关。具体开发指导：创建会话 > 预览在拍照、录像时，图像旋转角度与设备重力方向（即设备旋转角度）相关。拍照开发指导：创建会话 > 计算设备旋转角度 > 拍照 录像开发指导：创建会话 > 计算设备旋转角度 > 录像 
详细的API参考说明，请参考Camera API文档。
创建会话
导入相机等相关模块。import { camera } from '@kit.CameraKit'; \nimport { BusinessError } from '@kit.BasicServicesKit'; 创建Session会话。相机使用预览等功能前，均需创建相机会话，调用CameraManager类中的createSession方法创建一个会话，创建会话时需指定创建SceneMode为NORMAL_PHOTO或NORMAL_VIDEO，创建的session处于拍照或者录像模式。 function createPhotoSession(cameraManager: camera.CameraManager): camera.Session | undefined {\n  let session: camera.Session | undefined = undefined;\n  try {\n    session = cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO) as camera.PhotoSession;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to create the session instance. error: ${JSON.stringify(err)}`);\n  }\n  return session;\n}\n\nfunction createVideoSession(cameraManager: camera.CameraManager): camera.Session | undefined {\n  let session: camera.Session | undefined = undefined;\n  try {\n    session = cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO) as camera.PhotoSession;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to create the session instance. error: ${JSON.stringify(err)}`);\n  }\n  return session;\n} 
预览
完成会话创建后，开发者可根据实际需求，配置输出流。
调用PreviewOutput类中的getPreviewRotation接口，获取预览旋转角度。displayRotation：显示设备的屏幕旋转角度，可通过display.getDefaultDisplaySync获取Display对象并读取其rotation属性值，并将对应角度填入。 例：Display.rotation = 1，表示显示设备屏幕顺时针旋转为90°，此处displayRotation填入90。 import { display } from '@kit.ArkUI'; \n\nlet initDisplayRotation = display.getDefaultDisplaySync().rotation;\nlet imageRotation = initDisplayRotation * camera.ImageRotation.ROTATION_90; 该接口需要在session调用commitConfig完成配流后调用。function getPreviewRotation(previewOutput: camera.PreviewOutput, imageRotation : camera.ImageRotation): camera.ImageRotation {\n  let previewRotation: camera.ImageRotation = camera.ImageRotation.ROTATION_0;\n  try {\n    previewRotation = previewOutput.getPreviewRotation(imageRotation);\n    console.log(`Preview rotation is: ${previewRotation}`);\n  } catch (error) {\n    // 失败返回错误码error.code并处理\n    let err = error as BusinessError;\n    console.error(`The previewOutput.getPreviewRotation call failed. error code: ${err.code}`);\n  }\n  return previewRotation;\n}  调用PreviewOutput类中的setPreviewRotation，设置图像的预览旋转角度。该接口需要在session调用commitConfig完成配流后调用。 previewRotation：预览旋转角度，取上一步getPreviewRotation的返回值。isDisplayLocked：可选入参，默认为false。当设置为false，即屏幕方向未锁定，预览旋转角度将根据相机镜头角度+屏幕显示旋转角度的值计算；当设置为true，Surface旋转锁定，不跟随窗口变化，旋转角度仅取相机镜头角度计算。 function setPreviewRotation(previewOutput: camera.PreviewOutput, previewRotation : camera.ImageRotation, isDisplayLocked: boolean): void {\n  try {\n    previewOutput.setPreviewRotation(previewRotation, isDisplayLocked);\n  } catch (error) {\n    // 失败返回错误码error.code并处理\n    let err = error as BusinessError;\n    console.error(`The previewOutput.setPreviewRotation call failed. error code: ${err.code}`);\n  }\n} 
import { display } from '@kit.ArkUI';   \n\nlet initDisplayRotation = display.getDefaultDisplaySync().rotation;\nlet initPreviewRotation = previewOutput.getPreviewRotation(initDisplayRotation * camera.ImageRotation.ROTATION_90);\npreviewOutput.setPreviewRotation(initPreviewRotation, false);\ndisplay.off('change');\ndisplay.on('change', () => {\n  initDisplayRotation = display.getDefaultDisplaySync().rotation;\n  let imageRotation = initDisplayRotation * camera.ImageRotation.ROTATION_90;\n  let previewRotation = previewOutput.getPreviewRotation(imageRotation);\n  previewOutput.setPreviewRotation(previewRotation, false);\n});
拍照
完成会话创建后，开发者可根据实际需求，配置输出流。拍照的旋转角度与重力方向（即设备旋转角度）相关。
调用PhotoOutput类中的getPhotoRotation可以获取到拍照旋转角度。该接口需要在session调用commitConfig完成配流后调用。 deviceDegree：设备旋转角度。获取方式请见计算设备旋转角度。 function getPhotoRotation(photoOutput: camera.PhotoOutput, deviceDegree: number): camera.ImageRotation {\n  let photoRotation: camera.ImageRotation = camera.ImageRotation.ROTATION_0;\n  try {\n    photoRotation = photoOutput.getPhotoRotation(deviceDegree); \n    console.log(`Photo rotation is: ${photoRotation}`); \n  } catch (error) {  \n    // 失败返回错误码error.code并处理 \n    let err = error as BusinessError;   \n    console.error(`The photoOutput.getPhotoRotation call failed. error code: ${err.code}`); \n  }\n  return photoRotation; \n} 应用将拍照角度写入PhotoCaptureSetting.rotation。其余参数的配置及拍照，可参考拍照开发指导。
录像
完成会话创建后，开发者可根据实际需求，配置输出流。录像的旋转角度与重力方向（即设备旋转角度）相关。
调用VideoOutput类中的getVideoRotation可以获取到录像的旋转角度。该接口需要在session调用commitConfig完成配流后调用。 deviceDegree：设备旋转角度。获取方式请见计算设备旋转角度。 function getVideoRotation(videoOutput: camera.VideoOutput, deviceDegree: number): camera.ImageRotation {\n  let videoRotation: camera.ImageRotation = camera.ImageRotation.ROTATION_0;\n  try {\n    videoRotation = videoOutput.getVideoRotation(deviceDegree);\n    console.log(`Video rotation is: ${videoRotation}`);\n  } catch (error) {\n    // 失败返回错误码error.code并处理\n    let err = error as BusinessError;\n    console.error(`The videoOutput.getVideoRotation call failed. error code: ${err.code}`);\n  }\n  return videoRotation;\n} 将录像的旋转角度写入AVMetadata.videoOrientation。其余参数的配置及启动录像，可参考录像开发指导。
计算设备旋转角度
当前可通过调用once(type: SensorId.GRAVITY, callback: Callback<GravityResponse>)获取一次重力传感器在x、y、z三个方向上的数据，计算得出设备旋转角度deviceDegree，示例如下所示。
import { Decimal } from '@kit.ArkTS';\nimport { sensor } from '@kit.SensorServiceKit';\nimport { BusinessError } from '@ohos.base';\n\nfunction getDeviceDegree(): number {\n    let deviceDegree: number = -1;\n    try {\n      sensor.once(sensor.SensorId.GRAVITY, (data: sensor.GravityResponse) => {\n        console.info('Succeeded in invoking once. X-coordinate component: ' + data.x);\n        console.info('Succeeded in invoking once. Y-coordinate component: ' + data.y);\n        console.info('Succeeded in invoking once. Z-coordinate component: ' + data.z);\n        let x = data.x;\n        let y = data.y;\n        let z = data.z;\n        if ((x * x + y * y) * 3 < z * z) {\n          deviceDegree = -1;\n          console.info(\"deviceDegree= \" + deviceDegree);\n        } else {\n          let sd: Decimal = Decimal.atan2(y, -x);\n          let sc: Decimal = Decimal.round(Number(sd) / 3.141592653589 * 180)\n          deviceDegree = 90 - Number(sc);\n          deviceDegree = deviceDegree >= 0 ? deviceDegree% 360 : deviceDegree% 360 + 360;\n          console.info(\"deviceDegree= \" + deviceDegree);\n        }\n      });\n    } catch (error) {\n      let err: BusinessError = error as BusinessError;\n      console.error(`Failed to invoke once. Code: ${err.code}, message: ${err.message}`);\n    }\n    return deviceDegree;\n  }
