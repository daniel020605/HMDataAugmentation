画布的获取与绘制结果的显示（ArkTS）
场景介绍
Canvas即画布，提供绘制基本图形的能力，用于在屏幕上绘制图形和处理图形。开发者可以通过Canvas实现自定义的绘图效果，增强应用的用户体验。
Canvas是图形绘制的核心，本章中提到的所有绘制操作（包括基本图形的绘制、文字的绘制、图片的绘制、图形变换等）都是基于Canvas的。
目前ArkTS有两种获取Canvas的方式：获取可直接显示的Canvas画布、获取离屏的Canvas，前者在调用绘制接口之后无需进行额外的操作即可完成绘制结果的上屏显示，而后者需要依靠已有的显示手段来显示绘制结果。
获取可直接显示的Canvas画布
通过RenderNode获取可直接上屏显示的Canvas画布。
 添加自定义RenderNode。 添加自定义NodeController。 重写自定义RenderNode的draw()函数，获取Canvas进行自定义的绘制操作，即本章下文中的内容。 将自定义NodeController进行显示。 
import { UIContext, NodeController, FrameNode, RenderNode, DrawContext } from '@kit.ArkUI';\nimport { drawing } from '@kit.ArkGraphics2D';\n\n// 1. 自定义RenderNode\nexport class MyRenderNode extends RenderNode {\n  async draw(context: DrawContext) {\n    const canvas = context.canvas\n    // 3. 自定义的绘制相关操作\n    const brush = new drawing.Brush()\n    brush.setColor({red: 255, blue: 0, green: 0, alpha: 255})\n    canvas.attachBrush(brush)\n    canvas.drawRect({left: 0, right: 300, top: 0, bottom: 300})\n  }\n}\n\n// 2. 自定义NodeController\nexport class MyNodeController extends NodeController {\n  private rootNode: FrameNode | null = null;\n  myRenderNode = new MyRenderNode();\n\n  makeNode(uiContext: UIContext): FrameNode {\n    this.rootNode = new FrameNode(uiContext);\n    if (this.rootNode === null) {\n      return this.rootNode\n    }\n\n    const renderNode = this.rootNode.getRenderNode();\n    if (renderNode !== null) {\n      this.myRenderNode.backgroundColor = 0xffffffff;\n      this.myRenderNode.frame = { x: 0, y: 0, width: 4800, height: 4800 };\n      this.myRenderNode.pivot = { x: 0.2, y: 0.8 }\n      this.myRenderNode.scale = { x: 1, y: 1 }\n      renderNode.appendChild(this.myRenderNode);\n      renderNode.clipToFrame = true\n    }\n    return this.rootNode;\n  }\n}\n\n@Entry\n@Component\nstruct RenderTest {\n  @State message: string = 'hello'\n  build() {\n    Row() {\n      Column() {\n        // 4. 将自定义NodeController进行显示\n        NodeContainer(new MyNodeController())\n          .width('100%')\n      }\n      .width('100%')\n      .height('80%')\n    }\n    .height('100%')\n  }\n}
离屏Canvas画布的获取与显示
 添加自定义RenderNode。 添加自定义NodeController。 在MyNodeController的aboutToAppear()函数中创建PixeMap。 重写自定义RenderNode的draw()函数，在其中获取离屏Canvas进行绘制：  利用3中创建的PixelMap构造离屏Canvas。 对离屏Canvas进行自定义的绘制操作。 将离屏Canvas的绘制结果交给RenderNode。  将自定义NodeController进行显示。 
import { UIContext, NodeController, FrameNode, RenderNode, DrawContext } from '@kit.ArkUI';\nimport { image } from '@kit.ImageKit';\nimport { taskpool } from '@kit.ArkTS';\nimport { drawing } from '@kit.ArkGraphics2D';\n\n// 1. 自定义RenderNode\nexport class MyRenderNode extends RenderNode {\n  pixelMap: image.PixelMap | null = null;\n  setPixelMap(pixelMap: image.PixelMap) {\n    this.pixelMap = pixelMap\n  }\n\n  async draw(context: DrawContext) {\n    const canvas = context.canvas\n    if (this.pixelMap != null) {\n      // 4.1 利用3中创建的PixelMap构造离屏Canvas\n      const canvas_ = new drawing.Canvas(this.pixelMap);\n\n      // 4.2 离屏绘制\n      const brush = new drawing.Brush();\n      brush.setColor({ alpha: 255, red: 255, green: 0, blue: 0 });\n      canvas_.attachBrush(brush);\n      canvas_.drawRect({left:0,right:100,top:0,bottom:100});\n\n      // 4.3 将离屏Canvas的绘制结果交给RenderNode\n      canvas.drawImage(this.pixelMap, 0, 0);\n    }\n  }\n}\n\n@Concurrent\nasync function CreatePixelMapAsync() {\n  const color : ArrayBuffer = new ArrayBuffer(40000);  // 40000为需要创建的像素buffer大小，取值为：height * width *4\n  let opts : image.InitializationOptions = { editable: true, pixelFormat: 3, size: { height: 100, width: 100 } }\n  const pixel = await image.createPixelMap(color, opts);\n  return pixel;\n}\n\n// 2. 自定义NodeController\nexport class MyNodeController extends NodeController {\n  private rootNode: FrameNode | null = null;\n  myRenderNode = new MyRenderNode();\n\n  // 3. 在MyNodeController的aboutToAppear中创建PixeMap\n  aboutToAppear(): void {\n    let task = new taskpool.Task(CreatePixelMapAsync);\n    taskpool.execute(task).then((pixel:Object)=>{\n      this.myRenderNode.setPixelMap(pixel as image.PixelMap)\n      this.myRenderNode.invalidate()\n    })\n  }\n\n  makeNode(uiContext: UIContext): FrameNode {\n    this.rootNode = new FrameNode(uiContext);\n    if (this.rootNode === null) {\n      return this.rootNode\n    }\n\n    const renderNode = this.rootNode.getRenderNode();\n    if (renderNode !== null) {\n      this.myRenderNode.backgroundColor = 0xffffffff;\n      this.myRenderNode.frame = { x: 0, y: 0, width: 4800, height: 4800 };\n      this.myRenderNode.pivot = { x: 0.2, y: 0.8 }\n      this.myRenderNode.scale = { x: 1, y: 1 }\n      renderNode.appendChild(this.myRenderNode);\n      renderNode.clipToFrame = true\n    }\n    return this.rootNode;\n  }\n}\n\n\n@Entry\n@Component\nstruct RenderTest {\n  @State message: string = 'hello'\n  nodeController = new MyNodeController()\n\n  build() {\n    Row() {\n      Column() {\n        // 5. 将自定义NodeController进行显示\n        NodeContainer(this.nodeController)\n          .width('100%')\n      }\n      .width('100%')\n      .height('80%')\n    }\n    .height('100%')\n  }\n}
