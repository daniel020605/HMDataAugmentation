使用Node-API接口从异步线程向ArkTS线程投递指定优先级和入队方式的的任务
Node-API中的napi_call_threadsafe_function_with_priority接口的功能是从异步线程向ArkTS线程投递任务，底层队列会根据任务的优先级和入队方式来处理任务。
函数说明
napi_status napi_call_threadsafe_function_with_priority(napi_threadsafe_function func,\n                                                        void *data,\n                                                        napi_task_priority priority,\n                                                        bool isTail);
场景介绍
异步线程向ArkTS主线程投递的任务需要根据任务指定的优先级和入队方式进行处理。
调用异步的ArkTS接口示例
[h2]示例代码
模块注册  // napi_init.cpp\n #include \"napi/native_api.h\"\n #include <string.h>\n #include <stdlib.h>\n\n struct CallbackData {\n     napi_threadsafe_function tsfn;\n     napi_async_work work;\n };\n // ArkTS线程的回调实现\n static void CallJs(napi_env env, napi_value jsCb, void *context, void *data) {\n     if (env == nullptr) {\n         return;\n     }\n     napi_value resultNumber = nullptr;\n     napi_value undefined = nullptr;\n     napi_get_undefined(env, &undefined);\n     napi_value number1 = nullptr;\n     napi_create_int32(env, 12, &number1);\n     napi_value number2 = nullptr;\n     napi_create_int32(env, 15, &number2);\n     napi_value argv[2] = {number1, number2};\n     napi_call_function(env, undefined, jsCb, 2, argv, &resultNumber);\n     int32_t res = 0;\n     napi_get_value_int32(env, resultNumber, &res);\n }\n\n // 异步线程中调用该接口向ArkTS线程投递指定优先级和入队方式的任务\n static void ExecuteWork(napi_env env, void *data) {\n     CallbackData *callbackData = reinterpret_cast<CallbackData *>(data);\n     // 执行任务为napi_priority_idle优先级，入队方式为队列尾部入队\n     napi_call_threadsafe_function_with_priority(callbackData->tsfn, nullptr, napi_priority_idle, true);\n     napi_call_threadsafe_function_with_priority(callbackData->tsfn, nullptr, napi_priority_low, true);\n     napi_call_threadsafe_function_with_priority(callbackData->tsfn, nullptr, napi_priority_high, true);\n     napi_call_threadsafe_function_with_priority(callbackData->tsfn, nullptr, napi_priority_immediate, true);\n     // 执行任务为napi_priority_high优先级，入队方式为队列头部入队\n     napi_call_threadsafe_function_with_priority(callbackData->tsfn, nullptr, napi_priority_high, false);\n }\n\n static void WorkComplete(napi_env env, napi_status status, void *data) {\n     CallbackData *callbackData = reinterpret_cast<CallbackData *>(data);\n     napi_release_threadsafe_function(callbackData->tsfn, napi_tsfn_release);\n     napi_delete_async_work(env, callbackData->work);\n     callbackData->work = nullptr;\n     callbackData->tsfn = nullptr;\n }\n\n static napi_value CallThreadSafeWithPriority(napi_env env, napi_callback_info info) {\n     size_t argc = 1;\n     napi_value jsCb = nullptr;\n     CallbackData *callbackData = nullptr;\n     napi_get_cb_info(env, info, &argc, &jsCb, nullptr, reinterpret_cast<void **>(&callbackData));\n     napi_value resourceName = nullptr;\n     napi_create_string_utf8(env, \"Thread-safe Function Demo\", NAPI_AUTO_LENGTH, &resourceName);\n     napi_create_threadsafe_function(env, jsCb, nullptr, resourceName, 0, 1, callbackData, nullptr, callbackData, CallJs,\n                                     &callbackData->tsfn);\n     napi_create_async_work(env, nullptr, resourceName, ExecuteWork, WorkComplete, callbackData, &callbackData->work);\n     napi_queue_async_work(env, callbackData->work);\n     return nullptr;\n }\n\n // 注册模块接口\n EXTERN_C_START\n static napi_value Init(napi_env env, napi_value exports)\n {\n     CallbackData *callbackData = new CallbackData();\n     napi_property_descriptor desc[] = {\n         { \"callThreadSafeWithPriority\", nullptr, CallThreadSafeWithPriority, nullptr, nullptr, nullptr, napi_default, callbackData }\n     };\n     napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n     return exports;\n }\n EXTERN_C_END\n\n static napi_module nativeModule = {\n     .nm_version = 1,\n     .nm_flags = 0,\n     .nm_filename = nullptr,\n     .nm_register_func = Init,\n     .nm_modname = \"entry\",\n     .nm_priv = nullptr,\n     .reserved = { 0 },\n };\n\n extern \"C\" __attribute__((constructor)) void RegisterEntryModule()\n {\n     napi_module_register(&nativeModule);\n } 接口声明 // index.d.ts\nexport const callThreadSafeWithPriority: (cb: (a: number, b: number) => number) => void; 编译配置 CMakeLists.txt文件需要按照如下配置 // CMakeLists.txt\n# the minimum version of CMake.\ncmake_minimum_required(VERSION 3.4.1)\nproject(myapplication)\n\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\n\nif(DEFINED PACKAGE_FIND_FILE)\n    include(${PACKAGE_FIND_FILE})\nendif()\n\ninclude_directories(${NATIVERENDER_ROOT_PATH}\n                    ${NATIVERENDER_ROOT_PATH}/include)\nadd_library(entry SHARED hello.cpp)\ntarget_link_libraries(entry PUBLIC libace_napi.z.so) ArkTS代码示例 // index.ets\nimport testNapi from 'libentry.so'\n\nlet callback = (a: number, b: number) : number => {\n    console.info('result is ' + (a + b))\n    return a + b;\n}\ntestNapi.callThreadSafeWithPriority(callback); 
