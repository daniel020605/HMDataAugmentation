@LocalBuilder装饰器： 维持组件父子关系
当开发者使用@Builder做引用数据传递时，会考虑组件的父子关系，使用了bind(this)之后，组件的父子关系和状态管理的父子关系并不一致。为了解决组件的父子关系和状态管理的父子关系保持一致的问题，引入@LocalBuilder装饰器。@LocalBuilder拥有和局部@Builder相同的功能，且比局部@Builder能够更好的确定组件的父子关系和状态管理的父子关系。
在阅读本文档前，建议提前阅读：@Builder。
从API version 12开始支持。
装饰器使用说明
[h2]自定义组件内自定义构建函数
定义的语法：
@LocalBuilder MyBuilderFunction() { ... }
使用方法：
this.MyBuilderFunction()
允许在自定义组件内定义一个或多个@LocalBuilder方法，该方法被认为是该组件的私有、特殊类型的成员函数。自定义构建函数可以在所属组件的build方法和其他自定义构建函数中调用，但不允许在组件外调用。在自定义函数体中，this指代当前所属组件，组件的状态变量可以在自定义构建函数内访问。建议通过this访问自定义组件的状态变量而不是参数传递。
限制条件
@LocalBuilder只能在所属组件内声明，不允许全局声明。 @LocalBuilder不能被内置装饰器和自定义装饰器使用。 自定义组件内的静态方法不能和@LocalBuilder一起使用。 
@LocalBuilder和局部@Builder使用区别
@Builder方法引用传参时，为了改变this指向，使用bind(this)后，会导致组件的父子关系和状态管理的父子关系不一致，但是@LocalBuilder是否使用bind(this)，都不会改变组件的父子关系。@LocalBuilder和@Builder区别说明。
参数传递规则
@LocalBuilder函数的参数传递有按值传递和按引用传递两种，均需遵守以下规则：
参数的类型必须与参数声明的类型一致，不允许undefined、null和返回undefined、null的表达式。 在@LocalBuilder修饰的函数内部，不允许改变参数值。 @LocalBuilder内UI语法遵循UI语法规则。 只有传入一个参数，且参数需要直接传入对象字面量才会按引用传递该参数，其余传递方式均为按值传递。 
[h2]按引用传递参数
按引用传递参数时，传递的参数可为状态变量，且状态变量的改变会引起@LocalBuilder方法内的UI刷新。
若子组件调用父组件的@LocalBuilder函数，传入的参数发生变化，不会引起@LocalBuilder方法内的UI刷新。
使用场景：
组件Parent内的@LocalBuilder方法在build函数内调用，按键值对写法进行传值，当点击Click me 时，@LocalBuilder内的Text文本内容会随着状态变量内容的改变而改变。
class ReferenceType {\n  paramString: string = '';\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State variableValue: string = 'Hello World';\n\n  @LocalBuilder\n  citeLocalBuilder(params: ReferenceType) {\n    Row() {\n      Text(`UseStateVarByReference: ${params.paramString} `)\n    }\n  };\n\n  build() {\n    Column() {\n      this.citeLocalBuilder({ paramString: this.variableValue });\n      Button('Click me').onClick(() => {\n        this.variableValue = 'Hi World';\n      })\n    }\n  }\n}
按引用传递参数时，如果在@LocalBuilder方法内调用自定义组件，ArkUI提供$$作为按引用传递参数的范式。
使用场景：
组件Parent内的@LocalBuilder方法内调用自定义组件，且按照引用传递参数将值传递到自定义组件，当Parent组件内状态变量值发生变化时，@LocalBuilder方法内的自定义组件HelloComponent的message值也会发生变化。
class ReferenceType {\n  paramString: string = '';\n}\n\n@Component\nstruct HelloComponent {\n  @Prop message: string;\n\n  build() {\n    Row() {\n      Text(`HelloComponent===${this.message}`);\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State variableValue: string = 'Hello World';\n\n  @LocalBuilder\n  citeLocalBuilder($$: ReferenceType) {\n    Row() {\n      Column() {\n        Text(`citeLocalBuilder===${$$.paramString}`);\n        HelloComponent({ message: $$.paramString });\n      }\n    }\n  }\n\n  build() {\n    Column() {\n      this.citeLocalBuilder({ paramString: this.variableValue });\n      Button('Click me').onClick(() => {\n        this.variableValue = 'Hi World';\n      })\n    }\n  }\n}
子组件引用父组件的@LocalBuilder函数，传入的参数为状态变量，状态变量的改变不会引发@LocalBuilder方法内的UI刷新，原因是@Localbuilder装饰的函数绑定在父组件上，状态变量刷新机制是刷新本组件以及其子组件，对父组件无影响，故无法引发刷新。若使用@Builder修饰则可引发刷新，原因是@Builder改变了函数的this指向，此时函数被绑定到子组件上，故能引发UI刷新。
使用场景：
组件Child将@State修饰的label值按照函数传参方式传递到Parent的@Builder和@LocalBuilder函数内，在被@Builder修饰的函数内，this指向Child，参数变化能引发UI刷新，在被@LocalBuilder修饰的函数内，this指向Parent，参数变化不能引发UI刷新。
class LayoutSize {\n  size:number = 0;\n}\n\n@Entry\n@Component\nstruct Parent {\n  label:string = 'parent';\n  @State layoutSize:LayoutSize = {size:0};\n\n  @LocalBuilder\n  // @Builder\n  componentBuilder($$:LayoutSize) {\n    Text(`${'this :'+this.label}`);\n    Text(`${'size :'+$$.size}`);\n  }\n\n  build() {\n    Column() {\n      Child({contentBuilder: this.componentBuilder });\n    }\n  }\n}\n\n@Component\nstruct Child {\n  label:string = 'child';\n  @BuilderParam contentBuilder:((layoutSize: LayoutSize) => void);\n  @State layoutSize:LayoutSize = {size:0};\n\n  build() {\n    Column() {\n      this.contentBuilder({size: this.layoutSize.size});\n      Button(\"add child size\").onClick(()=>{\n        this.layoutSize.size += 1;\n      })\n    }\n  }\n}
使用场景：
组件Child将@Link引用Parent的@State修饰的label值按照函数传参方式传递到Parent的@Builder和@LocalBuilder函数内，在被@Builder修饰的函数内，this指向Child，参数变化能引发UI刷新，在被@LocalBuilder修饰的函数内，this指向Parent，参数变化不能引发UI刷新。
class LayoutSize {\n  size:number = 0;\n}\n\n@Entry\n@Component\nstruct Parent {\n  label:string = 'parent';\n  @State layoutSize:LayoutSize = {size:0};\n\n  @LocalBuilder\n  // @Builder\n  componentBuilder($$:LayoutSize) {\n    Text(`${'this :'+this.label}`);\n    Text(`${'size :'+$$.size}`);\n  }\n\n  build() {\n    Column() {\n      Child({contentBuilder: this.componentBuilder,layoutSize:this.layoutSize});\n    }\n  }\n}\n\n@Component\nstruct Child {\n  label:string = 'child';\n  @BuilderParam contentBuilder:((layoutSize: LayoutSize) => void);\n  @Link layoutSize:LayoutSize;\n\n  build() {\n    Column() {\n      this.contentBuilder({size: this.layoutSize.size});\n      Button(\"add child size\").onClick(()=>{\n        this.layoutSize.size += 1;\n      })\n    }\n  }\n}
[h2]按值传递参数
调用@LocalBuilder装饰的函数默认按值传递。当传递的参数为状态变量时，状态变量的改变不会引起@LocalBuilder方法内的UI刷新。所以当使用状态变量的时候，推荐使用按引用传递。
使用场景：
组件Parent将@State修饰的label值按照函数传参方式传递到@LocalBuilder函数内，此时@LocalBuilder函数获取到的值为普通变量值，所以改变@State修饰的label值时，@LocalBuilder函数内的值不会发生改变。
@Entry\n@Component\nstruct Parent {\n  @State label: string = 'Hello';\n\n  @LocalBuilder\n  citeLocalBuilder(paramA1: string) {\n    Row() {\n      Text(`UseStateVarByValue: ${paramA1} `)\n    }\n  }\n\n  build() {\n    Column() {\n      this.citeLocalBuilder(this.label);\n    }\n  }\n}
@LocalBuilder和@Builder区别说明
函数componentBuilder被@Builder修饰时，显示效果是 “Child”，函数componentBuilder被@LocalBuilder修饰时，显示效果是“Parent”。
说明：
@Builder componentBuilder()通过this.componentBuilder的形式传给子组件@BuilderParam customBuilderParam，this指向在Child的label，即“Child”。
@LocalBuilder componentBuilder()通过this.componentBuilder的形式传给子组件@BuilderParam customBuilderParam，this指向Parent的label，即“Parent”。
@Component\nstruct Child {\n  label: string = `Child`;\n  @BuilderParam customBuilderParam: () => void;\n\n  build() {\n    Column() {\n      this.customBuilderParam()\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  label: string = `Parent`;\n\n  @Builder componentBuilder() {\n    Text(`${this.label}`)\n  }\n\n  // @LocalBuilder componentBuilder() {\n  //   Text(`${this.label}`)\n  // }\n\n  build() {\n    Column() {\n      Child({ customBuilderParam: this.componentBuilder })\n    }\n  }\n}
使用场景
[h2]@LocalBuilder在@ComponentV2修饰的自定义组件中使用
使用局部的@LocalBuilder在@ComponentV2修饰的自定义组件中调用，修改变量触发UI刷新。
@ObservedV2\nclass Info {\n  @Trace name: string = '';\n  @Trace age: number = 0;\n}\n\n@ComponentV2\nstruct ChildPage {\n  @Require @Param childInfo: Info;\n  build() {\n    Column() {\n      Text(`自定义组件 name :${this.childInfo.name}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n      Text(`自定义组件 age :${this.childInfo.age}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n}\n\n@Entry\n@ComponentV2\nstruct ParentPage {\n  info1: Info = { name: \"Tom\", age: 25 };\n  @Local info2: Info = { name: \"Tom\", age: 25 };\n\n  @LocalBuilder\n  privateBuilder() {\n    Column() {\n      Text(`局部LocalBuilder@Builder name :${this.info1.name}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n      Text(`局部LocalBuilder@Builder age :${this.info1.age}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n\n  @LocalBuilder\n  privateBuilderSecond() {\n    Column() {\n      Text(`局部LocalBuilder@Builder name :${this.info2.name}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n      Text(`局部LocalBuilder@Builder age :${this.info2.age}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n  build() {\n    Column() {\n      Text(`info1: ${this.info1.name}  ${this.info1.age}`) // Text1\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      this.privateBuilder() // 调用局部@Builder\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Text(`info2: ${this.info2.name}  ${this.info2.age}`) // Text2\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      this.privateBuilderSecond() // 调用局部@Builder\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Text(`info1: ${this.info1.name}  ${this.info1.age}`) // Text1\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      ChildPage({ childInfo: this.info1}) // 调用自定义组件\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Text(`info2: ${this.info2.name}  ${this.info2.age}`) // Text2\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      ChildPage({ childInfo: this.info2}) // 调用自定义组件\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Button(\"change info1&info2\")\n        .onClick(() => {\n          this.info1 = { name: \"Cat\", age: 18} // Text1不会刷新，原因是没有装饰器修饰监听不到值的改变。\n          this.info2 = { name: \"Cat\", age: 18} // Text2会刷新，原因是有装饰器修饰，可以监听到值的改变。\n        })\n    }\n  }\n}
