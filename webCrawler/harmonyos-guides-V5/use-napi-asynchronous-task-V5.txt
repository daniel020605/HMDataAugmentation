使用Node-API接口进行异步任务开发
场景介绍
napi_create_async_work是Node-API接口之一，用于创建一个异步工作对象。可以在需要执行耗时操作的场景中使用，以避免阻塞主线程，确保应用程序的性能和响应性能。例如以下场景：
文件操作：读取大型文件或执行复杂的文件操作时，可以使用异步工作对象来避免阻塞主线程。 网络请求：当需要进行网络请求并等待响应时，使用异步工作对象可以确保主线程不被阻塞，从而提高应用程序的响应性能。 数据库操作：当需要执行复杂的数据库查询或写入操作时，使用异步工作对象可以确保主线程不被阻塞，从而提高应用程序的并发性能。 图像处理：当需要对大型图像进行处理或执行复杂的图像算法时，使用异步工作对象可以确保主线程不被阻塞，从而提高应用程序的实时性能。 
异步调用支持callback方式和Promise方式，使用哪种方式由应用开发者决定，通过是否传递callback函数进行区分。
使用Promise方式示例
使用napi_create_async_work创建异步任务，并使用napi_queue_async_work将异步任务加入队列，等待执行。 struct CallbackData {\n    napi_async_work asyncWork = nullptr;\n    napi_deferred deferred = nullptr;\n    napi_ref callback = nullptr;\n    double args = 0;\n    double result = 0;\n};\n\nstatic napi_value AsyncWork(napi_env env, napi_callback_info info)\n{\n   size_t argc = 1;\n   napi_value args[1];\n   napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n   napi_value promise = nullptr;\n   napi_deferred deferred = nullptr;\n   napi_create_promise(env, &deferred, &promise);\n\n   auto callbackData = new CallbackData();\n   callbackData->deferred = deferred;\n   napi_get_value_double(env, args[0], &callbackData->args);\n\n   napi_value resourceName = nullptr;\n   napi_create_string_utf8(env, \"AsyncCallback\", NAPI_AUTO_LENGTH, &resourceName);\n   // 创建异步任务\n   napi_create_async_work(env, nullptr, resourceName, ExecuteCB, CompleteCB, callbackData, &callbackData->asyncWork);\n   // 将异步任务加入队列\n   napi_queue_async_work(env, callbackData->asyncWork);\n\n   return promise;\n} 定义异步任务的第一个回调函数，该函数在工作线程中执行，处理具体的业务逻辑。 static void ExecuteCB(napi_env env, void *data)\n{\n    CallbackData *callbackData = reinterpret_cast<CallbackData *>(data);\n    callbackData->result = callbackData->args;\n} 定义异步任务的第二个回调函数，该函数在主线程执行，将结果传递给ArkTS侧。 static void CompleteCB(napi_env env, napi_status status, void *data)\n{\n    CallbackData *callbackData = reinterpret_cast<CallbackData *>(data);\n    napi_value result = nullptr;\n    napi_create_double(env, callbackData->result, &result);\n    if (callbackData->result > 0) {\n        napi_resolve_deferred(env, callbackData->deferred, result);\n    } else {\n        napi_reject_deferred(env, callbackData->deferred, result);\n    }\n\n    napi_delete_async_work(env, callbackData->asyncWork);\n    delete callbackData;\n} 模块初始化以及ArkTS侧调用接口。 // 模块初始化\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"asyncWork\", nullptr, AsyncWork, nullptr, nullptr, nullptr, napi_default, nullptr }\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n} // 接口对应的.d.ts描述\nexport const asyncWork: (data: number) => Promise<number>;\n\n// ArkTS侧调用接口\nnativeModule.asyncWork(1024).then((result) => {\n   hilog.info(0x0000, 'XXX', 'result is %{public}d', result);\n }); 
使用callback方式示例
使用napi_create_async_work创建异步任务，并使用napi_queue_async_work将异步任务加入队列，等待执行。 struct CallbackData {\n  napi_async_work asyncWork = nullptr;\n  napi_ref callbackRef = nullptr;\n  double args[2] = {0};\n  double result = 0;\n};\n\nnapi_value AsyncWork(napi_env env, napi_callback_info info)\n{\n    size_t argc = 3;\n    napi_value args[3];\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    auto asyncContext = new CallbackData();\n    // 将接收到的参数保存到callbackData\n    napi_get_value_double(env, args[0], &asyncContext->args[0]);\n    napi_get_value_double(env, args[1], &asyncContext->args[1]);\n    // 将传入的callback转换为napi_ref延长其生命周期，防止被GC掉\n    napi_create_reference(env, args[2], 1, &asyncContext->callbackRef);\n    napi_value resourceName = nullptr;\n    napi_create_string_utf8(env, \"asyncWorkCallback\", NAPI_AUTO_LENGTH, &resourceName);\n    // 创建异步任务\n    napi_create_async_work(env, nullptr, resourceName, ExecuteCB, CompleteCB,\n                           asyncContext, &asyncContext->asyncWork);\n    // 将异步任务加入队列\n    napi_queue_async_work(env, asyncContext->asyncWork);\n    return nullptr;\n} 定义异步任务的第一个回调函数，该函数在工作线程中执行，处理具体的业务逻辑。 static void ExecuteCB(napi_env env, void *data)\n{\n    CallbackData *callbackData = reinterpret_cast<CallbackData *>(data);\n    callbackData->result = callbackData->args[0] + callbackData->args[1];\n} 定义异步任务的第二个回调函数，该函数在主线程执行，将结果传递给ArkTS侧。 static void CompleteCB(napi_env env, napi_status status, void *data)\n{\n    CallbackData *callbackData = reinterpret_cast<CallbackData *>(data);\n    napi_value callbackArg[1] = {nullptr};\n    napi_create_double(env, callbackData->result, &callbackArg[0]);\n    napi_value callback = nullptr;\n    napi_get_reference_value(env, callbackData->callbackRef, &callback);\n    // 执行回调函数\n    napi_value result;\n    napi_value undefined;\n    napi_get_undefined(env, &undefined);\n    napi_call_function(env, undefined, callback, 1, callbackArg, &result);\n    // 删除napi_ref对象以及异步任务\n    napi_delete_reference(env, callbackData->callbackRef);\n    napi_delete_async_work(env, callbackData->asyncWork);\n    delete callbackData;\n} 模块初始化以及ArkTS侧调用接口。 // 模块初始化\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"asyncWork\", nullptr, AsyncWork, nullptr, nullptr, nullptr, napi_default, nullptr }\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n} // 接口对应的.d.ts描述\nexport const asyncWork: (arg1: number, arg2: number, callback: (result: number) => void) => void;\n\n// ArkTS侧调用接口\nlet num1: number = 123;\nlet num2: number = 456;\nnativeModule.asyncWork(num1, num2, (result) => {\n  hilog.info(0x0000, 'XXX', 'result is %{public}d', result);\n}); 
