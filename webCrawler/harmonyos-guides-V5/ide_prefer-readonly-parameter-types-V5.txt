@typescript-eslint/prefer-readonly-parameter-types
要求将函数参数解析为“只读”类型，以防止参数被修改而产生一些副作用。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/prefer-readonly-parameter-types\": \"error\"\n  }\n}
选项
详情请参考@typescript-eslint/prefer-readonly-parameter-types选项。
正例
const index = 0;\nexport function array1(arg: readonly string[]): void {\n  console.info(`${arg[index]}`);\n}\n\nexport function array2(arg: readonly (readonly string[])[]): void {\n  console.info(`${arg[index][index]}`);\n}\nexport function array3(arg: readonly [string, number]): void {\n  console.info(`${arg[index][index]}`);\n}\n\nexport function array4(arg: readonly [readonly string[], number]): void {\n  console.info(`${arg[index][index]}`);\n}\n\nexport function primitive1(arg: string): void {\n  console.info(`${arg}`);\n}\n\nexport function primitive2(arg: number): void {\n  console.info(`${arg}`);\n}\n\nexport function primitive3(arg: boolean): void {\n  console.info(`${arg}`);\n}\n\nexport function primitive5(arg: null): void {\n  console.info(`${arg}`);\n}\n\nexport function primitive6(arg: undefined): void {\n  console.info(`${arg}`);\n}
反例
const index = 0;\nexport function array1(arg: string[]): void {\n  console.info(`${arg[index]}`);\n}\n\nexport function array2(arg: (string[])[]): void {\n  console.info(`${arg[index][index]}`);\n}\nexport function array3(arg: [string, number]): void {\n  console.info(`${arg[index][index]}`);\n}\n\nexport function array4(arg: [string[], number]): void {\n  console.info(`${arg[index][index]}`);\n}
规则集
plugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
