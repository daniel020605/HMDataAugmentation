指定PEM格式字符串数据转换非对称密钥对(ArkTS)
以RSA为例，根据指定的非对称密钥字符串数据，生成非对称密钥对（KeyPair）。
针对非对称密钥的convertPemKey操作：
 公钥需满足：X.509规范、PKCS#1规范、PEM编码格式。 私钥需满足：PKCS#8规范、PKCS#1规范、PEM编码格式。 当前只支持RSA非对称密钥的转换。 
指定PEM格式字符串数据转换RSA密钥对
对应的算法规格请查看非对称密钥生成和转换规格：RSA。
 调用cryptoFramework.createAsyKeyGenerator，指定字符串参数'RSA1024'，创建RSA密钥类型为RSA1024、素数个数为2的非对称密钥生成器（AsyKeyGenerator）。 生成RSA非对称密钥时，默认素数为2，此处省略了参数PRIMES_2。 调用AsyKeyGenerator.convertPemKey，传入二进制密钥数据，生成非对称密钥对象（KeyPair）。 调用AsyKeyGenerator.getEncodedPem，将非对称密钥对象中的公钥转换成pkcs1或x509格式，私钥转换成pkcs1或pkcs8格式。 
 以使用Promise方式生成RSA密钥对为例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\n\nlet priKeyPkcs1Str1024: string  =\n  \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n  + \"MIICXQIBAAKBgQCwIN3mr21+N96ToxnVnaS+xyK9cNRAHiHGgrbjHw6RAj3V+l+W\\n\"\n  + \"Y68IhIe3DudVlzE9oMjeOQwkMkq//HCxNlIlFR6O6pa0mrXSwPRE7YKG97CeKk2g\\n\"\n  + \"YOS8YEh8toAvm7xKbiLkXuuMlxrjP2j/mb5iI/UASFSPZiQ/IyxDr0AQaQIDAQAB\\n\"\n  + \"AoGAEvBFzBNa+7J4PXnRQlYEK/tvsd0bBZX33ceacMubHl6WVZbphltLq+fMTBPP\\n\"\n  + \"LjXmtpC+aJ7Lvmyl+wTi/TsxE9vxW5JnbuRT48rnZ/Xwq0eozDeEeIBRrpsr7Rvr\\n\"\n  + \"7ctrgzr4m4yMHq9aDgpxj8IR7oHkfwnmWr0wM3FuiVlj650CQQDineeNZ1hUTkj4\\n\"\n  + \"D3O+iCi3mxEVEeJrpqrmSFolRMb+iozrIRKuJlgcOs+Gqi2fHfOTTL7LkpYe8SVg\\n\"\n  + \"e3JxUdVLAkEAxvcZXk+byMFoetrnlcMR13VHUpoVeoV9qkv6CAWLlbMdgf7uKmgp\\n\"\n  + \"a1Yp3QPDNQQqkPvrqtfR19JWZ4uy1qREmwJALTU3BjyBoH/liqb6fh4HkWk75Som\\n\"\n  + \"MzeSjFIOubSYxhq5tgZpBZjcpvUMhV7Zrw54kwASZ+YcUJvmyvKViAm9NQJBAKF7\\n\"\n  + \"DyXSKrem8Ws0m1ybM7HQx5As6l3EVhePDmDQT1eyRbKp+xaD74nkJpnwYdB3jyyY\\n\"\n  + \"qc7A1tj5J5NmeEFolR0CQQCn76Xp8HCjGgLHw9vg7YyIL28y/XyfFyaZAzzK+Yia\\n\"\n  + \"akNwQ6NeGtXSsuGCcyyfpacHp9xy8qXQNKSkw03/5vDO\\n\"\n  + \"-----END RSA PRIVATE KEY-----\\n\";\nlet publicPkcs1Str1024: string  =\n  \"-----BEGIN RSA PUBLIC KEY-----\\n\"\n  + \"MIGJAoGBALAg3eavbX433pOjGdWdpL7HIr1w1EAeIcaCtuMfDpECPdX6X5ZjrwiE\\n\"\n  + \"h7cO51WXMT2gyN45DCQySr/8cLE2UiUVHo7qlrSatdLA9ETtgob3sJ4qTaBg5Lxg\\n\"\n  + \"SHy2gC+bvEpuIuRe64yXGuM/aP+ZvmIj9QBIVI9mJD8jLEOvQBBpAgMBAAE=\\n\"\n  + \"-----END RSA PUBLIC KEY-----\\n\";\nasync function TestPkcs1ToPkcs8ByPromise() {\n  let asyKeyGenerator = cryptoFramework.createAsyKeyGenerator('RSA1024');\n  let keyPair = await asyKeyGenerator.convertPemKey(publicPkcs1Str1024, priKeyPkcs1Str1024);\n  let priPemKey = keyPair.priKey;\n  let pubPemKey = keyPair.pubKey;\n  let priString = priPemKey.getEncodedPem('PKCS8');\n  let pubString = pubPemKey.getEncodedPem('X509');\n  console.info(\"[promise]TestPkcs1ToPkcs8ByPromise priString output is \" + priString);\n  console.info(\"[promise]TestPkcs1ToPkcs8ByPromise pubString output is \" + pubString);\n} 同步返回结果（调用方法convertPemKeySync）： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\n\nlet priKeyPkcs1Str1024: string  =\n  \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n  + \"MIICXQIBAAKBgQCwIN3mr21+N96ToxnVnaS+xyK9cNRAHiHGgrbjHw6RAj3V+l+W\\n\"\n  + \"Y68IhIe3DudVlzE9oMjeOQwkMkq//HCxNlIlFR6O6pa0mrXSwPRE7YKG97CeKk2g\\n\"\n  + \"YOS8YEh8toAvm7xKbiLkXuuMlxrjP2j/mb5iI/UASFSPZiQ/IyxDr0AQaQIDAQAB\\n\"\n  + \"AoGAEvBFzBNa+7J4PXnRQlYEK/tvsd0bBZX33ceacMubHl6WVZbphltLq+fMTBPP\\n\"\n  + \"LjXmtpC+aJ7Lvmyl+wTi/TsxE9vxW5JnbuRT48rnZ/Xwq0eozDeEeIBRrpsr7Rvr\\n\"\n  + \"7ctrgzr4m4yMHq9aDgpxj8IR7oHkfwnmWr0wM3FuiVlj650CQQDineeNZ1hUTkj4\\n\"\n  + \"D3O+iCi3mxEVEeJrpqrmSFolRMb+iozrIRKuJlgcOs+Gqi2fHfOTTL7LkpYe8SVg\\n\"\n  + \"e3JxUdVLAkEAxvcZXk+byMFoetrnlcMR13VHUpoVeoV9qkv6CAWLlbMdgf7uKmgp\\n\"\n  + \"a1Yp3QPDNQQqkPvrqtfR19JWZ4uy1qREmwJALTU3BjyBoH/liqb6fh4HkWk75Som\\n\"\n  + \"MzeSjFIOubSYxhq5tgZpBZjcpvUMhV7Zrw54kwASZ+YcUJvmyvKViAm9NQJBAKF7\\n\"\n  + \"DyXSKrem8Ws0m1ybM7HQx5As6l3EVhePDmDQT1eyRbKp+xaD74nkJpnwYdB3jyyY\\n\"\n  + \"qc7A1tj5J5NmeEFolR0CQQCn76Xp8HCjGgLHw9vg7YyIL28y/XyfFyaZAzzK+Yia\\n\"\n  + \"akNwQ6NeGtXSsuGCcyyfpacHp9xy8qXQNKSkw03/5vDO\\n\"\n  + \"-----END RSA PRIVATE KEY-----\\n\";\nlet publicPkcs1Str1024: string  =\n  \"-----BEGIN RSA PUBLIC KEY-----\\n\"\n  + \"MIGJAoGBALAg3eavbX433pOjGdWdpL7HIr1w1EAeIcaCtuMfDpECPdX6X5ZjrwiE\\n\"\n  + \"h7cO51WXMT2gyN45DCQySr/8cLE2UiUVHo7qlrSatdLA9ETtgob3sJ4qTaBg5Lxg\\n\"\n  + \"SHy2gC+bvEpuIuRe64yXGuM/aP+ZvmIj9QBIVI9mJD8jLEOvQBBpAgMBAAE=\\n\"\n  + \"-----END RSA PUBLIC KEY-----\\n\";\nfunction TestPkcs1ToPkcs8BySync() {\n  let asyKeyGenerator = cryptoFramework.createAsyKeyGenerator('RSA1024');\n  try {\n    let keyPairData = asyKeyGenerator.convertPemKeySync(publicPkcs1Str1024, priKeyPkcs1Str1024);\n    if (keyPairData != null) {\n      console.info('[Sync]: convert pem key pair success');\n    } else {\n      console.error(\"[Sync]: convert pem key pair result fail!\");\n    }\n    let priPemKey = keyPairData.priKey;\n    let pubPemKey = keyPairData.pubKey;\n    let priString = priPemKey.getEncodedPem('PKCS8');\n    let pubString = pubPemKey.getEncodedPem('X509');\n    console.info(\"[Sync]TestPkcs1ToPkcs8BySync priString output is \" + priString);\n    console.info(\"[Sync]TestPkcs1ToPkcs8BySync pubString output is \" + pubString);\n  } catch (e) {\n    console.error(`Sync error, ${e.code}, ${e.message}`);\n  }\n} 
