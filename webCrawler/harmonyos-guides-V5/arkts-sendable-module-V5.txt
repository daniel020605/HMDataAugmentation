共享模块
共享模块是进程内只会加载一次的模块，使用\"use shared\"这一指令来标记一个模块是否为共享模块。
非共享模块在同一线程内只加载一次，在不同线程间会加载多次，在不同的线程内都会产生新的模块对象。因此可以使用共享模块来实现进程单例。
约束限制
\"use shared\"需要与\"use strict\"一样写在ArkTS文件顶层，写在import语句之后其他语句之前。 共享属性不存在传递性，即非共享模块A不会引入了共享模块B而使A变成共享。 共享模块只支持ets文件。 共享模块内不允许使用side-effects-import。 共享模块可在线程间共享，共享后函数对依赖的非共享模块会在获取模块化变量值的时候懒加载，这种类型的import不涉及导出变量，所以不会被加载。 // 不允许使用side-effects-import\nimport \"./sharedModule\" 共享模块导出的变量必须都是可共享对象。 共享模块在并发实例间可共享，因此模块导出的所有对象都必须是可共享的，可共享对象参考Sendable规格。 共享模块中不允许直接导出模块。 // test.ets\nexport let num = 1;\nexport let str = 'aaa';\n\n// 共享模块\n'use shared'\n\nexport * from './test'; // 编译报错，不允许直接导出模块\nexport {num, str} from './test'; // 正确示例，导出对象合集 共享模块可以引用共享模块或非共享模块。不限制共享模块的引用和被引用场景。 napi_load_module、napi_load_module_with_info以及动态加载不支持加载共享模块。 
使用示例
共享模块内导出Sendable对象。 // 共享模块sharedModule.ets\nimport { ArkTSUtils } from '@kit.ArkTS';\n\n// 声明当前模块为共享模块，只能导出可Sendable数据\n\"use shared\"\n\n// 共享模块，SingletonA全局唯一\n@Sendable\nclass SingletonA {\n  private count_: number = 0;\n  lock_: ArkTSUtils.locks.AsyncLock = new ArkTSUtils.locks.AsyncLock()\n\n  public async getCount(): Promise<number> {\n    return this.lock_.lockAsync(() => {\n      return this.count_;\n    })\n  }\n\n  public async increaseCount() {\n    await this.lock_.lockAsync(() => {\n      this.count_++;\n    })\n  }\n}\n\nexport let singletonA = new SingletonA(); 在多个线程中操作共享模块导出的对象。 import { ArkTSUtils, taskpool } from '@kit.ArkTS';\nimport { singletonA } from './sharedModule';\n\n@Sendable\nexport class A {\n  private count_: number = 0;\n  lock_: ArkTSUtils.locks.AsyncLock = new ArkTSUtils.locks.AsyncLock();\n\n  public async getCount(): Promise<number> {\n    return this.lock_.lockAsync(() => {\n      return this.count_;\n    })\n  }\n\n  public async increaseCount() {\n    await this.lock_.lockAsync(() => {\n      this.count_++;\n    })\n  }\n}\n\n@Concurrent\nasync function increaseCount() {\n  await singletonA.increaseCount();\n  console.info(\"SharedModule: count is:\" + await singletonA.getCount());\n}\n\n@Concurrent\nasync function printCount() {\n  console.info(\"SharedModule: count is:\" + await singletonA.getCount());\n}\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Button(\"MainThread print count\")\n          .onClick(async () => {\n            await printCount();\n          })\n        Button(\"Taskpool print count\")\n          .onClick(async () => {\n            await taskpool.execute(printCount);\n          })\n        Button(\"MainThread increase count\")\n          .onClick(async () => {\n            await increaseCount();\n          })\n        Button(\"Taskpool increase count\")\n          .onClick(async () => {\n            await taskpool.execute(increaseCount);\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n} 
