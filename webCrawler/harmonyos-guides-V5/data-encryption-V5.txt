数据库加密
场景介绍
为了增强数据库的安全性，数据库提供了一个安全适用的数据库加密能力，从而对数据库存储的内容实施有效保护。通过数据库加密等安全方法实现了数据库数据存储的保密性和完整性要求，使得数据库以密文方式存储并在密态方式下工作，确保了数据安全。
加密后的数据库只能通过接口进行访问，无法通过其它方式打开数据库文件。数据库的加密属性在创建数据库时确认，无法变更。
键值型数据库和关系型数据库均支持数据库加密操作。
键值型数据库加密
键值型数据库，通过options中encrypt参数来设置是否加密，默认为false，表示不加密。encrypt参数为true时表示加密。
具体接口及功能，可见分布式键值数据库。
import { distributedKVStore } from '@kit.ArkData';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet kvManager: distributedKVStore.KVManager | undefined = undefined;\nlet kvStore: distributedKVStore.SingleKVStore | undefined = undefined;\nlet context = getContext(this);\nconst kvManagerConfig: distributedKVStore.KVManagerConfig = {\n  context: context,\n  bundleName: 'com.example.datamanagertest',\n}\ntry {\n  kvManager = distributedKVStore.createKVManager(kvManagerConfig);\n  console.info('Succeeded in creating KVManager.');\n} catch (e) {\n  let error = e as BusinessError;\n  console.error(`Failed to create KVManager. Code:${error.code},message:${error.message}`);\n}\nif (kvManager !== undefined) {\n  kvManager = kvManager as distributedKVStore.KVManager;\n  try {\n    const options: distributedKVStore.Options = {\n      createIfMissing: true,\n      // 设置数据库加密\n      encrypt: true,\n      backup: false,\n      autoSync: false,\n      kvStoreType: distributedKVStore.KVStoreType.SINGLE_VERSION,\n      securityLevel: distributedKVStore.SecurityLevel.S2\n    };\n    kvManager.getKVStore<distributedKVStore.SingleKVStore>('storeId', options, (err, store: distributedKVStore.SingleKVStore) => {\n      if (err) {\n        console.error(`Fail to get KVStore. Code:${err.code},message:${err.message}`);\n        return;\n      }\n      console.info('Succeeded in getting KVStore.');\n      kvStore = store;\n    });\n  } catch (e) {\n    let error = e as BusinessError;\n    console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n  }\n}\nif (kvStore !== undefined) {\n  kvStore = kvStore as distributedKVStore.SingleKVStore;\n    //进行后续操作\n    //...\n}
关系型数据库加密
关系型数据库，通过StoreConfig中encrypt属性来设置是否加密，默认为false，表示不加密。encrypt参数为true时表示加密。
具体接口及功能，可见关系型数据库。
import { relationalStore } from '@kit.ArkData';\n\nlet store: relationalStore.RdbStore;\nlet context = getContext(this);\nconst STORE_CONFIG: relationalStore.StoreConfig = {\n  name: 'RdbTest.db',\n  securityLevel: relationalStore.SecurityLevel.S1,\n  encrypt: true\n};\nrelationalStore.getRdbStore(context, STORE_CONFIG, (err, rdbStore) => {\n  store = rdbStore;\n  if (err) {\n    console.error(`Failed to get RdbStore. Code:${err.code},message:${err.message}`);\n    return;\n  }\n  console.info('Succeeded in getting RdbStore.');\n})
