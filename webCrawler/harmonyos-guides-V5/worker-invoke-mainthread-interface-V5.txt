Worker同步调用宿主线程的接口
如果一个接口在主线程中已经实现了，Worker需要调用该接口，那么可以使用下面这种方式实现。
下面以Worker同步调用宿主线程接口为例进行说明。
首先，在宿主线程实现需要调用的接口，并且创建Worker对象，在Worker上注册需要调用的接口。 // IconItemSource.ets\nexport class IconItemSource {\n  image: string | Resource = '';\n  text: string | Resource = '';\n\n  constructor(image: string | Resource = '', text: string | Resource = '') {\n    this.image = image;\n    this.text = text;\n  }\n} // WorkerCallGlobalUsage.ets\nimport worker from '@ohos.worker';\nimport { IconItemSource } from './IconItemSource';\n\n// 创建Worker对象\nconst workerInstance: worker.ThreadWorker = new worker.ThreadWorker(\"entry/ets/pages/workers/Worker.ts\");\n\nclass PicData {\n  public iconItemSourceList: IconItemSource[] = [];\n\n  public setUp(): string {\n    for (let index = 0; index < 20; index++) {\n      const numStart: number = index * 6;\n      // 此处循环使用6张图片资源\n      this.iconItemSourceList.push(new IconItemSource('$media:startIcon', `item${numStart + 1}`));\n      this.iconItemSourceList.push(new IconItemSource('$media:background', `item${numStart + 2}`));\n      this.iconItemSourceList.push(new IconItemSource('$media:foreground', `item${numStart + 3}`));\n      this.iconItemSourceList.push(new IconItemSource('$media:startIcon', `item${numStart + 4}`));\n      this.iconItemSourceList.push(new IconItemSource('$media:background', `item${numStart + 5}`));\n      this.iconItemSourceList.push(new IconItemSource('$media:foreground', `item${numStart + 6}`));\n\n    }\n    return \"setUpIconItemSourceList success!\";\n  }\n}\n\nlet picData = new PicData();\n// 在Worker上注册需要调用的对象\nworkerInstance.registerGlobalCallObject(\"picData\", picData);\nworkerInstance.postMessage(\"run setUp in picData\"); 然后，在Worker中通过callGlobalCallObjectMethod接口就可以调用宿主线程中的setUp()方法了。 // Worker.ets\nimport { ErrorEvent, MessageEvents, ThreadWorkerGlobalScope, worker } from '@kit.ArkTS';\nconst workerPort: ThreadWorkerGlobalScope = worker.workerPort;\ntry {\n  // 调用方法无入参\n  let res: string = workerPort.callGlobalCallObjectMethod(\"picData\", \"setUp\", 0) as string;\n  console.error(\"worker: \", res);\n} catch (error) {\n  // 异常处理\n  console.error(\"worker: error code is \" + error.code + \" error message is \" + error.message);\n} 
