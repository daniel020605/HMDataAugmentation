音乐专辑页
本小节将以音乐专辑页为例，介绍如何使用自适应布局能力和响应式布局能力适配不同尺寸窗口。
页面设计
音乐专辑页的页面设计如下。
同样观察音乐专辑的页面设计，不同断点下的页面设计有较多相似的地方。
据此，我们可以将页面分拆为多个组成部分。
 标题栏 歌单封面 歌单列表 播放控制栏 
标题栏
不同断点下，标题栏始终只显示“返回按钮”、“歌单”以及“更多按钮”，但“歌单”与“更多按钮”之间的间距不同。由于不同断点下标题栏的背景色也有较大差异，因此无法使用拉伸能力实现，此场景更适合使用栅格实现。我们可以将标题栏划分为“返回按钮及歌单”和“更多按钮”两部分，这两部分在不同断点下占据的列数如下图所示。另外，还可以借助OnBreakpointChange事件，调整不同断点下这两部分的背景色。
@Component\nexport struct Header {\n  @State moreBackgroundColor: Resource = $r('app.color.play_list_cover_background_color');\n  build() {\n    GridRow() {\n      GridCol({span: {sm:6, md: 6, lg:4}}) {\n        Row() {\n          Image($r('app.media.ic_back')).height('24vp').width('24vp')\n        }\n        .width('100%')\n        .height('50vp')\n        .justifyContent(FlexAlign.Start)\n        .alignItems(VerticalAlign.Center)\n        .padding({left:$r('app.float.default_margin')})\n        .backgroundColor($r('app.color.play_list_cover_background_color'))\n      }\n      GridCol({span: {sm:6, md: 6, lg:8}}) {\n        Row() {\n          Image($r('app.media.ic_add')).height('24vp').width('24vp')\n        }\n        .width('100%')\n        .height('50vp')\n        .justifyContent(FlexAlign.End)\n        .alignItems(VerticalAlign.Center)\n        .padding({right:$r('app.float.default_margin')})\n        .backgroundColor(this.moreBackgroundColor)\n      }\n    }.onBreakpointChange((currentBreakpoint) => {\n      // 调整不同断点下返回按钮及歌单的背景色\n      if (currentBreakpoint === 'sm') {\n        this.moreBackgroundColor = $r('app.color.play_list_cover_background_color');\n      } else {\n        this.moreBackgroundColor = $r('app.color.play_list_songs_background_color');\n      }\n    }).height('100%').width('100%')\n  }\n}
歌单封面
歌单封面由封面图片、歌单介绍及常用操作三部分组成，这三部分的布局在md和lg断点下完全相同，但在sm断点下有较大差异。此场景同样可以用栅格实现。
import { optionList } from '../model/SongList'\n\n@Component\nexport default struct PlayListCover {\n    @State imgHeight: number = 0;\n    @StorageProp('coverMargin') coverMargin: number = 0;\n    @StorageProp('currentBreakpoint') currentBreakpoint: string = 'sm';\n    @StorageProp('fontSize') fontSize: number = 0;\n\n    @Builder\n    CoverImage() {\n      Stack({ alignContent: Alignment.BottomStart }) {\n        Image($r('app.media.pic_album'))\n          .width('100%')\n          .aspectRatio(1)\n          .borderRadius(8)\n          .onAreaChange((oldArea: Area, newArea: Area) => {\n            this.imgHeight = newArea.height as number\n          })\n        Text($r('app.string.collection_num'))\n          .letterSpacing(1)\n          .fontColor('#fff')\n          .fontSize(this.fontSize - 4)\n          .translate({ x: 10, y: '-100%' })\n      }\n      .width('100%')\n      .height('100%')\n      .aspectRatio(1)\n    }\n\n    @Builder\n    CoverIntroduction() {\n      Column() {\n        Text($r('app.string.list_name'))\n          .opacity(0.9)\n          .fontWeight(500)\n          .fontColor('#556B89')\n          .fontSize(this.fontSize + 2)\n          .margin({ bottom: 10 })\n\n        Text($r('app.string.playlist_Introduction'))\n          .opacity(0.6)\n          .width('100%')\n          .fontWeight(400)\n          .fontColor('#556B89')\n          .fontSize(this.fontSize - 2)\n      }\n      .width('100%')\n      .height(this.currentBreakpoint === 'sm' ? this.imgHeight : 70)\n      .alignItems(HorizontalAlign.Start)\n      .justifyContent(FlexAlign.Center)\n      .padding({ left: this.currentBreakpoint === 'sm' ? 20 : 0 })\n      .margin({\n        top: this.currentBreakpoint === 'sm' ? 0 : 30,\n        bottom: this.currentBreakpoint === 'sm' ? 0 : 20\n      })\n    }\n\n    @Builder\n    CoverOptions() {\n      Row() {\n        ForEach(optionList, item => {\n          Column({ space: 4 }) {\n            Image(item.image).height(30).width(30)\n            Text(item.text)\n              .fontColor('#556B89')\n              .fontSize(this.fontSize - 1)\n          }\n        })\n      }\n      .width('100%')\n      .height(70)\n      .padding({\n        left: this.currentBreakpoint === 'sm' ? 20 : 0,\n        right: this.currentBreakpoint === 'sm' ? 20 : 0\n      })\n      .margin({\n        top: this.currentBreakpoint === 'sm' ? 15 : 0,\n        bottom: this.currentBreakpoint === 'sm' ? 15 : 0\n      })\n      .justifyContent(FlexAlign.SpaceBetween)\n    }\n  build() {\n    Column() {\n      // 借助栅格组件实现总体布局\n      GridRow() {\n        // 歌单图片\n        GridCol({ span: { sm: 4, md: 10 }, offset: { sm: 0, md: 1, lg: 1 } }) {\n          this.CoverImage()\n        }\n        // 歌单介绍\n        GridCol({ span: { sm: 8, md: 10 }, offset: { sm: 0, md: 2, lg: 2 } }) {\n          this.CoverIntroduction()\n        }\n        // 歌单操作\n        GridCol({ span: { sm: 12, md: 10 }, offset: { sm: 0, md: 2, lg: 2 } }) {\n          this.CoverOptions()\n        }.margin({\n          top: this.currentBreakpoint === 'sm' ? 15 : 0,\n          bottom: this.currentBreakpoint === 'sm' ? 15 : 0\n        })\n      }\n      .margin({ left: this.coverMargin, right: this.coverMargin })\n    }\n    .height('100%')\n    .padding({ top: this.currentBreakpoint === 'sm' ? 50 : 70 })\n  }\n}
歌单列表
不同断点下，歌单列表的样式基本一致，但sm和md断点下是歌单列表是单列显示，lg断点下是双列显示。可以通过List组件的lanes属性实现这一效果。
import { songList } from '../model/SongList';\nimport MyDataSource from '../model/SongModule'\n\n@Component\nexport default struct PlayList {\n  @StorageProp('currentBreakpoint') currentBreakpoint: string = 'sm';\n  @StorageProp('fontSize') fontSize: number = 0;\n  @Consume coverHeight: number;\n   @Builder\n  PlayAll() {\n    Row() {\n      Image($r(\"app.media.ic_play_all\"))\n        .height(23)\n        .width(23)\n      Text($r('app.string.play_all'))\n        .maxLines(1)\n        .padding({ left: 10 })\n        .fontColor('#000000')\n        .fontSize(this.fontSize)\n      Blank()\n      Image($r('app.media.ic_order_play'))\n        .width(24)\n        .height(24)\n        .margin({ right: 16 })\n      Image($r('app.media.ic_sort_list'))\n        .height(24)\n        .width(24)\n    }\n    .height(60)\n    .width('100%')\n    .padding({ left: 12, right: 12 })\n  }\n\n  @Builder\n  SongItem(title: string, label: Resource, singer: string) {\n    Row() {\n      Column() {\n        Text(title)\n          .fontColor('#000000')\n          .fontSize(this.fontSize)\n          .margin({ bottom: 4 })\n        Row() {\n          Image(label)\n            .width(16)\n            .height(16)\n            .margin({ right: 4 })\n          Text(singer)\n            .opacity(0.38)\n            .fontColor('#000000')\n            .fontSize(this.fontSize - 4)\n        }\n      }\n      .alignItems(HorizontalAlign.Start)\n\n      Blank()\n      Image($r('app.media.ic_list_more'))\n        .height(24)\n        .width(24)\n    }\n    .height(60)\n    .width('100%')\n  }\n  build() {\n    Column() {\n      this.PlayAll()\n      Scroll() {\n        List() {\n          LazyForEach(new MyDataSource(songList), item => {\n            ListItem() {\n              this.SongItem(item.title, item.label, item.singer)\n            }\n          })\n        }\n        .width('100%')\n        .height('100%')\n        // 配置不同断点下歌单列表的列数\n        .lanes(this.currentBreakpoint === 'lg' ? 2 : 1)\n      }\n      .backgroundColor('#fff')\n      .margin({ top: 50, bottom: this.currentBreakpoint === 'sm' ? this.coverHeight : 0 })\n    }\n    .padding({top: 50,bottom: 48})\n  }\n}
播放控制栏
在不同断点下，播放控制栏显示的内容完全一致，唯一的区别是歌曲信息与播放控制按钮之间的间距有差异，这是典型的拉伸能力的使用场景。
@Component\nexport default struct Player {\n  @StorageProp('fontSize') fontSize: number = 0;\n  build() {\n    Row() {\n      Image($r('app.media.pic_album')).height(32).width(32).margin({right: 12})\n      Column() {\n        Text($r('app.string.song_name'))\n          .fontColor('#000000')\n          .fontSize(this.fontSize - 1)\n        Row() {\n          Image($r('app.media.ic_vip'))\n            .height(16)\n            .width(16)\n            .margin({ right: 4 })\n          Text($r('app.string.singer'))\n            .fontColor('#000000')\n            .fontSize(this.fontSize - 4)\n            .opacity(0.38)\n        }\n      }\n      .alignItems(HorizontalAlign.Start)\n      // 通过Blank组件实现拉伸能力\n      Blank()\n      Image($r('app.media.icon_play')).height(26).width(26).margin({right: 16})\n      Image($r('app.media.ic_next')).height(24).width(24).margin({right: 16})\n      Image($r('app.media.ic_Music_list')).height(24).width(24)\n    }\n    .width('100%')\n    .height(48)\n    .backgroundColor('#D8D8D8')\n    .alignItems(VerticalAlign.Center)\n    .padding({left: 16, right: 16})\n  }\n}
运行效果
将页面中的四部分组合在一起，即可显示完整的页面。
其中歌单封面和歌单列表这两部分的相对位置，在sm断点下是上下排布，在md和lg断点下是左右排布，也可以用栅格来实现目标效果。
import PlayListCover from '../common/PlayListCover';\nimport PlayList from '../common/PlayList';\n\n@Component\nexport default struct Content {\n  // ...\n  build() {\n    GridRow() {\n      // 歌单封面\n      GridCol({ span: { xs: 12, sm: 12, md: 6, lg: 4 } }) {\n        PlayListCover()\n      }\n      // 歌单列表\n      GridCol({ span: { xs: 12, sm: 12, md: 6, lg: 8 } }) {\n        PlayList()\n      }\n    }\n    .height('100%')\n  }\n}
最后将页面各部分组合在一起即可。
import Header from '../common/Header';\nimport Player from '../common/Player';\nimport Content from '../common/Content';\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 标题栏\n      Header()\n      // 歌单\n      Content()\n      // 播放控制栏\n      Player()\n    }.width('100%').height('100%')\n  }\n}
音乐专辑页面的运行效果如下所示。
