连接ServiceAbility
如果ServiceAbility需要与PageAbility或其他应用的ServiceAbility进行交互，则须创建用于连接的Connection。ServiceAbility支持其他Ability通过connectAbility()方法与其进行连接。PageAbility的connectAbility()方法定义在featureAbility中，ServiceAbility的connectAbility()方法定义在particleAbility中。连接ServiceAbility的规则详见组件启动规则章节。在使用connectAbility()处理回调时，需要传入目标Service的Want与IAbilityConnection的实例。IAbilityConnection提供了以下方法供开发者实现。
表1 IAbilityConnection接口说明
PageAbility创建连接本地ServiceAbility回调实例的代码以及连接本地ServiceAbility的示例代码如下：
import featureAbility from '@ohos.ability.featureAbility';\nimport common from '@ohos.app.ability.common';\nimport Want from '@ohos.app.ability.Want';\nimport promptAction from '@ohos.promptAction';\nimport rpc from '@ohos.rpc';\nimport hilog from '@ohos.hilog';
const TAG: string = 'PageServiceAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageServiceAbility {\n  //...\n  build() {\n    Column() {\n      //...\n      List({ initialIndex: 0 }) {\n        ListItem() {\n          Row() {\n            //...\n          }\n          .onClick(() => {\n            let option: common.ConnectOptions = {\n              onConnect: (element, proxy) => {\n                hilog.info(domain, TAG, `onConnectLocalService onConnectDone element:` + JSON.stringify(element));\n                if (proxy === null) {\n                  promptAction.showToast({\n                    message: 'connect_service_failed_toast'\n                  });\n                  return;\n                }\n                let data = rpc.MessageParcel.create();\n                let reply = rpc.MessageParcel.create();\n                let option = new rpc.MessageOption();\n                data.writeInterfaceToken('connect.test.token');\n                proxy.sendRequest(0, data, reply, option);\n                promptAction.showToast({\n                  message: 'connect_service_success_toast'\n                });\n              },\n              onDisconnect: (element) => {\n                hilog.info(domain, TAG, `onConnectLocalService onDisconnectDone element:${element}`);\n                promptAction.showToast({\n                  message: 'disconnect_service_success_toast'\n                });\n              },\n              onFailed: (code) => {\n                hilog.info(domain, TAG, `onConnectLocalService onFailed errCode:${code}`);\n                promptAction.showToast({\n                  message: 'connect_service_failed_toast'\n                });\n              }\n            };\n\n            let request: Want = {\n              bundleName: 'com.samples.famodelabilitydevelop',\n              abilityName: 'com.samples.famodelabilitydevelop.ServiceAbility',\n            };\n            let connId = featureAbility.connectAbility(request, option);\n            hilog.info(domain, TAG, `onConnectLocalService onFailed errCode:${connId}`);\n          })\n        }\n        //...\n      }\n      //...\n    }\n    //...\n  }\n}
同时，Service侧也需要在onConnect()时返回IRemoteObject，从而定义与Service进行通信的接口。onConnect()需要返回一个IRemoteObject对象。系统提供了IRemoteObject的默认实现，开发者可以通过继承rpc.RemoteObject来创建自定义的实现类。
Service侧把自身的实例返回给调用侧的示例代码如下：
import type Want from '@ohos.app.ability.Want';\nimport rpc from '@ohos.rpc';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = '[Sample_FAModelAbilityDevelop]';\nconst domain: number = 0xFF00;\n\nclass FirstServiceAbilityStub extends rpc.RemoteObject {\n  constructor(des: Object) {\n    if (typeof des === 'string') {\n      super(des);\n    } else {\n      return;\n    }\n  }\n\n  onRemoteRequest(code: number, data: rpc.MessageParcel, reply: rpc.MessageParcel, option: rpc.MessageOption): boolean {\n    hilog.info(domain, TAG, 'ServiceAbility onRemoteRequest called');\n    if (code === 1) {\n      let string = data.readString();\n      hilog.info(domain, TAG, `ServiceAbility string=${string}`);\n      let result = Array.from(string).sort().join('');\n      hilog.info(domain, TAG, `ServiceAbility result=${result}`);\n      reply.writeString(result);\n    } else {\n      hilog.info(domain, TAG, 'ServiceAbility unknown request code');\n    }\n    return true;\n  }\n}\n//...
