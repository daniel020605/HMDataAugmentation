Path2D对象
路径对象，支持通过对象的接口进行路径的描述，并通过Canvas的stroke接口进行绘制。具体请参考Path2D对象。
画线段
创建Path2D，使用多条线段组合图形。
<!-- xxx.hml --> \n<div class=\"container\">\n  <canvas ref=\"canvas\"></canvas>\n</div>
/* xxx.css */\n.container {\n    flex-direction: column;\n    background-color: #F1F3F5;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas {\n    width: 600px;\n    height: 600px;\n    background-color: #fdfdfd;\n    border: 5px solid red;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction';\n\nexport default {\n    onShow() {\n        let ctx = this.$refs.canvas.getContext('2d', {\n            antialias: true\n        });\n        let path = ctx.createPath2D();\n        // 房顶\n        path.moveTo(10, 300);\n        path.lineTo(210, 100);\n        path.lineTo(410, 300);\n        // 屋子\n        path.moveTo(10, 300);\n        path.lineTo(410, 300);\n        path.lineTo(410, 600);\n        path.lineTo(10, 600);\n        path.closePath();\n        // 窗子\n        path.moveTo(50, 450);\n        path.bezierCurveTo(70, 350, 130, 350, 150, 450);\n        path.closePath();\n        // 门\n        path.moveTo(250, 450);\n        path.rect(250, 450, 100, 600);\n        path.closePath();\n        // 烟囱\n        path.moveTo(365, 250);\n        path.ellipse(310, 215, 30, 130, 0, Math.PI * 0.04, Math.PI * 1.1, 1);\n        // 树\n        path.moveTo(485, 450);\n        path.quadraticCurveTo(510, 500, 485, 600);\n        path.moveTo(550, 450);\n        path.quadraticCurveTo(525, 500, 550, 600);\n        path.moveTo(600, 535);\n        path.arc(520, 450, 85, 0, 6);\n        ctx.stroke(path);\n    }\n}
画图形
先使用createPath2D创建出路径对象，只对path1路径进行描边，所以画布上就只会出现path1的路径图形。点击text组件触发addPath方法会把path2路径对象当参数传入path1中，再对path1对象进行描边（stroke）操作后画布出现path1和path2两个图形。点击change文本改变setTransform属性值为setTransform(2, 0.1, 0.1, 2, 0,0)，图形变大并向左倾斜。
<!-- xxx.hml -->\n<div class=\"container\">\n    <canvas ref=\"canvas\"></canvas>\n    <div class=\"content\">\n        <text onclick=\"addPath\">{{ isAdd }}</text>\n        <text onclick=\"setTransform\">{{ textName }}</text>\n    </div>\n</div>
/* xxx.css */\n.container {\n    flex-direction: column;\n    background-color: #F1F3F5;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n}\n\ncanvas {\n    width: 600px;\n    height: 600px;\n    background-color: #fdfdfd;\n    border: 5px solid red;\n}\n\n.content {\n    width: 80%;\n    margin-top: 50px;\n    margin-bottom: 50px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n}\n\ntext {\n    width: 150px;\n    height: 80px;\n    color: white;\n    border-radius: 20px;\n    text-align: center;\n    background-color: #6060e7;\n    margin-bottom: 30px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction';\n\nexport default {\n    data: {\n        ctx: null,\n        path1: null,\n        path2: null,\n        path3: null,\n        isAdd: \"addPath2\",\n        isChange: true,\n        textName: 'change'\n    },\n    onShow() {\n        this.ctx = this.$refs.canvas.getContext('2d', {\n            antialias: true\n        });\n        this.path1 = this.ctx.createPath2D();\n        // 正方形\n        this.path1.moveTo(200, 200);\n        this.path1.lineTo(400, 200);\n        this.path1.lineTo(400, 400);\n        this.path1.lineTo(200, 400);\n        this.path1.closePath();\n        this.path2 = this.ctx.createPath2D();\n        // 圆形\n        this.path2.arc(300, 300, 75, 0, 6.28);\n        this.ctx.stroke(this.path1);\n    },\n    addPath() {\n        if (this.isAdd == \"addPath2\") {\n            // 删除指定指定区域的绘制内容\n            this.ctx.clearRect(0, 0, 600, 600);\n            this.ctx.beginPath();\n            // 将另一个的路径添加到当前路径对象中\n            this.path2.addPath(this.path1);\n            this.ctx.stroke(this.path2);\n            this.isAdd = \"clearPath2\";\n        } else {\n            this.ctx.clearRect(0, 0, 600, 600);\n            this.ctx.stroke(this.path1);\n            this.isAdd = \"addPath2\";\n        }\n    },\n    setTransform() {\n        if (this.isChange) {\n            this.ctx.clearRect(0, 0, 600, 600);\n            this.path3 = this.ctx.createPath2D();\n            this.path3.arc(150, 150, 100, 0, 6.28);\n            // 重置现有的变换矩阵并创建新的变换矩阵\n            this.path3.setTransform(2, 0.1, 0.1, 2, 0, 0);\n            this.ctx.stroke(this.path3);\n            this.isChange = !this.isChange;\n            this.textName = \"back\"\n        } else {\n            this.ctx.clearRect(0, 0, 600, 600);\n            this.path3.setTransform(0.5, -0.1, -0.1, 0.5, 0, 0);\n            this.ctx.stroke(this.path3);\n            this.isChange = !this.isChange;\n            this.textName = \"change\";\n        }\n    }\n}
