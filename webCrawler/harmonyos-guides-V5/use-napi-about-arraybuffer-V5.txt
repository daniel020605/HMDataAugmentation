使用Node-API接口进行ArrayBuffer相关开发
简介
ArrayBuffer是ArkTS中的一种数据类型，用于表示通用的、固定长度的原始二进制数据缓冲区。它提供了一种在ArkTS中有效地表示和操作原始二进制数据的方式。
基本概念
ArrayBuffer：ArrayBuffer对象用来表示一个通用的、固定长度的原始二进制数据缓冲区。不能直接操作ArrayBuffer的内容，而是需要包装成TypedArray对象或DataView对象来读写。ArrayBuffer常用于处理大量的二进制数据，如文件、网络数据包等。生命周期和内存管理：在使用Node-API处理ArrayBuffer时，需注意创建的arrayBufferPtr生命周期由引擎管理，不允许用户自己delete，否则会double free。
场景和功能介绍
以下Node-API接口通常在Node-API模块中操作ArrayBuffer类型的数据。以下是一些可能的使用场景：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_is_arraybuffer
判断给定ArkTS value是否为ArrayBuffer。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value IsArrayBuffer(napi_env env, napi_callback_info info)\n{\n    // 接受一个入参\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 调用napi_is_arraybuffer接口判断给定入参是否为ArrayBuffer数据\n    bool result = false;\n    napi_status status = napi_is_arraybuffer(env, args[0], &result);  \n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_is_arraybuffer fail\");\n        return nullptr;\n    }\n    // 将结果转成napi_value类型返回\n    napi_value returnValue = nullptr;\n    napi_get_boolean(env, result, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const isArrayBuffer: <T>(arrayBuffer: T) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  let value = new ArrayBuffer(1);\n  let data = \"123\";\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_arraybuffer: %{public}s', testNapi.isArrayBuffer(value));\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_arraybuffer: %{public}s', testNapi.isArrayBuffer(data));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_arraybuffer error: %{public}s', error.message);\n}
[h2]napi_get_arraybuffer_info
获取ArrayBuffer的底层数据缓冲区和长度。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetArrayBufferInfo(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 检查参数是否为ArrayBuffer\n    bool isArrayBuffer = false;\n    napi_is_arraybuffer(env, args[0], &isArrayBuffer);\n    if (!isArrayBuffer) {\n        napi_throw_type_error(env, nullptr, \"Argument must be an ArrayBuffer\");\n        return nullptr;\n    }\n\n    void *data = nullptr;\n    size_t byteLength = 0;\n    // 获取ArrayBuffer的底层数据缓冲区和长度\n    napi_status status = napi_get_arraybuffer_info(env, args[0], &data, &byteLength);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Failed to get ArrayBuffer info\");\n        return nullptr;\n    }\n    // 创建结果对象\n    napi_value result = nullptr;\n    napi_create_object(env, &result);\n    // 创建数据缓冲区的字节长度属性\n    napi_value byteLengthValue = nullptr;\n    napi_create_uint32(env, byteLength, &byteLengthValue);\n    napi_set_named_property(env, result, \"byteLength\", byteLengthValue);\n    napi_value bufferData;\n    napi_create_arraybuffer(env, byteLength, &data, &bufferData);\n    napi_set_named_property(env, result, \"buffer\", bufferData);\n    return result;\n}
接口声明
// index.d.ts\nexport class ArrayBufferInfo {\n  byteLength: number;\n  buffer: Object;\n}\nexport const getArrayBufferInfo: (data: ArrayBuffer) => ArrayBufferInfo | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nconst buffer = new ArrayBuffer(10);\nhilog.info(0x0000, 'testTag', 'Test Node-API get_arrayBuffer_info:%{public}s ', JSON.stringify(testNapi.getArrayBufferInfo(buffer)));
[h2]napi_detach_arraybuffer
分离给定ArrayBuffer的底层数据。
[h2]napi_is_detached_arraybuffer
判断给定的ArrayBuffer是否已被分离。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value DetachedArrayBuffer(napi_env env, napi_callback_info info)\n{\n    // 调用napi_detach_arraybuffer接口分离给定ArrayBuffer的底层数据\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    napi_value arrayBuffer = args[0];\n    napi_detach_arraybuffer(env, arrayBuffer);\n    // 将分离后的arraybuffer传出去\n    return arrayBuffer;\n}\n\nstatic napi_value IsDetachedArrayBuffer(napi_env env, napi_callback_info info)\n{\n    // 调用napi_is_detached_arraybuffer判断给定的arraybuffer是否已被分离\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    napi_value arrayBuffer = args[0];\n    bool result = false;\n    napi_is_detached_arraybuffer(env, arrayBuffer, &result);\n    // 将返回值通过napi_get_boolean接口转成napi_value传出去做打印\n    napi_value returnValue;\n    napi_get_boolean(env, result, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const detachedArrayBuffer: (buffer:ArrayBuffer) => ArrayBuffer;\nexport const isDetachedArrayBuffer: (arrayBuffer: ArrayBuffer) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  const bufferArray = new ArrayBuffer(8);\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_detached_arraybuffer one: %{public}s', testNapi.isDetachedArrayBuffer(bufferArray));\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_detached_arraybuffer two: %{public}s ', testNapi.isDetachedArrayBuffer(testNapi.detachedArrayBuffer(bufferArray)));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_detached_arraybuffer error: %{public}s', error.message);\n}
[h2]napi_create_arraybuffer
用于在C/C++中创建一个具有指定字节长度的ArkTS ArrayBuffer对象，如果调用者想要直接操作缓冲区，则可以选择将底层缓冲区返回给调用者。要从ArkTS写入此缓冲区，需要创建类型化数组或DataView对象。
napi_create_arraybuffer在byte_length为0或超大值时，data返回值将为nullptr。因此在对data进行使用前，有必要对其进行判空。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateArrayBuffer(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value argv[1] = {nullptr};\n    napi_value result = nullptr;\n    // 解析传递的参数\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    int32_t value;\n    size_t length;\n    // 将ArkTS侧传递的参数转换为size_t类型，作为napi_create_arraybuffer的参数\n    napi_get_value_int32(env, argv[0], &value);\n    length = size_t(value);\n    void *data;\n    // 创建一个新的ArrayBuffer\n    napi_create_arraybuffer(env, length, &data, &result);\n    if (data != nullptr) {\n        // 确保安全后才能使用data进行操作\n    }\n    // 返回ArrayBuffer\n    return result;\n}
接口声明
// index.d.ts\nexport const createArrayBuffer: (size: number) => ArrayBuffer;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_create_arraybuffer:%{public}s', testNapi.createArrayBuffer(10).toString());
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
