帧动画（ohos.animator）
帧动画具备逐帧回调的特性，便于开发者在每一帧中处理需调整的属性。通过向应用提供onFrame逐帧回调，帧动画使开发者能够在应用的每一帧设置属性值，从而实现组件属性值变化的自然过渡，营造出动画效果。帧动画接口详情可参考@ohos.animator (动画)。
与属性动画相比，帧动画能让开发者实时感知动画进程，即时调整UI值，具备事件即时响应和可暂停的优势，但在性能上略逊于属性动画。当属性动画能满足需求时，建议优先采用属性动画接口实现。属性动画接口可参考实现属性动画。
如图所示，帧动画在动画过程中即可实时响应，而属性动画按最终状态响应。
使用帧动画实现动画效果
使用如下步骤可以创建一个简单的animator，并且在每个帧回调中打印当前插值。
 引入相关依赖。 import { AnimatorOptions, AnimatorResult } from '@kit.ArkUI'; 创建执行动画的对象。 // 创建动画的初始参数\nlet options: AnimatorOptions = {\n  duration: 1500,\n  easing: \"friction\",\n  delay: 0,\n  fill: \"forwards\",\n  direction: \"normal\",\n  iterations: 2,\n  // 动画onFrame 插值首帧值                                    \n  begin: 200.0,\n  // 动画onFrame 插值尾帧值                                    \n  end: 400.0\n};\nlet result: AnimatorResult = this.getUIContext().createAnimator(options);\n// 设置接收到帧时回调，动画播放过程中每帧会调用onFrame回调\nresult.onFrame = (value: number) => {\n  console.log(\"current value is :\" + value);\n} 播放动画。 // 播放动画\nresult.play(); 动画执行完成后手动释放AnimatorResult对象。 // 释放动画对象\nresult = undefined; 
使用帧动画实现小球抛物运动
 引入相关依赖。 import { AnimatorOptions, AnimatorResult } from '@kit.ArkUI'; 定义要做动画的组件。 Button()\n  .width(60)\n  .height(60)\n  .translate({ x: this.translateX, y: this.translateY }) 在onPageShow中创建AnimatorResult对象。 onPageShow(): void {\n    //创建animatorResult对象\n    this.animatorOptions = this.getUIContext().createAnimator(options);\n    this.animatorOptions.onFrame = (progress: number) => {\n    this.translateX = progress;\n    if (progress > this.topWidth && this.translateY < this.bottomHeight) {\n       this.translateY = Math.pow(progress - this.topWidth, 2) * this.g;\n    }\n }\n //动画取消时执行方法\n this.animatorOptions.onCancel = () => {\n    this.animatorStatus = '取消';\n }\n //动画完成时执行方法\n this.animatorOptions.onFinish = () => {\n    this.animatorStatus = '完成';\n }\n //动画重复播放时执行方法\n this.animatorOptions.onRepeat = () => {\n    console.log(\"动画重复播放\");\n }\n} 定义动画播放，重置，暂停的按钮。 Button('播放').onClick(() => {\n  this.animatorOptions?.play();\n  this.animatorStatus = '播放中'\n}).width(80).height(35)\nButton(\"重置\").onClick(() => {\n  this.translateX = 0;\n  this.translateY = 0;\n}).width(80).height(35)\nButton(\"暂停\").onClick(() => {\n  this.animatorOptions?.pause();\n  this.animatorStatus = '暂停'\n}).width(80).height(35) 在页面隐藏或销毁的生命周期中释放动画对象，避免内存泄漏。 onPageHide(): void {\n  this.animatorOptions = undefined;\n} 
完整示例如下。
import { AnimatorOptions, AnimatorResult } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State animatorOptions: AnimatorResult | undefined = undefined;\n  @State animatorStatus: string = '创建';\n  begin: number = 0;\n  end: number = 300\n  topWidth: number = 150;\n  bottomHeight: number = 100;\n  g: number = 0.18\n  animatorOption: AnimatorOptions = {\n    duration: 4000,\n    delay: 0,\n    easing: 'linear',\n    iterations: 1,\n    fill: \"forwards\",\n    direction: 'normal',\n    begin: this.begin,\n    end: this.end\n  };\n  @State translateX: number = 0;\n  @State translateY: number = 0;\n\n  onPageShow(): void {\n    this.animatorOptions = this.getUIContext().createAnimator(this.animatorOption)\n    this.animatorOptions.onFrame = (progress: number) => {\n      this.translateX = progress;\n      if (progress > this.topWidth && this.translateY < this.bottomHeight) {\n        this.translateY = Math.pow(progress - this.topWidth, 2) * this.g;\n      }\n    }\n    this.animatorOptions.onCancel = () => {\n      this.animatorStatus = '取消';\n    }\n    this.animatorOptions.onFinish = () => {\n      this.animatorStatus = '完成';\n    }\n    this.animatorOptions.onRepeat = () => {\n      console.log(\"动画重复播放\");\n    }\n  }\n\n  onPageHide(): void {\n    this.animatorOptions = undefined;\n  }\n\n  build() {\n    Column() {\n      Column({ space: 30 }) {\n        Button('播放').onClick(() => {\n          this.animatorOptions?.play();\n          this.animatorStatus = '播放中';\n        }).width(80).height(35)\n        Button(\"重置\").onClick(() => {\n          this.translateX = 0;\n          this.translateY = 0;\n        }).width(80).height(35)\n        Button(\"暂停\").onClick(() => {\n          this.animatorOptions?.pause();\n          this.animatorStatus = '暂停';\n        }).width(80).height(35)\n      }.width(\"100%\").height('25%')\n\n      Stack() {\n        Button()\n          .width(60)\n          .height(60)\n          .translate({ x: this.translateX, y: this.translateY })\n      }\n      .width(\"100%\")\n      .height('45%')\n      .align(Alignment.Start)\n\n      Text(\"当前动画状态为:\" + this.animatorStatus)\n    }.width(\"100%\").height('100%')\n  }\n}
