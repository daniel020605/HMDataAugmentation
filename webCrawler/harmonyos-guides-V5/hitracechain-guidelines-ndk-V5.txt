使用HiTraceChain打点（C/C++）
简介
HiTraceChain是基于云计算分布式跟踪调用链思想，在端侧业务流程（涉及跨线程、跨进程、跨设备）中的一种轻量级实现。HiTraceChain在业务控制面流程中，生成和传递唯一跟踪标识，在业务流程中输出的各类信息中（包括应用事件、系统时间、日志等）记录该跟踪标识。在调试、问题定位过程中，开发者可以通过该唯一跟踪标识将本次业务流程端到端的各类信息快速关联起来。HiTraceChain为开发者提供业务流程调用链跟踪的维测接口，帮助开发者迅速获取指定业务流程调用链的运行日志，定位跨设备/跨进程/跨线程的故障问题。
接口说明
分布式跟踪接口由HiTraceChain模块提供，详细API请参考性能打点跟踪API参考。
开发示例
 在Deveco Studio新建Native C++应用，默认生成的项目中包含index.ets文件，在entry\\src\\main\\cpp目录下会自动生成一个cpp文件(hello.cpp或napi_init.cpp，本示例以hello.cpp文件名为例)。 index.ets代码如下，onClick中调用了testNapi的add函数，该函数在hello.cpp中定义。 import hilog from '@ohos.hilog';\nimport testNapi from 'libentry.so'\n\n@Entry\n@Component\nstruct Index {\n    @State message: string = 'Hello World'\n\n    build() {\n        Row() {\n        Column() {\n            Text(this.message)\n            .fontSize(50)\n            .fontWeight(FontWeight.Bold)\n            .onClick(() => {\n                hilog.info(0x0000, 'testTag', 'Test NAPI 2 + 3 = %{public}d', testNapi.add(2, 3));\n            })\n        }\n        .width('100%')\n        }\n        .height('100%')\n    }\n} 在CMakeLists.txt中新增libhitrace_ndk.z.so链接。 // CMakeLists.txt\n# the minimum version of CMake.\ncmake_minimum_required(VERSION 3.4.1)\nproject(MyApplication)\n\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\n\ninclude_directories(${NATIVERENDER_ROOT_PATH}\n                   ${NATIVERENDER_ROOT_PATH}/include)\nadd_library(entry SHARED hello.cpp)\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhitrace_ndk.z.so) 在hello.cpp文件中引用hitrace头文件。 #include \"hitrace/trace.h\" 在hello.cpp的Add函数中，使用OH_HiTrace_BeginChain函数开启一个跟踪链，使用OH_HiTrace_EndChain关闭跟踪。 #include \"napi/native_api.h\"\n#include \"hitrace/trace.h\"\nstatic napi_value Add(napi_env env, napi_callback_info info)\n{\n    // 需要开启分布式跟踪的地方\n    OH_HiTrace_BeginChain(\"hitraceTest\", HITRACE_FLAG_DEFAULT);\n    // 需要结束分布式跟踪的地方（此处为示例，开启点和结束点按实际需求放在需要的地方）\n    OH_HiTrace_EndChain();\n    size_t requireArgc = 2;\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n\n    napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n\n    napi_valuetype valuetype0;\n    napi_typeof(env, args[0], &valuetype0);\n\n    napi_valuetype valuetype1;\n    napi_typeof(env, args[1], &valuetype1);\n\n    double value0;\n    napi_get_value_double(env, args[0], &value0);\n\n    double value1;\n    napi_get_value_double(env, args[1], &value1);\n\n    napi_value sum;\n    napi_create_double(env, value0 + value1, &sum);\n\n    return sum;\n\n} 运行项目，会在设备上自动生成一个hap应用，点击hap上的“Hello World”文字，会调用hello.cpp中的add函数，查看hitrace日志，会出现如下信息： 11-02 15:13:28.922  21519-21519  C02D03/HiTraceC                  com.example.hitracechaintest     I  [a92ab94c18e1341 0 0][dict]HiTraceBegin name:hitraceTest event flags:0x01.\n11-02 15:13:28.930  21519-21519  C02D03/HiTraceC                  com.example.hitracechaintest     I  [a92ab94c18e1341 324c3a3 0][dict]HiTraceEnd. 
