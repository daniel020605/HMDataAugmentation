查询关键资产(C/C++)
接口介绍
可通过API文档查看查询关键资产的接口OH_Asset_Query
的详细介绍。
在查询关键资产时，关键资产属性的内容参数如下表所示：
下表中名称包含“ASSET_TAG_DATA_LABEL”的关键资产属性，用于存储业务自定义信息，其内容不会被加密，请勿存放个人数据。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且有完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产附属信息，内容由业务自定义且无完整性保护。
说明： API12前长度为1-512字节。
关键资产查询返回的结果偏移量。
说明： 用于分批查询场景，指定从第几个开始返回。
关键资产查询返回的结果排序依据，仅支持按照附属信息排序。
说明： 默认按照关键资产新增的顺序返回。
约束和限制
批量查询出的关键资产需要通过IPC通道传输给业务，受IPC缓冲区大小限制，建议对查询超过40条关键资产时，进行分批查询，且每次查询数量不超过40条。
代码示例
[h2]查询单条关键资产明文
查询别名是demo_alias的关键资产明文。
 在CMake脚本中链接相关动态库 target_link_libraries(entry PUBLIC libasset_ndk.z.so) 参考如下示例代码，进行业务功能开发 #include <string.h>\n\n#include \"asset/asset_api.h\"\n\nvoid QueryAsset() {\n   static const char *ALIAS = \"demo_alias\";\n   Asset_Blob alias = { (uint32_t)(strlen(ALIAS)), (uint8_t *)ALIAS };\n   Asset_Attr attr[] = {\n      { .tag = ASSET_TAG_ALIAS, .value.blob = alias },  // 指定了关键资产别名，最多查询到一条满足条件的关键资产\n      { .tag = ASSET_TAG_RETURN_TYPE, .value.u32 = ASSET_RETURN_ALL },  // 此处表示需要返回关键资产的所有信息，即属性+明文\n   };\n\n   Asset_ResultSet resultSet = {0};\n   int32_t ret = OH_Asset_Query(attr, sizeof(attr) / sizeof(attr[0]), &resultSet);\n   if (ret == ASSET_SUCCESS) {\n      // Parse the resultSet.\n      for (uint32_t i = 0; i < resultSet.count; i++) {\n            // Parse the secret: the data is secret->blob.data, the size is secret->blob.size.\n            Asset_Attr *secret = OH_Asset_ParseAttr(resultSet.results + i, ASSET_TAG_SECRET);\n      }\n   }\n   OH_Asset_FreeResultSet(&resultSet);\n} 
[h2]查询单条关键资产属性
查询别名是demo_alias的关键资产属性。
 在CMake脚本中链接相关动态库 target_link_libraries(entry PUBLIC libasset_ndk.z.so) 参考如下示例代码，进行业务功能开发 #include <string.h>\n\n#include \"asset/asset_api.h\"\n\nvoid QueryAttributes() {\n   static const char *ALIAS = \"demo_alias\";\n   Asset_Blob alias = { (uint32_t)(strlen(ALIAS)), (uint8_t *)ALIAS };\n   Asset_Attr attr[] = {\n      { .tag = ASSET_TAG_ALIAS, .value.blob = alias }, // 指定了关键资产别名，最多查询到一条满足条件的关键资产\n      { .tag = ASSET_TAG_RETURN_TYPE, .value.u32 = ASSET_RETURN_ATTRIBUTES }, // 此处表示仅返回关键资产属性，不包含关键资产明文\n   };\n\n   Asset_ResultSet resultSet = {0};\n   int32_t ret = OH_Asset_Query(attr, sizeof(attr) / sizeof(attr[0]), &resultSet);\n   if (ret == ASSET_SUCCESS) {\n      // Parse the result.\n      for (uint32_t i = 0; i < resultSet.count; i++) {\n      // Parse the data label: the data is label->blob.data, the size is label->blob.size.\n            Asset_Attr *label = OH_Asset_ParseAttr(resultSet.results + i, ASSET_TAG_DATA_LABEL_NORMAL_1);\n      }\n   }\n   OH_Asset_FreeResultSet(&resultSet);\n} 
[h2]批量查询关键资产属性
批量查询附属信息是demo_label的关键资产属性，从第5条满足条件的结果开始返回，一共返回10条，且返回结果以DATA_LABEL_NORMAL_1属性内容排序。
 在CMake脚本中链接相关动态库 target_link_libraries(entry PUBLIC libasset_ndk.z.so) 参考如下示例代码，进行业务功能开发 #include <string.h>\n\n#include \"asset/asset_api.h\"\n\nvoid BatchQuery() {\n   static const char *LABEL = \"demo_label\";\n   Asset_Blob label = { (uint32_t)(strlen(LABEL)), (uint8_t *)LABEL };\n\n   Asset_Attr attr[] = {\n      { .tag = ASSET_TAG_RETURN_TYPE, .value.u32 = ASSET_RETURN_ATTRIBUTES },\n      { .tag = ASSET_TAG_DATA_LABEL_NORMAL_1, .value.blob = label },\n      { .tag = ASSET_TAG_RETURN_OFFSET, .value.u32 = 5 },\n      { .tag = ASSET_TAG_RETURN_LIMIT, .value.u32 = 10 },\n      { .tag = ASSET_TAG_RETURN_ORDERED_BY, .value.u32 = ASSET_TAG_DATA_LABEL_NORMAL_1 },\n   };\n\n   Asset_ResultSet resultSet = { 0 };\n   int32_t ret = OH_Asset_Query(attr, sizeof(attr) / sizeof(attr[0]), &resultSet);\n   if (ret == ASSET_SUCCESS) {\n      // Parse the result.\n      for (uint32_t i = 0; i < resultSet.count; i++) {\n            // Parse the data alias: the data is alias->blob.data, the size is alias->blob.size..\n            Asset_Attr *alias = OH_Asset_ParseAttr(resultSet.results + i, ASSET_TAG_ALIAS);\n      }\n   }\n   OH_Asset_FreeResultSet(&resultSet);\n} 
