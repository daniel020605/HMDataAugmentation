请求暂停和恢复
本协议栈框架支持对请求进行暂停和恢复，包括接收暂停和发送暂停。
开发步骤
导包。import { rcp } from '@kit.RemoteCommunicationKit';\nimport { util } from '@kit.ArkTS';\nimport { expect } from '@ohos/hypium'; 暂停发送流程。const HTTP_SERVER: string = \"https://www.example.com\";\nconst HTTP_SERVER_POST: string = \"https://example.org/anything\";\n\ninterface StringifiedDebugInfo {\n  type: rcp.DebugEvent;\n  data: string;\n};\n\ntype DebugInfoSource = undefined | rcp.DebugInfo[] | rcp.Response;\n\nfunction debugInfoStringify(infoSource: DebugInfoSource): StringifiedDebugInfo[] {\n  const debugInfo = Array.isArray(infoSource)\n    ? (infoSource as rcp.DebugInfo[])\n    : (infoSource as rcp.Response).debugInfo;\n\n  if (!debugInfo) {\n    return [];\n  }\n\n  const decoder = util.TextDecoder.create('utf-8');\n  return debugInfo.map((i: rcp.DebugInfo): StringifiedDebugInfo => {\n    return {\n      type: i.type,\n      data: decoder.decodeWithStream(new Uint8Array(i.data)).trim(),\n    };\n  });\n}\n\nfunction getReceivePausedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Pause receiving'));\n}\n\nfunction getReceiveResumedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Resume receiving'));\n}\n\nfunction getSendPausedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Pause sending'));\n}\n\nfunction getSendResumedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Resume sending'));\n}\n\nconst testSendingPauseByTimeout = async (done: Function): Promise<void> => {\n  const session = rcp.createSession();\n  const request = new rcp.Request(HTTP_SERVER_POST);\n  const sendPolicy: rcp.SendingPausePolicy = {\n    kind: 'timeout',\n    timeoutMs: 1,\n  };\n  const pausePolicy: rcp.PausePolicy = {\n    sending: sendPolicy,\n  };\n  request.configuration = {\n    transfer: {\n      pausePolicy: pausePolicy,\n    },\n    tracing: {\n      infoToCollect: {\n        textual: true,\n      },\n    },\n  };\n  const data = 'TestData';\n  request.headers = {\n    'Content-Length': data.length.toString(),\n  };\n  let read = false;\n  request.method = 'POST';\n  request.content = (maxSize) => {\n    if (read) {\n      return new ArrayBuffer(0);\n    }\n    read = true;\n    const buffer = new ArrayBuffer(data.length);\n    util.TextEncoder.create('utf-8').encodeIntoUint8Array(data, new Uint8Array(buffer));\n    return buffer;\n  };\n\n  const response = await session.fetch(request);\n\n  const pausedEvents = getSendPausedEvents(response);\n  const resumedEvents = getSendResumedEvents(response);\n\n  session.close();\n  done();\n} 暂停接收流程。const HTTP_SERVER: string = \"https://www.example.com\";\nconst HTTP_SERVER_POST: string = \"https://example.org/anything\";\n\ninterface StringifiedDebugInfo {\n  type: rcp.DebugEvent;\n  data: string;\n};\n\ntype DebugInfoSource = undefined | rcp.DebugInfo[] | rcp.Response;\n\nfunction debugInfoStringify(infoSource: DebugInfoSource): StringifiedDebugInfo[] {\n  const debugInfo = Array.isArray(infoSource)\n    ? (infoSource as rcp.DebugInfo[])\n    : (infoSource as rcp.Response).debugInfo;\n\n  if (!debugInfo) {\n    return [];\n  }\n\n  const decoder = util.TextDecoder.create('utf-8');\n  return debugInfo.map((i: rcp.DebugInfo): StringifiedDebugInfo => {\n    return {\n      type: i.type,\n      data: decoder.decodeWithStream(new Uint8Array(i.data)).trim(),\n    };\n  });\n}\n\nfunction getReceivePausedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Pause receiving'));\n}\n\nfunction getReceiveResumedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Resume receiving'));\n}\n\nfunction getSendPausedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Pause sending'));\n}\n\nfunction getSendResumedEvents(debugInfo: DebugInfoSource) {\n  return debugInfoStringify(debugInfo).filter((i) => i.data.startsWith('[[RCP]]: Resume sending'));\n}\n\nconst testReceivingPauseByCache = async (done: Function): Promise<void> => {\n  const session = rcp.createSession();\n  const request = new rcp.Request(HTTP_SERVER);\n  const recvPolicyByCache: rcp.ReceivingPauseByCache = {\n    kind: 'cacheSize',\n    size: 100,\n  };\n  const recvPolicy: rcp.ReceivingPausePolicy = recvPolicyByCache;\n  const pausePolicy: rcp.PausePolicy = {\n    receiving: recvPolicy,\n  };\n  request.configuration = {\n    transfer: {\n      pausePolicy: pausePolicy,\n    },\n    tracing: {\n      infoToCollect: {\n        textual: true,\n      },\n    },\n  };\n  request.destination = (incomingData: ArrayBuffer) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 10);\n    });\n  };\n\n  const response = await session.fetch(request);\n\n  const pausedEvents = getReceivePausedEvents(response);\n  const resumedEvents = getReceiveResumedEvents(response);\n\n  session.close();\n  done();\n}\n\nconst testReceivingPauseByTimeout = async (done: Function): Promise<void> => {\n  const session = rcp.createSession();\n  const request = new rcp.Request(HTTP_SERVER);\n  const recvPolicyByTimeout: rcp.ReceivingPauseByTimeout = {\n    kind: 'timeout',\n    timeoutMs: 0,\n  };\n  const recvPolicy: rcp.ReceivingPausePolicy = recvPolicyByTimeout;\n  const pausePolicy: rcp.PausePolicy = {\n    receiving: recvPolicy,\n  };\n  request.configuration = {\n    transfer: {\n      pausePolicy: pausePolicy,\n    },\n    tracing: {\n      infoToCollect: {\n        textual: true,\n      },\n    },\n  };\n  request.destination = (incomingData: ArrayBuffer) => {\n    console.info('RcpDownload ' + incomingData.byteLength.toString());\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 10);\n    });\n  };\n\n  const response = await session.fetch(request);\n  expect(response.statusCode).assertEqual(200);\n\n  const pausedEvents = getReceivePausedEvents(response);\n  const resumedEvents = getReceiveResumedEvents(response);\n\n  expect(pausedEvents.length > 0).assertEqual(true);\n  expect(resumedEvents.length > 0).assertEqual(true);\n  expect(resumedEvents.length).assertEqual(pausedEvents.length);\n\n  session.close();\n  done();\n} 
