标准化数据结构
场景介绍
针对UTD标准化数据类型中的部分常见类型，为了方便业务使用，我们按照不同的数据类型提供了标准化数据结构，例如系统定义的桌面图标类型（对应的标准化数据类型标识为'openharmony.app-item'），我们明确定义了该数据结构对应的相关描述信息。
某些业务场景下应用可以直接使用我们具体定义的UTD标准化数据结构，例如跨应用拖拽场景。拖出方应用可以按照标准化数据结构将拖拽数据写入拖拽事件，拖入方应用从拖拽事件中读取拖拽数据并按照标准化数据结构进行数据的解析。这使得不同应用间的数据交互遵从相同的标准定义，有效减少了跨应用数据交互的开发工作量。
接口说明
UDMF针对部分标准化数据类型定义的标准化数据结构如下所示：
开发步骤
以使用标准化数据结构定义数据内容（包含超链接、纯文本两条数据记录）为例，提供基本的开发步骤。
// 1. 导入unifiedDataChannel和uniformTypeDescriptor模块。\nimport { uniformDataStruct, uniformTypeDescriptor, unifiedDataChannel } from '@kit.ArkData';\n\n// 2. 创建超链接数据记录。\nlet hyperlinkDetails : Record<string, string> = {\n  'attr1': 'value1',\n  'attr2': 'value2',\n}\nlet hyperlink : uniformDataStruct.Hyperlink = {\n  uniformDataType:'general.hyperlink',\n  url : 'www.XXX.com',\n  description : 'This is the description of this hyperlink',\n  details : hyperlinkDetails,\n}\n\nhyperlink.description = '...';  // 修改hyperlink属性description\n\nconsole.info(`hyperlink url = ${hyperlink.url}`);  // 访问对象属性。\n\n// 3. 创建纯文本数据类型记录，将其添加到刚才创建的UnifiedData对象。\nlet plainTextDetails : Record<string, string> = {\n  'attr1': 'value1',\n  'attr2': 'value2',\n}\nlet plainText : uniformDataStruct.PlainText = {\n  uniformDataType: 'general.plain-text',\n  textContent : 'This is plainText textContent example',\n  abstract : 'this is abstract',\n  details : plainTextDetails,\n}\n// 4. 创建一个统一数据对象实例。\nlet unifiedData = new unifiedDataChannel.UnifiedData();\nlet hyperlinkRecord = new unifiedDataChannel.UnifiedRecord(uniformTypeDescriptor.UniformDataType.HYPERLINK, hyperlink);\nlet plainTextRecord = new unifiedDataChannel.UnifiedRecord(uniformTypeDescriptor.UniformDataType.PLAIN_TEXT, plainText);\n\n// 5. 添加plainText数据记录。\nunifiedData.addRecord(hyperlinkRecord);\nunifiedData.addRecord(plainTextRecord);\n\n// 6. 记录添加完成后，可获取当前UnifiedData对象内的所有数据记录。\nlet records = unifiedData.getRecords();\n\n// 7. 遍历每条记录，判断该记录的数据类型，转换为子类对象，得到原数据记录。\nfor (let i = 0; i < records.length; i ++) {\n  let unifiedDataRecord = records[i] as unifiedDataChannel.UnifiedRecord;\n  let record = unifiedDataRecord.getValue() as object;\n  if (record != undefined) {\n    // 读取该数据记录的类型\n    let type : string = record[\"uniformDataType\"];\n    switch (type) {\n      case uniformTypeDescriptor.UniformDataType.HYPERLINK:\n        Object.keys(record).forEach(key => {\n          console.info('show records: ' + key + ', value:' + record[key]);\n        });\n        break;\n      case uniformTypeDescriptor.UniformDataType.PLAIN_TEXT:\n        Object.keys(record).forEach(key => {\n          console.info('show records: ' + key + ', value:' + record[key]);\n        });\n        break;\n      default:\n        break;\n    }\n  }\n}
