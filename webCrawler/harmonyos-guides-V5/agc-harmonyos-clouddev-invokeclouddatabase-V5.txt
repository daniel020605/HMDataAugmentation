在端侧访问云数据库
前提条件
请确保云数据库已正确开发并部署。请确保“AppScope/resources/rawfile/schema.json”文件已存在。 云数据库部署成功后，DevEco Studio将自动从云侧下载云数据库的schema文件至“AppScope/resources/rawfile/schema.json”路径，该文件是云数据库端侧API必须引入的配置文件。  
检查您的角色拥有的对象类型操作权限。如果未配置AccessToken，需要给World角色添加Upsert和Delete权限。
操作步骤
参考生成Client Model生成云数据库对象类型的端侧模型，如下图初始化代码中的Client Model示例“ets/pages/CloudDb/Post.ts”。 在代码文件中引入Cloud Foundation Kit和“Post”类。import { cloudDatabase } from '@kit.CloudFoundationKit';\nimport { Post } from './Post'; 调用云数据库接口，具体代码可查阅“src/main/ets/pages/CloudDb”目录文件。CloudDb代码片段节选如下，更完整的接口信息请参考Cloud Foundation Kit API参考-云数据库模块。查询数据import { cloudDatabase } from '@kit.CloudFoundationKit';\nimport { Post } from './Post';\n...\nthis.condition = new cloudDatabase.DatabaseQuery(Post).condition.orderByDesc('insertDate').limit(100, 0)\n// 'Demo' is the 'cloudDBZoneName' field defined in CloudProgram/clouddb/dataentry/d_Post.json\nconst resultArray = await cloudDatabase.zone('Demo').query(this.condition)\n... 新增或修改数据...\nasync updateLikeCount(item: Post) {\n  let likes: string[] = JSON.parse(item.likes)\n  let userId: string = this.userId;\n  let index: number = likes.indexOf(userId);\n  if (index >= 0) {\n    likes = likes.filter((item: string) => item !== userId)\n    item.likeCount = likes.length\n    item.likes = JSON.stringify(likes)\n  } else {\n    likes.push(userId);\n    item.likeCount = likes.length\n    item.likes = JSON.stringify(likes)\n  }\n  try {\n    await this.agcDataBase?.upsert(item)\n  } catch (err) {\n  }\n... 删除数据...\nasync deleteRecord(post: Post) {\n  try {\n    const record = await this.agcDataBase?.delete(post)\n    hilog.info(0x0000, 'CloudDB', 'delete success: %{public}d', record);\n    this.onCheckboxToggle()\n  } catch (err) {\n  }\n}\n...   
