VPN应用开发指南
简介
VPN，即虚拟专用网络（Virtual Private Network），是在公用网络上建立专用网络的一种技术。在VPN网络中，任意两个节点间的连接并非依赖传统专用网络所需要的端到端的物理链路，而是构建在公用网络服务商提供的平台（如Internet）之上的逻辑网络。用户数据在这一逻辑链路中进行传输。
HarmonyOS为开发者提供了用于创建VPN的API解决方案。本文将指导您如何开发自己的VPN客户端。
为了保证应用的运行效率，所有API调用都是异步的，对于异步调用的API均提供了Promise的方式，以下示例均采用Promise方式，更多方式可以查阅API参考。
VPN应用的显示体验
借助系统提供的VPN Extension接口开发者可以构建支持不同协议的VPN服务。HarmonyOS系统提供了界面 (UI) 使用户可以了解当前VPN应用服务的启动和连接：
 在VPN应用首次启动连接之前，系统会显示VPN连接授权对话框。该对话框会提示用户是否信任该VPN应用并接受VPN连接请求。 当VPN启动连接成功时，状态栏显示一个VPN (钥匙) 图标以提醒用户VPN处于连接状态。 
为了使用户可以方便的查看和配置，您的VPN应用还需要提供以下界面：
 用于手动启动和停止连接的控件。 当VPN启动连接时，在通知栏显示VPN应用的连接状态或提供网络统计信息 (如连接时长、流量等) 。点击该通知能够将您的VPN应用调入前台。 
接口说明
完整的JS API说明以及示例代码请参考：VPN扩展应用API。
创建VPN Extension Ability
如果想使您的应用支持VPN能力，首先您需要创建一个继承于VpnExtensionAbility的extensionAbilities。
// 举例：在应用的module.json5中定义MyVpnExtAbility\n\"extensionAbilities\": [\n  {\n    \"name\": \"MyVpnExtAbility\",\n    \"description\": \"vpnservice\",\n    \"type\": \"vpn\",\n    \"srcEntry\": \"./ets/serviceextability/MyVpnExtAbility.ts\"\n  }\n]
接下来您需要在创建的VpnExtensionAbility中实现VPN的配置、启动和停止操作：
 建立一个VPN的网络隧道，以UDP隧道为例； 通过VpnConnection.protect保护前一步建立的UDP隧道； 构建VPN Config参数，参考VPN Config参数说明； 通过VpnConnection.create建立VPN网络连接； 处理虚拟网卡的数据，如：读写操作。 
启动VPN Extension Ability
当VPN应用启动VPN连接时，需要调用startVpnExtensionAbility接口，携带需要启动的VpnExtensionAbility信息，其中bundleName需要与您的VPN应用bundleName一致，abilityName为您在前面创建的VpnExtensionAbility名。您可参考如下示例：
import { common, Want } from '@kit.AbilityKit';\nimport { vpnExtension } from '@kit.NetworkKit';\n\nlet context = getContext(this) as common.VpnExtensionContext;\nlet want: Want = {\n  deviceId: \"\",\n  bundleName: \"com.example.myvpndemo\",\n  abilityName: \"MyVpnExtAbility\",\n};\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold).onClick(() => {\n          console.info(\"btn click\") })\n        Button('Start Extension').onClick(() => {\n          vpnExtension.startVpnExtensionAbility(want);\n        }).width('70%').fontSize(45).margin(16)\n        }.width('100%')\n    }.height('100%')\n  }\n}
如果您的VPN应用未获取用户信任，系统将弹出VPN连接的授权对话框，当获取用户授权后，系统将自动调用并启动您实现的VPN Extension Ability的onCreate方法将被调用。
目前系统仅支持启动一个VPN连接服务，当VPN已经启动时应用新调用启动接口会收到系统拒绝错误，此时建议您的应用可以提醒用户先断开当前已经激活的VPN应用连接。
停止VPN Extension Ability
当VPN应用需要停止VPN连接时，需要调用stopVpnExtensionAbility接口，携带需要停止的VpnExtensionAbility信息。系统会对调用方做权限校验，stopVpnExtensionAbility的调用方应用必须获取了用户的VPN信任授权，且只允许停止应用自己启动的VpnExtensionAbility，所以接口传入的参数中bundleName需要与您的VPN应用bundleName一致，abilityName为指定停止VPN的VpnExtensionAbility名。
您可参考如下示例：
import { common, Want } from '@kit.AbilityKit';\nimport { vpnExtension } from '@kit.NetworkKit';\n\nlet context = getContext(this) as common.VpnExtensionContext;\nlet want: Want = {\n  deviceId: \"\",\n  bundleName: \"com.example.myvpndemo\",\n  abilityName: \"MyVpnExtAbility\",\n};\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold).onClick(() => {\n          console.info(\"btn click\") })\n        Button('Start Extension').onClick(() => {\n          vpnExtension.startVpnExtensionAbility(want);\n        }).width('70%').fontSize(45).margin(16)\n        Button('Stop Extension').onClick(() => {\n          console.info(\"btn end\")\n          vpnExtension.stopVpnExtensionAbility(want);\n        }).width('70%').fontSize(45).margin(16)\n\n        }.width('100%')\n    }.height('100%')\n  }\n}
stopVpnExtensionAbility后，您的VPN Extension Ability的onDestroy方法将被调用，您可在此时destroy vpn连接。
import { vpnExtension, VpnExtensionAbility } from '@kit.NetworkKit';\nimport { common, Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet context: vpnExtension.VpnExtensionContext;\nexport default class MyVpnExtAbility extends VpnExtensionAbility {\n  onDestroy(want: Want) {\n    let VpnConnection : vpnExtension.VpnConnection = vpnExtension.createVpnConnection(context);\n    console.info(\"vpn createVpnConnection: \" + JSON.stringify(VpnConnection));\n    VpnConnection.destroy().then(() => {\n      console.info(\"destroy success.\");\n    }).catch((error : BusinessError) => {\n      console.error(\"destroy fail\" + JSON.stringify(error));\n    });\n  }\n}
服务生命周期
为了保障设备的网络连接，当系统观察到VPN相关应用出现异常时会主动停止VPN连接：
 当调用startVpnExtensionAbility接口的应用进程退出时。 当VPN服务进程销毁时。 
VPN Config参数说明
示例：
import { vpnExtension} from '@kit.NetworkKit';\n\nlet vpnConfig: vpnExtension.VpnConfig = {\n  // 配置VPN虚拟网卡的IP地址\n  addresses: [{\n    address:'192.x.x.5',\n    prefixLength:24\n  }],\n  // 配置路由参数\n  routes: [{\n    // VPN虚拟网卡接口名固定为“vpn-tun”\n    interface: 'vpn-tun',\n    destination: {\n      address: {\n        address:'10.x.x.8',\n        family:1,\n        port:8080\n      },\n      prefixLength:24\n    },\n    gateway: {\n      address:'10.x.x.5',\n      family:1,\n      port:8080\n    },\n    hasGateway: false,\n    isDefaultRoute: false,\n  }],\n  // 配置最大传输单元值\n  mtu: 1400,\n  // 配置VPN使用的DNS服务器，\n  dnsAddresses: ['223.x.x.5', '223.x.x.6'],\n  // VPN生效白名单的应用\n  trustedApplications: ['com.test.browser'],\n  // 不生效VPN黑名单的应用\n  blockedApplications: ['com.test.games'],\n}\nlet context: vpnExtension.VpnExtensionContext;\n\nfunction vpnCreate(){\n  let VpnConnection: vpnExtension.VpnConnection = vpnExtension.createVpnConnection(context);\n  VpnConnection.create(vpnConfig).then((data) => {\n    console.info(\"vpn create \" + JSON.stringify(data));\n  })\n}
VPN Demo示例
HarmonyOS开源项目包含一个名为VPN的示例应用。此应用展示了如何设置和连接 VPN 服务。
