按钮 (Button)
Button是按钮组件，通常用于响应用户的点击操作，其类型包括胶囊按钮、圆形按钮、普通按钮。Button做为容器使用时可以通过添加子组件实现包含文字、图片等元素的按钮。具体用法请参考Button。
创建按钮
Button通过调用接口来创建，接口调用有以下两种形式：
 创建不包含子组件的按钮。 Button(label?: ResourceStr, options?: { type?: ButtonType, stateEffect?: boolean }) 其中，label用来设置按钮文字，type用于设置Button类型，stateEffect属性设置Button是否开启点击效果。 Button('Ok', { type: ButtonType.Normal, stateEffect: true }) \n  .borderRadius(8) \n  .backgroundColor(0x317aff) \n  .width(90)\n  .height(40)  创建包含子组件的按钮。 Button(options?: {type?: ButtonType, stateEffect?: boolean}) 只支持包含一个子组件，子组件可以是基础组件或者容器组件。 Button({ type: ButtonType.Normal, stateEffect: true }) {\n  Row() {\n    Image($r('app.media.loading')).width(20).height(40).margin({ left: 12 })\n    Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 })\n  }.alignItems(VerticalAlign.Center)\n}.borderRadius(8).backgroundColor(0x317aff).width(90).height(40)  
设置按钮类型
Button有三种可选类型，分别为胶囊类型（Capsule）、圆形按钮（Circle）和普通按钮（Normal），通过type进行设置。
 胶囊按钮（默认类型）。 此类型按钮的圆角自动设置为高度的一半，不支持通过borderRadius属性重新设置圆角。 Button('Disable', { type: ButtonType.Capsule, stateEffect: false }) \n  .backgroundColor(0x317aff) \n  .width(90)\n  .height(40)  圆形按钮。 此类型按钮为圆形，不支持通过borderRadius属性重新设置圆角。 Button('Circle', { type: ButtonType.Circle, stateEffect: false }) \n  .backgroundColor(0x317aff) \n  .width(90) \n  .height(90)  普通按钮。 此类型的按钮默认圆角为0，支持通过borderRadius属性重新设置圆角。 Button('Ok', { type: ButtonType.Normal, stateEffect: true }) \n  .borderRadius(8) \n  .backgroundColor(0x317aff) \n  .width(90)\n  .height(40)  
自定义样式
 设置边框弧度。 使用通用属性来自定义按钮样式。例如通过borderRadius属性设置按钮的边框弧度。 Button('circle border', { type: ButtonType.Normal }) \n  .borderRadius(20)\n  .height(40)  设置文本样式。 通过添加文本样式设置按钮文本的展示样式。 Button('font style', { type: ButtonType.Normal }) \n  .fontSize(20) \n  .fontColor(Color.Pink) \n  .fontWeight(800)  设置背景颜色。 添加backgroundColor属性设置按钮的背景颜色。 Button('background color').backgroundColor(0xF55A42)  创建功能型按钮。 为删除操作创建一个按钮。 let MarLeft: Record<string, number> = { 'left': 20 }\nButton({ type: ButtonType.Circle, stateEffect: true }) {\n  Image($r('app.media.ic_public_delete_filled')).width(30).height(30)\n}.width(55).height(55).margin(MarLeft).backgroundColor(0xF55A42)  
添加事件
Button组件通常用于触发某些操作，可以绑定onClick事件来响应点击操作后的自定义行为。
Button('Ok', { type: ButtonType.Normal, stateEffect: true }) \n  .onClick(()=>{ \n    console.info('Button onClick') \n  })
场景示例
 用于启动操作。 可以用按钮启动任何用户界面元素，按钮会根据用户的操作触发相应的事件。例如，在List容器里通过点击按钮进行页面跳转。 // xxx.ets\n@Entry\n@Component\nstruct ButtonCase1 {\n  pathStack: NavPathStack = new NavPathStack();\n\n  @Builder\n  PageMap(name: string) {\n    if (name === \"first_page\") {\n      pageOneTmp()\n    } else if (name === \"second_page\") {\n      pageTwoTmp()\n    } else if (name === \"third_page\") {\n      pageThreeTmp()\n    }\n  }\n\n  build() {\n    Navigation(this.pathStack) {\n      List({ space: 4 }) {\n        ListItem() {\n          Button(\"First\").onClick(() => {\n            this.pathStack.pushPath({ name: \"first_page\"})\n          })\n            .width('100%')\n        }\n\n        ListItem() {\n          Button(\"Second\").onClick(() => {\n            this.pathStack.pushPath({ name: \"second_page\"})\n          })\n            .width('100%')\n        }\n\n        ListItem() {\n          Button(\"Third\").onClick(() => {\n            this.pathStack.pushPath({ name: \"third_page\"})\n          })\n            .width('100%')\n        }\n      }\n      .listDirection(Axis.Vertical)\n      .backgroundColor(0xDCDCDC).padding(20)\n    }\n    .mode(NavigationMode.Stack)\n    .navDestination(this.PageMap)\n  }\n}\n\n// pageOne\n@Component\nexport struct pageOneTmp {\n  pathStack: NavPathStack = new NavPathStack();\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(\"first_page\")\n      }.width('100%').height('100%')\n    }.title(\"pageOne\")\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pathStack.pop() // 弹出路由栈栈顶元素\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}\n\n// pageTwo\n@Component\nexport struct pageTwoTmp {\n  pathStack: NavPathStack = new NavPathStack();\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(\"second_page\")\n      }.width('100%').height('100%')\n    }.title(\"pageTwo\")\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pathStack.pop() // 弹出路由栈栈顶元素\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}\n\n// pageThree\n@Component\nexport struct pageThreeTmp {\n  pathStack: NavPathStack = new NavPathStack();\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(\"third_page\")\n      }.width('100%').height('100%')\n    }.title(\"pageThree\")\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pathStack.pop() // 弹出路由栈栈顶元素\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    })\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}  用于提交表单。 在用户登录/注册页面，使用按钮进行登录或注册操作。 // xxx.ets\n@Entry\n@Component\nstruct ButtonCase2 {\n  build() {\n    Column() {\n      TextInput({ placeholder: 'input your username' }).margin({ top: 20 })\n      TextInput({ placeholder: 'input your password' }).type(InputType.Password).margin({ top: 20 })\n      Button('Register').width(300).margin({ top: 20 })\n        .onClick(() => {\n          // 需要执行的操作\n        })\n    }.padding(20)\n  }\n}  悬浮按钮。 在可以滑动的界面，滑动时按钮始终保持悬浮状态。 // xxx.ets\n@Entry\n@Component\nstruct HoverButtonExample {\n  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  build() {\n    Stack() {\n      List({ space: 20, initialIndex: 0 }) {\n        ForEach(this.arr, (item:number) => {\n          ListItem() {\n            Text('' + item)\n              .width('100%').height(100).fontSize(16)\n              .textAlign(TextAlign.Center).borderRadius(10).backgroundColor(0xFFFFFF)\n          }\n        }, (item:number) => item.toString())\n      }.width('90%')\n      Button() {\n        Image($r('app.media.ic_public_add'))\n          .width(50)\n          .height(50)\n      }\n      .width(60)\n      .height(60)\n      .position({x: '80%', y: 600})\n      .shadow({radius: 10})\n      .onClick(() => {\n        // 需要执行的操作\n      })\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(0xDCDCDC)\n    .padding({ top: 5 })\n  }\n}  
