数字与度量衡国际化
使用场景
在不同的国家和文化中，数字、货币和度量衡的表示方法有所不同，包括什么符号作为小数分隔符、分隔符后显示几位数字、使用什么样的货币和度量衡单位等。例如，开发者需要在应用界面显示数字“1,000”（一千），用于表示一件商品的价格。若采用固定格式“1,000”，由于在欧洲某些国家（如德国）使用逗号表示小数点，用户会理解为“1”。为了使界面呈现格式符合当地人的使用习惯，需要对数字、货币和度量衡进行格式化，格式化后会根据用户当前设置的语言和地区进行显示。
开发步骤
[h2]数字格式化
数字格式化通过NumberFormat的format接口实现，具体开发步骤如下。
 导入模块。 import { intl } from '@kit.LocalizationKit'; 创建NumberFormat对象。 传入locale列表时，使用第一个有效的locale创建对象。不传入locale参数时，使用系统当前的locale创建对象。 构造函数支持通过NumberOptions设置不同的数字格式化格式，具体请参考表1-表8。 let numberFormat: intl.NumberFormat = new intl.NumberFormat(locale: string | Array<string>, options?: NumberOptions); 数字格式化，根据numberFormat的设置格式化number。 let formattedNumber: string = numberFormat.format(number: number); 获取数字格式化选项，查看对象的设置信息。 let options: intl.NumberOptions = numberFormat.resolvedOptions(); 
数字格式化选项
对于数字，通过NumberOptions参数可以设置最小整数位数、最小小数位数、最大小数位数、最低有效位数、最大有效位数、是否分组显示、数字的格式化规格、紧凑型的显示格式，以及数字的显示格式和数字系统。其中，数字的显示格式包括decimal(十进制)、percent(百分数)、currency(货币)、unit(单位)。
以123000.123为例，各属性参数取值和显示效果如下表所示。
表1 最小整数位数(minimumIntegerDigits)
表2 最小小数位数(minimumFractionDigits)
表3 最大小数位数(maximumFractionDigits)
表4 最低有效位数(minimumSignificantDigits)
表5 最大有效位数(maximumSignificantDigits)
表6 是否分组显示(useGrouping)
表7 数字的格式化规格(notation)
表8 紧凑型的显示格式(compactDisplay)
开发实例
// 导入模块\nimport { intl } from '@kit.LocalizationKit';\n\n// 用科学计数法显示数字\nlet numberFormat1 = new intl.NumberFormat('zh-CN', {notation: 'scientific', maximumSignificantDigits: 3});\nlet formattedNumber1 = numberFormat1.format(123400); // formattedNumber1: 1.23E5\n\n// 用紧凑的格式显示数字\nlet numberFormat2 = new intl.NumberFormat('zh-CN', {notation: 'compact', compactDisplay: 'short'});\nlet formattedNumber2 = numberFormat2.format(123400); // formattedNumber2: 12万\n\n// 显示数字的符号\nlet numberFormat3 = new intl.NumberFormat('zh-CN', {signDisplay: 'always'});\nlet formattedNumber3 = numberFormat3.format(123400); // formattedNumber3: +123,400\n\n// 显示百分数\nlet numberFormat4 = new intl.NumberFormat('zh-CN', {style: 'percent'});\nlet formattedNumber4 = numberFormat4.format(0.25); // formattedNumber4: 25%
[h2]货币和单位格式化
货币和单位的格式化基于数字格式化，在创建货币和单元格式化对象时，将数字的显示风格分别设置为“currency(货币)”和“unit(单位)”。同样，货币和单位的构造函数也支持通过NumberOptions设置不同的格式，各属性参数取值和显示效果如下表所示。
货币格式化选项
以货币单位: USD，数值: -12300为例。
表9 货币单位的符号(currencySign)
表10 货币的显示方式(currencyDisplay)
单位格式化选项
以单位名称：hectare，数字大小：-12300为例。
表11 单位的显示格式(unitDisplay)
表12 单位的使用场景(unitUsage)
开发实例
// 导入模块\nimport { intl } from '@kit.LocalizationKit';\n\n// 格式化货币\nlet numberFormat5 = new intl.NumberFormat('zh-CN', {style: 'currency', currency: 'USD'});\nlet formattedNumber5 = numberFormat5.format(123400); // formattedNumber5: US$123,400.00\n\n// 用名称表示货币\nlet numberFormat6 = new intl.NumberFormat('zh-CN', {style: 'currency', currency: 'USD', currencyDisplay: 'name'});\nlet formattedNumber6 = numberFormat6.format(123400); // formattedNumber6: 123,400.00美元\n\n// 格式化度量衡\nlet numberFormat7 = new intl.NumberFormat('en-GB', {style: 'unit', unit: 'hectare'});\nlet formattedNumber7 = numberFormat7.format(123400); // formattedNumber7: 123,400 ha\n\n// 格式化特定场景下度量衡，如面积-土地-农业\nlet numberFormat8 = new intl.NumberFormat('en-GB', {style: 'unit', unit: 'hectare', unitUsage: 'area-land-agricult'});\nlet formattedNumber8 = numberFormat8.format(123400); // formattedNumber8: 304,928.041 ac
[h2]度量衡转换
单位转换并根据区域和风格进行格式化，通过I18NUtil类的unitConvert接口实现，具体开发步骤如下。
 导入模块。 import { i18n } from '@kit.LocalizationKit'; 度量衡转换。 将度量衡从fromUnit转换到toUnit，数值为value，并根据区域和风格进行格式化。style可取不同的值，显示不用效果，具体请参考表13。 let convertedUnit: string = i18n.I18NUtil.unitConvert(fromUnit: UnitInfo, toUnit: UnitInfo, value: number, locale: string, style?: string); 
格式化风格
以fromUnit为美制单位cup，toUnit为公制单位liter，数字大小：1000为例。
表13 格式化使用的风格(style)
开发实例
// 导入模块\nimport { i18n } from '@kit.LocalizationKit';\n\n// 设置要转换的单位和目标单位\nlet fromUnit: i18n.UnitInfo = {unit: 'cup', measureSystem: 'US'};\nlet toUnit: i18n.UnitInfo = {unit: 'liter', measureSystem: 'SI'};\n\n// 以en-US区域参数转换度量衡\nlet convertedUnit1 = i18n.I18NUtil.unitConvert(fromUnit, toUnit, 1000, 'en-US'); // convertedUnit1: 236.588 L\n\n// 显示完整的度量衡\nlet convertedUnit2 = i18n.I18NUtil.unitConvert(fromUnit, toUnit, 1000, 'en-US', 'long'); // convertedUnit2: 236.588 liters
