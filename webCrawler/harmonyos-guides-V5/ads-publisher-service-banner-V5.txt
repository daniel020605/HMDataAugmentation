横幅广告
场景介绍
横幅广告又名Banner广告，是在应用程序顶部、中部或底部占据一个位置的矩形图片，广告内容每隔一段时间会自动刷新。
接口说明
接口名
描述
AutoAdComponent(adParam: advertising.AdRequestParams, adOptions: advertising.AdOptions, displayOptions: advertising.AdDisplayOptions, interactionListener: advertising.AdInteractionListener): void
展示广告，通过AdRequestParams、AdOptions进行广告请求参数设置，通过AdDisplayOptions进行广告展示参数设置，通过AdInteractionListener监听广告状态回调。
开发步骤
获取OAID。如果想要为用户更精准的推送广告，可以在请求参数AdRequestParams中添加oaid属性以提升广告推送精准度和广告填充率。。 如何获取OAID参考获取OAID信息。  使用以下示例中提供的测试广告位必须先获取OAID信息。  请求和展示广告。在您的页面中使用AutoAdComponent组件展示横幅广告。 请求广告关键参数如下所示： 请求广告参数名  类型  必填  说明    adType  number  是  请求广告类型，横幅广告类型为8。   adId  string  是  广告位ID。 如果仅调测广告，可使用测试广告位ID：testw6vs28auh3。如果要接入正式广告，则需要申请正式的广告位ID。可在应用发布前进入流量变现官网，点击“开始变现”，登录鲸鸿动能媒体服务平台进行申请，具体操作详情请参见展示位创建。   adWidth  number  是  广告位宽，单位vp。宽和高支持360*57和360*144两种尺寸。   adHeight  number  是  广告位高，单位vp。宽和高支持360*57和360*144两种尺寸。   oaid  string  否  开放匿名设备标识符，用于精准推送广告。不填无法获取到个性化广告。     展示广告关键参数如下所示： 展示广告参数名  类型  必填  说明    refreshTime  number  否  横幅广告轮播时间。单位ms，取值范围[30000, 120000]。 如果不设置或取值为非数字或小于等于0的数字，则不轮播。设置小于30000的数字取值30000，设置大于120000的数字取值120000。     示例代码如下所示：import { advertising, AutoAdComponent, identifier } from '@kit.AdsKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct Index {\n  @State adParam: advertising.AdRequestParams = {\n    // 广告类型：横幅广告\n    adType: 8,\n    // 'testw6vs28auh3'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n    adId: 'testw6vs28auh3',\n    // 广告位宽\n    adWidth: 360,\n    // 广告位高\n    adHeight: 57,\n    // 开放匿名设备标识符\n    oaid: ''\n  };\n  private adOptions: advertising.AdOptions = {\n    // 是否允许流量下载0：不允许，1：允许，不设置以广告主设置为准\n    allowMobileTraffic: 0,\n    // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\n    tagForChildProtection: -1,\n    // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\n    tagForUnderAgeOfPromise: -1,\n    // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\n    adContentClassification: 'A'\n  };\n  private displayOptions: advertising.AdDisplayOptions = {\n    // 广告轮播的时间间隔，单位ms，取值范围[30000, 120000]\n    refreshTime: 30000\n  }\n  private ratio: number = 1;\n  private adWidth: number = -1;\n  private adHeight: number = -1;\n  @State visibilityState: Visibility = Visibility.Visible;\n\n  aboutToAppear() {\n    try {\n      // 使用Promise回调方式获取OAID\n      identifier.getOAID().then((data) => {\n        this.adParam.oaid = data;\n        hilog.info(0x0000, 'testTag', '%{public}s', `Succeeded in getting adsIdentifierInfo by promise`);\n      }).catch((error: BusinessError) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to get adsIdentifierInfo, code: ${error.code}, message: ${error.message}`);\n      })\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\n    }\n\n    if (this.adParam?.adWidth && typeof (this.adParam?.adWidth) === 'number' && this.adParam?.adWidth > 0) {\n      this.adWidth = this.adParam?.adWidth;\n    }\n    if (this.adParam?.adHeight && typeof (this.adParam?.adHeight) === 'number' && this.adParam?.adHeight > 0) {\n      this.adHeight = this.adParam?.adHeight;\n    }\n    if (this.adWidth > 0 && this.adHeight > 0) {\n      this.ratio = this.adWidth / this.adHeight;\n    }\n  }\n\n  build() {\n    if (this.adParam.oaid) {\n      Stack({ alignContent: Alignment.Bottom }) {\n        this.buildBannerView()\n      }\n    }\n  }\n\n  @Builder\n  buildBannerView() {\n    Row() {\n      AutoAdComponent({\n        adParam: this.adParam,\n        adOptions: this.adOptions,\n        displayOptions: this.displayOptions,\n        interactionListener: {\n          onStatusChanged: (status: string, ad: advertising.Advertisement, data: string) => {\n            hilog.info(0x0000, 'testTag', '%{public}s', `status is ${status}`);\n            switch (status) {\n              case AdStatus.AD_OPEN:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdOpen');\n                break;\n              case AdStatus.AD_CLICKED:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClick');\n                break;\n              case AdStatus.AD_CLOSED:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClose');\n                this.visibilityState = Visibility.None;\n                break;\n              case AdStatus.AD_LOAD:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdLoad');\n                break;\n              case AdStatus.AD_FAIL:\n                hilog.error(0x0000, 'testTag', '%{public}s', 'Status is onAdFail');\n                this.visibilityState = Visibility.None;\n                break;\n            }\n          }\n        }\n      })\n    }\n    .width('100%')\n    .aspectRatio(this.ratio)\n    .visibility(this.visibilityState)\n  }\n}\n\nenum AdStatus {\n  AD_LOAD = 'onAdLoad',\n  AD_FAIL = 'onAdFail',\n  AD_OPEN = 'onAdOpen',\n  AD_CLICKED = 'onAdClick',\n  AD_CLOSED = 'onAdClose',\n  AD_REWARDED = 'onAdReward',\n  AD_VIDEO_START = 'onVideoPlayBegin',\n  AD_COMPLETED = 'onVideoPlayEnd'\n}  
