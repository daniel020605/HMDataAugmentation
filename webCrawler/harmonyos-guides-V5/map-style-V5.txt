显示自定义地图
场景介绍
本章节将向您介绍如何在应用中添加自定义样式的地图。
接口说明
自定义样式功能主要由CustomMapStyleOptions、setCustomMapStyle提供，更多接口及使用方法请参见接口文档。
接口名
描述
CustomMapStyleOptions
自定义样式参数。
setCustomMapStyle(customMapStyleOptions: mapCommon.CustomMapStyleOptions): Promise<void>
将地图样式修改为自定义样式。
开发步骤
Map Kit提供两种方法设置自定义地图样式：
 设置样式ID：使用Petal Maps Studio管理地图样式，并使用样式ID将它们链接到您的地图上。您可以在Petal Maps Studio上创建新样式，或导入现有样式定义。样式一旦发布，使用此样式的应用都会自动应用新样式。 设置样式内容：通过传入自定义JSON更改地图样式，JSON的定义参见样式参考。 
[h2]设置样式ID
 导入相关模块。import { MapComponent, mapCommon, map } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit'; 创建样式ID。        登录Petal Maps Studio。    点击“Create map”创建自定义样式。    导入JSON样式文件，点击“Import”。    在编辑器里修改样式。    点击“SAVE”生成预览ID，预览ID在编辑样式时会重新生成，您可以通过预览ID测试样式效果。点击“PUBLISH”发布生成样式ID，样式ID是唯一ID，一旦发布生效不会变化。   Map Kit提供两种方法设置样式ID：        在创建地图后设置样式ID@Entry\n@Component\nstruct CustomMapStyleDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private mapController?: map.MapComponentController;\n  private callback?: AsyncCallback<map.MapComponentController>;\n\n  aboutToAppear(): void {\n    // 地图初始化参数\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 31.984410259206815,\n          longitude: 118.76625379397866\n        },\n        zoom: 15\n      }\n    };\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n        // 自定义样式参数，styleId需要替换为您自己的样式ID或者预览ID，样式ID或者预览ID可在Petal Maps Studio平台上创建\n        let param: mapCommon.CustomMapStyleOptions = {\n          styleId: \"1346407266336828736\"\n        };\n        // 设置自定义样式\n        await this.mapController.setCustomMapStyle(param);\n      }\n    };\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback });\n      }.width('100%')\n    }.height('100%')\n  }\n} 在初始化地图时设置样式ID@Entry\n@Component\nstruct CustomMapStyleDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private mapController?: map.MapComponentController;\n  private callback?: AsyncCallback<map.MapComponentController>;\n\n  aboutToAppear(): void {\n    // 地图初始化参数\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 31.984410259206815,\n          longitude: 118.76625379397866\n        },\n        zoom: 15\n      },\n      // 自定义样式参数，styleId需要替换为您自己的样式ID或者预览ID，样式ID或者预览ID可在Petal Maps Studio平台上创建\n      styleId: \"1346407266336828736\"\n    };\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n      }\n    };\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback });\n      }.width('100%')\n    }.height('100%')\n  }\n}  设置样式ID之后效果如下：  
[h2]设置样式内容
 导入相关模块。import { MapComponent, mapCommon, map } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit'; 设置样式内容。@Entry\n@Component\nstruct CustomMapStyleDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private mapController?: map.MapComponentController;\n  private callback?: AsyncCallback<map.MapComponentController>;\n\n  aboutToAppear(): void {\n    // 地图初始化参数\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 31.984410259206815,\n          longitude: 118.76625379397866\n        },\n        zoom: 15\n      }\n    };\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n        // 自定义样式参数\n        let param: mapCommon.CustomMapStyleOptions = {\n          styleContent: `[{\n                   \"mapFeature\": \"landcover.natural\",\n                   \"options\": \"geometry.fill\",\n                   \"paint\": {\n                       \"color\": \"#8FBC8F\"\n                   }},\n                   {\n                  \"mapFeature\": \"water\",\n                  \"options\": \"geometry.fill\",\n                  \"paint\": {\n                      \"color\": \"#4682B4\"\n                  }}]`\n        };\n        // 设置自定义样式\n        await this.mapController.setCustomMapStyle(param);\n      }\n    };\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback });\n      }.width('100%')\n    }.height('100%')\n  }\n}  
[h2]样式参考
自定义地图样式JSON内容通过下列4个元素来定义地图样式：
 mapFeature：地图要素 options：元素选项        geometry.fill：几何填充 geometry.stroke：几何描边 geometry.icon：几何图标 labels.text.fill：文本填充 labels.text.stroke：文本描边  paint：绘制属性        color：颜色，16进制颜色，例如“#FFFF00” weight：线条宽度。整型值，[0, 8]，默认为0，大于0表示加宽 saturation：饱和度。整型值，[-100, 100]，默认为0 lightness：亮度。整型值，[-100, 100]，默认为0 icon-type：图标类型，目前支持night、simple、standard  visibility：可见属性，默认为复用模板        inherit：复用模板 hidden：隐藏 shown：显示  
下列各表将向您展示支持修改的地图元素。
 图标类型icon-type支持范围为：standard/night/simple。 饱和度Saturation和亮度Lightness可在元素颜色Color中进行配置。 
 AllAll代表全部，即所有类别的集合，支持能力范围同其他所有列表。 Administrative            元素类型 Feature type Geometry Labels Icon   填充颜色 fill. color 填充宽度 fill. weight 描边颜色 stroke. color 描边宽度 stroke. weight 填充颜色 fill. color 文本大小 fill. weight 描边颜色 stroke. color 描边大小 stroke. weight 图标类型 icon- type    capital 首都 - - - -        Country 国家         -   District 区/县 - - - -        Locality 乡村、城镇 - - - -        Major-city 1-4级城市 - - - -        Province 省         -    Landcover            元素类型 Feature type Geometry Labels   填充颜色 fill.color 描边颜色 stroke.color 填充颜色 fill.color 文本大小 fill.weight 描边颜色 stroke.color 描边大小 stroke.weight    Attraction 游乐场、动植物园等  -       Business 购物中心、商业区等  -       College 学校  -       Hospital 医院  -       Human-made 聚集区、小区、工业区、监狱地面等         Human-made 建筑物   - - - -   Natural 陆地、岛屿、海滩、冰川等  -       Parkland 森林、公园、荒地、高尔夫球场等  -        Poi            元素类型 Feature type Labels Icon   填充颜色 fill.color 文本大小 fill.weight 描边颜色 stroke.color 描边大小 stroke.weight 图标类型 icon-type    Airport 飞机场        Automotive 汽修、充电桩、洗车等        Beauty 美容中心        Business 公司、商业楼等        Eating&drinking 饮食快餐        Health-care 医院、诊所、药店等        Leisure 休闲娱乐        Lodging 酒店、住宿点        Miscellaneous 自然地物        Natural 山峰、森林等        Public-service 医院、诊所、药店等        Railway 铁路        Shopping 购物中心、市场等        Sports outdoor户外运动、爬山、骑车等        Tourism 旅游景点、历史遗迹、教堂等         Road            元素类型 Feature type Geometry Labels Icon   填充颜色 fill. color 填充宽度 fill. weight 描边颜色 stroke. color 描边宽度 stroke. weight 填充颜色 fill. color 文本大小 fill. weight 描边颜色 stroke. color 描边大小 stroke. weight 图标类型 icon- type    City-arterial 城市主干道            Highway 城市高速            Minor-road 市区内支线等         -   National 国道            Province 省道            Sidewalk 人行道         -    Trafficinfo            元素类型 Feature type Geometry Labels   填充颜色 fill.color 填充颜色 fill.color 文本大小 fill.weight    Closed 封路       Transit            元素类型 Feature type Geometry Labels Icon   填充颜色 fill. color 填充宽度 fill. weight 描边颜色 stroke. color 描边宽度 stroke.weight 填充颜色 fill. color 文本大小 fill. weight 描边颜色 stroke. color 描边大小 stroke.weight 图标类型 icon- type    Airport 机场  - - -        Airport Runway 机场跑道                      Airport Runway Taxiway 机场跑道滑行道                      Bus 公交 - - - -        Ferry-line 航线  - - -     -   Ferry-terminal 港口  - - -        Other 出租车、 出入口等 - - - -        Rail-station 火车站、 高铁站  - - -        Railway 铁路线、 高铁线     - - - - -   Subway 地铁            Traffic_light 交通灯                             Water            元素类型 Feature type Geometry Labels   填充颜色 fill.color 填充颜色 fill.color 文本大小 fill.weight    Ocean 水系、海洋、湖泊、河流       
