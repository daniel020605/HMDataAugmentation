ohpmrc
ohpm配置文件。
描述
ohpm从命令行和.ohpmrc文件中获取其配置设置。ohpm config命令可用于修改用户级.ohpmrc文件的内容。
文件
项目级配置文件：/path/to/my/project/.ohpmrc用户级配置文件：~/.ohpm/.ohpmrc所有 ohpm 配置文件均是 ini 格式：<key>= <value> 的参数列表
命令行工具会优先读取项目级的配置文件。如果缺少某些配置项，将从用户级配置文件中读取缺失的配置项信息。在工程任意子目录下执行ohpm命令，都可以读取到项目级的.ohpmrc配置。
注释
.ohpmrc 文件中以 # 或 ; 字符为注释符。
更新配置
执行如下命令可设置用户级配置：
ohpm config set key value
默认配置项
配置项
字段名称
字段说明
字段类型
默认值
备注
仓库设置
registry
下载仓库
字符串
https://ohpm.openharmony.cn/ohpm/
可以配置多个仓库地址，以英文逗号间隔，多个仓库地址的优先级按照配置顺序排序。
@group:registry
指定仓库
字符串
\"\"
根据group指定组织的仓库地址。支持多个仓库地址，以英文逗号间隔，且优先级大于registry配置，多个仓库地址的优先级按照配置顺序排序。
发布设置
publish_registry
发布仓库
字符串
https://ohpm.openharmony.cn/ohpm/
配置发布的仓库地址，仅支持配置一个仓库地址。
publish_id
用户发布号
字符串
\"\"
用户发布号，用来发布三方库，全局唯一。
路径设置
cache
缓存路径
字符串
~/.ohpm/cache
-
key_path
私钥路径
字符串
\"\"
利用ssh-keygen工具生成的私钥的放置路径地址。
网络设置
no_proxy
不使用proxy代理
字符串
\"\"
配置不使用代理的仓库地址，可配置多个，以英文逗号间隔；值可以是域名或者ip，支持二级域名通配符*（例如：*.huawei.com）。
http_proxy
http代理
字符串
\"\"
支持用户名和密码的网络代理，特殊字符需要转义。示例：http://proxy_server:port。
https_proxy
https代理
字符串
\"\"
支持用户名和密码的网络代理，特殊字符需要转义。示例：https://proxy_server:port。
strict_ssl
ssl校验
布尔
true
默认值为true，校验https证书；若配置为false，则不校验https证书。
ca_files
ca证书路径
字符串
\"\"
strict_ssl=true时校验服务端证书需要的ca证书放置路径，可以放置多个证书路径，以英文逗号间隔。详情请见：CA证书获取及配置。
fetch_timeout
请求超时时间
数值
60000
取值范围：[10000，360000]，单位为毫秒。如果设置的fetch_timeout值不在取值范围内，则默认为：60000。
并发设置
max_concurrent
最大并发量
数值
50
取值范围：[1, 200]，设置每个模块在安装时允许的最大并发量。
retry_times
出错重试次数
数值
1
取值范围：[0, 5], 针对白名单内的异常，程序会按配置重试指定次数，白名单有：
ECONNRESET：连接被对端重置ECONNREFUSED：连接被服务器拒绝ETIMEDOUT：连接超时RESPONSETIMEOUT：响应超时TARBADARCHIVE：包格式异常
retry_interval
出错重试间隔时间
数值
1000
取值范围：[1000, 60000], 单位毫秒。
依赖冲突设置
resolve_conflict
开启自动解决依赖版本冲突功能
布尔
true
默认开启。当设置为true或缺省时，ohpm会自动处理依赖版本冲突，详情请见：resolve_conflict。
其他设置
log_level
日志级别
字符串
info
可设置日志输出级别，对应级别类型有debug、info、warn、error。
install_all
是否安装工程所有模块的依赖
布尔
true
默认为true。当设置为true或缺省时，在执行ohpm install、ohpm update、ohpm uninstall时，将会安装工程下所有模块的依赖。详情请见install_all。
:_auth和:_read_auth
AccessToken配置项
字符串
无
ohpm-repo支持使用access token进行认证。详情请见AccessToken。
enforce_dependency_key
开启依赖名称校验
布尔
false
默认为false。设置为true后，ohpm会校验配置的本地依赖名称与其对应的包名是否一致，若不一致会导致命令执行失败。详情请见enforce_dependency_key。
ensure_dependency_include
开启依赖扫描功能
布尔
false
默认为false。从ohpm 1.7.0开始，在执行ohpm publish命令时，会检查发布包的源码中，静态导入的三方依赖是否都声明在oh-package.json5的dependencies或dynamicDependencies中。若缺少依赖声明且字段设置为false时，会提示相应告警信息；设置为true时，则会使命令执行失败并提示错误信息。
projectPackageJson:<project_root>
工程oh-package.json5配置覆盖
字符串
无
用于覆盖工程根目录下oh-package.json5中的配置。
配置项名称中的<project_root>表示工程根目录路径（根据实际情况替换为真实的工程根目录路径）。配置项的值为指定的工程级oh-package.json5文件的路径，支持使用相对路径（当使用相对路径时，根路径为<project_root>）。
disallow_nested_package
开启包内.har/.tgz依赖
配置路径检测
布尔
false
默认为false。设置为true后，在执行prepublish/publish时，会扫描包内是否存在'./'形式配置且后缀为.har/.tgz格式的依赖，如果存在，则会使命令执行失败并提示报错信息。
odm_r2_project_root
开启overrideDependencyMap中相对路径自动转换功能
布尔
false
默认为false。设置为true后，当存在overrideDependencyMap配置且其配置项对应的配置文件内存在相对路径的依赖配置时，ohpm会基于工程根路径解析来查找这些相对路径。详情见odm_r2_project_root。
enable_cross_process_lock
启用跨进程锁
布尔
true
默认为true。由于oh_modules目录结构限制，ohpm不支持在同一个工程下并行运行多个ohpm install、ohpm update或ohpm uninstall命令，若需要在同一个工程下执行多个ohpm install、ohpm update或ohpm uninstall命令，则必须将该配置设置为true，以保证这多个命令以串行的方式运行。
compability_log_level
兼容性字段检测日志等级
字符串
warn
默认为warn。在执行prepublish、publish命令时，ohpm会检测oh-package.json5文件中是否配置了兼容性检测需要的所有字段（'compatibleSdkVersion', 'compatibleSdkType', 'obfuscated', 'nativeComponents'），如果未配置，则会根据日志等级打印提示或报错。详情请见compability_log_level。
use_stream_threshold_size
流式上传阈值
数值
5
取值范围：[0, 300]，单位mb。当publish三方库的文件体积大于此阈值时将会使用流式上传三方库，如果仓库不存在流式上传接口则自动转为Base64方式上传。
lockfile_stable_order
oh-package-lock.json5内容稳定排序
布尔
false
默认为false。若设置为true，会确保在oh-package.json5文件未变更时，当前已生成的oh-package-lock.json5各字段内容不变。
CA证书获取及配置
依次访问以下证书下载地址，并根据下图操作下载CA证书到本地：
https://ohpm.openharmony.cn/\nhttps://contentcenter-drcn.dbankcdn.cn/   //该域名用于文件资源下载，访问根路径仅可用于获取CA证书
下载证书，请选择保存类型为证书链。
在 .ohpmrc 文件中配置 ca_files=证书路径1,证书路径2。
ca_files=D:\\_.openharmony.cn.crt,D:\\update.hicloud.crt
install_all
在ohpm客户端1.8.0版本的.ohpmrc中支持install_all配置，用于控制ohpm install，ohpm update，ohpm uninstall的行为，install_all在.ohpmrc文件中设置为true或缺省时：
使用ohpm install命令时，将安装工程下所有模块的依赖，与使用ohpm install --all行为一致；使用ohpm update时，将默认更新本模块下依赖并安装工程下所有模块的依赖，与使用ohpm update --all一致；使用ohpm uninstall时，将默认删除本模块下依赖并安装工程下所有模块的依赖，与使用ohpm uninstall --all一致。
resolve_conflict
ohpm客户端在1.5.0版本开始支持依赖版本冲突自动解决功能。只需要在.ohpmrc文件中，将resolve_conflict配置为true或缺省，即可开启该功能。依赖冲突的处理策略为：当您的项目同时依赖了某个三方库的不同版本时，ohpm将选择其中的最高版本进行安装。
若某个三方库同时存在远程版本和本地版本（本地文件或源码依赖），无论本地版本的版本号是否大于远程版本，ohpm的冲突处理策略都会优先选择本地版本作为待安装的版本。
[h2]模块内依赖版本冲突
如上图所示的依赖路径中，moduleA 为您正在开发的模块，其直接依赖为 B@1.1，C@1.1。其中 B@1.1 与 C@1.1 分别依赖了 D 的两个版本 D@1.2 与 D@1.3。当您开启了依赖版本冲突自动解决功能，ohpm将会选择 D@1.3 版本作为待安装的版本，最终依赖路径被解析为下图蓝色箭头所指向的路径：
[h2]模块间依赖版本冲突
如上图所示的依赖路径中，moduleA、moduleB 为您同一项目下正在开发的两个模块，其中moduleA 依赖 B@1.1，moduleB 依赖 C@1.1，B@1.1 与 C@1.1 分别依赖了 D 的两个版本 D@1.2 与 D@1.3。当您开启了依赖版本冲突自动解决功能，并且您是使用 ohpm install --all 进行安装时，ohpm将会选择 D@1.3 版本作为待安装的版本，最终依赖路径被解析为下图蓝色箭头所指向的路径：
[h2]更新依赖版本的场景
当您希望将您某个模块的直接依赖更新成另一个版本，如下图所示，您手动将 C@1.1 更新为 C@1.2：
由于 C 更新为 C@1.2 后，不再依赖 D，若依赖 D 的版本在更新 C 版本之前已经通过 ohpm 的自动冲突处理机制锁定为 D@1.3 版本，此时 C 版本的升级将不会导致 D 的版本由 D@1.3 回退为 D@1.2，这样可以保证每一次更新都只是在上一次结果上进行影响最小的修改，最终的依赖路径将会被解析为下图蓝色箭头所指向的路径：
对于上述场景，如果希望D版本同时也回退至D@1.2版本，则需要在ohpm install之前执行ohpm clean命令清理各模块下的oh-package-lock.json5文件，以消除上一次安装结果的影响。
[h2]ohpm install命令带--target_path选项时依赖冲突处理
target_path下是hvigor在构建时根据目标产物target为各模块自动生成定制的依赖配置文件（oh-package.json5），详见target_path。在生成的oh-package.json5中，依赖的版本部分可能包含targetName，示例：\"A\": \"1.0.0+targetName\"。
包含targetName信息的版本完整格式为：<major>.<minor>.<patch>[-<pre-release>][+<targetName>]，此时冲突处理规则如下：
1、<major>.<minor>.<patch>[-<pre-release>]部分的比较规则依然遵循上文各场景所描述的处理规则，即取版本号最大的依赖。
2、当两个版本<major>.<minor>.<patch>[-<pre-release>]部分一致时，取尾部有[+<targetName>]信息的依赖。
1、当两个版本尾部均有[+<targetName>]信息，且targetName不一致时，会根据<target_path>/dependencyMap.json5中targetName是否为空进行区分处理。
当targetName空时，打印警告提示。当targetName有值时，报错提示并中断程序。
2、当两个依赖中有一个是本地依赖时，优先取本地依赖；当两个依赖均是本地依赖时，获取本地依赖包内oh-package.json5配置的version再次按照上述规则继续比较。
[h2]限制条件说明
由于本功能尚在Beta阶段，存在如下的限制条件：
若希望解决当前项目所有模块下的依赖版本冲突，请使用ohpm install --all完成依赖安装。若在执行ohpm update或ohpm uninstall命令后，可能会破坏项目原有的依赖版本冲突处理结果。请额外执行一次ohpm install --all命令，重新处理当前项目所有模块下的依赖版本冲突。当本地文件（.har或.tgz后缀）依赖之间、本地源码模块依赖之间、本地文件（.har或.tgz后缀）依赖与本地源码模块依赖之间出现冲突时，ohpm自动冲突处理机制会比较该依赖内部oh-package.json5文件中version字段配置的版本号大小，版本号大的将会被安装。 如难以感知本地文件或本地源码依赖中的版本号，建议使用overrides来处理冲突。  
AccessToken
AccessToken是 ohpm-repo 2.1.0版本新引入的认证机制，用户通过ohpm-repo界面生成Token，并将其配置至ohpm客户端配置文件中。
在与 ohpm-repo 交互时，客户端会自动附带Token进行身份验证。该Token分两种权限等级：
只读Token允许执行info和install操作；读写Token除了包含只读权限外，还支持publish和unpublish操作。
每位用户每种权限类型的Token最多可生成10个，首次生成时系统自动复制到剪贴板，后续不再显示完整Token内容。
[h2]如何获取AccessToken
当前AccessToken仅 ohpm-repo 支持，在 ohpm-repo 的个人中心->认证管理->AccessToken页面进行生成。
[h2]如何配置AccessToken
配置示例如下所示:
//127.0.0.1:8088/repos/ohpm/:_auth=readWriteToken\n//127.0.0.1:8088/repos/ohpm/:_read_auth=readOnlyToken
其中 ：
//127.0.0.1:8088/repos/ohpm/ 是ohpm-repo的registry地址去除协议名的部分；:_auth 和 :_read_auth 分别代表配置为读写Token或只读Token，readWriteToken和readOnlyToken代表Token具体的值。ohpm客户端执行info、install操作会优先使用只读Token，如果只读Token不存在才会使用读写Token。ohpm客户端执行publish、unpublish操作时只会使用读写Token。每种Token最多配置三条。
enforce_dependency_key
ohpm从1.7.0版本开始，支持在.ohpmrc文件中支持配置enforce_dependency_key，该配置项值为布尔类型，默认为false。将配置设置为true后，ohpm会校验各模块的oh-package.json5中配置的直接依赖中的本地依赖名称与其对应的包名(模块名)是否一致，若不一致会导致依赖安装失败并在错误日志中打印出不一致的依赖名称与其对应的包名(模块名)。
示例：
在MyApplication工程下存在一个名称为foo的模块，foo模块的oh-package.json5如下所示：
{\n  \"name\": \"foo\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Please describe the basic information.\",\n }
在MyApplication工程下存在另一个名称为bar的模块，且bar模块中依赖了foo模块，bar模块的oh-package.json5如下所示：
{\n  \"name\": \"bar\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Please describe the basic information.\",\n  \"dependencies\": {\n    \"fee\": \"file:../foo\"  \n  },\n }
如上所示，bar模块的oh-package.json5中配置了对foo模块的依赖，并为foo模块起了一个别名为fee。当在.ohpmrc中将enforce_dependency_key配置为true时：
enforce_dependency_key=true
此时在MyApplication下执行ohpm install --all命令将打印如下错误日志，同时会中断命令的执行：
ohpm ERROR: local dependency \"fee\" found in \"D:\\DevecostudioProjects\\MyApplication2\\bar\\oh-package.json5\" does not match the actual name \"foo\" of its oh-package.json5\nohpm ERROR: Install failed, detail: There are some dependency names that are inconsistent with the actual package names.
若没有配置enforce_dependency_key或将其配置为false时，命令将不会被中断，同时上述错误日志的日志级别将会下调为告警日志：
ohpm WARN: local dependency \"fee\" found in \"D:\\DevecostudioProjects\\MyApplication2\\bar\\oh-package.json5\" does not match the actual name \"foo\" of its oh-package.json5
建议在.ohpmrc文件中配置enforce_dependency_key为true，禁止以别名的方式配置本地依赖，避免出现如下场景：
基于上述示例，在MyApplication下真的存在一个名称为fee的模块，且该模块的版本号小于foo模块，fee模块的oh-package.json5如下所示：
{\n  \"name\": \"fee\",\n  \"version\": \"1.0.0\",  // 小于foo的版本号2.0.0\n  \"description\": \"Please describe the basic information.\",\n }
且entry模块中同时依赖了fee与bar，entry模块的oh-package.json5依赖配置如下所示：
{\n  \"name\": \"entry\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"fee\": \"file:../fee\"\n    \"bar\": \"file:../foo\"  \n  },\n }
此时在entry的依赖树中，依赖fee存在两个版本：一个别名为fee的foo模块，一个名称为fee的fee模块，若此时开启了resolve_conflict，由于fee模块的实际版本号为1.0.0要小于foo模块的版本号2.0.0，在执行ohpm install时将只会在entry模块的oh_modules下安装以fee为别名的foo模块，而实际的fee模块则不会被安装，如下图所示：
在entry的oh_modules下会生成一个名称为fee的软连接，该链接却指向foo模块的实际路径：
如果entry实际希望依赖的是真实的fee模块而不是foo模块，则此时会导致entry无法编译成功。
1、从ohpm客户端5.0.7开始，若项目级build-profile.json5文件中strictMode字段下配置了useNormalizedOHMUrl开关且useNormalizedOHMUrl=true，则该配置优先级高于enforce_dependency_key，如果ohpm检测到依赖别名与oh-package.json5中name不一致时，会报错提示并中止程序执行；若未配置useNormalizedOHMUrl或useNormalizedOHMUrl=false时，是否校验别名一致性则根据enforce_dependency_key配置决定。
2、项目级build-profile.json5文件中，products节点下任意product字段配置了useNormalizedOHMUrl=true，则ohpm中useNormalizedOHMUrl开关会被设置为true，即ohpm检测到项目中依赖别名与oh-package.json5中name不一致时，会报错提示并中止程序执行。
odm_r2_project_root
odm_r2_project_root是ohpm客户端1.8.0新增的开关配置，默认为false，可以通过config命令或直接在.ohpmrc文件中修改其值。
当该配置为true时，若在overrideDependencyMap中配置的依赖项替换文件中存在以相对路径配置的本地依赖项时，在ohpm运行时会基于工程根路径来查找这些本地依赖项。
示例：
.ohpmrc中开启odm_r2_project_root：odm_r2_project_root=true overrideDependencyMap配置示例：在工程根目录下的oh_package.json5中增加overrideDependencyMap配置，如下：{\n  \"overrideDependencyMap\": {\n     \"lib1\": \"lib1-override-dep-map.json5\",  \n     \"lib2\": \"lib2-override-dep-map.json5\"\n  }\n}  依赖项\"lib1\"的依赖项替换文件lib1-override-dep-map.json5示例：{\n  \"dependencies\": {\n    \"@ohos/test\": \"file:./test.har\"\n  }\n} 
如上第3步所示，当odm_r2_project_root开关设置为true时，在ohpm运行时会以工程根目录为起点查找\"./test.har\"，比如：工程根路径为：D:\\path\\to\\MyProject，在ohpm运行时解析得到test.har的绝对路径为：D:\\path\\to\\MyProject\\test.har。
compability_log_level
ohpm客户端从5.0.1开始新增开关配置'compability_log_level'字段，用于控制在缺少兼容性检测需要的字段时ohpm的处理逻辑。
compability_log_level字段默认赋值为'warn'，可配置的日志等级请见开关配置项说明。
在执行prepublish、publish命令时，ohpm会检测oh-package.json5文件中是否配置了兼容性检测需要的所有字段（compatibleSdkVersion', 'compatibleSdkType', 'obfuscated', 'nativeComponents'），详见模块级oh-package.json5字段说明，下面统称 '兼容性字段'，如果未配置，则会根据日志等级打印提示或报错。
[h2]开关配置项说明
close：关闭功能，不主动检测兼容性字段。info：检测到未配置的兼容性字段时，打印info日志。warn：检测到未配置的兼容性字段时，打印警告日志。error：检测到未配置的兼容性字段时，打印报错提示并中断程序。
