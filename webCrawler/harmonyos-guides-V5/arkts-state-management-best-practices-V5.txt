状态管理优秀实践
为了帮助应用程序开发人员提高其应用程序质量，特别是在高效的状态管理方面。本章节面向开发者提供了多个在开发ArkUI应用中常见的低效开发的场景，并给出了对应的解决方案。此外，还提供了同一场景下，推荐用法和不推荐用法的对比和解释说明，更直观地展示两者区别，从而帮助开发者学习如何正确地在应用开发中使用状态变量，进行高性能开发。
使用@ObjectLink代替@Prop减少不必要的深拷贝
在应用开发中，开发者经常会进行父子组件的数值传递，而在不会改变子组件内状态变量值的情况下，使用@Prop装饰状态变量会导致组件创建的耗时增加，从而影响一部分性能。
【反例】
@Observed\nclass MyClass {\n  public num: number = 0;\n\n  constructor(num: number) {\n    this.num = num;\n  }\n}\n\n@Component\nstruct PropChild {\n  @Prop testClass: MyClass; // @Prop 装饰状态变量会深拷贝\n\n  build() {\n    Text(`PropChild testNum ${this.testClass.num}`)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State testClass: MyClass[] = [new MyClass(1)];\n\n  build() {\n    Column() {\n      Text(`Parent testNum ${this.testClass[0].num}`)\n        .onClick(() => {\n          this.testClass[0].num += 1;\n        })\n\n      // PropChild没有改变@Prop testClass: MyClass的值，所以这时最优的选择是使用@ObjectLink\n      PropChild({ testClass: this.testClass[0] })\n    }\n  }\n}
在上文的示例中，PropChild组件没有改变@Prop testClass: MyClass的值，所以这时较优的选择是使用@ObjectLink，因为@Prop是会深拷贝数据，具有拷贝的性能开销，所以这个时候@ObjectLink是比@Link和@Prop更优的选择。
【正例】
@Observed\nclass MyClass {\n  public num: number = 0;\n\n  constructor(num: number) {\n    this.num = num;\n  }\n}\n\n@Component\nstruct PropChild {\n  @ObjectLink testClass: MyClass; // @ObjectLink 装饰状态变量不会深拷贝\n\n  build() {\n    Text(`PropChild testNum ${this.testClass.num}`)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State testClass: MyClass[] = [new MyClass(1)];\n\n  build() {\n    Column() {\n      Text(`Parent testNum ${this.testClass[0].num}`)\n        .onClick(() => {\n          this.testClass[0].num += 1;\n        })\n\n      // 当子组件不需要发生本地改变时，优先使用@ObjectLink，因为@Prop是会深拷贝数据，具有拷贝的性能开销，所以这个时候@ObjectLink是比@Link和@Prop更优的选择\n      PropChild({ testClass: this.testClass[0] })\n    }\n  }\n}
不使用状态变量强行更新非状态变量关联组件
【反例】
@Entry\n@Component\nstruct MyComponent {\n  @State needsUpdate: boolean = true;\n  realStateArr: Array<number> = [4, 1, 3, 2]; // 未使用状态变量装饰器\n  realState: Color = Color.Yellow;\n\n  updateUIArr(param: Array<number>): Array<number> {\n    const triggerAGet = this.needsUpdate;\n    return param;\n  }\n  updateUI(param: Color): Color {\n    const triggerAGet = this.needsUpdate;\n    return param;\n  }\n  build() {\n    Column({ space: 20 }) {\n      ForEach(this.updateUIArr(this.realStateArr),\n        (item: Array<number>) => {\n          Text(`${item}`)\n        })\n      Text(\"add item\")\n        .onClick(() => {\n          // 改变realStateArr不会触发UI视图更新\n          this.realStateArr.push(this.realStateArr[this.realStateArr.length-1] + 1);\n\n          // 触发UI视图更新\n          this.needsUpdate = !this.needsUpdate;\n        })\n      Text(\"chg color\")\n        .onClick(() => {\n          // 改变realState不会触发UI视图更新\n          this.realState = this.realState == Color.Yellow ? Color.Red : Color.Yellow;\n\n          // 触发UI视图更新\n          this.needsUpdate = !this.needsUpdate;\n        })\n    }.backgroundColor(this.updateUI(this.realState))\n    .width(200).height(500)\n  }\n}
上述示例存在以下问题：
应用程序希望控制UI更新逻辑，但在ArkUI中，UI更新的逻辑应该是由框架来检测应用程序状态变量的更改去实现。 this.needsUpdate是一个自定义的UI状态变量，应该仅应用于其绑定的UI组件。变量this.realStateArr、this.realState没有被装饰，他们的变化将不会触发UI刷新。 但是在该应用中，用户试图通过this.needsUpdate的更新来带动常规变量this.realStateArr、this.realState的更新，此方法不合理且更新性能较差。 
【正例】
要解决此问题，应将realStateArr和realState成员变量用@State装饰。一旦完成此操作，就不再需要变量needsUpdate。
@Entry\n@Component\nstruct CompA {\n  @State realStateArr: Array<number> = [4, 1, 3, 2];\n  @State realState: Color = Color.Yellow;\n  build() {\n    Column({ space: 20 }) {\n      ForEach(this.realStateArr,\n        (item: Array<number>) => {\n          Text(`${item}`)\n        })\n      Text(\"add item\")\n        .onClick(() => {\n          // 改变realStateArr触发UI视图更新\n          this.realStateArr.push(this.realStateArr[this.realStateArr.length-1] + 1);\n        })\n      Text(\"chg color\")\n        .onClick(() => {\n          // 改变realState触发UI视图更新\n          this.realState = this.realState == Color.Yellow ? Color.Red : Color.Yellow;\n        })\n    }.backgroundColor(this.realState)\n    .width(200).height(500)\n  }\n}
精准控制状态变量关联的组件数
建议每个状态变量关联的组件数应该少于20个。精准控制状态变量关联的组件数能减少不必要的组件刷新，提高组件的刷新效率。有时开发者会将同一个状态变量绑定多个同级组件的属性，当状态变量改变时，会让这些组件做出相同的改变，这有时会造成组件的不必要刷新，如果存在某些比较复杂的组件，则会大大影响整体的性能。但是如果将这个状态变量绑定在这些同级组件的父组件上，则可以减少需要刷新的组件数，从而提高刷新的性能。
【反例】
@Observed\nclass Translate {\n  translateX: number = 20;\n}\n@Component\nstruct Title {\n  @ObjectLink translateObj: Translate;\n  build() {\n    Row() {\n      // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\n      Image($r('app.media.icon'))\n        .width(50)\n        .height(50)\n        .translate({\n          x:this.translateObj.translateX // this.translateObj.translateX 绑定在Image和Text组件上\n        })\n      Text(\"Title\")\n        .fontSize(20)\n        .translate({\n          x: this.translateObj.translateX\n        })\n    }\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State translateObj: Translate = new Translate();\n  build() {\n    Column() {\n      Title({\n        translateObj: this.translateObj\n      })\n      Stack() {\n      }\n      .backgroundColor(\"black\")\n      .width(200)\n      .height(400)\n      .translate({\n        x:this.translateObj.translateX //this.translateObj.translateX 绑定在Stack和Button组件上\n      })\n      Button(\"move\")\n        .translate({\n          x:this.translateObj.translateX\n        })\n        .onClick(() => {\n          animateTo({\n            duration: 50\n          },()=>{\n            this.translateObj.translateX = (this.translateObj.translateX + 50) % 150\n          })\n        })\n    }\n  }\n}
在上面的示例中，状态变量this.translateObj.translateX被用在多个同级的子组件下，当this.translateObj.translateX变化时，会导致所有关联它的组件一起刷新，但实际上由于这些组件的变化是相同的，因此可以将这个属性绑定到他们共同的父组件上，来实现减少组件的刷新数量。经过分析，所有的子组件其实都处于Page下的Column中，因此将所有子组件相同的translate属性统一到Column上，来实现精准控制状态变量关联的组件数。
【正例】
@Observed\nclass Translate {\n  translateX: number = 20;\n}\n@Component\nstruct Title {\n  build() {\n    Row() {\n      // 此处'app.media.icon'仅作示例，请开发者自行替换，否则imageSource创建失败会导致后续无法正常执行。\n      Image($r('app.media.icon'))\n        .width(50)\n        .height(50)\n      Text(\"Title\")\n        .fontSize(20)\n    }\n  }\n}\n@Entry\n@Component\nstruct Page1 {\n  @State translateObj: Translate = new Translate();\n  build() {\n    Column() {\n      Title()\n      Stack() {\n      }\n      .backgroundColor(\"black\")\n      .width(200)\n      .height(400)\n      Button(\"move\")\n        .onClick(() => {\n          animateTo({\n            duration: 50\n          },()=>{\n            this.translateObj.translateX = (this.translateObj.translateX + 50) % 150\n          })\n        })\n    }\n    .translate({ // 子组件Stack和Button设置了同一个translate属性，可以统一到Column上设置\n      x: this.translateObj.translateX\n    })\n  }\n}
合理控制对象类型状态变量关联的组件数量
如果将一个复杂对象定义为状态变量，需要合理控制其关联的组件数。当对象中某一个成员属性发生变化时，会导致该对象关联的所有组件刷新，尽管这些组件可能并没有直接使用到该改变的属性。为了避免这种“冗余刷新”对性能产生影响，建议合理拆分该复杂对象，控制对象关联的组件数量。具体可参考精准控制组件的更新范围和状态管理合理使用开发指导 两篇文章。
查询状态变量关联的组件数
在应用开发中，可以通过HiDumper查看状态变量关联的组件数，进行性能优化。具体可参考状态变量组件定位工具实践。
避免在for、while等循环逻辑中频繁读取状态变量
在应用开发中，应避免在循环逻辑中频繁读取状态变量，而是应该放在循环外面读取。
【反例】
import hilog from '@ohos.hilog';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '';\n\n  build() {\n    Column() {\n      Button('点击打印日志')\n        .onClick(() => {\n          for (let i = 0; i < 10; i++) {\n            hilog.info(0x0000, 'TAG', '%{public}s', this.message);\n          }\n        })\n        .width('90%')\n        .backgroundColor(Color.Blue)\n        .fontColor(Color.White)\n        .margin({\n          top: 10\n        })\n    }\n    .justifyContent(FlexAlign.Start)\n    .alignItems(HorizontalAlign.Center)\n    .margin({\n      top: 15\n    })\n  }\n}
【正例】
import hilog from '@ohos.hilog';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '';\n\n  build() {\n    Column() {\n      Button('点击打印日志')\n        .onClick(() => {\n          let logMessage: string = this.message;\n          for (let i = 0; i < 10; i++) {\n            hilog.info(0x0000, 'TAG', '%{public}s', logMessage);\n          }\n        })\n        .width('90%')\n        .backgroundColor(Color.Blue)\n        .fontColor(Color.White)\n        .margin({\n          top: 10\n        })\n    }\n    .justifyContent(FlexAlign.Start)\n    .alignItems(HorizontalAlign.Center)\n    .margin({\n      top: 15\n    })\n  }\n}
建议使用临时变量替换状态变量
在应用开发中，应尽量减少对状态变量的直接赋值，通过临时变量完成数据计算操作。
状态变量发生变化时，ArkUI会查询依赖该状态变量的组件并执行依赖该状态变量的组件的更新方法，完成组件渲染的行为。通过使用临时变量的计算代替直接操作状态变量，可以使ArkUI仅在最后一次状态变量变更时查询并渲染组件，减少不必要的行为，从而提高应用性能。状态变量行为可参考@State装饰器：组件内状态。
【反例】
import { hiTraceMeter } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '';\n\n  appendMsg(newMsg: string) {\n    // 性能打点\n    hiTraceMeter.startTrace('StateVariable', 1);\n    this.message += newMsg;\n    this.message += ';';\n    this.message += '<br/>';\n    hiTraceMeter.finishTrace('StateVariable', 1);\n  }\n\n  build() {\n    Column() {\n      Button('点击打印日志')\n        .onClick(() => {\n          this.appendMsg('操作状态变量');\n        })\n        .width('90%')\n        .backgroundColor(Color.Blue)\n        .fontColor(Color.White)\n        .margin({\n          top: 10\n        })\n    }\n    .justifyContent(FlexAlign.Start)\n    .alignItems(HorizontalAlign.Center)\n    .margin({\n      top: 15\n    })\n  }\n}
直接操作状态变量，三次触发计算函数，运行耗时结果如下
【正例】
import { hiTraceMeter } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '';\n\n  appendMsg(newMsg: string) {\n    // 性能打点\n    hiTraceMeter.startTrace('TemporaryVariable', 2);\n    let message = this.message;\n    message += newMsg;\n    message += ';';\n    message += '<br/>';\n    this.message = message;\n    hiTraceMeter.finishTrace('TemporaryVariable', 2);\n  }\n\n  build() {\n    Column() {\n      Button('点击打印日志')\n        .onClick(() => {\n          this.appendMsg('操作临时变量');\n        })\n        .width('90%')\n        .backgroundColor(Color.Blue)\n        .fontColor(Color.White)\n        .margin({\n          top: 10\n        })\n    }\n    .justifyContent(FlexAlign.Start)\n    .alignItems(HorizontalAlign.Center)\n    .margin({\n      top: 15\n    })\n  }\n}
使用临时变量取代状态变量的计算，三次触发计算函数，运行耗时结果如下
【总结】
