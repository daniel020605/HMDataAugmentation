自动补全地址表单所在地区
在填写地址表单场景时，当应用使用了所在地区的地址选择器，智能填充不支持对地址选择器进行填充，需要开发者对表单中的地址字段进行开发。
需要在module.json5文件中设置模糊位置权限：ohos.permission.APPROXIMATELY_LOCATION。所在地区地址选择器需要开通地图服务。需要配置应用签名证书指纹，参见配置Client ID。
效果图
地址表单中的所在地区能根据详细地址内容自动补全，当补全内容不符合预期时，可通过地址选择器进行修改。
示例代码
import { util } from '@kit.ArkTS';\nimport { i18n } from '@kit.LocalizationKit';\nimport { sceneMap, site } from '@kit.MapKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { geoLocationManager } from '@kit.LocationKit';\nimport { abilityAccessCtrl, autoFillManager, common, PermissionRequestResult, Permissions } from '@kit.AbilityKit';\n\nconst AUTHED = 0;\nconst TIME_OUT = 100;\n// 默认经纬度的值, 下面经纬度是以北京市天安门对应的值为样例\nconst INIT_LAT = 39.5;\nconst INIT_LON = 116.2;\nconst ENGLISH = 'en';\nconst SIMPLIFIED_CHINESE = 'zh_CN';\nconst PERMISSIONS: Array<Permissions> = ['ohos.permission.APPROXIMATELY_LOCATION'];\nconst ADMINISTRATIVE_REGION: Array<string> =\n  ['countryName', 'adminLevel1', 'adminLevel2', 'adminLevel3', 'adminLevel4'];\n\ninterface PersonInfo {\n  name?: string;\n  phone?: string;\n  email?: string;\n  idCard?: string;\n  region?: string;\n  stressAddress?: string;\n}\n\ninterface RequestParam {\n  requestTag: string;\n  requestText: string;\n}\n\ninterface Location {\n  latitude: number;\n  longitude: number;\n}\n\n// 唤起授权弹窗\nasync function reqPermissionsFromUser(permissions: Array<Permissions>,\n  context: common.UIAbilityContext): Promise<PermissionRequestResult> {\n  let atManager: abilityAccessCtrl.AtManager = abilityAccessCtrl.createAtManager();\n  return await atManager.requestPermissionsFromUser(context, permissions);\n}\n\n// 节流函数\nfunction debounce(func: () => void, wait: number = TIME_OUT): Function {\n  let timeout: number | null = null;\n  return () => {\n    timeout && clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      func();\n      clearTimeout(timeout);\n    }, wait);\n  };\n}\n\n@Extend(Text)\nfunction textStyle() {\n  .width(64)\n  .textAlign(TextAlign.End)\n}\n\n@Entry\n@Component\nstruct Index {\n  @State personInfo: PersonInfo = {};\n  @State isClicked: boolean = false;\n  // 是否为用户输入场景\n  private isUserInput: boolean = false;\n  private location: Location = {\n    latitude: INIT_LAT,\n    longitude: INIT_LON,\n  };\n  private currentRequestTag: string = '';\n  private handleAddressChange = (request: RequestParam) => {\n    return debounce(async () => {\n      this.autoCompleteAddress(request);\n    });\n  };\n\n  aboutToAppear() {\n    reqPermissionsFromUser(PERMISSIONS, getContext(this) as common.UIAbilityContext)\n      .then((permissionRequestResult: PermissionRequestResult) => {\n        if (permissionRequestResult.authResults[0] === AUTHED) {\n          // 已授权状态才能调用获取位置API\n          geoLocationManager.getCurrentLocation((err, location: geoLocationManager.Location) => {\n            if (err) {\n              hilog.error(0x0000, 'testTag', `Failed to get location, code: ${err?.code}, message: ${err?.message}`);\n              return;\n            }\n            hilog.info(0x0000, 'testTag', `Succeeded in obtaining the current location of the user`);\n            this.location.latitude = location.latitude;\n            this.location.longitude = location.longitude;\n          })\n        }\n      })\n      .catch((err: BusinessError) => {\n        hilog.error(0x0000, 'testTag', `Failed request permissions, code: ${err?.code}, message: ${err?.message}`);\n      })\n  }\n\n  public isUsLanguage(): boolean {\n    let result: string = '';\n    try {\n      result = i18n.System.getSystemLanguage();\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', 'Failed to get system language');\n    }\n    return result.toLowerCase() === 'en-latn-us';\n  }\n\n  async autoCompleteAddress(request: RequestParam): Promise<void> {\n    try {\n      let params: site.SearchByTextParams = {\n        query: request.requestText,\n        // 搜索结果偏向的经纬度。\n        location: {\n          latitude: this.location.latitude,\n          longitude: this.location.longitude\n        },\n        language: this.isUsLanguage() ? ENGLISH : SIMPLIFIED_CHINESE,\n        isChildren: true\n      };\n      const result = await site.searchByText(params);\n      if (result.sites) {\n        let region: string = '';\n        let addressComponent = result.sites[0].addressComponent;\n        // 遍历到当前地址行政区级别，更细层级无需遍历。\n        for (let item of ADMINISTRATIVE_REGION) {\n          if (addressComponent[item] === undefined) {\n            break;\n          }\n          region += addressComponent[item];\n        }\n        // 防止重复触发搜索导致结果不一致\n        if (request.requestTag === this.currentRequestTag) {\n          this.personInfo.region = region;\n        }\n      }\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', `Failed to search location, code: ${error.code}, message: ${error.message}`);\n    }\n    hilog.info(0x0000, 'testTag', 'Succeeded in searching location');\n  }\n\n  onRegionClick(): void {\n    // 防止查询时间过久，通过区划选择行政区后，所在地区内容被搜索结果刷新\n    this.currentRequestTag = util.generateRandomUUID();\n    let districtSelectOptions: sceneMap.DistrictSelectOptions = {\n      countryCode: 'CN',\n    };\n    sceneMap.selectDistrict(getContext(this), districtSelectOptions).then((data) => {\n      hilog.info(0x0000, 'testTag', 'SelectDistrict', 'Succeeded  in selecting district.');\n      let region = '';\n      for (let i = 0; i < data?.districts?.length; i++) {\n        region += data.districts[i].name;\n      }\n      this.personInfo.region = region;\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, 'testTag', `Failed to select district, code: ${err.code}, message: ${err.message}`);\n    });\n  }\n\n  searchRegionByAddress(val: string): void {\n    let tag: string = util.generateRandomUUID();\n    this.currentRequestTag = tag;\n    let param: RequestParam = {\n      requestTag: tag,\n      requestText: val\n    }\n    // 用户输入的场景需要加做抖动处理, 智能填充回填场景直接查询即可\n    if (this.isUserInput) {\n      this.handleAddressChange(param)();\n    } else {\n      this.autoCompleteAddress(param);\n    }\n  }\n\n  build() {\n    Column({ space: 8 }) {\n      Row({ space: 8 }) {\n        Text('姓名').textStyle()\n        TextInput({ text: this.personInfo.name, placeholder: '姓名' })\n          .layoutWeight(1)\n          .contentType(ContentType.PERSON_FULL_NAME)\n          .onChange((val: string) => {\n            this.personInfo.name = val;\n          })\n      }\n\n      Row({ space: 8 }) {\n        Text('联系电话').textStyle()\n        TextInput({ text: this.personInfo.phone, placeholder: '手机号码' })\n          .layoutWeight(1)\n          .contentType(ContentType.PHONE_NUMBER)\n          .onChange((val: string) => {\n            this.personInfo.phone = val;\n          })\n      }\n\n      Row({ space: 8 }) {\n        Text('身份证号').textStyle()\n        TextInput({ text: this.personInfo.idCard, placeholder: '身份证信息' })\n          .layoutWeight(1)\n          .contentType(ContentType.ID_CARD_NUMBER)\n          .onChange((val: string) => {\n            this.personInfo.idCard = val;\n          })\n      }\n\n      Row({ space: 8 }) {\n        Text('邮件地址').textStyle()\n        TextInput({ text: this.personInfo.email, placeholder: '电子邮件信息' })\n          .layoutWeight(1)\n          .contentType(ContentType.EMAIL_ADDRESS)\n          .onChange((val: string) => {\n            this.personInfo.email = val;\n          })\n      }\n\n      Row({ space: 8 }) {\n        Text('所在地区').textStyle()\n        TextArea({ text: this.personInfo.region, placeholder: '地区信息' })\n          .layoutWeight(1)\n          .backgroundColor($r('sys.color.ohos_id_color_card_bg'))\n          .placeholderColor($r('sys.color.ohos_id_color_text_secondary'))\n          .fontSize($r('sys.float.ohos_id_text_size_body1'))\n          .fontColor($r('sys.color.ohos_id_color_text_primary'))\n          .onClick(() => this.onRegionClick())\n          .focusable(false)\n      }\n\n      Row({ space: 8 }) {\n        Text('详细地址').textStyle()\n        TextInput({ text: this.personInfo.stressAddress, placeholder: '小区门牌信息' })\n          .layoutWeight(1)\n          .contentType(ContentType.DETAIL_INFO_WITHOUT_STREET)\n          .onDidInsert(() => {\n            // 通过输入法输入数据会触发\n            this.isUserInput = true;\n          })\n          .onDidDelete((val: DeleteValue) => {\n            // 通过输入法删除数据会触发\n            if (val?.deleteValue?.length > 0) {\n              this.isUserInput = true;\n            }\n          })\n          .onChange((val: string) => {\n            this.personInfo.stressAddress = val;\n            if (val && val.trim().length > 0) {\n              this.searchRegionByAddress(val);\n            } else {\n              this.currentRequestTag = util.generateRandomUUID();\n              this.personInfo.region = '';\n            }\n            this.isUserInput = false;\n          })\n      }\n\n      Button('保存')\n        .width('50%')\n        .onClick(() => {\n          if (!this.isClicked) {\n            this.isClicked = true;\n            autoFillManager.requestAutoSave(this.getUIContext(), {\n              onSuccess: () => {\n                hilog.info(0x0000, 'testTag', 'Succeeded in saving request');\n              },\n              onFailure: () => {\n                hilog.info(0x0000, 'testTag', 'Failed to save request');\n              }\n            });\n            setTimeout(() => {\n              this.isClicked = false;\n            }, 2000);\n          }\n        })\n    }\n    .padding({ left: 16, right: 16 })\n    .backgroundColor($r('sys.color.ohos_id_color_list_card_bg'))\n    .alignItems(HorizontalAlign.Center)\n    .height('100%')\n    .width('100%')\n  }\n}
