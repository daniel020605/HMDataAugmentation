input开发指导
input是交互式组件，用于接收用户数据。其类型可设置为日期、多选框和按钮等。具体用法请参考input API。
创建input组件
在pages/index目录下的hml文件中创建一个input组件。
<!-- xxx.hml -->\n<div class=\"container\">       \n  <input type=\"text\">             \n     Please enter the content  \n  </input>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}
设置input类型
通过设置type属性来定义input类型，如将input设置为button、date等。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"div-button\">\n    <dialog class=\"dialogClass\" id=\"dialogId\">\n      <div class=\"content\">\n        <text>this is a dialog</text>\n      </div>\n    </dialog>\n    <input class=\"button\" type=\"button\" value=\"click\" onclick=\"btnclick\"></input>\n  </div>\n  <div class=\"content\">\n    <input onchange=\"checkboxOnChange\" checked=\"true\" type=\"checkbox\"></input>\n  </div>\n  <div class=\"content\">\n    <input type=\"date\" class=\"flex\" placeholder=\"Enter data\"></input>\n  </div>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  background-color: #F1F3F5 ;\n}\n.div-button {\n  flex-direction: column;\n  align-items: center;\n}\n.dialogClass{\n  width:80%;\n  height: 200px;\n}\n.button {\n  margin-top: 30px;\n  width: 50%;\n}\n.content{\n  width: 90%;\n  height: 150px;\n  align-items: center;\n  justify-content: center;\n}\n.flex {\n  width: 80%;\n  margin-bottom:40px;\n}
// xxx.js\nexport default {\n  btnclick(){\n    this.$element('dialogId').show()\n  },\n}
仅当input类型为checkbox和radio时，当前组件选中的属性是checked才生效，默认值为false。
事件绑定
向input组件添加search和translate事件。
<!-- xxx.hml -->\n<div class=\"content\">\n  <text style=\"margin-left: -7px;\">\n    <span>Enter text and then touch and hold what you've entered</span>\n  </text>\n  <input class=\"input\" type=\"text\" onsearch=\"search\" placeholder=\"search\"> </input>\n  <input class=\"input\" type=\"text\" ontranslate=\"translate\" placeholder=\"translate\"> </input>\n</div>
/* xxx.css */\n.content {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #F1F3F5;\n}\n.input {\n  margin-top: 50px;\n  width: 60%;\n  placeholder-color: gray;\n}\ntext{\n  width:100%;\n  font-size:25px;\n  text-align:center;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction'\nexport default {\n  search(e){\n    promptAction.showToast({\n      message:  e.value,\n      duration: 3000,\n    });\n  },\n  translate(e){\n    promptAction.showToast({\n      message:  e.value,\n      duration: 3000,\n    });\n  }\n}
设置输入提示
通过对input组件添加showError方法来提示输入的错误原因。
<!-- xxx.hml -->\n<div class=\"content\">\n  <input id=\"input\" class=\"input\" type=\"text\"  maxlength=\"20\" placeholder=\"Please input text\" onchange=\"change\">\n  </input>\n  <input class=\"button\" type=\"button\" value=\"Submit\" onclick=\"buttonClick\"></input>\n</div>
/* xxx.css */\n.content {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #F1F3F5;\n}\n.input {\n  width: 80%;\n  placeholder-color: gray;\n}\n.button {\n  width: 30%;\n  margin-top: 50px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction' \n export default { \n   data:{ \n     value:'', \n   }, \n   change(e){ \n     this.value = e.value; \n     promptAction.showToast({ \n     message: \"value: \" + this.value, \n       duration: 3000, \n      }); \n   }, \n   buttonClick(e){ \n     if(this.value.length > 6){ \n       this.$element(\"input\").showError({        \n         error:  'Up to 6 characters are allowed.'       \n       }); \n      }else if(this.value.length == 0){ \n        this.$element(\"input\").showError({         \n          error:this.value + 'This field cannot be left empty.'       \n        }); \n      }else{ \n        promptAction.showToast({ \n          message: \"success \" \n        }); \n      } \n   }, \n }
该方法在input类型为text、email、date、time、number和password时生效。
场景示例
根据场景选择不同类型的input输入框，完成信息录入。
<!-- xxx.hml -->\n<div class=\"container\">    \n  <div class=\"label-item\"> \n    <label>memorandum</label>   \n  </div>    \n  <div class=\"label-item\">        \n    <label class=\"lab\" target=\"input1\">content:</label>        \n    <input class=\"flex\" id=\"input1\" placeholder=\"Enter content\" />    \n  </div>    \n  <div class=\"label-item\">        \n    <label class=\"lab\" target=\"input3\">date:</label>        \n    <input class=\"flex\" id=\"input3\" type=\"date\" placeholder=\"Enter data\" />    \n  </div>    \n  <div class=\"label-item\">        \n    <label class=\"lab\" target=\"input4\">time:</label>        \n    <input class=\"flex\" id=\"input4\" type=\"time\" placeholder=\"Enter time\" />    \n  </div>   \n  <div class=\"label-item\">        \n    <label class=\"lab\" target=\"checkbox1\">Complete:</label>        \n    <input class=\"flex\" type=\"checkbox\" id=\"checkbox1\" style=\"width: 100px;height: 100px;\" />    \n  </div>    \n  <div class=\"label-item\">        \n    <input class=\"flex\" type=\"button\" id=\"button\" value=\"save\" onclick=\"btnclick\"/>    \n  </div>\n</div>
/* xxx.css */\n.container { \n  flex-direction: column;\n  background-color: #F1F3F5;\n}\n.label-item {   \n  align-items: center;\n  border-bottom-width: 1px;border-color: #dddddd;\n}\n.lab {    \n  width: 400px;}\nlabel {    \n  padding: 30px;\n  font-size: 30px;      \n  width: 320px;\n  font-family: serif;\n  color: #9370d8;\n  font-weight: bold;\n}\n.flex {    \n  flex: 1;\n}\n.textareaPadding {    \n  padding-left: 100px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction';\nexport default {    \n  data: {    \n  },    \n  onInit() { \n  },   \n  btnclick(e) {        \n    promptAction.showToast({            \n      message:'Saved successfully!'        \n    })    \n  }\n}     
