订阅资源泄漏事件（ArkTS）
接口说明
API接口的具体使用说明（参数使用限制、具体取值范围等）请参考应用事件打点API文档。
开发步骤
以实现对发生内存泄漏场景生成的资源泄漏事件订阅为例，说明开发步骤。
 新建一个ArkTS应用工程，编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，导入依赖模块： import { hiAppEvent, hilog, hidebug } from '@kit.PerformanceAnalysisKit'; 编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，在onCreate函数中添加系统事件的订阅，示例代码如下：  hiAppEvent.addWatcher({\n   // 开发者可以自定义观察者名称，系统会使用名称来标识不同的观察者\n   name: \"watcher\",\n   // 开发者可以订阅感兴趣的系统事件，此处是订阅了资源泄漏事件\n   appEventFilters: [\n     {\n       domain: hiAppEvent.domain.OS,\n       names: [hiAppEvent.event.RESOURCE_OVERLIMIT]\n     }\n   ],\n   // 开发者可以自行实现订阅实时回调函数，以便对订阅获取到的事件数据进行自定义处理\n   onReceive: (domain: string, appEventGroups: Array<hiAppEvent.AppEventGroup>) => {\n     hilog.info(0x0000, 'testTag', `HiAppEvent onReceive: domain=${domain}`);\n     for (const eventGroup of appEventGroups) {\n       // 开发者可以根据事件集合中的事件名称区分不同的系统事件\n       hilog.info(0x0000, 'testTag', `HiAppEvent eventName=${eventGroup.name}`);\n       for (const eventInfo of eventGroup.appEventInfos) {\n         // 开发者可以获取到资源泄漏事件发生时内存信息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.memory=${JSON.stringify(eventInfo)}`);\n       }\n     }\n   }\n }); 编辑工程中的“entry > src > main > ets > pages > Index.ets”文件，添加按钮并在其onClick函数构造资源泄漏场景，以触发资源泄漏事件。 此处需要使用hidebug.setAppResourceLimit设置内存限制，造成内存内存泄漏，需要同步在“开发者选项”中打开“系统资源泄漏日志”，并重启设备。接口示例代码如下：  import hidebug from \"@ohos.hidebug\";\n\n @Entry\n @Component\n struct Index {\n   @State leakedArray: string[][] = [];\n\n   build() {\n     Column() {\n       Row() {\n         Column() {\n           Button(\"pss leak\")\n             .onClick(() => {\n               hidebug.setAppResourceLimit(\"pss_memory\", 1024, true);\n               for (let i = 0; i < 20 * 1024; i++) {\n                 this.leakedArray.push(new Array(1).fill(\"leak\"));\n               }\n             })\n         }\n       }\n       .height('100%')\n       .width('100%')\n     }\n   }\n } 点击DevEco Studio界面中的运行按钮，运行应用工程，等待15~30分钟，会上报应用内存泄漏事件。 同一个应用，24小时内至多上报一次内存泄漏，如果短时间内要二次上报，需要重启设备。 内存泄漏事件上报后，系统会回调应用的onReceive函数，可以在Log窗口看到对系统事件数据的处理日志： HiAppEvent onReceive: domain=OS\nHiAppEvent eventName=RESOURCE_OVERLIMIT\nHiAppEvent eventInfo={\"domain\":\"OS\",\"name\":\"RESOURCE_OVERLIMIT\",\"eventType\":1,\"params\":{\"bundle_name\":\"com.example.myapplication\",\"bundle_version\":\"1.0.0\",\"memory\":{\"pss\":2100257,\"rss\":1352644,\"sys_avail_mem\":250272,\"sys_free_mem\":60004,\"sys_total_mem\":1992340,\"vss\":2462936},\"pid\":20731,\"resource_type\":\"pss_memory\",\"time\":1502348798106,\"uid\":20010044,\"external_log\": [\"/data/storage/el2/log/resourcelimit/RESOURCE_OVERLIMIT_1725614572401_6808.log\", \"/data/storage/el2/log/resourcelimit/RESOURCE_OVERLIMIT_1725614572412_6808.log\"], \"log_over_limit\": false}} 
