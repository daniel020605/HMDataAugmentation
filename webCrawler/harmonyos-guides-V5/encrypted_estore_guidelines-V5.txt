E类加密数据库的使用
场景介绍
为了满足数据库的安全特性，存有敏感信息的应用会在EL5（加密路径切换请参考获取和修改加密分区EL1-EL4路径切换）路径下创建了一个E类数据库。在锁屏的情况下，满足一定条件时，会触发密钥的销毁，此时E类数据库不可读写。当锁屏解锁后，密钥会恢复，E类数据库恢复正常读写操作。这样的设计可以有效防止用户数据的泄露。
然而，在锁屏的情况下，应用程序仍然可以继续写入数据，由于此时E类数据库不可读写，可能会导致数据丢失。为了解决这个问题，当前提供了一种方案：在锁屏的情况下，将数据存储在EL2路径下的C类数据库中。当解锁后，再将数据迁移到E类数据库中。这样可以确保数据在锁屏期间的安全性和完整性。
键值型数据库和关系型数据库均支持E类加密数据库。
实现机制
通过封装Mover类、Store类、SecretKeyObserver类和ECStoreManager类实现应用数据库密钥加锁和解锁状态下E类数据库和C类数据库的切换和操作。
Mover类：提供数据库数据迁移接口，在锁屏解锁后，若C类数据库中有数据，使用该接口将数据迁移到E类数据库。
Store类：提供了获取数据库，在数据库中插入数据、删除数据、更新数据和获取当前数据数量的接口。
SecretKeyObserver类：提供了获取当前密钥状态的接口，在密钥销毁后，关闭E类数据库。
ECStoreManager类：用于管理应用的E类数据库和C类数据库。
配置权限
使用EL5路径下的数据库，需要配置ohos.permission.PROTECT_SCREEN_LOCK_DATA权限。
// module.json5\n\"requestPermissions\": [\n      {\n        \"name\": \"ohos.permission.PROTECT_SCREEN_LOCK_DATA\"\n      }\n    ]
键值型数据库E类加密
本章节提供键值型数据库的E类加密数据库使用方式，提供Mover类、Store类、SecretKeyObserver类和ECStoreManager类的具体实现，并在EntryAbility和index按键事件中展示这几个类的使用方式。
[h2]Mover
提供数据库数据迁移接口，在锁屏解锁后，若C类数据库中存在数据，使用该接口将数据迁移到E类数据库。
// Mover.ts\nimport { distributedKVStore } from '@kit.ArkData';\n\nexport class Mover {\n  async move(eStore: distributedKVStore.SingleKVStore, cStore: distributedKVStore.SingleKVStore): Promise<void> {\n    if (eStore != null && cStore != null) {\n      let entries: distributedKVStore.Entry[] = await cStore.getEntries('key_test_string');\n      await eStore.putBatch(entries);\n      console.info(`ECDB_Encry move success`);\n    }\n  }\n}
[h2]Store
提供了获取数据库，在数据库中插入数据、删除数据、更新数据和获取当前数据数量的接口。
// Store.ts\nimport { distributedKVStore } from '@kit.ArkData';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet kvManager: distributedKVStore.KVManager;\n\nexport class StoreInfo {\n  kvManagerConfig: distributedKVStore.KVManagerConfig;\n  storeId: string;\n  option: distributedKVStore.Options;\n}\n\nexport class Store {\n  async getECStore(storeInfo: StoreInfo): Promise<distributedKVStore.SingleKVStore> {\n    try {\n      kvManager = distributedKVStore.createKVManager(storeInfo.kvManagerConfig);\n      console.info(\"Succeeded in creating KVManager\");\n    } catch (e) {\n      let error = e as BusinessError;\n      console.error(`Failed to create KVManager.code is ${error.code},message is ${error.message}`);\n    }\n    if (kvManager !== undefined) {\n      kvManager = kvManager as distributedKVStore.KVManager;\n      let kvStore: distributedKVStore.SingleKVStore | null;\n      try {\n        kvStore = await kvManager.getKVStore<distributedKVStore.SingleKVStore>(storeInfo.storeId, storeInfo.option);\n        if (kvStore != undefined) {\n          console.info(`ECDB_Encry succeeded in getting store : ${storeInfo.storeId}`);\n          return kvStore;\n        }\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`An unexpected error occurred.code is ${error.code},message is ${error.message}`);\n      }\n    }\n  }\n\n  putOnedata(kvStore: distributedKVStore.SingleKVStore): void {\n    if (kvStore != undefined) {\n      const KEY_TEST_STRING_ELEMENT = 'key_test_string' + String(Date.now());\n      const VALUE_TEST_STRING_ELEMENT = 'value_test_string' + String(Date.now());\n      try {\n        kvStore.put(KEY_TEST_STRING_ELEMENT, VALUE_TEST_STRING_ELEMENT, (err) => {\n          if (err !== undefined) {\n            console.error(`Failed to put data. Code:${err.code},message:${err.message}`);\n            return;\n          }\n          console.info(`ECDB_Encry Succeeded in putting data.${KEY_TEST_STRING_ELEMENT}`);\n        });\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n      }\n    }\n  }\n\n  getDataNum(kvStore: distributedKVStore.SingleKVStore): void {\n    if (kvStore != undefined) {\n      let resultSet: distributedKVStore.KVStoreResultSet;\n      kvStore.getResultSet(\"key_test_string\").then((result: distributedKVStore.KVStoreResultSet) => {\n        console.info(`ECDB_Encry Succeeded in getting result set num ${result.getCount()}`);\n        resultSet = result;\n        if (kvStore != null) {\n          kvStore.closeResultSet(resultSet).then(() => {\n            console.info('Succeeded in closing result set');\n          }).catch((err: BusinessError) => {\n            console.error(`Failed to close resultset.code is ${err.code},message is ${err.message}`);\n          });\n        }\n      }).catch((err: BusinessError) => {\n        console.error(`Failed to get resultset.code is ${err.code},message is ${err.message}`);\n      });\n    }\n  }\n\n  deleteOnedata(kvStore: distributedKVStore.SingleKVStore): void {\n    if (kvStore != undefined) {\n      kvStore.getEntries('key_test_string', (err: BusinessError, entries: distributedKVStore.Entry[]) => {\n        if (err != undefined) {\n          console.error(`Failed to get Entries.code is ${err.code},message is ${err.message}`);\n          return;\n        }\n        if (kvStore != null && entries.length != 0) {\n          kvStore.delete(entries[0].key, (err: BusinessError) => {\n            if (err != undefined) {\n              console.error(`Failed to delete.code is ${err.code},message is ${err.message}`);\n              return;\n            }\n            console.info('ECDB_Encry Succeeded in deleting');\n          });\n        }\n      });\n    }\n  }\n\n  updataOnedata(kvStore: distributedKVStore.SingleKVStore): void {\n    if (kvStore != undefined) {\n      kvStore.getEntries('key_test_string', async (err: BusinessError, entries: distributedKVStore.Entry[]) => {\n        if (err != undefined) {\n          console.error(`Failed to get Entries.code is ${err.code},message is ${err.message}`);\n          return;\n        }\n        if (kvStore != null && entries.length != 0) {\n          console.info(`ECDB_Encry old data:${entries[0].key},value :${entries[0].value.value.toString()}`)\n          await kvStore.put(entries[0].key, \"new value_test_string\" + String(Date.now()) + 'new').then(() => {\n          }).catch((err: BusinessError) => {\n            console.error(`Failed to put.code is ${err.code},message is ${err.message}`);\n          });\n        }\n        console.info(`ECDB_Encry updata success`)\n      });\n    }\n  }\n}
[h2]SecretKeyObserver
该类提供了获取当前密钥状态的接口，在密钥销毁后，关闭E类数据库。
// SecretKeyObserver.ts\nimport { ECStoreManager } from './ECStoreManager';\n\nexport enum SecretStatus {\n  Lock,\n  UnLock\n}\n\nexport class SecretKeyObserver {\n  onLock(): void {\n    this.lockStatuas = SecretStatus.Lock;\n    this.storeManager.closeEStore();\n  }\n\n  onUnLock(): void {\n    this.lockStatuas = SecretStatus.UnLock;\n  }\n\n  getCurrentStatus(): number {\n    return this.lockStatuas;\n  }\n\n  initialize(storeManager: ECStoreManager): void {\n    this.storeManager = storeManager;\n  }\n\n  updatalockStatus(code: number) {\n    if (code === SecretStatus.Lock) {\n      this.onLock();\n    } else {\n      this.lockStatuas = code;\n    }\n  }\n\n  // 初始获取锁屏状态\n  private lockStatuas: number = SecretStatus.UnLock;\n  private storeManager: ECStoreManager;\n}\n\nexport let lockObserve = new SecretKeyObserver();
[h2]ECStoreManager
ECStoreManager类用于管理应用的E类数据库和C类数据库。支持配置数据库信息、配置迁移函数的信息，可根据密钥状态为应用提供相应的数据库句柄，并提供了关闭E类数据库、数据迁移完成后销毁C类数据库等接口。
// ECStoreManager.ts\nimport { distributedKVStore } from '@kit.ArkData';\nimport { Mover } from './Mover';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { StoreInfo, Store } from './Store';\nimport { SecretStatus } from './SecretKeyObserver';\n\nlet store = new Store();\n\nexport class ECStoreManager {\n  config(cInfo: StoreInfo, other: StoreInfo): void {\n    this.cInfo = cInfo;\n    this.eInfo = other;\n  }\n\n  configDataMover(mover: Mover): void {\n    this.mover = mover;\n  }\n\n  async getCurrentStore(screanStatus: number): Promise<distributedKVStore.SingleKVStore> {\n    console.info(`ECDB_Encry GetCurrentStore start screanStatus: ${screanStatus}`);\n    if (screanStatus === SecretStatus.UnLock) {\n      try {\n        this.eStore = await store.getECStore(this.eInfo);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`Failed to GetECStore.code is ${error.code},message is ${error.message}`);\n      }\n      // 解锁状态 获取e类库\n      if (this.needMove) {\n        if (this.eStore != undefined && this.cStore != undefined) {\n          await this.mover.move(this.eStore, this.cStore);\n        }\n        this.deleteCStore();\n        console.info(`ECDB_Encry Data migration is complete. Destroy cstore`);\n        this.needMove = false;\n      }\n      return this.eStore;\n    } else {\n      // 加锁状态 获取c类库\n      this.needMove = true;\n      try {\n        this.cStore = await store.getECStore(this.cInfo);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`Failed to GetECStore.code is ${error.code},message is ${error.message}`);\n      }\n      return this.cStore;\n    }\n  }\n\n  closeEStore(): void {\n    try {\n      let kvManager = distributedKVStore.createKVManager(this.eInfo.kvManagerConfig);\n      console.info(\"Succeeded in creating KVManager\");\n      if (kvManager != undefined) {\n        kvManager.closeKVStore(this.eInfo.kvManagerConfig.bundleName, this.eInfo.storeId);\n        this.eStore = null;\n        console.info(`ECDB_Encry close EStore success`)\n      }\n    } catch (e) {\n      let error = e as BusinessError;\n      console.error(`Failed to create KVManager.code is ${error.code},message is ${error.message}`);\n    }\n  }\n\n  deleteCStore(): void {\n    try {\n      let kvManager = distributedKVStore.createKVManager(this.cInfo.kvManagerConfig);\n      console.info(\"Succeeded in creating KVManager\");\n      if (kvManager != undefined) {\n        kvManager.deleteKVStore(this.cInfo.kvManagerConfig.bundleName, this.cInfo.storeId);\n        this.cStore = null;\n        console.info(\"ECDB_Encry delete cStore success\");\n      }\n    } catch (e) {\n      let error = e as BusinessError;\n      console.error(`Failed to create KVManager.code is ${error.code},message is ${error.message}`);\n    }\n  }\n\n  private eStore: distributedKVStore.SingleKVStore = null;\n  private cStore: distributedKVStore.SingleKVStore = null;\n  private cInfo: StoreInfo | null = null;\n  private eInfo: StoreInfo | null = null;\n  private needMove: boolean = false;\n  private mover: Mover | null = null;\n}
[h2]EntryAbility
模拟应用启动期间，注册对COMMON_EVENT_SCREEN_LOCK_FILE_ACCESS_STATE_CHANGED公共事件的监听，并配置相应的数据库信息、密钥状态信息等。
// EntryAbility.ets\nimport { AbilityConstant, contextConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { window } from '@kit.ArkUI';\nimport { distributedKVStore } from '@kit.ArkData';\nimport { ECStoreManager } from './ECStoreManager';\nimport { StoreInfo } from './Store';\nimport { Mover } from './Mover';\nimport { SecretKeyObserver } from './SecretKeyObserver';\nimport { commonEventManager } from '@kit.BasicServicesKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n\nexport let storeManager = new ECStoreManager();\n\nexport let e_secretKeyObserver = new SecretKeyObserver();\n\nlet mover = new Mover();\n\nlet subscriber: commonEventManager.CommonEventSubscriber;\n\nexport function createCB(err: BusinessError, commonEventSubscriber: commonEventManager.CommonEventSubscriber) {\n  if (!err) {\n    console.info('ECDB_Encry createSubscriber');\n    subscriber = commonEventSubscriber;\n    try {\n      commonEventManager.subscribe(subscriber, (err: BusinessError, data: commonEventManager.CommonEventData) => {\n        if (err) {\n          console.error(`subscribe failed, code is ${err.code}, message is ${err.message}`);\n        } else {\n          console.info(`ECDB_Encry SubscribeCB ${data.code}`);\n          e_secretKeyObserver.updatalockStatus(data.code);\n        }\n      });\n    } catch (error) {\n      const err: BusinessError = error as BusinessError;\n      console.error(`subscribe failed, code is ${err.code}, message is ${err.message}`);\n    }\n  } else {\n    console.error(`createSubscriber failed, code is ${err.code}, message is ${err.message}`);\n  }\n}\n\nlet cInfo: StoreInfo | null = null;\nlet eInfo: StoreInfo | null = null;\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n    let cContext = this.context;\n    cInfo = {\n      \"kvManagerConfig\": {\n        context: cContext,\n        bundleName: 'com.example.ecstoredemo',\n      },\n      \"storeId\": \"cstore\",\n      \"option\": {\n        createIfMissing: true,\n        encrypt: false,\n        backup: false,\n        autoSync: false,\n        // kvStoreType不填时，默认创建多设备协同数据库\n        kvStoreType: distributedKVStore.KVStoreType.SINGLE_VERSION,\n        // 多设备协同数据库：kvStoreType: distributedKVStore.KVStoreType.DEVICE_COLLABORATION,\n        securityLevel: distributedKVStore.SecurityLevel.S1\n      }\n    }\n    let eContext = this.context.createModuleContext(\"entry\");\n    eContext.area = contextConstant.AreaMode.EL5;\n    eInfo = {\n      \"kvManagerConfig\": {\n        context: eContext,\n        bundleName: 'com.example.ecstoredemo',\n      },\n      \"storeId\": \"estore\",\n      \"option\": {\n        createIfMissing: true,\n        encrypt: false,\n        backup: false,\n        autoSync: false,\n        // kvStoreType不填时，默认创建多设备协同数据库\n        kvStoreType: distributedKVStore.KVStoreType.SINGLE_VERSION,\n        // 多设备协同数据库：kvStoreType: distributedKVStore.KVStoreType.DEVICE_COLLABORATION,\n        securityLevel: distributedKVStore.SecurityLevel.S1\n      }\n    }\n    console.info(`ECDB_Encry store area : estore:${eContext.area},cstore${cContext.area}`);\n    // 监听COMMON_EVENT_SCREEN_LOCK_FILE_ACCESS_STATE_CHANGED事件 code == 1解锁状态，code==0加锁状态\n    try {\n      commonEventManager.createSubscriber({\n        events: ['COMMON_EVENT_SCREEN_LOCK_FILE_ACCESS_STATE_CHANGED']\n      }, createCB);\n      console.info(`ECDB_Encry success subscribe`);\n    } catch (error) {\n      const err: BusinessError = error as BusinessError;\n      console.error(`createSubscriber failed, code is ${err.code}, message is ${err.message}`);\n    }\n    storeManager.config(cInfo, eInfo);\n    storeManager.configDataMover(mover);\n    e_secretKeyObserver.initialize(storeManager);\n  }\n\n  onDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/Index', (err) => {\n      if (err.code) {\n        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content.');\n    });\n  }\n\n  onWindowStageDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n  }\n\n  onForeground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n  }\n}
[h2]Index按键事件
使用Button按钮，通过点击按钮来模拟应用操作数据库，如插入数据、删除数据、更新数据和获取数据数量的操作等，展示数据库基本的增删改查能力。
// Index.ets\nimport { storeManager, e_secretKeyObserver } from \"../entryability/EntryAbility\";\nimport { distributedKVStore } from '@kit.ArkData';\nimport { Store } from '../entryability/Store';\n\nlet storeOption = new Store();\n\nlet lockStatus: number = 1;\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Button('加锁/解锁').onClick((event: ClickEvent) => {\n          if (lockStatus) {\n            e_secretKeyObserver.onLock();\n            lockStatus = 0;\n          } else {\n            e_secretKeyObserver.onUnLock();\n            lockStatus = 1;\n          }\n          lockStatus ? this.message = \"解锁\" : this.message = \"加锁\";\n        }).margin(\"5\");\n        Button('store type').onClick(async (event: ClickEvent) => {\n          e_secretKeyObserver.getCurrentStatus() ? this.message = \"estroe\" : this.message = \"cstore\";\n        }).margin(\"5\");\n\n        Button(\"put\").onClick(async (event: ClickEvent) => {\n          let store: distributedKVStore.SingleKVStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.putOnedata(store);\n        }).margin(5)\n\n        Button(\"Get\").onClick(async (event: ClickEvent) => {\n          let store: distributedKVStore.SingleKVStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.getDataNum(store);\n        }).margin(5)\n\n        Button(\"delete\").onClick(async (event: ClickEvent) => {\n          let store: distributedKVStore.SingleKVStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.deleteOnedata(store);\n        }).margin(5)\n\n        Button(\"updata\").onClick(async (event: ClickEvent) => {\n          let store: distributedKVStore.SingleKVStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.updataOnedata(store);\n        }).margin(5)\n\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
关系型数据库E类加密
本章节提供关系型数据库的E类加密数据库使用方式，提供Mover类，Store类，SecretKeyObserver类和ECStoreManager类的具体实现，并在EntryAbility和index按键事件中展示这几个类的使用方式。
[h2]Mover
提供数据库数据迁移接口，在锁屏解锁后，若C类数据库中有数据，使用该接口将数据迁移到E类数据库。
// Mover.ts\nimport { relationalStore } from '@kit.ArkData';\n\nexport class Mover {\n  async move(eStore: relationalStore.RdbStore, cStore: relationalStore.RdbStore) {\n    if (eStore != null && cStore != null) {\n      let predicates = new relationalStore.RdbPredicates('employee');\n      let resultSet = await cStore.query(predicates);\n      while (resultSet.goToNextRow()) {\n        let bucket = resultSet.getRow();\n        await eStore.insert('employee', bucket);\n      }\n    }\n  }\n}
[h2]Store
提供了获取数据库，在数据库中插入数据、删除数据、更新数据和获取当前数据数量的接口。其中StoreInfo类用于存储获取数据库相关信息。
// Store.ts\nimport { relationalStore } from '@kit.ArkData';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { Context } from '@kit.AbilityKit';\n\nexport class StoreInfo {\n  context: Context;\n  config: relationalStore.StoreConfig;\n  storeId: string;\n}\n\nlet id = 1;\nconst SQL_CREATE_TABLE = 'CREATE TABLE IF NOT EXISTS EMPLOYEE (ID INTEGER PRIMARY KEY AUTOINCREMENT, NAME TEXT NOT NULL, AGE INTEGER, SALARY REAL, CODES BLOB)';\n\n\nexport class Store {\n  async getECStore(storeInfo: StoreInfo): Promise<relationalStore.RdbStore> {\n    let rdbStore: relationalStore.RdbStore | null;\n    try {\n      rdbStore = await relationalStore.getRdbStore(storeInfo.context, storeInfo.config);\n      if (rdbStore.version == 0) {\n        await rdbStore.executeSql(SQL_CREATE_TABLE);\n        console.info(`ECDB_Encry succeeded in getting Store ：${storeInfo.storeId}`);\n        rdbStore.version = 1;\n      }\n    } catch (e) {\n      let error = e as BusinessError;\n      console.error(`An unexpected error occurred.code is ${error.code},message is ${error.message}`);\n    }\n    return rdbStore;\n  }\n\n  async putOnedata(rdbStore: relationalStore.RdbStore) {\n    if (rdbStore != undefined) {\n      const valueBucket: relationalStore.ValuesBucket = {\n        ID: id++,\n        NAME: 'Lisa',\n        AGE: 18,\n        SALARY: 100.5,\n        CODES: new Uint8Array([1, 2, 3, 4, 5]),\n      };\n      try {\n        await rdbStore.insert(\"EMPLOYEE\", valueBucket);\n        console.info(`ECDB_Encry insert success`);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n      }\n    }\n  }\n\n  async getDataNum(rdbStore: relationalStore.RdbStore) {\n    if (rdbStore != undefined) {\n      try {\n        let predicates = new relationalStore.RdbPredicates('EMPLOYEE');\n        let resultSet = await rdbStore.query(predicates);\n        let count = resultSet.rowCount;\n        console.info(`ECDB_Encry getdatanum success count : ${count}`);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n      }\n    }\n  }\n\n  async deleteAlldata(rdbStore: relationalStore.RdbStore) {\n    if (rdbStore != undefined) {\n      try {\n        let predicates = new relationalStore.RdbPredicates('EMPLOYEE');\n        predicates.equalTo('AGE', 18);\n        await rdbStore.delete(predicates);\n        console.info(`ECDB_Encry delete Success`);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n      }\n    }\n  }\n\n  async updataOnedata(rdbStore: relationalStore.RdbStore) {\n    if (rdbStore != undefined) {\n      try {\n        let predicates = new relationalStore.RdbPredicates('EMPLOYEE');\n        predicates.equalTo('NAME', 'Lisa');\n        const valueBucket: relationalStore.ValuesBucket = {\n          NAME: 'Anna',\n          SALARY: 100.5,\n          CODES: new Uint8Array([1, 2, 3, 4, 5]),\n        };\n        await rdbStore.update(valueBucket, predicates);\n        console.info(`ECDB_Encry update success`);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n      }\n    }\n  }\n}
[h2]SecretKeyObserver
该类提供了获取当前密钥状态的接口，在密钥销毁后，关闭E类数据库。
// SecretKeyObserver.ts\nimport { ECStoreManager } from './ECStoreManager';\n\nexport enum SecretStatus {\n  Lock,\n  UnLock\n}\n\nexport class SecretKeyObserver {\n  onLock(): void {\n    this.lockStatuas = SecretStatus.Lock;\n    this.storeManager.closeEStore();\n  }\n\n  onUnLock(): void {\n    this.lockStatuas = SecretStatus.UnLock;\n  }\n\n  getCurrentStatus(): number {\n    return this.lockStatuas;\n  }\n\n  initialize(storeManager: ECStoreManager): void {\n    this.storeManager = storeManager;\n  }\n\n  updatalockStatus(code: number) {\n    if (this.lockStatuas === SecretStatus.Lock) {\n      this.onLock();\n    } else {\n      this.lockStatuas = code;\n    }\n  }\n\n  private lockStatuas: number = SecretStatus.UnLock;\n  private storeManager: ECStoreManager;\n}\n\nexport let lockObserve = new SecretKeyObserver();
[h2]ECStoreManager
ECStoreManager类用于管理应用的E类数据库和C类数据库。支持配置数据库信息、配置迁移函数的信息，可根据密钥状态为应用提供相应的数据库句柄，并提供了关闭E类数据库、数据迁移完成后销毁C类数据库等接口。
// ECStoreManager.ts\nimport { relationalStore } from '@kit.ArkData';\nimport { Mover } from './Mover';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { StoreInfo, Store } from './Store';\nimport { SecretStatus } from './SecretKeyObserver';\n\nlet store = new Store();\n\nexport class ECStoreManager {\n  config(cInfo: StoreInfo, other: StoreInfo): void {\n    this.cInfo = cInfo;\n    this.eInfo = other;\n  }\n\n  configDataMover(mover: Mover): void {\n    this.mover = mover;\n  }\n\n  async getCurrentStore(screanStatus: number): Promise<relationalStore.RdbStore> {\n    if (screanStatus === SecretStatus.UnLock) {\n      try {\n        this.eStore = await store.getECStore(this.eInfo);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`Failed to GetECStore.code is ${error.code},message is ${error.message}`);\n      }\n      // 解锁状态 获取e类库\n      if (this.needMove) {\n        if (this.eStore != undefined && this.cStore != undefined) {\n          await this.mover.move(this.eStore, this.cStore);\n          console.info(`ECDB_Encry cstore data move to estore success`);\n        }\n        this.deleteCStore();\n        this.needMove = false;\n      }\n      return this.eStore;\n    } else {\n      // 加锁状态 获取c类库\n      this.needMove = true;\n      try {\n        this.cStore = await store.getECStore(this.cInfo);\n      } catch (e) {\n        let error = e as BusinessError;\n        console.error(`Failed to GetECStore.code is ${error.code},message is ${error.message}`);\n      }\n      return this.cStore;\n    }\n  }\n\n  closeEStore(): void {\n    this.eStore = undefined;\n  }\n\n  async deleteCStore() {\n    try {\n      await relationalStore.deleteRdbStore(this.cInfo.context, this.cInfo.storeId)\n    } catch (e) {\n      let error = e as BusinessError;\n      console.error(`Failed to create KVManager.code is ${error.code},message is ${error.message}`);\n    }\n  }\n\n  private eStore: relationalStore.RdbStore = null;\n  private cStore: relationalStore.RdbStore = null;\n  private cInfo: StoreInfo | null = null;\n  private eInfo: StoreInfo | null = null;\n  private needMove: boolean = false;\n  private mover: Mover | null = null;\n}
[h2]EntryAbility
模拟在应用启动期间，注册对COMMON_EVENT_SCREEN_LOCK_FILE_ACCESS_STATE_CHANGED公共事件的监听，并配置相应的数据库信息、密钥状态信息等。
// EntryAbility.ets\nimport { AbilityConstant, contextConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { window } from '@kit.ArkUI';\nimport { relationalStore } from '@kit.ArkData';\nimport { ECStoreManager } from './ECStoreManager';\nimport { StoreInfo } from './Store';\nimport { Mover } from './Mover';\nimport { SecretKeyObserver } from './SecretKeyObserver';\nimport { commonEventManager } from '@kit.BasicServicesKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n\nexport let storeManager = new ECStoreManager();\n\nexport let e_secretKeyObserver = new SecretKeyObserver();\n\nlet mover = new Mover();\n\nlet subscriber: commonEventManager.CommonEventSubscriber;\n\nexport function createCB(err: BusinessError, commonEventSubscriber: commonEventManager.CommonEventSubscriber) {\n  if (!err) {\n    console.info('ECDB_Encry createSubscriber');\n    subscriber = commonEventSubscriber;\n    try {\n      commonEventManager.subscribe(subscriber, (err: BusinessError, data: commonEventManager.CommonEventData) => {\n        if (err) {\n          console.error(`subscribe failed, code is ${err.code}, message is ${err.message}`);\n        } else {\n          console.info(`ECDB_Encry SubscribeCB ${data.code}`);\n          e_secretKeyObserver.updatalockStatus(data.code);\n        }\n      });\n    } catch (error) {\n      const err: BusinessError = error as BusinessError;\n      console.error(`subscribe failed, code is ${err.code}, message is ${err.message}`);\n    }\n  } else {\n    console.error(`createSubscriber failed, code is ${err.code}, message is ${err.message}`);\n  }\n}\n\nlet cInfo: StoreInfo | null = null;\nlet eInfo: StoreInfo | null = null;\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n    let cContext = this.context;\n    cInfo = {\n      context: cContext,\n      config: {\n        name: 'cstore.db',\n        securityLevel: relationalStore.SecurityLevel.S1,\n      },\n      storeId: \"cstore.db\"\n    }\n    let eContext = this.context.createModuleContext(\"entry\");\n    eContext.area = contextConstant.AreaMode.EL5;\n    eInfo = {\n      context: eContext,\n      config: {\n        name: 'estore.db',\n        securityLevel: relationalStore.SecurityLevel.S1,\n      },\n      storeId: \"estore.db\",\n    }\n    // 监听COMMON_EVENT_SCREEN_LOCK_FILE_ACCESS_STATE_CHANGED事件 code == 1解锁状态，code==0加锁状态\n    console.info(`ECDB_Encry store area : estore:${eContext.area},cstore${cContext.area}`)\n    try {\n      commonEventManager.createSubscriber({\n        events: ['COMMON_EVENT_SCREEN_LOCK_FILE_ACCESS_STATE_CHANGED']\n      }, createCB);\n      console.info(`ECDB_Encry success subscribe`);\n    } catch (error) {\n      const err: BusinessError = error as BusinessError;\n      console.error(`createSubscriber failed, code is ${err.code}, message is ${err.message}`);\n    }\n    storeManager.config(cInfo, eInfo);\n    storeManager.configDataMover(mover);\n    e_secretKeyObserver.initialize(storeManager);\n  }\n\n  onDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/Index', (err) => {\n      if (err.code) {\n        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content.');\n    });\n  }\n\n  onWindowStageDestroy(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');\n  }\n\n  onForeground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n  }\n\n  onBackground(): void {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n  }\n}
[h2]Index按键事件
使用Button按钮，通过点击按钮来模拟应用操作数据库，如插入数据、删除数据、更新数据和获取数据数量的操作等，展示数据库基本的增删改查能力。
// Index.ets\nimport { storeManager, e_secretKeyObserver } from \"../entryability/EntryAbility\";\nimport { relationalStore } from '@kit.ArkData';\nimport { Store } from '../entryability/Store';\n\nlet storeOption = new Store();\n\nlet lockStatus: number = 1;\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Button('加锁/解锁').onClick((event: ClickEvent) => {\n          if (lockStatus) {\n            e_secretKeyObserver.onLock();\n            lockStatus = 0;\n          } else {\n            e_secretKeyObserver.onUnLock();\n            lockStatus = 1;\n          }\n          lockStatus ? this.message = \"解锁\" : this.message = \"加锁\";\n        }).margin(\"5\");\n        Button('store type').onClick(async (event: ClickEvent) => {\n          e_secretKeyObserver.getCurrentStatus() ? this.message = \"estroe\" : this.message = \"cstore\";\n          console.info(`ECDB_Encry current store : ${this.message}`);\n        }).margin(\"5\");\n\n        Button(\"put\").onClick(async (event: ClickEvent) => {\n          let store: relationalStore.RdbStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.putOnedata(store);\n        }).margin(5)\n\n        Button(\"Get\").onClick(async (event: ClickEvent) => {\n          let store: relationalStore.RdbStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.getDataNum(store);\n        }).margin(5)\n\n        Button(\"delete\").onClick(async (event: ClickEvent) => {\n          let store: relationalStore.RdbStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.deleteAlldata(store);\n        }).margin(5)\n\n        Button(\"updata\").onClick(async (event: ClickEvent) => {\n          let store: relationalStore.RdbStore = await storeManager.getCurrentStore(e_secretKeyObserver.getCurrentStatus());\n          storeOption.updataOnedata(store);\n        }).margin(5)\n\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
