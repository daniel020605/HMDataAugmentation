wrapBuilder：封装全局@Builder
 当开发者在一个struct内使用了多个全局@Builder函数，来实现UI的不同效果时，多个全局@Builder函数会使代码维护起来非常困难，并且页面不整洁。此时，开发者可以使用wrapBuilder来封装全局@Builder。 
 在阅读本文档前，建议提前阅读：@Builder。
从API version 11开始使用。
当@Builder方法赋值给变量或者数组后，赋值的变量或者数组在UI方法中无法使用。
@Builder\nfunction builderElement() {}\n\nlet builderArr: Function[] = [builderElement];\n@Builder\nfunction testBuilder() {\n  ForEach(builderArr, (item: Function) => {\n    item();\n  })\n}
在上述代码中，builderArr是一个@Builder方法组成的数组， 在ForEach中取每一项@Builder方法时会出现@Builder方法在UI方法中无法使用的错误。
 为了解决这一问题，引入wrapBuilder作为全局@Builder封装函数。wrapBuilder的参数返回WrappedBuilder对象，实现全局@Builder可以进行赋值和传递。 
接口说明
wrapBuilder是一个模板函数，返回一个WrappedBuilder对象。
declare function wrapBuilder< Args extends Object[]>(builder: (...args: Args) => void): WrappedBuilder;
同时 WrappedBuilder对象也是一个模板类。
declare class WrappedBuilder< Args extends Object[]> {\n  builder: (...args: Args) => void;\n\n  constructor(builder: (...args: Args) => void);\n}
说明：模板参数Args extends Object[]是需要包装的builder函数的参数列表
使用方法：
let builderVar: WrappedBuilder<[string, number]> = wrapBuilder(MyBuilder)\nlet builderArr: WrappedBuilder<[string, number]>[] = [wrapBuilder(MyBuilder)] //可以放入数组
限制条件
wrapBuilder方法只能传入全局@Builder方法。
wrapBuilder方法返回的WrappedBuilder对象的builder属性方法只能在struct内部使用。
@Builder方法赋值给变量
把@Builder装饰器装饰的方法MyBuilder作为wrapBuilder的参数，再将wrapBuilder赋值给变量globalBuilder，用来解决@Builder方法赋值给变量后无法被使用的问题。 
@Builder\nfunction MyBuilder(value: string, size: number) {\n  Text(value)\n    .fontSize(size)\n}\n\nlet globalBuilder: WrappedBuilder<[string, number]> = wrapBuilder(MyBuilder);\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        globalBuilder.builder(this.message, 50)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
@Builder方法赋值给变量在UI语法中使用
自定义组件Index使用ForEach来进行不同@Builder函数的渲染，可以使用builderArr声明的wrapBuilder数组进行不同@Builder函数效果体现。整体代码会较整洁。
@Builder\nfunction MyBuilder(value: string, size: number) {\n  Text(value)\n    .fontSize(size)\n}\n\n@Builder\nfunction YourBuilder(value: string, size: number) {\n  Text(value)\n    .fontSize(size)\n    .fontColor(Color.Pink)\n}\n\nconst builderArr: WrappedBuilder<[string, number]>[] = [wrapBuilder(MyBuilder), wrapBuilder(YourBuilder)];\n\n\n@Entry\n@Component\nstruct Index {\n  @Builder testBuilder() {\n    ForEach(builderArr, (item: WrappedBuilder<[string, number]>) => {\n      item.builder('Hello World', 30)\n    }\n\n    )\n  }\n\n  build() {\n    Row() {\n      Column() {\n        this.testBuilder()\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
引用传递
通过按引用传递的方式传入参数，会触发UI的刷新。
class Tmp {\n  paramA2: string = 'hello';\n}\n\n@Builder function overBuilder(param: Tmp) {\n  Column(){\n    Text(`wrapBuildervalue:${param.paramA2}`)\n  }\n}\n\nconst wBuilder: WrappedBuilder<[Tmp]> = wrapBuilder(overBuilder);\n\n@Entry\n@Component\nstruct Parent{\n  @State label: Tmp = new Tmp();\n  build(){\n    Column(){\n      wBuilder.builder({paramA2: this.label.paramA2})\n      Button('Click me').onClick(() => {\n        this.label.paramA2 = 'ArkUI';\n      })\n    }\n  }\n}
错误场景
[h2]重复定义wrapBuilder失效
通过wrapBuilder(MyBuilderFirst)初始化定义builderObj之后，再次对builderObj进行赋值wrapBuilder(MyBuilderSecond)会不起作用，只生效第一次定义的wrapBuilder(MyBuilderFirst)。
@Builder\nfunction MyBuilderFirst(value: string, size: number) {\n  Text('MyBuilderFirst：' + value)\n    .fontSize(size)\n}\n\n@Builder\nfunction MyBuilderSecond(value: string, size: number) {\n  Text('MyBuilderSecond：' + value)\n    .fontSize(size)\n}\n\ninterface BuilderModel {\n  globalBuilder: WrappedBuilder<[string, number]>;\n}\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n  @State builderObj: BuilderModel = { globalBuilder: wrapBuilder(MyBuilderFirst) };\n\n  aboutToAppear(): void {\n    setTimeout(() => {\n      this.builderObj.globalBuilder = wrapBuilder(MyBuilderSecond);\n    },1000)\n  }\n\n  build() {\n    Row() {\n      Column() {\n        this.builderObj.globalBuilder.builder(this.message, 20)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
