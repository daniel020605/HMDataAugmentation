ArkTS高性能编程实践
概述
本文主要提供应用性能敏感场景下的高性能编程的相关建议，助力开发者开发出高性能的应用。高性能编程实践，是在开发过程中逐步总结出来的一些高性能的写法和建议，在业务功能实现过程中，要同步思考并理解高性能写法的原理，运用到代码逻辑实现中。ArkTS编程规范可参考ArkTS编程规范。
声明与表达式
[h2]使用const声明不变的变量
不变的变量推荐使用const声明。
const index = 10000; // 该变量在后续过程中未发生改变，建议声明成常量
[h2]number类型变量避免整型和浮点型混用
针对number类型，运行时在优化时会区分整型和浮点型数据。建议避免在初始化后改变数据类型。
let intNum = 1;\nintNum = 1.1;  // 该变量在声明时为整型数据，建议后续不要赋值浮点型数据\n\nlet doubleNum = 1.1;\ndoubleNum = 1;  // 该变量在声明时为浮点型数据，建议后续不要赋值整型数据
[h2]数值计算避免溢出
常见的可能导致溢出的数值计算包括如下场景，溢出之后，会导致引擎走入慢速的溢出逻辑分支处理，影响后续的性能。
针对加法、减法、乘法、指数运算等运算操作，应避免数值大于INT32_MAX或小于INT32_MIN。 针对&（and）、>>>（无符号右移）等运算操作，应避免数值大于INT32_MAX。 
[h2]循环中常量提取，减少属性访问次数
在循环中会大量进行一些常量的访问操作，如果该常量在循环中不会改变，可以提取到循环外部，减少属性访问的次数。
class Time {\n  static start: number = 0;\n  static info: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n}\n\nfunction getNum(num: number): number {\n  let total: number = 348;\n  for (let index: number = 0x8000; index > 0x8; index >>= 1) {\n    // 此处会多次对Time的info及start进行查找，并且每次查找出来的值是相同的\n    total += ((Time.info[num - Time.start] & index) !== 0) ? 1 : 0;\n  }\n  return total;\n}
优化后代码如下，可以将Time.info[num - Time.start]进行常量提取操作，这样可以大幅减少属性的访问次数，性能收益明显。
class Time {\n  static start: number = 0;\n  static info: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n}\n\nfunction getNum(num: number): number {\n  let total: number = 348;\n  const info = Time.info[num - Time.start];  // 从循环中提取不变量\n  for (let index: number = 0x8000; index > 0x8; index >>= 1) {\n    if ((info & index) != 0) {\n      total++;\n    }\n  }\n  return total;\n}
函数
[h2]建议使用参数传递函数外的变量
使用闭包会造成额外的闭包创建和访问开销。在性能敏感场景中，建议使用参数传递函数外的变量来替代使用闭包。
let arr = [0, 1, 2];\n\nfunction foo(): number {\n  return arr[0] + arr[1];\n}\n\nfoo();
建议使用参数传递函数外的变量来，替代使用闭包。
let arr = [0, 1, 2];\n\nfunction foo(array: number[]): number {\n  return array[0] + array[1];\n}\n\nfoo(arr);
[h2]避免使用可选参数
函数的可选参数表示参数可能为undefined，在函数内部使用该参数时，需要进行非空值的判断，造成额外的开销。
function add(left?: number, right?: number): number | undefined {\n  if (left != undefined && right != undefined) {\n    return left + right;\n  }\n  return undefined;\n}
根据业务需要，将函数参数声明为必须参数。可以考虑使用默认参数。
function add(left: number = 0, right: number = 0): number {\n  return left + right;\n}
数组
[h2]数值数组推荐使用TypedArray
如果是涉及纯数值计算的场合，推荐使用TypedArray数据结构。
优化前
const arr1 = new Array<number>([1, 2, 3]);\nconst arr2 = new Array<number>([4, 5, 6]);\nlet res = new Array<number>(3);\nfor (let i = 0; i < 3; i++) {\n  res[i] = arr1[i] + arr2[i];\n}
优化后
const typedArray1 = new Int8Array([1, 2, 3]);\nconst typedArray2 = new Int8Array([4, 5, 6]);\nlet res = new Int8Array(3);\nfor (let i = 0; i < 3; i++) {\n  res[i] = typedArray1[i] + typedArray2[i];\n}
[h2]避免使用稀疏数组
运行时在分配超过1024大小的数组或者针对稀疏数组，会采用hash表的方式来存储元素。在该模式下，相比于用偏移访问数组元素速度较慢。在代码开发时，应尽量避免数组变成稀疏数组。
// 直接分配100000大小的数组，运行时会处理成用hash表来存储元素\nlet count = 100000;\nlet result: number[] = new Array(count);\n\n// 创建数组后，直接在9999处赋值，会变成稀疏数组\nlet result: number[] = new Array();\nresult[9999] = 0;
[h2]避免使用联合类型数组
避免使用联合类型数组。避免在数值数组中混合使用整型数据和浮点型数据。
let arrNum: number[] = [1, 1.1, 2];  // 数值数组中混合使用整型数据和浮点型数据\n\nlet arrUnion: (number | string)[] = [1, 'hello'];  // 联合类型数组
根据业务需要，将相同类型的数据放置在同一数组中。
let arrInt: number[] = [1, 2, 3];\nlet arrDouble: number[] = [0.1, 0.2, 0.3];\nlet arrString: string[] = ['hello', 'world'];
异常
[h2]避免频繁抛出异常
创建异常时会构造异常的栈帧，造成性能损耗。在性能敏感场景下，例如在for循环语句中，避免频繁抛出异常。
优化前
function div(a: number, b: number): number {\n  if (a <= 0 || b <= 0) {\n    throw new Error('Invalid numbers.')\n  }\n  return a / b\n}\n\nfunction sum(num: number): number {\n  let sum = 0\n  try {\n    for (let t = 1; t < 100; t++) {\n      sum += div(t, num)\n    }\n  } catch (e) {\n    console.log(e.message)\n  }\n  return sum\n}
优化后
function div(a: number, b: number): number {\n  if (a <= 0 || b <= 0) {\n    return NaN\n  }\n  return a / b\n}\n\nfunction sum(num: number): number {\n  let sum = 0\n  for (let t = 1; t < 100; t++) {\n    if (t <= 0 || num <= 0) {\n      console.log('Invalid numbers.')\n    }\n    sum += div(t, num)\n  }\n  return sum\n}
