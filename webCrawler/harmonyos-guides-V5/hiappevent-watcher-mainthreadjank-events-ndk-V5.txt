订阅主线程超时事件（C/C++）
接口说明
API接口的具体使用说明（参数使用限制、具体取值范围等）请参考HiAppEvent。
订阅接口功能介绍：
开发步骤
 新建Native C++工程，并将jsoncpp导入到新建工程内，目录结构如下： entry:\n  src:\n    main:\n      cpp:\n        - json:\n            - json.h\n            - json-forwards.h\n        - types:\n            libentry:\n              - index.d.ts\n        - CMakeLists.txt\n        - napi_init.cpp\n        - jsoncpp.cpp\n      ets:\n        - entryability:\n            - EntryAbility.ets\n        - pages:\n            - Index.ets 编辑\"CMakeLists.txt\"文件，添加源文件及动态库： # 新增jsoncpp.cpp(解析订阅事件中的json字符串)源文件\nadd_library(entry SHARED napi_init.cpp jsoncpp.cpp)\n# 新增动态库依赖libhiappevent_ndk.z.so和libhilog_ndk.z.so(日志输出)\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so libhiappevent_ndk.z.so) 编辑\"napi_init.cpp\"文件，导入依赖的文件，并定义LOG_TAG： #include \"napi/native_api.h\"\n#include \"json/json.h\"\n#include \"hilog/log.h\"\n#include \"hiappevent/hiappevent.h\"\n#include \"hiappevent/hiappevent_event.h\"\n#undef LOG_TAG\n#define LOG_TAG \"testTag\" 订阅系统事件：  onReceive类型观察者： 编辑\"napi_init.cpp\"文件，定义onReceive类型观察者相关方法： //定义一变量，用来缓存创建的观察者的指针。\nstatic HiAppEvent_Watcher *systemEventWatcher; \n\nstatic void OnReceive(const char *domain, const struct HiAppEvent_AppEventGroup *appEventGroups, uint32_t groupLen) {\n    for (int i = 0; i < groupLen; ++i) {\n        for (int j = 0; j < appEventGroups[i].infoLen; ++j) {\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.domain=%{public}s\",\n                        appEventGroups[i].appEventInfos[j].domain);\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.name=%{public}s\",\n                        appEventGroups[i].appEventInfos[j].name);\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.eventType=%{public}d\",\n                        appEventGroups[i].appEventInfos[j].type);\n            if (strcmp(appEventGroups[i].appEventInfos[j].domain, DOMAIN_OS) == 0 &&\n                strcmp(appEventGroups[i].appEventInfos[j].name, EVENT_MAIN_THREAD_JANK) == 0) {\n                Json::Value params;\n                Json::Reader reader(Json::Features::strictMode());\n                Json::FastWriter writer;\n                if (reader.parse(appEventGroups[i].appEventInfos[j].params, params)) {\n                    auto time = params[\"time\"].asInt64();\n                    auto pid = params[\"pid\"].asInt();\n                    auto uid = params[\"uid\"].asInt();\n                    auto bundleName = params[\"bundle_name\"].asString();\n                    auto bundleVersion = params[\"bundle_version\"].asString();\n                    auto beginTime = params[\"begin_time\"].asInt64();\n                    auto endTime = params[\"end_time\"].asInt64();\n                    auto externalLog = writer.write(params[\"external_log\"]);\n                    auto logOverLimit = params[\"logOverLimit\"].asBool();\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.time=%{public}lld\", time);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.pid=%{public}d\", pid);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.uid=%{public}d\", uid);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.bundle_name=%{public}s\",\n                                bundleName.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.bundle_version=%{public}s\",\n                                bundleVersion.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.begin_time=%{public}lld\", beginTime);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.end_time=%{public}lld\", endTime);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.external_log=%{public}s\", externalLog.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.log_over_limit=%{public}d\",\n                                logOverLimit);\n                }\n            }\n        }\n    }\n}\n\nstatic napi_value RegisterWatcher(napi_env env, napi_callback_info info) {\n    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent RegisterWatcher\");\n    // 开发者自定义观察者名称，系统根据不同的名称来识别不同的观察者。\n    systemEventWatcher = OH_HiAppEvent_CreateWatcher(\"onReceiverWatcher\");\n    // 设置订阅的事件为EVENT_MAIN_THREAD_JANK。\n    const char *names[] = {EVENT_MAIN_THREAD_JANK};\n    // 开发者订阅感兴趣的事件，此处订阅了系统事件。\n    OH_HiAppEvent_SetAppEventFilter(systemEventWatcher, DOMAIN_OS, 0, names, 1);\n    // 开发者设置已实现的回调函数，观察者接收到事件后回立即触发OnReceive回调。\n    OH_HiAppEvent_SetWatcherOnReceive(systemEventWatcher, OnReceive);\n    // 使观察者开始监听订阅的事件。\n    OH_HiAppEvent_AddWatcher(systemEventWatcher);\n    return {};\n}  将RegisterWatcher注册为ArkTS接口： 编辑\"napi_init.cpp\"文件，将RegisterWatcher注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"registerWatcher\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n} 编辑\"index.d.ts\"文件，定义ArkTS接口： export const registerWatcher: () => void; 编辑工程中的“entry > src > main > ets > entryability> EntryAbility.ets”文件，在onCreate()函数中新增接口调用： // 导入依赖模块\nimport testNapi from 'libentry.so'\n\n// 在onCreate()函数中新增接口调用\n// 启动时，注册系统事件观察者\ntestNapi.registerWatcher(); 编辑工程中的“entry > src > main > ets > pages> Index.ets”文件，添加一个Button控件onClick中实现主线程超时代码，示例代码如下：    Button(\"timeOut350\")\n   .fontSize(50)\n   .fontWeight(FontWeight.Bold)\n   .onClick(() => {\n       let t = Date.now();\n       while (Date.now() - t <= 350) {}\n   }) 开发者使用nolog版本，开发者模式处于关闭状态，可以使能主线程超时检测抓取trace的功能。 点击DevEco Studio界面中的运行按钮，运行应用工程，连续点击两次timeOut350按钮，会触发主线程超时事件。 主线程超时事件上报后，可以在Log窗口看到对系统事件数据的处理日志：   HiAppEvent eventInfo.domain=OS\n  HiAppEvent eventInfo.name=MAIN_THREAD_JANK\n  HiAppEvent eventInfo.eventType=1\n  HiAppEvent eventInfo.params.time=1717597063727\n  HiAppEvent eventInfo.params.pid=45572\n  HiAppEvent eventInfo.params.uid=20020151\n  HiAppEvent eventInfo.params.bundle_name=com.example.nativemainthread\n  HiAppEvent eventInfo.params.bundle_version=1.0.0\n  HiAppEvent eventInfo.params.begin_time=1717597063225\n  HiAppEvent eventInfo.params.end_time=1717597063727\n  HiAppEvent eventInfo.params.external_log=[\"/data/storage/el2/log/watchdog/MAIN_THREAD_JANK_20240613221239_45572.txt\"]\n  HiAppEvent eventInfo.params.log_over_limit=0     主线程超时事件具体规格可参考：主线程超时事件时间规格 和 主线程超时事件规格   移除事件观察者： static napi_value RemoveWatcher(napi_env env, napi_callback_info info) {\n    // 使观察者停止监听事件\n    OH_HiAppEvent_RemoveWatcher(systemEventWatcher);\n    return {};\n} 销毁事件观察者： static napi_value DestroyWatcher(napi_env env, napi_callback_info info) {\n    // 销毁创建的观察者，并置systemEventWatcher为nullptr。\n    OH_HiAppEvent_DestroyWatcher(systemEventWatcher);\n    systemEventWatcher = nullptr;\n    return {};\n} 
