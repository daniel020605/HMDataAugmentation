Web组件对接软键盘
开发者能够通过Web组件对接软键盘，来处理系统软键盘的显示与交互问题，同时实现软键盘的自定义功能。主要有以下场景。
 拉起系统软键盘输入文字：用户在点击网页输入框时，会在屏幕下方弹出系统默认的软键盘（输入法），用户可以通过软键盘输入文字，输入的内容会显示在输入框中。 自定义系统软键盘的回车键类型：应用指定网页输入框拉起不同类型的软键盘回车键。例如：确认、下一个、提交等。 软键盘避让：在移动设备上，由于输入法通常固定在屏幕下半段，应用可设置不同的Web页面软键盘避让模式。例如：平移、调整大小、不避让等。 自定义软键盘输入：在移动设备上，应用可以使用自绘制输入法在Web页面输入，以此替代系统软键盘。 
Web页面输入框输入与软键盘交互的W3C标准支持
为支持Web页面与系统软键盘、自定义软键盘等的良好交互，ArkWeb遵循并实现了W3C规范中的以下输入控制属性：
 type属性 type属性定义了input元素的类型，影响输入的验证、显示方式和键盘类型。常见的type值包括：     type值 描述    text 默认值。普通文本输入   number 数字输入   email 电子邮件地址输入   password 密码输入   tel 电话号码输入   url URL输入   date 日期选择器   time 时间选择器   checkbox 复选框   radio 单选按钮   file 文件上传   submit 提交按钮   reset 重置按钮   button 普通按钮    inputmode属性 inputmode属性用于配置输入法类型。     inputmode 描述    decimal 只显示数字键盘，通常还有一个逗号键   email 文本键盘，键通常用于电子邮件地址，如[@]。   none 不应出现键盘   numeric 只显示数字键盘   search 文本键盘，[enter]键通常显示为[go]   tel 只显示数字键盘，通常还有[+]、[*]和[#]键。   text 默认。文本键盘   url 文本键盘，键通常用于网址，如[.]和[/]，以及特殊的[.com]键，或者其他通常用于本地设置的域名结束符。    enterkeyhint属性 enterkeyhint属性用于指定移动设备虚拟键盘上回车键的显示方式。     enterkeyhint值 描述    enter 显示默认的回车键   done 表示输入完成   go 表示跳转或执行   next 进入下一个输入字段   previous 返回上一个输入字段   search 执行搜索   send 发送信息    
用户在点击网页输入框时，会在屏幕下方弹出系统默认的软键盘（输入法），并可进行文字输入上屏。
type属性更广泛，不仅影响键盘显示，还会影响输入验证和元素的外观。
inputmode主要用于优化移动设备上的键盘输入体验，不会改变input的基本行为或验证。
设置软键盘避让模式
在移动设备上，支持设置Web页面的软键盘避让模式。
 在应用代码中设置UIContext的软键盘避让模式setKeyboardAvoidMode()情况下，ArkWeb组件可支持Resize和Offset两种模式。 
 Resize模式下，应用窗口高度可缩小避开软键盘，ArkWeb组件跟随ArkUI重新布局。 Offset模式下（以及默认模式），应用窗口高度不变，ArkWeb组件根据自身的避让模式进行避让。 
（1）在应用代码中设置UIContext的软键盘避让模式。
// EntryAbility.ets\nimport { KeyboardAvoidMode } from '@kit.ArkUI';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nonWindowStageCreate(windowStage: window.WindowStage) {\n  hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n  windowStage.loadContent('pages/Index', (err, data) => {\n    let keyboardAvoidMode = windowStage.getMainWindowSync().getUIContext().getKeyboardAvoidMode();\n    // 设置虚拟键盘抬起时压缩页面大小为减去键盘的高度\n  windowStage.getMainWindowSync().getUIContext().setKeyboardAvoidMode(KeyboardAvoidMode.RESIZE);\n    if (err.code) {\n      hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n      return;\n    }\n    hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n  });\n}
（2）再在Web组件中拉起软键盘。
<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>测试网页</title>\n  </head>\n  <body>\n    <h1>DEMO</h1>\n    <input type=\"text\" id=\"input_a\">\n  </body>\n</html>
//Index.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct KeyboardAvoidExample {\n  controller: webview.WebviewController = new webview.WebviewController();\n  build() {\n    Column() {\n      Row().height(\"50%\").width(\"100%\").backgroundColor(Color.Gray)\n      Web({ src: $rawfile(\"index.html\"),controller: this.controller})\n      Text(\"I can see the bottom of the page\").width(\"100%\").textAlign(TextAlign.Center).backgroundColor(Color.Pink).layoutWeight(1)\n    }.width('100%').height(\"100%\")\n  }\n}
此时ArkWeb组件跟随ArkUI重新布局，效果如图1、图2所示。
图1 Web组件网页默认软键盘避让模式
图2 Web组件网页跟随Arkui软键盘避让模式
2.在UIContext的键盘避让模式为Offset模式情况下，应用可通过WebKeyboardAvoidMode()设置ArkWeb组件的键盘避让模式。Web组件的WebKeyboardAvoidMode()接口优先级高于W3C侧virtualKeyboard.overlayContens。
 RESIZE_VISUAL：仅调整可视视口的大小，而不调整布局视口的大小。 RESIZE_CONTENT：调整视觉视口和布局视口的大小。 OVERLAYS_CONTENT：不调整任何视口的大小，获焦input元素没有滚动到可识区域的行为。 
可视视口指用户正在看到的网站的区域，该区域的宽度等于移动设备的浏览器窗口的宽度。
布局视口指网页本身的宽度。
（1）在应用代码中设置ArkWeb的软键盘避让模式。
// Index.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct KeyboardAvoidExample {\n  controller: webview.WebviewController = new webview.WebviewController();\n  build() {\n    Column() {\n      Row().height(\"50%\").width(\"100%\").backgroundColor(Color.Gray)\n      Web({ src: $rawfile(\"index.html\"),controller: this.controller})\n        .keyboardAvoidMode(WebKeyboardAvoidMode.OVERLAYS_CONTENT) //此时ArkWeb组件不会调整任何视口的大小大小\n      Text(\"I can see the bottom of the page\").width(\"100%\").textAlign(TextAlign.Center).backgroundColor(Color.Pink).layoutWeight(1)\n    }.width('100%').height(\"100%\")\n  }\n}
此时ArkWeb组件根据自身的避让模式进行避让，效果如图3所示。
图3 Web组件网页自身软键盘避让模式
与其他Web组件行为的交叉场景：
拦截系统软键盘与自定义软键盘输入
应用能够通过调用onInterceptKeyboardAttach来拦截系统软键盘的弹出。在网页中，当可编辑元素如input标签即将触发软键盘显示时，onInterceptKeyboardAttach会被回调。应用可利用此接口来控制软键盘的显示，包括使用系统默认软键盘、定制带有特定Enter键的软键盘，或是完全自定义软键盘。借助这一功能，开发者能够实现对软键盘的灵活管理。
 使用系统默认软键盘 使用定制Enter键的系统软键盘 使用完全由应用自定义的软键盘 
  // Index.ets\n  import { webview } from '@kit.ArkWeb';\n  import { inputMethodEngine } from '@kit.IMEKit';\n\n  @Entry\n  @Component\n  struct WebComponent {\n    controller: webview.WebviewController = new webview.WebviewController();\n    webKeyboardController: WebKeyboardController = new WebKeyboardController()\n    inputAttributeMap: Map<string, number> = new Map([\n        ['UNSPECIFIED', inputMethodEngine.ENTER_KEY_TYPE_UNSPECIFIED],\n        ['GO', inputMethodEngine.ENTER_KEY_TYPE_GO],\n        ['SEARCH', inputMethodEngine.ENTER_KEY_TYPE_SEARCH],\n        ['SEND', inputMethodEngine.ENTER_KEY_TYPE_SEND],\n        ['NEXT', inputMethodEngine.ENTER_KEY_TYPE_NEXT],\n        ['DONE', inputMethodEngine.ENTER_KEY_TYPE_DONE],\n        ['PREVIOUS', inputMethodEngine.ENTER_KEY_TYPE_PREVIOUS]\n      ])\n\n      /**\n       * 自定义键盘组件Builder\n       */\n      @Builder\n      customKeyboardBuilder() {\n          // 这里实现自定义键盘组件，对接WebKeyboardController实现输入、删除、关闭等操作。\n        Row() {\n          Text(\"完成\")\n            .fontSize(20)\n            .fontColor(Color.Blue)\n            .onClick(() => {\n              this.webKeyboardController.close();\n            })\n          // 插入字符。\n          Button(\"insertText\").onClick(() => {\n            this.webKeyboardController.insertText('insert ');\n          }).margin({\n            bottom: 200,\n          })\n          // 从后往前删除length参数指定长度的字符。\n          Button(\"deleteForward\").onClick(() => {\n            this.webKeyboardController.deleteForward(1);\n          }).margin({\n            bottom: 200,\n          })\n          // 从前往后删除length参数指定长度的字符。\n          Button(\"deleteBackward\").onClick(() => {\n            this.webKeyboardController.deleteBackward(1);\n          }).margin({\n            left: -220,\n          })\n          // 插入功能按键。\n          Button(\"sendFunctionKey\").onClick(() => {\n            this.webKeyboardController.sendFunctionKey(6);\n          })\n        }\n      }\n\n    build() {\n      Column() {\n        Web({ src: $rawfile('index.html'), controller: this.controller })\n        .onInterceptKeyboardAttach((KeyboardCallbackInfo) => {\n          // option初始化，默认使用系统默认键盘\n          let option: WebKeyboardOptions = {\n            useSystemKeyboard: true,\n          };\n          if (!KeyboardCallbackInfo) {\n            return option;\n          }\n\n          // 保存WebKeyboardController，使用自定义键盘时候，需要使用该handler控制输入、删除、软键盘关闭等行为\n          this.webKeyboardController = KeyboardCallbackInfo.controller\n          let attributes: Record<string, string> = KeyboardCallbackInfo.attributes\n          // 遍历attributes\n          let attributeKeys = Object.keys(attributes)\n          for (let i = 0; i < attributeKeys.length; i++) {\n            console.log('WebCustomKeyboard key = ' + attributeKeys[i] + ', value = ' + attributes[attributeKeys[i]])\n          }\n\n          if (attributes) {\n            if (attributes['data-keyboard'] == 'customKeyboard') {\n              // 根据html可编辑元素的属性，判断使用不同的软键盘，例如这里如果属性包含有data-keyboard，且值为customKeyboard，则使用自定义键盘\n              console.log('WebCustomKeyboard use custom keyboard')\n              option.useSystemKeyboard = false;\n              // 设置自定义键盘builder\n              option.customKeyboard = () => {\n                this.customKeyboardBuilder()\n              }\n              return option;\n            }\n\n            if (attributes['keyboard-return'] != undefined) {\n              // 根据html可编辑元素的属性，判断使用不同的软键盘，例如这里如果属性包含有keyboard-return，使用系统键盘，并且指定系统软键盘enterKey类型\n              option.useSystemKeyboard = true;\n              let enterKeyType: number | undefined = this.inputAttributeMap.get(attributes['keyboard-return'])\n              if (enterKeyType != undefined) {\n                option.enterKeyType = enterKeyType\n              }\n              return option;\n            }\n          }\n\n          return option;\n        })\n      }\n    }\n  }
<!-- index.html -->\n    <!DOCTYPE html>\n    <html>\n\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1.0,maximum-scale=1.0\">\n    </head>\n\n    <body>\n\n    <p style=\"font-size:12px\">input标签，原有默认行为：</p>\n    <input type=\"text\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，系统键盘自定义enterKeyType属性 enter key UNSPECIFIED：</p>\n    <input type=\"text\" keyboard-return=\"UNSPECIFIED\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，系统键盘自定义enterKeyType属性 enter key GO：</p>\n    <input type=\"text\" keyboard-return=\"GO\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，系统键盘自定义enterKeyType属性 enter key SEARCH：</p>\n    <input type=\"text\" keyboard-return=\"SEARCH\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，系统键盘自定义enterKeyType属性 enter key SEND：</p>\n    <input type=\"text\" keyboard-return=\"SEND\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，系统键盘自定义enterKeyType属性 enter key NEXT：</p>\n    <input type=\"text\" keyboard-return=\"NEXT\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，系统键盘自定义enterKeyType属性 enter key DONE：</p>\n    <input type=\"text\" keyboard-return=\"DONE\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，系统键盘自定义enterKeyType属性 enter key PREVIOUS：</p>\n    <input type=\"text\" keyboard-return=\"PREVIOUS\" style=\"width: 300px; height: 20px\"><br>\n    <hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">\n\n    <p style=\"font-size:12px\">input标签，应用自定义键盘：</p>\n    <input type=\"text\" data-keyboard=\"customKeyboard\" style=\"width: 300px; height: 20px\"><br>\n\n    </body>\n\n    </html>
ArkWeb自定义键盘示例效果如图4、图5、图6所示。
图4 ArkWeb自定义键盘数字键盘
图5 ArkWeb自定义键盘字母键盘
图6 ArkWeb自定义键盘符号键盘
