HMAC(C/C++)
HMAC是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）。具体的场景介绍及支持的算法规格，请参考HMAC介绍与算法规格。
在CMake脚本中链接相关动态库
target_link_libraries(entry PUBLIC libhuks_ndk.z.so)
开发步骤
生成密钥
 指定密钥别名。 初始化密钥属性集。 调用OH_Huks_GenerateKeyItem生成密钥，HMAC支持的规格请参考密钥生成。 
除此之外，开发者也可以参考密钥导入的规格介绍，导入已有的密钥。
执行HMAC
 获取密钥别名。 获取待运算的数据。 调用OH_Huks_InitParamSet指定算法参数配置。 调用OH_Huks_InitSession初始化密钥会话，并获取会话的句柄handle。 调用OH_Huks_FinishSession结束密钥会话，获取哈希后的数据。 
#include \"huks/native_huks_api.h\"\n#include \"huks/native_huks_param.h\"\n#include \"napi/native_api.h\"\n#include <string.h>\nOH_Huks_Result InitParamSet(\n    struct OH_Huks_ParamSet **paramSet,\n    const struct OH_Huks_Param *params,\n    uint32_t paramCount)\n{\n    OH_Huks_Result ret = OH_Huks_InitParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        return ret;\n    }\n    ret = OH_Huks_AddParams(*paramSet, params, paramCount);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    ret = OH_Huks_BuildParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    return ret;\n}\n\nstatic struct OH_Huks_Param g_genHmacParams[] = {\n    {\n        .tag = OH_HUKS_TAG_ALGORITHM,\n        .uint32Param = OH_HUKS_ALG_HMAC\n    }, {\n        .tag = OH_HUKS_TAG_PURPOSE,\n        .uint32Param = OH_HUKS_KEY_PURPOSE_MAC\n    }, {\n        .tag = OH_HUKS_TAG_KEY_SIZE,\n        .uint32Param = OH_HUKS_AES_KEY_SIZE_256\n    }, {\n        .tag = OH_HUKS_TAG_DIGEST,\n        .uint32Param = OH_HUKS_DIGEST_SHA384\n    }\n};\n\nstatic const uint32_t HMAC_COMMON_SIZE = 1024;\nOH_Huks_Result HksHmacTest(\n        const struct OH_Huks_Blob *keyAlias,\n        const struct OH_Huks_ParamSet *hmacParamSet, const struct OH_Huks_Blob *inData, struct OH_Huks_Blob *hashText)\n{\n    uint8_t handleE[sizeof(uint64_t)] = {0};\n    struct OH_Huks_Blob handle = {sizeof(uint64_t), handleE};\n    OH_Huks_Result ret = OH_Huks_InitSession(keyAlias, hmacParamSet, &handle, nullptr);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        return ret;\n    }\n    ret = OH_Huks_FinishSession(&handle, hmacParamSet, inData, hashText);\n    return ret;\n}\n\nstatic napi_value HmacKey(napi_env env, napi_callback_info info)\n{\n    /* 1. Generate Key */\n    /*\n    * 模拟生成密钥场景\n    * 1.1. 确定密钥别名\n    */\n    char tmpKeyAlias[] = \"test_hmac\";\n    struct OH_Huks_Blob keyAlias = { (uint32_t)strlen(tmpKeyAlias), (uint8_t *)tmpKeyAlias };\n    struct OH_Huks_ParamSet *hmacParamSet = nullptr;\n    OH_Huks_Result ohResult;\n    do {\n        /*\n        * 1.2. 获取生成密钥算法参数配置\n        */\n        ohResult = InitParamSet(&hmacParamSet, g_genHmacParams, sizeof(g_genHmacParams) / sizeof(OH_Huks_Param));\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        /*\n        * 1.3. 调用generateKeyItem\n        */\n        ohResult = OH_Huks_GenerateKeyItem(&keyAlias, hmacParamSet, nullptr);\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        /* 2. Hmac */\n        /*\n        * 模拟哈希场景\n        * 2.1. 获取密钥别名\n        */\n        /*\n        * 2.2. 获取待哈希的数据\n        */\n        char tmpInData[] = \"HMAC_MAC_INDATA_1\";\n        struct OH_Huks_Blob inData = { (uint32_t)strlen(tmpInData), (uint8_t *)tmpInData };\n        uint8_t cipher[HMAC_COMMON_SIZE] = {0};\n        struct OH_Huks_Blob hashText = {HMAC_COMMON_SIZE, cipher};\n        /*\n        * 2.3. 调用initSession获取handle\n        */\n        /*\n        * 2.4. 调用finishSession获取哈希后的内容\n        */\n        ohResult = HksHmacTest(&keyAlias, hmacParamSet, &inData, &hashText);\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n    } while (0);\n    OH_Huks_FreeParamSet(&hmacParamSet);\n}
