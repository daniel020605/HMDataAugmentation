Node.js
入口方法
入口方法定义如下：
module.exports.myHandler = function(event, context, callback, logger)
myHandler：入口方法名称。event：调用方传递的事件对象，JSON格式。具体内容请参见event对象。context：函数运行时上下文对象，封装了日志接口、回调接口、环境变量env对象等。callback：事件处理结果。logger：记录日志。
函数必须通过显式调用callback(object)将事件处理结果返回给AppGallery Connect（简称AGC），结果可以是任意对象，但必须与JSON.stringify兼容，AGC会将结果转换成JSON字符串后，返回给调用方。callback执行完成，函数即执行结束。
完整的Node.js18.x云函数示例代码请参考函数示例。
日志记录
logger.debug()logger.error()logger.warn()logger.info()
获取环境变量
let env1 = context.env.env1;
若环境变量未配置，则会返回环境变量为undefined。
异常处理
您可以在函数代码中捕获异常，封装成error对象返回给调用方。对于函数执行期间被平台捕获的异常，平台同样以error对象形式返回给调用方。error对象定义如下。
error：\n{\n    \"code\": xxxxxx,\n    \"message\": \"xxxxxxxx\"\n}
其中code为错误码，message为错误码的描述信息。
示例代码如下：
try {\n    logger.info(JSON.stringify(event));\n    let result = { \"message\": \"success\" };\n    callback(result);\n} catch (err) {\n    let error = {\n        code: 400,\n        message: err.message\n    }\n    callback(error);\n}
函数示例
示例函数如下：
示例代码中入口方法myHandler()的返回值类型仅供您参考，您可以根据实际需要定义。
/**\n * Describe the basic method of Cloud Functions\n */\n\nlet myHandler = function(event, context, callback, logger){\n    // example of display environment variables\n    let env1 = context.env.env1;\n\n    // example of display logs\n    logger.info(\"Test info log\");\n    logger.warn(\"Test warn log\");\n    logger.debug(\"Test debug log\");\n    logger.error(\"Test error log\");\n\n    logger.info(\"--------Start-------\");\n    try {\n        let startTime = new Date().getTime();\n        let endTime = startTime;\n        let interval = 0;\n        startTime = process.uptime() * 1000;\n\n        // print input parameters and environment variables\n        logger.info(\"request: \" + JSON.stringify(event.request));\n        logger.info(\"env1: \" + env1);\n\n        endTime = process.uptime() * 1000;\n        interval = endTime - startTime;\n        logger.info(\"intervalTime: \" + interval);\n        logger.info(\"--------Finished-------\");\n\n        let res = new context.HTTPResponse(context.env, {\n            \"res-type\": \"context.env\",\n            \"faas-content-type\": \"json\",\n        }, \"application/json\", \"200\");\n        res.body = {\"intervalTime\": interval};\n        callback(res);\n    } catch (error) {\n        logger.error(\"--------Error-------\");\n        logger.error(\"error: \" + error);\n        callback(error);\n    }\n};\n\nmodule.exports.myHandler = myHandler;
准备函数部署包
您上传的nodejs函数部署包须使用如下结构，处理程序所在代码文件，例如示例中的handler.js，必须在zip包根目录下，依赖项放到node_modules目录下。
my-function.zip\n  |---- handler.js\n  |---- node_modules\n    |----async\n    |----async-listener
可通过npm工具的相关命令，安装与管理依赖。例如npm install xxx命令（执行路径无限制）可将依赖xxx自动安装到根目录的node_modules文件夹下。
