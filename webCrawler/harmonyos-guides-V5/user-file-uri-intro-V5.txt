用户文件uri介绍
用户文件uri是文件的唯一标识，在对用户文件进行访问与修改等操作时往往都会使用到uri，不建议开发者解析uri中的片段用于业务代码开发，不同类型的uri使用方式将在下文详细介绍。
uri的类型
uri类型可以归纳为文档类uri和媒体文件uri两类
 文档类uri：由picker拉起文件管理器选择或保存返回，以及通过fileAccess模块获取。具体获取方式参见文档类uri获取方式。 媒体文件uri：由picker通过拉起图库选择图片或者视频返回，通过photoAccessHelper模块获取图片或者视频文件的uri，以及通过userFileManager模块获取图片、视频或者音频文件的uri。具体获取方式参见媒体文件uri获取方式。 
文档类uri
[h2]文档类uri介绍
文档类uri的格式类型为：
'file://docs/storage/Users/currentUser/<relative_path>/test.txt'
其中各个字段表示的含义为：
[h2]文档类uri获取方式
 通过DocumentViewPicker接口选择或保存文件，返回选择或保存的文件uri。 通过AudioViewPicker接口选择或保存文件，返回选择或保存的文件uri。 
[h2]文档类uri的使用方式
normal等级的应用使用此类uri的方式只能通过fs模块进行进一步处理，其他模块使用此uri是会报没有权限的错误。示例代码参见picker中的选择文档类文件和保存文档类文件。
媒体文件uri
[h2]媒体文件uri介绍
媒体文件uri的格式类型为：
图片uri格式：
 'file://media/Photo/<id>/IMG_datetime_0001/displayName.jpg' 
视频uri格式：
 'file://media/Photo/<id>/VID_datetime_0001/displayName.mp4' 
音频uri格式：
 'file://media/Audio/<id>/AUD_datetime_0001/displayName.mp3' 
其中各个字段表示的含义为：
[h2]媒体文件uri获取方式
 通过PhotoAccessHelper的PhotoViewPicker选择媒体文件，返回选择的媒体文件文件的uri。 通过photoAccessHelper模块中的getAssets或createAsset接口获取媒体文件对应文件的uri。 
[h2]媒体文件uri的使用方式
normal等级的应用使用此类uri可以通过photoAccessHelper模块进行进一步处理。示例代码参见媒体资源使用指导中的指定URI获取图片或视频资源。此接口需要申请相册管理模块读权限'ohos.permission.READ_IMAGEVIDEO'，在使用中需要注意应用是否有此权限。
若normal等级的应用不想申请权限也可以通过临时授权的方式使用PhotoAccessHelper的PhotoViewPicker得到的uri使用photoAccessHelper.getAssets接口获取对应uri的PhotoAsset对象。这种方式获取的对象可以调用getThumbnail获取缩略图和使用get接口读取PhotoKeys中的部分信息。
以下为PhotoKeys中支持临时授权方式可以读取的信息：
下面为通过临时授权方式使用媒体文件uri进行获取缩略图和读取文件部分信息的示例代码：
import { photoAccessHelper } from '@kit.MediaLibraryKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { dataSharePredicates } from '@kit.ArkData';\n\n// 定义一个uri数组，用于接收PhotoViewPicker选择图片返回的uri\nlet uris: Array<string> = [];\nconst context = getContext(this);\n\n// 调用PhotoViewPicker.select选择图片\nasync function photoPickerGetUri() {\n  try {  \n    let PhotoSelectOptions = new photoAccessHelper.PhotoSelectOptions();\n    PhotoSelectOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE;\n    PhotoSelectOptions.maxSelectNumber = 1;\n    let photoPicker = new photoAccessHelper.PhotoViewPicker();\n    photoPicker.select(PhotoSelectOptions).then((PhotoSelectResult: photoAccessHelper.PhotoSelectResult) => {\n      console.info('PhotoViewPicker.select successfully, PhotoSelectResult uri: ' + JSON.stringify(PhotoSelectResult));\n      uris = PhotoSelectResult.photoUris;\n    }).catch((err: BusinessError) => {\n      console.error('PhotoViewPicker.select failed with err: ' + JSON.stringify(err));\n    });\n  } catch (error) {\n    let err: BusinessError = error as BusinessError;\n    console.error('PhotoViewPicker failed with err: ' + JSON.stringify(err));\n  }\n}\n\nasync function uriGetAssets() {\ntry {\n    let phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n    let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n    // 配置查询条件，使用PhotoViewPicker选择图片返回的uri进行查询\n    predicates.equalTo('uri', uris[0]);\n    let fetchOption: photoAccessHelper.FetchOptions = {\n      fetchColumns: [photoAccessHelper.PhotoKeys.WIDTH, photoAccessHelper.PhotoKeys.HEIGHT, photoAccessHelper.PhotoKeys.TITLE, photoAccessHelper.PhotoKeys.DURATION],\n      predicates: predicates\n    };\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = await phAccessHelper.getAssets(fetchOption);\n    // 得到uri对应的PhotoAsset对象，读取文件的部分信息\n    const asset: photoAccessHelper.PhotoAsset = await fetchResult.getFirstObject();\n    console.info('asset displayName: ', asset.displayName);\n    console.info('asset uri: ', asset.uri);\n    console.info('asset photoType: ', asset.photoType);\n    console.info('asset width: ', asset.get(photoAccessHelper.PhotoKeys.WIDTH));\n    console.info('asset height: ', asset.get(photoAccessHelper.PhotoKeys.HEIGHT));\n    console.info('asset title: ' + asset.get(photoAccessHelper.PhotoKeys.TITLE));\n    // 获取缩略图\n    asset.getThumbnail((err, pixelMap) => {\n      if (err == undefined) {\n        console.info('getThumbnail successful ' + JSON.stringify(pixelMap));\n      } else {\n        console.error('getThumbnail fail', err);\n      }\n    });\n  } catch (error){\n    console.error('uriGetAssets failed with err: ' + JSON.stringify(error));\n  }\n}
