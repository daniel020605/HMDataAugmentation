在Worker线程中使用相机(ArkTS)
Worker主要作用是为应用程序提供一个多线程的运行环境，可满足应用程序在执行过程中与主线程分离，在后台线程中运行一个脚本进行耗时操作，极大避免类似于计算密集型或高延迟的任务阻塞主线程的运行。
通常开发者使用相机功能需要创建相机会话，并持续接收处理预览流、拍照流、录像流等从而实现相关相机功能，这些密集型操作如果都放在主线程即UI线程，可能会阻塞UI绘制，推荐开发者在worker线程中实现相机功能。
开发步骤
 创建worker线程文件，配置worker。 DevEco Studio支持一键生成Worker，在对应的{moduleName}目录下任意位置，点击鼠标右键 > New > Worker，即可自动生成Worker的模板文件及配置信息，无需再手动在build-profile.json5中进行相关配置 。 CameraWorker.ets实现参考： import { ErrorEvent, MessageEvents, ThreadWorkerGlobalScope, worker } from '@kit.ArkTS';\nimport CameraService from '../CameraService';\n\nconst workerPort: ThreadWorkerGlobalScope = worker.workerPort;\n\n// 自定义消息格式\ninterface MessageInfo {\n  hasResolve: boolean;\n  type: string;\n  context: Context; // 注意worker线程中无法使用getContext()直接获取宿主线程context，需要通过消息从宿主线程通信到worker线程使用。\n  surfaceId: string;\n}\n\nworkerPort.onmessage = async (e: MessageEvents) => {\n  const messageInfo: MessageInfo = e.data;\n  console.info(`worker onmessage type:${messageInfo.type}`)\n  if ('initCamera' === messageInfo.type) {\n    // 在worker线程中收到宿主线程初始化相机的消息\n    console.info(`worker initCamera surfaceId:${messageInfo.surfaceId}`)\n    // 在worker线程中初始化相机\n    await CameraService.initCamera(messageInfo.context, messageInfo.surfaceId);\n  } else if ('releaseCamera' === messageInfo.type) {\n    // 在worker线程中收到宿主线程释放相机的消息\n    console.info('worker releaseCamera.');\n    // 在worker线程中释放相机\n    await CameraService.releaseCamera();\n  }\n}\n\nworkerPort.onmessageerror = (e: MessageEvents) => {\n}\n\nworkerPort.onerror = (e: ErrorEvent) => {\n} 创建相机服务代理类，调用CameraKit方法都放在这个类里执行。 import { BusinessError } from '@kit.BasicServicesKit';\nimport { camera } from '@kit.CameraKit';\n\nclass CameraService {\n  private imageWidth: number = 1920;\n  private imageHeight: number = 1080;\n  private cameraManager: camera.CameraManager | undefined = undefined;\n  private cameras: Array<camera.CameraDevice> | Array<camera.CameraDevice> = [];\n  private cameraInput: camera.CameraInput | undefined = undefined;\n  private previewOutput: camera.PreviewOutput | undefined = undefined;\n  private photoOutput: camera.PhotoOutput | undefined = undefined;\n  private session: camera.PhotoSession | camera.VideoSession | undefined = undefined;\n\n  // 初始化相机\n  async initCamera(context: Context, surfaceId: string): Promise<void> {\n    console.info(`initCamera surfaceId: ${surfaceId}`);\n    try {\n      await this.releaseCamera();\n      // 获取相机管理器实例\n      this.cameraManager = camera.getCameraManager(context);\n      if (this.cameraManager === undefined) {\n        console.error('cameraManager is undefined');\n        return;\n      }\n      this.cameras = this.cameraManager.getSupportedCameras();\n\n      // 创建cameraInput输出对象\n      this.cameraInput = this.cameraManager.createCameraInput(this.cameras[0]);\n      if (this.cameraInput === undefined) {\n        console.error('Failed to create the camera input.');\n        return;\n      }\n      // 打开相机\n      await this.cameraInput.open();\n\n      let previewProfile: camera.Profile = {\n        format: camera.CameraFormat.CAMERA_FORMAT_YUV_420_SP,\n        size: {\n          width: this.imageWidth,\n          height: this.imageHeight\n        }\n      };\n      // 创建预览流输出\n      this.previewOutput = this.cameraManager.createPreviewOutput(previewProfile, surfaceId);\n      if (this.previewOutput === undefined) {\n        console.error('Failed to create the preview stream.');\n        return;\n      }\n\n      let photoProfile: camera.Profile = {\n        format: camera.CameraFormat.CAMERA_FORMAT_JPEG,\n        size: {\n          width: this.imageWidth,\n          height: this.imageHeight\n        }\n      };\n      // 创建拍照流输出\n      this.photoOutput = this.cameraManager.createPhotoOutput(photoProfile);\n      if (this.photoOutput === undefined) {\n        console.error('Failed to create the photoOutput.');\n        return;\n      }\n\n      // 创建相机会话，启动会话\n      this.session = this.cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO) as camera.PhotoSession;\n      this.session.beginConfig();\n      this.session.addInput(this.cameraInput);\n      this.session.addOutput(this.previewOutput);\n      this.session.addOutput(this.photoOutput);\n      await this.session.commitConfig();\n      await this.session.start();\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error(`initCamera fail: ${JSON.stringify(err)}`);\n    }\n  }\n\n  // 释放相机资源\n  async releaseCamera(): Promise<void> {\n    console.info('releaseCamera is called');\n    try {\n      await this.previewOutput?.release();\n      await this.photoOutput?.release();\n      await this.session?.release();\n      await this.cameraInput?.close();\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error(`releaseCamera fail: error: ${JSON.stringify(err)}`);\n    } finally {\n      this.previewOutput = undefined;\n      this.photoOutput = undefined;\n      this.cameraManager = undefined;\n      this.session = undefined;\n      this.cameraInput = undefined;\n    }\n    console.info('releaseCamera success');\n  }\n}\n\nexport default new CameraService(); 创建组件，用于显示预览流，在页面相关生命周期中构造ThreadWorker实例，在worker线程中完成相机初始化和释放。 import { worker } from '@kit.ArkTS';\n\n@Entry\n@Component\nstruct Index {\n  private mXComponentController: XComponentController = new XComponentController();\n  private surfaceId: string = '';\n  @State imageWidth: number = 1920;\n  @State imageHeight: number = 1080;\n  // 创建ThreadWorker对象获取worker实例\n  private workerInstance: worker.ThreadWorker = new worker.ThreadWorker('entry/ets/workers/CameraWorker.ets');\n\n  onPageShow(): void {\n    if ('' !== this.surfaceId) {\n      // 通过worker实例向worker线程发送消息初始化相机\n      this.workerInstance.postMessage({\n        type: 'initCamera',\n        context: getContext(this),\n        surfaceId: this.surfaceId,\n      })\n    }\n  }\n\n  onPageHide(): void {\n    // 通过worker实例向worker线程发送消息销毁相机\n    this.workerInstance.postMessage({\n      type: 'releaseCamera',\n    })\n  }\n\n  build() {\n    Column() {\n      Column() {\n        XComponent({\n          id: 'componentId',\n          type: XComponentType.SURFACE,\n          controller: this.mXComponentController\n        })\n          .onLoad(async () => {\n            console.info('onLoad is called');\n            // 初始化XComponent获取预览流surfaceId\n            this.surfaceId = this.mXComponentController.getXComponentSurfaceId();\n            let surfaceRect: SurfaceRect = {\n              surfaceWidth: this.imageHeight,\n              surfaceHeight: this.imageWidth\n            };\n            this.mXComponentController.setXComponentSurfaceRect(surfaceRect);\n            console.info(`onLoad surfaceId: ${this.surfaceId}`);\n            if (!this.workerInstance) {\n              console.error('create stage worker failed');\n              return;\n            }\n            // 宿主线程向worker线程发送初始化相机消息\n            this.workerInstance.postMessage({\n              type: 'initCamera',\n              context: getContext(this), // 将宿主线程的context传给worker线程使用\n              surfaceId: this.surfaceId, // 将surfaceId传给worker线程使用\n            })\n          })// The width and height of the surface are opposite to those of the XComponent.\n          .width(px2vp(this.imageHeight))\n          .height(px2vp(this.imageWidth))\n\n      }.justifyContent(FlexAlign.Center)\n      .height('90%')\n\n      Text('WorkerDemo')\n        .fontSize(36)\n    }\n    .justifyContent(FlexAlign.End)\n    .height('100%')\n    .width('100%')\n  }\n} 
trace对比
不使用worker：
使用woker：
