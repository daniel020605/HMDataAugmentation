错误管理开发指导
场景介绍
当应用的代码存在规范问题或错误时，会在运行中产生异常和错误，如应用未捕获异常、应用生命周期超时等。在错误产生后，应用会异常退出。错误日志通常会保存在用户本地存储上，不方便开发者定位问题。所以，应用开发者可以使用错误管理的接口，在应用退出前，及时将相关错误及日志上报到开发者的服务平台来定位问题。
使用errormanager接口监听异常和错误后，应用不会退出，建议在回调函数执行完后，增加同步退出操作，如果只是为了获取错误日志，建议使用hiappevent。
接口说明
应用错误管理接口由errorManager模块提供，开发者可以通过import引入，详见开发示例。
错误管理接口功能介绍：
当采用callback作为异步回调时，可以在callback中进行下一步处理。当采用Promise对象返回时，可以在Promise对象中类似地处理接口返回值。具体结果码说明见解除注册结果码。
错误监听(ErrorObserver)接口功能介绍：
应用主线程监听(LoopObserver)接口功能介绍：
[h2]解除注册结果码
开发示例
建议在异常回调函数处理的最后，增加同步退出操作，否则可能出现多次异常回调的现象。
import { AbilityConstant, errorManager, UIAbility, Want } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\nimport process from '@ohos.process';\n\nlet registerId = -1;\nlet callback: errorManager.ErrorObserver = {\n    onUnhandledException: (errMsg) => {\n        console.log(errMsg);\n    },\n    onException: (errorObj) => {\n        console.log('onException, name: ', errorObj.name);\n        console.log('onException, message: ', errorObj.message);\n        if (typeof(errorObj.stack) === 'string') {\n            console.log('onException, stack: ', errorObj.stack);\n        }\n        //回调函数执行完，采用同步退出方式，避免多次触发\n        let pro = new process.ProcessManager();\n        pro.exit(0);\n    }\n}\n\nlet abilityWant: Want;\n\nexport default class EntryAbility extends UIAbility {\n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n        console.log(\"[Demo] EntryAbility onCreate\");\n        registerId = errorManager.on(\"error\", callback);\n        abilityWant = want;\n    }\n\n    onDestroy() {\n        console.log(\"[Demo] EntryAbility onDestroy\");\n        errorManager.off(\"error\", registerId, (result) => {\n            console.log(\"[Demo] result \" + result.code + \";\" + result.message);\n        });\n    }\n\n    onWindowStageCreate(windowStage: window.WindowStage) {\n        // Main window is created, set main page for this ability\n        console.log(\"[Demo] EntryAbility onWindowStageCreate\");\n\n        windowStage.loadContent(\"pages/index\", (err, data) => {\n            if (err.code) {\n                console.error('Failed to load the content. Cause:' + JSON.stringify(err));\n                return;\n            }\n            console.info('Succeeded in loading the content. Data: ' + JSON.stringify(data));\n        });\n    }\n\n    onWindowStageDestroy() {\n        // Main window is destroyed, release UI related resources\n        console.log(\"[Demo] EntryAbility onWindowStageDestroy\");\n    }\n\n    onForeground() {\n        // Ability has brought to foreground\n        console.log(\"[Demo] EntryAbility onForeground\");\n    }\n\n    onBackground() {\n        // Ability has back to background\n        console.log(\"[Demo] EntryAbility onBackground\");\n    }\n};
