通过文本生成码图
基本概念
码图生成能力支持将字符串转换为自定义格式的码图。
场景介绍
码图生成能力支持将字符串转换为自定义格式的码图，包含条形码、二维码生成。
可以将字符串转成联系人码图，手机克隆码图，例如将\"HUAWEI\"字符串生成码图使用。
约束与限制
支持十三种码图生成，每种码图对生成参数有不同的要求，码图限制可见下表，具体接口参数限制信息请参见CreateOptions。
生成码类型
参数建议内容
QR Code
支持中文，不超过512字符长度，如果内容过长会导致码复杂，影响识别。
Aztec
支持中文，不超过512字符长度，如果内容过长会导致码复杂，影响识别。
PDF417
支持中文，不超过512字符长度，如果内容过长会导致码复杂，影响识别。
Data Matrix
不超过512字符长度，如果内容过长会导致码复杂，影响识别。
UPC-A
支持11位数字输入，只支持数字，生成包含12位数字的码图，包含最后一位校验数字。
UPC-E
支持7位数字输入，只支持数字，首位需要是0或1，生成包含8位数字的码图，包含最后一位校验数字。
ITF-14
支持80位以内数字输入，并且需要是偶数位，只支持数字，生成包含偶数位数字的码图，如果内容过长会导致码复杂，影响识别。
EAN-8
支持7位数字输入，只支持数字，生成包含8位数字的码图，包含最后一位校验数字。
EAN-13
支持12位数字输入，只支持数字，首位不可以是0，生成包含13位数字的码图，包含最后一位校验数字
Code 39
不超过80字节长度，字符集可以是数字、大小写字母和- . $ / + % * SPACE英文格式符号（请注意：一个小写字母占用2个字节）。
Code 93
不超过80字节长度，字符集可以是数字、大小写字母和- . $ / + % * SPACE英文格式符号（请注意：一个小写字母占用2个字节）。
Code 128
不超过80字节长度，字符集可以是数字、大小写字母和- . $ / + % * SPACE英文格式符号（请注意：一个小写字母占用1个字节）。
Codabar
不超过512字符长度，起始/终止符可以是ABCD中的任一个（特殊情况下，TN*E也会编码成ABCD，推荐使用ABCD）。其他字符可以是数字和- . $ / : +英文格式符号。
生成码参数建议：
 码图颜色和背景建议使用默认颜色和背景：黑色码图、白色背景。如果码图颜色和背景对比度较小会影响识别率。 码图边距建议使用默认边距1，单位：px，取值范围：[1, 10]。 码图大小          生成QR Code、Data Matrix、Aztec类型的码图时，输入的width和height值相同且均大于等于200小于等于4096，单位：px，否则生成的码图过小会影响识别。 生成EAN-8、EAN-13、UPC-A、UPC-E、Codabar、Code 39、Code 93、Code 128、ITF-14、PDF417类型的码图时，建议输入的width和height值比例为2:1，并且width值需大于400，单位：px，否则生成的码图会过小影响识别。  
业务流程
 用户向应用发起生成码请求后，输入需要生成的码的信息，包括码的类型、宽高等。 应用通过调用Scan Kit的createBarcode接口启动码图生成能力。 Scan Kit通过将字符串转换为所需格式的码图并返回给应用。 应用向用户返回生成码结果。 
接口说明
接口返回值有两种返回形式：Callback和Promise回调。下表中为码图生成能力的Callback和Promise形式接口，Callback和Promise只是返回值方式不一样，功能相同。具体API说明详见接口文档。
接口名
接口描述
createBarcode(content: string, options: CreateOptions): Promise<image.PixelMap>
码图生成接口，返回image.PixelMap类型的参数，可以使用Image组件渲染成图片。使用Promise异步回调返回生成的码图。
createBarcode(content: string, options: CreateOptions, callback: AsyncCallback<image.PixelMap>): void
码图生成接口，返回image.PixelMap类型的参数，可以使用Image组件渲染成图片。使用Callback异步回调返回生成的码图。
开发步骤
码图生成根据传参内容直接生成所需码图，需要传入固定参数和可选参数。
以下示例为调用码图生成能力的createBarcode接口实现码图生成。
 导入码图生成接口模块，该模块提供了码图生成的参数和方法，导入方法如下。// 导入码图生成需要的图片模块、错误码模块\nimport { scanCore, generateBarcode } from '@kit.ScanKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit'; 调用码图生成能力的createBarcode接口实现码图生成。        通过Promise方式回调，获取生成的码图。@Entry\n@Component\nstruct Index {\n  @State pixelMap: image.PixelMap | undefined = undefined\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('generateBarcode Promise').onClick(() => {\n        // 以QR码为例，码图生成参数\n        this.pixelMap = undefined;\n        let content: string = 'huawei';\n        let options: generateBarcode.CreateOptions = {\n          scanType: scanCore.ScanType.QR_CODE,\n          height: 400,\n          width: 400\n        }\n        try {\n          // 码图生成接口，成功返回PixelMap格式图片\n          generateBarcode.createBarcode(content, options).then((pixelMap: image.PixelMap) => {\n            this.pixelMap = pixelMap;\n          }).catch((error: BusinessError) => {\n            hilog.error(0x0001, '[generateBarcode]',\n              `Failed to get PixelMap by promise with options. Code: ${error.code}, message: ${error.message}`);\n          })\n        } catch (error) {\n          hilog.error(0x0001, '[generateBarcode]',\n            `Failed to createBarcode by promise with options. Code: ${error.code}, message: ${error.message}`);\n        }\n\n      })\n      // 获取生成码后显示\n      if (this.pixelMap) {\n        Image(this.pixelMap).width(300).height(300).objectFit(ImageFit.Contain)\n      }\n    }\n    .width('100%')\n    .height('100%')\n  }\n} 通过Callback方式回调，获取生成的码图。@Entry\n@Component\nstruct Index {\n  @State pixelMap: image.PixelMap | undefined = undefined\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('generateBarcode Callback').onClick(() => {\n        // 以QR码为例，码图生成参数\n        let content = 'huawei';\n        let options: generateBarcode.CreateOptions = {\n          scanType: scanCore.ScanType.QR_CODE,\n          height: 400,\n          width: 400\n        }\n        try {\n          // 码图生成接口，成功返回PixelMap格式图片\n          generateBarcode.createBarcode(content, options, (error: BusinessError, pixelMap: image.PixelMap) => {\n            if (error) {\n              hilog.error(0x0001, '[generateBarcode]',\n                `Failed to get PixelMap by callback with options. Code: ${error.code}, message: ${error.message}`);\n              return;\n            }\n            this.pixelMap = pixelMap;\n          })\n        } catch (error) {\n          hilog.error(0x0001, '[generateBarcode]',\n            `Failed to createBarcode by callback with options. Code: ${error.code}, message: ${error.message}`);\n        }\n      })\n      // 获取生成码后显示\n      if (this.pixelMap) {\n        Image(this.pixelMap).width(300).height(300).objectFit(ImageFit.Contain)\n      }\n    }\n    .width('100%')\n    .height('100%')\n  }\n}  
模拟器开发
暂不支持模拟器使用，调用会返回错误信息“Emulator is not supported.”
