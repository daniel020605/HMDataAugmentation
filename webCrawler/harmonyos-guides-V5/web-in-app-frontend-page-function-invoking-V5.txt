应用侧调用前端页面函数
应用侧可以通过runJavaScript()和runJavaScriptExt()方法调用前端页面的JavaScript相关函数。
runJavaScript()和runJavaScriptExt()在参数类型上有些差异。runJavaScriptExt()入参类型不仅支持string还支持ArrayBuffer（从文件中获取JavaScript脚本数据），另外可以通过AsyncCallback的方式获取执行结果。
在下面的示例中，点击应用侧的“runJavaScript”按钮时，来触发前端页面的htmlTest()方法。
 前端页面代码。 <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<h1 id=\"text\">这是一个测试信息，默认字体为黑色，调用runJavaScript方法后字体为绿色，调用runJavaScriptCodePassed方法后字体为红色</h1>\n<script>\n    // 调用有参函数时实现。\n    var param = \"param: JavaScript Hello World!\";\n    function htmlTest(param) {\n        document.getElementById('text').style.color = 'green';\n        console.log(param);\n    }\n    // 调用无参函数时实现。\n    function htmlTest() {\n        document.getElementById('text').style.color = 'green';\n    }\n    // Click Me！触发前端页面callArkTS()函数执行JavaScript传递的代码。\n    function callArkTS() {\n        changeColor();\n    }\n</script>\n</body>\n</html> 应用侧代码。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct WebComponent {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n\n  aboutToAppear() {\n    // 配置Web开启调试模式\n    webview.WebviewController.setWebDebuggingAccess(true);\n  }\n\n  build() {\n    Column() {\n      Button('runJavaScript')\n        .onClick(() => {\n          // 前端页面函数无参时，将param删除。\n          this.webviewController.runJavaScript('htmlTest(param)');\n        })\n      Button('runJavaScriptCodePassed')\n        .onClick(() => {\n          // 传递runJavaScript侧代码方法。\n          this.webviewController.runJavaScript(`function changeColor(){document.getElementById('text').style.color = 'red'}`);\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} 
