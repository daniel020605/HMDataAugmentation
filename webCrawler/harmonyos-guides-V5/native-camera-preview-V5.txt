预览(C/C++)
预览是启动相机后看见的画面，通常在拍照和录像前执行。
开发步骤
详细的API说明请参考Camera API参考。
 导入NDK接口，接口中提供了相机相关的属性和方法，导入方法如下。  // 导入NDK接口头文件\n #include \"hilog/log.h\"\n #include \"ohcamera/camera.h\"\n #include \"ohcamera/camera_input.h\"\n #include \"ohcamera/capture_session.h\"\n #include \"ohcamera/photo_output.h\"\n #include \"ohcamera/preview_output.h\"\n #include \"ohcamera/video_output.h\"\n #include \"ohcamera/camera_manager.h\" 在CMake脚本中链接相关动态库。  target_link_libraries(entry PUBLIC libohcamera.so libhilog_ndk.z.so) 获取SurfaceId。 XComponent组件为预览流提供的SurfaceId，而XComponent的能力由UI提供，相关介绍可参考XComponent组件参考。 根据传入的SurfaceId，通过OH_CameraManager_GetSupportedCameraOutputCapability()方法获取当前设备支持的预览能力。通过OH_CameraManager_CreatePreviewOutput()方法创建预览输出流，其中，OH_CameraManager_CreatePreviewOutput()方法中的参数分别是cameraManager指针，previewProfiles数组中的第一项，步骤三中获取的surfaceId，以及返回的previewOutput指针。   NDKCamera::NDKCamera(char *str)\n  {\n    Camera_Manager *cameraManager = nullptr;\n    Camera_Device* cameras = nullptr;\n    Camera_OutputCapability* cameraOutputCapability = nullptr;\n    Camera_PreviewOutput* previewOutput = nullptr;\n    const Camera_Profile* previewProfile = nullptr;\n    uint32_t size = 0;\n    uint32_t cameraDeviceIndex = 0;\n    char* previewSurfaceId = str;\n    Camera_ErrorCode ret = OH_Camera_GetCameraManager(&cameraManager);\n    if (cameraManager == nullptr || ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"OH_Camera_GetCameraManager failed.\");\n    }\n    ret = OH_CameraManager_GetSupportedCameras(cameraManager, &cameras, &size);\n    if (cameras == nullptr || size < 0 || ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameras failed.\");\n    }\n    ret = OH_CameraManager_GetSupportedCameraOutputCapability(cameraManager, &cameras[cameraDeviceIndex],\n                                                                    &cameraOutputCapability);\n    if (cameraOutputCapability == nullptr || ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameraOutputCapability failed.\");\n    }\n    if (cameraOutputCapability->previewProfilesSize < 0) {\n      OH_LOG_ERROR(LOG_APP, \"previewProfilesSize == null\");\n    }\n    previewProfile = cameraOutputCapability->previewProfiles[0];\n\n    ret = OH_CameraManager_CreatePreviewOutput(cameraManager, previewProfile, previewSurfaceId, &previewOutput);\n    if (previewProfile == nullptr || previewOutput == nullptr || ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreatePreviewOutput failed.\");\n    }\n  } 使能。当session完成CommitConfig后通过调用OH_CaptureSession_Start()方法输出预览流，接口调用失败会返回相应错误码，错误码类型参见Camera_ErrorCode。  ret = OH_CaptureSession_Start();\n if (ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Start failed.\");\n } 通过OH_CaptureSession_Stop()方法停止预览流，接口调用失败会返回相应错误码，错误码类型参见Camera_ErrorCode。  ret = OH_CaptureSession_Stop(previewOutput);\n if (ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Stop failed.\");\n } 
状态监听
在相机应用开发过程中，可以随时监听预览输出流状态，包括预览流启动、预览流结束、预览流输出错误。
 通过注册固定的frameStart回调函数获取监听预览启动结果，previewOutput创建成功时即可监听，预览第一次曝光时触发，有该事件返回结果则认为预览流已启动。   ret = OH_PreviewOutput_RegisterCallback(previewOutput, GetPreviewOutputListener());\n  if (ret != CAMERA_OK) {\n      OH_LOG_ERROR(LOG_APP, \"OH_PreviewOutput_RegisterCallback failed.\");\n  }   void PreviewOutputOnFrameStart(Camera_PreviewOutput* previewOutput)\n  {\n      OH_LOG_INFO(LOG_APP, \"PreviewOutputOnFrameStart\");\n  }\n  PreviewOutput_Callbacks* GetPreviewOutputListener(void)\n  {\n      static PreviewOutput_Callbacks previewOutputListener = {\n          .onFrameStart = PreviewOutputOnFrameStart,\n          .onFrameEnd = PreviewOutputOnFrameEnd,\n          .onError = PreviewOutputOnError\n      };\n      return &previewOutputListener;\n  } 通过注册固定的frameEnd回调函数获取监听预览结束结果，previewOutput创建成功时即可监听，预览完成最后一帧时触发，有该事件返回结果则认为预览流已结束。   void PreviewOutputOnFrameEnd(Camera_PreviewOutput* previewOutput, int32_t frameCount)\n  {\n      OH_LOG_INFO(LOG_APP, \"PreviewOutput frameCount = %{public}d\", frameCount);\n  } 通过注册固定的error回调函数获取监听预览输出错误结果，callback返回预览输出接口使用错误时对应的错误码，错误码类型参见Camera_ErrorCode。   void PreviewOutputOnError(Camera_PreviewOutput* previewOutput, Camera_ErrorCode errorCode)\n  {\n      OH_LOG_INFO(LOG_APP, \"PreviewOutput errorCode = %{public}d\", errorCode);\n  } 
