动画衔接
UI界面除了运行动画之外，还承载着与用户进行实时交互的功能。当用户行为根据意图变化发生改变时，UI界面应做到即时响应。例如用户在应用启动过程中，上滑退出，那么启动动画应该立即过渡到退出动画，而不应该等启动动画完成后再退出，从而减少用户等待时间。对于桌面翻页类从跟手到离手触发动画的场景，离手后动画的初始速度应承继手势速度，避免由于速度不接续导致停顿感的产生。针对以上场景，系统已提供动画与动画、手势与动画之间的衔接能力，保证各类场景下动画平稳光滑地过渡的同时，尽可能降低开发难度。
假设对于某一可动画属性，存在正在运行的动画。当UI侧行为改变该属性终点值时，开发者仅需在animateTo动画闭包中改变属性值或者改变animation接口作用的属性值，即可产生动画。系统会自动衔接之前的动画和当前的动画，开发者仅需要关注当前单次动画的实现。
示例如下。通过点击click，红色方块的缩放属性会发生变化。当连续快速点击click时，缩放属性的终点值连续发生变化，当前动画也会平滑过渡到朝着新的缩放属性终点值运动。
import { curves } from '@kit.ArkUI';\n\nclass SetSlt {\n  isAnimation: boolean = true\n\n  set(): void {\n    this.isAnimation = !this.isAnimation;\n  }\n}\n\n@Entry\n@Component\nstruct AnimationToAnimationDemo {\n  // 第一步：声明相关状态变量\n  @State SetAnimation: SetSlt = new SetSlt();\n\n  build() {\n    Column() {\n      Text('ArkUI')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(12)\n        .fontColor(Color.White)\n        .textAlign(TextAlign.Center)\n        .borderRadius(10)\n        .backgroundColor(0xf56c6c)\n        .width(100)\n        .height(100)\n        .scale({\n          // 第二步：将状态变量设置到相关可动画属性接口\n          x: this.SetAnimation.isAnimation ? 2 : 1,\n          y: this.SetAnimation.isAnimation ? 2 : 1\n        })\n        .animation({ curve: curves.springMotion(0.4, 0.8) }) // 第四步：通过隐式动画接口开启隐式动画，动画终点值改变时，系统自动添加衔接动画\n\n      Button('Click')\n        .margin({ top: 200 })\n        .onClick(() => {\n          // 第三步：通过点击事件改变状态变量值，影响可动画属性值\n          this.SetAnimation.set()\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}
手势与动画的衔接
使用滑动、捏合、旋转等手势的场景中，跟手过程中一般会触发属性的改变。离手后，这部分属性往往会继续发生变化，直到到达属性终点值。
离手阶段的属性变化初始速度应与离手前一刻的属性改变速度保持一致。如果离手后属性变化速度从0开始，就好像正在运行的汽车紧急刹车，造成观感上的骤变是用户和开发者都不希望看到的。
针对在TapGesture和动画之间进行衔接的场景（如列表滑动），可以在跟手阶段每一次更改组件属性时，都做成使用跟手弹簧曲线的属性动画。离手时再用离手弹簧曲线产生离手阶段的属性动画。对于采用springMotion曲线的动画，离手阶段动画将自动继承跟手阶段动画的速度，并以跟手动画当前位置为起点，运动到指定的属性终点。
示例代码如下，小球跟手运动。
import { curves } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct SpringMotionDemo {\n  // 第一步：声明相关状态变量\n  @State positionX: number = 100;\n  @State positionY: number = 100;\n  diameter: number = 50;\n\n  build() {\n    Column() {\n      Row() {\n        Circle({ width: this.diameter, height: this.diameter })\n          .fill(Color.Blue)\n          .position({ x: this.positionX, y: this.positionY })// 第二步：将状态变量设置到相关可动画属性接口\n          .onTouch((event?: TouchEvent) => {\n            // 第三步：在跟手过程改变状态变量值，并且采用responsiveSpringMotion动画运动到新的值\n            if (event) {\n              if (event.type === TouchType.Move) {\n                // 跟手过程，使用responsiveSpringMotion曲线\n                this.getUIContext()?.animateTo({ curve: curves.responsiveSpringMotion() }, () => {\n                  // 减去半径，以使球的中心运动到手指位置\n                  this.positionX = event.touches[0].windowX - this.diameter / 2;\n                  this.positionY = event.touches[0].windowY - this.diameter / 2;\n                  console.info(`move, animateTo x:${this.positionX}, y:${this.positionY}`);\n                })\n              } else if (event.type === TouchType.Up) {\n                // 第四步：在离手过程设定状态变量终点值，并且用springMotion动画运动到新的值，springMotion动画将继承跟手阶段的动画速度\n                this.getUIContext()?.animateTo({ curve: curves.springMotion() }, () => {\n                  this.positionX = 100;\n                  this.positionY = 100;\n                  console.info(`touchUp, animateTo x:100, y:100`);\n                })\n              }\n            }\n          })\n      }\n      .width(\"100%\").height(\"80%\")\n      .clip(true) // 如果球超出父组件范围，使球不可见\n      .backgroundColor(Color.Orange)\n\n      Flex({ direction: FlexDirection.Row, alignItems: ItemAlign.Start, justifyContent: FlexAlign.Center }) {\n        Text(\"拖动小球\").fontSize(16)\n      }\n      .width(\"100%\")\n\n      Row() {\n        Text('点击位置: [x: ' + Math.round(this.positionX) + ', y:' + Math.round(this.positionY) + ']').fontSize(16)\n      }\n      .padding(10)\n      .width(\"100%\")\n    }.height('100%').width('100%')\n  }\n}
