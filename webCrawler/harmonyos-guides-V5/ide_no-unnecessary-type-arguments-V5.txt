@typescript-eslint/no-unnecessary-type-arguments
当类型参数和默认值相同时，不允许显式使用。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unnecessary-type-arguments\": \"error\"\n  }\n}
选项
该规则无需配置额外选项。
正例
function f<T = number>(para: T): void {\n  console.info(`${para as number}`);\n}\nf(Number.MAX_VALUE);\nf<string>('hello');\n\nfunction g<T = number, U = string>(para1: T, para2?: U) {\n  if (para2 !== undefined) {\n    console.info(`${para2 as string}`);\n  }\n  console.info(`${para1 as number}`);\n}\ng<string>('para1', 'para2');\ng<number, number>(Number.MAX_VALUE);\n\nclass C<T = number> {\n  public name: T;\n\n  public constructor(name: T) {\n    this.name = name;\n  }\n}\nnew C(Number.MAX_VALUE);\nnew C<string>('hello');
反例
function f<T = number>(para: T): void {\n  console.info(`${para as number}`);\n}\n// 参数类型默认是number，直接使用f()即可\nf<number>(Number.MAX_VALUE);\n\nfunction g<T = number, U = string>(para1: T, para2?: U) {\n  if (para2 !== undefined) {\n    console.info(`${para2 as string}`);\n  }\n  console.info(`${para1 as number}`);\n}\n// 第二个参数类型默认是string，直接使用g<string>()即可\ng<string, string>('hello');\n\nclass C<T = number> {\n  public meth(para: T): void {\n    console.info(`${para as number}`);\n  }\n}\n// 参数类型默认是number，直接使用new C()即可\nnew C<number>();
规则集
plugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
