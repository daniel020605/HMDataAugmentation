实践说明
通过hook以及插件上下文动态配置构建配置(推荐使用)
[h2]修改每个hvigorNode中的build-profile.json5
此处只举例为单个node注册hook并修改build-profile.json5的信息。
例如需要修改根目录下的build-profile.json5的签名信息，则在项目根目录下的hvigorfile.ts中添加如下内容：
import { appTasks, OhosAppContext, OhosPluginId } from '@ohos/hvigor-ohos-plugin';\nimport { hvigor,getNode } from '@ohos/hvigor'\n\n// 获取根节点\nconst rootNode = getNode(__filename);\n// 为根节点添加一个afterNodeEvaluate hook 在hook中修改根目录下的build-profile.json5的内容并使能\nrootNode.afterNodeEvaluate(node => {\n    // 获取app插件的上下文对象\n    const appContext = node.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\n    // 通过上下文对象获取从根目录build-profile.json5文件中读出来的obj对象\n    const buildProfileOpt = appContext.getBuildProfileOpt();\n    // 修改obj对象为想要的，此处举例修改app中的signingConfigs\n    buildProfileOpt['app']['signingConfigs'] = [\n        {\n            \"name\": \"default\",\n            \"type\": \"HarmonyOS\",\n            \"material\": {\n                \"certpath\": \"D:\\\\SigningConfig\\\\debug_hos.cer\",\n                \"storePassword\": \"******\",\n                \"keyAlias\": \"debugKey\",\n                \"keyPassword\": \"******\",\n                \"profile\": \"D:\\\\SigningConfig\\\\debug_hos.p7b\",\n                \"signAlg\": \"SHA256withECDSA\",\n                \"storeFile\": \"D:\\\\SigningConfig\\\\debug_hos.p12\"\n            }\n        }\n    ];\n    // 将obj对象设置回上下文对象以使能到构建的过程与结果中\n    appContext.setBuildProfileOpt(buildProfileOpt);\n})\nexport default {\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\n}
[h2]修改module.json5中的配置信息
可以通过hvigor对象的hook能力快捷为所有的node创建hook，此处先举例为单一的node创建一个hook并修改其中的module.json5的配置信息。
例如此处需要修改entry下的module.json5配置，则在entry下的hvigorfile.ts中添加如下内容：
import { hapTasks, OhosHapContext, OhosPluginId } from '@ohos/hvigor-ohos-plugin';\nimport { getNode } from '@ohos/hvigor'\n\nconst entryNode = getNode(__filename);\n// 为此节点添加一个afterNodeEvaluate hook 在hook中修改module.json5的内容并使能\nentryNode.afterNodeEvaluate(node => {\n    // 获取此节点使用插件的上下文对象 此时为hap插件 获取hap插件上下文对象\n    const hapContext = node.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\n    // 通过上下文对象获取从module.json5文件中读出来的obj对象\n    const moduleJsonOpt = hapContext.getModuleJsonOpt();\n    // 修改obj对象为想要的，此处举例修改module中的deviceTypes\n    moduleJsonOpt['module']['deviceTypes'] = [\"phone\", \"tablet\", \"2in1\", \"car\"];\n    // 将obj对象设置回上下文对象以使能到构建的过程与结果中\n    hapContext.setModuleJsonOpt(moduleJsonOpt);\n})\nexport default {\n    system: hapTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\n}
[h2]修改app.json5中的配置信息
在项目的根目录下的hvigorfile.ts中添加如下代码内容：
import { appTasks, OhosAppContext, OhosPluginId } from '@ohos/hvigor-ohos-plugin';\nimport { hvigor } from '@ohos/hvigor'\n\n// 为根节点添加一个afterNodeEvaluate hook 在hook中修改app.json5的内容并使能\nhvigor.getRootNode().afterNodeEvaluate(rootNode => {\n    // 获取app插件的上下文对象\n    const appContext = rootNode.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\n    // 通过上下文对象获取从app.json5文件中读出来的obj对象\n    const appJsonOpt = appContext.getAppJsonOpt();\n    // 修改obj对象为想要的，此处举例修改app中的versionCode\n    appJsonOpt['app']['versionCode'] = 1000001;\n    // 将obj对象设置回上下文对象以使能到构建的过程与结果中\n    appContext.setAppJsonOpt(appJsonOpt);\n})\nexport default {\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\n    plugins:[]         /* Custom plugin to extend the functionality of Hvigor. */\n}
[h2]修改oh-package.json5中的依赖
// 工程级hvigorfile.ts\nimport { appTasks, OhosAppContext, OhosPluginId, Target } from '@ohos/hvigor-ohos-plugin';\nimport { HvigorNode, HvigorPlugin, TaskInput, TaskOutput } from '@ohos/hvigor';\nexport function customPlugin(): HvigorPlugin {\n    return {\n        pluginId: 'customPlugin',\n        async apply(currentNode: HvigorNode): Promise<void> {\n            const appContext = currentNode.getContext(OhosPluginId.OHOS_APP_PLUGIN) as OhosAppContext;\n            const dependency = appContext.getDependenciesOpt({});  //获取dependency依赖\n            dependency[\"library\"]=\"file:library.har\"\n            console.log(dependency);\n            appContext.setDependenciesOpt(dependency );  //修改dependency依赖\n        }\n    };\n}\nexport default {\n    system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\n}\n\n// 模块级hvigorfile.ts\nimport {hapTasks,OhosHapContext,OhosPluginId,Target} from '@ohos/hvigor-ohos-plugin';\nimport { hvigor, HvigorNode, HvigorPlugin} from '@ohos/hvigor';\nimport * as fs from 'fs';\nexport function customPlugin(options: OnlineSignOptions): HvigorPlugin {\n    return {\n        pluginId: 'customPlugin',\n        context() {\n            return {\n                signConfig: options\n            };\n        },\n        async apply(currentNode: HvigorNode): Promise<void> {\n            const hapContext = currentNode.getContext(OhosPluginId.OHOS_HAP_PLUGIN) as OhosHapContext;\n            const dependency = hapContext.getDependenciesOpt();//获取dependency依赖\n            dependency[\"library\"]=\"file:library.har\"\n            hapContext.setDependenciesOpt(dependency);}\n        }\n    };\nexport default {\n    system: hapTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\n    plugins:[customPlugin()]         /* Custom plugin to extend the functionality of Hvigor. */\n}
通过overrides动态配置签名材料和版本信息(不推荐使用)
通过在hvigorfile.ts里使用函数方法，动态配置签名材料和版本号、版本名等信息：
//工程级别hvigorfile.ts\nimport { appTasks } from '@ohos/hvigor-ohos-plugin';\nexport default {\n  system: appTasks,  /* Built-in plugin of Hvigor. It cannot be modified. */\n  plugins: [],       /* Custom plugin to extend the functionality of Hvigor. */\n  config: {\n    ohos: {\n      overrides:{\n        signingConfig: getSigningConfig(), //签名配置对象 \n        appOpt: {\n          versionCode: getVersionCode(),\n          versionName: getVersionName(),\n        } //app.json中的内容 \n      }\n    }\n  }\n}\n\nfunction getSigningConfig() {\n  return {\n    type: \"HarmonyOS\",\n    material: {\n      certpath: \"D:\\\\SigningConfig\\\\debug_hos.cer\",\n      storePassword: \"******\",\n      keyAlias: \"debugKey\",\n      keyPassword: \"******\",\n      profile: \"D:\\\\SigningConfig\\\\debug_hos.p7b\",\n      signAlg: \"SHA256withECDSA\",\n      storeFile: \"D:\\\\SigningConfig\\\\debug_hos.p12\"\n    }\n  }\n}\n\nfunction getVersionCode() {\n  return 100000+new Date().getFullYear();\n}\n\nfunction getVersionName() {\n  return `1.0.0${new Date().getTime()}`;\n}
