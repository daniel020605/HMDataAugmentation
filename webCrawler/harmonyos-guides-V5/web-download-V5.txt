使用Web组件的下载能力
Web组件的下载功能要求应用通过调用WebDownloadItem.start来指定下载文件的保存路径。值得注意的是，WebDownloadItem.start并非启动下载，下载过程实际上在用户点击页面链接时即已开始。WebDownloadItem.start的作用是将已经下载到临时文件的部分移动到指定目标路径，后续未完成的下载的内容将直接保存到指定目标路径，临时目录位于/data/storage/el2/base/cache/web/Temp/。如果决定取消当前下载，应调用WebDownloadItem.cancel，此时临时文件将被删除。
如果不希望在WebDownloadItem.start之前将文件下载到临时目录，可以通过WebDownloadItem.cancel中断下载，后续可通过WebDownloadManager.resumeDownload恢复中断的下载。
监听页面触发的下载
通过setDownloadDelegate()向Web组件注册一个DownloadDelegate来监听页面触发的下载任务。资源由Web组件来下载，Web组件会通过DownloadDelegate将下载的进度通知给应用。
下面的示例中，在应用的rawfile中创建index.html以及download.html。应用启动后会创建一个Web组件并加载index.html，点击setDownloadDelegate按钮向Web组件注册一个DownloadDelegate，点击页面里的下载按钮的时候会触发一个下载任务，在DownloadDelegate中可以监听到下载的进度。
// xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  delegate: webview.WebDownloadDelegate = new webview.WebDownloadDelegate();\n\n  build() {\n    Column() {\n      Button('setDownloadDelegate')\n        .onClick(() => {\n          try {\n            this.delegate.onBeforeDownload((webDownloadItem: webview.WebDownloadItem) => {\n              console.log(\"will start a download.\");\n              // 传入一个下载路径，并开始下载。\n              // 如果传入一个不存在的路径，则会下载到默认/data/storage/el2/base/cache/web/目录。\n              webDownloadItem.start(\"/data/storage/el2/base/cache/web/\" + webDownloadItem.getSuggestedFileName());\n            })\n            this.delegate.onDownloadUpdated((webDownloadItem: webview.WebDownloadItem) => {\n              // 下载任务的唯一标识。\n              console.log(\"download update guid: \" + webDownloadItem.getGuid());\n              // 下载的进度。\n              console.log(\"download update guid: \" + webDownloadItem.getPercentComplete());\n              // 当前的下载速度。\n              console.log(\"download update speed: \" + webDownloadItem.getCurrentSpeed())\n            })\n            this.delegate.onDownloadFailed((webDownloadItem: webview.WebDownloadItem) => {\n              console.log(\"download failed guid: \" + webDownloadItem.getGuid());\n              // 下载任务失败的错误码。\n              console.log(\"download failed guid: \" + webDownloadItem.getLastErrorCode());\n            })\n            this.delegate.onDownloadFinish((webDownloadItem: webview.WebDownloadItem) => {\n              console.log(\"download finish guid: \" + webDownloadItem.getGuid());\n            })\n            this.controller.setDownloadDelegate(this.delegate);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.controller })\n    }\n  }\n}
加载的html文件。
<!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n// 点击视频右下方菜单的下载按钮会触发下载任务。\n<video controls=\"controls\" width=\"800px\" height=\"580px\"\n       src=\"http://vjs.zencdn.net/v/oceans.mp4\"\n       type=\"video/mp4\">\n</video>\n<a href='data:text/html,%3Ch1%3EHello%2C%20World%21%3C%2Fh1%3E' download='download.html'>下载download.html</a>\n</body>\n</html>
待下载的html文件。
<!-- download.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<h1>download test</h1>\n</body>\n</html>
使用Web组件发起一个下载任务
使用startDownload()接口发起一个下载。
Web组件发起的下载会根据当前显示的url以及Web组件默认的Referrer Policy来计算referrer。
在下面的示例中，先点击setDownloadDelegate按钮向Web注册一个监听类，然后点击startDownload主动发起了一个下载，
该下载任务也会通过设置的DownloadDelegate来通知app下载的进度。
// xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  delegate: webview.WebDownloadDelegate = new webview.WebDownloadDelegate();\n\n  build() {\n    Column() {\n      Button('setDownloadDelegate')\n        .onClick(() => {\n          try {\n            this.delegate.onBeforeDownload((webDownloadItem: webview.WebDownloadItem) => {\n              console.log(\"will start a download.\");\n              // 传入一个下载路径，并开始下载。\n              webDownloadItem.start(\"/data/storage/el2/base/cache/web/\" + webDownloadItem.getSuggestedFileName());\n            })\n            this.delegate.onDownloadUpdated((webDownloadItem: webview.WebDownloadItem) => {\n              console.log(\"download update guid: \" + webDownloadItem.getGuid());\n            })\n            this.delegate.onDownloadFailed((webDownloadItem: webview.WebDownloadItem) => {\n              console.log(\"download failed guid: \" + webDownloadItem.getGuid());\n            })\n            this.delegate.onDownloadFinish((webDownloadItem: webview.WebDownloadItem) => {\n              console.log(\"download finish guid: \" + webDownloadItem.getGuid());\n            })\n            this.controller.setDownloadDelegate(this.delegate);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('startDownload')\n        .onClick(() => {\n          try {\n            // 这里指定下载地址为 https://www.example.com/，Web组件会发起一个下载任务将该页面下载下来。\n            // 开发者需要替换为自己想要下载的内容的地址。\n            this.controller.startDownload('https://www.example.com/');\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n}
