不依赖UI组件的全局自定义弹出框 (openCustomDialog)（推荐）
由于CustomDialogController在使用上存在诸多限制，不支持动态创建也不支持动态刷新，在相对较复杂的应用场景中推荐使用UIContext中获取到的PromptAction对象提供的openCustomDialog接口来实现自定义弹出框。
弹出框（openCustomDialog）存在两种入参方式创建自定义弹出框：
 openCustomDialog（传参为ComponentContent形式）：通过ComponentContent封装内容可以与UI界面解耦，调用更加灵活，可以满足开发者的封装诉求。拥有更强的灵活性，弹出框样式是完全自定义的，且在弹出框打开之后可以使用updateCustomDialog方法动态更新弹出框的一些参数。 openCustomDialog（传builder的形式）：相对于ComponentContent，builder必须要与上下文做绑定，与UI存在一定耦合。此方法有用默认的弹出框样式，适合于开发者想要实现与系统弹窗默认风格一致的效果。 
本文介绍通过入参形式为ComponentContent创建自定义弹出框，传builder形式的弹出框使用方法可参考openCustomDialog。
弹出框（openCustomDialog）可以通过配置isModal来实现模态和非模态弹窗。isModal为true时，弹出框为模态弹窗。isModal为false时，弹出框为非模态弹窗。
生命周期
弹出框提供了生命周期函数用于通知用户该弹出框的生命周期。生命周期的触发时序依次为：onWillAppear -> onDidAppear -> onWillDisappear -> onDidDisappear。
自定义弹出框的打开与关闭
详细变量定义请参考完整示例。
 创建ComponentContent。 ComponentContent用于定义自定义弹出框的内容。其中，wrapBuilder(buildText)封装自定义组件，new Params(this.message)是自定义组件的入参，可以缺省，也可以传入基础数据类型。 private contentNode: ComponentContent<Object> = new ComponentContent(this.ctx, wrapBuilder(buildText), new Params(this.message)); 打开自定义弹出框。 通过调用openCustomDialog接口打开的弹出框默认为customStyle为true的弹出框，即弹出框的内容样式完全按照contentNode自定义样式显示。 PromptActionClass.ctx.getPromptAction().openCustomDialog(PromptActionClass.contentNode, PromptActionClass.options)\n  .then(() => {\n    console.info('OpenCustomDialog complete.')\n  })\n  .catch((error: BusinessError) => {\n    let message = (error as BusinessError).message;\n    let code = (error as BusinessError).code;\n    console.error(`OpenCustomDialog args error code is ${code}, message is ${message}`);\n  }) 关闭自定义弹出框。 由于closeCustomDialog接口需要传入待关闭弹出框对应的ComponentContent。因此，如果需要在弹出框中设置关闭方法，则可参考完整示例封装静态方法来实现。 关闭弹出框之后若需要释放对应的ComponentContent，则需要调用ComponentContent的dispose方法。 PromptActionClass.ctx.getPromptAction().closeCustomDialog(PromptActionClass.contentNode)\n  .then(() => {\n    console.info('CloseCustomDialog complete.')\n    if (this.contentNode !== null) {\n         this.contentNode.dispose();   // 释放contentNode\n     }\n  })\n  .catch((error: BusinessError) => {\n    let message = (error as BusinessError).message;\n    let code = (error as BusinessError).code;\n    console.error(`CloseCustomDialog args error code is ${code}, message is ${message}`);\n  }) 
更新自定义弹出框的内容
ComponentContent与BuilderNode有相同的使用限制，不支持自定义组件使用@Reusable、@Link、@Provide、@Consume等装饰器，来同步弹出框弹出的页面与ComponentContent中自定义组件的状态。因此，若需要更新弹出框中自定义组件的内容可以通过ComponentContent提供的update方法来实现。
this.contentNode.update(new Params('update'))
更新自定义弹出框的属性
通过updateCustomDialog可以动态更新弹出框的属性。目前支持的属性包括alignment、offset、autoCancel、maskColor。
需要注意的是，更新属性时，未设置的属性会恢复为默认值。例如，初始设置{ alignment: DialogAlignment.Top, offset: { dx: 0, dy: 50 } }，更新时设置{ alignment: DialogAlignment.Bottom }，则初始设置的offset: { dx: 0, dy: 50 }不会保留，会恢复为默认值。
PromptActionClass.ctx.getPromptAction().updateCustomDialog(PromptActionClass.contentNode, options)\n  .then(() => {\n    console.info('UpdateCustomDialog complete.')\n  })\n  .catch((error: BusinessError) => {\n    let message = (error as BusinessError).message;\n    let code = (error as BusinessError).code;\n    console.error(`UpdateCustomDialog args error code is ${code}, message is ${message}`);\n  })
完整示例
// PromptActionClass.ets\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { ComponentContent, promptAction } from '@kit.ArkUI';\nimport { UIContext } from '@ohos.arkui.UIContext';\n\nexport class PromptActionClass {\n  static ctx: UIContext;\n  static contentNode: ComponentContent<Object>;\n  static options: promptAction.BaseDialogOptions;\n\n  static setContext(context: UIContext) {\n    PromptActionClass.ctx = context;\n  }\n\n  static setContentNode(node: ComponentContent<Object>) {\n    PromptActionClass.contentNode = node;\n  }\n\n  static setOptions(options: promptAction.BaseDialogOptions) {\n    PromptActionClass.options = options;\n  }\n\n  static openDialog() {\n    if (PromptActionClass.contentNode !== null) {\n      PromptActionClass.ctx.getPromptAction().openCustomDialog(PromptActionClass.contentNode, PromptActionClass.options)\n        .then(() => {\n          console.info('OpenCustomDialog complete.')\n        })\n        .catch((error: BusinessError) => {\n          let message = (error as BusinessError).message;\n          let code = (error as BusinessError).code;\n          console.error(`OpenCustomDialog args error code is ${code}, message is ${message}`);\n        })\n    }\n  }\n\n  static closeDialog() {\n    if (PromptActionClass.contentNode !== null) {\n      PromptActionClass.ctx.getPromptAction().closeCustomDialog(PromptActionClass.contentNode)\n        .then(() => {\n          console.info('CloseCustomDialog complete.')\n        })\n        .catch((error: BusinessError) => {\n          let message = (error as BusinessError).message;\n          let code = (error as BusinessError).code;\n          console.error(`CloseCustomDialog args error code is ${code}, message is ${message}`);\n        })\n    }\n  }\n\n  static updateDialog(options: promptAction.BaseDialogOptions) {\n    if (PromptActionClass.contentNode !== null) {\n      PromptActionClass.ctx.getPromptAction().updateCustomDialog(PromptActionClass.contentNode, options)\n        .then(() => {\n          console.info('UpdateCustomDialog complete.')\n        })\n        .catch((error: BusinessError) => {\n          let message = (error as BusinessError).message;\n          let code = (error as BusinessError).code;\n          console.error(`UpdateCustomDialog args error code is ${code}, message is ${message}`);\n        })\n    }\n  }\n}
// Index.ets\nimport { ComponentContent } from '@kit.ArkUI';\nimport { PromptActionClass } from './PromptActionClass';\n\nclass Params {\n  text: string = \"\"\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\n@Builder\nfunction buildText(params: Params) {\n  Column() {\n    Text(params.text)\n      .fontSize(50)\n      .fontWeight(FontWeight.Bold)\n      .margin({ bottom: 36 })\n    Button('Close')\n      .onClick(() => {\n        PromptActionClass.closeDialog()\n      })\n  }.backgroundColor('#FFF0F0F0')\n}\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = \"hello\"\n  private ctx: UIContext = this.getUIContext();\n  private contentNode: ComponentContent<Object> =\n    new ComponentContent(this.ctx, wrapBuilder(buildText), new Params(this.message));\n\n  aboutToAppear(): void {\n    PromptActionClass.setContext(this.ctx);\n    PromptActionClass.setContentNode(this.contentNode);\n    PromptActionClass.setOptions({ alignment: DialogAlignment.Top, offset: { dx: 0, dy: 50 } });\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Button(\"open dialog and update options\")\n          .margin({ top: 50 })\n          .onClick(() => {\n            PromptActionClass.openDialog()\n\n            setTimeout(() => {\n              PromptActionClass.updateDialog({\n                alignment: DialogAlignment.Bottom,\n                offset: { dx: 0, dy: -50 }\n              })\n            }, 1500)\n          })\n        Button(\"open dialog and update content\")\n          .margin({ top: 50 })\n          .onClick(() => {\n            PromptActionClass.openDialog()\n\n            setTimeout(() => {\n              this.contentNode.update(new Params('update'))\n            }, 1500)\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .height('100%')\n  }\n}
