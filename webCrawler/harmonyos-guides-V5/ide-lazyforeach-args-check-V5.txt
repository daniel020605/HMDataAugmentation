@performance/lazyforeach-args-check（已下线）
建议在LazyForEach参数中设置keyGenerator。该规则已于5.0.3.500版本下线。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/lazyforeach-args-check\": \"warn\",\n  }\n}
选项
该规则无需配置额外选项。
正例
class BasicDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n  private originDataArray: string[] = [];\n  public totalCount(): number {\n    return 0;\n  }\n  public getData(index: number): string {\n    return this.originDataArray[index];\n  }\n  registerDataChangeListener(listener: DataChangeListener): void {\n    if (this.listeners.indexOf(listener) < 0) {\n      console.info('add listener');\n      this.listeners.push(listener);\n    }\n  }\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      console.info('remove listener');\n      this.listeners.splice(pos, 1);\n    }\n  }\n  notifyDataReload(): void {\n    this.listeners.forEach(listener => {\n      listener.onDataReloaded();\n    })\n  }\n  notifyDataAdd(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataAdd(index);\n    })\n  }\n  notifyDataChange(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataChange(index);\n    })\n  }\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataDelete(index);\n    })\n  }\n}\nclass MyDataSource extends BasicDataSource {\n  private dataArray: string[] = [];\n  public totalCount(): number {\n    return this.dataArray.length;\n  }\n  public getData(index: number): string {\n    return this.dataArray[index];\n  }\n  public addData(index: number, data: string): void {\n    this.dataArray.splice(index, 0, data);\n    this.notifyDataAdd(index);\n  }\n  public pushData(data: string): void {\n    this.dataArray.push(data);\n    this.notifyDataAdd(this.dataArray.length - 1);\n  }\n}\n@Entry\n@Component\nstruct MyComponent {\n  private data: MyDataSource = new MyDataSource();\n  aboutToAppear() {\n    for (let i = 0; i <= 20; i++) {\n      this.data.pushData(`Hello ${i}`)\n    }\n  }\n  build() {\n    Column({ space: 5 }) {\n      Grid() {\n        LazyForEach(this.data, (item: string) => {\n          GridItem() {\n            // 使用可复用自定义组件\n            // 业务逻辑\n          }\n        }, (item: string) => item)\n      }\n      .cachedCount(2) // 设置GridItem的缓存数量\n      .columnsTemplate('1fr 1fr 1fr')\n      .columnsGap(10)\n      .rowsGap(10)\n      .margin(10)\n      .height(500)\n      .backgroundColor(0xFAEEE0)\n    }\n  }\n}\n
反例
class BasicDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n  private originDataArray: string[] = [];\n  public totalCount(): number {\n    return 0;\n  }\n  public getData(index: number): string {\n    return this.originDataArray[index];\n  }\n  registerDataChangeListener(listener: DataChangeListener): void {\n    if (this.listeners.indexOf(listener) < 0) {\n      console.info('add listener');\n      this.listeners.push(listener);\n    }\n  }\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      console.info('remove listener');\n      this.listeners.splice(pos, 1);\n    }\n  }\n  notifyDataReload(): void {\n    this.listeners.forEach(listener => {\n      listener.onDataReloaded();\n    })\n  }\n  notifyDataAdd(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataAdd(index);\n    })\n  }\n  notifyDataChange(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataChange(index);\n    })\n  }\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataDelete(index);\n    })\n  }\n}\nclass MyDataSource extends BasicDataSource {\n  private dataArray: string[] = [];\n  public totalCount(): number {\n    return this.dataArray.length;\n  }\n  public getData(index: number): string {\n    return this.dataArray[index];\n  }\n  public addData(index: number, data: string): void {\n    this.dataArray.splice(index, 0, data);\n    this.notifyDataAdd(index);\n  }\n  public pushData(data: string): void {\n    this.dataArray.push(data);\n    this.notifyDataAdd(this.dataArray.length - 1);\n  }\n}\n@Entry\n@Component\nstruct MyComponent {\n  private data: MyDataSource = new MyDataSource();\n  aboutToAppear() {\n    for (let i = 0; i <= 20; i++) {\n      this.data.pushData(`Hello ${i}`)\n    }\n  }\n  build() {\n    Column({ space: 5 }) {\n      Grid() {\n        LazyForEach(this.data, (item: string) => {\n          GridItem() {\n            // 使用可复用自定义组件\n            // 业务逻辑\n          }\n        })\n      }\n      .cachedCount(2) // 设置GridItem的缓存数量\n      .columnsTemplate('1fr 1fr 1fr')\n      .columnsGap(10)\n      .rowsGap(10)\n      .margin(10)\n      .height(500)\n      .backgroundColor(0xFAEEE0)\n    }\n  }\n}\n
规则集
plugin:@performance/recommended
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
