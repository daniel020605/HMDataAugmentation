使用Image完成图片接收器
图像接收类，用于获取组件surface id，接收最新的图片和读取下一张图片，以及释放ImageReceiver实例。
开发步骤
[h2]添加依赖
在进行应用开发之前，开发者需要打开native工程的src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加libace_napi.z.so、libimage_ndk.z.so、libimage_receiver_ndk.z.so、libnative_image.so以及日志依赖libhilog_ndk.z.so。
target_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so libimage_ndk.z.so libimage_receiver_ndk.z.so libnative_image.so)
[h2]添加接口映射
打开src/main/cpp/hello.cpp文件，在Init函数中添加接口映射如下：
EXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"createFromReceiver\", nullptr, createFromReceiver, nullptr, nullptr, nullptr, napi_default, nullptr },\n    };\n\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END
[h2]添加权限申请
此处通过camera图片获取输入数据，需要申请权限ohos.permission.CAMERA，申请方式请参考向用户申请授权。
[h2]JS侧调用
 打开src\\main\\cpp\\types\\libentry\\index.d.ts（其中libentry根据工程名生成），导入如下引用文件: import { image } from '@kit.ImageKit';\n\nexport const createFromReceiver: (a: image.ImageReceiver) => image.Image; 打开src\\main\\ets\\pages\\index.ets，导入\"libentry.so（根据工程名生成）\"，调用Native接口，传入JS的资源对象。示例如下: import testNapi from 'libentry.so'\nimport { image } from '@kit.ImageKit';\nimport { abilityAccessCtrl } from '@kit.AbilityKit';\nimport { camera } from '@kit.CameraKit';\n\n@Entry\n@Component\nstruct Index {\n  private receiver: image.ImageReceiver | undefined = undefined;\n  func (){\n     let context = getContext()\n     abilityAccessCtrl.createAtManager().requestPermissionsFromUser(context,['ohos.permission.CAMERA']).then(async () => {\n        let cameraManager = await camera.getCameraManager(context);\n        // 获取支持的相机设备对象\n        let cameraDevices: Array<camera.CameraDevice> = cameraManager.getSupportedCameras();\n        if (cameraDevices.length <= 0) {\n        return;\n        }\n        // 获取对应相机设备的profiles\n        let profiles: camera.CameraOutputCapability = cameraManager.getSupportedOutputCapability(cameraDevices[0])\n        let previewProfiles: Array<camera.Profile> = profiles.previewProfiles;\n        if (previewProfiles.length <= 0) {\n        return;\n        }\n        let profileObj = previewProfiles[0];\n        this.receiver = image.createImageReceiver(profileObj.size.width, profileObj.size.height, image.ImageFormat.JPEG, 8);\n        let receiverSurfaceId: string = await this.receiver.getReceivingSurfaceId();\n        // 创建预览流输出对象\n        let previewOutput: camera.PreviewOutput = cameraManager.createPreviewOutput(profileObj,receiverSurfaceId);\n        let cameraInput : camera.CameraInput = cameraManager.createCameraInput(cameraDevices[0]);\n        // 打开相机\n        await cameraInput.open();\n        // 会话流程\n        let captureSession : camera.CaptureSession = cameraManager.createCaptureSession();\n        // 配置会话\n        captureSession.beginConfig();\n        // 把cameraInput加入到会话\n        captureSession.addInput(cameraInput);\n        // 把预览流加入到会话\n        captureSession.addOutput(previewOutput);\n        // 提交配置信息\n        await captureSession.commitConfig();\n        // 会话开始\n        await captureSession.start();\n\n        this.receiver.on('imageArrival', () => {\n           let img : image.Image = testNapi.createFromReceiver(this.receiver);\n           img.release();\n        })\n\n     });\n  }\n\n  build() {\n     Row() {\n        Column() {\n        Button(\"start\")\n           .width(100)\n           .height(100)\n           .onClick(() => {\n              console.log(\"button click in\");\n              if (this.receiver == undefined) {\n                 this.func();\n              }\n           })\n        }\n        .width('100%')\n     }\n     .height('100%')\n  }\n} 
[h2]Native接口调用
具体接口说明请参考API文档。
在hello.cpp文件中获取JS的资源对象，并转为Native的资源对象，即可调用Native接口，调用方式示例代码如下：
添加引用文件
   #include <multimedia/image_framework/image_mdk.h>\n   #include <multimedia/image_framework/image_receiver_mdk.h>\n   #include <malloc.h>\n   #include <hilog/log.h>\n\n   static napi_value createFromReceiver(napi_env env, napi_callback_info info)\n   {\n      size_t argc = 1;\n      napi_value args[2] = {nullptr};\n      napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n      napi_valuetype valuetype0;\n      napi_typeof(env, args[0], &valuetype0);\n      napi_ref reference;\n      napi_create_reference(env, args[0], 1 ,&reference);\n      napi_value imgReceiver_js;\n      napi_get_reference_value(env, reference, &imgReceiver_js);\n      \n      ImageReceiverNative * imgReceiver_c = OH_Image_Receiver_InitImageReceiverNative(env, imgReceiver_js);\n\n      int32_t capacity;\n      OH_Image_Receiver_GetCapacity(imgReceiver_c, &capacity);\n      OH_LOG_Print(LOG_APP, LOG_INFO, 0xFF00, \"[receiver]\", \"capacity: %{public}d\", capacity);\n      int32_t format;\n      OH_Image_Receiver_GetFormat(imgReceiver_c, &format);\n      OH_LOG_Print(LOG_APP, LOG_INFO, 0xFF00, \"[receiver]\", \"format: %{public}d\", format);\n      char * surfaceId = static_cast<char *>(malloc(sizeof(char)));\n      OH_Image_Receiver_GetReceivingSurfaceId(imgReceiver_c, surfaceId, sizeof(char));\n      OH_LOG_Print(LOG_APP, LOG_INFO, 0xFF00, \"[receiver]\", \"surfaceId: %{public}c\", surfaceId[0]);\n      OhosImageSize size;\n      OH_Image_Receiver_GetSize(imgReceiver_c, &size);\n      OH_LOG_Print(LOG_APP, LOG_INFO, 0xFF00, \"[receiver]\", \"OH_Image_Receiver_GetSize  width: %{public}d, height:%{public}d\", size.width, size.height);\n      \n      int32_t ret;\n      napi_value nextImage;\n      // 或调用 OH_Image_Receiver_ReadNextImage(imgReceiver_c, &nextImage);\n      ret = OH_Image_Receiver_ReadLatestImage(imgReceiver_c, &nextImage);\n      \n      ImageNative * nextImage_native = OH_Image_InitImageNative(env, nextImage);\n\n      OhosImageSize imageSize;\n      OH_Image_Size(nextImage_native, &imageSize);\n      OH_LOG_Print(LOG_APP, LOG_INFO, 0xFF00, \"[receiver]\", \"OH_Image_Size  width: %{public}d, height:%{public}d\", imageSize.width, imageSize.height);\n\n      OhosImageComponent imgComponent;\n      ret = OH_Image_GetComponent(nextImage_native, 4, &imgComponent); // 4=jpeg\n      \n      uint8_t *img_buffer = imgComponent.byteBuffer;\n      \n      ret = OH_Image_Release(nextImage_native);\n      ret = OH_Image_Receiver_Release(imgReceiver_c);\n      return nextImage;\n   }
