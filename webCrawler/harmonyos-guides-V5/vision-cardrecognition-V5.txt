卡证识别
场景介绍
卡证识别控件提供身份证（目前仅支持中国大陆二代身份证，且不包含民汉双文身份证）、行驶证、驾驶证、护照、银行卡等证件的结构化识别服务，满足卡证的自动分类功能，系统可自动判断所属卡证类型并返回结构化信息和卡证图片信息。
对于需要填充卡证信息的场景，如身份证、银行卡信息等，可使用卡证识别控件读取OCR（Optical Character Recognition）信息，将结果信息返回后进行填充。支持单独识别正面、反面，或同时进行双面识别。
使用该控件会创建弹窗，并以全模态形式展示。因此，该控件被拉起或退出时均会触发接入页面的生命周期变化，拉起时会触发页面的onPageHide，退出时则触发页面的onPageShow。
约束与限制
该能力当前不支持模拟器。
开发步骤
将卡证识别控件相关的类添加至工程。//其中CardRecognitionConfig,CardContentConfig,BankCardConfig从API12开始支持\nimport { CardRecognition, CallbackParam, CardType, CardSide, CardRecognitionConfig, ShootingMode, CardContentConfig, BankCardConfig } from \"@kit.VisionKit\"; 配置页面的布局，选择需要识别的卡证类型和需要识别的卡证页面，配置对应设置项，在回调中获取结果返回值。以下分别为身份证、银行卡、护照、驾驶证和行驶证的示例代码。import { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'CardRecognition'\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      //身份证\n      CardRecognition({\n        supportType: CardType.CARD_ID,\n        // 身份证可双面识别\n        cardSide: CardSide.DEFAULT,\n        cardRecognitionConfig: {\n          defaultShootingMode: ShootingMode.MANUAL,\n          isPhotoSelectionSupported: true\n        },\n        callback: ((params: CallbackParam) => {\n          hilog.info(0x0001, TAG, `params code: ${params.code}`)\n          hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\n          hilog.info(0x0001, TAG, `params cardInfo front: ${JSON.stringify(params.cardInfo?.front)}`)\n          hilog.info(0x0001, TAG, `params cardInfo back: ${JSON.stringify(params.cardInfo?.back)}`)\n        })\n      })\n    }\n    .height('100%')\n    .width('100%')\n  }\n}   import { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'CardRecognition'\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 银行卡\n      CardRecognition({\n        supportType: CardType.CARD_BANK,\n        // 银行卡为单面识别\n        cardSide: CardSide.FRONT,\n        cardRecognitionConfig: {\n          defaultShootingMode: ShootingMode.MANUAL,\n          isPhotoSelectionSupported: true,\n          cardContentConfig: { bankCard: { isBankNumberDialogShown: true} }\n        },\n        callback: ((params: CallbackParam) => {\n          hilog.info(0x0001, TAG, `params code: ${params.code}`)\n          hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\n          hilog.info(0x0001, TAG, `params cardInfo: ${JSON.stringify(params.cardInfo?.main)}`)\n        })})\n    }\n    .height('100%')\n    .width('100%')\n  }\n}  import { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'CardRecognition'\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 护照\n      CardRecognition({\n        supportType: CardType.CARD_PASSPORT,\n        // 护照为单面识别\n        cardSide: CardSide.FRONT,\n        cardRecognitionConfig: {\n          defaultShootingMode: ShootingMode.MANUAL,\n          isPhotoSelectionSupported: true\n        },\n        callback: ((params: CallbackParam) => {\n          hilog.info(0x0001, TAG, `params code: ${params.code}`)\n          hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\n          hilog.info(0x0001, TAG, `params cardInfo: ${JSON.stringify(params.cardInfo?.main)}`)\n        })})\n    }\n    .height('100%')\n    .width('100%')\n  }\n} import { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'CardRecognition'\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 驾驶证\n      CardRecognition({\n        supportType: CardType.CARD_DRIVER_LICENSE,\n        // 驾驶证可双面识别\n        cardSide: CardSide.DEFAULT,\n        cardRecognitionConfig: {\n          defaultShootingMode: ShootingMode.MANUAL,\n          isPhotoSelectionSupported: true\n        },\n        callback: ((params: CallbackParam) => {\n          hilog.info(0x0001, TAG, `params code: ${params.code}`)\n          hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\n          hilog.info(0x0001, TAG, `params cardInfo front: ${JSON.stringify(params.cardInfo?.front)}`)\n          hilog.info(0x0001, TAG, `params cardInfo back: ${JSON.stringify(params.cardInfo?.back)}`)\n        })\n      })\n    }\n    .height('100%')\n    .width('100%')\n  }\n}  import { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'CardRecognition'\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      // 行驶证\n      CardRecognition({\n        supportType: CardType.CARD_VEHICLE_LICENSE,\n        // 行驶证可双面识别\n        cardSide: CardSide.DEFAULT,\n        cardRecognitionConfig: {\n          defaultShootingMode: ShootingMode.MANUAL,\n          isPhotoSelectionSupported: true\n        },\n        callback: ((params: CallbackParam) => {\n          hilog.info(0x0001, TAG, `params code: ${params.code}`)\n          hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\n          hilog.info(0x0001, TAG, `params cardInfo front: ${JSON.stringify(params.cardInfo?.front)}`)\n          hilog.info(0x0001, TAG, `params cardInfo back: ${JSON.stringify(params.cardInfo?.back)}`)\n        })\n      })\n    }\n    .height('100%')\n    .width('100%')\n  }\n}  
开发实例
// 卡证识别开发实例分两页实现，一页为卡证识别入口页，一页为卡证识别实现页\n// 卡证识别入口页，需引入卡证识别实现页，以下文实例为例，实现页文件名为CardDemoPage\nimport { CardDemoPage } from './CardDemoPage'\n\n@Entry\n@Component\nstruct MainPage {\n  @Provide('pathStack') pathStack: NavPathStack = new NavPathStack()\n\n  @Builder\n  PageMap(name: string) {\n    if (name === 'cardRecognition') {\n      CardDemoPage()\n    }\n  }\n\n  //卡证识别入口按钮\n  build() {\n    Navigation(this.pathStack) {\n      Button('CardRecognition', { stateEffect: true, type: ButtonType.Capsule })\n        .width('50%')\n        .height(40)\n        .onClick(() => {\n          this.pathStack.pushPath({ name: 'cardRecognition' })\n        })\n    }.title('卡证识别控件demo').navDestination(this.PageMap)\n    .mode(NavigationMode.Stack)\n  }\n}
//卡证识别实现页，文件名为CardDemoPage，需被引入至入口页\nimport { CardRecognition, CallbackParam, CardType, CardSide, ShootingMode } from \"@kit.VisionKit\"\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'CardRecognitionPage'\n\n//卡证识别页，用于加载uiExtensionAbility\n@Entry\n@Component\nexport struct CardDemoPage {\n  @State cardDataSource: Record<string, string>[] = []\n  @Consume('pathStack') pathStack: NavPathStack\n\n  build() {\n    NavDestination() {\n      Stack({ alignContent: Alignment.Top }) {\n        Stack() {\n          this.cardDataShowBuilder()\n        }\n        .width('80%')\n        .height('80%')\n\n        CardRecognition({\n          // 此处选择身份证类型作为示例\n          supportType: CardType.CARD_ID,\n          cardSide: CardSide.DEFAULT,\n          cardRecognitionConfig: {\n            defaultShootingMode: ShootingMode.MANUAL,\n            isPhotoSelectionSupported: true\n          },\n          callback: ((params: CallbackParam) => {\n            hilog.info(0x0001, TAG, `params code: ${params.code}`)\n            if (params.code === -1) {\n              this.pathStack.pop()\n            }\n            hilog.info(0x0001, TAG, `params cardType: ${params.cardType}`)\n            if (params.cardInfo?.front !== undefined) {\n              this.cardDataSource.push(params.cardInfo?.front)\n            }\n\n            if (params.cardInfo?.back !== undefined) {\n              this.cardDataSource.push(params.cardInfo?.back)\n            }\n\n            if (params.cardInfo?.main !== undefined) {\n              this.cardDataSource.push(params.cardInfo?.main)\n            }\n            hilog.info(0x0001, TAG, `params cardInfo front: ${JSON.stringify(params.cardInfo?.front)}`)\n            hilog.info(0x0001, TAG, `params cardInfo back: ${JSON.stringify(params.cardInfo?.back)}`)\n          })\n        })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .width('100%')\n    .height('100%')\n    .hideTitleBar(true)\n  }\n\n  @Builder\n  cardDataShowBuilder() {\n    List() {\n      ForEach(this.cardDataSource, (cardData: Record<string, string>) => {\n        ListItem() {\n          Column() {\n            Image(cardData.cardImageUri)\n              .objectFit(ImageFit.Contain)\n              .width(100)\n              .height(100)\n\n            Text(JSON.stringify(cardData))\n              .width('100%')\n              .fontSize(12)\n          }\n        }\n      })\n    }\n    .listDirection(Axis.Vertical)\n    .alignListItem(ListItemAlign.Center)\n    .margin({\n      top: 50\n    })\n    .width('100%')\n    .height('100%')\n  }\n}
