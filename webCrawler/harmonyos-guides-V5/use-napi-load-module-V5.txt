使用Node-API接口在主线程中进行模块加载
场景介绍
Node-API中的napi_load_module接口的功能是在主线程中进行模块的加载，当模块加载出来之后，可以使用函数napi_get_property获取模块导出的变量，也可以使用napi_get_named_property获取模块导出的函数，目前支持以下场景：
加载系统模块，例如@ohos.hilog加载ets目录下文件中的模块
函数说明
napi_status napi_load_module(napi_env env,\n                             const char* path,\n                             napi_value* result);
使用限制
禁止在非主线程当中使用该接口。禁止在Init函数中使用该接口。禁止在线程安全函数的回调函数当中进行文件路径的加载。
建议使用napi_load_module_with_info来进行模块加载，该接口支持了更多的场景。
加载系统模块使用示例
使用napi_load_module导出系统模块hilog，并调用info函数。
static napi_value loadModule(napi_env env, napi_callback_info info) {\n    // 1. 使用napi_load_module加载模块@ohos.hilog\n    napi_value result;\n    napi_status status = napi_load_module(env, \"@ohos.hilog\", &result);\n    \n    // 2. 使用napi_get_named_property获取info函数\n    napi_value infoFn;\n    napi_get_named_property(env, result, \"info\", &infoFn);\n    \n    napi_value tag;\n    std::string formatStr = \"test\";\n    napi_create_string_utf8(env, formatStr.c_str(), formatStr.size(), &tag);\n    \n    napi_value outputString;\n    std::string str = \"Hello HarmonyOS\";\n    napi_create_string_utf8(env, str.c_str(), str.size(), &outputString);\n    \n    napi_value flag;\n    napi_create_int32(env, 0, &flag);\n\n    napi_value args[3] = {flag, tag, outputString};\n    // 3. 使用napi_call_function调用info函数\n    napi_call_function(env, result, infoFn, 3, args, nullptr);\n    return result;\n}
加载ArkTS文件中的模块使用示例
当加载文件中的模块时，如以下ArkTS代码：
//./src/main/ets/Test.ets\nlet value = 123;\nfunction test() {\n  console.log(\"Hello HarmonyOS\");\n}\nexport {value, test};
需要在工程的build-profile.json5文件中进行以下配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"sources\": [\n                    \"./src/main/ets/Test.ets\"\n                ]\n            }\n        }\n    }\n} 使用napi_load_module加载Test文件，调用函数test以及获取变量value。 static napi_value loadModule(napi_env env, napi_callback_info info) {\n    napi_value result;\n    // 1. 使用napi_load_module加载Test文件中的模块\n    napi_status status = napi_load_module(env, \"ets/Test\", &result);\n\n    napi_value testFn;\n    // 2. 使用napi_get_named_property获取test函数\n    napi_get_named_property(env, result, \"test\", &testFn);\n    // 3. 使用napi_call_function调用函数test\n    napi_call_function(env, result, testFn, 0, nullptr, nullptr);\n\n    napi_value value;\n    napi_value key;\n    std::string keyStr = \"value\";\n    napi_create_string_utf8(env, keyStr.c_str(), keyStr.size(), &key);\n    // 4. 使用napi_get_property获取变量value\n    napi_get_property(env, result, key, &value);\n    return result;\n} 
