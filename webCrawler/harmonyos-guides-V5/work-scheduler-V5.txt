延迟任务
概述
[h2]功能介绍
应用退至后台后，需要执行实时性要求不高的任务，例如有网络时不定期主动获取邮件等，可以使用延迟任务。当应用满足设定条件（包括网络类型、充电类型、存储状态、电池状态、定时状态等）时，将任务添加到执行队列，系统会根据内存、功耗、设备温度、用户使用习惯等统一调度拉起应用。
[h2]运行原理
图1 延迟任务实现原理
应用调用延迟任务接口添加、删除、查询延迟任务，延迟任务管理模块会根据任务设置的条件（通过WorkInfo参数设置，包括网络类型、充电类型、存储状态等）和系统状态（包括内存、功耗、设备温度、用户使用习惯等）统一决策调度时机。
当满足调度条件或调度结束时，系统会回调应用WorkSchedulerExtensionAbility中 onWorkStart() 或 onWorkStop() 的方法，同时会为应用单独创建一个Extension扩展进程用以承载WorkSchedulerExtensionAbility，并给WorkSchedulerExtensionAbility一定的活动周期，开发者可以在对应回调方法中实现自己的任务逻辑。
[h2]约束与限制
 数量限制：一个应用同一时刻最多申请10个延迟任务。 执行频率限制：系统会根据应用的活跃分组，对延迟任务做分级管控，限制延迟任务调度的执行频率。 表1 应用活跃程度分组     应用活跃分组 延迟任务执行频率    活跃分组 最小间隔2小时   经常使用分组 最小间隔4小时   常用使用 最小间隔24小时   极少使用分组 最小间隔48小时   受限使用分组 禁止   从未使用分组 禁止    超时：WorkSchedulerExtensionAbility单次回调最长运行2分钟。如果超时不取消，系统会终止对应的Extension进程。 调度延迟：系统会根据内存、功耗、设备温度、用户使用习惯等统一调度，如当系统内存资源不足或温度达到一定挡位时，系统将延迟调度该任务。 WorkSchedulerExtensionAbility接口调用限制：为实现对WorkSchedulerExtensionAbility能力的管控，在WorkSchedulerExtensionAbility中限制以下接口的调用： @ohos.resourceschedule.backgroundTaskManager (后台任务管理) @ohos.backgroundTaskManager (后台任务管理) @ohos.multimedia.camera (相机管理) @ohos.multimedia.audio (音频管理) @ohos.multimedia.media (媒体服务) 
接口说明
表2 延迟任务主要接口
以下是延迟任务开发使用的相关接口，更多接口及使用方式请见延迟任务调度文档。
表3 WorkInfo参数
是否充电。
- true表示充电触发延迟回调，false表示不充电触发延迟回调。
是否循环任务。
- true表示循环任务，false表示非循环任务。
注册的延迟任务是否可保存在系统中。
- true表示可保存，即系统重启后，任务可恢复。false表示不可保存。
是否要求设备进入空闲状态。
- true表示需要，false表示不需要。
WorkInfo参数用于设置应用条件，参数设置时需遵循以下规则：
 workId、bundleName、abilityName为必填项，bundleName需为本应用包名。 携带参数信息仅支持number、string、boolean三种类型。 至少设置一个满足的条件，包括网络类型、充电类型、存储状态、电池状态、定时状态等。 对于重复任务，任务执行间隔至少2小时。设置重复任务时间间隔时，须同时设置是否循环或循环次数中的一个。 
表4 延迟任务回调接口
以下是延迟任务回调开发使用的相关接口，更多接口及使用方式请见延迟任务调度回调文档。
开发步骤
延迟任务调度开发步骤分为两步：实现延迟任务调度扩展能力、实现延迟任务调度。
 延迟任务调度扩展能力：实现WorkSchedulerExtensionAbility开始和结束的回调接口。 延迟任务调度：调用延迟任务接口，实现延迟任务申请、取消等功能。 
[h2]实现延迟任务回调拓展能力
 新建工程目录。 在工程entry Module对应的ets目录(./entry/src/main/ets)下，新建目录及ArkTS文件，例如新建一个目录并命名为WorkSchedulerExtension。在WorkSchedulerExtension目录下，新建一个ArkTS文件并命名为WorkSchedulerExtension.ets，用以实现延迟任务回调接口。 导入模块。 import { WorkSchedulerExtensionAbility, workScheduler } from '@kit.BackgroundTasksKit'; 实现WorkSchedulerExtension生命周期接口。 export default class MyWorkSchedulerExtensionAbility extends WorkSchedulerExtensionAbility {\n  // 延迟任务开始回调\n  onWorkStart(workInfo: workScheduler.WorkInfo) {\n    console.info(`onWorkStart, workInfo = ${JSON.stringify(workInfo)}`);\n    // 打印 parameters中的参数，如：参数key1\n    // console.info(`work info parameters: ${JSON.parse(workInfo.parameters?.toString()).key1}`)\n  }\n\n  // 延迟任务结束回调\n  onWorkStop(workInfo: workScheduler.WorkInfo) {\n    console.info(`onWorkStop, workInfo is ${JSON.stringify(workInfo)}`);\n  }\n} 在module.json5配置文件中注册WorkSchedulerExtensionAbility，并设置如下标签：  type标签设置为“workScheduler”。 srcEntry标签设置为当前ExtensionAbility组件所对应的代码路径。  {\n  \"module\": {\n      \"extensionAbilities\": [\n        {\n          \"name\": \"MyWorkSchedulerExtensionAbility\",\n          \"srcEntry\": \"./ets/WorkSchedulerExtension/WorkSchedulerExtension.ets\",\n          \"type\": \"workScheduler\"\n        }\n      ]\n  }\n} 
[h2]实现延迟任务调度
 导入模块。 import { workScheduler } from '@kit.BackgroundTasksKit';\nimport { BusinessError } from '@kit.BasicServicesKit'; 申请延迟任务。 // 创建workinfo\nconst workInfo: workScheduler.WorkInfo = {\n  workId: 1,\n  networkType: workScheduler.NetworkType.NETWORK_TYPE_WIFI,\n  bundleName: 'com.example.application',\n  abilityName: 'MyWorkSchedulerExtensionAbility'\n}\n\ntry {\n  workScheduler.startWork(workInfo);\n  console.info(`startWork success`);\n} catch (error) {\n  console.error(`startWork failed. code is ${(error as BusinessError).code} message is ${(error as BusinessError).message}`);\n} 取消延迟任务。 // 创建workinfo\nconst workInfo: workScheduler.WorkInfo = {\n  workId: 1,\n  networkType: workScheduler.NetworkType.NETWORK_TYPE_WIFI,\n  bundleName: 'com.example.application', \n  abilityName: 'MyWorkSchedulerExtensionAbility' \n}\n\ntry {\n  workScheduler.stopWork(workInfo);\n  console.info(`stopWork success`);\n} catch (error) {\n  console.error(`stopWork failed. code is ${(error as BusinessError).code} message is ${(error as BusinessError).message}`);\n} 
