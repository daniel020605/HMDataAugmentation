固定样式弹出框
固定样式弹出框采用固定的布局格式，这使得开发者无需关心具体的显示布局细节，只需输入所需显示的文本内容，从而简化了使用流程，提升了便捷性。
使用约束
 弹出框的弹出依赖UI的执行上下文，不可在UI上下文不明确的地方使用，具体约束参见UIContext说明。 可以通过调用UIContext或getUIContext，在非UI页面或某些异步回调中使用本文中的接口。CalendarPickerDialog当前不支持此操作。 操作菜单 (showActionMenu)、对话框 (showDialog)需先使用UIContext中的getPromptAction()方法获取到PromptAction对象，再通过该对象调用对应方法。 列表选择弹出框 (ActionSheet)、警告弹出框 (AlertDialog)、选择器弹出框 (PickerDialog)中除CalendarPickerDialog都需先使用ohos.window中的getUIContext()方法获取UIContext实例，再通过此实例调用对应方法。或者可以通过自定义组件内置方法getUIContext()获取。 
操作菜单 (showActionMenu)、对话框 (showDialog)、列表选择弹出框 (ActionSheet)、警告弹出框 (AlertDialog)可以设置isModal为false变成非模态弹窗。
操作菜单 (showActionMenu)
操作菜单通过UIContext中的getPromptAction方法获取到PromptAction对象，再通过该对象调用showActionMenu接口实现，支持在回调或开发者自定义类中使用。
创建并显示操作菜单后，菜单的响应结果会异步返回选中按钮在buttons数组中的索引。
import { PromptAction } from '@kit.ArkUI';\n\nlet uiContext = this.getUIContext();\nlet promptAction: PromptAction = uiContext.getPromptAction();\ntry {\n  promptAction.showActionMenu({\n    title: 'showActionMenu Title Info',\n    buttons: [\n      {\n        text: 'item1',\n        color: '#666666'\n      },\n      {\n        text: 'item2',\n        color: '#000000'\n      },\n    ]\n  })\n    .then(data => {\n      console.info('showActionMenu success, click button: ' + data.index);\n    })\n    .catch((err: Error) => {\n      console.error('showActionMenu error: ' + err);\n    })\n} catch (error) {\n}
对话框 (showDialog)
对话框通过UIContext中的getPromptAction方法获取到PromptAction对象，再通过该对象调用showDialog接口实现，支持在回调或开发者自定义类中使用。
创建并显示对话框，对话框响应后异步返回选中按钮在buttons数组中的索引。
// xxx.ets\nimport { PromptAction } from '@kit.ArkUI';\n\nlet uiContext = this.getUIContext();\nlet promptAction: PromptAction = uiContext.getPromptAction();\ntry {\n  promptAction.showDialog({\n    title: 'showDialog Title Info',\n    message: 'Message Info',\n    buttons: [\n      {\n        text: 'button1',\n        color: '#000000'\n      },\n      {\n        text: 'button2',\n        color: '#000000'\n      }\n    ]\n  }, (err, data) => {\n    if (err) {\n      console.error('showDialog err: ' + err);\n      return;\n    }\n    console.info('showDialog success callback, click button: ' + data.index);\n  });\n} catch (error) {\n}
选择器弹窗 (PickerDialog)
选择器弹窗通常用于在用户进行某些操作（如点击按钮）时显示特定的信息或选项。
[h2]生命周期
弹窗提供了生命周期函数用于通知用户该弹窗的生命周期。
生命周期的触发顺序可看各组件API参考。
[h2]日历选择器弹窗 (CalendarPickerDialog)
日历选择器弹窗提供日历视图，包含年、月和星期信息，通过CalendarPickerDialog接口实现。开发者可调用show函数，定义并弹出日历选择器弹窗。
通过配置 acceptButtonStyle、cancelButtonStyle可以实现自定义按钮样式。
// xxx.ets\n@Entry\n@Component\nstruct CalendarPickerDialogExample {\n  private selectedDate: Date = new Date('2024-04-23')\n\n  build() {\n    Column() {\n      Button(\"Show CalendarPicker Dialog\")\n        .margin(20)\n        .onClick(() => {\n          console.info(\"CalendarDialog.show\")\n          CalendarPickerDialog.show({\n            selected: this.selectedDate,\n            acceptButtonStyle: {\n              fontColor: '#2787d9',\n              fontSize: '16fp',\n              backgroundColor: '#f7f7f7',\n              borderRadius: 10\n            },\n            cancelButtonStyle: {\n              fontColor: Color.Red,\n              fontSize: '16fp',\n              backgroundColor: '#f7f7f7',\n              borderRadius: 10\n            },\n            onAccept: (date: Date)=>{\n              // 当弹出框再次弹出时显示选中的是上一次确定的日期\n              this.selectedDate = date\n            }\n          })\n        })\n    }.width('100%')\n  }\n}
[h2]日期滑动选择器弹窗 (DatePickerDialog)
开发者可以利用指定的日期范围，创建日期滑动选择器弹窗，将日期信息清晰地展示在弹出的窗口上。
日期滑动选择器弹窗通过UIContext中的showDatePickerDialog接口实现。
弹窗中配置lunarSwitch、showTime为true时，展示切换农历的开关以及时间，当checkbox被选中时，显示农历。当按下确定按钮时，弹窗会通过onDateAccept返回目前所选中的日期。如需弹窗再次弹出时显示选中的是上一次确定的日期，就要在回调中重新给selectTime进行赋值。
@Entry\n@Component\nstruct DatePickerDialogExample {\n  @State selectTime: Date = new Date('2023-12-25T08:30:00');\n\n  build() {\n    Column() {\n      Button('showDatePickerDialog')\n        .margin(30)\n        .onClick(() => {\n          this.getUIContext().showDatePickerDialog({\n            start: new Date(\"2000-1-1\"),\n            end: new Date(\"2100-12-31\"),\n            selected: this.selectTime,\n            lunarSwitch: true,\n            showTime: true,\n            onDateAccept: (value: Date) => {\n              this.selectTime = value\n              console.info(\"DatePickerDialog:onAccept()\" + JSON.stringify(value))\n            },\n          })\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}
该示例通过配置disappearTextStyle、textStyle、selectedTextStyle、acceptButtonStyle、cancelButtonStyle实现了自定义文本以及按钮样式。
@Entry\n@Component\nstruct DatePickerDialogExample {\n  @State selectTime: Date = new Date('2023-12-25T08:30:00');\n\n  build() {\n    Column() {\n      Button('showDatePickerDialog')\n        .margin(30)\n        .onClick(() => {\n          this.getUIContext().showDatePickerDialog({\n            start: new Date(\"2000-1-1\"),\n            end: new Date(\"2100-12-31\"),\n            selected: this.selectTime,\n            textStyle: { color: '#2787d9', font: { size: '14fp', weight: FontWeight.Normal } },\n            selectedTextStyle: { color: '#004aaf', font: { size: '18fp', weight: FontWeight.Regular } },\n            acceptButtonStyle: {\n              fontColor: '#2787d9',\n              fontSize: '16fp',\n              backgroundColor: '#f7f7f7',\n              borderRadius: 10\n            },\n            cancelButtonStyle: {\n              fontColor: Color.Red,\n              fontSize: '16fp',\n              backgroundColor: '#f7f7f7',\n              borderRadius: 10\n            }\n          })\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}
[h2]时间滑动选择器弹窗 (TimePickerDialog)
开发者可根据24小时的时间区间，创建时间滑动选择器弹窗，将时间信息清晰地展示在弹出的窗口上。
时间滑动选择器弹窗通过UIContext中的showTimePickerDialog接口实现。
该示例通过配置disappearTextStyle、textStyle、selectedTextStyle、acceptButtonStyle、cancelButtonStyle实现了自定义文本以及按钮样式。
// xxx.ets\n\n@Entry\n@Component\nstruct TimePickerDialogExample {\n  @State selectTime: Date = new Date('2023-12-25T08:30:00');\n\n  build() {\n    Column() {\n      Button('showTimePickerDialog')\n        .margin(30)\n        .onClick(() => {\n          this.getUIContext().showTimePickerDialog({\n            selected: this.selectTime,\n            textStyle: { color: '#2787d9', font: { size: '14fp', weight: FontWeight.Normal } },\n            selectedTextStyle: { color: '#004aaf', font: { size: '18fp', weight: FontWeight.Regular } },\n            acceptButtonStyle: {\n              fontColor: '#2787d9',\n              fontSize: '16fp',\n              backgroundColor: '#f7f7f7',\n              borderRadius: 10\n            },\n            cancelButtonStyle: {\n              fontColor: Color.Red,\n              fontSize: '16fp',\n              backgroundColor: '#f7f7f7',\n              borderRadius: 10\n            }\n          })\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}
[h2]文本滑动选择器弹窗 (TextPickerDialog)
开发者可根据指定的选择范围，创建文本滑动选择器弹窗，将文本信息清晰地展示在弹出的窗口上。
文本滑动选择器弹窗通过UIContext中的showTextPickerDialog接口实现。
该示例通过设置range的参数类型为TextCascadePickerRangeContent[]类型实现3列文本选择器弹窗。当按下确定按钮时，弹窗会通过onAccept返回目前所选中文本和索引值。如需弹窗再次弹出时显示选中的是上一次确定的文本，就要在回调中重新给select进行赋值。
@Entry\n@Component\nstruct TextPickerDialogExample {\n  private fruits: TextCascadePickerRangeContent[] = [\n    {\n      text: '辽宁省',\n      children: [{ text: '沈阳市', children: [{ text: '沈河区' }, { text: '和平区' }, { text: '浑南区' }] },\n        { text: '大连市', children: [{ text: '中山区' }, { text: '金州区' }, { text: '长海县' }] }]\n    },\n    {\n      text: '吉林省',\n      children: [{ text: '长春市', children: [{ text: '南关区' }, { text: '宽城区' }, { text: '朝阳区' }] },\n        { text: '四平市', children: [{ text: '铁西区' }, { text: '铁东区' }, { text: '梨树县' }] }]\n    },\n    {\n      text: '黑龙江省',\n      children: [{ text: '哈尔滨市', children: [{ text: '道里区' }, { text: '道外区' }, { text: '南岗区' }] },\n        { text: '牡丹江市', children: [{ text: '东安区' }, { text: '西安区' }, { text: '爱民区' }] }]\n    }\n  ]\n  private select : number  = 0;\n  build() {\n    Column() {\n      Button('showTextPickerDialog')\n        .margin(30)\n        .onClick(() => {\n          this.getUIContext().showTextPickerDialog({\n            range: this.fruits,\n            selected: this.select,\n            onAccept: (value: TextPickerResult) => {\n              this.select = value.index as number\n            }\n          })\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}
列表选择弹窗 (ActionSheet)
列表选择器弹窗适用于呈现多个操作选项，尤其当界面中仅需展示操作列表而无其他内容时。
列表选择器弹窗通过UIContext中的showActionSheet接口实现。
该示例通过配置width、height、transition等接口定义了弹窗的样式以及弹出动效。
@Entry\n@Component\nstruct showActionSheetExample {\n  build() {\n    Column() {\n      Button('showActionSheet')\n        .margin(30)\n        .onClick(() => {\n          this.getUIContext().showActionSheet({\n            title: 'ActionSheet title',\n            message: 'message',\n            autoCancel: false,\n            width: 300,\n            height: 300,\n            cornerRadius: 20,\n            borderWidth: 1,\n            borderStyle: BorderStyle.Solid,\n            borderColor: Color.Blue,\n            backgroundColor: Color.White,\n            transition: TransitionEffect.asymmetric(TransitionEffect.OPACITY\n              .animation({ duration: 3000, curve: Curve.Sharp })\n              .combine(TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })),\n              TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth })\n                .combine(TransitionEffect.scale({ x: 0.5, y: 0.5 }).animation({ duration: 100, curve: Curve.Smooth }))),\n            confirm: {\n              value: 'Confirm button',\n              action: () => {\n                console.info('Get Alert Dialog handled')\n              }\n            },\n            alignment: DialogAlignment.Center,\n            sheets: [\n              {\n                title: 'apples',\n                action: () => {\n                }\n              },\n              {\n                title: 'bananas',\n                action: () => {\n                }\n              },\n              {\n                title: 'pears',\n                action: () => {\n                  console.log('pears')\n                }\n              }\n            ]\n          })\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}
警告弹窗 (AlertDialog)
需要向用户提问或得到用户的许可时，可使用警告弹窗。
 警告弹窗用来提示重要信息，但会中断当前任务，尽量提供必要的信息和有用的操作。 避免仅使用警告弹窗提供信息，用户不喜欢被信息丰富但不可操作的警告打断。 
警告弹窗通过UIContext中的showAlertDialog接口实现。
该示例通过配置width、height、transition等接口定义了多个按钮弹窗的样式以及弹出动效。
@Entry\n@Component\nstruct showAlertDialogExample {\n  build() {\n    Column() {\n      Button('showAlertDialog')\n        .margin(30)\n        .onClick(() => {\n          this.getUIContext().showAlertDialog(\n            {\n              title: 'title',\n              message: 'text',\n              autoCancel: true,\n              alignment: DialogAlignment.Center,\n              offset: { dx: 0, dy: -20 },\n              gridCount: 3,\n              transition: TransitionEffect.asymmetric(TransitionEffect.OPACITY\n                .animation({ duration: 3000, curve: Curve.Sharp })\n                .combine(TransitionEffect.scale({ x: 1.5, y: 1.5 }).animation({ duration: 3000, curve: Curve.Sharp })),\n                TransitionEffect.OPACITY.animation({ duration: 100, curve: Curve.Smooth })\n                  .combine(TransitionEffect.scale({ x: 0.5, y: 0.5 })\n                    .animation({ duration: 100, curve: Curve.Smooth }))),\n              buttons: [{\n                value: 'cancel',\n                action: () => {\n                  console.info('Callback when the first button is clicked')\n                }\n              },\n                {\n                  enabled: true,\n                  defaultFocus: true,\n                  style: DialogButtonStyle.HIGHLIGHT,\n                  value: 'ok',\n                  action: () => {\n                    console.info('Callback when the second button is clicked')\n                  }\n                }],\n            }\n          )\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}
