显示地图
场景介绍
本章节将向您介绍如何使用地图组件MapComponent和MapComponentController呈现地图，效果如下图所示。
 MapComponent是地图组件，用于在您的页面中放置地图。 MapComponentController是地图组件的主要功能入口类，用来操作地图，与地图有关的所有方法从此处接入。它所承载的工作包括：地图类型切换（如标准地图、空地图）、改变地图状态（中心点坐标和缩放级别）、添加点标记（Marker）、绘制几何图形(如MapPolyline、MapPolygon、MapCircle)、监听各类事件等。 
接口说明
显示地图功能主要由MapComponent提供，更多接口及使用方法请参见接口文档。
接口
接口描述
MapComponent(mapOptions: mapCommon.MapOptions, mapCallback: AsyncCallback<map.MapComponentController>)
地图组件。
开发步骤
[h2]地图显示
 导入Map Kit相关模块。import { MapComponent, mapCommon, map } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit'; 新建地图初始化参数mapOptions，设置地图中心点坐标及层级。通过callback回调的方式获取MapComponentController对象，用来操作地图。 调用MapComponent组件，传入mapOptions和callback参数，初始化地图。 @Entry\n@Component\nstruct HuaweiMapDemo {\n  private TAG = \"HuaweiMapDemo\";\n  private mapOptions?: mapCommon.MapOptions;\n  private callback?: AsyncCallback<map.MapComponentController>;\n  private mapController?: map.MapComponentController;\n  private mapEventManager?: map.MapEventManager;\n\n  aboutToAppear(): void {\n    // 地图初始化参数，设置地图中心点坐标及层级\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 39.9,\n          longitude: 116.4\n        },\n        zoom: 10\n      }\n    };\n\n    // 地图初始化的回调\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        // 获取地图的控制器类，用来操作地图\n        this.mapController = mapController;\n        this.mapEventManager = this.mapController.getEventManager();\n        let callback = () => {\n          console.info(this.TAG, `on-mapLoad`);\n        }\n        this.mapEventManager.on(\"mapLoad\", callback);\n      }\n    };\n  }\n\n  // 页面每次显示时触发一次，包括路由过程、应用进入前台等场景，仅@Entry装饰的自定义组件生效\n  onPageShow(): void {\n    // 将地图切换到前台\n    if (this.mapController) {\n      this.mapController.show();\n    }\n  }\n\n  // 页面每次隐藏时触发一次，包括路由过程、应用进入后台等场景，仅@Entry装饰的自定义组件生效\n  onPageHide(): void {\n    // 将地图切换到后台\n    if (this.mapController) {\n      this.mapController.hide();\n    }\n  }\n\n  build() {\n    Stack() {\n      // 调用MapComponent组件初始化地图\n      MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback }).width('100%').height('100%');\n    }.height('100%')\n  }\n} 运行您刚完成的工程就可以在您的APP中看到地图了，运行后的效果如下图所示。如果没有成功加载地图，请参见地图不显示。  
[h2]设置地图属性
MapOptions包含以下属性。
属性
描述
mapType
地图类型，默认值：MapType.STANDARD。
position
地图相机位置。
bounds
地图展示框。
minZoom
地图最小图层，有效范围[2, 20]，默认值：2。
maxZoom
地图最大图层，有效范围[2, 20]，默认值：20。
rotateGesturesEnabled
是否支持旋转手势，默认值：true。
scrollGesturesEnabled
是否支持滑动手势，默认值：true。
zoomGesturesEnabled
是否支持缩放手势，默认值：true。
tiltGesturesEnabled
是否支持倾斜手势，默认值：true。
zoomControlsEnabled
是否展示缩放控件，默认值：true。
myLocationControlsEnabled
是否展示我的位置按钮，默认值：false。
compassControlsEnabled
是否展示指南针控件，默认值：true。
scaleControlsEnabled
是否展示比例尺，默认值：false。
alwaysShowScaleEnabled
是否始终显示比例尺，默认值：false。
padding
设置地图和边界的距离。
styleId
自定义样式ID。
dayNightMode
日间夜间模式，默认值：DayNightMode.DAY（日间模式）。
 设置mapType，切换地图类型章节中有详细讲解。 设置myLocationControlsEnabled，展示我的位置按钮。在mapOptions中设置myLocationControlsEnabled属性为true，可展示我的位置按钮，显示效果如下图所示。         也可通过调用MapComponentController对象的方法展示我的位置按钮，详情见显示我的位置章节。        this.mapOptions = {\n  position: {\n    target: {\n      latitude: 39.9,\n      longitude: 116.4\n    },\n    zoom: 10\n  },\n  myLocationControlsEnabled: true\n};   展示比例尺。在mapOptions中设置scaleControlsEnabled属性为true，可展示比例尺，显示效果如下图所示。 this.mapOptions = {\n  position: {\n    target: {\n      latitude: 39.9,\n      longitude: 116.4\n    },\n    zoom: 10\n  },\n  scaleControlsEnabled: true\n};  
[h2]开启3D建筑图层
this.mapController.setBuildingEnabled(true);
显示效果如下：
[h2]地图前后台切换
您可以通过MapComponentController对象来控制地图页面前后台切换的生命周期。应用触发前后台切换时，可以在Page生命周期里调用show/hide，以便申请/释放资源。
地图切换至前台：
// 页面每次显示时触发一次，包括路由过程、应用进入前台等场景，仅@Entry装饰的自定义组件生效\nonPageShow(): void {\n  // 建议页面切换到前台，调用地图组件的show方法\n  if (this.mapController) {\n    this.mapController.show();\n  }\n}
地图切换至后台：
// 页面每次隐藏时触发一次，包括路由过程、应用进入后台等场景，仅@Entry装饰的自定义组件生效\nonPageHide(): void {\n  // 建议页面切换到后台，调用地图组件的hide方法\n  if (this.mapController) {\n    this.mapController.hide();\n  }\n}
[h2]深色模式
Map Kit提供2种方式设置地图的夜间模式：初始化地图时和创建地图后。
方式一：初始化地图时
this.mapOptions = {\n  position: {\n    target: {\n      latitude: 39.9,\n      longitude: 116.4\n    },\n    zoom: 10\n  },\n  myLocationControlsEnabled: true,\n  // 设置地图为夜间模式\n  dayNightMode: mapCommon.DayNightMode.NIGHT\n};
方式二：创建地图后
// 设置地图为自动模式\nthis.mapController.setDayNightMode(mapCommon.DayNightMode.AUTO);
