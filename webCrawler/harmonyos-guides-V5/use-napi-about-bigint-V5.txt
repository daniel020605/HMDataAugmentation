使用Node-API接口操作bigint类型值
简介
BigInt是ArkTS中用于表示任意精度整数的数据类型，它能够处理比Number类型更大范围的整数值。通过Node-API提供的接口，可以在Node-API模块中创建、获取和操作BigInt类型值，从而实现与BigInt相关的功能扩展。
基本概念
在使用Node-API接口操作BigInt类型值时，需要理解以下基本概念：
BigInt类型： BigInt是ArkTS中的一种数据类型，用于表示任意精度的整数。与Number类型不同，BigInt类型可以精确表示非常大的整数，而不会丢失精度或溢出。BigInt创建： 使用Node-API提供的接口，可以通过传递C的int64或uint64数据来创建对应的ArkTS BigInt。这使得在Node-API模块中可以方便地创建BigInt类型值。BigInt操作： Node-API提供了多个接口用于操作BigInt类型值。通过这些接口，可以获取BigInt的数值，进行数值转换，以及执行常见的算术和位运算操作。
场景和功能介绍
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_create_bigint_int64
这个函数用于在给定的Node-API环境中依据一个带有符号的64位整数创建一个ArkTS的BigInt对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateBigintInt64t(napi_env env, napi_callback_info info)\n{\n    // 声明int64_t的变量value\n    int64_t value = -5555555555555555555;\n    // 将value转化为napi_value类型返回\n    napi_value returnValue = nullptr;\n    napi_create_bigint_int64(env, value, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const createBigintInt64t: () => bigint;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_create_bigint_int64: %{public}d', testNapi.createBigintInt64t());
[h2]napi_create_bigint_uint64
这个函数用于在给定的Node-API环境中依据一个无符号的64位整数创建一个ArkTS的BigInt对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateBigintUint64t(napi_env env, napi_callback_info info)\n{\n    // 声明uint64_t的变量value\n    uint64_t value = 5555555555555555555;\n    // 将value转化为napi_value类型返回\n    napi_value returnValue = nullptr;\n    napi_create_bigint_uint64(env, value, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const createBigintUint64t: () => bigint;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_create_bigint_uint64: %{public}d', testNapi.createBigintUint64t());
[h2]napi_create_bigint_words
这个函数用于在给定的Node-API环境中由一系列无符号64位整数创建一个ArkTS的BigInt对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateBigintWords(napi_env env, napi_callback_info info)\n{\n    // 使用napi_create_bigint_words接口创建一个BigInt对象\n    int signBit = 0;\n    size_t wordCount = 3;\n    uint64_t words[] = {12ULL, 34ULL, 56ULL};\n    napi_value returnValue = nullptr;\n    napi_status status = napi_create_bigint_words(env, signBit, wordCount, words, &returnValue);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_create_bigint_words fail\");\n        return nullptr;\n    }\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const createBigintWords: () => bigint | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_create_bigint_words: %{public}d', testNapi.createBigintWords());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API NapiGetValueBigint: %{public}s', error.message);\n}
[h2]napi_get_value_bigint_int64
用于从传入的参数中提取64位整数的BigInt数据，以供后续处理。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetValueBigintInt64t(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 从传入的参数中提取64位整数的BigInt数据\n    int64_t value = 0;\n    bool lossLess = false;\n    napi_status status = napi_get_value_bigint_int64(env, args[0], &value, &lossLess);\n    // 判断从ArkTS侧获取bigint是否为无损转换，如果不是抛出异常\n    if (!lossLess) {\n        napi_throw_error(env, nullptr, \"BigInt values have not been lossless converted\");\n        return nullptr;\n    }\n    // 如果接口调用成功正常调用则返回true给ArkTS侧\n    napi_value returnValue = nullptr;\n    napi_get_boolean(env, status == napi_ok, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const getValueBigintInt64t: (bigInt64: bigint) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nlet bigInt = BigInt(-5555555555555555);\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_value_bigint_int64: %{public}s',\n             JSON.stringify(testNapi.getValueBigintInt64t(bigInt)));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API NapiGetValueBigint: %{public}s', error.message);\n}
[h2]napi_get_value_bigint_uint64
用于从传入的参数中提取无符号64位整数的BigInt数据，以供后续处理。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetValueBigintUint64t(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 从参数值中获取BigInt的数值\n    uint64_t value = 0;\n    bool lossLess = false;\n    napi_status status = napi_get_value_bigint_uint64(env, args[0], &value, &lossLess);\n    // 判断从ArkTS侧获取bigint是否为无损转换，如果不是抛出异常\n    if (!lossLess) {\n        napi_throw_error(env, nullptr, \"BigInt values have no lossless converted\");\n        return nullptr;\n    }\n    // 如果接口调用成功正常调用则返回true给ArkTS侧\n    napi_value returnValue = nullptr;\n    napi_get_boolean(env, status == napi_ok, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const getValueBigintUint64t: (bigUint64: bigint) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nlet bigUint = BigInt(5555555555555555);\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_value_bigint_uint64: %{public}s',\n             JSON.stringify(testNapi.getValueBigintUint64t(bigUint)));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API NapiGetValueBigint: %{public}s', error.message);\n}
[h2]napi_get_value_bigint_words
用于获取ArkTS的BigInt对象底层的64位无符号（uint64）二进制字节数据。
cpp部分代码
#include \"hilog/log.h\"\n#include \"napi/native_api.h\"\n\nstatic napi_value GetValueBigintWords(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    int signBit = 0;\n    size_t wordCount = 0;\n    uint64_t words = 0;\n    // 调用napi_get_value_bigint_words接口获取wordCount\n    napi_status status = napi_get_value_bigint_words(env, args[0], nullptr, &wordCount, nullptr);\n    OH_LOG_INFO(LOG_APP, \"Node-API , wordCount:%{public}d.\", wordCount);\n    // 调用napi_get_value_bigint_words接口获取传入bigInt相关信息，如：signBit传入bigInt正负信息\n    status = napi_get_value_bigint_words(env, args[0], &signBit, &wordCount, &words);\n    OH_LOG_INFO(LOG_APP, \"Node-API , signBit: %{public}d.\", signBit);\n    if (status != napi_ok) {\n        OH_LOG_ERROR(LOG_APP, \"Node-API , reason:%{public}d.\", status);\n        napi_throw_error(env, nullptr, \"napi_get_date_value fail\");\n        return nullptr;\n    }\n    // 将符号位转化为int类型传出去\n    napi_value returnValue = nullptr;\n    napi_create_int32(env, signBit, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const getValueBigintWords: (bigIntWords: bigint) => bigint | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nlet bigInt = BigInt(-5555555555555555);\nlet bigUint = BigInt(5555555555555555);\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_value_bigint_words signBit is: %{public}d', testNapi.getValueBigintWords(bigInt));\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_value_bigint_words signBit is: %{public}d', testNapi.getValueBigintWords(bigUint));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API NapiGetValueBigint: %{public}s', error.message);\n}
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
