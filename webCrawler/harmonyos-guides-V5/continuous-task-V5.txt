长时任务
概述
[h2]功能介绍
应用退至后台后，在后台需要长时间运行用户可感知的任务，如播放音乐、导航等。为防止应用进程被挂起，导致对应功能异常，可以申请长时任务，使应用在后台长时间运行。在长时任务中，支持同时申请多种类型的任务，也可以对任务类型进行更新。应用退至后台执行业务时，系统会做一致性校验，确保应用在执行相应的长时任务。应用在申请长时任务成功后，通知栏会显示与长时任务相关联的消息，用户删除通知栏消息时，系统会自动停止长时任务。
[h2]使用场景
下表给出了当前长时任务支持的类型，包含数据传输、音视频播放、录制、定位导航、蓝牙相关业务、多设备互联和计算任务。可以参考下表中的场景举例，选择合适的长时任务类型。
表1 长时任务类型
音频、视频在后台播放，音视频投播。
说明： 支持在元服务中使用。
分布式业务连接、投播。
说明： 支持在元服务中使用。
关于DATA_TRANSFER（数据传输）说明：
 在数据传输时，若应用使用上传下载代理接口托管给系统，即使申请DATA_TRANSFER的后台任务，应用退后台时还是会被挂起。 在数据传输时，应用需要更新进度。如果进度长时间（超过10分钟）不更新，数据传输的长时任务会被取消。更新进度实现可参考startBackgroundRunning()中的示例。 
关于AUDIO_PLAYBACK（音视频播放）说明：
 若要通过AUDIO_PLAYBACK实现后台播放，须使用媒体会话服务（AVSession）进行音视频开发。 音视频投播，是指将一台设备的音视频投至另一台设备播放。投播退至后台，长时任务会检测音视频播放和投屏两个业务，只要有其一正常运行，长时任务就不会终止。 
[h2]约束与限制
申请限制：Stage模型中，长时任务仅支持UIAbility申请；FA模型中，长时任务仅支持ServiceAbility申请。长时任务支持设备当前应用申请，也支持跨设备或跨应用申请，跨设备或跨应用仅对系统应用开放。
数量限制：一个UIAbility（FA模型则为ServiceAbility）同一时刻仅支持申请一个长时任务，即在一个长时任务结束后才可能继续申请。如果一个应用同时需要申请多个长时任务，需要创建多个UIAbility；一个应用的一个UIAbility申请长时任务后，整个应用下的所有进程均不会被挂起。
运行限制：
 申请长时任务后，应用未执行相应的业务，系统会对应用进行管控。如系统检测到应用申请了AUDIO_PLAYBACK（音视频播放），但实际未播放音乐，长时任务会被取消。 申请长时任务后，应用执行的业务类型与申请的不一致，系统会对应用进行管控。如系统检测到应用只申请了AUDIO_PLAYBACK（音视频播放），但实际上除了播放音乐（对应AUDIO_PLAYBACK类型），还在进行录制（对应AUDIO_RECORDING类型）。 申请长时任务后，应用的业务已执行完，系统会对应用进行管控。 若运行长时任务的进程后台负载持续高于所申请类型的典型负载，系统会对应用进行管控。 
应用按需求申请长时任务，当应用无需在后台运行（任务结束）时，要及时主动取消长时任务，否则系统会强行取消。例如用户主动点击音乐暂停播放时，应用需及时取消对应的长时任务；用户再次点击音乐播放时，需重新申请长时任务。
若音频在后台播放时被打断，系统会自行检测和停止长时任务，音频重启播放时，需要再次申请长时任务。
后台播放音频的应用，在停止长时任务的同时，需要暂停或停止音频流，否则应用会被系统强制终止。
接口说明
表2 主要接口
以下是长时任务开发使用的相关接口，下表均以Promise形式为例，更多接口及使用方式请见后台任务管理。
开发步骤
本文以申请录制长时任务为例，实现如下功能：
 点击“申请长时任务”按钮，应用申请录制长时任务成功，通知栏显示“正在运行录制任务”通知。 点击“取消长时任务”按钮，取消长时任务，通知栏撤销相关通知。 
[h2]Stage模型
 需要申请ohos.permission.KEEP_BACKGROUND_RUNNING权限，配置方式请参见声明权限。 声明后台模式类型。在module.json5文件中为需要使用长时任务的UIAbility声明相应的长时任务类型，配置文件中填写长时任务类型的配置项。  \"module\": {\n     \"abilities\": [\n         {\n             \"backgroundModes\": [\n              // 长时任务类型的配置项\n             \"audioRecording\"\n             ]\n         }\n     ],\n     // ...\n } 导入模块。 长时任务相关的模块为@ohos.resourceschedule.backgroundTaskManager和@ohos.app.ability.wantAgent，其余模块按实际需要导入。  import { backgroundTaskManager } from '@kit.BackgroundTasksKit';\n import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\n import { window } from '@kit.ArkUI';\n import { rpc } from '@kit.IPCKit'\n import { BusinessError } from '@kit.BasicServicesKit';\n import { wantAgent, WantAgent } from '@kit.AbilityKit'; 申请和取消长时任务。 设备当前应用申请长时任务示例代码如下：  @Entry\n @Component\n struct Index {\n   @State message: string = 'ContinuousTask';\n  // 通过getContext方法，来获取page所在的UIAbility上下文。\n   private context: Context = getContext(this);\n\n   startContinuousTask() {\n     let wantAgentInfo: wantAgent.WantAgentInfo = {\n       // 点击通知后，将要执行的动作列表\n       // 添加需要被拉起应用的bundleName和abilityName\n       wants: [\n         {\n           bundleName: \"com.example.myapplication\",\n           abilityName: \"MainAbility\"\n         }\n       ],\n       // 指定点击通知栏消息后的动作是拉起ability\n       actionType: wantAgent.OperationType.START_ABILITY,\n       // 使用者自定义的一个私有值\n       requestCode: 0,\n       // 点击通知后，动作执行属性\n       actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n     };\n\n     // 通过wantAgent模块下getWantAgent方法获取WantAgent对象\n     wantAgent.getWantAgent(wantAgentInfo).then((wantAgentObj: WantAgent) => {\n       backgroundTaskManager.startBackgroundRunning(this.context,\n         backgroundTaskManager.BackgroundMode.AUDIO_RECORDING, wantAgentObj).then(() => {\n         // 此处执行具体的长时任务逻辑，如放音等。\n         console.info(`Succeeded in operationing startBackgroundRunning.`);\n       }).catch((err: BusinessError) => {\n         console.error(`Failed to operation startBackgroundRunning. Code is ${err.code}, message is ${err.message}`);\n       });\n     });\n   }\n\n   stopContinuousTask() {\n      backgroundTaskManager.stopBackgroundRunning(this.context).then(() => {\n        console.info(`Succeeded in operationing stopBackgroundRunning.`);\n      }).catch((err: BusinessError) => {\n        console.error(`Failed to operation stopBackgroundRunning. Code is ${err.code}, message is ${err.message}`);\n      });\n   }\n\n   build() {\n     Row() {\n       Column() {\n         Text(\"Index\")\n           .fontSize(50)\n           .fontWeight(FontWeight.Bold)\n\n        Button() {\n           Text('申请长时任务').fontSize(25).fontWeight(FontWeight.Bold)\n         }\n         .type(ButtonType.Capsule)\n         .margin({ top: 10 })\n         .backgroundColor('#0D9FFB')\n         .width(250)\n         .height(40)\n         .onClick(() => {\n           // 通过按钮申请长时任务\n           this.startContinuousTask();\n         })\n\n         Button() {\n           Text('取消长时任务').fontSize(25).fontWeight(FontWeight.Bold)\n         }\n         .type(ButtonType.Capsule)\n         .margin({ top: 10 })\n         .backgroundColor('#0D9FFB')\n         .width(250)\n         .height(40)\n         .onClick(() => {\n           // 此处结束具体的长时任务的执行\n\n           // 通过按钮取消长时任务\n           this.stopContinuousTask();\n         })\n       }\n       .width('100%')\n     }\n     .height('100%')\n   }\n } 
