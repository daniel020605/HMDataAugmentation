构建本地实况窗
简介
您可以通过liveViewManager模块构建本地实况窗，完成实况窗的整个生命周期流程（包括创建、更新与结束）。请注意，只有应用在前台运行，即用户实际使用应用并且产生了服务合约的情况下，您才可以创建实况窗；与此同时，本地更新或结束实况窗依赖于您的应用进程，所以我们更推荐您在本地创建实况窗后使用Push Kit更新或结束实况窗。
Live View Kit提供了“即时配送/打车出行/航班出行/高铁出行/排队叫号/赛事比分/导航/计时/共享租赁/取餐/运动锻炼”共11个场景的包含实况窗整个生命周期流程的示例代码，如您想在正式开发实况窗前先行体验效果，请参考实况窗SampleCode。
导入liveViewManager
在项目中导入liveViewManager，并新建实况窗控制类（例如LiveViewController），构造isLiveViewEnabled()方法，用于校验实况窗开关（设置>应用和元服务>应用名>实况窗）是否打开。打开实况窗开关是创建实况窗的前提条件。示例代码如下：
import { liveViewManager } from '@kit.LiveViewKit';\n\nexport class LiveViewController {\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n}
创建实况窗
实况窗根据扩展区不同共有5种样式模板：进度可视化模板、强调文本模板、左右文本模板、赛事比分模板和导航模板。
调用liveViewManager.startLiveView创建实况窗，该API接口传入参数为实况窗实例（liveViewManager.LiveView）。
[h2]进度可视化模板
进度可视化模板适用于打车、外卖等场景。
示例代码如下：
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"DELIVERY\", // 实况窗的应用场景。DELIVERY：即时配送（外卖、生鲜）\n      liveViewData: {\n        primary: {\n          title: \"骑手已接单\",\n          content: [\n            { text: \"距商家 \" },\n            { text: \"300 \", textColor: \"#FF007DFF\" },\n            { text: \"米 | \" },\n            { text: \"3 \", textColor: \"#FF007DFF\" },\n            { text: \"分钟到店\" }\n          ], // 所有文本仅能设置为一种颜色，不设置textColor时，默认展示#FF000000\n          keepTime: 15,\n          clickAction: await LiveViewController.buildWantAgent(),\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\n            progress: 40,\n            color: \"#FF317AF7\",\n            backgroundColor: \"#f7819ae0\",\n            indicatorType: liveViewManager.IndicatorType.INDICATOR_TYPE_UP,\n            indicatorIcon: \"indicator.png\", // 进度条指示器图标，取值为“/resources/rawfile”路径下的文件名\n            lineType: liveViewManager.LineType.LINE_TYPE_DOTTED_LINE,\n            nodeIcons: [\"icon_1.png\", \"icon_2.png\", \"icon_3.png\"] // 进度条每个节点图标，取值为“/resources/rawfile”路径下的文件名\n          }\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
[h2]强调文本模板
强调文本模板适用于取餐、排队等场景。
示例代码如下：
构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"PICK_UP\", // 实况窗的应用场景。PICK_UP：取餐。\n      liveViewData: {\n        primary: {\n          title: \"餐品已备好\",\n          content: [\n            { text: \"请前往\", textColor: \"#FF000000\" },\n            { text: \"XXX店取餐\", textColor: \"#FF000000\" }\n          ],\n          keepTime: 15,\n          clickAction: await LiveViewController.buildWantAgent(),\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PICKUP,\n            title: \"取餐码\",\n            content: \"72988\",\n            underlineColor: \"#FF0A59F7\",\n            descPic: \"coffee.png\"\n          }\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
[h2]左右文本模板
左右文本模板适用于高铁、航班等场景。
示例代码如下：
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"TRAIN\", // 实况窗的应用场景。TRAIN：高铁/火车。\n      liveViewData: {\n        primary: {\n          title: \"列车检票提醒\",\n          content: [\n            { text: \"检票口 \" },\n            { text: \"6B \", textColor: \"#FF007DFF\" },\n            { text: \"| 座位 \" },\n            { text: \"03车 12F\", textColor: \"#FF007DFF\" }\n          ], // 所有文本仅能设置为一种颜色，不设置textColor时，默认展示#FF000000\n          keepTime: 15,\n          clickAction: await LiveViewController.buildWantAgent(), // 点击实况窗默认动作。\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_FLIGHT,\n            firstTitle: \"09:00\",\n            firstContent: \"上海虹桥\",\n            lastTitle: \"14:20\",\n            lastContent: \"汉口\",\n            spaceIcon: \"icon.png\",\n            isHorizontalLineDisplayed: true,\n            additionalText: \"以上信息仅供参考\" // 扩展区底部内容，仅可用于左右文本模板。\n          }\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
[h2]赛事比分模板
赛事比分模板适用于赛事场景。
示例代码如下：
构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"SCORE\", // 实况窗的应用场景。SCORE：赛事比分。\n      liveViewData: {\n        primary: {\n          title: \"第四节比赛中\",\n          content: [\n            { text: \"XX VS XX\" },\n            { text: \" | \", textColor: \"#f7b7b1b3\"},\n            { text: \"小组赛第五场\"}\n          ],\n          keepTime: 1,\n          clickAction: await LiveViewController.buildWantAgent(),\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_SCORE,\n            hostName: \"队名A\",\n            hostIcon: \"host.png\",\n            hostScore: \"110\",\n            guestName: \"队名B\",\n            guestIcon: \"guest.png\",\n            guestScore: \"102\",\n            competitionDesc: [\n              { text: \"●\", textColor: \"#FFFF0000\" },\n              { text: \"Q4\" }\n            ],\n            competitionTime: \"02:16\",\n            isHorizontalLineDisplayed: true\n          }\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
[h2]导航模板
导航模板适用于出行导航场景。
示例代码如下：
构建LiveViewController后，请在代码中初始化LiveViewController并调用LiveViewController.startLiveView()方法。
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"NAVIGATION\", // 实况窗的应用场景。NAVIGATION：导航。\n      liveViewData: {\n        primary: {\n          title: \"178米后左转\",\n          content: [\n            { text: \"去往\", textColor: \"#FF000000\" },\n            { text: \" 南京东路\", textColor: \"#FF000000\" }\n          ],\n          keepTime: 15,\n          clickAction: await LiveViewController.buildWantAgent(),\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_NAVIGATION,\n            currentNavigationIcon: \"navigation.png\",\n            navigationIcons: [\"left.png\",\"straight.png\",\"straight.png\",\"right.png\"]\n          }\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
[h2]实况胶囊
胶囊形态各模板参数固定，与创建实况窗时的模板类型无关。可创建的胶囊类型有：文本胶囊、计时器胶囊、进度胶囊，详情请参见CapsuleData。
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"TAXI\", // 实况窗的应用场景。TAXI：出行打车。\n      liveViewData: {\n        primary: {\n          title: \"司机预计5分钟后到达\",\n          content: [\n            { text: \"白\", textColor: \"#FF000000\" },\n            { text: \"●\" },\n            { text: \"沪AXXXXXX\", textColor: \"#FF000000\" }\n          ],\n          keepTime: 15,\n          clickAction: await LiveViewController.buildWantAgent(),\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\n            progress: 30,\n            color: \"#ff0959F8\",\n            backgroundColor: \"#ffc9d7e4\",\n            indicatorType: liveViewManager.IndicatorType.INDICATOR_TYPE_UP,\n            indicatorIcon: \"indicator.png\", // 进度条指示器图标，取值为“/resources/rawfile”路径下的文件名\n            lineType: liveViewManager.LineType.LINE_TYPE_NORMAL_SOLID_LINE,\n            nodeIcons: [\"icon_1.png\", \"icon_2.png\", \"icon_3.png\"] // 进度条每个节点图标，取值为“/resources/rawfile”路径下的文件名\n          }\n        },\n        // 实况胶囊相关参数\n        capsule: {\n          type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\n          status: 1,\n          icon: \"capsule_store.png\", // 胶囊图标，取值为“/resources/rawfile”路径下的文件名\n          backgroundColor: \"#ff0959F8\",\n          title: \"5分钟\"\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
[h2]实况窗计时器
实况窗计时器适用于排队、抢票等场景。
开发者若需要使用实况窗计时器，则需在liveViewManager.LiveView（结构体）中的配置timer字段，并在当前支持的字段中使用占位符：${placeholder.timer}。
例如：固定区的文本内容中使用占位符，系统将替代占位符为实况窗计时器。
示例代码如下：
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"QUEUE\", // 实况窗的应用场景。QUEUE：排队\n      timer: {\n        time: 620000,\n        isCountdown: false,\n        isPaused: false\n      },\n      liveViewData: {\n        primary: {\n          title: \"大桌4人等位  32桌\",\n          content: [\n            { text: \"已等待 \" }, \n            { text: \"${placeholder.timer}\", textColor:\"#ff10c1f7\" },\n            { text: \" | 预计还需>30分钟\" }\n          ], // 所有文本仅能设置为一种颜色，不设置textColor时，默认展示#FF000000\n          keepTime: 15,\n          clickAction: await LiveViewController.buildWantAgent(),\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\n            progress: 0,\n            color: \"#FFFF0000\",\n            backgroundColor: \"#FF000000\",\n            indicatorType: liveViewManager.IndicatorType.INDICATOR_TYPE_OVERLAY,\n            indicatorIcon: \"indicator.png\", // 进度条指示器图标，取值为“/resources/rawfile”路径下的文件名\n            lineType: liveViewManager.LineType.LINE_TYPE_DOTTED_LINE,\n            nodeIcons: [\"icon_1.png\",\"icon_2.png\"] // 进度条每个节点图标，取值为“/resources/rawfile”路径下的文件名\n          }\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
[h2]点击实况窗动作
请调用wantAgent.getWantAgent()构造点击动作字段所需的参数值，当前实况窗支持的点击动作如下：
 点击实况窗的默认动作：在liveViewManager.LiveView（结构体）中携带胶囊所需的参数liveViewData.primary.clickAction字段。 点击辅助区的跳转动作：在liveViewManager.LiveView（结构体）中携带胶囊所需的参数liveViewData.primary.extensionData.clickAction字段。 
本地更新和结束实况窗
调用liveViewManager.isLiveViewEnabled()确认实况窗开关打开后，调用liveViewManager的updateLiveView更新实况窗，调用stopLiveView结束实况窗。更新时需要修改请求体中对应的参数。示例代码如下：
import { liveViewManager } from '@kit.LiveViewKit';\nimport { Want, wantAgent } from '@kit.AbilityKit';\n\nexport class LiveViewController {\n  private static contentColor: string = '#FF000000';\n  private static capsuleColor: string = '#FF308977';\n\n  public async startLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 创建实况窗\n    const defaultView = await LiveViewController.buildDefaultView();\n    return await liveViewManager.startLiveView(defaultView);\n  }\n\n  public async updateLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 修改实况窗内容\n    const defaultView = await LiveViewController.buildDefaultView();\n    defaultView.liveViewData.primary.title = \"预计23:49送达\";\n    defaultView.liveViewData.primary.content = [\n      { text: \"等待商家接单，\",\n        textColor: LiveViewController.contentColor },\n      { text: \"03:20未接单自动取消\",\n        textColor: LiveViewController.contentColor }\n    ];\n    defaultView.liveViewData.primary.layoutData = {\n      layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\n      progress: 0,\n      lineType: 0,\n      nodeIcons: [ // 进度条每个节点图标，取值为“/resources/rawfile”路径下的文件名\n        'icon_store_white.png',\n        'icon_finish.png'\n      ]\n    };\n    defaultView.liveViewData.capsule = {\n      type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\n      status: 1,\n      icon: 'capsule_store.png',\n      backgroundColor: LiveViewController.capsuleColor,\n      title: \"待接单\"\n    };\n    // 更新实况窗\n    return await liveViewManager.updateLiveView(defaultView);\n  }\n\n  public async stopLiveView(): Promise<liveViewManager.LiveViewResult> {\n    // 校验实况窗开关是否打开\n    if (!await LiveViewController.isLiveViewEnabled()) {\n      throw new Error(\"Live view is disabled.\");\n    }\n    // 修改实况窗内容\n    const defaultView = await LiveViewController.buildDefaultView();\n    defaultView.liveViewData.primary.title = '商品已送达';\n    defaultView.liveViewData.primary.content = [\n      { text: '感谢您的认可,',\n        textColor: LiveViewController.contentColor },\n      { text: '期待下一次光临',\n        textColor: LiveViewController.contentColor }\n    ];\n    defaultView.liveViewData.primary.layoutData = {\n      layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PROGRESS,\n      progress: 100,\n      lineType: 0,\n      nodeIcons: [ // 进度条每个节点图标，取值为“/resources/rawfile”路径下的文件名\n        'icon_order.png',\n        'icon_finish.png'\n      ]\n    };\n    defaultView.liveViewData.capsule = {\n      type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\n      status: 1,\n      icon: 'capsule_gps.png',\n      backgroundColor: LiveViewController.capsuleColor,\n      title: '已送达'\n    };\n    // 结束实况窗\n    return await liveViewManager.stopLiveView(defaultView);\n  }\n\n  private static async buildDefaultView(): Promise<liveViewManager.LiveView> {\n    return {\n      // 构造实况窗请求体\n      id: 0, // 实况窗ID，开发者生成。\n      event: \"DELIVERY\", // 实况窗的应用场景。DELIVERY：即时配送（外卖、生鲜）\n      liveViewData: {\n        primary: {\n          title: \"餐品待支付\",\n          content: [\n            { text: \"咖啡 \", textColor: \"#FF000000\" },\n            { text: \"等2件商品\", textColor: \"#FF000000\" }\n          ],\n          keepTime: 15,\n          clickAction: await LiveViewController.buildWantAgent(),\n          layoutData: {\n            layoutType: liveViewManager.LayoutType.LAYOUT_TYPE_PICKUP,\n            title: \"待支付金额\",\n            content: \"25.5元\",\n            underlineColor: \"#FF0A59F7\",\n            descPic: \"coffee.png\"\n          }\n        },\n        // 实况胶囊相关参数\n        capsule: {\n          type: liveViewManager.CapsuleType.CAPSULE_TYPE_TEXT,\n          status: 1,\n          icon: \"capsule_store.png\",\n          backgroundColor: \"#FF308977\",\n          title: \"待支付\",\n          content: \"...\"\n        }\n      }\n    };\n  }\n\n  private static async isLiveViewEnabled(): Promise<boolean> {\n    return await liveViewManager.isLiveViewEnabled();\n  }\n\n  private static async buildWantAgent(): Promise<Want> {\n    const wantAgentInfo: wantAgent.WantAgentInfo = {\n      wants: [\n        {\n          bundleName: 'xxx.xxx.xxx', // 应用实际bundleName\n          abilityName: 'EntryAbility'\n        } as Want\n      ],\n      actionType: wantAgent.OperationType.START_ABILITIES,\n      requestCode: 0,\n      actionFlags: [wantAgent.WantAgentFlags.UPDATE_PRESENT_FLAG]\n    };\n    const agent = await wantAgent.getWantAgent(wantAgentInfo);\n    return agent;\n  }\n}
更详细的参数请参考Live View Kit ArkTS API参考。
以上是应用在本地创建、更新和结束实况窗通知的全部流程。此外，应用也可以通过Push Kit实现远程更新实况窗消息。
