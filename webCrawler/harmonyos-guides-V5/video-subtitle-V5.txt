使用AVPlayer添加视频外挂字幕(ArkTS)
当前仅支持视频播放前设置外挂字幕。
在进行应用开发的过程中，开发者可以通过AVPlayer的实例注册on('subtitleUpdate')方法监听字幕信息。
开发步骤及注意事项
详细的API说明请参考AVPlayer
 使用视频播放的AVPlayer实例设置外挂字幕资源。 let context = getContext(this) as common.UIAbilityContext;\nlet fileDescriptor = await context.resourceManager.getRawFd('xxx.srt');\n\navPlayer.addSubtitleFromFd(fileDescriptor.fd, fileDescriptor.offset, fileDescriptor.length);\n\n// 或者使用addSubtitleFromUrl接口\nlet fdUrl:string = \"http://xxx.xxx.xxx.xxx:xx/xx/index.srt\" ;\navPlayer.addSubtitleFromUrl(fdUrl); 使用视频播放的AVPlayer实例注册字幕回调函数。 avPlayer.on('subtitleUpdate', (info: media.SubtitleInfo) => {\n  if (!!info) {\n    let text = (!info.text) ? '' : info.text;\n    let startTime = (!info.startTime) ? 0 : info.startTime;\n    let duration = (!info.duration) ? 0 : info.duration;\n    console.info('subtitleUpdate info: text=' + text + ' startTime=' + startTime +' duration=' + duration);\n  } else {\n    console.info('subtitleUpdate info is null');\n  }\n}); (可选)当需要不显示字幕的时候，使用视频播放的AVPlayer实例注销字幕回调函数。 avPlayer.off('subtitleUpdate'); 
完整示例
import { media } from '@kit.MediaKit';\nimport { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nexport class AVPlayerSubtitleDemo {\n  private avPlayer: media.AVPlayer | undefined = undefined;\n  // 注册avplayer回调函数\n  setAVPlayerCallback(avPlayer: media.AVPlayer) {\n    // error回调监听函数,当avPlayer在操作过程中出现错误时调用reset接口触发重置流程\n    avPlayer.on('error', (err: BusinessError) => {\n      console.error(`Invoke avPlayer failed, code is ${err.code}, message is ${err.message}`);\n      avPlayer.reset(); // 调用reset重置资源，触发idle状态\n    });\n    // 注册字幕回调函数\n    avPlayer.on('subtitleUpdate', (info: media.SubtitleInfo) => {\n      if (info) {\n        let text = (!info.text) ? '' : info.text;\n        let startTime = (!info.startTime) ? 0 : info.startTime;\n        let duration = (!info.duration) ? 0 : info.duration;\n        console.info('subtitleUpdate info: text=' + text + ' startTime=' + startTime +' duration=' + duration);\n      } else {\n        console.info('subtitleUpdate info is null');\n      }\n    });\n  }\n\n  // 以下demo为使用资源管理接口获取打包在HAP内的媒体资源文件并通过url属性设置\n  async avPlayerSubtitleUrlDemo() {\n    // 创建avPlayer实例对象\n    this.avPlayer = await media.createAVPlayer();\n    // 设置视频信息\n    // 创建回调函数\n    this.setAVPlayerCallback(this.avPlayer);\n\n    let fdUrl:string = \"http://xxx.xxx.xxx.xxx:xx/xx/index.srt\";\n\n    this.avPlayer.addSubtitleFromUrl(fdUrl);\n  }\n\n  // 以下demo为使用资源管理接口获取打包在HAP内的媒体资源文件并通过FromFd属性设置\n  async avPlayerSubtitleFromFdDemo() {\n    // 创建avPlayer实例对象\n    this.avPlayer = await media.createAVPlayer();\n    // 设置视频信息\n    // 创建回调函数\n    this.setAVPlayerCallback(this.avPlayer);\n\n    let context = getContext(this) as common.UIAbilityContext;\n    let fileDescriptor = await context.resourceManager.getRawFd('xxx.srt');\n\n    this.avPlayer.addSubtitleFromFd(fileDescriptor.fd, fileDescriptor.offset, fileDescriptor.length);\n  }\n\n  // 注销字幕回调函数\n  async avPlayerSubtitleOffDemo() {\n    if(this.avPlayer) {\n      this.avPlayer.off('subtitleUpdate');\n    }\n  }\n\n}
