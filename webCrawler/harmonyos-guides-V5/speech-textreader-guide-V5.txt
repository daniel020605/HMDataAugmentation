朗读控件
适用场景
朗读控件应用广泛，例如在用户不方便或者无法查看屏幕文字的时候，为用户朗读新闻，提供资讯。
本章节将向您介绍如何使用朗读组件，效果如下图所示。
接口说明
以下仅列出demo中调用的部分主要接口，具体API说明详见API参考。
接口名
描述
init(context: common.BaseContext, readParams: ReaderParam): Promise<void>
初始化TextReader。
start(readInfoList: ReadInfo[], articleId?: string): Promise<void>
启动TextReader。
on(type: string, callback: function): void
注册所有事件回调，具体事件类型详见API参考。
ReaderParam(isVoiceBrandVisible: boolean, businessBrandInfo?: BusinessBrandInfo, isFastForward?: boolean, keepBackgroundRunning?: boolean, online?: number)
朗读参数。
keepBackgroundRunning参数配置，决定是否使用保持后台运行的功能。
 默认false：不保持后台运行， 配置为true：保持后台运行 
开发步骤
 首先从项目根目录进入/src/main/ets/entryability/EntryAbility.ets文件，将WindowManager添加至工程。import { WindowManager } from '@kit.SpeechKit';  在onWindowStageCreate(windowStage: window.WindowStage)生命周期方法中，添加setWindowStage方法设置窗口管理器。onWindowStageCreate(windowStage: window.WindowStage): void {\n  console.info('Ability onWindowStageCreate');\n  WindowManager.setWindowStage(windowStage);\n  \n  windowStage.loadContent('pages/Index', (err, data) => {\n    if (err) {\n      console.error(`Failed to load the content. Code: ${err.code}, message: ${err.message}`);\n      return;\n    }\n    console.info(`Succeeded in loading the content. Data: ${JSON.stringify(data)}.` );\n  });\n}  从项目根目录进入/src/main/ets/pages/Index.ets文件，在使用朗读控件前，将实现朗读控件和其他相关的类添加至工程。import { TextReader, TextReaderIcon, ReadStateCode } from '@kit.SpeechKit';  简单配置页面的布局，加入听筒图标，并且设置onClick点击事件。/**\n * 播放状态\n */\n@State readState: ReadStateCode = ReadStateCode.WAITING;\n\nbuild() {\n    Column() {\n      TextReaderIcon({ readState: this.readState })\n        .margin({ right: 20 })\n        .width(32)\n        .height(32)\n        .onClick(async () => {\n            // 设置点击事件\n            // ...\n        })\n    }\n}  初始化朗读控件。// 用于显示当前页的按钮状态\n@State isInit: boolean = false;\n\n// 初始化朗读控件\nconst readerParam: TextReader.ReaderParam = {\n  isVoiceBrandVisible: true,\n  businessBrandInfo: {\n    panelName: '小艺朗读'\n  }\n}\ntry{\n  await TextReader.init(getContext(this), readerParam);\n  // 是否初始化，用于显示听筒按钮的状态\n  this.isInit = true;\n} catch (err) {\n  console.error(`TextReader failed to init. Code: ${err.code}, message: ${err.message}`);\n}  （可选）设置监听，在用户与控件进行交互时触发回调通知开发者。注销监听，监听结束后进行释放。// 设置监听\nsetActionListener() {\n  TextReader.on('setArticle', async (id: string) => { console.info(`setArticle ${id}`) });\n  TextReader.on('clickArticle', (id: string) => {console.info(`onClickArticle ${id}`) });\n  TextReader.on('clickAuthor', (id: string) => { console.info(`onClickAuthor ${id}`) });\n  TextReader.on('clickNotification',  (id: string) => { console.info(`onClickNotification ${id}`) });\n  TextReader.on('showPanel', () => { console.info(`onShowPanel`) });\n  TextReader.on('hidePanel', () => { console.info(`onHidePanel`) });\n  TextReader.on('stateChange', (state: TextReader.ReadState) => {\n    this.onStateChanged(state)\n  });\n  // 在列表页无更多内容时，会显示加载失败，需要设置requestMore监听，调用loadMore函数以获得正确的显示信息。\n  TextReader.on('requestMore', () => {\n    TextReader.loadMore(this.newData, true)\n  });\n}\n// 注销监听\nreleaseActionListener() {\n  TextReader.off('setArticle');\n  TextReader.off('clickArticle');\n  TextReader.off('clickAuthor');\n  TextReader.off('clickNotification');\n  TextReader.off('showPanel');\n  TextReader.off('hidePanel');\n  TextReader.off('stateChange');\n  TextReader.off('requestMore');\n}  初始化完成，加载文章列表，启动朗读控件。// 加载文章列表，启动朗读控件\nconst readInfoList: TextReader.ReadInfo[] = [{\n  id: '001',\n  title: {\n    text:'水调歌头.明月几时有',\n    isClickable:true\n  },\n  author:{\n    text:'宋.苏轼',\n    isClickable:true\n  },\n  date: {\n    text:'2024/01/01',\n    isClickable:false\n  },\n  bodyInfo: '明月几时有？把酒问青天。'\n}];\nTextReader.start(readInfoList).then(() => {\n  console.info(`TextReader succeeded in starting.`);\n}).catch((err: BusinessError) => {\n  console.error(`TextReader failed to start. Code: ${err.code}, message: ${err.message}`);\n})  （可选）若要配置长时任务，需要在module.json5配置文件中添加ohos.permission.KEEP_BACKGROUND_RUNNING权限，并且加入backgroundModes选项，确保朗读控件后台播报正常。{\n  \"module\": {\n    // ...\n    \"requestPermissions\": [\n      {\n        \"name\": \"ohos.permission.KEEP_BACKGROUND_RUNNING\",\n        \"usedScene\": {\n          \"abilities\": [\n            \"FormAbility\"\n          ],\n          \"when\": \"inuse\"\n        }\n      }\n    ],\n    \"abilities\": [\n      {\n        // ...\n        \"backgroundModes\": [\n          \"audioPlayback\"\n        ],\n        // ...\n      }\n    ]\n  }\n}  
开发实例
EntryAbility.ets
import { AbilityConstant, ConfigurationConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\nimport { WindowManager } from '@kit.SpeechKit';\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    console.info('Ability onCreate');\n    this.context.getApplicationContext().setColorMode(ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET);\n  }\n\n  onDestroy(): void {\n    console.info('Ability onDestroy');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    console.info('Ability onWindowStageCreate');\n    WindowManager.setWindowStage(windowStage);\n\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        console.error(`Failed to load the content. Code: ${err.code}, message: ${err.message}`);\n        return;\n      }\n      console.info(`Succeeded in loading the content. Data: ${JSON.stringify(data)}.` );\n    });\n  }\n\n  onWindowStageDestroy(): void {\n    console.info('Ability onWindowStageDestroy');\n  }\n\n  onForeground(): void {\n    console.info('Ability onForeground');\n  }\n\n  onBackground(): void {\n    console.info('Ability onBackground');\n  }\n}
Index.ets
import { TextReader, TextReaderIcon, ReadStateCode } from '@kit.SpeechKit';\n\n@Entry\n@Component\nstruct Index {\n\n  /**\n   * 待加载的文章\n   */\n  @State readInfoList: TextReader.ReadInfo[] = [];\n  @State selectedReadInfo: TextReader.ReadInfo = this.readInfoList[0];\n\n  /**\n   * 播放状态\n   */\n  @State readState: ReadStateCode = ReadStateCode.WAITING;\n\n  /**\n   * 用于显示当前页的按钮状态\n   */\n  @State isInit: boolean = false;\n\n  async aboutToAppear(){\n    /**\n     * 加载数据\n     */\n    let readInfoList: TextReader.ReadInfo[] = [{\n      id: '001',\n      title: {\n        text:'水调歌头.明月几时有',\n        isClickable:true\n      },\n      author:{\n        text:'宋.苏轼',\n        isClickable:true\n      },\n      date: {\n        text:'2024/01/01',\n        isClickable:false\n      },\n      bodyInfo: '明月几时有？把酒问青天。'\n    }];\n    this.readInfoList = readInfoList;\n    this.selectedReadInfo = this.readInfoList[0];\n    this.init();\n  }\n\n  /**\n   * 初始化\n   */\n  async init() {\n    const readerParam: TextReader.ReaderParam = {\n      isVoiceBrandVisible: true,\n      businessBrandInfo: {\n        panelName: '小艺朗读',\n        panelIcon: $r('app.media.startIcon')\n      }\n    }\n    try{\n      await TextReader.init(getContext(this), readerParam);\n      this.isInit = true;\n    } catch (err) {\n      console.error(`TextReader failed to init. Code: ${err.code}, message: ${err.message}`);\n    }\n  }\n\n  // 设置操作监听\n  setActionListener() {\n    TextReader.on('stateChange', (state: TextReader.ReadState) => {\n      this.onStateChanged(state)\n    });\n    TextReader.on('requestMore', () => this.onStateChanged);\n  }\n\n  onStateChanged = (state: TextReader.ReadState) => {\n    if (this.selectedReadInfo?.id === state.id) {\n      this.readState = state.state;\n    } else {\n      this.readState = ReadStateCode.WAITING;\n    }\n  }\n\n  build() {\n    Column() {\n      TextReaderIcon({ readState: this.readState })\n        .margin({ right: 20 })\n        .width(32)\n        .height(32)\n        .onClick(async () => {\n          try {\n            this.setActionListener();\n            await TextReader.start(this.readInfoList, this.selectedReadInfo?.id);\n          } catch (err) {\n            console.error(`TextReader failed to start. Code: ${err.code}, message: ${err.message}`);\n          }\n        })\n    }\n    .height('100%')\n  }\n}
