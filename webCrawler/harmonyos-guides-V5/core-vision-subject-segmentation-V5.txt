主体分割
适用场景
主体分割，可以检测出图片中区别于背景的前景物体或区域（即“显著主体”），并将其从背景中分离出来，适用于需要识别和提取图像主要信息的场景，广泛使用于前景目标检测和前景主体分离的场景。例如：
 主体贴纸，从图片中提取显著性的主体，去掉背景。 背景替换，替换并提取出主体对象的背景。 显著性检测，快速定位图片中显著性区域。 辅助图片编辑，例如单独对主体进行美化处理。 
约束与限制
该能力当前不支持模拟器。
开发步骤
 引用相关类添加至工程。import { subjectSegmentation } from '@kit.CoreVisionKit';  准备预处理的图片资源，将图片转换为PixelMap，并添加初始化和释放方法。async aboutToAppear(): Promise<void> {\n  const initResult = await subjectSegmentation.init();\n  hilog.info(0x0000, 'subjectSegmentationSample', `Subject segmentation initialization result:${initResult}`);\n}\n\nasync aboutToDisappear(): Promise<void> {\n  await subjectSegmentation.release();\n  hilog.info(0x0000, 'subjectSegmentationSample', 'Subject segmentation released successfully');\n}\n\nprivate async selectImage() {\n  let uri = await this.openPhoto()\n  if (uri === undefined) {\n    hilog.error(0x0000, TAG, \"uri is undefined\");\n  }\n  this.loadImage(uri);\n}\n\nprivate openPhoto(): Promise<Array<string>> {\n  return new Promise<Array<string>>((resolve, reject) => {\n    let PhotoSelectOptions = new photoAccessHelper.PhotoSelectOptions();\n    PhotoSelectOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE;\n    PhotoSelectOptions.maxSelectNumber = 1;\n    let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n    hilog.info(0x0000, TAG, 'PhotoViewPicker.select successfully, PhotoSelectResult uri: ');\n    photoPicker.select(PhotoSelectOptions).then((PhotoSelectResult) => {\n      hilog.info(0x0000, TAG, `PhotoViewPicker.select successfully, PhotoSelectResult uri: ${PhotoSelectResult.photoUris}`);\n      resolve(PhotoSelectResult.photoUris)\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, TAG, `PhotoViewPicker.select failed with errCode: ${err.code}, errMessage: ${err.message}`);\n      reject();\n    });\n  })\n}\n\nprivate loadImage(names: string[]) {\n  setTimeout(async () => {\n    let imageSource: image.ImageSource | undefined = undefined\n    let fileSource = await fileIo.open(names[0], fileIo.OpenMode.READ_ONLY)\n    imageSource = image.createImageSource(fileSource.fd)\n    this.chooseImage = await imageSource.createPixelMap()\n    hilog.info(0x0000, TAG, `this.chooseImage===${this.chooseImage}`);\n  }, 100\n  )\n}  实例化待分割的入参项VisionInfo，并传入待检测图片的PixelMap。let visionInfo: subjectSegmentation.VisionInfo = {\n  pixelMap: this.chooseImage,\n};  配置通用文本识别的配置项SegmentationConfig，包括最大分割主体个数、是否输出每个主体的分割信息，以及是否输出分割后的前景图。let config: subjectSegmentation.SegmentationConfig = {\n  maxCount: parseInt(this.maxNum),\n  enableSubjectDetails: true,\n  enableSubjectForegroundImage: true,\n};  调用subjectSegmentation的subjectSegmentation.doSegmentation接口，实现主体分割。let data: subjectSegmentation.SegmentationResult = await subjectSegmentation.doSegmentation(visionInfo, config);\nlet outputString = `Subject count: ${data.subjectCount}\\n`;\noutputString += `Max subject count: ${config.maxCount}\\n`;\noutputString += `Enable subject details: ${config.enableSubjectDetails ? 'Yes' : 'No'}\\n\\n`;\nlet segBox : subjectSegmentation.Rectangle = data.fullSubject.subjectRectangle;\nlet segBoxString = `Full subject box:\\nLeft: ${segBox.left}, Top: ${segBox.top}, Width: ${segBox.width}, Height: ${segBox.height}\\n\\n`;\noutputString += segBoxString;\n\nif (config.enableSubjectDetails) {\n  outputString += 'Individual subject boxes:\\n';\n  if (data.subjectDetails) {\n    for (let i = 0; i < data.subjectDetails.length; i++) {\n      let detailSegBox: subjectSegmentation.Rectangle = data.subjectDetails[i].subjectRectangle;\n      outputString += `Subject ${i + 1}:\\nLeft: ${detailSegBox.left}, Top: ${detailSegBox.top}, Width: ${detailSegBox.width}, Height: ${detailSegBox.height}\\n\\n`;\n    }\n  }\n}  
开发实例
import { subjectSegmentation } from '@kit.CoreVisionKit';\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo } from '@kit.CoreFileKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\n\nconst TAG: string = \"ImageSegmentationSample\";\n\n@Entry\n@Component\nstruct Index {\n  @State chooseImage: PixelMap | undefined = undefined\n  @State dataValues: string = ''\n  @State segmentedImage: PixelMap | undefined = undefined\n  @State maxNum: string = '20'\n\n\n  build() {\n    Column() {\n      Image(this.chooseImage)\n        .objectFit(ImageFit.Fill)\n        .height('30%')\n        .accessibilityDescription(\"Image to be segmented\")\n\n      Scroll() {\n        Text(this.dataValues)\n          .copyOption(CopyOptions.LocalDevice)\n          .margin(10)\n          .width('100%')\n      }\n      .height('20%')\n\n      Image(this.segmentedImage)\n        .objectFit(ImageFit.Fill)\n        .height('30%')\n        .accessibilityDescription(\"Segmented subject image\")\n\n      Row() {\n        Text('Max subject count:')\n          .fontSize(16)\n        TextInput({ placeholder: 'Enter max subject count', text: this.maxNum })\n          .type(InputType.Number)\n          .placeholderColor(Color.Gray)\n          .fontSize(16)\n          .backgroundColor(Color.White)\n          .onChange((value: string) => {\n            this.maxNum = value\n          })\n      }\n      .width('80%')\n      .margin(10)\n\n      Button('Select Image')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          this.selectImage()\n        })\n\n      Button('Image Segmentation')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          if (!this.chooseImage) {\n            hilog.error(0x0000, TAG, \"imageSegmentation not have chooseImage\");\n            return\n          }\n          let visionInfo: subjectSegmentation.VisionInfo = {\n            pixelMap: this.chooseImage,\n          };\n          let config: subjectSegmentation.SegmentationConfig = {\n            maxCount: parseInt(this.maxNum),\n            enableSubjectDetails: true,\n            enableSubjectForegroundImage: true,\n          };\n          subjectSegmentation.doSegmentation(visionInfo, config)\n            .then((data: subjectSegmentation.SegmentationResult) => {\n              let outputString = `Subject count: ${data.subjectCount}\\n`;\n              outputString += `Max subject count: ${config.maxCount}\\n`;\n              outputString += `Enable subject details: ${config.enableSubjectDetails ? 'Yes' : 'No'}\\n\\n`;\n              let segBox : subjectSegmentation.Rectangle = data.fullSubject.subjectRectangle;\n              let segBoxString = `Full subject box:\\nLeft: ${segBox.left}, Top: ${segBox.top}, Width: ${segBox.width}, Height: ${segBox.height}\\n\\n`;\n              outputString += segBoxString;\n\n              if (config.enableSubjectDetails) {\n                outputString += 'Individual subject boxes:\\n';\n                if (data.subjectDetails) {\n                  for (let i = 0; i < data.subjectDetails.length; i++) {\n                    let detailSegBox: subjectSegmentation.Rectangle = data.subjectDetails[i].subjectRectangle;\n                    outputString += `Subject ${i + 1}:\\nLeft: ${detailSegBox.left}, Top: ${detailSegBox.top}, Width: ${detailSegBox.width}, Height: ${detailSegBox.height}\\n\\n`;\n                  }\n                }\n              }\n\n              hilog.info(0x0000, TAG, \"Segmentation result: \" + outputString);\n              this.dataValues = outputString;\n\n              if (data.fullSubject && data.fullSubject.foregroundImage) {\n                this.segmentedImage = data.fullSubject.foregroundImage;\n              } else {\n                hilog.warn(0x0000, TAG, \"No foreground image in segmentation result\");\n              }\n            })\n            .catch((error: BusinessError) => {\n              hilog.error(0x0000, TAG, `Image segmentation failed errCode: ${error.code}, errMessage: ${error.message}`);\n              this.dataValues = `Error: ${error.message}`;\n              this.segmentedImage = undefined;\n            });\n        })\n    }\n    .width('100%')\n    .height('80%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  private async selectImage() {\n    let uri = await this.openPhoto()\n    if (uri === undefined) {\n      hilog.error(0x0000, TAG, \"uri is undefined\");\n    }\n    this.loadImage(uri);\n  }\n\n  private openPhoto(): Promise<Array<string>> {\n    return new Promise<Array<string>>((resolve, reject) => {\n      let PhotoSelectOptions = new photoAccessHelper.PhotoSelectOptions();\n      PhotoSelectOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE;\n      PhotoSelectOptions.maxSelectNumber = 1;\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n      hilog.info(0x0000, TAG, 'PhotoViewPicker.select successfully, PhotoSelectResult uri: ');\n      photoPicker.select(PhotoSelectOptions).then((PhotoSelectResult) => {\n        hilog.info(0x0000, TAG, `PhotoViewPicker.select successfully, PhotoSelectResult uri: ${PhotoSelectResult.photoUris}`);\n        resolve(PhotoSelectResult.photoUris)\n      }).catch((err: BusinessError) => {\n        hilog.error(0x0000, TAG, `PhotoViewPicker.select failed with errCode: ${err.code}, errMessage: ${err.message}`);\n        reject();\n      });\n    })\n  }\n\n  private loadImage(names: string[]) {\n    setTimeout(async () => {\n      let imageSource: image.ImageSource | undefined = undefined\n      let fileSource = await fileIo.open(names[0], fileIo.OpenMode.READ_ONLY)\n      imageSource = image.createImageSource(fileSource.fd)\n      this.chooseImage = await imageSource.createPixelMap()\n      hilog.info(0x0000, TAG, `this.chooseImage===${this.chooseImage}`);\n    }, 100\n    )\n  }\n}
