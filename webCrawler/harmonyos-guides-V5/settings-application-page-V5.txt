设置应用页面
本小节以“设置”应用页面为例，介绍如何使用自适应布局能力和响应式布局能力适配不同尺寸窗口。
页面设计
为充分利用屏幕尺寸优势，应用常常有在小屏设备上单栏显示，大屏设备上左右分两栏显示的设计，设置应用页面设计如下。
观察“设置”应用页面设计，不同断点下“设置主页”、“WLAN页面”和“更多WLAN设置页面”几乎完全一致，只是在sm断点下采用单栏显示，在md和lg断点下采用双栏显示。
在前面的典型页面场景中，已经介绍了如何分析及实现不同断点下设计相似的单个页面，本小节将展开介绍如何实现不同断点下存在单栏和双栏设计的场景。
为了方便读者理解，本小节将围绕以下三个问题进行介绍。
 如何实现单/双栏的显示效果 如何实现点击跳转或刷新 如何实现多级跳转 
如何实现单/双栏的显示效果
开发者可以使用Row、Column、RowSplit等基础的组件，实现分栏显示的效果，但是需要较多的开发工作量。方舟开发框架在API 9重构了Navigation组件，开发者可以通过配置Navigation组件的属性，控制其按照单栏或双栏的效果进行显示。
Navigation组件由NavBar和Content两部分区域组成，Navigation组件支持Stack、Split以及Auto三种模式。Stack及Split模式下Navigation组件的表现如下图所示。
 Stack模式  Split模式  Auto模式 Auto模式是指Navigation组件可以根据应用窗口尺寸，自动选择合适的模式：窗口宽度小于520vp时，采用Stack模式显示；窗口宽度大于等于520vp时，采用Split模式显示。当窗口尺寸发生改变时，Navigation组件也会自动在Stack模式和Split模式之间切换。 
 Navigation组件提供的title、navBarWidth、navBarPosition等属性来调整其显示效果。Navigation组件样式的配置与其它组件类似，这里不做赘述。 首次加载Navigation组件所在的页面时，如果Navigation组件处于Split模式，Navigation组件会自动激活其第一个NavRouter子节点（后文会展开介绍NavRouter）来刷新Content区域的显示。 
设置主页的核心代码如下所示。Navigation组件默认处于Auto模式，其样式会根据应用窗口尺寸在单栏和双栏之间自动切换。
import { SettingList } from '@ohos/settingItems';\n\n@Entry\n@Component\nstruct Index { \n  build() {\n    Navigation() {\n      SettingList()\n    }\n    .title($r('app.string.settings'))\n    .navBarWidth('40%')\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r(\"sys.color.ohos_id_color_sub_background\"))\n  }\n}
//核心代码 SettingList.ets\nimport { MainItem } from '../components/MainItem';\nimport { ItemGroup } from '../components/ItemGroup';\nimport { SearchBox } from '../components/SearchBox';\nimport { MoreConnectionsItem } from '../moreconnections/MoreConnectionsItem';\nimport { WlanSettingItem } from '../wlan/WlanSettingItem';\n        \nclass  ItemObj {\n  title?: Resource\n  tag?: Resource\n  icon?:Resource\n}\nlet bluetoothTab:ItemObj={\n  title: $r('app.string.bluetoothTab'),\n  tag: $r('app.string.enabled'),\n  icon: $r('app.media.blueTooth'),\n}\nlet mobileData:ItemObj={\n  title: $r('app.string.mobileData'),\n  icon: $r('app.media.mobileData'),\n}\nlet brightnessTab:ItemObj={\n  title: $r('app.string.brightnessTab'),\n  icon: $r('app.media.displayAndBrightness'),\n}\nlet volumeControlTab:ItemObj={\n  title: $r('app.string.volumeControlTab'),\n  icon: $r('app.media.volume'),\n}\nlet biometricsAndPassword:ItemObj={\n  title: $r('app.string.biometricsAndPassword'),\n  icon: $r('app.media.biometricsAndPassword'),\n}\nlet applyTab:ItemObj={\n  title: $r('app.string.applyTab'),\n  icon: $r('app.media.application'),\n}\nlet storageTab:ItemObj={\n  title: $r('app.string.storageTab'),\n  icon: $r('app.media.storage'),\n}\nlet security:ItemObj={\n  title: $r('app.string.security'),\n  icon: $r('app.media.security'),\n}\nlet privacy:ItemObj={\n  title: $r('app.string.privacy'),\n  icon: $r('app.media.privacy'),\n}\nlet usersAccountsTab:ItemObj={\n  title: $r('app.string.usersAccountsTab'),\n  icon: $r('app.media.userAccounts'),\n}\nlet systemTab:ItemObj={\n  title: $r('app.string.systemTab'),\n  icon: $r('app.media.system'),\n}\nlet aboutTab:ItemObj={\n  title: $r('app.string.aboutTab'),\n  icon: $r('app.media.aboutDevice'),\n}\n        \n@Component\nexport struct SettingList {\n  @Builder\n  CustomDivider() {\n    Divider()\n      .strokeWidth('1px')\n      .color($r('sys.color.ohos_id_color_list_separator'))\n      .margin({ left: 48, right: 8 })\n  }\n\n   build() {\n     List({ space: 12 }) {\n       ListItem() {\n        SearchBox()\n       }\n       .padding({ top: 8, bottom: 8 })\n       .width('100%')\n\n      ListItem() {\n        ItemGroup() {\n          WlanSettingItem()\n\n          this.CustomDivider()\n\n          MainItem(bluetoothTab)\n\n          this.CustomDivider()\n\n          MainItem(mobileData)\n\n          this.CustomDivider()\n          MoreConnectionsItem()\n        }\n      }\n\n      ListItem() {\n        ItemGroup() {\n          MainItem(brightnessTab)\n        }\n      }\n\n      ListItem() {\n        ItemGroup() {\n          MainItem(volumeControlTab)\n        }\n      }\n\n      ListItem() {\n        ItemGroup() {\n          MainItem(biometricsAndPassword)\n\n          this.CustomDivider()\n\n          MainItem(applyTab)\n\n          this.CustomDivider()\n\n          MainItem(storageTab)\n\n          this.CustomDivider()\n\n          MainItem(security)\n\n          this.CustomDivider()\n\n          MainItem(privacy)\n        }\n      }\n\n      ListItem() {\n        ItemGroup() {\n          MainItem(usersAccountsTab)\n\n          this.CustomDivider()\n\n          MainItem(systemTab)\n\n          this.CustomDivider()\n\n          MainItem(aboutTab)\n        }\n      }\n\n    }\n    .padding({ left: 12, right: 12 })\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n   }\n}        \n  
如何实现点击跳转或刷新
Navigation组件通常搭配NavRouter组件以及NavDestination组件一起使用：
 NavRouter组件用于控制Navigation组件Content区域的显示和刷新逻辑。 NavDestination组件用于实际刷新Navigation组件Content区域的显示。 
[h2]刷新控制
NavRouter组件用于控制Navigation组件中Content区域的刷新逻辑，其必须包含两个子节点。
NavRouter组件默认提供了点击响应处理，不需要开发者自定义点击事件逻辑。另外，NavRouter组件还提供了onStateChange回调事件，用于通知开发者NavRouter的状态：用户点击NavRouter，激活NavRouter并加载对应的NavDestination子组件时，回调onStateChange(true)；NavRouter对应的NavDestination子组件不再显示时，回调onStateChange(false)。
结合设置应用的具体场景来看，上图1号小红框是NavRouter的第一个子节点，2号红框是NavRouter的第二个子节点，相应的核心代码实现如下。
import { MainItem } from '../components/MainItem';\nimport { WlanMoreSettingItem } from '../components/WlanMoreSettingItem';\nimport { SubItemToggle } from '../components/SubItemToggle';\nimport { SubItemWifi } from '../components/SubItemWifi';\nimport { ItemDescription } from '../components/ItemDescription';\nimport { ItemGroup } from '../components/ItemGroup';\n\nclass  MainItemObj {\n  title?: Resource\n  tag?: string\n  icon?:Resource\n  label?: string\n}\nlet mainItem:MainItemObj={\n  title: $r('app.string.wifiTab'),\n  tag: 'UX',\n  icon: $r('app.media.wlan'),\n  label: 'WLAN'\n}\n@Component\nexport struct WlanSettingItem {\n  @LocalStorageLink('selectedLabel') selectedLabel: string  = ''\n\n  build() {\n    Column() {\n      NavRouter() {\n        MainItem(mainItem)\n\n        NavDestination() {\n          WlanSetting()\n        }\n        .title($r('app.string.wifiTab'))\n        .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n      }\n    }\n  }\n}\n@Component\nstruct WlanSetting {\n  @Builder CustomDivider() {\n    Divider()\n      .strokeWidth('1px')\n      .color($r('sys.color.ohos_id_color_list_separator'))\n      .margin({left: 12, right: 8})\n  }\n\n  build() {\n    Column() {\n      Column() {\n        ItemGroup() {\n          SubItemToggle({title: $r('app.string.wifiTab'), isOn: true})\n        }\n\n        Row().height(16)\n\n        ItemGroup() {\n          WlanMoreSettingItem()\n        }\n      }\n      .margin({bottom: 19.5})\n      .flexShrink(0)\n\n      Scroll() {\n        Column() {\n          ItemDescription({description: $r('app.string.wifiTipConnectedWLAN')})\n            .padding({\n              left: 12,\n              right: 12,\n              bottom: 9.5\n            })\n\n          ItemGroup() {\n            SubItemWifi({\n              title: 'UX',\n              subTitle: $r('app.string.wifiSummaryConnected'),\n              isConnected: true,\n              icon: $r('app.media.ic_wifi_signal_4_dark')\n            })\n          }\n\n          Column() {\n            ItemDescription({description: $r('app.string.wifiTipValidWLAN')})\n              .margin({\n                left: 12,\n                right: 12,\n                top: 19.5,\n                bottom: 9.5\n              })\n\n            ItemGroup() {\n              SubItemWifi({\n                title: 'Huwe-yee',\n                subTitle: $r('app.string.wifiSummaryEncrypted'),\n                isConnected: false,\n                icon: $r('app.media.ic_wifi_lock_signal_4_dark')\n              })\n\n              this.CustomDivider()\n\n              SubItemWifi({\n                title: 'UX-5G',\n                subTitle: $r('app.string.wifiSummaryOpen'),\n                isConnected: false,\n                icon: $r('app.media.ic_wifi_signal_4_dark')\n              })\n\n              this.CustomDivider()\n\n              SubItemWifi({\n                title: 'E1-AP',\n                subTitle: $r('app.string.wifiSummarySaveOpen'),\n                isConnected: false,\n                icon: $r('app.media.ic_wifi_signal_4_dark')\n              })\n            }\n          }\n        }\n      }\n      .scrollable(ScrollDirection.Vertical)\n      .scrollBar(BarState.Off)\n      .width('100%')\n      .flexShrink(1)\n    }\n    .width('100%')\n    .height('100%')\n    .padding({left: 12, right: 12})\n  }\n}
[h2]显示刷新
NavDestination组件用于实际刷新Navigation组件Content区域的显示。激活后的NavRouter对应的NavDestination组件，会占满整个Content区域并刷新其显示。
开发者可以通过NavDestination组件提供的如下属性，调整其最终显示效果：
 backgroundColor：设置NavDestination组件的背景色。 title：自定义NavDestination组件的标题。 hideTitleBar：隐藏NavDestination组件的标题栏。 
特别的，Navigation组件会根据当前的状态决定是否在NavDestination组件标题栏起始部分自动添加返回键图标。当Navigation组件添加了返回键图标时，还可以自动响应及处理系统三键导航中的返回键事件。
如何实现多级跳转
可以在NavDesination组件中，继续使用NavRouter组件，以实现多级跳转。多级跳转场景下，Navigation组件同样会根据当前的状态决定是否自动添加返回键图标及响应系统三键导航中的返回键事件。
结合具体场景，红框3是一个NavRouter组件，点击后可以控制Navigation组件中的Content区域刷新为红框4对应的NavDestination组件吗，其核心代码实现如下所示。
import { SubItemArrow } from '../components/SubItemArrow';//组件请参考相关示例\nimport { SubItemToggle } from '../components/SubItemToggle';\nimport { ItemGroup } from '../components/ItemGroup';\nimport { ItemDescription } from '../components/ItemDescription';\n\nclass SubItemArrowObj{\n  title?: Resource\n}\nlet subItemArrow:SubItemArrowObj={\n  title: $r('app.string.moreWlanSettings')\n}\n@Component\nexport struct WlanMoreSettingItem {\n  @LocalStorageLink('selectedLabel') selectedLabel: string = ''\n\n  build() {\n    NavRouter() {\n      SubItemArrow(subItemArrow)\n\n      NavDestination() {\n        WlanMoreSetting()\n      }\n      .title($r('app.string.moreWlanSettings'))\n      .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n    }\n  }\n}\n\n@Component\nexport struct WlanMoreSetting {\n  build() {\n    Scroll() {\n      Column() {\n        ItemGroup() {\n          SubItemArrow({\n            title: $r('app.string.wlanPlus'),\n            tag: $r('app.string.enabled')\n          })\n        }\n        ItemDescription({description: $r('app.string.wlanPlusTip')})\n          .margin({\n            top: 8,\n            bottom: 24,\n            left: 12,\n            right: 12\n          })\n\n        ItemGroup() {\n          SubItemArrow({ title: $r('app.string.wlanDirect') })\n        }\n\n        Blank().height(12)\n\n        ItemGroup() {\n          SubItemToggle({title: $r('app.string.wlanSecurityCheck')})\n        }\n\n        ItemDescription({description: $r('app.string.wlanSecurityCheckTip')})\n          .margin({\n            top: 8,\n            bottom: 24,\n            left: 12,\n            right: 12\n          })\n\n        ItemGroup() {\n          SubItemArrow({title: $r('app.string.savedWlan')})\n          Divider()\n            .strokeWidth('1px')\n            .color($r('sys.color.ohos_id_color_list_separator'))\n            .margin({left: 12, right: 8})\n          SubItemArrow({title: $r('app.string.installCertificates')})\n        }\n      }\n      .backgroundColor($r('sys.color.ohos_id_color_sub_background'))\n      .padding({left: 12, right: 12})\n    }\n    .scrollBar(BarState.Off)\n    .width('100%')\n  }\n}
总结
本示例的基础导航结构上图所示：
 激活SettingList中的WLANSettingItem，可以加载及显示WlanSetting。 激活WlanSetting中的WlanMoreSettingItem，可以加载及显示WlanMoreSetting。 
Navigation组件支持自动切换单栏和双栏的显示效果，同时可以根据当前状态自动添加返回键及响应系统的返回键事件。借助Navigation组件，开发者不用关心单栏和双栏场景的差异而更关注于应用本身，极大的减少开发工作量及提高开发效率。
示例代码
 一多设置典型页面 
