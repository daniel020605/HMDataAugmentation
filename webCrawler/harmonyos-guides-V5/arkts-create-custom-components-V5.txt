创建自定义组件
在ArkUI中，UI显示的内容均为组件，由框架直接提供的称为系统组件，由开发者定义的称为自定义组件。在进行 UI 界面开发时，通常不是简单的将系统组件进行组合使用，而是需要考虑代码可复用性、业务逻辑与UI分离，后续版本演进等因素。因此，将UI和部分业务逻辑封装成自定义组件是不可或缺的能力。
自定义组件具有以下特点：
可组合：允许开发者组合使用系统组件、及其属性和方法。 可重用：自定义组件可以被其他组件重用，并作为不同的实例在不同的父组件或容器中使用。 数据驱动UI更新：通过状态变量的改变，来驱动UI的刷新。 
自定义组件的基本用法
以下示例展示了自定义组件的基本用法。
@Component\nstruct HelloComponent {\n  @State message: string = 'Hello, World!';\n\n  build() {\n    // HelloComponent自定义组件组合系统组件Row和Text\n    Row() {\n      Text(this.message)\n        .onClick(() => {\n          // 状态变量message的改变驱动UI刷新，UI从'Hello, World!'刷新为'Hello, ArkUI!'\n          this.message = 'Hello, ArkUI!';\n        })\n    }\n  }\n}
如果在另外的文件中引用该自定义组件，需要使用export关键字导出，并在使用的页面import该自定义组件。
HelloComponent可以在其他自定义组件中的build()函数中多次创建，实现自定义组件的重用。
@Entry\n@Component\nstruct ParentComponent {\n  build() {\n    Column() {\n      Text('ArkUI message')\n      HelloComponent({ message: 'Hello World!' });\n      Divider()\n      HelloComponent({ message: '你好，世界!' });\n    }\n  }\n}
要完全理解上面的示例，需要了解自定义组件的以下概念定义，本文将在后面的小节中介绍：
自定义组件的基本结构 成员函数/变量 自定义组件的参数规定 build()函数 自定义组件通用样式 
自定义组件的基本结构
[h2]struct
自定义组件基于struct实现，struct + 自定义组件名 + {...}的组合构成自定义组件，不能有继承关系。对于struct的实例化，可以省略new。
自定义组件名、类名、函数名不能和系统组件名相同。
[h2]@Component
@Component装饰器仅能装饰struct关键字声明的数据结构。struct被@Component装饰后具备组件化的能力，需要实现build方法描述UI，一个struct只能被一个@Component装饰。@Component可以接受一个可选的bool类型参数。
从API version 9开始，该装饰器支持在ArkTS卡片中使用。
从API version 11开始，@Component可以接受一个可选的bool类型参数。
@Component\nstruct MyComponent {\n}
freezeWhenInactive11+
 组件冻结选项。
@Component({ freezeWhenInactive: true })\nstruct MyComponent {\n}
[h2]build()函数
build()函数用于定义自定义组件的声明式UI描述，自定义组件必须定义build()函数。
@Component\nstruct MyComponent {\n  build() {\n  }\n}
[h2]@Entry
@Entry装饰的自定义组件将作为UI页面的入口。在单个UI页面中，最多可以使用@Entry装饰一个自定义组件。@Entry可以接受一个可选的LocalStorage的参数。
从API version 9开始，该装饰器支持在ArkTS卡片中使用。
从API version 10开始，@Entry可以接受一个可选的LocalStorage的参数或者一个可选的EntryOptions参数。
从API version 11开始，该装饰器支持在元服务中使用。
@Entry\n@Component\nstruct MyComponent {\n}
EntryOptions10+
 命名路由跳转选项。
当useSharedStorage设置为true，并且storage也被赋值时，useSharedStorage的值优先级更高。
@Entry({ routeName : 'myPage' })\n@Component\nstruct MyComponent {\n}
[h2]@Reusable
@Reusable装饰的自定义组件具备可复用能力。详细请参考：@Reusable装饰器：组件复用。
从API version 10开始，该装饰器支持在ArkTS卡片中使用。
@Reusable\n@Component\nstruct MyComponent {\n}
成员函数/变量
自定义组件除了必须要实现build()函数外，还可以实现其他成员函数，成员函数具有以下约束：
自定义组件的成员函数为私有的，且不建议声明成静态函数。
自定义组件可以包含成员变量，成员变量具有以下约束：
自定义组件的成员变量为私有的，且不建议声明成静态变量。 自定义组件的成员变量本地初始化有些是可选的，有些是必选的。具体是否需要本地初始化，是否需要从父组件通过参数传递初始化子组件的成员变量，请参考状态管理。 
自定义组件的参数规定
从上文的示例中，我们已经了解到，可以在build方法里创建自定义组件，在创建自定义组件的过程中，根据装饰器的规则来初始化自定义组件的参数。
@Component\nstruct MyComponent {\n  private countDownFrom: number = 0;\n  private color: Color = Color.Blue;\n\n  build() {\n  }\n}\n\n@Entry\n@Component\nstruct ParentComponent {\n  private someColor: Color = Color.Pink;\n\n  build() {\n    Column() {\n      // 创建MyComponent实例，并将创建MyComponent成员变量countDownFrom初始化为10，将成员变量color初始化为this.someColor\n      MyComponent({ countDownFrom: 10, color: this.someColor })\n    }\n  }\n}
下面的示例代码将父组件中的函数传递给子组件，并在子组件中调用。
@Entry\n@Component\nstruct Parent {\n  @State cnt: number = 0\n  submit: () => void = () => {\n    this.cnt++;\n  }\n\n  build() {\n    Column() {\n      Text(`${this.cnt}`)\n      Son({ submitArrow: this.submit })\n    }\n  }\n}\n\n@Component\nstruct Son {\n  submitArrow?: () => void\n\n  build() {\n    Row() {\n      Button('add')\n        .width(80)\n        .onClick(() => {\n          if (this.submitArrow) {\n            this.submitArrow()\n          }\n        })\n    }\n    .height(56)\n  }\n}
build()函数
所有声明在build()函数的语句，我们统称为UI描述，UI描述需要遵循以下规则：
@Entry装饰的自定义组件，其build()函数下的根节点唯一且必要，且必须为容器组件，其中ForEach禁止作为根节点。 @Component装饰的自定义组件，其build()函数下的根节点唯一且必要，可以为非容器组件，其中ForEach禁止作为根节点。 @Entry\n@Component\nstruct MyComponent {\n  build() {\n    // 根节点唯一且必要，必须为容器组件\n    Row() {\n      ChildComponent() \n    }\n  }\n}\n\n@Component\nstruct ChildComponent {\n  build() {\n    // 根节点唯一且必要，可为非容器组件\n    Image('test.jpg')\n  }\n} 不允许声明本地变量，反例如下。 build() {\n  // 反例：不允许声明本地变量\n  let num: number = 1;\n} 不允许在UI描述里直接使用console.info，但允许在方法或者函数里使用，反例如下。 build() {\n  // 反例：不允许console.info\n  console.info('print debug log');\n} 不允许创建本地的作用域，反例如下。 build() {\n  // 反例：不允许本地作用域\n  {\n    // ...\n  }\n} 不允许调用没有用@Builder装饰的方法，允许系统组件的参数是TS方法的返回值。 @Component\nstruct ParentComponent {\n  doSomeCalculations() {\n  }\n\n  calcTextValue(): string {\n    return 'Hello World';\n  }\n\n  @Builder doSomeRender() {\n    Text(`Hello World`)\n  }\n\n  build() {\n    Column() {\n      // 反例：不能调用没有用@Builder装饰的方法\n      this.doSomeCalculations();\n      // 正例：可以调用\n      this.doSomeRender();\n      // 正例：参数可以为调用TS方法的返回值\n      Text(this.calcTextValue())\n    }\n  }\n} 不允许使用switch语法，如果需要使用条件判断，请使用if。示例如下。 build() {\n  Column() {\n    // 反例：不允许使用switch语法\n    switch (expression) {\n      case 1:\n        Text('...')\n        break;\n      case 2:\n        Image('...')\n        break;\n      default:\n        Text('...')\n        break;\n    }\n    // 正例：使用if\n    if(expression == 1) {\n      Text('...')\n    } else if(expression == 2) {\n      Image('...')\n    } else {\n      Text('...')\n    }\n  }\n} 不允许使用表达式，请使用if组件，示例如下。 build() {\n  Column() {\n    // 反例：不允许使用表达式\n    (this.aVar > 10) ? Text('...') : Image('...')\n\n    // 正例：使用if判断\n    if(this.aVar > 10) {\n      Text('...')\n    } else {\n      Image('...')\n    }\n  }\n} 不允许直接改变状态变量，反例如下。详细分析见@State常见问题：不允许在build里改状态变量。 @Component\nstruct MyComponent {\n  @State textColor: Color = Color.Yellow;\n  @State columnColor: Color = Color.Green;\n  @State count: number = 1;\n  build() {\n    Column() {\n      // 应避免直接在Text组件内改变count的值\n      Text(`${this.count++}`)\n        .width(50)\n        .height(50)\n        .fontColor(this.textColor)\n        .onClick(() => {\n          this.columnColor = Color.Red;\n        })\n      Button(\"change textColor\").onClick(() =>{\n        this.textColor = Color.Pink;\n      })\n    }\n    .backgroundColor(this.columnColor)\n  }\n} 在ArkUI状态管理中，状态驱动UI更新。  所以，不能在自定义组件的build()或@Builder方法里直接改变状态变量，这可能会造成循环渲染的风险。Text('${this.count++}')在全量更新或最小化更新会产生不同的影响： 全量更新（API8及以前版本）： ArkUI可能会陷入一个无限的重渲染的循环里，因为Text组件的每一次渲染都会改变应用的状态，就会再引起下一轮渲染的开启。 当 this.columnColor 更改时，都会执行整个build构建函数，因此，Text(${this.count++})绑定的文本也会更改，每次重新渲染Text(${this.count++})，又会使this.count状态变量更新，导致新一轮的build执行，从而陷入无限循环。最小化更新（API9-至今版本）： 当 this.columnColor 更改时，只有Column组件会更新，Text组件不会更改。 只当 this.textColor 更改时，会去更新整个Text组件，其所有属性函数都会执行，所以会看到Text(${this.count++})自增。因为目前UI以组件为单位进行更新，如果组件上某一个属性发生改变，会更新整体的组件。所以整体的更新链路是：this.textColor = Color.Pink -> Text组件整体更新->this.count++ ->Text组件整体更新。值得注意的是，这种写法在初次渲染时会导致Text组件渲染两次，从而对性能产生影响。 build函数中更改应用状态的行为可能会比上面的示例更加隐蔽，比如： 在@Builder，@Extend或@Styles方法内改变状态变量 。 在计算参数时调用函数中改变应用状态变量，例如 Text('${this.calcLabel()}')。 对当前数组做出修改，sort()改变了数组this.arr，随后的filter方法会返回一个新的数组。 // 反例\n@State arr : Array<...> = [ ... ];\nForEach(this.arr.sort().filter(...), \n  item => { \n  // ...\n})\n// 正确的执行方式为：filter返回一个新数组，后面的sort方法才不会改变原数组this.arr\nForEach(this.arr.filter(...).sort(), \n  item => { \n  // ...\n})  
自定义组件通用样式
自定义组件通过“.”链式调用的形式设置通用样式。
@Component\nstruct ChildComponent {\n  build() {\n    Button(`Hello World`)\n  }\n}\n\n@Entry\n@Component\nstruct MyComponent {\n  build() {\n    Row() {\n      ChildComponent()\n        .width(200)\n        .height(300)\n        .backgroundColor(Color.Red)\n    }\n  }\n}
ArkUI给自定义组件设置样式时，相当于给ChildComponent套了一个不可见的容器组件，而这些样式是设置在容器组件上的，而非直接设置给ChildComponent的Button组件。通过渲染结果我们可以很清楚的看到，背景颜色红色并没有直接生效在Button上，而是生效在Button所处的开发者不可见的容器组件上。
