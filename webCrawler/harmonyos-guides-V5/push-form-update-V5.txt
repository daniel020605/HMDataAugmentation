推送卡片刷新消息
场景介绍
如今衣食住行娱乐影音应用占据了大多数人的手机，一部手机可以满足日常大多需求，但对需要经常查看或进行简单操作的应用来说，总需要用户点开应用体验较繁琐。针对此种场景，HarmonyOS提供了Form Kit（卡片开发服务），您可以将应用的重要信息或操作前置到卡片，以达到服务直达、减少体验层级的目的。
面对需要实时更新信息的应用卡片，Push Kit向开发者提供了卡片刷新服务。应用通过集成Push Kit后获取Push Token，基于Push Kit的系统级通道，便可以在合适场景向用户即时推送卡片内容，从而提升用户的感知度和活跃度。
频控规则
调测阶段，每个项目每日全网最多可推送1000条测试消息。发送测试消息需设置testMessage为true。
正式发布阶段，单设备单应用下每日推送消息总条数受设备消息频控限制，所有场景化消息发送条数不超过3000条。
单张服务卡片刷新消息受应用是否上架影响：
 已上架：单设备单应用下单张卡片每日限制发送2条消息。 未上架：单设备单应用下单张卡片每日限制发送5条消息。 
不论是测试消息还是正式消息，卡片刷新消息单次发送仅能携带一个Token。
开发步骤
[h2]开发卡片
推送卡片刷新消息前，您需先完成本地卡片的开发。
 参见创建一个ArkTS卡片，完成本地服务卡片的创建。 在项目模块级别下的src/main/resources/base/profile/form_config.json中配置dataProxyEnabled字段为true，开启卡片代理刷新功能。{\n  \"forms\": [\n    {\n      \"name\": \"widget\",\n      \"src\": \"./ets/widget/pages/WidgetCard.ets\",\n      \"uiSyntax\": \"arkts\",\n      \"window\": {\n        \"designWidth\": 720,\n        \"autoDesignWidth\": true\n      },\n      \"colorMode\": \"auto\",\n      \"isDefault\": true,\n      \"updateEnabled\": true,\n      \"updateDuration\": 1,\n      \"scheduledUpdateTime\": \"10:30\",\n      \"defaultDimension\": \"2*2\",\n      \"supportDimensions\": [\"2*2\"],\n      \"dataProxyEnabled\": true\n    }\n  ]\n}  在卡片生命周期管理文件（下以EntryFormAbility为例）的onAddForm()回调中获取formId，定义需要在卡片页面文件（下以WidgetCard为例）中和通过Push Kit要刷新的字段，如下以text_key和image_key为例。import { formBindingData, formInfo, FormExtensionAbility } from '@kit.FormKit';\nimport { Want } from '@kit.AbilityKit';\n\nexport default class EntryFormAbility extends FormExtensionAbility {\n  onAddForm(want: Want): formBindingData.FormBindingData {\n    // 获取formId\n    const formId = want.parameters![formInfo.FormParam.IDENTITY_KEY] as string;\n\n    // 定义需要在WidgetCard中刷新的字段\n    class CreateFormData {\n      formId: string = '';\n      text_key: string = '';\n      image_key: string = '';\n    }\n\n    const obj: CreateFormData = {\n      formId: formId,\n      text_key: '默认文本',\n      image_key: ''\n    }\n    const bindingData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\n\n    // 定义需要通过Push Kit代理刷新的字段，每个key均需要在上面bindingData中定义\n    const text_key: formBindingData.ProxyData = {\n      key: 'text_key',\n      subscriberId: formId\n    };\n    const image_key: formBindingData.ProxyData = {\n      key: 'image_key',\n      subscriberId: formId\n    };\n    bindingData.proxies = [text_key, image_key];\n    return bindingData;\n  }\n}  卡片页面文件（ src/main/ets/widget/pages/WidgetCard.ets为例）中，创建LocalStorage变量并与@Entry装饰器绑定，使用@LocalStorageProp装饰器创建key-value的变量。         本文创建了formId、text和image三个变量，对应的key为formId、text_key和image_key，需要注意的是卡片页面布局中image对应的组件是Image图片组件，图片组件传递的变量必须以 memory:// 开头。        // 定义页面级的UI状态存储LocalStorage\nconst storage = new LocalStorage();\n\n// 绑定\n@Entry(storage)\n@Component\nstruct WidgetCard {\n  @LocalStorageProp('formId') formId: string = '';\n  @LocalStorageProp('text_key') text: string = '';\n  @LocalStorageProp('image_key') image: string = '';\n\n  build() {\n    Flex({ direction: FlexDirection.Column }) {\n      Row() {\n        Text() {\n          // Span是Text组件的子组件，用于显示行内文本\n          Span('formID:')\n          Span(this.formId)\n        }\n        .fontSize(10)\n      }\n\n      Row() {\n        Text() {\n          Span('文本:')\n          Span(this.text)\n        }\n        .fontSize(10)\n      }\n\n      Row() {\n        if (this.image) {\n          Image('memory://' + this.image).height(80)\n        }\n      }\n    }\n    .padding(10)\n    .onClick(() => {\n      postCardAction(this, {\n        action: 'router',\n        abilityName: 'MainAbility', // 请配置为应用实际的abilityName\n      });\n    })\n  }\n}   
[h2]推送卡片刷新消息
 参见指导获取Push Token。 （可选）建议您将formId、pushToken等信息上报到应用服务端，用于向应用发送卡片刷新消息。// 以下为伪代码\nimport { Want } from '@kit.AbilityKit';\nimport { pushService } from '@kit.PushKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { formInfo } from '@kit.FormKit';\n\nasync function saveFormInfo(want: Want): Promise<void> {\n  try {\n    const formId = want.parameters![formInfo.FormParam.IDENTITY_KEY] as string;\n    const moduleName = want.moduleName;\n    const abilityName = want.abilityName;\n    const formName = want.parameters![formInfo.FormParam.NAME_KEY] as string;\n    const pushToken: string = await pushService.getToken();\n\n    // 将formId, moduleName, abilityName, formName, pushToken 上报到应用服务端\n  } catch (err) {\n    let e: BusinessError = err as BusinessError;\n    hilog.error(0x0000, 'testTag', 'Failed to save form info: %{public}d %{public}s', e.code, e.message);\n  }\n}  应用服务端调用REST API推送卡片刷新消息，消息详情可参见场景化消息API接口功能介绍，请求示例如下：// Request URL\nPOST https://push-api.cloud.huawei.com/v3/[projectId]/messages:send\n\n// Request Header\nContent-Type: application/json\nAuthorization: Bearer eyJr*****OiIx---****.eyJh*****iJodHR--***.QRod*****4Gp---**** \npush-type: 1\n\n// Request Body\n{\n    \"payload\": {\n    \"moduleName\": \"entry\",\n    \"abilityName\": \"EntryFormAbility\",\n    \"formName\": \"widget\",\n    \"formId\": 423434262,\n    \"version\": 123456,\n    \"formData\": {\n      \"text_key\": \"刷新文本内容\"\n    },\n    \"images\": [\n      {\n        \"keyName\": \"image_key\",\n        \"url\": \"https://***.png\",\n        \"require\": 1\n      }\n    ]\n  },\n  \"target\": {\n    \"token\": [\n      \"IQAAAAC*************************dRH7_bPbfMrVfsYw\"\n    ]\n  },\n  \"pushOptions\": {\n     \"testMessage\": true\n  }\n}  [projectId]：项目ID，登录AppGallery Connect网站，选择“我的项目”，在项目列表中选择对应的项目，左侧导航栏选择“项目设置”，在该页面获取。 Authorization：JWT格式字符串，可参见Authorization获取。 push-type：1表示服务卡片刷新场景。 moduleName：项目模块级别下的 src/main/module.json5 中的 module 标签下的name值。 abilityName：项目模块级别下的src/main/module.json5中的extensionAbilities标签下的服务卡片的ability名称。 formName：项目模块级别下的src/main/resources/base/profile/form_config.json中的forms标签下的服务卡片的名称。下图以卡片配置文件form_config为例： version：当前卡片刷新消息的版本号，新的卡片刷新消息的版本号需大于当前卡片刷新消息版本号，否则会刷新失败。详情参见version。 formId：服务卡片的实例ID，当卡片的onAddForm()方法被调用时（卡片使用方添加卡片至桌面）进行获取。最大值为2^31-1。 formData：填写待刷新服务卡片的业务数据，该数据来源于项目模块级别下的src/main/ets/widget/pages/WidgetCard.ets文件下的声明式范式组件名称。下图以卡片页面文件WidgetCard为例： images：待刷新服务卡片业务数据中的图片数据，其中keyName为您服务卡片中图片控件的key值，url为图片的地址，下图以卡片页面文件WidgetCard为例：     推送服务禁止推送包含敏感信息的图片。 支持图片的格式为PNG、JPG、JPEG，图片文件最大为512KB，图片长*宽<12800像素。   require：图片刷新策略控制，“0”表示如果图片下载失败，仅刷新文字；“1”表示如果图片下载失败，则不进行刷新操作。 token：Push Token，可参见获取Push Token获取。 testMessage：测试消息标识，true表示测试消息。每个项目每天限制发送1000条测试消息，单次推送仅能发送一个Token。详情请参见testMessage。   
