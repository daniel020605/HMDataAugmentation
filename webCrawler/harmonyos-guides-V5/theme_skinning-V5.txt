设置应用内主题换肤
概述
对于采用ArkTS开发的应用，提供了应用内组件的主题换肤功能，支持局部的深浅色切换及动态换肤。目前，该功能只支持设置应用内主题换肤，暂不支持在UIAbility或窗口层面进行主题设置，同时也不支持C-API和Node-API。
自定义主题色
当应用需要使用换肤功能时，应自定义主题颜色。CustomTheme用于自定义主题色的内容，其属性可选，仅需要复写需修改的部分，未修改内容将继承系统默认设置，可参考系统默认的token颜色值。请参照以下示例自定义主题色：
  import { CustomColors, CustomTheme } from '@kit.ArkUI'\n\n  export class AppColors implements CustomColors {\n    //自定义主题色\n    brand: ResourceColor = '#FF75D9';\n  }\n\n  export class AppTheme implements CustomTheme {\n    public colors: AppColors = new AppColors()\n  }\n  \n  export let gAppTheme: CustomTheme = new AppTheme()
设置应用内组件自定义主题色
 可以在页面入口处统一设置应用内组件自定义主题色，但需确保在页面build前执行ThemeControl。 其中，onWillApplyTheme回调函数用于使自定义组件获取当前生效的Theme对象。   import { Theme, ThemeControl } from '@kit.ArkUI'\n  import { gAppTheme } from './AppTheme'\n  \n  //在页面build前执行ThemeControl\n  ThemeControl.setDefaultTheme(gAppTheme)\n\n  @Entry\n  @Component\n  struct DisplayPage {\n    @State menuItemColor: ResourceColor = $r('sys.color.background_primary')\n    \n    onWillApplyTheme(theme: Theme) {\n      this.menuItemColor = theme.colors.backgroundPrimary;\n    }\n  \n    build() {\n      Column() {\n        List({ space: 10 }) {\n          ListItem() {\n            Column({ space: '5vp' }) {\n              Text('Color mode')\n                .margin({ top: '5vp', left: '14fp' })\n                .width('100%')\n              Row() {\n                Column() {\n                  Text('Light')\n                    .fontSize('16fp')\n                    .textAlign(TextAlign.Start)\n                    .alignSelf(ItemAlign.Center)\n                  Radio({ group: 'light or dark', value: 'light' })\n                    .checked(true)\n                }\n                .width('50%')\n\n                Column() {\n                  Text('Dark')\n                    .fontSize('16fp')\n                    .textAlign(TextAlign.Start)\n                    .alignSelf(ItemAlign.Center)\n                  Radio({ group: 'light or dark', value: 'dark' })\n                }\n                .width('50%')\n              }\n            }\n            .width('100%')\n            .height('90vp')\n            .borderRadius('10vp')\n            .backgroundColor(this.menuItemColor)\n          }\n\n          ListItem() {\n            Column() {\n              Text('Brightness')\n                .width('100%')\n                .margin({ top: '5vp', left: '14fp' })\n              Slider({ value: 40, max: 100 })\n            }\n            .width('100%')\n            .height('70vp')\n            .borderRadius('10vp')\n            .backgroundColor(this.menuItemColor)\n          }\n\n          ListItem() {\n            Column() {\n              Row() {\n                Column({ space: '5vp' }) {\n                  Text('Touch sensitivity')\n                    .fontSize('16fp')\n                    .textAlign(TextAlign.Start)\n                    .width('100%')\n                  Text('Increase the touch sensitivity of your screen' +\n                    ' for use with screen protectors')\n                    .fontSize('12fp')\n                    .fontColor(Color.Blue)\n                    .textAlign(TextAlign.Start)\n                    .width('100%')\n                }\n                .alignSelf(ItemAlign.Center)\n                .margin({ left: '14fp' })\n                .width('75%')\n  \n                Toggle({ type: ToggleType.Switch, isOn: true })\n                  .margin({ right: '14fp' })\n                  .alignSelf(ItemAlign.Center)\n              }\n              .width('100%')\n              .height('80vp')\n            }\n            .width('100%')\n            .borderRadius('10vp')\n            .backgroundColor(this.menuItemColor)\n          }\n        }\n      }\n      .padding('10vp')\n      .backgroundColor('#dcdcdc')\n      .width('100%')\n      .height('100%')\n    }\n  } 在UIAbility中设置ThemeControl，需要在onWindowStageCreate()方法中setDefaultTheme，设置应用内组件的自定义主题色。   import {AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\n  import { hilog } from '@kit.PerformanceAnalysisKit';\n  import { window, CustomColors, ThemeControl } from '@kit.ArkUI';\n\n  class AppColors implements CustomColors {\n    fontPrimary = 0xFFD53032\n    iconOnPrimary = 0xFFD53032\n    iconFourth = 0xFFD53032\n  }\n  \n  const abilityThemeColors = new AppColors();\n  \n  export default class EntryAbility extends UIAbility {\n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n    }\n  \n    onDestroy() {\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n    }\n  \n    onWindowStageCreate(windowStage: window.WindowStage) {\n      // Main window is created, set main page for this ability\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n    \n      windowStage.loadContent('pages/Index', (err, data) => {\n        if (err.code) {\n          hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n          return;\n        }\n        hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n        // 在onWindowStageCreate()方法中setDefaultTheme\n        ThemeControl.setDefaultTheme({ colors: abilityThemeColors })\n        hilog.info(0x0000, 'testTag', '%{public}s', 'ThemeControl.setDefaultTheme done');\n      });\n    }\n  \n  } 
如果setDefaultTheme的参数为undefined时，默认token值对应的色值参考系统缺省token色值。
设置应用局部页面自定义主题风格
通过设置WithTheme，将自定义主题Theme的配色应用于内部组件的默认样式。在WithTheme的作用范围内，组件的配色会根据Theme的配色进行调整。
如示例所示，使用WithTheme({ theme: this.myTheme })可将作用域内组件的配色设置为自定义主题风格。后续可以通过更新this.myTheme来更换主题风格。onWillApplyTheme回调函数用于使自定义组件能够获取当前生效的Theme对象。
  import { CustomColors, CustomTheme, Theme } from '@kit.ArkUI'\n\n  class AppColors implements CustomColors {\n    fontPrimary: ResourceColor = $r('app.color.brand_purple')\n    backgroundEmphasize: ResourceColor = $r('app.color.brand_purple')\n  }\n  \n  class AppColorsSec implements CustomColors {\n    fontPrimary: ResourceColor = $r('app.color.brand')\n    backgroundEmphasize: ResourceColor = $r('app.color.brand')\n  }\n  \n  class AppTheme implements CustomTheme {\n    public colors: AppColors = new AppColors()\n  }\n  \n  class AppThemeSec implements CustomTheme {\n    public colors: AppColors = new AppColorsSec()\n  }\n  \n  @Entry\n  @Component\n  struct DisplayPage {\n    @State customTheme: CustomTheme = new AppTheme()\n    @State message: string = '设置应用局部页面自定义主题风格'\n    count = 0;\n  \n    build() {\n      WithTheme({ theme: this.customTheme }) {\n        Row(){\n          Column() {\n            Text('WithTheme')\n              .fontSize(30)\n              .margin({bottom: 10})\n            Text(this.message)\n              .margin({bottom: 10})\n            Button('change theme').onClick(() => {\n              this.count++;\n              if (this.count > 1) {\n                this.count = 0;\n              }\n              switch (this.count) {\n                case 0:\n                  this.customTheme = new AppTheme();\n                  break;\n                case 1:\n                  this.customTheme = new AppThemeSec();\n                  break;\n              }\n            })\n          }\n          .width('100%')\n        }\n        .height('100%')\n        .width('100%')\n      }\n    }\n  }
设置应用页面局部深浅色
通过WithTheme可以设置三种颜色模式，跟随系统模式，浅色模式和深色模式。
在WithTheme的作用范围内，组件的样式资源值会根据指定的模式，读取对应的深浅色模式系统和应用资源值。这意味着，在WithTheme作用范围内，组件的配色会根据所指定的深浅模式进行调整。
如下面的示例所示，通过WithTheme({ colorMode: ThemeColorMode.DARK })，可以将作用范围内的组件设置为深色模式。
设置局部深浅色时，需要添加dark.json资源文件，深浅色模式才会生效。
dark.json数据示例：
  {\n    \"color\": [\n      {\n        \"name\": \"start_window_background\",\n        \"value\": \"#FFFFFF\"\n      }\n    ]\n  }
  @Entry\n  @Component\n  struct DisplayPage {\n    @State message: string = 'Hello World';\n    @State colorMode: ThemeColorMode = ThemeColorMode.DARK;\n\n    build() {\n      WithTheme({ colorMode: this.colorMode }) {\n        Row() {\n          Column() {\n            Text(this.message)\n              .fontSize(50)\n              .fontWeight(FontWeight.Bold)\n            Button('Switch ColorMode').onClick(() => {\n              if (this.colorMode === ThemeColorMode.LIGHT) {\n                this.colorMode = ThemeColorMode.DARK;\n              } else if (this.colorMode === ThemeColorMode.DARK) {\n                this.colorMode = ThemeColorMode.LIGHT;\n              }\n            })\n          }\n          .width('100%')\n        }\n        .backgroundColor($r('sys.color.background_primary'))\n        .height('100%')\n        .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.TOP, SafeAreaEdge.END, SafeAreaEdge.BOTTOM, SafeAreaEdge.START])\n      }\n    }\n  }
系统缺省token色值
