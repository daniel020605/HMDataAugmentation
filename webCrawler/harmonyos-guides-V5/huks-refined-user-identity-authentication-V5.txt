细粒度用户身份认证访问控制开发指导
细粒度用户身份认证访问控制是基于已有用户身份认证访问控制的扩展，提供了基于生物特征和锁屏密码二次身份认证的细粒度访问控制能力，允许设置密钥在加密、解密、签名、验签、密钥协商、密钥派生的单个或多个场景时是否需要进行身份验证。
比如，业务需要使用HUKS密钥加密保存账号密码信息等数据，要求在加密的时候不进行指纹等身份认证，解密的时候需要进行指纹等身份认证，这是就需要依赖HUKS提供细粒度的二次身份认证访问控制机制。
使用该功能仅需在密钥生成阶段，通过额外指定用于细粒度用户身份认证访问控制的HuksTag：HUKS_TAG_KEY_AUTH_PURPOSE，来指定在某种算法用途的情况下需要使用用户身份认证访问控制能力。
对于对称加解密场景，仅AES/CBC、AES/GCM、SM4/CBC模式支持细粒度访问控制。
开发步骤
生成密钥，指定指纹类型的访问控制及相关属性，指定HUKS_TAG_KEY_AUTH_PURPOSE值。 import { huks } from \"@kit.UniversalKeystoreKit\";\n/*\n * 确定密钥别名和封装密钥属性参数集\n */\nlet keyAlias = 'test_sm4_key_alias';\nclass throwObject {\n    isThrow: boolean = false;\n}\n\nlet properties: Array<huks.HuksParam> = [\n    {\n        tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n        value: huks.HuksKeyAlg.HUKS_ALG_SM4,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n        value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT | huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n        value: huks.HuksKeySize.HUKS_SM4_KEY_SIZE_128,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n        value: huks.HuksCipherMode.HUKS_MODE_CBC,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_PADDING,\n        value: huks.HuksKeyPadding.HUKS_PADDING_NONE,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_USER_AUTH_TYPE,\n        value: huks.HuksUserAuthType.HUKS_USER_AUTH_TYPE_FINGERPRINT\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_KEY_AUTH_ACCESS_TYPE,\n        value: huks.HuksAuthAccessType.HUKS_AUTH_ACCESS_INVALID_NEW_BIO_ENROLL\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_CHALLENGE_TYPE,\n        value: huks.HuksChallengeType.HUKS_CHALLENGE_TYPE_NORMAL\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_KEY_AUTH_PURPOSE,\n        value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n    }\n];\n\nlet huksOptions: huks.HuksOptions = {\n    properties: properties,\n    inData: new Uint8Array(new Array())\n}\n/*\n * 生成密钥\n */\nasync function generateKeyItem(keyAlias: string, huksOptions: huks.HuksOptions, throwObject: throwObject) {\n    return new Promise<void>((resolve, reject) => {\n        try {\n            huks.generateKeyItem(keyAlias, huksOptions, (error, data) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(data);\n                }\n            });\n        } catch (error) {\n            throwObject.isThrow = true;\n            throw(error as Error);\n        }\n    });\n}\nasync function publicGenKeyFunc(keyAlias: string, huksOptions: huks.HuksOptions) {\n    console.info(`enter promise generateKeyItem`);\n    let throwObject: throwObject = {isThrow: false};\n    try {\n        await generateKeyItem(keyAlias, huksOptions, throwObject)\n        .then((data) => {\n            console.info(`promise: generateKeyItem success, data = ${JSON.stringify(data)}`);\n        })\n        .catch((error: Error) => {\n            if (throwObject.isThrow) {\n                throw(error as Error);\n            } else {\n                console.error(`promise: generateKeyItem failed` + JSON.stringify(error));\n            }\n        });\n    } catch (error) {\n        console.error(`promise: generateKeyItem input arg invalid` + JSON.stringify(error));\n    }\n}\nasync function TestGenKeyForFingerprintAccessControl() {\n    await publicGenKeyFunc(keyAlias, huksOptions);\n} 使用密钥，加密时不需要用户身份认证访问控制。 import { huks } from \"@kit.UniversalKeystoreKit\";\nclass HuksProperties {\n    tag: huks.HuksTag = huks.HuksTag.HUKS_TAG_ALGORITHM;\n    value: huks.HuksKeyAlg | huks.HuksKeySize | huks.HuksKeyPurpose | huks.HuksKeyPadding | huks.HuksCipherMode \n        | Uint8Array = huks.HuksKeyAlg.HUKS_ALG_ECC;\n}\n/*\n * 确定密钥别名和封装密钥属性参数集\n */\nlet keyAlias = 'test_sm4_key_alias';\nlet cipherInData = 'Hks_SM4_Cipher_Test_101010101010101010110_string'; // 明文数据\nlet IV = '1234567890123456';\nlet handle = 0;\nlet cipherText: Uint8Array; // 加密后的密文数据\nfunction StringToUint8Array(str: string) {\n    let arr: number[] = [];\n    for (let i = 0, j = str.length; i < j; ++i) {\n        arr.push(str.charCodeAt(i));\n    }\n    return new Uint8Array(arr);\n}\n/* 集成生成密钥参数集 & 加密参数集 */\nlet propertiesEncrypt: HuksProperties[] = [\n    {\n        tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n        value: huks.HuksKeyAlg.HUKS_ALG_SM4,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n        value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n        value: huks.HuksKeySize.HUKS_SM4_KEY_SIZE_128,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_PADDING,\n        value: huks.HuksKeyPadding.HUKS_PADDING_NONE,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n        value: huks.HuksCipherMode.HUKS_MODE_CBC,\n    },\n    {\n        tag: huks.HuksTag.HUKS_TAG_IV,\n        value: StringToUint8Array(IV),\n    }\n];\nlet encryptOptions: huks.HuksOptions = {\n    properties: propertiesEncrypt,\n    inData: new Uint8Array(new Array())\n}\nclass throwObject1{\n    isThrow: boolean = false;\n}\nfunction initSession(keyAlias: string, huksOptions: huks.HuksOptions, throwObject: throwObject1) {\n    return new Promise<huks.HuksSessionHandle>((resolve, reject) => {\n        try {\n            huks.initSession(keyAlias, huksOptions, (error, data) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(data);\n                }\n            });\n        } catch (error) {\n            throwObject.isThrow = true;\n            throw (error as Error);\n        }\n    });\n}\nasync function publicInitFunc(keyAlias: string, huksOptions: huks.HuksOptions) {\n    console.info(`enter promise doInit`);\n    let throwObject: throwObject1 = { isThrow: false };\n    try {\n        await initSession(keyAlias, huksOptions, throwObject)\n        .then((data) => {\n            console.info(`promise: doInit success, data = ${JSON.stringify(data)}`);\n            handle = data.handle as number;\n        })\n        .catch((error: Error) => {\n            if (throwObject.isThrow) {\n                throw (error as Error);\n            } else {\n                console.error(`promise: doInit failed` + JSON.stringify(error));\n            }\n        });\n    } catch (error) {\n        console.error(`promise: doInit input arg invalid` + JSON.stringify(error));\n    }\n}\nfunction finishSession(handle: number, huksOptions: huks.HuksOptions, throwObject: throwObject1) {\n    return new Promise<huks.HuksReturnResult>((resolve, reject) => {\n        try {\n            huks.finishSession(handle, huksOptions, (error, data) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(data);\n                }\n            });\n        } catch (error) {\n            throwObject.isThrow = true;\n            throw (error as Error);\n        }\n    });\n}\nasync function publicFinishFunc(handle: number, huksOptions: huks.HuksOptions) {\n    console.info(`enter promise doFinish`);\n    let throwObject: throwObject1 = { isThrow: false };\n    try {\n        await finishSession(handle, huksOptions, throwObject)\n        .then((data) => {\n            cipherText = data.outData as Uint8Array;\n            console.info(`promise: doFinish success, data = ${JSON.stringify(data)}`);\n        })\n        .catch((error: Error) => {\n            if (throwObject.isThrow) {\n                throw (error as Error);\n            } else {\n                console.error(`promise: doFinish failed` + JSON.stringify(error));\n            }\n        });\n    } catch (error) {\n        console.error(`promise: doFinish input arg invalid` + JSON.stringify(error));\n    }\n}\nasync function testSm4Cipher() {\n    /* 初始化密钥会话获取挑战值 */\n    await publicInitFunc(keyAlias, encryptOptions);\n    /* 加密 */\n    encryptOptions.inData = StringToUint8Array(cipherInData);\n    await publicFinishFunc(handle, encryptOptions);\n} 使用密钥，解密时需要进行用户身份认证访问控制。  import { huks } from \"@kit.UniversalKeystoreKit\";\n import { userAuth } from '@kit.UserAuthenticationKit';\n import { BusinessError } from \"@kit.BasicServicesKit\"\n\n let keyAlias = 'test_sm4_key_alias';\n let IV = '1234567890123456';\n let handle = 0;\n let cipherText: Uint8Array; // 密文数据\n /*\n * 确定封装密钥属性参数集\n */\n let finishOutData: Uint8Array; // 解密后的明文数据\n let fingerAuthToken: Uint8Array;\n let challenge: Uint8Array;\n let authType = userAuth.UserAuthType.FINGERPRINT;\n let authTrustLevel = userAuth.AuthTrustLevel.ATL1;\n class throwObject {\n     isThrow: boolean = false;\n }\n function StringToUint8Array(str: string) {\n     let arr: number[] = [];\n     for (let i = 0, j = str.length; i < j; ++i) {\n         arr.push(str.charCodeAt(i));\n     }\n     return new Uint8Array(arr);\n }\n /* 集成生成密钥参数集 & 加密参数集 */\n class propertyDecryptType {\n tag: huks.HuksTag = huks.HuksTag.HUKS_TAG_ALGORITHM\n value: huks.HuksKeyAlg | huks.HuksKeyPurpose | huks.HuksKeySize | huks.HuksKeyPadding | huks.HuksCipherMode\n     | Uint8Array = huks.HuksKeyAlg.HUKS_ALG_SM4\n }\n let propertiesDecrypt: propertyDecryptType[] = [\n     {\n         tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n         value: huks.HuksKeyAlg.HUKS_ALG_SM4,\n     },\n     {\n         tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n         value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT,\n     },\n     {\n         tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n         value: huks.HuksKeySize.HUKS_SM4_KEY_SIZE_128,\n     },\n     {\n         tag: huks.HuksTag.HUKS_TAG_PADDING,\n         value: huks.HuksKeyPadding.HUKS_PADDING_NONE,\n     },\n     {\n         tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n         value: huks.HuksCipherMode.HUKS_MODE_CBC,\n     },\n     {\n         tag: huks.HuksTag.HUKS_TAG_IV,\n         value: StringToUint8Array(IV),\n     }\n ]\n let decryptOptions: huks.HuksOptions = {\n     properties: propertiesDecrypt,\n     inData: new Uint8Array(new Array())\n }\n function initSession(keyAlias: string, huksOptions: huks.HuksOptions, throwObject: throwObject) {\n     return new Promise<huks.HuksSessionHandle>((resolve, reject) => {\n         try {\n             huks.initSession(keyAlias, huksOptions, (error, data) => {\n                 if (error) {\n                     reject(error);\n                 } else {\n                     resolve(data);\n                 }\n             });\n         } catch (error) {\n             throwObject.isThrow = true;\n             throw(error as Error);\n         }\n     });\n }\n async function publicInitFunc(keyAlias: string, huksOptions: huks.HuksOptions) {\n console.info(`enter promise doInit`);\n let throwObject: throwObject = {isThrow: false};\n try {\n     await initSession(keyAlias, huksOptions, throwObject)\n     .then ((data) => {\n         console.info(`promise: doInit success, data = ${JSON.stringify(data)}`);\n         handle = data.handle;\n         challenge = data.challenge as Uint8Array;\n     })\n     .catch((error: BusinessError) => {\n         if (throwObject.isThrow) {\n         throw(error as Error);\n         } else {\n         console.error(`promise: doInit failed` + JSON.stringify(error));\n         }\n     });\n } catch (error) {\n     console.error(`promise: doInit input arg invalid` + JSON.stringify(error));\n }\n }\n function userIAMAuthFinger(huksChallenge: Uint8Array) {\n // 获取认证对象\n let authTypeList:userAuth.UserAuthType[]= [ authType ];\n const authParam:userAuth.AuthParam = {\n     challenge: huksChallenge,\n     authType: authTypeList,\n     authTrustLevel: userAuth.AuthTrustLevel.ATL1\n };\n const widgetParam:userAuth.WidgetParam = {\n     title: '请输入密码',\n };\n let auth : userAuth.UserAuthInstance;\n try {\n     auth = userAuth.getUserAuthInstance(authParam, widgetParam);\n     console.info(\"get auth instance success\");\n } catch (error) {\n     console.error(\"get auth instance failed\" + JSON.stringify(error));\n     return;\n }\n // 订阅认证结果\n try {\n     auth.on(\"result\", {\n     onResult(result) {\n         console.info(\"[HUKS] -> [IAM]  userAuthInstance callback result = \" + JSON.stringify(result));\n         fingerAuthToken = result.token;\n     }\n     });\n     console.info(\"subscribe authentication event success\");\n } catch (error) {\n     console.error(\"subscribe authentication event failed \" + JSON.stringify(error));\n }\n // 开始认证\n try {\n     auth.start();\n     console.info(\"authV9 start auth success\");\n } catch (error) {\n     console.error(\"authV9 start auth failed, error = \" + JSON.stringify(error));\n }\n }\n function finishSession(handle: number, huksOptions: huks.HuksOptions, token: Uint8Array, throwObject: throwObject) {\n return new Promise<huks.HuksReturnResult>((resolve, reject) => {\n     try {\n     huks.finishSession(handle, huksOptions, token, (error, data) => {\n         if (error) {\n         reject(error);\n         } else {\n         resolve(data);\n         }\n     });\n     } catch (error) {\n     throwObject.isThrow = true;\n     throw(error as Error);\n     }\n });\n }\n async function publicFinishFunc(handle: number, token: Uint8Array, huksOptions: huks.HuksOptions) {\n console.info(`enter promise doFinish`);\n let throwObject: throwObject = {isThrow: false};\n try {\n     await finishSession(handle, huksOptions, token, throwObject)\n     .then ((data) => {\n         finishOutData = data.outData as Uint8Array;\n         console.info(`promise: doFinish success, data = ${JSON.stringify(data)}`);\n     })\n     .catch((error: BusinessError) => {\n         if (throwObject.isThrow) {\n             throw(error as Error);\n         } else {\n             console.error(`promise: doFinish failed` + JSON.stringify(error));\n         }\n     });\n } catch (error) {\n     console.error(`promise: doFinish input arg invalid` + JSON.stringify(error));\n }\n }\n async function testSm4CipherInit() {\n     /* 初始化密钥会话获取挑战值 */\n     await publicInitFunc(keyAlias, decryptOptions);\n     /* 调用userIAM进行身份认证 */\n     userIAMAuthFinger(challenge);\n }\n async function testSm4CipherFinish() {\n     /* 认证成功后进行解密, 需要传入Auth获取到的authToken值 */\n     decryptOptions.inData = cipherText;\n     await publicFinishFunc(handle, fingerAuthToken, decryptOptions);\n } 
