动画帧
请求动画帧
请求动画帧时通过requestAnimationFrame函数逐帧回调，在调用该函数时传入一个回调函数。
runframe在调用requestAnimationFrame时传入带有timestamp参数的回调函数step，将step中的timestamp赋予起始的startTime。当timestamp与startTime的差值小于规定的时间时将再次调用requestAnimationFrame，最终动画将会停止。
<!-- xxx.hml -->\n<div class=\"container\">\n  <tabs onchange=\"changecontent\">\n    <tab-content>\n      <div class=\"container\">\n        <stack style=\"width: 300px;height: 300px;margin-top: 100px;margin-bottom: 100px;\">\n          <canvas id=\"mycanvas\" style=\"width: 100%;height: 100%;background-color: coral;\">\n          </canvas>\n          <div style=\"width: 50px;height: 50px;border-radius: 25px;background-color: indigo;position: absolute;left: {{left}};top: {{top}};\">\n          </div>\n        </stack>\n        <button type=\"capsule\" value=\"play\" onclick=\"runframe\"></button>\n      </div>\n    </tab-content>\n  </tabs>\n</div>
/* xxx.css */\n.container {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\nbutton{\n  width: 300px;\n}
// xxx.js\nexport default {\n  data: {\n    timer: null,\n    left: 0,\n    top: 0,\n    flag: true,\n    animation: null,\n    startTime: 0,\n  },\n  onShow() {\n    var test = this.$element(\"mycanvas\");\n    var ctx = test.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(300, 300);\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"red\";\n    ctx.stroke();\n  },\n  runframe() {\n    this.left = 0;\n    this.top = 0;\n    this.flag = true;\n    this.animation = requestAnimationFrame(this.step);\n  },\n  step(timestamp) {\n    if (this.flag) {\n      this.left += 5;\n      this.top += 5;\n      if (this.startTime == 0) {\n        this.startTime = timestamp;\n      }\n      var elapsed = timestamp - this.startTime;\n        if (elapsed < 500) {\n          console.log('callback step timestamp: ' + timestamp);\n          this.animation = requestAnimationFrame(this.step);\n        }\n      } else {\n        this.left -= 5;\n        this.top -= 5;\n        this.animation = requestAnimationFrame(this.step);\n      }\n      if (this.left == 250 || this.left == 0) {\n        this.flag = !this.flag\n     }\n    },\n    onDestroy() {\n      cancelAnimationFrame(this.animation);\n    }\n}
requestAnimationFrame函数在调用回调函数时在第一个参数位置传入timestamp时间戳，表示requestAnimationFrame开始去执行回调函数的时刻。
取消动画帧
通过cancelAnimationFrame函数取消逐帧回调，在调用cancelAnimationFrame函数时取消requestAnimationFrame函数的请求。
<!-- xxx.hml -->\n<div class=\"container\">\n  <tabs onchange=\"changecontent\">\n    <tab-content>\n      <div class=\"container\">\n        <stack style=\"width: 300px;height: 300px;margin-top: 100px;margin-bottom: 100px;\">\n          <canvas id=\"mycanvas\" style=\"width: 100%;height: 100%;background-color: coral;\">\n          </canvas>\n          <div style=\"width: 50px;height: 50px;border-radius: 25px;background-color: indigo;position: absolute;left: {{left}};top: {{top}};\">\n          </div>\n        </stack>\n        <button type=\"capsule\" value=\"play\" onclick=\"runframe\"></button>\n      </div>\n    </tab-content>\n  </tabs>\n</div>
/* xxx.css */\n.container {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\nbutton{\n  width: 300px;\n}
// xxx.js\nexport default {\n  data: {\n    timer: null,\n    left: 0,\n    top: 0,\n    flag: true,\n    animation: null\n  },\n  onShow() {\n    var test = this.$element(\"mycanvas\");\n    var ctx = test.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(300, 300);\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"red\";\n    ctx.stroke();\n  },\n  runframe() {\n    this.left = 0;\n    this.top = 0;\n    this.flag = true;\n    this.animation = requestAnimationFrame(this.step);\n  },\n  step(timestamp) {\n    if (this.flag) {\n      this.left += 5;\n      this.top += 5;\n      this.animation = requestAnimationFrame(this.step);\n    } else {\n      this.left -= 5;\n      this.top -= 5;\n      this.animation = requestAnimationFrame(this.step);\n    }\n    if (this.left == 250 || this.left == 0) {\n      this.flag = !this.flag\n    }\n  },\n  onDestroy() {\n    cancelAnimationFrame(this.animation);\n  }\n}
在调用该函数时需传入一个具有标识id的参数。
