使用Image_NativeModule处理图像信息
图像信息类，用于设置和读取图像的矩形大小、组件信息和像素信息。
开发步骤
[h2]添加依赖
在进行应用开发之前，开发者需要打开native工程的src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加libohimage.so，libimage_receiver.so，libnative_image.so 以及日志依赖libhilog_ndk.z.so。
target_link_libraries(entry PUBLIC libhilog_ndk.z.so libohimage.so libimage_receiver.so libnative_image.so)
[h2]Native接口调用
具体接口说明请参考API文档。
在hello.cpp中实现C Native API接口调用逻辑，示例代码如下：
#include <hilog/log.h>\n#include <multimedia/image_framework/image/image_native.h>\n#include <multimedia/image_framework/image/image_receiver_native.h>\n\n#undef LOG_DOMAIN\n#define LOG_DOMAIN 0x3200\n\n#undef LOG_TAG\n#define LOG_TAG \"MY_TAG\"\n\n#define IMAGE_WIDTH 320\n#define IMAGE_HEIGHT 480\n#define IMAGE_CAPACITY 2\n\nstatic void ImageNativeCTest()\n{\n    // 创建 OH_ImageReceiverOptions 实例\n    OH_ImageReceiverOptions* options = nullptr;\n    Image_ErrorCode errCode = OH_ImageReceiverOptions_Create(&options);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest create image receiver options failed, errCode: %{public}d.\", errCode);\n        return;\n    }\n\n    Image_Size imgSize;\n    imgSize.width = IMAGE_WIDTH;\n    imgSize.height = IMAGE_HEIGHT;\n\n    // 设置 OH_ImageReceiverOptions 的 size 属性\n    errCode = OH_ImageReceiverOptions_SetSize(options, imgSize);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest set image receiver options size failed, errCode: %{public}d.\", errCode);\n        OH_ImageReceiverOptions_Release(options);\n        return;\n    }\n\n    // 设置 OH_ImageReceiverOptions 的 capacity 属性\n    errCode = OH_ImageReceiverOptions_SetCapacity(options, IMAGE_CAPACITY);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest set image receiver options capacity failed, errCode: %{public}d.\", errCode);\n        OH_ImageReceiverOptions_Release(options);\n        return;\n    }\n\n    // 创建 OH_ImageReceiverNative 实例\n    OH_ImageReceiverNative* receiver = nullptr;\n    errCode = OH_ImageReceiverNative_Create(options, &receiver);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest create image receiver failed, errCode: %{public}d.\", errCode);\n        OH_ImageReceiverOptions_Release(options);\n        return;\n    }\n\n    // 读取 OH_ImageReceiverNative 的下一个图片对象\n    OH_ImageNative* image = nullptr;\n    errCode = OH_ImageReceiverNative_ReadNextImage(receiver, &image);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image receiver next image failed, errCode: %{public}d.\", errCode);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 读取 OH_ImageNative 的 size 属性\n    errCode = OH_ImageNative_GetImageSize(image, &imgSizeRead);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image size failed, errCode: %{public}d.\", errCode);\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 读取 OH_ImageNative 的组件列表的元素个数。\n    size_t componentTypeSize = 0;\n    errCode = OH_ImageNative_GetComponentTypes(image, nullptr, &componentTypeSize);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image component types failed, errCode: %{public}d.\", errCode);\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 读取 OH_ImageNative 的组件列表。\n    uint32_t* components = new uint32_t[componentTypeSize];\n    errCode = OH_ImageNative_GetComponentTypes(image, &components, &componentTypeSize);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image component types failed, errCode: %{public}d.\", errCode);\n        delete [] components;\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    delete [] components;\n\n    // 读取 OH_ImageNative 的第一个组件所对应的缓冲区对象。\n    OH_NativeBuffer* nativeBuffer = nullptr;\n    errCode = OH_ImageNative_GetByteBuffer(image, components[0], &nativeBuffer);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image byte buffer failed, errCode: %{public}d.\", errCode);\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 读取 OH_ImageNative 的第一个组件所对应的缓冲区大小。\n    size_t nativeBufferSize = 0;\n    errCode = OH_ImageNative_GetBufferSize(image, components[0], &nativeBufferSize);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image buffer size failed, errCode: %{public}d.\", errCode);\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 读取 OH_ImageNative 的第一个组件所对应的像素行宽。\n    int32_t rowStride = 0;\n    errCode = OH_ImageNative_GetRowStride(image, components[0], &rowStride);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image row stride failed, errCode: %{public}d.\", errCode);\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 读取 OH_ImageNative 的第一个组件所对应的像素大小。\n    int32_t pixelStride = 0;\n    errCode = OH_ImageNative_GetPixelStride(image, components[0], &pixelStride);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get image pixel stride failed, errCode: %{public}d.\", errCode);\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 读取 OH_ImageNative 对象所对应的时间戳信息\n    int64_t timestamp = 0;\n    errCode = OH_ImageNative_GetTimestamp(image, &timestamp);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest get timestamp failed, errCode: %{public}d.\", errCode);\n        OH_ImageNative_Release(image);\n        OH_ImageReceiverOptions_Release(options);\n        OH_ImageReceiverNative_Release(receiver);\n        return;\n    }\n\n    // 释放 OH_ImageNative 实例\n    errCode = OH_ImageNative_Release(image);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest release image native failed, errCode: %{public}d.\", errCode);\n    }\n\n    // 释放 OH_ImageReceiverOptions 实例\n    errCode = OH_ImageReceiverOptions_Release(options);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest release image receiver options failed, errCode: %{public}d.\", errCode);\n    }\n\n    // 释放 OH_ImageReceiverOptions 实例\n    errCode = OH_ImageReceiverNative_Release(receiver);\n    if (errCode != IMAGE_SUCCESS) {\n        OH_LOG_ERROR(LOG_APP, \"ImageReceiverNativeCTest release image receiver failed, errCode: %{public}d.\", errCode);\n    }\n}
