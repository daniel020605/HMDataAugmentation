自定义组件节点 (FrameNode)
概述
对于拥有自定义前端的第三方框架（如JSON、XML、DOM树等），需将特定的DSL转换为ArkUI的声明式描述。如下图描述了JSON定义的前端框架和ArkUI声明式描述的对应关系。
上述转换过程需要依赖额外的数据驱动，绑定至Builder中，较为复杂且性能欠佳。这类框架通常依赖于ArkUI的布局、事件处理、基础的节点操作和自定义能力。大部分组件通过自定义实现，但需结合使用部分系统组件以实现混合显示，如下图示例既使用了FrameNode的自定义方法进行绘制，又使用了系统组件Column及其子组件Text，通过BuilderNode的方式将其挂载到根节点的FrameNode上混合显示。
FrameNode的设计初衷正是为了解决上述转换问题。FrameNode表示组件树中的实体节点，与自定义占位容器组件NodeContainer相配合，实现在占位容器内构建一棵自定义的节点树。该节点树支持动态操作，如节点的增加、修改和删除。基础的FrameNode具备设置通用属性和事件回调的功能，同时提供完整的自定义能力，涵盖自定义测量、布局和绘制等方面。
除此之外，ArkUI还提供了获取和遍历系统组件对应代理FrameNode对象的能力（下文简称代理节点）。代理节点能够用于遍历整个UI的树形结构，支持获取系统组件节点的详细信息，以及额外注册组件的事件监听回调。
创建和删除节点
FrameNode提供了节点创建和删除的能力。可以通过FrameNode的构造函数创建自定义FrameNode节点，通过构造函数创建的节点对应一个实体的节点。同时，可以通过FrameNode中的dispose接口来实现与实体节点的绑定关系的解除。
 在创建FrameNode对象的时候需要传入必选参数UIContext，若未传入UIContext对象或者传入不合法，则节点创建抛出异常。 自定义占位组件将节点进行显示的时候需要保证UI上下文一致，否则会出现显示异常。 若不持有FrameNode对象，则该对象会在GC的时候被回收。 
判断节点是否可修改
isModifiable用于查询当前节点类型是否为系统组件的代理节点。当FrameNode节点作为系统组件的代理节点的时候，该节点不可修改。即无法修改代理节点的自身属性以及其子节点的结构。
获取对应的RenderNode节点
FrameNode提供了getRenderNode接口，用于获取FrameNode中的RenderNode。可以通过对获取到的RenderNode对象进行操作，动态修改FrameNode上绘制相关的属性，具体可修改的属性参考RenderNode的接口。
 无法获取系统组件代理FrameNode的RenderNode对象。 BuilderNode中调用getFrameNode获取得到的FrameNode节点对象中，可以通过getRenderNode获取对应的根节点的RenderNode对象。 
操作节点树
FrameNode提供了节点的增、删、查、改的能力，能够修改非代理节点的子树结构。可以对所有FrameNode的节点的父子节点做出查询操作，并返回查询结果。
对节点进行增、删、改操作的时候，会对非法操作抛出异常信息。
通过查询获得的原生组件的代理节点，仅具备查询节点信息的作用，不具备修改节点属性的功能。代理节点不持有组件的实体节点，即不影响对应的节点的生命周期。
查询节点仅查询获得UI相关的节点，不返回语法节点。
使用自定义组件的场景下，可能查询获得自定义组件的新增节点，节点类型为“__Common__”。
import { BuilderNode, FrameNode, NodeController, UIContext } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nconst TEST_TAG: string = \"FrameNode\"\n\nclass Params {\n  text: string = \"this is a text\"\n}\n\n@Builder\nfunction buttonBuilder(params: Params) {\n  Column({ space: 10 }) {\n    Button(params.text)\n      .fontSize(12)\n      .borderRadius(8)\n      .borderWidth(2)\n      .backgroundColor(Color.Orange)\n\n    Button(params.text)\n      .fontSize(12)\n      .borderRadius(8)\n      .borderWidth(2)\n      .backgroundColor(Color.Pink)\n  }\n}\n\nclass MyNodeController extends NodeController {\n  public buttonNode: BuilderNode<[Params]> | null = null;\n  public frameNode: FrameNode | null = null;\n  public childList: Array<FrameNode> = new Array<FrameNode>();\n  public rootNode: FrameNode | null = null;\n  private uiContext: UIContext | null = null;\n  private wrapBuilder: WrappedBuilder<[Params]> = wrapBuilder(buttonBuilder);\n\n  makeNode(uiContext: UIContext): FrameNode | null {\n    this.uiContext = uiContext;\n    if (this.rootNode == null) {\n      this.rootNode = new FrameNode(uiContext);\n      this.rootNode.commonAttribute\n        .width(\"50%\")\n        .height(100)\n        .borderWidth(1)\n        .backgroundColor(Color.Gray)\n    }\n\n    if (this.frameNode == null) {\n      this.frameNode = new FrameNode(uiContext);\n      this.frameNode.commonAttribute\n        .width(\"100%\")\n        .height(50)\n        .borderWidth(1)\n        .position({ x: 200, y: 0 })\n        .backgroundColor(Color.Pink);\n      this.rootNode.appendChild(this.frameNode);\n    }\n    if (this.buttonNode == null) {\n      this.buttonNode = new BuilderNode<[Params]>(uiContext);\n      this.buttonNode.build(this.wrapBuilder, { text: \"This is a Button\" })\n      this.rootNode.appendChild(this.buttonNode.getFrameNode())\n    }\n    return this.rootNode;\n  }\n\n  operationFrameNodeWithFrameNode(frameNode: FrameNode | undefined | null) {\n    if (frameNode) {\n      console.log(TEST_TAG + \" get ArkTSNode success.\")\n      console.log(TEST_TAG + \" check rootNode whether is modifiable \" + frameNode.isModifiable());\n    }\n    if (this.uiContext) {\n      let frameNode1 = new FrameNode(this.uiContext);\n      let frameNode2 = new FrameNode(this.uiContext);\n      frameNode1.commonAttribute.size({ width: 50, height: 50 })\n        .backgroundColor(Color.Black)\n        .position({ x: 50, y: 60 })\n      frameNode2.commonAttribute.size({ width: 50, height: 50 })\n        .backgroundColor(Color.Orange)\n        .position({ x: 120, y: 60 })\n      try {\n        frameNode?.appendChild(frameNode1);\n        console.log(TEST_TAG + \" appendChild success \");\n      } catch (err) {\n        console.log(TEST_TAG + \" appendChild fail :\" + (err as BusinessError).code + \" : \" +\n        (err as BusinessError).message);\n      }\n      try {\n        frameNode?.insertChildAfter(frameNode2, null);\n        console.log(TEST_TAG + \" insertChildAfter success \");\n      } catch (err) {\n        console.log(TEST_TAG + \" insertChildAfter fail : \" + (err as BusinessError).code + \" : \" +\n        (err as BusinessError).message);\n      }\n      setTimeout(() => {\n        try {\n          frameNode?.removeChild(frameNode?.getChild(0))\n          console.log(TEST_TAG + \" removeChild success \");\n        } catch (err) {\n          console.log(TEST_TAG + \" removeChild fail : \" + (err as BusinessError).code + \" : \" +\n          (err as BusinessError).message);\n        }\n      }, 2000)\n      setTimeout(() => {\n        try {\n          frameNode?.clearChildren();\n          console.log(TEST_TAG + \" clearChildren success \");\n        } catch (err) {\n          console.log(TEST_TAG + \" clearChildren fail : \" + (err as BusinessError).code + \" : \" +\n          (err as BusinessError).message);\n        }\n      }, 4000)\n    }\n  }\n\n  testInterfaceAboutSearch(frameNode: FrameNode | undefined | null): string {\n    let result: string = \"\";\n    if (frameNode) {\n      result = result + `current node is ${frameNode.getNodeType()} \\n`;\n      result = result + `parent node is ${frameNode.getParent()?.getNodeType()} \\n`;\n      result = result + `child count is ${frameNode.getChildrenCount()} \\n`;\n      result = result + `first child node is ${frameNode.getFirstChild()?.getNodeType()} \\n`;\n      result = result + `second child node is ${frameNode.getChild(1)?.getNodeType()} \\n`;\n      result = result + `previousSibling node is ${frameNode.getPreviousSibling()?.getNodeType()} \\n`;\n      result = result + `nextSibling node is ${frameNode.getNextSibling()?.getNodeType()} \\n`;\n    }\n    return result;\n  }\n\n  checkAppendChild(parent: FrameNode | undefined | null, child: FrameNode | undefined | null) {\n    try {\n      if (parent && child) {\n        parent.appendChild(child);\n        console.log(TEST_TAG + \" appendChild success \");\n      }\n    } catch (err) {\n      console.log(TEST_TAG + \" appendChild fail : \" + (err as BusinessError).code + \" : \" +\n      (err as BusinessError).message);\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  @State index: number = 0;\n  @State result: string = \"\"\n  private myNodeController: MyNodeController = new MyNodeController();\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n      List({ space: 20, initialIndex: 0 }) {\n        ListItem() {\n          Column({ space: 5 }) {\n            Text(\"验证FrameNode子节点的增、删、改功能\")\n            Button(\"对自定义FrameNode进行操作\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                // 对FrameNode节点进行增、删、改操作，正常实现。\n                this.myNodeController.operationFrameNodeWithFrameNode(this.myNodeController?.frameNode);\n              })\n            Button(\"对BuilderNode中的代理节点进行操作\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                // 对BuilderNode代理节点进行增、删、改操作，捕获异常信息。\n                this.myNodeController.operationFrameNodeWithFrameNode(this.myNodeController?.buttonNode?.getFrameNode());\n              })\n            Button(\"对原生组件中的代理节点进行操作\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                // 对代理节点进行增、删、改操作，捕获异常信息。\n                this.myNodeController.operationFrameNodeWithFrameNode(this.myNodeController?.rootNode?.getParent());\n              })\n          }\n        }\n\n        ListItem() {\n          Column({ space: 5 }) {\n            Text(\"验证FrameNode添加子节点的特殊场景\")\n            Button(\"新增BuilderNode的代理节点\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                let buttonNode = new BuilderNode<[Params]>(this.getUIContext());\n                buttonNode.build(wrapBuilder<[Params]>(buttonBuilder), { text: \"BUTTON\" })\n                this.myNodeController.checkAppendChild(this.myNodeController?.frameNode, buttonNode?.getFrameNode());\n              })\n            Button(\"新增原生组件代理节点\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                this.myNodeController.checkAppendChild(this.myNodeController?.frameNode,\n                  this.myNodeController?.rootNode?.getParent());\n              })\n            Button(\"新增已有父节点的自定义节点\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                this.myNodeController.checkAppendChild(this.myNodeController?.frameNode,\n                  this.myNodeController?.rootNode);\n              })\n          }\n        }\n\n        ListItem() {\n          Column({ space: 5 }) {\n            Text(\"验证FrameNode节点的查询功能\")\n            Button(\"对自定义FrameNode进行操作\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                // 对FrameNode节点进行进行查询。当前节点为NodeContainer的子节点。\n                this.result = this.myNodeController.testInterfaceAboutSearch(this.myNodeController?.rootNode);\n                setTimeout(() => {\n                  // 对FrameNode节点进行进行查询。rootNode下的第一个子节点。\n                  this.result = this.myNodeController.testInterfaceAboutSearch(this.myNodeController?.frameNode);\n                }, 2000)\n              })\n            Button(\"对BuilderNode中的代理节点进行操作\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                // 对BuilderNode代理节点进行进行查询。当前节点为BuilderNode中的Column节点。\n                this.result =\n                  this.myNodeController.testInterfaceAboutSearch(this.myNodeController?.buttonNode?.getFrameNode());\n              })\n            Button(\"对原生组件中的代理节点进行操作\")\n              .fontSize(16)\n              .width(400)\n              .onClick(() => {\n                // 对代理节点进行查询。当前节点为NodeContainer。\n                this.result =\n                  this.myNodeController.testInterfaceAboutSearch(this.myNodeController?.rootNode?.getParent());\n              })\n          }\n        }\n      }.height(\"50%\")\n\n      Text(`Result：\\n${this.result}`)\n        .fontSize(16)\n        .width(400)\n        .height(200)\n        .padding(30)\n        .borderWidth(1)\n      Column() {\n        Text(\"This is a NodeContainer.\")\n          .textAlign(TextAlign.Center)\n          .borderRadius(10)\n          .backgroundColor(0xFFFFFF)\n          .width('100%')\n          .fontSize(16)\n        NodeContainer(this.myNodeController)\n          .borderWidth(1)\n          .width(400)\n          .height(150)\n      }\n    }\n    .padding({\n      left: 35,\n      right: 35,\n      top: 35,\n      bottom: 35\n    })\n    .width(\"100%\")\n    .height(\"100%\")\n  }\n}
设置节点通用属性和事件回调
FrameNode提供了commonAttribute和commonEvent两个对象用于对设置节点的通用属性和设置事件回调。
 由于代理节点的属性不可修改，因此通过代理节点的commonAttribute修改节点的基础属性不生效。 设置的基础事件与原生组件定义的事件平行，参与事件竞争。设置的基础事件不覆盖原生组件事件。同时设置两个事件回调的时候，优先回调原生组件事件。 
import { BuilderNode, FrameNode, NodeController, UIContext } from '@kit.ArkUI'\n\nclass Params {\n  text: string = \"this is a text\"\n}\n\n@Builder\nfunction buttonBuilder(params: Params) {\n  Button(params.text)\n    .fontSize(12)\n    .borderRadius(8)\n    .borderWidth(2)\n    .backgroundColor(Color.Orange)\n    .onClick((event: ClickEvent) => {\n      console.log(`Button ${JSON.stringify(event)}`);\n    })\n}\n\nclass MyNodeController extends NodeController {\n  public buttonNode: BuilderNode<[Params]> | null = null;\n  public frameNode: FrameNode | null = null;\n  public rootNode: FrameNode | null = null;\n  private wrapBuilder: WrappedBuilder<[Params]> = wrapBuilder(buttonBuilder);\n\n  makeNode(uiContext: UIContext): FrameNode | null {\n    if (this.rootNode == null) {\n      this.rootNode = new FrameNode(uiContext);\n      // 对rootNode进行属性修改，该节点为自定义的FrameNode节点，修改生效\n      this.rootNode.commonAttribute\n        .width(\"100%\")\n        .height(100)\n        .borderWidth(1)\n        .backgroundColor(Color.Gray)\n    }\n\n    if (this.frameNode == null) {\n      this.frameNode = new FrameNode(uiContext);\n      // 对frameNode进行属性修改，该节点为自定义的FrameNode节点，修改生效\n      this.frameNode.commonAttribute\n        .width(\"50%\")\n        .height(50)\n        .borderWidth(1)\n        .backgroundColor(Color.Pink);\n      this.rootNode.appendChild(this.frameNode);\n    }\n    if (this.buttonNode == null) {\n      this.buttonNode = new BuilderNode<[Params]>(uiContext);\n      this.buttonNode.build(this.wrapBuilder, { text: \"This is a Button\" })\n      // 对BuilderNode中获取的FrameNode进行属性修改，该节点非自定义的FrameNode节点，修改不生效\n      this.buttonNode?.getFrameNode()?.commonAttribute.position({ x: 100, y: 100 })\n      this.rootNode.appendChild(this.buttonNode.getFrameNode())\n    }\n    return this.rootNode;\n  }\n\n  modifyNode(frameNode: FrameNode | null | undefined, sizeValue: SizeOptions, positionValue: Position) {\n    if (frameNode) {\n      frameNode.commonAttribute.size(sizeValue).position(positionValue);\n    }\n  }\n\n  addClickEvent(frameNode: FrameNode | null | undefined) {\n    if (frameNode) {\n      frameNode.commonEvent.setOnClick((event: ClickEvent) => {\n        console.log(`FrameNode ${JSON.stringify(event)}`);\n      })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private myNodeController: MyNodeController = new MyNodeController();\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n      Column({ space: 10 }) {\n        Text(\"修改节点通用属性-宽高\")\n        Button(\"modify ArkTS-FrameNode\")\n          .onClick(() => {\n            // 获取到的是当前页面中的开发者创建的FrameNode对象，该节点可修改。即节点大小与位置。\n            console.log(\"Check the weather the node can be modified \" + this.myNodeController?.frameNode\n            ?.isModifiable());\n            this.myNodeController.modifyNode(this.myNodeController?.frameNode, { width: 150, height: 100 }, {\n              x: 100,\n              y: 0\n            })\n          })\n        Button(\"modify FrameNode get by BuilderNode\")\n          .onClick(() => {\n            // 获取到的是当前页面中的BuilderNode的根节点，该节点不可修改。即节点大小与位置未发生改变。\n            console.log(\"Check the weather the node can be modified \" +\n            this.myNodeController?.buttonNode?.getFrameNode()\n            ?.isModifiable());\n            this.myNodeController.modifyNode(this.myNodeController?.buttonNode?.getFrameNode(), {\n              width: 100,\n              height: 100\n            }, { x: 50, y: 50 })\n          })\n        Button(\"modify proxyFrameNode get by search\")\n          .onClick(() => {\n            // rootNode调用getParent()获取到的是当前页面中的NodeContainer节点，该节点不可修改。即节点大小与位置未发生改变。\n            console.log(\"Check the weather the node can be modified \" + this.myNodeController?.rootNode?.getParent()\n            ?.isModifiable());\n            this.myNodeController.modifyNode(this.myNodeController?.rootNode?.getParent(), {\n              width: 500,\n              height: 500\n            }, {\n              x: 0,\n              y: 0\n            })\n          })\n      }\n      .padding({\n        left: 35,\n        right: 35,\n        top: 35,\n        bottom: 35\n      })\n\n      Column({ space: 10 }) {\n        Text(\"修改节点点击事件\")\n        Button(\"add click event to ArkTS-FrameNode\")\n          .onClick(() => {\n            // 获取到的是当前页面中的开发者创建的FrameNode对象，该节点可增加点击事件。\n            // 增加的点击事件参与事件竞争，即点击事件会在该节点被消费且不不再向父组件冒泡。\n            console.log(\"Check the weather the node can be modified \" + this.myNodeController?.rootNode?.getParent()\n            ?.isModifiable());\n            this.myNodeController.addClickEvent(this.myNodeController?.frameNode)\n          })\n        Button(\"add click event to FrameNode get by BuilderNode\")\n          .onClick(() => {\n            // 获取到的是当前页面中的BuilderNode的根节点，该类节点可增加点击事件。\n            // 点击的时候优先回调通过原生组件接口设置的click事件回调，然后回调通过commonEvent增加的click监听。\n            console.log(\"Check the weather the node can be modified \" +\n            this.myNodeController?.buttonNode?.getFrameNode()\n            ?.isModifiable());\n            this.myNodeController.addClickEvent(this.myNodeController?.buttonNode?.getFrameNode())\n          })\n        Button(\"add click event to proxyFrameNode get by search\")\n          .onClick(() => {\n            // rootNode调用getParent()获取到的是当前页面中的NodeContainer节点，该类节点可增加点击事件。\n            console.log(\"Check the weather the node can be modified \" + this.myNodeController?.rootNode?.getParent()\n            ?.isModifiable());\n            this.myNodeController.addClickEvent(this.myNodeController?.rootNode?.getParent());\n          })\n      }\n      .padding({\n        left: 35,\n        right: 35,\n        top: 35,\n        bottom: 35\n      })\n\n      NodeContainer(this.myNodeController)\n        .borderWidth(1)\n        .width(\"100%\")\n        .height(100)\n        .onClick((event: ClickEvent) => {\n          console.log(`NodeContainer ${JSON.stringify(event)}`);\n        })\n    }\n    .padding({\n      left: 35,\n      right: 35,\n      top: 35,\n      bottom: 35\n    })\n    .width(\"100%\")\n    .height(\"100%\")\n  }\n}
自定义测量布局与绘制
通过重写onDraw方法，可以自定义FrameNode的绘制内容。invalidate接口可以主动触发节点的重新绘制。
通过重写onMeasure可以自定义FrameNode的测量方式，使用measure可以主动传递布局约束触发重新测量。
通过重写onLayout方法可以自定义FrameNode的布局方式，使用layout方法可以主动传递位置信息并触发重新布局。
setNeedsLayout可以将当前节点标记，在下一帧触发重新布局。
 对节点进行dispose解引用后，由于FrameNode对象不再对应一个实体节点，invalidate无法触发原有绑定节点的刷新。 通过onDraw方法进行的自定义绘制，绘制内容大小无法超出组件大小。 
import { DrawContext, FrameNode, NodeController, Position, Size, UIContext, LayoutConstraint } from '@kit.ArkUI';\nimport { drawing } from '@kit.ArkGraphics2D';\n\nfunction GetChildLayoutConstraint(constraint: LayoutConstraint, child: FrameNode): LayoutConstraint {\n  const size = child.getUserConfigSize();\n  const width = Math.max(\n    Math.min(constraint.maxSize.width, size.width.value),\n    constraint.minSize.width\n  );\n  const height = Math.max(\n    Math.min(constraint.maxSize.height, size.height.value),\n    constraint.minSize.height\n  );\n  const finalSize: Size = { width, height };\n  const res: LayoutConstraint = {\n    maxSize: finalSize,\n    minSize: finalSize,\n    percentReference: finalSize\n  };\n\n  return res;\n}\n\nclass MyFrameNode extends FrameNode {\n  public width: number = 100;\n  public offsetY: number = 0;\n  private space: number = 1;\n\n  onMeasure(constraint: LayoutConstraint): void {\n    let sizeRes: Size = { width: vp2px(100), height: vp2px(100) };\n    for (let i = 0; i < this.getChildrenCount(); i++) {\n      let child = this.getChild(i);\n      if (child) {\n        let childConstraint = GetChildLayoutConstraint(constraint, child);\n        child.measure(childConstraint);\n        let size = child.getMeasuredSize();\n        sizeRes.height += size.height + this.space;\n        sizeRes.width = Math.max(sizeRes.width, size.width);\n      }\n    }\n    this.setMeasuredSize(sizeRes);\n  }\n\n  onLayout(position: Position): void {\n    for (let i = 0; i < this.getChildrenCount(); i++) {\n      let child = this.getChild(i);\n      if (child) {\n        child.layout({\n          x: vp2px(100),\n          y: vp2px(this.offsetY)\n        });\n        let layoutPosition = child.getLayoutPosition();\n        console.log(\"child position:\" + JSON.stringify(layoutPosition));\n      }\n    }\n    this.setLayoutPosition(position);\n  }\n\n  onDraw(context: DrawContext) {\n    const canvas = context.canvas;\n    const pen = new drawing.Pen();\n    pen.setStrokeWidth(15);\n    pen.setColor({\n      alpha: 255,\n      red: 255,\n      green: 0,\n      blue: 0\n    });\n    canvas.attachPen(pen);\n    canvas.drawRect({\n      left: 50,\n      right: this.width + 50,\n      top: 50,\n      bottom: this.width + 50,\n    });\n    canvas.detachPen();\n  }\n\n  addWidth() {\n    this.width = (this.width + 10) % 50 + 100;\n  }\n}\n\nclass MyNodeController extends NodeController {\n  public rootNode: MyFrameNode | null = null;\n\n  makeNode(context: UIContext): FrameNode | null {\n    this.rootNode = new MyFrameNode(context);\n    this.rootNode?.commonAttribute?.size({ width: 100, height: 100 }).backgroundColor(Color.Green);\n    let frameNode: FrameNode = new FrameNode(context);\n    this.rootNode.appendChild(frameNode);\n    frameNode.commonAttribute.width(10).height(10).backgroundColor(Color.Pink);\n    return this.rootNode;\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private nodeController: MyNodeController = new MyNodeController();\n\n  build() {\n    Row() {\n      Column() {\n        NodeContainer(this.nodeController)\n          .width('100%')\n          .height(200)\n          .backgroundColor('#FFF0F0F0')\n        Button('Invalidate')\n          .margin(10)\n          .onClick(() => {\n            this.nodeController?.rootNode?.addWidth();\n            this.nodeController?.rootNode?.invalidate();\n          })\n        Button('UpdateLayout')\n          .onClick(() => {\n            let node = this.nodeController.rootNode;\n            node!.offsetY = (node!.offsetY + 10) % 110;\n            this.nodeController?.rootNode?.setNeedsLayout();\n          })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .height('100%')\n  }\n}
查找节点及获取基础信息
FrameNode提供了查询接口用于返回实体节点的基础信息。具体返回的信息内容参考FrameNode中提供的接口。
查找获得FrameNode的方式包括三种：
 使用getFrameNodeById获取。 使用getFrameNodeByUniqueId获取。 通过无感监听获取。 
1、当前接口提供的可查询的信息包括：
 节点大小：getMeasuredSize，getUserConfigSize 布局信息：getPositionToWindow，getPositionToParent，getLayoutPosition，getUserConfigBorderWidth，getUserConfigPadding，getUserConfigMargin 节点信息：getId，getUniqueId，getNodeType，getOpacity，isVisible，isClipToFrame，isAttached，getInspectorInfo，getCustomProperty 
2、无法获取UINode类型节点，例如：JsView节点、Span、ContainerSpan、ContentSlot、ForEach、LazyForEach、if/else组件等。
获取节点位置偏移信息
FrameNode提供了查询节点相对窗口、父组件以及屏幕位置偏移的信息接口（getPositionToWindow，getPositionToParent，getPositionToScreen，getPositionToWindowWithTransform，getPositionToParentWithTransform，getPositionToScreenWithTransform，getLayoutPosition，getUserConfigBorderWidth，getUserConfigPadding，getUserConfigMargin）。
import { NodeController, FrameNode, UIContext } from '@kit.ArkUI';\n\nconst TEST_TAG: string = \"FrameNode\"\n\nclass MyNodeController extends NodeController {\n  public frameNode: FrameNode | null = null;\n  private rootNode: FrameNode | null = null;\n\n  makeNode(uiContext: UIContext): FrameNode | null {\n    this.rootNode = new FrameNode(uiContext);\n    this.frameNode = new FrameNode(uiContext);\n    this.rootNode.appendChild(this.frameNode);\n    return this.rootNode;\n  }\n\n  getPositionToWindow() {\n    let positionToWindow = this.rootNode?.getPositionToWindow(); // 获取FrameNode相对于窗口的位置偏移\n    console.log(`${TEST_TAG} ${JSON.stringify(positionToWindow)}`);\n  }\n\n  getPositionToParent() {\n    let positionToParent = this.rootNode?.getPositionToParent(); // 获取FrameNode相对于父组件的位置偏移\n    console.log(`${TEST_TAG} ${JSON.stringify(positionToParent)}`);\n  }\n\n  getPositionToScreen() {\n    let positionToScreen = this.rootNode?.getPositionToScreen(); // 获取FrameNode相对于屏幕的位置偏移\n    console.log(`${TEST_TAG} ${JSON.stringify(positionToScreen)}`);\n  }\n\n  getPositionToWindowWithTransform() {\n    let positionToWindowWithTransform =\n      this.rootNode?.getPositionToWindowWithTransform(); // 获取FrameNode相对于窗口带有绘制属性的位置偏移\n    console.log(`${TEST_TAG} ${JSON.stringify(positionToWindowWithTransform)}`);\n  }\n\n  getPositionToParentWithTransform() {\n    let positionToParentWithTransform =\n      this.rootNode?.getPositionToParentWithTransform(); // 获取FrameNode相对于父组件带有绘制属性的位置偏移\n    console.log(`${TEST_TAG} ${JSON.stringify(positionToParentWithTransform)}`);\n  }\n\n  getPositionToScreenWithTransform() {\n    let positionToScreenWithTransform =\n      this.rootNode?.getPositionToScreenWithTransform(); // 获取FrameNode相对于屏幕带有绘制属性的位置偏移\n    console.log(`${TEST_TAG} ${JSON.stringify(positionToScreenWithTransform)}`);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private myNodeController: MyNodeController = new MyNodeController();\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n      Button(\"getPositionToWindow\")\n        .width(300)\n        .onClick(() => {\n          this.myNodeController.getPositionToWindow();\n        })\n      Button(\"getPositionToParent\")\n        .width(300)\n        .onClick(() => {\n          this.myNodeController.getPositionToParent();\n        })\n      Button(\"getPositionToScreen\")\n        .width(300)\n        .onClick(() => {\n          this.myNodeController.getPositionToScreen();\n        })\n      Button(\"getPositionToParentWithTransform\")\n        .width(300)\n        .onClick(() => {\n          this.myNodeController.getPositionToParentWithTransform();\n        })\n      Button(\"getPositionToWindowWithTransform\")\n        .width(300)\n        .onClick(() => {\n          this.myNodeController.getPositionToWindowWithTransform();\n        })\n      Button(\"getPositionToScreenWithTransform\")\n        .width(300)\n        .onClick(() => {\n          this.myNodeController.getPositionToScreenWithTransform();\n        })\n      Column() {\n        Text(\"This is a NodeContainer.\")\n          .textAlign(TextAlign.Center)\n          .borderRadius(10)\n          .backgroundColor(0xFFFFFF)\n          .width('100%')\n          .fontSize(16)\n        NodeContainer(this.myNodeController)\n          .borderWidth(1)\n          .width(300)\n          .height(100)\n      }\n    }\n    .padding({\n      left: 35,\n      right: 35,\n      top: 35,\n      bottom: 35\n    })\n    .width(\"100%\")\n    .height(\"100%\")\n  }\n}
通过typeNode创建具体类型的FrameNode节点
通过TypeNode创建具体类型的FrameNode节点，可以根据属性获取接口来检索用户设置的属性信息。
import { NodeController, FrameNode, UIContext, BuilderNode, typeNode } from '@kit.ArkUI';\n\nclass Params {\n  text: string = \"\";\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\n@Builder\nfunction buildText(params: Params) {\n  Column() {\n    Text(params.text)\n      .id(\"buildText\")\n      .border({ width: 1 })\n      .padding(1)\n      .fontSize(25)\n      .fontWeight(FontWeight.Bold)\n      .margin({ top: 10 })\n      .visibility(Visibility.Visible)\n      .opacity(0.7)\n      .customProperty(\"key1\", \"value1\")\n      .width(300)\n  }\n}\n\nconst TEST_TAG: string = \"FrameNode\"\n\nclass MyNodeController extends NodeController {\n  public frameNode: typeNode.Column | null = null;\n  public uiContext: UIContext | undefined = undefined;\n  private rootNode: FrameNode | null = null;\n  private textNode: BuilderNode<[Params]> | null = null;\n  public textTypeNode: typeNode.Text | null = null;\n  private message: string = \"DEFAULT\";\n\n  makeNode(uiContext: UIContext): FrameNode | null {\n    this.rootNode = new FrameNode(uiContext);\n    this.uiContext = uiContext;\n    this.frameNode = typeNode.createNode(uiContext, \"Column\");\n    this.frameNode.attribute\n      .width(\"100%\")\n      .height(\"100%\")\n    this.rootNode.appendChild(this.frameNode);\n    this.textNode = new BuilderNode(uiContext);\n    this.textNode.build(wrapBuilder<[Params]>(buildText), new Params(this.message));\n    this.frameNode.appendChild(this.textNode.getFrameNode());\n    this.textTypeNode = typeNode.createNode(uiContext, \"Text\");\n    this.textTypeNode.initialize(\"textTypeNode\")\n      .fontSize(25)\n      .visibility(Visibility.Visible)\n      .id(\"textTypeNode\")\n    this.frameNode.appendChild(this.textTypeNode);\n    return this.rootNode;\n  }\n\n  removeChild(frameNode: FrameNode) {\n    let parent = frameNode.getParent();\n    if (parent) {\n      parent.removeChild(frameNode);\n\n    }\n  }\n\n  getUserConfigBorderWidth(frameNode: FrameNode) {\n    let userConfigBorderWidth = frameNode?.getUserConfigBorderWidth(); // 获取用户设置的边框宽度\n    console.log(`${TEST_TAG} ${JSON.stringify(userConfigBorderWidth)}`);\n  }\n\n  getUserConfigPadding(frameNode: FrameNode) {\n    let userConfigPadding = frameNode?.getUserConfigPadding(); // 获取用户设置的内边距\n    console.log(`${TEST_TAG} ${JSON.stringify(userConfigPadding)}`);\n  }\n\n  getUserConfigMargin(frameNode: FrameNode) {\n    let userConfigMargin = frameNode?.getUserConfigMargin(); // 获取用户设置的外边距\n    console.log(`${TEST_TAG} ${JSON.stringify(userConfigMargin)}`);\n  }\n\n  getUserConfigSize(frameNode: FrameNode) {\n    let userConfigSize = frameNode?.getUserConfigSize(); // 获取用户设置的宽高\n    console.log(`${TEST_TAG} ${JSON.stringify(userConfigSize)}`);\n  }\n\n  getId(frameNode: FrameNode) {\n    let id = frameNode?.getId(); // 获取用户设置的节点ID\n    console.log(`${TEST_TAG} ${id}`);\n  }\n\n  getUniqueId(frameNode: FrameNode) {\n    let uniqueId = frameNode?.getUniqueId(); // 获取系统分配的唯一标识的节点UniqueID\n    console.log(`${TEST_TAG} ${uniqueId}`);\n  }\n\n  getNodeType(frameNode: FrameNode) {\n    let nodeType = frameNode?.getNodeType(); // 获取节点的类型\n    console.log(`${TEST_TAG} ${nodeType}`);\n  }\n\n  getOpacity(frameNode: FrameNode) {\n    let opacity = frameNode?.getOpacity(); // 获取节点的不透明度\n    console.log(`${TEST_TAG} ${JSON.stringify(opacity)}`);\n  }\n\n  isVisible(frameNode: FrameNode) {\n    let visible = frameNode?.isVisible(); // 获取节点是否可见\n    console.log(`${TEST_TAG} ${JSON.stringify(visible)}`);\n  }\n\n  isClipToFrame(frameNode: FrameNode) {\n    let clipToFrame = frameNode?.isClipToFrame(); // 获取节点是否是剪裁到组件区域\n    console.log(`${TEST_TAG} ${JSON.stringify(clipToFrame)}`);\n  }\n\n  isAttached(frameNode: FrameNode) {\n    let attached = frameNode?.isAttached(); // 获取节点是否被挂载到主节点树上\n    console.log(`${TEST_TAG} ${JSON.stringify(attached)}`);\n  }\n\n  getInspectorInfo(frameNode: FrameNode) {\n    let inspectorInfo = frameNode?.getInspectorInfo(); // 获取节点的结构信息\n    console.log(`${TEST_TAG} ${JSON.stringify(inspectorInfo)}`);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private myNodeController: MyNodeController = new MyNodeController();\n  @State index: number = 0;\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceBetween }) {\n      Column() {\n        Text(\"This is a NodeContainer.\")\n          .textAlign(TextAlign.Center)\n          .borderRadius(10)\n          .backgroundColor(0xFFFFFF)\n          .width('100%')\n          .fontSize(16)\n        NodeContainer(this.myNodeController)\n          .borderWidth(1)\n          .width(300)\n          .height(100)\n      }\n\n      Button(\"getUserConfigBorderWidth\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getUserConfigBorderWidth(node);\n            }\n          }\n        })\n      Button(\"getUserConfigPadding\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getUserConfigPadding(node);\n            }\n          }\n        })\n      Button(\"getUserConfigMargin\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getUserConfigMargin(node);\n            }\n          }\n        })\n      Button(\"getUserConfigSize\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getUserConfigSize(node);\n            }\n          }\n        })\n      Button(\"getId\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getId(node);\n            }\n          }\n        })\n      Button(\"getUniqueId\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getUniqueId(node);\n            }\n          }\n        })\n      Button(\"getNodeType\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getNodeType(node);\n            }\n          }\n        })\n      Button(\"getOpacity\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getOpacity(node);\n            }\n          }\n        })\n      Button(\"isVisible\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.isVisible(node);\n            }\n          }\n        })\n      Button(\"isClipToFrame\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.isClipToFrame(node);\n            }\n          }\n        })\n      Button(\"isAttached\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.isAttached(node);\n            }\n          }\n        })\n      Button(\"remove Text\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"textTypeNode\") || null;\n            if (node) {\n              this.myNodeController.removeChild(node);\n              this.myNodeController.isAttached(node);\n            }\n          }\n        })\n      Button(\"getInspectorInfo\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              this.myNodeController.getInspectorInfo(node);\n            }\n          }\n        })\n      Button(\"getCustomProperty\")\n        .width(300)\n        .onClick(() => {\n          const uiContext: UIContext = this.getUIContext();\n          if (uiContext) {\n            const node: FrameNode | null = uiContext.getFrameNodeById(\"buildText\") || null;\n            if (node) {\n              const property = node.getCustomProperty(\"key1\");\n              console.log(TEST_TAG, JSON.stringify(property));\n            }\n          }\n        })\n    }\n    .padding({\n      left: 35,\n      right: 35,\n      top: 35,\n      bottom: 35\n    })\n    .width(\"100%\")\n    .height(\"100%\")\n  }\n}
解除当前FrameNode对象对实体FrameNode节点的引用关系
使用dispose接口可以立即解除当前FrameNode对象对实体FrameNode节点的引用关系。
在调用dispose方法后，FrameNode对象不再对应任何实际的FrameNode节点。此时，若尝试调用以下查询接口：getMeasuredSize、getLayoutPosition、getUserConfigBorderWidth、getUserConfigPadding、getUserConfigMargin、getUserConfigSize，将导致应用程序触发jscrash。
通过getUniqueId可以判断当前FrameNode是否对应一个实体FrameNode节点。当UniqueId大于0时表示该对象对应一个实体FrameNode节点。
import { NodeController, FrameNode, BuilderNode } from '@kit.ArkUI';\n\nconst TEST_TAG: string = \"FrameNode\";\n\n@Component\nstruct TestComponent {\n  build() {\n    Column() {\n      Text('This is a BuilderNode.')\n        .fontSize(16)\n        .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n    .backgroundColor(Color.Gray)\n  }\n\n  aboutToAppear() {\n    console.error(TEST_TAG + ' aboutToAppear');\n  }\n\n  aboutToDisappear() {\n    console.error(TEST_TAG + ' aboutToDisappear');\n  }\n}\n\n@Builder\nfunction buildComponent() {\n  TestComponent()\n}\n\nclass MyNodeController extends NodeController {\n  private rootNode: FrameNode | null = null;\n  private builderNode: BuilderNode<[]> | null = null;\n\n  makeNode(uiContext: UIContext): FrameNode | null {\n    this.rootNode = new FrameNode(uiContext);\n    this.builderNode = new BuilderNode(uiContext, { selfIdealSize: { width: 200, height: 100 } });\n    this.builderNode.build(new WrappedBuilder(buildComponent));\n\n    const rootRenderNode = this.rootNode.getRenderNode();\n    if (rootRenderNode !== null) {\n      rootRenderNode.size = { width: 200, height: 200 };\n      rootRenderNode.backgroundColor = 0xff00ff00;\n      rootRenderNode.appendChild(this.builderNode!.getFrameNode()!.getRenderNode());\n    }\n\n    return this.rootNode;\n  }\n\n  printUniqueId(): void {\n    if (this.rootNode !== null && this.builderNode !== null) {\n      console.log(`${TEST_TAG} rootNode's uniqueId: ${this.rootNode.getUniqueId()}`);\n      const frameNode = this.builderNode.getFrameNode();\n      if (frameNode) {\n        console.log(`${TEST_TAG} the uniqueId of builderNode's framenode: ${frameNode.getUniqueId()}`);\n      } else {\n        console.log(`${TEST_TAG} builderNode's framenode is undefined`);\n      }\n    }\n  }\n\n  disposeFrameNode(): void {\n    if (this.rootNode !== null && this.builderNode !== null) {\n      console.log(`${TEST_TAG} disposeFrameNode`);\n      this.rootNode.removeChild(this.builderNode.getFrameNode());\n      this.builderNode.dispose();\n\n      this.rootNode.dispose();\n    }\n  }\n\n  removeBuilderNode(): void {\n    const rootRenderNode = this.rootNode!.getRenderNode();\n    if (rootRenderNode !== null && this.builderNode !== null && this.builderNode.getFrameNode() !== null) {\n      rootRenderNode.removeChild(this.builderNode!.getFrameNode()!.getRenderNode());\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private myNodeController: MyNodeController = new MyNodeController();\n\n  build() {\n    Column({ space: 4 }) {\n      NodeContainer(this.myNodeController)\n      Button('FrameNode dispose')\n        .onClick(() => {\n          this.myNodeController.printUniqueId();\n          this.myNodeController.disposeFrameNode();\n          this.myNodeController.printUniqueId();\n        })\n        .width('100%')\n    }\n  }\n}
FrameNode的数据懒加载能力
提供NodeAdapter对象替代ArkTS侧的LazyForEach功能，提供自定义节点的数据懒加载功能，实现按需迭代数据。
入参不能为负数，入参为负数时不做处理。
import { FrameNode, NodeController, NodeAdapter, typeNode } from '@kit.ArkUI';\n\nconst TEST_TAG: string = \"FrameNode\";\n\nclass MyNodeAdapter extends NodeAdapter {\n  uiContext: UIContext\n  cachePool: Array<FrameNode> = new Array();\n  changed: boolean = false\n  reloadTimes: number = 0;\n  data: Array<string> = new Array();\n  hostNode?: FrameNode\n\n  constructor(uiContext: UIContext, count: number) {\n    super();\n    this.uiContext = uiContext;\n    this.totalNodeCount = count;\n    this.loadData();\n  }\n\n  reloadData(count: number): void {\n    this.reloadTimes++;\n    NodeAdapter.attachNodeAdapter(this, this.hostNode);\n    this.totalNodeCount = count;\n    this.loadData();\n    this.reloadAllItems();\n  }\n\n  refreshData(): void {\n    let items = this.getAllAvailableItems()\n    console.log(TEST_TAG + \" get All items:\" + items.length);\n    this.totalNodeCount -= 1;\n    this.reloadAllItems();\n  }\n\n  detachData(): void {\n    NodeAdapter.detachNodeAdapter(this.hostNode);\n    this.reloadTimes = 0;\n  }\n\n  loadData(): void {\n    for (let i = 0; i < this.totalNodeCount; i++) {\n      this.data[i] = \"Adapter ListItem \" + i + \" r:\" + this.reloadTimes;\n    }\n  }\n\n  changeData(from: number, count: number): void {\n    this.changed = !this.changed;\n    for (let i = 0; i < count; i++) {\n      let index = i + from;\n      this.data[index] = \"Adapter ListItem \" + (this.changed ? \"changed:\" : \"\") + index + \" r:\" + this.reloadTimes;\n    }\n    this.reloadItem(from, count);\n  }\n\n  insertData(from: number, count: number): void {\n    for (let i = 0; i < count; i++) {\n      let index = i + from;\n      this.data.splice(index, 0, \"Adapter ListItem \" + from + \"-\" + i);\n    }\n    this.insertItem(from, count);\n    this.totalNodeCount += count;\n    console.log(TEST_TAG + \" after insert count:\" + this.totalNodeCount);\n  }\n\n  removeData(from: number, count: number): void {\n    let arr = this.data.splice(from, count);\n    this.removeItem(from, count);\n    this.totalNodeCount -= arr.length;\n    console.log(TEST_TAG + \" after remove count:\" + this.totalNodeCount);\n  }\n\n  moveData(from: number, to: number): void {\n    let tmp = this.data.splice(from, 1);\n    this.data.splice(to, 0, tmp[0]);\n    this.moveItem(from, to);\n  }\n\n  onAttachToNode(target: FrameNode): void {\n    console.log(TEST_TAG + \" onAttachToNode id:\" + target.getUniqueId());\n    this.hostNode = target;\n  }\n\n  onDetachFromNode(): void {\n    console.log(TEST_TAG + \" onDetachFromNode\");\n  }\n\n  onGetChildId(index: number): number {\n    console.log(TEST_TAG + \" onGetChildId:\" + index);\n    return index;\n  }\n\n  onCreateChild(index: number): FrameNode {\n    console.log(TEST_TAG + \" onCreateChild:\" + index);\n    if (this.cachePool.length > 0) {\n      let cacheNode = this.cachePool.pop();\n      if (cacheNode !== undefined) {\n        console.log(TEST_TAG + \" onCreateChild reused id:\" + cacheNode.getUniqueId());\n        let text = cacheNode?.getFirstChild();\n        let textNode = text as typeNode.Text;\n        textNode?.initialize(this.data[index]).fontSize(20);\n        return cacheNode;\n      }\n    }\n    console.log(TEST_TAG + \" onCreateChild createNew\");\n    let itemNode = typeNode.createNode(this.uiContext, \"ListItem\");\n    let textNode = typeNode.createNode(this.uiContext, \"Text\");\n    textNode.initialize(this.data[index]).fontSize(20);\n    itemNode.appendChild(textNode);\n    return itemNode;\n  }\n\n  onDisposeChild(id: number, node: FrameNode): void {\n    console.log(TEST_TAG + \" onDisposeChild:\" + id);\n    if (this.cachePool.length < 10) {\n      if (!this.cachePool.includes(node)) {\n        console.log(TEST_TAG + \" caching node id:\" + node.getUniqueId());\n        this.cachePool.push(node);\n      }\n    } else {\n      node.dispose();\n    }\n  }\n\n  onUpdateChild(id: number, node: FrameNode): void {\n    let index = id;\n    let text = node.getFirstChild();\n    let textNode = text as typeNode.Text;\n    textNode?.initialize(this.data[index]).fontSize(20);\n  }\n}\n\nclass MyNodeAdapterController extends NodeController {\n  rootNode: FrameNode | null = null;\n  nodeAdapter: MyNodeAdapter | null = null;\n\n  makeNode(uiContext: UIContext): FrameNode | null {\n    this.rootNode = new FrameNode(uiContext);\n    let listNode = typeNode.createNode(uiContext, \"List\");\n    listNode.initialize({ space: 3 }).borderWidth(2).borderColor(Color.Black);\n    this.rootNode.appendChild(listNode);\n    this.nodeAdapter = new MyNodeAdapter(uiContext, 100);\n    NodeAdapter.attachNodeAdapter(this.nodeAdapter, listNode);\n    return this.rootNode;\n  }\n}\n\n@Entry\n@Component\nstruct ListNodeTest {\n  adapterController: MyNodeAdapterController = new MyNodeAdapterController();\n\n  build() {\n    Column() {\n      Text(\"ListNode Adapter\");\n      NodeContainer(this.adapterController)\n        .width(300).height(300)\n        .borderWidth(1).borderColor(Color.Black);\n      Row() {\n        Button(\"Reload\")\n          .onClick(() => {\n            this.adapterController.nodeAdapter?.reloadData(50);\n          })\n        Button(\"Change\")\n          .onClick(() => {\n            this.adapterController.nodeAdapter?.changeData(5, 10)\n          })\n        Button(\"Insert\")\n          .onClick(() => {\n            this.adapterController.nodeAdapter?.insertData(10, 10);\n          })\n      }\n\n      Row() {\n        Button(\"Remove\")\n          .onClick(() => {\n            this.adapterController.nodeAdapter?.removeData(10, 10);\n          })\n        Button(\"Move\")\n          .onClick(() => {\n            this.adapterController.nodeAdapter?.moveData(2, 5);\n          })\n        Button(\"Refresh\")\n          .onClick(() => {\n            this.adapterController.nodeAdapter?.refreshData();\n          })\n        Button(\"Detach\")\n          .onClick(() => {\n            this.adapterController.nodeAdapter?.detachData();\n          })\n      }\n    }.borderWidth(1)\n    .width(\"100%\")\n  }\n}
