使用NativeWindowEventFilter过滤多模输入事件（C/C++）
场景介绍
开发者可以NativeWindowEventFilter模块提供的能力去拦截按键事件，让按键事件不往应用内部组件分发。
接口说明
开发步骤
[h2]在CMake脚本中链接动态库
target_link_libraries(entry PUBLIC libnative_window_manager.so libohinput.so)
[h2]添加头文件
#include \"window_manager/oh_window_comm.h\"\n#include \"window_manager/oh_window_event_filter.h\"\n#include \"multimodalinput/oh_input_manager.h\"\n#include \"multimodalinput/oh_key_code.h\"
[h2]接口使用说明
应用窗口创建后，通过窗口ID去绑定窗口的按键事件过滤函数。应用窗口需要收到按键事件时，窗口才可触发按键事件的拦截。当回调函数返回值为true表示拦截，为false不拦截。同一个窗口ID注册的回调函数只允许一个，最后注册的回调函数会覆盖之前注册过的回调函数。如需过滤多个按键的组合场景，建议在一个回调函数里面处理。
示例代码
以下示例代码中介绍了如何注册过滤函数和取消过滤函数，以过滤ESC退出按键和数字按键为例。
#include \"napi/native_api.h\"\n#include \"window_manager/oh_window_comm.h\"\n#include \"window_manager/oh_window_event_filter.h\"\n#include \"multimodalinput/oh_input_manager.h\"\n#include \"multimodalinput/oh_key_code.h\"\n\n// 设置过滤函数\nstatic bool filterFunc(Input_KeyEvent *event) {\n  auto keyCode = OH_Input_GetKeyEventKeyCode(event);\n  auto action = OH_Input_GetKeyEventAction(event);\n  // case1: 过滤escape\n  // return keyCode == Input_KeyCode::KEYCODE_ESCAPE;\n\n  // case2: 过滤数字键的按下，抬起不过滤\n  // return keyCode >= Input_KeyCode::KEYCODE_0 && keyCode <= Input_KeyCode::KEYCODE_9\n  //  && action == Input_KeyEventAction::KEY_ACTION_DOWN;\n  \n  // 过滤escape和数字键的按下(case1 || case2)\n  return (keyCode >= Input_KeyCode::KEYCODE_0 && keyCode <= Input_KeyCode::KEYCODE_9\n     && action == Input_KeyEventAction::KEY_ACTION_DOWN) || (keyCode == Input_KeyCode::KEYCODE_ESCAPE);\n}\n\nstatic napi_value registerFilter(napi_env env, napi_callback_info info) {\n  size_t argc = 1;\n  napi_value args[1] = {nullptr};\n  napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n  \n  int32_t windowId;\n  napi_get_value_int32(env, args[0], &windowId);\n  \n  // 向windowId对应的窗口注册filterFunc的过滤函数\n  auto res = OH_NativeWindowManager_RegisterKeyEventFilter(windowId, filterFunc);\n  \n  napi_value errCode;\n  napi_create_int32(env, res, &errCode);\n  return errCode;\n}\n\nstatic napi_value clearFilter(napi_env env, napi_callback_info info) {\n  size_t argc = 1;\n  napi_value args[1] = {nullptr};\n  napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n  int32_t windowId;\n  napi_get_value_int32(env, args[0], &windowId);\n\n  auto res = OH_NativeWindowManager_UnregisterKeyEventFilter(windowId);\n  napi_value errCode;\n  napi_create_int32(env, res, &errCode);\n  return errCode;\n\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n  napi_property_descriptor desc[] = {\n    {\"registerFilter\", nullptr, registerFilter, nullptr, nullptr, nullptr, napi_default, nullptr},\n    {\"clearFilter\", nullptr, clearFilter, nullptr, nullptr, nullptr, napi_default, nullptr}};\n  napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n  return exports;\n}\nEXTERN_C_END
