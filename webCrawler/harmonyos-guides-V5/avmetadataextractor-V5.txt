使用AVMetadataExtractor提取音视频元数据信息(ArkTS)
使用AVMetadataExtractor可以实现从原始媒体资源中获取元数据，本开发指导将以获取一个音频资源的元数据作为示例，向开发者讲解AVMetadataExtractor元数据相关功能。视频资源的元数据获取流程与音频类似，由于视频没有专辑封面，所以无法获取视频资源的专辑封面。
获取音频资源的元数据的全流程包含：创建AVMetadataExtractor，设置资源，获取元数据，获取专辑封面，销毁资源。
开发步骤及注意事项
详细的API说明请参考AVMetadataExtractor API参考。
 使用createAVMetadataExtractor()创建实例。 设置资源：用户可以根据需要选择设置属性fdSrc（表示文件描述符）, 或者设置属性dataSrc（表示dataSource描述符）。     开发者需根据实际情况，确认资源有效性并设置（只能设置其中一种）：  如果设置fdSrc，可以使用ResourceManager.getRawFd打开HAP资源文件描述符，使用方法可参考ResourceManager API参考。也可以通过应用沙箱路径访问对应资源（必须确保资源可用），参考获取应用文件路径。应用沙箱的介绍及如何向应用沙箱推送文件，请参考文件管理。 如果设置dataSrc，必须正确设置dataSrc中的callback属性，确保callback被调用时能正确读取到对应资源，使用应用沙箱路径访问对应资源，参考获取应用文件路径。应用沙箱的介绍及如何向应用沙箱推送文件，请参考文件管理。 不同AVMetadataExtractor或者AVImageGenerator实例，如果需要操作同一资源，需要多次打开文件描述符，不要共用同一文件描述符。    获取元数据：调用fetchMetadata()，可以获取到一个AVMetadata对象，通过访问该对象的各个属性，可以获取到元数据。 （可选）获取专辑封面：调用fetchAlbumCover()，可以获取到专辑封面。 释放资源：调用release()销毁实例，释放资源。 
完整示例
参考以下示例，设置文件描述符，获取一个音频的元数据和专辑封面。
import { media } from '@kit.MediaKit';\nimport { image } from '@kit.ImageKit';\nimport { common } from '@kit.AbilityKit';\nimport { fileIo as fs, ReadOptions } from '@kit.CoreFileKit';\n\nconst TAG = 'MetadataDemo';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n  // pixelMap对象声明，用于图片显示\n  @State pixelMap: image.PixelMap | undefined = undefined;\n  rootPath: string = getContext(this).getApplicationContext().filesDir;\n  testFilename: string = '/cover.mp3';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message).fontSize(50).fontWeight(FontWeight.Bold)\n        Button() {\n          Text('TestButton')\n            .fontSize(30)\n            .fontWeight(FontWeight.Bold)\n        }\n        .type(ButtonType.Capsule)\n        .margin({\n          top: 20\n        })\n        .backgroundColor('#0D9FFB')\n        .width('60%')\n        .height('5%')\n        .onClick(() => {\n          // 设置fdSrc, 获取音频元数据和专辑封面（异步接口以Callback形式调用）\n          this.testFetchMetadataFromFdSrcByCallback();\n          // 设置fdSrc, 获取音频元数据和专辑封面（异步接口以Promise形式调用）\n          this.testFetchMetadataFromFdSrcByPromise();\n          // 通过fdSrc获取沙箱路径下音频元数据和专辑封面（文件必须在沙箱路径里存在）\n          this.testFetchMetadataFromFdSrc();\n          // 设置dataSrc, 获取沙箱路径下音频元数据和专辑封面（文件必须在沙箱路径里存在）\n          this.testFetchMetadataFromDataSrc();\n        })\n\n        Image(this.pixelMap).width(300).height(300)\n          .margin({\n            top: 20\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n\n  // 在以下demo中，使用资源管理接口获取打包在HAP内的媒体资源文件，通过设置fdSrc属性，获取音频元数据并打印，\n  // 获取音频专辑封面并通过Image控件显示在屏幕上。该demo以Callback形式进行异步接口调用\n  async testFetchMetadataFromFdSrcByCallback() {\n    if (canIUse(\"SystemCapability.Multimedia.Media.AVMetadataExtractor\")) {\n      // 创建AVMetadataExtractor对象\n      let avMetadataExtractor: media.AVMetadataExtractor = await media.createAVMetadataExtractor();\n\n      // 设置fdSrc\n      avMetadataExtractor.fdSrc = await getContext(this).resourceManager.getRawFd('cover.mp3');\n\n      // 获取元数据（callback模式）\n      avMetadataExtractor.fetchMetadata((error, metadata) => {\n        if (error) {\n          console.error(TAG, `fetchMetadata callback failed, err = ${JSON.stringify(error)}`);\n          return;\n        }\n        console.info(TAG, `fetchMetadata callback success, genre: ${metadata.genre}`);\n      })\n\n      //获取专辑封面（callback模式）\n      avMetadataExtractor.fetchAlbumCover((err, pixelMap) => {\n        if (err) {\n          console.error(TAG, `fetchAlbumCover callback failed, err = ${JSON.stringify(err)}`);\n          return;\n        }\n        this.pixelMap = pixelMap;\n\n        // 释放资源（callback模式）\n        avMetadataExtractor.release((error) => {\n          if (error) {\n            console.error(TAG, `release failed, err = ${JSON.stringify(error)}`);\n            return;\n          }\n          console.info(TAG, `release success.`);\n        })\n      })\n    }\n  }\n\n  // 在以下demo中，使用资源管理接口获取打包在HAP内的媒体资源文件，通过设置fdSrc属性，获取音频元数据并打印，\n  // 获取音频专辑封面并通过Image控件显示在屏幕上。该demo以Promise形式进行异步接口调用\n  async testFetchMetadataFromFdSrcByPromise() {\n    if (canIUse(\"SystemCapability.Multimedia.Media.AVMetadataExtractor\")) {\n      // 创建AVMetadataExtractor对象\n      let avMetadataExtractor: media.AVMetadataExtractor = await media.createAVMetadataExtractor();\n      // 设置fdSrc\n      avMetadataExtractor.fdSrc = await getContext(this).resourceManager.getRawFd('cover.mp3');\n\n      // 获取元数据（promise模式）\n      let metadata = await avMetadataExtractor.fetchMetadata();\n      console.info(TAG, `get meta data, hasAudio: ${metadata.hasAudio}`);\n\n      // 获取专辑封面（promise模式）\n      this.pixelMap = await avMetadataExtractor.fetchAlbumCover();\n\n      // 释放资源（promise模式）\n      avMetadataExtractor.release();\n      console.info(TAG, `release success.`);\n    }\n  }\n\n  // 在以下demo中，使用fs文件系统打开沙箱地址获取媒体文件地址，设置fdSrc属性，获取音频元数据并打印，\n  // 获取音频专辑封面并通过Image控件显示在屏幕上。\n  async testFetchMetadataFromFdSrc() {\n    if (canIUse(\"SystemCapability.Multimedia.Media.AVMetadataExtractor\")) {\n      // 创建AVMetadataExtractor对象\n      let avMetadataExtractor = await media.createAVMetadataExtractor();\n\n      // 设置fdSrc\n      avMetadataExtractor.fdSrc = fs.openSync(this.rootPath + this.testFilename);\n\n      // 获取元数据（promise模式）\n      let metadata = await avMetadataExtractor.fetchMetadata();\n      console.info(TAG, `get meta data, mimeType: ${metadata.mimeType}`);\n\n      // 获取专辑封面（promise模式）\n      this.pixelMap = await avMetadataExtractor.fetchAlbumCover();\n\n      // 释放资源（promise模式）\n      avMetadataExtractor.release();\n      console.info(TAG, `release data source success.`);\n    }\n  }\n\n  // 在以下demo中，使用fs文件系统打开沙箱地址获取媒体文件地址，设置dataSrc属性，获取音频元数据并打印，\n  // 获取音频专辑封面并通过Image控件显示在屏幕上。\n  async testFetchMetadataFromDataSrc() {\n    let context = getContext(this) as common.UIAbilityContext;\n    // 通过UIAbilityContext获取沙箱地址filesDir（以Stage模型为例）\n    let fd: number = fs.openSync(this.rootPath + this.testFilename).fd;\n    let fileSize: number = fs.statSync(this.rootPath + this.testFilename).size;\n    // 设置dataSrc描述符，通过callback从文件中获取资源，写入buffer中\n    let dataSrc: media.AVDataSrcDescriptor = {\n      fileSize: fileSize,\n      callback: (buffer, len, pos) => {\n        if (buffer == undefined || len == undefined || pos == undefined) {\n          console.error(TAG, `dataSrc callback param invalid`);\n          return -1;\n        }\n        let options: ReadOptions = {\n          offset: pos,\n          length: len\n        };\n        let num = fs.readSync(fd, buffer, options);\n        console.info(TAG, 'readAt end, num: ' + num);\n        if (num > 0 && fileSize >= pos) {\n          return num;\n        }\n        return -1;\n      }\n    };\n\n    if (canIUse(\"SystemCapability.Multimedia.Media.AVMetadataExtractor\")) {\n      // 创建AVMetadataExtractor对象\n      let avMetadataExtractor = await media.createAVMetadataExtractor();\n      // 设置dataSrc\n      avMetadataExtractor.dataSrc = dataSrc;\n\n      // 获取元数据（promise模式）\n      let metadata = await avMetadataExtractor.fetchMetadata();\n      console.info(TAG, `get meta data, mimeType: ${metadata.mimeType}`);\n\n      // 获取专辑封面（promise模式）\n      this.pixelMap = await avMetadataExtractor.fetchAlbumCover();\n\n      // 释放资源（promise模式）\n      avMetadataExtractor.release();\n      console.info(TAG, `release data source success.`);\n    }\n  }\n}
