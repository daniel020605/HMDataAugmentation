使用AES对称密钥（GCM模式）分段加解密(ArkTS)
对应的算法规格请查看对称密钥加解密算法规格：AES。
加密
 调用cryptoFramework.createSymKeyGenerator、SymKeyGenerator.generateSymKey，生成密钥算法为AES、密钥长度为128位的对称密钥（SymKey）。 如何生成AES对称密钥，开发者可参考下文示例，并结合对称密钥生成和转换规格：AES和随机生成对称密钥理解，参考文档与当前示例可能存在入参差异，请在阅读时注意区分。 调用cryptoFramework.createCipher，指定字符串参数'AES128|GCM|PKCS7'，创建对称密钥类型为AES128、分组模式为GCM、填充模式为PKCS7的Cipher实例，用于完成加解密操作。 调用Cipher.init，设置模式为加密（CryptoMode.ENCRYPT_MODE），指定加密密钥（SymKey）和GCM模式对应的加密参数（GcmParamsSpec），初始化加密Cipher实例。 将一次传入数据量设置为20字节，多次调用Cipher.update，更新数据（明文）。  当前单次update长度没有限制，开发者可以根据数据量判断如何调用update。 建议开发者对每次update的结果都判断是否为null，并在结果不为null时取出其中的数据进行拼接，形成完整的密文。因为在不同的规格下，update的结果可能会受到不同影响。 1）比如ECB和CBC模式，始终以分组作为基本单位来加密，并输出本次update产生的加密分组结果。即当本次update操作凑满一个分组就输出密文，没有凑满则此次update输出null，将未加密的数据与下次输入的数据拼接凑分组再输出。等到最后doFinal的时候，将未加密的数据，根据指定的填充模式进行填充，在输出剩余加密结果。解密过程中的update同理。 2）对于流加密模式（比如CTR和OFB模式），通常密文长度和明文长度相等。  调用Cipher.doFinal，获取加密后的数据。  由于已使用update传入数据，此处data传入null。 doFinal输出结果可能为null，在访问具体数据前，需要先判断结果是否为null，避免产生异常。  读取GcmParamsSpec.authTag作为解密的认证信息。 在GCM模式下，需要从加密后的数据中取出末尾16字节，作为解密时初始化的认证信息。示例中authTag恰好为16字节。 
解密
 调用Cipher.init，设置模式为解密（CryptoMode.DECRYPT_MODE），指定解密密钥（SymKey）和GCM模式对应的解密参数（GcmParamsSpec），初始化解密Cipher实例。 将一次传入数据量设置为20字节，多次调用Cipher.update，更新数据（密文）。 调用Cipher.doFinal，获取解密后的数据。 
 异步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\nfunction generateRandom(len: number) {\n  let rand = cryptoFramework.createRandom();\n  let generateRandSync = rand.generateRandomSync(len);\n  return generateRandSync;\n}\n\nfunction genGcmParamsSpec() {\n  let ivBlob = generateRandom(12);\n  let arr = [1, 2, 3, 4, 5, 6, 7, 8]; // 8 bytes\n  let dataAad = new Uint8Array(arr);\n  let aadBlob: cryptoFramework.DataBlob = { data: dataAad };\n  arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // 16 bytes\n  let dataTag = new Uint8Array(arr);\n  let tagBlob: cryptoFramework.DataBlob = {\n    data: dataTag\n  }; // The GCM authTag is obtained by doFinal() in encryption and passed in params of init() in decryption.\n  let gcmParamsSpec: cryptoFramework.GcmParamsSpec = {\n    iv: ivBlob,\n    aad: aadBlob,\n    authTag: tagBlob,\n    algName: \"GcmParamsSpec\"\n  };\n  return gcmParamsSpec;\n}\nlet gcmParams = genGcmParamsSpec();\n// 分段加密消息\nasync function encryptMessageUpdateBySegment(symKey: cryptoFramework.SymKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('AES128|GCM|PKCS7');\n  await cipher.init(cryptoFramework.CryptoMode.ENCRYPT_MODE, symKey, gcmParams);\n  let updateLength = 20; // 假设以20字节为单位进行分段update，实际并无要求\n  let cipherText = new Uint8Array();\n  for (let i = 0; i < plainText.data.length; i += updateLength) {\n    let updateMessage = plainText.data.subarray(i, i + updateLength);\n    let updateMessageBlob: cryptoFramework.DataBlob = { data: updateMessage };\n    // 分段update\n    let updateOutput = await cipher.update(updateMessageBlob);\n    // 把update的结果拼接起来，得到密文（有些情况下还需拼接doFinal的结果，这取决于分组模式\n    // 和填充模式，本例中GCM模式的doFinal结果只包含authTag而不含密文，所以不需要拼接）\n    let mergeText = new Uint8Array(cipherText.length + updateOutput.data.length);\n    mergeText.set(cipherText);\n    mergeText.set(updateOutput.data, cipherText.length);\n    cipherText = mergeText;\n  }\n  gcmParams.authTag = await cipher.doFinal(null);\n  let cipherBlob: cryptoFramework.DataBlob = { data: cipherText };\n  return cipherBlob;\n}\n// 分段解密消息\nasync function decryptMessagePromise(symKey: cryptoFramework.SymKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('AES128|GCM|PKCS7');\n  await decoder.init(cryptoFramework.CryptoMode.DECRYPT_MODE, symKey, gcmParams);\n  let updateLength = 20; // 假设以20字节为单位进行分段update，实际并无要求\n  let decryptText = new Uint8Array();\n  for (let i = 0; i < cipherText.data.length; i += updateLength) {\n    let updateMessage = cipherText.data.subarray(i, i + updateLength);\n    let updateMessageBlob: cryptoFramework.DataBlob = { data: updateMessage };\n    // 分段update\n    let updateOutput = await decoder.update(updateMessageBlob);\n    // 把update的结果拼接起来，得到明文\n    let mergeText = new Uint8Array(decryptText.length + updateOutput.data.length);\n    mergeText.set(decryptText);\n    mergeText.set(updateOutput.data, decryptText.length);\n    decryptText = mergeText;\n  }\n  let decryptData = await decoder.doFinal(null);\n  if (decryptData == null) {\n    console.info('GCM decrypt success, decryptData is null');\n  }\n  let decryptBlob: cryptoFramework.DataBlob = { data: decryptText };\n  return decryptBlob;\n}\nasync function genSymKeyByData(symKeyData: Uint8Array) {\n  let symKeyBlob: cryptoFramework.DataBlob = { data: symKeyData };\n  let aesGenerator = cryptoFramework.createSymKeyGenerator('AES128');\n  let symKey = await aesGenerator.convertKey(symKeyBlob);\n  console.info('convertKey success');\n  return symKey;\n}\nasync function aes() {\n  let keyData = new Uint8Array([83, 217, 231, 76, 28, 113, 23, 219, 250, 71, 209, 210, 205, 97, 32, 159]);\n  let symKey = await genSymKeyByData(keyData);\n  let message = \"aaaaa.....bbbbb.....ccccc.....ddddd.....eee\"; // 假设信息总共43字节，根据utf-8解码后，也是43字节\n  let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n  let encryptText = await encryptMessageUpdateBySegment(symKey, plainText);\n  let decryptText = await decryptMessagePromise(symKey, encryptText);\n  if (plainText.data.toString() === decryptText.data.toString()) {\n    console.info('decrypt ok');\n    console.info('decrypt plainText: ' + buffer.from(decryptText.data).toString('utf-8'));\n  } else {\n    console.error('decrypt failed');\n  }\n} 同步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\nfunction generateRandom(len: number) {\n  let rand = cryptoFramework.createRandom();\n  let generateRandSync = rand.generateRandomSync(len);\n  return generateRandSync;\n}\n\nfunction genGcmParamsSpec() {\n  let ivBlob = generateRandom(12);\n  let arr = [1, 2, 3, 4, 5, 6, 7, 8]; // 8 bytes\n  let dataAad = new Uint8Array(arr);\n  let aadBlob: cryptoFramework.DataBlob = { data: dataAad };\n  arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // 16 bytes\n  let dataTag = new Uint8Array(arr);\n  let tagBlob: cryptoFramework.DataBlob = {\n    data: dataTag\n  }; // The GCM authTag is obtained by doFinal() in encryption and passed in params of init() in decryption.\n  let gcmParamsSpec: cryptoFramework.GcmParamsSpec = {\n    iv: ivBlob,\n    aad: aadBlob,\n    authTag: tagBlob,\n    algName: \"GcmParamsSpec\"\n  };\n  return gcmParamsSpec;\n}\nlet gcmParams = genGcmParamsSpec();\n// 分段加密消息\nfunction encryptMessageUpdateBySegment(symKey: cryptoFramework.SymKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('AES128|GCM|PKCS7');\n  cipher.initSync(cryptoFramework.CryptoMode.ENCRYPT_MODE, symKey, gcmParams);\n  let updateLength = 20; // 假设以20字节为单位进行分段update，实际并无要求\n  let cipherText = new Uint8Array();\n  for (let i = 0; i < plainText.data.length; i += updateLength) {\n    let updateMessage = plainText.data.subarray(i, i + updateLength);\n    let updateMessageBlob: cryptoFramework.DataBlob = { data: updateMessage };\n    // 分段update\n    let updateOutput = cipher.updateSync(updateMessageBlob);\n    // 把update的结果拼接起来，得到密文（有些情况下还需拼接doFinal的结果，这取决于分组模式\n    // 和填充模式，本例中GCM模式的doFinal结果只包含authTag而不含密文，所以不需要拼接）\n    let mergeText = new Uint8Array(cipherText.length + updateOutput.data.length);\n    mergeText.set(cipherText);\n    mergeText.set(updateOutput.data, cipherText.length);\n    cipherText = mergeText;\n  }\n  gcmParams.authTag = cipher.doFinalSync(null);\n  let cipherBlob: cryptoFramework.DataBlob = { data: cipherText };\n  return cipherBlob;\n}\n// 分段解密消息\nfunction decryptMessage(symKey: cryptoFramework.SymKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('AES128|GCM|PKCS7');\n  decoder.initSync(cryptoFramework.CryptoMode.DECRYPT_MODE, symKey, gcmParams);\n  let updateLength = 20; // 假设以20字节为单位进行分段update，实际并无要求\n  let decryptText = new Uint8Array();\n  for (let i = 0; i < cipherText.data.length; i += updateLength) {\n    let updateMessage = cipherText.data.subarray(i, i + updateLength);\n    let updateMessageBlob: cryptoFramework.DataBlob = { data: updateMessage };\n    // 分段update\n    let updateOutput = decoder.updateSync(updateMessageBlob);\n    // 把update的结果拼接起来，得到明文\n    let mergeText = new Uint8Array(decryptText.length + updateOutput.data.length);\n    mergeText.set(decryptText);\n    mergeText.set(updateOutput.data, decryptText.length);\n    decryptText = mergeText;\n  }\n  let decryptData = decoder.doFinalSync(null);\n  if (decryptData == null) {\n    console.info('GCM decrypt success, decryptData is null');\n  }\n  let decryptBlob: cryptoFramework.DataBlob = { data: decryptText };\n  return decryptBlob;\n}\nfunction genSymKeyByData(symKeyData: Uint8Array) {\n  let symKeyBlob: cryptoFramework.DataBlob = { data: symKeyData };\n  let aesGenerator = cryptoFramework.createSymKeyGenerator('AES128');\n  let symKey = aesGenerator.convertKeySync(symKeyBlob);\n  console.info('convertKeySync success');\n  return symKey;\n}\nfunction main() {\n  let keyData = new Uint8Array([83, 217, 231, 76, 28, 113, 23, 219, 250, 71, 209, 210, 205, 97, 32, 159]);\n  let symKey = genSymKeyByData(keyData);\n  let message = \"aaaaa.....bbbbb.....ccccc.....ddddd.....eee\"; // 假设信息总共43字节，根据utf-8解码后，也是43字节\n  let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n  let encryptText = encryptMessageUpdateBySegment(symKey, plainText);\n  let decryptText = decryptMessage(symKey, encryptText);\n  if (plainText.data.toString() === decryptText.data.toString()) {\n    console.info('decrypt ok');\n    console.info('decrypt plainText: ' + buffer.from(decryptText.data).toString('utf-8'));\n  } else {\n    console.error('decrypt failed');\n  }\n} 
