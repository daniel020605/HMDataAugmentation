常见问题
如何查询设备类型
设备类型分为default（默认设备）、tablet、tv、wearable、2in1等，有多种查询设备类型的方式。
 通过命令行的方式查询设备类型。 通过命令行查询指定系统参数（const.product.devicetype）进而确定设备类型。  # 方法一\n hdc shell param get \"const.product.devicetype\"\n # 方法二\n hdc shell cat /etc/param/ohos.para | grep const.product.devicetype 在应用开发过程中查询设备类型。  通过deviceInfo查询设备类型，deviceInfo中各个字段的含义请参考设备信息。  import { deviceInfo } from'@kit.BasicServicesKit'\n\n @Entry\n @Component\n struct GetDeviceTypeSample {\n   @State deviceType:string='unknown'\n\n   aboutToAppear() {\n     this.deviceType= deviceInfo.deviceType\n   }\n\n   build() {\n     Column() {\n       Text(this.deviceType).fontSize(24)\n     }\n     .width('100%')\n     .height('100%')\n   }\n}  
如何在不同设备上为Ability配置不同的启动模式
应用由一个或多个Ability组成，Ability支持单实例、多实例和指定实例3种启动模式，启动模式可以在配置文件（module.json5）中通过launchType字段配置。启动模式对应Ability被启动时的行为，对启动模式的详细说明如下：
默认设备屏幕尺寸较小，采用multiton启动模式不仅无法给用户提供便利，反而可能消耗更多系统资源，故通常采用singleton启动模式。平板屏幕尺寸较大且可能支持自由窗口，对于文档编辑、网页浏览等场景，使用multiton启动模式可以提升用户体验。
本文中将默认设备和平板等归为同一泛类，推荐同一泛类的设备共用HAP，同时本文也介绍了如何通过自适应布局能力和响应式布局能力开发出适配不同设备的页面。这里将补充介绍，如何实现Ability在不同设备上以不同的模式启动。
launchType字段配置为specified时，系统会根据AbilityStage的onAcceptWant的返回值确定是否创建新的实例。对于同一个应用，如果key已经存在，则复用该key对应的Ability，如果key不存在则新创建Ability。
可以将配置文件中的launchType字段配置为specified，同时在应用中加入如下代码以实现目标效果。
 非平板设备，直接将设备类型作为key，保证每次启动的key相同，即以单实例模式运行。 平板设备，将设备类型与毫秒级时间戳叠加作为key，保证每次启动的key不同，即以多实例模式运行。 
// MyAbilityStage.ts\nimport { AbilityStage, Want } from \"@kit.AbilityKit\"\nimport { deviceInfo } from'@kit.BasicServicesKit'\n\nexport default class MyAbilityStage extends AbilityStage {\n    //...\n    private generateKey(): string {\n        // 如果是平板，则将设备类型和毫秒级时间戳叠加作为key，保证每次启动的key都不同\n        if (deviceInfo.deviceType === 'tablet') {\n            return deviceInfo.deviceType + (new Date()).valueOf()\n        }\n        // 如果不是平板，直接以设备类型作为key，每次启动的key相同\n        return deviceInfo.deviceType\n    }\n    onAcceptWant(want: Want) : string{\n        return this.generateKey()\n    }\n}
如何开启自由窗口
自由窗口功能默认是关闭的，可以通过如下方式开启自由窗口功能。
# 取出窗口配置文件，并将文件中的<decor enable=\"false\"></decor>修改为<decor enable=\"true\"></decor>\nhdc file recv system/etc/window/resources/window_manager_config.xml ./\n# 以可读写的模式重新挂载根目录，并更新配置文件\nhdc shell mount -o rw,remount /\nhdc file send window_manager_config.xml system/etc/window/resources/window_manager_config.xml\n# 重启设备，配置生效\nhdc shell reboot
屏幕较小，通过手指操作窗口较为不便时，建议外接鼠标进行操作。
 鼠标在应用顶部悬停，即可召唤出窗口工具栏。 点击窗口工具栏中的缩放按钮（从左到右第二个），即可让应用以自由窗口的模式显示。 在自由窗口模式下，可以通过拖动应用窗口的边框或顶角，改变窗口尺寸同时触发应用显示刷新。 在调整窗口尺寸的过程中，窗口尺寸可能超出屏幕尺寸。此时应用显示正常，但受限于屏幕尺寸，在屏幕中只能看到应用部分区域的显示。可以通过移动窗口位置，查看应用其它区域的显示。     窗口操作按钮 悬浮窗口显示 调整窗口尺寸及位置查看不同的效果          
如何限制自由窗口的尺寸调节范围
自适应布局可以保证窗口尺寸在一定范围内变化时，页面的显示是正常的。当窗口尺寸变化较大时，就需要额外借助响应式布局能力（如断点等）调整页面结构以保证显示正常。通常每个断点都需要开发者精心适配以获得最佳的显示效果，考虑到设计及开发成本等实际因素的限制，应用不可能适配从零到正无穷的所有窗口宽度。
不同设备或不同设备状态，系统默认的自由窗口尺寸的调节范围可能不同。开发者可以在应用配置文件中限制应用中各个Ability的自由窗口尺寸调节范围，配置文件中影响自由窗口尺寸调节范围的字段如下表所示。
如下所示，通过配置文件分别限制自由窗口的最大和最小尺寸。
{\n  \"module\": {\n    //...\n    \"abilities\": [\n      {\n        //...        \n        \"minWindowWidth\": 320,\n        \"minWindowHeight\": 240,\n        \"maxWindowWidth\": 1440,\n        \"maxWindowHeight\": 900,\n        \"minWindowRatio\": 0.5,\n        \"maxWindowRatio\": 2,\n      }\n    ]\n  }\n}
如何获取组件的尺寸
实际开发过程中，开发者可能有获取页面中某个组件或某块区域的尺寸的诉求，以便通过手动计算等进行更精确的布局计算及优化。
开发者可以通过组件区域变化事件（即组件显示的尺寸、位置等发生变化时触发的事件）来获取指定组件的尺寸。
如下所示，通过onAreaChange事件获取Row组件（页面中白色区域）的尺寸。
@Entry\n@Component\nstruct OnAreaChangeSample {\n  @State rate: number = 0.8\n  @State info: string = ''\n\n  // 底部滑块，可以通过拖拽滑块改变容器尺寸\n  @Builder slider() {\n    Slider({ value: this.rate * 100, min: 30, max: 80, style: SliderStyle.OutSet })\n      .blockColor(Color.White)\n      .width('60%')\n      .onChange((value: number) => {\n        this.rate = value / 100;\n      })\n      .position({ x: '20%', y: '80%' })\n  }\n\n  build() {\n    Column() {\n      Column() {\n        Row() {\n          Text(this.info).fontSize(20).lineHeight(22)\n        }\n        .borderRadius(12)\n        .padding(24)\n        .backgroundColor('#FFFFFF')\n        .width(this.rate * 100 + '%')\n        .onAreaChange((oldValue: Area, newValue: Area) => {\n          this.info = JSON.stringify(newValue)\n        })\n      }\n\n      this.slider()\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor('#F1F3F5')\n    .justifyContent(FlexAlign.Center)\n  }\n}
如何解决顶部单张大图问题
解决方案
顶部背景图被拉伸时，可以通过设置背景图片的backgroundImageSize属性，使得图片大小能够合理显示，达到适配效果。
布局效果
参考代码
@Entry\n@Component\nstruct ImageClip {\n  build() {\n    // 设置背景图片的backgroundImageSize属性，使得图片大小能够合理显示\n    Column()\n      .width('100%')\n      .height(300)\n      .backgroundColor('#ccc')\n      .backgroundImage($r('app.media.ImageOne'))\n      .backgroundImageSize(ImageSize.Cover)\n      .backgroundImagePosition(Alignment.Center)\n  }\n}
如何解决Item内容过大
解决方案
在大屏上，Listitem内容会过大，页面整体浏览内容减少。可通过以下两种方法解决：
 设置List列的最小宽度和最大宽度，使List组件根据宽度自适应决定列数。 借助栅格行组件GridRow，调整不同的断点下List组件的宽度。 
布局效果
参考代码
@Entry\n@Component\nstruct ListLayout {\n  @State data: Resource[] = new Array(5).fill($r(\"app.media.image\"))\n  @State breakPoint: string = 'sm'\n\n  build() {\n    GridRow() {\n      GridCol({ span: { sm: 12, md: 12, lg: 12 } }) {\n        List({ space: 24 }) {\n          ForEach(this.data, (item: Resource) => {\n            ListItem() {\n              Image(item).margin({ left: 12, right: 12 })\n            }\n          })\n        }\n        // 设置列最小宽度和最大宽度\n        .lanes({ minLength: 300, maxLength: 360 }).padding(12)\n      }\n    }.onBreakpointChange((breakpoint: string) => {\n      this.breakPoint = breakpoint\n    })\n  }\n}
List() {\n    // ...\n}\n// 根据断点设置List列数\n.lanes(this.breakPoint === 'sm' ? 1 : 2)
如何解决Banner图片过大
解决方案
在大屏上，Swiper图片显示内容过大，可以通过增加Swiper展示图片数来调整图片显示大小。外层可以使用栅格组件GridRow，通过调用OnBreakpointChange事件，调整不同的断点下Swiper的前后边距，实现在不同屏幕尺寸上的显示不同Swiper图片数。
布局效果
参考代码
@Entry\n@Component\nstruct SwiperLayout {\n  @State data: Resource[] = new Array(5).fill($r(\"app.media.sky\"))\n  @State breakPoint: string = 'sm'\n\n  build() {\n    Row() {\n      GridRow() {\n        GridCol({ span: { sm: 12, md: 12, lg: 12 } }) {\n          Swiper() {\n            ForEach(this.data, (item: Resource) => {\n              Image(item).width('100%').height(180)\n            })\n          }\n          .width('100%')\n          .itemSpace(24)\n          // 根据断点设置Swiper前后边距\n          .prevMargin(this.breakPoint === 'sm' ? 0 : 100)\n          .nextMargin(this.breakPoint === 'sm' ? 0 : 100)\n        }\n      }.onBreakpointChange((breakpoint: string) => {\n        this.breakPoint = breakpoint\n      })\n      .height(\"60%\")\n      .borderWidth(2)\n    }\n  }\n}
如何解决信息流图片过大
解决方案
针对信息流单张图片过大的情况，设置aspectRatio和constrainSize属性，可以通过对图片的布局和尺寸进行约束，达到适配效果。
布局效果
参考代码
@Entry\n@Component\nstruct ImageConstrainSize {\n  @State breakPoint: string = 'sm'\n  build() {\n    GridRow(){\n      GridCol({ span: { sm: 12, md: 12, lg: 12 } }){\n        Column(){\n          Text('一次开发，多端部署，让开发者可以基于一种设计，高效构建多端可运行的应用。一次开发，多端部署，让开发者可以基于一种设计，高效构建多端可运行的应用。')\n          // 设置aspectRatio和constrainSize属性，可以对图片的布局和尺寸进行约束\n          Image($r('app.media.ImageTwo'))\n            .width('30%')\n            .aspectRatio(0.5)\n            .constraintSize({ maxWidth: 240, minWidth: 180 })\n          Text('一次开发，多端部署，让开发者可以基于一种设计，高效构建多端可运行的应用。一次开发，多端部署，让开发者可以基于一种设计，高效构建多端可运行的应用。')\n        }.alignItems(HorizontalAlign.Start)\n\n      }\n    }.onBreakpointChange((breakpoint: string) => {\n      this.breakPoint = breakpoint\n    })\n  }\n}
如何解决信息流_4宫格图片过大
解决方案
在大屏上，Grid组件里的4宫格图片大小过大，页面浏览区域变少。可以借助栅格行组件GridRow来调整不同的断点下Grid的宽度，解决大屏上Grid组件4宫格图片过大的问题。
布局效果
参考代码
@Entry\n@Component\nstruct GridLayout {\n  @State data: Resource[] = new Array(4).fill($r(\"app.media.image\"))\n  @State breakPoint: string = 'sm'\n\n  build() {\n    GridRow() {\n      GridCol({ span: { sm: 12, md: 12, lg: 12 } }) {\n        Column() {\n          Text('一次开发，多端部署，让开发者可以基于一种设计，高效构建多端可运行的应用。')\n          Grid() {\n            ForEach(this.data, (item: Resource) => {\n              GridItem() {\n                Image(item).width('100%').aspectRatio(1)\n              }\n            })\n          }.columnsTemplate('1fr 1fr')\n          .columnsGap(24)\n          .rowsGap(24)\n          // 根据断点设置Grid宽度\n          .width(this.breakPoint === 'md' ? '60%' : '100%')\n        }.width('100%').alignItems(HorizontalAlign.Start)\n      }\n    }.onBreakpointChange((breakpoint: string) => {\n      this.breakPoint = breakpoint\n    })\n  }\n}
如何解决信息流_9宫格图片过大
解决方案
在大屏上，Grid组件里的9宫格图片大小过大，页面整体浏览内容减少，可以设置Grid组件宽度和宽高比，使Grid组件保持固定大小，不会随着屏幕尺寸变化而变化。
布局效果
参考代码
@Entry\n@Component\nstruct GridWidth {\n  @State data: Resource[] = new Array(9).fill($r(\"app.media.sky\"))\n\n  build() {\n    Column() {\n      Text('一次开发，多端部署，让开发者可以基于一种设计，高效构建多端可运行的应用。')\n      Grid() {\n        ForEach(this.data, (item: Resource) => {\n          GridItem() {\n            Image(item).width('100%').aspectRatio(1)\n          }\n        })\n      }\n      .columnsTemplate('1fr 1fr 1fr')\n      .columnsGap(12)\n      .rowsGap(12)\n      // 设置固定宽度和宽高比\n      .width(360)\n      .aspectRatio(1)\n      .padding(12)\n    }\n    .alignItems(HorizontalAlign.Start)\n  }\n}
