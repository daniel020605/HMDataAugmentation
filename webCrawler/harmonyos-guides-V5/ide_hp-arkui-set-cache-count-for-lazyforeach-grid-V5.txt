@performance/hp-arkui-set-cache-count-for-lazyforeach-grid
建议在Grid下使用LazyForEach时设置合理的cacheCount。
滑动丢帧场景下，建议优先修改。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/hp-arkui-set-cache-count-for-lazyforeach-grid\": \"suggestion\",\n  }\n}
选项
该规则无需配置额外选项。
正例
// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\n\n@Entry\n@Component\nstruct MyComponent {\n  // 数据源\n  private data: MyDataSource = new MyDataSource();\n\n  aboutToAppear() {\n    for (let i = 1; i < 1000; i++) {\n      this.data.pushData(i);\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      Grid() {\n        LazyForEach(this.data, (item: number) => {\n          GridItem() {\n            // 使用可复用自定义组件\n            // 业务逻辑\n          }\n        }, (item: string) => item)\n      }\n      // 设置GridItem的缓存数量\n      .cachedCount(2)\n      .columnsTemplate('1fr 1fr 1fr')\n      .columnsGap(10)\n      .rowsGap(10)\n      .margin(10)\n      .height(500)\n      .backgroundColor(0xFAEEE0)\n    }\n  }\n}
反例
// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\n\n@Entry\n@Component\nstruct MyComponent {\n  // 数据源\n  private data: MyDataSource = new MyDataSource();\n\n  aboutToAppear() {\n    for (let i = 1; i < 1000; i++) {\n      this.data.pushData(i);\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      Grid() {\n        LazyForEach(this.data, (item: number) => {\n          GridItem() {\n            // 使用可复用自定义组件\n            // 业务逻辑\n          }\n        }, (item: string) => item)\n      }\n      // 未设置GridItem的缓存数量\n      .columnsTemplate('1fr 1fr 1fr')\n      .columnsGap(10)\n      .rowsGap(10)\n      .margin(10)\n      .height(500)\n      .backgroundColor(0xFAEEE0)\n    }\n  }\n}
规则集
plugin:@performance/recommended
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
