匿名密钥证明(ArkTS)
在使用本功能时，需确保网络通畅。
开发步骤
 确定密钥别名keyAlias，密钥别名最大长度为64字节。 初始化参数集。 HuksOptions中的properties字段中的参数必须包含HUKS_TAG_ATTESTATION_CHALLENGE属性,可选参数包含HUKS_TAG_ATTESTATION_ID_VERSION_INFO，HUKS_TAG_ATTESTATION_ID_ALIAS属性。 生成非对称密钥，具体请参考密钥生成。 将密钥别名与参数集作为参数传入huks.anonAttestKeyItem方法中，即可证明密钥。 
/*\n * 以下以anonAttestKey的Promise接口操作验证为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\n/* 1.确定密钥别名 */\nlet keyAliasString = \"key anon attest\";\nlet aliasString = keyAliasString;\nlet aliasUint8 = StringToUint8Array(keyAliasString);\nlet securityLevel = StringToUint8Array('sec_level');\nlet challenge = StringToUint8Array('challenge_data');\nlet versionInfo = StringToUint8Array('version_info');\nlet anonAttestCertChain: Array<string>;\n\nclass throwObject {\n  isThrow: boolean = false;\n}\n\n/* 封装生成时的密钥参数集 */\nlet genKeyProperties: Array<huks.HuksParam> = [\n  {\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PSS\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_KEY_GENERATE_TYPE,\n    value: huks.HuksKeyGenerateType.HUKS_KEY_GENERATE_TYPE_DEFAULT\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_ECB\n  }\n]\nlet genOptions: huks.HuksOptions = {\n  properties: genKeyProperties\n};\n\n/* 2.封装证明密钥的参数集 */\nlet anonAttestKeyProperties: Array<huks.HuksParam> = [\n  {\n    tag: huks.HuksTag.HUKS_TAG_ATTESTATION_ID_SEC_LEVEL_INFO,\n    value: securityLevel\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_ATTESTATION_CHALLENGE,\n    value: challenge\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_ATTESTATION_ID_VERSION_INFO,\n    value: versionInfo\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_ATTESTATION_ID_ALIAS,\n    value: aliasUint8\n  }\n]\nlet huksOptions: huks.HuksOptions = {\n  properties: anonAttestKeyProperties\n};\n\nfunction StringToUint8Array(str: string) {\n  let arr: number[] = [];\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction generateKeyItem(keyAlias: string, huksOptions: huks.HuksOptions, throwObject: throwObject) {\n  return new Promise<void>((resolve, reject) => {\n    try {\n      huks.generateKeyItem(keyAlias, huksOptions, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    } catch (error) {\n      throwObject.isThrow = true;\n      throw (error as Error);\n    }\n  });\n}\n\n/* 3.生成密钥 */\nasync function publicGenKeyFunc(keyAlias: string, huksOptions: huks.HuksOptions) {\n  console.info(`enter promise generateKeyItem`);\n  let throwObject: throwObject = { isThrow: false };\n  try {\n    await generateKeyItem(keyAlias, huksOptions, throwObject)\n      .then((data) => {\n        console.info(`promise: generateKeyItem success, data = ${JSON.stringify(data)}`);\n      })\n      .catch((error: Error) => {\n        if (throwObject.isThrow) {\n          throw (error as Error);\n        } else {\n          console.error(`promise: generateKeyItem failed, ${JSON.stringify(error)}`);\n        }\n      });\n  } catch (error) {\n    console.error(`promise: generateKeyItem input arg invalid, ${JSON.stringify(error)}`);\n  }\n}\n\n/* 4.证明密钥 */\nfunction anonAttestKeyItem(keyAlias: string, huksOptions: huks.HuksOptions, throwObject: throwObject) {\n  return new Promise<huks.HuksReturnResult>((resolve, reject) => {\n    try {\n      huks.anonAttestKeyItem(keyAlias, huksOptions, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    } catch (error) {\n      throwObject.isThrow = true;\n      throw (error as Error);\n    }\n  });\n}\n\nasync function publicAnonAttestKey(keyAlias: string, huksOptions: huks.HuksOptions) {\n  console.info(`enter promise anonAttestKeyItem`);\n  let throwObject: throwObject = { isThrow: false };\n  try {\n    await anonAttestKeyItem(keyAlias, huksOptions, throwObject)\n      .then((data) => {\n        console.info(`promise: anonAttestKeyItem success, data = ${JSON.stringify(data)}`);\n        if (data !== null && data.certChains !== null) {\n          anonAttestCertChain = data.certChains as string[];\n        }\n      })\n      .catch((error: Error) => {\n        if (throwObject.isThrow) {\n          throw (error as Error);\n        } else {\n          console.error(`promise: anonAttestKeyItem failed, ${JSON.stringify(error)}`);\n        }\n      });\n  } catch (error) {\n    console.error(`promise: anonAttestKeyItem input arg invalid, ${JSON.stringify(error)}`);\n  }\n}\n\nasync function AnonAttestKeyTest() {\n  await publicGenKeyFunc(aliasString, genOptions);\n  await publicAnonAttestKey(aliasString, huksOptions);\n  console.info('anon attest certChain data: ' + anonAttestCertChain)\n}
