使用ASan检测内存错误
为追求C/C++的极致性能，编译器和OS(Windows/Linux/Mac)运行框架不会对内存操作进行安全检测。针对该场景，DevEco Studio集成ASan（Address-Sanitizer）为开发者提供面向C/C++的地址越界检测能力，并通过FaultLog展示错误的堆栈详情及导致错误的代码行。
使用约束
如果应用内的任一模块使能ASan，那么entry模块需同时使能ASan。如果entry模块未使能ASan，该应用在启动时将闪退，出现CPP Crash报错。ASan与TSan不可同时开启。
配置参数
ASAN_OPTIONS：在运行时配置ASan的行为，包括设置检测级别、输出格式、内存错误报告的详细程度等。常用参数请查看表1。
ASAN_OPTIONS支持在app.json5中配置，也支持在Run/Debug Configurations中配置。app.json5的优先级较高，即两种方式都配置后，以app.json5中的配置为准。
[h2]在app.json5中配置环境变量
打开AppScope > app.json5文件，添加配置示例如下。
{\n  \"app\": {\n    \"appEnvironments\": [\n      {\n        \"name\": \"ASAN_OPTIONS\",\n        \"value\": \"log_exe_name=true abort_on_error=0 print_cmdline=true\" // 示例仅供参考，具体以实际为准\n      },\n    ],\n    ...\n  }\n}
[h2]在Run/Debug Configurations中配置环境变量
具体请查看配置环境变量。
参数
默认值
是否必填
含义
log_exe_name
true
是
不可修改。指定内存错误日志中是否包含执行文件的名称。
log_path
/dev/asanlog/asan.log
否
ROM版本小于NEXT.0.0.68时必填，值不可修改；NEXT.0.0.68及以上版本不再需要该参数。
abort_on_error
0
是
指定在打印错误报告后调用abort()或_exit()。
false(0)：打印错误报后使用_exit()结束进程true(1)：打印错误报后使用abort()结束进程
strip_path_prefix
-
否
内存错误日志的文件路径中去除所配置的前缀。
如：/data/storage/el1
detect_stack_use_after_return
0
否
指定是否检查“访问被释放栈空间”的行为。
true(1)：检查。false(0)：不检查。
halt_on_error
0
否
检测内存错误后是否继续运行。
0表示继续运行。1表示结束运行。
malloc_context_size
-
否
内存错误发生时，显示的调用栈层数。
suppressions
\"\"
否
屏蔽文件名。
handle_segv
-
否
检查段错误。
handle_sigill
-
否
检查SIGILL信号。
quarantine_size_mb
256
否
指定检测访问指向已被释放的栈空间错误的隔离区大小。
更多可配置参数请参见asan_flags。
使能ASan
可通过以下两种方式使能ASan。
[h2]方式一
点击Run > Edit Configurations > Diagnostics，勾选Address Sanitizer。 如果有引用本地library，需在library模块的build-profile.json5文件中，配置arguments字段值为“-DOHOS_ENABLE_ASAN=ON”，表示以ASan模式编译so文件。 
[h2]方式二
修改工程目录下AppScope/app.json5，添加ASan配置开关。 \"asanEnabled\": true  设置模块级构建ASan插桩。在需要使能ASan的模块中，通过添加构建参数开启ASan检测插桩，在对应模块的模块级build-profile.json5中添加命令参数： \"arguments\": \"-DOHOS_ENABLE_ASAN=ON\"   该参数未配置不会报错，但是除包含malloc和free函数等少数内存错误外，出现其他需要插桩检测的内存错误时，ASan无法检测到错误。  
启用ASan
运行或调试当前应用。当程序出现内存错误时，弹出ASan log信息，点击信息中的链接即可跳转至引起内存错误的代码处。 
ASan检测异常码
当前提供案例在debug应用中可产生ASan，release应用因为在编译构建期间会进行代码优化，不一定会产生异常。
[h2]heap-buffer-overflow
背景/原理
访问越界。
错误代码实例
int heapBufferOverflow() {\n    char *buffer;\n    buffer = (char *)malloc(10);\n    *(buffer + 11) = 'n';\n    *(buffer + 12) = 'n';\n    free(buffer);\n    return buffer[1];\n}
影响/报错
导致程序存在安全漏洞，并有崩溃风险。
开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:heap-buffer-overflow
定位思路
如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。
Reason:AddressSanitizer:heap-buffer-overflow\nFault thread info:\n==appspawn==17140==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x0060019ca8da at pc 0x005ec33c3250 bp 0x007fe9c392f0 sp 0x007fe9c392e8\nWRITE of size 1 at 0x0060019ca8da thread T0 (easandemo_api12)\n    #0 0x5ec33c324c  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x324c) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\n    #1 0x5ec33c38e0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x38e0) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\n    #2 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n0x0060019ca8da is located 0 bytes to the right of 10-byte region [0x0060019ca8d0,0x0060019ca8da)\nallocated by thread T0 (easandemo_api12) here:\n    #0 0x7f82652758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 0x5ec33c31ec  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x31ec) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\n    #2 0x5ec33c38e0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x38e0) (BuildId: 4f31be36da7e9bc00c9b7bad563e7ccfec4d0347)\n    #3 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ec6a1bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ec6847f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)
如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。
Reason:AddressSanitizer:heap-buffer-overflow\nFault thread info:\n==appspawn==17140==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x0060019ca8da at pc 0x005ec33c3250 bp 0x007fe9c392f0 sp 0x007fe9c392e8\nWRITE of size 1 at 0x0060019ca8da thread T0 (easandemo_api12)\n    #0 overflowAndUnderflowOfBuffers() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:47)\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:89)\n    #2 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n0x0060019ca8da is located 0 bytes to the right of 10-byte region [0x0060019ca8d0,0x0060019ca8da)\nallocated by thread T0 (easandemo_api12) here:\n    #0 0x7f82652758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 overflowAndUnderflowOfBuffers() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:46)\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:89)\n    #3 0x7f850b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ec6a1bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ec6847f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)
修改方法
注意数组容量不要访问越界。
推荐建议
已知大小的集合注意访问不要越界，位置大小的集合访问前先判断大小。
[h2]stack-buffer-underflow
背景/原理
访问越下界。
错误代码实例
int stackBufferUnderflow() {\n    int subscript = -1;\n    char buffer[42];\n    buffer[subscript] = 42;\n    return 0;\n}
影响/报错
导致程序存在安全漏洞，并有崩溃风险。
开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:stack-buffer-underflow
定位思路
如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。
Reason:AddressSanitizer:stack-buffer-underflow\nFault thread info:\n==appspawn==17039==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x007e07c6027f at pc 0x007f1bdc3994 bp 0x007e07c60250 sp 0x007e07c60248\nWRITE of size 1 at 0x007e07c6027f thread T0 (easandemo_api12)\n    #0 0x7f1bdc3990  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3990) (BuildId: e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)\n    #1 0x7f1bdc3fa8  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3fa8) (BuildId: e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)\n    #2 0x7e838339a8  (/system/lib64/platformsdk/libace_napi.z.so+0x339a8) (BuildId: f48b24ee6f099a2107ef30b4ace050de)\nAddress 0x007e07c6027f is located in stack of thread T0 (easandemo_api12) at offset 31 in frame\n    #0 0x7f1bdc3820  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3820) (BuildId: e34349d8024d23ca83c7c7c3b9f69505d2beb3a0)
如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。
Reason:AddressSanitizer:stack-buffer-underflow\nFault thread info:\n==appspawn==17039==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x007e07c6027f at pc 0x007f1bdc3994 bp 0x007e07c60250 sp 0x007e07c60248\nWRITE of size 1 at 0x007e07c6027f thread T0 (easandemo_api12)\n    #0 stackBufferUnderflow() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:95)\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:135)\n    #2 0x7e838339a8  (/system/lib64/platformsdk/libace_napi.z.so+0x339a8) (BuildId: f48b24ee6f099a2107ef30b4ace050de)\nAddress 0x007e07c6027f is located in stack of thread T0 (easandemo_api12) at offset 31 in frame\n    #0 stackBufferUnderflow() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:92)
修改方法
访问索引不应小于下界。
推荐建议
访问索引不应小于下界。
[h2]stack-use-after-scope
背景/原理
栈变量在作用域之外被使用。
错误代码实例
int *gp;\nbool b = true;\nint stackUseAfterScope() {\n    if (b) {\n        int x[5];\n        gp = x + 1;\n    }\n    return *gp;\n}
影响/报错
导致程序存在安全漏洞，并有崩溃风险。
开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer:stack-use-after-scope
定位思路
如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。
Reason:AddressSanitizer:stack-use-after-scope\nFault thread info:\n==appspawn==7494==ERROR: AddressSanitizer: stack-use-after-scope on address 0x007ffa213b44 at pc 0x005ebf0431e4 bp 0x007ffa213b10 sp 0x007ffa213b08\nREAD of size 4 at 0x007ffa213b44 thread T0 (easandemo_api12)\n    #0 0x5ebf0431e0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x31e0) (BuildId: cf28a04a79da128bc344416e8d5f860e3e22f495)\n    #1 0x5ebf0437f4  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x37f4) (BuildId: cf28a04a79da128bc344416e8d5f860e3e22f495)\n    #2 0x7f868b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\nAddress 0x007ffa213b44 is located in stack of thread T0 (easandemo_api12) at offset 36 in frame\n    #0 0x5ebf043024  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3024) (BuildId: cf28a04a79da128bc344416e8d5f860e3e22f495)
如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。
Reason:AddressSanitizer:stack-use-after-scope\nFault thread info:\n==appspawn==7494==ERROR: AddressSanitizer: stack-use-after-scope on address 0x007ffa213b44 at pc 0x005ebf0431e4 bp 0x007ffa213b10 sp 0x007ffa213b08\nREAD of size 4 at 0x007ffa213b44 thread T0 (easandemo_api12)\n    #0 stackUseAfterScope() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:53)\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:92)\n    #2 0x7f868b3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\nAddress 0x007ffa213b44 is located in stack of thread T0 (easandemo_api12) at offset 36 in frame\n    #0 stackUseAfterScope() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:48)
修改方法
在作用域内使用该变量。
推荐建议
注意变量的作用域。
[h2]attempt-free-nonallocated-memory
背景/原理
尝试释放了非堆对象（non-heap object）或未分配内存。
错误代码实例
int main() {\n    int value = 42;\n    free(&value);\n    return 0;\n}
影响/报错
导致程序存在安全漏洞，并有崩溃风险。
开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：
AddressSanitizer: attempting free on address which was not malloc()-ed
定位思路
如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。
Reason:AddressSanitizer:attempting\nFault thread info:\n==appspawn==20382==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x007fd59ae8c0 in thread T0 (easandemo_api12)\n    #0 0x7f83a92630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 0x5ec45c3120  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3120) (BuildId: 743109db136e66f875a7bc47db74a8095758d4ff)\n    #2 0x5ec45c3720  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3720) (BuildId: 743109db136e66f875a7bc47db74a8095758d4ff)\n    #3 0x7f8a2f3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\nAddress 0x007fd59ae8c0 is located in stack of thread T0 (easandemo_api12) at offset 32 in frame\n    #0 0x5ec45c2fbc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2fbc) (BuildId: 743109db136e66f875a7bc47db74a8095758d4ff)
如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。
Reason:AddressSanitizer:attempting\nFault thread info:\n==appspawn==20382==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x007fd59ae8c0 in thread T0 (easandemo_api12)\n    #0 0x7f83a92630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:46)\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:86)\n    #3 0x7f8a2f3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\nAddress 0x007fd59ae8c0 is located in stack of thread T0 (easandemo_api12) at offset 32 in frame\n    #0 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:44)
修改方法
不要对非堆对象或未分配的内存使用free函数。
推荐建议
不要对非堆对象或未分配的内存使用free函数。
[h2]double-free
背景/原理
重复释放内存。
错误代码实例
int main() {\n    int *x = new int[42];\n    delete [] x;\n    delete [] x;\n    return 0;\n}
影响/报错
导致程序存在安全漏洞，并有崩溃风险。
开启ASan检测后，触发demo中的函数，应用闪退报ASan，包含字段：AddressSanitizer: attempting double-free
定位思路
如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。
Reason:AddressSanitizer:attempting\nFault thread info:\n==appspawn==9596==ERROR: AddressSanitizer: attempting double-free on 0x0061303ecc10 in thread T0 (easandemo_api12):\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 0x5ef0b82ef4  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2ef4) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\n    #2 0x5ef0b834bc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x34bc) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n0x0061303ecc10 is located 0 bytes inside of 32-byte region [0x0061303ecc10,0x0061303ecc30)\nfreed by thread T0 (easandemo_api12) here:\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 0x5ef0b82eec  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2eec) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\n    #2 0x5ef0b834bc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x34bc) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ef459bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ef43c7f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\npreviously allocated by thread T0 (easandemo_api12) here:\n    #0 0x7fb3292758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 0x5ef0b82ee0  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x2ee0) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\n    #2 0x5ef0b834bc  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x34bc) (BuildId: 5b44777ffb29e6665852feeb6f23712aef424077)\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ef459bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ef43c7f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)
如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。
Reason:AddressSanitizer:attempting\nFault thread info:\n==appspawn==9596==ERROR: AddressSanitizer: attempting double-free on 0x0061303ecc10 in thread T0 (easandemo_api12):\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:47)\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:87)\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n0x0061303ecc10 is located 0 bytes inside of 32-byte region [0x0061303ecc10,0x0061303ecc30)\nfreed by thread T0 (easandemo_api12) here:\n    #0 0x7fb3292630  (/system/lib64/libclang_rt.asan.so+0xd2630) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:46)\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:87)\n    #3 0x7fb4af3780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ef459bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ef43c7f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\npreviously allocated by thread T0 (easandemo_api12) here:\n    #0 0x7fb3292758  (/system/lib64/libclang_rt.asan.so+0xd2758) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 doubleFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:45)\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:87)
修改方法
已经释放一次的指针，不要再重复释放。
推荐建议
变量定义声明时初始化为NULL，释放内存后也应立即将变量重置为NULL，这样每次释放之前都可以通过判断变量是否为NULL来判断是否可以释放。
[h2]heap-use-after-free
背景/原理
当指针指向的内存被释放后，仍然通过该指针访问已经被释放的内存，就会触发heap-use-after-free。
错误代码实例
#include <stdlib.h>\nint main() {\n    int *array = new int[5];\n    delete[] array;\n    return array[5]; \n}
影响/报错
导致程序存在安全漏洞，并有崩溃风险。
开启ASan检测后，触发demo中的函数，应用闪退报ASan，显示reason为AddressSanitizer:heap-use-after-free
定位思路
如果有工程代码，直接开启ASan检测，debug模式运行后复现该错误，可以触发ASan，直接点击堆栈中的超链接定位到代码行，能看到错误代码的位置。
Reason:AddressSanitizer:heap-use-after-free\nFault thread info:\n==appspawn==10126==ERROR: AddressSanitizer: heap-use-after-free on address 0x006121870ce4 at pc 0x005ee1ec321c bp 0x007ff5959310 sp 0x007ff5959308\nREAD of size 4 at 0x006121870ce4 thread T0 (easandemo_api12)\n    #0 0x5ee1ec3218  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3218) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\n    #1 0x5ee1ec3714  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3714) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\n    #2 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n0x006121870ce4 is located 0 bytes to the right of 20-byte region [0x006121870cd0,0x006121870ce4)\nfreed by thread T0 (easandemo_api12) here:\n    #0 0x7fa569f0c4  (/system/lib64/libclang_rt.asan.so+0xdf0c4) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 0x5ee1ec31b8  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x31b8) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\n    #2 0x5ee1ec3714  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3714) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\npreviously allocated by thread T0 (easandemo_api12) here:\n    #0 0x7fa569e888  (/system/lib64/libclang_rt.asan.so+0xde888) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 0x5ee1ec3194  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3194) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\n    #2 0x5ee1ec3714  (/data/storage/el1/bundle/libs/arm64/libentry.so+0x3714) (BuildId: 3b906822a911c973ab89188662a589eeedf639a4)\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)
如果是release应用，本地无工程代码，可以使用AnalyzeStackTrace功能，提供要解析堆栈的so，解析结果为源码地址。
Reason:AddressSanitizer:heap-use-after-free\nFault thread info:\n==appspawn==10126==ERROR: AddressSanitizer: heap-use-after-free on address 0x006121870ce4 at pc 0x005ee1ec321c bp 0x007ff5959310 sp 0x007ff5959308\nREAD of size 4 at 0x006121870ce4 thread T0 (easandemo_api12)\n    #0 heapUseAfterFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:52)\n    #1 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:72)\n    #2 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n0x006121870ce4 is located 0 bytes to the right of 20-byte region [0x006121870cd0,0x006121870ce4)\nfreed by thread T0 (easandemo_api12) here:\n    #0 0x7fa569f0c4  (/system/lib64/libclang_rt.asan.so+0xdf0c4) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 heapUseAfterFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:51)\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:72)\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)\npreviously allocated by thread T0 (easandemo_api12) here:\n    #0 0x7fa569e888  (/system/lib64/libclang_rt.asan.so+0xde888) (BuildId: aeec20776cc4e8f96db6c6b5603bb49748cc20ff)\n    #1 heapUseAfterFree() at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:50)\n    #2 AsanCheck(napi_env__*, napi_callback_info__*) at (D:/TestProjects/ReleaseASanDemo_API12/ReleaseASanDemo_API12/entry/src/main/cpp/napi_init.cpp:72)\n    #3 0x7fa9133780  (/system/lib64/platformsdk/libace_napi.z.so+0x33780) (BuildId: 25f88248f530c20439061db9eb4ed152)\n    #4 0x5ee571bcd8  (/system/lib64/module/arkcompiler/stub.an+0x1dccd8)\n    #5 0x5ee5547f4c  (/system/lib64/module/arkcompiler/stub.an+0x8f4c)
修改方法
已经释放的指针不要再使用，将指针设置为NULL/nullptr。
推荐建议
实现一个free()的替代版本或者 delete析构器来保证指针的重置。
[h2]Other categories
未知的错误类型，持续更新中。
