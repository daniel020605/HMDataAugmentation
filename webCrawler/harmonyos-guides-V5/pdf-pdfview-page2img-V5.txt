PDF页面转换为图片
场景介绍
调用getPagePixelMap方法，将指定PDF页面转化为图片。
接口说明
接口名
描述
getPagePixelMap(pageIndex: number, isSync?: boolean): Promise<image.PixelMap>
获取对应PDF页面的缩略图，使用Promise异步回调。
示例代码
 调用loadDocument方法，加载PDF文档。 调用getPagePixelMap方法，获取image.PixelMap对象。 将image.PixelMap转化为二进制图片文件并保存。 
import { pdfService, pdfViewManager } from '@kit.PDFKit';\nimport { image } from '@kit.ImageKit';\nimport { fileIo as fs } from '@kit.CoreFileKit';\nimport { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct PdfPage {\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\n  private context = getContext() as common.UIAbilityContext;\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\n\n  aboutToAppear(): void {\n    // 确保沙箱目录有input.pdf文档\n    let filePath = this.context.filesDir + '/input.pdf';\n    (async () => {\n      this.loadResult = await this.controller.loadDocument(filePath);\n    })()\n  }\n\n  // 将 pixelMap 转成图片格式\n  pixelMap2Buffer(pixelMap: image.PixelMap): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      /**\n       设置打包参数\n       format：图片打包格式，只支持 jpg 和 webp\n       quality：JPEG 编码输出图片质量\n       bufferSize：图片大小，默认 10M\n       */\n      let packOpts: image.PackingOption = { format: 'image/jpeg', quality: 98 }\n      // 创建ImagePacker实例\n      const imagePackerApi = image.createImagePacker()\n      imagePackerApi.packToData(pixelMap, packOpts).then((buffer: ArrayBuffer) => {\n        resolve(buffer)\n      }).catch((err: BusinessError) => {\n        reject()\n      })\n    })\n  }\n\n  build() {\n    Column() {\n      // 转换为图片并保存到应用沙箱\n      Button('getPagePixelMap').onClick(async () => {\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\n          let pixmap: image.PixelMap = await this.controller.getPagePixelMap(0, true);\n          if (!pixmap) {\n            return\n          }\n          const imgBuffer = await this.pixelMap2Buffer(pixmap)\n          const file =\n            fs.openSync(this.context.filesDir + `/${Date.now()}.png`, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n          await fs.write(file.fd, imgBuffer);\n          // 关闭文件\n          await fs.close(file.fd)\n        }\n      })\n    }\n  }\n}
