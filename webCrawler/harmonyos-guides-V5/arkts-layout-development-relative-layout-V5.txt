相对布局 (RelativeContainer)
概述
在应用的开发过程中，经常需要设计复杂界面，此时涉及到多个相同或不同组件之间的嵌套。如果布局组件嵌套深度过深，或者嵌套组件数过多，会带来额外的开销。如果在布局的方式上进行优化，就可以有效的提升性能，减少时间开销。
RelativeContainer为采用相对布局的容器，支持容器内部的子元素设置相对位置关系，适用于界面复杂场景的情况，对多个子组件进行对齐和排列。子元素支持指定兄弟元素作为锚点，也支持指定父容器作为锚点，基于锚点做相对位置布局。下图是一个RelativeContainer的概念图，图中的虚线表示位置的依赖关系。
 图1 相对布局示意图  
子元素并不完全是上图中的依赖关系。比如，Item4可以以Item2为依赖锚点，也可以以RelativeContainer父容器为依赖锚点。
基本概念
锚点：通过锚点设置当前元素基于哪个元素确定位置。 对齐方式：通过对齐方式，设置当前元素是基于锚点的上中下对齐，还是基于锚点的左中右对齐。 
设置依赖关系
[h2]锚点设置
锚点设置是指设置子元素相对于父元素或兄弟元素的位置依赖关系。在水平方向上，可以设置left、middle、right的锚点。在竖直方向上，可以设置top、center、bottom的锚点。
为了明确定义锚点，必须为RelativeContainer及其子元素设置ID，用于指定锚点信息。ID默认为“__container__”，其余子元素的ID通过id属性设置。不设置id的组件能显示，但是不能被其他子组件作为锚点，相对布局容器会为其拼接id，此id的规律无法被应用感知。互相依赖，环形依赖时容器内子组件全部不绘制。同方向上两个以上位置设置锚点，但锚点位置逆序时此子组件大小为0，即不绘制。
在使用锚点时要注意子元素的相对位置关系，避免出现错位或遮挡的情况。
RelativeContainer父组件为锚点，__container__代表父容器的ID。 let AlignRus: Record<string, Record<string, string | VerticalAlign | HorizontalAlign>> = {\n  'top': { 'anchor': '__container__', 'align': VerticalAlign.Top },\n  'left': { 'anchor': '__container__', 'align': HorizontalAlign.Start }\n}\nlet AlignRue: Record<string, Record<string, string | VerticalAlign | HorizontalAlign>> = {\n  'top': { 'anchor': '__container__', 'align': VerticalAlign.Top },\n  'right': { 'anchor': '__container__', 'align': HorizontalAlign.End }\n}\nlet Mleft: Record<string, number> = { 'left': 20 }\nlet BWC: Record<string, number | string> = { 'width': 2, 'color': '#6699FF' }\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    RelativeContainer() {\n      Row() {\n        Text('row1')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .height(100)\n      .backgroundColor('#a3cf62')\n      .alignRules(AlignRus)\n      .id(\"row1\")\n\n      Row() {\n        Text('row2')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .height(100)\n      .backgroundColor('#00ae9d')\n      .alignRules(AlignRue)\n      .id(\"row2\")\n    }.width(300).height(300)\n    .margin(Mleft)\n    .border(BWC)\n  }\n}  以兄弟元素为锚点。 let AlignRus: Record<string, Record<string, string | VerticalAlign | HorizontalAlign>> = {\n  'top': { 'anchor': '__container__', 'align': VerticalAlign.Top },\n  'left': { 'anchor': '__container__', 'align': HorizontalAlign.Start }\n}\nlet RelConB: Record<string, Record<string, string | VerticalAlign | HorizontalAlign>> = {\n  'top': { 'anchor': 'row1', 'align': VerticalAlign.Bottom },\n  'left': { 'anchor': 'row1', 'align': HorizontalAlign.Start }\n}\nlet Mleft: Record<string, number> = { 'left': 20 }\nlet BWC: Record<string, number | string> = { 'width': 2, 'color': '#6699FF' }\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    RelativeContainer() {\n      Row() {\n        Text('row1')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .height(100)\n      .backgroundColor('#00ae9d')\n      .alignRules(AlignRus)\n      .id(\"row1\")\n\n      Row() {\n        Text('row2')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .height(100)\n      .backgroundColor('#a3cf62')\n      .alignRules(RelConB)\n      .id(\"row2\")\n    }.width(300).height(300)\n    .margin(Mleft)\n    .border(BWC)\n  }\n}  子组件锚点可以任意选择，但需注意不要相互依赖。 @Entry\n@Component\nstruct Index {\n  build() {\n    Row() {\n      RelativeContainer() {\n        Row(){Text('row1')}.justifyContent(FlexAlign.Center).width(100).height(100)\n        .backgroundColor('#a3cf62')\n        .alignRules({\n          top: {anchor: \"__container__\", align: VerticalAlign.Top},\n          left: {anchor: \"__container__\", align: HorizontalAlign.Start}\n        })\n        .id(\"row1\")\n\n        Row(){Text('row2')}.justifyContent(FlexAlign.Center).width(100)\n        .backgroundColor('#00ae9d')\n        .alignRules({\n          top: {anchor: \"__container__\", align: VerticalAlign.Top},\n          right: {anchor: \"__container__\", align: HorizontalAlign.End},\n          bottom: {anchor: \"row1\", align: VerticalAlign.Center},\n        })\n        .id(\"row2\")\n\n        Row(){Text('row3')}.justifyContent(FlexAlign.Center).height(100)\n        .backgroundColor('#0a59f7')\n        .alignRules({\n          top: {anchor: \"row1\", align: VerticalAlign.Bottom},\n          left: {anchor: \"row1\", align: HorizontalAlign.Start},\n          right: {anchor: \"row2\", align: HorizontalAlign.Start}\n        })\n        .id(\"row3\")\n\n        Row(){Text('row4')}.justifyContent(FlexAlign.Center)\n        .backgroundColor('#2ca9e0')\n        .alignRules({\n          top: {anchor: \"row3\", align: VerticalAlign.Bottom},\n          left: {anchor: \"row1\", align: HorizontalAlign.Center},\n          right: {anchor: \"row2\", align: HorizontalAlign.End},\n          bottom: {anchor: \"__container__\", align: VerticalAlign.Bottom}\n        })\n        .id(\"row4\")\n      }\n      .width(300).height(300)\n      .margin({left: 50})\n      .border({width:2, color: \"#6699FF\"})\n    }\n    .height('100%')\n  }\n}  
[h2]设置相对于锚点的对齐位置
设置了锚点之后，可以通过align设置相对于锚点的对齐位置。
在水平方向上，对齐位置可以设置为HorizontalAlign.Start、HorizontalAlign.Center、HorizontalAlign.End。
在竖直方向上，对齐位置可以设置为VerticalAlign.Top、VerticalAlign.Center、VerticalAlign.Bottom。
[h2]子组件位置偏移
子组件经过相对位置对齐后，位置可能还不是目标位置，开发者可根据需要进行额外偏移设置offset。
@Entry\n@Component\nstruct Index {\nbuild() {\n  Row() {\n    RelativeContainer() {\n      Row() {\n        Text('row1')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .height(100)\n      .backgroundColor('#a3cf62')\n      .alignRules({\n        top: { anchor: \"__container__\", align: VerticalAlign.Top },\n        left: { anchor: \"__container__\", align: HorizontalAlign.Start }\n      })\n      .id(\"row1\")\n\n      Row() {\n        Text('row2')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .backgroundColor('#00ae9d')\n      .alignRules({\n        top: { anchor: \"__container__\", align: VerticalAlign.Top },\n        right: { anchor: \"__container__\", align: HorizontalAlign.End },\n        bottom: { anchor: \"row1\", align: VerticalAlign.Center },\n      })\n      .offset({\n        x: -40,\n        y: -20\n      })\n      .id(\"row2\")\n\n      Row() {\n        Text('row3')\n      }\n      .justifyContent(FlexAlign.Center)\n      .height(100)\n      .backgroundColor('#0a59f7')\n      .alignRules({\n        top: { anchor: \"row1\", align: VerticalAlign.Bottom },\n        left: { anchor: \"row1\", align: HorizontalAlign.End },\n        right: { anchor: \"row2\", align: HorizontalAlign.Start }\n      })\n      .offset({\n        x: -10,\n        y: -20\n      })\n      .id(\"row3\")\n\n      Row() {\n        Text('row4')\n      }\n      .justifyContent(FlexAlign.Center)\n      .backgroundColor('#2ca9e0')\n      .alignRules({\n        top: { anchor: \"row3\", align: VerticalAlign.Bottom },\n        bottom: { anchor: \"__container__\", align: VerticalAlign.Bottom },\n        left: { anchor: \"__container__\", align: HorizontalAlign.Start },\n        right: { anchor: \"row1\", align: HorizontalAlign.End }\n      })\n      .offset({\n        x: -10,\n        y: -30\n      })\n      .id(\"row4\")\n\n      Row() {\n        Text('row5')\n      }\n      .justifyContent(FlexAlign.Center)\n      .backgroundColor('#30c9f7')\n      .alignRules({\n        top: { anchor: \"row3\", align: VerticalAlign.Bottom },\n        bottom: { anchor: \"__container__\", align: VerticalAlign.Bottom },\n        left: { anchor: \"row2\", align: HorizontalAlign.Start },\n        right: { anchor: \"row2\", align: HorizontalAlign.End }\n      })\n      .offset({\n        x: 10,\n        y: 20\n      })\n      .id(\"row5\")\n\n      Row() {\n        Text('row6')\n      }\n      .justifyContent(FlexAlign.Center)\n      .backgroundColor('#ff33ffb5')\n      .alignRules({\n        top: { anchor: \"row3\", align: VerticalAlign.Bottom },\n        bottom: { anchor: \"row4\", align: VerticalAlign.Bottom },\n        left: { anchor: \"row3\", align: HorizontalAlign.Start },\n        right: { anchor: \"row3\", align: HorizontalAlign.End }\n      })\n      .offset({\n        x: -15,\n        y: 10\n      })\n      .backgroundImagePosition(Alignment.Bottom)\n      .backgroundImageSize(ImageSize.Cover)\n      .id(\"row6\")\n    }\n    .width(300).height(300)\n    .margin({ left: 50 })\n    .border({ width: 2, color: \"#6699FF\" })\n  }\n  .height('100%')\n}\n}
多种组件的对齐布局
Row、Column、Flex、Stack等多种布局组件，可按照RelativeContainer组件规则进行对齐排布。
@Entry\n@Component\nstruct Index {\n@State value: number = 0\n\nbuild() {\n  Row() {\n\n    RelativeContainer() {\n      Row()\n        .width(100)\n        .height(100)\n        .backgroundColor('#a3cf62')\n        .alignRules({\n          top: { anchor: \"__container__\", align: VerticalAlign.Top },\n          left: { anchor: \"__container__\", align: HorizontalAlign.Start }\n        })\n        .id(\"row1\")\n\n      Column()\n        .width('50%')\n        .height(30)\n        .backgroundColor('#00ae9d')\n        .alignRules({\n          top: { anchor: \"__container__\", align: VerticalAlign.Top },\n          left: { anchor: \"__container__\", align: HorizontalAlign.Center }\n        })\n        .id(\"row2\")\n\n      Flex({ direction: FlexDirection.Row }) {\n        Text('1').width('20%').height(50).backgroundColor('#0a59f7')\n        Text('2').width('20%').height(50).backgroundColor('#2ca9e0')\n        Text('3').width('20%').height(50).backgroundColor('#0a59f7')\n        Text('4').width('20%').height(50).backgroundColor('#2ca9e0')\n      }\n      .padding(10)\n      .backgroundColor('#30c9f7')\n      .alignRules({\n        top: { anchor: \"row2\", align: VerticalAlign.Bottom },\n        left: { anchor: \"__container__\", align: HorizontalAlign.Start },\n        bottom: { anchor: \"__container__\", align: VerticalAlign.Center },\n        right: { anchor: \"row2\", align: HorizontalAlign.Center }\n      })\n      .id(\"row3\")\n\n      Stack({ alignContent: Alignment.Bottom }) {\n        Text('First child, show in bottom').width('90%').height('100%').backgroundColor('#a3cf62').align(Alignment.Top)\n        Text('Second child, show in top').width('70%').height('60%').backgroundColor('#00ae9d').align(Alignment.Top)\n      }\n      .margin({ top: 5 })\n      .alignRules({\n        top: { anchor: \"row3\", align: VerticalAlign.Bottom },\n        left: { anchor: \"__container__\", align: HorizontalAlign.Start },\n        bottom: { anchor: \"__container__\", align: VerticalAlign.Bottom },\n        right: { anchor: \"row3\", align: HorizontalAlign.End }\n      })\n      .id(\"row4\")\n\n    }\n    .width(300).height(300)\n    .margin({ left: 50 })\n    .border({ width: 2, color: \"#6699FF\" })\n  }\n  .height('100%')\n}\n}
组件尺寸
子组件尺寸大小不会受到相对布局规则的影响。若子组件某个方向上设置两个或以上alignRules时最好不设置此方向尺寸大小，否则对齐规则确定的组件尺寸与开发者设置的尺寸可能产生冲突。
@Entry\n@Component\nstruct Index {\nbuild() {\n  Row() {\n    RelativeContainer() {\n      Row() {\n        Text('row1')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .height(100)\n      .backgroundColor('#a3cf62')\n      .alignRules({\n        top: { anchor: \"__container__\", align: VerticalAlign.Top },\n        left: { anchor: \"__container__\", align: HorizontalAlign.Start }\n      })\n      .id(\"row1\")\n\n      Row() {\n        Text('row2')\n      }\n      .justifyContent(FlexAlign.Center)\n      .width(100)\n      .backgroundColor('#00ae9d')\n      .alignRules({\n        top: { anchor: \"__container__\", align: VerticalAlign.Top },\n        right: { anchor: \"__container__\", align: HorizontalAlign.End },\n        bottom: { anchor: \"row1\", align: VerticalAlign.Center },\n      })\n      .id(\"row2\")\n\n      Row() {\n        Text('row3')\n      }\n      .justifyContent(FlexAlign.Center)\n      .height(100)\n      .backgroundColor('#0a59f7')\n      .alignRules({\n        top: { anchor: \"row1\", align: VerticalAlign.Bottom },\n        left: { anchor: \"row1\", align: HorizontalAlign.End },\n        right: { anchor: \"row2\", align: HorizontalAlign.Start }\n      })\n      .id(\"row3\")\n\n      Row() {\n        Text('row4')\n      }.justifyContent(FlexAlign.Center)\n      .backgroundColor('#2ca9e0')\n      .alignRules({\n        top: { anchor: \"row3\", align: VerticalAlign.Bottom },\n        bottom: { anchor: \"__container__\", align: VerticalAlign.Bottom },\n        left: { anchor: \"__container__\", align: HorizontalAlign.Start },\n        right: { anchor: \"row1\", align: HorizontalAlign.End }\n      })\n      .id(\"row4\")\n\n      Row() {\n        Text('row5')\n      }.justifyContent(FlexAlign.Center)\n      .backgroundColor('#30c9f7')\n      .alignRules({\n        top: { anchor: \"row3\", align: VerticalAlign.Bottom },\n        bottom: { anchor: \"__container__\", align: VerticalAlign.Bottom },\n        left: { anchor: \"row2\", align: HorizontalAlign.Start },\n        right: { anchor: \"row2\", align: HorizontalAlign.End }\n      })\n      .id(\"row5\")\n\n      Row() {\n        Text('row6')\n      }\n      .justifyContent(FlexAlign.Center)\n      .backgroundColor('#ff33ffb5')\n      .alignRules({\n        top: { anchor: \"row3\", align: VerticalAlign.Bottom },\n        bottom: { anchor: \"row4\", align: VerticalAlign.Bottom },\n        left: { anchor: \"row3\", align: HorizontalAlign.Start },\n        right: { anchor: \"row3\", align: HorizontalAlign.End }\n      })\n      .id(\"row6\")\n      .backgroundImagePosition(Alignment.Bottom)\n      .backgroundImageSize(ImageSize.Cover)\n    }\n    .width(300).height(300)\n    .margin({ left: 50 })\n    .border({ width: 2, color: \"#6699FF\" })\n  }\n  .height('100%')\n}\n}
