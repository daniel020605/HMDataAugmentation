层叠布局 (Stack)
概述
层叠布局（StackLayout）用于在屏幕上预留一块区域来显示组件中的元素，提供元素可以重叠的布局。层叠布局通过Stack容器组件实现位置的固定定位与层叠，容器中的子元素依次入栈，后一个子元素覆盖前一个子元素，子元素可以叠加，也可以设置位置。
层叠布局具有较强的页面层叠、位置定位能力，其使用场景有广告、卡片层叠效果等。
如图1，Stack作为容器，容器内的子元素的顺序为Item1->Item2->Item3。
图1 层叠布局
开发布局
Stack组件为容器组件，容器内可包含各种子元素。其中子元素默认进行居中堆叠。子元素被约束在Stack下，进行自己的样式定义以及排列。
// xxx.ets\nlet MTop:Record<string,number> = { 'top': 50 }\n\n@Entry\n@Component\nstruct StackExample {\n  build() {\n    Column(){\n      Stack({ }) {\n        Column(){}.width('90%').height('100%').backgroundColor('#ff58b87c')\n        Text('text').width('60%').height('60%').backgroundColor('#ffc3f6aa')\n        Button('button').width('30%').height('30%').backgroundColor('#ff8ff3eb').fontColor('#000')\n      }.width('100%').height(150).margin(MTop)\n    }\n  }\n}
对齐方式
Stack组件通过alignContent参数实现位置的相对移动。如图2所示，支持九种对齐方式。
图2 Stack容器内元素的对齐方式
// xxx.ets\n@Entry\n@Component\nstruct StackExample {\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      Text('Stack').width('90%').height('100%').backgroundColor('#e1dede').align(Alignment.BottomEnd)\n      Text('Item 1').width('70%').height('80%').backgroundColor(0xd2cab3).align(Alignment.BottomEnd)\n      Text('Item 2').width('50%').height('60%').backgroundColor(0xc1cbac).align(Alignment.BottomEnd)\n    }.width('100%').height(150).margin({ top: 5 })\n  }\n}
Z序控制
Stack容器中兄弟组件显示层级关系可以通过Z序控制的zIndex属性改变。zIndex值越大，显示层级越高，即zIndex值大的组件会覆盖在zIndex值小的组件上方。
在层叠布局中，如果后面子元素尺寸大于前面子元素尺寸，则前面子元素完全隐藏。
Stack({ alignContent: Alignment.BottomStart }) {\n  Column() {\n    Text('Stack子元素1').textAlign(TextAlign.End).fontSize(20)\n  }.width(100).height(100).backgroundColor(0xffd306)\n\n  Column() {\n    Text('Stack子元素2').fontSize(20)\n  }.width(150).height(150).backgroundColor(Color.Pink)\n\n  Column() {\n    Text('Stack子元素3').fontSize(20)\n  }.width(200).height(200).backgroundColor(Color.Grey)\n}.width(350).height(350).backgroundColor(0xe0e0e0)
上图中，最后的子元素3的尺寸大于前面的所有子元素，所以，前面两个元素完全隐藏。改变子元素1，子元素2的zIndex属性后，可以将元素展示出来。
Stack({ alignContent: Alignment.BottomStart }) {\n  Column() {\n    Text('Stack子元素1').fontSize(20)\n  }.width(100).height(100).backgroundColor(0xffd306).zIndex(2)\n\n  Column() {\n    Text('Stack子元素2').fontSize(20)\n  }.width(150).height(150).backgroundColor(Color.Pink).zIndex(1)\n\n  Column() {\n    Text('Stack子元素3').fontSize(20)\n  }.width(200).height(200).backgroundColor(Color.Grey)\n}.width(350).height(350).backgroundColor(0xe0e0e0)
场景示例
使用层叠布局快速搭建页面。
@Entry\n@Component\nstruct StackSample {\n  private arr: string[] = ['APP1', 'APP2', 'APP3', 'APP4', 'APP5', 'APP6', 'APP7', 'APP8'];\n\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      Flex({ wrap: FlexWrap.Wrap }) {\n        ForEach(this.arr, (item:string) => {\n          Text(item)\n            .width(100)\n            .height(100)\n            .fontSize(16)\n            .margin(10)\n            .textAlign(TextAlign.Center)\n            .borderRadius(10)\n            .backgroundColor(0xFFFFFF)\n        }, (item:string):string => item)\n      }.width('100%').height('100%')\n\n      Flex({ justifyContent: FlexAlign.SpaceAround, alignItems: ItemAlign.Center }) {\n        Text('联系人').fontSize(16)\n        Text('设置').fontSize(16)\n        Text('短信').fontSize(16)\n      }\n      .width('50%')\n      .height(50)\n      .backgroundColor('#16302e2e')\n      .margin({ bottom: 15 })\n      .borderRadius(15)\n    }.width('100%').height('100%').backgroundColor('#CFD0CF')\n  }\n}
示例代码
 组件堆叠 
