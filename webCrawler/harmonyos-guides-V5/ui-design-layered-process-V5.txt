（推荐）分层图标处理
场景介绍
适用于图标为分层资源，且图标展示风格要与华为HarmonyOS Design System设计风格一致的应用场景。以下是一些典型的应用场景：
 展示带图标的应用列表：可调用UI Design Kit批量处理分层图标的接口获取处理后的应用图标。 展示应用详情：可调用UI Design Kit处理单个分层图标的接口获取处理后的应用图标。 
开发步骤
 设置分层图标。将前景资源和背景资源，放到entry\\src\\main\\resources\\base\\media下，在该目录创建一个json文件（例如：drawable.json），内容为 {\n  \"layered-image\":\n  {\n    \"background\" : \"$media:background\",\n    \"foreground\" : \"$media:foreground\"\n  }\n}  将图标处理的相关类添加至工程。import { LayeredDrawableDescriptor } from '@kit.ArkUI';\nimport { hdsDrawable } from '@kit.UIDesignKit';\nimport { image } from '@kit.ImageKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { resourceManager } from '@kit.LocalizationKit';  
 简单配置页面的布局，调用分层图标接口获取处理后的图标信息，也可以调用异步批量处理接口。@Entry\n@Component\nstruct Index{\n  bundleName: string = 'com.example.uidesignkit';\n  resManager: resourceManager.ResourceManager | undefined = undefined;\n  layeredDrawableDescriptor: LayeredDrawableDescriptor | undefined = undefined;\n  @State layeredIconsResult: Array<hdsDrawable.ProcessedIcon> = [];\n\n  build() {\n    Column() {\n      Column() {\n        Text('getHdsLayeredIcon')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(16)\n          .margin(5)\n\n        Image(this.getHdsLayeredIcon())\n          .width(48)\n          .height(48)\n      }\n      .margin(20)\n\n      Text('getHdsLayeredIcons')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(16)\n        .margin(5)\n\n      List() {\n        ForEach(this.layeredIconsResult,\n          (item: hdsDrawable.ProcessedIcon, index?: number) => {\n            ListItem() {\n              Column() {\n                Text(item.bundleName)\n                  .fontWeight(FontWeight.Medium)\n                  .fontSize(16)\n                  .margin(5)\n\n                Image(item.pixelMap)\n                  .width(48)\n                  .height(48)\n              }\n              .margin(15)\n            }\n            .width('100%')\n          }, (item: string) => item.toString())\n      }\n      .scrollBar(BarState.On)\n      .height('60%')\n    }\n    .height('100%')\n    .width('100%')\n  }\n\n  aboutToAppear(): void {\n    this.resManager = getContext().resourceManager;\n    if (!this.resManager) {\n      return;\n    }\n    this.layeredDrawableDescriptor = (this.resManager.getDrawableDescriptor($r('app.media.drawable')\n      .id)) as LayeredDrawableDescriptor;\n    this.getHdsLayeredIcons();\n  }\n\n  private getHdsLayeredIcon(): image.PixelMap | null {\n    try {\n      return hdsDrawable.getHdsLayeredIcon(this.bundleName, this.layeredDrawableDescriptor, 48, true);\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsLayeredIcon failed, code: ${code}, message: ${message}`);\n      return null;\n    }\n  }\n\n  private getHdsLayeredIcons(): void {\n    if (!this.layeredDrawableDescriptor) {\n      console.error(`getHdsLayeredIcons layeredDrawableDescriptor is undefined.`);\n      return;\n    }\n\n    let options: hdsDrawable.Options = {\n      size: 48,\n      hasBorder: true,\n      parallelNumber: 4\n    };\n\n    let layeredIcons: Array<hdsDrawable.LayeredIcon> = [];\n    for (let i = 0; i < 10; i++) {\n      layeredIcons.push({\n        bundleName: `${this.bundleName}-${i}`,\n        layeredDrawableDescriptor: this.layeredDrawableDescriptor\n      });\n    }\n\n    try {\n      hdsDrawable.getHdsLayeredIcons(layeredIcons, options)\n        .then((data: Array<hdsDrawable.ProcessedIcon>) => {\n          console.info(`getHdsLayeredIcons data size: ${data.length}`);\n          this.layeredIconsResult = data;\n        })\n        .catch((err: BusinessError) => {\n          console.error(`getHdsLayeredIcons return error, code: ${err.code}, msg: ${err.message}`);\n        });\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsLayeredIcons failed, code: ${code}, message: ${message}`);\n    }\n  }\n}  
开发实例
import { LayeredDrawableDescriptor } from '@kit.ArkUI';\nimport { hdsDrawable } from '@kit.UIDesignKit';\nimport { image } from '@kit.ImageKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { resourceManager } from '@kit.LocalizationKit';\n\n@Entry\n@Component\nstruct Index{\n  bundleName: string = 'com.example.uidesignkit';\n  resManager: resourceManager.ResourceManager | undefined = undefined;\n  layeredDrawableDescriptor: LayeredDrawableDescriptor | undefined = undefined;\n  @State layeredIconsResult: Array<hdsDrawable.ProcessedIcon> = [];\n\n  build() {\n    Column() {\n      Column() {\n        Text('getHdsLayeredIcon')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(16)\n          .margin(5)\n\n        Image(this.getHdsLayeredIcon())\n          .width(48)\n          .height(48)\n      }\n      .margin(20)\n\n      Text('getHdsLayeredIcons')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(16)\n        .margin(5)\n\n      List() {\n        ForEach(this.layeredIconsResult,\n          (item: hdsDrawable.ProcessedIcon, index?: number) => {\n            ListItem() {\n              Column() {\n                Text(item.bundleName)\n                  .fontWeight(FontWeight.Medium)\n                  .fontSize(16)\n                  .margin(5)\n\n                Image(item.pixelMap)\n                  .width(48)\n                  .height(48)\n              }\n              .margin(15)\n            }\n            .width('100%')\n          }, (item: string) => item.toString())\n      }\n      .scrollBar(BarState.On)\n      .height('60%')\n    }\n    .height('100%')\n    .width('100%')\n  }\n\n  aboutToAppear(): void {\n    this.resManager = getContext().resourceManager;\n    if (!this.resManager) {\n      return;\n    }\n    this.layeredDrawableDescriptor = (this.resManager.getDrawableDescriptor($r('app.media.drawable')\n      .id)) as LayeredDrawableDescriptor;\n    this.getHdsLayeredIcons();\n  }\n\n  private getHdsLayeredIcon(): image.PixelMap | null {\n    try {\n      return hdsDrawable.getHdsLayeredIcon(this.bundleName, this.layeredDrawableDescriptor, 48, true);\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsLayeredIcon failed, code: ${code}, message: ${message}`);\n      return null;\n    }\n  }\n\n  private getHdsLayeredIcons(): void {\n    if (!this.layeredDrawableDescriptor) {\n      console.error(`getHdsLayeredIcons layeredDrawableDescriptor is undefined.`);\n      return;\n    }\n\n    let options: hdsDrawable.Options = {\n      size: 48,\n      hasBorder: true,\n      parallelNumber: 4\n    };\n\n    let layeredIcons: Array<hdsDrawable.LayeredIcon> = [];\n    for (let i = 0; i < 10; i++) {\n      layeredIcons.push({\n        bundleName: `${this.bundleName}-${i}`,\n        layeredDrawableDescriptor: this.layeredDrawableDescriptor\n      });\n    }\n\n    try {\n      hdsDrawable.getHdsLayeredIcons(layeredIcons, options)\n        .then((data: Array<hdsDrawable.ProcessedIcon>) => {\n          console.info(`getHdsLayeredIcons data size: ${data.length}`);\n          this.layeredIconsResult = data;\n        })\n        .catch((err: BusinessError) => {\n          console.error(`getHdsLayeredIcons return error, code: ${err.code}, msg: ${err.message}`);\n        });\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsLayeredIcons failed, code: ${code}, message: ${message}`);\n    }\n  }\n}
