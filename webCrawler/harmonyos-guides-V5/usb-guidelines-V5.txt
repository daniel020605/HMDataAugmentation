USB服务开发指导
场景介绍
Host模式下，可以获取到已经连接的USB设备列表，并根据需要打开和关闭设备、控制设备权限、进行数据传输等。
接口说明
USB服务主要提供的功能有：查询USB设备列表、批量数据传输、控制命令传输、权限控制等。
USB类开放能力如下，具体请查阅API参考文档。
表1 USB类的开放能力接口
开发步骤
USB设备可作为Host设备连接Device设备进行数据传输。开发示例如下：
 获取设备列表。 // 导入USB接口api包。\nimport { usbManager } from '@kit.BasicServicesKit';\n// 获取设备列表。\nlet deviceList : Array<usbManager.USBDevice> = usbManager.getDevices();\n/*\ndeviceList结构示例\n[\n  {\n    name: \"1-1\",\n    serial: \"\",\n    manufacturerName: \"\",\n    productName: \"\",\n    version: \"\",\n    vendorId: 7531,\n    productId: 2,\n    clazz: 9,\n    subClass: 0,\n    protocol: 1,\n    devAddress: 1,\n    busNum: 1,\n    configs: [\n      {\n        id: 1,\n        attributes: 224,\n        isRemoteWakeup: true,\n        isSelfPowered: true,\n        maxPower: 0,\n        name: \"1-1\",\n        interfaces: [\n          {\n            id: 0,\n            protocol: 0,\n            clazz: 9,\n            subClass: 0,\n            alternateSetting: 0,\n            name: \"1-1\",\n            endpoints: [\n              {\n                address: 129,\n                attributes: 3,\n                interval: 12,\n                maxPacketSize: 4,\n                direction: 128,\n                number: 1,\n                type: 3,\n                interfaceId: 0,\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]\n*/ 获取设备操作权限。 import { usbManager } from '@kit.BasicServicesKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet deviceName : string = deviceList[0].name;\n// 申请操作指定的device的操作权限。\nusbManager.requestRight(deviceName).then((hasRight : boolean) => {\n  console.info(\"usb device request right result: \" + hasRight);\n}).catch((error : BusinessError)=> {\n  console.info(\"usb device request right failed : \" + error);\n}); 打开Device设备。 // 打开设备，获取数据传输通道。\nlet pipe : usbManager.USBDevicePipe = usbManager.connectDevice(deviceList[0]);\nlet interface1 : usbManager.USBInterface = deviceList[0].configs[0].interfaces[0];\n/*\n 打开对应接口，在设备信息（deviceList）中选取对应的interface。\ninterface1为设备配置中的一个接口。\n*/\nusbManager.claimInterface(pipe, interface1, true); 数据传输。当前仅支持批量传输和控制传输。  批量传输  import { usbManager } from '@kit.BasicServicesKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n/*\n  读取数据，在device信息中选取对应数据接收的endpoint来做数据传输\n（endpoint.direction == 0x80）；dataUint8Array是要读取的数据，类型为Uint8Array。\n*/\nlet inEndpoint : usbManager.USBEndpoint = interface1.endpoints[2];\nlet outEndpoint : usbManager.USBEndpoint = interface1.endpoints[1];\nlet dataUint8Array : Uint8Array = new Uint8Array(1024);\nusbManager.bulkTransfer(pipe, inEndpoint, dataUint8Array, 15000).then((dataLength : number) => {\nif (dataLength >= 0) {\n  console.info(\"usb readData result Length : \" + dataLength);\n} else {\n  console.info(\"usb readData failed : \" + dataLength);\n}\n}).catch((error : BusinessError) => {\nconsole.info(\"usb readData error : \" + JSON.stringify(error));\n});\n// 发送数据，在device信息中选取对应数据发送的endpoint来做数据传输。（endpoint.direction == 0）\nusbManager.bulkTransfer(pipe, outEndpoint, dataUint8Array, 15000).then((dataLength : number) => {\n  if (dataLength >= 0) {\n    console.info(\"usb writeData result write length : \" + dataLength);\n  } else {\n    console.info(\"writeData failed\");\n  }\n}).catch((error : BusinessError) => {\n  console.info(\"usb writeData error : \" + JSON.stringify(error));\n});  控制传输  import { usbManager } from '@kit.BasicServicesKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n/*\n  构造控制传输参数\n*/\nlet param: usbManager.USBDeviceRequestParams = {\n  bmRequestType: 0x80,    //0x80指一次由设备到主机的标准请求命令\n  bRequest: 0x06,    //0x06指获取描述符\n  wValue:0x01 << 8 | 0,    //该值为2个字节，高字节指描述符类型，此处0x01指设备描述符；低字节指描述符索引，设备描述符不涉及，填0\n  wIndex: 0,    //索引值，可填0\n  wLength: 18,    //描述符的长度，此处18表示设备描述符长度，最大支持1024\n  data: new Uint8Array(18)\n};\n\nusbManager.usbControlTransfer(pipe, param).then((ret: number) => {\nconsole.info(\"usbControlTransfer = ${ret}\");\n}) 释放接口，关闭设备。 usbManager.releaseInterface(pipe, interface1);\nusbManager.closePipe(pipe); 
