监听组件事件
NDK接口针对UI组件的事件，提供了监听函数的方式。首先，可使用addNodeEventReceiver函数添加组件事件的监听器，该监听器会监听该组件上发生的所有事件，例如：点击事件、焦点事件。然后，可使用registerNodeEvent函数声明组件的哪些事件需要监听，NDK接口支持的事件范围通过ArkUI_NodeEventType枚举值定义。
 事件注册需要声明addNodeEventReceiver监听器注册和registerNodeEvent事件类型，监听器只能监听已声明的事件。 需要关注事件的反注册逻辑，如在组件销毁前调用removeNodeEventReceiver移除事件监听器，unregisterNodeEvent通知ArkUI框架已监听的事件不再需要监听。 addNodeEventReceiver可以添加多个函数指针，每个函数指针都会在对应事件触发时触发，对应的removeNodeEventReceiver需要传递对应的函数指针用于移除监听。 registerNodeEventReceiver是全局监听函数，不同于addNodeEventReceiver，registerEventReceiver能够监听所有Native组件的事件触发，但只能传递一个函数指针，多次调用使用最后一次的函数指针进行回调，释放时使用ungisterNodeEventReceiver进行释放。 
以下示例基于接入ArkTS页面章节，补充相关事件监听。
 在ArkUINode基类对象中实现通用事件注册逻辑。 // ArkUINode.h\n// 提供通用属性和事件的封装。\n\n#ifndef MYAPPLICATION_ARKUINODE_H\n#define MYAPPLICATION_ARKUINODE_H\n\n#include \"ArkUIBaseNode.h\"\n#include \"NativeModule.h\"\n\n#include <arkui/native_node.h>\n#include <arkui/native_type.h>\n\nnamespace NativeModule {\n\nclass ArkUINode : public ArkUIBaseNode {\npublic:\n    explicit ArkUINode(ArkUI_NodeHandle handle) : ArkUIBaseNode(handle) {\n        nativeModule_ = NativeModuleInstance::GetInstance()->GetNativeNodeAPI();\n        // 事件触发时需要通过函数获取对应的事件对象，这边通过设置节点自定义数据将封装类指针保持在组件上，方便后续事件分发。\n        nativeModule_->setUserData(handle_, this);\n        // 注册节点监听事件接受器。\n        nativeModule_->addNodeEventReceiver(handle_, ArkUINode::NodeEventReceiver);\n    }\n\n    ~ArkUINode() override {\n        if (onClick_) {\n            nativeModule_->unregisterNodeEvent(handle_, NODE_ON_CLICK);\n        }\n        if (onTouch_) {\n            nativeModule_->unregisterNodeEvent(handle_, NODE_TOUCH_EVENT);\n        }\n        if (onDisappear) {\n            nativeModule_->unregisterNodeEvent(handle_, NODE_EVENT_ON_DISAPPEAR);\n        }\n        if (onAppear) {\n            nativeModule_->unregisterNodeEvent(handle_, NODE_EVENT_ON_APPEAR);\n        }\n        nativeModule_->removeNodeEventReceiver(handle_, ArkUINode::NodeEventReceiver);\n    }\n\n    void SetWidth(float width) {\n        assert(handle_);\n        ArkUI_NumberValue value[] = {{.f32 = width}};\n        ArkUI_AttributeItem item = {value, 1};\n        nativeModule_->setAttribute(handle_, NODE_WIDTH, &item);\n    }\n    void SetPercentWidth(float percent) {\n        assert(handle_);\n        ArkUI_NumberValue value[] = {{.f32 = percent}};\n        ArkUI_AttributeItem item = {value, 1};\n        nativeModule_->setAttribute(handle_, NODE_WIDTH_PERCENT, &item);\n    }\n    void SetHeight(float height) {\n        assert(handle_);\n        ArkUI_NumberValue value[] = {{.f32 = height}};\n        ArkUI_AttributeItem item = {value, 1};\n        nativeModule_->setAttribute(handle_, NODE_HEIGHT, &item);\n    }\n    void SetPercentHeight(float percent) {\n        assert(handle_);\n        ArkUI_NumberValue value[] = {{.f32 = percent}};\n        ArkUI_AttributeItem item = {value, 1};\n        nativeModule_->setAttribute(handle_, NODE_HEIGHT_PERCENT, &item);\n    }\n    void SetBackgroundColor(uint32_t color) {\n        assert(handle_);\n        ArkUI_NumberValue value[] = {{.u32 = color}};\n        ArkUI_AttributeItem item = {value, 1};\n        nativeModule_->setAttribute(handle_, NODE_BACKGROUND_COLOR, &item);\n    }\n    // 处理通用事件。\n    void RegisterOnClick(const std::function<void()> &onClick) {\n        assert(handle_);\n        onClick_ = onClick;\n        // 注册点击事件。\n        nativeModule_->registerNodeEvent(handle_, NODE_ON_CLICK, 0, nullptr);\n    }\n\n    void RegisterOnTouch(const std::function<void(int32_t type, float x, float y)> &onTouch) {\n        assert(handle_);\n        onTouch_ = onTouch;\n        // 注册触碰事件。\n        nativeModule_->registerNodeEvent(handle_, NODE_TOUCH_EVENT, 0, nullptr);\n    }\n\n    void RegisterOnDisappear(const std::function<void()> &onDisappear) {\n        assert(handle_);\n        onDisappear_ = onDisappear;\n        // 注册卸载事件。\n        nativeModule_->registerNodeEvent(handle_, NODE_EVENT_ON_DISAPPEAR, 0, nullptr);\n    }\n\n    void RegisterOnAppear(const std::function<void()> &onAppear) {\n        assert(handle_);\n        onAppear_ = onAppear;\n        // 注册挂载事件。\n        nativeModule_->registerNodeEvent(handle_, NODE_EVENT_ON_APPEAR, 0, nullptr);\n    }\n\nprotected:\n    // 事件监听器函数指针。\n    static void NodeEventReceiver(ArkUI_NodeEvent *event) {\n        // 获取事件发生的UI组件对象。\n        auto nodeHandle = OH_ArkUI_NodeEvent_GetNodeHandle(event);\n        // 获取保持在UI组件对象中的自定义数据，返回封装类指针。\n        auto *node = reinterpret_cast<ArkUINode *>(\n            NativeModuleInstance::GetInstance()->GetNativeNodeAPI()->getUserData(nodeHandle));\n        // 基于封装类实例对象处理事件。\n        node->ProcessNodeEvent(event);\n    }\n    void ProcessNodeEvent(ArkUI_NodeEvent *event) {\n        auto eventType = OH_ArkUI_NodeEvent_GetEventType(event);\n        switch (eventType) {\n        case NODE_ON_CLICK: {\n            if (onClick_) {\n                onClick_();\n            }\n            break;\n        }\n        case NODE_TOUCH_EVENT: {\n            if (onTouch_) {\n                auto *uiInputEvent = OH_ArkUI_NodeEvent_GetInputEvent(event);\n                float x = OH_ArkUI_PointerEvent_GetX(uiInputEvent);\n                float y = OH_ArkUI_PointerEvent_GetY(uiInputEvent);\n                auto type = OH_ArkUI_UIInputEvent_GetAction(uiInputEvent);\n                onTouch_(type, x, y);\n            }\n        }\n        case NODE_EVENT_ON_DISAPPEAR: {\n            if (onDisappear_) {\n                onDisappear_();\n            }\n            break;\n        }\n        case NODE_EVENT_ON_APPEAR: {\n            if (onAppear_) {\n                onAppear_();\n            }\n            break;\n        }\n        default: {\n            // 组件特有事件交给子类处理\n            OnNodeEvent(event);\n        }\n        }\n    }\n\n    virtual void OnNodeEvent(ArkUI_NodeEvent *event) {}\n\n    void OnAddChild(const std::shared_ptr<ArkUIBaseNode> &child) override {\n        nativeModule_->addChild(handle_, child->GetHandle());\n    }\n\n    void OnRemoveChild(const std::shared_ptr<ArkUIBaseNode> &child) override {\n        nativeModule_->removeChild(handle_, child->GetHandle());\n    }\n\n    void OnInsertChild(const std::shared_ptr<ArkUIBaseNode> &child, int32_t index) override {\n        nativeModule_->insertChildAt(handle_, child->GetHandle(), index);\n    }\n\nprivate:\n    std::function<void()> onClick_;\n    std::function<void()> onDisappear_;\n    std::function<void()> onAppear_;\n    std::function<void(int32_t type, float x, float y)> onTouch_;\n};\n} // namespace NativeModule\n\n#endif // MYAPPLICATION_ARKUINODE_H 在ArkUIListNode对象中实现列表事件注册逻辑。 // ArkUIListNode.h\n// 列表封装类对象\n\n#ifndef MYAPPLICATION_ARKUILISTNODE_H\n#define MYAPPLICATION_ARKUILISTNODE_H\n\n#include \"ArkUINode.h\"\n#include <hilog/log.h>\n\nnamespace NativeModule {\nclass ArkUIListNode : public ArkUINode {\npublic:\n    ArkUIListNode()\n        : ArkUINode((NativeModuleInstance::GetInstance()->GetNativeNodeAPI())->createNode(ARKUI_NODE_LIST)) {}\n\n    ~ArkUIListNode() override { nativeModule_->unregisterNodeEvent(handle_, NODE_LIST_ON_SCROLL_INDEX); }\n\n    void SetScrollBarState(bool isShow) {\n        assert(handle_);\n        ArkUI_ScrollBarDisplayMode displayMode =\n            isShow ? ARKUI_SCROLL_BAR_DISPLAY_MODE_ON : ARKUI_SCROLL_BAR_DISPLAY_MODE_OFF;\n        ArkUI_NumberValue value[] = {{.i32 = displayMode}};\n        ArkUI_AttributeItem item = {value, 1};\n        nativeModule_->setAttribute(handle_, NODE_SCROLL_BAR_DISPLAY_MODE, &item);\n    }\n\n    // 注册列表相关事件。\n    void RegisterOnScrollIndex(const std::function<void(int32_t index)> &onScrollIndex) {\n        assert(handle_);\n        onScrollIndex_ = onScrollIndex;\n        nativeModule_->registerNodeEvent(handle_, NODE_LIST_ON_SCROLL_INDEX, 0, nullptr);\n    }\n\nprotected:\n   // 处理List相关事件。\n    void OnNodeEvent(ArkUI_NodeEvent *event) override {\n        auto eventType = OH_ArkUI_NodeEvent_GetEventType(event);\n        switch (eventType) {\n        case NODE_LIST_ON_SCROLL_INDEX: {\n            auto index = OH_ArkUI_NodeEvent_GetNodeComponentEvent(event)->data[0];\n            if (onScrollIndex_) {\n                onScrollIndex_(index.i32);\n            }\n        }\n        default: {\n        }\n        }\n    }\n\nprivate:\n    std::function<void(int32_t index)> onScrollIndex_;\n};\n} // namespace NativeModule\n\n#endif // MYAPPLICATION_ARKUILISTNODE_H 添加相关事件。 // TextListExample.h\n// 文本列表示例。\n\n#ifndef MYAPPLICATION_NORMALTEXTLISTEXAMPLE_H\n#define MYAPPLICATION_NORMALTEXTLISTEXAMPLE_H\n\n#include \"ArkUIBaseNode.h\"\n#include \"ArkUIListItemNode.h\"\n#include \"ArkUIListNode.h\"\n#include \"ArkUITextNode.h\"\n#include <hilog/log.h>\n\nnamespace NativeModule {\n\nstd::shared_ptr<ArkUIBaseNode> CreateTextListExample() {\n    // 创建组件并挂载\n    // 1：创建List组件。\n    auto list = std::make_shared<ArkUIListNode>();\n    list->SetPercentWidth(1);\n    list->SetPercentHeight(1);\n    // 2：创建ListItem子组件并挂载到List上。\n    for (int32_t i = 0; i < 30; ++i) {\n        auto listItem = std::make_shared<ArkUIListItemNode>();\n        auto textNode = std::make_shared<ArkUITextNode>();\n        textNode->SetTextContent(std::to_string(i));\n        textNode->SetFontSize(16);\n        textNode->SetPercentWidth(1);\n        textNode->SetHeight(100);\n        textNode->SetBackgroundColor(0xFFfffacd);\n        textNode->SetTextAlign(ARKUI_TEXT_ALIGNMENT_CENTER);\n        listItem->AddChild(textNode);\n        // 列表项注册点击事件。\n        listItem->RegisterOnClick([i]() { OH_LOG_INFO(LOG_APP, \"on %{public}d list item click\", i); });\n        list->AddChild(listItem);\n    }\n    // 3：注册List相关监听事件.\n    list->RegisterOnScrollIndex([](int32_t index) { OH_LOG_INFO(LOG_APP, \"on list scroll index: %{public}d\", index); });\n    // 4: 注册挂载事件。\n    list->RegisterOnAppear([]() { OH_LOG_INFO(LOG_APP, \"on list mount to tree\"); });\n    // 4: 注册卸载事件。\n    list->RegisterOnDisappear([]() { OH_LOG_INFO(LOG_APP, \"on list unmount from tree\"); });\n    return list;\n}\n} // namespace NativeModule\n\n#endif // MYAPPLICATION_NORMALTEXTLISTEXAMPLE_H 
