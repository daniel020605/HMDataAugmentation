代理提醒
概述
[h2]功能介绍
应用退到后台或进程终止后，仍然有一些提醒用户的定时类任务，例如时钟提醒等，为满足此类功能场景，系统提供了代理提醒（reminderAgentManager）的能力。当应用退至后台或进程终止后，系统会代理应用做相应的提醒。当前支持的提醒类型包括：倒计时、日历和闹钟。为了防止代理提醒被滥用于广告、营销类提醒，影响用户体验，代理增加了管控机制，管控后的使用方法请参考管控限制。
 倒计时类：基于倒计时的提醒功能。 日历类：基于日历的提醒功能。 闹钟类：基于时钟的提醒功能。 
[h2]约束与限制
 个数限制：一个三方应用支持最多30个有效提醒。 
当到达设置的提醒时间点时，通知中心会弹出相应提醒。若未点击提醒上的关闭/CLOSE按钮，则代理提醒是有效/未过期的；若点击了关闭/CLOSE按钮，则代理提醒过期。
当代理提醒是周期性提醒时，如设置每天提醒，无论是否点击关闭/CLOSE按钮，代理提醒都是有效的。
 跳转限制：点击提醒通知后跳转的应用必须是申请代理提醒的本应用。 管控限制：管控后可通过日历Calendar Kit 替代代理提醒，实现相应的提醒功能，具体请参考开发指南；或者参考如下邮件格式向华为侧申请代理提醒权限，申请通过后会开通权益，即可正常调用代理提醒接口，当前仅对纯工具类应用开放申请。 邮件格式： 通过hwpush@huawei.com邮箱向华为侧申请，邮件会在10个工作日内回复（含权益开通结果），邮件提示申请通过后1天权益生效，请留意邮箱消息。邮件的规定格式如下： 邮件主题：【代理提醒权限申请】 邮件正文： 申请权限名称：代理提醒 企业名称： 应用名称：*** 应用包名：com.. 使用场景：提供申请理由/用途/尽可能附上图片，及使用代理提醒发通知/提醒的必要性。 通知标题：*** 通知文本：*** 通知场景：*** 通知频率：*** 
接口说明
表1 主要接口
以下是代理提醒的相关接口，下表均以Promise形式为例，更多接口及使用方式请见后台代理提醒文档。
开发步骤
 申请ohos.permission.PUBLISH_AGENT_REMINDER权限，配置方式请参阅声明权限。 请求通知授权。获得用户授权后，才能使用代理提醒功能。 导入模块。 import { reminderAgentManager } from '@kit.BackgroundTasksKit';\nimport { notificationManager } from '@kit.NotificationKit';\nimport { BusinessError } from '@kit.BasicServicesKit'; 定义目标提醒代理。开发者根据实际需要，选择定义如下类型的提醒。  定义倒计时实例。 let targetReminderAgent: reminderAgentManager.ReminderRequestTimer = {\n  reminderType: reminderAgentManager.ReminderType.REMINDER_TYPE_TIMER,   // 提醒类型为倒计时类型\n  triggerTimeInSeconds: 10,\n  actionButton: [ // 设置弹出的提醒通知信息上显示的按钮类型和标题\n    {\n      title: 'close',\n      type: reminderAgentManager.ActionButtonType.ACTION_BUTTON_TYPE_CLOSE\n    }\n  ],\n  wantAgent: {     // 点击提醒通知后跳转的目标UIAbility信息\n    pkgName: 'com.example.myapplication',\n    abilityName: 'EntryAbility'\n  },\n  maxScreenWantAgent: { // 全屏显示提醒到达时自动拉起的目标UIAbility信息\n    pkgName: 'com.example.myapplication',\n    abilityName: 'EntryAbility'\n  },\n  title: 'this is title', // 指明提醒标题\n  content: 'this is content', // 指明提醒内容\n  expiredContent: 'this reminder has expired', // 指明提醒过期后需要显示的内容\n  notificationId: 100, // 指明提醒使用的通知的ID号，相同ID号的提醒会覆盖\n  slotType: notificationManager.SlotType.SOCIAL_COMMUNICATION // 指明提醒的Slot类型\n} 定义日历实例。 let targetReminderAgent: reminderAgentManager.ReminderRequestCalendar = {\n  reminderType: reminderAgentManager.ReminderType.REMINDER_TYPE_CALENDAR, // 提醒类型为日历类型\n  dateTime: {   // 指明提醒的目标时间\n    year: 2023,\n    month: 1,\n    day: 1,\n    hour: 11,\n    minute: 14,\n    second: 30\n  },\n  repeatMonths: [1], // 指明重复提醒的月份\n  repeatDays: [1], // 指明重复提醒的日期\n  actionButton: [ // 设置弹出的提醒通知信息上显示的按钮类型和标题\n    {\n      title: 'close',\n      type: reminderAgentManager.ActionButtonType.ACTION_BUTTON_TYPE_CLOSE\n    },\n    {\n      title: 'snooze',\n      type: reminderAgentManager.ActionButtonType.ACTION_BUTTON_TYPE_SNOOZE\n    },\n  ],\n  wantAgent: { // 点击提醒通知后跳转的目标UIAbility信息\n    pkgName: 'com.example.myapplication',\n    abilityName: 'EntryAbility'\n  },\n  maxScreenWantAgent: { // 全屏显示提醒到达时自动拉起的目标UIAbility信息\n    pkgName: 'com.example.myapplication',\n    abilityName: 'EntryAbility'\n  },\n  ringDuration: 5, // 指明响铃时长（单位：秒）\n  snoozeTimes: 2, // 指明延迟提醒次数\n  timeInterval: 5*60, // 执行延迟提醒间隔（单位：秒）\n  title: 'this is title', // 指明提醒标题\n  content: 'this is content', // 指明提醒内容\n  expiredContent: 'this reminder has expired', // 指明提醒过期后需要显示的内容\n  snoozeContent: 'remind later', // 指明延迟提醒时需要显示的内容\n  notificationId: 100, // 指明提醒使用的通知的ID号，相同ID号的提醒会覆盖\n  slotType: notificationManager.SlotType.SOCIAL_COMMUNICATION // 指明提醒的Slot类型\n} 定义闹钟实例。 let targetReminderAgent: reminderAgentManager.ReminderRequestAlarm = {\n  reminderType: reminderAgentManager.ReminderType.REMINDER_TYPE_ALARM, // 提醒类型为闹钟类型\n  hour: 23, // 指明提醒的目标时刻\n  minute: 9, // 指明提醒的目标分钟\n  daysOfWeek: [2], // 指明每周哪几天需要重复提醒\n  actionButton: [ // 设置弹出的提醒通知信息上显示的按钮类型和标题\n    {\n      title: 'close',\n      type: reminderAgentManager.ActionButtonType.ACTION_BUTTON_TYPE_CLOSE\n    },\n    {\n      title: 'snooze',\n      type: reminderAgentManager.ActionButtonType.ACTION_BUTTON_TYPE_SNOOZE\n    },\n  ],\n  wantAgent: { // 点击提醒通知后跳转的目标UIAbility信息\n    pkgName: 'com.example.myapplication',\n    abilityName: 'EntryAbility'\n  },\n  maxScreenWantAgent: { // 全屏显示提醒到达时自动拉起的目标UIAbility信息\n    pkgName: 'com.example.myapplication',\n    abilityName: 'EntryAbility'\n  },\n  ringDuration: 5, // 指明响铃时长（单位：秒）\n  snoozeTimes: 2, // 指明延迟提醒次数\n  timeInterval: 5*60, // 执行延迟提醒间隔（单位：秒）\n  title: 'this is title', // 指明提醒标题\n  content: 'this is content', // 指明提醒内容\n  expiredContent: 'this reminder has expired', // 指明提醒过期后需要显示的内容\n  snoozeContent: 'remind later', // 指明延迟提醒时需要显示的内容\n  notificationId: 99, // 指明提醒使用的通知的ID号，相同ID号的提醒会覆盖\n  slotType: notificationManager.SlotType.SOCIAL_COMMUNICATION // 指明提醒的Slot类型\n}  发布相应的提醒代理。代理发布后，应用即可使用后台代理提醒功能。  reminderAgentManager.publishReminder(targetReminderAgent).then((res: number) => {\n   console.info('Succeeded in publishing reminder. ');\n   let reminderId: number = res; // 发布的提醒ID\n }).catch((err: BusinessError) => {\n   console.error(`Failed to publish reminder. Code: ${err.code}, message: ${err.message}`);\n }) 根据需要删除提醒任务。  let reminderId: number = 1;\n // reminderId的值从发布提醒代理成功之后的回调中获得\n reminderAgentManager.cancelReminder(reminderId).then(() => {\n   console.log('Succeeded in canceling reminder.');\n }).catch((err: BusinessError) => {\n   console.error(`Failed to cancel reminder. Code: ${err.code}, message: ${err.message}`);\n }); 
