使用JSVM-API接口进行错误处理开发
简介
使用JSVM-API接口进行错误处理开发，使得在JSVM-API模块中能够更好地管理和响应错误情况。通过合理使用这些函数，可以提高模块的稳定性和可靠性。
基本概念
在JavaScript编程中，异常和错误是常见的概念。异常表示发生了某种意外情况，而错误则指示程序无法正确执行某些操作。JSVM-API提供了一系列方法来帮助开发者在模块中处理JavaScript中的异常和错误。下面是一些基本概念：
异常（Exception）：在程序执行过程中可能会出现的意外情况，可以是语法错误、运行时错误或逻辑错误，例如除以零或对未定义变量的操作。错误（Error）：表示程序无法顺利执行某些操作，可以是由底层系统、API函数或开发者自定义的。类型错误（TypeError）：表示操作或值的类型不符合预期的情况，通常是由于错误的数据类型导致的。范围错误（RangeError）：表示一个值不在预期的范围内，例如对数组长度之外的索引进行访问。语法错误（SyntaxError）：表示一段代码的语法错误。
这些基本概念在异常和错误处理中非常重要，开发者需要通过适当的方法来捕获、处理或向用户报告这些异常和错误，以确保程序的稳定性和正确性。JSVM-API提供的方法可以帮助开发者在模块开发中处理JavaScript中的异常和错误。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++相关代码进行展示。
[h2]OH_JSVM_Throw
用于抛出JavaScript Error对象。当在本机代码中发生错误或检测到不符合预期的情况时，可以使用此接口来抛出一个Javascript Error，使其能够被捕获并处理。示例参考OH_JSVM_CreateError。
[h2]OH_JSVM_CreateError
创建并获取一个带文本信息的JavaScript Error。
cpp部分代码
// hello.cpp\n// 捕获清除并打印错误,该函数作为公共函数，在本文档后续样例中不再声明和定义\nstatic void GetLastErrorAndClean(JSVM_Env env) {\n    // 调用OH_JSVM_GetAndClearLastException接口获取并清除最后一个未处理的异常。即使存在挂起的JavaScript异常，也可以调用此API\n    JSVM_Value result = nullptr;\n    JSVM_Status status = OH_JSVM_GetAndClearLastException(env, &result);\n    // 打印错误信息\n    JSVM_Value message;\n    JSVM_Value errorCode;\n    OH_JSVM_GetNamedProperty((env), result, \"message\", &message);\n    OH_JSVM_GetNamedProperty((env), result, \"code\", &errorCode);\n    char messagestr[256];\n    char codeStr[256];\n    OH_JSVM_GetValueStringUtf8(env, message, messagestr, 256, nullptr);\n    OH_JSVM_GetValueStringUtf8(env, errorCode, codeStr, 256, nullptr);\n    OH_LOG_INFO(LOG_APP, \"JSVM error message: %{public}s, error code: %{public}s\", messagestr, codeStr);\n}\n\n// OH_JSVM_CreateError的样例方法\nstatic JSVM_Value JsVmCreateThrowError(JSVM_Env env, JSVM_CallbackInfo info) {\n    // 在JSVM环境中创建一个字符串，并将其存储在errorCode变量中\n    JSVM_Value errorCode = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"-1\", JSVM_AUTO_LENGTH, &errorCode);\n    // 在JSVM环境中创建一个字符串，并将其存储在errorMessage变量中\n    JSVM_Value errorMessage = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"HasError\", JSVM_AUTO_LENGTH, &errorMessage);\n    // 创建一个JavaScript对象error\n    JSVM_Value error = nullptr;\n    OH_JSVM_CreateError(env, errorCode, errorMessage, &error);\n    // 通过OH_JSVM_Throw接口将对象抛出\n    OH_JSVM_Throw(env, error);\n    GetLastErrorAndClean(env);\n    return nullptr;\n}\n\n// JsVmThrow注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmCreateThrowError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmThrow方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmCreateThrowError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmCreateThrowError();)JS\";
预期输出结果
JSVM error message: HasError, error code: -1
[h2]OH_JSVM_ThrowError
用于抛出一个带文本信息的JS Error。
cpp部分代码
// hello.cpp\n// OH_JSVM_ThrowError的样例方法\nstatic JSVM_Value JsVmThrowError(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value argv[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, argv, nullptr, nullptr);\n    if (argc == 0) {\n        // 如果没有传递参数，直接抛出错误\n        OH_JSVM_ThrowError(env, \"-1\", \"has Error\");\n    } else if (argc == 1) {\n        size_t length;\n        // 通过入参获取到javaScript侧传入的字符串长度。\n        OH_JSVM_GetValueStringUtf8(env, argv[0], nullptr, 0, &length);\n        char *buffer = new char[length + 1];\n        // 获取入参的字符串内容。\n        OH_JSVM_GetValueStringUtf8(env, argv[0], buffer, length + 1, nullptr);\n        // 作为error信息填入到OH_JSVM_ThrowError接口中。\n        OH_JSVM_ThrowError(env, \"self defined error code\", buffer);\n        delete[] buffer;\n    }\n    GetLastErrorAndClean(env);\n    return nullptr;\n}\n// JsVmThrowError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmThrowError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmThrowError方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmThrowError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmThrowError();jsVmThrowError(\"self defined error message\");)JS\";
预期输出结果
JSVM error message: has Error, error code: -1\nJSVM error message: self defined error message, error code: self defined error code
[h2]OH_JSVM_ThrowTypeError
创建并获取一个带文本信息的JavaScript TypeError。
cpp部分代码
// hello.cpp\n// OH_JSVM_ThrowTypeError的样例方法\nstatic JSVM_Value JsVmThrowTypeError(JSVM_Env env, JSVM_CallbackInfo info) {\n    size_t argc = 1;\n    JSVM_Value argv[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, argv, nullptr, nullptr);\n    if (argc == 0) {\n        // 如果没有传递参数，直接抛出错误\n        OH_JSVM_ThrowTypeError(env, \"-1\", \"throwing type error\");\n    } else if (argc == 1) {\n        size_t length;\n        // 通过入参获取到javaScript侧传入的字符串长度\n        OH_JSVM_GetValueStringUtf8(env, argv[0], nullptr, 0, &length);\n        char *buffer = new char[length + 1];\n        // 获取入参的字符串内容\n        OH_JSVM_GetValueStringUtf8(env, argv[0], buffer, length + 1, nullptr);\n        // 作为error信息填入到OH_JSVM_ThrowError接口中\n        OH_JSVM_ThrowTypeError(env, \"self defined error code\", buffer);\n        delete[] buffer;\n    }\n    GetLastErrorAndClean(env);\n    return nullptr;\n}\n// JsVmThrowTypeError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmThrowTypeError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmThrowTypeError方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmThrowTypeError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmThrowTypeError();jsVmThrowTypeError(\"self defined error message\");)JS\";
预期输出结果
JSVM error message: throwing type error, error code: -1\nJSVM error message: self defined error message, error code: self defined error code
[h2]OH_JSVM_ThrowRangeError
创建并获取一个带文本信息的JavaScript RangeError。
cpp部分代码
// hello.cpp\n// OH_JSVM_ThrowRangeError的样例方法\nstatic JSVM_Value JsVmThrowRangeError(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // js侧传入两个参数\n    size_t argc = 2;\n    JSVM_Value argv[2] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, argv, nullptr, nullptr);\n    // 如果传入参数个数不为2\n    if (argc != 2) {\n        // 这里抛出一个RangeError\n        OH_JSVM_ThrowRangeError(env, \"OH_JSVM_ThrowRangeError\", \"Expected two numbers as arguments\");\n        GetLastErrorAndClean(env);\n        return nullptr;\n    }\n    JSVM_Value result = nullptr;\n    OH_JSVM_GetBoolean(env, true, &result);\n    return result;\n}\n// JsVmThrowRangeError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmThrowRangeError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmThrowRangeError方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmThrowRangeError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmThrowRangeError(1);)JS\";
预期输出结果
JSVM error message: Expected two numbers as arguments, error code: OH_JSVM_ThrowRangeError
[h2]OH_JSVM_ThrowSyntaxError
创建并获取一个带文本信息的JavaScript SyntaxError。
cpp部分代码
// hello.cpp\n// OH_JSVM_ThrowSyntaxError的样例方法\nstatic JSVM_Value JsVmThrowSyntaxError(JSVM_Env env, JSVM_CallbackInfo info) {\n    // JS侧传入运行的JS代码\n    size_t argc = 1;\n    JSVM_Value argv[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, argv, nullptr, nullptr);\n    JSVM_Script script = nullptr;\n    // 通过OH_JSVM_CompileScript接口编译JS代码\n    OH_JSVM_CompileScript(env, argv[0], nullptr, 0, true, nullptr, &script);\n    JSVM_Value scriptResult = nullptr;\n    // 通过OH_JSVM_RunScript接口运行JS代码\n    JSVM_Status status = OH_JSVM_RunScript(env, script, &scriptResult);\n    if (status != JSVM_OK) {\n        // 如果JSVM_RunScript接口返回状态不为JSVM_OK，则抛出一个SyntaxError\n        OH_JSVM_ThrowSyntaxError(env, \"JsVmThrowSyntaxError\", \"throw syntax error\");\n        GetLastErrorAndClean(env);\n        return nullptr;\n    }\n    JSVM_Value result = nullptr;\n    OH_JSVM_GetBoolean(env, true, &result);\n    return result;\n}\n// JsVmThrowSyntaxError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmThrowSyntaxError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmThrowSyntaxError方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmThrowSyntaxError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmThrowSyntaxError();)JS\";
预期输出结果
JSVM error message: throw syntax error, error code: JsVmThrowSyntaxError
[h2]OH_JSVM_IsError
用于判断给定的JSVM_Value是否表示一个error对象。
cpp部分代码
// hello.cpp\n// OH_JSVM_IsError的样例方法\nstatic JSVM_Value JsVmIsError(JSVM_Env env, JSVM_CallbackInfo info) {\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 调用接口OH_JSVM_IsError判断入参是否为一个error对象\n    bool result = false;\n    // 如果JSVM_Value为一个error对象，则设置result为true的布尔值，否则设置为false\n    JSVM_Status status = OH_JSVM_IsError(env, args[0], &result);\n    if (status == JSVM_OK) {\n        OH_LOG_INFO(LOG_APP, \"JSVM API call OH_JSVM_IsError success, result is %{public}d\", result);\n    }else {\n        OH_LOG_INFO(LOG_APP, \"JSVM API call OH_JSVM_IsError failed\");\n    }\n    // 取出result通过OH_JSVM_GetBoolean接口将取出的bool值转换为JSVM_Value类型的值返回出去\n    JSVM_Value returnValue = nullptr;\n    OH_JSVM_GetBoolean(env, result, &returnValue);\n    return returnValue;\n}\n// JsVmIsError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmIsError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmIsError方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmIsError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmIsError(Error()))JS\";
预期输出结果
JSVM API call OH_JSVM_IsError success, result is 1
[h2]OH_JSVM_CreateTypeError
创建并获取一个带文本信息的JavaScript TypeError。
cpp部分代码
// hello.cpp\n// OH_JSVM_CreateTypeError的样例方法\nstatic JSVM_Value JsVmCreateTypeError(JSVM_Env env, JSVM_CallbackInfo info) {\n    // 在JSVM环境中创建一个字符串，并将其存储在errorCode变量中\n    JSVM_Value errorCode = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"-1\", JSVM_AUTO_LENGTH, &errorCode);\n    // 在JSVM环境中创建一个字符串，并将其存储在errorMessage变量中\n    JSVM_Value errorMessage = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"HasError\", JSVM_AUTO_LENGTH, &errorMessage);\n    JSVM_Value result = nullptr;\n    JSVM_Status status = OH_JSVM_CreateTypeError(env, errorCode, errorMessage, &result);\n    if (status == JSVM_OK) {\n        OH_LOG_INFO(LOG_APP, \"JSVM API Create TypeError SUCCESS\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM API Create TypeError FAILED\");\n    }\n    return result;\n}\n// JsVmCreateTypeError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmCreateTypeError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmCreateTypeError方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmCreateTypeError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmCreateTypeError();)JS\";
预期输出结果
JSVM API Create TypeError SUCCESS
[h2]OH_JSVM_CreateRangeError
创建并获取一个带文本信息的JavaScript RangeError。
cpp部分代码
// hello.cpp\n// OH_JSVM_CreateRangeError的样例方法\nstatic JSVM_Value JsVmCreateRangeError(JSVM_Env env, JSVM_CallbackInfo info) {\n    // 在JSVM环境中创建一个字符串，并将其存储在errorCode变量中\n    JSVM_Value errorCode = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"-1\", JSVM_AUTO_LENGTH, &errorCode);\n    // 在JSVM环境中创建一个字符串，并将其存储在errorMessage变量中\n    JSVM_Value errorMessage = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"HasError\", JSVM_AUTO_LENGTH, &errorMessage);\n    JSVM_Value result = nullptr;\n    JSVM_Status status = OH_JSVM_CreateRangeError(env, errorCode, errorMessage, &result);\n    if (status == JSVM_OK) {\n        OH_LOG_INFO(LOG_APP, \"JSVM API CreateRangeError SUCCESS\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM API CreateRangeError FAILED\");\n    }\n    return result;\n}\n// JsVmCreateRangeError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmCreateRangeError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmCreateRangeError方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmCreateRangeError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmCreateRangeError();)JS\";
预期输出结果
JSVM API CreateRangeError SUCCESS
[h2]OH_JSVM_CreateSyntaxError
用于创建并获取一个带文本信息的JavaScript SyntaxError。
cpp部分代码
// hello.cpp\n// OH_JSVM_CreateSyntaxError的样例方法\nstatic JSVM_Value JsVmCreateSyntaxError(JSVM_Env env, JSVM_CallbackInfo info) {\n    // 在JSVM环境中创建一个字符串，并将其存储在errorCode变量中\n    JSVM_Value errorCode = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"-1\", JSVM_AUTO_LENGTH, &errorCode);\n    // 在JSVM环境中创建一个字符串，并将其存储在errorMessage变量中\n    JSVM_Value errorMessage = nullptr;\n    OH_JSVM_CreateStringUtf8(env, \"HasError\", JSVM_AUTO_LENGTH, &errorMessage);\n    JSVM_Value result = nullptr;\n    JSVM_Status status =  OH_JSVM_CreateSyntaxError(env, errorCode, errorMessage, &result);\n    if (status == JSVM_OK) {\n        OH_LOG_INFO(LOG_APP, \"JSVM API CreateSyntaxError SUCCESS\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM API CreateSyntaxError FAILED\");\n    }\n    return result;\n}\n// JsVmCreateSyntaxError注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmCreateSyntaxError},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmThrow方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmCreateSyntaxError\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmCreateSyntaxError();)JS\";
预期输出结果
JSVM API CreateSyntaxError SUCCESS
[h2]OH_JSVM_GetAndClearLastException
用于获取并清除最近一次出现的异常。
cpp部分代码
// hello.cpp\n// OH_JSVM_GetAndClearLastException的样例方法\nstatic JSVM_Value JsVmGetAndClearLastException(JSVM_Env env, JSVM_CallbackInfo info) {\n    // 抛出异常，创造异常情况\n    OH_JSVM_ThrowError(env, \"OH_JSVM_ThrowError errorCode\", \"OH_JSVM_ThrowError errorMessage\");\n    // 调用OH_JSVM_GetAndClearLastException接口获取并清除最后一个未处理的异常。即使存在挂起的JavaScript异常，也可以调用此API\n    JSVM_Value result = nullptr;\n    JSVM_Status status = OH_JSVM_GetAndClearLastException(env, &result);\n    if (status != JSVM_OK) {\n        OH_LOG_INFO(LOG_APP, \"JSVM API OH_JSVM_GetAndClearLastException FAILED\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM API OH_JSVM_GetAndClearLastException SUCCESS\");\n    }\n    return result;\n}\n// JsVmGetAndClearLastException注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmGetAndClearLastException},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmGetAndClearLastException方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmGetAndClearLastException\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmGetAndClearLastException();)JS\";
预期输出结果
JSVM API OH_JSVM_GetAndClearLastException SUCCESS
[h2]OH_JSVM_IsExceptionPending
用于判断是否出现了异常。
cpp部分代码
// hello.cpp\n// OH_JSVM_GetAndClearLastException的样例方法\nstatic JSVM_Value JsVmIsExceptionPending(JSVM_Env env, JSVM_CallbackInfo info) {\n    JSVM_Status status;\n    bool isExceptionPending = false;\n    // 在执行一些可能引发异常的操作后\n    OH_JSVM_ThrowError(env, \"OH_JSVM_ThrowError errorCode\", \"OH_JSVM_ThrowError errorMessage\");\n    // 检查当前环境中是否有异常挂起\n    status = OH_JSVM_IsExceptionPending(env, &isExceptionPending);\n    if (status != JSVM_OK) {\n        return nullptr;\n    }\n    if (isExceptionPending) {\n        OH_LOG_INFO(LOG_APP, \"JSVM API OH_JSVM_IsExceptionPending: SUCCESS\");\n        // 处理异常挂起的情况\n        JSVM_Value result = nullptr;\n        status = OH_JSVM_GetAndClearLastException(env, &result);\n        if (status != JSVM_OK) {\n            return nullptr;\n        }\n        // 将处理的异常返回出去\n        return result;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM API OH_JSVM_IsExceptionPending: FAILED\");\n    }\n    return nullptr;\n}\n// JsVmIsExceptionPending注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmIsExceptionPending},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmIsExceptionPending方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmIsExceptionPending\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmIsExceptionPending();)JS\";
预期输出结果
JSVM API OH_JSVM_IsExceptionPending: SUCCESS
[h2]OH_JSVM_GetLastErrorInfo
用于获取调用JSVM接口最后一次发生的错误信息（接口返回值不为JSVM_OK），包括错误码、错误消息以及错误堆栈信息，即使存在挂起的JavaScript异常，也可以调用此API。
注意: 通过OH_JSVM_ThrowError等接口主动触发的Error不会被该接口获取，除非调用接口时返回值不为JSVM_OK。
cpp部分代码
// hello.cpp\n// OH_JSVM_GetLastErrorInfo的样例方法\nstatic JSVM_Value JsVmGetLastErrorInfo(JSVM_Env env, JSVM_CallbackInfo info) {\n    // 获取输入参数（这里以字符串message作为参数传入）\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 将传入的字符串参数以OH_JSVM_GetValueInt32取出，主动制造错误\n    int32_t value = 0;\n    OH_JSVM_GetValueInt32(env, args[0], &value);\n    // 调用接口OH_JSVM_GetLastErrorInfo获取最后一次错误信息\n    const JSVM_ExtendedErrorInfo *errorInfo;\n    OH_JSVM_GetLastErrorInfo(env, &errorInfo);\n\n    // 取出错误消息作为返回值带出去打印\n    JSVM_Value result = nullptr;\n    OH_LOG_INFO(LOG_APP,\n                \"JSVM API OH_JSVM_GetLastErrorInfo: SUCCESS, error message is %{public}s, error code is %{public}d\",\n                errorInfo->errorMessage, errorInfo->errorCode);\n    // 对异常进行处理，防止程序由于抛异常而退出\n    JSVM_Value result1 = nullptr;\n    OH_JSVM_GetAndClearLastException(env, &result1);\n    OH_JSVM_CreateInt32(env, errorInfo->errorCode, &result);\n    return result;\n}\n// JsVmGetLastErrorInfo注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsVmGetLastErrorInfo},\n};\nstatic JSVM_CallbackStruct *method = param;\n// JsVmGetLastErrorInfo方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"jsVmGetLastErrorInfo\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char *srcCallNative = R\"JS(jsVmGetLastErrorInfo();)JS\";}
预期输出结果
JSVM API OH_JSVM_GetLastErrorInfo: SUCCESS, error message is A number was expected, error code is 6
