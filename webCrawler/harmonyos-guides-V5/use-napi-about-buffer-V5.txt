使用Node-API接口进行buffer相关开发
简介
在ArkTS中，Buffer是一种用于处理二进制数据的数据类型。
基本概念
使用Node-API接口进行buffer相关开发时，使用Buffer对象与ArkTS代码之间进行二进制数据的有效交互，以便在Node-API模块创建、操纵和传递Buffer对象到ArkTS，从而处理和传递二进制数据，比如文件I/O、网络传输等。
Buffer对象：用于表示一段二进制数据的对象。外部Buffer：在Node-API模块中创建的Buffer，可以与现有的数据关联起来而不需要复制数据到新的Buffer中。
场景和功能使用
以下这些接口用于有效地与ArkTS层进行交互，这使Node-API模块能够更好地处理ArkTS层的二进制数据，比如处理文件I/O、网络传输等操作：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_create_buffer
此接口用于创建Buffer对象。Buffer对象是用于在Node-API模块中操作二进制数据的一种特殊类型。
cpp部分代码
#include <string>\n#include \"napi/native_api.h\"\n\nstatic napi_value CreateBuffer(napi_env env, napi_callback_info info)\n{\n    std::string str(\"CreateBuffer\");\n    void *bufferPtr = nullptr;\n    size_t bufferSize = str.size();\n    napi_value buffer = nullptr;\n    // 调用napi_create_buffer接口创建并获取一个指定大小的ArkTS Buffer\n    napi_create_buffer(env, bufferSize, &bufferPtr, &buffer);\n    // 将字符串str的值复制到buffer的内存中\n    strcpy((char *)bufferPtr, str.data());\n    return buffer;\n}
接口声明
// index.d.ts\nexport const createBuffer: () => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_create_buffer: %{public}s', testNapi.createBuffer().toString());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_create_buffer error');\n}
[h2]napi_create_buffer_copy
本接口是Node-API中用于创建并复制数据到Buffer对象的函数。它可以在Node-API模块中创建一个新的Buffer对象，并将指定的数据复制到该Buffer对象中。
cpp部分代码
#include <string>\n#include \"hilog/log.h\"\n#include \"napi/native_api.h\"\n\nstatic napi_value CreateBufferCopy(napi_env env, napi_callback_info info)\n{\n    // 要copy的内容\n    std::string str(\"CreateBufferCopy\");\n    napi_value buffer = nullptr;\n    // 调用napi_create_buffer_copy接口创建buffer并将str的内容copy到buffer\n    void* resultData = nullptr;\n    napi_create_buffer_copy(env, str.size(), str.data(), &resultData, &buffer);\n    OH_LOG_INFO(LOG_APP, \"Node-API resultData is : %{public}s.\", resultData);\n    return buffer;\n}
接口声明
// index.d.ts\nexport const createBufferCopy: () => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_create_buffer_copy: %{public}s', testNapi.createBufferCopy().toString());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_create_buffer_copy error');\n}
[h2]napi_create_external_buffer
当希望在ArkTS中使用现有的Node-API模块内存块，而不需要额外的拷贝时，可以使用napi_create_external_buffer。这将允许ArkTS层直接访问并操作该内存，避免额外的内存分配和拷贝操作。
cpp部分代码
#include <malloc.h>\n#include <string>\n#include \"napi/native_api.h\"\n\n// 回调函数，用于释放内存\nvoid FinalizeCallback(napi_env env, void *data, void *hint)\n{\n    if (data == nullptr) {\n        return;\n    }\n    free(data);\n    data = nullptr;\n}\n\nstatic napi_value CreateExternalBuffer(napi_env env, napi_callback_info info)\n{\n    // 创建一个字符串\n    std::string str(\"CreateExternalBuffer\");\n    // 在堆上分配内存，大小为字符串的长度\n    void* data = malloc(str.size());\n    // 将字符串复制到分配的内存中\n    strcpy((char *)(data), (char*)(str.data()));\n    // 使用napi_create_external_buffer接口创建并获取一个指定大小buffer\n    napi_value buffer = nullptr;\n    napi_create_external_buffer(env, str.size(), data, FinalizeCallback, nullptr, &buffer);\n    return buffer;\n}
接口声明
// index.d.ts\nexport const createExternalBuffer: () => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_create_external_buffer: %{public}s', testNapi.createExternalBuffer()\n    .toString());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_create_external_buffer error');\n}
[h2]napi_get_buffer_info
在ArkTS中需要对Buffer对象中的数据执行特定的操作时，可以使用此接口来获取指向数据的指针和数据长度。这样可以在Node-API模块直接对数据进行操作，而无需进行数据的拷贝。
cpp部分代码
#include <string>\n#include \"napi/native_api.h\"\n\nstatic napi_value GetBufferInfo(napi_env env, napi_callback_info info)\n{\n    // 创建一个字符串\n    std::string str(\"GetBufferInfo\");\n    napi_value buffer = nullptr;\n    void *bufferPtr = nullptr;\n    size_t bufferSize = str.size();\n    napi_create_buffer(env, bufferSize, &bufferPtr, &buffer);\n    strcpy((char *)bufferPtr, str.data());\n\n    // 获取Buffer的信息\n    void *tmpBufferPtr = nullptr;\n    size_t bufferLength = 0;\n    napi_get_buffer_info(env, buffer, &tmpBufferPtr, &bufferLength);\n\n    // 创建一个新的ArkTS字符串来保存Buffer的内容并返出去\n    napi_value returnValue = nullptr;\n    napi_create_string_utf8(env, (char*)tmpBufferPtr, bufferLength, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const getBufferInfo: () => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_get_buffer_info: %{public}s', testNapi.getBufferInfo().toString());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_get_buffer_info error');\n}
[h2]napi_is_buffer
判断给定ArkTS value是否为Buffer对象。
cpp部分代码
#include <string>\n#include \"napi/native_api.h\"\n\nstatic napi_value IsBuffer(napi_env env, napi_callback_info info)\n{\n    // 创建一个Buffer对象\n    std::string str = \"buffer\";\n    napi_value buffer = nullptr;\n    napi_create_buffer(env, strlen(str.data()), (void **)(str.data()), &buffer);\n\n    // 调用napi_is_buffer接口判断创建的对象是否为buffer\n    bool result = false;\n    napi_is_buffer(env, buffer, &result);\n    // 将结果返回出去\n    napi_value returnValue = nullptr;\n    napi_get_boolean(env, result, &returnValue);\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const isBuffer: () => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_buffer: %{public}s', JSON.stringify(testNapi.isBuffer()));\n} catch (error) {\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_buffer error');\n}
[h2]napi_create_external_arraybuffer
分配一个附加有外部数据的ArkTS ArrayBuffer。
cpp部分代码
#include \"napi/native_api.h\"\n\ntypedef struct {\n    uint8_t *data;\n    size_t length;\n} BufferData;\n\nvoid FinalizeCallback(napi_env env, void *finalize_data, void *finalize_hint)\n{\n    // 获取终结时的数据\n    BufferData *bufferData = static_cast<BufferData *>(finalize_data);\n\n    // 执行清理操作，比如释放资源\n    delete[] bufferData->data;\n    delete bufferData;\n}\n\nnapi_value CreateExternalArraybuffer(napi_env env, napi_callback_info info)\n{\n    // 创建一个有五个元素的C++数组\n    uint8_t *dataArray = new uint8_t[5]{1, 2, 3, 4, 5};\n    napi_value externalBuffer = nullptr;\n    BufferData *bufferData = new BufferData{dataArray, 5};\n\n    // 使用napi_create_external_arraybuffer创建一个外部Array Buffer对象，并指定终结回调函数\n    napi_status status =\n        napi_create_external_arraybuffer(env, dataArray, 5, FinalizeCallback, bufferData, &externalBuffer);\n    if (status != napi_ok) {\n        // 处理错误\n        napi_throw_error(env, nullptr, \"Node-API napi_create_external_arraybuffer fail\");\n        return nullptr;\n    }\n    napi_value outputArray;\n    // 使用napi_create_typedarray创建一个Array对象，并将externalBuffer对象作为参数传入\n    status = napi_create_typedarray(env, napi_int8_array, 5, externalBuffer, 0, &outputArray);\n    if (status != napi_ok) {\n        // 处理错误\n        napi_throw_error(env, nullptr, \"Node-API napi_create_typedarray fail\");\n        return nullptr;\n    }\n    return outputArray;\n}
接口声明
// index.d.ts\nexport const createExternalArraybuffer: () => ArrayBuffer | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nhilog.info(0x0000, 'testTag', 'Node-API createExternalArraybuffer: %{public}s',\n           JSON.stringify(testNapi.createExternalArraybuffer()));
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
