USB DDK开发指导
场景介绍
USB DDK（USB Driver Develop Kit）是为开发者提供的USB驱动程序开发套件，支持开发者基于用户态，在应用层开发USB设备驱动。提供了一系列主机侧访问设备的接口，包括主机侧打开和关闭接口、管道同步异步读写通信、控制传输、中断传输等。
约束与限制
 USB DDK开放API支持USB接口非标外设扩展驱动开发场景。 USB DDK开放API使用范围内仅允许DriverExtensionAbilit生命周期内使用。 使用USB DDK开放API需要在module.json5中声明匹配的ACL权限，例如ohos.permission.ACCESS_DDK_USB。 
接口说明
详细的接口说明请参考USB DDK。
开发步骤
以下步骤描述了如何使用 USB DDK开发USB驱动：
添加动态链接库
CMakeLists.txt中添加以下lib。
libusb_ndk.z.so
头文件
#include <usb/usb_ddk_api.h>\n#include <usb/usb_ddk_types.h>
 获取设备描述符。 使用 usb_ddk_api.h 的 OH_Usb_Init 接口初始化DDK，并使用 OH_Usb_GetDeviceDescriptor获取到设备描述符。 // 初始化USB DDK\nOH_Usb_Init();\nstruct UsbDeviceDescriptor devDesc;\nuint64_t deviceId = 0;\n// 获取设备描述符\nOH_Usb_GetDeviceDescriptor(deviceId, &devDesc); 获取配置描述符及声明接口。 使用 usb_ddk_api.h 的 OH_Usb_GetConfigDescriptor 接口获取配置描述符 config，并使用 OH_Usb_ClaimInterface 声明\"认领\"接口。 struct UsbDdkConfigDescriptor *config = nullptr;\n// 获取配置描述符\nOH_Usb_GetConfigDescriptor(deviceId, 1, &config);\n// 根据配置描述符,找到所需要通信的interfaceIndex\nuint8_t interfaceIndex = 0;\n// 声明接口\nuint64_t interfaceHandle = 0;\nOH_Usb_ClaimInterface(deviceId, interfaceIndex, &interfaceHandle);\n// 释放配置描述符\nOH_Usb_FreeConfigDescriptor(config); 获取当前激活接口的备用设置及激活备用设置。 使用 usb_ddk_api.h 的 OH_Usb_GetCurrentInterfaceSetting 获取备用设置，并使用 OH_Usb_SelectInterfaceSetting 激活备用设置。 uint8_t settingIndex = 0;\n// 接口获取备用设置\nOH_Usb_GetCurrentInterfaceSetting(interfaceHandle, &settingIndex);\n\n// 激活备用设置\nOH_Usb_SelectInterfaceSetting(interfaceHandle, &settingIndex); 发送控制读请求、发送控制写请求。 使用 usb_ddk_api.h 的OH_Usb_SendControlReadRequest发送控制读请求，或者使用OH_Usb_SendControlWriteRequest发送控制写请求。     // 超时时间，设置为1s;\nuint32_t timeout = 1000;\n\nstruct UsbControlRequestSetup setupRead;\nsetupRead.bmRequestType\t= 0x80;\nsetupRead.bRequest = 0x08;\nsetupRead.wValue = 0;\nsetupRead.wIndex = 0;\nsetupRead.wLength = 0x01;\nuint8_t dataRead[256] = {0};\nuint32_t dataReadLen = 256;\n// 发送控制读请求\nOH_Usb_SendControlReadRequest(interfaceHandle, &setupRead, timeout, dataRead, &dataReadLen);\n\nstruct UsbControlRequestSetup setupWrite;\nsetupWrite.bmRequestType = 0;\nsetupWrite.bRequest = 0x09;\nsetupWrite.wValue = 1;\nsetupWrite.wIndex = 0;\nsetupWrite.wLength = 0;\nuint8_t dataWrite[256] = {0};\nuint32_t dataWriteLen = 256;\n// 发送控制写请求\nOH_Usb_SendControlWriteRequest(interfaceHandle, &setupWrite, timeout, dataWrite, &dataWriteLen); 创建内存映射缓冲区及发送请求。 使用 usb_ddk_api.h 的OH_Usb_CreateDeviceMemMap接口创建内存映射缓冲区devMmap，并使用OH_Usb_SendPipeRequest发送请求。 struct UsbDeviceMemMap *devMmap = nullptr;\n// 创建用于存放数据的缓冲区\nsize_t bufferLen = 10;\nOH_Usb_CreateDeviceMemMap(deviceId, bufferLen, &devMmap);\nstruct UsbRequestPipe pipe;\npipe.interfaceHandle = interfaceHandle;\n// 根据配置描述符找到所要通信的端点\npipe.endpoint = 128;\npipe.timeout = UINT32_MAX;\n// 发送请求\nOH_Usb_SendPipeRequest(&pipe, devMmap); 释放资源。 在所有请求处理完毕，程序退出前，使用 usb_ddk_api.h 的 OH_Usb_DestroyDeviceMemMap 接口销毁缓冲区。使用OH_Usb_ReleaseInterface释放接口。使用OH_Usb_Release释放USB DDK。 // 销毁缓冲区\nOH_Usb_DestroyDeviceMemMap(devMmap);\n// 释放接口\nOH_Usb_ReleaseInterface(interfaceHandle);\n// 释放USB DDK\nOH_Usb_Release(); 
