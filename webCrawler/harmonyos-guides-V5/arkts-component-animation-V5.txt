组件动画
ArkUI为组件提供了通用的属性动画和转场动画能力的同时，还为一些组件提供了默认的动画效果。例如，List的滑动动效、Button的点击动效，是组件自带的默认动画效果。在组件默认动画效果的基础上，开发者还可以通过属性动画和转场动画对容器组件内的子组件动效进行定制。
使用组件默认动画
组件默认动效具备以下功能：
 提示用户当前状态，例如用户点击Button组件时，Button组件默认变灰，用户即确定完成选中操作。 提升界面精致程度和生动性。 减少开发者工作量，例如列表滑动组件自带滑动动效，开发者直接调用即可。 
更多效果，可以参考组件说明。
示例代码和效果如下。
@Entry\n@Component\nstruct ComponentDemo {\n  build() {\n    Row() {\n      Checkbox({ name: 'checkbox1', group: 'checkboxGroup' })\n        .select(true)\n        .shape(CheckBoxShape.CIRCLE)\n        .size({ width: 50, height: 50 })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}
打造组件定制化动效
部分组件支持通过属性动画和转场动画自定义组件子Item的动效，实现定制化动画效果。例如，Scroll组件中可对各个子组件在滑动时的动画效果进行定制。
 在滑动或者点击操作时通过改变各个Scroll子组件的仿射属性来实现各种效果。 如果要在滑动过程中定制动效，可在滑动回调onScroll中监控滑动距离，并计算每个组件的仿射属性。也可以自己定义手势，通过手势监控位置，手动调用ScrollTo改变滑动位置。 在滑动回调onScrollStop或手势结束回调中对滑动的最终位置进行微调。 
定制Scroll组件滑动动效示例代码和效果如下。
import { curves, window, display, mediaquery } from '@kit.ArkUI';\nimport { UIAbility } from '@kit.AbilityKit';\n\nexport default class GlobalContext extends AppStorage{\n  static mainWin: window.Window|undefined = undefined;\n  static mainWindowSize:window.Size|undefined = undefined;\n}\n/**\n * 窗口、屏幕相关信息管理类\n */\nexport class WindowManager {\n  private static instance: WindowManager|null = null;\n  private displayInfo: display.Display|null = null;\n  private orientationListener = mediaquery.matchMediaSync('(orientation: landscape)');\n\n  constructor() {\n    this.orientationListener.on('change', (mediaQueryResult: mediaquery.MediaQueryResult) => { this.onPortrait(mediaQueryResult) })\n    this.loadDisplayInfo()\n  }\n\n  /**\n   * 设置主window窗口\n   * @param win 当前app窗口\n   */\n  setMainWin(win: window.Window) {\n    if (win == null) {\n      return\n    }\n    GlobalContext.mainWin = win;\n    win.on(\"windowSizeChange\", (data: window.Size) => {\n      if (GlobalContext.mainWindowSize == undefined || GlobalContext.mainWindowSize == null) {\n        GlobalContext.mainWindowSize = data;\n      } else {\n        if (GlobalContext.mainWindowSize.width == data.width && GlobalContext.mainWindowSize.height == data.height) {\n          return\n        }\n        GlobalContext.mainWindowSize = data;\n      }\n\n      let winWidth = this.getMainWindowWidth();\n      AppStorage.setOrCreate<number>('mainWinWidth', winWidth)\n      let winHeight = this.getMainWindowHeight();\n      AppStorage.setOrCreate<number>('mainWinHeight', winHeight)\n      let context:UIAbility = new UIAbility()\n      context.context.eventHub.emit(\"windowSizeChange\", winWidth, winHeight)\n    })\n  }\n\n  static getInstance(): WindowManager {\n    if (WindowManager.instance == null) {\n      WindowManager.instance = new WindowManager();\n    }\n    return WindowManager.instance\n  }\n\n  private onPortrait(mediaQueryResult: mediaquery.MediaQueryResult) {\n    if (mediaQueryResult.matches == AppStorage.get<boolean>('isLandscape')) {\n      return\n    }\n    AppStorage.setOrCreate<boolean>('isLandscape', mediaQueryResult.matches)\n    this.loadDisplayInfo()\n  }\n\n  /**\n   * 切换屏幕方向\n   * @param ori 常量枚举值：window.Orientation\n   */\n  changeOrientation(ori: window.Orientation) {\n    if (GlobalContext.mainWin != null) {\n      GlobalContext.mainWin.setPreferredOrientation(ori)\n    }\n  }\n\n  private loadDisplayInfo() {\n    this.displayInfo = display.getDefaultDisplaySync()\n    AppStorage.setOrCreate<number>('displayWidth', this.getDisplayWidth())\n    AppStorage.setOrCreate<number>('displayHeight', this.getDisplayHeight())\n  }\n\n  /**\n   * 获取main窗口宽度，单位vp\n   */\n  getMainWindowWidth(): number {\n    return GlobalContext.mainWindowSize != null ? px2vp(GlobalContext.mainWindowSize.width) : 0\n  }\n\n  /**\n   * 获取main窗口高度，单位vp\n   */\n  getMainWindowHeight(): number {\n    return GlobalContext.mainWindowSize != null ? px2vp(GlobalContext.mainWindowSize.height) : 0\n  }\n\n  /**\n   * 获取屏幕宽度，单位vp\n   */\n  getDisplayWidth(): number {\n    return this.displayInfo != null ? px2vp(this.displayInfo.width) : 0\n  }\n\n  /**\n   * 获取屏幕高度，单位vp\n   */\n  getDisplayHeight(): number {\n    return this.displayInfo != null ? px2vp(this.displayInfo.height) : 0\n  }\n\n  /**\n   * 释放资源\n   */\n  release() {\n    if (this.orientationListener) {\n      this.orientationListener.off('change', (mediaQueryResult: mediaquery.MediaQueryResult) => { this.onPortrait(mediaQueryResult)})\n    }\n    if (GlobalContext.mainWin != null) {\n      GlobalContext.mainWin.off('windowSizeChange')\n    }\n    WindowManager.instance = null;\n  }\n}\n\n/**\n * 封装任务卡片信息数据类\n */\nexport class TaskData {\n  bgColor: Color | string | Resource = Color.White;\n  index: number = 0;\n  taskInfo: string = 'music';\n\n  constructor(bgColor: Color | string | Resource, index: number, taskInfo: string) {\n    this.bgColor = bgColor;\n    this.index = index;\n    this.taskInfo = taskInfo;\n  }\n}\n\nexport const taskDataArr: Array<TaskData> =\n  [\n    new TaskData('#317AF7', 0, 'music'),\n    new TaskData('#D94838', 1, 'mall'),\n    new TaskData('#DB6B42 ', 2, 'photos'),\n    new TaskData('#5BA854', 3, 'setting'),\n    new TaskData('#317AF7', 4, 'call'),\n    new TaskData('#D94838', 5, 'music'),\n    new TaskData('#DB6B42', 6, 'mall'),\n    new TaskData('#5BA854', 7, 'photos'),\n    new TaskData('#D94838', 8, 'setting'),\n    new TaskData('#DB6B42', 9, 'call'),\n    new TaskData('#5BA854', 10, 'music')\n\n  ];\n\n@Entry\n@Component\nexport struct TaskSwitchMainPage {\n  displayWidth: number = WindowManager.getInstance().getDisplayWidth();\n  scroller: Scroller = new Scroller();\n  cardSpace: number = 0; // 卡片间距\n  cardWidth: number = this.displayWidth / 2 - this.cardSpace / 2; // 卡片宽度\n  cardHeight: number = 400; // 卡片高度\n  cardPosition: Array<number> = []; // 卡片初始位置\n  clickIndex: boolean = false;\n  @State taskViewOffsetX: number = 0;\n  @State cardOffset: number = this.displayWidth / 4;\n  lastCardOffset: number = this.cardOffset;\n  startTime: number|undefined=undefined\n\n  // 每个卡片初始位置\n  aboutToAppear() {\n    for (let i = 0; i < taskDataArr.length; i++) {\n      this.cardPosition[i] = i * (this.cardWidth + this.cardSpace);\n    }\n  }\n\n  // 每个卡片位置\n  getProgress(index: number): number {\n    let progress = (this.cardOffset + this.cardPosition[index] - this.taskViewOffsetX + this.cardWidth / 2) / this.displayWidth;\n    return progress\n  }\n\n  build() {\n    Stack({ alignContent: Alignment.Bottom }) {\n      // 背景\n      Column()\n        .width('100%')\n        .height('100%')\n        .backgroundColor(0xF0F0F0)\n\n      // 滑动组件\n      Scroll(this.scroller) {\n        Row({ space: this.cardSpace }) {\n          ForEach(taskDataArr, (item:TaskData, index) => {\n            Column()\n              .width(this.cardWidth)\n              .height(this.cardHeight)\n              .backgroundColor(item.bgColor)\n              .borderStyle(BorderStyle.Solid)\n              .borderWidth(1)\n              .borderColor(0xAFEEEE)\n              .borderRadius(15)\n                // 计算子组件的仿射属性\n              .scale((this.getProgress(index) >= 0.4 && this.getProgress(index) <= 0.6) ?\n                {\n                  x: 1.1 - Math.abs(0.5 - this.getProgress(index)),\n                  y: 1.1 - Math.abs(0.5 - this.getProgress(index))\n                } :\n                { x: 1, y: 1 })\n              .animation({ curve: Curve.Smooth })\n                // 滑动动画\n              .translate({ x: this.cardOffset })\n              .animation({ curve: curves.springMotion() })\n              .zIndex((this.getProgress(index) >= 0.4 && this.getProgress(index) <= 0.6) ? 2 : 1)\n          }, (item:TaskData) => item.toString())\n        }\n        .width((this.cardWidth + this.cardSpace) * (taskDataArr.length + 1))\n        .height('100%')\n      }\n      .gesture(\n        GestureGroup(GestureMode.Parallel,\n          PanGesture({ direction: PanDirection.Horizontal, distance: 5 })\n            .onActionStart((event: GestureEvent|undefined) => {\n              if(event){\n                this.startTime = event.timestamp;\n              }\n            })\n            .onActionUpdate((event: GestureEvent|undefined) => {\n              if(event){\n                this.cardOffset = this.lastCardOffset + event.offsetX;\n              }\n            })\n            .onActionEnd((event: GestureEvent|undefined) => {\n              if(event){\n                let time = 0\n                if(this.startTime){\n                  time = event.timestamp - this.startTime;\n                }\n                let speed = event.offsetX / (time / 1000000000);\n                let moveX = Math.pow(speed, 2) / 7000 * (speed > 0 ? 1 : -1);\n\n                this.cardOffset += moveX;\n                // 左滑大于最右侧位置\n                let cardOffsetMax = -(taskDataArr.length - 1) * (this.displayWidth / 2);\n                if (this.cardOffset < cardOffsetMax) {\n                  this.cardOffset = cardOffsetMax;\n                }\n                // 右滑大于最左侧位置\n                if (this.cardOffset > this.displayWidth / 4) {\n                  this.cardOffset = this.displayWidth / 4;\n                }\n\n                // 左右滑动距离不满足/满足切换关系时，补位/退回\n                let remainMargin = this.cardOffset % (this.displayWidth / 2);\n                if (remainMargin < 0) {\n                  remainMargin = this.cardOffset % (this.displayWidth / 2) + this.displayWidth / 2;\n                }\n                if (remainMargin <= this.displayWidth / 4) {\n                  this.cardOffset += this.displayWidth / 4 - remainMargin;\n                } else {\n                  this.cardOffset -= this.displayWidth / 4 - (this.displayWidth / 2 - remainMargin);\n                }\n\n                // 记录本次滑动偏移量\n                this.lastCardOffset = this.cardOffset;\n              }\n            })\n        ), GestureMask.IgnoreInternal)\n      .scrollable(ScrollDirection.Horizontal)\n      .scrollBar(BarState.Off)\n\n      // 滑动到首尾位置\n      Button('Move to first/last')\n        .backgroundColor(0x888888)\n        .margin({ bottom: 30 })\n        .onClick(() => {\n          this.clickIndex = !this.clickIndex;\n\n          if (this.clickIndex) {\n            this.cardOffset = this.displayWidth / 4;\n          } else {\n            this.cardOffset = this.displayWidth / 4 - (taskDataArr.length - 1) * this.displayWidth / 2;\n          }\n          this.lastCardOffset = this.cardOffset;\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}
示例代码
 动效案例合集 
