插屏广告
场景介绍
插屏广告是一种在应用开启、暂停或退出时以全屏或半屏的形式弹出的广告形式，展示时机巧妙避开用户对应用的正常体验，尺寸大，曝光效果好。
接口说明
接口名
描述
loadAd(adParam: AdRequestParams, adOptions: AdOptions, listener: AdLoadListener): void
请求单广告位广告，通过AdRequestParams、AdOptions进行广告请求参数设置，通过AdLoadListener监听广告请求回调。
showAd(ad: Advertisement, options: AdDisplayOptions, context?: common.UIAbilityContext): void
展示广告，通过AdDisplayOptions进行广告展示参数设置。
为了保证广告能正确展示，该接口必须和请求广告接口配套使用。
开发步骤
获取OAID。如果想要为用户更精准的推送广告，可以在请求参数AdRequestParams中添加oaid属性。 如何获取OAID参见获取OAID信息。  使用以下示例中提供的测试广告位必须先获取OAID信息。  请求单广告位广告。需要先创建一个AdLoader对象，通过AdLoader的loadAd方法请求广告，最后通过AdLoadListener来监听广告的加载状态。 请求广告关键参数如下所示： 请求广告参数名  类型  必填  说明    adType  number  是  请求广告类型，插屏广告类型为12。   adId  string  是  广告位ID。 如果仅调测广告，可使用测试广告位ID：testb4znbuh3n2。如果要接入正式广告，则需要申请正式的广告位ID。可在应用发布前进入流量变现官网，点击“开始变现”，登录鲸鸿动能媒体服务平台进行申请，具体操作详情请参见展示位创建。   oaid  string  否  开放匿名设备标识符，用于精准推送广告。不填无法获取到个性化广告。     示例代码如下所示： import { advertising, identifier } from '@kit.AdsKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct Index {\n  private ads: Array<advertising.Advertisement> = [];\n  private context = getContext(this) as common.UIAbilityContext;\n  private oaid: string = '';\n\n  aboutToAppear() {\n    try {\n      // 使用Promise回调方式获取OAID\n      identifier.getOAID().then((data) => {\n        this.oaid = data;\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\n      }).catch((error: BusinessError) => {\n        hilog.error(0x0000, 'testTag', '%{public}s', `Failed to get adsIdentifierInfo, message: ${error.message}`);\n      })\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Row() {\n        Button('requestAd').onClick(() => {\n          let load: advertising.AdLoader = new advertising.AdLoader(this.context);\n          this.requestAd(load);\n        }).width('45%')\n      }\n    }\n  }\n\n  private requestAd(adLoader: advertising.AdLoader): void {\n    const adRequestParam: advertising.AdRequestParams = {\n      // 广告类型：插屏广告\n      adType: 12,\n      // 'testb4znbuh3n2'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n      adId: 'testb4znbuh3n2',\n      // 开放匿名设备标识符\n      oaid: this.oaid\n    };\n    const adOption: advertising.AdOptions = {\n      // 设置是否请求非个性化广告\n      nonPersonalizedAd: 0,\n      // 是否允许流量下载0：不允许，1：允许，不设置以广告主设置为准\n      allowMobileTraffic: 0,\n      // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\n      tagForChildProtection: -1,\n      // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\n      tagForUnderAgeOfPromise: -1,\n      // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\n      adContentClassification: 'A'\n    };\n    const adLoaderListener: advertising.AdLoadListener = {\n      onAdLoadFailure: (errorCode: number, errorMsg: string) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to request ad, message: ${errorMsg}, error code: ${errorCode}`);\n      },\n      onAdLoadSuccess: (ads: Array<advertising.Advertisement>) => {\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting ad!');\n        this.ads = [];\n        this.ads.push(...ads);\n      },\n    };\n    adLoader.loadAd(adRequestParam, adOption, adLoaderListener);\n  }\n} 事件订阅。开发者需要在App中订阅com.huawei.hms.pps.action.PPS_INTERSTITIAL_STATUS_CHANGED事件来监听插屏广告页面变化并接收插屏信息。示例代码中的订阅方法registerPPSReceiver()需要在每次展示广告前调用 。 在订阅到公共事件后，可以从CommonEventData的parameters参数中使用\"interstitial_ad_status\"作为key值获取插屏广告页面变化状态。 示例代码如下所示： import { commonEventManager, BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst KEY_INTERSTITIAL_STATUS = 'interstitial_ad_status';\n\nexport class InterstitialAdStatusHandler {\n  // 用于保存创建成功的订阅者对象，后续使用其完成订阅及退订的动作\n  private subscriber: commonEventManager.CommonEventSubscriber | null = null;\n\n  // 订阅方法，需要在每次展示广告前调用\n  public registerPPSReceiver(): void {\n    if (this.subscriber) {\n      this.unRegisterPPSReceiver();\n    }\n    // 订阅者信息\n    const subscribeInfo: commonEventManager.CommonEventSubscribeInfo = {\n      events: ['com.huawei.hms.pps.action.PPS_INTERSTITIAL_STATUS_CHANGED'],\n      publisherBundleName: 'com.huawei.hms.adsservice'\n    };\n    // 创建订阅者回调\n    commonEventManager.createSubscriber(subscribeInfo,\n      (err: BusinessError, commonEventSubscriber: commonEventManager.CommonEventSubscriber) => {\n        if (err) {\n          hilog.error(0x0000, 'testTag', '%{public}s', `CreateSubscriber error, ${err.code}, message: ${err.message}}`);\n          return;\n        }\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in creating subscriber');\n        this.subscriber = commonEventSubscriber;\n        // 订阅公共事件回调\n        if (!this.subscriber) {\n          hilog.warn(0x0000, 'testTag', '%{public}s', 'Need to create subscriber');\n          return;\n        }\n        commonEventManager.subscribe(this.subscriber,\n          (err: BusinessError, commonEventData: commonEventManager.CommonEventData) => {\n            if (err) {\n              hilog.error(0x0000, 'testTag', '%{public}s', `Subscribe error, ${err.code}, message: ${err.message}`);\n            } else {\n              // 订阅者成功接收到公共事件\n              hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded subscribing data');\n              // 获取插屏广告页面变化状态\n              const status: string = commonEventData?.parameters?.[KEY_INTERSTITIAL_STATUS];\n              switch (status) {\n                case AdStatus.AD_OPEN:\n                  hilog.info(0x0000, 'testTag', '%{public}s', 'onAdOpen');\n                  break;\n                case AdStatus.AD_CLICKED:\n                  hilog.info(0x0000, 'testTag', '%{public}s', 'onAdClick');\n                  break;\n                case AdStatus.AD_CLOSED:\n                  hilog.info(0x0000, 'testTag', '%{public}s', 'onAdClose');\n                  this.unRegisterPPSReceiver();\n                  break;\n                case AdStatus.AD_VIDEO_START:\n                  hilog.info(0x0000, 'testTag', '%{public}s', 'onAdVideoStart');\n                  break;\n                case AdStatus.AD_COMPLETED:\n                  hilog.info(0x0000, 'testTag', '%{public}s', 'onAdCompleted');\n                  break;\n                default:\n                  break;\n              }\n            }\n          });\n      });\n  }\n\n  // 取消订阅\n  public unRegisterPPSReceiver(): void {\n    commonEventManager.unsubscribe(this.subscriber, (err: BusinessError) => {\n      if (err) {\n        hilog.error(0x0000, 'testTag', '%{public}s', `Unsubscribe error, ${err.code}, message: ${err.message}}`);\n      } else {\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in unsubscribing');\n        this.subscriber = null;\n      }\n    });\n  }\n}\n\nenum AdStatus {\n  AD_OPEN = 'onAdOpen',\n  AD_CLICKED = 'onAdClick',\n  AD_CLOSED = 'onAdClose',\n  AD_VIDEO_START = 'onVideoPlayBegin',\n  AD_COMPLETED = 'onVideoPlayEnd'\n} 展示广告。ads为步骤2请求到的广告信息，调用showAd方法来展示广告。示例代码如下所示： import { advertising } from '@kit.AdsKit';\nimport { common } from '@kit.AbilityKit';\n\n@Entry\n@Component\nstruct Index {\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  // 步骤2中请求到的广告内容\n  private ads: Array<advertising.Advertisement> = [];\n  private displayOptions: advertising.AdDisplayOptions = {\n    // 插屏广告视频播放是否静音\n    mute: true\n  };\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Row() {\n        Button('showAd').onClick(() => {\n          this.showAd();\n        }).width('45%')\n      }\n    }\n  }\n\n  private showAd() {\n    // 请在此处自行增加步骤3中的，注册插屏广告状态监听器\n    // ...\n\n    // 此处ads[0]表示请求到的第一个广告，用户根据实际情况选择\n    advertising.showAd(this.ads[0], this.displayOptions, this.context);\n  }\n} 
