证书对象的创建、解析和校验
以校验证书有效性为例，完成证书对象的创建、解析和校验。
开发步骤
 导入证书算法库框架模块。 import { cert } from '@kit.DeviceCertificateKit'; 基于已有的X509证书数据，调用cert.createX509Cert创建证书对象。 解析证书的字段信息。 此处以获取证书版本、证书序列号为例，更多字段信息获取接口请查看API参考文档。 调用X509Cert.getPublicKey获取证书中的公钥，并调用X509Cert.verify校验签名。 示例为自验签场景，因此获取的是本证书中的公钥。应用须结合自身场景获取用于验签的公钥。 调用X509Cert.checkValidityWithDate校验证书有效期。 入参date用于确认此日期是否在X509证书有效期内。 
import { cert } from '@kit.DeviceCertificateKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { util } from '@kit.ArkTS';\n\n// 此处仅为示例的证书二进制数据，需根据业务的不同对证书数据进行赋值\nlet certData = '-----BEGIN CERTIFICATE-----\\n' +\n  'MIIBLzCB1QIUO/QDVJwZLIpeJyPjyTvE43xvE5cwCgYIKoZIzj0EAwIwGjEYMBYG\\n' +\n  'A1UEAwwPRXhhbXBsZSBSb290IENBMB4XDTIzMDkwNDExMjAxOVoXDTI2MDUzMDEx\\n' +\n  'MjAxOVowGjEYMBYGA1UEAwwPRXhhbXBsZSBSb290IENBMFkwEwYHKoZIzj0CAQYI\\n' +\n  'KoZIzj0DAQcDQgAEHjG74yMIueO7z3T+dyuEIrhxTg2fqgeNB3SGfsIXlsiUfLTa\\n' +\n  'tUsU0i/sePnrKglj2H8Abbx9PK0tsW/VgqwDIDAKBggqhkjOPQQDAgNJADBGAiEA\\n' +\n  '0ce/fvA4tckNZeB865aOApKXKlBjiRlaiuq5mEEqvNACIQDPD9WyC21MXqPBuRUf\\n' +\n  'BetUokslUfjT6+s/X4ByaxycAA==\\n' +\n  '-----END CERTIFICATE-----\\n';\n\n// 证书示例\nfunction certSample(): void {\n  let textEncoder = new util.TextEncoder();\n  let encodingBlob: cert.EncodingBlob = {\n    // 将证书数据从string类型转换成Unit8Array\n    data: textEncoder.encodeInto(certData),\n    // 证书格式，仅支持PEM和DER。在此示例中，证书为PEM格式\n    encodingFormat: cert.EncodingFormat.FORMAT_PEM\n  };\n\n  // 创建X509Cert实例\n  cert.createX509Cert(encodingBlob, (err, x509Cert) => {\n    if (err != null) {\n      // 创建X509Cert实例失败\n      console.error(`createX509Cert failed, errCode:${err.code}, errMsg:${err.message}`);\n      return;\n    }\n    // X509Cert实例创建成功\n    console.log('createX509Cert success');\n\n    // 获取证书版本\n    let version = x509Cert.getVersion();\n    let serial = x509Cert.getCertSerialNumber();\n    console.log(`X509 version: ${version} , X509 serial:${serial}`);\n\n    // 使用上级证书对象的getPublicKey()方法或本（自签名）证书对象获取公钥对象\n    try {\n      let pubKey = x509Cert.getPublicKey();\n      // 验证证书签名\n      x509Cert.verify(pubKey, (err, data) => {\n        if (err == null) {\n          // 签名验证成功\n          console.log('verify success');\n        } else {\n          // 签名验证失败\n          console.error(`verify failed, errCode: ${err.code} , errMsg:${err.message}`);\n        }\n      });\n    } catch (error) {\n      let e: BusinessError = error as BusinessError;\n      console.error(`getPublicKey failed, errCode: ${e.code} , errMsg:${e.message}`);\n    }\n\n    // 用一个字符串代表时间\n    let date = '20230930000001Z';\n\n    // 验证证书的有效期\n    try {\n      x509Cert.checkValidityWithDate(date);\n    } catch (error) {\n      let e: BusinessError = error as BusinessError;\n      console.error(`checkValidityWithDate failed, errCode: ${e.code}, errMsg:${e.message}`);\n    }\n  });\n}
示例代码
 证书算法库框架 
