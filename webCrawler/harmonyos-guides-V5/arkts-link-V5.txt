@Link装饰器：父子双向同步
子组件中被@Link装饰的变量与其父组件中对应的数据源建立双向数据绑定。
在阅读@Link文档前，建议开发者首先了解@State的基本用法。
从API version 9开始，该装饰器支持在ArkTS卡片中使用。
从API version 11开始，该装饰器支持在元服务中使用。
概述
@Link装饰的变量与其父组件中的数据源共享相同的值。
装饰器使用规则说明
双向同步。
父组件中的状态变量可以与子组件@Link建立双向同步，当其中一方改变时，另外一方能够感知到变化。
Object、class、string、number、boolean、enum类型，以及这些类型的数组。
支持Date类型。
API11及以上支持Map、Set类型。
支持ArkUI框架定义的联合类型Length、ResourceStr、ResourceColor类型。
类型必须被指定，且和双向绑定状态变量的类型相同。
支持类型的场景请参考观察变化。
不支持any。
API11及以上支持上述支持类型的联合类型，比如string | number, string | undefined 或者 ClassA | null，示例见Link支持联合类型实例。 
注意
当使用undefined和null的时候，建议显式指定类型，遵循TypeScript类型校验，比如：@Link a : string | undefined。
变量的传递/访问规则说明
必选。与父组件@State, @StorageLink和@Link 建立双向绑定。允许父组件中@State、@Link、@Prop、@Provide、@Consume、@ObjectLink、@StorageLink、@StorageProp、@LocalStorageLink和@LocalStorageProp装饰变量初始化子组件@Link。
从API version 9开始，@Link子组件从父组件初始化@State的语法为Comp({ aLink: this.aState })。同样Comp({aLink: $aState})也支持。
 图1 初始化规则图示  
观察变化和行为表现
[h2]观察变化
当装饰的数据类型为boolean、string、number类型时，可以同步观察到数值的变化，示例请参考简单类型和类对象类型的@Link。 当装饰的数据类型为class或者Object时，可以观察到赋值和属性赋值的变化，即Object.keys(observedObject)返回的所有属性，示例请参考简单类型和类对象类型的@Link。 当装饰的对象是array时，可以观察到数组添加、删除、更新数组单元的变化，示例请参考数组类型的@Link。 当装饰的对象是Date时，可以观察到Date整体的赋值，同时可通过调用Date的接口setFullYear, setMonth, setDate, setHours, setMinutes, setSeconds, setMilliseconds, setTime, setUTCFullYear, setUTCMonth, setUTCDate, setUTCHours, setUTCMinutes, setUTCSeconds, setUTCMilliseconds 更新Date的属性。 
@Component\nstruct DateComponent {\n  @Link selectedDate: Date;\n\n  build() {\n    Column() {\n      Button(`child increase the year by 1`).onClick(() => {\n        this.selectedDate.setFullYear(this.selectedDate.getFullYear() + 1)\n      })\n      Button('child update the new date')\n        .margin(10)\n        .onClick(() => {\n          this.selectedDate = new Date('2023-09-09')\n        })\n      DatePicker({\n        start: new Date('1970-1-1'),\n        end: new Date('2100-1-1'),\n        selected: this.selectedDate\n      })\n    }\n\n  }\n}\n\n@Entry\n@Component\nstruct ParentComponent {\n  @State parentSelectedDate: Date = new Date('2021-08-08');\n\n  build() {\n    Column() {\n      Button('parent increase the month by 1')\n        .margin(10)\n        .onClick(() => {\n          this.parentSelectedDate.setMonth(this.parentSelectedDate.getMonth() + 1)\n        })\n      Button('parent update the new date')\n        .margin(10)\n        .onClick(() => {\n          this.parentSelectedDate = new Date('2023-07-07')\n        })\n      DatePicker({\n        start: new Date('1970-1-1'),\n        end: new Date('2100-1-1'),\n        selected: this.parentSelectedDate\n      })\n\n      DateComponent({ selectedDate:this.parentSelectedDate })\n    }\n  }\n}
当装饰的变量是Map时，可以观察到Map整体的赋值，同时可通过调用Map的接口set, clear, delete 更新Map的值。详见装饰Map类型变量。 当装饰的变量是Set时，可以观察到Set整体的赋值，同时可通过调用Set的接口add, clear, delete 更新Set的值。详见装饰Set类型变量。 
[h2]框架行为
@Link装饰的变量和其所属的自定义组件共享生命周期。
为了了解@Link变量初始化和更新机制，有必要先了解父组件和拥有@Link变量的子组件的关系，初始渲染和双向更新的流程（以父组件为@State为例）。
初始渲染：执行父组件的build()函数后将创建子组件的新实例。初始化过程如下： 必须指定父组件中的@State变量，用于初始化子组件的@Link变量。子组件的@Link变量值与其父组件的数据源变量保持同步（双向数据同步）。父组件的@State状态变量包装类通过构造函数传给子组件，子组件的@Link包装类拿到父组件的@State的状态变量后，将当前@Link包装类this指针注册给父组件的@State变量。 @Link的数据源的更新：即父组件中状态变量更新，引起相关子组件的@Link的更新。处理步骤： 通过初始渲染的步骤可知，子组件@Link包装类把当前this指针注册给父组件。父组件@State变量变更后，会遍历更新所有依赖它的系统组件（elementid）和状态变量（比如@Link包装类）。通知@Link包装类更新后，子组件中所有依赖@Link状态变量的系统组件（elementId）都会被通知更新。以此实现父组件对子组件的状态数据同步。 @Link的更新：当子组件中@Link更新后，处理步骤如下（以父组件为@State为例）： @Link更新后，调用父组件的@State包装类的set方法，将更新后的数值同步回父组件。子组件@Link和父组件@State分别遍历依赖的系统组件，进行对应的UI的更新。以此实现子组件@Link同步回父组件@State。 
限制条件
@Link装饰器不能在@Entry装饰的自定义组件中使用。 @Link装饰的变量禁止本地初始化，否则编译期会报错。 
// 错误写法，编译报错\n@Link count: number = 10;\n\n// 正确写法\n@Link count: number;
@Link装饰的变量的类型要和数据源类型保持一致，否则框架会抛出运行时错误。
【反例】
class Info {\n  info: string = 'Hello';\n}\n\nclass Cousin {\n  name: string = 'Hello';\n}\n\n@Component\nstruct Child {\n  // 错误写法，@Link与@State数据源类型不一致\n  @Link test: Cousin;\n\n  build() {\n    Text(this.test.name)\n  }\n}\n\n@Entry\n@Component\nstruct LinkExample {\n  @State info: Info = new Info();\n\n  build() {\n    Column() {\n      // 错误写法，@Link与@State数据源类型不一致\n      Child({test: new Cousin()})\n    }\n  }\n}
【正例】
class Info {\n  info: string = 'Hello';\n}\n\n@Component\nstruct Child {\n  // 正确写法\n  @Link test: Info;\n\n  build() {\n    Text(this.test.info)\n  }\n}\n\n@Entry\n@Component\nstruct LinkExample {\n  @State info: Info = new Info();\n\n  build() {\n    Column() {\n      // 正确写法\n      Child({test: this.info})\n    }\n  }\n}
@Link装饰的变量仅能被状态变量初始化，不能用常量初始化，编译期会有warn告警，运行时会抛出is not callable运行时错误。
【反例】
class Info {\n  info: string = 'Hello';\n}\n\n@Component\nstruct Child {\n  @Link msg: string;\n  @Link info: string;\n\n  build() {\n    Text(this.msg + this.info)\n  }\n}\n\n@Entry\n@Component\nstruct LinkExample {\n  @State message: string = 'Hello';\n  @State info: Info = new Info();\n\n  build() {\n    Column() {\n      // 错误写法，常规变量不能初始化@Link\n      Child({msg: 'World', info: this.info.info})\n    }\n  }\n}
【正例】
class Info {\n  info: string = 'Hello';\n}\n\n@Component\nstruct Child {\n  @Link msg: string;\n  @Link info: Info;\n\n  build() {\n    Text(this.msg + this.info.info)\n  }\n}\n\n@Entry\n@Component\nstruct LinkExample {\n  @State message: string = 'Hello';\n  @State info: Info = new Info();\n\n  build() {\n    Column() {\n      // 正确写法\n      Child({msg: this.message, info: this.info})\n    }\n  }\n}
@Link不支持装饰Function类型的变量，框架会抛出运行时错误。
使用场景
[h2]简单类型和类对象类型的@Link
以下示例中，点击父组件ShufflingContainer中的“Parent View: Set yellowButton”和“Parent View: Set GreenButton”，可以从父组件将变化同步给子组件。
 1.点击子组件GreenButton和YellowButton中的Button，子组件会发生相应变化，将变化同步给父组件。因为@Link是双向同步，会将变化同步给@State。
 2.当点击父组件ShufflingContainer中的Button时，@State变化，也会同步给@Link，子组件也会发生对应的刷新。
class GreenButtonState {\n  width: number = 0;\n\n  constructor(width: number) {\n    this.width = width;\n  }\n}\n\n@Component\nstruct GreenButton {\n  @Link greenButtonState: GreenButtonState;\n\n  build() {\n    Button('Green Button')\n      .width(this.greenButtonState.width)\n      .height(40)\n      .backgroundColor('#64bb5c')\n      .fontColor('#FFFFFF，90%')\n      .onClick(() => {\n        if (this.greenButtonState.width < 700) {\n          // 更新class的属性，变化可以被观察到同步回父组件\n          this.greenButtonState.width += 60;\n        } else {\n          // 更新class，变化可以被观察到同步回父组件\n          this.greenButtonState = new GreenButtonState(180);\n        }\n      })\n  }\n}\n\n@Component\nstruct YellowButton {\n  @Link yellowButtonState: number;\n\n  build() {\n    Button('Yellow Button')\n      .width(this.yellowButtonState)\n      .height(40)\n      .backgroundColor('#f7ce00')\n      .fontColor('#FFFFFF，90%')\n      .onClick(() => {\n        // 子组件的简单类型可以同步回父组件\n        this.yellowButtonState += 40.0;\n      })\n  }\n}\n\n@Entry\n@Component\nstruct ShufflingContainer {\n  @State greenButtonState: GreenButtonState = new GreenButtonState(180);\n  @State yellowButtonProp: number = 180;\n\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center }) {\n        // 简单类型从父组件@State向子组件@Link数据同步\n        Button('Parent View: Set yellowButton')\n          .width(312)\n          .height(40)\n          .margin(12)\n          .fontColor('#FFFFFF，90%')\n          .onClick(() => {\n            this.yellowButtonProp = (this.yellowButtonProp < 700) ? this.yellowButtonProp + 40 : 100;\n          })\n        // class类型从父组件@State向子组件@Link数据同步\n        Button('Parent View: Set GreenButton')\n          .width(312)\n          .height(40)\n          .margin(12)\n          .fontColor('#FFFFFF，90%')\n          .onClick(() => {\n            this.greenButtonState.width = (this.greenButtonState.width < 700) ? this.greenButtonState.width + 100 : 100;\n          })\n        // class类型初始化@Link\n        GreenButton({ greenButtonState: $greenButtonState }).margin(12)\n        // 简单类型初始化@Link\n        YellowButton({ yellowButtonState: $yellowButtonProp }).margin(12)\n      }\n    }\n  }\n}
[h2]数组类型的@Link
@Component\nstruct Child {\n  @Link items: number[];\n\n  build() {\n    Column() {\n      Button(`Button1: push`)\n        .margin(12)\n        .width(312)\n        .height(40)\n        .fontColor('#FFFFFF，90%')\n        .onClick(() => {\n          this.items.push(this.items.length + 1);\n        })\n      Button(`Button2: replace whole item`)\n        .margin(12)\n        .width(312)\n        .height(40)\n        .fontColor('#FFFFFF，90%')\n        .onClick(() => {\n          this.items = [100, 200, 300];\n        })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State arr: number[] = [1, 2, 3];\n\n  build() {\n    Column() {\n      Child({ items: $arr })\n        .margin(12)\n      ForEach(this.arr,\n        (item: number) => {\n          Button(`${item}`)\n            .margin(12)\n            .width(312)\n            .height(40)\n            .backgroundColor('#11a2a2a2')\n            .fontColor('#e6000000')\n        },\n        (item: ForEachInterface) => item.toString()\n      )\n    }\n  }\n}
上文所述，ArkUI框架可以观察到数组元素的添加，删除和替换。在该示例中@State和@Link的类型是相同的number[]，不允许将@Link定义成number类型（@Link item : number），并在父组件中用@State数组中每个数据项创建子组件。如果要使用这个场景，可以参考@Prop和@Observed。
[h2]装饰Map类型变量
从API version 11开始，@Link支持Map类型。
在下面的示例中，value类型为Map<number, string>，点击Button改变message的值，视图会随之刷新。
@Component\nstruct Child {\n  @Link value: Map<number, string>\n\n  build() {\n    Column() {\n      ForEach(Array.from(this.value.entries()), (item: [number, string]) => {\n        Text(`${item[0]}`).fontSize(30)\n        Text(`${item[1]}`).fontSize(30)\n        Divider()\n      })\n      Button('child init map').onClick(() => {\n        this.value = new Map([[0, \"a\"], [1, \"b\"], [3, \"c\"]])\n      })\n      Button('child set new one').onClick(() => {\n        this.value.set(4, \"d\")\n      })\n      Button('child clear').onClick(() => {\n        this.value.clear()\n      })\n      Button('child replace the first one').onClick(() => {\n        this.value.set(0, \"aa\")\n      })\n      Button('child delete the first one').onClick(() => {\n        this.value.delete(0)\n      })\n    }\n  }\n}\n\n\n@Entry\n@Component\nstruct MapSample {\n  @State message: Map<number, string> = new Map([[0, \"a\"], [1, \"b\"], [3, \"c\"]])\n\n  build() {\n    Row() {\n      Column() {\n        Child({ value: this.message })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
[h2]装饰Set类型变量
从API version 11开始，@Link支持Set类型。
在下面的示例中，message类型为Set<number>，点击Button改变message的值，视图会随之刷新。
@Component\nstruct Child {\n  @Link message: Set<number>\n\n  build() {\n    Column() {\n      ForEach(Array.from(this.message.entries()), (item: [number, string]) => {\n        Text(`${item[0]}`).fontSize(30)\n        Divider()\n      })\n      Button('init set').onClick(() => {\n        this.message = new Set([0, 1, 2, 3, 4])\n      })\n      Button('set new one').onClick(() => {\n        this.message.add(5)\n      })\n      Button('clear').onClick(() => {\n        this.message.clear()\n      })\n      Button('delete the first one').onClick(() => {\n        this.message.delete(0)\n      })\n    }\n    .width('100%')\n  }\n}\n\n\n@Entry\n@Component\nstruct SetSample {\n  @State message: Set<number> = new Set([0, 1, 2, 3, 4])\n\n  build() {\n    Row() {\n      Column() {\n        Child({ message: this.message })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
[h2]使用双向同步机制更改本地其他变量
使用@Watch可以在双向同步时，更改本地变量。
下面的示例中，在@Link的@Watch里面修改了一个@State装饰的变量memberMessage，实现了父子组件间的变量同步。但是@State装饰的变量memberMessage在本地修改又不会影响到父组件中的变量改变。
@Entry\n@Component\nstruct Parent {\n  @State sourceNumber: number = 0;\n\n  build() {\n    Column() {\n      Text(`父组件的sourceNumber：` + this.sourceNumber)\n      Child({ sourceNumber: this.sourceNumber })\n      Button('父组件更改sourceNumber')\n        .onClick(() => {\n          this.sourceNumber++;\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}\n\n@Component\nstruct Child {\n  @State memberMessage: string = 'Hello World';\n  @Link @Watch('onSourceChange') sourceNumber: number;\n\n  onSourceChange() {\n    this.memberMessage = this.sourceNumber.toString();\n  }\n\n  build() {\n    Column() {\n      Text(this.memberMessage)\n      Text(`子组件的sourceNumber：` + this.sourceNumber.toString())\n      Button('子组件更改memberMessage')\n        .onClick(() => {\n          this.memberMessage = 'Hello memberMessage';\n        })\n    }\n  }\n}
Link支持联合类型实例
@Link支持联合类型和undefined和null，在下面的示例中，name类型为string | undefined，点击父组件Index中的Button改变name的属性或者类型，Child中也会对应刷新。
@Component\nstruct Child {\n  @Link name: string | undefined\n\n  build() {\n    Column() {\n\n      Button('Child change name to Bob')\n        .onClick(() => {\n          this.name = \"Bob\"\n        })\n\n      Button('Child change name to undefined')\n        .onClick(() => {\n          this.name = undefined\n        })\n\n    }.width('100%')\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  @State name: string | undefined = \"mary\"\n\n  build() {\n    Column() {\n      Text(`The name is  ${this.name}`).fontSize(30)\n\n      Child({ name: this.name })\n\n      Button('Parents change name to Peter')\n        .onClick(() => {\n          this.name = \"Peter\"\n        })\n\n      Button('Parents change name to undefined')\n        .onClick(() => {\n          this.name = undefined\n        })\n    }\n  }\n}
常见问题
[h2]@Link装饰状态变量类型错误
在子组件中使用@Link装饰状态变量需要保证该变量与数据源类型完全相同，且该数据源需为被诸如@State等装饰器装饰的状态变量。
【反例】
@Observed\nclass Info {\n  public age: number = 0;\n\n  constructor(age: number) {\n    this.age = age;\n  }\n}\n\n@Component\nstruct LinkChild {\n  @Link testNum: number;\n\n  build() {\n    Text(`LinkChild testNum ${this.testNum}`)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State info: Info = new Info(1);\n\n  build() {\n    Column() {\n      Text(`Parent testNum ${this.info.age}`)\n        .onClick(() => {\n          this.info.age += 1;\n        })\n      // @Link装饰的变量需要和数据源@State类型一致\n      LinkChild({ testNum: this.info.age })\n    }\n  }\n}
@Link testNum: number从父组件的LinkChild({testNum:this.info.age})初始化。@Link的数据源必须是装饰器装饰的状态变量，简而言之，@Link装饰的数据必须和数据源类型相同，比如@Link: T和@State : T。所以，这里应该改为@Link testNum: Info，从父组件初始化的方式为LinkChild({testNum: this.info})。
【正例】
@Observed\nclass Info {\n  public age: number = 0;\n\n  constructor(age: number) {\n    this.age = age;\n  }\n}\n\n@Component\nstruct LinkChild {\n  @Link testNum: Info;\n\n  build() {\n    Text(`LinkChild testNum ${this.testNum?.age}`)\n      .onClick(() => {\n        this.testNum.age += 1;\n      })\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State info: Info = new Info(1);\n\n  build() {\n    Column() {\n      Text(`Parent testNum ${this.info.age}`)\n        .onClick(() => {\n          this.info.age += 1;\n        })\n      // @Link装饰的变量需要和数据源@State类型一致\n      LinkChild({ testNum: this.info })\n    }\n  }\n}
[h2]使用a.b(this.object)形式调用，不会触发UI刷新
在build方法内，当@Link装饰的变量是Object类型、且通过a.b(this.object)形式调用时，b方法内传入的是this.object的原生对象，修改其属性，无法触发UI刷新。如下例中，通过静态方法Score.changeScore1或者this.changeScore2修改Child组件中的this.score.value时，UI不会刷新。
【反例】
class Score {\n  value: number;\n  constructor(value: number) {\n    this.value = value;\n  }\n\n  static changeScore1(score:Score) {\n    score.value += 1;\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State score: Score = new Score(1);\n\n  build() {\n    Column({space:8}) {\n      Text(`The value in Parent is ${this.score.value}.`)\n        .fontSize(30)\n        .fontColor(Color.Red)\n      Child({ score: this.score })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}\n\n@Component\nstruct Child {\n  @Link score: Score;\n\n  changeScore2(score:Score) {\n    score.value += 2;\n  }\n\n  build() {\n    Column({space:8}) {\n      Text(`The value in Child is ${this.score.value}.`)\n        .fontSize(30)\n      Button(`changeScore1`)\n        .onClick(()=>{\n          // 通过静态方法调用，无法触发UI刷新\n          Score.changeScore1(this.score);\n        })\n      Button(`changeScore2`)\n        .onClick(()=>{\n          // 使用this通过自定义组件内部方法调用，无法触发UI刷新\n          this.changeScore2(this.score);\n        })\n    }\n  }\n}
可以通过如下先赋值、再调用新赋值的变量的方式为this.score加上Proxy代理，实现UI刷新。
【正例】
class Score {\n  value: number;\n  constructor(value: number) {\n    this.value = value;\n  }\n\n  static changeScore1(score:Score) {\n    score.value += 1;\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State score: Score = new Score(1);\n\n  build() {\n    Column({space:8}) {\n      Text(`The value in Parent is ${this.score.value}.`)\n        .fontSize(30)\n        .fontColor(Color.Red)\n      Child({ score: this.score })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}\n\n@Component\nstruct Child {\n  @Link score: Score;\n\n  changeScore2(score:Score) {\n    score.value += 2;\n  }\n\n  build() {\n    Column({space:8}) {\n      Text(`The value in Child is ${this.score.value}.`)\n        .fontSize(30)\n      Button(`changeScore1`)\n        .onClick(()=>{\n          // 通过赋值添加 Proxy 代理\n          let score1 = this.score;\n          Score.changeScore1(score1);\n        })\n      Button(`changeScore2`)\n        .onClick(()=>{\n          // 通过赋值添加 Proxy 代理\n          let score2 = this.score;\n          this.changeScore2(score2);\n        })\n    }\n  }\n}
