接入一笔成形
接入一笔成形功能，可以传入手写笔迹的点位信息、通过手写笔/手指在屏幕上停顿一定的时间后触发此功能，触发功能后将自动识别当前绘制的图形，并生成对应的图像信息。
场景介绍
在应用中实现一笔成形，效果如下：
 支持获取识别的图像信息，图像信息支持存储。 支持从存储的图像信息中读取信息。 
接口说明
类名
方法名称
说明
InstantShapeGenerator
processTouchEvent
传递触摸事件。
InstantShapeGenerator
getPathFromString
从给定的形状字符串中提取形状信息。
InstantShapeGenerator
notifyAreaChange
通知控件大小变化。
InstantShapeGenerator
setPauseTime
设置触发识别的暂停时间，单位：毫秒。
InstantShapeGenerator
release
销毁识别工具。
InstantShapeGenerator
onShapeRecognized
注册识别完成时的回调方法。
开发步骤
1.导入相关模块。
import { InstantShapeGenerator, ShapeInfo} from '@kit.Penkit';
2.构造包含一笔成型能力，下面以控件为例：
@Component\nstruct InstantShapeDemo {\n  private instantShapeGenerator: InstantShapeGenerator = new InstantShapeGenerator();\n\n  private shapeString: string = \"\";\n\n  private points: DrawPathPointModel[] = [];\n  // 绘制路径\n  private drawPath = new Path2D();\n\n  private shapePath = new Path2D();\n\n  private mShapeSuccess = false;\n\n  private shapeType: number = -1;\n\n  private settings: RenderingContextSettings = new RenderingContextSettings(true);\n\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);\n\n  // 通过回调方法获取识别结果\n  private shapeInfoCallback = (shapeInfo: ShapeInfo) => {\n    this.shapeString = shapeInfo.shapeString;\n    this.shapePath = shapeInfo.shapePath;\n    this.shapeType = shapeInfo.shapeType;\n    this.mShapeSuccess = true;\n    this.context.beginPath();\n    this.context.reset();\n    this.drawCurrentPathModel(this.shapePath);\n  }\n\n  aboutToAppear() {\n    console.info('InstantShapeGenerator aboutToAppear');\n    // 设置触发识别的暂停时间\n    this.instantShapeGenerator?.setPauseTime(280);\n    // 注册完成时的回调方法\n    this.instantShapeGenerator?.onShapeRecognized(this.shapeInfoCallback);\n  }\n  aboutToDisappear(){\n    console.info('InstantShapeGenerator aboutToDisappear')\n    this.instantShapeGenerator?.release();\n  }\n  build() {\n    Stack({ alignContent: Alignment.TopEnd }) {\n      Canvas(this.context)\n        .width('100%')\n        .height('100%')\n        .onAreaChange((oldValue: Area, newValue: Area) => {\n          // 通知组件大小更改。形状的大小（例如圆的半径）根据组件尺寸而变化\n          this.instantShapeGenerator?.notifyAreaChange(Number(newValue.width), Number(newValue.height));\n        }).onTouch((event: TouchEvent) => {\n        // 传递触摸事件\n        this.instantShapeGenerator?.processTouchEvent(event);\n        switch (event.type) {\n          case TouchType.Down:\n            this.moveStart(event.touches[0]?.x, event.touches[0]?.y);\n            break;\n          case TouchType.Move:\n            this.moveUpdate(event.touches[0]?.x, event.touches[0]?.y);\n            break;\n          case TouchType.Up:\n            this.moveEnd();\n            break;\n        }\n      })\n    }.height('100%').width('100%')\n  }\n\n  moveStart(x: number, y: number) {\n    this.points.push({x: x, y: y})\n    this.drawPath.moveTo(x, y);\n    this.drawCurrentPathModel(this.drawPath);\n    this.mShapeSuccess = false;\n  }\n\n  moveUpdate(x: number, y: number) {\n    let lastPoint = this.points[this.points.length - 1];\n    this.points.push({x: x, y: y});\n    this.drawPath.quadraticCurveTo((x + lastPoint?.x) / 2, (y + lastPoint?.y) / 2, x, y);\n    if (!this.mShapeSuccess) {\n      this.drawCurrentPathModel(this.drawPath);\n    }\n  }\n\n  moveEnd() {\n    this.points = [];\n    this.drawPath = new Path2D();\n    this.shapePath = new Path2D();\n  }\n\n  private drawCurrentPathModel(path : Path2D) {\n    this.context.globalCompositeOperation = 'source-over';\n    this.context.lineWidth = 8;\n    this.context.strokeStyle = \"#ED1B1B\";\n    this.context.lineJoin = 'round';\n    this.context.stroke(path);\n  }\n}\n\nexport class DrawPathPointModel {\n  x: number = 0;\n  y: number = 0;\n}
