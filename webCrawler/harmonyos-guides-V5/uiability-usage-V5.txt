UIAbility组件基本用法
UIAbility组件的基本用法包括：指定UIAbility的启动页面以及获取UIAbility的上下文UIAbilityContext。
指定UIAbility的启动页面
应用中的UIAbility在启动过程中，需要指定启动页面，否则应用启动后会因为没有默认加载页面而导致白屏。可以在UIAbility的onWindowStageCreate()生命周期回调中，通过WindowStage对象的loadContent()方法设置启动页面。
import { UIAbility } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    windowStage.loadContent('pages/Index', (err, data) => {\n      // ...\n    });\n  }\n  // ...\n}
在DevEco Studio中创建的UIAbility中，该UIAbility实例默认会加载Index页面，根据需要将Index页面路径替换为需要的页面路径即可。
获取UIAbility的上下文信息
UIAbility类拥有自身的上下文信息，该信息为UIAbilityContext类的实例，UIAbilityContext类拥有abilityInfo、currentHapModuleInfo等属性。通过UIAbilityContext可以获取UIAbility的相关配置信息，如包代码路径、Bundle名称、Ability名称和应用程序需要的环境状态等属性信息，以及可以获取操作UIAbility实例的方法（如startAbility()、connectServiceExtensionAbility()、terminateSelf()等）。
如果需要在页面中获得当前Ability的Context，可调用getContext接口获取当前页面关联的UIAbilityContext或ExtensionContext。
 在UIAbility中可以通过this.context获取UIAbility实例的上下文信息。 import { UIAbility, AbilityConstant, Want } from '@kit.AbilityKit';\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    // 获取UIAbility实例的上下文\n    let context = this.context;\n    // ...\n  }\n} 在页面中获取UIAbility实例的上下文信息，包括导入依赖资源context模块和在组件中定义一个context变量两个部分。 import { common, Want } from '@kit.AbilityKit';\n\n@Entry\n@Component\nstruct Page_EventHub {\n  private context = getContext(this) as common.UIAbilityContext;\n\n  startAbilityTest(): void {\n    let want: Want = {\n      // Want参数信息\n    };\n    this.context.startAbility(want);\n  }\n\n  // 页面展示\n  build() {\n    // ...\n  }\n} 也可以在导入依赖资源context模块后，在具体使用UIAbilityContext前进行变量定义。 import { common, Want } from '@kit.AbilityKit';\n\n@Entry\n@Component\nstruct Page_UIAbilityComponentsBasicUsage {\n  startAbilityTest(): void {\n    let context = getContext(this) as common.UIAbilityContext;\n    let want: Want = {\n      // Want参数信息\n    };\n    context.startAbility(want);\n  }\n\n  // 页面展示\n  build() {\n    // ...\n  }\n} 当业务完成后，开发者如果想要终止当前UIAbility实例，可以通过调用terminateSelf()方法实现。 import { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct Page_UIAbilityComponentsBasicUsage {\n  // 页面展示\n  build() {\n    Column() {\n      //...\n      Button('FuncAbilityB')\n        .onClick(() => {\n          let context = getContext(this) as common.UIAbilityContext;\n          try {\n            context.terminateSelf((err: BusinessError) => {\n              if (err.code) {\n                // 处理业务逻辑错误\n                console.error(`terminateSelf failed, code is ${err.code}, message is ${err.message}`);\n                return;\n              }\n              // 执行正常业务\n              console.info('terminateSelf succeed');\n            });\n          } catch (err) {\n            // 捕获同步的参数错误\n            let code = (err as BusinessError).code;\n            let message = (err as BusinessError).message;\n            console.error(`terminateSelf failed, code is ${code}, message is ${message}`);\n          }\n        })\n    }\n  }\n} 
