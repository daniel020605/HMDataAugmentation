@Require装饰器：校验构造传参
@Require是校验@Prop、@State、@Provide、@BuilderParam和普通变量(无状态装饰器修饰的变量)是否需要构造传参的一个装饰器。
从API version 11开始对@Prop/@BuilderParam进行校验。
从API version 11开始，该装饰器支持在元服务中使用。
从API version 12开始对@State/@Provide/普通变量(无状态装饰器修饰的变量)进行校验。
概述
当@Require装饰器和@Prop、@State、@Provide、@BuilderParam、普通变量(无状态装饰器修饰的变量)结合使用时，在构造该自定义组件时，@Prop、@State、@Provide、@BuilderParam和普通变量(无状态装饰器修饰的变量)必须在构造时传参。
限制条件
@Require装饰器仅用于装饰struct内的@Prop、@State、@Provide、@BuilderParam和普通变量(无状态装饰器修饰的变量)。
预览器限制场景请参考PreviewChecker检测规则。
使用场景
当Child组件内使用@Require装饰器和@Prop、@State、@Provide、@BuilderParam和普通变量(无状态装饰器修饰的变量)结合使用时，父组件Index在构造Child时必须传参，否则编译不通过。
@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  @Builder buildTest() {\n    Row() {\n      Text('Hello, world')\n        .fontSize(30)\n    }\n  }\n\n  build() {\n    Row() {\n      Child({ regular_value: this.message, state_value: this.message, provide_value: this.message, initMessage: this.message, message: this.message,\n        buildTest: this.buildTest, initBuildTest: this.buildTest })\n    }\n  }\n}\n\n@Component\nstruct Child {\n  @Builder buildFunction() {\n    Column() {\n      Text('initBuilderParam')\n        .fontSize(30)\n    }\n  }\n  @Require regular_value: string = 'Hello';\n  @Require @State state_value: string = \"Hello\";\n  @Require @Provide provide_value: string = \"Hello\";\n  @Require @BuilderParam buildTest: () => void;\n  @Require @BuilderParam initBuildTest: () => void = this.buildFunction;\n  @Require @Prop initMessage: string = 'Hello';\n  @Require @Prop message: string;\n\n  build() {\n    Column() {\n      Text(this.initMessage)\n        .fontSize(30)\n      Text(this.message)\n        .fontSize(30)\n      this.initBuildTest();\n      this.buildTest();\n    }\n    .width('100%')\n    .height('100%')\n  }\n}
使用@ComponentV2修饰的自定义组件ChildPage通过父组件ParentPage进行初始化，因为有@Require装饰，所以父组件必须进行构造赋值。
@ObservedV2\nclass Info {\n  @Trace name: string = '';\n  @Trace age: number = 0;\n}\n\n@ComponentV2\nstruct ChildPage {\n  @Require @Param childInfo: Info = new Info();\n  @Require @Param state_value: string = \"Hello\";\n  build() {\n    Column() {\n      Text(`ChildPage childInfo name :${this.childInfo.name}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n      Text(`ChildPage childInfo age :${this.childInfo.age}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n      Text(`ChildPage state_value age :${this.state_value}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n}\n\n@Entry\n@ComponentV2\nstruct ParentPage {\n  info1: Info = { name: \"Tom\", age: 25 };\n  label1: string = \"Hello World\";\n  @Local info2: Info = { name: \"Tom\", age: 25 };\n  @Local label2: string = \"Hello World\";\n\n  build() {\n    Column() {\n      Text(`info1: ${this.info1.name}  ${this.info1.age}`) // Text1\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      ChildPage({ childInfo: this.info1, state_value: this.label1}) // 调用自定义组件\n      Line()\n        .width('100%')\n        .height(5)\n        .backgroundColor('#000000').margin(10)\n      Text(`info2: ${this.info2.name}  ${this.info2.age}`) // Text2\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      ChildPage({ childInfo: this.info2, state_value: this.label2}) // 调用自定义组件\n      Line()\n        .width('100%')\n        .height(5)\n        .backgroundColor('#000000').margin(10)\n      Button(\"change info1&info2\")\n        .onClick(() => {\n          this.info1 = { name: \"Cat\", age: 18} // Text1不会刷新，原因是没有装饰器修饰监听不到值的改变。\n          this.info2 = { name: \"Cat\", age: 18} // Text2会刷新，原因是有装饰器修饰，可以监听到值的改变。\n          this.label1 = \"Luck\"; // 不会刷新，原因是没有装饰器修饰监听不到值的改变。\n          this.label2 = \"Luck\"; // 会刷新，原因是有装饰器修饰，可以监听到值的改变。\n        })\n    }\n  }\n}
错误场景
@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  @Builder buildTest() {\n    Row() {\n      Text('Hello, world')\n        .fontSize(30)\n    }\n  }\n\n  build() {\n    Row() {\n      Child()\n    }\n  }\n}\n\n@Component\nstruct Child {\n  @Builder buildFunction() {\n    Column() {\n      Text('initBuilderParam')\n        .fontSize(30)\n    }\n  }\n  // 使用@Require必须构造时传参。\n  @Require regular_value: string = 'Hello';\n  @Require @State state_value: string = \"Hello\";\n  @Require @Provide provide_value: string = \"Hello\";\n  @Require @BuilderParam initBuildTest: () => void = this.buildFunction;\n  @Require @Prop initMessage: string = 'Hello';\n\n  build() {\n    Column() {\n      Text(this.initMessage)\n        .fontSize(30)\n      this.initBuildTest();\n    }\n  }\n}
