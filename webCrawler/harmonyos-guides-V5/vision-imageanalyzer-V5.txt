AI识图
场景介绍
AI识图是通过聚合OCR（Optical Character Recognition）、主体分割、实体识别、多目标识别等AI能力，提供场景化的文本识别、主体分割、识图搜索功能。AI识图功能主开关入口在基础控件API列表中，如果您接受AI识图默认的交互和功能，仅需使用基础控件提供的相关使能接口打开功能开关即可。该文档配套的API配合基础控件使用，主要满足您的定制诉求，帮助您完成AI识图功能交互上的细粒度控制，获取文本识别、图像分割等分析结果以便您进行扩展业务的开发，目前支持的基础控件范围包括Image、Video、XComponent。其中，配合Image控件可完成静态图片上的识图功能，配合Video控件可完成视频播放暂停帧的识图功能，配合XComponent可完成自定义渲染等场景下的图像的识图功能。
识图功能提供如下能力：
 识别文字。用户长按文本选取文字或持续长按文本中的电话号码、邮箱、网址、地址、时间等实体，可触发对应实体的快捷操作，如持续长按文本中的时间，可触发\"新建日程\"快捷操作入口。 识图搜索。用户抠图后可基于抠出的主体进行识图搜索，开发者也可以主动触发目标标识，触发后会识别图中的动物、植物、建筑物等目标并用相应的ICON标识，用户点击ICON也可以进行识图搜索，搜索结果会以模态窗的方式为用户呈现。 主体分割。用户长按主体分割，分割后用户可以完成复制，分享，全选，识图搜索等功能。 AIButton。AIButton承载了电话号码、邮箱、网址、地址、时间等实体的显性下划线标识（点击后出现快捷操作菜单），原图翻译（系统设置语种与图片上文本语种不一致且能将图中文本翻译为系统当前设置的语种时出现），表格提取（图片中存在表格时出现）等功能特性。配置AIButton属性可见后，会对图片进行预分析，当图片中存在文本且文本区域大于图片区域的5%时AIButton才会显示。 
识图功能提供如下建议：
 AI识图特性可帮助消费者从图片上获取更多的信息（长按抠图，长按选取文本，长按实体识别等）。建议在大图预览场景都打开此能力，大图预览场景下用户对图片中的内容会更感兴趣，此时适时的提供识图服务契合用户体验场景，同时为用户提供最佳的识图交互体验。 AI识图特性中的AIButton与图片中是否有文本存在关联，显性的提醒用户操作文本。开启AIButton会触发图片的预分析从而导致一定的功耗开销，建议开发者充分理解自身业务场景，预估目标用户图片内容分布，兼顾用户图片浏览体验和提供更高阶AI识图功能体验的情况下按需提供AIButton露出。例如，业务本身是辅助用户高效提取图片中的文本内容，开启AIButton将会提升用户文本提取的体验。业务本身更偏向于图片编辑，也可隐藏AIButton。 
约束与限制
该能力当前不支持模拟器。
开发步骤
 将AI识图控件相关的类添加。import { visionImageAnalyzer } from '@kit.VisionKit';\nimport { BusinessError } from '@kit.BasicServicesKit';  初始化VisionImageAnalyzerController对象。private visionImageAnalyzerController: visionImageAnalyzer.VisionImageAnalyzerController = new visionImageAnalyzer.VisionImageAnalyzerController();  添加订阅事件。aboutToAppear(): void {\n  this.visionImageAnalyzerController.on('imageAnalyzerVisibilityChange', (visibility: visionImageAnalyzer.ImageAnalyzerVisibility) => {\n    console.info(\"DEMO_TAG\", `imageAnalyzerVisibilityChange result: ${JSON.stringify(visibility)}`)\n  })\n  this.visionImageAnalyzerController.on('textAnalysis', (text: string) => {\n    console.info(\"DEMO_TAG\", `textAnalysis result: ${JSON.stringify(text)}`)\n  })\n  this.visionImageAnalyzerController.on('selectedTextChange', (selectedText: string) => {\n    console.info(\"DEMO_TAG\", `selectedTextChange result: ${JSON.stringify(selectedText)}`)\n  })\n  this.visionImageAnalyzerController.on('subjectAnalysis', (subjects: visionImageAnalyzer.Subject[]) => {\n    console.info(\"DEMO_TAG\", `subjectAnalysis result: ${JSON.stringify(subjects)}`)\n  })\n  this.visionImageAnalyzerController.on('selectedSubjectsChange', (subjects: visionImageAnalyzer.Subject[]) => {\n    console.info(\"DEMO_TAG\", `selectedSubjectsChange result: ${JSON.stringify(subjects)}`)\n  })\n  this.visionImageAnalyzerController.on('analyzerFailed', (error: BusinessError) => {\n    console.error(\"DEMO_TAG\", `analyzerFailed result: ${JSON.stringify(error)}`)\n  })\n}  绑定VisionImageAnalyzerController对象，可以控制识图相关的交互。build() {\n  Stack() {\n    // 需要替换您自己的资源图片，存放在resources/base/media目录下\n    Image($r('app.media.img'), {\n      types: [ImageAnalyzerType.TEXT, ImageAnalyzerType.SUBJECT, ImageAnalyzerType.OBJECT_LOOKUP],\n      aiController: this.visionImageAnalyzerController\n    })\n      .width('100%')\n      .height('100%')\n      .enableAnalyzer(true)\n      .objectFit(ImageFit.Contain)\n  }.width('100%').height('100%')\n}  取消订阅事件。aboutToDisappear(): void {\n  this.visionImageAnalyzerController.off('imageAnalyzerVisibilityChange')\n  this.visionImageAnalyzerController.off('textAnalysis')\n  this.visionImageAnalyzerController.off('selectedTextChange')\n  this.visionImageAnalyzerController.off('subjectAnalysis')\n  this.visionImageAnalyzerController.off('selectedSubjectsChange')\n  this.visionImageAnalyzerController.off('analyzerFailed')\n}  
开发实例
import { visionImageAnalyzer } from '@kit.VisionKit';\nimport { BusinessError } from '@kit.BasicServicesKit'\n@Entry\n@Component\nexport struct ImageDemo {\n  private visionImageAnalyzerController: visionImageAnalyzer.VisionImageAnalyzerController = new visionImageAnalyzer.VisionImageAnalyzerController()\n  aboutToAppear(): void {\n    this.visionImageAnalyzerController.on('imageAnalyzerVisibilityChange', (visibility: visionImageAnalyzer.ImageAnalyzerVisibility) => {\n      console.info(\"DEMO_TAG\", `imageAnalyzerVisibilityChange result: ${JSON.stringify(visibility)}`)\n    })\n    this.visionImageAnalyzerController.on('textAnalysis', (text: string) => {\n      console.info(\"DEMO_TAG\", `textAnalysis result: ${JSON.stringify(text)}`)\n    })\n    this.visionImageAnalyzerController.on('selectedTextChange', (selectedText: string) => {\n      console.info(\"DEMO_TAG\", `selectedTextChange result: ${JSON.stringify(selectedText)}`)\n    })\n    this.visionImageAnalyzerController.on('selectedSubjectsChange', (subjects: visionImageAnalyzer.Subject[]) => {\n      console.info(\"DEMO_TAG\", `selectedSubjectsChange result: ${JSON.stringify(subjects)}`)\n    })\n    this.visionImageAnalyzerController.on('analyzerFailed', (error: BusinessError) => {\n      console.error(\"DEMO_TAG\", `analyzerFailed result: ${JSON.stringify(error)}`)\n    })\n  }\n  build() {\n    Stack() {\n      Image($r('app.media.img'), {\n        types: [ImageAnalyzerType.TEXT, ImageAnalyzerType.SUBJECT, ImageAnalyzerType.OBJECT_LOOKUP],\n        aiController: this.visionImageAnalyzerController\n      })\n        .width('100%')\n        .height('100%')\n        .enableAnalyzer(true)\n        .objectFit(ImageFit.Contain)\n    }.width('100%').height('100%')\n  }\n    aboutToDisappear(): void {\n      this.visionImageAnalyzerController.off('imageAnalyzerVisibilityChange')\n      this.visionImageAnalyzerController.off('textAnalysis')\n      this.visionImageAnalyzerController.off('selectedTextChange')\n      this.visionImageAnalyzerController.off('subjectAnalysis')\n      this.visionImageAnalyzerController.off('selectedSubjectsChange')\n      this.visionImageAnalyzerController.off('analyzerFailed')\n    }\n}
