内存管理purgeable内存开发指导
场景介绍
HarmonyOS提供Purgeable Memory内存管理机制，开发者可以使用相关接口创建PurgeableMemory对象，从而管理purgeable内存。
开发者可以通过本指导了解在HarmonyOS应用中，如何使用Native层相关接口操作purgeable内存。功能包括purgeable内存的申请、释放等。
针对Purgeable Memory内存管理机制，常见的开发场景如下：
通过该机制提供的NAPI接口申请管理PurgeableMemory对象，并将数据内容写入该对象。使用完毕后释放。
接口说明
Purgeable Memory应用开发步骤
以下步骤描述了在HarmonyOS中如何使用Purgeable Memory提供的NAPI接口，申请PurgeableMemory对象，并将内容写入PurgeableMemory对象后，对相应对象进行读写访问。
声明PurgeableMemory对象创建规则。 // 声明构建函数的参数\nstruct ParaData{\n    int start;\n    int end;\n};\n\n// 声明一个使用ModifyFunc\nbool FactorialFunc(void* data, size_t size, void* param){\n    bool ret = true;\n    ParaData *pdata = (ParaData*) param;\n    int* oriData = (int*)data;\n    int i = pdata->start;\n    while (i < pdata->end) {\n        *oriData *= i;\n        i++;\n    }\n    return ret;\n}\n\n// 声明修改PurgeableMemory对象扩展函数的参数\nstruct AppendParaData{\n    int newPara;\n};\n\n// 声明修改PurgeableMemory对象的扩展函数\nbool AddFunc(void* data, size_t size, void* param){\n    bool ret = true;\n    int *oriDatap = (int*) data;\n    AppendParaData* apData = (AppendParaData*)param;\n    *oriDatap += apData->newPara;\n    return ret;\n} 创建PurgeableMemory对象。 // 声明一个4MB的PurgeableMemory对象大小\n#define DATASIZE (4 * 1024 * 1024)\n\n// 声明创建函数的参数\nstruct ParaData pdata = {1,2};\n\n// 创建一个PurgeableMemory对象\nOH_PurgeableMemory* pPurgmem = OH_PurgeableMemory_Create(DATASIZE, FactorialFunc, &pdata); 读访问PurgeableMemory对象。 //业务定义对象类型\nclass ReqObj;\n\n// 读取对象\nif(OH_PurgeableMemory_BeginRead(pPurgmem)) {\n    // 获取PurgeableMemory对象大小\n    size_t size = OH_PurgeableMemory_ContentSize(pPurgmem);\n\n    // 获取PurgeableMemory对象内容\n    ReqObj* pReqObj = (ReqObj*) OH_PurgeableMemory_GetContent(pPurgmem);\n\n    // 读取PurgeableMemory对象结束\n    OH_PurgeableMemory_EndRead(pPurgmem);\n} 写访问PurgeableMemory对象。  //业务定义对象类型\nclass ReqObj;\n\n// 修改PurgeableMemory对象\nif(OH_PurgeableMemory_BeginWrite(pPurgmem)) {\n    // 获取PurgeableMemory对象数据\n    ReqObj* pReqObj = (ReqObj*) OH_PurgeableMemory_GetContent(pPurgmem);\n\n    // 声明扩展创建函数的参数\n    struct AppendParaData apdata = {1};\n\n    // 更新PurgeableMemory对象重建规则\n    OH_PurgeableMemory_AppendModify(pPurgmem, AddFunc, &apdata);\n\n    // 修改PurgeableMemory对象结束\n    OH_PurgeableMemory_EndWrite(pPurgmem);\n} 销毁PurgeableMemory对象。 // 销毁对象\nOH_PurgeableMemory_Destroy(pPurgmem);\n// 置空指针防止UAF\npPurgmem = nullptr; 
