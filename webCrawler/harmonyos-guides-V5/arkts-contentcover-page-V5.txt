绑定全模态页面（bindContentCover）
全模态页面（bindContentCover）是全屏模态形式的弹窗交互页面，完全覆盖底层父视图。适用于查看大图，全屏查看文稿等场景。
使用约束
全模态页面本质上是弹窗类组件，其交互层级默认为应用内顶层。
Navigation导航转场时，新push的页面层级无法超出全模态，其效果仍然显示在模态页面之下。针对此类场景，建议将模态页面的内容迁移至转场页面中实现。例如，在上述情况下，可以使用NavDestination来替代拉起的模态页面，新push的页面层级低于全模态。
生命周期
全模态页面提供了生命周期函数，用于通知应用程序该弹窗的生命周期状态。生命周期的触发顺序依次为：onWillAppear -> onAppear -> onWillDisappear -> onDisappear。
使用bindContentCover构建全屏模态内容覆盖半模态
全模态与半模态之间存在弹窗式的层级交互。后拉起的模态页面能够覆盖先前的模态页面。若开发者期望实现全屏转场，以覆盖半模态，并在全屏页面侧滑退出后，半模态页面仍保持显示，使用bindSheet结合bindContentCover将满足这一场景诉求。
详见模态转场章节，了解使用bindContentCover构建全屏模态转场效果。
import { curves } from '@kit.ArkUI';\n\ninterface PersonList {\n  name: string,\n  cardnum: string\n}\n\n@Entry\n@Component\nstruct BindContentCoverDemo {\n  private personList: Array<PersonList> = [\n    { name: '王**', cardnum: '1234***********789' },\n    { name: '宋*', cardnum: '2345***********789' },\n    { name: '许**', cardnum: '3456***********789' },\n    { name: '唐*', cardnum: '4567***********789' }\n  ];\n  // 半模态转场控制变量\n  @State isSheetShow: boolean = false;\n  // 全模态转场控制变量\n  @State isPresent: boolean = false;\n\n  @Builder\n  MyContentCoverBuilder() {\n    Column() {\n      Row() {\n        Text('选择乘车人')\n          .fontSize(20)\n          .fontColor(Color.White)\n          .width('100%')\n          .textAlign(TextAlign.Center)\n          .padding({ top: 30, bottom: 15 })\n      }\n      .backgroundColor(0x007dfe)\n\n      Row() {\n        Text('+ 添加乘车人')\n          .fontSize(16)\n          .fontColor(0x333333)\n          .margin({ top: 10 })\n          .padding({ top: 20, bottom: 20 })\n          .width('92%')\n          .borderRadius(10)\n          .textAlign(TextAlign.Center)\n          .backgroundColor(Color.White)\n      }\n\n      Column() {\n        ForEach(this.personList, (item: PersonList, index: number) => {\n          Row() {\n            Column() {\n              if (index % 2 == 0) {\n                Column()\n                  .width(20)\n                  .height(20)\n                  .border({ width: 1, color: 0x007dfe })\n                  .backgroundColor(0x007dfe)\n              } else {\n                Column()\n                  .width(20)\n                  .height(20)\n                  .border({ width: 1, color: 0x007dfe })\n              }\n            }\n            .width('20%')\n\n            Column() {\n              Text(item.name)\n                .fontColor(0x333333)\n                .fontSize(18)\n              Text(item.cardnum)\n                .fontColor(0x666666)\n                .fontSize(14)\n            }\n            .width('60%')\n            .alignItems(HorizontalAlign.Start)\n\n            Column() {\n              Text('编辑')\n                .fontColor(0x007dfe)\n                .fontSize(16)\n            }\n            .width('20%')\n          }\n          .padding({ top: 10, bottom: 10 })\n          .border({ width: { bottom: 1 }, color: 0xf1f1f1 })\n          .width('92%')\n          .backgroundColor(Color.White)\n        })\n      }\n      .padding({ top: 20, bottom: 20 })\n\n      Text('确认')\n        .width('90%')\n        .height(40)\n        .textAlign(TextAlign.Center)\n        .borderRadius(10)\n        .fontColor(Color.White)\n        .backgroundColor(0x007dfe)\n        .onClick(() => {\n          this.isPresent = !this.isPresent;\n        })\n    }\n    .size({ width: '100%', height: '100%' })\n    .backgroundColor(0xf5f5f5)\n  }\n\n  @Builder\n  TripInfo() {\n    Row() {\n      Column() {\n        Text('00:25')\n        Text('始发站')\n      }\n      .width('25%')\n\n      Column() {\n        Text('G1234')\n        Text('8时1分')\n      }\n      .width('25%')\n\n      Column() {\n        Text('08:26')\n        Text('终点站')\n      }\n      .width('25%')\n    }\n  }\n\n  // 第二步：定义半模态展示界面\n  // 通过@Builder构建模态展示界面\n  @Builder\n  MySheetBuilder() {\n    Column() {\n      Column() {\n        this.TripInfo()\n      }\n      .width('92%')\n      .margin(15)\n      .backgroundColor(Color.White)\n      .shadow({ radius: 30, color: '#aaaaaa' })\n      .borderRadius(10)\n\n      Column() {\n        Text('+ 选择乘车人')\n          .fontSize(18)\n          .fontColor(Color.Orange)\n          .fontWeight(FontWeight.Bold)\n          .padding({ top: 10, bottom: 10 })\n          .width('60%')\n          .textAlign(TextAlign.Center)\n          .borderRadius(15)\n          .onClick(() => {\n            // 第三步：通过全模态接口调起全模态展示界面，新拉起的模态面板默认显示在最上层\n            this.isPresent = !this.isPresent;\n          })\n            // 通过全模态接口，绑定模态展示界面MyContentCoverBuilder。transition属性支持自定义转场效果，此处定义了x轴横向入场\n          .bindContentCover($$this.isPresent, this.MyContentCoverBuilder(), {\n            transition: TransitionEffect.translate({ x: 500 }).animation({ curve: curves.springMotion(0.6, 0.8) })\n          })\n      }\n      .padding({ top: 60 })\n    }\n  }\n\n  build() {\n    Column() {\n      Row() {\n        this.TripInfo()\n        Text('有票')\n          .fontColor(Color.Blue)\n          .width('25%')\n      }\n      .width('100%')\n      .margin({top: 200, bottom: 30})\n      .borderRadius(10)\n      .backgroundColor(Color.White)\n      .onClick(()=>{\n        this.isSheetShow = !this.isSheetShow\n      })\n      // 第一步：定义半模态转场效果\n      .bindSheet($$this.isSheetShow, this.MySheetBuilder(), {\n        height: SheetSize.MEDIUM,\n        title: {title: \"确认订单\"},\n      })\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor('#30aaaaaa')\n  }\n}
