通过router或call事件刷新卡片内容
使用router事件，点击卡片可拉起对应应用的UIAbility至前台，并刷新卡片。使用call事件，点击卡片可拉起对应应用的UIAbility至后台，并刷新卡片。在卡片页面中可以通过postCardAction接口触发router事件或者call事件拉起UIAbility，然后由UIAbility刷新卡片内容，下面是这种刷新方式的简单示例。
本文主要介绍动态卡片的事件开发。对于静态卡片，请参见FormLink。
通过router事件刷新卡片内容
 在卡片页面代码文件中，通过注册Button的onClick点击事件回调并在回调中调用postCardAction接口，触发router事件拉起UIAbility至前台。 let storageUpdateRouter = new LocalStorage();\n\n@Entry(storageUpdateRouter)\n@Component\nstruct WidgetUpdateRouterCard {\n  @LocalStorageProp('routerDetail') routerDetail: ResourceStr = $r('app.string.init');\n\n  build() {\n    Column() {\n      Column() {\n        Text(this.routerDetail)\n          .fontColor('#FFFFFF')\n          .opacity(0.9)\n          .fontSize(14)\n          .margin({ top: '8%', left: '10%', right: '10%' })\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .maxLines(2)\n      }.width('100%').height('50%')\n      .alignItems(HorizontalAlign.Start)\n\n      Row() {\n        Button() {\n          Text($r('app.string.JumpLabel'))\n            .fontColor('#45A6F4')\n            .fontSize(12)\n        }\n        .width(120)\n        .height(32)\n        .margin({ top: '30%', bottom: '10%' })\n        .backgroundColor('#FFFFFF')\n        .borderRadius(16)\n        .onClick(() => {\n          postCardAction(this, {\n            action: 'router',\n            abilityName: 'WidgetEventRouterEntryAbility', // 只能跳转到当前应用下的UIAbility\n            params: {\n              routerDetail: 'RouterFromCard',\n            }\n          });\n        })\n      }.width('100%').height('40%')\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Start)\n    .backgroundImage($r('app.media.CardEvent'))\n    .backgroundImageSize(ImageSize.Cover)\n  }\n} 在UIAbility的onCreate或者onNewWant生命周期中可以通过入参want获取卡片的formID和传递过来的参数信息，然后调用updateForm接口刷新卡片。 import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { formBindingData, formInfo, formProvider } from '@kit.FormKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'WidgetEventRouterEntryAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class WidgetEventRouterEntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    this.handleFormRouterEvent(want, 'onCreate');\n  }\n\n  handleFormRouterEvent(want: Want, source: string): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `handleFormRouterEvent ${source}, Want: ${JSON.stringify(want)}`);\n    if (want.parameters && want.parameters[formInfo.FormParam.IDENTITY_KEY] !== undefined) {\n      let curFormId = want.parameters[formInfo.FormParam.IDENTITY_KEY].toString();\n      // want.parameters.params 对应 postCardAction() 中 params 内容\n      let message: string = (JSON.parse(want.parameters?.params as string))?.routerDetail;\n      hilog.info(DOMAIN_NUMBER, TAG, `UpdateForm formId: ${curFormId}, message: ${message}`);\n      let formData: Record<string, string> = {\n        'routerDetail': message + ' ' + source + ' UIAbility', // 和卡片布局中对应\n      };\n      let formMsg = formBindingData.createFormBindingData(formData);\n      formProvider.updateForm(curFormId, formMsg).then((data) => {\n        hilog.info(DOMAIN_NUMBER, TAG, 'updateForm success.', JSON.stringify(data));\n      }).catch((error: BusinessError) => {\n        hilog.info(DOMAIN_NUMBER, TAG, 'updateForm failed.', JSON.stringify(error));\n      });\n    }\n  }\n\n  // 如果UIAbility已在后台运行，在收到Router事件后会触发onNewWant生命周期回调\n  onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, 'onNewWant Want:', JSON.stringify(want));\n    this.handleFormRouterEvent(want, 'onNewWant');\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    \n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n  // ...\n} 
通过call事件刷新卡片内容
 在卡片页面代码文件中，通过注册Button的onClick点击事件回调并在回调中调用postCardAction接口，触发call事件拉起UIAbility至后台。 let storageUpdateCall = new LocalStorage();\n\n@Entry(storageUpdateCall)\n@Component\nstruct WidgetUpdateCallCard {\n  @LocalStorageProp('formId') formId: string = '12400633174999288';\n  @LocalStorageProp('calleeDetail') calleeDetail: ResourceStr = $r('app.string.init');\n\n  build() {\n    Column() {\n      Column() {\n          Text(this.calleeDetail)\n          .fontColor('#FFFFFF')\n          .opacity(0.9)\n          .fontSize(14)\n          .margin({ top: '8%', left: '10%' })\n      }.width('100%').height('50%')\n      .alignItems(HorizontalAlign.Start)\n\n      Row() {\n        Button() {\n          Text($r('app.string.CalleeJumpLabel'))\n            .fontColor('#45A6F4')\n            .fontSize(12)\n        }\n        .width(120)\n        .height(32)\n        .margin({ top: '30%', bottom: '10%' })\n        .backgroundColor('#FFFFFF')\n        .borderRadius(16)\n        .onClick(() => {\n          postCardAction(this, {\n            action: 'call',\n            abilityName: 'WidgetCalleeEntryAbility', // 只能拉起当前应用下的UIAbility\n            params: {\n              method: 'funA',\n              formId: this.formId,\n              calleeDetail: 'CallFrom'\n            }\n          });\n        })\n      }.width('100%').height('40%')\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Start)\n    .backgroundImage($r('app.media.CardEvent'))\n    .backgroundImageSize(ImageSize.Cover)\n  }\n} 在UIAbility的onCreate生命周期中监听call事件所需的方法，然后在对应方法中调用updateForm接口刷新卡片。 import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { formBindingData, formProvider } from '@kit.FormKit';\nimport { rpc } from '@kit.IPCKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'WidgetCalleeEntryAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\nconst MSG_SEND_METHOD: string = 'funA';\nconst CONST_NUMBER_1: number = 1;\n\nclass MyParcelable implements rpc.Parcelable {\n  num: number;\n  str: string;\n\n  constructor(num: number, str: string) {\n    this.num = num;\n    this.str = str;\n  };\n\n  marshalling(messageSequence: rpc.MessageSequence): boolean {\n    messageSequence.writeInt(this.num);\n    messageSequence.writeString(this.str);\n    return true;\n  };\n\n  unmarshalling(messageSequence: rpc.MessageSequence): boolean {\n    this.num = messageSequence.readInt();\n    this.str = messageSequence.readString();\n    return true;\n  };\n}\n\n// 在收到call事件后会触发callee监听的方法\nlet funACall = (data: rpc.MessageSequence): MyParcelable => {\n  // 获取call事件中传递的所有参数\n  let params: Record<string, string> = JSON.parse(data.readString());\n  if (params.formId !== undefined) {\n    let curFormId: string = params.formId;\n    let message: string = params.calleeDetail;\n    hilog.info(DOMAIN_NUMBER, TAG, `UpdateForm formId: ${curFormId}, message: ${message}`);\n    let formData: Record<string, string> = {\n      'calleeDetail': message\n    };\n    let formMsg: formBindingData.FormBindingData = formBindingData.createFormBindingData(formData);\n    formProvider.updateForm(curFormId, formMsg).then((data) => {\n      hilog.info(DOMAIN_NUMBER, TAG, `updateForm success. ${JSON.stringify(data)}`);\n    }).catch((error: BusinessError) => {\n      hilog.error(DOMAIN_NUMBER, TAG, `updateForm failed: ${JSON.stringify(error)}`);\n    });\n  }\n  return new MyParcelable(CONST_NUMBER_1, 'aaa');\n};\n\nexport default class WidgetCalleeEntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    try {\n      // 监听call事件所需的方法\n      this.callee.on(MSG_SEND_METHOD, funACall);\n    } catch (error) {\n      hilog.error(DOMAIN_NUMBER, TAG, `${MSG_SEND_METHOD} register failed with error ${JSON.stringify(error)}`);\n    }\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'Ability onWindowStageCreate');\n\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n} 要拉起UIAbility至后台，需要在module.json5配置文件中，配置ohos.permission.KEEP_BACKGROUND_RUNNING权限。   \"requestPermissions\":[\n      {\n      \"name\": \"ohos.permission.KEEP_BACKGROUND_RUNNING\"\n      }\n    ] 
