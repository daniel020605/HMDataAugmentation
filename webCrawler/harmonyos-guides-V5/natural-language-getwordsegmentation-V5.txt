分词
适用场景
分词的目的是让文本文件的中文、英文、数字内容变成一个一个的单词或者词组，从而为后续的转变为词向量提供基础。使用场景例如搜索引擎会将用户输入的文本分词处理后提取关键词送搜索。
约束与限制
该能力当前不支持模拟器。
开发步骤
 引用相关类添加至工程。import { textProcessing } from '@kit.NaturalLanguageKit';  配置输入文本框和按钮，调用分词textProcessing.getWordSegment接口。let inputText: string = '';\n\nTextInput({ placeholder: '请输入文本' })\n  .height(40)\n  .fontSize(16)\n  .width('90%')\n  .margin(10)\n  .onChange((value: string) => {\n    this.inputText = value;\n  })\n\nButton('获取分词结果')\n  .type(ButtonType.Capsule)\n  .fontColor(Color.White)\n  .width('45%')\n  .margin(10)\n  .onClick(async () => {\n    try {\n      let result = await textProcessing.getWordSegment(this.inputText);\n      this.outputText = this.formatWordSegmentResult(result);\n    } catch (err) {\n      console.error(`getWordSegment errorCode: ${err.code}, errorMessage: ${err.message}`);\n    }\n  })  在界面上展示分词结果。private formatWordSegmentResult(segments: textProcessing.WordSegment[]): string {\n  let output = 'Word Segments:\\n';\n  segments.forEach((segment, index) => {\n    output += `Word[${index}]: ${segment.word}, Tag: ${segment.wordTag}\\n`;\n  });\n  return output;\n}  
开发实例
import { textProcessing } from '@kit.NaturalLanguageKit';\n\n@Entry\n@Component\nstruct Index {\n  private inputText: string = '';\n  @State outputText: string = '';\n\n  build() {\n    Column() {\n      TextInput({ placeholder: '请输入文本' })\n        .height(40)\n        .fontSize(16)\n        .width('90%')\n        .margin(10)\n        .onChange((value: string) => {\n          this.inputText = value;\n        })\n\n      Scroll() {\n        Text(this.outputText)\n          .fontSize(16)\n          .width('90%')\n          .margin(10)\n      }\n      .height('40%')\n\n      //调用分词接口\n      Row() {\n        Button('获取分词结果')\n          .type(ButtonType.Capsule)\n          .fontColor(Color.White)\n          .width('45%')\n          .margin(10)\n          .onClick(async () => {\n            try {\n              let result = await textProcessing.getWordSegment(this.inputText);\n              this.outputText = this.formatWordSegmentResult(result);\n            } catch (err) {\n              console.error(`getWordSegment errorCode: ${err.code}, errorMessage: ${err.message}`);\n            }\n          })\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  //分词结果转义\n  private formatWordSegmentResult(segments: textProcessing.WordSegment[]): string {\n    let output = 'Word Segments:\\n';\n    segments.forEach((segment, index) => {\n      output += `Word[${index}]: ${segment.word}, Tag: ${segment.wordTag}\\n`;\n    });\n    return output;\n  }\n}
