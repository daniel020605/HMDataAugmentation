picker开发指导
picker是滑动选择器组件，类型支持普通选择器、日期选择器、时间选择器、时间日期选择器和多列文本选择器。具体用法请参考picker API。
创建picker组件
在pages/index目录下的hml文件中创建一个picker组件。
<!-- xxx.hml -->\n<div class=\"container\">\n  <picker>    picker  </picker>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%; \n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}
设置picker类型
通过设置picker的type属性来选择滑动选择器类型，如定义picker为日期选择器。
<!-- xxx.hml -->\n<div class=\"container\">\n  <picker id=\"picker_text\" type=\"text\" value=\"{{textvalue}}\"range=\"{{rangetext}}\" class=\"pickertext\" ></picker>\n  <picker id=\"picker_date\" type=\"date\" value=\"{{datevalue}}\" lunarswitch=\"true\" start=\"2002-2-5\" end=\"2030-6-5\" class=\"pickerdate\"></picker>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}\n.pickertext{\n  margin-bottom: 30px;\n}
// xxx.js\nexport default {\n  data: {\n    rangetext:['15', \"20\", \"25\"],\n    textvalue:'Select text',\n    datevalue:'Select date',\n  }\n}
普通选择器设置取值范围时，需要使用数据绑定的方式。
设置时间展现格式
picker的hours属性定义时间的展现格式，可选类型有12小时制和24小时制。
<!-- xxx.hml -->\n<div class=\"container\">\n  <picker id=\"picker_time\" type=\"time\" value=\"12-hour format\" hours=\"12\" onchange=\"timeonchange\"  class=\"pickertime\"></picker>\n  <picker id=\"picker_time\" type=\"time\" value=\"24-hour format\" hours=\"24\" onchange=\"timeonchange\"  class=\"pickertime\"></picker>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}\n.pickertime {\n  margin-bottom:50px;\n  width: 300px;\n  height: 50px;\n}
 hours属性为12：按照12小时制显示，用上午和下午进行区分。 hours属性为24：按照24小时制显示。 
添加响应事件
对picker添加change和cancel事件，来对选择的内容进行确定和取消。
<!-- xxx.hml -->\n<div class=\"container\">\n  <picker id=\"picker_multi\" type=\"multi-text\" value=\"{{multitextvalue}}\" columns=\"3\" range=\"{{multitext}}\" selected=\"\n     {{multitextselect}}\" onchange=\"multitextonchange\" oncancel=\"multitextoncancel\" class=\"pickermuitl\"></picker>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5; \n}\n.pickermuitl {\n  margin-bottom:20px;\n  width: 600px;\n  height: 50px;\n  font-size: 25px;\n  letter-spacing:15px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction';\nexport default {\n  data: {\n    multitext:[[\"a\", \"b\", \"c\"], [\"e\", \"f\", \"g\"], [\"h\", \"i\"]],\n    multitextvalue:'Select multi-line text',\n    multitextselect:[0,0,0],\n  },\n  multitextonchange(e) {\n    this.multitextvalue=e.newValue;\n    promptAction.showToast({ message:\"Multi-column text changed to:\" + e.newValue })\n  },\n  multitextoncancel() {\n    promptAction.showToast({ message:\"multitextoncancel\" })\n  },\n}
场景示例
在本场景中，开发者可以自定义填写当前的健康情况来进行打卡。
<!-- xxx.hml -->\n<div class=\"doc-page\">\n  <text class=\"title\">Health check-in</text>\n  <div class=\"out-container\">\n    <text class=\"txt\">Office:</text>\n    <picker class=\"pick\" focusable=\"true\" type=\"text\" value=\"{{pos}}\" range=\"{{posarr}}\" onchange=\"setPos\"></picker>\n  </div>\n  <divider class=\"dvd\"></divider>\n  <div class=\"out-container\">\n    <text class=\"txt\">Office hours:</text>\n    <picker class=\"pick\" type=\"date\" value=\"{{datevalue}}\"  start=\"2002-2-5\" end=\"2030-6-5\" selected=\"{{dateselect}}\"\n      lunarswitch=\"true\" onchange=\"dateonchange\"></picker>\n  </div>\n  <divider class=\"dvd\"></divider>\n  <div class=\"out-container\">\n    <text class=\"txt\">Having fever or cold symptoms</text>\n    <picker class=\"pick\" type=\"text\" value=\"{{yorn1}}\" range=\"{{yesno}}\" selected=\"1\" onchange=\"isFever\"></picker>\n  </div>\n  <divider class=\"dvd\"></divider>\n  <div class=\"out-container\">\n    <text class=\"txt\">Close contact with someone with COVID-19</text>\n    <picker class=\"pick\" type=\"text\" value=\"{{yorn2}}\" range=\"{{yesno}}\" selected=\"1\" onchange=\"isTouch\"></picker>\n  </div>\n  <div class=\"out-container\">\n    <button value=\"Submit\" style=\"margin-top:100px;width:50%;font-color:#0000ff;height:80px\" onclick=\"showtoast\"></button>\n  </div>\n</div>
/* xxx.css */\n.doc-page {\n  flex-direction: column;\n  background-color: #F1F3F5;\n}\n.title {\n  margin-top: 30px;\n  margin-bottom: 30px;\n  margin-left: 50px;\n  font-weight: bold;\n  color: #0000ff;\n  font-size: 38px;\n}\n.out-container {\n  flex-direction: column;\n  align-items: center;\n}\n.pick {\n  width: 80%;\n  height: 76px;\n  border: 1px solid #0000ff;\n  border-radius: 20px;\n  padding-left: 12px;\n}\n.txt {\n  width: 80%;\n  font-size: 18px;\n  text-align: left;\n  margin-bottom: 12px;\n  margin-left: 12px;\n}\n.dvd {\n  margin-top: 30px;\n  margin-bottom: 30px;\n  margin-left: 80px;\n  margin-right: 80px;\n  color: #6495ED;\n  stroke-width: 6px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction'\nexport default {\n  data: {\n    yorn1:'No',\n    yorn2:'No',\n    pos:'Home',\n    yesno:['Yes', 'No'],\n    posarr:['Home', 'Company'],\n    datevalue:'Select time',\n    datetimeselect:'2012-5-6-11-25',\n    dateselect:'2021-9-17',\n    showbuild:true\n  },\n  onInit() {\n  },\n  isFever(e) {\n    this.yorn1 = e.newValue\n  },\n  isTouch(e) {\n    this.yorn2 = e.newValue\n  },\n  setPos(e) {\n    this.pos = e.newValue\n    if (e.newValue === 'Non-research center') {\n      this.showbuild = false\n    } else {\n      this.showbuild = true\n    }\n  },\n  setbuild(e) {\n    this.build = e.newValue\n  },\n  dateonchange(e) {\n    e.month=e.month+1;\n    this.datevalue = e.year + \"-\" + e.month + \"-\" + e.day;\n    promptAction.showToast({ message:\"date:\"+e.year+\"-\"+e.month+\"-\"+e.day }) \n  },\n  showtoast() {\n    promptAction.showToast({\n      message: 'Submitted.',\n      duration: 2000,\n      gravity: 'center'\n    })\n  }\n}
