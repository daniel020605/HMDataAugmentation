地理围栏开发指导
场景概述
地理围栏就是虚拟地理边界，当设备进入、离开某个特定地理区域时，可以接收自动通知和警告。
目前仅支持圆形围栏，并且依赖GNSS芯片的地理围栏功能，仅在室外开阔区域才能准确识别用户进出围栏事件。
应用场景举例：开发者可以使用地理围栏，在企业周围创建一个区域进行广告定位，在不同的地点，在移动设备上进行有针对性的促销优惠。
接口说明
地理围栏所使用的接口如下，详细说明参见：Location Kit。
表4 地理围栏接口介绍
开发步骤
 使用地理围栏功能，需要有权限ohos.permission.APPROXIMATELY_LOCATION，位置权限申请的方法和步骤见申请位置权限开发指导。 导入geoLocationManager模块、wantAgent模块和BusinessError模块。 import { geoLocationManager } from '@kit.LocationKit';\nimport { wantAgent } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit' 创建WantAgentInfo信息。 场景一：创建拉起Ability的WantAgentInfo信息。 // 通过WantAgentInfo的operationType设置动作类型\nlet wantAgentInfo:wantAgent.WantAgentInfo = {\n    wants: [\n        {\n            deviceId: '',\n            bundleName: 'com.example.myapplication',\n            abilityName: 'EntryAbility',\n            action: '',\n            entities: [],\n            uri: '',\n            parameters: {}\n        }\n    ],\n    operationType: wantAgent.OperationType.START_ABILITY,\n    requestCode: 0,\n    wantAgentFlags:[wantAgent.WantAgentFlags.CONSTANT_FLAG]\n}; 场景二：创建发布公共事件的WantAgentInfo信息。 // 通过WantAgentInfo的operationType设置动作类型\nlet wantAgentInfo:wantAgent.WantAgentInfo = {\n    wants: [\n        {\n            action: 'event_name', // 设置事件名\n            parameters: {},\n        }\n    ],\n    operationType: wantAgent.OperationType.SEND_COMMON_EVENT,\n    requestCode: 0,\n    wantAgentFlags: [wantAgent.WantAgentFlags.CONSTANT_FLAG],\n} 调用getWantAgent()方法进行创建WantAgent。 并且在获取到WantAgent对象之后调用地理围栏接口添加围栏，当设备进入或者退出该围栏时，系统会自动触发WantAgent的动作。 let wantAgentObj : object | undefined = undefined;\n// 创建WantAgent\nwantAgent.getWantAgent(wantAgentInfo, (err, data) => {\n    if (err) {\n      console.error('getWantAgent err=' + JSON.stringify(err));\n      return;\n    }\n    console.info('getWantAgent success');\n    wantAgentObj = data;\n    let requestInfo:geoLocationManager.GeofenceRequest = {'scenario': 0x301, \"geofence\": {\"latitude\": 31.12, \"longitude\": 121.11, \"radius\": 100, \"expiration\": 10000}};\n    try {\n        geoLocationManager.on('gnssFenceStatusChange', requestInfo, wantAgentObj);\n    } catch (err) {\n        console.error(\"errCode:\" + JSON.stringify(err));\n    }\n}); 
