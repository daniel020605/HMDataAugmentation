绘制几何图形 (Shape)
绘制组件用于在页面绘制图形，Shape组件是绘制组件的父组件，父组件中会描述所有绘制组件均支持的通用属性。具体用法请参考Shape。
创建绘制组件
绘制组件可以由以下两种形式创建：
 绘制组件使用Shape作为父组件，实现类似SVG的效果。接口调用为以下形式： Shape(value?: PixelMap) 该接口用于创建带有父组件的绘制组件，其中value用于设置绘制目标，可将图形绘制在指定的PixelMap对象中，若未设置，则在当前绘制目标中进行绘制。 Shape() {\n  Rect().width(300).height(50)\n} 绘制组件单独使用，用于在页面上绘制指定的图形。有7种绘制类型，分别为Circle（圆形）、Ellipse（椭圆形）、Line（直线）、Polyline（折线）、Polygon（多边形）、Path（路径）、Rect（矩形）。以Circle的接口调用为例： Circle(value?: { width?: string | number, height?: string | number }) 该接口用于在页面绘制圆形，其中width用于设置圆形的宽度，height用于设置圆形的高度，圆形直径由宽高最小值确定。 Circle({ width: 150, height: 150 })  
形状视口viewport
viewPort(value: { x?: number | string, y?: number | string, width?: number | string, height?: number | string })
形状视口viewport指定用户空间中的一个矩形，该矩形映射到为关联的SVG元素建立的视区边界。viewport属性的值包含x、y、width和height四个可选参数，x和y表示视区的左上角坐标，width和height表示其尺寸。
以下3个示例讲解viewport具体用法：
 通过形状视口对图形进行放大与缩小。 class tmp{\n  x:number = 0\n  y:number = 0\n  width:number = 75\n  height:number = 75\n}\nlet viep:tmp = new tmp()\n\nclass tmp1{\n  x:number = 0\n  y:number = 0\n  width:number = 300\n  height:number = 300\n}\nlet viep1:tmp1 = new tmp1()\n\n// 画一个宽高都为75的圆\nText('原始尺寸Circle组件')\nCircle({width: 75, height: 75}).fill('#E87361')\n\nRow({space:10}) {\n  Column() {\n    // 创建一个宽高都为150的shape组件，背景色为黄色，一个宽高都为75的viewport。用一个蓝色的矩形来填充viewport，在viewport中绘制一个直径为75的圆。\n    // 绘制结束，viewport会根据组件宽高放大两倍\n    Text('shape内放大的Circle组件')\n    Shape() {\n      Rect().width('100%').height('100%').fill('#0097D4')\n      Circle({width: 75, height: 75}).fill('#E87361')\n    }\n    .viewPort(viep)\n    .width(150)\n    .height(150)\n    .backgroundColor('#F5DC62')\n  }\n  Column() {\n    // 创建一个宽高都为150的shape组件，背景色为黄色，一个宽高都为300的viewport。用一个绿色的矩形来填充viewport，在viewport中绘制一个直径为75的圆。\n    // 绘制结束，viewport会根据组件宽高缩小两倍。\n    Text('Shape内缩小的Circle组件')\n    Shape() {\n      Rect().width('100%').height('100%').fill('#BDDB69')\n      Circle({width: 75, height: 75}).fill('#E87361')\n    }\n    .viewPort(viep1)\n    .width(150)\n    .height(150)\n    .backgroundColor('#F5DC62')\n  }\n}  创建一个宽高都为300的shape组件，背景色为黄色，一个宽高都为300的viewport。用一个蓝色的矩形来填充viewport，在viewport中绘制一个半径为75的圆。 class tmp{\n  x:number = 0\n  y:number = 0\n  width:number = 300\n  height:number = 300\n}\nlet viep:tmp = new tmp()\n\nShape() {\n  Rect().width(\"100%\").height(\"100%\").fill(\"#0097D4\")\n  Circle({ width: 150, height: 150 }).fill(\"#E87361\")\n}\n  .viewPort(viep)\n  .width(300)\n  .height(300)\n  .backgroundColor(\"#F5DC62\")  创建一个宽高都为300的shape组件，背景色为黄色，创建一个宽高都为300的viewport。用一个蓝色的矩形来填充viewport，在viewport中绘制一个半径为75的圆，将viewport向右方和下方各平移150。 class tmp{\n  x:number = -150\n  y:number = -150\n  width:number = 300\n  height:number = 300\n}\nlet viep:tmp = new tmp()\n\nShape() {\n  Rect().width(\"100%\").height(\"100%\").fill(\"#0097D4\")\n  Circle({ width: 150, height: 150 }).fill(\"#E87361\")\n}\n  .viewPort(viep)\n  .width(300)\n  .height(300)\n  .backgroundColor(\"#F5DC62\")  
自定义样式
绘制组件支持通过各种属性对组件样式进行更改。
 通过fill可以设置组件填充区域颜色。 Path()\n  .width(100)\n  .height(100)\n  .commands('M150 0 L300 300 L0 300 Z')\n  .fill(\"#E87361\")\n  .strokeWidth(0)  通过stroke可以设置组件边框颜色。 Path()\n  .width(100)\n  .height(100)\n  .fillOpacity(0)\n  .commands('M150 0 L300 300 L0 300 Z')\n  .stroke(Color.Red)  通过strokeOpacity可以设置边框透明度。 Path()\n  .width(100)\n  .height(100)\n  .fillOpacity(0)\n  .commands('M150 0 L300 300 L0 300 Z')\n  .stroke(Color.Red)\n  .strokeWidth(10)\n  .strokeOpacity(0.2)  通过strokeLineJoin可以设置线条拐角绘制样式。拐角绘制样式分为Bevel(使用斜角连接路径段)、Miter(使用尖角连接路径段)、Round(使用圆角连接路径段)。 Polyline()\n  .width(100)\n  .height(100)\n  .fillOpacity(0)\n  .stroke(Color.Red)\n  .strokeWidth(8)\n  .points([[20, 0], [0, 100], [100, 90]])\n   // 设置折线拐角处为圆弧\n  .strokeLineJoin(LineJoinStyle.Round)  通过strokeMiterLimit设置斜接长度与边框宽度比值的极限值。 斜接长度表示外边框外边交点到内边交点的距离，边框宽度即strokeWidth属性的值。strokeMiterLimit取值需大于等于1，且在strokeLineJoin属性取值LineJoinStyle.Miter时生效。 Polyline()\n  .width(100)\n  .height(100)\n  .fillOpacity(0)\n  .stroke(Color.Red)\n  .strokeWidth(10)\n  .points([[20, 0], [20, 100], [100, 100]])\n  // 设置折线拐角处为尖角\n  .strokeLineJoin(LineJoinStyle.Miter)\n  // 设置斜接长度与线宽的比值\n  .strokeMiterLimit(1/Math.sin(45))\nPolyline()\n  .width(100)\n  .height(100)\n  .fillOpacity(0)\n  .stroke(Color.Red)\n  .strokeWidth(10)\n  .points([[20, 0], [20, 100], [100, 100]])\n  .strokeLineJoin(LineJoinStyle.Miter)\n  .strokeMiterLimit(1.42)  通过antiAlias设置是否开启抗锯齿，默认值为true（开启抗锯齿）。 //开启抗锯齿\nCircle()\n  .width(150)\n  .height(200)\n  .fillOpacity(0)\n  .strokeWidth(5)\n  .stroke(Color.Black)  //关闭抗锯齿\nCircle()\n  .width(150)\n  .height(200)\n  .fillOpacity(0)\n  .strokeWidth(5)\n  .stroke(Color.Black)\n  .antiAlias(false)  
场景示例
[h2]绘制封闭路径
在Shape的(-80, -5)点绘制一个封闭路径，填充颜色0x317AF7，线条宽度3，边框颜色红色，拐角样式锐角（默认值）。
@Entry\n@Component\nstruct ShapeExample {\n  build() {\n    Column({ space: 10 }) {\n      Shape() {\n        Path().width(200).height(60).commands('M0 0 L400 0 L400 150 Z')\n      }\n      .viewPort({ x: -80, y: -5, width: 500, height: 300 })\n      .fill(0x317AF7)\n      .stroke(Color.Red)\n      .strokeWidth(3)\n      .strokeLineJoin(LineJoinStyle.Miter)\n      .strokeMiterLimit(5)\n    }.width('100%').margin({ top: 15 })\n  }\n}
[h2]绘制圆和圆环
绘制一个直径为150的圆，和一个直径为150、线条为红色虚线的圆环（宽高设置不一致时以短边为直径）。
@Entry\n@Component\nstruct CircleExample {\n  build() {\n    Column({ space: 10 }) {\n      //绘制一个直径为150的圆\n      Circle({ width: 150, height: 150 })\n      //绘制一个直径为150、线条为红色虚线的圆环\n      Circle()\n        .width(150)\n        .height(200)\n        .fillOpacity(0)\n        .strokeWidth(3)\n        .stroke(Color.Red)\n        .strokeDashArray([1, 2])\n    }.width('100%')\n  }\n}
