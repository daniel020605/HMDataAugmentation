使用SM2非对称密钥加解密
对应的算法规格请查看非对称密钥加解密算法规格：SM2。
加密
 调用cryptoFramework.createAsyKeyGenerator、AsyKeyGenerator.generateKeyPair，生成RSA密钥类型为SM2_256的非对称密钥对（KeyPair）。KeyPair对象中包括公钥PubKey、私钥PriKey。 如何生成SM2非对称密钥对，开发者可参考下文示例，并结合非对称密钥生成和转换规格：SM2和随机生成非对称密钥对理解，参考文档与当前示例可能存在入参差异，请在阅读时注意区分。 调用cryptoFramework.createCipher，指定字符串参数'SM2_256|SM3'，创建非对称密钥类型为SM2_256、摘要算法为SM3的Cipher实例，用于完成加解密操作。 调用Cipher.init，设置模式为加密（CryptoMode.ENCRYPT_MODE），指定加密密钥（KeyPair.PubKey），初始化加密Cipher实例。 非对称密钥无加密参数，直接传入null。 调用Cipher.doFinal，传入明文，获取加密后的数据。  doFinal输出结果可能为null，在访问具体数据前，需要先判断结果是否为null，避免产生异常。 当数据量较大时，可以多次调用doFinal，即分段加解密。  
解密
 由于SM2算法的Cipher实例不支持重复init操作，需要调用cryptoFramework.createCipher，重新生成Cipher实例。 调用Cipher.init，设置模式为解密（CryptoMode.DECRYPT_MODE），指定解密密钥（KeyPair.PriKey）初始化解密Cipher实例。SM2无加密参数，直接传入null。 调用Cipher.doFinal，传入密文，获取解密后的数据。 
 异步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\n// 加密消息\nasync function encryptMessagePromise(publicKey: cryptoFramework.PubKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('SM2_256|SM3');\n  await cipher.init(cryptoFramework.CryptoMode.ENCRYPT_MODE, publicKey, null);\n  let encryptData = await cipher.doFinal(plainText);\n  return encryptData;\n}\n// 解密消息\nasync function decryptMessagePromise(privateKey: cryptoFramework.PriKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('SM2_256|SM3');\n  await decoder.init(cryptoFramework.CryptoMode.DECRYPT_MODE, privateKey, null);\n  let decryptData = await decoder.doFinal(cipherText);\n  return decryptData;\n}\n// 生成SM2密钥对\nasync function genKeyPairByData(pubKeyData: Uint8Array, priKeyData: Uint8Array) {\n  let pubKeyBlob: cryptoFramework.DataBlob = { data: pubKeyData };\n  let priKeyBlob: cryptoFramework.DataBlob = { data: priKeyData };\n  let sm2Generator = cryptoFramework.createAsyKeyGenerator('SM2_256');\n  let keyPair = await sm2Generator.convertKey(pubKeyBlob, priKeyBlob);\n  console.info('convertKey success');\n  return keyPair;\n}\nasync function main() {\n  let pkData = new Uint8Array([48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 129, 28, 207, 85, 1, 130, 45, 3, 66, 0, 4, 90, 3, 58, 157, 190, 248, 76, 7, 132, 200, 151, 208, 112, 230, 96, 140, 90, 238, 211, 155, 128, 109, 248, 40, 83, 214, 78, 42, 104, 106, 55, 148, 249, 35, 61, 32, 221, 135, 143, 100, 45, 97, 194, 176, 52, 73, 136, 174, 40, 70, 70, 34, 103, 103, 161, 99, 27, 187, 13, 187, 109, 244, 13, 7]);\n  let skData = new Uint8Array([48, 49, 2, 1, 1, 4, 32, 54, 41, 239, 240, 63, 188, 134, 113, 31, 102, 149, 203, 245, 89, 15, 15, 47, 202, 170, 60, 38, 154, 28, 169, 189, 100, 251, 76, 112, 223, 156, 159, 160, 10, 6, 8, 42, 129, 28, 207, 85, 1, 130, 45]);\n  let keyPair = await genKeyPairByData(pkData, skData);\n  let pubKey = keyPair.pubKey;\n  let priKey = keyPair.priKey;\n  let message = 'This is a test';\n  // 把字符串按utf-8解码为Uint8Array\n  let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n  let encryptText = await encryptMessagePromise(pubKey, plainText);\n  let decryptText = await decryptMessagePromise(priKey, encryptText);\n  if (plainText.data.toString() === decryptText.data.toString()) {\n    console.info('decrypt ok');\n    // 把Uint8Array按utf-8编码为字符串\n    let messageDecrypted = buffer.from(decryptText.data).toString('utf-8');\n    console.info('decrypted result string:' + messageDecrypted);\n  } else {\n    console.error('decrypt failed');\n  }\n} 同步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\n// 加密消息\nfunction encryptMessage(publicKey: cryptoFramework.PubKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('SM2_256|SM3');\n  cipher.initSync(cryptoFramework.CryptoMode.ENCRYPT_MODE, publicKey, null);\n  let encryptData = cipher.doFinalSync(plainText);\n  return encryptData;\n}\n// 解密消息\nfunction decryptMessage(privateKey: cryptoFramework.PriKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('SM2_256|SM3');\n  decoder.initSync(cryptoFramework.CryptoMode.DECRYPT_MODE, privateKey, null);\n  let decryptData = decoder.doFinalSync(cipherText);\n  return decryptData;\n}\n// 生成SM2密钥对\nfunction genKeyPairByData(pubKeyData: Uint8Array, priKeyData: Uint8Array) {\n  let pubKeyBlob: cryptoFramework.DataBlob = { data: pubKeyData };\n  let priKeyBlob: cryptoFramework.DataBlob = { data: priKeyData };\n  let sm2Generator = cryptoFramework.createAsyKeyGenerator('SM2_256');\n  let keyPair = sm2Generator.convertKeySync(pubKeyBlob, priKeyBlob);\n  console.info('convertKeySync success');\n  return keyPair;\n}\nfunction main() {\n  let pkData = new Uint8Array([48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 129, 28, 207, 85, 1, 130, 45, 3, 66, 0, 4, 90, 3, 58, 157, 190, 248, 76, 7, 132, 200, 151, 208, 112, 230, 96, 140, 90, 238, 211, 155, 128, 109, 248, 40, 83, 214, 78, 42, 104, 106, 55, 148, 249, 35, 61, 32, 221, 135, 143, 100, 45, 97, 194, 176, 52, 73, 136, 174, 40, 70, 70, 34, 103, 103, 161, 99, 27, 187, 13, 187, 109, 244, 13, 7]);\n  let skData = new Uint8Array([48, 49, 2, 1, 1, 4, 32, 54, 41, 239, 240, 63, 188, 134, 113, 31, 102, 149, 203, 245, 89, 15, 15, 47, 202, 170, 60, 38, 154, 28, 169, 189, 100, 251, 76, 112, 223, 156, 159, 160, 10, 6, 8, 42, 129, 28, 207, 85, 1, 130, 45]);\n  let keyPair = genKeyPairByData(pkData, skData);\n  let pubKey = keyPair.pubKey;\n  let priKey = keyPair.priKey;\n  let message = 'This is a test';\n  // 把字符串按utf-8解码为Uint8Array\n  let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n  let encryptText = encryptMessage(pubKey, plainText);\n  let decryptText = decryptMessage(priKey, encryptText);\n  if (plainText.data.toString() === decryptText.data.toString()) {\n    console.info('decrypt ok');\n    // 把Uint8Array按utf-8编码为字符串\n    let messageDecrypted = buffer.from(decryptText.data).toString('utf-8');\n    console.info('decrypted result string:' + messageDecrypted);\n  } else {\n    console.error('decrypt failed');\n  }\n} 
