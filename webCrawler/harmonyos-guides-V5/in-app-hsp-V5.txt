HSP
HSP（Harmony Shared Package）是动态共享包，可以包含代码、C++库、资源和配置文件，通过HSP可以实现代码和资源的共享。HSP不支持独立发布，而是跟随其宿主应用的APP包一起发布，与宿主应用同进程，具有相同的包名和生命周期。
应用内HSP：在编译过程中与应用包名（bundleName）强耦合，只能给某个特定的应用使用。
集成态HSP：构建、发布过程中，不与特定的应用包名耦合；使用时，工具链支持自动将集成态HSP的包名替换成宿主应用包名。
使用场景
 多个HAP/HSP共用的代码和资源放在同一个HSP中，可以提高代码、资源的可重用性和可维护性，同时编译打包时也只保留一份HSP代码和资源，能够有效控制应用包大小。 HSP在运行时按需加载，有助于提升应用性能。 同一个组织内部的多个应用之间，可以使用集成态HSP实现代码和资源的共享。 
约束限制
 HSP不支持在设备上单独安装/运行，需要与依赖该HSP的HAP一起安装/运行。HSP的版本号必须与HAP版本号一致。 HSP不支持在配置文件中声明ExtensionAbility组件，但支持UIAbility（除入口ability外）组件。 HSP可以依赖其他HAR或HSP，但不支持循环依赖，也不支持依赖传递。 
创建
通过DevEco Studio创建一个HSP模块，详见创建HSP模块，我们以创建一个名为library的HSP模块为例。基本的工程目录结构如下：
MyApplication\n├── library\n│   ├── src\n│   │   └── main\n│   │       ├── ets\n│   │       │   └── pages\n│   │       │       └── index.ets\n│   │       ├── resources\n│   │       └── module.json5\n│   ├── oh-package.json5\n│   ├── index.ets\n│   └── build-profile.json5 //模块级\n└── build-profile.json5     //工程级
开发
介绍如何导出HSP的ArkUI组件、接口、资源，供应用内的其他HAP/HSP引用。
[h2]导出ArkUI组件
ArkUI组件可以通过export导出，例如：
// library/src/main/ets/components/MyTitleBar.ets\n@Component\nexport struct MyTitleBar {\n  build() {\n    Row() {\n      Text($r('app.string.library_title'))\n        .id('library')\n        .fontFamily('HarmonyHeiTi')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(32)\n        .fontColor($r('app.color.text_color'))\n    }\n    .width('100%')\n  }\n}
对外暴露的接口，需要在入口文件index.ets中声明：
// library/index.ets\nexport { MyTitleBar } from './src/main/ets/components/MyTitleBar';
[h2]导出ts类和方法
通过export导出ts类和方法，例如：
// library/src/main/ets/utils/test.ets\nexport class Log {\n  static info(msg: string): void {\n    console.info(msg);\n  }\n}\n\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\nexport function minus(a: number, b: number): number {\n  return a - b;\n}
对外暴露的接口，需要在入口文件index.ets中声明：
// library/index.ets\nexport { Log, add, minus } from './src/main/ets/utils/test';
[h2]导出native方法
在HSP中也可以包含C++编写的so。对于so中的native方法，HSP通过间接的方式导出，以导出liblibrary.so的乘法接口multi为例：
// library/src/main/ets/utils/nativeTest.ets\nimport native from 'liblibrary.so';\n\nexport function nativeMulti(a: number, b: number): number {\n  let result: number = native.multi(a, b);\n  return result;\n}
对外暴露的接口，需要在入口文件index.ets中声明：
// library/index.ets\nexport { nativeMulti } from './src/main/ets/utils/nativeTest';
[h2]通过$r访问HSP中的资源
在组件中，经常需要使用字符串、图片等资源。HSP中的组件需要使用资源时，一般将其所用资源放在HSP包内，而非放在HSP的使用方处，以符合高内聚低耦合的原则。
在工程中，常通过$r/$rawfile的形式引用应用资源。可以用$r/$rawfile访问本模块resources目录下的资源，如访问resources目录下定义的图片src/main/resources/base/media/example.png时，可以用$r(\"app.media.example\")。有关$r/$rawfile的详细使用方式，请参阅文档资源分类与访问中“资源访问-应用资源”小节。
不推荐使用相对路径的方式，容易引用错误路径。例如：
当要引用上述同一图片资源时，在HSP模块中使用Image(\"../../resources/base/media/example.png\")，实际上该Image组件访问的是HSP调用方（如entry）下的资源entry/src/main/resources/base/media/example.png。
// library/src/main/ets/pages/Index.ets\n// 正确用例\nImage($r('app.media.example'))\n  .id('example')\n  .borderRadius('48px')\n// 错误用例\nImage(\"../../resources/base/media/example.png\")\n  .id('example')\n  .borderRadius('48px')
[h2]导出HSP中的资源
跨包访问HSP内资源时，推荐实现一个资源管理类，以封装对外导出的资源。采用这种方式，具有如下优点：
 HSP开发者可以控制自己需要导出的资源，不需要对外暴露的资源可以不用导出。 使用方无须感知HSP内部的资源名称。当HSP内部的资源名称发生变化时，也不需要使用方跟着修改。 
其具体实现如下：
将需要对外提供的资源封装为一个资源管理类：
// library/src/main/ets/ResManager.ets\nexport class ResManager{\n  static getPic(): Resource{\n    return $r('app.media.pic');\n  }\n  static getDesc(): Resource{\n    return $r('app.string.shared_desc');\n  }\n}
对外暴露的接口，需要在入口文件index.ets中声明：
// library/index.ets\nexport { ResManager } from './src/main/ets/ResManager';
使用
介绍如何引用HSP中的接口，以及如何通过页面路由实现HSP的pages页面跳转与返回。
[h2]引用HSP中的接口
要使用HSP中的接口，首先需要在使用方的oh-package.json5中配置对它的依赖，详见引用动态共享包。
依赖配置成功后，就可以像使用HAR一样调用HSP的对外接口了。例如，上面的library已经导出了下面这些接口：
// library/index.ets\nexport { Log, add, minus } from './src/main/ets/utils/test';\nexport { MyTitleBar } from './src/main/ets/components/MyTitleBar';\nexport { ResManager } from './src/main/ets/ResManager';\nexport { nativeMulti } from './src/main/ets/utils/nativeTest';
在使用方的代码中，可以这样使用：
// entry/src/main/ets/pages/index.ets\nimport { Log, add, MyTitleBar, ResManager, nativeMulti } from 'library';\nimport { BusinessError } from '@ohos.base';\nimport router from '@ohos.router';\n\nconst TAG = 'Index';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '';\n\n  build() {\n    Column() {\n      List() {\n        ListItem() {\n          MyTitleBar()\n        }\n        .margin({ left: '35px', top: '32px' })\n\n        ListItem() {\n          Text(this.message)\n            .fontFamily('HarmonyHeiTi')\n            .fontSize(18)\n            .textAlign(TextAlign.Start)\n            .width('100%')\n            .fontWeight(FontWeight.Bold)\n        }\n        .width('685px')\n        .margin({ top: 30, bottom: 10 })\n\n        ListItem() {\n          // ResManager返回的Resource对象，可以传给组件直接使用，也可以从中取出资源来使用\n          Image(ResManager.getPic())\n            .id('image')\n            .borderRadius('48px')\n        }\n        .width('685px')\n        .margin({ top: 10, bottom: 10 })\n        .padding({ left: 12, right: 12, top: 4, bottom: 4 })\n\n        ListItem() {\n          Text($r('app.string.add'))\n            .fontSize(18)\n            .textAlign(TextAlign.Start)\n            .width('100%')\n            .fontWeight(500)\n            .height('100%')\n        }\n        .id('add')\n        .borderRadius(24)\n        .width('685px')\n        .height('84px')\n        .backgroundColor($r('sys.color.ohos_id_color_foreground_contrary'))\n        .margin({ top: 10, bottom: 10 })\n        .padding({ left: 12, right: 12, top: 4, bottom: 4 })\n        .onClick(() => {\n          Log.info('add button click!');\n          this.message = 'result: ' + add(1, 2);\n        })\n\n        ListItem() {\n          Text($r('app.string.get_string_value'))\n            .fontSize(18)\n            .textAlign(TextAlign.Start)\n            .width('100%')\n            .fontWeight(500)\n            .height('100%')\n        }\n        .id('getStringValue')\n        .borderRadius(24)\n        .width('685px')\n        .height('84px')\n        .backgroundColor($r('sys.color.ohos_id_color_foreground_contrary'))\n        .margin({ top: 10, bottom: 10 })\n        .padding({ left: 12, right: 12, top: 4, bottom: 4 })\n        .onClick(() => {\n          // 先通过当前上下文获取hsp模块的上下文，再获取hsp模块的resourceManager，然后再调用resourceManager的接口获取资源\n          getContext()\n            .createModuleContext('library')\n            .resourceManager\n            .getStringValue(ResManager.getDesc())\n            .then(value => {\n              console.log('getStringValue is ' + value);\n              this.message = 'getStringValue is ' + value;\n            })\n            .catch((err: BusinessError) => {\n              console.error('getStringValue promise error is ' + err);\n            });\n        })\n\n        ListItem() {\n          Text($r('app.string.native_multi'))\n            .fontSize(18)\n            .textAlign(TextAlign.Start)\n            .width('100%')\n            .fontWeight(500)\n            .height('100%')\n        }\n        .id('nativeMulti')\n        .borderRadius(24)\n        .width('685px')\n        .height('84px')\n        .backgroundColor($r('sys.color.ohos_id_color_foreground_contrary'))\n        .margin({ top: 10, bottom: 10 })\n        .padding({ left: 12, right: 12, top: 4, bottom: 4 })\n        .onClick(() => {\n          Log.info('nativeMulti button click!');\n          this.message = 'result: ' + nativeMulti(3, 4);\n        })\n      }\n      .alignListItem(ListItemAlign.Center)\n    }\n    .width('100%')\n    .backgroundColor($r('app.color.page_background'))\n    .height('100%')\n  }\n}
[h2]页面路由跳转
若开发者想在entry模块中，添加一个按钮跳转至library模块中的menu页面（路径为：library/src/main/ets/pages/menu.ets），那么可以在使用方的代码（entry模块下的Index.ets，路径为：entry/src/main/ets/pages/Index.ets）里这样使用：
import { Log, add, MyTitleBar, ResManager, nativeMulti } from 'library';\nimport { BusinessError } from '@ohos.base';\nimport router from '@ohos.router';\n\nconst TAG = 'Index';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '';\n\n  build() {\n    Column() {\n      List() {\n        ListItem() {\n          Text($r('app.string.click_to_menu'))\n            .fontSize(18)\n            .textAlign(TextAlign.Start)\n            .width('100%')\n            .fontWeight(500)\n            .height('100%')\n        }\n        .id('clickToMenu')\n        .borderRadius(24)\n        .width('685px')\n        .height('84px')\n        .backgroundColor($r('sys.color.ohos_id_color_foreground_contrary'))\n        .margin({ top: 10, bottom: 10 })\n        .padding({ left: 12, right: 12, top: 4, bottom: 4 })\n        .onClick(() => {\n          router.pushUrl({\n            url: '@bundle:com.samples.hspsample/library/ets/pages/Menu'\n          }).then(() => {\n            console.log('push page success');\n          }).catch((err: BusinessError) => {\n            console.error('pushUrl failed, code is' + err.code + ', message is' + err.message);\n          })\n        })\n      }\n      .alignListItem(ListItemAlign.Center)\n    }\n    .width('100%')\n    .backgroundColor($r('app.color.page_background'))\n    .height('100%')\n  }\n}
其中router.pushUrl方法的入参中url的内容为：
'@bundle:com.samples.hspsample/library/ets/pages/Menu'
url内容的模板为：
'@bundle:包名（bundleName）/模块名（moduleName）/路径/页面所在的文件名(不加.ets后缀)'
[h2]页面路由返回
如果当前处于HSP中的页面，需要返回之前的页面时，可以使用router.back方法，但是返回的页面必须是当前页面跳转路径上的页面。
import router from '@ohos.router';\n\n@Entry\n@Component\nstruct Index3 { // 路径为：`library/src/main/ets/pages/Back.ets\n  @State message: string = 'HSP back page';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontFamily('HarmonyHeiTi')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(32)\n          .fontColor($r('app.color.text_color'))\n          .margin({ top: '32px' })\n          .width('624px')\n\n        Button($r('app.string.back_to_HAP'))\n          .id('backToHAP')\n          .fontFamily('HarmonyHeiTi')\n          .height(48)\n          .width('624px')\n          .margin({ top: 550 })\n          .type(ButtonType.Capsule)\n          .borderRadius($r('sys.float.ohos_id_corner_radius_button'))\n          .backgroundColor($r('app.color.button_background'))\n          .fontColor($r('sys.color.ohos_id_color_foreground_contrary'))\n          .fontSize($r('sys.float.ohos_id_text_size_button1'))\n            // 绑定点击事件\n          .onClick(() => {\n            router.back({ //  返回HAP的页面\n              url: 'pages/Index' // 路径为：`entry/src/main/ets/pages/Index.ets`\n            })\n          })\n\n        Button($r('app.string.back_to_HSP'))\n          .id('backToHSP')\n          .fontFamily('HarmonyHeiTi')\n          .height(48)\n          .width('624px')\n          .margin({ top: '4%' , bottom: '6%' })\n          .type(ButtonType.Capsule)\n          .borderRadius($r('sys.float.ohos_id_corner_radius_button'))\n          .backgroundColor($r('app.color.button_background'))\n          .fontColor($r('sys.color.ohos_id_color_foreground_contrary'))\n          .fontSize($r('sys.float.ohos_id_text_size_button1'))\n            // 绑定点击事件\n          .onClick(() => {\n            router.back({ //  返回HSP的页面\n              url: '@bundle:com.samples.hspsample/library/ets/pages/Menu' //路径为：`library/src/main/ets/pages/Menu.ets\n            })\n          })\n      }\n      .width('100%')\n    }\n    .backgroundColor($r('app.color.page_background'))\n    .height('100%')\n  }\n}
页面返回router.back方法的入参中url说明：
 如果从HSP页面返回HAP页面，url的内容为： 'pages/Index' url内容的模板为： '页面所在的文件名(不加.ets后缀)' 如果从HSP1的页面跳到HSP2的页面后，需要返回到HSP1的页面，url的内容为： '@bundle:com.samples.hspsample/library/ets/pages/Menu' url内容的模板为： '@bundle:包名（bundleName）/模块名（moduleName）/路径/页面所在的文件名(不加.ets后缀)' 
