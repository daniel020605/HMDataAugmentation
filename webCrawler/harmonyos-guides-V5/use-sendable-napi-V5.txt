Native与Sendable ArkTS对象绑定
场景介绍
通过napi_wrap_sendable将Sendable ArkTS对象与Native的C++对象绑定，后续操作时再通过napi_unwrap_sendable将ArkTS对象绑定的C++对象取出，并对其进行操作。
使用示例
接口声明、编译配置以及模块注册  接口声明 // index.d.ets\n@Sendable\nexport class MyObject {\nconstructor(arg: number);\nplusOne(): number;\n\npublic get value();\npublic set value(newVal: number);\n}  编译配置 # the minimum version of CMake.\ncmake_minimum_required(VERSION 3.5.0)\nproject(napi_wrap_sendable_demo)\n\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\n\nif(DEFINED PACKAGE_FIND_FILE)\n    include(${PACKAGE_FIND_FILE})\nendif()\n\ninclude_directories(${NATIVERENDER_ROOT_PATH}\n                    ${NATIVERENDER_ROOT_PATH}/include)\n\nadd_definitions(\"-DLOG_DOMAIN=0x0000\")\nadd_definitions(\"-DLOG_TAG=\\\"testTag\\\"\")\n\nadd_library(entry SHARED napi_init.cpp)\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so)  模块注册 // napi_init.cpp\n#include \"napi/native_api.h\"\n#include \"hilog/log.h\"\n\n// 一个native类，它的实例在下面会包装在Sendable ArkTS对象中\nclass MyObject {\npublic:\n    static napi_value Init(napi_env env, napi_value exports);\n    static void Destructor(napi_env env, void *nativeObject, void *finalize_hint);\n\nprivate:\n    explicit MyObject(double value_ = 0);\n    ~MyObject();\n\n    static napi_value New(napi_env env, napi_callback_info info);\n    static napi_value GetValue(napi_env env, napi_callback_info info);\n    static napi_value SetValue(napi_env env, napi_callback_info info);\n    static napi_value PlusOne(napi_env env, napi_callback_info info);\n\n    double value_;\n    napi_env env_;\n};\n\nstatic thread_local napi_ref g_ref = nullptr;\n\nMyObject::MyObject(double value) : value_(value), env_(nullptr) {}\n\nMyObject::~MyObject() {}\n\nvoid MyObject::Destructor(napi_env env, void *nativeObject, [[maybe_unused]] void *finalize_hint) {\n    OH_LOG_INFO(LOG_APP, \"MyObject::Destructor called\");\n    reinterpret_cast<MyObject *>(nativeObject)->~MyObject();\n}\n\nnapi_value MyObject::Init(napi_env env, napi_value exports) {\n    napi_value num;\n    napi_create_double(env, 0, &num);\n    napi_property_descriptor properties[] = {\n        {\"value\", nullptr, nullptr, GetValue, SetValue, nullptr, napi_default, nullptr},\n        {\"plusOne\", nullptr, PlusOne, nullptr, nullptr, nullptr, napi_default, nullptr},\n    };\n\n    napi_value cons;\n    // 定义一个Sendable class MyObject\n    napi_define_sendable_class(env, \"MyObject\", NAPI_AUTO_LENGTH, New, nullptr,\n                            sizeof(properties) / sizeof(properties[0]), properties, nullptr, &cons);\n\n    napi_create_reference(env, cons, 1, &g_ref);\n    // 在exports对象上挂载MyObject类\n    napi_set_named_property(env, exports, \"MyObject\", cons);\n    return exports;\n}\n\nEXTERN_C_START\n// 模块初始化\nstatic napi_value Init(napi_env env, napi_value exports) {\n    MyObject::Init(env, exports);\n    return exports;\n}\nEXTERN_C_END\n\n// 准备模块加载相关信息，将上述Init函数与本模块名等信息记录下来。\nstatic napi_module nativeModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = nullptr,\n    .reserved = {0},\n};\n\n// 加载so时，该函数会自动被调用，将上述nativeModule模块注册到系统中。\nextern \"C\" __attribute__((constructor)) void RegisterObjectWrapModule() { napi_module_register(&nativeModule); } 在构造函数中绑定Sendable ArkTS与C++对象 napi_value MyObject::New(napi_env env, napi_callback_info info) {\n    OH_LOG_INFO(LOG_APP, \"MyObject::New called\");\n\n    napi_value newTarget;\n    napi_get_new_target(env, info, &newTarget);\n    if (newTarget != nullptr) {\n        // 使用`new MyObject(...)`调用方式\n        size_t argc = 1;\n        napi_value args[1];\n        napi_value jsThis;\n        napi_get_cb_info(env, info, &argc, args, &jsThis, nullptr);\n\n        double value = 0.0;\n        napi_valuetype valuetype;\n        napi_typeof(env, args[0], &valuetype);\n        if (valuetype != napi_undefined) {\n            napi_get_value_double(env, args[0], &value);\n        }\n\n        MyObject *obj = new MyObject(value);\n\n        obj->env_ = env;\n        // 通过napi_wrap_sendable将Sendable ArkTS对象jsThis与C++对象obj绑定\n        napi_wrap_sendable(env, jsThis, reinterpret_cast<void *>(obj), MyObject::Destructor, nullptr);\n\n        return jsThis;\n    } else {\n        // 使用`MyObject(...)`调用方式\n        size_t argc = 1;\n        napi_value args[1];\n        napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n        napi_value cons;\n        napi_get_reference_value(env, g_ref, &cons);\n        napi_value instance;\n        napi_new_instance(env, cons, argc, args, &instance);\n\n        return instance;\n    }\n} 将Sendable ArkTS对象之前绑定的C++对象取出，并对其进行操作 napi_value MyObject::GetValue(napi_env env, napi_callback_info info) {\n    OH_LOG_INFO(LOG_APP, \"MyObject::GetValue called\");\n\n    napi_value jsThis;\n    napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr);\n\n    MyObject *obj;\n    // 通过napi_unwrap_sendable将jsThis之前绑定的C++对象取出，并对其进行操作\n    napi_unwrap_sendable(env, jsThis, reinterpret_cast<void **>(&obj));\n    napi_value num;\n    napi_create_double(env, obj->value_, &num);\n\n    return num;\n}\n\nnapi_value MyObject::SetValue(napi_env env, napi_callback_info info) {\n    OH_LOG_INFO(LOG_APP, \"MyObject::SetValue called\");\n\n    size_t argc = 1;\n    napi_value value;\n    napi_value jsThis;\n\n    napi_get_cb_info(env, info, &argc, &value, &jsThis, nullptr);\n\n    MyObject *obj;\n    // 通过napi_unwrap_sendable将jsThis之前绑定的C++对象取出，并对其进行操作\n    napi_unwrap_sendable(env, jsThis, reinterpret_cast<void **>(&obj));\n    napi_get_value_double(env, value, &obj->value_);\n\n    return nullptr;\n}\n\nnapi_value MyObject::PlusOne(napi_env env, napi_callback_info info) {\n    OH_LOG_INFO(LOG_APP, \"MyObject::PlusOne called\");\n\n    napi_value jsThis;\n    napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr);\n\n    MyObject *obj;\n    // 通过napi_unwrap_sendable将jsThis之前绑定的C++对象取出，并对其进行操作\n    napi_unwrap_sendable(env, jsThis, reinterpret_cast<void **>(&obj));\n    obj->value_ += 1;\n    napi_value num;\n    napi_create_double(env, obj->value_, &num);\n\n    return num;\n} ArkTS侧示例代码 import hilog from '@ohos.hilog';\nimport { MyObject } from 'libentry.so';\n\nlet object : MyObject = new MyObject(0);\nobject.value = 1023;\nhilog.info(0x0000, 'testTag', 'MyObject value after set: %{public}d', object.value);\nhilog.info(0x0000, 'testTag', 'MyObject plusOne: %{public}d', object.plusOne()); 
