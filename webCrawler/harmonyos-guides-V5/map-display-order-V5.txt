设置地图元素压盖顺序
场景介绍
本章节将向您介绍如何设置地图和各种覆盖物元素的层级压盖关系。
设置地图元素的显示顺序，按照从低到高排列，即后面的覆盖物会压盖前面的覆盖物。
枚举
枚举值
枚举含义
OVERLAY
1
覆盖物，包括MapCircle、MapPolygon、MapPolyline、MapArc、ImageOverlay、TraceOverlay。
POI
2
底图Poi。
CUSTOM_POI
3
支持碰撞的覆盖物，包括PointAnnotation、Bubble。
MARKER
4
包括Marker、ClusterOverlay。
接口说明
设置层级压盖关系功能主要由MapElementType、setDisplayOrder提供，更多接口及使用方法请参见接口文档。
接口名
描述
mapCommon.MapElementType
地图元素类型。
setDisplayOrder(types: Array<mapCommon.MapElementType>): void
设置地图元素的显示顺序。
开发步骤
 导入相关模块。import { mapCommon, map, MapComponent } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit'; 设置地图元素层级压盖关系。@Entry\n@Component\nstruct MarkerDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private mapController?: map.MapComponentController;\n  private callback?: AsyncCallback<map.MapComponentController>;\n  private mapEventManager?: map.MapEventManager;\n  private marker?: map.Marker;\n  private bubble?: map.Bubble;\n\n  aboutToAppear(): void {\n    // 地图初始化参数\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 31.984410259206815,\n          longitude: 118.26625379397866\n        },\n        zoom: 10\n      }\n    };\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n        this.mapEventManager = this.mapController.getEventManager();\n        // Marker初始化参数\n        let markerOptions: mapCommon.MarkerOptions = {\n          position: {\n            latitude: 31.984410259206815,\n            longitude: 118.26625379397866\n          },\n          rotation: 0,\n          visible: true,\n          zIndex: 0,\n          alpha: 1,\n          anchorU: 0.5,\n          anchorV: 1,\n          clickable: true,\n          draggable: true,\n          flat: false\n        };\n        // 创建Marker\n        this.marker = await this.mapController.addMarker(markerOptions);\n        let bubbleOptions: mapCommon.BubbleParams = {\n          // 气泡位置\n          positions: [[{ latitude: 32.384410259206815, longitude: 118.26625379397866 }]],\n          // 设置图标，必须提供4个方向的图标，图标存放在resources/rawfile\n          icons: [\n            'speed_limit_10.png',\n            'speed_limit_20.png',\n            'speed_limit_30.png',\n            'speed_limit_40.png'\n          ],\n          // 定义气泡的显示属性，为true时，在被碰撞后仍能显示\n          forceVisible: true,\n          // 定义气泡碰撞优先级，数值越大，优先级越低\n          priority: 3,\n          // 定义气泡展示的最小层级\n          minZoom: 2,\n          // 定义气泡展示的最大层级\n          maxZoom: 20,\n          // 定义气泡是否可见\n          visible: true,\n          // 定义气泡叠加层级属性\n          zIndex: 1\n        }\n        // 添加气泡\n        this.bubble = await this.mapController.addBubble(bubbleOptions);\n        let imageOverlayParams: mapCommon.ImageOverlayParams = {\n          // 覆盖物范围\n          bounds: {\n            southwest: { latitude: 32, longitude: 118 },\n            northeast: { latitude: 32.4, longitude: 118.4 }\n          },\n          // 覆盖物图片\n          image: 'icon/icon.png',\n          transparency: 0.3,\n          zIndex: 101,\n          anchorU: 0.5,\n          anchorV: 0.5,\n          clickable: true,\n          visible: true,\n          bearing: 0\n        };\n        // 添加覆盖物\n        await this.mapController?.addImageOverlay(imageOverlayParams);\n        // 设置压盖顺序，最底层的是覆盖物，后面依次是POI、支持碰撞的覆盖物和Marker，Marker在最表面一层\n        let mapElementTypeArr: Array<mapCommon.MapElementType> = [\n          mapCommon.MapElementType.OVERLAY,\n          mapCommon.MapElementType.POI,\n          mapCommon.MapElementType.CUSTOM_POI,\n          mapCommon.MapElementType.MARKER];\n        this.mapController.setDisplayOrder(mapElementTypeArr);\n      }\n    };\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback });\n      }.width('100%')\n    }.height('100%')\n  }\n} 
