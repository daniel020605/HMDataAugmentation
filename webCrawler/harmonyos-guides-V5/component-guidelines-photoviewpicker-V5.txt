使用PhotoPicker组件访问图片/视频
当应用需要读取用户图片时，开发者可以在应用界面中嵌入PhotoPicker组件，在用户选择所需要的图片资源后，直接返回该图片资源，而不需要授予应用读取图片文件的权限，即可完成图片或视频文件的访问和读取。
界面效果如图所示。
宫格页
大图页
开发步骤
导入PhotoPicker模块文件。import {\n  PhotoPickerComponent,\n  PickerController,\n  PickerOptions,\n  DataType,\n  BaseItemInfo,\n  ItemInfo,\n  PhotoBrowserInfo,\n  ItemType,\n  ClickType,\n  MaxCountType,\n  PhotoBrowserRange,\n  ReminderMode,\n} from '@ohos.file.PhotoPickerComponent';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper'; 创建Picker组件配置选项实例（PickerOptions）和控制实例（PickerController）。通过PickerOptions，开发者可配置Picker宫格的样式（如勾选框背景色、文本颜色等）、滑动预览方向、最大选择数量等参数，详见PickerOptions API参考。 通过PickerController，应用可向Picker组件发送数据。   // 组件初始化时设置参数信息\n  pickerOptions: PickerOptions = new PickerOptions();\n\n  // 组件初始化完成后，可控制组件部分行为\n  @State pickerController: PickerController = new PickerController();\n\n  // 已选择的图片\n  @State selectUris: Array<string> = new Array<string>();\n\n  //目前选择的图片\n  @State currentUri: string = '';\n  \n  //是否显示大图\n  @State isBrowserShow: boolean = false; 应用界面出现时，初始化组件配置选项实例（PickerOptions）。此处仅列举实例用到的参数，当前支持的配置项及其取值范围详见PickerOptions API参考。// 设置picker宫格页数据类型\nthis.pickerOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_VIDEO_TYPE // 图片和照片都显示;\n// 最大选择数量\nthis.pickerOptions.maxSelectNumber = 5;\n// 超出最大选择数量时\nthis.pickerOptions.maxSelectedReminderMode = ReminderMode.TOAST;\n// 是否展示搜索框，默认false\nthis.pickerOptions.isSearchSupported = true;\n// 是否支持拍照，默认false\nthis.pickerOptions.isPhotoTakingSupported = true;  实现回调函数。通过实现以下回调事件，可在用户在界面操作时，将相关信息报给应用进行处理。 进退大图、切换大图回调，上报的大图相关信息详见PhotoBrowserInfo。勾选图片/视频，将上报图片URI供应用使用。 回调返回的所有URI均为只读URI，开发者可以根据结果集中的URI读取文件数据。但不能在Picker的回调中直接使用此URI打开文档，需要定义一个全局变量保存URI，样例可参考指定URI读取文件数据、指定URI获取图片或视频资源。如需获取元数据，可通过文件管理和文件URI接口，根据uri获取部分文件属性信息，比如文件大小、访问时间、修改时间、文件名、文件路径等。  点击图片（缩略图item），将上报图片/视频信息ItemInfo；点击相机item，可拉起系统相机或应用自行处理。 支持的回调事件及其参数请参考PhotoPickerComponent API参考。// 资源被选中回调，返回资源的信息，以及选中方式\nprivate onItemClicked(itemInfo: ItemInfo, clickType: ClickType): boolean {\n  if (!itemInfo) {\n    return false;\n  }\n  let type: ItemType | undefined = itemInfo.itemType;\n  let uri: string | undefined = itemInfo.uri;\n  if (type === ItemType.CAMERA) {\n    // 点击相机item\n    return true; // 返回true则拉起系统相机，若应用需要自行处理则返回false。\n  } else {\n    if (clickType === ClickType.SELECTED) {\n      // 应用做自己的业务处理\n      if (uri) {\n        this.selectUris.push(uri);\n        this.pickerOptions.preselectedUris = [...this.selectUris];\n      }\n      return true; // 返回true则勾选，否则则不响应勾选。\n    } else {\n      if (uri) {\n        this.selectUris = this.selectUris.filter((item: string) => {\n          return item != uri;\n        });\n        this.pickerOptions.preselectedUris = [...this.selectUris];\n      }\n    }\n    return true;\n  }\n}\n\n// 进入大图的回调\nprivate onEnterPhotoBrowser(photoBrowserInfo: PhotoBrowserInfo): boolean {\n  this.isBrowserShow = true;\n  return true;\n}\n\n// 退出大图的回调\nprivate onExitPhotoBrowser(photoBrowserInfo: PhotoBrowserInfo): boolean {\n  this.isBrowserShow = false;\n  return true;\n}\n\n// 大图左右滑动的回调\nprivate onPhotoBrowserChanged(browserItemInfo: BaseItemInfo): boolean {\n  this.currentUri = browserItemInfo.uri ?? '';\n  return true;\n}  创建PhotoPickerComponent组件。  PhotoPickerComponent({\n    pickerOptions: this.pickerOptions,\n    onItemClicked: (itemInfo: ItemInfo, clickType: ClickType): boolean => this.onItemClicked(itemInfo, clickType),\n    onEnterPhotoBrowser: (photoBrowserInfo: PhotoBrowserInfo): boolean => this.onEnterPhotoBrowser(photoBrowserInfo),\n    onExitPhotoBrowser: (photoBrowserInfo: PhotoBrowserInfo): boolean => this.onExitPhotoBrowser(photoBrowserInfo),\n    onPickerControllerReady: (): void => this.onPickerControllerReady(),\n    onPhotoBrowserChanged: (browserItemInfo: BaseItemInfo): boolean => this.onPhotoBrowserChanged(browserItemInfo),\n    pickerController: this.pickerController,\n  }) 通过PickerController向Picker组件发送数据，实现控制PhotoPickerComponent组件行为。存在多种用法，详见PickerControllerAPI文档。 
完整示例
import {\n  PhotoPickerComponent,\n  PickerController,\n  PickerOptions,\n  DataType,\n  BaseItemInfo,\n  ItemInfo,\n  PhotoBrowserInfo,\n  ItemType,\n  ClickType,\n  MaxCountType,\n  PhotoBrowserRange,\n  ReminderMode,\n} from '@ohos.file.PhotoPickerComponent';\nimport photoAccessHelper from '@ohos.file.photoAccessHelper';\n\n@Entry\n@Component\nstruct PhotoPickerComponentDemo {\n  // 组件初始化时设置参数信息\n  pickerOptions: PickerOptions = new PickerOptions();\n\n  // 组件初始化完成后，可控制组件部分行为\n  @State pickerController: PickerController = new PickerController();\n\n  // 已选择的图片\n  @State selectUris: Array<string> = new Array<string>();\n\n  //目前选择的图片\n  @State currentUri: string = '';\n\n  //是否显示大图\n  @State isBrowserShow: boolean = false;\n\n  aboutToAppear() {\n    // 设置picker宫格页数据类型\n    this.pickerOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.IMAGE_VIDEO_TYPE // 图片和照片都显示;\n    // 最大选择数量\n    this.pickerOptions.maxSelectNumber = 5;\n    // 超出最大选择数量时\n    this.pickerOptions.maxSelectedReminderMode = ReminderMode.TOAST;\n    // 是否展示搜索框，默认false\n    this.pickerOptions.isSearchSupported = true;\n    // 是否支持拍照，默认false\n    this.pickerOptions.isPhotoTakingSupported = true;\n\n  }\n\n  // 资源被选中回调，返回资源的信息，以及选中方式\n  private onItemClicked(itemInfo: ItemInfo, clickType: ClickType): boolean {\n    if (!itemInfo) {\n      return false;\n    }\n    let type: ItemType | undefined = itemInfo.itemType;\n    let uri: string | undefined = itemInfo.uri;\n    if (type === ItemType.CAMERA) {\n      // 点击相机item\n      return true; // 返回true则拉起系统相机，若应用需要自行处理则返回false。\n    } else {\n      if (clickType === ClickType.SELECTED) {\n        // 应用做自己的业务处理\n        if (uri) {\n          this.selectUris.push(uri);\n          this.pickerOptions.preselectedUris = [...this.selectUris];\n        }\n        return true; // 返回true则勾选，否则则不响应勾选。\n      } else {\n        if (uri) {\n          this.selectUris = this.selectUris.filter((item: string) => {\n            return item != uri;\n          });\n          this.pickerOptions.preselectedUris = [...this.selectUris];\n        }\n      }\n      return true;\n    }\n  }\n\n  // 进入大图的回调\n  private onEnterPhotoBrowser(photoBrowserInfo: PhotoBrowserInfo): boolean {\n    this.isBrowserShow = true;\n    return true;\n  }\n\n  // 退出大图的回调\n  private onExitPhotoBrowser(photoBrowserInfo: PhotoBrowserInfo): boolean {\n    this.isBrowserShow = false;\n    return true;\n  }\n\n  // 接收到该回调后，便可通过pickerController相关接口向picker发送数据，在此之前不生效。\n  private onPickerControllerReady(): void {\n  }\n\n  // 大图左右滑动的回调\n  private onPhotoBrowserChanged(browserItemInfo: BaseItemInfo): boolean {\n    this.currentUri = browserItemInfo.uri ?? '';\n    return true;\n  }\n\n  build() {\n    Flex({\n      direction: FlexDirection.Column,\n      alignItems: ItemAlign.Start\n    }) {\n      PhotoPickerComponent({\n        pickerOptions: this.pickerOptions,\n        onItemClicked: (itemInfo: ItemInfo, clickType: ClickType): boolean => this.onItemClicked(itemInfo, clickType),\n        onEnterPhotoBrowser: (photoBrowserInfo: PhotoBrowserInfo): boolean => this.onEnterPhotoBrowser(photoBrowserInfo),\n        onExitPhotoBrowser: (photoBrowserInfo: PhotoBrowserInfo): boolean => this.onExitPhotoBrowser(photoBrowserInfo),\n        onPickerControllerReady: (): void => this.onPickerControllerReady(),\n        onPhotoBrowserChanged: (browserItemInfo: BaseItemInfo): boolean => this.onPhotoBrowserChanged(browserItemInfo),\n        pickerController: this.pickerController,\n      })\n\n      // 这里模拟应用侧底部的选择栏\n      if (this.isBrowserShow) {\n        //已选择的图片缩影图\n        Row() {\n          ForEach(this.selectUris, (uri: string) => {\n            if (uri === this.currentUri) {\n              Image(uri).height(50).width(50)\n                .onClick(() => {\n                })\n                .borderWidth(1)\n                .borderColor('red')\n            } else {\n              Image(uri).height(50).width(50).onClick(() => {\n                this.pickerController.setData(DataType.SET_SELECTED_URIS, this.selectUris);\n                this.pickerController.setPhotoBrowserItem(uri, PhotoBrowserRange.ALL);\n              })\n            }\n          }, (uri: string) => JSON.stringify(uri))\n        }.alignSelf(ItemAlign.Center).margin(this.selectUris.length ? 10 : 0)\n      } else {\n        // 进入大图，预览已选择的图片\n        Button('预览').width('33%').alignSelf(ItemAlign.Start).height('5%').margin(10).onClick(() => {\n          if (this.selectUris.length > 0) {\n            this.pickerController.setPhotoBrowserItem(this.selectUris[0], PhotoBrowserRange.SELECTED_ONLY);\n          }\n        })\n      }\n    }\n  }\n}
