标记
场景介绍
本章节将向您介绍如何在地图的指定位置添加标记以标识位置、商家、建筑等。
点标记用来在地图上标记任何位置，例如用户位置、车辆位置、店铺位置等一切带有位置属性的事物。Map Kit提供的点标记功能（又称 Marker）封装了大量的触发事件，例如点击事件、长按事件、拖拽事件。
Marker有默认风格，同时也支持自定义。由于内容丰富，以下只能展示一些基础功能的使用，详细内容可参见接口文档。
接口说明
添加标记功能主要由MarkerOptions、addMarker和Marker提供，更多接口及使用方法请参见接口文档。
接口名
描述
MarkerOptions
标记参数。
addMarker(options: mapCommon.MarkerOptions): Promise<Marker>
在地图上添加标记。
Marker
标记，支持更新和查询相关属性。
开发步骤
[h2]添加标记
 导入相关模块。import { MapComponent, mapCommon, map } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit'; 添加标记，在Callback方法中创建初始化参数并新建Marker。@Entry\n@Component\nstruct MarkerDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private mapController?: map.MapComponentController;\n  private callback?: AsyncCallback<map.MapComponentController>;\n  private mapEventManager?: map.MapEventManager;\n  private marker?: map.Marker;\n\n  aboutToAppear(): void {\n    // 地图初始化参数\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 31.984410259206815,\n          longitude: 118.76625379397866\n        },\n        zoom: 15\n      }\n    };\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n        this.mapEventManager = this.mapController.getEventManager();\n        // Marker初始化参数\n        let markerOptions: mapCommon.MarkerOptions = {\n          position: {\n            latitude: 31.984410259206815,\n            longitude: 118.76625379397866\n          },\n          rotation: 0,\n          visible: true,\n          zIndex: 0,\n          alpha: 1,\n          anchorU: 0.5,\n          anchorV: 1,\n          clickable: true,\n          draggable: true,\n          flat: false\n        };\n        // 创建Marker\n        this.marker = await this.mapController.addMarker(markerOptions);\n      }\n    };\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback });\n      }.width('100%')\n    }.height('100%')\n  }\n}  在添加标记之后，修改已经设置的标记属性。// 设置标记可拖拽\nthis.marker.setDraggable(true);\n// 设置标记锚点\nthis.marker.setMarkerAnchor(1.0, 1.0); 
[h2]自定义标记
let markerOptions: mapCommon.MarkerOptions = {\n  position: {\n    latitude: 31.984410259206815,\n    longitude: 118.76625379397866\n  },\n  rotation: 0,\n  visible: true,\n  zIndex: 0,\n  alpha: 1,\n  anchorU: 0.5,\n  anchorV: 1,\n  clickable: true,\n  draggable: true,\n  flat: false,\n  // 图标存放在resources/rawfile，icon参数传入rawfile文件夹下的相对路径\n  icon: 'test.png'\n};\nthis.marker = await this.mapController.addMarker(markerOptions);
[h2]设置监听标记点击事件
let callback = (marker: map.Marker) => {\n  console.info(`on-markerClick marker = ${marker.getId()}`);\n};\nthis.mapEventManager.on(\"markerClick\", callback);
[h2]设置监听标记拖动事件
将Marker的拖拽属性设置为true，然后调用on(type: 'markerDragStart' , callback: Callback<Marker>)方法监听标记是否开始拖拽。
调用on(type: 'markerDrag' , callback: Callback<Marker>)，监听标记拖动过程。
调用on(type: 'markerDragEnd' , callback: Callback<Marker>)，监听标记拖动结束事件。
// 设置标记可拖拽\nthis.marker.setDraggable(true);\n\n// 监听标记开始拖拽\nlet markerCallback = (marker: map.Marker) => {\n  console.info(`on-markerDragStart marker = ${marker.getId()}`);\n};\nthis.mapEventManager.on(\"markerDragStart\", markerCallback);\n\n// 监听标记拖拽事件\nlet markerDragCallback = (marker: map.Marker) => {\n  console.info(`on-markerDrag marker = ${marker.getId()}`);\n};\nthis.mapEventManager.on(\"markerDrag\", markerDragCallback);\n\n// 监听标记拖拽结束\nlet markerDragEndCallback = (marker: map.Marker) => {\n  console.info(`on-markerDragEnd marker = ${marker.getId()}`);\n};\nthis.mapEventManager.on(\"markerDragEnd\", markerDragEndCallback);
[h2]信息窗
// 添加信息窗\nlet markerOptions: mapCommon.MarkerOptions = {\n  position: {\n    latitude: 31.984410259206815,\n    longitude: 118.76625379397866\n  }\n};\nthis.marker = await this.mapController?.addMarker(markerOptions);\n// 设置信息窗的标题\nthis.marker.setTitle('南京');\n// 设置信息窗的子标题\nthis.marker.setSnippet('华东地区');\n// 设置标记可点击\nthis.marker.setClickable(true);\n// 设置信息窗的锚点位置\nthis.marker.setInfoWindowAnchor(1, 1);\n// 设置信息窗可见\nthis.marker.setInfoWindowVisible(true);
[h2]自定义信息窗
import { map, mapCommon, MapComponent } from '@kit.MapKit'\nimport { AsyncCallback } from '@kit.BasicServicesKit'\n\n@Entry\n@Component\nstruct MarkerDemo {\n  private TAG = \"OHMapSDK_MarkerDemo\";\n  private mapOptions?: mapCommon.MapOptions;\n  private mapController?: map.MapComponentController;\n  private callback?: AsyncCallback<map.MapComponentController>;\n\n  aboutToAppear(): void {\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 32.120750,\n          longitude: 118.788765\n        },\n        zoom: 15\n      }\n    }\n\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n        let markerOptions: mapCommon.MarkerOptions = {\n          position: {\n            latitude: 32.120750,\n            longitude: 118.788765\n          },\n          clickable: true,\n          // 设置信息窗标题\n          title: \"自定义信息窗\",\n        };\n        await this.mapController?.addMarker(markerOptions);\n      }\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({\n          mapOptions: this.mapOptions,\n          mapCallback: this.callback,\n          // 自定义信息窗\n          customInfoWindow: this.customInfoWindow\n        })\n          .width('100%')\n          .height('100%');\n      }.width('100%')\n    }.height('100%')\n  }\n  // 自定义信息窗BuilderParam\n  @BuilderParam customInfoWindow: ($$: map.MarkerDelegate) => void = this.customInfoWindowBuilder;\n  // 自定义信息窗Builder\n  @Builder\n  customInfoWindowBuilder($$: map.MarkerDelegate) {\n    if ($$.marker) {\n      Text($$.marker.getTitle())\n        .width(\"50%\")\n        .height(50)\n        .backgroundColor(Color.Green)\n        .textAlign(TextAlign.Center)\n        .fontColor(Color.Black)\n        .font({ size: 25, weight: 10, style: FontStyle.Italic })\n        .border({ width: 3, color: Color.Black, radius: 25, style: BorderStyle.Dashed })\n\n    }\n  }\n}
[h2]标记动画
Marker支持设置旋转、缩放、平移、透明、图片动画播放和组合动画效果。
接口名
描述
AlphaAnimation
控制透明度的动画类。
RotateAnimation
控制旋转的动画类。
ScaleAnimation
控制缩放的动画类。
TranslateAnimation
控制平移的动画类。
PlayImageAnimation
控制多张图片的动画类。
AnimationSet
动画集合。
旋转动画效果的示例代码如下：
import { map, mapCommon, MapComponent } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct MarkerDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private callback?: AsyncCallback<map.MapComponentController>;\n\n  aboutToAppear(): void {\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 32.020750,\n          longitude: 118.788765\n        },\n        zoom: 11\n      }\n    }\n\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        // 构造MarkerOptions对象\n        let markerOptions: mapCommon.MarkerOptions = {\n          position: {\n            latitude: 32.020750,\n            longitude: 118.788765\n          },\n        };\n        // 新建marker\n        let marker: map.Marker = await mapController.addMarker(markerOptions);\n        // 构造RotateAnimation对象\n        let animation = new map.RotateAnimation(0, 270);\n        // 动画执行时间\n        animation.setDuration(2000);\n\n        // 动画结束状态\n        animation.setFillMode(map.AnimationFillMode.BACKWARDS);\n\n        // 动画重复模式\n        animation.setRepeatMode(map.AnimationRepeatMode.REVERSE);\n\n        // 动画重复次数\n        animation.setRepeatCount(100);\n\n        // 设置动画开始监听\n        let callbackStart = () => {\n          console.info(\"animationStart\", `callback`);\n        };\n        animation.on(\"animationStart\", callbackStart);\n\n        // 设置动画结束监听\n        let callbackEnd = () => {\n          console.info(\"animationEnd\", `callback`);\n        };\n        animation.on(\"animationEnd\", callbackEnd);\n\n        // 设置动画\n        marker.setAnimation(animation);\n        // 开启动画\n        marker.startAnimation();\n      }\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback })\n      }.width('100%')\n    }.height('100%')\n  }\n}
展示效果如图：
[h2]图片动画播放
import { map, mapCommon, MapComponent } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit';\nimport { image } from '@kit.ImageKit';\n\n@Entry\n@Component\nstruct MarkerDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private callback?: AsyncCallback<map.MapComponentController>;\n\n  aboutToAppear(): void {\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 32.020750,\n          longitude: 118.788765\n        },\n        zoom: 11\n      }\n    }\n\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        // 构造MarkerOptions对象\n        let markerOptions: mapCommon.MarkerOptions = {\n          position: {\n            latitude: 32.020750,\n            longitude: 118.788765\n          },\n        };\n        let mContext = getContext();\n        const fileData: Uint8Array = await mContext?.resourceManager?.getRawFileContent('icon/icon.png');\n        let imageSource: image.ImageSource =\n          image.createImageSource(fileData.buffer.slice(0, fileData.buffer.byteLength));\n        let pixelMap: PixelMap = await imageSource.createPixelMap();\n        let images: Array<ResourceStr | image.PixelMap> = [\n        // 图标需存放在resources/rawfile\n          'icon/avocado.png',\n          'icon/20231027.png',\n          pixelMap,\n          $r('app.media.maps_blue_dot')\n        ]\n        // 新建marker\n        let marker: map.Marker = await mapController.addMarker(markerOptions);\n        // 构造PlayImageAnimation对象\n        let animation: map.PlayImageAnimation = new map.PlayImageAnimation();\n        // 添加图片\n        await animation.addImages(images)\n        // 动画执行时间\n        animation.setDuration(3000);\n\n        // 动画结束状态\n        animation.setFillMode(map.AnimationFillMode.BACKWARDS);\n\n        // 动画重复模式\n        animation.setRepeatMode(map.AnimationRepeatMode.REVERSE);\n\n        // 动画重复次数\n        animation.setRepeatCount(100);\n\n        // 设置动画开始监听\n        let callbackStart = () => {\n          console.info(\"animationStart\", `callback`);\n        };\n        animation.on(\"animationStart\", callbackStart);\n        // 设置动画结束监听\n        let callbackEnd = () => {\n          console.info(\"animationEnd\", `callback`);\n        };\n        animation.on(\"animationEnd\", callbackEnd);\n        // 设置动画\n        marker.setAnimation(animation);\n        // 开启动画\n        marker.startAnimation();\n      }\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback })\n      }.width('100%')\n    }.height('100%')\n  }\n}
展示效果如图：
