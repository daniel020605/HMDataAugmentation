设置深色模式
Web组件支持对前端页面进行深色模式配置。
 通过darkMode()接口可以配置不同的深色模式，默认关闭。当深色模式开启时，Web将启用媒体查询prefers-color-scheme中网页所定义的深色样式，若网页未定义深色样式，则保持原状。如需开启强制深色模式，建议配合forceDarkAccess()使用。WebDarkMode.Off模式表示关闭深色模式。WebDarkMode.On表示开启深色模式，并且深色模式跟随前端页面。WebDarkMode.Auto表示开启深色模式，并且深色模式跟随系统。 在下面的示例中，通过darkMode()接口将页面深色模式配置为跟随系统。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n  \n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  @State mode: WebDarkMode = WebDarkMode.Auto;\n\n  build() {\n    Column() {\n      Web({ src: $rawfile('index.html'), controller: this.controller })\n        .darkMode(this.mode)\n    }\n  }\n} 通过forceDarkAccess()接口可将前端页面强制配置深色模式，强制深色模式无法保证所有颜色转换符合预期，且深色模式不跟随前端页面和系统。配置该模式时候，需要将深色模式配置成WebDarkMode.On。 在下面的示例中，通过forceDarkAccess()接口将页面强制配置为深色模式。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\t\t\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  @State mode: WebDarkMode = WebDarkMode.On;\n  @State access: boolean = true;\n\n  build() {\n    Column() {\n      Web({ src: $rawfile('index.html'), controller: this.controller })\n        .darkMode(this.mode)\n        .forceDarkAccess(this.access)\n    }\n  }\n} index.html页面代码。 <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width,\n                                    initial-scale=1.0,\n                                    maximum-scale=1.0,\n                                    user-scalable=no\">\n    <style type=\"text/css\">\n        @media (prefers-color-scheme: dark) {\n            .contentCss{ background:  #000000; color: white; }\n            .hrefCss{ color: #317AF7; }\n        }\n    </style>\n</head>\n<body class=\"contentCss\">\n<div style=\"text-align:center\">\n    <p>Dark mode debug page</p>\n</div>\n</body>\n</html> 
