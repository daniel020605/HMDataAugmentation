PDF页面文本、图片和批注
支持编辑PDF页面内容，包括：
 添加、删除文本。 添加、删除图片。 添加、修改、删除批注。通过索引指定PDF页面添加批注，并对批注在页面中的位置，字体、批注边框等设置，批注提供了多种风格样式，包括：文本批注TextAnnotationInfo、下划线批注LineAnnotationInfo、高亮批注HighlightAnnotationInfo、删除线批注StrikethroughAnnotationInfo等共13种。 
接口说明
接口名
描述
addTextObject(text: string, x: number, y: number, style: TextStyle): void
添加文本内容，只可按行添加。
addImageObject(path: string, x: number, y: number, width: number, height: number): void
在PDF文档的页面中添加图片。
deleteGraphicsObject(object: GraphicsObject): void
删除指定的GraphicsObject。
addAnnotation(annotationInfo: PdfAnnotationInfo): PdfAnnotation
在当前页添加批注。
添加文本和图片
 调用loadDocument方法，加载PDF文档。 在【addText】按钮中调用addTextObject的方法插入文本。 在【delText】按钮中调用deleteGraphicsObject方法来删除相应的页面文本。 在【addImage】按钮中调用addImageObject的方法插入图片。 
import { pdfService } from '@kit.PDFKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { font } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct PdfPage {\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\n  private context = getContext() as common.UIAbilityContext;\n\n  aboutToAppear(): void {\n    // 确保沙箱目录有input.pdf文档\n    let filePath = this.context.filesDir + '/input.pdf';\n    this.pdfDocument.loadDocument(filePath);\n  }\n\n  build() {\n    Column() {\n      // 添加文本\n      Button('addText').onClick(async () => {\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\n        let str = 'This is add text object!';\n        let fontInfo = new pdfService.FontInfo();\n        // 确保字体路径存在\n        fontInfo.fontPath = font.getFontByName('HarmonyOS Sans')?.path;\n        fontInfo.fontName = '';\n        let style: pdfService.TextStyle = { textColor: 0x000000, textSize: 30, fontInfo };\n        page.addTextObject(str, 10, 10, style);\n        let outPdfPath = this.context.filesDir + '/testAddText.pdf';\n        let result = this.pdfDocument.saveDocument(outPdfPath);\n        hilog.info(0x0000, 'PdfPage', 'addText %{public}s!', result ? 'success' : 'fail');\n      })\n      // 删除文本\n      Button('delText').onClick(async () => {\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\n        let graphicsObjects = page.getGraphicsObjects();\n        // 找到第一个要删除的文本\n        let index = graphicsObjects.findIndex(item => item.type === pdfService.GraphicsObjectType.OBJECT_TEXT);\n        if (index > -1) {\n          // 删除第一个文本\n          page.deleteGraphicsObject(graphicsObjects[index]);\n        }\n        let outPdfPath = this.context.filesDir + '/testDelText.pdf';\n        let result = this.pdfDocument.saveDocument(outPdfPath);\n        hilog.info(0x0000, 'PdfPage', 'delText %{public}s!', result ? 'success' : 'fail');\n      })\n      // 添加图片\n      Button('addImage').onClick(async () => {\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\n        // 插入图片，确保沙箱目录有img.jpg图片\n        let imagePath = this.context.filesDir + '/img.jpg';\n        page.addImageObject(imagePath, 100, 100, 100, 120);\n        let outPdfPath = this.context.filesDir + '/testAddImage.pdf';\n        let result = this.pdfDocument.saveDocument(outPdfPath);\n        hilog.info(0x0000, 'PdfPage', 'addImage %{public}s!', result ? 'success' : 'fail');\n      })\n    }\n  }\n}
添加文本批注
 调用loadDocument方法，加载PDF文档。 调用getPage方法获取指定页。 实例化TextAnnotationInfo文本批注，并设置相关属性。 调用addAnnotation或setAnnotation方法添加或修改批注。 调用removeAnnotation方法删除批注。 
import { pdfService } from '@kit.PDFKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct PdfPage {\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\n  private context = getContext() as common.UIAbilityContext;\n\n  build() {\n    Column() {\n      // 添加批注\n      Button('addTextAnnotation').onClick(async () => {\n        // 确保沙箱目录有input.pdf文档\n        let filePath = this.context.filesDir + '/input.pdf';\n        this.pdfDocument.loadDocument(filePath);\n        let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\n        let aInfo = new pdfService.TextAnnotationInfo();\n        aInfo.iconName = 'cument Format';\n        aInfo.content = 'this is a content';\n        aInfo.subject = 'Annotation';\n        aInfo.title = 'this is a title';\n        aInfo.state = pdfService.TextAnnotationState.MARKED;\n        aInfo.x = 200;\n        aInfo.y = 200;\n        aInfo.color = 0xf9b1b1;\n        aInfo.flag = pdfService.AnnotationFlag.PRINTED;\n        let annotation: pdfService.PdfAnnotation = page.addAnnotation(aInfo);\n        let outPdfPath = this.context.filesDir + '/testAddTextAnnotation.pdf';\n        let result = this.pdfDocument.saveDocument(outPdfPath);\n        this.pdfDocument.releaseDocument();\n        hilog.info(0x0000, 'PdfPage', 'addTextAnnotation %{public}s!', result ? 'success' : 'fail');\n      })\n      // 修改批注\n      Button('setAnnotation').onClick(async () => {\n        let filePath = this.context.filesDir + '/testAddTextAnnotation.pdf';\n        let result = this.pdfDocument.loadDocument(filePath);\n        if (result === pdfService.ParseResult.PARSE_SUCCESS) {\n          let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\n          let annotations = page.getAnnotations();\n          if (annotations.length > 0 && annotations[0].type === pdfService.AnnotationType.TEXT) {\n            let newAnno = annotations[0];\n            page.removeAnnotation(newAnno);\n            let annotation = page.addAnnotation(newAnno);\n            let newInfo = new pdfService.TextAnnotationInfo();\n            newInfo.title = \"new Title\";\n            newInfo.content = \"new Info\";\n            newInfo.state = pdfService.TextAnnotationState.MARKED;\n            newInfo.x = 100;\n            newInfo.y = 100;\n            page.setAnnotation(annotation, newInfo);\n            let outPdfPath = this.context.filesDir + '/testSetAnnotation.pdf';\n            let result = this.pdfDocument.saveDocument(outPdfPath);\n            this.pdfDocument.releaseDocument();\n            hilog.info(0x0000, 'PdfPage', 'setAnnotation %{public}s!', result ? 'success' : 'fail');\n          }\n        }\n      })\n      // 删除批注\n      Button('removeAnnotation').onClick(async () => {\n        let filePath = this.context.filesDir + '/testAddTextAnnotation.pdf';\n        let result = this.pdfDocument.loadDocument(filePath);\n        if (result === pdfService.ParseResult.PARSE_SUCCESS) {\n          let page: pdfService.PdfPage = this.pdfDocument.getPage(0);\n          let annotations = page.getAnnotations();\n          if (annotations.length > 0 && annotations[0].type === pdfService.AnnotationType.TEXT) {\n            page.removeAnnotation(annotations[0]);\n            let outPdfPath = this.context.filesDir + '/testRemoveAnnotation.pdf';\n            let result = this.pdfDocument.saveDocument(outPdfPath);\n            this.pdfDocument.releaseDocument();\n            hilog.info(0x0000, 'PdfPage', 'removeAnnotation %{public}s!', result ? 'success' : 'fail');\n          }\n        }\n      })\n    }\n  }\n}
