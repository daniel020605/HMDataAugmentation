自定义界面扫码
基本概念
自定义界面扫码能力提供了相机流控制接口，可根据自身需求自定义扫码界面，适用于对扫码界面有定制化需求的应用开发。
通过自定义页面扫码可以实现应用内的扫码功能，为了应用更好的体验，推荐同时接入“扫码直达”服务，应用可以同时支持系统扫码入口（控制中心扫一扫）和应用内扫码两种方式跳转到指定服务页面。
场景介绍
自定义界面扫码能力提供扫码相机流控制接口，支持相机流的初始化、开启、暂停、释放、重新扫码功能；支持闪光灯的状态获取、开启、关闭；支持变焦比的获取和设置；支持设置相机焦点和连续自动对焦；支持对条形码、二维码、MULTIFUNCTIONAL CODE进行扫码识别（具体类型参见ScanType），并获得码类型、码值、码位置信息、相机预览流（YUV）。该能力可用于单码和多码的扫描识别。
开发者集成自定义界面扫码能力可以自行定义扫码的界面样式，请按照业务流程完成扫码接口调用实现实时扫码功能。建议开发者基于Sample Code做个性化修改。
扫码页面UX设计规范：
YUV（相机预览流图像数据）适合于扫码和识物的综合识别场景，开发者需要自己控制相机流，普通扫码场景无需关注。
约束与限制
 需要请求相机的使用权限。 需要开发者自行实现扫码的人机交互界面。例如：多码场景需要暂停相机流由用户选择一个码图进行识别。 
业务流程
 发起请求：用户向开发者的应用发起扫码请求，应用拉起已定义好的扫码界面。 申请授权：应用需要向用户申请相机权限授权。若未同意授权，则无法使用此功能。 启动自定义界面扫码：在扫码前必须调用init接口初始化自定义扫码界面，加载资源。相机流初始化结束后，调用start接口开始扫码。 自定义界面扫码相机操作：可以配置自定义界面扫码相机操作参数，调整相应功能，包括闪光灯、变焦、焦距、暂停、重启扫码等。例如：        根据当前码图位置，比如当前码图太远或太近时，调用getZoom获取变焦比，setZoom接口设置变焦比，调整焦距以便于用户扫码。 根据当前扫码的光线条件或根据on('lightingFlash')监听闪光灯开启时机，通过getFlashLightStatus接口先获取闪光灯状态，再调用openFlashLight/closeFlashLight接口控制闪光灯开启或关闭，以便于用户进行扫码。 调用setFocusPoint设置对焦位置，resetFocus恢复默认对焦模式，以便于用户进行扫码。 在应用处于前后台或其他特殊场景需要中断/重新进行扫码时，可调用stop或start接口来控制相机流达到暂停或重新扫码的目的。  自定义界面扫码：Scan Kit API在扫码完成后会返回扫码结果。同时根据开发者的需要，Scan Kit API会返回每帧相机预览流数据。如需不重启相机并重新触发一次扫码，可以在start接口的Callback异步回调中，调用rescan接口。完成扫码后，需调用release接口进行释放扫码资源的操作。 获取结果：解析码值结果跳转应用服务页。 
接口说明
自定义界面扫码提供init、start、stop、release、getFlashLightStatus、openFlashLight、closeFlashLight、setZoom、getZoom、setFocusPoint、resetFocus、rescan、on('lightingFlash')、off('lightingFlash')接口，其中部分接口返回值有两种返回形式：Callback和Promise回调。Callback和Promise回调函数只是返回值方式不一样，功能相同。具体API说明详见接口文档。
接口名
描述
init(options?: scanBarcode.ScanOptions): void
初始化自定义界面扫码，加载资源。无返回结果。
start(viewControl: ViewControl): Promise<Array<scanBarcode.ScanResult>>
启动扫码相机流。使用Promise异步回调获取扫码结果。
stop(): Promise<void>
暂停扫码相机流。使用Promise异步回调返回执行结果。
release(): Promise<void>
释放扫码相机流。使用Promise异步回调返回执行结果。
start(viewControl: ViewControl, callback: AsyncCallback<Array<scanBarcode.ScanResult>>, frameCallback?: AsyncCallback<ScanFrame>): void
启动扫码相机流。使用Callback异步回调返回扫码结果以及YUV图像数据。
getFlashLightStatus(): boolean
获取闪光灯状态。返回结果为布尔值，true为打开状态，false为关闭状态。
openFlashLight(): void
开启闪光灯。无返回结果。
closeFlashLight(): void
关闭闪光灯。无返回结果。
setZoom(zoomValue : number): void
设置变焦比。无返回结果。
getZoom(): number
获取当前的变焦比。
setFocusPoint(point: scanBarcode.Point): void
设置相机焦点。
resetFocus(): void
设置连续自动对焦模式。
rescan(): void
触发一次重新扫码。仅对start接口Callback异步回调有效，Promise异步回调无效。
stop(callback: AsyncCallback<void>): void
暂停扫码相机流。使用Callback异步回调返回执行结果。
release(callback: AsyncCallback<void>): void
释放扫码相机流。使用Callback异步回调返回执行结果。
on(type: 'lightingFlash', callback: AsyncCallback<boolean>): void
注册闪光灯打开时机回调，使用Callback异步回调返回闪光灯打开时机。
off(type: 'lightingFlash', callback?: AsyncCallback<boolean>): void
注销闪光灯打开时机回调，使用Callback异步回调返回注销结果。
开发步骤
自定义界面扫码接口支持自定义UI界面，识别相机流中的条形码，二维码以及MULTIFUNCTIONAL CODE，并返回码图的值、类型、码的位置信息（码图最小外接矩形左上角和右下角的坐标）以及相机预览流（YUV）。
以下示例为调用自定义界面扫码接口拉起相机流并返回扫码结果和相机预览流（YUV）。
 在开发应用前，需要先申请相机相关权限，确保应用拥有访问相机的权限。在“module.json5”文件中配置相机权限，具体配置方式，请参见声明权限。            权限名 说明 授权方式    ohos.permission.CAMERA 允许应用使用相机扫码。 user_grant    使用接口requestPermissionsFromUser请求用户授权。具体申请方式及校验方式，请参见向用户申请授权。 导入自定义界面扫码接口以及相关接口模块，导入方法如下。import { scanCore, scanBarcode, customScan } from '@kit.ScanKit';\n// 导入功能涉及的权限申请、回调接口\nimport { router, promptAction, display } from '@kit.ArkUI';\nimport { AsyncCallback, BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { common, abilityAccessCtrl } from '@kit.AbilityKit'; 遵循业务流程完成自定义界面扫码功能。            在设置start接口的viewControl参数时，width和height与XComponent的宽高值相同，start接口会根据XComponent的宽高比例从相机的分辨率选择最优分辨率，如果比例与相机的分辨率比例相差过大会返回内部错误。当前支持的分辨率比例为16:9、4:3、1:1。竖屏场景下，XComponent的高度需要大于宽度，且高宽比在支持的分辨率比例中。横屏场景下，XComponent的宽度需要大于高度，且宽高比在支持的分辨率比例中。 XComponent的宽高需根据使用场景计算适配。例如：在开发设备为折叠屏时，需按照折叠屏的展开态和折叠态分别计算XComponent的宽高，start接口会根据XComponent的宽高适配对应的相机分辨率。设备屏幕宽高可通过display.getDefaultDisplaySync方法获取（获取的为px单位，需要通过px2vp方法转为vp）。     通过Promise方式回调，调用自定义界面扫码接口拉起相机流并返回扫码结果。const TAG: string = '[customScanPage]';\n\n@Entry\n@Component\nstruct CustomScanPage {\n  @State userGrant: boolean = false // 是否已申请相机权限\n  @State surfaceId: string = '' // xComponent组件生成id\n  @State isShowBack: boolean = false // 是否已经返回扫码结果\n  @State isFlashLightEnable: boolean = false // 是否开启了闪光灯\n  @State isSensorLight: boolean = false // 记录当前环境亮暗状态\n  @State cameraHeight: number = 640 // 设置预览流高度，默认单位：vp\n  @State cameraWidth: number = 360 // 设置预览流宽度，默认单位：vp\n  @State offsetX: number = 0 // 设置预览流x轴方向偏移量，默认单位：vp\n  @State offsetY: number = 0 // 设置预览流y轴方向偏移量，默认单位：vp\n  @State zoomValue: number = 1 // 预览流缩放比例\n  @State setZoomValue: number = 1 // 已设置的预览流缩放比例\n  @State scaleValue: number = 1 // 屏幕缩放比\n  @State pinchValue: number = 1 // 双指缩放比例\n  @State displayHeight: number = 0 // 屏幕高度，单位vp\n  @State displayWidth: number = 0 // 屏幕宽度，单位vp\n  @State scanResult: Array<scanBarcode.ScanResult> = [] // 扫码结果\n  private mXComponentController: XComponentController = new XComponentController()\n\n  async onPageShow() {\n    // 自定义启动第一步，用户申请权限\n    await this.requestCameraPermission();\n    // 多码扫码识别，enableMultiMode: true 单码扫码识别enableMultiMode: false\n    let options: scanBarcode.ScanOptions = {\n      scanTypes: [scanCore.ScanType.ALL],\n      enableMultiMode: true,\n      enableAlbum: true\n    }\n    // 自定义启动第二步：设置预览流布局尺寸\n    this.setDisplay();\n    try {\n      // 自定义启动第三步，初始化接口\n      customScan.init(options);\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to init customScan. Code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  async onPageHide() {\n    // 页面消失或隐藏时，停止并释放相机流\n    this.userGrant = false;\n    this.isFlashLightEnable = false;\n    this.isSensorLight = false;\n    try {\n      customScan.off('lightingFlash');\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to off lightingFlash. Code: ${error.code}, message: ${error.message}`);\n    }\n    this.customScanStop();\n    try {\n      // 自定义相机流释放接口\n      customScan.release().then(() => {\n        hilog.info(0x0001, TAG, 'Succeeded in releasing customScan by promise.');\n      }).catch((error: BusinessError) => {\n        hilog.error(0x0001, TAG,\n          `Failed to release customScan by promise. Code: ${error.code}, message: ${error.message}`);\n      })\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to release customScan. Code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  // 用户申请权限\n  async reqPermissionsFromUser(): Promise<number[]> {\n    hilog.info(0x0001, TAG, 'reqPermissionsFromUser start');\n    let context = getContext() as common.UIAbilityContext;\n    let atManager = abilityAccessCtrl.createAtManager();\n    let grantStatus = await atManager.requestPermissionsFromUser(context, ['ohos.permission.CAMERA']);\n    return grantStatus.authResults;\n  }\n\n  // 用户申请相机权限\n  async requestCameraPermission() {\n    let grantStatus = await this.reqPermissionsFromUser();\n    for (let i = 0; i < grantStatus.length; i++) {\n      if (grantStatus[i] === 0) {\n        // 用户授权，可以继续访问目标操作\n        hilog.info(0x0001, TAG, 'Succeeded in getting permissions.');\n        this.userGrant = true;\n      }\n    }\n  }\n\n  // 竖屏时获取屏幕尺寸，设置预览流全屏示例\n  setDisplay() {\n    try {\n      // 默认竖屏\n      let displayClass = display.getDefaultDisplaySync();\n      this.displayHeight = px2vp(displayClass.height);\n      this.displayWidth = px2vp(displayClass.width);\n      let maxLen: number = Math.max(this.displayWidth, this.displayHeight);\n      let minLen: number = Math.min(this.displayWidth, this.displayHeight);\n      const RATIO: number = 16 / 9;\n      this.cameraHeight = maxLen;\n      this.cameraWidth = maxLen / RATIO;\n      this.offsetX = (minLen - this.cameraWidth) / 2;\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to getDefaultDisplaySync. Code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  // toast显示扫码结果\n  async showScanResult(result: scanBarcode.ScanResult) {\n    // 使用toast显示出扫码结果\n    promptAction.showToast({\n      message: JSON.stringify(result),\n      duration: 5000\n    });\n  }\n\n  initCamera() {\n    this.isShowBack = false;\n    this.scanResult = [];\n    let viewControl: customScan.ViewControl = {\n      width: this.cameraWidth,\n      height: this.cameraHeight,\n      surfaceId: this.surfaceId\n    };\n    try {\n      // 自定义启动第四步，请求扫码接口，通过Promise方式回调\n      customScan.start(viewControl)\n        .then(async (result: Array<scanBarcode.ScanResult>) => {\n          hilog.info(0x0001, TAG, `result: ${JSON.stringify(result)}`);\n          if (result.length) {\n            // 解析码值结果跳转应用服务页\n            this.scanResult = result;\n            this.isShowBack = true;\n            // 获取到扫描结果后暂停相机流\n            this.customScanStop();\n          }\n        });\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to start customScan. Code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  customScanStop() {\n    try {\n      customScan.stop();\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to stop customScan. Code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  // 自定义扫码界面的顶部返回按钮和扫码提示\n  @Builder\n  TopTool() {\n    Column() {\n      Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {\n        Text('返回')\n          .onClick(async () => {\n            router.back();\n          })\n      }.padding({ left: 24, right: 24, top: 40 })\n\n      Column() {\n        Text('扫描二维码/条形码')\n        Text('对准二维码/条形码，即可自动扫描')\n      }.margin({ left: 24, right: 24, top: 24 })\n    }\n    .height(146)\n    .width('100%')\n  }\n\n  build() {\n    Stack() {\n      if (this.userGrant) {\n        Column() {\n          XComponent({\n            id: 'componentId',\n            type: XComponentType.SURFACE,\n            controller: this.mXComponentController\n          })\n            .onLoad(async () => {\n              hilog.info(0x0001, TAG, 'Succeeded in loading, onLoad is called.');\n              // 获取XComponent组件的surfaceId\n              this.surfaceId = this.mXComponentController.getXComponentSurfaceId();\n              hilog.info(0x0001, TAG, `Succeeded in getting surfaceId: ${this.surfaceId}`);\n              this.initCamera();\n              // 闪光灯监听接口\n              customScan.on('lightingFlash', (error, isLightingFlash) => {\n                if (error) {\n                  hilog.error(0x0001, TAG,\n                    `Failed to on lightingFlash. Code: ${error.code}, message: ${error.message}`);\n                  return;\n                }\n                if (isLightingFlash) {\n                  this.isFlashLightEnable = true;\n                } else {\n                  try {\n                    if (!customScan.getFlashLightStatus()) {\n                      this.isFlashLightEnable = false;\n                    }\n                  } catch (error) {\n                    hilog.error(0x0001, TAG,\n                      `Failed to get FlashLightStatus. Code: ${error.code}, message: ${error.message}`);\n                  }\n                }\n                this.isSensorLight = isLightingFlash;\n              });\n            })\n            .width(this.cameraWidth)\n            .height(this.cameraHeight)\n            .position({ x: this.offsetX, y: this.offsetY })\n        }\n        .height('100%')\n        .width('100%')\n      }\n\n      Column() {\n        this.TopTool()\n        Column() {\n        }\n        .layoutWeight(1)\n        .width('100%')\n\n        Column() {\n          Row() {\n            // 闪光灯按钮，启动相机流后才能使用\n            Button('FlashLight')\n              .onClick(() => {\n                let lightStatus: boolean = false;\n                try {\n                  lightStatus = customScan.getFlashLightStatus();\n                } catch (error) {\n                  hilog.error(0x0001, TAG,\n                    `Failed to get flashLightStatus. Code: ${error.code}, message: ${error.message}`);\n                }\n\n                // 根据当前闪光灯状态，选择打开或关闭闪关灯\n                if (lightStatus) {\n                  try {\n                    customScan.closeFlashLight();\n                    setTimeout(() => {\n                      this.isFlashLightEnable = this.isSensorLight;\n                    }, 200);\n                  } catch (error) {\n                    hilog.error(0x0001, TAG,\n                      `Failed to close flashLight. Code: ${error.code}, message: ${error.message}`);\n                  }\n                } else {\n                  try {\n                    customScan.openFlashLight();\n                  } catch (error) {\n                    hilog.error(0x0001, TAG,\n                      `Failed to open flashLight. Code: ${error.code}, message: ${error.message}`);\n                  }\n                }\n              })\n              .visibility((this.userGrant && this.isFlashLightEnable) ? Visibility.Visible : Visibility.None)\n\n            // 扫码成功后，点击按钮后重新扫码\n            Button('Scan')\n              .onClick(() => {\n                // 点击按钮重启相机流，重新扫码\n                this.initCamera();\n              })\n              .visibility(this.isShowBack ? Visibility.Visible : Visibility.None)\n          }\n\n          Row() {\n            // 预览流设置缩放比例\n            Button('缩放比例,当前比例:' + this.setZoomValue)\n              .onClick(() => {\n                // 设置相机缩放比例\n                if (!this.isShowBack) {\n                  if (!this.zoomValue || this.zoomValue === this.setZoomValue) {\n                    this.setZoomValue = this.customGetZoom();\n                  } else {\n                    this.zoomValue = this.zoomValue;\n                    this.customSetZoom(this.zoomValue);\n                    setTimeout(() => {\n                      if (!this.isShowBack) {\n                        this.setZoomValue = this.customGetZoom();\n                      }\n                    }, 1000);\n                  }\n                }\n              })\n          }\n          .margin({ top: 10, bottom: 10 })\n\n          Row() {\n            // 输入要设置的预览流缩放比例\n            TextInput({ placeholder: '输入缩放倍数' })\n              .type(InputType.Number)\n              .borderWidth(1)\n              .backgroundColor(Color.White)\n              .onChange(value => {\n                this.zoomValue = Number(value);\n              })\n          }\n        }\n        .width('50%')\n        .height(180)\n      }\n\n      // 单码、多码扫描后，显示码图蓝点位置。点击toast码图信息\n      ForEach(this.scanResult, (item: scanBarcode.ScanResult, index: number) => {\n        if (item.scanCodeRect) {\n          Image($rawfile('scan_selected2.svg'))\n            .width(40)\n            .height(40)\n            .markAnchor({ x: 20, y: 20 })\n            .position({\n              x: (item.scanCodeRect.left + item?.scanCodeRect?.right) / 2 + this.offsetX,\n              y: (item.scanCodeRect.top + item?.scanCodeRect?.bottom) / 2 + this.offsetY\n            })\n            .onClick(() => {\n              this.showScanResult(item);\n            })\n        }\n      })\n    }\n    // 建议相机流设置为全屏\n    .width('100%')\n    .height('100%')\n    .onClick((event: ClickEvent) => {\n      // 是否已扫描到结果\n      if (this.isShowBack) {\n        return;\n      }\n      // 点击屏幕位置，获取点击位置(x,y)，设置相机焦点\n      let x1 = vp2px(event.displayY) / (this.displayHeight + 0.0);\n      let y1 = 1.0 - (vp2px(event.displayX) / (this.displayWidth + 0.0));\n      try {\n        customScan.setFocusPoint({ x: x1, y: y1 });\n        hilog.info(0x0001, TAG, `Succeeded in setting focusPoint x1: ${x1}, y1: ${y1}`);\n      } catch (error) {\n        hilog.error(0x0001, TAG, `Failed to set focusPoint. Code: ${error.code}, message: ${error.message}`);\n      }\n      hilog.info(0x0001, TAG, `Succeeded in setting focusPoint x1: ${x1}, y1: ${y1}`);\n      // 设置连续自动对焦模式\n      setTimeout(() => {\n        try {\n          customScan.resetFocus();\n        } catch (error) {\n          hilog.error(0x0001, TAG, `Failed to reset Focus. Code: ${error.code}, message: ${error.message}`);\n        }\n      }, 200);\n    }).gesture(PinchGesture({ fingers: 2 })\n      .onActionStart((event: GestureEvent) => {\n        hilog.info(0x0001, TAG, 'Pinch start');\n      })\n      .onActionUpdate((event: GestureEvent) => {\n        if (event) {\n          this.scaleValue = event.scale;\n        }\n      })\n      .onActionEnd((event: GestureEvent) => {\n        // 是否已扫描到结果\n        if (this.isShowBack) {\n          return;\n        }\n        // 获取双指缩放比例，设置变焦比\n        try {\n          let zoom = this.customGetZoom();\n          this.pinchValue = this.scaleValue * zoom;\n          this.customSetZoom(this.pinchValue);\n          hilog.info(0x0001, TAG, 'Pinch end');\n        } catch (error) {\n          hilog.error(0x0001, TAG, `Failed to setZoom. Code: ${error.code}, message: ${error.message}`);\n        }\n      }))\n  }\n\n  public customGetZoom(): number {\n    let zoom = 1;\n    try {\n      zoom = customScan.getZoom();\n      hilog.info(0x0001, TAG, `Succeeded in getting Zoom, zoom: ${zoom}`);\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to getZoom. Code: ${error.code}, message: ${error?.message}`);\n    }\n    return zoom;\n  }\n\n  public customSetZoom(pinchValue: number): void {\n    try {\n      customScan.setZoom(pinchValue);\n      hilog.info(0x0001, TAG, `Succeeded in setting Zoom.`);\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to setZoom. Code: ${error.code}, message: ${error?.message}`);\n    }\n  }\n} 通过Callback方式回调，调用自定义界面扫码接口拉起相机流并返回扫码结果和相机预览流（YUV）。import { bundleManager, PermissionRequestResult, Permissions } from '@kit.AbilityKit';\n\nconst TAG = '[YUV CPSample]';\nlet context = getContext(this) as common.UIAbilityContext;\n\n// 用户申请权限\nexport class PermissionsUtil {\n  public static async checkAccessToken(permission: Permissions): Promise<abilityAccessCtrl.GrantStatus> {\n    let atManager = abilityAccessCtrl.createAtManager();\n    let grantStatus: abilityAccessCtrl.GrantStatus = -1;\n    // 获取应用程序的accessTokenID\n    let tokenId: number = 0;\n    let bundleInfo: bundleManager.BundleInfo =\n      await bundleManager.getBundleInfoForSelf(bundleManager.BundleFlag.GET_BUNDLE_INFO_WITH_APPLICATION);\n    let appInfo: bundleManager.ApplicationInfo = bundleInfo.appInfo;\n    tokenId = appInfo.accessTokenId;\n    // 校验应用是否被授予权限\n    grantStatus = await atManager.checkAccessToken(tokenId, permission);\n    return grantStatus;\n  }\n\n  // 申请相机权限\n  public static async reqPermissionsFromUser(): Promise<number[]> {\n    hilog.info(0x0001, TAG, 'Succeeded in getting permissions by promise.')\n    let atManager = abilityAccessCtrl.createAtManager();\n    let grantStatus: PermissionRequestResult = { permissions: [], authResults: [] }\n    grantStatus = await atManager.requestPermissionsFromUser(context, ['ohos.permission.CAMERA']);\n    return grantStatus.authResults;\n  }\n}\n\n@Extend(Column)\nfunction mainStyle() {\n  .width('100%')\n  .height('100%')\n  .padding({\n    top: 40\n  })\n  .justifyContent(FlexAlign.Center)\n}\n\n@Entry\n@Component\nstruct YUVScan {\n  @State userGrant: boolean = false // 是否已申请相机权限\n  @State surfaceId: string = '' // xComponent组件生成id\n  @State cameraHeight: number = 640 // 设置预览流高度，默认单位：vp\n  @State cameraWidth: number = 360 // 设置预览流宽度，默认单位：vp\n  @State zoomValue: number = 1 // 预览流缩放比例\n  @State setZoomValue: number = 1 // 已设置的预览流缩放比例\n  @State isReleaseCamera: boolean = false // 是否已释放相机流\n  @State scanWidth: number = 384 // xComponent宽度，默认设置384，单位vp\n  @State scanHeight: number = 682 // xComponent高度，默认设置682，单位vp\n  @State scanBottom: number = 220\n  @State offsetX: number = 0 // xComponent位置x轴偏移量，单位vp\n  @State offsetY: number = 0 // xComponent位置y轴偏移量，单位vp\n  @State scanCodeRect: Array<scanBarcode.ScanCodeRect> = [] // 扫码结果码图位置\n  @State scanFlag: boolean = false // 是否已经扫码到结果\n  @State scanFrameResult: string = ''\n  @State scaleValue: number = 1 // 屏幕缩放比\n  @State pinchValue: number = 1 // 双指缩放比例\n  @State displayHeight: number = 0 // 屏幕高度，单位vp\n  @State displayWidth: number = 0 // 屏幕宽度，单位vp\n  private mXComponentController: XComponentController = new XComponentController()\n  private viewControl: customScan.ViewControl = { width: 1920, height: 1080, surfaceId: this.surfaceId }\n  options: scanBarcode.ScanOptions = {\n    // 扫码类型，可选参数\n    scanTypes: [scanCore.ScanType.ALL],\n    // 是否开启多码识别，可选参数\n    enableMultiMode: true,\n    // 是否开启相册扫码，可选参数\n    enableAlbum: true,\n  }\n  // 返回自定义扫描结果的回调\n  private callback: AsyncCallback<scanBarcode.ScanResult[]> =\n    async (error: BusinessError, result: scanBarcode.ScanResult[]) => {\n      if (error && error.code) {\n        hilog.error(0x0001, TAG,\n          `Failed to get ScanResult by callback. Code: ${error.code}, message: ${error.message}`);\n        return;\n      }\n      // 解析码值结果跳转应用服务页\n      hilog.info(0x0001, TAG, `Succeeded in getting ScanResult by callback, result: ${JSON.stringify(result)}`);\n    }\n  // 返回相机帧的回调\n  private frameCallback: AsyncCallback<customScan.ScanFrame> =\n    async (error: BusinessError, frameResult: customScan.ScanFrame) => {\n      if (error) {\n        hilog.error(0x0001, TAG, `Failed to get ScanFrame by callback. Code: ${error.code}, message: ${error.message}`);\n        return;\n      }\n      // byteBuffer相机YUV图像数组\n      hilog.info(0x0001, TAG,\n        `Succeeded in getting ScanFrame.byteBuffer.byteLength: ${frameResult.byteBuffer.byteLength}`)\n      hilog.info(0x0001, TAG, `Succeeded in getting ScanFrame.width: ${frameResult.width}`)\n      hilog.info(0x0001, TAG, `Succeeded in getting ScanFrame.height: ${frameResult.height}`)\n      this.scanFrameResult = JSON.stringify(frameResult.scanCodeRects);\n      if (frameResult && frameResult.scanCodeRects && frameResult.scanCodeRects.length > 0 && !this.scanFlag) {\n        if (frameResult.scanCodeRects[0]) {\n          this.stopCamera();\n          this.scanCodeRect = [];\n          this.scanFlag = true;\n          // 码图位置信息转换\n          this.changeToXComponent(frameResult);\n        } else {\n          this.scanFlag = false;\n        }\n      }\n    }\n\n  // frameCallback横向码图位置信息转换为预览流xComponent对应码图位置信息\n  changeToXComponent(frameResult: customScan.ScanFrame) {\n    if (frameResult && frameResult.scanCodeRects) {\n      let frameHeight = frameResult.height;\n      let ratio = this.scanWidth / frameHeight;\n      frameResult.scanCodeRects.forEach((item) => {\n        this.scanCodeRect.push({\n          left: this.toFixedNumber((frameHeight - item.bottom) * ratio),\n          top: this.toFixedNumber(item.left * ratio),\n          right: this.toFixedNumber((frameHeight - item.top) * ratio),\n          bottom: this.toFixedNumber(item.right * ratio)\n        });\n      });\n      this.scanFrameResult = JSON.stringify(this.scanCodeRect);\n    }\n  }\n\n  toFixedNumber(no: number): number {\n    return Number((no).toFixed(1));\n  }\n\n  async onPageShow() {\n    // 自定义启动第一步，用户申请权限\n    const permissions: Array<Permissions> = ['ohos.permission.CAMERA'];\n    // 自定义启动第二步：设置预览流布局尺寸\n    this.setDisplay();\n    let grantStatus = await PermissionsUtil.checkAccessToken(permissions[0]);\n    if (grantStatus === abilityAccessCtrl.GrantStatus.PERMISSION_GRANTED) {\n      // 已经授权，可以继续访问目标操作\n      this.userGrant = true;\n      if (this.surfaceId) {\n        // 自定义启动第三步，初始化接口\n        this.initCamera();\n      }\n    } else {\n      // 申请相机权限\n      this.requestCameraPermission();\n    }\n  }\n\n  async onPageHide() {\n    this.releaseCamera();\n  }\n\n  // 用户申请权限\n  async requestCameraPermission() {\n    let grantStatus = await PermissionsUtil.reqPermissionsFromUser()\n    let length: number = grantStatus.length;\n    for (let i = 0; i < length; i++) {\n      if (grantStatus[i] === 0) {\n        // 用户授权，可以继续访问目标操作\n        this.userGrant = true;\n      } else {\n        // 用户拒绝授权，提示用户必须授权才能访问当前页面的功能，并引导用户到系统设置中打开相应的权限\n        this.userGrant = false;\n      }\n    }\n  }\n\n  // 竖屏时获取屏幕尺寸，设置预览流全屏示例\n  setDisplay() {\n    try {\n      // 以手机为例计算宽高\n      let displayClass = display.getDefaultDisplaySync();\n      this.displayHeight = px2vp(displayClass.height);\n      this.displayWidth = px2vp(displayClass.width);\n      if (displayClass !== null) {\n        this.scanWidth = px2vp(displayClass.width);\n        this.scanHeight = Math.round(this.scanWidth * this.viewControl.width / this.viewControl.height);\n        this.scanBottom = Math.max(220, px2vp(displayClass.height) - this.scanHeight);\n        this.offsetX = 0;\n        this.offsetY = 0;\n      }\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to getDefaultDisplaySync. Code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  // 初始化相机流\n  async initCamera() {\n    this.isReleaseCamera = false;\n    try {\n      // 自定义启动第三步，初始化接口\n      customScan.init(this.options);\n      hilog.info(0x0001, TAG, 'Succeeded in initting customScan with options.');\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to init customScan. Code: ${error.code}, message: ${error.message}`);\n    }\n    this.scanCodeRect = [];\n    this.scanFlag = false;\n    try {\n      // 自定义启动第四步，请求扫码接口\n      customScan.start(this.viewControl, this.callback, this.frameCallback);\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to start customScan. Code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  // 暂停相机流\n  async stopCamera() {\n    if (!this.isReleaseCamera) {\n      try {\n        customScan.stop();\n      } catch (error) {\n        hilog.error(0x0001, TAG, `Failed to stop customScan. Code: ${error.code}, message: ${error.message}`);\n      }\n    }\n  }\n\n  // 释放相机流\n  async releaseCamera() {\n    if (!this.isReleaseCamera) {\n      await this.stopCamera();\n      try {\n        await customScan.release();\n      } catch (error) {\n        hilog.error(0x0001, TAG, `Failed to release customScan. Code: ${error.code}, message: ${error.message}`);\n      }\n      this.isReleaseCamera = true;\n    }\n  }\n\n  build() {\n    Stack() {\n      // 相机预览流XComponent\n      if (this.userGrant) {\n        Column() {\n          XComponent({\n            id: 'componentId',\n            type: XComponentType.SURFACE,\n            controller: this.mXComponentController\n          })\n            .onLoad(() => {\n              hilog.info(0x0001, TAG, 'Succeeded in loading, onLoad is called.');\n              this.surfaceId = this.mXComponentController.getXComponentSurfaceId();\n              hilog.info(0x0001, TAG, `Succeeded in getting surfaceId is ${this.surfaceId}`);\n              this.viewControl = { width: this.scanWidth, height: this.scanHeight, surfaceId: this.surfaceId };\n              // 启动相机进行扫码\n              this.initCamera();\n            })\n            .height(this.scanHeight)\n            .width(this.scanWidth)\n            .position({ x: 0, y: 0 })\n        }\n        .height('100%')\n        .width('100%')\n        .position({ x: this.offsetX, y: this.offsetY })\n      }\n\n      Column() {\n        Column() {\n        }\n        .layoutWeight(1)\n        .width('100%')\n\n        Column() {\n\n          Row() {\n            // 闪光灯按钮，启动相机流后才能使用\n            Button('FlashLight')\n              .onClick(() => {\n                let lightStatus: boolean = false;\n                try {\n                  lightStatus = customScan.getFlashLightStatus();\n                } catch (error) {\n                  hilog.error(0x0001, TAG,\n                    `Failed to get flashLightStatus. Code: ${error.code}, message: ${error.message}`);\n                }\n                // 根据当前闪光灯状态，选择打开或关闭闪关灯\n                if (lightStatus) {\n                  try {\n                    customScan.closeFlashLight();\n                  } catch (error) {\n                    hilog.error(0x0001, TAG,\n                      `Failed to close flashLight. Code: ${error.code}, message: ${error.message}`);\n                  }\n                } else {\n                  try {\n                    customScan.openFlashLight();\n                  } catch (error) {\n                    hilog.error(0x0001, TAG,\n                      `Failed to open flashLight. Code: ${error.code}, message: ${error.message}`);\n                  }\n                }\n              })\n              .visibility(this.scanFlag ? Visibility.None : Visibility.Visible)\n          }\n\n          Row() {\n            // 预览流设置缩放比例\n            Button('缩放比例,当前比例:' + this.setZoomValue)\n              .width(200)\n              .alignSelf(ItemAlign.Center)\n              .onClick(() => {\n                // 设置相机缩放比例\n                if (!this.scanFlag) {\n                  if (!this.zoomValue || this.zoomValue === this.setZoomValue) {\n                    this.setZoomValue = this.customGetZoom();\n                  } else {\n                    this.zoomValue = this.zoomValue;\n                    this.customSetZoom(this.zoomValue);\n                    setTimeout(() => {\n                      if (!this.scanFlag) {\n                        this.setZoomValue = this.customGetZoom();\n                      }\n                    }, 1000);\n                  }\n                }\n              })\n          }\n          .margin({ top: 10, bottom: 10 })\n          .visibility(this.scanFlag ? Visibility.None : Visibility.Visible)\n\n          Row() {\n            // 输入要设置的预览流缩放比例\n            TextInput({ placeholder: '输入缩放倍数' })\n              .width(200)\n              .type(InputType.Number)\n              .borderWidth(1)\n              .backgroundColor(Color.White)\n              .onChange(value => {\n                this.zoomValue = Number(value);\n              })\n          }\n          .visibility(this.scanFlag ? Visibility.None : Visibility.Visible)\n\n          Text(this.scanFlag ? '继续扫码' : '扫码中')\n            .height(30)\n            .fontSize(16)\n            .fontColor(Color.White)\n            .onClick(() => {\n              if (this.scanFlag) {\n                this.scanFrameResult = '';\n                this.initCamera();\n              }\n            })\n          Text('扫码结果：' + this.scanFrameResult).fontColor(Color.White).fontSize(12)\n        }\n        .width('100%')\n        .height(this.scanBottom)\n        .backgroundColor(Color.Black)\n      }\n      .mainStyle()\n\n      Image($rawfile('scan_back.svg'))\n        .width(20)\n        .height(20)\n        .position({\n          x: 40,\n          y: 40\n        })\n        .onClick(() => {\n          router.back();\n        })\n\n      // 实时扫码码图中心点位置\n      if (this.scanFlag && this.scanCodeRect.length > 0) {\n        ForEach(this.scanCodeRect, (item: scanBarcode.ScanCodeRect, index: number) => {\n          Image($rawfile('scan_selected2.svg'))\n            .width(40)\n            .height(40)\n            .markAnchor({ x: 20, y: 20 })\n            .position({\n              x: (item.left + item.right) / 2 + this.offsetX,\n              y: (item.top + item.bottom) / 2 + this.offsetY\n            })\n        })\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(this.userGrant ? Color.Transparent : Color.Black)\n    .onClick((event: ClickEvent) => {\n      // 是否已扫描到结果\n      if (this.scanFlag) {\n        return;\n      }\n      // 点击屏幕位置，获取点击位置(x,y)，设置相机焦点\n      let x1 = vp2px(event.displayY) / (this.displayHeight + 0.0);\n      let y1 = 1.0 - (vp2px(event.displayX) / (this.displayWidth + 0.0));\n      try {\n        customScan.setFocusPoint({ x: x1, y: y1 });\n        hilog.info(0x0001, TAG, `Succeeded in setting focusPoint x1: ${x1}, y1: ${y1}`);\n      } catch (error) {\n        hilog.error(0x0001, TAG, `Failed to set focusPoint. Code: ${error.code}, message: ${error.message}`);\n      }\n      setTimeout(() => {\n        try {\n          customScan.resetFocus();\n        } catch (error) {\n          hilog.error(0x0001, TAG, `Failed to reset Focus. Code: ${error.code}, message: ${error.message}`);\n        }\n      }, 200);\n    })\n    .gesture(PinchGesture({ fingers: 2 })\n      .onActionStart((event: GestureEvent) => {\n        hilog.info(0x0001, TAG, 'Pinch start');\n      })\n      .onActionUpdate((event: GestureEvent) => {\n        if (event) {\n          this.scaleValue = event.scale;\n        }\n      })\n      .onActionEnd((event: GestureEvent) => {\n        // 是否已扫描到结果\n        if (this.scanFlag) {\n          return;\n        }\n        // 获取双指缩放比例，设置变焦比\n        try {\n          let zoom = this.customGetZoom();\n          this.pinchValue = this.scaleValue * zoom;\n          this.customSetZoom(this.pinchValue);\n          hilog.info(0x0001, TAG, 'Pinch end');\n        } catch (error) {\n          hilog.error(0x0001, TAG, `Failed to setZoom. Code: ${error.code}, message: ${error.message}`);\n        }\n      }))\n  }\n\n  public customGetZoom(): number {\n    let zoom = 1;\n    try {\n      zoom = customScan.getZoom();\n      hilog.info(0x0001, TAG, `Succeeded in getting Zoom, zoom: ${zoom}`);\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to getZoom. Code: ${error.code}, message: ${error?.message}`);\n    }\n    return zoom;\n  }\n\n  public customSetZoom(pinchValue: number): void {\n    try {\n      customScan.setZoom(pinchValue);\n      hilog.info(0x0001, TAG, `Succeeded in setting Zoom.`);\n    } catch (error) {\n      hilog.error(0x0001, TAG, `Failed to setZoom. Code: ${error.code}, message: ${error?.message}`);\n    }\n  }\n}  通过scanCodeRect数据可确定码图中心点的位置，使用说明如下。        scanCodeRect的四个点坐标如下，可根据坐标点绘制码图外围矩形框。          左上角(x, y)：(left, top)   右上角(x, y)：(right, top)   左下角(x, y)：(left, bottom)   右下角(x, y)：(right, bottom)  由于码图中心点坐标需和xComponent的坐标保持一致，如果xComponent的x轴和y轴存在偏移，则码图位置需做相应的偏移。例如：x轴偏移量为：offsetX；y轴偏移量为：offsetY，中心点坐标最终转换为：          x = (left + right) / 2 + offsetX y = (top + bottom) / 2 + offsetY   
模拟器开发
暂不支持模拟器使用，调用会返回错误信息“Emulator is not supported.”
