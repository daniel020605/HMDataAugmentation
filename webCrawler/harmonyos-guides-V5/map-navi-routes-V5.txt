出行路线规划
场景介绍
提供两点之间驾车、步行、骑行的路径规划能力。其中驾车路径规划支持添加途径点。
接口说明
以下是路径规划功能相关接口，主要由navi命名空间下的方法提供，更多接口及使用方法请参见接口文档。
接口名
描述
getDrivingRoutes(params: DrivingRouteParams): Promise<RouteResult>
驾车路径规划。
getDrivingRoutes(context: common.Context, params: DrivingRouteParams): Promise<RouteResult>
驾车路径规划。支持传入Context上下文。
getWalkingRoutes(params: RouteParams): Promise<RouteResult>
步行路径规划。
getWalkingRoutes(context: common.Context, params: RouteParams): Promise<RouteResult>
步行路径规划。支持传入Context上下文。
getCyclingRoutes(params: RouteParams): Promise<RouteResult>
骑行路径规划。
getCyclingRoutes(context: common.Context, params: RouteParams): Promise<RouteResult>
骑行路径规划。支持传入Context上下文。
DrivingRouteParams
驾车路径规划的参数。
RouteParams
步行、骑行路径规划的参数。
RouteResult
路径规划的结果。
开发步骤
import { navi } from '@kit.MapKit';
[h2]驾车路径规划
根据起终点坐标检索符合条件的驾车路径规划方案。支持以下功能：
 支持一次请求返回多条路线，最多支持3条路线。 最多支持5个途经点。 支持未来出行规划。 支持根据实时路况进行合理路线规划。 支持多种路线偏好选择，如时间最短、避免经过收费的公路、避开高速公路、距离优先等。 
async testDrivingRoutes(){\n  let params: navi.DrivingRouteParams = {\n    // 起点的经纬度\n    origins: [{\n      \"latitude\": 31.982129213545843,\n      \"longitude\": 120.27745557768591\n    }],\n    // 终点的经纬度\n    destination: {\n      \"latitude\": 31.982129213545843,\n      \"longitude\": 120.27745557768591\n    },\n    // 路径的途经点\n    waypoints: [{ \"latitude\": 31.967236140819114, \"longitude\": 120.27142088866847 },\n      { \"latitude\": 31.972868002238872, \"longitude\": 120.2943211817165 },\n      { \"latitude\": 31.98469327973332, \"longitude\": 120.29101107384068 }],\n    language: \"zh_CN\"\n  };\n  const result = await navi.getDrivingRoutes(params);\n  console.info(\"Succeeded in getting driving routes.\");\n}
[h2]步行路径规划
根据起终点坐标检索符合条件的步行路径规划方案。支持以下功能：
 支持150km以内的步行路径规划能力。 融入出行策略（时间最短、避免轮渡）。 
async testWalkingRoutes(){\n  let params: navi.RouteParams = {\n    // 起点的经纬度\n    origins: [{ \"latitude\": 39.992281, \"longitude\": 116.31088 }, { \"latitude\": 39.996, \"longitude\": 116.311 }],\n    // 终点的经纬度\n    destination: { \"latitude\": 39.94, \"longitude\": 116.311 },\n    language: \"zh_CN\"\n  };\n  const result = await navi.getWalkingRoutes(params);\n  console.info(\"Succeeded in getting walking routes.\");\n}
[h2]骑行路径规划
根据起终点坐标检索符合条件的骑行路径规划方案。支持以下功能：
 支持500km以内的骑行路径规划能力。 融入出行策略（时间最短、避免轮渡）。 
async testCyclingRoutes() {\n  let params: navi.RouteParams = {\n    // 起点的经纬度\n    origins: [{ latitude: 31.9844102, longitude: 118.7662537 }],\n    // 终点的经纬度\n    destination: { latitude: 31.9874102, longitude: 118.7362537 },\n    language: \"zh_CN\"\n  };\n  const result = await navi.getCyclingRoutes(params);\n  console.info(\"Succeeded in getting cycling routes.\");\n}
