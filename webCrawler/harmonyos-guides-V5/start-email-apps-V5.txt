拉起邮件类应用（startAbilityByType）
本章节介绍如何拉起邮件类应用扩展面板。
邮件类应用扩展面板参数说明
startAbilityByType接口中type字段为mail，对应的wantParam参数：
 邮件类应用扩展面板中的类型为string的参数，都要经过encodeURI编码。 邮件类应用扩展面板中的类型为string[]的参数，数组中的元素都要经过encodeURI编码。 
拉起方开发步骤
 导入相关模块。 import { common, wantConstant } from '@kit.AbilityKit'; 构造接口参数并调用startAbilityByType接口。 let context = getContext(this) as common.UIAbilityContext;\nlet wantParam: Record<string, Object> = {\n  'sceneType': 1,\n  'email': [encodeURI('xxx@example.com'),encodeURI('xxx@example.com')], // 收件人邮箱地址，多值以逗号分隔，对数组内容使用encodeURI()方法进行url编码\n  'cc': [encodeURI('xxx@example.com'),encodeURI('xxx@example.com')], // 抄收人邮箱地址，多值以逗号分隔，对数组内容使用encodeURI()方法进行url编码\n  'bcc': [encodeURI('xxx@example.com'),encodeURI('xxx@example.com')], // 密送人邮箱地址，多值以逗号分隔，对数组内容使用encodeURI()方法进行url编码\n  'subject': encodeURI('邮件主题'), // 邮件主题，对内容使用encodeURI()方法进行url编码\n  'body': encodeURI('邮件正文'), // 邮件正文，对内容使用encodeURI()方法进行url编码\n  'ability.params.stream': [encodeURI('附件uri1'),encodeURI('附件uri2')], // 附件uri，多值以逗号分隔，对数组内容使用encodeURI()方法进行url编码\n  'ability.want.params.uriPermissionFlag': wantConstant.Flags.FLAG_AUTH_READ_URI_PERMISSION\n};\nlet abilityStartCallback: common.AbilityStartCallback = {\n  onError: (code: number, name: string, message: string) => {\n    console.log(`onError code ${code} name: ${name} message: ${message}`);\n  },\n  onResult: (result)=>{\n    console.log(`onResult result: ${JSON.stringify(result)}`);\n  }\n}\n\ncontext.startAbilityByType(\"mail\", wantParam, abilityStartCallback, \n    (err) => {\n        if (err) {\n            console.error(`startAbilityByType fail, err: ${JSON.stringify(err)}`);\n        } else {\n            console.log(`success`);\n        }\n}); 效果示例图：  
目标方开发步骤
 在module.json5中新增linkFeature属性并设置声明当前应用支持的特性功能，从而系统可以从设备已安装应用中找到当前支持该特性的应用，取值范围如下：     取值 含义    ComposeMail 声明应用支持撰写邮件功能    {\n  \"abilities\": [\n      {\n      \"skills\": [\n          {\n          \"uris\": [\n              {\n              \"scheme\": \"mailto\", // 这里仅示意，应用需确保这里声明的的uri能被外部正常拉起\n              \"host\": \"\",\n              \"path\": \"\",\n              \"linkFeature\": \"ComposeMail\" // 声明应用支持撰写邮件功能\n              }\n            ]\n          }\n      ]\n      }\n  ]\n} 解析面板传过来的参数并做对应处理。 UIAbility.onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void 在参数want.parameters中会携带Caller方传入的参数（与调用方传入的有些差异），如下表所示：     参数名 类型 必填 说明    email string[ ] 否 收件人邮箱地址（支持多个且以逗号分隔）   cc string[ ] 否 抄收人邮箱地址（支持多个且以逗号分隔）   bcc string[ ] 否 密送人邮箱地址（支持多个且以逗号分隔）   subject string 否 邮件主题   body string 否 邮件内容   stream string[ ] 否 邮件附件列表（附件的uri地址列表）         目标方接收的类型为string的参数，都要经过decodeURI解码。 目标方接收的类型为string[]的参数，数组中的元素都要经过decodeURI解码。    
完整示例：
import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { window } from '@kit.ArkUI';\n\nconst TAG = 'MailTarget1.EntryAbility'\n\nexport default class EntryAbility extends UIAbility {\n    windowStage: window.WindowStage | null = null;\n\n    email: string[] | undefined;\n    cc: string[] | undefined;\n    bcc: string[] | undefined;\n    subject: string | undefined;\n    body: string | undefined;\n    stream: string[] | undefined;\n    \n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n        hilog.info(0x0000, TAG, `onCreate, want=${JSON.stringify(want)}`);\n        super.onCreate(want, launchParam);\n        this.parseWant(want);\n    }\n\n    onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n        hilog.info(0x0000, TAG, `onNewWant, want=${JSON.stringify(want)}`);\n        super.onNewWant(want, launchParam);\n        this.parseWant(want);\n        if (!this.windowStage) {\n            hilog.error(0x0000, TAG, 'windowStage is null');\n            this.context.terminateSelf();\n            return;\n        }\n        this.loadPage(this.windowStage);\n    }\n\n    private parseWant(want: Want): void {\n        this.email = this.decodeStringArr(want.parameters?.email as string[]);\n        this.cc = this.decodeStringArr(want.parameters?.cc as string[]);\n        this.bcc = this.decodeStringArr(want.parameters?.bcc as string[]);\n        this.subject = decodeURI(want.parameters?.subject as string);// 使用decodeURI()方法对邮件主题进行url解码，其他字段处理方法相同\n        this.body = decodeURI(want.parameters?.body as string);// 使用decodeURI()方法对邮件内容进行url解码，其他字段处理方法相同\n        this.stream = this.decodeStringArr(want.parameters?.stream as string[]);\n    }\n\n    // 使用decodeURI()方法对string数组内容进行解码\n    private decodeStringArr(source: string[] | undefined): string[] {\n        let target: string[] = [];\n        source?.forEach(e => {\n            target.push(decodeURI(e));\n        })\n        return target;\n    }\n\n    private loadPage(windowStage: window.WindowStage): void {\n        const storage: LocalStorage = new LocalStorage({\n            \"email\": this.email,\n            \"cc\": this.cc,\n            \"bcc\": this.bcc,\n            \"subject\": this.subject,\n            \"body\": this.body,\n            \"stream\": this.stream\n        } as Record<string, Object>);\n\n        windowStage.loadContent('pages/ComposeMailPage', storage);\n\n    }\n\n    onDestroy(): void {\n        hilog.info(0x0000, TAG, `onDestroy`);\n    }\n\n    onWindowStageCreate(windowStage: window.WindowStage): void {\n        hilog.info(0x0000, TAG, `onWindowStageCreate`);\n        this.windowStage = windowStage;\n        this.loadPage(this.windowStage);\n    }\n\n    onWindowStageDestroy(): void {\n        hilog.info(0x0000, TAG, `onWindowStageDestroy`);\n    }\n\n    onForeground(): void {\n        hilog.info(0x0000, TAG, `onForeground`);\n    }\n\n    onBackground(): void {\n        hilog.info(0x0000, TAG, `onBackground`);\n    }\n}
