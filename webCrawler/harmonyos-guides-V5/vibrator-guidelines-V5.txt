振动开发指导(ArkTS)
场景介绍
当设备需要设置不同的振动效果时，可以调用Vibrator模块，例如：设备的按键可以设置不同强度和不同时长的振动，闹钟和来电可以设置不同强度和时长的单次或周期振动。
详细的接口介绍请参考Vibrator接口。
接口说明
振动效果说明
目前支持三类振动效果，如下所示：
自定义振动配置文件为Json格式，在形式上如下所示：
{\n    \"MetaData\": {\n        \"Create\": \"2023-01-09\",\n        \"Description\": \"a haptic case\",\n        \"Version\": 1.0,\n        \"ChannelNumber\": 1\n    },\n    \"Channels\": [\n        {\n            \"Parameters\": {\n                \"Index\": 0\n            },\n            \"Pattern\": [\n                {\n                    \"Event\": {\n                        \"Type\": \"transient\",\n                        \"StartTime\": 0,\n                        \"Parameters\": {\n                            \"Frequency\": 31,\n                            \"Intensity\": 100\n                        }\n                    }\n                },\n                {\n                    \"Event\": {\n                        \"Type\": \"continuous\",\n                        \"StartTime\": 40,\n                        \"Duration\": 54,\n                        \"Parameters\": {\n                            \"Frequency\": 30,\n                            \"Intensity\": 38,\n                            \"Curve\": [\n                                {\n                                    \"Time\": 0,\n                                    \"Frequency\": 0,\n                                    \"Intensity\": 0\n                                },\n                                {\n                                    \"Time\": 1,\n                                    \"Frequency\": 15,\n                                    \"Intensity\": 0.5\n                                },\n                                {\n                                    \"Time\": 40,\n                                    \"Frequency\": -8,\n                                    \"Intensity\": 1.0\n                                },\n                                {\n                                    \"Time\": 54,\n                                    \"Frequency\": 0,\n                                    \"Intensity\": 0\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}
Json文件共包含3个属性。
 \"MetaData\"属性中为文件头信息，可在如下属性中添加描述：     名称 必填项 说明    Version 是 文件格式的版本号，向前兼容，目前支持版本1.0。   ChannelNumber 是 表示马达振动的通道数，最大支持双马达通道。   Create 否 可记录文件创作时间。   Description 否 可指明振动效果、创建信息等附加说明。    \"Channels\"属性中为马达振动通道的相关信息。 \"Channels\"是Json数组，表示各个通道的信息，包含2个属性。     名称 必填项 说明    Parameters 是 为通道参数。其中\"Index\"表示通道编号，0表示全通道发送，1、2分别对应左右马达。   Pattern 否 马达振动序列。    \"Pattern\"是Json数组，包含振动事件序列，每个\"Event\"属性代表1个振动事件，支持添加2种振动类型。     振动类型 说明    transient 瞬态短振动，干脆有力。   continuous 稳态长振动，具备长时间输出强劲有力振动的能力。    \"Event\"表示一个振动事件，包含如下属性：     名称 必填项 说明    Type 是 振动事件类型，为\"transient\" 或\"continuous\"。   StartTime 是 振动的起始时间，单位ms，有效范围为[0, 1800,000]。   Duration 是 振动持续时间，仅当类型为\"continuous\"时有效，单位ms，有效范围为[0, 5000]。    \"Parameters\"表示振动事件参数设置，必填项，可设置以下属性参数：     名称 必填项 说明    Intensity 是 振动事件强度，有效范围为[0, 100]。   Frequency 是 振动事件频率，有效范围为[0, 100]。   Curve 否 振动曲线，当振动事件类型为\"continuous\"时有效，为Json数组，支持设置一组调节点，调节点数量最大支持16个，最小为4个，每个调节点需包含如下属性： \"Time\"：相对事件起始时间的偏移，最小为0，最大不能超过事件振动时长； \"Intensity\"：相对事件振动强度的增益，范围为[0, 1]，此值乘上振动事件强度为对应时间点调节后的强度； \"Frequency\"：相对事件振动频率的变化，范围为[-100, 100]，此值加上振动事件频率为对应时间点调节后的频率。    
其他要求：
开发步骤
 控制设备上的振动器，需要申请权限ohos.permission.VIBRATE。具体配置方式请参考声明权限。 根据指定振动效果和振动属性触发马达振动。 情形一 按照指定持续时间触发马达振动： import { vibrator } from '@kit.SensorServiceKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\ntry {\n  // 触发马达振动\n  vibrator.startVibration({\n    type: 'time',\n    duration: 1000,\n  }, {\n    id: 0,\n    usage: 'alarm'\n  }, (error: BusinessError) => {\n    if (error) {\n      console.error(`Failed to start vibration. Code: ${error.code}, message: ${error.message}`);\n      return;\n    }\n    console.info('Succeed in starting vibration');\n  });\n} catch (err) {\n  let e: BusinessError = err as BusinessError;\n  console.error(`An unexpected error occurred. Code: ${e.code}, message: ${e.message}`);\n} 情形二 按照预置振动效果触发马达振动，可先查询振动效果是否被支持，再调用振动接口： import { vibrator } from '@kit.SensorServiceKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\ntry {\n  // 查询是否支持'haptic.effect.soft'\n  vibrator.isSupportEffect('haptic.effect.soft', (err: BusinessError, state: boolean) => {\n    if (err) {\n      console.error(`Failed to query effect. Code: ${err.code}, message: ${err.message}`);\n      return;\n    }\n    console.info('Succeed in querying effect');\n    if (state) {\n      try {\n        // 触发马达振动\n        vibrator.startVibration({\n          type: 'preset',\n          effectId: 'haptic.effect.soft',\n          count: 1,\n          intensity: 50,\n        }, {\n          usage: 'unknown'\n        }, (error: BusinessError) => {\n          if (error) {\n            console.error(`Failed to start vibration. Code: ${error.code}, message: ${error.message}`);\n          } else {\n            console.info('Succeed in starting vibration');\n          }\n        });\n      } catch (error) {\n        let e: BusinessError = error as BusinessError;\n        console.error(`An unexpected error occurred. Code: ${e.code}, message: ${e.message}`);\n      }\n    }\n  })\n} catch (error) {\n  let e: BusinessError = error as BusinessError;\n  console.error(`An unexpected error occurred. Code: ${e.code}, message: ${e.message}`);\n} 情形三 按照自定义振动配置文件触发马达振动： import { vibrator } from '@kit.SensorServiceKit';\nimport { resourceManager } from '@kit.LocalizationKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nconst fileName: string = 'xxx.json';\n\n// 获取文件资源描述符\nlet rawFd: resourceManager.RawFileDescriptor = getContext().resourceManager.getRawFdSync(fileName);\n\n// 触发马达振动\ntry {\n  vibrator.startVibration({\n    type: \"file\",\n    hapticFd: { fd: rawFd.fd, offset: rawFd.offset, length: rawFd.length }\n  }, {\n    id: 0,\n    usage: 'alarm'\n  }, (error: BusinessError) => {\n    if (error) {\n      console.error(`Failed to start vibration. Code: ${error.code}, message: ${error.message}`);\n      return;\n    }\n    console.info('Succeed in starting vibration');\n  });\n} catch (err) {\n  let e: BusinessError = err as BusinessError;\n  console.error(`An unexpected error occurred. Code: ${e.code}, message: ${e.message}`);\n}\n\n// 关闭文件资源描述符\ngetContext().resourceManager.closeRawFdSync(fileName); 停止马达的振动。 方式一 按照指定模式停止对应的马达振动，自定义振动不支持此类停止方式： ​ 停止固定时长振动： import { vibrator } from '@kit.SensorServiceKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\ntry {\n  // 按照VIBRATOR_STOP_MODE_TIME模式停止振动\n  vibrator.stopVibration(vibrator.VibratorStopMode.VIBRATOR_STOP_MODE_TIME, (error: BusinessError) => {\n    if (error) {\n      console.error(`Failed to stop vibration. Code: ${error.code}, message: ${error.message}`);\n      return;\n    }\n    console.info('Succeed in stopping vibration');\n  })\n} catch (err) {\n  let e: BusinessError = err as BusinessError;\n  console.error(`An unexpected error occurred. Code: ${e.code}, message: ${e.message}`);\n} ​ 停止预置振动： import { vibrator } from '@kit.SensorServiceKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\ntry {\n  // 按照VIBRATOR_STOP_MODE_PRESET模式停止振动\n  vibrator.stopVibration(vibrator.VibratorStopMode.VIBRATOR_STOP_MODE_PRESET, (error: BusinessError) => {\n    if (error) {\n      console.error(`Failed to stop vibration. Code: ${error.code}, message: ${error.message}`);\n      return;\n    }\n    console.info('Succeed in stopping vibration');\n  })\n} catch (err) {\n  let e: BusinessError = err as BusinessError;\n  console.error(`An unexpected error occurred. Code: ${e.code}, message: ${e.message}`);\n} 方式二 停止所有模式的马达振动，包括自定义振动： import { vibrator } from '@kit.SensorServiceKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\ntry {\n  // 停止所有模式的马达振动\n  vibrator.stopVibration((error: BusinessError) => {\n    if (error) {\n      console.error(`Failed to stop vibration. Code: ${error.code}, message: ${error.message}`);\n      return;\n    }\n    console.info('Succeed in stopping vibration');\n  })\n} catch (error) {\n  let e: BusinessError = error as BusinessError;\n  console.error(`An unexpected error occurred. Code: ${e.code}, message: ${e.message}`);\n} 
