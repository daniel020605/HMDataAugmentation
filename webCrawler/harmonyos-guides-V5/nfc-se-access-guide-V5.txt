安全单元访问开发指南
简介
安全单元（SecureElement，简称SE），电子设备上可能存在一个或多个安全单元，比如有eSE(Embedded SE)和SIM卡。能够充当安全单元的SIM卡，要求具备NFC功能。
场景介绍
应用程序可以通过接口访问安全单元，比如往安全单元里面写入数据，实现在电子设备上模拟一张NFC卡片的目的。该卡片数据可能存储在eSE安全单元，或在SIM卡安全单元上。安全单元上一般会预置有访问控制规则，应用程序需要具备对应的权限，也就是通过安全单元的访问控制权限校验之后，才能正常访问安全单元。
接口说明
完整的JS API说明以及实例代码请参考：安全单元接口。
实现安全单元的访问，可能使用到下面的接口。
主要场景开发步骤
[h2]应用程序访问安全单元
 import需要的安全单元模块。 判断设备是否支持安全单元能力。 访问安全单元，实现数据的读取或写入。 
import { omapi } from '@kit.ConnectivityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\n\nlet seService : omapi.SEService;\nlet seReaders : omapi.Reader[];\nlet seSession : omapi.Session;\nlet seChannel : omapi.Channel;\nlet aidArray : number[] = [0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10];\nlet p2 : number = 0x00;\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n\n    // 判断设备是否支持安全单元能力\n    if (!canIUse(\"SystemCapability.Communication.SecureElement\")) {\n      hilog.error(0x0000, 'testTag', 'secure element unavailable.');\n      return;\n    }\n    hilog.info(0x0000, 'testTag', 'secure element available.');\n    this.omaTest();\n  }\n\n  private async omaTest () {\n    // get the service\n    await omapi.createService().then((data) => {\n      if (data == undefined || !data.isConnected()) {\n        hilog.error(0x0000, 'testTag', 'secure element service disconnected.');\n        return;\n      }\n      seService = data;\n      hilog.info(0x0000, 'testTag', 'secure element service connected.');\n    }).catch((error: BusinessError) => {\n      hilog.error(0x0000, 'testTag', 'createService error %{public}s', JSON.stringify(error));\n      return;\n    });\n\n    // get readers\n    try {\n      seReaders = seService.getReaders();\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', 'getReaders error %{public}s', JSON.stringify(error));\n    }\n    if (seReaders == undefined || seReaders.length == 0) {\n      hilog.error(0x0000, 'testTag', 'no valid reader found.');\n      seService.shutdown();\n      return;\n    }\n    let reader: (omapi.Reader | undefined);\n    for (let i = 0; i < seReaders.length; ++i) {\n      let r = seReaders[i];\n      if (r.getName().includes(\"SIM\")) {\n        reader = r;\n        break;\n      }\n    }\n    if (reader == undefined) {\n      hilog.error(0x0000, 'testTag', 'no valid sim reader.');\n      return;\n    }\n    hilog.info(0x0000, 'testTag', 'reader is %{public}s', reader?.getName());\n\n    // get session\n    try {\n      seSession = reader?.openSession() as omapi.Session;\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', 'openSession error %{public}s', JSON.stringify(error));\n    }\n    if (seSession == undefined) {\n      hilog.error(0x0000, 'testTag', 'seSession invalid.');\n      seService.shutdown();\n      return;\n    }\n\n    // get channel\n    try {\n      // change the aid value for open logical channel.\n      seChannel = await seSession.openLogicalChannel(aidArray, p2);\n    } catch (exception) {\n      hilog.error(0x0000, 'testTag', 'openLogicalChannel exception %{public}s', JSON.stringify(exception));\n    }\n\n    if (seChannel == undefined) {\n      hilog.error(0x0000, 'testTag', 'seChannel invalid.');\n      return;\n    }\n\n    // transmit data\n    let cmdData = [0x01, 0x02, 0x03, 0x04]; // please change the raw data to be correct.\n    try {\n      let response: number[] = await seChannel.transmit(cmdData)\n      hilog.info(0x0000, 'testTag', 'seChannel.transmit() response = %{public}s.', JSON.stringify(response));\n    } catch (exception) {\n      hilog.error(0x0000, 'testTag', 'seChannel.transmit() exception = %{public}s.', JSON.stringify(exception));\n    }\n\n    // close channel. must make sure the channel is closed at last.\n    try {\n      seChannel.close();\n    } catch (exception) {\n      hilog.error(0x0000, 'testTag', 'seChannel.close() exception = %{public}s.', JSON.stringify(exception));\n    }\n\n  }\n}
