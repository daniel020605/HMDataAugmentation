接入方案
方案概述
当用户在应用/元服务内使用功能时，开发者需要按照标准意图Schema向系统共享行为数据，并支持意图调用（空调用与传参调用），以实现用户点击模板卡后跳转回对应页面。
意图注册
以歌曲续听推荐特性为例，首先要注册播放歌曲意图（PlayMusic），其他意图见各垂域意图Schema。开发者需要编辑对应的意图配置 PROJECT_HOME/entry/src/main/resources/base/profile/insight_intent.json文件，实现意图注册。
{\n  // 应用支持的意图列表\n  // 必须声明应用支持插件包含的必选意图，应用上架时会进行校验\n  \"insightIntents\": [\n    {\n      // 意图名称\n      // 名称应当遵循意图框架规范，当前仅支持预置垂域意图，不允许自定义\n      // 应用内意图名称唯一，不允许出现相同的名称定义\n      \"intentName\": \"PlayMusic\",\n      // 意图所属的垂域\n      \"domain\": \"MusicDomain\",\n      // 意图版本号\n      // 插件引用意图时会校验该版本号，只有和插件定义的版本号一致才能正常调用\n      \"intentVersion\": \"1.0.1\",\n      // 意图调用逻辑入口\n\n      \"srcEntry\": \"./ets/entryability/InsightIntentExecutorImpl.ets\",\n      \"uiAbility\": {\n        // 意图所在module、ability，以及代码相对路径入口\n        \"ability\": \"EntryAbility\",\n        // UIAbility支持前后台两种执行模式\n        \"executeMode\": [\n          \"background\",\n          \"foreground\"\n        ]\n      }\n    }\n  ]\n}
端侧意图共享
构建意图对象，并且调用shareIntent()，实现意图共享。可同时构建多个PlayMusic或PlayMusicList的意图对象。
import { insightIntent } from '@kit.IntentsKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet playMusicIntent1: insightIntent.InsightIntent;\nlet playMusicIntent2: insightIntent.InsightIntent;\n// 共享数据接口  意图数组可以是更多的实体\n// 根据实际代码上下文自行传入合适的context\ninsightIntent.shareIntent(context, [playMusicIntent1, playMusicIntent2]).then(() => {\n  console.info('shareIntent succeed');\n}).catch((err: BusinessError) => {\n  console.error(`error.code: ${err?.code}, failed because ${err?.message}`);\n});
PlayMusic的意图共享字段定义见各垂域意图Schema定义，代码示例如下：
import { insightIntent } from '@kit.IntentsKit';\n\nlet playMusicIntent: insightIntent.InsightIntent = {\n  intentName: \"PlayMusic\",\n  intentVersion: \"1.0\",\n  identifier: \"52dac3b0-6520-4974-81e5-25f0879449b5\",\n  intentActionInfo: {\n    actionMode: \"EXECUTED\",\n    executedTimeSlots: {\n      executedStartTime: 1637393212000,\n      executedEndTime: 1637393112000,\n    },\n    currentPercentage: 50,\n  },\n  intentEntityInfo: {\n    entityName: \"Music\",\n    entityId: \"C10194368\",\n    entityGroupId: \"C10194321312\",\n    displayName: \"测试歌曲1\",\n    description: \"NA\",\n    logoURL: \"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\",\n    keywords: [\"华为音乐\", \"化妆\"],\n    rankingHint: 99,\n    expirationTime: 1637393212000,\n    metadataModificationTime: 1637393212000,\n    activityType: [\"1\", \"2\", \"3\"],\n    artist: [\"测试歌手1\", \"测试歌手2\"],\n    lyricist: [\"测试词作者1\", \"测试词作者2\"],\n    composer: [\"测试曲作者1\", \"测试曲作者2\"],\n    albumName: \"测试专辑\",\n    duration: 244000,\n    playCount: 100000,\n    musicalGenre: [\"流行\", \"华语\", \"金曲\", \"00后\"],\n    isPublicData: false,\n  }\n}
完整的意图共享示例如下所示，该示例构建了一个PlayMusic意图，并进行了shareIntent调用。
import { insightIntent } from '@kit.IntentsKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet playMusicIntent: insightIntent.InsightIntent = {\n  intentName: \"PlayMusic\",\n  intentVersion: \"1.0\",\n  identifier: \"52dac3b0-6520-4974-81e5-25f0879449b5\",\n  intentActionInfo: {\n    actionMode: \"EXECUTED\",\n    executedTimeSlots: {\n      executedStartTime: 1637393212000,\n      executedEndTime: 1637393112000,\n    },\n    currentPercentage: 50,\n  },\n  intentEntityInfo: {\n    entityName: \"Music\",\n    entityId: \"C10194368\",\n    entityGroupId: \"C10194321312\",\n    displayName: \"测试歌曲1\",\n    description: \"NA\",\n    logoURL: \"https://www-file.abc.com/-/media/corporate/images/home/logo/abc_logo.png\",\n    keywords: [\"华为音乐\", \"化妆\"],\n    rankingHint: 99,\n    expirationTime: 1637393212000,\n    metadataModificationTime: 1637393212000,\n    activityType: [\"1\", \"2\", \"3\"],\n    artist: [\"测试歌手1\", \"测试歌手2\"],\n    lyricist: [\"测试词作者1\", \"测试词作者2\"],\n    composer: [\"测试曲作者1\", \"测试曲作者2\"],\n    albumName: \"测试专辑\",\n    duration: 244000,\n    playCount: 100000,\n    musicalGenre: [\"流行\", \"华语\", \"金曲\", \"00后\"],\n    isPublicData: false,\n  }\n}\n// 共享数据接口  意图数组可以是更多的实体\n// 根据实际代码上下文自行传入合适的context\ninsightIntent.shareIntent(context, [playMusicIntent]).then(() => {\n  console.info('shareIntent succeed');\n}).catch((err: BusinessError) => {\n  console.error(`error.code: ${err?.code}, failed because ${err?.message}`);\n});
端侧意图调用
[h2]意图执行组件为uiAbility的意图调用
如上文意图注册，当开发者注册的意图承载的运行组件为uiAbility时，开发者需要自己实现InsightIntentExecutor，并在对应回调实现打开落地页（点击推荐卡片跳转的界面）的能力，PlayMusic的意图调用字段定义见各垂域意图Schema。
步骤如下：
 继承InsightIntentExecutor。 重写对应方法，例如目标拉起前台页面，则可重写onExecuteInUIAbilityForegroundMode方法。 通过意图名称，识别播放歌曲意图（PlayMusic），在对应的方法中传递意图参数（param），并拉起对应落地页（如歌曲落地页）。import { insightIntent, InsightIntentExecutor } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n/**\n * 意图调用样例\n */\nexport default class InsightIntentExecutorImpl extends InsightIntentExecutor {\n  private static readonly PLAY_MUSIC = 'PlayMusic';\n  /**\n   * override 执行前台UIAbility意图\n   *\n   * @param name 意图名称\n   * @param param 意图参数\n   * @param pageLoader 窗口\n   * @returns 意图调用结果\n   */\n  onExecuteInUIAbilityForegroundMode(name: string, param: Record<string, Object>, pageLoader: window.WindowStage):\n    Promise<insightIntent.ExecuteResult> {\n    // 根据意图名称分发处理逻辑\n    switch (name) {\n      case InsightIntentExecutorImpl.PLAY_MUSIC:\n        return this.playMusic(param, pageLoader);\n      default:\n        break;\n    }\n    return Promise.resolve({\n      code: -1,\n      result: {\n        message: 'unknown intent'\n      }\n    } as insightIntent.ExecuteResult)\n  }\n  /**\n   * 实现调用播放歌曲功能\n   *\n   * @param param 意图参数\n   * @param pageLoader 窗口\n   */\n  private playMusic(param: Record<string, Object>, pageLoader: window.WindowStage): Promise<insightIntent.ExecuteResult> {\n    return new Promise((resolve, reject) => {\n      let para: Record<string, string> = {\n        'result': JSON.stringify(param)\n      };\n      let localStorage: LocalStorage = new LocalStorage(para);\n      // TODO 实现意图调用，loadContent的入参为歌曲落地页路径，例如：pages/Index\n      pageLoader.loadContent('pages/Index', localStorage)\n        .then(() => {\n          let entityId: string = (param.items as Array<object>)?.[0]?.['entityId'];\n          // TODO 调用成功的情况，此处可以打印日志\n          resolve({\n            code: 0,\n            result: {\n              message: 'Intent execute succeed'\n            }\n          });\n        })\n        .catch((err: BusinessError) => {\n          // TODO 调用失败的情况\n          resolve({\n            code: -1,\n            result: {\n              message: 'Intent execute failed'\n            }\n          })\n        });\n    })\n  }\n} 
[h2]意图执行组件为form的意图调用
如上文意图注册，当开发者注册的意图承载的运行组件为form（运行组件FormExtensionAbility）时，则需要开发者在实现的FormExtensionAbility中从want中获取并解析意图名和执行参数，用于卡片展示。
步骤如下：
 在意图执行绑定FormExtensionAbility的onAddForm(want: Want)中获取运行态意图框架传入的意图名（预定义keyName为ohos.insightIntent.executeParam.name）和意图执行参数（预定义keyName为ohos.insightIntent.executeParam.param）； 通过意图名称，识别播放歌曲意图(PlayMusic)，在对应的方法中传递意图参数（param），并加载对应数据用于卡片展示。 
import { Want } from '@kit.AbilityKit';\nimport { formBindingData, FormExtensionAbility } from '@kit.FormKit';\n\n/**\n * 卡片意图调用示例\n */\nexport default class LoadCardFormAbility extends FormExtensionAbility {\n  onAddForm(want: Want): formBindingData.FormBindingData {\n    if (want?.parameters?.['ohos.insightIntent.executeParam.name'] != undefined) {\n      const intentName = want.parameters['ohos.insightIntent.executeParam.name']; //意图名\n      //TODO: 根据意图名称分发处理逻辑，若仅一个卡片意图，则可以忽略\n    }\n\n    if (want?.parameters?.['ohos.insightIntent.executeParam.param'] != undefined) {\n      const executeParameter = want.parameters['ohos.insightIntent.executeParam.param']; //意图执行参数\n      //TODO: 从 executeParameter 中解析具体意图执行参数，用于卡片内容展示\n    }\n\n    let formData = ''; //TODO: 仅示例，根据具体逻辑封装\n    return formBindingData.createFormBindingData(formData);\n  }\n}
