AI字幕控件
适用场景
AI字幕控件应用广泛，例如在用户不熟悉音频源语言或者静音的时候，为用户提供字幕服务。
本章节将向您介绍如何使用AI字幕组件AICaptionComponent和AICaptionController展示AI字幕，效果如下图所示。
接口说明
AI字幕功能主要由AICaptionComponent提供，更多接口及使用方法请参见接口文档。
接口
描述
AICaptionComponent
AI字幕组件。
AICaptionOptions
AI字幕初始化参数。
AICaptionController
AI字幕组件的控制器，是AI字幕组件的主要功能入口类，用来操作AI字幕。它所承载的工作包括：写音频数据、获取音频流信息等。
开发步骤
 从项目根目录进入/src/main/ets/pages/Index.ets文件，在使用AI字幕控件前，将实现AI字幕控件和其他相关的类添加至工程。import { AICaptionComponent, AICaptionController, AICaptionOptions } from '@kit.SpeechKit';  简单配置页面的布局，加入AI字幕组件，并在aboutToAppear中设置AI字幕组件的传入参数。import { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'AI_CAPTION_DEMO'\n\nclass Logger {\n  static info(...msg: string[]) {\n    hilog.info(0x0000, TAG, msg.join())\n  }\n\n  static error(...msg: string[]) {\n    hilog.error(0x0000, TAG, msg.join())\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private captionOption ?: AICaptionOptions;\n  private controller = new AICaptionController();\n  @State isShown: boolean = false;\n\n  aboutToAppear(): void {\n    // AI字幕初始化参数，设置字幕的不透明度和回调函数\n    this.captionOption = {\n      initialOpacity: 1,\n      onPrepared: () => {\n        Logger.info('onPrepared')\n      },\n      onError: (error) => {\n        Logger.error(`onError, code: ${error.code}, msg: ${error.message}`)\n      }\n    }\n  }\n\n  build() {\n    Column({ space: 20 }) {\n      // 调用AICaptionComponent组件初始化字幕\n      AICaptionComponent({\n        isShown: this.isShown,\n        controller: this.controller,\n        options: this.captionOption\n      })\n        .width('80%')\n        .height(100)\n      Divider()\n      if (this.isShown) {\n        Text('上面是字幕区域')\n          .fontColor(Color.White)\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .padding(10)\n    .backgroundColor('#7A7D6A')\n  }\n}  在布局中加入两个按钮以及点击事件的回调函数。  第一个按钮的回调函数负责控制AI字幕组件的显示状态。 第二个按钮的回调函数负责读取资源目录中的音频文件，将音频数据传给AI字幕组件。  import { AudioData } from '@kit.SpeechKit';\n\n@Entry\n@Component\nstruct Index {\n\n  isReading: boolean = false;\n\n  async readPcmAudio() {\n    this.isReading = true;\n    const fileDate: Uint8Array = await getContext(this).resourceManager.getMediaContent($r(\"app.media.chineseAudio\"));\n    const bufferSize = 640;\n    const byteLength = fileDate.byteLength;\n    let offset = 0;\n    Logger.info('byteLength', byteLength.toString())\n    let starTime = new Date().getTime();\n    while (offset < byteLength) {\n      //模拟实际情况，读文件比录音机返回流快，所以要等待一段时间\n      let nextOffset = offset + bufferSize\n      if (offset > byteLength) {\n        this.isReading = false;\n        return\n      }\n      const arrayBuffer = fileDate.buffer.slice(offset, nextOffset);\n      let data = new Uint8Array(arrayBuffer);\n      Logger.info('data byteLength', data.byteLength.toString())\n      const audioData: AudioData = {\n        data: data\n      }\n      Logger.info(`offset: ${offset} | byteLength: ${byteLength} | bufferSize: ${bufferSize}`)\n\n      if (this.controller) {\n        Logger.info(`writeAudio： ${audioData.data.byteLength}`)\n        this.controller.writeAudio(audioData)\n      }\n      offset = offset + bufferSize;\n      const waitTime = bufferSize / 32\n      await this.sleep(waitTime)\n    }\n    let endTime = new Date().getTime()\n    this.isReading = false;\n    Logger.info('playtime', JSON.stringify(endTime - starTime))\n  }\n\n  sleep(time: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, time))\n  }\n\n  build() {\n    Column({ space: 20 }) {\n     // ...\n      Button('切换字幕显示状态:' + (this.isShown ? '显示' : '隐藏'))\n        .backgroundColor('#B8BDA0')\n        .width(200)\n        .onClick(() => {\n          this.isShown = !this.isShown;\n        })\n      Button('读取PCM音频')\n        .backgroundColor('#B8BDA0')\n        .width(200)\n        .onClick(() => {\n          if (!this.isReading) {\n            this.readPcmAudio()\n          }\n        })\n     // ...\n    }\n  }\n}  
开发实例
Index.ets
import { AICaptionComponent, AICaptionOptions, AICaptionController, AudioData } from '@kit.SpeechKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'AI_CAPTION_DEMO'\n\nclass Logger {\n  static info(...msg: string[]) {\n    hilog.info(0x0000, TAG, msg.join())\n  }\n\n  static error(...msg: string[]) {\n    hilog.error(0x0000, TAG, msg.join())\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private captionOption?: AICaptionOptions;\n  private controller: AICaptionController = new AICaptionController();\n  @State isShown: boolean = false;\n  isReading: boolean = false;\n\n  aboutToAppear(): void {\n    // AI字幕初始化参数，设置字幕的不透明度\n    this.captionOption = {\n      initialOpacity: 1,\n      onPrepared: () => {\n        Logger.info('onPrepared')\n      },\n      onError: (error: BusinessError) => {\n        Logger.error(`AICaption component error. Error code: ${error.code}, message: ${error.message}`)\n      }\n    }\n  }\n\n  async readPcmAudio() {\n    this.isReading = true;\n    // chineseAudio.pcm文件放在entry\\src\\main\\resources\\base\\media路径下\n    const fileData: Uint8Array = await getContext(this).resourceManager.getMediaContent($r('app.media.chineseAudio'));\n    const bufferSize = 640;\n    const byteLength = fileData.byteLength;\n    let offset = 0;\n    Logger.info(`Pcm data total bytes: ${byteLength.toString()}`)\n    let startTime = new Date().getTime();\n    while (offset < byteLength) {\n      //模拟实际情况，读文件比录音机返回流快，所以要等待一段时间\n      let nextOffset = offset + bufferSize\n      if (offset > byteLength) {\n        this.isReading = false;\n        return\n      }\n      const arrayBuffer = fileData.buffer.slice(offset, nextOffset);\n      let data = new Uint8Array(arrayBuffer);\n      const audioData: AudioData = {\n        data: data\n      }\n\n      if (this.controller) {\n        this.controller.writeAudio(audioData)\n      }\n      offset = offset + bufferSize;\n      const waitTime = bufferSize / 32\n      await this.sleep(waitTime)\n    }\n    let endTime = new Date().getTime()\n    this.isReading = false;\n    Logger.info(`Audio play time: ${JSON.stringify(endTime - startTime)}`)\n  }\n\n  sleep(time: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, time))\n  }\n\n  build() {\n    Column({ space: 20 }) {\n      Button('切换字幕显示状态:' + (this.isShown ? '显示' : '隐藏'))\n        .backgroundColor('#B8BDA0')\n        .width(200)\n        .onClick(() => {\n          this.isShown = !this.isShown;\n        })\n      Button('读取PCM音频')\n        .backgroundColor('#B8BDA0')\n        .width(200)\n        .onClick(() => {\n          if (!this.isReading) {\n            this.readPcmAudio()\n          }\n        })\n      Divider()\n      // 调用AICaptionComponent组件初始化字幕\n      AICaptionComponent({\n        isShown: this.isShown,\n        controller: this.controller,\n        options: this.captionOption\n      })\n        .width('80%')\n        .height(100)\n      Divider()\n      if (this.isShown) {\n        Text('上面是字幕区域')\n          .fontColor(Color.White)\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .padding(10)\n    .backgroundColor('#7A7D6A')\n  }\n}
