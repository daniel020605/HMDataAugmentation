创建列表 (List)
概述
列表是一种复杂的容器，当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。它适合用于呈现同类数据类型或数据类型集，例如图片和文本。在列表中显示数据集合是许多应用程序中的常见要求（如通讯录、音乐列表、购物清单等）。
使用列表可以轻松高效地显示结构化、可滚动的信息。通过在List组件中按垂直或者水平方向线性排列子组件ListItemGroup或ListItem，为列表中的行或列提供单个视图，或使用循环渲染迭代一组行或列，或混合任意数量的单个视图和ForEach结构，构建一个列表。List组件支持使用条件渲染、循环渲染、懒加载等渲染控制方式生成子组件。
布局与约束
列表作为一种容器，会自动按其滚动方向排列子组件，向列表中添加组件或从列表中移除组件会重新排列子组件。
如下图所示，在垂直列表中，List按垂直方向自动排列ListItemGroup或ListItem。
ListItemGroup用于列表数据的分组展示，其子组件也是ListItem。ListItem表示单个列表项，可以包含单个子组件。
图1 List、ListItemGroup和ListItem组件关系
List的子组件必须是ListItemGroup或ListItem，ListItem和ListItemGroup必须配合List来使用。
[h2]布局
List除了提供垂直和水平布局能力、超出屏幕时可以滚动的自适应延伸能力之外，还提供了自适应交叉轴方向上排列个数的布局能力。
利用垂直布局能力可以构建单列或者多列垂直滚动列表，如下图所示。
图2 垂直滚动列表（左：单列；右：多列）
利用水平布局能力可以是构建单行或多行水平滚动列表，如下图所示。
图3 水平滚动列表（左：单行；右：多行）
Grid和WaterFlow也可以实现单列、多列布局，如果布局每列等宽，且不需要跨行跨列布局，相比Grid和WaterFlow，则更推荐使用List。
[h2]约束
列表的主轴方向是指子组件列的排列方向，也是列表的滚动方向。垂直于主轴的轴称为交叉轴，其方向与主轴方向相互垂直。
如下图所示，垂直列表的主轴是垂直方向，交叉轴是水平方向；水平列表的主轴是水平方向，交叉轴是垂直方向。
图4 列表的主轴与交叉轴
如果List组件主轴或交叉轴方向设置了尺寸，则其对应方向上的尺寸为设置值。
如果List组件主轴方向没有设置尺寸，当List子组件主轴方向总尺寸小于List的父组件尺寸时，List主轴方向尺寸自动适应子组件的总尺寸。
如下图所示，一个垂直列表B没有设置高度时，其父组件A高度为200vp，若其所有子组件C的高度总和为150vp，则此时列表B的高度为150vp。
图5 列表主轴高度约束示例1（A: List的父组件; B: List组件; C: List的所有子组件）
如果子组件主轴方向总尺寸超过List父组件尺寸时，List主轴方向尺寸适应List的父组件尺寸。
如下图所示，同样是没有设置高度的垂直列表B，其父组件A高度为200vp，若其所有子组件C的高度总和为300vp，则此时列表B的高度为200vp。
图6 列表主轴高度约束示例2（A: List的父组件; B: List组件; C: List的所有子组件）
List组件交叉轴方向在没有设置尺寸时，其尺寸默认自适应父组件尺寸。
开发布局
[h2]设置主轴方向
List组件主轴默认是垂直方向，即默认情况下不需要手动设置List方向，就可以构建一个垂直滚动列表。
若是水平滚动列表场景，将List的listDirection属性设置为Axis.Horizontal即可实现。listDirection默认为Axis.Vertical，即主轴默认是垂直方向。
List() {\n  // ...\n}\n.listDirection(Axis.Horizontal)
[h2]设置交叉轴布局
List组件的交叉轴布局可以通过lanes和alignListItem属性进行设置，lanes属性用于确定交叉轴排列的列表项数量，alignListItem用于设置子组件在交叉轴方向的对齐方式。
List组件的lanes属性通常用于在不同尺寸的设备自适应构建不同行数或列数的列表，即一次开发、多端部署的场景，例如歌单列表。lanes属性的取值类型是\"number | LengthConstrain\"，即整数或者LengthConstrain类型。以垂直列表为例，如果将lanes属性设为2，表示构建的是一个两列的垂直列表，如图2中右图所示。lanes的默认值为1，即默认情况下，垂直列表的列数是1。
List() {\n  // ...\n}\n.lanes(2)
当其取值为LengthConstrain类型时，表示会根据LengthConstrain与List组件的尺寸自适应决定行或列数。
@Entry\n@Component\nstruct EgLanes {\n  @State egLanes: LengthConstrain = { minLength: 200, maxLength: 300 }\n  build() {\n    List() {\n      // ...\n    }\n    .lanes(this.egLanes)\n  }\n}
例如，假设在垂直列表中设置了lanes的值为{ minLength: 200, maxLength: 300 }。此时：
 当List组件宽度为300vp时，由于minLength为200vp，此时列表为一列。 当List组件宽度变化至400vp时，符合两倍的minLength，则此时列表自适应为两列。 
同样以垂直列表为例，当alignListItem属性设置为ListItemAlign.Center表示列表项在水平方向上居中对齐。alignListItem的默认值是ListItemAlign.Start，即列表项在列表交叉轴方向上默认按首部对齐。
List() {\n  // ...\n}\n.alignListItem(ListItemAlign.Center)
在列表中显示数据
列表视图垂直或水平显示项目集合，在行或列超出屏幕时提供滚动功能，使其适合显示大型数据集合。在最简单的列表形式中，List静态地创建其列表项ListItem的内容。
图7 城市列表
@Entry\n@Component\nstruct CityList {\n  build() {\n    List() {\n      ListItem() {\n        Text('北京').fontSize(24)\n      }\n\n      ListItem() {\n        Text('杭州').fontSize(24)\n      }\n\n      ListItem() {\n        Text('上海').fontSize(24)\n      }\n    }\n    .backgroundColor('#FFF1F3F5')\n    .alignListItem(ListItemAlign.Center)\n  }\n}
由于在ListItem中只能有一个根节点组件，不支持以平铺形式使用多个组件。因此，若列表项是由多个组件元素组成的，则需要将这多个元素组合到一个容器组件内或组成一个自定义组件。
图8 联系人列表项示例
如上图所示，联系人列表的列表项中，每个联系人都有头像和名称。此时，需要将Image和Text封装到一个Row容器内。
List() {\n  ListItem() {\n    Row() {\n      Image($r('app.media.iconE'))\n        .width(40)\n        .height(40)\n        .margin(10)\n\n      Text('小明')\n        .fontSize(20)\n    }\n  }\n\n  ListItem() {\n    Row() {\n      Image($r('app.media.iconF'))\n        .width(40)\n        .height(40)\n        .margin(10)\n\n      Text('小红')\n        .fontSize(20)\n    }\n  }\n}
迭代列表内容
通常，应用通过数据集合动态地创建列表。使用循环渲染可从数据源中迭代获取数据，并在每次迭代过程中创建相应的组件，降低代码复杂度。
ArkTS通过ForEach提供了组件的循环渲染能力。以简单形式的联系人列表为例，将联系人名称和头像数据以Contact类结构存储到contacts数组，使用ForEach中嵌套ListItem的形式来代替多个平铺的、内容相似的ListItem，从而减少重复代码。
import { util } from '@kit.ArkTS'\n\nclass Contact {\n  key: string = util.generateRandomUUID(true);\n  name: string;\n  icon: Resource;\n\n  constructor(name: string, icon: Resource) {\n    this.name = name;\n    this.icon = icon;\n  }\n}\n\n@Entry\n@Component\nstruct SimpleContacts {\n  private contacts: Array<object> = [\n    new Contact('小明', $r(\"app.media.iconA\")),\n    new Contact('小红', $r(\"app.media.iconB\")),\n  ]\n\n  build() {\n    List() {\n      ForEach(this.contacts, (item: Contact) => {\n        ListItem() {\n          Row() {\n            Image(item.icon)\n              .width(40)\n              .height(40)\n              .margin(10)\n            Text(item.name).fontSize(20)\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.Start)\n        }\n      }, (item: Contact) => JSON.stringify(item))\n    }\n    .width('100%')\n  }\n}
在List组件中，ForEach除了可以用来循环渲染ListItem，也可以用来循环渲染ListItemGroup。ListItemGroup的循环渲染详细使用请参见支持分组列表。
自定义列表样式
[h2]设置内容间距
在初始化列表时，如需在列表项之间添加间距，可以使用space参数。例如，在每个列表项之间沿主轴方向添加10vp的间距：
List({ space: 10 }) {\n  // ...\n}
[h2]添加分隔线
分隔线用来将界面元素隔开，使单个元素更加容易识别。如下图所示，当列表项左边有图标（如蓝牙图标），由于图标本身就能很好的区分，此时分隔线从图标之后开始显示即可。
图9 设置列表分隔线样式
List提供了divider属性用于给列表项之间添加分隔线。在设置divider属性时，可以通过strokeWidth和color属性设置分隔线的粗细和颜色。
startMargin和endMargin属性分别用于设置分隔线距离列表侧边起始端的距离和距离列表侧边结束端的距离。
class DividerTmp {\n  strokeWidth: Length = 1\n  startMargin: Length = 60\n  endMargin: Length = 10\n  color: ResourceColor = '#ffe9f0f0'\n\n  constructor(strokeWidth: Length, startMargin: Length, endMargin: Length, color: ResourceColor) {\n    this.strokeWidth = strokeWidth\n    this.startMargin = startMargin\n    this.endMargin = endMargin\n    this.color = color\n  }\n}\n@Entry\n@Component\nstruct EgDivider {\n  @State egDivider: DividerTmp = new DividerTmp(1, 60, 10, '#ffe9f0f0')\n  build() {\n    List() {\n      // ...\n    }\n    .divider(this.egDivider)\n  }\n}
此示例表示从距离列表侧边起始端60vp开始到距离结束端10vp的位置，画一条粗细为1vp的分割线，可以实现图9设置列表分隔线的样式。
 分隔线的宽度会使ListItem之间存在一定间隔，当List设置的内容间距小于分隔线宽度时，ListItem之间的间隔会使用分隔线的宽度。 当List存在多列时，分割线的startMargin和endMargin作用于每一列上。 List组件的分隔线画在两个ListItem之间，第一个ListItem上方和最后一个ListItem下方不会绘制分隔线。 
[h2]添加滚动条
当列表项高度（宽度）超出屏幕高度（宽度）时，列表可以沿垂直（水平）方向滚动。在页面内容很多时，若用户需快速定位，可拖拽滚动条，如下图所示。
图10 列表的滚动条
在使用List组件时，可通过scrollBar属性控制列表滚动条的显示。scrollBar的取值类型为BarState，当取值为BarState.Auto表示按需显示滚动条。此时，当触摸到滚动条区域时显示控件，可上下拖拽滚动条快速浏览内容，拖拽时会变粗。若不进行任何操作，2秒后滚动条自动消失。
scrollBar属性API version 9及以下版本默认值为BarState.Off，从API version 10版本开始默认值为BarState.Auto。
List() {\n  // ...\n}\n.scrollBar(BarState.Auto)
支持分组列表
在列表中支持数据的分组展示，可以使列表显示结构清晰，查找方便，从而提高使用效率。分组列表在实际应用中十分常见，如下图所示联系人列表。
图11 联系人分组列表
在List组件中使用ListItemGroup对项目进行分组，可以构建二维列表。
在List组件中可以直接使用一个或者多个ListItemGroup组件，ListItemGroup的宽度默认充满List组件。在初始化ListItemGroup时，可通过header参数设置列表分组的头部组件。
@Entry\n@Component\nstruct ContactsList {\n  \n  @Builder itemHead(text: string) {\n    // 列表分组的头部组件，对应联系人分组A、B等位置的组件\n    Text(text)\n      .fontSize(20)\n      .backgroundColor('#fff1f3f5')\n      .width('100%')\n      .padding(5)\n  }\n\n  build() {\n    List() {\n      ListItemGroup({ header: this.itemHead('A') }) {\n        // 循环渲染分组A的ListItem\n      }\n\n      ListItemGroup({ header: this.itemHead('B') }) {\n        // 循环渲染分组B的ListItem\n      }\n    }\n  }\n}
如果多个ListItemGroup结构类似，可以将多个分组的数据组成数组，然后使用ForEach对多个分组进行循环渲染。例如在联系人列表中，将每个分组的联系人数据contacts（可参考迭代列表内容章节）和对应分组的标题title数据进行组合，定义为数组contactsGroups。然后在ForEach中对contactsGroups进行循环渲染，即可实现多个分组的联系人列表。可参考添加粘性标题章节示例代码。
添加粘性标题
粘性标题是一种常见的标题模式，常用于定位字母列表的头部元素。如下图所示，在联系人列表中滚动A部分时，B部分开始的头部元素始终处于A的下方。而在开始滚动B部分时，B的头部会固定在屏幕顶部，直到所有B的项均完成滚动后，才被后面的头部替代。
粘性标题不仅有助于阐明列表中数据的表示形式和用途，还可以帮助用户在大量信息中进行数据定位，从而避免用户在标题所在的表的顶部与感兴趣区域之间反复滚动。
图12 粘性标题
List组件的sticky属性配合ListItemGroup组件使用，用于设置ListItemGroup中的头部组件是否呈现吸顶效果或者尾部组件是否呈现吸底效果。
通过给List组件设置sticky属性为StickyStyle.Header，即可实现列表的粘性标题效果。如果需要支持吸底效果，可以通过footer参数初始化ListItemGroup的底部组件，并将sticky属性设置为StickyStyle.Footer。
import { util } from '@kit.ArkTS'\nclass Contact {\n  key: string = util.generateRandomUUID(true);\n  name: string;\n  icon: Resource;\n\n  constructor(name: string, icon: Resource) {\n    this.name = name;\n    this.icon = icon;\n  }\n}\nclass ContactsGroup {\n  title: string = ''\n  contacts: Array<object> | null = null\n  key: string = \"\"\n}\nexport let contactsGroups: object[] = [\n  {\n    title: 'A',\n    contacts: [\n      new Contact('艾佳', $r('app.media.iconA')),\n      new Contact('安安', $r('app.media.iconB')),\n      new Contact('Angela', $r('app.media.iconC')),\n    ],\n    key: util.generateRandomUUID(true)\n  } as ContactsGroup,\n  {\n    title: 'B',\n    contacts: [\n      new Contact('白叶', $r('app.media.iconD')),\n      new Contact('伯明', $r('app.media.iconE')),\n    ],\n    key: util.generateRandomUUID(true)\n  } as ContactsGroup,\n  // ...\n]\n@Entry\n@Component\nstruct ContactsList {\n  // 定义分组联系人数据集合contactsGroups数组\n  @Builder itemHead(text: string) {\n    // 列表分组的头部组件，对应联系人分组A、B等位置的组件\n    Text(text)\n      .fontSize(20)\n      .backgroundColor('#fff1f3f5')\n      .width('100%')\n      .padding(5)\n  }\n  build() {\n    List() {\n      // 循环渲染ListItemGroup，contactsGroups为多个分组联系人contacts和标题title的数据集合\n      ForEach(contactsGroups, (itemGroup: ContactsGroup) => {\n        ListItemGroup({ header: this.itemHead(itemGroup.title) }) {\n          // 循环渲染ListItem\n          if (itemGroup.contacts) {\n            ForEach(itemGroup.contacts, (item: Contact) => {\n              ListItem() {\n                // ...\n              }\n            }, (item: Contact) => JSON.stringify(item))\n          }\n        }\n      }, (itemGroup: ContactsGroup) => JSON.stringify(itemGroup))\n    }.sticky(StickyStyle.Header)  // 设置吸顶，实现粘性标题效果\n  }\n}
控制滚动位置
控制滚动位置在实际应用中十分常见，例如当新闻页列表项数量庞大，用户滚动列表到一定位置时，希望快速滚动到列表底部或返回列表顶部。此时，可以通过控制滚动位置来实现列表的快速定位，如下图所示。
图13 返回列表顶部
List组件初始化时，可以通过scroller参数绑定一个Scroller对象，进行列表的滚动控制。例如，用户在新闻应用中，点击新闻页面底部的返回顶部按钮时，就可以通过Scroller对象的scrollToIndex方法使列表滚动到指定的列表项索引位置。
首先，需要创建一个Scroller的对象listScroller。
private listScroller: Scroller = new Scroller();
然后，通过将listScroller用于初始化List组件的scroller参数，完成listScroller与列表的绑定。在需要跳转的位置指定scrollToIndex的参数为0，表示返回列表顶部。
Stack({ alignContent: Alignment.Bottom }) {\n  // 将listScroller用于初始化List组件的scroller参数，完成listScroller与列表的绑定。\n  List({ space: 20, scroller: this.listScroller }) {\n    // ...\n  }\n\n  Button() {\n    // ...\n  }\n  .onClick(() => {\n    // 点击按钮时，指定跳转位置，返回列表顶部\n    this.listScroller.scrollToIndex(0)\n  })\n}
响应滚动位置
许多应用需要监听列表的滚动位置变化并作出响应。例如，在联系人列表滚动时，如果跨越了不同字母开头的分组，则侧边字母索引栏也需要更新到对应的字母位置。
除了字母索引之外，滚动列表结合多级分类索引在应用开发过程中也很常见，例如购物应用的商品分类页面，多级分类也需要监听列表的滚动位置。
图14 字母索引响应联系人列表滚动
如上图所示，当联系人列表从A滚动到B时，右侧索引栏也需要同步从选中A状态变成选中B状态。此场景可以通过监听List组件的onScrollIndex事件来实现，右侧索引栏需要使用字母表索引组件AlphabetIndexer。
在列表滚动时，根据列表此时所在的索引值位置firstIndex，重新计算字母索引栏对应字母的位置selectedIndex。由于AlphabetIndexer组件通过selected属性设置了选中项索引值，当selectedIndex变化时会触发AlphabetIndexer组件重新渲染，从而显示为选中对应字母的状态。
const alphabets = ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\n  'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n@Entry\n@Component\nstruct ContactsList {\n  @State selectedIndex: number = 0;\n  private listScroller: Scroller = new Scroller();\n\n  build() {\n    Stack({ alignContent: Alignment.End }) {\n      List({ scroller: this.listScroller }) {}\n      .onScrollIndex((firstIndex: number) => {\n        // 根据列表滚动到的索引值，重新计算对应联系人索引栏的位置this.selectedIndex\n      })\n\n      // 字母表索引组件\n      AlphabetIndexer({ arrayValue: alphabets, selected: 0 })\n        .selected(this.selectedIndex)\n    }\n  }\n}
计算索引值时，ListItemGroup作为一个整体占一个索引值，不计算ListItemGroup内部ListItem的索引值。
响应列表项侧滑
侧滑菜单在许多应用中都很常见。例如，通讯类应用通常会给消息列表提供侧滑删除功能，即用户可以通过向左侧滑列表的某一项，再点击删除按钮删除消息，如下图所示。其中，列表项头像右上角标记设置参考给列表项添加标记。
图15 侧滑删除列表项
ListItem的swipeAction属性可用于实现列表项的左右滑动功能。swipeAction属性方法初始化时有必填参数SwipeActionOptions，其中，start参数表示设置列表项右滑时起始端滑出的组件，end参数表示设置列表项左滑时尾端滑出的组件。
在消息列表中，end参数表示设置ListItem左滑时尾端划出自定义组件，即删除按钮。在初始化end方法时，将滑动列表项的索引传入删除按钮组件，当用户点击删除按钮时，可以根据索引值来删除列表项对应的数据，从而实现侧滑删除功能。
 实现尾端滑出组件的构建。 @Builder itemEnd(index: number) {\n  // 构建尾端滑出组件\n  Button({ type: ButtonType.Circle }) {\n    Image($r('app.media.ic_public_delete_filled'))\n      .width(20)\n      .height(20)\n  }\n  .onClick(() => {\n    // this.messages为列表数据源，可根据实际场景构造。点击后从数据源删除指定数据项。\n    this.messages.splice(index, 1);\n  })\n} 绑定swipeAction属性到可左滑的ListItem上。 // 构建List时，通过ForEach基于数据源this.messages循环渲染ListItem。\nListItem() {\n  // ...\n}\n.swipeAction({\n  end: {\n    // index为该ListItem在List中的索引值。\n    builder: () => { this.itemEnd(index) },\n  }\n}) // 设置侧滑属性. 
给列表项添加标记
添加标记是一种无干扰性且直观的方法，用于显示通知或将注意力集中到应用内的某个区域。例如，当消息列表接收到新消息时，通常对应的联系人头像的右上方会出现标记，提示有若干条未读消息，如下图所示。
图16 给列表项添加标记
在ListItem中使用Badge组件可实现给列表项添加标记功能。Badge是可以附加在单个组件上用于信息标记的容器组件。
在消息列表中，若希望在联系人头像右上角添加标记，可在实现消息列表项ListItem的联系人头像时，将头像Image组件作为Badge的子组件。
在Badge组件中，count和position参数用于设置需要展示的消息数量和提示点显示位置，还可以通过style参数灵活设置标记的样式。
ListItem() {\n  Badge({\n    count: 1,\n    position: BadgePosition.RightTop,\n    style: { badgeSize: 16, badgeColor: '#FA2A2D' }\n  }) {\n    // Image组件实现消息联系人头像\n    // ...\n  }\n}
下拉刷新与上拉加载
页面的下拉刷新与上拉加载功能在移动应用中十分常见，例如，新闻页面的内容刷新和加载。这两种操作的原理都是通过响应用户的触摸事件，在顶部或者底部显示一个刷新或加载视图，完成后再将此视图隐藏。
以下拉刷新为例，其实现主要分成三步：
 监听手指按下事件，记录其初始位置的值。 监听手指按压移动事件，记录并计算当前移动的位置与初始值的差值，大于0表示向下移动，同时设置一个允许移动的最大值。 监听手指抬起事件，若此时移动达到最大值，则触发数据加载并显示刷新视图，加载完成后将此视图隐藏。 
页面的下拉刷新操作推荐使用Refresh组件实现。
下拉刷新与上拉加载的具体实现可参考新闻数据加载。
编辑列表
列表的编辑模式用途十分广泛，常见于待办事项管理、文件管理、备忘录的记录管理等应用场景。在列表的编辑模式下，新增和删除列表项是最基础的功能，其核心是对列表项对应的数据集合进行数据添加和删除。
下面以待办事项管理为例，介绍如何快速实现新增和删除列表项功能。
[h2]新增列表项
如下图所示，当用户点击添加按钮时，提供用户新增列表项内容选择或填写的交互界面，用户点击确定后，列表中新增对应的项目。
图17 新增待办
添加列表项功能实现主要流程如下：
 定义列表项数据结构，以待办事项管理为例，首先定义待办数据结构。 //ToDo.ets\nimport { util } from '@kit.ArkTS'\n\nexport class ToDo {\n  key: string = util.generateRandomUUID(true);\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n} 构建列表整体布局和列表项。 //ToDoListItem.ets\nimport { ToDo } from './ToDo';\n@Component\nexport struct ToDoListItem {\n  @Link isEditMode: boolean\n  @Link selectedItems: ToDo[]\n  private toDoItem: ToDo = new ToDo(\"\");\n\n  build() {\n   Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {\n     // ...\n   }\n   .width('100%')\n   .height(80)\n   //.padding() 根据具体使用场景设置\n   .borderRadius(24)\n   //.linearGradient() 根据具体使用场景设置\n   .gesture(\n     GestureGroup(GestureMode.Exclusive,\n     LongPressGesture()\n       .onAction(() => {\n         // ...\n       })\n     )\n   )\n  }\n} 初始化待办列表数据和可选事项，最后，构建列表布局和列表项。 //ToDoList.ets\nimport { ToDo } from './ToDo';\nimport { ToDoListItem } from './ToDoListItem';\n\n@Entry\n@Component\nstruct ToDoList {\n  @State toDoData: ToDo[] = []\n  @Watch('onEditModeChange') @State isEditMode: boolean = false\n  @State selectedItems: ToDo[] = []\n private availableThings: string[] = ['读书', '运动', '旅游', '听音乐', '看电影', '唱歌']\n\n  onEditModeChange() {\n    if (!this.isEditMode) {\n      this.selectedItems = []\n    }\n }\n\n  build() {\n    Column() {\n      Row() {\n        if (this.isEditMode) {\n          Text('X')\n            .fontSize(20)\n            .onClick(() => {\n              this.isEditMode = false;\n            })\n            .margin({ left: 20, right: 20 })\n        } else {\n          Text('待办')\n            .fontSize(36)\n            .margin({ left: 40 })\n          Blank()\n          Text('+') //提供新增列表项入口，即给新增按钮添加点击事件\n            .onClick(() => {\n              this.getUIContext().showTextPickerDialog({\n                range: this.availableThings,\n                onAccept: (value: TextPickerResult) => {\n                  let arr = Array.isArray(value.index) ? value.index : [value.index];\n                  for (let i = 0; i < arr.length; i++) {\n                    this.toDoData.push(new ToDo(this.availableThings[arr[i]])); // 新增列表项数据toDoData(可选事项)\n                  }\n                },\n              })\n            })\n        }\n        List({ space: 10 }) {\n          ForEach(this.toDoData, (toDoItem: ToDo) => {\n            ListItem() {\n              // 将toDoData的每个数据放入到以model的形式放进ListItem里\n              ToDoListItem({\n                isEditMode: this.isEditMode,\n                toDoItem: toDoItem,\n                selectedItems: this.selectedItems })\n            }\n          }, (toDoItem: ToDo) => toDoItem.key.toString())\n        }\n      }\n    }\n  }\n} 
[h2]删除列表项
如下图所示，当用户长按列表项进入删除模式时，提供用户删除列表项选择的交互界面，用户勾选完成后点击删除按钮，列表中删除对应的项目。
图18 长按删除待办事项
删除列表项功能实现主要流程如下：
 列表的删除功能一般进入编辑模式后才可使用，所以需要提供编辑模式的入口。 以待办列表为例，通过监听列表项的长按事件，当用户长按列表项时，进入编辑模式。 // 结构参考\nexport class ToDo {\n  key: string = util.generateRandomUUID(true);\n  name: string;\n  toDoData: ToDo[] = [];\n\n  constructor(name: string) {\n    this.name = name;\n  }\n} // 实现参考\nFlex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {\n  // ...\n}\n.gesture(\nGestureGroup(GestureMode.Exclusive,\n  LongPressGesture()\n    .onAction(() => {\n      if (!this.isEditMode) {\n        this.isEditMode = true; //进入编辑模式\n      }\n    })\n  )\n) 需要响应用户的选择交互，记录要删除的列表项数据。 在待办列表中，通过勾选框的勾选或取消勾选，响应用户勾选列表项变化，记录所有选择的列表项。 // 结构参考\nimport { util } from '@kit.ArkTS'\nexport class ToDo {\n key: string = util.generateRandomUUID(true);\n name: string;\n toDoData: ToDo[] = [];\n\n constructor(name: string) {\n   this.name = name;\n }\n} // 实现参考\nif (this.isEditMode) {\n  Checkbox()\n    .onChange((isSelected) => {\n      if (isSelected) {\n        this.selectedItems.push(toDoList.toDoItem) // this.selectedItems为勾选时，记录选中的列表项，可根据实际场景构造\n      } else {\n        let index = this.selectedItems.indexOf(toDoList.toDoItem)\n        if (index !== -1) {\n          this.selectedItems.splice(index, 1) // 取消勾选时，则将此项从selectedItems中删除\n        }\n      }\n    })\n} 需要响应用户点击删除按钮事件，删除列表中对应的选项。 // 结构参考\nimport { util } from '@kit.ArkTS'\nexport class ToDo {\n  key: string = util.generateRandomUUID(true);\n  name: string;\n  toDoData: ToDo[] = [];\n\n  constructor(name: string) {\n    this.name = name;\n  }\n} // 实现参考\nButton('删除')\n  .onClick(() => {\n    // this.toDoData为待办的列表项，可根据实际场景构造。点击后删除选中的列表项对应的toDoData数据\n    let leftData = this.toDoData.filter((item) => {\n      return !this.selectedItems.find((selectedItem) => selectedItem == item);\n    })\n    this.toDoData = leftData;\n    this.isEditMode = false;\n  }) 
长列表的处理
循环渲染适用于短列表，当构建具有大量列表项的长列表时，如果直接采用循环渲染方式，会一次性加载所有的列表元素，会导致页面启动时间过长，影响用户体验。因此，推荐使用数据懒加载（LazyForEach）方式实现按需迭代加载数据，从而提升列表性能。
关于长列表按需加载优化的具体实现可参考数据懒加载章节中的示例。
当使用懒加载方式渲染列表时，为了更好的列表滚动体验，减少列表滑动时出现白块，List组件提供了cachedCount参数用于设置列表项缓存数，只在懒加载LazyForEach中生效。
List() {\n  // ...\n}.cachedCount(3)
以垂直列表为例：
 若懒加载是用于ListItem，当列表为单列模式时，会在List显示的ListItem前后各缓存cachedCount个ListItem；若是多列模式下，会在List显示的ListItem前后各缓存cachedCount * 列数个ListItem。 若懒加载是用于ListItemGroup，无论单列模式还是多列模式，都是在List显示的ListItem前后各缓存cachedCount个ListItemGroup。 
 cachedCount的增加会增大UI的CPU、内存开销。使用时需要根据实际情况，综合性能和用户体验进行调整。 列表使用数据懒加载时，除了显示区域的列表项和前后缓存的列表项，其他列表项会被销毁。 
示例代码
 二维列表 List组件嵌套滑动 列表编辑效果 
