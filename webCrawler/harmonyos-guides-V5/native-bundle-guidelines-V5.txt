NativeBundle开发指导
场景介绍
开发者可以通过本指导了解在HarmonyOS应用中，如何使用Native Bundle接口获取应用自身相关信息。
接口说明
开发步骤
1. 创建工程
2. 添加依赖
创建完成后，DevEco Studio会在工程生成cpp目录，目录有types/libentry/index.d.ts、napi_init.cpp、CMakeLists.txt等文件。
 打开src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加包管理的libbundle_ndk.z.so。 target_link_libraries(entry PUBLIC libace_napi.z.so libbundle_ndk.z.so) 打开src/main/cpp/napi_init.cpp文件，添加头文件。 #include \"bundle/native_interface_bundle.h\" 
3. 修改源文件
 打开src/main/cpp/napi_init.cpp文件，文件Init会对当前方法进行初始化映射，这里定义对外接口为getCurrentApplicationInfo。 EXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"getCurrentApplicationInfo\", nullptr, GetCurrentApplicationInfo, nullptr, nullptr, nullptr, napi_default, nullptr}\n    };\n\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END 在src/main/cpp/napi_init.cpp文件中，增加对应的方法，如下所示： static napi_value GetCurrentApplicationInfo(napi_env env, napi_callback_info info) 在src/main/cpp/napi_init.cpp文件中获取Native的包信息对象，并转为js的包信息对象，即可在js测获取应用的信息： static napi_value GetCurrentApplicationInfo(napi_env env, napi_callback_info info)\n{\n    // 调用Native接口获取应用信息\n    OH_NativeBundle_ApplicationInfo nativeApplicationInfo = OH_NativeBundle_GetCurrentApplicationInfo();\n    napi_value result = nullptr;\n    napi_create_object(env, &result);\n    // Native接口获取的应用包名转为js对象里的bundleName属性\n    napi_value bundleName;\n    napi_create_string_utf8(env, nativeApplicationInfo.bundleName, NAPI_AUTO_LENGTH, &bundleName);\n    napi_set_named_property(env, result, \"bundleName\", bundleName);\n    // Native接口获取的指纹信息转为js对象里的fingerprint属性\n    napi_value fingerprint;\n    napi_create_string_utf8(env, nativeApplicationInfo.fingerprint, NAPI_AUTO_LENGTH, &fingerprint);\n    napi_set_named_property(env, result, \"fingerprint\", fingerprint);\n\n    char* appId = OH_NativeBundle_GetAppId();\n    // Native接口获取的appId转为js对象里的appId属性\n    napi_value napi_appId;\n    napi_create_string_utf8(env, appId, NAPI_AUTO_LENGTH, &napi_appId);\n    napi_set_named_property(env, result, \"appId\", napi_appId);\n\n    char* appIdentifier = OH_NativeBundle_GetAppIdentifier();\n    // Native接口获取的appIdentifier转为js对象里的appIdentifier属性\n    napi_value napi_appIdentifier;\n    napi_create_string_utf8(env, appIdentifier, NAPI_AUTO_LENGTH, &napi_appIdentifier);\n    napi_set_named_property(env, result, \"appIdentifier\", napi_appIdentifier);\n    // 最后为了防止内存泄漏，手动释放\n    free(nativeApplicationInfo.bundleName);\n    free(nativeApplicationInfo.fingerprint);\n    free(appId);\n    free(appIdentifier);\n    return result;\n} 
4. js侧调用
 打开src\\main\\ets\\pages\\index.ets, 导入\"libentry.so\"。 调用Native接口getCurrentApplicationInfo即可获取应用信息。示例如下： import hilog from '@ohos.hilog';\nimport testNapi from 'libentry.so';\n\n@Entry\n@Component\nstruct Index {\n@State message: string = 'Hello World';\n\n    build() {\n        Row() {\n        Column() {\n            Text(this.message)\n            .fontSize(50)\n            .fontWeight(FontWeight.Bold)\n\n            Button(){\n            Text(\"GetCurrentApplicationInfo\").fontSize(30)\n            }.type(ButtonType.Capsule)\n            .margin({\n            top: 20\n            })\n            .backgroundColor('#0D9FFB')\n            .width('70%')\n            .height('5%')\n            .onClick(()=>{\n            try {\n                let data = testNapi.getCurrentApplicationInfo();\n                console.info(\"getCurrentApplicationInfo success, data is \" + JSON.stringify(data));\n            } catch (error) {\n                console.error(\"getCurrentApplicationInfo failed\");\n                this.message = \"getCurrentApplicationInfo failed\";\n            }\n            })\n        }\n        .width('100%')\n        }\n        .height('100%')\n    }\n} 
关于包管理NDK开发，可参考Bundle模块介绍。
