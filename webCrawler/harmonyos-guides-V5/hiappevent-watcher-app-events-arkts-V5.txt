订阅应用事件（ArkTS）
HiAppEvent提供了事件订阅接口，用于本地获取应用事件。
接口说明
API接口的具体使用说明（参数使用限制、具体取值范围等）请参考应用事件打点API文档。
打点接口功能介绍：
订阅接口功能介绍：
开发步骤
以实现对用户点击按钮行为的事件打点及订阅为例，说明开发步骤。
 新建一个ArkTS应用工程，编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，导入依赖模块： import { hiAppEvent, hilog } from '@kit.PerformanceAnalysisKit'; 编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets” 文件，在onCreate函数中添加对用户点击按钮事件的订阅，示例代码如下：  hiAppEvent.addWatcher({\n   // 开发者可以自定义观察者名称，系统会使用名称来标识不同的观察者\n   name: \"watcher1\",\n   // 开发者可以订阅感兴趣的应用事件，此处是订阅了按钮事件\n   appEventFilters: [{ domain: \"button\" }],\n   // 开发者可以设置订阅回调触发的条件，此处是设置为事件打点数量满足1个\n   triggerCondition: { row: 1 },\n   // 开发者可以自行实现订阅回调函数，以便对订阅获取到的事件打点数据进行自定义处理\n   onTrigger: (curRow: number, curSize: number, holder: hiAppEvent.AppEventPackageHolder) => {\n     // 返回的holder对象为null，表示订阅过程发生异常，因此在记录错误日志后直接返回\n     if (holder == null) {\n       hilog.error(0x0000, 'testTag', \"HiAppEvent holder is null\");\n       return;\n     }\n     hilog.info(0x0000, 'testTag', `HiAppEvent onTrigger: curRow=%{public}d, curSize=%{public}d`, curRow, curSize);\n     let eventPkg: hiAppEvent.AppEventPackage | null = null;\n     // 根据设置阈值大小（默认为512KB）去获取订阅事件包，直到将订阅数据全部取出\n     // 返回的事件包对象为null，表示当前订阅数据已被全部取出，此次订阅回调触发结束\n     while ((eventPkg = holder.takeNext()) != null) {\n       // 开发者可以对事件包中的事件打点数据进行自定义处理，此处是将事件打点数据打印在日志中\n       hilog.info(0x0000, 'testTag', `HiAppEvent eventPkg.packageId=%{public}d`, eventPkg.packageId);\n       hilog.info(0x0000, 'testTag', `HiAppEvent eventPkg.row=%{public}d`, eventPkg.row);\n       hilog.info(0x0000, 'testTag', `HiAppEvent eventPkg.size=%{public}d`, eventPkg.size);\n       for (const eventInfo of eventPkg.data) {\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventPkg.info=%{public}s`, eventInfo);\n       }\n     }\n   }\n }); 编辑工程中的“entry > src > main > ets > pages > Index.ets” 文件，导入依赖模块： import { BusinessError } from '@kit.BasicServicesKit';\nimport { hiAppEvent, hilog } from '@kit.PerformanceAnalysisKit'; 编辑工程中的“entry > src > main > ets > pages > Index.ets” 文件，添加一个按钮并在其onClick函数中进行事件打点，以记录按钮点击事件，示例代码如下：   Button(\"writeTest\").onClick(()=>{\n    // 在按钮点击函数中进行事件打点，以记录按钮点击事件\n    let eventParams: Record<string, number> = { 'click_time': 100 };\n    let eventInfo: hiAppEvent.AppEventInfo = {\n      // 事件领域定义\n      domain: \"button\",\n      // 事件名称定义\n      name: \"click\",\n      // 事件类型定义\n      eventType: hiAppEvent.EventType.BEHAVIOR,\n      // 事件参数定义\n      params: eventParams,\n    };\n    hiAppEvent.write(eventInfo).then(() => {\n      hilog.info(0x0000, 'testTag', `HiAppEvent success to write event`)\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, 'testTag', `HiAppEvent err.code: ${err.code}, err.message: ${err.message}`)\n    });\n  }) 点击DevEco Studio界面中的运行按钮，运行应用工程，然后在应用界面中点击按钮“writeTest”，触发一次按钮点击事件打点。 可以在Log窗口看到按钮点击事件打点成功的日志，以及触发订阅回调后对打点事件数据的处理日志： HiAppEvent success to write event\nHiAppEvent eventPkg.packageId=0\nHiAppEvent eventPkg.row=1\nHiAppEvent eventPkg.size=124\nHiAppEvent eventPkg.info={\"domain_\":\"button\",\"name_\":\"click\",\"type_\":4,\"time_\":1670268234523,\"tz_\":\"+0800\",\"pid_\":3295,\"tid_\":3309,\"click_time\":100} 
