实体抽取
适用场景
实体抽取是自然语言处理服务的一项关键能力。以综合上下文信息,从文本中准确识别出多种类型的实体：
 日期时间（DATETIME）：提取文本中的具体日期,如“2024年6月18日”等。 电子邮件（EMAIL）：识别文本中的电子邮件地址,如“example@abc.com”。 快递单号（EXPRESS_NO）：抽取文本中的快递单号信息。 航班号（FLIGHT_NO）：定位文本中的航班号,如“CA1234”等。 地址（LOCATION）：从文本中提取详细的地址描述。 人名（NAME）：找出文本中出现的人名信息。 手机号（PHONE_NO）识别文本中的手机号码。 网址（URL）：抽取文本中的网址链接。 验证码（VERFICATION_CODE）：定位文本中的验证码数字。 身份证号（ID_NO）：识别文本中的身份证号码信息。通过准确抽取以上多种类型的实体信息，该项能力可以广泛应用于新闻阅读、信息检索、客户服务、社交聊天、金融运营等多种场景。例如，在新闻阅读场景中，可以对新闻正文进行实体抽取，并对人名、地名、时间、网址等关键实体信息进行高亮标识，帮助读者快速获取文章要点;在客服场景，通过抽取用户留言中的手机号、快递单号、验证码等信息，客服人员能够更高效地定位问题并给出解决方案。实体抽取为各行业的智能化应用提供了坚实的基础支持。 
约束与限制
该能力当前不支持模拟器。
开发步骤
 在使用实体抽取功能时，将实现实体抽取的类添加至工程。import { textProcessing, EntityType } from '@kit.NaturalLanguageKit';  配置输入文本框。let inputText: string = '';\n\nTextInput({ placeholder: '请输入文本' })\n  .height(40)\n  .fontSize(16)\n  .width('90%')\n  .margin(10)\n  .onChange((value: string) => {\n    this.inputText = value;\n  })  配置按钮，调用实体抽取textProcessing.getEntity接口。Button('获取实体结果')\n  .type(ButtonType.Capsule)\n  .fontColor(Color.White)\n  .width('45%')\n  .margin(10)\n  .onClick(async () => {\n    try {\n      let result = await textProcessing.getEntity(this.inputText, {entityTypes: [EntityType.NAME, EntityType.PHONE_NO]});\n      this.outputText = this.formatEntityResult(result);\n    } catch (err) {\n      console.error(`getEntity errorCode: ${err.code}, errorMessage: ${err.message}`);\n      this.outputText = 'Error occurred while getting entities.';\n    }\n  })  在界面上展示实体抽取结果。private formatEntityResult(entities: textProcessing.Entity[]): string {\n  if (!entities || !entities.length) {\n    return 'No entities found.';\n  }\n\n  let output = 'Entities:\\n';\n  for (let i = 0; i < entities.length; i++) {\n    let entity = entities[i];\n    output += `Entity[${i}]:\\n`;\n    output += `  oriText: ${entity.text}\\n`;\n    output += `  charOffset: ${entity.charOffset}\\n`;\n    output += `  entityType: ${entity.type}\\n`;\n    output += `  jsonObject: ${entity.jsonObject}\\n\\n`;\n  }\n  return output;\n}  
开发实例
import { textProcessing, EntityType } from '@kit.NaturalLanguageKit';\n\n@Entry\n@Component\nstruct Index {\n  private inputText: string = '';\n  @State outputText: string = '';\n\n  build() {\n    Column() {\n      TextInput({ placeholder: '请输入文本' })\n        .height(40)\n        .fontSize(16)\n        .width('90%')\n        .margin(10)\n        .onChange((value: string) => {\n          this.inputText = value;\n        })\n\n      Scroll() {\n        Text(this.outputText)\n          .fontSize(16)\n          .width('90%')\n          .margin(10)\n      }\n      .height('40%')\n\n      //调用实体抽取接口\n      Row() {\n        Button('获取实体结果')\n          .type(ButtonType.Capsule)\n          .fontColor(Color.White)\n          .width('45%')\n          .margin(10)\n          .onClick(async () => {\n            try {\n              let result = await textProcessing.getEntity(this.inputText, {entityTypes: [EntityType.NAME, EntityType.PHONE_NO]});\n              this.outputText = this.formatEntityResult(result);\n            } catch (err) {\n              console.error(`getEntity errorCode: ${err.code}, errorMessage: ${err.message}`);\n              this.outputText = 'Error occurred while getting entities.';\n            }\n          })\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  //实体结果转义\n  private formatEntityResult(entities: textProcessing.Entity[]): string {\n    if (!entities || !entities.length) {\n      return 'No entities found.';\n    }\n\n    let output = 'Entities:\\n';\n    for (let i = 0; i < entities.length; i++) {\n      let entity = entities[i];\n      output += `Entity[${i}]:\\n`;\n      output += `  oriText: ${entity.text}\\n`;\n      output += `  charOffset: ${entity.charOffset}\\n`;\n      output += `  entityType: ${entity.type}\\n`;\n      output += `  jsonObject: ${entity.jsonObject}\\n\\n`;\n    }\n    return output;\n  }\n}
