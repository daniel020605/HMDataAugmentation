设置浮层（OverlayManager）
浮层（OverlayManager） 用于将自定义的UI内容展示在页面（Page）之上，在Dialog、Popup、Menu、BindSheet、BindContentCover和Toast等组件之下，展示的范围为当前窗口安全区内。可适用于常驻悬浮等场景。
可以通过使用UIContext中的getOverlayManager方法获取当前UI上下文关联的OverlayManager对象，再通过该对象调用对应方法。
规格约束
 OverlayManager上节点的层级在Page页面层级之上，在Dialog、Popup、Menu、BindSheet、BindContentCover和Toast等组件之下。 OverlayManager添加的节点显示和消失时没有默认动画。 OverlayManager上节点安全区域内外的绘制方式与Page一致，键盘避让方式与Page一致。 与OverlayManager相关的属性推荐采用AppStorage来进行应用全局存储，以免切换页面后属性值发生变化从而导致业务错误。 
设置浮层
在OverlayManager上新增指定节点（addComponentContent）、删除指定节点（removeComponentContent）、显示所有节点（showAllComponentContents）和隐藏所有节点（hideAllComponentContents）。
import { ComponentContent, OverlayManager, router } from '@kit.ArkUI';\n\nclass Params {\n  text: string = \"\"\n  offset: Position\n  constructor(text: string, offset: Position) {\n    this.text = text\n    this.offset = offset\n  }\n}\n@Builder\nfunction builderText(params: Params) {\n  Column() {\n    Text(params.text)\n      .fontSize(30)\n      .fontWeight(FontWeight.Bold)\n  }.offset(params.offset)\n}\n\n@Entry\n@Component\nstruct OverlayExample {\n  @State message: string = 'ComponentContent';\n  private uiContext: UIContext = this.getUIContext()\n  private overlayNode: OverlayManager = this.uiContext.getOverlayManager()\n  @StorageLink('contentArray') contentArray: ComponentContent<Params>[] = []\n  @StorageLink('componentContentIndex') componentContentIndex: number = 0\n  @StorageLink('arrayIndex') arrayIndex: number = 0\n  @StorageLink(\"componentOffset\") componentOffset: Position = {x: 0, y: 80}\n\n  build() {\n    Column({space:10}) {\n      Button(\"递增componentContentIndex: \" + this.componentContentIndex).onClick(()=>{\n        ++this.componentContentIndex\n      })\n      Button(\"递减componentContentIndex: \" + this.componentContentIndex).onClick(()=>{\n        --this.componentContentIndex\n      })\n      Button(\"增加ComponentContent\" + this.contentArray.length).onClick(()=>{\n        let componentContent = new ComponentContent(\n          this.uiContext, wrapBuilder<[Params]>(builderText),\n          new Params(this.message + (this.contentArray.length), this.componentOffset)\n        )\n        this.contentArray.push(componentContent)\n        this.overlayNode.addComponentContent(componentContent, this.componentContentIndex)\n      })\n      Button(\"递增arrayIndex: \" + this.arrayIndex).onClick(()=>{\n        ++this.arrayIndex\n      })\n      Button(\"递减arrayIndex: \" + this.arrayIndex).onClick(()=>{\n        --this.arrayIndex\n      })\n      Button(\"删除ComponentContent\" + this.arrayIndex).onClick(()=>{\n        if (this.arrayIndex >= 0 && this.arrayIndex < this.contentArray.length) {\n          let componentContent = this.contentArray.splice(this.arrayIndex, 1)\n          this.overlayNode.removeComponentContent(componentContent.pop())\n        } else {\n          console.info(\"arrayIndex有误\")\n        }\n      })\n      Button(\"显示ComponentContent\" + this.arrayIndex).onClick(()=>{\n        if (this.arrayIndex >= 0 && this.arrayIndex < this.contentArray.length) {\n          let componentContent = this.contentArray[this.arrayIndex]\n          this.overlayNode.showComponentContent(componentContent)\n        } else {\n          console.info(\"arrayIndex有误\")\n        }\n      })\n      Button(\"隐藏ComponentContent\" + this.arrayIndex).onClick(()=>{\n        if (this.arrayIndex >= 0 && this.arrayIndex < this.contentArray.length) {\n          let componentContent = this.contentArray[this.arrayIndex]\n          this.overlayNode.hideComponentContent(componentContent)\n        } else {\n          console.info(\"arrayIndex有误\")\n        }\n      })\n      Button(\"显示所有ComponentContent\").onClick(()=>{\n          this.overlayNode.showAllComponentContents()\n      })\n      Button(\"隐藏所有ComponentContent\").onClick(()=>{\n        this.overlayNode.hideAllComponentContents()\n      })\n\n      Button(\"跳转页面\").onClick(()=>{\n        router.pushUrl({\n          url: 'pages/Second'\n        })\n      })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}
显示一个始终在屏幕左侧的悬浮球，点击可以弹出alertDialog弹窗。
import { ComponentContent, OverlayManager } from '@kit.ArkUI';\n\nclass Params {\n  context: UIContext\n  offset: Position\n  constructor(context: UIContext, offset: Position) {\n    this.context = context\n    this.offset = offset\n  }\n}\n@Builder\nfunction builderOverlay(params: Params) {\n  Column() {\n    Stack(){\n    }.width(50).height(50).backgroundColor(Color.Yellow).position(params.offset).borderRadius(50)\n    .onClick(() => {\n      params.context.showAlertDialog(\n        {\n          title: 'title',\n          message: 'Text',\n          autoCancel: true,\n          alignment: DialogAlignment.Center,\n          gridCount: 3,\n          confirm: {\n            value: 'Button',\n            action: () => {}\n          },\n          cancel: () => {}\n        }\n      )\n    })\n  }.focusable(false).width('100%').height('100%').hitTestBehavior(HitTestMode.Transparent)\n}\n\n@Entry\n@Component\nstruct OverlayExample {\n  @State message: string = 'ComponentContent';\n  private uiContext: UIContext = this.getUIContext()\n  private overlayNode: OverlayManager = this.uiContext.getOverlayManager()\n  private overlayContent:ComponentContent<Params>[] = []\n  controller: TextInputController = new TextInputController()\n\n  aboutToAppear(): void {\n    let uiContext = this.getUIContext();\n    let componentContent = new ComponentContent(\n      this.uiContext, wrapBuilder<[Params]>(builderOverlay),\n      new Params(uiContext, {x:0, y: 100})\n    )\n    this.overlayNode.addComponentContent(componentContent, 0)\n    this.overlayContent.push(componentContent)\n  }\n\n  aboutToDisappear(): void {\n    let componentContent = this.overlayContent.pop()\n    this.overlayNode.removeComponentContent(componentContent)\n  }\n\n  build() {\n    Column() {\n\n    }\n    .width('100%')\n    .height('100%')\n  }\n}
