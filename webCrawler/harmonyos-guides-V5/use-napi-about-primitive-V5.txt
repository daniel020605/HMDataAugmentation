使用Node-API接口进行primitive类相关开发
简介
在使用Node-API接口时，开发人员可以实现在Node-API模块中与ArkTS对象的交互，并进行数据转换和获取特定对象的操作，它们在不同的场景中发挥着重要的作用，使开发人员能够更灵活地处理ArkTS值和对象。
基本概念
在使用Node-API操作ArkTS对象时，有一些基本概念需要了解：
ArkTS值到C/C++类型的转换： 在Node-API模块中，可以使用Node-API函数将ArkTS值转换为C/C++的数据类型，如将ArkTS数值转换为C/C++的整数、将ArkTS字符串转换为C/C++的字符数组等。同样，也可以将C/C++的数据类型转换为ArkTS值，以便将结果返回给ArkTS代码。
场景和功能介绍
以下接口用于从C/C++代码中与ArkTS进行交互，传递数据并执行操作，它们的使用场景如下：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_coerce_to_bool
用于将给定的ArkTS value强转成ArkTS boolean值。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CoerceToBool(napi_env env, napi_callback_info info)\n{\n    // 获取并解析传进的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将传入的值转换为布尔值\n    napi_value result = nullptr;\n    napi_coerce_to_bool(env, args[0], &result);\n    //返回强转之后的ArkTS boolean值\n    return result;\n}
接口声明
// index.d.ts\nexport const coerceToBool: <T>(data: T) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.coerceToBool<number>(0);\nlet str = testNapi.coerceToBool<string>('111111111');\nlet obj = new Object();\nlet res = testNapi.coerceToBool<Object>(obj);\nlet result = testNapi.coerceToBool<null>(null);\n// false\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_bool:%{public}s', value);\n// true\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_bool:%{public}s', str);\n// true\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_bool:%{public}s', res);\n// false\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_bool:%{public}s', result);
[h2]napi_coerce_to_number
用于将给定的ArkTS value强转成ArkTS number。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CoerceToNumber(napi_env env, napi_callback_info info)\n{\n    // 获取并解析传进的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将传入的值转换为number值\n    napi_value result = nullptr;\n    napi_coerce_to_number(env, args[0], &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const coerceToNumber: <T>(data: T) => number;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.coerceToNumber<string>('2556');\nlet str = testNapi.coerceToNumber<string>('sssss');\nlet bool = testNapi.coerceToNumber<boolean>(true);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_number:%{public}d', value);\n// 返回的为NAN\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_number:%{public}d', str);\n// 返回的是1\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_number:%{public}d', bool);
[h2]napi_coerce_to_object
用于将给定的ArkTS value强转成ArkTS Object。
cpp部分代码：
#include \"napi/native_api.h\"\n\nstatic napi_value CoerceToObject(napi_env env, napi_callback_info info)\n{\n    // 获取并解析传进的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_value obj = nullptr;\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将传入的值转换为Object值\n    napi_coerce_to_object(env, args[0], &obj);\n    return obj;\n}
接口声明
// index.d.ts\nexport const coerceToObject: <T>(data: T) => Object;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.coerceToObject<string>('222222');\nlet result = testNapi.coerceToObject<number>(111);\nhilog.info(0x0000, 'testTag', 'Node-API coerceToObject:%{public}s.', typeof result);\nif (typeof value === 'object') {\n  hilog.info(0x0000, 'testTag', 'Node-API The value is an object.');\n} else {\n  hilog.info(0x0000, 'testTag', 'Node-API The value is not an object.');\n}
[h2]napi_coerce_to_string
用于将给定的ArkTS value强转成ArkTS string。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CoerceToString(napi_env env, napi_callback_info info)\n{\n    // 获取并解析传进的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将传入的值转换为string\n    napi_value str = nullptr;\n    napi_coerce_to_string(env, args[0], &str);\n    return str;\n}
接口声明
// index.d.ts\nexport const coerceToString: <T>(data: T) => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.coerceToString<number>(212);\nlet obj = new Object();\nlet res = testNapi.coerceToString<Object>(obj);\nlet bool = testNapi.coerceToString<boolean>(false);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_string:%{public}s', value);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_string:%{public}s', typeof res);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_coerce_to_string:%{public}s', bool);
[h2]napi_get_boolean
用于根据给定的C boolean值，获取等价的ArkTS Boolean对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetBoolean(napi_env env, napi_callback_info info)\n{\n    // 传入两个参数并解析\n    size_t argc = 2;\n    napi_value argv[2];\n    napi_valuetype data, value;\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 判断两个参数类型值\n    napi_typeof(env, argv[0], &data);\n    napi_typeof(env, argv[1], &value);\n\n    napi_value returnValue = nullptr;\n    // 判断两个类型值是否相等,获取结果的布尔值\n    napi_get_boolean(env, data == value, &returnValue);\n    // 返回结果\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const getBoolean: <T>(data: T, value: String) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.getBoolean<number>(1, '1');\nlet data = testNapi.getBoolean<string>('sss', '1');\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_boolean:%{public}s', value);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_boolean:%{public}s', data);
[h2]napi_get_value_bool
使用这个函数将ArkTS中的布尔值转为等价的C布尔值。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetValueBool(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n\n    napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n    bool bool_c = false;\n    napi_status status = napi_get_value_bool(env, args[0], &bool_c);\n    if (status == napi_boolean_expected) {\n        // 如果napi_get_value_bool成功会返回napi_ok，如果传入一个非布尔值则会返回napi_boolean_expected\n        return nullptr;\n    }\n    napi_value boolNapi = nullptr;\n    napi_get_boolean(env, bool_c, &boolNapi);\n    return boolNapi;\n}
接口声明
// index.d.ts\nexport const getValueBool: (value: boolean | string) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\n// 分别传入布尔值和非布尔值检测接口,传入布尔值将返回原布尔值,传入其他类型返回undefined\nhilog.info(0x0000, 'Node-API', 'get_value_bool_not_bool %{public}s', testNapi.getValueBool('你好123'));\nhilog.info(0x0000, 'Node-API', 'get_value_bool_true %{public}s', testNapi.getValueBool(true));\nhilog.info(0x0000, 'Node-API', 'get_value_bool_false %{public}s', testNapi.getValueBool(false));
[h2]napi_get_global
用于获取全局ArkTS对象。该函数的主要作用是获取表示ArkTS全局对象的napi_value，使得C/C++模块能够与ArkTS运行时的全局对象进行交互。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetGlobal(napi_env env, napi_callback_info info)\n{\n    napi_value global = nullptr;\n    // 获取global对象\n    napi_get_global(env, &global);\n    return global;\n}
接口声明
// index.d.ts\nexport const getGlobal: () => Object;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet globalObj = testNapi.getGlobal();\n// 判断获取的global是否具有global的自身属性\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_global:%{public}s', globalObj.hasOwnProperty!(\"undefined\"));
[h2]napi_get_null
用于获取ArkTS中的null。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetNull(napi_env env, napi_callback_info info)\n{\n    napi_value nullValue = nullptr;\n    napi_get_null(env, &nullValue);\n    return nullValue;\n}
接口声明
// index.d.ts\nexport const getNull: () => null;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet value = testNapi.getNull();\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_null:%{public}s', value);
[h2]napi_get_undefined
用于获取ArkTS中的undefined。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetUndefined(napi_env env, napi_callback_info info)\n{\n    // 获取并解析传进的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    napi_value value = nullptr;\n    napi_get_undefined(env, &value);\n    // 判断传入参数的类型与undefined值的类型是否一致\n    bool isEqual = false;\n    napi_strict_equals(env, args[0], value, &isEqual);\n    // 参数与undefined值相等\n    napi_value result = nullptr;\n    // 返回判断类型之后的结果，相等返回为true，不等则为false\n    napi_get_boolean(env, isEqual, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const getUndefined: (value: undefined) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet data: undefined = undefined;\nlet value = testNapi.getUndefined(data);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_undefined:%{public}s', value);
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
