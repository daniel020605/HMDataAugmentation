transform样式动画
设置transform属性对组件进行旋转、缩放、移动和倾斜。
设置静态动画
创建一个正方形并旋转90°变成菱形，并用下方的长方形把菱形下半部分遮盖形成屋顶，设置长方形translate属性值为(150px,-150px)确定坐标位置形成门，再使用position属性使横纵线跟随父组件（正方形）移动到指定坐标位置，接着设置scale属性使父子组件一起变大形成窗户大小，最后使用skewX属性使组件倾斜后设置坐标translate(200px,-710px)得到烟囱。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"top\"></div>\n  <div class=\"content\"></div>\n  <div class=\"door\"></div>\n  <!-- 窗户 -->\n  <div class=\"window\">\n    <div class=\"horizontal\"></div>\n    <div class=\"vertical\"></div>\n  </div>\n  <div class=\"chimney\"></div>\n</div>
/* xxx.css */\n.container {\n  width:100%;\n  height:100%;\n  background-color:#F1F3F5;\n  align-items: center;\n  flex-direction: column;\n}\n.top{\n  z-index: -1;\n  position: absolute;\n  width: 428px;\n  height: 428px;\n  background-color: #860303;\n  transform: rotate(45deg);\n  margin-top: 284px;\n  margin-left: 148px;\n}\n.content{\n  margin-top: 500px;\n  width: 600px;\n  height: 400px;\n  background-color: white;\n  border:  1px solid black;\n}\n.door{\n  width: 100px;\n  height: 135px;\n  background-color: #1033d9;\n  transform: translate(150px,-137px);\n}\n.window{\n  z-index: 1;\n  position: relative;   \n  width: 100px;\n  height: 100px;\n  background-color: white;\n  border: 1px solid black;\n  transform: translate(-150px,-400px) scale(1.5);\n}\n/* 窗户的横轴 */\n.horizontal{\n  position: absolute;\n  top: 50%;\n  width: 100px;\n  height: 5px;\n  background-color: black;\n}\n/* 窗户的纵轴 */\n.vertical{\n  position: absolute;\n  left: 50%;\n  width: 5px;\n  height: 100px;\n  background-color: black;\n}\n.chimney{\n  z-index: -2;\n  width: 40px;\n  height: 100px;\n  border-radius: 15px;\n  background-color: #9a7404;\n  transform: translate(200px,-710px) skewX(-5deg);\n}
设置平移动画
小球下降动画，改变小球的Y轴坐标实现小球下落，在下一段是时间内减小Y轴坐标实现小球回弹，让每次回弹的高度逐次减小直至回弹高度为0，就模拟出了小球下降的动画。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"circle\"></div>\n  <div class=\"flower\"></div>\n</div>
/* xxx.css */\n.container {\n  width:100%;\n  height:100%;\n  background-color:#F1F3F5;\n  display: flex;\n  justify-content: center;\n}\n.circle{\n  width: 100px;\n  height: 100px;\n  border-radius: 50px;\n  background-color: red;\n  /* forwards停在动画的最后一帧 */\n  animation: down 3s fast-out-linear-in forwards;\n}\n.flower{\n  position: fixed;\n  width: 80%;\n  margin-left: 10%;\n  height: 5px;\n  background-color: black;\n  top: 1000px;\n}\n@keyframes down {\n  0%{\n    transform: translate(0px,0px);\n  }\n  /* 下落 */\n  15%{\n    transform: translate(10px,900px);\n  }\n  /* 开始回弹 */\n  25%{\n    transform: translate(20px,500px);\n  }\n  /* 下落 */\n  35%{\n    transform: translate(30px,900px);\n  }\n  /* 回弹 */\n  45%{\n    transform: translate(40px,700px);\n  }\n  55%{\n    transform: translate(50px,900px);\n  }\n  65%{\n    transform: translate(60px,800px);\n  }\n  80%{\n    transform: translate(70px,900px);\n  }\n  90%{\n    transform: translate(80px,850px);\n  }\n  /* 停止 */\n  100%{\n    transform: translate(90px,900px);\n  }\n}
设置旋转动画
设置不同的原点位置（transform-origin）改变元素所围绕的旋转中心。rotate3d属性前三个参数值分别为X轴、Y轴、Z轴的旋转向量，第四个值为旋转角度，旋转角度可为负值，负值则代表旋转方向为逆时针方向。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"rotate\">\n    <div class=\"rect rect1\"></div>\n    <div class=\"rect rect2\"></div>\n    <div class=\"rect rect3\"></div>\n  </div>\n  <!-- 3d属性 -->\n  <div class=\"rotate3d\">\n    <div class=\"content\">\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"> </div>\n    </div>\n    <div class=\"mouse\"></div>\n  </div>\n</div>
/* xxx.css */\n.container {\n    flex-direction: column;\n    background-color:#F1F3F5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n}\n.rect {\n    width: 100px;\n    height: 100px;\n    animation: rotate 3s infinite;\n    margin-left: 30px;\n}\n.rect1 {\n    background-color: #f76160;\n}\n.rect2 {\n    background-color: #60f76f;\n/* 改变原点位置*/\n    transform-origin: 10% 10px;\n}\n.rect3 {\n    background-color: #6081f7;\n/*  改变原点位置*/\n    transform-origin: right bottom;\n}\n@keyframes rotate {\n    from {\n        transform: rotate(0deg)\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n/* 3d示例样式 */\n.rotate3d {\n    margin-top: 150px;\n    flex-direction: column;\n    background-color:#F1F3F5;\n    display: flex;\n    align-items: center;\n    width: 80%;\n    height: 600px;\n    border-radius: 300px;\n    border: 1px solid #ec0808;\n}\n.content {\n    padding-top: 150px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n/* react4 react5 翻转形成眼睛 */\n.rect4 {\n    width: 100px;\n    height: 100px;\n    animation: rotate3d1 1000ms infinite;\n    background-color: darkmagenta;\n}\n.rect5 {\n    width: 100px;\n    height: 100px;\n    animation: rotate3d1 1000ms infinite;\n    margin-left: 100px;\n    background-color: darkmagenta;\n}\n.mouse {\n    margin-top: 150px;\n    width: 200px;\n    height: 100px;\n    border-radius: 50px;\n    border: 1px solid #e70303;\n    animation: rotate3d2 1000ms infinite;\n}\n/* 眼睛的动效 */\n@keyframes rotate3d1 {\n    0% {\n        transform:rotate3d(0,0,0,0deg)\n    }\n    50% {\n        transform:rotate3d(20,20,20,360deg);\n    }\n    100% {\n        transform:rotate3d(0,0,0,0deg);\n    }\n}\n/* 嘴的动效 */\n@keyframes rotate3d2 {\n    0% {\n        transform:rotate3d(0,0,0,0deg)\n    }\n    33% {\n        transform:rotate3d(0,0,10,30deg);\n    }\n    66% {\n        transform:rotate3d(0,0,10,-30deg);\n    }\n    100% {\n        transform:rotate3d(0,0,0,0deg);\n    }\n}
**说明： ** 
transform-origin变换对象的原点位置，如果仅设置一个值，另一个值为50%，若设置两个值第一个值表示X轴的位置，第二个值表示Y轴的位置。
设置缩放动画
设置scale样式属性实现涟漪动画，先使用定位确定元素的位置，确定坐标后创建多个组件实现重合效果，再设置opacity属性改变组件不透明度实现组件隐藏与显示，同时设置scale值使组件可以一边放大一边隐藏，最后设置两个组件不同的动画执行时间，实现扩散的效果。
设置sacle3d中X轴、Y轴、Z轴的缩放参数实现动画。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"circle\">\n    <text>ripple</text>\n  </div>\n  <div class=\"ripple\"></div>\n  <div class=\"ripple ripple2\"></div>\n  <!-- 3d -->\n  <div class=\"content\">\n    <text>spring</text>\n  </div>\n</div>
/* xxx.css */\n.container {\n    flex-direction: column;\n    background-color:#F1F3F5;\n    width: 100%;\n    position: relative;\n}\n.circle{\n    margin-top: 400px;\n    margin-left: 40%;\n    width: 100px;\n    height: 100px;\n    border-radius: 50px;\n    background-color: mediumpurple;\n    z-index: 1;  position: absolute;\n}\n.ripple{\n    margin-top: 400px;\n    margin-left: 40%;\n    position: absolute;  z-index: 0;\n    width: 100px;\n    height: 100px;\n    border-radius: 50px;\n    background-color: blueviolet;\n    animation: ripple 5s infinite;\n}\n/* 设置不同的动画时间 */\n.ripple2{\n    animation-duration: 2.5s;\n}\n@keyframes ripple{\n    0%{\n        transform: scale(1);\n        opacity: 0.5;\n    }\n    50%{\n        transform: scale(3);\n        opacity: 0;\n    }\n    100%{\n        transform: scale(1);\n        opacity: 0.5;\n    }\n}\ntext{\n    color: white;\n    text-align: center;\n    height: 100%;\n    width: 100%;\n}\n.content {\n    margin-top: 700px;\n    margin-left: 33%;\n    width: 200px;\n    height: 100px;\n    animation:rubberBand 1s infinite;\n    background-color: darkmagenta;\n    position: absolute;\n}\n@keyframes rubberBand {\n    0% {\n        transform: scale3d(1, 1, 1);\n    }\n    30% {\n        transform: scale3d(1.25, 0.75, 1.1);\n    }\n    40% {\n        transform: scale3d(0.75, 1.25, 1.2);\n    }\n    50% {\n        transform: scale3d(1.15, 0.85, 1.3);\n    }\n    65% {\n        transform: scale3d(.95, 1.05, 1.2);\n    }\n    75% {\n        transform: scale3d(1.05, .95, 1.1);\n    }\n    100%{\n        transform: scale3d(1, 1, 1);\n    }\n}
设置transform属性值后，子元素会跟着父元素一起改变，若只改变父元素其他属性值时（如：height，width），子元素不会改变。
设置matrix属性
matrix是一个入参为六个值的矩阵，6个值分别代表：scaleX, skewY, skewX, scaleY, translateX, translateY。下面示例中设置 了matrix属性为matrix(1,0,0,1,0,200)使组件移动和倾斜。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"rect\"> </div>\n</div>
/* xxx.css */\n.container{\n  background-color:#F1F3F5;\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n.rect{\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  animation: down 3s infinite forwards;\n}\n@keyframes down{\n  0%{\n    transform: matrix(1,0,0,1,0,0);\n  }\n  10%{\n    transform: matrix(1,0,0,1,0,200);\n  }\n  60%{\n    transform: matrix(2,1.5,1.5,2,0,700);\n  }\n  100%{\n    transform: matrix(1,0,0,1,0,0);\n  }\n}
整合transform属性
transform可以设置多个值并且多个值可同时设置，下面案例中展示同时设置缩放（scale），平移（translate），旋转（rotate）属性时的动画效果。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"rect1\"></div>\n  <div class=\"rect2\"></div>\n  <div class=\"rect3\"></div>\n  <div class=\"rect4\"></div>\n  <div class=\"rect5\"></div>\n</div>
/* xxx.css */\n.container{\n    width: 100%;\n    height: 100%;\n    flex-direction:column;\n    background-color:#F1F3F5;\n    padding:50px;\n}\n.rect1{\n    width: 100px;\n    height: 100px;\n    background-color: red;\n    animation: change1 3s infinite forwards;\n}\n.rect2{\n    margin-top: 50px;\n    width: 100px;\n    height: 100px;\n    background-color: darkblue;\n    animation: change2 3s infinite forwards;\n}\n.rect3{\n    margin-top: 50px;\n    width: 100px;\n    height: 100px;\n    background-color: darkblue;\n    animation: change3 3s infinite;\n}\n.rect4{\n    align-self: center;\n    margin-left: 50px;\n    margin-top: 200px;\n    width: 100px;\n    height: 100px;\n    background-color: darkmagenta;\n    animation: change4 3s infinite;\n}\n.rect5{\n    margin-top: 300px;\n    width: 100px;\n    height: 100px;\n   background-color: cadetblue;\n    animation: change5 3s infinite;\n}\n/* change1 change2 对比 */\n@keyframes change1{\n    0%{\n        transform: translate(0,0);    transform: rotate(0deg)\n    }\n    100%{\n        transform: translate(0,500px);\n        transform: rotate(360deg)\n    }\n}\n/* change2 change3 对比属性顺序不同的动画效果 */\n@keyframes change2{\n    0%{\n        transform:translate(0,0) rotate(0deg) ;\n    }\n    100%{\n        transform: translate(300px,0) rotate(360deg);\n    }\n}\n@keyframes change3{\n    0%{\n        transform:rotate(0deg) translate(0,0);\n    }\n    100%{\n        transform:rotate(360deg)  translate(300px,0);\n    }\n}\n/* 属性值不对应的情况 */\n@keyframes change4{\n    0%{\n        transform: scale(0.5);\n    }\n    100%{\n        transform:scale(2) rotate(45deg);\n    }\n}\n/* 多属性的写法 */\n@keyframes change5{\n    0%{\n        transform:scale(0) translate(0,0) rotate(0);\n    }\n    100%{\n        transform: scale(1.5) rotate(360deg) translate(200px,0);\n    }\n}
当设置多个transform时，后续的transform值会把前面的覆盖掉。若想同时使用多个动画样式可用复合写法，例：transform: scale(1) rotate(0) translate(0,0)。 transform进行复合写法时，变化样式内多个样式值顺序的不同会呈现不一样的动画效果。 transform属性设置的样式值要一一对应，若前后不对应，则该动画不生效。若设置多个样式值则只会呈现出已对应值的动画效果。 
