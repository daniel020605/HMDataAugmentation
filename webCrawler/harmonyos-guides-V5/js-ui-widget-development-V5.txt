开发基于JS UI的卡片
以下内容介绍基于类Web范式的JS UI卡片开发指南。
运作机制
卡片框架的运作机制如图1所示。
图1 卡片框架运作机制（Stage模型）
卡片使用方包含以下模块：
 卡片使用：包含卡片的创建、删除、请求更新等操作。 通信适配层：由HarmonyOS SDK提供，负责与卡片管理服务通信，用于将卡片的相关操作到卡片管理服务。 
卡片管理服务包含以下模块：
 周期性刷新：在卡片添加后，根据卡片的刷新策略启动定时任务周期性触发卡片的刷新。 卡片缓存管理：在卡片添加到卡片管理服务后，对卡片的视图信息进行缓存，以便下次获取卡片时可以直接返回缓存数据，降低时延。 卡片生命周期管理：对于卡片切换到后台或者被遮挡时，暂停卡片的刷新；以及卡片的升级/卸载场景下对卡片数据的更新和清理。 卡片使用方对象管理：对卡片使用方的RPC对象进行管理，用于使用方请求进行校验以及对卡片更新后的回调处理。 通信适配层：负责与卡片使用方和提供方进行RPC通信。 
卡片提供方包含以下模块：
 卡片服务：由卡片提供方开发者实现，开发者实现生命周期处理创建卡片、更新卡片以及删除卡片等请求，提供相应的卡片服务。 卡片提供方实例管理模块：由卡片提供方开发者实现，负责对卡片管理服务分配的卡片实例进行持久化管理。 通信适配层：由HarmonyOS SDK提供，负责与卡片管理服务通信，用于将卡片的更新数据主动推送到卡片管理服务。 
实际开发时只需要作为卡片提供方进行卡片内容的开发，卡片使用方和卡片管理服务由系统自动处理。
接口说明
FormExtensionAbility类拥有如下API接口，具体的API介绍详见接口文档。
formProvider类有如下API接口，具体的API介绍详见接口文档。
formBindingData类有如下API接口，具体的API介绍详见接口文档。
开发步骤
Stage卡片开发，即基于Stage模型的卡片提供方开发，主要涉及如下关键步骤：
 创建卡片FormExtensionAbility：卡片生命周期回调函数FormExtensionAbility开发。 配置卡片配置文件：配置应用配置文件module.json5和profile配置文件。 卡片信息的持久化：对卡片信息进行持久化管理。 卡片数据交互：通过updateForm更新卡片显示的信息。 开发卡片页面：使用HML+CSS+JSON开发JS卡片页面。 开发卡片事件：为卡片添加router事件和message事件。 
[h2]创建卡片FormExtensionAbility
创建Stage模型的卡片，需实现FormExtensionAbility生命周期接口。先参考DevEco Studio服务卡片开发指南生成服务卡片模板。
 在EntryFormAbility.ets中，导入相关模块。 import { Want } from '@kit.AbilityKit';\nimport { formBindingData, FormExtensionAbility, formInfo, formProvider } from '@kit.FormKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nconst TAG: string = 'JsCardFormAbility';\nconst DOMAIN_NUMBER: number = 0xFF00; 在EntryFormAbility.ets中，实现FormExtension生命周期接口。 export default class EntryFormAbility extends FormExtensionAbility {\n  onAddForm(want: Want): formBindingData.FormBindingData {\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onAddForm');\n    // 使用方创建卡片时触发，提供方需要返回卡片数据绑定类\n    let obj: Record<string, string> = {\n      'title': 'titleOnCreate',\n      'detail': 'detailOnCreate'\n    };\n    let formData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\n    return formData;\n  }\n  onCastToNormalForm(formId: string): void {\n    // 使用方将临时卡片转换为常态卡片触发，提供方需要做相应的处理\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onCastToNormalForm');\n  }\n  onUpdateForm(formId: string): void {\n    // 若卡片支持定时更新/定点更新/卡片使用方主动请求更新功能，则提供方需要重写该方法以支持数据更新\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onUpdateForm');\n    let obj: Record<string, string> = {\n      'title': 'titleOnUpdate',\n      'detail': 'detailOnUpdate'\n    };\n    let formData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\n    formProvider.updateForm(formId, formData).catch((error: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] updateForm, error:' + JSON.stringify(error));\n    });\n  }\n  onChangeFormVisibility(newStatus: Record<string, number>): void {\n    // 使用方发起可见或者不可见通知触发，提供方需要做相应的处理，仅系统应用生效\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onChangeFormVisibility');\n    //...\n  }\n  onFormEvent(formId: string, message: string): void {\n    // 若卡片支持触发事件，则需要重写该方法并实现对事件的触发\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onFormEvent');\n  }\n  onRemoveForm(formId: string): void {\n    // 删除卡片实例数据\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onRemoveForm');\n    //...\n  }\n  onAcquireFormState(want: Want): formInfo.FormState {\n    return formInfo.FormState.READY;\n  }\n} 
FormExtensionAbility不能常驻后台，即在卡片生命周期回调函数中无法处理长时间的任务。
[h2]配置卡片配置文件
 卡片需要在module.json5配置文件中的extensionAbilities标签下，配置ExtensionAbility相关信息。FormExtensionAbility需要填写metadata元信息标签，其中键名称为固定字符串\"ohos.extension.form\"，资源为卡片的具体配置信息的索引。 配置示例如下： {\n  \"module\": {\n    // ...\n    \"extensionAbilities\": [\n      {\n        \"name\": \"JsCardFormAbility\",\n        \"srcEntry\": \"./ets/jscardformability/JsCardFormAbility.ts\",\n        \"description\": \"$string:JSCardFormAbility_desc\",\n        \"label\": \"$string:JSCardFormAbility_label\",\n        \"type\": \"form\",\n        \"metadata\": [\n          {\n            \"name\": \"ohos.extension.form\",\n            \"resource\": \"$profile:form_jscard_config\"\n          }\n        ]\n      }\n    ]\n  }\n} 卡片的具体配置信息。在上述FormExtensionAbility的元信息（\"metadata\"配置项）中，可以指定卡片具体配置信息的资源索引。例如当resource指定为$profile:form_config时，会使用开发视图的resources/base/profile/目录下的form_config.json作为卡片profile配置文件。内部字段结构说明如下表所示。 表1 卡片profile配置文件     属性名称 含义 数据类型 是否可缺省    name 表示卡片的类名，字符串最大长度为127字节。 字符串 否   description 表示卡片的描述。取值可以是描述性内容，也可以是对描述性内容的资源索引，以支持多语言。字符串最大长度为255字节。 字符串 可缺省，缺省为空。   src 表示卡片对应的UI代码的完整路径。 字符串 否   window 用于定义与显示窗口相关的配置。 对象 可缺省。   isDefault 表示该卡片是否为默认卡片，每个UIAbility有且只有一个默认卡片。 - true：默认卡片。 - false：非默认卡片。 布尔值 否   colorMode 表示卡片的主题样式，取值范围如下： - auto：自适应。 - dark：深色主题。 - light：浅色主题。 字符串 可缺省，缺省值为“auto”。   supportDimensions 表示卡片支持的外观规格，取值范围： - 1 * 2：表示1行2列的二宫格。 - 2 * 2：表示2行2列的四宫格。 - 2 * 4：表示2行4列的八宫格。 - 4 * 4：表示4行4列的十六宫格。 字符串数组 否   defaultDimension 表示卡片的默认外观规格，取值必须在该卡片supportDimensions配置的列表中。 字符串 否   updateEnabled 表示卡片是否支持周期性刷新，取值范围： - true：表示支持周期性刷新，可以在定时刷新（updateDuration）和定点刷新（scheduledUpdateTime）两种方式任选其一，优先选择定时刷新。 - false：表示不支持周期性刷新。 布尔类型 否   scheduledUpdateTime 表示卡片的定点刷新的时刻，采用24小时制，精确到分钟。 updateDuration参数优先级高于scheduledUpdateTime，两者同时配置时，以updateDuration配置的刷新时间为准。 字符串 可缺省，缺省值为“0:0”。   updateDuration 表示卡片定时刷新的更新周期，单位为30分钟，取值为自然数。 当取值为0时，表示该参数不生效。 当取值为正整数N时，表示刷新周期为30*N分钟。 updateDuration参数优先级高于scheduledUpdateTime，两者同时配置时，以updateDuration配置的刷新时间为准。 数值 可缺省，缺省值为“0”。   formConfigAbility 表示卡片的配置跳转链接，采用URI格式。 字符串 可缺省，缺省值为空。   formVisibleNotify 标识是否允许卡片使用卡片可见性通知。 字符串 可缺省，缺省值为空。   metaData 表示卡片的自定义信息，包含customizeData数组标签。 对象 可缺省，缺省值为空。    配置示例如下： {\n  \"forms\": [\n    {\n      \"name\": \"WidgetJS\",\n      \"description\": \"$string:JSCardEntryAbility_desc\",\n      \"src\": \"./js/WidgetJS/pages/index/index\",\n      \"window\": {\n        \"designWidth\": 720,\n        \"autoDesignWidth\": true\n      },\n      \"colorMode\": \"auto\",\n      \"isDefault\": true,\n      \"updateEnabled\": true,\n      \"scheduledUpdateTime\": \"10:30\",\n      \"updateDuration\": 1,\n      \"defaultDimension\": \"2*2\",\n      \"supportDimensions\": [\n        \"2*2\"\n      ]\n    }\n  ]\n} 
[h2]卡片信息的持久化
因大部分卡片提供方都不是常驻服务，只有在需要使用时才会被拉起获取卡片信息，且卡片管理服务支持对卡片进行多实例管理，卡片ID对应实例ID，因此若卡片提供方支持对卡片数据进行配置，则需要对卡片的业务数据按照卡片ID进行持久化管理，以便在后续获取、更新以及拉起时能获取到正确的卡片业务数据。
import { common, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { formBindingData, FormExtensionAbility } from '@kit.FormKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { preferences } from '@kit.ArkData';\n\nconst TAG: string = 'JsCardFormAbility';\nconst DATA_STORAGE_PATH: string = '/data/storage/el2/base/haps/form_store';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet storeFormInfo = async (formId: string, formName: string, tempFlag: boolean, context: common.FormExtensionContext): Promise<void> => {\n  // 此处仅对卡片ID：formId，卡片名：formName和是否为临时卡片：tempFlag进行了持久化\n  let formInfo: Record<string, string | boolean | number> = {\n    'formName': formName,\n    'tempFlag': tempFlag,\n    'updateCount': 0\n  };\n  try {\n    const storage: preferences.Preferences = await preferences.getPreferences(context, DATA_STORAGE_PATH);\n    // put form info\n    await storage.put(formId, JSON.stringify(formInfo));\n    hilog.info(DOMAIN_NUMBER, TAG, `[EntryFormAbility] storeFormInfo, put form info successfully, formId: ${formId}`);\n    await storage.flush();\n  } catch (err) {\n    hilog.error(DOMAIN_NUMBER, TAG, `[EntryFormAbility] failed to storeFormInfo, err: ${JSON.stringify(err as BusinessError)}`);\n  }\n}\n\nexport default class JsCardFormAbility extends FormExtensionAbility {\n  onAddForm(want: Want): formBindingData.FormBindingData {\n    hilog.info(DOMAIN_NUMBER, TAG, '[JsCardFormAbility] onAddForm');\n\n    if (want.parameters) {\n      let formId = JSON.stringify(want.parameters['ohos.extra.param.key.form_identity']);\n      let formName = JSON.stringify(want.parameters['ohos.extra.param.key.form_name']);\n      let tempFlag = want.parameters['ohos.extra.param.key.form_temporary'] as boolean;\n      // 将创建的卡片信息持久化，以便在下次获取/更新该卡片实例时进行使用\n      // 此接口请根据实际情况实现，具体请参考：FormExtAbility Stage模型卡片实例\n      storeFormInfo(formId, formName, tempFlag, this.context);\n    }\n\n    let obj: Record<string, string> = {\n      'title': 'titleOnCreate',\n      'detail': 'detailOnCreate'\n    };\n    let formData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\n    return formData;\n  }\n}
且需要适配onRemoveForm卡片删除通知接口，在其中实现卡片实例数据的删除。
import { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { FormExtensionAbility } from '@kit.FormKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { preferences } from '@kit.ArkData';\n\nconst TAG: string = 'JsCardFormAbility';\nconst DATA_STORAGE_PATH: string = '/data/storage/el2/base/haps/form_store';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet deleteFormInfo = async (formId: string, context: common.FormExtensionContext): Promise<void> => {\n  try {\n    const storage: preferences.Preferences = await preferences.getPreferences(context, DATA_STORAGE_PATH);\n    // del form info\n    await storage.delete(formId);\n    hilog.info(DOMAIN_NUMBER, TAG, `[EntryFormAbility] deleteFormInfo, del form info successfully, formId: ${formId}`);\n    await storage.flush();\n  } catch (err) {\n    hilog.error(DOMAIN_NUMBER, TAG, `[EntryFormAbility] failed to deleteFormInfo, err: ${JSON.stringify(err as BusinessError)}`);\n  };\n};\n\nexport default class JsCardFormAbility extends FormExtensionAbility {\n  onRemoveForm(formId: string): void {\n    // 删除卡片实例数据\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onRemoveForm');\n    // 删除之前持久化的卡片实例数据\n    // 此接口请根据实际情况实现，具体请参考：FormExtAbility Stage模型卡片实例\n    deleteFormInfo(formId, this.context);\n  }\n}
具体的持久化方法可以参考轻量级数据存储开发指导。
需要注意的是，卡片使用方在请求卡片时传递给提供方应用的Want数据中存在临时标记字段，表示此次请求的卡片是否为临时卡片：
 常态卡片：卡片使用方会持久化的卡片。 临时卡片：卡片使用方不会持久化的卡片。 
由于临时卡片的数据具有非持久化的特殊性，某些场景例如卡片服务框架死亡重启，此时临时卡片数据在卡片管理服务中已经删除，且对应的卡片ID不会通知到提供方，所以卡片提供方需要自己负责清理长时间未删除的临时卡片数据。同时对应的卡片使用方可能会将之前请求的临时卡片转换为常态卡片。如果转换成功，卡片提供方也需要对对应的临时卡片ID进行处理，把卡片提供方记录的临时卡片数据转换为常态卡片数据，防止提供方在清理长时间未删除的临时卡片时，把已经转换为常态卡片的临时卡片信息删除，导致卡片信息丢失。
[h2]卡片数据交互
当卡片应用需要更新数据时（如触发了定时更新或定点更新），卡片应用获取最新数据，并调用updateForm()接口主动触发卡片的更新。
import { hilog } from '@kit.PerformanceAnalysisKit';\nimport { formBindingData, FormExtensionAbility, formProvider } from '@kit.FormKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nconst TAG: string = 'JsCardFormAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class EntryFormAbility extends FormExtensionAbility {\n  onUpdateForm(formId: string): void {\n    // 若卡片支持定时更新/定点更新/卡片使用方主动请求更新功能，则提供方需要重写该方法以支持数据更新\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onUpdateForm');\n    let obj: Record<string, string> = {\n      'title': 'titleOnUpdate',\n      'detail': 'detailOnUpdate'\n    };\n    let formData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\n    formProvider.updateForm(formId, formData).catch((error: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] updateForm, error:' + JSON.stringify(error));\n    });\n  }\n}
[h2]开发卡片页面
开发者可以使用类Web范式（HML+CSS+JSON）开发JS卡片页面。生成如下卡片页面，可以这样配置卡片页面文件：
 HML：使用类Web范式的组件描述卡片的页面信息。 <div class=\"container\">\n  <stack>\n    <div class=\"container-img\">\n      <image src=\"/common/widget.png\" class=\"bg-img\"></image>\n    </div>\n    <div class=\"container-inner\">\n      <text class=\"title\">{{title}}</text>\n      <text class=\"detail_text\" onclick=\"routerEvent\">{{detail}}</text>\n    </div>\n  </stack>\n</div> CSS：HML中类Web范式组件的样式信息。 .container {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.bg-img {\n  flex-shrink: 0;\n  height: 100%;\n}\n\n.container-inner {\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-start;\n  height: 100%;\n  width: 100%;\n  padding: 12px;\n}\n\n.title {\n  font-size: 19px;\n  font-weight: bold;\n  color: white;\n  text-overflow: ellipsis;\n  max-lines: 1;\n}\n\n.detail_text {\n  font-size: 16px;\n  color: white;\n  opacity: 0.66;\n  text-overflow: ellipsis;\n  max-lines: 1;\n  margin-top: 6px;\n} JSON：卡片页面中的数据和事件交互。 {\n  \"data\": {\n    \"title\": \"TitleDefault\",\n    \"detail\": \"TextDefault\"\n  },\n  \"actions\": {\n    \"routerEvent\": {\n      \"action\": \"router\",\n      \"abilityName\": \"EntryAbility\",\n      \"params\": {\n        \"message\": \"add detail\"\n      }\n    }\n  }\n} 
[h2]开发卡片事件
卡片支持为组件设置交互事件（action），包括router事件和message事件，其中router事件用于UIAbility跳转，message事件用于卡片开发人员自定义点击事件。
关键步骤说明如下：
 在HML中为组件设置onclick属性，其值对应到JSON文件的actions字段中。 设置router事件：  action属性值为\"router\"。 abilityName为跳转目标的UIAbility名（支持跳转FA模型的PageAbility组件和Stage模型的UIAbility组件），如目前DevEco Studio创建的Stage模型的UIAbility默认名为EntryAbility。 params为传递给跳转目标UIAbility的自定义参数，可以按需填写。其值可以在目标UIAbility启动时的want中的parameters里获取。如Stage模型MainAbility的onCreate生命周期里的入参want的parameters字段下获取到配置的参数。  设置message事件：  action属性值为\"message\"。 params为message事件的用户自定义参数，可以按需填写。其值可以在卡片生命周期函数onFormEvent()中的message里获取。  
示例如下。
 HML文件 <div class=\"container\">\n    <stack>\n        <div class=\"container-img\">\n            <image src=\"/common/CardWebImg.png\" class=\"bg-img\"></image>\n            <image src=\"/common/CardWebImgMatrix.png\"\n                   class=\"bottom-img\"/>\n        </div>\n        <div class=\"container-inner\">\n            <text class=\"title\" onclick=\"routerEvent\">{{ title }}</text>\n            <text class=\"detail_text\" onclick=\"messageEvent\">{{ detail }}</text>\n        </div>\n    </stack>\n</div> CSS文件 .container {\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.bg-img {\n    flex-shrink: 0;\n    height: 100%;\n    z-index: 1;\n}\n\n.bottom-img {\n    position: absolute;\n    width: 150px;\n    height: 56px;\n    top: 63%;\n    background-color: rgba(216, 216, 216, 0.15);\n    filter: blur(20px);\n    z-index: 2;\n}\n\n.container-inner {\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: flex-start;\n    height: 100%;\n    width: 100%;\n    padding: 12px;\n}\n\n.title {\n    font-family: HarmonyHeiTi-Medium;\n    font-size: 14px;\n    color: rgba(255, 255, 255, 0.90);\n    letter-spacing: 0.6px;\n    font-weight: 500;\n    width: 100%;\n    text-overflow: ellipsis;\n    max-lines: 1;\n}\n\n.detail_text {\n    ffont-family: HarmonyHeiTi;\n    font-size: 12px;\n    color: rgba(255, 255, 255, 0.60);\n    letter-spacing: 0.51px;\n    font-weight: 400;\n    text-overflow: ellipsis;\n    max-lines: 1;\n    margin-top: 6px;\n    width: 100%;\n} JSON文件 {\n  \"data\": {\n    \"title\": \"TitleDefault\",\n    \"detail\": \"TextDefault\"\n  },\n  \"actions\": {\n    \"routerEvent\": {\n      \"action\": \"router\",\n      \"abilityName\": \"JSCardEntryAbility\",\n      \"params\": {\n        \"info\": \"router info\",\n        \"message\": \"router message\"\n      }\n    },\n    \"messageEvent\": {\n      \"action\": \"message\",\n      \"params\": {\n        \"detail\": \"message detail\"\n      }\n    }\n  }\n} 说明： \"data\"中JSON Value支持多级嵌套数据，在更新数据时，需要注意携带完整数据。 例如：当前卡片显示07.18日Mr.Zhang的课程信息，示例如下。 \"data\": {\n    \"Day\": \"07.18\",\n    \"teacher\": {\n        \"name\": \"Mr.Zhang\",\n        \"course\": \"Math\"\n    }\n} 当卡片内容需要更新为07.18日Mr.Li的课程信息时，需要传递待更新的完整数据，不能只传递单个数据项，如只传name或只传course，示例如下。 \"teacher\": {\n    \"name\": \"Mr.Li\",\n    \"course\": \"English\"\n} 在UIAbility中接收router事件并获取参数 import UIAbility from '@ohos.app.ability.UIAbility';\nimport AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport Want from '@ohos.app.ability.Want';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'EtsCardEntryAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class EtsCardEntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    if (want.parameters) {\n      let params: Record<string, Object> = JSON.parse(JSON.stringify(want.parameters.params));\n      // 获取router事件中传递的info参数\n      if (params.info === 'router info') {\n        // 执行业务逻辑\n        hilog.info(DOMAIN_NUMBER, TAG, `router info: ${params.info}`);\n      }\n      // 获取router事件中传递的message参数\n      if (params.message === 'router message') {\n        // 执行业务逻辑\n        hilog.info(DOMAIN_NUMBER, TAG, `router message: ${params.message}`);\n      }\n    }\n  }\n}; 在FormExtensionAbility中接收message事件并获取参数 import FormExtension from '@ohos.app.form.FormExtensionAbility';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'FormAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class FormAbility extends FormExtension {\n  onFormEvent(formId: string, message: string): void {\n    // 若卡片支持触发事件，则需要重写该方法并实现对事件的触发\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onFormEvent');\n    // 获取message事件中传递的detail参数\n    let msg: Record<string, string> = JSON.parse(message);\n    if (msg.detail === 'message detail') {\n      // 执行业务逻辑\n      hilog.info(DOMAIN_NUMBER, TAG, 'message info:' + msg.detail);\n    }\n  }\n}; 
