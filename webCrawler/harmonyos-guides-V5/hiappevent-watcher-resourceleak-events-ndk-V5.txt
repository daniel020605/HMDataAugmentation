订阅资源泄漏事件（C/C++）
接口说明
API接口的具体使用说明（参数使用限制、具体取值范围等）请参考HiAppEvent。
订阅接口功能介绍：
开发步骤
 新建Native C++工程，并将jsoncpp导入到新建工程内，目录结构如下： entry:\n  src:\n    main:\n      cpp:\n        - json:\n            - json.h\n            - json-forwards.h\n        - types:\n            libentry:\n              - index.d.ts\n        - CMakeLists.txt\n        - napi_init.cpp\n        - jsoncpp.cpp\n      ets:\n        - entryability:\n            - EntryAbility.ets\n        - pages:\n            - Index.ets 编辑\"CMakeLists.txt\"文件，添加源文件及动态库： # 新增jsoncpp.cpp(解析订阅事件中的json字符串)源文件\nadd_library(entry SHARED napi_init.cpp jsoncpp.cpp)\n# 新增动态库依赖libhiappevent_ndk.z.so和libhilog_ndk.z.so(日志输出)\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so libhiappevent_ndk.z.so) 编辑\"napi_init.cpp\"文件，导入依赖的文件，并定义LOG_TAG： #include \"napi/native_api.h\"\n#include \"json/json.h\"\n#include \"hilog/log.h\"\n#include \"hiappevent/hiappevent.h\"\n\n#undef LOG_TAG\n#define LOG_TAG \"testTag\" 订阅系统事件：  onReceive类型观察者： 编辑\"napi_init.cpp\"文件，定义onReceive类型观察者相关方法： //定义一变量，用来缓存创建的观察者的指针。\nstatic HiAppEvent_Watcher *systemEventWatcher; \n\nstatic void OnReceive(const char *domain, const struct HiAppEvent_AppEventGroup *appEventGroups, uint32_t groupLen) {\n    for (int i = 0; i < groupLen; ++i) {\n        for (int j = 0; j < appEventGroups[i].infoLen; ++j) {\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.domain=%{public}s\", appEventGroups[i].appEventInfos[j].domain);\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.name=%{public}s\", appEventGroups[i].appEventInfos[j].name);\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.eventType=%{public}d\", appEventGroups[i].appEventInfos[j].type);\n            if (strcmp(appEventGroups[i].appEventInfos[j].domain, DOMAIN_OS) == 0 && \n                strcmp(appEventGroups[i].appEventInfos[j].name, EVENT_RESOURCE_OVERLIMIT) == 0) {\n                Json::Value params;\n                Json::Reader reader(Json::Features::strictMode());\n                Json::FastWriter writer;\n                if (reader.parse(appEventGroups[i].appEventInfos[j].params, params)) {\n                    auto time = params[\"time\"].asInt64();\n                    auto pid = params[\"pid\"].asInt();\n                    auto uid = params[\"uid\"].asInt();\n                    auto resourceType = params[\"resourceType\"].asString();\n                    auto bundleName = params[\"bundle_name\"].asString();\n                    auto bundleVersion = params[\"bundle_version\"].asString();\n                    auto memory = writer.write(params[\"memory\"]);\n                    auto externalLog = writer.write(eventInfo[\"external_log\"]);\n                    std::string logOverLimit = eventInfo[\"log_over_limit\"].asBool() ? \"true\":\"false\";\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.time=%{public}lld\", time);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.pid=%{public}d\", pid);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.uid=%{public}d\", uid);\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.resource_type=%{public}s\", resourceType.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.bundle_name=%{public}s\", bundleName.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.bundle_version=%{public}s\", bundleVersion.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.memory=%{public}s\", memory.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.external_log=%{public}s\", externalLog.c_str());\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.log_over_limit=%{public}d\", logOverLimit.c_str());\n                }\n            }\n        }\n    }\n}\n\nstatic napi_value RegisterWatcher(napi_env env, napi_callback_info info) {\n    // 开发者自定义观察者名称，系统根据不同的名称来识别不同的观察者。\n    systemEventWatcher = OH_HiAppEvent_CreateWatcher(\"onReceiverWatcher\");\n    // 设置订阅的事件为EVENT_RESOURCE_OVERLIMIT。\n    const char *names[] = {EVENT_RESOURCE_OVERLIMIT};\n    // 开发者订阅感兴趣的事件，此处订阅了系统事件。\n    OH_HiAppEvent_SetAppEventFilter(systemEventWatcher, DOMAIN_OS, 0, names, 1);\n    // 开发者设置已实现的回调函数，观察者接收到事件后回立即触发OnReceive回调。\n    OH_HiAppEvent_SetWatcherOnReceive(systemEventWatcher, OnReceive);\n    // 使观察者开始监听订阅的事件。\n    OH_HiAppEvent_AddWatcher(systemEventWatcher);\n    return {};\n} onTrigger类型观察者： 编辑\"napi_init.cpp\"文件，定义OnTrigger类型观察者相关方法： // 开发者可以自行实现获取已监听到事件的回调函数，其中events指针指向内容仅在该函数内有效。\nstatic void OnTake(const char *const *events, uint32_t eventLen) {\n    Json::Reader reader(Json::Features::strictMode());\n    Json::FastWriter writer;\n    for (int i = 0; i < eventLen; ++i) {\n        Json::Value eventInfo;\n        if (reader.parse(events[i], eventInfo)) {\n            auto domain =  eventInfo[\"domain_\"].asString();\n            auto name = eventInfo[\"name_\"].asString();\n            auto type = eventInfo[\"type_\"].asInt();\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.domain=%{public}s\", domain.c_str());\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.name=%{public}s\", name.c_str());\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.eventType=%{public}d\", type);\n            if (domain ==  DOMAIN_OS && name == EVENT_RESOURCE_OVERLIMIT) {\n                auto time = eventInfo[\"time\"].asInt64();\n                auto pid = eventInfo[\"pid\"].asInt();\n                auto uid = eventInfo[\"uid\"].asInt();\n                auto resourceType = eventInfo[\"resourceType\"].asString();\n                auto bundleName = eventInfo[\"bundle_name\"].asString();\n                auto bundleVersion = eventInfo[\"bundle_version\"].asString();\n                auto memory = writer.write(eventInfo[\"memory\"]);\n                auto externalLog = writer.write(eventInfo[\"external_log\"]);\n                std::string logOverLimit = eventInfo[\"log_over_limit\"].asBool() ? \"true\":\"false\";\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.time=%{public}lld\", time);\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.pid=%{public}d\", pid);\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.uid=%{public}d\", uid);\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.resource_type=%{public}s\", resourceType.c_str());\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.bundle_name=%{public}s\", bundleName.c_str());\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.bundle_version=%{public}s\", bundleVersion.c_str());\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.memory=%{public}s\", memory.c_str());\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.external_log=%{public}s\", externalLog.c_str());\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.log_over_limit=%{public}d\", logOverLimit.c_str());\n            }\n        }\n    }\n}\n\n// 开发者可以自行实现订阅回调函数，以便对获取到的事件打点数据进行自定义处理。\nstatic void OnTrigger(int row, int size) {\n    // 接收回调后，获取指定数量的已接收事件。\n    OH_HiAppEvent_TakeWatcherData(systemEventWatcher, row, OnTake);\n}\n\nstatic napi_value RegisterWatcher(napi_env env, napi_callback_info info) {\n    // 开发者自定义观察者名称，系统根据不同的名称来识别不同的观察者。\n    systemEventWatcher = OH_HiAppEvent_CreateWatcher(\"onTriggerWatcher\");\n    // 设置订阅的事件为EVENT_RESOURCE_OVERLIMIT。\n    const char *names[] = {EVENT_RESOURCE_OVERLIMIT};\n    // 开发者订阅感兴趣的事件，此处订阅了系统事件。\n    OH_HiAppEvent_SetAppEventFilter(systemEventWatcher, DOMAIN_OS, 0, names, 1);\n    // 开发者设置已实现的回调函数，需OH_HiAppEvent_SetTriggerCondition设置的条件满足方可触发。\n    OH_HiAppEvent_SetWatcherOnTrigger(systemEventWatcher, OnTrigger);\n    // 开发者可以设置订阅触发回调的条件，此处是设置新增事件打点数量为2个时，触发onTrigger回调。\n    OH_HiAppEvent_SetTriggerCondition(systemEventWatcher, 1, 0, 0);\n    // 使观察者开始监听订阅的事件。\n    OH_HiAppEvent_AddWatcher(systemEventWatcher);\n    return {};\n}  将RegisterWatcher注册为ArkTS接口： 编辑\"napi_init.cpp\"文件，将RegisterWatcher注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"registerWatcher\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr }\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n} 编辑\"index.d.ts\"文件，定义ArkTS接口： export const registerWatcher: () => void; 编辑\"EntryAbility.ets\"文件，在onCreate()函数中新增接口调用： import testNapi from 'libentry.so'\nimport hidebug from '@kit.PerformanceAnalysisKit'\nexport default class EntryAbility extends UIAbility {\n  onCreate(want, launchParam) {\n    // 启动时，注册系统事件观察者\n    testNapi.registerWatcher();\n  }\n} 编辑工程中的“entry > src > main > ets > pages > Index.ets”文件，添加按钮并在其onClick函数构造资源泄漏场景，以触发资源泄漏事件。 此处需要使用hidebug.setAppResourceLimit设置内存限制，造成内存内存泄漏，需要同步在“开发者选项”中打开“系统资源泄漏日志”，并重启设备。接口示例代码如下：  import hidebug from \"@ohos.hidebug\";\n\n @Entry\n @Component\n struct Index {\n   @State leakedArray: string[][] = [];\n\n   build() {\n     Column() {\n       Row() {\n         Column() {\n           Button(\"pss leak\")\n             .onClick(() => {\n               hidebug.setAppResourceLimit(\"pss_memory\", 1024, true);\n               for (let i = 0; i < 20 * 1024; i++) {\n                 this.leakedArray.push(new Array(1).fill(\"leak\"));\n               }\n             })\n         }\n       }\n       .height('100%')\n       .width('100%')\n     }\n   }\n } 点击DevEco Studio界面中的运行按钮，运行应用工程，等待15~30分钟，会上报应用内存泄漏事件。 同一个应用，24小时内至多上报一次内存泄漏，如果短时间内要二次上报，需要重启设备。 内存泄漏事件上报后，可以在Log窗口看到对系统事件数据的处理日志： 08-07 03:53:35.314 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.domain=OS\n08-07 03:53:35.314 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.name=RESOURCE_OVERLIMIT\n08-07 03:53:35.314 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.eventType=1\n08-07 03:53:35.349 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.time=1502049167732\n08-07 03:53:35.349 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.pid=1587\n08-07 03:53:35.349 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.uid=20010043\n08-07 03:53:35.349 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.resource_type=pss_memory\n08-07 03:53:35.349 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.bundle_name=com.example.myapplication\n08-07 03:53:35.349 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.bundle_version=1.0.0\n08-07 03:53:35.350 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.memory={\"pss\":2100257,\"rss\":1352644,\"sys_avail_mem\":250272,\"sys_free_mem\":60004,\"sys_total_mem\":1992340,\"vss\":2462936}\n08-07 03:53:35.350 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.external_log=[\"/data/storage/el2/log/resourcelimit/RESOURCE_OVERLIMIT_1725614572401_6808.log\",\"/data/storage/el2/log/resourcelimit/RESOURCE_OVERLIMIT_1725614572412_6808.log\"]\n08-07 03:53:35.350 1719-1738/? I A00000/testTag: HiAppEvent eventInfo.params.log_over_limit=false 移除事件观察者： static napi_value RemoveWatcher(napi_env env, napi_callback_info info) {\n    // 使观察者停止监听事件\n    OH_HiAppEvent_RemoveWatcher(systemEventWatcher);\n    return {};\n} 销毁事件观察者： static napi_value DestroyWatcher(napi_env env, napi_callback_info info) {\n    // 销毁创建的观察者，并置systemEventWatcher为nullptr。\n    OH_HiAppEvent_DestroyWatcher(systemEventWatcher);\n    systemEventWatcher = nullptr;\n    return {};\n} 
