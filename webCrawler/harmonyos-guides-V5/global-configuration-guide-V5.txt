全局配置项功能场景
对于需要使用进程单例的场景，例如不同并发实例间需要数据保持一致的全局配置项业务，可以采用共享模块来实现。
如下示例实现了只有Wi-Fi打开且用户登陆后才能下载的业务功能，具体步骤如下。
编写全局配置文件。 // Config.ets\n\nimport { ArkTSUtils } from '@kit.ArkTS';\n\n\"use shared\"\n\n@Sendable\nclass Config {\n  lock: ArkTSUtils.locks.AsyncLock = new ArkTSUtils.locks.AsyncLock\n  isLogin: boolean = false;\n  loginUser?: string;\n  wifiOn: boolean = false\n\n  async login(user: string) {\n    return this.lock.lockAsync(() => {\n      this.isLogin = true;\n      this.loginUser = user\n    }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE)\n  }\n\n  async logout(user?: string) {\n    return this.lock.lockAsync(() => {\n      this.isLogin = false\n      this.loginUser = \"\"\n    }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE)\n  }\n\n  async getIsLogin(): Promise<boolean> {\n    return this.lock.lockAsync(() => {\n      return this.isLogin\n    }, ArkTSUtils.locks.AsyncLockMode.SHARED)\n  }\n\n  async getUser(): Promise<string> {\n    return this.lock.lockAsync(() => {\n      return this.loginUser!\n    }, ArkTSUtils.locks.AsyncLockMode.SHARED)\n  }\n\n  async setWifiState(state: boolean) {\n    return this.lock.lockAsync(() => {\n      this.wifiOn = state\n    }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE)\n  }\n\n  async isWifiOn() {\n    return this.lock.lockAsync(() => {\n      return this.wifiOn;\n    }, ArkTSUtils.locks.AsyncLockMode.SHARED)\n  }\n}\n\nexport let config = new Config() UI主线程及子线程访问全局配置项。 import { config } from './Config'\nimport { taskpool } from '@kit.ArkTS';\n\n@Concurrent\nasync function download() {\n  if (!await config.isWifiOn()) {\n    console.info(\"wifi is off\")\n    return false;\n  }\n  if (!await config.getIsLogin()) {\n    console.info(\"not login\")\n    return false;\n  }\n  console.info(`User[${await config.getUser()}] start download ...`)\n  return true;\n}\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'not login';\n  @State wifiState: string = \"wifi off\";\n  @State downloadResult: string = \"\";\n  input: string = \"\"\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .alignRules({\n            center: { anchor: '__container__', align: VerticalAlign.Center },\n            middle: { anchor: '__container__', align: HorizontalAlign.Center }\n          })\n        TextInput({ placeholder: \"请输入用户名\" })\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n          .alignRules({\n            center: { anchor: '__container__', align: VerticalAlign.Center },\n            middle: { anchor: '__container__', align: HorizontalAlign.Center }\n          })\n          .onChange((value) => {\n            this.input = value;\n          })\n        Text(\"login\")\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .alignRules({\n            center: { anchor: '__container__', align: VerticalAlign.Center },\n            middle: { anchor: '__container__', align: HorizontalAlign.Center }\n          })\n          .onClick(async () => {\n            if (!await config.getIsLogin() && this.input) {\n              this.message = \"login: \" + this.input\n              config.login(this.input)\n            }\n          })\n          .backgroundColor(0xcccccc)\n        Text(\"logout\")\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .alignRules({\n            center: { anchor: '__container__', align: VerticalAlign.Center },\n            middle: { anchor: '__container__', align: HorizontalAlign.Center }\n          })\n          .onClick(async () => {\n            if (await config.getIsLogin()) {\n              this.message = \"not login\"\n              config.logout()\n            }\n          })\n          .backgroundColor(0xcccccc)\n        Text(this.wifiState)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .alignRules({\n            center: { anchor: '__container__', align: VerticalAlign.Center },\n            middle: { anchor: '__container__', align: HorizontalAlign.Center }\n          })\n        Toggle({ type: ToggleType.Switch })\n          .onChange(async (isOn: boolean) => {\n            await config.setWifiState(isOn)\n            this.wifiState = isOn ? \"wifi on\" : \"wifi off\";\n          })\n        Text(\"download\")\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .alignRules({\n            center: { anchor: '__container__', align: VerticalAlign.Center },\n            middle: { anchor: '__container__', align: HorizontalAlign.Center }\n          })\n          .onClick(async () => {\n            let ret = await taskpool.execute(download)\n            this.downloadResult = ret ? \"download success\" : \"download fail\";\n          })\n        Text(this.downloadResult)\n          .fontSize(20)\n          .fontWeight(FontWeight.Bold)\n          .alignRules({\n            center: { anchor: '__container__', align: VerticalAlign.Center },\n            middle: { anchor: '__container__', align: HorizontalAlign.Center }\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n} 
