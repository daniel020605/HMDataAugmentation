@performance/hp-arkui-suggest-reuseid-for-if-else-reusable-component
建议使用reuseId标记不同结构的组件构成。
滑动丢帧场景下，建议优先修改。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/hp-arkui-suggest-reuseid-for-if-else-reusable-component\": \"warn\",\n  }\n}
选项
该规则无需配置额外选项。
正例
// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\nimport { ChartInfoEntry } from './data/DataEntry';\nimport { PublicChatItem } from './component/PublicChatItem';\nimport { ChatItem } from './component/ChatItem';\n\n@Entry\n@Component\nstruct MyComponent{\n  private scroller: Scroller = new Scroller()\n  private lazyChatList: MyDataSource = new MyDataSource();\n\n  build() {\n    Column() {\n      List({ scroller: this.scroller }) {\n        LazyForEach(this.lazyChatList, (item: ChartInfoEntry, index: number) => {\n          ListItem() {\n            // 使用reuseId进行组件复用的控制\n            InnerRecentChat({ chatInfo: item }).reuseId(this.lazyChatList.getReuseIdByIndex(index))\n          }\n          .height(72)\n        }, (item: ChartInfoEntry) => item.id)\n      }\n      .cachedCount(3)\n      .width('100%')\n      .height('100%')\n    }\n  }\n}\n\n@Reusable\n@Component\nstruct InnerRecentChat {\n  @State chatInfo: ChartInfoEntry = new ChartInfoEntry()\n\n  aboutToReuse(params: Record<string, ESObject>): void {\n    this.chatInfo = params.chatInfo as ChartInfoEntry\n  }\n\n  build() {\n    Button({ type: ButtonType.Normal }) {\n      Row() {\n        if (this.chatInfo['isPublicChat']) {\n          // 源码文件，请以工程实际为准\n          PublicChatItem({ chatInfo: chatInfo as ChartInfoEntry })\n        } else {\n          // 源码文件，请以工程实际为准\n          ChatItem({ chatInfo: this.chatInfo as ChatItem })\n        }\n      }.padding({ left: 16, right: 16 })\n    }\n    .type(ButtonType.Normal)\n    .width('100%')\n    .height('100%')\n    .borderRadius(0)\n  }\n}
反例
// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\nimport { ChartInfoEntry } from './data/DataEntry';\nimport { PublicChatItem } from './component/PublicChatItem';\nimport { ChatItem } from './component/ChatItem';\n\n@Entry\n@Component\nstruct MyComponent{\n  private scroller: Scroller = new Scroller()\n  private lazyChatList: MyDataSource = new MyDataSource();\n\n  build() {\n    Column() {\n      List({ scroller: this.scroller }) {\n        LazyForEach(this.lazyChatList, (item: ChartInfoEntry, index: number) => {\n          ListItem() {\n            // ListItem里有if-else并且直接在分支里使用了自定义复用组件\n            Button({ type: ButtonType.Normal }) {\n              Row() {\n                if (item['isPublicChat']) {\n                  // 源码文件，请以工程实际为准\n                  PublicChatItem({ chatInfo: item as PublicChatItem })\n                } else {\n                  // 源码文件，请以工程实际为准\n                  ChatItem({ chatInfo: item as ChatItem })\n                }\n              }.padding({ left: 16, right: 16 })\n            }\n            .type(ButtonType.Normal)\n            .width('100%')\n            .height('100%')\n            .borderRadius(0)\n          }\n          .height(72)\n        }, (item: ChartInfoEntry) => item.id)\n      }\n      .cachedCount(3)\n      .width('100%')\n      .height('100%')\n    }\n  }\n}
规则集
plugin:@performance/recommended
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
