@performance/multiple-associations-state-var-check
多个组件关联同一数据时，建议在组件中使用@Watch装饰器添加更新条件，避免不必要的组件更新。
通用丢帧场景下，建议优先修改。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/multiple-associations-state-var-check\": \"suggestion\",\n  }\n}
选项
该规则无需配置额外选项。
正例
@Observed\nclass UIStyle {\n  fontSize: number = 0;\n  fontColor: string = '';\n  isChecked: boolean = false;\n}\n@Entry\n@Component\nstruct MultipleAssociationsStateVarNoReport0 {\n  @State uiStyle: UIStyle = new UIStyle();\n  private listData: string[] = [];\n  aboutToAppear(): void {\n    for (let i = 0; i < 10; i++) {\n      this.listData.push(`ListItemComponent ${i}`);\n    }\n  }\n  build() {\n    Row() {\n      Column() {\n        CompA({item: '1', index: 1, subStyle: this.uiStyle})\n        CompB({item: '2', index: 2, subStyle: this.uiStyle})\n        CompC({item: '3', index: 3, subStyle: this.uiStyle})\n        Text('change state var')\n          .onClick(()=>{\n            this.uiStyle.fontSize = 20;\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}\n@Component\nstruct CompA {\n  @Prop item: string;\n  @Prop index: number;\n  @Link @Watch('onStyleChange') subStyle: UIStyle;\n  @State fontSize: number = 0;\n  isRender(): number {\n    console.info(`CompA ${this.index} Text is rendered`);\n    return this.fontSize;\n  }\n  onStyleChange() {\n    this.fontSize = this.subStyle.fontSize;\n  }\n  build() {\n    Column() {\n      Text(this.item)\n        .fontSize(this.isRender())\n        .fontSize(this.fontSize)\n      Text('abc')\n    }\n  }\n}\n@Component\nstruct CompB {\n  @Prop item: string;\n  @Prop index: number;\n  @Link @Watch('onStyleChange') subStyle: UIStyle;\n  @State fontColor: string = '#00ffff';\n  isRender(): number {\n    console.info(`CompB ${this.index} Text is rendered`);\n    return 10;\n  }\n  onStyleChange() {\n    this.fontColor = this.subStyle.fontColor;\n  }\n  build() {\n    Column() {\n      Text(this.item)\n        .fontSize(this.isRender())\n        .fontColor(this.fontColor)\n      Text('abc')\n    }\n  }\n}\n@Component\nstruct CompC {\n  @Prop item: string;\n  @Prop index: number;\n  @Link @Watch('onStyleChange') subStyle: UIStyle;\n  @State isChecked: boolean = false;\n  isRender(): number {\n    console.info(`CompC ${this.index} Text is rendered`);\n    return 50;\n  }\n  onStyleChange() {\n    this.isChecked = this.subStyle.isChecked;\n  }\n  build() {\n    Column() {\n      if (this.isChecked) {\n        Text('checked')\n      } else {\n        Text('unchecked')\n      }\n    }\n  }\n}
反例
@Observed\nclass UIStyle {\n  fontSize: number = 0;\n  fontColor: string = '';\n  isChecked: boolean = false;\n}\n@Entry\n@Component\nstruct MultipleAssociationsStateVarReport0 {\n  @State uiStyle: UIStyle = new UIStyle();\n  private listData: string[] = [];\n  aboutToAppear(): void {\n    for (let i = 0; i < 10; i++) {\n      this.listData.push(`ListItemComponent ${i}`);\n    }\n  }\n  build() {\n    Row() {\n      Column() {\n        CompA({item: '1', index: 1, subStyle: this.uiStyle})\n        CompB({item: '2', index: 2, subStyle: this.uiStyle})\n        CompC({item: '3', index: 3, subStyle: this.uiStyle})\n        Text('change state var')\n          .onClick(()=>{\n            this.uiStyle.fontSize = 20;\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}\n@Component\nstruct CompA {\n  @Prop item: string;\n  @Prop index: number;\n  @Link subStyle: UIStyle;\n  private sizeFont: number = 50;\n  isRender(): number {\n    console.info(`CompA ${this.index} Text is rendered`);\n    return this.sizeFont;\n  }\n  build() {\n    Column() {\n      Text(this.item)\n        .fontSize(this.isRender())\n        .fontSize(this.subStyle.fontSize)\n      Text('abc')\n    }\n  }\n}\n@Component\nstruct CompB {\n  @Prop item: string;\n  @Prop index: number;\n  @Link subStyle: UIStyle;\n  private sizeFont: number = 50;\n  isRender(): number {\n    console.info(`CompB ${this.index} Text is rendered`);\n    return this.sizeFont;\n  }\n  build() {\n    Column() {\n      Text(this.item)\n        .fontSize(this.isRender())\n        .fontColor(this.subStyle.fontColor)\n      Text('abc')\n    }\n  }\n}\n@Component\nstruct CompC {\n  @Prop item: string;\n  @Prop index: number;\n  @Link subStyle: UIStyle;\n  private sizeFont: number = 50;\n  isRender(): number {\n    console.info(`CompC ${this.index} Text is rendered`);\n    return this.sizeFont;\n  }\n  build() {\n    Column() {\n      if (this.subStyle.isChecked) {\n        Text('checked')\n      } else {\n        Text('unchecked')\n      }\n    }\n  }\n}
规则集
plugin:@performance/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
