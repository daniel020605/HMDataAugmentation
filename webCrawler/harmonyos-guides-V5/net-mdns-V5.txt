MDNS管理
简介
MDNS即多播DNS（Multicast DNS），提供局域网内的本地服务添加、移除、发现、解析等能力。
 本地服务：局域网内服务的提供方，比如打印机、扫描器等。 
MDNS管理的典型场景有：
 管理本地服务，通过对本地服务的创建，删除和解析等管理本地服务。 发现本地服务，通过DiscoveryService对象，对指定类型的本地服务状态变化进行监听。 
为了保证应用的运行效率，大部分API调用都是异步的，对于异步调用的API均提供了callback和Promise两种方式，以下示例均采用promise函数，更多方式可以查阅MDNS管理-API参考。
以下分别介绍具体开发方式。
接口说明
完整的JS API说明以及实例代码请参考：MDNS管理-API参考。
管理本地服务
 设备连接WiFi。 从@kit.NetworkKit里导入mdns的命名空间。 调用addLocalService方法，添加本地服务。 通过resolveLocalService方法，解析本地网络的IP地址（非必要，根据需求使用）。 通过removeLocalService方法，移除本地服务。 
// 从@kit.NetworkKit中导入mdns命名空间\nimport { mdns } from '@kit.NetworkKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { featureAbility } from '@kit.AbilityKit';\n\nlet context = getContext(this) as Context;\n\nclass ServiceAttribute {\n  key: string = \"111\"\n  value: Array<number> = [1]\n}\n\n// 建立LocalService对象\nlet localServiceInfo: mdns.LocalServiceInfo = {\n  serviceType: \"_print._tcp\",\n  serviceName: \"servicename\",\n  port: 5555,\n  host: {\n    address: \"10.14.**.***\"\n  },\n  serviceAttribute: [{key: \"111\", value: [1]}]\n}\n\n// addLocalService添加本地服务\nmdns.addLocalService(context, localServiceInfo).then((data: mdns.LocalServiceInfo) => {\n  console.log(JSON.stringify(data));\n});\n\n// resolveLocalService解析本地服务对象（非必要，根据需求使用）\nmdns.resolveLocalService(context, localServiceInfo).then((data: mdns.LocalServiceInfo) => {\n  console.log(JSON.stringify(data));\n});\n\n// removeLocalService移除本地服务\nmdns.removeLocalService(context, localServiceInfo).then((data: mdns.LocalServiceInfo) => {\n  console.log(JSON.stringify(data));\n});
发现本地服务
 设备连接WiFi。 从@kit.NetworkKit里导入mdns的命名空间。 创建DiscoveryService对象，用于发现指定服务类型的MDNS服务。 订阅MDNS服务发现相关状态变化。 启动搜索局域网内的MDNS服务。 停止搜索局域网内的MDNS服务。 取消订阅的MDNS服务。 
// 从@kit.NetworkKit中导入mdns命名空间\nimport { common, featureAbility, UIAbility } from '@kit.AbilityKit';\nimport { mdns } from '@kit.NetworkKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { window } from '@kit.ArkUI';\n\n// 构造单例对象\nexport class GlobalContext {\n  private constructor() {}\n  private static instance: GlobalContext;\n  private _objects = new Map<string, Object>();\n\n  public static getContext(): GlobalContext {\n    if (!GlobalContext.instance) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string): Object | undefined {\n    return this._objects.get(value);\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n}\n\n// Stage模型获取context\nclass EntryAbility extends UIAbility {\n  value:number = 0;\n  onWindowStageCreate(windowStage: window.WindowStage): void{\n    GlobalContext.getContext().setObject(\"value\", this.value);\n  }\n}\n\nlet context = GlobalContext.getContext().getObject(\"value\") as common.UIAbilityContext;\n\n// 创建DiscoveryService对象，用于发现指定服务类型的MDNS服务\nlet serviceType = \"_print._tcp\";\nlet discoveryService = mdns.createDiscoveryService(context, serviceType);\n\n// 订阅MDNS服务发现相关状态变化\ndiscoveryService.on('discoveryStart', (data: mdns.DiscoveryEventInfo) => {\n  console.log(JSON.stringify(data));\n});\ndiscoveryService.on('discoveryStop', (data: mdns.DiscoveryEventInfo) => {\n  console.log(JSON.stringify(data));\n});\ndiscoveryService.on('serviceFound', (data: mdns.LocalServiceInfo) => {\n  console.log(JSON.stringify(data));\n});\ndiscoveryService.on('serviceLost', (data: mdns.LocalServiceInfo) => {\n  console.log(JSON.stringify(data));\n});\n\n// 启动搜索局域网内的MDNS服务\ndiscoveryService.startSearchingMDNS();\n\n// 停止搜索局域网内的MDNS服务\ndiscoveryService.stopSearchingMDNS();\n\n// 取消订阅的MDNS服务\ndiscoveryService.off('discoveryStart', (data: mdns.DiscoveryEventInfo) => {\n  console.log(JSON.stringify(data));\n});\ndiscoveryService.off('discoveryStop', (data: mdns.DiscoveryEventInfo) => {\n  console.log(JSON.stringify(data));\n});\ndiscoveryService.off('serviceFound', (data: mdns.LocalServiceInfo) => {\n  console.log(JSON.stringify(data));\n});\ndiscoveryService.off('serviceLost', (data: mdns.LocalServiceInfo) => {\n  console.log(JSON.stringify(data));\n});
