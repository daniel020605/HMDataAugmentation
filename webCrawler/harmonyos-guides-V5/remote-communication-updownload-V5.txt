上传下载文件
场景介绍
本协议栈框架支持将文件上传到服务器或者从服务器下载文件。
开发步骤
导包。import { rcp } from '@kit.RemoteCommunicationKit';\nimport {fileIo} from '@kit.CoreFileKit'; 下载文件。公共设置let SESSION_CONFIG: rcp.SessionConfiguration = {\n  // 此处请根据业务设置合适的Configuration\n}\nlet DOWNLOAD_TO_PATH = \"\"; // 请根据自身业务选择合适的路径 下载到文件// 1、下载到文件\nconst session = rcp.createSession(SESSION_CONFIG);\nconst respMemory = await session.get(\"https//www.example.com\");\nconst dataMemory = respMemory.toString();\nif (fileIo.accessSync(DOWNLOAD_TO_PATH)) {\n  fileIo.unlinkSync(DOWNLOAD_TO_PATH);\n}\nconst resp = await session.downloadToFile(\"https//www.example.com\", {\n  kind: 'file',\n  file: DOWNLOAD_TO_PATH\n});\nsession.close(); 下载到目录// 2、下载到目录\nconst session = rcp.createSession(SESSION_CONFIG);\nconst respMemory = await session.get(\"https//www.example.com\");\nconst dataMemory = respMemory.toString();\nconst downloadedPath = \"FILES_DIR\" + \"DOWNLOAD_FOLDER_SUB_PATH\"; // 请根据自身业务选择合适的路径\nif (fileIo.accessSync(downloadedPath)) {\n  fileIo.unlinkSync(downloadedPath);\n}\nconst resp = await session.downloadToFile(\"https//www.example.com\", {\n  kind: 'folder',\n  path: \"FILES_DIR\" // 请根据自身业务选择合适的路径\n});\nsession.close(); 下载到文件描述符// 3、下载到文件描述符\nconst session = rcp.createSession(SESSION_CONFIG);\nconst respMemory = await session.get(\"https//www.example.com\");\nconst dataMemory = respMemory.toString();\nif (fileIo.accessSync(DOWNLOAD_TO_PATH)) {\n  fileIo.unlinkSync(DOWNLOAD_TO_PATH);\n}\nconst file = fileIo.openSync(DOWNLOAD_TO_PATH, fileIo.OpenMode.CREATE | fileIo.OpenMode.WRITE_ONLY);\nconst resp = await session.downloadToFile(\"https//www.example.com\", {\n  kind: 'file',\n  file: file.fd\n});\nfileIo.closeSync(file.fd);\nsession.close(); 下载到文件对象// 4、下载到文件对象\nconst session = rcp.createSession(SESSION_CONFIG);\nconst respMemory = await session.get(\"https//www.example.com\");\nconst dataMemory = respMemory.toString();\nif (fileIo.accessSync(DOWNLOAD_TO_PATH)) {\n  fileIo.unlinkSync(DOWNLOAD_TO_PATH);\n}\nconst file = fileIo.openSync(DOWNLOAD_TO_PATH, fileIo.OpenMode.CREATE | fileIo.OpenMode.WRITE_ONLY);\nconst resp = await session.downloadToFile(\"https//www.example.com\", {\n  kind: 'file',\n  file: file\n});\nfileIo.closeSync(file.fd);\nsession.close();  将文件上传到指定路径。公共设置let SESSION_CONFIG: rcp.SessionConfiguration = {\n  // 此处请根据业务设置合适的Configuration\n} 传入一个文件路径// 1、传入一个文件路径\nconst session = rcp.createSession(SESSION_CONFIG);\nconst resp = await session.uploadFromFile(\"https://www.example.com\", new rcp.UploadFromFile(\"UPLOAD_FILE\")); // 请根据自身业务填写\nconst json = resp.toJSON();\nsession.close(); 传入一个文件描述符// 2、传入一个文件描述符\nconst session = rcp.createSession(SESSION_CONFIG);\nconst file = fileIo.openSync(\"UPLOAD_FILE\", fileIo.OpenMode.READ_ONLY); // 请根据自身业务填写UPLOAD_FILE\nconst resp = await session.uploadFromFile(\"https://www.example.com\", new rcp.UploadFromFile(file.fd));\nconst json = resp.toJSON();\nfileIo.closeSync(file.fd);\nsession.close(); 传入一个文件对象// 3、传入一个文件对象\nconst session = rcp.createSession(SESSION_CONFIG);\nconst file = fileIo.openSync(\"UPLOAD_FILE\", fileIo.OpenMode.READ_ONLY); // 请根据自身业务定义UPLOAD_FILE\nconst resp = await session.uploadFromFile(\"https://www.example.com\", new rcp.UploadFromFile(file));\nconst json = resp.toJSON();\nfileIo.closeSync(file.fd);\nsession.close(); 使用自定义对象// 4、使用自定义文件对象\nclass FdReadFile {\n  readonly fd: number;\n\n  constructor(fd: number) {\n    this.fd = fd;\n  }\n\n  async read(buffer: ArrayBuffer): Promise<number> {\n    return fileIo.read(this.fd, buffer);\n  }\n}\nconst session = rcp.createSession(SESSION_CONFIG);\nconst file = fileIo.openSync(\"UPLOAD_FILE\", fileIo.OpenMode.READ_ONLY);\nconst resp = await session.uploadFromFile(\"https://www.example.com\", new rcp.UploadFromFile(new FdReadFile(file.fd)));\nconst json = resp.toJSON();\nfileIo.closeSync(file.fd);\nsession.close(); 使用自定义文件流// 5、使用自定义文件流\nclass FdReadStream {\n  readonly file: FdReadFile;\n\n  constructor(fd: number) {\n    this.file = new FdReadFile(fd);\n  }\n\n  async read(buffer: ArrayBuffer): Promise<number> {\n    return this.file.read(buffer);\n  }\n}\nconst session = rcp.createSession(SESSION_CONFIG);\nconst file = fileIo.openSync(\"UPLOAD_FILE\", fileIo.OpenMode.READ_ONLY); // 请根据自身业务定义UPLOAD_FILE\nconst resp = await session.uploadFromFile(\"https://www.example.com\", new rcp.UploadFromFile(new FdReadStream(file.fd)));\nconst json = resp.toJSON();\nfileIo.closeSync(file.fd);session.close();\nsession.close(); 使用自定义文件流（同步）// 6、使用自定义文件流\nclass FdSyncReadStream {\n  readonly file: FdReadFile;\n\n  constructor(fd: number) {\n    this.file = new FdReadFile(fd);\n  }\n\n  async read(buffer: ArrayBuffer): Promise<number> {\n    return this.file.read(buffer);\n  }\n}\nconst session = rcp.createSession(SESSION_CONFIG);\nconst file = fileIo.openSync(\"UPLOAD_FILE\", fileIo.OpenMode.READ_ONLY);\nconst resp = await session.uploadFromStream(\"https:www.example.com\", new rcp.UploadFromStream(new FdSyncReadStream(file.fd)));\nconst json = resp.toJSON();\nfileIo.closeSync(file.fd);  
