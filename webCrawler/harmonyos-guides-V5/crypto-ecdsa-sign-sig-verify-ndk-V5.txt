使用ECDSA密钥对验签(C/C++)
对应的算法规格请查看签名验签算法规格：ECDSA。
在CMake脚本中链接相关动态库
   target_link_libraries(entry PUBLIC libohcrypto.so)
开发步骤
 调用OH_CryptoVerify_Create，指定字符串参数'ECC256|SHA256'，创建非对称密钥类型为ECC256、摘要算法为SHA256的Verify实例，用于完成验签操作。 调用OH_CryptoVerify_Init，使用公钥（OH_CryptoPubKey）初始化Verify实例。 调用OH_CryptoVerify_Update，传入待验证的数据。 当前单次update长度没有限制，开发者可以根据数据量判断如何调用update，如果数据量较小，可以直接调用OH_CryptoVerify_Final接口一次性传入。 调用OH_CryptoVerify_Final，对数据进行验签。 
#include \"CryptoArchitectureKit/crypto_common.h\"\n#include \"CryptoArchitectureKit/crypto_signature.h\"\n#include \"CryptoArchitectureKit/crypto_asym_key.h\"\n\nstatic bool doTestEcdsaSignature()\n{\n   OH_CryptoAsymKeyGenerator *keyCtx = nullptr;\n   OH_CryptoKeyPair *keyPair = nullptr;\n   OH_CryptoVerify *verify = nullptr;\n\n   uint8_t plainText[] = {\n      0xe4, 0x2b, 0xcc, 0x08, 0x11, 0x79, 0x16, 0x1b, 0x35, 0x7f, 0xb3, 0xaf, 0x40, 0x3b, 0x3f, 0x7c\n   };\n   Crypto_DataBlob msgBlob = {\n      .data = reinterpret_cast<uint8_t *>(plainText),\n      .len = sizeof(plainText)\n   };\n\n   uint8_t pubKeyText[] = {\n      0x30, 0x39, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,\n      0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x22, 0x00, 0x03, 0x4d, 0xe4, 0xbb, 0x11, 0x10,\n      0x1a, 0xd2, 0x05, 0x74, 0xf1, 0x0b, 0xb4, 0x75, 0x57, 0xf4, 0x3e, 0x55, 0x14, 0x17, 0x05, 0x4a,\n      0xb2, 0xfb, 0x8c, 0x84, 0x64, 0x38, 0x02, 0xa0, 0x2a, 0xa6, 0xf0\n   };\n\n   Crypto_DataBlob keyBlob = {\n      .data = reinterpret_cast<uint8_t *>(pubKeyText),\n      .len = sizeof(pubKeyText)\n   };\n\n   uint8_t signText[] = {\n      0x30, 0x44, 0x02, 0x20, 0x21, 0x89, 0x99, 0xb1, 0x56, 0x4e, 0x3a, 0x2c, 0x16, 0x08, 0xb5, 0x8a,\n      0x06, 0x6f, 0x67, 0x47, 0x1b, 0x04, 0x18, 0x7d, 0x53, 0x2d, 0xba, 0x00, 0x38, 0xd9, 0xe3, 0xe7,\n      0x8c, 0xcf, 0x76, 0x83, 0x02, 0x20, 0x13, 0x54, 0x84, 0x9d, 0x73, 0x40, 0xc3, 0x92, 0x66, 0xdc,\n      0x3e, 0xc9, 0xf1, 0x4c, 0x33, 0x84, 0x2a, 0x76, 0xaf, 0xc6, 0x61, 0x84, 0x5c, 0xae, 0x4b, 0x0d,\n      0x3c, 0xb0, 0xc8, 0x04, 0x89, 0x71\n   };\n\n   Crypto_DataBlob signBlob = {\n      .data = reinterpret_cast<uint8_t *>(signText),\n      .len = sizeof(signText)\n   };\n   \n   OH_Crypto_ErrCode ret = CRYPTO_SUCCESS;\n   // keypair\n   ret = OH_CryptoAsymKeyGenerator_Create((const char *)\"ECC256\", &keyCtx);\n   if (ret != CRYPTO_SUCCESS) {\n      return false;\n   }\n   ret = OH_CryptoAsymKeyGenerator_Convert(keyCtx, CRYPTO_DER, &keyBlob, nullptr, &keyPair);\n   if (ret != CRYPTO_SUCCESS) {\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n   OH_CryptoPubKey *pubKey = OH_CryptoKeyPair_GetPubKey(keyPair);\n   // verify\n   ret = OH_CryptoVerify_Create((const char *)\"ECC256|SHA256\", &verify);\n   if (ret != CRYPTO_SUCCESS) {\n      OH_CryptoVerify_Destroy(verify);\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n   ret = OH_CryptoVerify_Init(verify, pubKey);\n   if (ret != CRYPTO_SUCCESS) {\n      OH_CryptoVerify_Destroy(verify);\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n   bool res = OH_CryptoVerify_Final(verify, &msgBlob, &signBlob);\n   if (res != true) {\n      OH_CryptoVerify_Destroy(verify);\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n\n   OH_CryptoVerify_Destroy(verify);\n   OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n   OH_CryptoKeyPair_Destroy(keyPair);\n   return res;\n}
