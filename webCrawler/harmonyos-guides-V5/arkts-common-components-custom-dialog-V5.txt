基础自定义弹出框 (CustomDialog)(不推荐)
CustomDialog是自定义弹出框，可用于广告、中奖、警告、软件更新等与用户交互响应操作。开发者可以通过CustomDialogController类显示自定义弹出框。具体用法请参考自定义弹出框。
当前，ArkUI弹出框均为非页面级弹出框，在页面路由跳转时，如果开发者未调用close方法将其关闭，弹出框将不会自动关闭。若需实现在跳转页面时覆盖弹出框的场景，建议使用Navigation。具体使用方法，请参考组件导航子页面显示类型的弹窗类型。
弹出框（CustomDialog）可以通过配置isModal来实现模态和非模态弹窗。isModal为true的时候，弹出框为模态弹窗。isModal为false时，弹出框为非模态弹窗。
创建自定义弹出框
 使用@CustomDialog装饰器装饰自定义弹出框，可在此装饰器内自定义弹出框内容。CustomDialogController需在@Component内定义。 @CustomDialog\nstruct CustomDialogExample {\n  controller: CustomDialogController = new CustomDialogController({\n    builder: CustomDialogExample({}),\n  })\n\n  build() {\n    Column() {\n      Text('我是内容')\n        .fontSize(20)\n    }.height(60).justifyContent(FlexAlign.Center)\n  }\n} 创建构造器，与装饰器呼应相连。  @Entry\n @Component\n struct CustomDialogUser {\n   dialogController: CustomDialogController = new CustomDialogController({\n     builder: CustomDialogExample(),\n   })\n } 点击与onClick事件绑定的组件使弹出框弹出。 @Entry\n@Component\nstruct CustomDialogUser {\n  dialogController: CustomDialogController = new CustomDialogController({\n    builder: CustomDialogExample(),\n  })\n\n  build() {\n    Column() {\n      Button('click me')\n        .onClick(() => {\n          this.dialogController.open()\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}  
弹出框的交互
弹出框可用于数据交互，完成用户一系列响应操作。
 在@CustomDialog装饰器内添加按钮，同时添加数据函数。 @CustomDialog\nstruct CustomDialogExample {\n  cancel?: () => void\n  confirm?: () => void\n  controller: CustomDialogController\n\n  build() {\n    Column() {\n      Text('我是内容').fontSize(20).margin({ top: 10, bottom: 10 })\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button('cancel')\n          .onClick(() => {\n            this.controller.close()\n            if (this.cancel) {\n              this.cancel()\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Black)\n        Button('confirm')\n          .onClick(() => {\n            this.controller.close()\n            if (this.confirm) {\n              this.confirm()\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Red)\n      }.margin({ bottom: 10 })\n    }\n  }\n} 页面内需要在构造器内进行接收，同时创建相应的函数操作。 @Entry\n@Component\nstruct CustomDialogUser {\n  dialogController: CustomDialogController = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: ()=> { this.onCancel() },\n      confirm: ()=> { this.onAccept() },\n    }),\n  })\n\n  onCancel() {\n    console.info('Callback when the first button is clicked')\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked')\n  }\n\n  build() {\n    Column() {\n      Button('click me')\n        .onClick(() => {\n          this.dialogController.open()\n        })\n    }.width('100%').margin({ top: 5 })\n  }\n}  3.可通过弹出框中的按钮实现路由跳转，同时获取跳转页面向当前页传入的参数。 // Index.ets\n@CustomDialog\nstruct CustomDialogExample {\n  @Link textValue: string\n  controller?: CustomDialogController\n  cancel: () => void = () => {\n  }\n  confirm: () => void = () => {\n  }\n\n  build() {\n    Column({ space: 20 }) {\n      if (this.textValue != '') {\n        Text(`第二个页面的内容为：${this.textValue}`)\n          .fontSize(20)\n      } else {\n        Text('是否获取第二个页面的内容')\n          .fontSize(20)\n      }\n      Flex({ justifyContent: FlexAlign.SpaceAround }) {\n        Button('cancel')\n          .onClick(() => {\n            if (this.controller != undefined) {\n              this.controller.close()\n              this.cancel()\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Black)\n        Button('confirm')\n          .onClick(() => {\n            if (this.controller != undefined && this.textValue != '') {\n              this.controller.close()\n            } else if (this.controller != undefined) {\n              this.getUIContext().getRouter().pushUrl({\n                url: 'pages/Index2'\n              })\n              this.controller.close()\n            }\n          }).backgroundColor(0xffffff).fontColor(Color.Red)\n      }.margin({ bottom: 10 })\n    }.borderRadius(10).padding({ top: 20 })\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  @State textValue: string = ''\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      cancel: () => {\n        this.onCancel()\n      },\n      confirm: () => {\n        this.onAccept()\n      },\n      textValue: $textValue\n    })\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  onPageShow() {\n    const params = this.getUIContext().getRouter().getParams() as Record<string, string>; // 获取传递过来的参数对象\n    if (params) {\n      this.dialogController?.open()\n      this.textValue = params.info as string; // 获取info属性的值\n    }\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked')\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked')\n  }\n\n  exitApp() {\n    console.info('Click the callback in the blank area')\n  }\n\n  build() {\n    Column() {\n      Button('click me')\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open()\n          }\n        }).backgroundColor(0x317aff)\n    }.width('100%').margin({ top: 5 })\n  }\n} // Index2.ets\n@Entry\n@Component\nstruct Index2 {\n  @State message: string = '点击返回';\n\n  build() {\n    Column() {\n      Button(this.message)\n        .type(ButtonType.Capsule)\n        .onClick(() => {\n           this.getUIContext().getRouter().back({\n             url: 'pages/Index',\n             params: {\n             info: 'Hello World'\n           }\n        });\n      })\n    }.width('100%').height('100%').margin({ top: 20 })\n  }\n}  
弹出框的动画
弹出框通过定义openAnimation控制弹出框出现动画的持续时间，速度等参数。
@CustomDialog\nstruct CustomDialogExample {\n  controller?: CustomDialogController\n\n  build() {\n    Column() {\n      Text('Whether to change a text?').fontSize(16).margin({ bottom: 10 })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  @State textValue: string = ''\n  @State inputValue: string = 'click me'\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample(),\n    openAnimation: {\n      duration: 1200,\n      curve: Curve.Friction,\n      delay: 500,\n      playMode: PlayMode.Alternate,\n      onFinish: () => {\n        console.info('play end')\n      }\n    },\n    autoCancel: true,\n    alignment: DialogAlignment.Bottom,\n    offset: { dx: 0, dy: -20 },\n    gridCount: 4,\n    customStyle: false,\n    backgroundColor: 0xd9ffffff,\n    cornerRadius: 10,\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  build() {\n    Column() {\n      Button(this.inputValue)\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open()\n          }\n        }).backgroundColor(0x317aff)\n    }.width('100%').margin({ top: 5 })\n  }\n}
弹出框的样式
弹出框通过定义宽度、高度、背景色、阴影等参数来控制样式。
@CustomDialog\nstruct CustomDialogExample {\n  controller?: CustomDialogController\n\n  build() {\n    Column() {\n      Text('我是内容').fontSize(16).margin({ bottom: 10 })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct CustomDialogUser {\n  @State textValue: string = ''\n  @State inputValue: string = 'click me'\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample(),\n    autoCancel: true,\n    alignment: DialogAlignment.Center,\n    offset: { dx: 0, dy: -20 },\n    gridCount: 4,\n    customStyle: false,\n    backgroundColor: 0xd9ffffff,\n    cornerRadius: 20,\n    width: '80%',\n    height: '100px',\n    borderWidth: 1,\n    borderStyle: BorderStyle.Dashed,//使用borderStyle属性，需要和borderWidth属性一起使用\n    borderColor: Color.Blue,//使用borderColor属性，需要和borderWidth属性一起使用\n    shadow: ({ radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0}),\n  })\n\n  // 在自定义组件即将析构销毁时将dialogController置空\n  aboutToDisappear() {\n    this.dialogController = null // 将dialogController置空\n  }\n\n  build() {\n    Column() {\n      Button(this.inputValue)\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open()\n          }\n        }).backgroundColor(0x317aff)\n    }.width('100%').margin({ top: 5 })\n  }\n}
嵌套自定义弹出框
通过第一个弹出框打开第二个弹出框时，最好将第二个弹出框定义在第一个弹出框的父组件处，通过父组件传给第一个弹出框的回调来打开第二个弹出框。
@CustomDialog\nstruct CustomDialogExampleTwo {\n  controllerTwo?: CustomDialogController\n  @State message: string = \"I'm the second dialog box.\"\n  @State showIf: boolean = false;\n  build() {\n    Column() {\n      if (this.showIf) {\n        Text(\"Text\")\n          .fontSize(30)\n          .height(100)\n      }\n      Text(this.message)\n        .fontSize(30)\n        .height(100)\n      Button(\"Create Text\")\n        .onClick(()=>{\n          this.showIf = true;\n        })\n      Button ('Close Second Dialog Box')\n        .onClick(() => {\n          if (this.controllerTwo != undefined) {\n            this.controllerTwo.close()\n          }\n        })\n        .margin(20)\n    }\n  }\n}\n@CustomDialog\nstruct CustomDialogExample {\n  openSecondBox?: ()=>void\n  controller?: CustomDialogController\n\n  build() {\n    Column() {\n      Button ('Open Second Dialog Box and close this box')\n        .onClick(() => {\n          this.controller!.close();\n          this.openSecondBox!();\n        })\n        .margin(20)\n    }.borderRadius(10)\n  }\n}\n@Entry\n@Component\nstruct CustomDialogUser {\n  @State inputValue: string = 'Click Me'\n  dialogController: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExample({\n      openSecondBox: ()=>{\n        if (this.dialogControllerTwo != null) {\n          this.dialogControllerTwo.open()\n        }\n      }\n    }),\n    cancel: this.exitApp,\n    autoCancel: true,\n    alignment: DialogAlignment.Bottom,\n    offset: { dx: 0, dy: -20 },\n    gridCount: 4,\n    customStyle: false\n  })\n  dialogControllerTwo: CustomDialogController | null = new CustomDialogController({\n    builder: CustomDialogExampleTwo(),\n    alignment: DialogAlignment.Bottom,\n    offset: { dx: 0, dy: -25 } })\n\n  aboutToDisappear() {\n    this.dialogController = null\n    this.dialogControllerTwo = null\n  }\n\n  onCancel() {\n    console.info('Callback when the first button is clicked')\n  }\n\n  onAccept() {\n    console.info('Callback when the second button is clicked')\n  }\n\n  exitApp() {\n    console.info('Click the callback in the blank area')\n  }\n  build() {\n    Column() {\n      Button(this.inputValue)\n        .onClick(() => {\n          if (this.dialogController != null) {\n            this.dialogController.open()\n          }\n        }).backgroundColor(0x317aff)\n    }.width('100%').margin({ top: 5 })\n  }\n}
由于自定义弹出框在状态管理侧有父子关系，如果将第二个弹出框定义在第一个弹出框内，那么当父组件（第一个弹出框）被销毁（关闭）时，子组件（第二个弹出框）内无法再继续创建新的组件。
