使用智能防跟踪功能
Web组件支持智能防跟踪功能，即跟踪型网站作为三方插入别的网页时，其发送的网络请求禁止携带cookie。
 通过调用enableIntelligentTrackingPrevention接口使能或者关闭相应Web组件的智能防跟踪功能，默认情况下该功能未启用。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('enableIntelligentTrackingPrevention')\n        .onClick(() => {\n          try {\n            this.controller.enableIntelligentTrackingPrevention(true);\n            console.log(\"enableIntelligentTrackingPrevention: true\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n} 通过调用isIntelligentTrackingPreventionEnabled接口判断当前Web组件是否开启了智能防跟踪功能。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('isIntelligentTrackingPreventionEnabled')\n        .onClick(() => {\n          try {\n            let result = this.controller.isIntelligentTrackingPreventionEnabled();\n            console.log(\"result: \" + result);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n} 通过调用onIntelligentTrackingPreventionResult接口，以回调的方式异步获取拦截的跟踪型网站的域名和访问的网站域名信息。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      // 需要打开智能防跟踪功能，才会触发onIntelligentTrackingPreventionResult回调\n      Button('enableIntelligentTrackingPrevention')\n        .onClick(() => {\n          try {\n            this.controller.enableIntelligentTrackingPrevention(true);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code}, Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n        .onIntelligentTrackingPreventionResult((details) => {\n          console.log(\"onIntelligentTrackingPreventionResult: [websiteHost]= \" + details.host +\n            \", [trackerHost]=\" + details.trackerHost);\n        })\n    }\n  }\n} 
同时，智能防跟踪功能提供了一组接口，用于设置需要绕过智能防跟踪功能的域名列表。这些接口设置的域名列表是整个应用生效，而非某个Web组件。
 通过调用addIntelligentTrackingPreventionBypassingList接口设置需要绕过智能防跟踪功能的域名列表。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('addIntelligentTrackingPreventionBypassingList')\n        .onClick(() => {\n          try {\n            let hostList = [\"www.test1.com\", \"www.test2.com\", \"www.test3.com\"];\n            webview.WebviewController.addIntelligentTrackingPreventionBypassingList(hostList);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n} 通过调用removeIntelligentTrackingPreventionBypassingList接口移除通过addIntelligentTrackingPreventionBypassingList接口设置的部分域名列表。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('removeIntelligentTrackingPreventionBypassingList')\n        .onClick(() => {\n          try {\n            let hostList = [ \"www.test1.com\", \"www.test2.com\" ];\n            webview.WebviewController.removeIntelligentTrackingPreventionBypassingList(hostList);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n} 通过调用clearIntelligentTrackingPreventionBypassingList接口清除通过addIntelligentTrackingPreventionBypassingList接口设置的所有域名。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('clearIntelligentTrackingPreventionBypassingList')\n        .onClick(() => {\n          webview.WebviewController.clearIntelligentTrackingPreventionBypassingList();\n        })\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n} 
