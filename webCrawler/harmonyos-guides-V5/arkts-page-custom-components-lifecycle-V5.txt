页面和自定义组件生命周期
在开始之前，我们先明确自定义组件和页面的关系：
 自定义组件：@Component装饰的UI单元，可以组合多个系统组件实现UI的复用，可以调用组件的生命周期。 页面：即应用的UI页面。可以由一个或者多个自定义组件组成，@Entry装饰的自定义组件为页面的入口组件，即页面的根节点，一个页面有且仅能有一个@Entry。只有被@Entry装饰的组件才可以调用页面的生命周期。 
页面生命周期，即被@Entry装饰的组件生命周期，提供以下生命周期接口：
 onPageShow：页面每次显示时触发一次，包括路由过程、应用进入前台等场景。 onPageHide：页面每次隐藏时触发一次，包括路由过程、应用进入后台等场景。 onBackPress：当用户点击返回按钮时触发。 
组件生命周期，即一般用@Component装饰的自定义组件的生命周期，提供以下生命周期接口：
 aboutToAppear：组件即将出现时回调该接口，具体时机为在创建自定义组件的新实例后，在执行其build()函数之前执行。 onDidBuild：组件build()函数执行完成之后回调该接口，开发者可以在这个阶段进行埋点数据上报等不影响实际UI的功能。不建议在onDidBuild函数中更改状态变量、使用animateTo等功能，这可能会导致不稳定的UI表现。 aboutToDisappear：aboutToDisappear函数在自定义组件析构销毁之前执行。不允许在aboutToDisappear函数中改变状态变量，特别是@Link变量的修改可能会导致应用程序行为不稳定。 
生命周期流程如下图所示，下图展示的是被@Entry装饰的组件（页面）生命周期。
根据上面的流程图，我们从自定义组件的初始创建、重新渲染和删除来详细解释。
自定义组件的创建和渲染流程
 自定义组件的创建：自定义组件的实例由ArkUI框架创建。 初始化自定义组件的成员变量：通过本地默认值或者构造方法传递参数来初始化自定义组件的成员变量，初始化顺序为成员变量的定义顺序。 如果开发者定义了aboutToAppear，则执行aboutToAppear方法。 在首次渲染的时候，执行build方法渲染系统组件，如果子组件为自定义组件，则创建自定义组件的实例。在首次渲染的过程中，框架会记录状态变量和组件的映射关系，当状态变量改变时，驱动其相关的组件刷新。 如果开发者定义了onDidBuild，则执行onDidBuild方法。 
自定义组件重新渲染
当事件句柄被触发（比如设置了点击事件，即触发点击事件）改变了状态变量时，或者LocalStorage / AppStorage中的属性更改，并导致绑定的状态变量更改其值时：
 框架观察到了变化，将启动重新渲染。 根据框架持有的两个map（自定义组件的创建和渲染流程中第4步），框架可以知道该状态变量管理了哪些UI组件，以及这些UI组件对应的更新函数。执行这些UI组件的更新函数，实现最小化更新。 
自定义组件的删除
如果if组件的分支改变，或者ForEach循环渲染中数组的个数改变，组件将被删除：
 在删除组件之前，将调用其aboutToDisappear生命周期函数，标记着该节点将要被销毁。ArkUI的节点删除机制是：后端节点直接从组件树上摘下，后端节点被销毁，对前端节点解引用，前端节点已经没有引用时，将被JS虚拟机垃圾回收。 自定义组件和它的变量将被删除，如果其有同步的变量，比如@Link、@Prop、@StorageLink，将从同步源上取消注册。 
不建议在生命周期aboutToDisappear内使用async await，如果在生命周期的aboutToDisappear使用异步操作（Promise或者回调方法），自定义组件将被保留在Promise的闭包中，直到回调方法被执行完，这个行为阻止了自定义组件的垃圾回收。
以下示例展示了生命周期的调用时机：
// Index.ets\nimport { router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct MyComponent {\n  @State showChild: boolean = true;\n  @State btnColor:string = \"#FF007DFF\";\n\n  // 只有被@Entry装饰的组件才可以调用页面的生命周期\n  onPageShow() {\n    console.info('Index onPageShow');\n  }\n  // 只有被@Entry装饰的组件才可以调用页面的生命周期\n  onPageHide() {\n    console.info('Index onPageHide');\n  }\n\n  // 只有被@Entry装饰的组件才可以调用页面的生命周期\n  onBackPress() {\n    console.info('Index onBackPress');\n    this.btnColor =\"#FFEE0606\";\n    return true // 返回true表示页面自己处理返回逻辑，不进行页面路由；返回false表示使用默认的路由返回逻辑，不设置返回值按照false处理\n  }\n\n  // 组件生命周期\n  aboutToAppear() {\n    console.info('MyComponent aboutToAppear');\n  }\n\n  // 组件生命周期\n  onDidBuild() {\n    console.info('MyComponent onDidBuild');\n  }\n\n  // 组件生命周期\n  aboutToDisappear() {\n    console.info('MyComponent aboutToDisappear');\n  }\n\n  build() {\n    Column() {\n      // this.showChild为true，创建Child子组件，执行Child aboutToAppear\n      if (this.showChild) {\n        Child()\n      }\n      // this.showChild为false，删除Child子组件，执行Child aboutToDisappear\n      Button('delete Child')\n        .margin(20)\n        .backgroundColor(this.btnColor)\n        .onClick(() => {\n        this.showChild = false;\n      })\n      // push到page页面，执行onPageHide\n      Button('push to next page')\n        .onClick(() => {\n          router.pushUrl({ url: 'pages/page' });\n        })\n    }\n  }\n}\n\n@Component\nstruct Child {\n  @State title: string = 'Hello World';\n  // 组件生命周期\n  aboutToDisappear() {\n    console.info('[lifeCycle] Child aboutToDisappear');\n  }\n\n  // 组件生命周期\n  onDidBuild() {\n    console.info('[lifeCycle] Child onDidBuild');\n  }\n\n  // 组件生命周期\n  aboutToAppear() {\n    console.info('[lifeCycle] Child aboutToAppear');\n  }\n\n  build() {\n    Text(this.title)\n      .fontSize(50)\n      .margin(20)\n      .onClick(() => {\n        this.title = 'Hello ArkUI';\n      })\n  }\n}
// page.ets\n@Entry\n@Component\nstruct page {\n  @State textColor: Color = Color.Black;\n  @State num: number = 0;\n\n  onPageShow() {\n    this.num = 5;\n  }\n\n  onPageHide() {\n    console.log(\"page onPageHide\");\n  }\n\n  onBackPress() { // 不设置返回值按照false处理\n    this.textColor = Color.Grey;\n    this.num = 0;\n  }\n\n  aboutToAppear() {\n    this.textColor = Color.Blue;\n  }\n\n  build() {\n    Column() {\n      Text(`num 的值为：${this.num}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontColor(this.textColor)\n        .margin(20)\n        .onClick(() => {\n          this.num += 5;\n        })\n    }\n    .width('100%')\n  }\n}
以上示例中，Index页面包含两个自定义组件，一个是被@Entry装饰的MyComponent，也是页面的入口组件，即页面的根节点；一个是Child，是MyComponent的子组件。只有@Entry装饰的节点才可以使页面级别的生命周期方法生效，因此在MyComponent中声明当前Index页面的页面生命周期函数（onPageShow / onPageHide / onBackPress）。MyComponent和其子组件Child分别声明了各自的组件级别生命周期函数（aboutToAppear / onDidBuild/aboutToDisappear）。
 应用冷启动的初始化流程为：MyComponent aboutToAppear --> MyComponent build --> MyComponent onDidBuild--> Child aboutToAppear --> Child build --> Child onDidBuild --> Index onPageShow。 点击“delete Child”，if绑定的this.showChild变成false，删除Child组件，会执行Child aboutToDisappear方法。 点击“push to next page”，调用router.pushUrl接口，跳转到另外一个页面，当前Index页面隐藏，执行页面生命周期Index onPageHide。此处调用的是router.pushUrl接口，Index页面被隐藏，并没有销毁，所以只调用onPageHide。跳转到新页面后，执行初始化新页面的生命周期的流程。 如果调用的是router.replaceUrl，则当前Index页面被销毁，上文已经提到，组件的销毁是从组件树上直接摘下子树,所以执行的生命周期流程将变为：新页面的初始化生命周期流程，然后执行Index onPageHide --> MyComponent aboutToDisappear --> Child aboutToDisappear。 点击返回按钮，触发页面生命周期Index onBackPress，且触发返回一个页面后会导致当前Index页面被销毁。 最小化应用或者应用进入后台，触发Index onPageHide。当前Index页面没有被销毁，所以并不会执行组件的aboutToDisappear。应用回到前台，执行Index onPageShow。 退出应用，执行Index onPageHide --> MyComponent aboutToDisappear --> Child aboutToDisappear。 
自定义组件监听页面生命周期
使用无感监听页面路由的能力，能够实现在自定义组件中监听页面的生命周期。
// Index.ets\nimport { uiObserver, router, UIObserver } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  listener: (info: uiObserver.RouterPageInfo) => void = (info: uiObserver.RouterPageInfo) => {\n    let routerInfo: uiObserver.RouterPageInfo | undefined = this.queryRouterPageInfo();\n    if (info.pageId == routerInfo?.pageId) {\n      if (info.state == uiObserver.RouterPageState.ON_PAGE_SHOW) {\n        console.log(`Index onPageShow`);\n      } else if (info.state == uiObserver.RouterPageState.ON_PAGE_HIDE) {\n        console.log(`Index onPageHide`);\n      }\n    }\n  }\n  aboutToAppear(): void {\n    let uiObserver: UIObserver = this.getUIContext().getUIObserver();\n    uiObserver.on('routerPageUpdate', this.listener);\n  }\n  aboutToDisappear(): void {\n    let uiObserver: UIObserver = this.getUIContext().getUIObserver();\n    uiObserver.off('routerPageUpdate', this.listener);\n  }\n  build() {\n    Column() {\n      Text(`this page is ${this.queryRouterPageInfo()?.pageId}`)\n        .fontSize(25)\n      Button(\"push self\")\n        .onClick(() => {\n          router.pushUrl({\n            url: 'pages/Index'\n          })\n        })\n      Column() {\n        SubComponent()\n      }\n    }\n  }\n}\n@Component\nstruct SubComponent {\n  listener: (info: uiObserver.RouterPageInfo) => void = (info: uiObserver.RouterPageInfo) => {\n    let routerInfo: uiObserver.RouterPageInfo | undefined = this.queryRouterPageInfo();\n    if (info.pageId == routerInfo?.pageId) {\n      if (info.state == uiObserver.RouterPageState.ON_PAGE_SHOW) {\n        console.log(`SubComponent onPageShow`);\n      } else if (info.state == uiObserver.RouterPageState.ON_PAGE_HIDE) {\n        console.log(`SubComponent onPageHide`);\n      }\n    }\n  }\n  aboutToAppear(): void {\n    let uiObserver: UIObserver = this.getUIContext().getUIObserver();\n    uiObserver.on('routerPageUpdate', this.listener);\n  }\n  aboutToDisappear(): void {\n    let uiObserver: UIObserver = this.getUIContext().getUIObserver();\n    uiObserver.off('routerPageUpdate', this.listener);\n  }\n  build() {\n    Column() {\n      Text(`SubComponent`)\n    }\n  }\n}
