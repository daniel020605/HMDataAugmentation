EmbeddedUIExtensionAbility
概述
EmbeddedUIExtensionAbility是EMBEDDED_UI类型的ExtensionAbility组件，提供了跨进程界面嵌入的能力。
EmbeddedUIExtensionAbility需要和EmbeddedComponent一起配合使用，开发者可以在UIAbility的页面中通过EmbeddedComponent嵌入本应用的EmbeddedUIExtensionAbility提供的UI。EmbeddedUIExtensionAbility会在独立于UIAbility的进程中运行，完成其页面的布局和渲染。通常用于有进程隔离诉求的模块化开发场景。
 当前EmbeddedUIExtensionAbility和EmbeddedComponent仅支持在拥有多进程配置的设备上使用。 EmbeddedComponent只能在UIAbility中使用，且被拉起的EmbeddedUIExtensionAbility需与UIAbility属于同一应用。 
EmbeddedUIExtensionAbility通过UIExtensionContext和UIExtensionContentSession提供相关能力。本文描述中称被启动的EmbeddedUIExtensionAbility为提供方，称启动EmbeddedUIExtensionAbility的EmbeddedComponent组件为使用方。
开发EmbeddedUIExtensionAbility提供方
[h2]生命周期
EmbeddedUIExtensionAbility提供了onCreate、onSessionCreate、onSessionDestroy、onForeground、onBackground和onDestroy生命周期回调，根据需要重写对应的回调方法。
 onCreate：当EmbeddedUIExtensionAbility创建时回调，执行初始化业务逻辑操作。 onSessionCreate：当EmbeddedUIExtensionAbility界面内容对象创建后调用。 onSessionDestroy：当EmbeddedUIExtensionAbility界面内容对象销毁后调用。 onForeground：当EmbeddedUIExtensionAbility从后台转到前台时触发。 onBackground：当EmbeddedUIExtensionAbility从前台转到后台时触发。 onDestroy：当EmbeddedUIExtensionAbility销毁时回调，可以执行资源清理等操作。 
[h2]开发步骤
开发者在实现一个EmbeddedUIExtensionAbility提供方时，需要在DevEco Studio工程中手动新建一个EmbeddedUIExtensionAbility，具体步骤如下。
 在工程Module对应的ets目录下，右键选择“New > Directory”，新建一个目录并命名为EmbeddedUIExtAbility。 在EmbeddedUIExtAbility目录，右键选择“New > File”，新建一个.ets文件并命名为EmbeddedUIExtAbility.ets。 打开EmbeddedUIExtAbility.ets文件，导入EmbeddedUIExtensionAbility的依赖包，自定义类继承EmbeddedUIExtensionAbility并实现onCreate、onSessionCreate、onSessionDestroy、onForeground、onBackground和onDestroy生命周期回调。 import { EmbeddedUIExtensionAbility, UIExtensionContentSession, Want } from '@kit.AbilityKit';\n\nconst TAG: string = '[ExampleEmbeddedAbility]'\n\nexport default class ExampleEmbeddedAbility extends EmbeddedUIExtensionAbility {\n  onCreate() {\n    console.log(TAG, `onCreate`);\n  }\n\n  onForeground() {\n    console.log(TAG, `onForeground`);\n  }\n\n  onBackground() {\n    console.log(TAG, `onBackground`);\n  }\n\n  onDestroy() {\n    console.log(TAG, `onDestroy`);\n  }\n\n  onSessionCreate(want: Want, session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionCreate, want: ${JSON.stringify(want)}`);\n    let param: Record<string, UIExtensionContentSession> = {\n      'session': session\n    };\n    let storage: LocalStorage = new LocalStorage(param);\n    session.loadContent('pages/extension', storage);\n  }\n\n  onSessionDestroy(session: UIExtensionContentSession) {\n    console.log(TAG, `onSessionDestroy`);\n  }\n} EmbeddedUIExtensionAbility的onSessionCreate中加载了入口页面文件pages/extension.ets内容如下： import { UIExtensionContentSession } from '@kit.AbilityKit';\n\nlet storage = LocalStorage.getShared()\n\n@Entry(storage)\n@Component\nstruct Extension {\n  @State message: string = 'EmbeddedUIExtensionAbility Index';\n  private session: UIExtensionContentSession | undefined = storage.get<UIExtensionContentSession>('session');\n\n  build() {\n    Column() {\n      Text(this.message)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n      Button(\"terminateSelfWithResult\").fontSize(20).onClick(() => {\n        this.session?.terminateSelfWithResult({\n          resultCode: 1,\n          want: {\n            bundleName: \"com.example.embeddeddemo\",\n            abilityName: \"ExampleEmbeddedAbility\",\n          }});\n      })\n    }.width('100%').height('100%')\n  }\n} 在工程Module对应的module.json5配置文件中注册EmbeddedUIExtensionAbility，type标签需要设置为“embeddedUI”，srcEntry标签表示当前EmbeddedUIExtensionAbility组件所对应的代码路径。 {\n  \"module\": {\n    \"extensionAbilities\": [\n      {\n        \"name\": \"EmbeddedUIExtAbility\",\n        \"icon\": \"$media:icon\",\n        \"description\": \"EmbeddedUIExtAbility\",\n        \"type\": \"embeddedUI\",\n        \"srcEntry\": \"./ets/EmbeddedUIExtAbility/EmbeddedUIExtAbility.ets\"\n      },\n    ]\n  }\n} 
开发EmbeddedUIExtensionAbility使用方
开发者可以在UIAbility的页面中通过EmbeddedComponent容器加载自己应用内的EmbeddedUIExtensionAbility。此外，EmbeddedUIExtensionAbility在want.parameters中新增了两个字段ohos.extension.processMode.hostSpecified和ohos.extension.processMode.hostInstance。
 ohos.extension.processMode.hostSpecified控制非首次启动的EmbeddedUIExtensionAbility是否运行在同UIExtensionAbility的进程中，参数是进程名称。例如，\"ohos.extension.processMode.hostSpecified\"： \"com.ohos.inentexecutedemo:share\"。 ohos.extension.processMode.hostInstance控制启动的EmbeddedUIExtensionAbility是否按照独立进程启动，传入false时，按照UIExtensionAbility的进程模型启动，入参true的时候，不管被拉起的UIExtensionAbility配置的是什么进程模型，都会新增一个进程，例如，\"ohos.extension.processMode.hostInstance\": \"true\"。 
ohos.extension.processMode.hostSpecified和ohos.extension.processMode.hostInstance同时配置时，hostSpecified优先，会运行在指定的进程中。
如在首页文件：pages/Index.ets中添加如下内容：
import { Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Message: '\n  private want: Want = {\n    bundleName: \"com.example.embeddeddemo\",\n    abilityName: \"EmbeddedUIExtAbility\",\n    parameters: {\n      'ohos.extension.processMode.hostInstance': 'true'\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message).fontSize(30)\n        EmbeddedComponent(this.want, EmbeddedType.EMBEDDED_UI_EXTENSION)\n          .width('100%')\n          .height('90%')\n          .onTerminated((info: TerminationInfo) => {\n            this.message = 'Terminarion: code = ' + info.code + ', want = ' + JSON.stringify(info.want);\n          })\n          .onError((error: BusinessError) => {\n            this.message = 'Error: code = ' + error.code;\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
