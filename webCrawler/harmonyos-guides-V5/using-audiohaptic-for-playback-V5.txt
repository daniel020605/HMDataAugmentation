使用AudioHaptic开发音振协同播放功能
AudioHaptic11+提供音频与振动协同播放及管理的方法，适用于需要在播放音频时同步发起振动的场景，如来电铃声随振、键盘按键反馈、消息通知反馈等。
开发指导
使用AudioHaptic播放音频并同步开启振动，涉及到音频及振动资源的管理、音频时延模式及音频流使用类型的配置、音振播放器的创建及管理等。本开发指导将以一次音振协同播放的过程为例，向开发者讲解如何使用AudioHaptic进行音振协同播放，建议配合AudioHaptic的API说明阅读。
[h2]权限申请
如果应用创建的AudioHapticPlayer需要触发振动，则需要校验应用是否拥有该权限：ohos.permission.VIBRATE。
 声明权限。 向用户申请授权。 
[h2]开发步骤及注意事项
 获取音振管理器实例，并注册音频及振动资源，资源支持情况可以查看AudioHapticManager。 import { audio, audioHaptic } from '@kit.AudioKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet audioHapticManagerInstance: audioHaptic.AudioHapticManager = audioHaptic.getAudioHapticManager();\n\nlet audioUri = 'data/audioTest.wav'; // 需更改为目标音频资源的Uri\nlet hapticUri = 'data/hapticTest.json'; // 需更改为目标振动资源的Uri\nlet id = 0;\n\naudioHapticManagerInstance.registerSource(audioUri, hapticUri).then((value: number) => {\n  console.info(`Promise returned to indicate that the source id of the registerd source ${value}.`);\n  id = value;\n}).catch ((err: BusinessError) => {\n  console.error(`Failed to register source ${err}`);\n}); 设置音振播放器参数，各参数作用可以查看AudioHapticManager。 let latencyMode: audioHaptic.AudioLatencyMode = audioHaptic.AudioLatencyMode.AUDIO_LATENCY_MODE_FAST;\naudioHapticManagerInstance.setAudioLatencyMode(id, latencyMode);\n\nlet usage: audio.StreamUsage = audio.StreamUsage.STREAM_USAGE_NOTIFICATION;\naudioHapticManagerInstance.setStreamUsage(id, usage); 创建AudioHapticPlayer实例。 let options: audioHaptic.AudioHapticPlayerOptions = {muteAudio: false, muteHaptics: false};\nlet audioHapticPlayer: audioHaptic.AudioHapticPlayer | undefined = undefined;\n\naudioHapticManagerInstance.createPlayer(id, options).then((value: audioHaptic.AudioHapticPlayer) => {\n  console.info(`Promise returned to indicate that the audio haptic player instance.`);\n  audioHapticPlayer = value;\n}).catch ((err: BusinessError) => {\n  console.error(`Failed to create player ${err}`);\n});\nconsole.info(`Create the audio haptic player successfully.`); 调用start()方法，开启音频播放并同步开启振动。 audioHapticPlayer.start().then(() => {\n  console.info(`Promise returned to indicate that start playing successfully.`);\n}).catch ((err: BusinessError) => {\n  console.error(`Failed to start playing. ${err}`);\n}); 调用stop()方法，停止音频播放并同步停止振动。 audioHapticPlayer.stop().then(() => {\n  console.info(`Promise returned to indicate that stop playing successfully.`);\n}).catch ((err: BusinessError) => {\n  console.error(`Failed to stop playing. ${err}`);\n}); 释放AudioHapticPlayer实例。 audioHapticPlayer.release().then(() => {\n  console.info(`Promise returned to indicate that release the audio haptic player successfully.`);\n}).catch ((err: BusinessError) => {\n  console.error(`Failed to release the audio haptic player. ${err}`);\n}); 将已注册的音频及振动资源移除注册 audioHapticManagerInstance.unregisterSource(id).then(() => {\n  console.info(`Promise returned to indicate that unregister source successfully`);\n}).catch ((err: BusinessError) => {\n  console.error(`Failed to unregistere source ${err}`);\n}); 
