使用JSVM-API接口进行JSON操作
简介
使用JSVM-API接口对JSON数据操作时，相关接口可以在JSVM模块中直接操作和处理JSON格式的数据。
基本概念
JSON（ JavaScript Object Notation）：是一种常见的数据交换格式，可用于实现前后端之间的数据传递、存储和交流，并且可以与多种编程语言进行交互，在JavaScript中被广泛应用于数据处理。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++相关代码进行展示。
[h2]OH_JSVM_JsonParse && OH_JSVM_JsonStringify
对JSON对象进行解析操作，并输出解析结果的有效值。
cpp部分代码
// hello.cpp\n#include <string>\n\n// 待执行的js代码\nstatic const char *STR_TASK = R\"JS(jsonParseNumber();jsonParseObject();)JS\";\n\n// 解析JSON数字\nstatic JSVM_Value JsonParseNumber(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 设置要解析的JSON数字\n    std::string strNumber = \"10.555\";\n    JSVM_Value jsonString;\n    JSVM_CALL(OH_JSVM_CreateStringUtf8(env, strNumber.c_str(), strNumber.size(), &jsonString));\n    JSVM_Value jsonObject;\n    // 调用OH_JSVM_JsonParse函数解析JSON数字，并将结果存储在JSON对象中\n    JSVM_CALL(OH_JSVM_JsonParse(env, jsonString, &jsonObject));\n    double number;\n    JSVM_CALL(OH_JSVM_GetValueDouble(env, jsonObject, &number));\n    OH_LOG_INFO(LOG_APP, \"Test JSVM jsonParseNumber: %{public}f\", number);\n    return nullptr;\n}\n\n// 解析JSON字符串中的对象\nstatic JSVM_Value JsonParseObject(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 设置要解析的JSON对象字符串\n    std::string strObject = \"{\\\"first\\\": \\\"one\\\", \\\"second\\\": \\\"two\\\", \\\"third\\\": \\\"three\\\"}\";\n    JSVM_Value strJson;\n    JSVM_CALL(OH_JSVM_CreateStringUtf8(env, strObject.c_str(), strObject.size(), &strJson));\n    JSVM_Value jsonObject;\n    // 调用OH_JSVM_JsonParse函数解析JSON对象字符串，并将结果存储在JSON对象中\n    JSVM_CALL(OH_JSVM_JsonParse(env, strJson, &jsonObject));\n    JSVM_Value jsonString;\n    // 调用OH_JSVM_JsonStringify函数将对象转换为字符串格式，并将结果存储在JSVM字符串对象中\n    JSVM_CALL(OH_JSVM_JsonStringify(env, jsonObject, &jsonString));\n    size_t totalLen = 0;\n    JSVM_CALL(OH_JSVM_GetValueStringUtf8(env, jsonString, nullptr, 0, &totalLen));\n    size_t needLen = totalLen + 1;\n    char* buff = new char[needLen];\n    JSVM_CALL(OH_JSVM_GetValueStringUtf8(env, jsonString, buff, needLen, &totalLen));\n    OH_LOG_INFO(LOG_APP, \"Test JSVM jsonParseNumber: %{public}s\", buff);\n    delete[] buff;\n    return nullptr;\n}\n\n// JsonParse注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = JsonParseNumber},\n    {.data = nullptr, .callback = JsonParseObject},\n};\n\nstatic JSVM_CallbackStruct *method = param;\n\nJSVM_PropertyDescriptor descriptor[] = {\n    {\"jsonParseNumber\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n    {\"jsonParseObject\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};
预期结果
Test JSVM jsonParseNumber: 10.555000
Test JSVM jsonParseNumber: {\"first\":\"one\",\"second\":\"two\",\"third\":\"three\"}
