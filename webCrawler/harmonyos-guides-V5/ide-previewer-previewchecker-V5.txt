PreviewChecker检测规则
DevEco Studio启动预览时将执行PreviewChecker，检测通过后才可进行预览，以确保在使用预览器前识别到已知的不支持预览的场景，若存在不支持预览的场景，将给出优化提示，以便于开发者根据提示的建议进行代码优化。
@previewer/mandatory-default-value-for-local-initialization
对于所有将被预览到的组件，如果组件的属性支持本地初始化，则都应当设置一个合法的不依赖运行时的默认值，以确保异常调用到该组件时，即使入参不完整，也能正常运行渲染。
反例
@Entry\n@Component\nstruct Index {\n  message?: string;\n  @BuilderParam myBuilder: () => void;\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n        this.myBuilder()\n      }\n    }\n  }\n}
正例
@Builder function MyBuilderFunction(): void {}\n\n@Entry\n@Component\nstruct Index {\n  message?: string = 'message';\n  @Provide messageA: string = 'messageA';\n  @StorageLink('varA') varA: number = 2;\n  @StorageProp('languageCode') lang: string = 'en';\n  @LocalStorageLink('PropA') storageLink1: number = 1;\n  @LocalStorageProp('PropB') storageLink2: number = 2;\n  @BuilderParam myBuilder: () => void = MyBuilderFunction;\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n        this.myBuilder()\n      }\n    }\n  }\n}
@previewer/no-unallowed-decorator-on-root-component
对于@Entry组件，不允许使用@Consume、@Link、@ObjectLink、@Prop注解；对于@Preview组件，建议使用一个定义了完整的、合法的、不依赖运行时的默认值的父组件作为预览该组件的容器。
反例
@Preview\n@Component\nstruct LinkSample {\n  @Link message: string;\n\n  build() {\n    Row() {\n      Text(this.message)\n    }\n  }\n}
正例
@Entry\n@Component\nstruct LinkSampleContainer {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      LinkSample({message: this.message})\n    }\n  }\n}\n \n@Component\nstruct LinkSample {\n  @Link message: string;\n\n  build() {\n    Row() {\n      Text(this.message)\n    }\n  }\n}
@previewer/paired-use-of-consume-and-provide
如果缺少@Provide定义，@Consume组件在预览时将无法获取有效值，且@Consume不支持本地初始化。建议被@Consume修饰的组件的祖先组件上应当有对应的@Provide属性，并且该属性应当有合法的不依赖运行时的默认值。
反例
@Entry\n@Component\nstruct Parent {\n  build() {\n    Column() {\n      Child()\n    }\n  }\n}\n \n@Component\nstruct Child {\n  @Consume message: string;\n \n  build() {\n    Text(this.message)\n  }\n}
正例
@Entry\n@Component\nstruct Parent {\n  @Provide message: string = 'hello world';\n \n  build() {\n    Column() {\n      Child()\n    }\n  }\n}\n \n@Component\nstruct Child {\n  @Consume message: string;\n \n  build() {\n    Text(this.message)\n  }\n}
@previewer/no-page-method-on-preview-component
@Preview通常修饰在组件上，而非@Entry的页面入口。onPageShow、onPageHide、onBackPress仅在@Entry组件上生效。因此禁止在非路由组件上实例化onPageShow等页面级方法。
反例
@Preview\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  onPageShow(): void {}\n  onPageHide(): void {}\n  onBackPress(): void {}\n\n  build() {\n    Column() {\n      Text(this.message)\n    }\n  }\n}
正例
@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  onPageShow(): void {}\n  onPageHide(): void {}\n  onBackPress(): void {}\n\n  build() {\n    Column() {\n      Text(this.message)\n    }\n  }\n}
@previewer/no-page-import-unmocked-hsp
由于能力缺失，预览器无法确保HSP是可以正常运行的。界面代码调用HSP可能会在预览运行时无法按预期执行，未正确初始化的接口调用可能会导致运行异常，从而影响界面渲染结果。建议待预览的组件及其依赖的组件避免引用HSP，或为该HSP设置Mock实现。
反例
import { add } from 'library'; // 该模块未配置自定义mock。\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Text(this.message)\n        .onClick(() => add(1, 2))\n    }\n  }\n}
正例
import { add } from 'library'; // 该模块已配置自定义mock，配置方法见下文。\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Text(this.message)\n        .onClick(() => add(1, 2))\n    }\n  }\n}
自定义mock配置：
// src/mock/mock-config.json5\n{\n  \"library\": {\n    \"source\": \"src/mock/myhsp.mock.ets\"\n  },\n}
// src/mock/myhsp.mock.ets\nexport function add(a: number, b: number): number {\n  return a + b;\n}
