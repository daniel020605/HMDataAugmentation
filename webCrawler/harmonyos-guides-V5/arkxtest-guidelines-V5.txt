自动化测试框架使用指导
概述
自动化测试框架arkxtest，作为工具集的重要组成部分，支持JS/TS语言的单元测试框架(JsUnit)及UI测试框架(UiTest)。
JsUnit提供单元测试用例执行能力，提供用例编写基础接口，生成对应报告，用于测试系统或应用接口。
UiTest通过简洁易用的API提供查找和操作界面控件能力，支持用户开发基于界面操作的自动化测试脚本。
本指南介绍了测试框架的主要功能、实现原理、环境准备，以及测试脚本编写和执行方法。同时，以shell命令方式，对外提供了获取截屏、控件树、录制用户操作、便捷注入UI模拟操作等能力，助力开发者更灵活方便测试和验证。
实现原理
测试框架分为单元测试框架和UI测试框架。
单元测试框架是测试框架的基础底座，提供了最基本的用例识别、调度、执行及结果汇总的能力。
UI测试框架主要对外提供了UiTest API供开发人员在对应测试场景调用，而其脚本的运行基础仍是单元测试框架。
[h2]单元测试框架
 图1.单元测试框架主要功能
 图2.脚本基础流程运行图
[h2]UI测试框架
 图3.UI测试框架主要功能
基于ArkTS编写和执行测试
[h2]搭建环境
DevEco Studio可参考其官网介绍进行下载，并进行相关的配置动作。
[h2]新建和编写测试脚本
新建测试脚本
在DevEco Studio中新建应用开发工程，其中ohosTest和test目录均为测试脚本所在的目录，API10及以上版本支持创建Instrument Test和Local Test。
Instrument Test：测试用例存放在ohosTest测试目录下，需要运行在设备或模拟器上，支持单元测试和UI测试。 Local Test：测试用例存放在test测试目录下，不需要运行在设备或模拟器上，支持单元测试。 
Instrument Test和Local Test创建的具体操作，请参考测试框架。
编写单元测试脚本
本章节主要描述单元测试框架支持能力，以及能力的使用方法, 具体请参考单元测试框架功能特性。
在单元测试框架，测试脚本需要包含如下基本元素:
1、依赖导包，以便使用依赖的测试接口。
2、测试代码编写，主要编写测试代码的相关逻辑，如接口调用等。
3、断言接口调用，设置测试代码中的检查点，如无检查点，则不可认为一个完整的测试脚本。
如下示例代码实现的场景是：启动测试页面，检查设备当前显示的页面是否为预期页面。
import { describe, it, expect } from '@ohos/hypium';\nimport { abilityDelegatorRegistry } from '@kit.TestKit';\nimport { UIAbility, Want } from '@kit.AbilityKit';\n\nconst delegator = abilityDelegatorRegistry.getAbilityDelegator()\nconst bundleName = abilityDelegatorRegistry.getArguments().bundleName;\nfunction sleep(time: number) {\n  return new Promise<void>((resolve: Function) => setTimeout(resolve, time));\n}\nexport default function abilityTest() {\n  describe('ActsAbilityTest', () =>{\n    it('testUiExample',0, async (done: Function) => {\n      console.info(\"uitest: TestUiExample begin\");\n      //start tested ability\n      const want: Want = {\n        bundleName: bundleName,\n        abilityName: 'EntryAbility'\n      }\n      await delegator.startAbility(want);\n      await sleep(1000);\n      //check top display ability\n      const ability: UIAbility = await delegator.getCurrentTopAbility();\n      console.info(\"get top ability\");\n      expect(ability.context.abilityInfo.name).assertEqual('EntryAbility');\n      done();\n    })\n  })\n}
编写UI测试脚本
本章节主要介绍UI测试框架支持能力，以及对应能力API的使用方法。
UI测试基于单元测试，UI测试脚本在单元测试脚本上增加了对UiTest接口，具体请参考API文档。
如下的示例代码是在上面的单元测试脚本基础上增量编写，实现的场景是：在启动的应用页面上进行点击操作，然后检测当前页面变化是否为预期变化。
编写Index.ets页面代码， 作为被测示例demo。
@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World'\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        Text(\"Next\")\n          .fontSize(50)\n          .margin({top:20})\n          .fontWeight(FontWeight.Bold)\n        Text(\"after click\")\n          .fontSize(50)\n          .margin({top:20})\n          .fontWeight(FontWeight.Bold)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
在ohosTest > ets > test文件夹下.test.ets文件中编写具体测试代码。
import { describe, it, expect } from '@ohos/hypium';\n// 导入测试依赖kit\nimport { abilityDelegatorRegistry, Driver, ON } from '@kit.TestKit';\nimport { UIAbility, Want } from '@kit.AbilityKit';\n\nconst delegator: abilityDelegatorRegistry.AbilityDelegator = abilityDelegatorRegistry.getAbilityDelegator()\nconst bundleName = abilityDelegatorRegistry.getArguments().bundleName;\nfunction sleep(time: number) {\n  return new Promise<void>((resolve: Function) => setTimeout(resolve, time));\n}\nexport default function abilityTest() {\n  describe('ActsAbilityTest', () => {\n     it('testUiExample',0, async (done: Function) => {\n        console.info(\"uitest: TestUiExample begin\");\n        //start tested ability\n        const want: Want = {\n           bundleName: bundleName,\n           abilityName: 'EntryAbility'\n        }\n        await delegator.startAbility(want);\n        await sleep(1000);\n        //check top display ability\n        const ability: UIAbility = await delegator.getCurrentTopAbility();\n        console.info(\"get top ability\");\n        expect(ability.context.abilityInfo.name).assertEqual('EntryAbility');\n        //ui test code\n        //init driver\n        const driver = Driver.create();\n        await driver.delayMs(1000);\n        //find button on text 'Next'\n        const button = await driver.findComponent(ON.text('Next'));\n        //click button\n        await button.click();\n        await driver.delayMs(1000);\n        //check text\n        await driver.assertComponentExist(ON.text('after click'));\n        await driver.pressBack();\n        done();\n     })\n  })\n}
[h2]执行测试脚本
在DevEco Studio执行
脚本执行需要连接硬件设备。通过点击按钮执行，当前支持以下执行方式：
1、测试包级别执行，即执行测试包内的全部用例。
2、测试套级别执行，即执行describe方法中定义的全部测试用例。
3、测试方法级别执行，即执行指定it方法也就是单条测试用例。
查看测试结果
测试执行完毕后可直接在DevEco Studio中查看测试结果，如下图示例所示：
查看测试用例覆盖率
执行完测试用例后可以查看测试用例覆盖率，具体操作请参考代码测试下各章节内的覆盖率统计模式。
在CMD执行
脚本执行需要连接硬件设备，将应用测试包安装到测试设备上，在cmd窗口中执行aa命令，完成对用例测试。
使用cmd的方式，需要配置好hdc相关的环境变量。
aa test命令执行配置参数
框架当前支持多种用例执行方式，通过上表中的-s参数后的配置键值对参数传入触发，如下表所示。
在cmd窗口执行test命令
参数配置和命令均是基于Stage模型。
示例代码1：执行所有测试用例。
 hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner
示例代码2：执行指定的describe测试套用例，指定多个需用逗号隔开。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s class s1,s2
示例代码3：执行指定测试套中指定的用例，指定多个需用逗号隔开。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s class testStop#stop_1,testStop1#stop_0
示例代码4：执行指定除配置以外的所有的用例，设置不执行多个测试套需用逗号隔开。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s notClass testStop
示例代码5：执行指定it名称的所有用例，指定多个需用逗号隔开。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s itName stop_0
示例代码6：用例执行超时时长配置。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s timeout 15000
示例代码7：用例以breakOnError模式执行用例。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s breakOnError true
示例代码8：执行测试类型匹配的测试用例。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s testType function
示例代码9：执行测试级别匹配的测试用例。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s level 0
示例代码10：执行测试规模匹配的测试用例。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s size small
示例代码11：执行测试用例指定次数。
  hdc shell aa test -b xxx -m xxx -s unittest OpenHarmonyTestRunner -s stress 1000
查看测试结果
cmd模式执行过程,会打印如下相关日志信息。
 OHOS_REPORT_STATUS: class=testStop\n OHOS_REPORT_STATUS: current=1\n OHOS_REPORT_STATUS: id=JS\n OHOS_REPORT_STATUS: numtests=447\n OHOS_REPORT_STATUS: stream=\n OHOS_REPORT_STATUS: test=stop_0\n OHOS_REPORT_STATUS_CODE: 1\n\n OHOS_REPORT_STATUS: class=testStop\n OHOS_REPORT_STATUS: current=1\n OHOS_REPORT_STATUS: id=JS\n OHOS_REPORT_STATUS: numtests=447\n OHOS_REPORT_STATUS: stream=\n OHOS_REPORT_STATUS: test=stop_0\n OHOS_REPORT_STATUS_CODE: 0\n OHOS_REPORT_STATUS: consuming=4
cmd执行完成后,会打印如下相关日志信息。
 OHOS_REPORT_RESULT: stream=Tests run: 447, Failure: 0, Error: 1, Pass: 201, Ignore: 245\n OHOS_REPORT_CODE: 0\n\n OHOS_REPORT_RESULT: breakOnError model, Stopping whole test suite if one specific test case failed or error\n OHOS_REPORT_STATUS: taskconsuming=16029
当处于breakOnError模式，用例发生错误时,注意查看Ignore以及中断说明。
基于shell命令测试
在开发过程中，若需要快速进行截屏、 录屏、注入UI模拟操作、获取控件树等操作，可以使用shell命令，更方便完成相应测试。
使用cmd的方式，需要配置好hdc相关的环境变量。
命令列表
截屏。非必填。
指定存储路径和文件名, 只支持存放在/data/local/tmp/下。
默认存储路径：/data/local/tmp，文件名：时间戳 + .png。
支持在daemon运行时执行获取控件树。
 -p ：指定存储路径和文件名, 只支持存放在/data/local/tmp/下。默认存储路径：/data/local/tmp，文件名：时间戳 + .json。
 -i ：不过滤不可见控件,也不做窗口合并。
 -a ：保存 BackgroundColor、 Content、FontColor、FontSize、extraAttrs 属性数据。
 默认 ：不保存上述属性数据。
 -a和-i 不可同时使用。
录制Ui操作。 
 record ：开始录制，将当前界面操作记录到/data/local/tmp/record.csv，结束录制操作使用Ctrl+C结束录制。 
 read ：读取并且打印录制数据。
各参数代表的含义请参考用户录制操作。
注入UI模拟操作。
各参数代表的含义请参考注入ui模拟操作。
[h2]截图使用示例
# 存储路径：/data/local/tmp，文件名：时间戳 + .png。\nhdc shell uitest screenCap\n# 指定存储路径和文件名,存放在/data/local/tmp/下。\nhdc shell uitest screenCap -p /data/local/tmp/1.png
[h2]获取控件树使用示例
hdc shell uitest dumpLayout -p /data/local/tmp/1.json
[h2]用户录制操作
录制过程中，需等待当前操作的识别结果在命令行输出后，再进行下一步操作。
# 将当前界面操作记录到/data/local/tmp/record.csv，结束录制操作使用Ctrl+C结束录制。\nhdc shell uitest uiRecord record\n# 读取并打印录制数据。\nhdc shell uitest uiRecord read
以下举例为：record数据中包含的字段及字段含义，仅供参考
{\n    \"ABILITY\": \"com.ohos.launcher.MainAbility\", // 前台应用界面\n    \"BUNDLE\": \"com.ohos.launcher\", // 操作应用\n    \"CENTER_X\": \"\", // 预留字段,暂未使用\n    \"CENTER_Y\": \"\", // 预留字段,暂未使用\n    \"EVENT_TYPE\": \"pointer\", //  \n    \"LENGTH\": \"0\", // 总体步长\n    \"OP_TYPE\": \"click\", //事件类型，当前支持点击、双击、长按、拖拽、滑动、抛滑动作录制\n    \"VELO\": \"0.000000\", // 离手速度\n    \"direction.X\": \"0.000000\",// 总体移动X方向\n    \"direction.Y\": \"0.000000\", // 总体移动Y方向\n    \"duration\": 33885000.0, // 手势操作持续时间\n    \"fingerList\": [{\n        \"LENGTH\": \"0\", // 总体步长\n        \"MAX_VEL\": \"40000\", // 最大速度\n        \"VELO\": \"0.000000\", // 离手速度\n        \"W1_BOUNDS\": \"{\"bottom\":361,\"left\":37,\"right\":118,\"top\":280}\", // 起点控件bounds\n        \"W1_HIER\": \"ROOT,3,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0\", // 起点控件hierarchy\n        \"W1_ID\": \"\", // 起点控件id\n        \"W1_Text\": \"\", // 起点控件text\n        \"W1_Type\": \"Image\", // 起点控件类型\n        \"W2_BOUNDS\": \"{\"bottom\":361,\"left\":37,\"right\":118,\"top\":280}\", // 终点控件bounds\n        \"W2_HIER\": \"ROOT,3,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0\", // 终点控件hierarchy\n        \"W2_ID\": \"\", // 终点控件id\n        \"W2_Text\": \"\", // 终点控件text\n        \"W2_Type\": \"Image\", // 终点控件类型\n        \"X2_POSI\": \"47\", // 终点X\n        \"X_POSI\": \"47\", // 起点X\n        \"Y2_POSI\": \"301\", // 终点Y\n        \"Y_POSI\": \"301\", // 起点Y\n        \"direction.X\": \"0.000000\", // x方向移动量\n        \"direction.Y\": \"0.000000\" // Y方向移动量\n    }],\n    \"fingerNumber\": \"1\" //手指数量\n}
[h2]注入UI模拟操作
uiInput click/doubleClick/longClick使用示例
# 执行单击事件。\nhdc shell uitest uiInput click 100 100\n\n# 执行双击事件。\nhdc shell uitest uiInput doubleClick 100 100\n\n# 执行长按事件。\nhdc shell uitest uiInput longClick 100 100
uiInput fling使用示例
滑动速度，单位: (px/s)，取值范围：200-40000。
 默认值: 600。
滑动步长。默认值: 滑动距离/50。
 为实现更好的模拟效果，推荐参数缺省/使用默认值。
# 执行快滑操作，stepLength_缺省。\nhdc shell uitest uiInput fling 10 10 200 200 500 
uiInput swipe/drag使用示例
滑动速度，单位: (px/s)，取值范围：200-40000。
 默认值: 600。
# 执行慢滑操作。\nhdc shell uitest uiInput swipe 10 10 200 200 500\n\n# 执行拖拽操作。 \nhdc shell uitest uiInput drag 10 10 100 100 500 
uiInput dircFling使用示例
滑动方向，取值范围：[0,1,2,3]，默认值为0。
 0代表向左滑动，1代表向右滑动，2代表向上滑动，3代表向下滑动。
滑动速度，单位: (px/s)，取值范围：200-40000。
 默认值: 600。
滑动步长。
 默认值: 滑动距离/50。为更好的模拟效果，推荐参数缺省/使用默认值。
# 执行左滑操作\nhdc shell uitest uiInput dircFling 0 500\n# 执行向右滑动操作\nhdc shell uitest uiInput dircFling 1 600\n# 执行向上滑动操作。\nhdc shell uitest uiInput dircFling 2 \n# 执行向下滑动操作。\nhdc shell uitest uiInput dircFling 3
uiInput inputText使用示例
# 执行输入框输入操作。\nhdc shell uitest uiInput inputText 100 100 hello 
uiInput keyEvent使用示例
实体按键对应ID，取值范围：KeyCode/Back/Home/Power。
当取Back/Home/Power时，不支持输入组合键。
最多支持传入是三个键值，键值的具体取值请参考KeyCode。
# 返回主页。\nhdc shell uitest uiInput keyEvent Home\n# 返回。\nhdc shell uitest uiInput keyEvent Back\n# 组合键粘贴。\nhdc shell uitest uiInput keyEvent 2072 2038
[h2]获取版本信息
hdc shell uitest --version
[h2]拉起uitest测试进程
hdc shell uitest start-daemon
设备需调成开发者模式。
仅元能力aa test拉起的测试hap才能调用Uitest的能力。
测试hap的APL等级级别需为system_basic、normal。
常见问题
[h2]单元测试用例常见问题
1、用例中增加的打印日志在用例结果之后才打印
问题描述
用例中增加的日志打印信息，没有在用例执行过程中出现，而是在用例执行结束之后才出现。
可能原因
此类情况只会存在于用例中有调用异步接口的情况，原则上用例中所有的日志信息均在用例执行结束之前打印。
解决方法
当被调用的异步接口多于一个时，建议将接口调用封装成Promise方式调用。
2、执行用例时报error：fail to start ability
问题描述
执行测试用例时候，用例执行失败，控制台返回错误：fail to start ability。
可能原因
测试包打包过程中出现问题，未将测试框架依赖文件打包在测试包中。
解决方法
检查测试包中是否包含OpenHarmonyTestRunner.abc文件，如没有则重新编译打包后再次执行测试。
3、执行用例时报用例超时错误
问题描述
用例执行结束，控制台提示execute time XXms错误，即用例执行超时。
可能原因
1.用例执行异步接口，但执行过程中没有执行到done函数，导致用例执行一直没有结束，直到超时结束。
2.用例调用函数耗时过长，超过用例执行设置的超时时间。
3.用例调用函数中断言失败，抛出失败异常，导致用例执行一直没有结束，直到超时结束。
解决方法
1.检查用例代码逻辑，确保即使断言失败场景认可走到done函数，保证用例执行结束。
2.可在IDE中Run/Debug Configurations中修改用例执行超时配置参数，避免用例执行超时。
3.检查用例代码逻辑，断言结果，确保断言Pass。
[h2]UI测试用例常见问题
1、失败日志有“Get windows failed/GetRootByWindow failed”错误信息
问题描述
UI测试用例执行失败，查看hilog日志发现日志中有“Get windows failed/GetRootByWindow failed”错误信息。
可能原因
系统ArkUI开关未开启，导致被测试界面控件树信息未生成。
解决方法
执行如下命令，并重启设备再次执行用例。
hdc shell param set persist.ace.testmode.enabled 1
2、失败日志有“uitest-api dose not allow calling concurrently”错误信息
问题描述
UI测试用例执行失败，查看hilog日志发现日志中有“uitest-api dose not allow calling concurrently”错误信息。
可能原因
1.用例中UI测试框架提供异步接口没有增加await语法糖调用。
2.多进程执行UI测试用例，导致拉起多个UITest进程，框架不支持多进程调用。
解决方法
1.检查用例实现，异步接口增加await语法糖调用。
2.避免多进程执行UI测试用例。
3、失败日志有“does not exist on current UI! Check if the UI has changed after you got the widget object”错误信息
问题描述 
UI测试用例执行失败，查看hilog日志发现日志中有“does not exist on current UI! Check if the UI has changed after you got the widget object”错误信息。
可能原因
在用例中代码查找到目标控件后，设备界面发生了变化，导致查找到的控件丢失，无法进行下一步的模拟操作。
解决方法
重新执行UI测试用例。
