点聚合
场景介绍
本章节将向您介绍如何根据地图数据实现聚合效果。
您可以通过比例尺缩放自适应聚合效果，聚合图标可点击。聚合支持功能：
 支持按距离聚合ClusterItem。 支持绘制聚合Overlay的默认图标。 支持绘制聚合Overlay的自定义图标。 支持监听聚合Overlay的点击事件。 支持添加单个ClusterItem到聚合Overlay中。 支持删除聚合Overlay。 支持移动地图时重绘聚合Overlay。 
接口说明
聚合功能主要由ClusterOverlayParams、addClusterOverlay、ClusterOverlay提供，更多接口及使用方法请参见接口文档。
接口名
描述
ClusterOverlayParams
点聚合参数。
addClusterOverlay(params: mapCommon.ClusterOverlayParams): Promise<ClusterOverlay>
聚合接口，支持节点聚合能力。
ClusterOverlay
点聚合，支持更新和查询相关属性。
开发步骤
 导入相关模块。import { map, mapCommon, MapComponent } from '@kit.MapKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit'; 新增聚合图层。@Entry\n@Component\nstruct ClusterOverlayDemo {\n  private mapOptions?: mapCommon.MapOptions;\n  private mapController?: map.MapComponentController;\n  private callback?: AsyncCallback<map.MapComponentController>;\n\n  aboutToAppear(): void {\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 31.98,\n          longitude: 118.7\n        },\n        zoom: 7\n      }\n    }\n\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n        // 生成待聚合点\n        let clusterItem1: mapCommon.ClusterItem = {\n          position: {\n            latitude: 31.98,\n            longitude: 118.7\n          }\n        };\n        let clusterItem2: mapCommon.ClusterItem = {\n          position: {\n            latitude: 32.99,\n            longitude: 118.9\n          }\n        };\n        let clusterItem3: mapCommon.ClusterItem = {\n          position: {\n            latitude: 31.5,\n            longitude: 118.7\n          }\n        };\n        let clusterItem4: mapCommon.ClusterItem = {\n          position: {\n            latitude: 30,\n            longitude: 118.7\n          }\n        };\n        let clusterItem5: mapCommon.ClusterItem = {\n          position: {\n            latitude: 29.98,\n            longitude: 117.7\n          }\n        };\n        let clusterItem6: mapCommon.ClusterItem = {\n          position: {\n            latitude: 31.98,\n            longitude: 120.7\n          }\n        };\n        let clusterItem7: mapCommon.ClusterItem = {\n          position: {\n            latitude: 25.98,\n            longitude: 119.7\n          }\n        };\n        let clusterItem8: mapCommon.ClusterItem = {\n          position: {\n            latitude: 30.98,\n            longitude: 110.7\n          }\n        };\n        let clusterItem9: mapCommon.ClusterItem = {\n          position: {\n            latitude: 30.98,\n            longitude: 115.7\n          }\n        };\n        let clusterItem10: mapCommon.ClusterItem = {\n          position: {\n            latitude: 28.98,\n            longitude: 122.7\n          }\n        };\n        let array: Array<mapCommon.ClusterItem> = [\n          clusterItem1,\n          clusterItem2,\n          clusterItem3,\n          clusterItem4,\n          clusterItem5,\n          clusterItem6,\n          clusterItem7,\n          clusterItem8,\n          clusterItem9,\n          clusterItem10\n        ]\n        for(let index = 0; index < 100; index++){\n          array.push(clusterItem1)\n        }\n        for(let index = 0; index < 10; index++){\n          array.push(clusterItem2)\n        }\n        // 生成聚合图层的入参 聚合distance设置为100vp\n        let clusterOverlayParams: mapCommon.ClusterOverlayParams = { distance: 100, clusterItems: array };\n        // 调用addClusterOverlay生成聚合图层\n        await this.mapController.addClusterOverlay(clusterOverlayParams);\n\n      }\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback })\n          .width('100%')\n          .height('100%');\n      }.width('100%')\n    }.height('100%')\n  }\n} 
