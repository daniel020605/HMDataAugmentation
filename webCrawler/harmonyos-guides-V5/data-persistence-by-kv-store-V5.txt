通过键值型数据库实现数据持久化
场景介绍
键值型数据库存储键值对形式的数据，当需要存储的数据没有复杂的关系模型，比如存储商品名称及对应价格、员工工号及今日是否已出勤等，由于数据复杂度低，更容易兼容不同数据库版本和设备类型，因此推荐使用键值型数据库持久化此类数据。
约束限制
 设备协同数据库，针对每条记录，Key的长度≤896 Byte，Value的长度<4 MB。 单版本数据库，针对每条记录，Key的长度≤1 KB，Value的长度<4 MB。 每个应用程序最多支持同时打开16个键值型分布式数据库。 键值型数据库事件回调方法中不允许进行阻塞操作，例如修改UI组件。 
接口说明
以下是键值型数据库持久化功能的相关接口，大部分为异步接口。异步接口均有callback和Promise两种返回形式，下表均以callback形式为例，更多接口及使用方式请见分布式键值数据库。
开发步骤
 若要使用键值型数据库，首先要获取一个KVManager实例，用于管理数据库对象。示例代码如下所示： Stage模型示例： // 导入模块\nimport { distributedKVStore } from '@kit.ArkData';\n\n// Stage模型\nimport { window } from '@kit.ArkUI';\nimport { UIAbility } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet kvManager: distributedKVStore.KVManager | undefined = undefined;\n\nexport default class EntryAbility extends UIAbility {\n  onCreate() {\n    let context = this.context;\n    const kvManagerConfig: distributedKVStore.KVManagerConfig = {\n      context: context,\n      bundleName: 'com.example.datamanagertest'\n    };\n    try {\n      // 创建KVManager实例\n      kvManager = distributedKVStore.createKVManager(kvManagerConfig);\n      console.info('Succeeded in creating KVManager.');\n      // 继续创建获取数据库\n    } catch (e) {\n      let error = e as BusinessError;\n      console.error(`Failed to create KVManager. Code:${error.code},message:${error.message}`);\n    }\n  }\n}\nif (kvManager !== undefined) {\n   kvManager = kvManager as distributedKVStore.KVManager;\n  //进行后续操作\n  //...\n} FA模型示例： // 导入模块\nimport { distributedKVStore } from '@kit.ArkData';\n\n// FA模型\nimport { featureAbility } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet kvManager: distributedKVStore.KVManager | undefined = undefined;\nlet context = featureAbility.getContext(); // 获取context\nconst kvManagerConfig: distributedKVStore.KVManagerConfig = {\n  context: context,\n  bundleName: 'com.example.datamanagertest'\n};\ntry {\n  kvManager = distributedKVStore.createKVManager(kvManagerConfig);\n  console.info('Succeeded in creating KVManager.');\n  // 继续创建获取数据库\n} catch (e) {\n   let error = e as BusinessError;\n   console.error(`Failed to create KVManager. Code:${error.code},message:${error.message}`);\n}\nif (kvManager !== undefined) {\n  kvManager = kvManager as distributedKVStore.KVManager;\n  //进行后续操作\n  //...\n} 创建并获取键值数据库。示例代码如下所示： let kvStore: distributedKVStore.SingleKVStore | undefined = undefined;\ntry {\n  const options: distributedKVStore.Options = {\n    createIfMissing: true,\n    encrypt: false,\n    backup: false,\n    autoSync: false,\n    // kvStoreType不填时，默认创建多设备协同数据库\n    kvStoreType: distributedKVStore.KVStoreType.SINGLE_VERSION,\n    // 多设备协同数据库：kvStoreType: distributedKVStore.KVStoreType.DEVICE_COLLABORATION,\n    securityLevel: distributedKVStore.SecurityLevel.S1\n  };\n  kvManager.getKVStore<distributedKVStore.SingleKVStore>('storeId', options, (err, store: distributedKVStore.SingleKVStore) => {\n    if (err) {\n      console.error(`Failed to get KVStore: Code:${err.code},message:${err.message}`);\n      return;\n    }\n    console.info('Succeeded in getting KVStore.');\n    kvStore = store;\n    // 请确保获取到键值数据库实例后，再进行相关数据操作\n  });\n} catch (e) {\n  let error = e as BusinessError;\n  console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n}\nif (kvStore !== undefined) {\n  kvStore = kvStore as distributedKVStore.SingleKVStore;\n    //进行后续操作\n    //...\n} 调用put()方法向键值数据库中插入数据。示例代码如下所示： const KEY_TEST_STRING_ELEMENT = 'key_test_string';\nconst VALUE_TEST_STRING_ELEMENT = 'value_test_string';\ntry {\n  kvStore.put(KEY_TEST_STRING_ELEMENT, VALUE_TEST_STRING_ELEMENT, (err) => {\n    if (err !== undefined) {\n      console.error(`Failed to put data. Code:${err.code},message:${err.message}`);\n      return;\n    }\n    console.info('Succeeded in putting data.');\n  });\n} catch (e) {\n  let error = e as BusinessError;\n  console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n}     当Key值存在时，put()方法会修改其值，否则新增一条数据。   调用get()方法获取指定键的值。示例代码如下所示： try {\n  kvStore.put(KEY_TEST_STRING_ELEMENT, VALUE_TEST_STRING_ELEMENT, (err) => {\n    if (err !== undefined) {\n      console.error(`Failed to put data. Code:${err.code},message:${err.message}`);\n      return;\n    }\n    console.info('Succeeded in putting data.');\n    kvStore = kvStore as distributedKVStore.SingleKVStore;\n    kvStore.get(KEY_TEST_STRING_ELEMENT, (err, data) => {\n      if (err != undefined) {\n        console.error(`Failed to get data. Code:${err.code},message:${err.message}`);\n        return;\n      }\n      console.info(`Succeeded in getting data. Data:${data}`);\n    });\n  });\n} catch (e) {\n  let error = e as BusinessError;\n  console.error(`Failed to get data. Code:${error.code},message:${error.message}`);\n} 调用delete()方法删除指定键值的数据。示例代码如下所示： try {\n  kvStore.put(KEY_TEST_STRING_ELEMENT, VALUE_TEST_STRING_ELEMENT, (err) => {\n    if (err !== undefined) {\n      console.error(`Failed to put data. Code:${err.code},message:${err.message}`);\n      return;\n    }\n    console.info('Succeeded in putting data.');\n    kvStore = kvStore as distributedKVStore.SingleKVStore;\n    kvStore.delete(KEY_TEST_STRING_ELEMENT, (err) => {\n      if (err !== undefined) {\n        console.error(`Failed to delete data. Code:${err.code},message:${err.message}`);\n        return;\n      }\n      console.info('Succeeded in deleting data.');\n    });\n  });\n} catch (e) {\n  let error = e as BusinessError;\n  console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n} 通过storeId的值关闭指定的分布式键值数据库。示例代码如下所示： try {\n  kvStore = undefined;\n  kvManager.closeKVStore('appId', 'storeId', (err: BusinessError)=> {\n    if (err) {\n      console.error(`Failed to close KVStore.code is ${err.code},message is ${err.message}`);\n      return;\n    }\n    console.info('Succeeded in closing KVStore');\n  });\n} catch (e) {\n  let error = e as BusinessError;\n  console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n} 通过storeId的值删除指定的分布式键值数据库。示例代码如下所示： try {\n  kvStore = undefined;\n  kvManager.deleteKVStore('appId', 'storeId', (err: BusinessError)=> {\n    if (err) {\n      console.error(`Failed to close KVStore.code is ${err.code},message is ${err.message}`);\n      return;\n    }\n    console.info('Succeeded in closing KVStore');\n  });\n} catch (e) {\n  let error = e as BusinessError;\n  console.error(`An unexpected error occurred. Code:${error.code},message:${error.message}`);\n} 
