拉起导航类应用（startAbilityByType）
本章节介绍如何拉起导航类应用扩展面板。
导航类应用扩展面板参数说明
startAbilityByType接口中type字段为navigation，支持路线规划、导航、位置搜索三种意图场景，对应的wantParam参数如下：
本文中的经纬度均采用GCJ-02坐标系统。
 路线规划场景     参数名 类型 必填 说明    sceneType number 否 意图场景，表明本次请求对应的操作意图。默认为1，路线规划场景填1或不填   originName string 否 起点名称   originLatitude number 否 起点纬度   originLongitude number 否 起点经度   originPoiIds Record<number, string> 否 起点POI ID列表，当前仅支持传入花瓣地图和高德地图的POI ID   destinationName string 否 终点名称   destinationLatitude number 是 终点纬度   destinationLongitude number 是 终点经度   destinationPoiIds Record<number, string> 否 终点POI ID列表，当前仅支持传入花瓣地图和高德地图的POI ID   vehicleType number 否 交通出行工具，取值：0-驾车，1-步行，2-骑行，3-公交；    导航场景     参数名 类型 必填 说明    sceneType number 是 意图场景，表明本次请求对应的操作意图。导航场景填2   destinationName string 否 终点名称   destinationLatitude number 是 终点纬度   destinationLongitude number 是 终点经度   destinationPoiIds Record<number, string> 否 终点POI ID列表，当前仅支持传入花瓣地图和高德地图的POI ID    位置搜索场景     参数名 类型 必填 说明    sceneType number 是 意图场景，表明本次请求对应的操作意图。位置搜索场景填3   destinationName string 是 地点名称    
拉起方开发步骤
 导入相关模块。 import { common } from '@kit.AbilityKit'; 构造接口参数并调用startAbilityByType接口。 终点POI ID列表（destinationPoiIds）和起点POI ID列表（originPoiIds）需开发者自行从各地图系统中获取，并按照对应关系传参。 let context = getContext(this) as common.UIAbilityContext;\nlet wantParam: Record<string, Object> = {\n  'sceneType': 1,\n  'destinationLatitude': 32.060844,\n  'destinationLongitude': 118.78315,\n  'destinationName': 'xx市xx路xx号',\n  'destinationPoiIds': {\n      1: '1111',  // key为1代表花瓣地图，value需为花瓣地图POI\n      2: '2222'   // key为2代表高德地图，value需为高德地图POI\n  } as Record<number, string>,\n  'originName': 'xx市xx公园',\n  'originLatitude': 31.060844,\n  'originLongitude': 120.78315,\n  'originPoiIds': {\n      1: '3333',  // key为1代表花瓣地图，value需为花瓣地图POI\n      2: '4444'   // key为2代表高德地图，value需为高德地图POI\n  } as Record<number, string>,\n  'vehicleType': 0\n};\nlet abilityStartCallback: common.AbilityStartCallback = {\n  onError: (code: number, name: string, message: string) => {\n    console.log(`onError code ${code} name: ${name} message: ${message}`);\n  },\n  onResult: (result)=>{\n    console.log(`onResult result: ${JSON.stringify(result)}`);\n  }\n}\n\ncontext.startAbilityByType(\"navigation\", wantParam, abilityStartCallback, \n    (err) => {\n        if (err) {\n            console.error(`startAbilityByType fail, err: ${JSON.stringify(err)}`);\n        } else {\n            console.log(`success`);\n        }\n}); 效果示例图：  
目标方开发步骤
 在module.json5中配置uris，步骤如下：  设置linkFeature属性以声明当前应用支持的特性功能，从而系统可以从设备已安装应用中找到当前支持该特性的应用，取值范围如下：              取值 含义    Navigation 声明应用支持导航功能   RoutePlan 声明应用支持路线规划功能   PlaceSearch 声明应用支持位置搜索功能    设置scheme、host、port、path/pathStartWith属性，与Want中URI相匹配，以便区分不同功能。  {\n  \"abilities\": [\n      {\n      \"skills\": [\n          {\n          \"uris\": [\n              {\n              \"scheme\": \"maps\", // 这里仅示意，应用需确保这里声明的的uri能被外部正常拉起\n              \"host\": \"navigation\",\n              \"path\": \"\",\n              \"linkFeature\": \"Navigation\" // 声明应用支持导航功能\n              },\n              {\n              \"scheme\": \"maps\", // 这里仅示意，应用需确保这里声明的的uri能被外部正常拉起\n              \"host\": \"routePlan\",\n              \"path\": \"\",\n              \"linkFeature\": \"RoutePlan\" // 声明应用支持路线规划功能\n              },\n              {\n              \"scheme\": \"maps\", // 这里仅示意，应用需确保这里声明的的uri能被外部正常拉起\n              \"host\": \"search\",\n              \"path\": \"\",\n              \"linkFeature\": \"PlaceSearch\" // 声明应用支持位置搜索功能\n              }\n          ]\n          }\n      ]\n      }\n  ]\n} 解析参数并做对应处理。 UIAbility.onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void 在参数want.uri中会携带目标方配置的linkFeature对应的uri。 在参数want.parameters中会携带Caller方传入的参数，不同场景参数如下所示。  路线规划场景     参数名 类型 必填 说明    originName string 否 起点名称   originLatitude number 否 起点纬度   originLongitude number 否 起点经度   originPoiId string 否 起点POI ID，当前仅支持花瓣地图和高德地图获取此参数   destinationName string 否 终点名称   destinationLatitude number 是 终点纬度   destinationLongitude number 是 终点经度   destinationPoiId string 否 终点POI ID，当前仅支持花瓣地图和高德地图获取此参数   vehicleType number 否 交通出行工具，取值：0-驾车，1-步行，2-骑行，3-公交；    导航场景     参数名 类型 必填 说明    destinationName string 否 终点名称   destinationLatitude number 是 终点纬度   destinationLongitude number 是 终点经度   destinationPoiId string 否 终点POI ID，当前仅支持花瓣地图和高德地图获取此参数    位置搜索场景     参数名 类型 必填 说明    destinationName string 是 地点名称     应用可根据linkFeature中定义的特性功能，比如路线规划、导航和位置搜索，结合接收到的uri和参数开发不同的样式页面。 
完整示例：
import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { window } from '@kit.ArkUI';\n\nconst TAG = 'EntryAbility'\n\nexport default class EntryAbility extends UIAbility {\n    windowStage: window.WindowStage | null = null;\n\n    uri?: string;\n    destinationLatitude?: number;\n    destinationLongitude?: number;\n    destinationName?: string;\n    originName?: string;\n    originLatitude?: number;\n    originLongitude?: number;\n    vehicleType?: number;\n    destinationPoiId?: string;\n    originPoiId?: string;\n\n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n        hilog.info(0x0000, TAG, `onCreate, want=${JSON.stringify(want)}`);\n        super.onCreate(want, launchParam);\n        this.parseWant(want);\n    }\n\n    onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n        hilog.info(0x0000, TAG, `onNewWant, want=${JSON.stringify(want)}`);\n        super.onNewWant(want, launchParam);\n        this.parseWant(want);\n        if (!this.windowStage) {\n            hilog.error(0x0000, TAG, 'windowStage is null');\n            this.context.terminateSelf();\n            return;\n        }\n        this.loadPage(this.windowStage);\n    }\n\n    private parseWant(want: Want): void {\n        this.uri = want.uri as string | undefined;\n        this.destinationLatitude = want.parameters?.destinationLatitude as number | undefined;\n        this.destinationLongitude = want.parameters?.destinationLongitude as number | undefined;\n        this.destinationName = want.parameters?.destinationName as string | undefined;\n        this.originName = want.parameters?.originName as string | undefined;\n        this.originLatitude = want.parameters?.originLatitude as number | undefined;\n        this.originLongitude = want.parameters?.originLongitude as number | undefined;\n        this.vehicleType = want.parameters?.vehicleType as number | undefined;\n        this.destinationPoiId = want.parameters?.destinationPoiId as string | undefined;\n        this.originPoiId = want.parameters?.originPoiId as string | undefined;\n    }\n\n    private loadPage(windowStage: window.WindowStage): void {\n        hilog.info(0x0000, TAG, `loadPage, uri=${this.uri}`);\n        if (this.uri === 'maps://navigation') {\n            // 构建导航场景参数\n            const storage: LocalStorage = new LocalStorage({\n                \"destinationLatitude\": this.destinationLatitude,\n                \"destinationLongitude\": this.destinationLongitude,\n                \"destinationPoiId\": this.destinationPoiId\n            } as Record<string, Object>);\n            // 拉起导航页面\n            windowStage.loadContent('pages/NavigationPage', storage)\n        } else if (this.uri === 'maps://routePlan') {\n            // 构建路径规划场景参数\n            const storage: LocalStorage = new LocalStorage({\n                \"destinationLatitude\": this.destinationLatitude,\n                \"destinationLongitude\": this.destinationLongitude,\n                \"destinationName\": this.destinationName,\n                \"originName\": this.originName,\n                \"originLatitude\": this.originLatitude,\n                \"originLongitude\": this.originLongitude,\n                \"vehicleType\": this.vehicleType,\n                \"destinationPoiId\": this.destinationPoiId,\n                \"originPoiId\": this.originPoiId\n            } as Record<string, Object>);\n            // 拉起路径规划页面\n            windowStage.loadContent('pages/RoutePlanPage', storage)\n        }  else if (this.uri === 'maps://search') {\n            // 构建位置搜索场景参数\n            const storage: LocalStorage = new LocalStorage({\n                \"destinationName\": this.destinationName\n            } as Record<string, Object>);\n            // 拉起位置搜索页面\n            windowStage.loadContent('pages/PlaceSearchPage', storage)\n        } else {\n            // 默认拉起首页\n            windowStage.loadContent('pages/Index', (err) => {\n                if (err.code) {\n                    hilog.error(0x0000, TAG, 'Failed to load the content. Cause: %{public}s',\n                        JSON.stringify(err) ?? '');\n                    return;\n                }\n                hilog.info(0x0000, TAG, 'Succeeded in loading the content.');\n            });\n        }\n    }\n\n    onDestroy(): void {\n        hilog.info(0x0000, TAG, `onDestroy`);\n    }\n\n    onWindowStageCreate(windowStage: window.WindowStage): void {\n        hilog.info(0x0000, TAG, `onWindowStageCreate`);\n        this.windowStage = windowStage;\n        this.loadPage(this.windowStage);\n    }\n\n    onWindowStageDestroy(): void {\n        hilog.info(0x0000, TAG, '%{public}s', 'Ability onWindowStageDestroy');\n    }\n\n    onForeground(): void {\n        hilog.info(0x0000, TAG, '%{public}s', 'Ability onForeground');\n    }\n\n    onBackground(): void {\n        hilog.info(0x0000, TAG, '%{public}s', 'Ability onBackground');\n    }\n}
