通过字节数组生成码图
基本概念
码图生成能力支持将字节数组转换为自定义格式的码图。
场景介绍
码图生成能力支持将字节数组转换为自定义格式的码图。
例如：调用码图生成能力, 将字节数组转换成交通一卡通二维码使用。
约束与限制
只支持QR Code生成，根据纠错水平不同对生成参数有不同的要求，参数限制可见下表，具体接口参数限制信息请参见CreateOptions。
Scan Kit识别该码图内容显示内容为乱码，这种字节数组需要专门的解码器解析，例如地铁闸机。
纠错水平
参数内容限制
LEVEL_L
字节数组长度限制建议不超过2048。
LEVEL_M
字节数组长度限制建议不超过2048。
LEVEL_Q
字节数组长度限制建议不超过1536。
LEVEL_H
字节数组长度限制建议不超过1024。
生成码参数建议：
 码图颜色和背景建议使用默认颜色和背景：黑色码图、白色背景。如果码图颜色和背景对比度较小会影响识别率。 码图边距建议使用默认边距1，单位：px，取值范围：[1, 10]。 码图大小输入的width和height值相同且均大于等于200小于等于4096，单位：px，否则生成的码图过小会影响识别。 
业务流程
 用户向应用发起生成码请求后，传入需要生成的码的信息，包括码的类型、宽高等。 应用通过调用Scan Kit的createBarcode接口启动码图生成能力。 Scan Kit通过将字节数组转换为码图并返回给应用。 应用向用户返回生成码结果。 
接口说明
通过字节数组生成码图，以Promise形式生成码图。具体API说明详见接口文档。
接口名
接口描述
createBarcode(content: ArrayBuffer, options: CreateOptions): Promise<image.PixelMap>
码图生成接口，返回image.PixelMap类型的参数，可以使用Image组件渲染成图片。使用Promise异步回调返回生成的码图。
开发步骤
码图生成根据传参内容直接生成所需码图，需要传入固定参数和可选参数。
以下示例为调用码图生成能力的createBarcode接口实现码图生成。
 导入码图生成接口模块，该模块提供了码图生成的参数和方法，导入方法如下。// 导入码图生成需要的图片模块、错误码模块\nimport { scanCore, generateBarcode } from '@kit.ScanKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { buffer } from '@kit.ArkTS'; 调用码图生成能力的createBarcode接口实现码图生成。        通过Promise方式回调，获取生成的码图。const TAG: string = 'Create barcode';\n\n@Entry\n@Component\nstruct Index {\n  @State pixelMap: image.PixelMap | undefined = undefined\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Button('generateBarcode Promise').onClick(() => {\n        this.pixelMap = undefined;\n        let content: string =\n          '0177C10DD10F7768600202312110000063458FD14112345678FFFFD381012610b746365409210201b66636540ad0200020000000000110e617003201000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006645fbec664358ECF657CB40693c92da';\n        let contentBuffer: ArrayBuffer = buffer.from(content, 'hex').buffer; // 通过包含十六进制字符的字符串创建Buffer\n        let options: generateBarcode.CreateOptions = {\n          scanType: scanCore.ScanType.QR_CODE,\n          height: 400,\n          width: 400\n        }\n        try {\n          // 码图生成接口，成功返回PixelMap格式图片\n          generateBarcode.createBarcode(contentBuffer, options).then((pixelMap: image.PixelMap) => {\n            this.pixelMap = pixelMap;\n            hilog.info(0x0001, TAG, 'Succeeded in creating barCode.');\n          }).catch((error: BusinessError) => {\n            hilog.error(0x0001, TAG, `Failed to createBarCode. Code: ${error.code}, message: ${error.message}`);\n          })\n        } catch (error) {\n          hilog.error(0x0001, TAG,\n            `Failed to createBarcode by Promise with options. Code: ${error.code}, message: ${error.message}`);\n        }\n      })\n      // 获取生成码后显示\n      if (this.pixelMap) {\n        Image(this.pixelMap).width(300).height(300).objectFit(ImageFit.Contain)\n      }\n    }\n    .width('100%')\n    .height('100%')\n  }\n}  
模拟器开发
暂不支持模拟器使用，调用会返回错误信息“Emulator is not supported.”
