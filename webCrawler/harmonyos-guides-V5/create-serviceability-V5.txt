创建ServiceAbility
创建ServiceAbility。  通过DevEco Studio开发平台创建ServiceAbility时，DevEco Studio会默认生成onStart、onStop、onCommand方法，其他方法需要开发者自行实现，接口说明参见前述章节。开发者也可以添加其他Ability请求与ServiceAbility交互时的处理方法，示例如下： import { Want } from '@kit.AbilityKit';\nimport { rpc } from '@kit.IPCKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = '[Sample_FAModelAbilityDevelop]';\nconst domain: number = 0xFF00;\n\nclass FirstServiceAbilityStub extends rpc.RemoteObject {\n  constructor(des: Object) {\n    if (typeof des === 'string') {\n      super(des);\n    } else {\n      return;\n    }\n  }\n\n  onRemoteRequest(code: number, data: rpc.MessageParcel, reply: rpc.MessageParcel, option: rpc.MessageOption): boolean {\n    hilog.info(domain, TAG, 'ServiceAbility onRemoteRequest called');\n    if (code === 1) {\n      let string = data.readString();\n      hilog.info(domain, TAG, `ServiceAbility string=${string}`);\n      let result = Array.from(string).sort().join('');\n      hilog.info(domain, TAG, `ServiceAbility result=${result}`);\n      reply.writeString(result);\n    } else {\n      hilog.info(domain, TAG, 'ServiceAbility unknown request code');\n    }\n    return true;\n  }\n}\n\nclass ServiceAbility {\n  onStart(): void {\n    hilog.info(domain, TAG, 'ServiceAbility onStart');\n  }\n\n  onStop(): void {\n    hilog.info(domain, TAG, 'ServiceAbility onStop');\n  }\n\n  onCommand(want: Want, startId: number): void {\n    hilog.info(domain, TAG, 'ServiceAbility onCommand');\n  }\n\n  onConnect(want: Want): rpc.RemoteObject {\n    hilog.info(domain, TAG, 'ServiceAbility onDisconnect' + want);\n    return new FirstServiceAbilityStub('test');\n  }\n\n  onDisconnect(want: Want): void {\n    hilog.info(domain, TAG, 'ServiceAbility onDisconnect' + want);\n  }\n}\n\nexport default new ServiceAbility(); 注册ServiceAbility。  ServiceAbility需要在应用配置文件config.json中进行注册，注册类型type需要设置为service。\"visible\"属性表示ServiceAbility是否可以被其他应用调用，true表示可以被其他应用调用，false表示不能被其他应用调用（仅应用内可以调用）。若ServiceAbility需要被其他应用调用，注册ServiceAbility时需要设置\"visible\"为true，同时需要设置支持关联启动。ServiceAbility的启动规则详见组件启动规则章节。 {\n  ...\n  \"module\": {\n    ...\n    \"abilities\": [\n      ...\n      {\n        \"name\": \".ServiceAbility\",\n        \"srcLanguage\": \"ets\",\n        \"srcPath\": \"ServiceAbility\",\n        \"icon\": \"$media:icon\",\n        \"description\": \"$string:ServiceAbility_desc\",\n        \"type\": \"service\",\n        \"visible\": true\n      },\n      ...\n    ]\n    ...\n  }\n} 
