build-profile.json5
build-profile.json5文件分为工程级与模块级，其中buildOption在工程级文件和模块级文件均可配置，其中相同字段以模块级的字段为准，不同字段模块级的buildOption配置会继承工程级配置。
工程级
配置项
类型
是否必填
说明
app
object
是
编译配置信息。
signingConfigs
array
否
签名方案信息，可配置多个。
name
string
是
签名方案的名称。
material
object
是
签名方案相关材料，如密码、证书等，详情请参见表2。
type
string
否
签名类型：
 HarmonyOS OpenHarmony 
products
array
否
产品品类，可配置多个。如需配置多个，相关说明请参见配置多目标产物章节。
name
string
是
产品的名称，必须存在name为\"default\"的product。
signingConfig
string
否
产品的签名方案名称，即signingConfigs中配置的某个签名方案名称。
bundleName
string
否
产品的包名。
buildOption
object
否
产品的编译构建配置，详情请参见表3。
runtimeOS
string
否
产品的运行环境：
 HarmonyOS OpenHarmony 
arkTSVersion
string
否
ArkTS语法检查工具的版本号：1.0，1.1。
默认为当前ArkTS语法检查工具支持的最新版本。
仅API 11及以上版本工程支持。
compileSdkVersion
string/integer
否
标识编译应用/元服务所使用的SDK版本。
 运行环境是HarmonyOS时，字段类型为string，配置示例：4.1.0(11) 运行环境是OpenHarmony时，字段类型为integer，配置示例：11 
从DevEco Studio NEXT Developer Beta1（5.0.3.403）版本开始，该字段不需要显性配置，编译时默认使用配套的SDK版本。如果配置，只能配置为当前DevEco Studio配套的SDK版本，不允许配置为其他SDK版本。
compatibleSdkVersion
string/integer
否
标识应用/元服务运行所需兼容的最低SDK版本，应用/元服务不能安装在低于该版本的设备。
compatibleSdkVersionStage
string
否
用于控制不同beta版本的兼容，默认值为beta1。
配置betaX就能生成在对应betaX版本镜像上运行的应用，开发者无需升级配套版本镜像，但是无法使用高于betaX版本的特性，例如在API 12中beta3版本提供的sendable function和lazy import两个特性在配置beta2或beta1时无法正常使用。
targetSdkVersion
string/integer
否
标识应用/元服务运行所需目标SDK版本，是系统提供的前向兼容手段。如果新SDK版本中API行为发生变更，将应用/元服务安装到新系统后，可通过该字段提供向前兼容手段，在新系统版本保持老的API行为。如未配置，默认与compileSdkVersion保持一致。
bundleType
string
否
包的类型：
 app：应用 atomicService：元服务 shared：共享包 
label
string
否
应用/元服务名称。配置示例：\"$string:app_name\"。
配置products中的label、icon、versionCode、versionName、resource字段后，编译构建时将根据此处的配置替换 app.json5中的相关配置，常用于应用和元服务可分可合构建打包场景。
icon
string
否
应用图标。配置示例：\"$media:application_icon\"。
versionCode
integer
否
版本号。配置示例：1000000。
versionName
string
否
版本名称。配置示例：\"1.0.0\"。
resource
object
否
名称和图标对应的资源所在目录。详情请参见表4。
output
object
否
定制产品生成的应用包的配置，详情请参见表5 output。
vendor
string
否
供应商。
buildModeSet
array
否
构建模式合集，可配置多个。
name
string
是
构建模式名称。默认生成debug，release和test三个名称，支持开发者自定义，其中test模式仅在执行ohosTest测试套件时使用。
buildOption
object
否
构建模式使用的具体配置信息，详情请参见表3。关于buildOption的优先级请参考定制编译模式。
multiProjects
boolean
否
当前工程是否支持多工程构建：
 true：支持。 false（缺省默认值）：不支持。 
modules
array
是
工程中所包含模块的信息，包含工程中所有的模块。数组长度至少为1。
name
string
是
模块的名称。该名称需与module.json5文件中的module.name保持一致。
在FA模型中，对应的文件为config.json。
srcPath
string
是
模块的源码路径，为模块根目录相对工程根目录的相对路径，允许模块根目录不在当前工程下，详情请参考导入Module。
当前支持引用其他工程下的HAR和HSP模块。
targets
array
否
模块的target信息，用于定制多目标构建产物。
更多关于多目标构建产物的内容，请参见配置多目标产物章节。
name
string
是
target名称，在各个模块级build-profile.json5中的targets字段定义。HAR模块无需配置。
applyToProducts
array
否
target关联的product。HAR模块无需配置。
配置项
类型
是否必填
说明
storePassword
string
是
密钥库密码，以密文形式呈现。
通过File > Project Structure... > Project > Signing Configs界面，进行自动签名后，material节点中的各配置项会自动填充。
certpath
string
是
调试或发布证书文件地址，文件后缀为.cer。
keyAlias
string
是
密钥别名信息。
keyPassword
string
是
密钥密码，以密文形式呈现。
profile
string
是
调试或发布证书Profile文件地址，文件后缀为.p7b。
signAlg
string
是
密钥库signAlg参数。当前可配置值SHA256withECDSA。
storeFile
string
是
密钥库文件地址，文件后缀为.p12。
配置项
类型
是否必填
说明
packOptions
object
否
打包相关配置项。
buildAppSkipSignHap
boolean
否
是否跳过生成签名HAP：
 true：跳过，即不生成签名HAP。 false（缺省默认值）：不跳过，即生成签名HAP。 
编译构建APP时，无需生成签名HAP，可将此参数修改为true，从而提升编译构建性能。
debuggable
boolean
否
当前编译产物是否为可调试模式：
 true（缺省默认值）：可调试。 false：不可调试。 
当使用release的编译模式时，默认为false。工程级别buildOption配置会与模块级别的buildOption进行合并，具体合并规则请参考合并编译选项规则。
resOptions
object
否
资源编译配置项。
compression
object
否
对工程预置图片资源进行纹理压缩的编译配置参数。详情请参见表12 compression。
externalNativeOptions
object
否
Native编译配置项。
path
string
否
CMake构建脚本地址，即CMakeLists.txt文件地址。
abiFilters
array
否
HarmonyOS当前支持的ABI编译环境，包括：
 arm64-v8a x86_64 
如不配置该参数，编译时默认为arm64-v8a。
arguments
string/array
否
CMake编译参数。
cppFlags
string
否
C++编译器参数。
sourceOption
object
否
源码相关配置。使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理。
workers
array
否
指定使用node.js工作器的JS/TS源代码，源代码在构建过程中单独处理。
nativeLib
object
否
Native 库（.so）相关配置。
filter
object
否
Native 库（.so）文件的筛选选项。配置后优先级高于napiLibFilterOption。
excludes
array
否
根据正则表达式排除匹配到的.so文件，匹配到的so文件将不会被打包。
pickFirsts
array
否
按照.so文件的优先级顺序，打包最高优先级的.so文件。详情请参见关于库文件so的优先级。
pickLasts
array
否
按照.so文件的优先级顺序，打包最低优先级的.so文件。详情请参见关于库文件so的优先级。
enableOverride
boolean
否
是否允许当.so文件重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件：
 true：允许。 false（缺省默认值）：不允许。 
select
array
否
select提供native产物的精准选择能力，根据包名、版本、产物名称等选择或排除，select的优先级高于excludes、pickFirsts等配置项。详情请参见关于select的使用。
select/package
string
否
包名。
select/version
string
否
包版本。
select/include
array
否
选择打包的native产物。
select/exclude
array
否
排除的native产物。
debugSymbol
object
否
移除.so文件中的符号表、调试信息。
strip
boolean
否
是否移除.so文件中的符号表、调试信息。
 true（缺省默认值）：移除。 false：不移除。 
从DevEco Studio NEXT Developer Beta2（5.0.3.502）版本开始，缺省默认值由false改为true。
exclude
array
否
不对.so文件执行strip的正则表达式规则集。
headerPath
string/array
否
指向包含要导出到此模块的依赖项的标头的目录的路径。
collectAllLibs
boolean
否
对libs目录收集打包时，是否收集所有后缀的文件。
 true：不限制后缀，即收集所有文件（包括无后缀文件）。 false（缺省默认值）：限制后缀为.so，即只收集后缀为.so的文件。 
excludeFromHar
boolean
否
是否排除依赖HAR模块中的so，排除时，依赖HAR模块的so不会被打包到本模块产物中。
 true（缺省默认值）：排除。 false：不排除。 
仅针对HAR模块生效。
napiLibFilterOption
object
否
NAPI库（.so）文件的筛选选项。标记为废弃，不建议使用，推荐使用nativeLib/filter。
excludes
array
否
排除的.so文件。罗列的NAPI库将不会被打包。
pickFirsts
array
否
按照.so文件的优先级顺序，打包最高优先级的.so文件。
pickLasts
array
否
按照.so文件的优先级顺序，打包最低优先级的.so文件。
enableOverride
boolean
否
是否允许当.so文件重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件：
 true：允许。 false（缺省默认值）：不允许。 
arkOptions
object
否
ArkTS 编译配置。
apPath
string
否
API 11及以上版本不再支持，即该字段配置后不再生效。
应用热点信息文件路径。
buildProfileFields
object
否
用于ArkTS的构建配置。自定义类型，key可由数字、英文和下划线、中划线组成，value类型仅可以为string、number、boolean。
hostPGO
boolean
否
是否启用配置文件引导优化功能：
 true：启用。 false（缺省默认值）：不启用。 
从API 10开始废弃，由于partial模式可能存在兼容性问题，请使用Target AOT能力，不建议使用Host AOT。
types
array
否
自定义类型，可配置包名或d.ts/d.ets文件路径。
tscConfig
object
否
与编译TS语法相关的配置选项。
targetESVersion
string
否
指定TS语法编译产物的目标运行时EcmaScript版本，包括：
 ES2017 ES2021（缺省默认值）。 
strictMode
object
否
严格模式。
noExternalImportByPath
boolean
否
是否严格检查绝对路径导入方式和相对路径跨模块导入方式。
 true：严格检查。 false：不严格检查。 
从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，当工程级build-profile.json5中useNormalizedOHMUrl配置为true时，noExternalImportByPath缺省默认值为true；当useNormalizedOHMUrl配置为false时，noExternalImportByPath缺省默认值为false。
useNormalizedOHMUrl
boolean
否
是否使用标准化的OHMUrl（OHMUrl的定义参考以下说明）格式，标准化的OHMUrl统一了原有OHMUrl的格式。使用集成态HSP和字节码HAR需使用标准化的OHMUrl格式。
 true：使用标准化的OHMUrl格式。 false（缺省默认值）：不使用标准化的OHMUrl格式。 
 从API 12开始支持。 一个ets文件在编译后会成为安装包的一部分，这个ets文件对应的字节码称为一个字节码段，OHMUrl是用来定位一个字节码段的标识。 若工程引用了HAR/HSP，需确保工程的useNormalizedOHMUrl配置和HAR/HSP的useNormalizedOHMUrl配置保持一致，同时配置为true或false。 从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，当useNormalizedOHMUrl设置为true时，不允许通过相对路径跨模块或绝对路径导入文件，oh-package.json5中依赖的包使用的别名需要和依赖包的oh-package.json5的name保持一致，具体的适配指导请参考变更说明。 
caseSensitiveCheck
boolean
否
导入文件是否严格校验大小写，支持相对路径和软链接。
 true：严格校验。 false（缺省默认值）：不严格校验。 
duplicateDependencyCheck
boolean
否
是否校验本地HSP模块有无依赖相同的HAR。仅在Build App(s)起效。
 true：如果本地HSP模块依赖了相同的HAR（包括本地/远程、直接/间接），则编译报错。（注意：当依赖链中存在远程HSP，则该远程HSP及其依赖链不参与校验）。 false（默认缺省值）：不启用校验。 
harLocalDependencyCheck
boolean
否
是否对HAR产物启用本地依赖校验。
 true：如果oh-package.json中的dependencies、dynamicDependencies存在本地依赖，则编译报错。 false（默认缺省值）：不启用校验。 
除HAR模块外，HSP模块编译时也会生成HAR产物，该配置同样生效。
nativeCompiler
string
否
指定Native编译时使用的编译器，包括：
 Original（缺省默认值）：原有的编译器。 BiSheng：使用毕昇编译器进行Native编译。              说明：   从API 12开始支持。   
配置项
类型
是否必填
说明
directories
array
是
资源地址路径。配置示例：
\"directories\": [\n\t'./AppScope/resource'\n]
配置项
类型
是否必填
说明
artifactName
string
是
自定义产品生成的应用包名称，可由数字、英文字母、中划线、下划线和英文句号（.）组成，支持输入版本号。
{\n  \"app\": { \n    //工程的签名信息，可包含多个签名信息\n    \"signingConfigs\": [  \n      {\n        \"name\": \"default\",  //标识签名方案的名称，用户可自定义\n        \"type\": \"HarmonyOS\",  //标识 HarmonyOS 应用\n        //该方案的签名材料\n        \"material\": {  \n          \"certpath\": \"D:\\\\SigningConfig\\\\debug_hos.cer\",  //调试或发布证书文件，格式为.cer\n          \"storePassword\": \"******\",  //密钥库密码，以密文形式呈现\n          \"keyAlias\": \"debugKey\",  //密钥别名信息\n          \"keyPassword\": \"******\",  //密钥密码，以密文形式呈现\n          \"profile\": \"D:\\\\SigningConfig\\\\debug_hos.p7b\",  //调试或发布证书 Profile文件，格式为.p7b \n          \"signAlg\": \"SHA256withECDSA\",  //密钥库signAlg参数\n          \"storeFile\": \"D:\\\\SigningConfig\\\\debug_hos.p12\"  //密钥库文件，格式为.p12\n        }\n      }\n    ],\n    //定义构建的产品品类，如通用默认版、付费版、免费版等\n    \"products\": [  \n      {\n        \"name\": \"default\",  //定义产品的名称，支持定制多product目标产物\n        \"signingConfig\": \"default\",  //指定当前产品品类对应的签名信息，签名信息需要在signingConfigs中进行定义\n        \"compatibleSdkVersion\": \"5.0.0(12)\",  //指定应用/元服务兼容的最低版本\n        \"targetSdkVersion\": \"5.0.0(12)\",  //指定应用/元服务目标版本\n        \"runtimeOS\": \"HarmonyOS\",  //指定为HarmonyOS\n      }\n    ],\n    // 构建模式的集合,每个构建模式是指在执行不同target任务时使用何种构建配置的一套方案，默认打包hap时使用debug，打包app时使用release\n    \"buildModeSet\": [\n      {\n        \"name\": \"debug\",   //定义构建模式的类型名称，系统默认给出test、debug和release，用户也可以自定义\n        \"buildOption\": {   //配置项目在构建过程中使用的相关配置\n          \"packOptions\": {  //包配置选项，可用于构建app时避免生成签名的hap\n            \"buildAppSkipSignHap\": false\n          },\n          \"debuggable\": true,\n          \"resOptions\": {\n            \"compression\": {\n              \"media\": {\n                \"enable\": true // 是否对media图片启用纹理压缩\n              },\n              // 纹理压缩文件过滤，非必填，不填会压缩资源目录中的所有图片\n              \"filters\": [\n                {\n                  \"method\": {\n                    \"type\": \"sut\", // 转换类型\n                    \"blocks\": \"4x4\" // 转换类型的扩展参数\n                  },\n                  // 指定用来参与压缩的文件，需要满足所有条件且不被exclude过滤的文件才会参与压缩\n                  \"files\": {\n                    \"path\": [\"./**/*\"], // 指定资源目录中的所有文件\n                    \"size\": [[0, '10k']], // 指定大小10k以下的文件\n                    // 指定分辨率小于2048*2048的图片\n                    \"resolution\": [\n                      [\n                        { \"width\": 0, \"height\": 0 }, // 最小宽高\n                        { \"width\": 2048, \"height\": 2048 } // 最大宽高\n                      ]\n                    ]\n                  },\n                  // 从files中剔除掉不需要压缩的文件，需要满足所有过滤条件的文件才会被剔除\n                  \"exclude\": {\n                    \"path\": [\"./**/*.jpg\"], // 过滤所有jpg文件\n                    \"size\": [[0, '1k']], // 过滤大小1k以下的文件\n                    // 过滤分辨率小于1024*1024的图片\n                    \"resolution\": [\n                      [\n                        { \"width\": 0, \"height\": 0 }, // 最小宽高\n                        { \"width\": 1024, \"height\": 1024 } // 最大宽高\n                      ]\n                    ]\n                  }\n                }\n              ]\n            }\n          },\n          //cpp相关编译配置\n          \"externalNativeOptions\": {\n            \"path\": \"./entry/src/main/cpp/CMakeLists.txt\",  //CMake配置文件，提供CMake构建脚本\n            \"arguments\": [],  //传递给CMake的可选编译参数\n            \"abiFilters\": [  //HarmonyOS当前支持的ABI编译环境\n              \"arm64-v8a\",\n              \"x86_64\"\n            ],\n            \"cppFlags\": \"\"  //设置C++编译器的可选参数\n          },\n          \"sourceOption\": {   //使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理\n            \"workers\": []\n          },\n          //配置筛选har依赖.so资源文件的过滤规则\n          \"nativeLib\": {\n             \"filter\": {\n               //按照.so文件的优先级顺序，打包最高优先级的.so文件\n               \"pickFirsts\": [\n                 \"**/1.so\"\n               ],\n               //按照.so文件的优先级顺序，打包最低优先级的.so文件\n               \"pickLasts\": [\n                 \"**/2.so\"\n               ],\n               //根据正则表达式排除匹配到的.so文件，匹配到的so文件将不会被打包\n               \"excludes\": [\n                 \"**/3.so\", //排除所有名称为“3”的so文件\n                 \"**/x86_64/*.so\" //排除所有x86_64架构的so文件\n               ],\n               //允许当.so重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件\n               \"enableOverride\": true\n            }\n          },\n        }\n      }   \n    ]\n  },\n  \"modules\": [\n    {\n      \"name\": \"entry\",  //模块名称，须与模块中module.json5文件中的module.name保持一致\n      \"srcPath\": \"./entry\",  //标明模块根目录相对工程根目录的相对路径\n      \"targets\": [  //定义构建的APP产物，由product和各模块定义的targets共同定义\n        {\n          \"name\": \"default\",  //target名称，由各个模块的build-profile.json5中的targets字段定义\n          \"applyToProducts\": [  \n            \"default\"   //表示将该模块下的\"default\" Target打包到\"default\" Product中\n          ]\n        }\n      ]\n    }\n  ]\n}
模块级
下表为\"Ability\"类型的Module（HAP）对应的模块级build-profile.json5中配置项包含的字段，\"Library\"类型的Module（HAR和HSP）对应的模块级build-profile.json5中配置项为下表罗列范围的子集。
配置项
类型
是否必填
说明
apiType
string
否
API模型类型：
 stageMode：Stage模型，后续长期演进的模型，推荐使用该模型。 faMode：FA模型。 
targets
array
否
定义的target，可配置多个；若配置，数组长度至少为1。
name
string
是
target名称。
runtimeOS
string
否
target的目标运行环境：
 HarmonyOS OpenHarmony 
config
object
否
target相关配置。
distroFilter
object
否
应用市场分发规则。在FA模型中使用。详情请参见distroFilter。
distributionFilter
object
否
应用市场分发规则。在Stage模型中使用。详情请参见distributionFilter。
deviceType
array
否
target支持的设备范围，具体配置项同module.json5中的deviceTypes。
在FA模型中，对应的文件为config.json。
buildOption
object
否
模块在构建过程中的相关配置，详情请参见表8。关于buildOption的优先级请参考定制编译模式。
atomicService
object
否
元服务相关配置，详情请参见表9，仅支持在Stage模型中配置。
source
object
否
target的源码范围。
abilities
array
否
FA模型工程中支持对Ability源码目录下的page页面进行定制，详情参见表11。配置示例：
\"source\": { \n\t\"abilities\": [\n\t  {\n\t\t\"name\": \".MainAbility\",\n\t\t\"pages\": [\n\t\t  \"pages/index\"\n\t\t]\n\t  }\n\t]\n}
pages
array
否
Stage模型工程中支持对pages源码目录的page页面进行定制，数组长度至少为1。配置示例：
\"source\": {\n\t\"pages\": [\n\t  \"pages/Index\"\n\t]\n}
sourceRoots
array
否
Stage模型工程中支持对差异化代码空间进行定制，数组长度至少为1。数组中的值有以下限制：
 必须唯一； 必须为相对路径； 类型必须为文件夹； 文件夹必须真实存在； 文件夹必须与src/main同级； 
当数组中存在多个值时，寻址的优先级为数组中值的顺序。配置示例：
\"source\": {\n  \"sourceRoots\": [\n    \"./src/default\"\n  ]\n}
resource
object
否
target包含的资源目录。
directories
array
否
资源目录地址。
output
object
否
定制产品生成的应用包的配置
artifactName
string
是
自定义产品生成的应用包名称，可由数字、英文字母、中划线、下划线和英文句号（.）组成，支持输入版本号。
showInServiceCenter
boolean
否
是否显示在服务中心：
 true：显示。 false（缺省默认值）：不显示。 
buildOption
object
否
模块在构建过程中的相关配置，详情请参见表8，关于buildOption的优先级请参考定制编译模式。
其中仅支持配置resOptions，externalNativeOptions，sourceOption，nativeLib，napiLibFilterOption和arkOptions字段。
其中在FA模型中，arkOptions配置中仅支持配置types字段。
buildOptionSet
array
否
表8构建配置集，其中name字段必填，每个配置都是当前支持的编译过程中所有可用工具的通用配置选项集。关于buildOption的优先级请参考定制编译模式。
buildModeBinder
array
否
构建模式（debug、release 等）与构建配置（buildOption）的关联配置。通过该配置可以将不同的构建配置和target进行组合，并绑定到对应的构建模式上，其中构建模式需要在工程级别的构建模式列表中已定义。
buildModeName
string
否
构建模式名称。
mappings
array
否
关联关系。
targetName
string
否
target名称。
buildOptionName
string
否
构建配置buildOption名称。
entryModules
array
否
Feature类型模块所关联的入口模块。
配置项
类型
是否必填
说明
apiVersion
object
否
支持的apiVersion范围。
policy
string
是
取值规则：
 include：需要包含的value属性。 exclude：需要排除的value属性。 
value
array
是
支持的取值为API Version存在的整数值，例如10。
screenShape
object
否
屏幕形状的支持策略。
policy
string
是
取值规则：
 include：需要包含的value属性。 exclude：需要排除的value属性。 
value
array
是
支持的取值范围：
 circle：圆形 rect：矩形 
screenWindow
object
否
应用运行时窗口的分辨率支持策略。
policy
string
是
取值规则：
 include：需要包含的value属性。 
value
array
是
单个字符串的取值格式为“宽 * 高”，取值为整数像素值，例如\"454 * 454\"。
screenDensity
object
否
屏幕的像素密度支持策略。
policy
string
是
取值规则：
 include：需要包含的value属性。 exclude：需要排除的value属性。 
value
array
是
取值范围：
 sdpi：小规模的屏幕密度（Small-scale Dots per Inch），适用于dpi取值为(0,120]的设备。 mdpi：中规模的屏幕密度（Medium-scale Dots Per Inch），适用于dpi取值为(120,160]的设备。 ldpi：大规模的屏幕密度（Large-scale Dots Per Inch），适用于dpi取值为(160,240]的设备。 xldpi：大规模的屏幕密度（Extra Large-scale Dots Per Inch），适用于dpi取值为(240,320]的设备。 xxldpi：大规模的屏幕密度（Extra Extra Large-scale Dots Per Inch），适用于dpi取值为(320，480]的设备。 xxxldpi：表示大规模的屏幕密度（Extra Extra Extra Large-scale Dots Per Inch），适用于dpi取值为(480, 640]的设备。 
countryCode
object
否
应用需要分发的国家地区码。
policy
string
是
取值规则：
 include：需要包含的value属性。 exclude：需要排除的value属性。 
value
array
是
国家地区码取值，具体值以ISO-3166-1标准为准。支持多个国家和地区枚举定义。
配置项
类型
是否必填
说明
name
string
否
构建配置方案buildOption的名称。
debuggable
boolean
否
当前编译产物是否为可调试模式(debug)：
 true（缺省默认值）：可调试。 false：不可调试。 
当使用release的构建模式时，默认为false。
copyFrom
string
否
从同模块中已有的buildOption复制配置，配置已定义的buildOption名称。
resOptions
object
否
资源编译配置项。
compression
object
否
对模块预置图片资源进行纹理压缩的编译配置参数。详情请参见表12 compression。
externalNativeOptions
object
否
Native编译配置项。
path
string
否
CMake构建脚本地址，即CMakeLists.txt文件地址。
abiFilters
array
否
HarmonyOS当前支持的ABI编译环境，包括：
 arm64-v8a x86_64 
如不配置该参数，编译时默认为arm64-v8a。若配置，则数组长度至少至少1。
cppFlags
string
否
C++编译器参数。
cFlags
string
否
C编译参数。
arguments
string/array
否
CMake编译参数。
targets
array
否
指定hvigor应构建的CMake项目中的库和可执行目标。
sourceOption
object
否
源码相关配置。使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理。
workers
array
否
指定使用node.js工作器的JS/TS源代码，源代码在构建过程中单独处理。
nativeLib
object
否
Native 库（.so）相关配置。
filter
object
否
Native 库（.so）文件的筛选选项。
excludes
array
否
根据正则表达式排除匹配到的.so文件，匹配到的so文件将不会被打包。
pickFirsts
array
否
按照.so文件的优先级顺序，打包最高优先级的.so文件。详情请参见关于库文件so的优先级。
pickLasts
array
否
按照.so文件的优先级顺序，打包最低优先级的.so文件。详情请参见关于库文件so的优先级。
enableOverride
boolean
否
是否允许当.so重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件：
 true：允许。 false（缺省默认值）：不允许。 
select
array
否
select提供native产物的精准选择能力，根据包名、版本、产物名称等选择或排除，select的优先级高于excludes、pickFirsts等配置项。详情请参见关于select的使用。
select/package
string
否
包名。
select/version
string
否
包版本。
select/include
array
否
选择打包的native产物。
select/exclude
array
否
排除的native产物。
debugSymbol
object
否
移除.so文件中的符号表、调试信息。
strip
boolean
否
是否移除.so文件中的符号表、调试信息。
 true（缺省默认值）：移除。 false：不移除。 
从DevEco Studio NEXT Developer Beta2（5.0.3.502）版本开始，缺省默认值由false改为true。
exclude
array
否
不对.so文件执行strip的正则表达式规则集。
headerPath
string/array
否
指向包含要导出到此模块的依赖项的标头的目录的路径。
collectAllLibs
boolean
否
对libs目录收集打包时，是否收集所有后缀的文件。
 true：不限制后缀，即收集所有文件（包括无后缀文件）。 false：限制后缀为.so，即只收集后缀为.so的文件。 
librariesInfo
array
否
声明so的透传依赖信息。具体可参考依赖透传。
name
string
是
本模块so库的名称。
linkLibraries
array
是
so库的依赖信息，格式为\"依赖包名::依赖so名称\"。
excludeFromHar
boolean
否
是否排除依赖HAR模块中的so，排除时，依赖HAR模块的so不会被打包到本模块产物中。
 true（缺省默认值）：排除。 false：不排除。 
仅针对HAR模块生效。
napiLibFilterOption
object
否
NAPI库（.so）文件的筛选选项。标记为废弃，不建议使用，推荐使用nativeLib/filter。
excludes
array
否
排除的.so文件。罗列的NAPI库将不会被打包。
pickFirsts
array
否
按照.so文件的优先级顺序，打包最高优先级的.so文件。
pickLasts
array
否
按照.so文件的优先级顺序，打包最低优先级的.so文件。
enableOverride
boolean
否
是否允许当.so文件重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件：
 true：允许。 false（缺省默认值）：不允许。 
ignoreArchitectures
array
否
忽略运行系统CPU架构的.so文件。
arkOptions
object
否
ArkTS编译配置。
runtimeOnly
object
否
配置动态import的文件和依赖的包名，仅支持在Stage模型中配置。
runtimeOnly为非必选配置，当工程需要以变量方式动态import文件、目录的相对路径或三方包时，需要通过配置runtimeOnly来确保其加入编译流程。详情请参考动态import变量表达式。
sources
array
否
配置动态import的文件/文件夹的相对路径。
配置的文件/文件夹必须在工程中真实存在，且文件的后缀只能为ets或ts。
packages
array
否
配置动态import依赖的包名。
该包名需要和工程级/模块级oh-package.json5的dependencies中的名字保持一致。
apPath
string
否
API 11及以上版本不再支持，即该字段配置后不再生效。
应用热点信息文件路径。
hostPGO
boolean
否
是否启用配置文件引导优化功能：
 true：启用。 false（缺省默认值）：不启用。 
从API 10开始废弃。
types
array
否
自定义类型，可配置包名或d.ts/d.ets文件路径。
obfuscation
object
否
代码混淆配置，详情请参见表10。
代码混淆仅针对Release模式打包生效。
更多关于代码混淆的内容，请参见代码混淆。
buildProfileFields
object
否
运行时可获取的自定义构建参数，支持键值对配置，仅支持在Stage模型中配置，配置示例：
\"arkOptions\": {\n\t\"buildProfileFields\": {\n\t  \"buildOptionSetData\": \"BuildOptionSetDataRelease\",\n\t  \"data\": \"DataRelease\"\n\t}\n}
当前支持配置string/number/boolean类型的自定义参数。
更多关于如何在运行时获取编译构建参数的内容，请参见获取自定义编译参数。
integratedHsp
boolean
否
是否为集成态HSP。
 true：是。 false（缺省默认值）：否。 
 从API 12开始支持。 需在工程级build-profile.json5中配置useNormalizedOHMUrl为true后使用。 该字段仅在HSP模块中配置后生效。 
transformLib
string
否
字节码插桩插件配置，允许开发者在编译时对字节码进行插桩修改，仅支持Stage模型，格式为相对路径，不同系统要求的文件类型如下，文件内容需要在对应平台生成，不能拷贝修改后缀名混用。详情请参考编译期自定义修改方舟字节码。
 Windows：.dll文件。 Linux/Mac：.so文件。 
 Mac环境下添加配置后插桩未生效的问题请参考FAQ。 HAR模块仅字节码HAR配置生效，非字节码HAR配置不生效。 
branchElimination
boolean
否
是否启用代码分支裁剪，减少编译产物大小，开启后，在release编译模式下，不会被执行到的代码分支会被裁剪掉，示例如下：
# 编译生成的BuildProfile文件\nexport const DEBUG = false;\nexport const VERSION_CODE = 100;\n# 开发者自定义的ets文件\nimport { DEBUG } from 'BuildProfile';\nimport { VERSION_CODE } from 'BuildProfile';\nif (DEBUG)\n  {XXX} // 该分支会被裁剪掉\nelse\n  {XXX}\nif (VERSION_CODE){XXX} // 该语法发生了类型转换，不支持代码裁剪。\nif (VERSION_CODE === 100){XXX} // 若需要裁剪代码，使用该方式，显式指定判断条件为boolean类型。
 true：启用（将导致使用\"ApplyChanges\"功能时，对const声明的常量的值进行的修改可能不生效）。 false（缺省默认值）：不启用。 
 仅支持API 11及以上的Stage模型。 仅支持const声明的bool类型常量和const声明的string/number类型常量的判断表达式。 不支持间接导入，例如A文件中定义const变量A1，B文件导入A1，导出B1，ets导入B1进行判断，无法进行裁剪。 
byteCodeHar
boolean
否
是否支持字节码HAR，仅在HAR模块中配置后生效。详情请参考构建字节码HAR。
 true：支持。 false：不支持。 
 从API 12开始支持。 从DevEco Studio NEXT Beta1（5.0.3.800）版本开始，当工程级build-profile.json5中useNormalizedOHMUrl配置为true时，byteCodeHar缺省默认值为true；当useNormalizedOHMUrl配置为false时，byteCodeHar缺省默认值为false。 
配置项
类型
是否必填
说明
preloads
array
否
定义当前模块运行时预加载的模块。
moduleName
string
否
预加载的模块名称。
配置项
类型
是否必填
说明
ruleOptions
object
否
混淆规则配置。
enable
boolean
是
是否启用代码混淆：
 true：启用。 false（默认值）：不启用。 
从DevEco Studio NEXT Developer Beta3（5.0.3.600）版本开始，默认值由true改为false。
files
array
否
配置混淆规则文件的相对路径，默认使用obfuscation-rules.txt文件。文件中配置的混淆规则仅在本模块编译时生效（包含依赖代码）。
 规则文件中支持配置所有混淆规则。 支持配置多个文件，文件名称支持自定义，当存在多个混淆规则文件时，规则合并可参考混淆规则合并策略，合并后的规则作用范围可参考开启代码混淆。 
consumerFiles
string/array
否
仅HAR模块可配置，配置传递给集成方的混淆规则文件的相对路径，支持配置多个文件，文件名称支持自定义。
 为保证HAR模块可被正确集成使用，若有不希望被集成方混淆的内容，建议在规则文件中配置对应的保留选项，例如HAR模块中导出的变量或函数。 
 规则文件中配置的混淆选项会与集成方的混淆规则进行合并，进而影响集成方的编译混淆，因此，建议仅配置保留选项。 
配置项
类型
是否必填
说明
abilities
array
否
自定义目标的能力范围。
name
string
是
指定目标选择的能力的名称。
pages
array
否
指定目标选择的能力的页面。
res
array
否
指定资源目录。
icon
string
否
指定能力图标文件的索引，格式为\"$media:ability_icon\"。
label
string
否
指定对用户可见的性能名称。标签值设置为该名称的资源索引，以支持多语言。
launchType
string
否
指定能力的启动模式：
 multiton：多实例模式，每次启动创建一个新实例。 
 standard：同multiton，建议使用multiton替代。 singleton（缺省默认值）：单实例模式，仅第一次启动创建新实例。 specified：指定实例模式，运行时由开发者决定是否创建新实例。 
配置项
类型
是否必填
说明
media
object
否
对资源目录下media目录的图片进行纹理压缩的配置参数。
enable
boolean
否
是否对media图片启用纹理压缩。
 true：启用。 false（缺省默认值）：不启用。 
 在linux系统的构建场景下，请确认系统环境已安装libGL1库。 对图片进行纹理压缩会改变文件名称和内容，在分层图标以及二次编辑的场景下会引起图片显示异常，请进一步使用filters排除掉这部分文件。 
filters
array
否
文件过滤配置参数。
编译过程中会依次遍历图片文件，并与filters条件进行匹配，一旦匹配成功，则完成该图片的处理。当工程级和模块级同时配置时，先按照模块级的过滤条件匹配，一旦匹配成功，则忽略工程级的过滤条件；如果模块级的没有匹配成功，继续按工程级的条件进行匹配。
method
object
是
纹理压缩的方式。
type
string
是
转换类型。
 astc（Adaptive Scalable Texture Compression）：自适应可变纹理压缩，一种对GPU友好的纹理格式，可在设备侧更快地显示，有更少的内存占用。 sut（SUper compression for Texture） ：纹理超压缩，可在设备侧更快地显示，有更少的内存占用，相比astc具备更大压缩率和更少ROM占用。 
blocks
string
是
astc/sut转换类型的扩展参数，决定画质和压缩率，当前仅支持\"4x4\"。
files
object
否
指定用来参与压缩的文件，与exclude字段配合使用。
path
array
否
指定“按路径匹配”的过滤条件，符合glob规范，格式为相对路径，配置示例：
\"path\": [\n  \"./entry/src/main/resources/base/media/big_picture.png\"\n]
size
array
否
二维数组，指定“按大小匹配”的过滤条件，格式为[min,max]，闭区间，表示大小从min到max之间的文件，配置示例：
\"size\"：[\n  [0, '1k'],      // 0 ~ 1*1024\n  ['1024', '2k'], // 1024 ~ 2*1024\n  ['3K']          // 3*1024 ~ 无限大\n]
 每个数值可以填数字、字符串或字符串中带单位(大小写均可)。 单位K/k=1024，M/m=1024*1024，G/g=1024*1024*1024。 区间最大值可省略，表示无限大。 
resolution
array
否
二维数组，指定“按分辨率匹配”的过滤条件，配置示例：
resolution:[\n  [\n    { width:32, height:32 },   // 最小宽高\n    { width:64, height:64 },   // 最大宽高\n  ],                           // 分辨率在32*32到64*64之间的图片\n  [\n    { width:200, height:200 }, // 最小宽高\n    // 此处第2个不填表示最大宽高是无限大\n  ],                           // 分辨率大于200*200的图片\n]
 width和height只能是数字。 最大宽高可以省略，表示无限大。 
exclude
object
否
从files中剔除掉不需要压缩的文件。
path
array
否
同files/path。
size
array
否
同files/size。
resolution
array
否
同files/resolution。
模块级build-profile.json5的示例如下所示：
{\n  \"apiType\": \"stageMode\",  //API类型，支持FA(faMode) 和 Stage(stageMode)模型\n  \"showInServiceCenter\": true,  //是否在服务中心展示\n  \"buildOption\": {  //配置项目在构建过程中使用的相关配置\n    //配置筛选har依赖.so资源文件的过滤规则\n    \"nativeLib\": {\n       \"filter\": {\n          //按照.so文件的优先级顺序，打包最高优先级的.so文件\n          \"pickFirsts\": [\n             \"**/1.so\"\n           ],\n           //按照.so文件的优先级顺序，打包最低优先级的.so文件\n           \"pickLasts\": [\n              \"**/2.so\"\n           ],\n           //根据正则表达式排除匹配到的.so文件，匹配到的so文件将不会被打包\n           \"excludes\": [\n              \"**/3.so\", //排除所有名称为“3”的so文件\n              \"**/x86_64/*.so\" //排除所有x86_64架构的so文件\n           ],\n           //允许当.so重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件\n           \"enableOverride\": true\n       }\n    },\n    \"sourceOption\": {   //使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理\n      \"workers\": []\n    },\n    //cpp相关编译配置\n    \"externalNativeOptions\": {\n      \"path\": \"./src/main/cpp/CMakeLists.txt\",  //CMake配置文件，提供CMake构建脚本\n      \"arguments\": [],  //传递给CMake的可选编译参数\n      \"abiFilters\": [  //HarmonyOS当前支持的ABI编译环境\n        \"arm64-v8a\",\n        \"x86_64\"\n      ],\n      \"cppFlags\": \"\"  //设置C++编译器的可选参数\n    },\n    //ArkTS编译配置\n    \"arkOptions\":{\n      \"types\":[]  //配置d.ts/d.ets的相对路径或包名，用于使用自定义的声明类型\n    },\n  },\n  \"buildOptionSet\": [  //buildOption的集合，\n    {\n      \"name\": \"release\",  //定义buildOption的名字，取值有default、debug 和 release，也可自定义\n      \"arkOptions\": {\n        \"obfuscation\": {  //针对release模式下的配置\n          \"ruleOptions\": {\n            \"enable\": false,   // 5.0.3.600及以上版本，默认为false\n            \"files\": [   //配置混淆规则文件的相对路径\n              \"./obfuscation-rules.txt\"\n            ]\n          },\n          \"consumerFiles\": './consumer-rules.txt' //仅HAR模块可配置，配置传递给集成方的混淆规则文件的相对路径\n        }\n      },\n      \"debuggable\": true,  //定义编译模式是否为debug\n      \"copyFrom\": \"release\",  //从指定的buildOption中复制相关配置\n      \"resOptions\": {\n        \"compression\": {\n          \"media\": {\n            \"enable\": true // 是否对media图片启用纹理压缩\n          },\n          // 纹理压缩文件过滤，非必填，不填会压缩资源目录中的所有图片\n          \"filters\": [\n            {\n              \"method\": {\n                \"type\": \"sut\", // 转换类型\n                \"blocks\": \"4x4\" // 转换类型的扩展参数\n              },\n              // 指定用来参与压缩的文件，需要满足所有条件且不被exclude过滤的文件才会参与压缩\n              \"files\": {\n                \"path\": [\"./**/*\"], // 指定当前模块资源目录中的所有文件\n                \"size\": [[0, '10k']], // 指定大小10k以下的文件\n                // 指定分辨率小于2048*2048的图片\n                \"resolution\": [\n                  [\n                    { \"width\": 0, \"height\": 0 }, // 最小宽高\n                    { \"width\": 2048, \"height\": 2048 } // 最大宽高\n                  ]\n                ]\n              },\n              // 从files中剔除掉不需要压缩的文件，需要满足所有过滤条件的文件才会被剔除\n              \"exclude\": {\n                \"path\": [\"./**/*.jpg\"], // 过滤所有jpg文件\n                \"size\": [[0, '1k']], // 过滤大小1k以下的文件\n                // 过滤分辨率小于1024*1024的图片\n                \"resolution\": [\n                  [\n                    { \"width\": 0, \"height\": 0 }, // 最小宽高\n                    { \"width\": 1024, \"height\": 1024 } // 最大宽高\n                  ]\n                ]\n              }\n            }\n          ]\n        }\n      },\n      //cpp相关编译配置\n      \"externalNativeOptions\": {\n        \"path\": \"./src/main/cpp/CMakeLists.txt\",  //CMake配置文件，提供CMake构建脚本\n        \"arguments\": [],  //传递给CMake的可选编译参数\n        \"abiFilters\": [  //HarmonyOS当前支持的ABI编译环境\n          \"arm64-v8a\",\n          \"x86_64\"\n        ],\n        \"cppFlags\": \"\"  //设置C++编译器的可选参数\n      },\n      \"sourceOption\": {   //使用不同的标签对源代码进行分类，以便在构建过程中对不同的源代码进行不同的处理\n        \"workers\": []\n      },\n      //配置筛选har依赖.so资源文件的过滤规则\n      \"nativeLib\": {\n          \"filter\": {\n            //按照.so文件的优先级顺序，打包最高优先级的.so文件\n            \"pickFirsts\": [\n              \"**/1.so\"\n            ],\n            //按照.so文件的优先级顺序，打包最低优先级的.so文件\n            \"pickLasts\": [\n              \"**/2.so\"\n            ],\n            //根据正则表达式排除匹配到的.so文件，匹配到的so文件将不会被打包\n            \"excludes\": [\n              \"**/3.so\"\n            ],\n            //允许当.so重名冲突时，使用高优先级的.so文件覆盖低优先级的.so文件\n            \"enableOverride\": true\n         }\n      },\n    }\n  ],\n  \"buildModeBinder\": [   //构建模式与构建配置的关联配置,通过该配置可以将不同的构建配置和target进行组合，并绑定到对应的构建模式上,其中构建模式需要在工程级别的构建模式列表中\n    {\n      \"buildModeName\": \"debug\",\n      \"mappings\": [   //构建模式绑定中的具体映射表，描述的是target和构建配置的一对一的关系\n        {\n          \"targetName\": \"default\",\n          \"buildOptionName\": \"release\"\n        }\n      ]\n    }\n  ],\n  \"targets\": [  //定义的target，开发者可以定制不同的target，具体请参考配置多目标构建产物章节\n    {\n      \"name\": \"default\",\n    },\n    {\n      \"name\": \"ohosTest\",\n    }    \n  ]\n}
