@Provide装饰器和@Consume装饰器：与后代组件双向同步
@Provide和@Consume，应用于与后代组件的双向数据同步，应用于状态数据在多个层级之间传递的场景。不同于上文提到的父子组件之间通过命名参数机制传递，@Provide和@Consume摆脱参数传递机制的束缚，实现跨层级传递。
其中@Provide装饰的变量是在祖先组件中，可以理解为被“提供”给后代的状态变量。@Consume装饰的变量是在后代组件中，去“消费（绑定）”祖先组件提供的变量。
@Provide/@Consume是跨组件层级的双向同步。在阅读@Provide和@Consume文档前，建议开发者对UI范式基本语法和自定义组件有基本的了解。建议提前阅读：基本语法概述，声明式UI描述，自定义组件-创建自定义组件。
从API version 9开始，这两个装饰器支持在ArkTS卡片中使用。
从API version 11开始，这两个装饰器支持在元服务中使用。
概述
@Provide/@Consume装饰的状态变量有以下特性：
@Provide装饰的状态变量自动对其所有后代组件可用，即该变量被“provide”给他的后代组件。由此可见，@Provide的方便之处在于，开发者不需要多次在组件之间传递变量。 后代通过使用@Consume去获取@Provide提供的变量，建立在@Provide和@Consume之间的双向数据同步，与@State/@Link不同的是，前者可以在多层级的父子组件之间传递。 @Provide和@Consume可以通过相同的变量名或者相同的变量别名绑定，建议类型相同，否则会发生类型隐式转换，从而导致应用行为异常。 
// 通过相同的变量名绑定\n@Provide age: number = 0;\n@Consume age: number;\n\n// 通过相同的变量别名绑定\n@Provide('a') id: number = 0;\n@Consume('a') age: number;
@Provide和@Consume通过相同的变量名或者相同的变量别名绑定时，@Provide装饰的变量和@Consume装饰的变量是一对多的关系。不允许在同一个自定义组件内，包括其子组件中声明多个同名或者同别名的@Provide装饰的变量，@Provide的属性名或别名需要唯一且确定，如果声明多个同名或者同别名的@Provide装饰的变量，会发生运行时报错。
装饰器说明
@State的规则同样适用于@Provide，差异为@Provide还作为多层后代的同步源。
别名：常量字符串，可选。
如果指定了别名，则通过别名来绑定变量；如果未指定别名，则通过变量名绑定变量。
双向同步。
从@Provide变量到所有@Consume变量以及相反的方向的数据同步。双向同步的操作与@State和@Link的组合相同。
Object、class、string、number、boolean、enum类型，以及这些类型的数组。
支持Date类型。
API11及以上支持Map、Set类型。
支持ArkUI框架定义的联合类型Length、ResourceStr、ResourceColor类型。
必须指定类型。
@Provide变量的@Consume变量的类型必须相同。
支持类型的场景请参考观察变化。
不支持any。
API11及以上支持上述支持类型的联合类型，比如string | number, string | undefined 或者 ClassA | null，示例见@Provide_and_Consume支持联合类型实例。 
注意
当使用undefined和null的时候，建议显式指定类型，遵循TypeScript类型校验，比如：@Provide a : string | undefined = undefined是推荐的，不推荐@Provide a: string = undefined。
别名：常量字符串，可选。
如果提供了别名，则必须有@Provide的变量和其有相同的别名才可以匹配成功；否则，则需要变量名相同才能匹配成功。
Object、class、string、number、boolean、enum类型，以及这些类型的数组。
支持Date类型。
支持ArkUI框架定义的联合类型Length、ResourceStr、ResourceColor类型。必须指定类型。
@Provide变量和@Consume变量的类型必须相同。
@Consume装饰的变量，在其父组件或者祖先组件上，必须有对应的属性和别名的@Provide装饰的变量。
支持类型的场景请参考观察变化。
不支持any。
API11及以上支持上述支持类型的联合类型，比如string | number, string | undefined 或者 ClassA | null，示例见@Provide_and_Consume支持联合类型实例。 
注意
当使用undefined和null的时候，建议显式指定类型，遵循TypeScript类型校验，比如：@Consume a : string | undefined。
变量的传递/访问规则说明
 图1 @Provide初始化规则图示 
 图2 @Consume初始化规则图示 
观察变化和行为表现
[h2]观察变化
当装饰的数据类型为boolean、string、number类型时，可以观察到数值的变化。 当装饰的数据类型为class或者Object的时候，可以观察到赋值和属性赋值的变化（属性为Object.keys(observedObject)返回的所有属性）。 当装饰的对象是array的时候，可以观察到数组的添加、删除、更新数组单元。 当装饰的对象是Date时，可以观察到Date整体的赋值，同时可通过调用Date的接口setFullYear, setMonth, setDate, setHours, setMinutes, setSeconds, setMilliseconds, setTime, setUTCFullYear, setUTCMonth, setUTCDate, setUTCHours, setUTCMinutes, setUTCSeconds, setUTCMilliseconds 更新Date的属性。 
@Component\nstruct Child {\n  @Consume selectedDate: Date;\n\n  build() {\n    Column() {\n      Button(`child increase the day by 1`)\n        .onClick(() => {\n          this.selectedDate.setDate(this.selectedDate.getDate() + 1)\n        })\n      Button('child update the new date')\n        .margin(10)\n        .onClick(() => {\n          this.selectedDate = new Date('2023-09-09')\n        })\n      DatePicker({\n        start: new Date('1970-1-1'),\n        end: new Date('2100-1-1'),\n        selected: this.selectedDate\n      })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @Provide selectedDate: Date = new Date('2021-08-08')\n\n  build() {\n    Column() {\n      Button('parent increase the day by 1')\n        .margin(10)\n        .onClick(() => {\n          this.selectedDate.setDate(this.selectedDate.getDate() + 1)\n        })\n      Button('parent update the new date')\n        .margin(10)\n        .onClick(() => {\n          this.selectedDate = new Date('2023-07-07')\n        })\n      DatePicker({\n        start: new Date('1970-1-1'),\n        end: new Date('2100-1-1'),\n        selected: this.selectedDate\n      })\n      Child()\n    }\n  }\n}
当装饰的变量是Map时，可以观察到Map整体的赋值，同时可通过调用Map的接口set, clear, delete 更新Map的值。详见装饰Map类型变量。 当装饰的变量是Set时，可以观察到Set整体的赋值，同时可通过调用Set的接口add, clear, delete 更新Set的值。详见装饰Set类型变量。 
[h2]框架行为
初始渲染： @Provide装饰的变量会以map的形式，传递给当前@Provide所属组件的所有子组件。子组件中如果使用@Consume变量，则会在map中查找是否有该变量名/alias（别名）对应的@Provide的变量，如果查找不到，框架会抛出JS ERROR。在初始化@Consume变量时，和@State/@Link的流程类似，@Consume变量会在map中查找到对应的@Provide变量进行保存，并把自己注册给@Provide。 当@Provide装饰的数据变化时： 通过初始渲染的步骤可知，子组件@Consume已把自己注册给父组件。父组件@Provide变量变更后，会遍历更新所有依赖它的系统组件（elementid）和状态变量（@Consume）。通知@Consume更新后，子组件所有依赖@Consume的系统组件（elementId）都会被通知更新。以此实现@Provide对@Consume状态数据同步。 当@Consume装饰的数据变化时： 通过初始渲染的步骤可知，子组件@Consume持有@Provide的实例。在@Consume更新后调用@Provide的更新方法，将更新的数值同步回@Provide，以此实现@Consume向@Provide的同步更新。 
限制条件
@Provider/@Consumer的参数key必须为string类型，否则编译期会报错。
// 错误写法，编译报错\nlet change: number = 10;\n@Provide(change) message: string = 'Hello';\n\n// 正确写法\nlet change: string = 'change';\n@Provide(change) message: string = 'Hello';
@Consume装饰的变量不能本地初始化，也不能在构造参数中传入初始化，否则编译期会报错。@Consume仅能通过key来匹配对应的@Provide变量进行初始化。
【反例】
@Component\nstruct Child {\n  @Consume msg: string;\n  // 错误写法，不允许本地初始化\n  @Consume msg1: string = 'Hello';\n\n  build() {\n    Text(this.msg)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @Provide message: string = 'Hello';\n\n  build() {\n    Column() {\n      // 错误写法，不允许外部传入初始化\n      Child({msg: 'Hello'})\n    }\n  }\n}
【正例】
@Component\nstruct Child {\n  @Consume num: number;\n\n  build() {\n    Column() {\n      Text(`num的值: ${this.num}`)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @Provide num: number = 10;\n\n  build() {\n    Column() {\n      Text(`num的值: ${this.num}`)\n      Child()\n    }\n  }\n}
@Provide的key重复定义时，框架会抛出运行时错误，提醒开发者重复定义key，如果开发者需要重复key，可以使用allowoverride。
// 错误写法，a重复定义\n@Provide('a') count: number = 10;\n@Provide('a') num: number = 10;\n\n// 正确写法\n@Provide('a') count: number = 10;\n@Provide('b') num: number = 10;
在初始化@Consume变量时，如果开发者没有定义对应key的@Provide变量，框架会抛出运行时错误，提示开发者初始化@Consume变量失败，原因是无法找到其对应key的@Provide变量。
【反例】
@Component\nstruct Child {\n  @Consume num: number;\n\n  build() {\n    Column() {\n      Text(`num的值: ${this.num}`)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  // 错误写法，缺少@Provide\n  num: number = 10;\n\n  build() {\n    Column() {\n      Text(`num的值: ${this.num}`)\n      Child()\n    }\n  }\n}
【正例】
@Component\nstruct Child {\n  @Consume num: number;\n\n  build() {\n    Column() {\n      Text(`num的值: ${this.num}`)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  // 正确写法\n  @Provide num: number = 10;\n\n  build() {\n    Column() {\n      Text(`num的值: ${this.num}`)\n      Child()\n    }\n  }\n}
@Provide与@Consume不支持装饰Function类型的变量，框架会抛出运行时错误。
使用场景
在下面的示例是与后代组件双向同步状态@Provide和@Consume场景。当分别点击ToDo和ToDoItem组件内Button时，count 的更改会双向同步在ToDo和ToDoItem中。
@Component\nstruct ToDoItem {\n  // @Consume装饰的变量通过相同的属性名绑定其祖先组件ToDo内的@Provide装饰的变量\n  @Consume count: number;\n\n  build() {\n    Column() {\n      Text(`count(${this.count})`)\n      Button(`count(${this.count}), count + 1`)\n        .onClick(() => this.count += 1)\n    }\n    .width('50%')\n  }\n}\n\n@Component\nstruct ToDoList {\n  build() {\n    Row({ space: 5 }) {\n      ToDoItem()\n      ToDoItem()\n    }\n  }\n}\n\n@Component\nstruct ToDoDemo {\n  build() {\n    ToDoList()\n  }\n}\n\n@Entry\n@Component\nstruct ToDo {\n  // @Provide装饰的变量index由入口组件ToDo提供其后代组件\n  @Provide count: number = 0;\n\n  build() {\n    Column() {\n      Button(`count(${this.count}), count + 1`)\n        .onClick(() => this.count += 1)\n      ToDoDemo()\n    }\n  }\n}
[h2]装饰Map类型变量
从API version 11开始，@Provide，@Consume支持Map类型。
在下面的示例中，message类型为Map<number, string>，点击Button改变message的值，视图会随之刷新。
@Component\nstruct Child {\n  @Consume message: Map<number, string>\n\n  build() {\n    Column() {\n      ForEach(Array.from(this.message.entries()), (item: [number, string]) => {\n        Text(`${item[0]}`).fontSize(30)\n        Text(`${item[1]}`).fontSize(30)\n        Divider()\n      })\n      Button('Consume init map').onClick(() => {\n        this.message = new Map([[0, \"a\"], [1, \"b\"], [3, \"c\"]])\n      })\n      Button('Consume set new one').onClick(() => {\n        this.message.set(4, \"d\")\n      })\n      Button('Consume clear').onClick(() => {\n        this.message.clear()\n      })\n      Button('Consume replace the first item').onClick(() => {\n        this.message.set(0, \"aa\")\n      })\n      Button('Consume delete the first item').onClick(() => {\n        this.message.delete(0)\n      })\n    }\n  }\n}\n\n\n@Entry\n@Component\nstruct MapSample {\n  @Provide message: Map<number, string> = new Map([[0, \"a\"], [1, \"b\"], [3, \"c\"]])\n\n  build() {\n    Row() {\n      Column() {\n        Button('Provide init map').onClick(() => {\n          this.message = new Map([[0, \"a\"], [1, \"b\"], [3, \"c\"], [4, \"d\"]])\n        })\n        Child()\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
[h2]装饰Set类型变量
从API version 11开始，@Provide，@Consume支持Set类型。
在下面的示例中，message类型为Set<number>，点击Button改变message的值，视图会随之刷新。
@Component\nstruct Child {\n  @Consume message: Set<number>\n\n  build() {\n    Column() {\n      ForEach(Array.from(this.message.entries()), (item: [number, string]) => {\n        Text(`${item[0]}`).fontSize(30)\n        Divider()\n      })\n      Button('Consume init set').onClick(() => {\n        this.message = new Set([0, 1, 2, 3, 4])\n      })\n      Button('Consume set new one').onClick(() => {\n        this.message.add(5)\n      })\n      Button('Consume clear').onClick(() => {\n        this.message.clear()\n      })\n      Button('Consume delete the first one').onClick(() => {\n        this.message.delete(0)\n      })\n    }\n    .width('100%')\n  }\n}\n\n\n@Entry\n@Component\nstruct SetSample {\n  @Provide message: Set<number> = new Set([0, 1, 2, 3, 4])\n\n  build() {\n    Row() {\n      Column() {\n        Button('Provide init set').onClick(() => {\n          this.message = new Set([0, 1, 2, 3, 4, 5])\n        })\n        Child()\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
[h2]Provide_and_Consume支持联合类型实例
@Provide和@Consume支持联合类型和undefined和null，在下面的示例中，count类型为string | undefined，点击父组件Parent中的Button改变count的属性或者类型，Child中也会对应刷新。
@Component\nstruct Child {\n  // @Consume装饰的变量通过相同的属性名绑定其祖先组件Ancestors内的@Provide装饰的变量\n  @Consume count: string | undefined;\n\n  build() {\n    Column() {\n      Text(`count(${this.count})`)\n      Button(`count(${this.count}), Child`)\n        .onClick(() => this.count = 'Ancestors')\n    }\n    .width('50%')\n  }\n}\n\n@Component\nstruct Parent {\n  build() {\n    Row({ space: 5 }) {\n      Child()\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Ancestors {\n  // @Provide装饰的联合类型count由入口组件Ancestors提供其后代组件\n  @Provide count: string | undefined = 'Child';\n\n  build() {\n    Column() {\n      Button(`count(${this.count}), Child`)\n        .onClick(() => this.count = undefined)\n      Parent()\n    }\n  }\n}
[h2]@Provide支持allowOverride参数
allowOverride：@Provide重写选项。
从API version 11开始使用。
@Component\nstruct MyComponent {\n  @Provide({allowOverride : \"reviewVotes\"}) reviewVotes: number = 10;\n}
完整示例如下：
@Component\nstruct GrandSon {\n  // @Consume装饰的变量通过相同的属性名绑定其祖先内的@Provide装饰的变量\n  @Consume(\"reviewVotes\") reviewVotes: number;\n\n  build() {\n    Column() {\n      Text(`reviewVotes(${this.reviewVotes})`) // Text显示10\n      Button(`reviewVotes(${this.reviewVotes}), give +1`)\n        .onClick(() => this.reviewVotes += 1)\n    }\n    .width('50%')\n  }\n}\n\n@Component\nstruct Child {\n  @Provide({ allowOverride: \"reviewVotes\" }) reviewVotes: number = 10;\n\n  build() {\n    Row({ space: 5 }) {\n      GrandSon()\n    }\n  }\n}\n\n@Component\nstruct Parent {\n  @Provide({ allowOverride: \"reviewVotes\" }) reviewVotes: number = 20;\n\n  build() {\n    Child()\n  }\n}\n\n@Entry\n@Component\nstruct GrandParent {\n  @Provide(\"reviewVotes\") reviewVotes: number = 40;\n\n  build() {\n    Column() {\n      Button(`reviewVotes(${this.reviewVotes}), give +1`)\n        .onClick(() => this.reviewVotes += 1)\n      Parent()\n    }\n  }\n}
在上面的示例中：
GrandParent声明了@Provide(\"reviewVotes\") reviewVotes: number = 40。Parent是GrandParent的子组件，声明@Provide为allowOverride，重写父组件GrandParent的@Provide(\"reviewVotes\") reviewVotes: number = 40。如果不设置allowOverride，则会抛出运行时报错，提示@Provide重复定义。Child同理。GrandSon在初始化@Consume的时候，@Consume装饰的变量通过相同的属性名绑定其最近的祖先的@Provide装饰的变量。GrandSon查找到相同属性名的@Provide在祖先Child中，所以@Consume(\"reviewVotes\") reviewVotes: number初始化数值为10。如果Child中没有定义与@Consume同名的@Provide，则继续向上寻找Parent中的同名@Provide值为20，以此类推。如果查找到根节点还没有找到key对应的@Provide，则会报初始化@Consume找不到@Provide的报错。
常见问题
[h2]@BuilderParam尾随闭包情况下@Provide未定义错误
在此场景下，CustomWidget执行this.builder()创建子组件CustomWidgetChild时，this指向的是HomePage。因此找不到CustomWidget的@Provide变量，所以下面示例会报找不到@Provide错误，和@BuilderParam连用的时候要谨慎this的指向。
错误示例：
class Tmp {\n  a: string = ''\n}\n\n@Entry\n@Component\nstruct HomePage {\n  @Builder\n  builder2($$: Tmp) {\n    Text(`${$$.a}测试`)\n  }\n\n  build() {\n    Column() {\n      CustomWidget() {\n        CustomWidgetChild({ builder: this.builder2 })\n      }\n    }\n  }\n}\n\n@Component\nstruct CustomWidget {\n  @Provide('a') a: string = 'abc';\n  @BuilderParam\n  builder: () => void;\n\n  build() {\n    Column() {\n      Button('你好').onClick(() => {\n        if (this.a == 'ddd') {\n          this.a = 'abc';\n        }\n        else {\n          this.a = 'ddd';\n        }\n\n      })\n      this.builder()\n    }\n  }\n}\n\n@Component\nstruct CustomWidgetChild {\n  @Consume('a') a: string;\n  @BuilderParam\n  builder: ($$: Tmp) => void;\n\n  build() {\n    Column() {\n      this.builder({ a: this.a })\n    }\n  }\n}
正确示例：
class Tmp {\n  name: string = ''\n}\n\n@Entry\n@Component\nstruct HomePage {\n  @Provide('name') name: string = 'abc';\n\n  @Builder\n  builder2($$: Tmp) {\n    Text(`${$$.name}测试`)\n  }\n\n  build() {\n    Column() {\n      Button('你好').onClick(() => {\n        if (this.name == 'ddd') {\n          this.name = 'abc';\n        } else {\n          this.name = 'ddd';\n        }\n      })\n      CustomWidget() {\n        CustomWidgetChild({ builder: this.builder2 })\n      }\n    }\n  }\n}\n\n@Component\nstruct CustomWidget {\n  @BuilderParam\n  builder: () => void;\n\n  build() {\n    this.builder()\n  }\n}\n\n@Component\nstruct CustomWidgetChild {\n  @Consume('name') name: string;\n  @BuilderParam\n  builder: ($$: Tmp) => void;\n\n  build() {\n    Column() {\n      this.builder({ name: this.name })\n    }\n  }\n}
[h2]使用a.b(this.object)形式调用，不会触发UI刷新
在build方法内，当@Provide与@Consume装饰的变量是Object类型、且通过a.b(this.object)形式调用时，b方法内传入的是this.object的原生对象，修改其属性，无法触发UI刷新。如下例中，通过静态方法或者使用this调用组件内部方法，修改组件中的this.dog.age与this.dog.name时，UI不会刷新。
【反例】
class Animal {\n  name:string;\n  type:string;\n  age: number;\n\n  constructor(name:string, type:string, age:number) {\n    this.name = name;\n    this.type = type;\n    this.age = age;\n  }\n\n  static changeName(animal:Animal) {\n    animal.name = 'Jack';\n  }\n  static changeAge(animal:Animal) {\n    animal.age += 1;\n  }\n}\n\n@Entry\n@Component\nstruct Zoo {\n  @Provide dog:Animal = new Animal('WangCai', 'dog', 2);\n\n  changeZooDogAge(animal:Animal) {\n    animal.age += 2;\n  }\n\n  build() {\n    Column({ space:10 }) {\n      Text(`Zoo: This is a ${this.dog.age}-year-old ${this.dog.type} named ${this.dog.name}.`)\n        .fontColor(Color.Red)\n        .fontSize(30)\n      Button('changeAge')\n        .onClick(()=>{\n          // 通过静态方法调用，无法触发UI刷新\n          Animal.changeAge(this.dog);\n        })\n      Button('changeZooDogAge')\n        .onClick(()=>{\n          // 使用this通过自定义组件内部方法调用，无法触发UI刷新\n          this.changeZooDogAge(this.dog);\n        })\n      ZooChild()\n    }\n  }\n}\n\n@Component\nstruct ZooChild {\n\n  build() {\n    Column({ space:10 }) {\n      Text(`ZooChild`)\n        .fontColor(Color.Blue)\n        .fontSize(30)\n      ZooGrandChild()\n    }\n  }\n}\n\n@Component\nstruct ZooGrandChild {\n  @Consume dog:Animal;\n\n  changeZooGrandChildName(animal:Animal) {\n    animal.name = 'Marry';\n  }\n\n  build() {\n    Column({ space:10 }) {\n      Text(`ZooGrandChild: This is a ${this.dog.age}-year-old ${this.dog.type} named ${this.dog.name}.`)\n        .fontColor(Color.Yellow)\n        .fontSize(30)\n      Button('changeName')\n        .onClick(()=>{\n          // 通过静态方法调用，无法触发UI刷新\n          Animal.changeName(this.dog);\n        })\n      Button('changeZooGrandChildName')\n        .onClick(()=>{\n          // 使用this通过自定义组件内部方法调用，无法触发UI刷新\n          this.changeZooGrandChildName(this.dog);\n        })\n    }\n  }\n}
可以通过如下先赋值、再调用新赋值的变量的方式为this.dog加上Proxy代理，实现UI刷新。
【正例】
class Animal {\n  name:string;\n  type:string;\n  age: number;\n\n  constructor(name:string, type:string, age:number) {\n    this.name = name;\n    this.type = type;\n    this.age = age;\n  }\n\n  static changeName(animal:Animal) {\n    animal.name = 'Jack';\n  }\n  static changeAge(animal:Animal) {\n    animal.age += 1;\n  }\n}\n\n@Entry\n@Component\nstruct Zoo {\n  @Provide dog:Animal = new Animal('WangCai', 'dog', 2);\n\n  changeZooDogAge(animal:Animal) {\n    animal.age += 2;\n  }\n\n  build() {\n    Column({ space:10 }) {\n      Text(`Zoo: This is a ${this.dog.age}-year-old ${this.dog.type} named ${this.dog.name}.`)\n        .fontColor(Color.Red)\n        .fontSize(30)\n      Button('changeAge')\n        .onClick(()=>{\n          // 通过赋值添加 Proxy 代理\n          let newDog = this.dog;\n          Animal.changeAge(newDog);\n        })\n      Button('changeZooDogAge')\n        .onClick(()=>{\n          // 通过赋值添加 Proxy 代理\n          let newDog = this.dog;\n          this.changeZooDogAge(newDog);\n        })\n      ZooChild()\n    }\n  }\n}\n\n@Component\nstruct ZooChild {\n\n  build() {\n    Column({ space:10 }) {\n      Text(`ZooChild.`)\n        .fontColor(Color.Blue)\n        .fontSize(30)\n      ZooGrandChild()\n    }\n  }\n}\n\n@Component\nstruct ZooGrandChild {\n  @Consume dog:Animal;\n\n  changeZooGrandChildName(animal:Animal) {\n    animal.name = 'Marry';\n  }\n\n  build() {\n    Column({ space:10 }) {\n      Text(`ZooGrandChild: This is a ${this.dog.age}-year-old ${this.dog.type} named ${this.dog.name}.`)\n        .fontColor(Color.Yellow)\n        .fontSize(30)\n      Button('changeName')\n        .onClick(()=>{\n          // 通过赋值添加 Proxy 代理\n          let newDog = this.dog;\n          Animal.changeName(newDog);\n        })\n      Button('changeZooGrandChildName')\n        .onClick(()=>{\n          // 通过赋值添加 Proxy 代理\n          let newDog = this.dog;\n          this.changeZooGrandChildName(newDog);\n        })\n    }\n  }\n}
