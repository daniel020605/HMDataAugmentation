相机管理(ArkTS)
在开发一个相机应用前，需要先通过调用相机接口来创建一个独立的相机设备。
开发步骤
详细的API说明请参考Camera API参考。
 导入camera接口，接口中提供了相机相关的属性和方法，导入方法如下。 import { camera } from '@kit.CameraKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { common } from '@kit.AbilityKit'; 通过getCameraManager方法，获取cameraManager对象。 Context获取方式请参考：获取UIAbility的上下文信息。 function getCameraManager(context: common.BaseContext): camera.CameraManager {\n  let cameraManager: camera.CameraManager = camera.getCameraManager(context);\n  return cameraManager;\n}     如果获取对象失败，说明相机可能被占用或无法使用。如果被占用，须等到相机被释放后才能重新获取。   通过CameraManager类中的getSupportedCameras方法，获取当前设备支持的相机列表，列表中存储了设备支持的所有相机ID。若列表不为空，则说明列表中的每个ID都支持独立创建相机对象；否则，说明当前设备无可用相机，不可继续后续操作。 function getCameraDevices(cameraManager: camera.CameraManager): Array<camera.CameraDevice> {\n  let cameraArray: Array<camera.CameraDevice> = cameraManager.getSupportedCameras();\n  if (cameraArray != undefined && cameraArray.length > 0) {\n    for (let index = 0; index < cameraArray.length; index++) {\n      console.info('cameraId : ' + cameraArray[index].cameraId);  // 获取相机ID\n      console.info('cameraPosition : ' + cameraArray[index].cameraPosition);  // 获取相机位置\n      console.info('cameraType : ' + cameraArray[index].cameraType);  // 获取相机类型\n      console.info('connectionType : ' + cameraArray[index].connectionType);  // 获取相机连接类型\n    }\n    return cameraArray;\n  } else {\n    console.error(\"cameraManager.getSupportedCameras error\");\n    return [];\n  }\n} 
状态监听
在相机应用开发过程中，可以随时监听相机状态，包括新相机的出现、相机的移除、相机的可用状态。在回调函数中，通过相机ID、相机状态这两个参数进行监听，如当有新相机出现时，可以将新相机加入到应用的备用相机中。
通过注册cameraStatus事件，通过回调返回监听结果，callback返回CameraStatusInfo参数，参数的具体内容可参考相机管理器回调接口实例CameraStatusInfo。
function onCameraStatusChange(cameraManager: camera.CameraManager): void {\n  cameraManager.on('cameraStatus', (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      console.error(`Callback Error, errorCode: ${err.code}`);\n      return;\n    }\n    // 如果当通过USB连接相机设备时，回调函数会返回新的相机出现状态\n    if (cameraStatusInfo.status == camera.CameraStatus.CAMERA_STATUS_APPEAR) {\n      console.info(`New Camera device appear.`);\n    }\n    // 如果当断开相机设备USB连接时，回调函数会返回相机被移除状态\n    if (cameraStatusInfo.status == camera.CameraStatus.CAMERA_STATUS_DISAPPEAR) {\n      console.info(`Camera device has been removed.`);\n    }\n    // 相机被关闭时，回调函数会返回相机可用状态\n    if (cameraStatusInfo.status == camera.CameraStatus.CAMERA_STATUS_AVAILABLE) {\n      console.info(`Current Camera is available.`);\n    }\n    // 相机被打开/占用时，回调函数会返回相机不可用状态\n    if (cameraStatusInfo.status == camera.CameraStatus.CAMERA_STATUS_UNAVAILABLE) {\n      console.info(`Current Camera has been occupied.`);\n    }\n    console.info(`camera: ${cameraStatusInfo.camera.cameraId}`);\n    console.info(`status: ${cameraStatusInfo.status}`);\n  });\n}
