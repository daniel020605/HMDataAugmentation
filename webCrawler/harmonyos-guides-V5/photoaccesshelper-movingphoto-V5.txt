访问和管理动态照片资源
动态照片是一种结合了图片和视频的照片形式，可以显示一小段时间的动态画面和声音。可以帮助用户捕捉精彩的动态瞬间，提升创作空间，同时令拍照的容错率更高。
媒体库提供访问和管理动态照片资源的能力，包括：
 使用安全控件保存动态照片资源 获取动态照片对象（MovingPhoto） 使用MovingPhotoView播放动态照片 读取动态照片资源 
拍摄动态照片的能力由Camera Kit提供，开发者可参考Camera Kit-动态照片。
保存动态照片资源
使用安全控件保存动态照片资源后，可用于获取MovingPhoto对象，从而完成播放动态照片等操作。
使用安全控件保存动态照片资源，无需申请相册管理模块权限'ohos.permission.WRITE_IMAGEVIDEO'，允许用户通过点击按钮临时获取存储权限，并将资源直接保存到指定的媒体库路径，使得操作更为便捷。
详情请参考安全控件的保存控件。
开发步骤
 设置安全控件按钮属性。 创建安全控件按钮。 调用MediaAssetChangeRequest.createAssetRequest接口新建一个创建资产的变更请求，指定待创建资产的子类型为动态照片。 调用MediaAssetChangeRequest.addResource接口指定动态照片的图片和视频内容。 以下示例以从应用沙箱的应用文件fileUri指定动态照片的图片和视频内容为例。 开发者可根据实际情况，通过ArrayBuffer的方式指定资源内容，参考MediaAssetChangeRequest.addResource(type: ResourceType, data: ArrayBuffer)。 调用PhotoAccessHelper.applyChanges接口提交创建资产的变更请求。 
import { photoAccessHelper } from '@kit.MediaLibraryKit';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World'\n  @State saveButtonOptions: SaveButtonOptions = {\n    icon: SaveIconStyle.FULL_FILLED,\n    text: SaveDescription.SAVE_IMAGE,\n    buttonType: ButtonType.Capsule\n  } // 设置安全控件按钮属性\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        SaveButton(this.saveButtonOptions) // 创建安全控件按钮\n          .onClick(async (event, result: SaveButtonOnClickResult) => {\n             if (result == SaveButtonOnClickResult.SUCCESS) {\n               try {\n                 let context = getContext();\n                 let phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n                 // 需要确保imageFileUri和videoFileUri对应的资源存在，分别表示待创建到媒体库的动态照片的图片和视频。\n                 let imageFileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/create_moving_photo.jpg';\n                 let videoFileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/create_moving_photo.mp4';\n                 let assetChangeRequest: photoAccessHelper.MediaAssetChangeRequest = photoAccessHelper.MediaAssetChangeRequest.createAssetRequest(context, photoAccessHelper.PhotoType.IMAGE, \"jpg\", {\n                  title: \"moving_photo\",\n                  subtype: photoAccessHelper.PhotoSubtype.MOVING_PHOTO\n                 });\n                 assetChangeRequest.addResource(photoAccessHelper.ResourceType.IMAGE_RESOURCE, imageFileUri);\n                 assetChangeRequest.addResource(photoAccessHelper.ResourceType.VIDEO_RESOURCE, videoFileUri);\n                 await phAccessHelper.applyChanges(assetChangeRequest);\n                 console.info('create moving photo successfully, uri: ' + assetChangeRequest.getAsset().uri);\n               } catch (err) {\n                 console.error(`create moving photo failed with error: ${err.code}, ${err.message}`);\n               }\n             } else {\n               console.error('SaveButtonOnClickResult create moving photo failed');\n             }\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
获取动态照片对象
 应用可以通过Picker的方式获取用户媒体库里的动态照片对象，后续可用于在应用内播放动态照片，或是读取动态照片资源进行其他操作（如上传到应用共享给他人浏览等）。 应用也可以通过传入应用沙箱的应用文件图片和视频fileUri的方式构造应用本地的动态照片对象。 
获取到动态照片对象后，如需播放动态照片请使用MovingPhotoView组件。
[h2]获取媒体库动态照片对象
 通过Picker选择动态照片的媒体文件uri。 调用PhotoAccessHelper.getAssets和FetchResult.getFirstObject接口获取uri对应的PhotoAsset资产。 调用MediaAssetManager.requestMovingPhoto获取PhotoAsset对应的动态照片对象（MovingPhoto）。 
import { photoAccessHelper } from '@kit.MediaLibraryKit';\nimport { dataSharePredicates } from '@kit.ArkData';\nlet context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  try {\n    // picker选择动态照片uri\n    let photoSelectOptions = new photoAccessHelper.PhotoSelectOptions();\n    photoSelectOptions.MIMEType = photoAccessHelper.PhotoViewMIMETypes.MOVING_PHOTO_IMAGE_TYPE;\n    photoSelectOptions.maxSelectNumber = 9;\n    let photoViewPicker = new photoAccessHelper.PhotoViewPicker();\n    let photoSelectResult = await photoViewPicker.select(photoSelectOptions);\n    let uris = photoSelectResult.photoUris;\n    for (let i = 0; i < uris.length; i++) {\n      // 获取uri对应的PhotoAsset资产\n      let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n      predicates.equalTo(photoAccessHelper.PhotoKeys.URI, uris[i]);\n      let fetchOption: photoAccessHelper.FetchOptions = {\n        fetchColumns: [],\n        predicates: predicates\n      };\n      let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = await phAccessHelper.getAssets(fetchOption);\n      let photoAsset: photoAccessHelper.PhotoAsset = await fetchResult.getFirstObject();\n      // 获取PhotoAsset对应的动态照片对象\n      await photoAccessHelper.MediaAssetManager.requestMovingPhoto(context, photoAsset, {\n        deliveryMode: photoAccessHelper.DeliveryMode.FAST_MODE\n      }, {\n        async onDataPrepared(movingPhoto: photoAccessHelper.MovingPhoto) {\n          if (movingPhoto !== undefined) {\n            // 应用可自定义对movingPhoto的处理逻辑\n            console.info('request moving photo successfully, uri: ' + movingPhoto.getUri());\n          }\n        }\n      })\n    }\n  } catch (err) {\n    console.error(`request moving photo failed with error: ${err.code}, ${err.message}`);\n  }\n}
[h2]获取应用沙箱动态照片对象
调用MediaAssetManager.loadMovingPhoto加载应用沙箱的动态照片对象（MovingPhoto）。
import { photoAccessHelper } from '@kit.MediaLibraryKit';\nlet context = getContext(this);\n\nasync function example() {\n  try {\n    let imageFileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/local_moving_photo.jpg';\n    let videoFileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/local_moving_photo.mp4';\n    let movingPhoto = await photoAccessHelper.MediaAssetManager.loadMovingPhoto(context, imageFileUri, videoFileUri);\n    console.info('load moving photo successfully');\n  } catch (err) {\n    console.error(`load moving photo failed with error: ${err.code}, ${err.message}`);\n  }\n}
读取动态照片资源
对于一个动态照片对象，应用可以通过MovingPhoto.requestContent导出图片和视频到应用沙箱，或者读取图片或视频的ArrayBuffer内容。
import { photoAccessHelper } from '@kit.MediaLibraryKit';\n\nasync function example(movingPhoto: photoAccessHelper.MovingPhoto) {\n  try {\n    let imageFileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/request_moving_photo.jpg';\n    let videoFileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/request_moving_photo.mp4';\n    await movingPhoto.requestContent(imageFileUri, videoFileUri); // 将动态照片导出到应用沙箱\n    let imageData = await movingPhoto.requestContent(photoAccessHelper.ResourceType.IMAGE_RESOURCE); // 读取图片的ArrayBuffer内容\n    let videoData = await movingPhoto.requestContent(photoAccessHelper.ResourceType.VIDEO_RESOURCE); // 读取视频的ArrayBuffer内容\n  } catch (err) {\n    console.error(`request content of moving photo failed with error: ${err.code}, ${err.message}`);\n  }\n}
