分段式拍照(ArkTS)
分段式拍照是相机的重要功能之一，即应用下发拍照任务后，系统将分多阶段上报不同质量的图片。
 在第一阶段，系统快速上报轻量处理的图片，轻量处理的图片比全质量图低，出图速度快。应用通过回调会收到一个PhotoAsset对象，通过该对象可调用媒体库接口，读取图片或落盘图片。 在第二阶段，相机框架会根据应用的请求图片诉求或者在系统闲时，进行图像增强处理得到全质量图，将处理好的图片传回给媒体库，替换轻量处理的图片。 
通过分段式拍照，优化了系统的拍照响应时延，从而提升用户体验。
应用开发分段式拍照主要分为以下步骤：
 通过PhotoOutput，监听photoAssetAvailable回调，获取photoAccessHelper的PhotoAsset对象。 通过PhotoAsset对象，调用媒体库相关接口，读取或落盘图片。 
 分段式拍照能力是根据设备和模式决定的，不同的设备支持不同的模式，不同的模式下分段式能力也各有不同，所以应用在切换设备或模式后分段式能力可能会发生变化。 分段式拍照能力应用无需主动使能，相机框架会在配流期间判断设备和模式是否支持分段式，如果支持会使能分段式拍照。 
开发步骤
详细的API说明请参考Camera API参考。
 导入依赖，需要导入相机框架、媒体库、图片相关领域依赖。 import { camera } from '@kit.CameraKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { common } from '@kit.AbilityKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit'; 确定拍照输出流。 通过CameraOutputCapability类中的photoProfiles属性，可获取当前设备支持的拍照输出流，通过createPhotoOutput方法创建拍照输出流。 function getPhotoOutput(cameraManager: camera.CameraManager, \n                        cameraOutputCapability: camera.CameraOutputCapability): camera.PhotoOutput | undefined {\n  let photoProfilesArray: Array<camera.Profile> = cameraOutputCapability.photoProfiles;\n  if (!photoProfilesArray) {\n    console.error(\"createOutput photoProfilesArray == null || undefined\");\n  }\n  let photoOutput: camera.PhotoOutput | undefined = undefined;\n  try {\n    photoOutput = cameraManager.createPhotoOutput(photoProfilesArray[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to createPhotoOutput. error: ${JSON.stringify(err)}`);\n  }\n  return photoOutput;\n} 设置拍照photoAssetAvailable的回调。     如果已经注册了photoAssetAvailable回调，并且在Session开始之后又注册了photoAvailable回调，photoAssetAvailable和photoAvailable同时注册，会导致流被重启，仅photoAssetAvailable生效。 不建议开发者同时注册photoAvailable和photoAssetAvailable。   function photoAssetAvailableCallback(err: BusinessError, photoAsset: photoAccessHelper.PhotoAsset): void {\n  if (err) {\n    console.error(`photoAssetAvailable error: ${JSON.stringify(err)}.`);\n    return;\n  }\n  console.info('photoOutPutCallBack photoAssetAvailable');\n  // 开发者可通过photoAsset调用媒体库相关接口，自定义处理图片\n  // 处理方式一：调用媒体库落盘接口保存一阶段图，二阶段图就绪后媒体库会主动帮应用替换落盘图片\n  mediaLibSavePhoto(photoAsset);\n  // 处理方式二：调用媒体库接口请求图片并注册一阶段图或二阶段图buffer回调，自定义使用\n  mediaLibRequestBuffer(photoAsset);\n}\n\nfunction onPhotoOutputPhotoAssetAvailable(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('photoAssetAvailable', photoAssetAvailableCallback);\n}\n\nlet context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function mediaLibSavePhoto(photoAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n  try {\n    let assetChangeRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n    assetChangeRequest.saveCameraPhoto();\n    await phAccessHelper.applyChanges(assetChangeRequest);\n    console.info('apply saveCameraPhoto successfully');\n  } catch (err) {\n    console.error(`apply saveCameraPhoto failed with error: ${err.code}, ${err.message}`);\n  }\n}\n\nclass MediaDataHandler implements photoAccessHelper.MediaAssetDataHandler<ArrayBuffer> {\n  onDataPrepared(data: ArrayBuffer) {\n    if (data === undefined) {\n      console.error('Error occurred when preparing data');\n      return;\n    }\n    // 应用获取到图片buffer后可自定义处理\n    console.info('on image data prepared');\n  }\n}\n\nasync function mediaLibRequestBuffer(photoAsset: photoAccessHelper.PhotoAsset) {\n  let requestOptions: photoAccessHelper.RequestOptions = {\n    // 按照业务需求配置回图模式\n    // FAST_MODE：仅接收一阶段低质量图回调\n    // HIGH_QUALITY_MODE：仅接收二阶段全质量图回调\n    // BALANCE_MODE：接收一阶段及二阶段图片回调\n    deliveryMode: photoAccessHelper.DeliveryMode.FAST_MODE,\n  }\n  const handler = new MediaDataHandler();\n  await photoAccessHelper.MediaAssetManager.requestImageData(context, photoAsset, requestOptions, handler);\n  console.info('requestImageData successfully');\n} 落盘图片参考媒体库接口：saveCameraPhoto 请求图片参考媒体库接口：requestImageData 和 onDataPrepared 拍照时的会话配置及触发拍照的方式，与普通拍照相同，请参考拍照的步骤4-5。 
状态监听
在相机应用开发过程中，可以随时监听拍照输出流状态，包括拍照流开始、拍照帧的开始与结束、拍照输出流的错误。
 通过注册固定的captureStart回调函数获取监听拍照开始结果，photoOutput创建成功时即可监听，相机设备已经准备开始这次拍照时触发，该事件返回此次拍照的captureId。 function onPhotoOutputCaptureStart(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('captureStartWithInfo', (err: BusinessError, captureStartInfo: camera.CaptureStartInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info(`photo capture started, captureId : ${captureStartInfo.captureId}`);\n  });\n} 通过注册固定的captureEnd回调函数获取监听拍照结束结果，photoOutput创建成功时即可监听，该事件返回结果为拍照完全结束后的相关信息CaptureEndInfo。 function onPhotoOutputCaptureEnd(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info(`photo capture end, captureId : ${captureEndInfo.captureId}`);\n    console.info(`frameCount : ${captureEndInfo.frameCount}`);\n  });\n} 通过注册固定的captureReady回调函数获取监听可拍下一张结果，photoOutput创建成功时即可监听，当下一张可拍时触发，该事件返回结果为下一张可拍的相关信息。 function onPhotoOutputCaptureReady(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('captureReady', (err: BusinessError) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info(`photo capture ready`);\n  });\n} 通过注册固定的error回调函数获取监听拍照输出流的错误结果。callback返回拍照输出接口使用错误时的对应错误码，错误码类型参见Camera错误码。 function onPhotoOutputError(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('error', (error: BusinessError) => {\n    console.error(`Photo output error code: ${error.code}`);\n  });\n} 
