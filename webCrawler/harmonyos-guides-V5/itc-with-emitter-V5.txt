使用Emitter进行线程间通信
Emitter是一种作用在进程内的事件处理机制，为应用程序提供订阅事件、发布事件、取消事件订阅的能力。
场景介绍
Emitter用于同一进程内相同线程或不同线程间的事件处理，事件异步执行。使用时需要先订阅一个事件，然后发布该事件，发布完成后Emitter会将已发布的事件分发给订阅者，订阅者就会执行该事件订阅时设置的回调方法。当不需要订阅该事件时应及时取消订阅释放Emitter资源。
运作机制
Emitter通过维护一个内部事件队列，来进行任务分发。应用需要先订阅某个事件并设置好该事件的回调方法，当应用程序发布事件后，就会往队列里面插入一个事件。任务队列会串行执行队列里面的任务，执行任务时会调用该任务订阅者的回调方法进行事件处理。
接口说明
详细请参见Emitter接口文档。
开发步骤
使用Emitter实现事件订阅、事件发送以及事件删除，开发步骤如下。
 导入模块。 import { emitter } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'ProcessModel';\nconst DOMAIN_NUMBER: number = 0xFF00; 订阅事件。 订阅事件使用on（持续订阅）或者once（单次订阅）接口进行订阅，设置要订阅的事件以及接收到事件后的回调函数。  // 定义一个eventId为1的事件。\n let event: emitter.InnerEvent = {\n   eventId: 1\n };\n \n // on订阅事件，收到eventId为1的事件后执行回调函数。\n emitter.on(event, () => {\n   hilog.info(DOMAIN_NUMBER, TAG, 'on callback');\n }); // 收到eventId为1的事件后执行回调函数。\n// 注意：once订阅只接收一次事件，on订阅则一直接收直到取消订阅为止。\nemitter.once(event, () => {\n  hilog.info(DOMAIN_NUMBER, TAG, 'once callback');\n}); 发送事件。 发送事件使用emit接口进行发送，设置要发送的事件以及要传递的参数。 // 定义一个eventId为1的事件，事件优先级为Low。\nlet event: emitter.InnerEvent = {\n  eventId: 1,\n  priority: emitter.EventPriority.LOW\n};\n\n//订阅该事件，并接收eventData数据。\nemitter.once(event, (eventData : emitter.EventData) => {\n  hilog.info(DOMAIN_NUMBER, TAG, 'enter callback, eventData-content:' + eventData?.data?.content);\n  hilog.info(DOMAIN_NUMBER, TAG, 'enter callback, eventData-id:' + eventData?.data?.id);\n  hilog.info(DOMAIN_NUMBER, TAG, 'enter callback, eventData-isEmpty:' + eventData?.data?.isEmpty);\n});\n\nlet eventData: emitter.EventData = {\n  data: {\n    content: 'emitter',\n    id: 1,\n    isEmpty: false\n  }\n};\n\n// 发送eventId为1的事件，事件内容为eventData。\nemitter.emit(event, eventData); 取消事件订阅。     当不需要订阅某个事件时，需要及时取消订阅避免造成内存泄漏。   取消事件订阅使用off接口进行取消，设置要取消的事件ID。 // 取消eventId为1的事件。\nemitter.off(1); 
