DRM系统管理(ArkTS)
DRM系统管理（MediaKeySystem）支持MediaKeySystem实例管理、设备DRM证书申请与处理、会话实例管理、离线媒体密钥管理、获取DRM度量统计信息、设备属性等。在使用DRM Kit功能时，先查询设备是否支持对应DRM解决方案的DRM功能。在DRM Kit里DRM解决方案以插件形式存在，所以也叫DRM插件。
开发步骤
详细的API说明请参考DRM API参考。
 导入相关接口，导入方法如下。 import { drm } from '@kit.DrmKit'; 导入BusinessError模块，用于获取drm模块相关接口抛出的错误码。 import { BusinessError } from '@kit.BasicServicesKit'; 查询设备是否支持对应的DRM解决方案。     如果查询为false，说明该设备不支持对应的DRM解决方案。   let isSupported: boolean = drm.isMediaKeySystemSupported(\"com.wiseplay.drm\", \"video/avc\", drm.ContentProtectionLevel.CONTENT_PROTECTION_LEVEL_SW_CRYPTO); （可选）获取设备上DRM解决方案的名称和唯一标识的列表。     如果查询出的数组为空，说明该设备中不存在支持的DRM解决方案。   let description: drm.MediaKeySystemDescription[] = drm.getMediaKeySystems(); 创建MediaKeySystem实例。     如果创建失败则返回undefined，说明该设备不支持DRM能力。   let mediaKeySystem: drm.MediaKeySystem = drm.createMediaKeySystem(\"com.wiseplay.drm\"); （可选）获取指定DRM解决方案名称对应的唯一标识。     如果查询出的uuid的长度为0，说明该设备中不存在支持的DRM解决方案。   let uuid: string = drm.getMediaKeySystemUuid(\"com.wiseplay.drm\"); （可选）设置和获取DRM解决方案支持属性值。 // DRM解决方案支持属性设置时，设置DRM解决方案支持的字符串类型的属性值\nmediaKeySystem.setConfigurationString(\"configName\", \"configValue\");\n// 获取字符串类型的属性值\nlet configValueString : string = mediaKeySystem.getConfigurationString(\"version\");\nlet configValueUint8ArrayA: Uint8Array = new Uint8Array([0x00, 0x00, 0x00, 0x00]);\n// DRM解决方案支持属性设置时，设置DRM解决方案支持的字符数组类型的属性值\nmediaKeySystem.setConfigurationByteArray(\"Uint8ArrayConfigName\", configValueUint8ArrayA);\n// 获取字符数组类型的属性值\nlet configValueUint8ArrayB: Uint8Array = mediaKeySystem.getConfigurationByteArray(\"Uint8ArrayConfigName\"); （可选）获取设备支持的最大内容保护级别。 let contentProtectionLevel: drm.ContentProtectionLevel = drm.ContentProtectionLevel.CONTENT_PROTECTION_LEVEL_UNKNOWN;\ntry {\n  contentProtectionLevel = mediaKeySystem.getMaxContentProtectionLevel();\n} catch (err) {\n  let error = err as BusinessError;\n  console.error(`getMaxContentProtectionLevel ERROR: ${error}`);\n} 状态监听。 监听MediaKeySystem设备DRM证书请求事件。 通过注册的keySystemRequired回调函数监听设备DRM证书请求，MediaKeySystem创建成功时即可监听，需要设备DRM证书时触发。 mediaKeySystem.on('keySystemRequired', (eventInfo: drm.EventInfo) => {\n  console.log('keySystemRequired' + 'extra:' + eventInfo.extraInfo + ' data:' + eventInfo.info);\n}); （可选）获取设备DRM证书状态。 let certificateStatus: drm.CertificateStatus = mediaKeySystem.getCertificateStatus(); 生成设备DRM证书请求。 
DRM解决方案创建MediaKeySession会话时，如果没有设备DRM证书会触发DRM证书请求事件，此时，先获取设备上设备DRM证书状态，若设备上没有DRM证书或DRM证书状态异常（状态不是drm.CertificateStatus.CERT_STATUS_PROVISIONED），生成设备DRM证书请求。
  if(certificateStatus != drm.CertificateStatus.CERT_STATUS_PROVISIONED){\n    mediaKeySystem.generateKeySystemRequest().then(async (drmRequest: drm.ProvisionRequest) => {\n      console.info(\"generateKeySystemRequest success\", drmRequest.data, drmRequest.defaultURL);\n    }).catch((err:BusinessError) =>{\n        console.info(\"generateKeySystemRequest err end\", err.code);\n     });\n  } else {\n    console.info(\"The certificate already exists.\");\n  }
 处理设备DRM证书响应。 
在将设备DRM证书请求发送到DRM服务获取设备DRM证书请求响应后，处理设备DRM证书响应。
  // 将设备DRM证书请求返回的drmRequest.data通过网络请求发送给DRM证书服务获取设备DRM证书请求响应，设置设备DRM证书请求响应\n  let provisionResponseByte = new Uint8Array([0x00, 0x00, 0x00, 0x00]);\n  mediaKeySystem.processKeySystemResponse(provisionResponseByte).then(() => {\n    console.info(\"processKeySystemResponse success\");\n  }).catch((err:BusinessError) =>{\n    console.info(\"processKeySystemResponse err end\", err.code);\n  });
 创建MediaKeySession会话。 创建指定内容保护级别的MediaKeySession会话、或创建DRM解决方案默认内容保护级别的MediaKeySession会话。 let mediaKeySession: drm.MediaKeySession = mediaKeySystem.createMediaKeySession(); （可选）获取离线媒体密钥标识列表，媒体密钥标识用于对离线媒体密钥的管理。 let offlineMediaKeyIds: Uint8Array[] = mediaKeySystem.getOfflineMediaKeyIds(); （可选）获取离线媒体密钥状态。 try {\n  let offlineMediaKeyStatus: drm.OfflineMediaKeyStatus = mediaKeySystem.getOfflineMediaKeyStatus(offlineMediaKeyIds[0]);\n} catch (err) {\n  let error = err as BusinessError;\n  console.error(`getOfflineMediaKeyStatus ERROR: ${error}`);\n} （可选）移除离线媒体密钥。 try {\n  mediaKeySystem.clearOfflineMediaKeys(offlineMediaKeyIds[0]);\n} catch (err) {\n  let error = err as BusinessError;\n  console.error(`clearOfflineMediaKeys ERROR: ${error}`);\n} （可选）获取DRM度量记录，包括当前会话数、插件版本信息、解密次数和解密失败次数等。 let statisticKeyValue: drm.StatisticKeyValue[] = mediaKeySystem.getStatistics(); 销毁MediaKeySession实例。 完成加密媒体解密，MediaKeySession实例不再使用时，销毁MediaKeySession实例。 // MediaKeySession实例使用完需要进行资源释放\nmediaKeySession.destroy(); 销毁MediaKeySystem实例。 完成DRM功能使用，MediaKeySystem实例不再使用，销毁MediaKeySystem实例。 // MediaKeySystem实例使用完需要进行资源释放\nmediaKeySystem.destroy(); 
