@Builder装饰器：自定义构建函数
ArkUI提供了一种轻量的UI元素复用机制@Builder，其内部UI结构固定，仅与使用方进行数据传递，开发者可以将重复使用的UI元素抽象成一个方法，在build方法里调用。
为了简化语言，我们将@Builder装饰的函数也称为“自定义构建函数”。
在阅读本文档前，建议提前阅读：基本语法概述，声明式UI描述，自定义组件-创建自定义组件。
从API version 9开始，该装饰器支持在ArkTS卡片中使用。
从API version 11开始，该装饰器支持在元服务中使用。
装饰器使用说明
@Builder装饰器有两种使用方式，分别是定义在自定义组件内部的私有自定义构建函数和定义在全局的全局自定义构建函数。
[h2]私有自定义构建函数
定义的语法：
@Entry\n@Component\nstruct BuilderDemo {\n  @Builder\n  showTextBuilder() {\n    Text('Hello World')\n      .fontSize(30)\n      .fontWeight(FontWeight.Bold)\n  }\n  @Builder\n  showTextValueBuilder(param: string) {\n    Text(param)\n      .fontSize(30)\n      .fontWeight(FontWeight.Bold)\n  }\n  build() {\n    Column() {\n      // 无参数\n      this.showTextBuilder()\n      // 有参数\n      this.showTextValueBuilder('Hello @Builder')\n    }\n  }\n}
使用方法：
this.showTextBuilder()
允许在自定义组件内定义一个或多个@Builder方法，该方法被认为是该组件的私有、特殊类型的成员函数。 私有自定义构建函数允许在自定义组件内、build方法和其他自定义构建函数中调用。 在自定义函数体中，this指代当前所属组件，组件的状态变量可以在自定义构建函数内访问。建议通过this访问自定义组件的状态变量而不是参数传递。 
[h2]全局自定义构建函数
定义的语法：
@Builder\nfunction showTextBuilder() {\n  Text('Hello World')\n    .fontSize(30)\n    .fontWeight(FontWeight.Bold)\n}\n@Entry\n@Component\nstruct BuilderDemo {\n  build() {\n    Column() {\n      showTextBuilder()\n    }\n  }\n}
使用方法：
showTextBuilder()
如果不涉及组件状态变化，建议使用全局的自定义构建方法。 全局自定义构建函数允许在build方法和其他自定义构建函数中调用。 
参数传递规则
自定义构建函数的参数传递有按值传递和按引用传递两种，均需遵守以下规则：
参数的类型必须与参数声明的类型一致，不允许undefined、null和返回undefined、null的表达式。 在@Builder修饰的函数内部，不允许改变参数值。 @Builder内UI语法遵循UI语法规则。 只有传入一个参数，且参数需要直接传入对象字面量才会按引用传递该参数，其余传递方式均为按值传递。 
[h2]按值传递参数
调用@Builder装饰的函数默认按值传递。当传递的参数为状态变量时，状态变量的改变不会引起@Builder方法内的UI刷新。所以当使用状态变量的时候，推荐使用按引用传递。
@Builder function overBuilder(paramA1: string) {\n  Row() {\n    Text(`UseStateVarByValue: ${paramA1} `)\n  }\n}\n@Entry\n@Component\nstruct Parent {\n  @State label: string = 'Hello';\n  build() {\n    Column() {\n      overBuilder(this.label)\n    }\n  }\n}
[h2]按引用传递参数
按引用传递参数时，传递的参数可为状态变量，且状态变量的改变会引起@Builder方法内的UI刷新。
class Tmp {\n  paramA1: string = '';\n}\n\n@Builder function overBuilder(params: Tmp) {\n  Row() {\n    Text(`UseStateVarByReference: ${params.paramA1} `)\n  }\n}\n@Entry\n@Component\nstruct Parent {\n  @State label: string = 'Hello';\n  build() {\n    Column() {\n      // 在父组件中调用overBuilder组件时，\n      // 把this.label通过引用传递的方式传给overBuilder组件。\n      overBuilder({ paramA1: this.label })\n      Button('Click me').onClick(() => {\n        // 单击Click me后，UI文本从Hello更改为ArkUI。\n        this.label = 'ArkUI';\n      })\n    }\n  }\n}
限制条件
@Builder装饰的函数内部，不允许修改参数值，否则框架会抛出运行时错误。开发者可以在调用@Builder的自定义组件里改变其参数。请参考在@Builder装饰的函数内部修改入参内容。 @Builder通过按引用传递的方式传入参数，才会触发动态渲染UI，并且参数只能是一个。请参考按引用传递参数。 @Builder如果传入的参数是两个或两个以上，不会触发动态渲染UI。请参考@Builder存在两个或者两个以上参数。 @Builder传入的参数中同时包含按值传递和按引用传递两种方式，不会触发动态渲染UI。请参考@Builder存在两个或者两个以上参数。 @Builder的参数必须按照对象字面量的形式，把所需要的属性一一传入，才会触发动态渲染UI。请参考@Builder存在两个或者两个以上参数。 
使用场景
[h2]自定义组件内使用自定义构建函数
创建私有的@Builder方法，在Column里面使用this.builder()方式调用，通过aboutToAppear生命周期函数和按钮的点击事件改变builder_value的内容，实现动态渲染UI。
@Entry\n@Component\nstruct PrivateBuilder {\n  @State builder_value: string = 'Hello';\n\n  @Builder builder() {\n    Column(){\n      Text(this.builder_value)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n\n  aboutToAppear(): void {\n    setTimeout(() => {\n      this.builder_value = 'Hello World';\n    },3000)\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.builder_value)\n          .fontSize(30)\n          .fontWeight(FontWeight.Bold)\n        this.builder()\n        Button('点击改变builder_value内容')\n          .onClick(() => {\n            this.builder_value ='builder_value被点击了';\n          })\n      }\n    }\n  }\n}
[h2]使用全局自定义构建函数
创建全局的@Builder方法，在Column里面使用overBuilder()方式调用，通过以对象字面量的形式传递参数，无论是简单类型还是复杂类型，值的改变都会引起UI界面的刷新。
class ChildTmp {\n  val: number = 1;\n}\n\nclass Tmp {\n  str_value: string = 'Hello';\n  num_value: number = 0;\n  tmp_value: ChildTmp = new ChildTmp();\n  arrayTmp_value: Array<ChildTmp> = [];\n}\n\n@Builder function overBuilder(param: Tmp) {\n  Column() {\n    Text(`str_value: ${param.str_value}`)\n    Text(`num_value: ${param.num_value}`)\n    Text(`tmp_value: ${param.tmp_value.val}`)\n    ForEach(param.arrayTmp_value, (item: ChildTmp) => {\n      Text(`arrayTmp_value: ${item.val}`)\n    }, (item: ChildTmp) => JSON.stringify(item))\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State objParam: Tmp = new Tmp();\n  build() {\n    Column() {\n      Text('通过调用@Builder渲染UI界面')\n        .fontSize(20)\n      overBuilder({str_value: this.objParam.str_value, num_value: this.objParam.num_value,\n       tmp_value: this.objParam.tmp_value, arrayTmp_value: this.objParam.arrayTmp_value})\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Button('点击改变参数值').onClick(() => {\n        this.objParam.str_value = 'Hello World';\n        this.objParam.num_value = 1;\n        this.objParam.tmp_value.val = 8;\n        const child_value: ChildTmp = {\n          val: 2\n        }\n        this.objParam.arrayTmp_value.push(child_value)\n      })\n    }\n  }\n}
[h2]修改装饰器修饰的变量触发UI刷新
此种场景@Builder只是用来展示Text组件，没有参与动态UI刷新的功能，Text组件中值的变化是使用了装饰器的特性，监听到值的改变触发的UI刷新，而不是通过@Builder的能力触发的。
class Tmp {\n  str_value: string = 'Hello';\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State objParam: Tmp = new Tmp();\n  @State label: string = 'World';\n\n  @Builder privateBuilder() {\n    Column() {\n      Text(`wrapBuilder str_value: ${this.objParam.str_value}`)\n      Text(`wrapBuilder num: ${this.label}`)\n    }\n  }\n\n  build() {\n    Column() {\n      Text('通过调用@Builder渲染UI界面')\n        .fontSize(20)\n      this.privateBuilder()\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Button('点击改变参数值').onClick(() => {\n        this.objParam.str_value = 'str_value Hello World';\n        this.label = 'label Hello World'\n      })\n    }\n  }\n}
[h2]使用全局和局部的@Builder传入customBuilder类型
当某个参数类型为customBuilder的时候，可以把定义的@Builder函数传入，因为customBuilder实际是一个Function(() => any)或者是void类型，而@Builder实际也是一个Function类型。此场景中通过把@Builder传入已实现特定的效果。
@Builder\nfunction overBuilder() {\n  Row() {\n    Text('全局 Builder')\n      .fontSize(30)\n      .fontWeight(FontWeight.Bold)\n  }\n}\n\n@Entry\n@Component\nstruct customBuilderDemo {\n  @State arr: number[] = [0, 1, 2, 3, 4];\n\n  @Builder privateBuilder() {\n    Row() {\n      Text('局部 Builder')\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n\n  build() {\n    Column() {\n      List({ space: 10 }) {\n        ForEach(this.arr, (item: number) => {\n          ListItem(){\n            Text(`${item}`)\n              .width('100%')\n              .height(100)\n              .fontSize(16)\n              .textAlign(TextAlign.Center)\n              .borderRadius(10)\n              .backgroundColor(0xFFFFFF)\n          }\n            .swipeAction({\n              start: {\n                builder: overBuilder()\n              },\n              end: {\n                builder: () => { this.privateBuilder() }\n              }\n            })\n        }, (item: string) => JSON.stringify(item))\n      }\n    }\n  }\n}
[h2]多层@Builder方法嵌套使用
在@Builder方法内调用自定义组件或者其他@Builder方法，以实现多个@Builder嵌套使用的场景，要想实现最里面的@Builder动态UI刷新功能，必须要保证每层调用@Builder的地方使用按引用传递的方式。这里的$$也可以换成其他名称，$$不是必须的参数形式。
class Tmp {\n  paramA1: string = '';\n}\n\n@Builder function parentBuilder($$: Tmp) {\n  Row() {\n    Column() {\n      Text(`parentBuilder===${$$.paramA1}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      HelloComponent({message: $$.paramA1})\n      childBuilder({paramA1: $$.paramA1})\n    }\n  }\n}\n\n@Component\nstruct HelloComponent {\n  @Prop message: string = '';\n\n  build() {\n    Row() {\n      Text(`HelloComponent===${this.message}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n}\n\n@Builder\nfunction childBuilder($$: Tmp) {\n  Row() {\n    Column() {\n      Text(`childBuilder===${$$.paramA1}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      HelloChildComponent({message: $$.paramA1})\n      grandsonBuilder({paramA1: $$.paramA1})\n    }\n  }\n}\n\n@Component\nstruct HelloChildComponent {\n  @Prop message: string = '';\n  build() {\n    Row() {\n      Text(`HelloChildComponent===${this.message}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n}\n\n@Builder function grandsonBuilder($$: Tmp) {\n  Row() {\n    Column() {\n      Text(`grandsonBuilder===${$$.paramA1}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      HelloGrandsonComponent({message: $$.paramA1})\n    }\n  }\n}\n\n@Component\nstruct HelloGrandsonComponent {\n  @Prop message: string;\n  build() {\n    Row() {\n      Text(`HelloGrandsonComponent===${this.message}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State label: string = 'Hello';\n  build() {\n    Column() {\n      parentBuilder({paramA1: this.label})\n      Button('Click me').onClick(() => {\n        this.label = 'ArkUI';\n      })\n    }\n  }\n}
[h2]@Builder函数联合V2装饰器使用
使用全局@Builder和局部@Builder在@ComponentV2修饰的自定义组件中调用，配合@ObservedV2和@Trace装饰器来监听具体值的变化，以达到触发UI刷新的功能。
@ObservedV2\nclass Info {\n  @Trace name: string = '';\n  @Trace age: number = 0;\n}\n\n@Builder\nfunction overBuilder(param: Info) {\n  Column() {\n    Text(`全局@Builder name :${param.name}`)\n      .fontSize(30)\n      .fontWeight(FontWeight.Bold)\n    Text(`全局@Builder age :${param.age}`)\n      .fontSize(30)\n      .fontWeight(FontWeight.Bold)\n  }\n}\n\n@ComponentV2\nstruct ChildPage {\n  @Require @Param childInfo: Info;\n  build() {\n    overBuilder({name: this.childInfo.name, age: this.childInfo.age})\n  }\n}\n\n@Entry\n@ComponentV2\nstruct ParentPage {\n  info1: Info = { name: \"Tom\", age: 25 };\n  @Local info2: Info = { name: \"Tom\", age: 25 };\n\n  @Builder\n  privateBuilder() {\n    Column() {\n      Text(`局部@Builder name :${this.info1.name}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      Text(`局部@Builder age :${this.info1.age}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n\n  build() {\n    Column() {\n      Text(`info1: ${this.info1.name}  ${this.info1.age}`) // Text1\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      this.privateBuilder() // 调用局部@Builder\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Text(`info2: ${this.info2.name}  ${this.info2.age}`) // Text2\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      overBuilder({ name: this.info2.name, age: this.info2.age}) // 调用全局@Builder\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Text(`info1: ${this.info1.name}  ${this.info1.age}`) // Text1\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      ChildPage({ childInfo: this.info1}) // 调用自定义组件\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Text(`info2: ${this.info2.name}  ${this.info2.age}`) // Text2\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n      ChildPage({ childInfo: this.info2}) // 调用自定义组件\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Button(\"change info1&info2\")\n        .onClick(() => {\n          this.info1 = { name: \"Cat\", age: 18}; // Text1不会刷新，原因是没有装饰器修饰监听不到值的改变。\n          this.info2 = { name: \"Cat\", age: 18}; // Text2会刷新，原因是有装饰器修饰，可以监听到值的改变。\n        })\n    }\n  }\n}
常见问题
[h2]@Builder存在两个或者两个以上参数
当参数存在两个或者两个以上的时候，就算通过对象字面量的形式传递，值的改变也不会引起UI刷新。
【反例】
class GlobalTmp {\n  str_value: string = 'Hello';\n}\n\n@Builder function overBuilder(param: GlobalTmp, num: number) {\n  Column() {\n    Text(`str_value: ${param.str_value}`)\n    Text(`num: ${num}`)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State objParam: GlobalTmp = new GlobalTmp();\n  @State num: number = 0;\n  build() {\n    Column() {\n      Text('通过调用@Builder渲染UI界面')\n        .fontSize(20)\n      // 使用了两个参数，用法错误。\n      overBuilder({str_value: this.objParam.str_value}, this.num)\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Button('点击改变参数值').onClick(() => {\n        this.objParam.str_value = 'Hello World';\n        this.num = 1;\n      })\n    }\n  }\n}
【反例】
class GlobalTmp {\n  str_value: string = 'Hello';\n}\nclass SecondTmp {\n  num_value: number = 0;\n}\n@Builder function overBuilder(param: GlobalTmp, num: SecondTmp) {\n  Column() {\n    Text(`str_value: ${param.str_value}`)\n    Text(`num: ${num.num_value}`)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State strParam: GlobalTmp = new GlobalTmp();\n  @State numParam: SecondTmp = new SecondTmp();\n  build() {\n    Column() {\n      Text('通过调用@Builder渲染UI界面')\n        .fontSize(20)\n      // 使用了两个参数，用法错误。\n      overBuilder({str_value: this.strParam.str_value}, {num_value: this.numParam.num_value})\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Button('点击改变参数值').onClick(() => {\n        this.strParam.str_value = 'Hello World';\n        this.numParam.num_value = 1;\n      })\n    }\n  }\n}
@Builder只接受一个参数，当传入一个参数的时候，通过对象字面量的形式传递，值的改变会引起UI的刷新。
【正例】
class GlobalTmp {\n  str_value: string = 'Hello';\n  num_value: number = 0;\n}\n@Builder function overBuilder(param: GlobalTmp) {\n  Column() {\n    Text(`str_value: ${param.str_value}`)\n    Text(`num: ${param.num_value}`)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State objParam: GlobalTmp = new GlobalTmp();\n  build() {\n    Column() {\n      Text('通过调用@Builder渲染UI界面')\n        .fontSize(20)\n      overBuilder({str_value: this.objParam.str_value, num_value: this.objParam.num_value})\n      Line()\n        .width('100%')\n        .height(10)\n        .backgroundColor('#000000').margin(10)\n      Button('点击改变参数值').onClick(() => {\n        this.objParam.str_value = 'Hello World';\n        this.objParam.num_value = 1;\n      })\n    }\n  }\n}
[h2]使用@ComponentV2装饰器触发动态刷新
使用按值传递的方式，在@ComponentV2装饰器修饰的自定义组件里配合使用@ObservedV2和@Trace装饰器可以实现刷新UI功能。
【反例】
在@ComponentV2装饰的自定义组件中，使用简单数据类型不可以触发UI的刷新。
@ObservedV2\nclass ParamTmp {\n  @Trace count : number = 0;\n}\n\n@Builder\nfunction renderNumber(paramNum: number) {\n  Text(`paramNum : ${paramNum}`)\n    .fontSize(30)\n    .fontWeight(FontWeight.Bold)\n}\n\n@Entry\n@ComponentV2\nstruct PageBuilder {\n  @Local class_value: ParamTmp = new ParamTmp();\n  // 此处使用简单数据类型不支持刷新UI的能力。\n  @Local num_value: number = 0;\n  private progressTimer: number = -1;\n\n  aboutToAppear(): void {\n    this.progressTimer = setInterval(() => {\n      if (this.class_value.count < 100) {\n        this.class_value.count += 5;\n        this.num_value += 5;\n      } else {\n        clearInterval(this.progressTimer);\n      }\n    }, 500);\n  }\n\n  build() {\n    Column() {\n      renderNumber(this.num_value)\n    }\n    .width('100%')\n    .height('100%')\n    .padding(50)\n  }\n}
【正例】
在@ComponentV2装饰中，只有使用@ObservedV2修饰的ParamTmp类和@Trace修饰的count属性才可以触发UI的刷新。
@ObservedV2\nclass ParamTmp {\n  @Trace count : number = 0;\n}\n\n@Builder\nfunction renderText(param: ParamTmp) {\n  Column() {\n    Text(`param : ${param.count}`)\n      .fontSize(20)\n      .fontWeight(FontWeight.Bold)\n  }\n}\n\n@Builder\nfunction renderMap(paramMap: Map<string,number>) {\n  Text(`paramMap : ${paramMap.get('name')}`)\n    .fontSize(20)\n    .fontWeight(FontWeight.Bold)\n}\n\n@Builder\nfunction renderSet(paramSet: Set<number>) {\n  Text(`paramSet : ${paramSet.size}`)\n    .fontSize(20)\n    .fontWeight(FontWeight.Bold)\n}\n\n@Builder\nfunction renderNumberArr(paramNumArr: number[]) {\n  Text(`paramNumArr : ${paramNumArr[0]}`)\n    .fontSize(20)\n    .fontWeight(FontWeight.Bold)\n}\n\n@Entry\n@ComponentV2\nstruct PageBuilder {\n  @Local builderParams: ParamTmp = new ParamTmp();\n  @Local map_value: Map<string,number> = new Map();\n  @Local set_value: Set<number> = new Set([0]);\n  @Local numArr_value: number[] = [0];\n  private progressTimer: number = -1;\n\n  aboutToAppear(): void {\n    this.progressTimer = setInterval(() => {\n      if (this.builderParams.count < 100) {\n        this.builderParams.count += 5;\n        this.map_value.set('name', this.builderParams.count);\n        this.set_value.add(this.builderParams.count);\n        this.numArr_value[0] = this.builderParams.count;\n      } else {\n        clearInterval(this.progressTimer);\n      }\n    }, 500);\n  }\n\n  @Builder\n  localBuilder() {\n    Column() {\n      Text(`localBuilder : ${this.builderParams.count}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n    }\n  }\n\n  build() {\n    Column() {\n      this.localBuilder()\n      Text(`builderParams :${this.builderParams.count}`)\n        .fontSize(20)\n        .fontWeight(FontWeight.Bold)\n      renderText(this.builderParams)\n      renderText({ count: this.builderParams.count })\n      renderMap(this.map_value)\n      renderSet(this.set_value)\n      renderNumberArr(this.numArr_value)\n    }\n    .width('100%')\n    .height('100%')\n  }\n}
[h2]在@Builder装饰的函数内部修改入参内容
【反例】
interface Temp {\n  paramA: string;\n}\n\n@Builder function overBuilder(param: Temp) {\n  Row() {\n    Column() {\n      Button(`overBuilder === ${param.paramA}`)\n        .onClick(() => {\n          // 错误写法，不允许在@Builder装饰的函数内部修改参数值\n          param.paramA = 'Yes';\n      })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State label: string = 'Hello';\n\n  build() {\n    Column() {\n      overBuilder({paramA: this.label})\n      Button('click me')\n        .onClick(() => {\n          this.label = 'ArkUI';\n        })\n    }\n  }\n}
【正例】
interface Temp {\n  paramA: string;\n}\n\n@Builder function overBuilder(param: Temp) {\n  Row() {\n    Column() {\n      Button(`overBuilder === ${param.paramA}`)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State label: string = 'Hello';\n\n  build() {\n    Column() {\n      overBuilder({paramA: this.label})\n      Button('click me')\n        .onClick(() => {\n          this.label = 'ArkUI';\n        })\n    }\n  }\n}
