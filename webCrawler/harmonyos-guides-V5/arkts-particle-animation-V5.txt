粒子动画
粒子动画是通过在限定区域内随机生成大量粒子的运动，进而组合成的动画效果，通过Particle组件来实现。动画的基本构成元素为单个粒子，这些粒子可以表现为圆点或图片等形式。开发者能够通过对粒子在颜色、透明度、大小、速度、加速度、自旋角度等多个维度上的动态变化做动画，以营造特定的氛围，例如模拟下雪场景时，飘舞的雪花实际上是由一个个雪花粒子的动画效果所构成。
粒子动画的简单实现如下所示。
@Entry\n@Component\nstruct ParticleExample {\n  build() {\n    Stack() {\n      Text()\n        .width(300).height(300).backgroundColor('rgb(240, 250, 255)')\n      Particle({ particles: [\n        {\n          emitter: {\n            particle: {\n              type: ParticleType.POINT, // 粒子类型\n              config: {\n                radius: 5 // 圆点半径\n              },\n              count: 100, // 粒子总数\n            },\n          },\n          color:{\n            range:['rgb(39, 135, 217)','rgb(0, 74, 175)'],//初始颜色范围\n          },\n        },\n      ]\n      }).width(250).height(250)\n    }.width(\"100%\").height(\"100%\").align(Alignment.Center)\n  }\n}
实现粒子发射器
粒子发射器（Particle Emitter）主要定义粒子的初始属性（如类型、位置和颜色），控制粒子的生成速率，以及管理粒子的生命周期。可通过emitter方法调整粒子发射器的位置、发射速率和发射窗口的大小，实现发射器位置的动态更新。
// ...\n@State emitterProperties: Array<EmitterProperty> = [\n  {\n    index: 0,\n    emitRate: 100,\n    position: { x: 60, y: 80 },\n    size: { width: 200, height: 200 }\n  }\n]\n\nParticle(...).width(300).height(300).emitter(this.emitterProperties) // 动态调整粒子发射器的位置\n// ...
设置粒子颜色
可以通过range来确定粒子的初始颜色范围，而distributionType则用于指定粒子初始颜色随机值的分布方式，具体可选择均匀分布或者高斯（正态）分布。
// ...\ncolor: {\n  range: ['rgb(39, 135, 217)','rgb(0, 74, 175)'], // 初始颜色范围\n  distributionType: DistributionType.GAUSSIAN // 初始颜色随机值分布\n},\n// ...
粒子的生命周期
粒子的生命周期（Lifecycle）是粒子从生成至消亡的整个过程，用于确定粒子的存活时间长度。粒子的生命周期可通过设置lifetime和lifetimeRange来指定。
// ...\nemitter: {\n  particle: {\n    // ...\n    lifetime: 300, // 粒子生命周期，单位ms\n    lifetimeRange: 100 // 粒子生命周期取值范围，单位ms\n  },\n  emitRate: 10, // 每秒发射粒子数\n  position: [0, 0],\n  shape: ParticleEmitterShape.RECTANGLE // 发射器形状\n},\ncolor: {\n  range: ['rgb(39, 135, 217)','rgb(0, 74, 175)'], // 初始颜色范围\n},\n// ...
设置粒子扰动场
扰动场（Disturbance Field）是一种影响粒子运动的机制。通过在粒子所在的空间区域内施加特定的力，扰动场能够改变粒子的轨迹和行为，进而实现更为复杂和自然的动画效果。扰动场的配置可以通过disturbanceFields方法来完成。
// ...\nParticle({ particles: [\n  {\n    emitter: // ...\n    color: // ...\n    scale: {\n      range: [0.0, 0.0],\n      updater: {\n        type: ParticleUpdater.CURVE,\n        config: [\n          {\n            from: 0.0,\n            to: 0.5,\n            startMillis: 0,\n            endMillis: 3000,\n            curve: Curve.EaseIn\n          }\n        ]\n      }\n    },\n    acceleration: { //加速度的配置，从大小和方向两个维度变化，speed表示加速度大小，angle表示加速度方向\n      speed: {\n        range: [3, 9],\n        updater: {\n          type: ParticleUpdater.RANDOM,\n          config: [1, 20]\n        }\n      },\n      angle: {\n        range: [90, 90]\n      }\n    }\n\n  }\n]\n}).width(300).height(300).disturbanceFields([{\n  strength: 10,\n  shape: DisturbanceFieldShape.RECT,\n  size: { width: 100, height: 100 },\n  position: { x: 100, y: 100 },\n  feather: 15,\n  noiseScale: 10,\n  noiseFrequency: 15,\n  noiseAmplitude: 5\n}])\n// ... 
