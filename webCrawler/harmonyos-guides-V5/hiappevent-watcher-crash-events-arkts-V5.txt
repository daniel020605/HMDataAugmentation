订阅崩溃事件（ArkTS）
接口说明
API接口的具体使用说明（参数使用限制、具体取值范围等）请参考应用事件打点API文档。
使用ArkTS接口订阅崩溃事件，包含JsError和NativeCrash两种崩溃类型。
事件自定义参数设置接口功能介绍：
订阅接口功能介绍：
开发步骤
以实现对用户点击按钮触发崩溃场景生成的崩溃事件订阅为例，说明开发步骤。
 新建一个ArkTS应用工程，编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，导入依赖模块： import { BusinessError } from '@kit.BasicServicesKit';\nimport { hiAppEvent, hilog } from '@kit.PerformanceAnalysisKit'; 编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，在onCreate函数中设置事件的自定义参数，示例代码如下：  // 开发者完成参数键值对赋值\n let params: Record<string, hiAppEvent.ParamType> = {\n   \"test_data\": 100,\n };\n // 开发者可以设置崩溃事件的自定义参数\n hiAppEvent.setEventParam(params, hiAppEvent.domain.OS, hiAppEvent.event.APP_CRASH).then(() => {\n   hilog.info(0x0000, 'testTag', `HiAppEvent success to set svent param`);\n }).catch((err: BusinessError) => {\n   hilog.error(0x0000, 'testTag', `HiAppEvent code: ${err.code}, message: ${err.message}`);\n }); 编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，在onCreate函数中添加系统事件的订阅，示例代码如下：  hiAppEvent.addWatcher({\n   // 开发者可以自定义观察者名称，系统会使用名称来标识不同的观察者\n   name: \"watcher\",\n   // 开发者可以订阅感兴趣的系统事件，此处是订阅了崩溃事件\n   appEventFilters: [\n     {\n       domain: hiAppEvent.domain.OS,\n       names: [hiAppEvent.event.APP_CRASH]\n     }\n   ],\n   // 开发者可以自行实现订阅实时回调函数，以便对订阅获取到的事件数据进行自定义处理\n   onReceive: (domain: string, appEventGroups: Array<hiAppEvent.AppEventGroup>) => {\n     hilog.info(0x0000, 'testTag', `HiAppEvent onReceive: domain=${domain}`);\n     for (const eventGroup of appEventGroups) {\n       // 开发者可以根据事件集合中的事件名称区分不同的系统事件\n       hilog.info(0x0000, 'testTag', `HiAppEvent eventName=${eventGroup.name}`);\n       for (const eventInfo of eventGroup.appEventInfos) {\n         // 开发者可以对事件集合中的事件数据进行自定义处理，此处是将事件数据打印在日志中\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.domain=${eventInfo.domain}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.name=${eventInfo.name}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.eventType=${eventInfo.eventType}`);\n         // 开发者可以获取到崩溃事件发生的时间戳\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.time=${eventInfo.params['time']}`);\n         // 开发者可以获取到崩溃事件发生的崩溃类型\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.crash_type=${eventInfo.params['crash_type']}`);\n         // 开发者可以获取到崩溃应用的前后台状态\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.foreground=${eventInfo.params['foreground']}`);\n         // 开发者可以获取到崩溃应用的版本信息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.bundle_version=${eventInfo.params['bundle_version']}`);\n         // 开发者可以获取到崩溃应用的包名\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.bundle_name=${eventInfo.params['bundle_name']}`);\n         // 开发者可以获取到崩溃应用的进程id\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.pid=${eventInfo.params['pid']}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.uid=${eventInfo.params['uid']}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.uuid=${eventInfo.params['uuid']}`);\n         // 开发者可以获取到崩溃事件发生的异常类型、异常原因和异常调用栈\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.exception=${JSON.stringify(eventInfo.params['exception'])}`);\n         // 开发者可以获取到崩溃事件发生时日志信息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.hilog.size=${eventInfo.params['hilog'].length}`);\n         // 开发者可以获取到崩溃事件发生时的故障日志文件\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.external_log=${JSON.stringify(eventInfo.params['external_log'])}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.log_over_limit=${eventInfo.params['log_over_limit']}`);\n         // 开发者可以获取到崩溃事件的自定义数据test_data\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.test_data=${eventInfo.params['test_data']}`);\n       }\n     }\n   }\n }); 编辑工程中的“entry > src > main > ets > pages > Index.ets”文件，添加按钮并在其onClick函数构造崩溃场景，以触发崩溃事件，示例代码如下：  Button(\"appCrash\").onClick(()=>{\n   // 在按钮点击函数中构造一个crash场景，触发应用崩溃事件\n   let result: object = JSON.parse(\"\");\n }) 点击DevEco Studio界面中的运行按钮，运行应用工程，然后在应用界面中点击按钮“appCrash”，触发一次崩溃事件。崩溃事件发生后，系统会根据崩溃类型（JsError或NativeCrash）采用不同的栈回溯方式生成崩溃日志，然后再进行回调。其中NativeCrash栈回溯耗时约2秒，实际耗时与业务线程数量、进程间通信耗时有关。JsError触发进程内栈回溯，NativeCrash触发进程外栈回溯，因此NativeCrash栈回溯会比JsError栈回溯更耗时。用户可以订阅崩溃事件，栈回溯完成后会异步上报，不会阻塞当前业务。 下次应用启动后，HiAppEvent将崩溃事件上报给应用已注册的监听，完成回调。并可以在Log窗口看到对系统事件数据的处理日志： HiAppEvent onReceive: domain=OS\nHiAppEvent eventName=APP_CRASH\nHiAppEvent eventInfo.domain=OS\nHiAppEvent eventInfo.name=APP_CRASH\nHiAppEvent eventInfo.eventType=1\nHiAppEvent eventInfo.params.time=1711440614001\nHiAppEvent eventInfo.params.crash_type=JsError\nHiAppEvent eventInfo.params.foreground=true\nHiAppEvent eventInfo.params.bundle_version=1.0.0\nHiAppEvent eventInfo.params.bundle_name=com.example.myapplication\nHiAppEvent eventInfo.params.pid=2043\nHiAppEvent eventInfo.params.uid=20010043\nHiAppEvent eventInfo.params.uuid=b1e953ba0022c112e4502e28e8b3ad6d95cf3c87bae74068038f03b38ce7f66a\nHiAppEvent eventInfo.params.exception={\"message\":\"Unexpected Text in JSON\",\"name\":\"SyntaxError\",\"stack\":\"at anonymous (entry/src/main/ets/pages/Index.ets:55:34)\"}\nHiAppEvent eventInfo.params.hilog.size=90\nHiAppEvent eventInfo.params.external_log=[\"/data/storage/el2/log/hiappevent/APP_CRASH_1711440614112_2043.log\"]\nHiAppEvent eventInfo.params.log_over_limit=false\nHiAppEvent eventInfo.params.test_data=100 
示例代码
 应用异常处理 
