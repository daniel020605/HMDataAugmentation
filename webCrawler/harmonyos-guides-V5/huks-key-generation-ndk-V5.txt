生成密钥(C/C++)
以生成ECC密钥为例，生成随机密钥。具体的场景介绍及支持的算法规格，请参考密钥生成支持的算法。
密钥别名中禁止包含个人数据等敏感信息。
在CMake脚本中链接相关动态库
target_link_libraries(entry PUBLIC libhuks_ndk.z.so)
开发步骤
 指定待生成的密钥别名keyAlias。  密钥别名的最大长度为64字节。 对于不同业务间生成的密钥，HUKS将基于业务身份信息进行存储路径隔离，不会因为和其他业务密钥同名导致冲突。  初始化密钥属性集。通过OH_Huks_InitParamSet、OH_Huks_AddParams、OH_Huks_BuildParamSet构造密钥属性集paramSet。 密钥属性集中必须包含OH_Huks_KeyAlg、OH_Huks_KeySize、OH_Huks_KeyPurpose属性。注：一个密钥只能有一类PURPOSE，并且，生成密钥时指定的用途要与使用时的方式一致，否则会导致异常，请参考密钥用途。 调用OH_Huks_GenerateKeyItem，传入密钥别名和密钥属性集，生成密钥。 
如果业务再次使用相同别名调用HUKS生成密钥，HUKS将生成新密钥并直接覆盖历史的密钥文件。
/* 以下以生成ECC密钥为例 */\n#include \"huks/native_huks_api.h\"\n#include \"huks/native_huks_param.h\"\n#include \"napi/native_api.h\"\n#include <string.h>\nOH_Huks_Result InitParamSet(\n    struct OH_Huks_ParamSet **paramSet,\n    const struct OH_Huks_Param *params,\n    uint32_t paramCount)\n{\n    OH_Huks_Result ret = OH_Huks_InitParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        return ret;\n    }\n    ret = OH_Huks_AddParams(*paramSet, params, paramCount);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    ret = OH_Huks_BuildParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    return ret;\n}\nstruct OH_Huks_Param g_testGenerateKeyParam[] = {\n    {\n        .tag = OH_HUKS_TAG_ALGORITHM,\n        .uint32Param = OH_HUKS_ALG_ECC\n    }, {\n        .tag = OH_HUKS_TAG_PURPOSE,\n        .uint32Param = OH_HUKS_KEY_PURPOSE_AGREE\n    }, {\n        .tag = OH_HUKS_TAG_KEY_SIZE,\n        .uint32Param = OH_HUKS_ECC_KEY_SIZE_256\n    }, {\n        .tag = OH_HUKS_TAG_DIGEST,\n        .uint32Param = OH_HUKS_DIGEST_NONE\n    }\n};\nstatic napi_value GenerateKey(napi_env env, napi_callback_info info)\n{\n    /* 1.确定密钥别名 */\n    const char *alias = \"test_generate\";\n    struct OH_Huks_Blob aliasBlob = { .size = (uint32_t)strlen(alias), .data = (uint8_t *)alias };\n    struct OH_Huks_ParamSet *testGenerateKeyParamSet = nullptr;\n    struct OH_Huks_Result ohResult;\n    do {\n        /* 2.初始化密钥属性集 */\n        ohResult = InitParamSet(&testGenerateKeyParamSet, g_testGenerateKeyParam,\n            sizeof(g_testGenerateKeyParam) / sizeof(OH_Huks_Param));\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        /* 3.生成密钥 */\n        ohResult = OH_Huks_GenerateKeyItem(&aliasBlob, testGenerateKeyParamSet, nullptr);\n    } while (0);\n    OH_Huks_FreeParamSet(&testGenerateKeyParamSet);\n    napi_value ret;\n    napi_create_int32(env, ohResult.errorCode, &ret);\n    return ret;\n}
