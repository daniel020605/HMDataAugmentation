Router切换Navigation
鉴于组件导航(Navigation)支持更丰富的动效、一次开发多端部署能力和更灵活的栈操作。本文主要从页面跳转、动效和生命周期等方面介绍如何从Router切换到Navigation。
页面结构
Router路由的页面是一个@Entry修饰的Component，每一个页面都需要在main_page.json中声明。
// main_page.json\n{\n  \"src\": [\n    \"pages/Index\",\n    \"pages/pageOne\",\n    \"pages/pageTwo\"\n  ]\n}
以下为Router页面的示例。
// index.ets\nimport { router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        Button('router to pageOne', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            router.pushUrl({\n              url: 'pages/pageOne' // 目标url\n            }, router.RouterMode.Standard, (err) => {\n              if (err) {\n                console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n                return;\n              }\n              console.info('Invoke pushUrl succeeded.');\n            })\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
// pageOne.ets\nimport { router } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct pageOne {\n  @State message: string = 'This is pageOne';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        Button('router back to Index', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            router.back();\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
而基于Navigation的路由页面分为导航页和子页，导航页又叫Navbar，是Navigation包含的子组件，子页是NavDestination包含的子组件。
以下为Navigation导航页的示例。
// index.ets\n@Entry\n@Component\nstruct Index {\n  pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    Navigation(this.pathStack) {\n      Column() {\n        Button('Push PageOne', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.pushPathByName('pageOne', null)\n          })\n      }.width('100%').height('100%')\n    }\n    .title(\"Navigation\")\n    .mode(NavigationMode.Stack)\n  }\n}
以下为Navigation子页的示例。
// PageOne.ets\n\n@Builder\nexport function PageOneBuilder() {\n  PageOne()\n}\n\n@Component\nexport struct PageOne {\n  pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    NavDestination() {\n      Column() {\n        Button('回到首页', { stateEffect: true, type: ButtonType.Capsule })\n          .width('80%')\n          .height(40)\n          .margin(20)\n          .onClick(() => {\n            this.pathStack.clear()\n          })\n      }.width('100%').height('100%')\n    }.title('PageOne')\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}
每个子页也需要配置到系统配置文件route_map.json中（参考系统路由表）。
// 工程配置文件module.json5中配置 {\"routerMap\": \"$profile:route_map\"}\n// route_map.json\n{\n  \"routerMap\": [\n    {\n      \"name\": \"pageOne\",\n      \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\": \"PageOneBuilder\",\n      \"data\": {\n        \"description\": \"this is pageOne\"\n      }\n    }\n  ]\n}
路由操作
Router通过@ohos.router模块提供的方法来操作页面，使用前需要先import。
import { router } from '@kit.ArkUI';\n\n// push page\nrouter.pushUrl({ url:\"pages/pageOne\", params: null })\n\n// pop page\nrouter.back({ url: \"pages/pageOne\" })\n\n// replace page\nrouter.replaceUrl({ url: \"pages/pageOne\" })\n\n// clear all page\nrouter.clear()\n\n// 获取页面栈大小\nlet size = router.getLength()\n\n// 获取页面状态\nlet pageState = router.getState()
Navigation通过页面栈对象NavPathStack提供的方法来操作页面，需要创建一个栈对象并传入Navigation中。
@Entry\n@Component\nstruct Index {\n  pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    // 设置NavPathStack并传入Navigation\n    Navigation(this.pathStack) {\n      // ...\n    }.width('100%').height('100%')\n    .title(\"Navigation\")\n    .mode(NavigationMode.Stack)\n  }\n}\n\n\n// push page\nthis.pathStack.pushPath({ name: 'pageOne' })\n\n// pop page\nthis.pathStack.pop()\nthis.pathStack.popToIndex(1)\nthis.pathStack.popToName('pageOne')\n\n// replace page\nthis.pathStack.replacePath({ name: 'pageOne' })\n\n// clear all page\nthis.pathStack.clear()\n\n// 获取页面栈大小\nlet size: number = this.pathStack.size()\n\n// 删除栈中name为PageOne的所有页面\nthis.pathStack.removeByName(\"pageOne\")\n\n// 删除指定索引的页面\nthis.pathStack.removeByIndexes([1, 3, 5])\n\n// 获取栈中所有页面name集合\nthis.pathStack.getAllPathName()\n\n// 获取索引为1的页面参数\nthis.pathStack.getParamByIndex(1)\n\n// 获取PageOne页面的参数\nthis.pathStack.getParamByName(\"pageOne\")\n\n// 获取PageOne页面的索引集合\nthis.pathStack.getIndexByName(\"pageOne\")\n// ...
Router作为全局通用模块，可以在任意页面中调用，Navigation作为组件，子页面想要做路由需要拿到Navigation持有的页面栈对象NavPathStack，可以通过如下几种方式获取：
方式一：通过@Provide和@Consume传递给子页面（有耦合，不推荐）。
// Navigation根容器\n@Entry\n@Component\nstruct Index {\n  // Navigation创建一个Provide修饰的NavPathStack\n @Provide('pathStack') pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    Navigation(this.pathStack) {\n        // ...\n    }\n    .title(\"Navigation\")\n    .mode(NavigationMode.Stack)\n  }\n}\n\n// Navigation子页面\n@Component\nexport struct PageOne {\n  // NavDestination通过Consume获取到\n  @Consume('pathStack') pathStack: NavPathStack;\n\n  build() {\n    NavDestination() {\n      // ...\n    }\n    .title(\"PageOne\")\n  }\n}
方式二：子页面通过OnReady回调获取。
@Component\nexport struct PageOne {\n  pathStack: NavPathStack = new NavPathStack()\n\n  build() {\n    NavDestination() {\n      // ...\n    }.title('PageOne')\n    .onReady((context: NavDestinationContext) => {\n      this.pathStack = context.pathStack\n    })\n  }\n}
方式三： 通过全局的AppStorage接口设置获取。
@Entry\n@Component\nstruct Index {\n  pathStack: NavPathStack = new NavPathStack()\n\n  // 全局设置一个NavPathStack\n  aboutToAppear(): void {\n     AppStorage.setOrCreate(\"PathStack\", this.pathStack)\n   }\n\n  build() {\n    Navigation(this.pathStack) {\n      // ...\n    }.title(\"Navigation\")\n    .mode(NavigationMode.Stack)\n  }\n}\n\n// Navigation子页面\n@Component\nexport struct PageOne {\n  // 子页面中获取全局的NavPathStack\n  pathStack: NavPathStack = AppStorage.get(\"PathStack\") as NavPathStack\n\n  build() {\n    NavDestination() {\n      // ...\n    }\n    .title(\"PageOne\")\n  }\n}
方式四：通过自定义组件查询接口获取，参考queryNavigationInfo。
// 子页面中的自定义组件\n@Component\nstruct CustomNode {\n  pathStack: NavPathStack = new NavPathStack()\n\n  aboutToAppear() {\n    // query navigation info\n    let navigationInfo: NavigationInfo = this.queryNavigationInfo() as NavigationInfo\n    this.pathStack = navigationInfo.pathStack;\n  }\n\n  build() {\n    Row() {\n      Button('跳转到PageTwo')\n        .onClick(() => {\n          this.pathStack.pushPath({ name: 'pageTwo' })\n        })\n    }\n  }\n}
生命周期
Router页面生命周期为@Entry页面中的通用方法，主要有如下四个生命周期：
// 页面创建后挂树的回调\naboutToAppear(): void {\n}\n\n// 页面销毁前下树的回调  \naboutToDisappear(): void {\n}\n\n// 页面显示时的回调  \nonPageShow(): void {\n}\n\n// 页面隐藏时的回调  \nonPageHide(): void {\n}
其生命周期时序如下图所示：
Navigation作为路由容器，其生命周期承载在NavDestination组件上，以组件事件的形式开放。
具体生命周期描述请参考Navigation页面生命周期。
@Component\nstruct PageOne {\n  aboutToDisappear() {\n  }\n\n  aboutToAppear() {\n  }\n\n  build() {\n    NavDestination() {\n      // ...\n    }\n    .onWillAppear(() => {\n    })\n    .onAppear(() => {\n    })\n    .onWillShow(() => {\n    })\n    .onShown(() => {\n    })\n    .onWillHide(() => {\n    })\n    .onHidden(() => {\n    })\n    .onWillDisappear(() => {\n    })\n    .onDisAppear(() => {\n    })\n  }\n}
转场动画
Router和Navigation都提供了系统的转场动画也提供了自定义转场的能力。
其中Router自定义页面转场通过通用方法pageTransition()实现，具体可参考Router页面转场动画。
Navigation作为路由容器组件，其内部的页面切换动画本质上属于组件跟组件之间的属性动画，可以通过Navigation中的customNavContentTransition事件提供自定义转场动画的能力，具体实现可以参考Navigation自定义转场。（注意：Dialog类型的页面当前没有转场动画）
共享元素转场
页面和页面之间跳转的时候需要进行共享元素过渡动画，Router可以通过通用属性sharedTransition来实现共享元素转场，具体可以参考如下链接：
Router共享元素转场动画。
Navigation也提供了共享元素一镜到底的转场能力，需要配合geometryTransition属性，在子页面（NavDestination）之间切换时，可以实现共享元素转场，具体可参考Navigation共享元素转场动画。
跨包路由
Router可以通过命名路由的方式实现跨包跳转。
 在想要跳转到的共享包HAR或者HSP页面里，给@Entry修饰的自定义组件EntryOptions命名。 // library/src/main/ets/pages/Index.ets\n// library为新建共享包自定义的名字\n@Entry({ routeName: 'myPage' })\n@Component\nexport struct MyComponent {\n  build() {\n    Row() {\n      Column() {\n        Text('Library Page')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n} 配置成功后需要在跳转的页面中引入命名路由的页面并跳转。 import { router } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport('library/src/main/ets/pages/Index');  // 引入共享包中的命名路由页面\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n      Text('Hello World')\n        .fontSize(50)\n        .fontWeight(FontWeight.Bold)\n        .margin({ top: 20 })\n        .backgroundColor('#ccc')\n        .onClick(() => { // 点击跳转到其他共享包中的页面\n          try {\n            router.pushNamedRoute({\n              name: 'myPage',\n              params: {\n                data1: 'message',\n                data2: {\n                  data3: [123, 456, 789]\n                }\n              }\n            })\n          } catch (err) {\n            let message = (err as BusinessError).message\n            let code = (err as BusinessError).code\n            console.error(`pushNamedRoute failed, code is ${code}, message is ${message}`);\n          }\n        })\n    }\n    .width('100%')\n    .height('100%')\n  }\n} 
Navigation作为路由组件，默认支持跨包跳转。
 从HSP（HAR）中完成自定义组件（需要跳转的目标页面）开发，将自定义组件申明为export。 @Component\nexport struct PageInHSP {\n  build() {\n    NavDestination() {\n        // ...\n    }\n  }\n} 在HSP（HAR）的index.ets中导出组件。 export { PageInHSP } from \"./src/main/ets/pages/PageInHSP\" 配置好HSP（HAR）的项目依赖后，在mainPage中导入自定义组件，并添加到pageMap中，即可正常调用。 // 1.导入跨包的路由页面\nimport { PageInHSP } from 'library/src/main/ets/pages/PageInHSP'\n\n@Entry\n@Component\nstruct mainPage {\n pageStack: NavPathStack = new NavPathStack()\n\n @Builder pageMap(name: string) {\n   if (name === 'PageInHSP') {\n        // 2.定义路由映射表\n        PageInHSP()\n   }\n }\n\n build() {\n   Navigation(this.pageStack) {\n     Button(\"Push HSP Page\")\n       .onClick(() => {\n         // 3.跳转到Hsp中的页面\n         this.pageStack.pushPath({ name: \"PageInHSP\" });\n       })\n   }\n   .mode(NavigationMode.Stack)\n   .navDestination(this.pageMap)\n }\n} 
以上是通过静态依赖的形式完成了跨包的路由，在大型的项目中一般跨模块的开发需要解耦，那就需要依赖动态路由的能力。
动态路由
动态路由设计的目的是解决多个产品（Hap）之间可以复用相同的业务模块，各个业务模块之间解耦（模块之间跳转通过路由表跳转，不需要互相依赖）和路由功能扩展整合。
业务特性模块对外暴露的就是模块内支持完成具体业务场景的多个页面的集合；路由管理就是将每个模块支持的页面都用统一的路由表结构管理起来。 当产品需要某个业务模块时，就会注册对应的模块的路由表。
动态路由的优势：
 路由定义除了跳转的URL以外，可以丰富的配置任意扩展信息，如横竖屏默认模式，是否需要鉴权等等，做路由跳转时的统一处理。 给每个路由设置一个名字，按照名称进行跳转而不是ets文件路径。 页面的加载可以使用动态Import（按需加载），防止首个页面加载大量代码导致卡顿。 
Router实现动态路由主要有下面三个过程：
 定义过程： 路由表定义新增路由 -> 页面文件绑定路由名称（装饰器） -> 加载函数和页面文件绑定（动态import函数） 定义注册过程： 路由注册（可在入口ability中按需注入依赖模块的路由表）。 跳转过程： 路由表检查(是否注册过对应路由名称) -> 路由前置钩子（路由页面加载-动态Import） -> 路由跳转 -> 路由后置钩子（公共处理，如打点）。 
Navigation实现动态路由有如下两种实现方案：
方案一： 自定义路由表
基本实现跟上述Router动态路由类似。
 开发者自定义路由管理模块，各个提供路由页面的模块均依赖此模块； 构建Navigation组件时，将NavPathStack注入路由管理模块，路由管理模块对NavPathStack进行封装，对外提供路由能力； 各个路由页面不再提供组件，转为提供@build封装的构建函数，并再通过WrappedBuilder封装后，实现全局封装； 各个路由页面将模块名称、路由名称、WrappedBuilder封装后构建函数注册如路由模块。 当路由需要跳转到指定路由时，路由模块完成对指定路由模块的动态导入，并完成路由跳转。 
具体的构建过程，可以参考Navigation自动生成动态路由示例。
方案二： 系统路由表
从API version 12版本开始，Navigation支持系统跨模块的路由表方案，整体设计是将路由表方案下沉到系统中管理，即在需要路由的各个业务模块（HSP/HAR）中独立配置router_map.json文件，在触发路由跳转时，应用只需要通过NavPathStack进行路由跳转，此时系统会自动完成路由模块的动态加载、组件构建，并完成路由跳转功能，从而实现了开发层面的模块解耦。
具体可参考Navigation系统路由表。
生命周期监听
Router可以通过observer实现注册监听，接口定义请参考Router无感监听observer.on('routerPageUpdate')。
import { uiObserver } from '@kit.ArkUI';\n\nfunction callBackFunc(info: uiObserver.RouterPageInfo) {\n    console.info(\"RouterPageInfo is : \" + JSON.stringify(info))\n}\n\n// used in ability context.\nuiObserver.on('routerPageUpdate', this.context, callBackFunc);\n\n// used in UIContext.\nuiObserver.on('routerPageUpdate', this.getUIContext(), callBackFunc);
在页面状态发生变化时，注册的回调将会触发，开发者可以通过回调中传入的入参拿到页面的相关信息，如：页面的名字，索引，路径，生命周期状态等。
Navigation同样可以通过在observer中实现注册监听。
// EntryAbility.ets\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { UIObserver } from '@kit.ArkUI';\n\nexport default class EntryAbility extends UIAbility {\n  // ...\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // ...\n    windowStage.getMainWindow((err: BusinessError, data) => {\n      // ...\n      let windowClass = data;\n      // 获取UIContext实例。\n      let uiContext: UIContext = windowClass.getUIContext();\n      // 获取UIObserver实例。\n      let uiObserver : UIObserver = uiContext.getUIObserver();\n      // 注册DevNavigation的状态监听.\n      uiObserver.on(\"navDestinationUpdate\",(info) => {\n        // NavDestinationState.ON_SHOWN = 0, NavDestinationState.ON_HIDE = 1\n        if (info.state == 0) {\n          // NavDestination组件显示时操作\n          console.info('page ON_SHOWN:' + info.name.toString());\n        }\n      })\n    })\n  }\n}
页面信息查询
为了实现页面内自定义组件跟页面解耦，自定义组件中提供了全局查询页面信息的接口。
Router可以通过queryRouterPageInfo接口查询当前自定义组件所在的Page页面的信息，其返回值包含如下几个属性，其中pageId是页面的唯一标识符：
import { uiObserver } from '@kit.ArkUI';\n\n// 页面内的自定义组件\n@Component\nstruct MyComponent {\n  aboutToAppear() {\n    let info: uiObserver.RouterPageInfo | undefined = this.queryRouterPageInfo();\n  }\n\n  build() {\n    // ...\n  }\n}
Navigation也可以通过queryNavDestinationInfo接口查询当前自定义组件所在的NavDestination的信息，其返回值包含如下几个属性，其中navDestinationId是页面的唯一标识符：
import { uiObserver } from '@kit.ArkUI';\n\n@Component\nexport struct NavDestinationExample {\n  build() {\n    NavDestination() {\n      MyComponent()\n    }\n  }\n}\n\n@Component\nstruct MyComponent {\n  navDesInfo: uiObserver.NavDestinationInfo | undefined\n\n  aboutToAppear() {\n    this.navDesInfo = this.queryNavDestinationInfo();\n    console.log('get navDestinationInfo: ' + JSON.stringify(this.navDesInfo))\n  }\n\n  build() {\n    // ...\n  }\n}
路由拦截
Router原生没有提供路由拦截的能力，开发者需要自行封装路由跳转接口，并在自己封装的接口中做路由拦截的判断并重定向路由。
Navigation提供了setInterception方法，用于设置Navigation页面跳转拦截回调。具体可以参考文档：Navigation路由拦截
