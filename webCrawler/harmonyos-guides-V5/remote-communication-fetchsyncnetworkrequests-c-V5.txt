使用fetch发起异步网络请求 (C/C++)
场景介绍
发送一个异步HTTP请求，也可以设置请求头和请求体等参数，并返回来自服务器的HTTP响应。常用于获取资源，支持通过拦截器来处理请求和响应。
接口说明
具体API说明详见接口文档。
接口名
描述
uint32_t HMS_Rcp_Fetch(Rcp_Session *session, Rcp_Request *request, const Rcp_ResponseCallbackObject *responseCallback);
发送一个HTTP请求，并返回来自服务器的HTTP响应。使用responseCallback异步回调。
 CPP侧导入模块。#include \"RemoteCommunicationKit/rcp.h\"\n#include <stdio.h>\n#include <unistd.h>  CMakeLists.txt中添加以下lib。（具体请见C API开发准备）。librcp_c.so  创建Request对象。\"https://www.example.com\"请根据实际情况替换为想要请求的URL地址。（完整见步骤5）const char *kHttpServerAddress = \"http://www.example.com\";\nRcp_Request *request = HMS_Rcp_CreateRequest(kHttpServerAddress);  创建会话。（完整见步骤5）uint32_t errCode = 0;\nRcp_Session *session = HMS_Rcp_CreateSession(NULL, &errCode);  发起请求，并处理返回结果。最后关闭session。bool g_callback = false;\n// 异步请求的响应处理回调，请用户自定义\nvoid ResponseCallback(void *usrCtx, Rcp_Response *response, uint32_t errCode)\n{\n    (void *)usrCtx;\n    if (response != NULL) {\n        printf(\"Response status: %d\\n\", response->statusCode);\n    } else {\n        printf(\"Fetch failed: errCode: %u\\n\", errCode);\n    }\n    // 注意清理响应\n    if (response != NULL) {\n        response->destroyResponse(response);\n    }\n    g_callback = true;\n}\n\nint main() {\n    const char *kHttpServerAddress = \"http://www.example.com\";\n    Rcp_Request *request = HMS_Rcp_CreateRequest(kHttpServerAddress);\n    request->method = RCP_METHOD_GET;\n    uint32_t errCode = 0;\n    // 创建session\n    Rcp_Session *session = HMS_Rcp_CreateSession(NULL, &errCode);\n    // 配置请求回调\n    Rcp_ResponseCallbackObject responseCallback = {ResponseCallback, NULL};\n    // 发起请求\n    errCode = HMS_Rcp_Fetch(session, request, &responseCallback);\n    // 处理errCode\n    // 等待fetch结果\n    int timeout = 100;\n    while (timeout-- > 0 && !g_callback) {\n        usleep(1000);\n    }\n    // 在退出前取消可能还在执行的requests\n    errCode = HMS_Rcp_CancelSession(session);\n    // 清理request\n    HMS_Rcp_DestroyRequest(request);\n    // 关闭session\n    errCode = HMS_Rcp_CloseSession(&session);\n    // 处理errCode\n    return 0;\n}  
