音效管理
音效管理主要包括播放实例音效管理和全局音效查询两部分，播放实例音效管理主要包括查询和设置当前音频播放流的音效模式，全局音效查询支持查询StreamUsage对应场景支持的音效模式。
播放实例音效管理
主要包括查询和设置当前音频播放流的音效模式，音效模式包括EFFECT_NONE关闭音效模式和EFFECT_DEFAULT默认音效模式。默认音效模式会根据创建音频流的StreamUsage自动加载对应场景的音效。
[h2]获取播放实例
管理播放实例音效的接口是getAudioEffectMode()查询当前音频播放流的音效模式和setAudioEffectMode(mode: AudioEffectMode)设置当前音频播放流的音效模式，在使用之前，需要使用createAudioRenderer(options: AudioRendererOptions)先创建音频播放流AudioRenderer实例。
 导入音频接口。 import { audio } from '@kit.AudioKit'; 配置音频渲染参数并创建AudioRenderer实例，音频渲染参数的详细信息可以查看AudioRendererOptions，创建AudioRenderer实例时会默认挂载EFFECT_DEFAULT模式音效。 import { BusinessError } from '@kit.BasicServicesKit';\n\nlet audioStreamInfo: audio.AudioStreamInfo = {\n  samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_48000,\n  channels: audio.AudioChannel.CHANNEL_2,\n  sampleFormat: audio.AudioSampleFormat.SAMPLE_FORMAT_S16LE,\n  encodingType: audio.AudioEncodingType.ENCODING_TYPE_RAW\n};\n\nlet audioRendererInfo: audio.AudioRendererInfo = {\n  usage: audio.StreamUsage.STREAM_USAGE_MUSIC,\n  rendererFlags: 0\n};\n\nlet audioRendererOptions: audio.AudioRendererOptions = {\n  streamInfo: audioStreamInfo,\n  rendererInfo: audioRendererInfo\n};\nlet audioRenderer: audio.AudioRenderer | undefined = undefined;\n\naudio.createAudioRenderer(audioRendererOptions, (err: BusinessError, data: audio.AudioRenderer) => {\n  if (err) {\n    console.error(`Invoke createAudioRenderer failed, code is ${err.code}, message is ${err.message}`);\n    return;\n  } else {\n    console.info('Invoke createAudioRenderer succeeded.');\n    audioRenderer = data;\n  }\n}); 
[h2]查询当前播放实例的音效模式
import { audio } from '@kit.AudioKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\naudioRenderer.getAudioEffectMode((err: BusinessError, effectMode: audio.AudioEffectMode) => {\n  if (err) {\n    console.error(`Failed to get params, code is ${err.code}, message is ${err.message}`);\n    return;    \n  } else {\n    console.info(`getAudioEffectMode: ${effectMode}`);\n  }\n});
[h2]设置当前播放实例的音效模式
关闭系统音效：
import { audio } from '@kit.AudioKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\naudioRenderer.setAudioEffectMode(audio.AudioEffectMode.EFFECT_NONE, (err: BusinessError) => {\n  if (err) {\n    console.error(`Failed to set params, code is ${err.code}, message is ${err.message}`);\n    return;\n  } else {\n    console.info('Callback invoked to indicate a successful audio effect mode setting.');\n  }\n});
开启系统音效默认模式：
import { audio } from '@kit.AudioKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\naudioRenderer.setAudioEffectMode(audio.AudioEffectMode.EFFECT_DEFAULT, (err: BusinessError) => {\n  if (err) {\n    console.error(`Failed to set params, code is ${err.code}, message is ${err.message}`);\n    return;\n  } else {\n    console.info('Callback invoked to indicate a successful audio effect mode setting.');\n  }\n});
全局查询音效模式
主要包括全局音效查询相应StreamUsage对应场景的音效模式。
对于播放音频类的应用，开发者需要关注该应用的音频流使用什么音效模式并做出相应的操作，比如音乐App播放时，应选择音乐场景下的模式。在使用查询接口前，开发者需要使用getStreamManager()创建一个AudioStreamManager音频流管理实例。
[h2]获取音频流管理接口
创建AudioStreamManager实例。在使用AudioStreamManager的API前，需要使用getStreamManager()创建一个AudioStreamManager实例。
import { audio } from '@kit.AudioKit';\n\nlet audioManager = audio.getAudioManager();\nlet audioStreamManager = audioManager.getStreamManager();
[h2]查询对应场景的音效模式
import { audio } from '@kit.AudioKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\naudioStreamManager.getAudioEffectInfoArray(audio.StreamUsage.STREAM_USAGE_MUSIC, async (err: BusinessError, audioEffectInfoArray: audio.AudioEffectInfoArray) => {\n  if (err) {\n    console.error('Failed to get effect info array');\n    return;    \n  } else {\n    console.info(`getAudioEffectInfoArray: ${audioEffectInfoArray}`);\n  }\n});
