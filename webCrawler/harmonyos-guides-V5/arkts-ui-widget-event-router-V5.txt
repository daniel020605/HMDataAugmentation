拉起卡片提供方的UIAbility(router事件)
在动态卡片中使用postCardAction接口的router能力，能够快速拉起动态卡片提供方应用的指定UIAbility(页面)，因此UIAbility较多的应用往往会通过卡片提供不同的跳转按钮，实现一键直达的效果。例如相机卡片，卡片上提供拍照、录像等按钮，点击不同按钮将拉起相机应用的不同UIAbility，从而提高用户的体验。
本文主要介绍动态卡片的事件开发。对于静态卡片，请参见FormLink。
开发步骤
 创建动态卡片 在工程的 entry 模块中，新建名为WidgetEventRouterCard的ArkTs卡片。 构建ArkTs卡片页面代码布局 卡片页面布局中有两个按钮，点击其中一个按钮时调用postCardAction向指定UIAbility发送router事件，并在事件内定义需要传递的内容。 //src/main/ets/widgeteventroutercard/pages/WidgetEventRouterCard.ets\n@Entry\n@Component\nstruct WidgetEventRouterCard {\n  build() {\n    Column() {\n      Text($r('app.string.JumpLabel'))\n        .fontColor('#FFFFFF')\n        .opacity(0.9)\n        .fontSize(14)\n        .margin({ top: '8%', left: '10%' })\n      Row() {\n        Column() {\n          Button() {\n            Text($r('app.string.ButtonA_label'))\n              .fontColor('#45A6F4')\n              .fontSize(12)\n          }\n          .width(120)\n          .height(32)\n          .margin({ top: '20%' })\n          .backgroundColor('#FFFFFF')\n          .borderRadius(16)\n          .onClick(() => {\n            postCardAction(this, {\n              action: 'router',\n              abilityName: 'EntryAbility',\n              params: { targetPage: 'funA' }\n            });\n          })\n\n          Button() {\n            Text($r('app.string.ButtonB_label'))\n              .fontColor('#45A6F4')\n              .fontSize(12)\n          }\n          .width(120)\n          .height(32)\n          .margin({ top: '8%', bottom: '15vp' })\n          .backgroundColor('#FFFFFF')\n          .borderRadius(16)\n          .onClick(() => {\n            postCardAction(this, {\n              action: 'router',\n              abilityName: 'EntryAbility',\n              params: { targetPage: 'funB' }\n            });\n          })\n        }\n      }.width('100%').height('80%')\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n    .alignItems(HorizontalAlign.Start)\n    .backgroundImage($r('app.media.CardEvent'))\n    .backgroundImageSize(ImageSize.Cover)\n  }\n} 处理router事件 在UIAbility中接收router事件并获取参数，根据传递的params不同，选择拉起不同的页面。 //src/main/ets/entryability/EntryAbility.ets\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'EntryAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class EntryAbility extends UIAbility {\n  private selectPage: string = '';\n  private currentWindowStage: window.WindowStage | null = null;\n\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    // 获取router事件中传递的targetPage参数\n    hilog.info(DOMAIN_NUMBER, TAG, `Ability onCreate: ${JSON.stringify(want?.parameters)}`);\n    if (want?.parameters?.params) {\n      // want.parameters.params 对应 postCardAction() 中 params 内容\n      let params: Record<string, Object> = JSON.parse(want.parameters.params as string);\n      this.selectPage = params.targetPage as string;\n      hilog.info(DOMAIN_NUMBER, TAG, `onCreate selectPage: ${this.selectPage}`);\n    }\n  }\n\n  // 如果UIAbility已在后台运行，在收到Router事件后会触发onNewWant生命周期回调\n  onNewWant(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `Ability onNewWant: ${JSON.stringify(want?.parameters)}`);\n    if (want?.parameters?.params) {\n      // want.parameters.params 对应 postCardAction() 中 params 内容\n      let params: Record<string, Object> = JSON.parse(want.parameters.params as string);\n      this.selectPage = params.targetPage as string;\n      hilog.info(DOMAIN_NUMBER, TAG, `onNewWant selectPage: ${this.selectPage}`);\n    }\n    if (this.currentWindowStage !== null) {\n      this.onWindowStageCreate(this.currentWindowStage);\n    }\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    let targetPage: string;\n    // 根据传递的targetPage不同，选择拉起不同的页面\n    switch (this.selectPage) {\n      case 'funA':\n        targetPage = 'pages/FunA'; //与实际的UIAbility页面路径保持一致\n        break;\n      case 'funB':\n        targetPage = 'pages/FunB'; //与实际的UIAbility页面路径保持一致\n        break;\n      default:\n        targetPage = 'pages/Index'; //与实际的UIAbility页面路径保持一致\n    }\n    if (this.currentWindowStage === null) {\n      this.currentWindowStage = windowStage;\n    }\n    windowStage.loadContent(targetPage, (err, data) => {\n      if (err.code) {\n        hilog.error(DOMAIN_NUMBER, TAG, 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n        return;\n      }\n      hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n    });\n  }\n} 创建跳转后的UIAbility页面 在pages文件夹下新建FunA.ets和FunB.ets，构建页面布局。 //src/main/ets/pages/FunA.ets\n@Entry\n@Component\nstruct FunA {\n  @State message: string = 'Hello World';\n\n  build() {\n    RelativeContainer() {\n      Text(this.message)\n        .id('HelloWorld')\n        .fontSize(50)\n        .fontWeight(FontWeight.Bold)\n        .alignRules({\n          center: { anchor: '__container__', align: VerticalAlign.Center },\n          middle: { anchor: '__container__', align: HorizontalAlign.Center }\n        })\n    }\n    .height('100%')\n    .width('100%')\n  }\n} 注册UIAbility页面 打开main_pages.json，将新建的FunA.ets和FunB.ets正确注册在src数组中。 //src/main/resources/base/profile/main_pages.json\n{\n  \"src\": [\n    \"pages/Index\",\n    \"pages/FunA\",\n    \"pages/FunB\"\n  ]\n} 
