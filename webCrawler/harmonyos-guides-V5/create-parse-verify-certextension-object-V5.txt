证书扩展信息对象的创建、解析和校验
以获取证书指定OID域段，并判断是否为CA证书为例，完成证书扩展信息对象的创建、解析和校验。
开发步骤
 导入证书算法库框架模块。 import { cert } from '@kit.DeviceCertificateKit'; 解析证书扩展域段数据，调用cert.createCertExtension创建证书扩展域段对象。 调用CertExtension.getEntry获取指定OID证书扩展域段信息。 比如，证书扩展域段对象标识符列表，根据对象标识符获取具体数据等。 调用CertExtension.checkCA判断证书是否为CA证书。 
import { cert } from '@kit.DeviceCertificateKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { util } from '@kit.ArkTS';\n\n// 证书扩展数据，以下只是一个示例。需要根据具体业务来赋值\nlet extData = new Uint8Array([\n  0x30, 0x40, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D,\n  0x13, 0x01, 0x01, 0xFF, 0x04, 0x05, 0x30, 0x03,\n  0x01, 0x01, 0xFF, 0x30, 0x0E, 0x06, 0x03, 0x55,\n  0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03,\n  0x02, 0x01, 0xC6, 0x30, 0x1D, 0x06, 0x03, 0x55,\n  0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0xE0, 0x8C,\n  0x9B, 0xDB, 0x25, 0x49, 0xB3, 0xF1, 0x7C, 0x86,\n  0xD6, 0xB2, 0x42, 0x87, 0x0B, 0xD0, 0x6B, 0xA0,\n  0xD9, 0xE4\n]);\n\n// 证书扩展示例\nfunction certExtensionSample(): void {\n  let textEncoder = new util.TextEncoder();\n  let encodingBlob: cert.EncodingBlob = {\n    data: extData,\n    // 证书扩展格式，目前仅支持DER格式\n    encodingFormat: cert.EncodingFormat.FORMAT_DER\n  };\n\n  // 创建一个证书扩展实例\n  cert.createCertExtension(encodingBlob, (err, certExtension) => {\n    if (err != null) {\n      // 证书扩展实例创建失败\n      console.error(`createCertExtension failed, errCode:${err.code}, errMsg:${err.message} `);\n      return;\n    }\n    // 证书扩展实例创建成功\n    console.log('createCertExtension success');\n\n    try {\n      // 根据OID获取证书扩展信息\n      let oidData = '2.5.29.14';\n      let oid: cert.DataBlob = {\n        data: textEncoder.encodeInto(oidData),\n      }\n      let entry = certExtension.getEntry(cert.ExtensionEntryType.EXTENSION_ENTRY_TYPE_ENTRY, oid);\n\n      // 检查证书是否为CA证书\n      let pathLen = certExtension.checkCA();\n      console.log('test cert extension success');\n    } catch (err) {\n      let e: BusinessError = err as BusinessError;\n      console.error(`operation failed, message:${e.message} ,code:${e.code} `);\n    }\n  });\n}
