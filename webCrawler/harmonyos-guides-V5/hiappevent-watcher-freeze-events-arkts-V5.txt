订阅卡死事件（ArkTS）
接口说明
API接口的具体使用说明（参数使用限制、具体取值范围等）请参考应用事件打点API文档。
事件自定义参数设置接口功能介绍：
订阅接口功能介绍：
开发步骤
以实现对用户点击按钮触发卡死场景生成的卡死事件订阅为例，说明开发步骤。
 新建一个ArkTS应用工程，编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，导入依赖模块： import { BusinessError } from '@kit.BasicServicesKit';\nimport { hiAppEvent, hilog } from '@kit.PerformanceAnalysisKit'; 编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，在onCreate函数中设置事件的自定义参数，示例代码如下：  // 开发者完成参数键值对赋值\n let params: Record<string, hiAppEvent.ParamType> = {\n   \"test_data\": 100,\n };\n // 开发者可以设置卡死事件的自定义参数\n hiAppEvent.setEventParam(params, hiAppEvent.domain.OS, hiAppEvent.event.APP_FREEZE).then(() => {\n   hilog.info(0x0000, 'testTag', `HiAppEvent success to set svent param`);\n }).catch((err: BusinessError) => {\n   hilog.error(0x0000, 'testTag', `HiAppEvent code: ${err.code}, message: ${err.message}`);\n }); 编辑工程中的“entry > src > main > ets > entryability > EntryAbility.ets”文件，在onCreate函数中添加系统事件的订阅，示例代码如下：  hiAppEvent.addWatcher({\n   // 开发者可以自定义观察者名称，系统会使用名称来标识不同的观察者\n   name: \"watcher\",\n   // 开发者可以订阅感兴趣的系统事件，此处是订阅了卡死事件\n   appEventFilters: [\n     {\n       domain: hiAppEvent.domain.OS,\n       names: [hiAppEvent.event.APP_FREEZE]\n     }\n   ],\n   // 开发者可以自行实现订阅实时回调函数，以便对订阅获取到的事件数据进行自定义处理\n   onReceive: (domain: string, appEventGroups: Array<hiAppEvent.AppEventGroup>) => {\n     hilog.info(0x0000, 'testTag', `HiAppEvent onReceive: domain=${domain}`);\n     for (const eventGroup of appEventGroups) {\n       // 开发者可以根据事件集合中的事件名称区分不同的系统事件\n       hilog.info(0x0000, 'testTag', `HiAppEvent eventName=${eventGroup.name}`);\n       for (const eventInfo of eventGroup.appEventInfos) {\n         // 开发者可以对事件集合中的事件数据进行自定义处理，此处是将事件数据打印在日志中\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.domain=${eventInfo.domain}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.name=${eventInfo.name}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.eventType=${eventInfo.eventType}`);\n         // 开发者可以获取到卡死事件发生的时间戳\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.time=${eventInfo.params['time']}`);\n         // 开发者可以获取到卡死应用的前后台状态\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.foreground=${eventInfo.params['foreground']}`);\n         // 开发者可以获取到卡死应用的版本信息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.bundle_version=${eventInfo.params['bundle_version']}`);\n         // 开发者可以获取到卡死应用的包名\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.bundle_name=${eventInfo.params['bundle_name']}`);\n         // 开发者可以获取到卡死应用的进程名称\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.process_name=${eventInfo.params['process_name']}`);\n         // 开发者可以获取到卡死应用的进程id\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.pid=${eventInfo.params['pid']}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.uid=${eventInfo.params['uid']}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.uuid=${eventInfo.params['uuid']}`);\n         // 开发者可以获取到卡死事件发生的异常类型、异常原因\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.exception=${JSON.stringify(eventInfo.params['exception'])}`);\n         // 开发者可以获取到卡死事件发生时日志信息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.hilog.size=${eventInfo.params['hilog'].length}`);\n         // 开发者可以获取到卡死事件发生时主线程未处理消息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.event_handler.size=${eventInfo.params['event_handler'].length}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.event_handler_size_3s=${eventInfo.params['event_handler_size_3s']}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.event_handler_size_6s=${eventInfo.params['event_handler_size_6s']}`);\n         // 开发者可以获取到卡死事件发生时同步binder调用信息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.peer_binder.size=${eventInfo.params['peer_binder'].length}`);\n         // 开发者可以获取到卡死事件发生时全量线程调用栈\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.threads.size=${eventInfo.params['threads'].length}`);\n         // 开发者可以获取到卡死事件发生时内存信息\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.memory=${JSON.stringify(eventInfo.params['memory'])}`);\n         // 开发者可以获取到卡死事件发生时的故障日志文件\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.external_log=${JSON.stringify(eventInfo.params['external_log'])}`);\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.log_over_limit=${eventInfo.params['log_over_limit']}`);\n         // 开发者可以获取到卡死事件的自定义数据test_data\n         hilog.info(0x0000, 'testTag', `HiAppEvent eventInfo.params.test_data=${eventInfo.params['test_data']}`);\n       }\n     }\n   }\n }); 编辑工程中的“entry > src > main > ets > pages > Index.ets”文件，添加按钮并在其onClick函数构造卡死场景，以触发卡死事件，示例代码如下：  Button(\"appFreeze\").onClick(()=>{\n   // 在按钮点击函数中构造一个freeze场景，触发应用卡死事件\n   setTimeout(() => {\n     while (true) {}\n   }, 1000)\n }) 点击DevEco Studio界面中的运行按钮，运行应用工程，然后在应用界面中点击按钮“appFreeze”，触发一次卡死事件。 应用卡死退出后，重新进入应用可以在Log窗口看到对系统事件数据的处理日志： HiAppEvent onReceive: domain=OS\nHiAppEvent eventName=APP_FREEZE\nHiAppEvent eventInfo.domain=OS\nHiAppEvent eventInfo.name=APP_FREEZE\nHiAppEvent eventInfo.eventType=1\nHiAppEvent eventInfo.params.time=1711440881768\nHiAppEvent eventInfo.params.foreground=true\nHiAppEvent eventInfo.params.bundle_version=1.0.0\nHiAppEvent eventInfo.params.bundle_name=com.example.myapplication\nHiAppEvent eventInfo.params.process_name=com.example.myapplication\nHiAppEvent eventInfo.params.pid=3197\nHiAppEvent eventInfo.params.uid=20010043\nHiAppEvent eventInfo.params.uuid=27fac7098da46efe1cae9904946ec06c5acc91689c365efeefb7a23a0c37df77\nHiAppEvent eventInfo.params.exception={\"message\":\"App main thread is not response!\",\"name\":\"THREAD_BLOCK_6S\"}\nHiAppEvent eventInfo.params.hilog.size=77\nHiAppEvent eventInfo.params.event_handler.size=6\nHiAppEvent eventInfo.params.event_handler_size_3s=5\nHiAppEvent eventInfo.params.event_handler_size_6s=6\nHiAppEvent eventInfo.params.peer_binder.size=0\nHiAppEvent eventInfo.params.threads.size=28\nHiAppEvent eventInfo.params.memory={\"pss\":0,\"rss\":0,\"sys_avail_mem\":1361464,\"sys_free_mem\":796232,\"sys_total_mem\":1992340,\"vss\":0}\nHiAppEvent eventInfo.params.external_log=[\"/data/storage/el2/log/hiappevent/APP_FREEZE_1711440899240_3197.log\"]\nHiAppEvent eventInfo.params.log_over_limit=false\nHiAppEvent eventInfo.params.test_data=100 
