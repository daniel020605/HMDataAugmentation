使用Web组件加载页面
页面加载是Web组件的基本功能。根据页面加载数据来源可以分为三种常用场景，包括加载网络页面、加载本地页面、加载HTML格式的富文本数据。
页面加载过程中，若涉及网络资源获取，请在module.json5中配置网络访问权限，添加方法请参考在配置文件中声明权限。
\"requestPermissions\":[\n    {\n      \"name\" : \"ohos.permission.INTERNET\"\n    }\n  ]
加载网络页面
开发者可以在Web组件创建时，指定默认加载的网络页面 。在默认页面加载完成后，如果开发者需要变更此Web组件显示的网络页面，可以通过调用loadUrl()接口加载指定的网页。Web组件的第一个参数变量src不能通过状态变量（例如：@State）动态更改地址，如需更改，请通过loadUrl()重新加载。
在下面的示例中，在Web组件加载完“www.example.com”页面后，开发者可通过loadUrl接口将此Web组件显示页面变更为“www.example1.com”。
// xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('loadUrl')\n        .onClick(() => {\n          try {\n            // 点击按钮时，通过loadUrl，跳转到www.example1.com\n            this.controller.loadUrl('www.example1.com');\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      // 组件创建时，加载www.example.com\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n}
加载本地页面
在下面的示例中展示加载本地页面文件的方法：
将本地页面文件放在应用的rawfile目录下，开发者可以在Web组件创建的时候指定默认加载的本地页面 ，并且加载完成后可通过调用loadUrl()接口变更当前Web组件的页面。
加载本地html文件时引用本地css样式文件可以通过下面方法实现。
<link rel=\"stylesheet\" href=\"resource://rawfile/xxx.css\">\n<link rel=\"stylesheet\" href=\"file:///data/storage/el2/base/haps/entry/cache/xxx.css\">// 加载沙箱路径下的本地css文件。
 将资源文件放置在应用的resources/rawfile目录下。 图1 资源文件路径  应用侧代码。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('loadUrl')\n        .onClick(() => {\n          try {\n            // 点击按钮时，通过loadUrl，跳转到local1.html\n            this.controller.loadUrl($rawfile(\"local1.html\"));\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      // 组件创建时，通过$rawfile加载本地文件local.html\n      Web({ src: $rawfile(\"local.html\"), controller: this.controller })\n    }\n  }\n} local.html页面代码。 <!-- local.html -->\n<!DOCTYPE html>\n<html>\n  <body>\n    <p>Hello World</p>\n  </body>\n</html> local1.html页面代码。 <!-- local1.html -->\n<!DOCTYPE html>\n<html>\n  <body>\n    <p>This is local1 page</p>\n  </body>\n</html> 
加载沙箱路径下的本地页面文件。
 通过构造的单例对象GlobalContext获取沙箱路径，需要开启应用中文件系统的访问fileAccess权限。 // GlobalContext.ets\nexport class GlobalContext {\n  private constructor() {}\n  private static instance: GlobalContext;\n  private _objects = new Map<string, Object>();\n\n  public static getContext(): GlobalContext {\n    if (!GlobalContext.instance) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string): Object | undefined {\n    return this._objects.get(value);\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n} // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { GlobalContext } from '../GlobalContext';\n\nlet url = 'file://' + GlobalContext.getContext().getObject(\"filesDir\") + '/index.html';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      // 加载沙箱路径文件。\n      Web({ src: url, controller: this.controller })\n      .fileAccess(true)\n    }\n  }\n} 修改EntryAbility.ets。 以filesDir为例，获取沙箱路径。若想获取其他路径，请参考应用文件路径。 // xxx.ets\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { webview } from '@kit.ArkWeb';\nimport { GlobalContext } from '../GlobalContext';\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n    // 通过在GlobalContext对象上绑定filesDir，可以实现UIAbility组件与UI之间的数据同步。\n    GlobalContext.getContext().setObject(\"filesDir\", this.context.filesDir);\n    console.log(\"Sandbox path is \" + GlobalContext.getContext().getObject(\"filesDir\"));\n  }\n} 加载的html文件。 <!-- index.html -->\n<!DOCTYPE html>\n<html>\n    <body>\n        <p>Hello World</p>\n    </body>\n</html> 
加载HTML格式的文本数据
Web组件可以通过loadData()接口实现加载HTML格式的文本数据。当开发者不需要加载整个页面，只需要显示一些页面片段时，可通过此功能来快速加载页面，当加载大量html文件时，需设置第四个参数baseUrl为\"data\"。
// xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Button('loadData')\n        .onClick(() => {\n          try {\n            // 点击按钮时，通过loadData，加载HTML格式的文本数据\n            this.controller.loadData(\n              \"<html><body bgcolor=\\\"white\\\">Source:<pre>source</pre></body></html>\",\n              \"text/html\",\n              \"UTF-8\"\n            );\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      // 组件创建时，加载www.example.com\n      Web({ src: 'www.example.com', controller: this.controller })\n    }\n  }\n}
Web组件可以通过data url方式直接加载HTML字符串。
// xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  htmlStr: string = \"data:text/html, <html><body bgcolor=\\\"white\\\">Source:<pre>source</pre></body></html>\";\n\n  build() {\n    Column() {\n      // 组件创建时，加载htmlStr\n      Web({ src: this.htmlStr, controller: this.controller })\n    }\n  }\n}
