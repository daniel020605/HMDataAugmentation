HAR
HAR（Harmony Archive）是静态共享包，可以包含代码、C++库、资源和配置文件。通过HAR可以实现多个模块或多个工程共享ArkUI组件、资源等相关代码。
使用场景
 支持应用内共享，也可以发布后供其他应用使用。 作为二方库，发布到OHPM私仓，供公司内部其他应用使用。 作为三方库，发布到OHPM中心仓，供其他应用使用。 多包（HAP/HSP）引用相同的HAR时，会造成多包间代码和资源的重复拷贝，从而导致应用包膨大。 
约束限制
 HAR不支持在设备上单独安装/运行，只能作为应用模块的依赖项被引用。 HAR不支持在配置文件中声明ExtensionAbility组件，但支持UIAbility组件。 说明： 如果使用startAbility接口拉起HAR中的UIAbility，接口参数中的moduleName取值需要为依赖该HAR的HAP/HSP的moduleName。 HAR不支持在配置文件中声明pages页面，但是可以包含pages页面，并通过命名路由的方式进行跳转。 HAR不支持引用AppScope目录中的资源。在编译构建时，AppScope中的内容不会打包到HAR中，因此会导致HAR资源引用失败。 HAR可以依赖其他HAR，但不支持循环依赖，也不支持依赖传递。 
创建
通过DevEco Studio创建一个HAR模块，详见创建库模块。
开发
介绍如何导出HAR的ArkUI组件、接口、资源，供其他应用或当前应用的其他模块引用。
Index.ets文件是HAR导出声明文件的入口，HAR需要导出的接口，统一在Index.ets文件中导出。Index.ets文件是DevEco Studio默认自动生成的，用户也可以自定义，在模块的oh-package.json5文件中的main字段配置入口声明文件，配置如下所示：
{\n  \"main\": \"Index.ets\"\n}
[h2]导出ArkUI组件
ArkUI组件的导出方式与ts的导出方式一致，通过export导出ArkUI组件，示例如下：
// library/src/main/ets/components/mainpage/MainPage.ets\n@Component\nexport struct MainPage {\n  @State message: string = 'HAR MainPage';\n\n  build() {\n    Column() {\n      Row() {\n        Text(this.message)\n          .fontSize(32)\n          .fontWeight(FontWeight.Bold)\n      }\n      .margin({ top: '32px' })\n      .height(56)\n      .width('624px')\n\n      Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center, alignContent: FlexAlign.Center }) {\n        Column() {\n          Image($r('app.media.pic_empty')).width('33%')\n          Text($r('app.string.empty'))\n            .fontSize(14)\n            .fontColor($r('app.color.text_color'))\n        }\n      }.width('100%')\n      .height('90%')\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor($r('app.color.page_background'))\n  }\n}
HAR对外暴露的接口，在Index.ets导出文件中声明如下所示：
// library/Index.ets\nexport { MainPage } from './src/main/ets/components/mainpage/MainPage';
[h2]导出ts类和方法
通过export导出ts类和方法，支持导出多个ts类和方法，示例如下所示：
// library/src/main/ts/test.ets\nexport class Log {\n    static info(msg: string) {\n        console.info(msg);\n    }\n}\n\nexport function func() {\n  return 'har func';\n}\n\nexport function func2() {\n  return 'har func2';\n}
HAR对外暴露的接口，在Index.ets导出文件中声明如下所示：
// library/Index.ets\nexport { Log } from './src/main/ts/test';\nexport { func } from './src/main/ts/test';\nexport { func2 } from './src/main/ts/test';
[h2]导出native方法
在HAR中也可以包含C++编写的so。对于so中的native方法，HAR通过以下方式导出，以导出liblibrary.so的加法接口add为例：
// library/src/main/ets/utils/nativeTest.ets\nimport native from 'liblibrary.so';\n\nexport function nativeAdd(a: number, b: number): number {\n  let result: number = native.add(a, b);\n  return result;\n}
HAR对外暴露的接口，在Index.ets导出文件中声明如下所示：
// library/Index.ets\nexport { nativeAdd } from './src/main/ets/utils/nativeTest';
[h2]导出资源
在编译构建HAP时，DevEco Studio会从HAP模块及依赖的模块中收集资源文件，如果不同模块下的资源文件出现重名冲突时，DevEco Studio会按照以下优先级进行覆盖（优先级由高到低）：
 AppScope（仅Stage模型支持）。 HAP包自身模块。 依赖的HAR模块，如果依赖的多个HAR之间有资源冲突，会按照工程oh-package.json5中dependencies下的依赖顺序进行覆盖，依赖顺序在前的优先级较高。例如下方示例中dayjs和lottie中包含同名文件时，会优先使用dayjs中的资源。           如果在AppScope/HAP模块/HAR模块的国际化目录中配置了资源，在相同的国际化限定词下，合并的优先级也遵循上述规则。同时，国际化限定词中配置的优先级高于在base中的配置。如：在AppScope的base中配置了资源字段，在HAR模块的en_US中配置了同样的资源字段，则在en_US的使用场景中，会更优先使用HAR模块中配置的资源字段。   
// oh-package.json5\n{\n  \"dependencies\": {\n    \"dayjs\": \"^1.10.4\",\n    \"lottie\": \"^2.0.0\"\n  }\n}
使用
介绍如何配置HAR依赖，并引用HAR的ArkUI组件、接口、资源。
引用HAR前，需要先配置对HAR的依赖，详见引用HAR文件和资源。
[h2]引用HAR的ArkUI组件
HAR的依赖配置成功后，可以引用HAR的ArkUI组件。ArkUI组件的导入方式与ts的导入方式一致，通过import引入HAR导出的ArkUI组件，示例如下所示：
// entry/src/main/ets/pages/IndexSec.ets\nimport { MainPage } from 'library';\n\n@Entry\n@Component\nstruct IndexSec {\n  build() {\n    Row() {\n      // 引用HAR的ArkUI组件\n      MainPage()\n    }\n    .height('100%')\n  }\n}
[h2]引用HAR的ts类和方法
通过import引用HAR导出的ts类和方法，示例如下所示：
// entry/src/main/ets/pages/Index.ets\nimport { Log } from 'library';\nimport { func } from 'library';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Column() {\n      Text(this.message)\n        .fontFamily('HarmonyHeiTi')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(32)\n        .fontWeight(700)\n        .fontColor($r('app.color.text_color'))\n        .textAlign(TextAlign.Start)\n        .margin({ top: '32px' })\n        .width('624px')\n\n      //引用HAR的ts类和方法\n      Button($r('app.string.button'))\n        .id('button')\n        .height(48)\n        .width('624px')\n        .margin({ top: '4%' })\n        .type(ButtonType.Capsule)\n        .fontFamily('HarmonyHeiTi')\n        .borderRadius($r('sys.float.ohos_id_corner_radius_button'))\n        .backgroundColor($r('app.color.button_background'))\n        .fontColor($r('sys.color.ohos_id_color_foreground_contrary'))\n        .fontSize($r('sys.float.ohos_id_text_size_button1'))\n        .onClick(() => {\n          // 引用HAR的类和方法\n          Log.info('har msg');\n          this.message = 'func return: ' + func();\n        })\n    }\n    .width('100%')\n    .backgroundColor($r('app.color.page_background'))\n    .height('100%')\n  }\n}
[h2]引用HAR的native方法
通过import引用HAR导出的native方法，示例如下所示：
// entry/src/main/ets/pages/Index.ets\nimport { nativeAdd } from 'library';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Column() {\n      Text(this.message)\n        .fontFamily('HarmonyHeiTi')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(32)\n        .fontWeight(700)\n        .fontColor($r('app.color.text_color'))\n        .textAlign(TextAlign.Start)\n        .margin({ top: '32px' })\n        .width('624px')\n\n      //引用HAR的native方法\n      Button($r('app.string.native_add'))\n        .id('nativeAdd')\n        .height(48)\n        .width('624px')\n        .margin({ top: '4%', bottom: '6%' })\n        .type(ButtonType.Capsule)\n        .fontFamily('HarmonyHeiTi')\n        .borderRadius($r('sys.float.ohos_id_corner_radius_button'))\n        .backgroundColor($r('app.color.button_background'))\n        .fontColor($r('sys.color.ohos_id_color_foreground_contrary'))\n        .fontSize($r('sys.float.ohos_id_text_size_button1'))\n        .onClick(() => {\n          this.message = 'result: ' + nativeAdd(1, 2);\n        })\n    }\n    .width('100%')\n    .backgroundColor($r('app.color.page_background'))\n    .height('100%')\n  }\n}
[h2]引用HAR的资源
通过$r引用HAR中的资源，例如在HAR模块的src/main/resources里添加字符串资源（在string.json中定义，name：hello_har）和图片资源（icon_har.png），然后在Entry模块中引用该字符串和图片资源的示例如下所示：
// entry/src/main/ets/pages/Index.ets\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Column() {\n      // 引用HAR的字符串资源\n      Text($r('app.string.hello_har'))\n        .id('stringHar')\n        .fontFamily('HarmonyHeiTi')\n        .fontColor($r('app.color.text_color'))\n        .fontSize(24)\n        .fontWeight(500)\n        .margin({ top: '40%' })\n\n      List() {\n        ListItem() {\n          // 引用HAR的图片资源\n          Image($r('app.media.icon_har'))\n            .id('iconHar')\n            .borderRadius('48px')\n        }\n        .margin({ top: '5%' })\n        .width('312px')\n      }\n      .alignListItem(ListItemAlign.Center)\n    }\n    .width('100%')\n    .backgroundColor($r('app.color.page_background'))\n    .height('100%')\n  }\n}
编译
HAR可以作为二方库和三方库提供给其他应用使用，如果需要对代码资产进行保护时，建议开启混淆能力。
混淆能力开启后，DevEco Studio在构建HAR时，会对代码进行编译、混淆及压缩处理，保护代码资产。
HAR模块原先默认开启混淆能力，会对API 10及以上的HAR模块，且编译模块为release时，自动进行简单的代码混淆；从DevEco Studio 5.0.3.600开始，新建工程默认关闭代码混淆功能，可以在HAR模块的build-profile.json5文件中的ruleOptions字段下的enable进行开启混淆，详情请见代码混淆，配置如下所示：
{\n  \"apiType\": \"stageMode\",\n  \"buildOption\": {\n  },\n  \"buildOptionSet\": [\n    {\n      \"name\": \"release\",\n      \"arkOptions\": {\n        \"obfuscation\": {\n          \"ruleOptions\": {\n            \"enable\": true,\n            \"files\": [\n              \"./obfuscation-rules.txt\"\n            ]\n          },\n          \"consumerFiles\": [\n            \"./consumer-rules.txt\"\n          ]\n        }\n      }\n    },\n  ],\n  \"targets\": [\n    {\n      \"name\": \"default\"\n    }\n  ]\n}
[h2]编译生成TS文件
在HAR中使用Sendable时，开启该配置。
使用限制
在依赖TS HAR时，禁止引用TS HAR中的ArkUI组件。
HAR模块中arkts文件编译后，默认产物为js文件，想要将产物修改为ts文件，可以在HAR模块下的module.json5文件中将\"metadata\"字段下的\"name\"设置为“UseTsHar”，配置如下所示：
{\n  \"module\": {\n    \"name\": \"TsClosedHar\",\n    \"type\": \"har\",\n    \"deviceTypes\": [\n      \"default\",\n      \"tablet\",\n      \"2in1\"\n    ],\n    \"metadata\": [\n      {\n        \"name\": \"UseTsHar\",\n        \"value\": \"true\"\n      }\n    ]\n  }\n}
发布
详见发布HAR。
