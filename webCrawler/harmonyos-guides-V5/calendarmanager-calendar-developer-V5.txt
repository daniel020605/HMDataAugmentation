日历账户管理
日历账户‌用于存储和管理个人或团队的日程，通过日历账户，用户可以方便地查看、编辑和共享日程信息。
日历管理器CalendarManager用于管理日历账户Calendar。日历账户主要包含账户信息CalendarAccount和配置信息CalendarConfig。
开发者可以创建属于应用特有的日历账户，还可以对日历账户进行新增、删除、更新和查询。此外，每个日程Event归属于某一个特定的日历账户，可以通过日历账户对该账户下面的日程进行管理，具体相关指导可见日程管理。
接口说明
以下是日历账户管理的相关接口，更多详细接口及使用请参考@ohos.calendarManager。
获取默认Calendar对象或者指定Calendar对象，使用Promise异步回调。
默认Calendar是日历存储首次运行时创建的，若创建Event时不关注其Calendar归属，则无须通过createCalendar()创建Calendar，直接使用默认Calendar。
开发步骤
 导入相关依赖。 // EntryAbility.ets\nimport {abilityAccessCtrl,AbilityConstant, common, PermissionRequestResult, Permissions, UIAbility, Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { calendarManager } from '@kit.CalendarKit';\nimport { window } from '@kit.ArkUI'; 申请权限。使用Calendar Kit时，需要在module.json5中声明申请读写日历日程所需的权限：ohos.permission.READ_CALENDAR和ohos.permission.WRITE_CALENDAR。具体指导可见声明权限。 根据上下文获取日程管理器对象calendarMgr，用于对日历账户进行相关管理操作。推荐在EntryAbility.ets文件中进行操作。 // EntryAbility.ets\nexport let calendarMgr: calendarManager.CalendarManager | null = null;\n\nexport let mContext: common.UIAbilityContext | null = null;\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    console.info(\"Ability onCreate\");\n  }\n\n  onDestroy(): void {\n    console.info(\"Ability onDestroy\");\n  }\n\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Main window is created, set main page for this ability\n    console.info(\"Ability onWindowStageCreate\");\n    windowStage.loadContent('pages/Index', (err, data) => {\n      if (err.code) {\n        console.error(`Failed to load the content. Code: ${err.code}, message: ${err.message}`);\n        return;\n      }\n      console.info(`Succeeded in loading the content. Data: ${JSON.stringify(data)}`);\n    });\n    mContext = this.context;\n    const permissions: Permissions[] = ['ohos.permission.READ_CALENDAR', 'ohos.permission.WRITE_CALENDAR'];\n    let atManager = abilityAccessCtrl.createAtManager();\n    atManager.requestPermissionsFromUser(mContext, permissions).then((result: PermissionRequestResult) => {\n      console.log(`get Permission success, result: ${JSON.stringify(result)}`);\n      calendarMgr = calendarManager.getCalendarManager(mContext);\n    }).catch((error: BusinessError) => {\n      console.error(`get Permission error, error. Code: ${error.code}, message: ${error.message}`);\n    })\n  }\n\n  onWindowStageDestroy(): void {\n    // Main window is destroyed, release UI related resources\n    console.info(\"Ability onWindowStageDestroy\");\n  }\n\n  onForeground(): void {\n    // Ability has brought to foreground\n    console.info(\"Ability onForeground\");\n  }\n\n  onBackground(): void {\n    // Ability has back to background\n    console.info(\"Ability onBackground\");\n  }\n} 根据日历账户信息，创建一个日历账户Calendar对象。 创建日历账户之前，开发者需要先根据账户信息进行查询，如果账户不存在则抛出异常信息，捕获到异常再进行日历账户的创建，否则可能会出现账户重复创建的问题。 // Index.ets\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { calendarMgr } from '../entryability/EntryAbility';\nimport { calendarManager } from '@kit.CalendarKit';\n\nlet calendar: calendarManager.Calendar | undefined = undefined;\n// 指定日历账户信息\nconst calendarAccount: calendarManager.CalendarAccount = {\n  // 日历账户名称\n  name: 'MyCalendar',\n  // 日历账户类型\n  type: calendarManager.CalendarType.LOCAL,\n  // 日历账户显示名称，该字段如果不填，创建的日历账户在界面显示为空字符串。\n  displayName: 'MyCalendar'\n};\n// 创建日历账户\ncalendarMgr?.createCalendar(calendarAccount).then((data: calendarManager.Calendar) => {\n  console.info(`Succeeded in creating calendar data->${JSON.stringify(data)}`);\n  calendar = data;\n  // 请确保日历账户创建成功后，再进行后续相关操作\n  // ...\n}).catch((error: BusinessError) => {\n  console.error(`Failed to create calendar. Code: ${error.code}, message: ${error.message}`);\n}); 日历账户创建之后，日历账户颜色为黑色。开发者需要调用setConfig()接口设置日历配置信息，包括是否打开日历账户下的日程提醒能力、设置日历账户颜色。 // Index.ets\n// 日历配置信息\nconst config: calendarManager.CalendarConfig = {\n  // 打开日程提醒\n  enableReminder: true,\n  // 设置日历账户颜色\n  color: '#aabbcc'\n};\n// 设置日历配置信息\ncalendar.setConfig(config).then(() => {\n  console.info(`Succeeded in setting config, data->${JSON.stringify(config)}`);\n}).catch((err: BusinessError) => {\n  console.error(`Failed to set config. Code: ${err.code}, message: ${err.message}`);\n}); 可以查询指定日历账户。 // Index.ets\ncalendarMgr?.getCalendar(calendarAccount).then((data: calendarManager.Calendar) => {\n console.info(`Succeeded in getting calendar, data -> ${JSON.stringify(data)}`);\n}).catch((err: BusinessError) => {\n console.error(`Failed to get calendar. Code: ${err.code}, message: ${err.message}`);\n}); 也可以查询默认日历账户，默认日历账户是日历存储首次运行时创建的，若创建日程时不关注归属哪个账户，则无须单独创建日历账户，可以直接使用默认日历账户。 // Index.ets\ncalendarMgr?.getCalendar().then((data: calendarManager.Calendar) => {\n console.info(`Succeeded in getting calendar, data -> ${JSON.stringify(data)}`);\n}).catch((err: BusinessError) => {\n console.error(`Failed to get calendar. Code: ${err.code}, message: ${err.message}`);\n}); 获取当前应用所有创建的日历账户及默认日历账户Calendar对象。 由于涉及数据隐私安全，进行了权限管控的应用无法获取其他应用创建的账户信息。 // Index.ets\ncalendarMgr?.getAllCalendars().then((data: calendarManager.Calendar[]) => {\n  console.info(`Succeeded in getting all calendars, data -> ${JSON.stringify(data)}`);\n  data.forEach((calendar) => {\n    const account = calendar.getAccount();\n    console.info(`account -> ${JSON.stringify(account)}`);\n  })\n}).catch((err: BusinessError) => {\n  console.error(`Failed to get all calendars. Code: ${err.code}, message: ${err.message}`);\n}); 删除指定的日历账户，删除账户后，该账户下的所有日程会全部删除。 // Index.ets\ncalendarMgr?.deleteCalendar(calendar).then(() => {\n console.info(\"Succeeded in deleting calendar\");\n}).catch((err: BusinessError) => {\n console.error(`Failed to delete calendar. Code: ${err.code}, message: ${err.message}`);\n}); 
