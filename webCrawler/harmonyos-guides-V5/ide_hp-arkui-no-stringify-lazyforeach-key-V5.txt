@performance/hp-arkui-no-stringify-in-lazyforeach-key-generator
在使用LazyForEach进行组件复用的key生成器函数里，不要使用stringify。
滑动丢帧场景下，建议优先修改。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/hp-arkui-no-stringify-in-lazyforeach-key-generator\": \"warn\",\n  }\n}
选项
该规则无需配置额外选项。
正例
//源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\n// 此处为复用的自定义组件\n@Reusable\n@Component\nstruct ChildComponent {\n  @State desc: string = '';\n  @State sum: number = 0;\n  @State avg: number = 0;\n  aboutToReuse(params: Record<string, Object>): void {\n    this.desc = params.desc as string;\n    this.sum = params.sum as number;\n    this.avg = params.avg as number;\n  }\n  build() {\n    Column() {\n      Text('子组件' + this.desc)\n        .fontSize(30)\n        .fontWeight(30)\n      Text('结果' + this.sum)\n        .fontSize(30)\n        .fontWeight(30)\n      Text('平均值' + this.avg)\n        .fontSize(30)\n        .fontWeight(30)\n    }\n  }\n}\nclass Item {\n  advertInfos: Model[] = []\n  productPrice: PriceInfo[] = []\n  addresses: string[] = []\n  id: string = ''\n}\nclass Model {\n  pictureUrl: string = \"\"\n  name: string = \"\"\n  comments: string = \"\"\n  desc: string = \"\"\n  linkParam: string = \"\"\n  mcInfo: string = \"\"\n  label: string = \"\"\n  cgType: string = \"\"\n  constructor(pictureUrl: string, name: string, comments: string, desc: string, linkParam: string, mcInfo: string,\n    label: string, cgType: string) {\n    this.pictureUrl = pictureUrl;\n    this.name = name;\n    this.comments = comments;\n    this.desc = desc;\n    this.linkParam = linkParam;\n    this.mcInfo = mcInfo;\n    this.label = label;\n    this.cgType = cgType;\n  }\n}\nclass PriceInfo {\n  price: number = 0;\n  level: number = 1;\n  constructor(price: number, level: number) {\n    this.price = price;\n    this.level = level;\n  }\n}\n@Entry\n@Component\nstruct MyComponent {\n  private data: MyDataSource = new MyDataSource();\n  aboutToAppear(): void {\n    for (let index = 0; index < 20; index++) {\n      let item = new Item()\n      for (let i = 0; i < 1000; i++) {\n        item.advertInfos.push(new Model(\"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\"));\n        item.productPrice.push(new PriceInfo(1.99, 123456));\n        item.addresses.push(\"Beijing\")\n      }\n      item.id = index.toString();\n      this.data.pushData(item)\n    }\n  }\n  build() {\n    Column() {\n      Text('Use the unique ID of an item as the key')\n        .fontSize(12)\n        .height('16')\n        .margin({\n          top: 5,\n          bottom: 10\n        })\n      List() {\n        LazyForEach(this.data, (item: Item) => {\n          ListItem() {\n            ChildComponent({ desc: item.id, sum: 0, avg: 0 })\n          }\n          .width('100%')\n          .height('10%')\n          .border({ width: 1 })\n          .borderStyle(BorderStyle.Dashed)\n        }, (item: Item) => item.id.toString())\n      }\n      .height('100%')\n      .width('100%')\n    }\n  }\n}
反例
//源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\n// 此处为复用的自定义组件\n@Reusable\n@Component\nstruct ChildComponent {\n  @State desc: string = '';\n  @State sum: number = 0;\n  @State avg: number = 0;\n\n  aboutToReuse(params: Record<string, Object>): void {\n    this.desc = params.desc as string;\n    this.sum = params.sum as number;\n    this.avg = params.avg as number;\n  }\n\n  build() {\n    Column() {\n      Text('子组件' + this.desc)\n        .fontSize(30)\n        .fontWeight(30)\n      Text('结果' + this.sum)\n        .fontSize(30)\n        .fontWeight(30)\n      Text('平均值' + this.avg)\n        .fontSize(30)\n        .fontWeight(30)\n    }\n  }\n}\n\nclass Item {\n  advertInfos: Model[] = []\n  productPrice: PriceInfo[] = []\n  addresses: string[] = []\n  id: string = ''\n}\n\nclass Model {\n  pictureUrl: string = \"\"\n  name: string = \"\"\n  comments: string = \"\"\n  desc: string = \"\"\n  linkParam: string = \"\"\n  mcInfo: string = \"\"\n  label: string = \"\"\n  cgType: string = \"\"\n\n  constructor(pictureUrl: string, name: string, comments: string, desc: string, linkParam: string, mcInfo: string,\n    label: string, cgType: string) {\n    this.pictureUrl = pictureUrl;\n    this.name = name;\n    this.comments = comments;\n    this.desc = desc;\n    this.linkParam = linkParam;\n    this.mcInfo = mcInfo;\n    this.label = label;\n    this.cgType = cgType;\n  }\n}\n\nclass PriceInfo {\n  price: number = 0;\n  level: number = 1;\n\n  constructor(price: number, level: number) {\n    this.price = price;\n    this.level = level;\n  }\n}\n\n@Entry\n@Component\nstruct MyComponent {\n  private data: MyDataSource = new MyDataSource();\n\n  aboutToAppear(): void {\n    for (let index = 0; index < 20; index++) {\n      let item = new Item()\n      for (let i = 0; i < 1000; i++) {\n        item.advertInfos.push(new Model(\"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\", \"Product A\"));\n        item.productPrice.push(new PriceInfo(1.99, 123456));\n        item.addresses.push(\"Beijing\")\n      }\n      item.id = index.toString();\n      this.data.pushData(item)\n    }\n  }\n\n  build() {\n    Column() {\n      Text('Use the time-consuming function `JSON.stringify (item)` to generate a key')\n        .fontSize(12)\n        .height('16')\n        .margin({\n          top: 5,\n          bottom: 10\n        })\n      List() {\n        LazyForEach(this.data, (item: Item) => {\n          ListItem() {\n            ChildComponent({ desc: item.id, sum: 0, avg: 0 })\n          }\n          .width('100%')\n          .height('10%')\n          .border({ width: 1 })\n          .borderStyle(BorderStyle.Dashed)\n        }, (item: Item) => JSON.stringify(item))\n      }\n      .height('100%')\n      .width('100%')\n    }\n  }\n}
规则集
plugin:@performance/recommended
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
