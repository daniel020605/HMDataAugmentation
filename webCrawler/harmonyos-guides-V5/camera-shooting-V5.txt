拍照(ArkTS)
拍照是相机的最重要功能之一，拍照模块基于相机复杂的逻辑，为了保证用户拍出的照片质量，在中间步骤可以设置分辨率、闪光灯、焦距、照片质量及旋转角度等信息。
开发步骤
详细的API说明请参考Camera API参考。
 导入image接口。创建拍照输出流的SurfaceId以及拍照输出的数据，都需要用到系统提供的image接口能力，导入image接口的方法如下。 import { image } from '@kit.ImageKit';\nimport { camera } from '@kit.CameraKit';\nimport { fileIo as fs } from '@kit.CoreFileKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nimport { BusinessError } from '@kit.BasicServicesKit'; 创建拍照输出流。 通过CameraOutputCapability类中的photoProfiles属性，可获取当前设备支持的拍照输出流，通过createPhotoOutput方法传入支持的某一个输出流及步骤一获取的SurfaceId创建拍照输出流。 function getPhotoOutput(cameraManager: camera.CameraManager, cameraOutputCapability: camera.CameraOutputCapability): camera.PhotoOutput | undefined {\n  let photoProfilesArray: Array<camera.Profile> = cameraOutputCapability.photoProfiles;\n  if (!photoProfilesArray) {\n    console.error(\"createOutput photoProfilesArray == null || undefined\");\n  }\n  let photoOutput: camera.PhotoOutput | undefined = undefined;\n  try {\n    photoOutput = cameraManager.createPhotoOutput(photoProfilesArray[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to createPhotoOutput. error: ${JSON.stringify(err)}`);\n  }\n  return photoOutput;\n} 设置拍照photoAvailable的回调，并将拍照的buffer保存为图片。 Context获取方式请参考：获取UIAbility的上下文信息。 如需要在图库中看到所保存的图片、视频资源，需要将其保存到媒体库，保存方式请参考：保存媒体库资源。 需要在photoOutput.on('photoAvailable')接口获取到buffer时，将buffer在安全控件中保存到媒体库。 let context = getContext(this);\n\nfunction setPhotoOutputCb(photoOutput: camera.PhotoOutput) {\n//设置回调之后，调用photoOutput的capture方法，就会将拍照的buffer回传到回调中\n  photoOutput.on('photoAvailable', (errCode: BusinessError, photo: camera.Photo): void => {\n     console.info('getPhoto start');\n     console.info(`err: ${JSON.stringify(errCode)}`);\n     if (errCode || photo === undefined) {\n       console.error('getPhoto failed');\n       return;\n     }\n     let imageObj: image.Image = photo.main;\n     imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n       console.info('getComponent start');\n       if (errCode || component === undefined) {\n         console.error('getComponent failed');\n         return;\n       }\n       let buffer: ArrayBuffer;\n       if (component.byteBuffer) {\n         buffer = component.byteBuffer;\n       } else {\n         console.error('byteBuffer is null');\n         return;\n       }\n       // 如需要在图库中看到所保存的图片、视频资源，请使用用户无感的安全控件创建媒体资源。\n\n       // buffer处理结束后需要释放该资源，如果未正确释放资源会导致后续拍照获取不到buffer\n       imageObj.release(); \n     });\n   });\n} 参数配置。 配置相机的参数可以调整拍照的一些功能，包括闪光灯、变焦、焦距等。 function configuringSession(photoSession: camera.PhotoSession): void {\n  // 判断设备是否支持闪光灯\n  let flashStatus: boolean = false;\n  try {\n    flashStatus = photoSession.hasFlash();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to hasFlash. error: ${JSON.stringify(err)}`);\n  }\n  console.info(`Returned with the flash light support status: ${flashStatus}`);\n  if (flashStatus) {\n    // 判断是否支持自动闪光灯模式\n    let flashModeStatus: boolean = false;\n    try {\n      let status: boolean = photoSession.isFlashModeSupported(camera.FlashMode.FLASH_MODE_AUTO);\n      flashModeStatus = status;\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error(`Failed to check whether the flash mode is supported. error: ${JSON.stringify(err)}`);\n    }\n    if (flashModeStatus) {\n      // 设置自动闪光灯模式\n      try {\n        photoSession.setFlashMode(camera.FlashMode.FLASH_MODE_AUTO);\n      } catch (error) {\n        let err = error as BusinessError;\n        console.error(`Failed to set the flash mode. error: ${JSON.stringify(err)}`);\n      }\n    }\n  }\n  // 判断是否支持连续自动变焦模式\n  let focusModeStatus: boolean = false;\n  try {\n    let status: boolean = photoSession.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n    focusModeStatus = status;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to check whether the focus mode is supported. error: ${JSON.stringify(err)}`);\n  }\n  if (focusModeStatus) {\n    // 设置连续自动变焦模式\n    try {\n      photoSession.setFocusMode(camera.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error(`Failed to set the focus mode. error: ${JSON.stringify(err)}`);\n    }\n  }\n  // 获取相机支持的可变焦距比范围\n  let zoomRatioRange: Array<number> = [];\n  try {\n    zoomRatioRange = photoSession.getZoomRatioRange();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to get the zoom ratio range. error: ${JSON.stringify(err)}`);\n  }\n  if (zoomRatioRange.length <= 0 ) {\n    return;\n  }\n  // 设置可变焦距比\n  try {\n    photoSession.setZoomRatio(zoomRatioRange[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to set the zoom ratio value. error: ${JSON.stringify(err)}`);\n  }\n} 触发拍照。 通过photoOutput类的capture方法，执行拍照任务。该方法有两个参数，第一个参数为拍照设置参数的setting，setting中可以设置照片的质量和旋转角度，第二参数为回调函数。 获取拍照旋转角度的方法为，通过通过PhotoOutput类中的getPhotoRotation方法获取rotation实际的值 function capture(captureLocation: camera.Location, photoOutput: camera.PhotoOutput): void {\n  let settings: camera.PhotoCaptureSetting = {\n    quality: camera.QualityLevel.QUALITY_LEVEL_HIGH,  // 设置图片质量高\n    rotation: camera.ImageRotation.ROTATION_0,  // 设置图片旋转角度的camera.ImageRotation.ROTATION_0是通过说明中获取拍照角度的getPhotoRotation方法获取的值进行设置\n    location: captureLocation,  // 设置图片地理位置\n    mirror: false  // 设置镜像使能开关(默认关)\n  };\n  photoOutput.capture(settings, (err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to capture the photo. error: ${JSON.stringify(err)}`);\n      return;\n    }\n    console.info('Callback invoked to indicate the photo capture request success.');\n  });\n} 
状态监听
在相机应用开发过程中，可以随时监听拍照输出流状态，包括拍照流开始、拍照帧的开始与结束、拍照输出流的错误。
 通过注册固定的captureStart回调函数获取监听拍照开始结果，photoOutput创建成功时即可监听，相机设备已经准备开始这次拍照时触发，该事件返回此次拍照的captureId。 function onPhotoOutputCaptureStart(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('captureStartWithInfo', (err: BusinessError, captureStartInfo: camera.CaptureStartInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info(`photo capture started, captureId : ${captureStartInfo.captureId}`);\n  });\n} 通过注册固定的captureEnd回调函数获取监听拍照结束结果，photoOutput创建成功时即可监听，该事件返回结果为拍照完全结束后的相关信息CaptureEndInfo。 function onPhotoOutputCaptureEnd(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('captureEnd', (err: BusinessError, captureEndInfo: camera.CaptureEndInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info(`photo capture end, captureId : ${captureEndInfo.captureId}`);\n    console.info(`frameCount : ${captureEndInfo.frameCount}`);\n  });\n} 通过注册固定的captureReady回调函数获取监听可拍下一张结果，photoOutput创建成功时即可监听，当下一张可拍时触发，该事件返回结果为下一张可拍的相关信息。 function onPhotoOutputCaptureReady(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('captureReady', (err: BusinessError) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info(`photo capture ready`);\n  });\n} 通过注册固定的error回调函数获取监听拍照输出流的错误结果。回调返回拍照输出接口使用错误时的对应错误码，错误码类型参见Camera错误码。 function onPhotoOutputError(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('error', (error: BusinessError) => {\n    console.error(`Photo output error code: ${error.code}`);\n  });\n} 
