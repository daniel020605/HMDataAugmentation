@performance/hp-arkui-use-onAnimationStart-for-swiper-preload
建议Swiper预加载机制搭配 OnAnimationStart 接口回调使用。
滑动丢帧场景下，建议优先修改。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/hp-arkui-use-onAnimationStart-for-swiper-preload\": \"warn\",\n  }\n}
选项
该规则无需配置额外选项。
正例
import image from '@ohos.multimedia.image';\n// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\nimport { PhotoItem } from './component/ChildComponent';\nimport { MyObject } from './data/DataEntry';\n\n@Entry\n@Component\nstruct MyComponent{\n  cacheCount: number = 1\n  swiperController: SwiperController = new SwiperController();\n  private data: MyDataSource = new MyDataSource([]);\n  context = getContext(this);\n\n  build() {\n    Swiper(this.swiperController) {\n      LazyForEach(this.data, (item: MyObject, index?: number) => {\n        // 源码文件，请以工程实际为准\n        PhotoItem({ myIndex: index, dataSource: this.data })\n      }, (item: MyObject) => item.id) // item唯一id\n    }\n    .cachedCount(this.cacheCount)\n    .indicator(true)\n    .loop(false)\n    // 在OnAnimationStart接口回调中进行预加载资源的操作\n    .onAnimationStart((index: number, targetIndex: number) => {\n      if (targetIndex !== index) {\n        try {\n          // 获取resourceManager资源管理器\n          const resourceMgr = this.context.resourceManager;\n          // 获取rawfile文件夹下icon.png的ArrayBuffer\n          let str = \"item\" + (targetIndex + this.cacheCount + 2) + \".jpg\";\n          resourceMgr.getRawFileContent(str).then((value) => {\n            // 创建imageSource\n            const imageSource = image.createImageSource(value.buffer);\n            imageSource.createPixelMap().then((value) => {\n              this.data.addData(targetIndex + this.cacheCount + 1, {\n                description: \"\" + (targetIndex + this.cacheCount + 1),\n                image: value\n              })\n            })\n          })\n        } catch (err) {\n          console.log(\"error code\" + err);\n        }\n      }\n    })\n    .width('100%')\n    .height('100%')\n  }\n}
反例
// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\nimport { PhotoItem } from './component/ChildComponent';\nimport { MyObject } from './data/DataEntry';\n\n\n@Entry\n@Component\nstruct MyComponent{\n  cacheCount: number = 1\n  swiperController: SwiperController = new SwiperController();\n  private data: MyDataSource = new MyDataSource([]);\n  context = getContext(this);\n\n  build() {\n    // Swiper组件没有使用OnAnimationStart进行预加载\n    Swiper(this.swiperController) {\n      LazyForEach(this.data, (item: MyObject, index?: number) => {\n        // 源码文件，请以工程实际为准\n        PhotoItem({ myIndex: index, dataSource: this.data })\n      }, (item: MyObject) => item.id)\n    }\n    .cachedCount(this.cacheCount)\n    .indicator(true)\n    .loop(false)\n    .width('100%')\n    .height('100%')\n  }\n}
规则集
plugin:@performance/recommended
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
