HDR Vivid相机录像(ArkTS)
HarmonyOS支持调用接口，录制HDR Vivid视频，可以拍出层次表现更细腻、光影细节更丰富的画面，提升画面质感，呈现更卓越的视觉效果。
当前示例提供完整的HDR Vivid录像开发步骤，方便开发者实现录制HDR Vivid视频的功能。
在参考以下示例前，建议开发者查看相机开发指导(ArkTS)的具体章节，了解设备输入、会话管理、录像等单个流程。
开发步骤
导入接口。 import { camera } from '@kit.CameraKit';\nimport { colorSpaceManager } from '@kit.ArkGraphics2D';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { media } from '@kit.MediaKit';\nimport { common } from '@kit.AbilityKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nimport { fileIo as fs } from '@kit.CoreFileKit'; 获取预览、录像的配置项。 HDR录像的输出格式需要设置成10bit的CAMERA_FORMAT_YCRCB_P010。具体参考setColorSpace。  预览流与录像输出流的分辨率的宽高比要保持一致，如果设置XComponent组件中的Surface显示区域宽高比为1920:1080 = 16:9，则需要预览流中的分辨率的宽高比也为16:9，如分辨率选择640:360，或960:540，或1920:1080，以此类推。  function getPreviewProfile(previewProfiles: Array<camera.Profile>, size: camera.Size): undefined | camera.Profile {\n  let previewProfile: undefined | camera.Profile = previewProfiles.find((profile: camera.Profile) => {\n    return profile.format === camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010 &&\n      profile.size.width === size.width && profile.size.height == size.height\n  });\n  return previewProfile;\n}\n\nfunction getVideoProfile(videoProfiles: Array<camera.VideoProfile>, size: camera.Size): undefined | camera.VideoProfile {\n  let videoProfile: undefined | camera.VideoProfile = videoProfiles.find((profile: camera.VideoProfile) => {\n    return profile.format === camera.CameraFormat.CAMERA_FORMAT_YCRCB_P010 &&\n      profile.size.width === size.width && profile.size.height == size.height\n  });\n  return videoProfile;\n} 查询是否支持视频防抖。 HDR录像需要支持视频防抖。 function isVideoStabilizationModeSupported(session: camera.VideoSession, mode: camera.VideoStabilizationMode): boolean {\n  let isSupported: boolean = false;\n  try {\n    isSupported = session.isVideoStabilizationModeSupported(mode);\n  } catch (error) {\n    // 失败返回错误码error.code并处理\n    let err = error as BusinessError;\n    console.error(`The isVideoStabilizationModeSupported call failed. error code: ${err.code}`);\n  }\n  return isSupported;\n} 设置视频防抖。 function setVideoStabilizationMode(session: camera.VideoSession): boolean {\n  let mode: camera.VideoStabilizationMode = camera.VideoStabilizationMode.AUTO;\n  // 查询是否支持视频防抖\n  let isSupported: boolean = isVideoStabilizationModeSupported(session, mode);\n  if (isSupported) {\n    console.info(`setVideoStabilizationMode: ${mode}`);\n    // 设置视频防抖\n    session.setVideoStabilizationMode(mode);\n    let activeVideoStabilizationMode = session.getActiveVideoStabilizationMode();\n    console.info(`activeVideoStabilizationMode: ${activeVideoStabilizationMode}`);\n  } else {\n    console.info(`videoStabilizationMode: ${mode} is not support`);\n  }\n  return isSupported;\n} 查询支持的色彩空间。 function getSupportedColorSpaces(session: camera.VideoSession): Array<colorSpaceManager.ColorSpace> {\n  let colorSpaces: Array<colorSpaceManager.ColorSpace> = [];\n  try {\n    colorSpaces = session.getSupportedColorSpaces();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`The getSupportedColorSpaces call failed. error code: ${err.code}`);\n  }\n  return colorSpaces;\n} 设置色彩空间。 如果是SDR录像色彩空间需要设置为BT709_LIMIT，如果是HDR录像色彩空间需要设置为BT2020_HLG_LIMIT。具体参考setColorSpace。 function setColorSpaceAfterCommitConfig(session: camera.VideoSession, isHdr: boolean): void {\n  let colorSpace: colorSpaceManager.ColorSpace = isHdr? colorSpaceManager.ColorSpace.BT2020_HLG_LIMIT : colorSpaceManager.ColorSpace.BT709_LIMIT;\n  let colorSpaces: Array<colorSpaceManager.ColorSpace> = getSupportedColorSpaces(session);\n  let isSupportedColorSpaces = colorSpaces.indexOf(colorSpace) >= 0;\n  if (isSupportedColorSpaces) {\n    console.info(`setColorSpace: ${colorSpace}`);\n    session.setColorSpace(colorSpace);\n    let activeColorSpace:colorSpaceManager.ColorSpace = session.getActiveColorSpace();\n    console.info(`activeColorSpace: ${activeColorSpace}`);\n  } else {\n    console.info(`colorSpace: ${colorSpace} is not support`);\n  }\n} 实现HDR录像。 在创建预览输出、录像输出前执行步骤2获取配置项，提交会话配置前执行步骤4设置视频防抖、执行步骤6设置色彩空间，其余流程按照正常录像流程开发。 async function cameraHdrRecordingCase(context: common.Context, surfaceId: string): Promise<void> {\n  // 创建CameraManager对象\n  let cameraManager: camera.CameraManager = camera.getCameraManager(context);\n  if (!cameraManager) {\n    console.error(\"camera.getCameraManager error\");\n    return;\n  }\n\n  // 监听相机状态变化\n  cameraManager.on('cameraStatus', (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      console.error('cameraStatus with errorCode = ' + err.code);\n      return;\n    }\n    console.info(`camera : ${cameraStatusInfo.camera.cameraId}`);\n    console.info(`status: ${cameraStatusInfo.status}`);\n  });\n\n  // 获取相机列表\n  let cameraArray: Array<camera.CameraDevice> = [];\n  try {\n    cameraArray = cameraManager.getSupportedCameras();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`getSupportedCameras call failed. error code: ${err.code}`);\n  }\n\n  if (cameraArray.length <= 0) {\n    console.error(\"cameraManager.getSupportedCameras error\");\n    return;\n  }\n\n  // 获取支持的模式类型\n  let sceneModes: Array<camera.SceneMode> = cameraManager.getSupportedSceneModes(cameraArray[0]);\n  let isSupportVideoMode: boolean = sceneModes.indexOf(camera.SceneMode.NORMAL_VIDEO) >= 0;\n  if (!isSupportVideoMode) {\n    console.error('video mode not support');\n    return;\n  }\n\n  // 获取相机设备支持的输出流能力\n  let cameraOutputCap: camera.CameraOutputCapability = cameraManager.getSupportedOutputCapability(cameraArray[0], camera.SceneMode.NORMAL_VIDEO);\n  if (!cameraOutputCap) {\n    console.error(\"cameraManager.getSupportedOutputCapability error\")\n    return;\n  }\n  console.info(\"outputCapability: \" + JSON.stringify(cameraOutputCap));\n\n  let previewProfilesArray: Array<camera.Profile> = cameraOutputCap.previewProfiles;\n  if (!previewProfilesArray) {\n    console.error(\"createOutput previewProfilesArray == null || undefined\");\n    return;\n  }\n\n  let videoProfilesArray: Array<camera.VideoProfile> = cameraOutputCap.videoProfiles;\n  if (!videoProfilesArray) {\n    console.error(\"createOutput videoProfilesArray == null || undefined\");\n    return;\n  }\n  // videoProfile的宽高需要与AVRecorderProfile的宽高保持一致，并且需要使用AVRecorderProfile锁支持的宽高\n  let videoSize: camera.Size = {\n    width: 640,\n    height: 480\n  }\n  let previewProfile: undefined | camera.Profile = getPreviewProfile(previewProfilesArray, videoSize);\n  if (!previewProfile) {\n    console.error('previewProfile is not found');\n    return;\n  }\n  let videoProfile: undefined | camera.VideoProfile = getVideoProfile(videoProfilesArray, videoSize);\n  if (!videoProfile) {\n    console.error('videoProfile is not found');\n    return;\n  }\n  // 配置参数以实际硬件设备支持的范围为准\n  let aVRecorderProfile: media.AVRecorderProfile = {\n    audioBitrate: 48000,\n    audioChannels: 2,\n    audioCodec: media.CodecMimeType.AUDIO_AAC,\n    audioSampleRate: 48000,\n    fileFormat: media.ContainerFormatType.CFT_MPEG_4,\n    videoBitrate: 2000000,\n    videoCodec: media.CodecMimeType.VIDEO_AVC,\n    videoFrameWidth: videoSize.width,\n    videoFrameHeight: videoSize.height,\n    videoFrameRate: 30\n  };\n  let options: photoAccessHelper.CreateOptions = {\n    title: Date.now().toString()\n  };\n  let accessHelper: photoAccessHelper.PhotoAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n  let videoUri: string = await accessHelper.createAsset(photoAccessHelper.PhotoType.VIDEO, 'mp4', options);\n  let file: fs.File = fs.openSync(videoUri, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n  let aVRecorderConfig: media.AVRecorderConfig = {\n    audioSourceType: media.AudioSourceType.AUDIO_SOURCE_TYPE_MIC,\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: aVRecorderProfile,\n    url: `fd://${file.fd.toString()}`, // 文件需先由调用者创建，赋予读写权限，将文件fd传给此参数，eg.fd://45--file:///data/media/01.mp4\n    rotation: 0, // 合理值0、90、180、270，非合理值prepare接口将报错\n    location: { latitude: 30, longitude: 130 }\n  };\n\n  let avRecorder: media.AVRecorder | undefined = undefined;\n  try {\n    avRecorder = await media.createAVRecorder();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`createAVRecorder call failed. error code: ${err.code}`);\n  }\n\n  if (avRecorder === undefined) {\n    return;\n  }\n\n  try {\n    await avRecorder.prepare(aVRecorderConfig);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`prepare call failed. error code: ${err.code}`);\n  }\n\n  let videoSurfaceId: string | undefined = undefined; // 该surfaceID用于传递给相机接口创造videoOutput\n  try {\n    videoSurfaceId = await avRecorder.getInputSurface();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`getInputSurface call failed. error code: ${err.code}`);\n  }\n  if (videoSurfaceId === undefined) {\n    return;\n  }\n  // 创建VideoOutput对象\n  let videoOutput: camera.VideoOutput | undefined = undefined;\n  try {\n    videoOutput = cameraManager.createVideoOutput(videoProfile, videoSurfaceId);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to create the videoOutput instance. error: ${JSON.stringify(err)}`);\n  }\n  if (videoOutput === undefined) {\n    return;\n  }\n  // 监听视频输出错误信息\n  videoOutput.on('error', (error: BusinessError) => {\n    console.error(`Preview output error code: ${error.code}`);\n  });\n\n  //创建会话\n  let videoSession: camera.VideoSession | undefined = undefined;\n  try {\n    videoSession = cameraManager.createSession(camera.SceneMode.NORMAL_VIDEO) as camera.VideoSession;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to create the session instance. error: ${JSON.stringify(err)}`);\n  }\n  if (videoSession === undefined) {\n    return;\n  }\n  // 监听session错误信息\n  videoSession.on('error', (error: BusinessError) => {\n    console.error(`Video session error code: ${error.code}`);\n  });\n\n  // 开始配置会话\n  try {\n    videoSession.beginConfig();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to beginConfig. error: ${JSON.stringify(err)}`);\n  }\n\n  // 创建相机输入流\n  let cameraInput: camera.CameraInput | undefined = undefined;\n  try {\n    cameraInput = cameraManager.createCameraInput(cameraArray[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to createCameraInput. error: ${JSON.stringify(err)}`);\n  }\n  if (cameraInput === undefined) {\n    return;\n  }\n  // 监听cameraInput错误信息\n  let cameraDevice: camera.CameraDevice = cameraArray[0];\n  cameraInput.on('error', cameraDevice, (error: BusinessError) => {\n    console.error(`Camera input error code: ${error.code}`);\n  });\n\n  // 打开相机\n  try {\n    await cameraInput.open();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to open cameraInput. error: ${JSON.stringify(err)}`);\n  }\n\n  // 向会话中添加相机输入流\n  try {\n    videoSession.addInput(cameraInput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to add cameraInput. error: ${JSON.stringify(err)}`);\n  }\n\n  // 创建预览输出流，其中参数 surfaceId 参考下面 XComponent 组件，预览流为XComponent组件提供的surface\n  let previewOutput: camera.PreviewOutput | undefined = undefined;\n  try {\n    previewOutput = cameraManager.createPreviewOutput(previewProfile, surfaceId);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to create the PreviewOutput instance. error: ${JSON.stringify(err)}`);\n  }\n\n  if (previewOutput === undefined) {\n    return;\n  }\n  // 向会话中添加预览输出流\n  try {\n    videoSession.addOutput(previewOutput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to add previewOutput. error: ${JSON.stringify(err)}`);\n  }\n\n  // 向会话中添加录像输出流\n  try {\n    videoSession.addOutput(videoOutput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to add videoOutput. error: ${JSON.stringify(err)}`);\n  }\n\n  // 提交会话配置\n  try {\n    await videoSession.commitConfig();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`videoSession commitConfig error: ${JSON.stringify(err)}`);\n  }\n\n  // 设置视频防抖\n  if (setVideoStabilizationMode(videoSession)) {\n    // 设置色彩空间\n    setColorSpaceAfterCommitConfig(videoSession, true);\n  }\n\n  // 启动会话\n  try {\n    await videoSession.start();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`videoSession start error: ${JSON.stringify(err)}`);\n  }\n\n  // 启动录像输出流\n  videoOutput.start((err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to start the video output. error: ${JSON.stringify(err)}`);\n      return;\n    }\n    console.info('Callback invoked to indicate the video output start success.');\n  });\n\n  // 开始录像\n  try {\n    await avRecorder.start();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`avRecorder start error: ${JSON.stringify(err)}`);\n  }\n\n  // 停止录像输出流\n  videoOutput.stop((err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to stop the video output. error: ${JSON.stringify(err)}`);\n      return;\n    }\n    console.info('Callback invoked to indicate the video output stop success.');\n  });\n\n  // 停止录像\n  try {\n    await avRecorder.stop();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`avRecorder stop error: ${JSON.stringify(err)}`);\n  }\n\n  // 停止当前会话\n  await videoSession.stop();\n\n  // 关闭文件\n  fs.closeSync(file);\n\n  // 释放相机输入流\n  await cameraInput.close();\n\n  // 释放预览输出流\n  await previewOutput.release();\n\n  // 释放录像输出流\n  await videoOutput.release();\n\n  // 释放会话\n  await videoSession.release();\n\n  // 会话置空\n  videoSession = undefined;\n} 
