HML语法参考
HML是一套类HTML的标记语言，通过组件，事件构建出页面的内容。页面具备数据绑定、事件绑定、列表渲染、条件渲染和逻辑控制等高级能力。
页面结构
<!-- xxx.hml -->\n<div class=\"item-container\">\n  <text class=\"item-title\">Image Show</text>\n  <div class=\"item-content\">\n    <image src=\"/common/xxx.png\" class=\"image\"></image>\n  </div>\n</div>
数据绑定
<!-- xxx.hml -->\n<div class=\"container\" onclick=\"changeText\">\n  <text> {{content[1]}} </text>\n</div>
/*xxx.css*/\n.container{\n    margin: 200px;\n}
// xxx.js\nexport default {\n  data: {\n    content: ['Hello World!', 'Welcome to my world!']\n  },\n  changeText: function() {\n    this.content.splice(1, 1, this.content[0]);\n  }\n}
 针对数组内的数据修改，请使用splice方法生效数据绑定变更。 hml文件中的js表达式不支持ES6语法。 
普通事件绑定
事件通过'on'或者'@'绑定在组件上，当组件触发事件时会执行JS文件中对应的事件处理函数。
事件支持的写法有：
 \"funcName\"：funcName为事件回调函数名（在JS文件中定义相应的函数实现）。 \"funcName(a,b)\"：函数参数例如a，b可以是常量，或者是在JS文件中的data中定义的变量（前面不用写this.）。 示例 <!-- xxx.hml -->\n<div class=\"container\">\n    <text class=\"title\">{{count}}</text>\n    <div class=\"box\">\n        <input type=\"button\" class=\"btn\" value=\"increase\" onclick=\"increase\" />\n        <input type=\"button\" class=\"btn\" value=\"decrease\" @click=\"decrease\" />\n        <!-- 传递额外参数 -->\n        <input type=\"button\" class=\"btn\" value=\"double\" @click=\"multiply(2)\" />\n        <input type=\"button\" class=\"btn\" value=\"decuple\" @click=\"multiply(10)\" />\n        <input type=\"button\" class=\"btn\" value=\"square\" @click=\"multiply(count)\" />\n    </div>\n</div> // xxx.js\nexport default {\n  data: {\n    count: 0\n  },\n  increase() {\n    this.count++;\n  },\n  decrease() {\n    this.count--;\n  },\n  multiply(multiplier) {\n    this.count = multiplier * this.count;\n  }\n}; /* xxx.css */\n.container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    left: 0px;\n    top: 0px;\n    width: 454px;\n    height: 454px;\n}\n.title {\n    font-size: 30px;\n    text-align: center;\n    width: 200px;\n    height: 100px;\n}\n.box {\n    width: 454px;\n    height: 200px;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n}\n.btn {\n    width: 200px;\n    border-radius: 0;\n    margin-top: 10px;\n    margin-left: 10px;\n} 
冒泡事件绑定5+
冒泡事件绑定包括：
 绑定冒泡事件：on:{event}.bubble。on:{event}等价于on:{event}.bubble。 绑定并阻止冒泡事件向上冒泡：grab:{event}.bubble。grab:{event}等价于grab:{event}.bubble。     冒泡事件是指多个组件嵌套时，组件之间会有层次关系，当这些组件注册了相同的事件时，这个事件会首先运行在该元素上的处理程序，然后运行其父元素上的处理程序，一直向上到其他祖先上的处理程序。如果当一个组件触发了这个事件，它会首先触发该组件的回调函数，然后触发其父元素上的回调函数，然后触发其他祖先上的处理程序。 详细冒泡事件说明参见通用事件章节。   示例 <!-- xxx.hml -->\n<div>\n   <!-- 使用事件冒泡模式绑定事件回调函数。5+ -->;\n    <div on:touchstart.bubble=\"touchstartfunc\"></div>\n    <div on:touchstart=\"touchstartfunc\"></div>\n    <!-- 绑定事件回调函数，但阻止事件向上传递。5+ -->\n    <div grab:touchstart.bubble=\"touchstartfunc\"></div>\n    <div grab:touchstart=\"touchstartfunc\"></div>\n    <!-- 使用事件冒泡模式绑定事件回调函数。6+ -->\n    <div on:click.bubble=\"clickfunc\"></div>\n    <div on:click=\"clickfunc\"></div>\n    <!-- 绑定事件回调函数，但阻止事件向上传递。6+ -->\n    <div grab:click.bubble=\"clickfunc\"></div>\n    <div grab:click=\"clickfunc\"></div>\n</div> // xxx.js\nexport default {\n    clickfunc: function(e) {\n        console.log(e);\n    },\n    touchstartfuc: function(e) {\n        console.log(e);\n    },\n} 
采用旧写法(onclick)的事件绑定在最小API版本6以下时采用不冒泡处理，在最小API版本为6及6以上时采用冒泡处理。
捕获事件绑定5+
Touch触摸类事件支持捕获，捕获阶段位于冒泡阶段之前，捕获事件先到达父组件然后达到子组件。
捕获事件绑定包括：
 绑定捕获事件：on:{event}.capture。 绑定并阻止事件向下传递：grab:{event}.capture。 示例 <!-- xxx.hml -->\n<div>\n    <!-- 使用事件捕获模式绑定事件回调函数。5+ -->    \n    <div on:touchstart.capture=\"touchstartfunc\"></div>\n    <!-- 绑定事件回调函数，但阻止事件向下传递。5+ -->\n    <div grab:touchstart.capture=\"touchstartfunc\"></div>\n</div> // xxx.js\nexport default {\n    touchstartfuc: function(e) {\n        console.log(e);\n    },\n} 
列表渲染
<!-- xxx.hml -->\n<div class=\"array-container\" style=\"flex-direction: column;margin: 200px;\">\n  <!-- div列表渲染 -->\n  <!-- 默认$item代表数组中的元素, $idx代表数组中的元素索引 -->\n  <div for=\"{{array}}\" tid=\"id\" onclick=\"changeText\">\n    <text>{{$idx}}.{{$item.name}}</text>\n  </div>\n  <!-- 自定义元素变量名称 -->\n  <div for=\"{{value in array}}\" tid=\"id\" onclick=\"changeText\">    \n    <text>{{$idx}}.{{value.name}}</text>\n  </div>\n  <!-- 自定义元素变量、索引名称 -->\n  <div for=\"{{(index, value) in array}}\" tid=\"id\" onclick=\"changeText\">    \n    <text>{{index}}.{{value.name}}</text>\n  </div>\n</div>
// xxx.js\nexport default {\n  data: {\n    array: [\n      {id: 1, name: 'jack', age: 18}, \n      {id: 2, name: 'tony', age: 18},\n    ],\n  },\n  changeText: function() {\n    if (this.array[1].name === \"tony\"){\n      this.array.splice(1, 1, {id:2, name: 'Isabella', age: 18});\n    } else {\n      this.array.splice(2, 1, {id:3, name: 'Bary', age: 18});\n    }\n  },\n}
tid属性主要用来加速for循环的重渲染，旨在列表中的数据有变更时，提高重新渲染的效率。tid属性是用来指定数组中每个元素的唯一标识，如果未指定，数组中每个元素的索引为该元素的唯一id。例如上述tid=\"id\"表示数组中的每个元素的id属性为该元素的唯一标识。for循环支持的写法如下：
 for=\"array\"：其中array为数组对象，array的元素变量默认为$item。 for=\"v in array\"：其中v为自定义的元素变量，元素索引默认为$idx。 for=\"(i, v) in array\"：其中元素索引为i，元素变量为v，遍历数组对象array。 
 数组中的每个元素必须存在tid指定的数据属性，否则运行时可能会导致异常。 数组中被tid指定的属性要保证唯一性，如果不是则会造成性能损耗。比如，示例中只有id和name可以作为tid字段，因为它们属于唯一字段。 tid不支持表达式。 
条件渲染
条件渲染分为2种：if/elif/else和show。两种写法的区别在于：第一种写法里if为false时，组件不会在vdom中构建，也不会渲染，而第二种写法里show为false时虽然也不渲染，但会在vdom中构建；另外，当使用if/elif/else写法时，节点必须是兄弟节点，否则编译无法通过。实例如下：
<!-- xxx.hml -->\n<div class=\"container\">\n  <button class=\"btn\" type=\"capsule\" value=\"toggleShow\" onclick=\"toggleShow\"></button>\n  <button class=\"btn\" type=\"capsule\" value=\"toggleDisplay\" onclick=\"toggleDisplay\"></button>\n  <text if=\"{{visible}}\"> Hello-world1 </text>\n  <text elif=\"{{display}}\"> Hello-world2 </text>\n  <text else> Hello-World </text>\n</div>
/* xxx.css */\n.container{\n  flex-direction: column;\n  align-items: center;\n}\n.btn{\n  width: 280px;\n  font-size: 26px;\n  margin: 10px 0;\n}
// xxx.js\nexport default {\n  data: {\n    visible: false,\n    display: true,\n  },\n  toggleShow: function() {\n    this.visible = !this.visible;\n  },\n  toggleDisplay: function() {\n    this.display = !this.display;\n  }\n}
优化渲染优化：show方法。当show为true时，节点正常渲染；当为false时，仅仅设置display样式为none。
<!-- xxx.hml -->\n<div class=\"container\">\n  <button class=\"btn\" type=\"capsule\" value=\"toggle\" onclick=\"toggle\"></button>\n  <text show=\"{{visible}}\" > Hello World </text>\n</div>
/* xxx.css */\n.container{\n  flex-direction: column;\n  align-items: center;\n}\n.btn{\n  width: 280px;\n  font-size: 26px;\n  margin: 10px 0;\n}
// xxx.js\nexport default {\n  data: {\n    visible: false,\n  },\n  toggle: function() {\n    this.visible = !this.visible;\n  },\n}
禁止在同一个元素上同时设置for和if属性。
逻辑控制块
<block>控制块使得循环渲染和条件渲染变得更加灵活；block在构建时不会被当作真实的节点编译。注意block标签只支持for和if属性。
<!-- xxx.hml -->\n<list>\n  <block for=\"glasses\">\n    <list-item type=\"glasses\">\n      <text>{{$item.name}}</text>\n    </list-item>\n    <block for=\"$item.kinds\">\n      <list-item type=\"kind\">\n        <text>{{$item.color}}</text>\n      </list-item>\n    </block>\n  </block>\n</list>
// xxx.js\nexport default {\n  data: {\n    glasses: [\n      {name:'sunglasses', kinds:[{name:'XXX',color:'XXX'},{name:'XXX',color:'XXX'}]},\n      {name:'nearsightedness mirror', kinds:[{name:'XXX',color:'XXX'}]},\n    ],\n  },\n}
模板引用
HML可以通过element引用模板文件，详细介绍可参考自定义组件的基本用法章节。
<!-- template.hml -->\n<div class=\"item\"> \n  <text>Name: {{name}}</text>\n  <text>Age: {{age}}</text>\n</div>
<!-- index.hml -->\n<element name='comp' src='../../common/template.hml'></element>\n<div>\n  <comp name=\"Tony\" age=\"18\"></comp>\n</div>
