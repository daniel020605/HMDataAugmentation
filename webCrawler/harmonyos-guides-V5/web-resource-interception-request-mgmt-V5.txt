自定义页面请求响应
Web组件支持在应用拦截到页面请求后自定义响应请求能力。开发者通过onInterceptRequest()接口来实现自定义资源请求响应 。自定义请求能力可以用于开发者自定义Web页面响应、自定义文件资源响应等场景。
Web网页上发起资源加载请求，应用层收到资源请求消息。应用层构造本地资源响应消息发送给Web内核。Web内核解析应用层响应信息，根据此响应信息进行页面资源加载。
在下面的示例中，Web组件通过拦截页面请求“https://www.example.com/test.html”， 在应用侧代码构建响应资源，实现自定义页面响应场景。
 前端页面index.html代码。 <!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n<!-- 页面资源请求 -->\n<a href=\"https://www.example.com/test.html\">intercept test!</a>\n</body>\n</html> 应用侧代码。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  responseResource: WebResourceResponse = new WebResourceResponse();\n  // 开发者自定义响应数据\n  @State webData: string = '<!DOCTYPE html>\\n' +\n    '<html>\\n' +\n    '<head>\\n' +\n    '<title>intercept test</title>\\n' +\n    '</head>\\n' +\n    '<body>\\n' +\n    '<h1>intercept ok</h1>\\n' +\n    '</body>\\n' +\n    '</html>'\n\n  build() {\n    Column() {\n      Web({ src: $rawfile('index.html'), controller: this.controller })\n        .onInterceptRequest((event) => {\n          if (event) {\n            console.info('url:' + event.request.getRequestUrl());\n            // 拦截页面请求\n            if (event.request.getRequestUrl() !== 'https://www.example.com/test.html') {\n              return null;\n            }\n          }\n          // 构造响应数据\n          this.responseResource.setResponseData(this.webData);\n          this.responseResource.setResponseEncoding('utf-8');\n          this.responseResource.setResponseMimeType('text/html');\n          this.responseResource.setResponseCode(200);\n          this.responseResource.setReasonMessage('OK');\n          return this.responseResource;\n        })\n    }\n  }\n} 
为自定义的JavaScript请求响应生成 CodeCache：自定义请求响应的资源类型如果是JavaScript脚本，可以在响应头中添加“ResponseDataID”字段，Web内核读取到该字段后会在为该JS资源生成CodeCache，加速JS执行，并且ResponseData如果有更新时必须更新该字段。不添加“ResponseDataID”字段的情况下默认不生成CodeCache。
在下面的示例中，Web组件通过拦截页面请求“https://www.example.com/test.js”， 应用侧代码构建响应资源，在响应头中添加“ResponseDataID”字段，开启生成CodeCache的功能。
 前端页面index.html代码。 <!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n\n<div id=\"div-1\">this is a test div</div>\n<div id=\"div-2\">this is a test div</div>\n<div id=\"div-3\">this is a test div</div>\n<div id=\"div-4\">this is a test div</div>\n<div id=\"div-5\">this is a test div</div>\n<div id=\"div-6\">this is a test div</div>\n<div id=\"div-7\">this is a test div</div>\n<div id=\"div-8\">this is a test div</div>\n<div id=\"div-9\">this is a test div</div>\n<div id=\"div-10\">this is a test div</div>\n<div id=\"div-11\">this is a test div</div>\n\n<script src=\"https://www.example.com/test.js\"></script>\n</body>\n</html> 应用侧代码。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n  responseResource: WebResourceResponse = new WebResourceResponse();\n  // 开发者自定义响应数据（响应数据长度需大于等于1024才会生成codecache）\n  @State jsData: string = 'let text_msg = \"the modified content:version 0000000000001\";\\n' +\n    'let element1 = window.document.getElementById(\"div-1\");\\n' +\n    'let element2 = window.document.getElementById(\"div-2\");\\n' +\n    'let element3 = window.document.getElementById(\"div-3\");\\n' +\n    'let element4 = window.document.getElementById(\"div-4\");\\n' +\n    'let element5 = window.document.getElementById(\"div-5\");\\n' +\n    'let element6 = window.document.getElementById(\"div-6\");\\n' +\n    'let element7 = window.document.getElementById(\"div-7\");\\n' +\n    'let element8 = window.document.getElementById(\"div-8\");\\n' +\n    'let element9 = window.document.getElementById(\"div-9\");\\n' +\n    'let element10 = window.document.getElementById(\"div-10\");\\n' +\n    'let element11 = window.document.getElementById(\"div-11\");\\n' +\n    'element1.innerHTML = text_msg;\\n' +\n    'element2.innerHTML = text_msg;\\n' +\n    'element3.innerHTML = text_msg;\\n' +\n    'element4.innerHTML = text_msg;\\n' +\n    'element5.innerHTML = text_msg;\\n' +\n    'element6.innerHTML = text_msg;\\n' +\n    'element7.innerHTML = text_msg;\\n' +\n    'element8.innerHTML = text_msg;\\n' +\n    'element9.innerHTML = text_msg;\\n' +\n    'element10.innerHTML = text_msg;\\n' +\n    'element11.innerHTML = text_msg;\\n';\n\n  build() {\n    Column() {\n      Web({ src: $rawfile('index.html'), controller: this.controller })\n        .onInterceptRequest((event) => {\n          // 拦截页面请求\n          if (event?.request.getRequestUrl() == 'https://www.example.com/test.js') {\n            // 构造响应数据\n            this.responseResource.setResponseHeader([\n              {\n                // 格式：不超过13位纯数字。js识别码，Js有更新时必须更新该字段\n                headerKey: \"ResponseDataID\",\n                headerValue: \"0000000000001\"\n              }]);\n            this.responseResource.setResponseData(this.jsData);\n            this.responseResource.setResponseEncoding('utf-8');\n            this.responseResource.setResponseMimeType('application/javascript');\n            this.responseResource.setResponseCode(200);\n            this.responseResource.setReasonMessage('OK');\n            return this.responseResource;\n          }\n          return null;\n        })\n    }\n  }\n} 
