密钥删除(ArkTS)
为保证数据安全性，当不需要使用该密钥时，应该删除密钥。
开发步骤
以删除HKDF256密钥为例。
 确定密钥别名keyAlias，密钥别名最大长度为64字节。 初始化密钥属性集。用于删除时指定密钥的属性TAG，当删除单个时，TAG字段可传空。 调用接口deleteKeyItem，删除密钥。 
/*\n * 以下以HKDF256密钥的Promise操作使用为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\n/* 1.确定密钥别名 */\nlet keyAlias = \"test_Key\";\n/* 2.构造空对象 */\nlet huksOptions: huks.HuksOptions = {\n  properties: []\n}\n\nclass throwObject {\n  isThrow = false;\n}\n\nfunction deleteKeyItem(keyAlias: string, huksOptions: huks.HuksOptions, throwObject: throwObject) {\n  return new Promise<void>((resolve, reject) => {\n    try {\n      huks.deleteKeyItem(keyAlias, huksOptions, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    } catch (error) {\n      throwObject.isThrow = true;\n      throw (error as Error);\n    }\n  });\n}\n\n/* 3.删除密钥*/\nasync function publicDeleteKeyFunc(keyAlias: string, huksOptions: huks.HuksOptions) {\n  console.info(`enter promise deleteKeyItem`);\n  let throwObject: throwObject = { isThrow: false };\n  try {\n    await deleteKeyItem(keyAlias, huksOptions, throwObject)\n      .then((data) => {\n        console.info(`promise: deleteKeyItem key success, data = ${JSON.stringify(data)}`);\n      })\n      .catch((error: Error) => {\n        if (throwObject.isThrow) {\n          throw (error as Error);\n        } else {\n          console.error(`promise: deleteKeyItem failed, ${JSON.stringify(error)}`);\n        }\n      });\n  } catch (error) {\n    console.error(`promise: deleteKeyItem input arg invalid, ${JSON.stringify(error)}`);\n  }\n}\n\nasync function testDerive() {\n  await publicDeleteKeyFunc(keyAlias, huksOptions);\n}
