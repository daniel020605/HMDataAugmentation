刷新本地图片和网络图片
在卡片上通常需要展示本地图片或从网络上下载的图片，获取本地图片和网络图片需要通过FormExtensionAbility来实现，如下示例代码介绍了如何在卡片上显示本地图片和网络图片。
 下载网络图片需要使用到网络能力，需要申请ohos.permission.INTERNET权限，配置方式请参见声明权限。 在EntryFormAbility中的onAddForm生命周期回调中实现本地文件的刷新。 import { Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo } from '@kit.CoreFileKit';\nimport { formBindingData, FormExtensionAbility } from '@kit.FormKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'WgtImgUpdateEntryFormAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class WgtImgUpdateEntryFormAbility extends FormExtensionAbility {\n  // 在添加卡片时，打开一个本地图片并将图片内容传递给卡片页面显示\n  onAddForm(want: Want): formBindingData.FormBindingData {\n    // 假设在当前卡片应用的tmp目录下有一个本地图片：head.PNG\n    let tempDir = this.context.getApplicationContext().tempDir;\n    hilog.info(DOMAIN_NUMBER, TAG, `tempDir: ${tempDir}`);\n    let imgMap: Record<string, number> = {};\n    try {\n      // 打开本地图片并获取其打开后的fd\n      let file = fileIo.openSync(tempDir + '/' + 'head.PNG');\n      imgMap['imgBear'] = file.fd;\n    } catch (e) {\n      hilog.error(DOMAIN_NUMBER, TAG, `openSync failed: ${JSON.stringify(e as BusinessError)}`);\n    }\n\n    class FormDataClass {\n      text: string = 'Image: Bear';\n      loaded: boolean = true;\n      // 卡片需要显示图片场景, 必须和下列字段formImages 中的key 'imgBear' 相同。\n      imgName: string = 'imgBear';\n      // 卡片需要显示图片场景, 必填字段(formImages 不可缺省或改名), 'imgBear' 对应 fd\n      formImages: Record<string, number> = imgMap;\n    }\n\n    let formData = new FormDataClass();\n    // 将fd封装在formData中并返回至卡片页面\n    return formBindingData.createFormBindingData(formData);\n  }\n  //...\n} 在EntryFormAbility中的onFormEvent生命周期回调中实现网络文件的刷新。 import { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo } from '@kit.CoreFileKit';\nimport { formBindingData, FormExtensionAbility, formProvider } from '@kit.FormKit';\nimport { http } from '@kit.NetworkKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'WgtImgUpdateEntryFormAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class WgtImgUpdateEntryFormAbility extends FormExtensionAbility {\n  async onFormEvent(formId: string, message: string): Promise<void> {\n    let param: Record<string, string> = {\n      'text': '刷新中...'\n    };\n    let formInfo: formBindingData.FormBindingData = formBindingData.createFormBindingData(param);\n    formProvider.updateForm(formId, formInfo);\n\n    // 注意：FormExtensionAbility在触发生命周期回调时被拉起，仅能在后台存在5秒\n    // 建议下载能快速下载完成的小文件，如在5秒内未下载完成，则此次网络图片无法刷新至卡片页面上\n    let netFile = 'https://cn-assets.gitee.com/assets/mini_app-e5eee5a21c552b69ae6bf2cf87406b59.jpg'; // 需要在此处使用真实的网络图片下载链接\n    let tempDir = this.context.getApplicationContext().tempDir;\n    let fileName = 'file' + Date.now();\n    let tmpFile = tempDir + '/' + fileName;\n    let imgMap: Record<string, number> = {};\n\n    class FormDataClass {\n      text: string = 'Image: Bear' + fileName;\n      loaded: boolean = true;\n      // 卡片需要显示图片场景, 必须和下列字段formImages 中的key fileName 相同。\n      imgName: string = fileName;\n      // 卡片需要显示图片场景, 必填字段(formImages 不可缺省或改名), fileName 对应 fd\n      formImages: Record<string, number> = imgMap;\n    }\n\n    let httpRequest = http.createHttp()\n    let data = await httpRequest.request(netFile);\n    if (data?.responseCode == http.ResponseCode.OK) {\n      try {\n        let imgFile = fileIo.openSync(tmpFile, fileIo.OpenMode.READ_WRITE | fileIo.OpenMode.CREATE);\n        imgMap[fileName] = imgFile.fd;\n        try{\n          let writeLen: number = await fileIo.write(imgFile.fd, data.result as ArrayBuffer);\n          hilog.info(DOMAIN_NUMBER, TAG, \"write data to file succeed and size is:\" + writeLen);\n          hilog.info(DOMAIN_NUMBER, TAG, 'ArkTSCard download complete: %{public}s', tmpFile);\n          try {\n            let formData = new FormDataClass();\n            let formInfo = formBindingData.createFormBindingData(formData);\n            await formProvider.updateForm(formId, formInfo);\n            hilog.info(DOMAIN_NUMBER, TAG, '%{public}s', 'FormAbility updateForm success.');\n          } catch (error) {\n            hilog.error(DOMAIN_NUMBER, TAG, `FormAbility updateForm failed: ${JSON.stringify(error)}`);\n          }\n        } catch (err) {\n          hilog.error(DOMAIN_NUMBER, TAG, \"write data to file failed with error message: \" + err.message + \", error code: \" + err.code);\n        } finally {\n          // 在fileIo.closeSync执行之前，确保formProvider.updateForm已执行完毕。\n          fileIo.closeSync(imgFile);\n        };\n      } catch (e) {\n        hilog.error(DOMAIN_NUMBER, TAG, `openSync failed: ${JSON.stringify(e as BusinessError)}`);\n      }\n\n    } else {\n      hilog.error(DOMAIN_NUMBER, TAG, `ArkTSCard download task failed`);\n      let param: Record<string, string> = {\n        'text': '刷新失败'\n      };\n      let formInfo: formBindingData.FormBindingData = formBindingData.createFormBindingData(param);\n      formProvider.updateForm(formId, formInfo);\n    }\n    httpRequest.destroy();\n  }\n} 在卡片页面通过backgroundImage属性展示EntryFormAbility传递过来的卡片内容。 let storageWidgetImageUpdate = new LocalStorage();\n\n@Entry(storageWidgetImageUpdate)\n@Component\nstruct WidgetImageUpdateCard {\n  @LocalStorageProp('text') text: ResourceStr = $r('app.string.loading');\n  @LocalStorageProp('loaded') loaded: boolean = false;\n  @LocalStorageProp('imgName') imgName: ResourceStr = $r('app.string.imgName');\n\n  build() {\n    Column() {\n      Column() {\n        Text(this.text)\n          .fontColor('#FFFFFF')\n          .opacity(0.9)\n          .fontSize(12)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .maxLines(1)\n          .margin({ top: '8%', left: '10%' })\n      }.width('100%').height('50%')\n      .alignItems(HorizontalAlign.Start)\n\n      Row() {\n        Button() {\n          Text($r('app.string.update'))\n            .fontColor('#45A6F4')\n            .fontSize(12)\n        }\n        .width(120)\n        .height(32)\n        .margin({ top: '30%', bottom: '10%' })\n        .backgroundColor('#FFFFFF')\n        .borderRadius(16)\n        .onClick(() => {\n          postCardAction(this, {\n            action: 'message',\n            params: {\n              info: 'refreshImage'\n            }\n          });\n        })\n      }.width('100%').height('40%')\n      .justifyContent(FlexAlign.Center)\n    }\n    .width('100%').height('100%')\n    .backgroundImage(this.loaded ? 'memory://' + this.imgName : $r('app.media.ImageDisp'))\n    .backgroundImageSize(ImageSize.Cover)\n  }\n} 
 Image组件通过入参(memory://fileName)中的(memory://)标识来进行远端内存图片显示，其中fileName需要和EntryFormAbility传递对象('formImages': {key: fd})中的key相对应。 Image组件通过传入的参数是否有变化来决定是否刷新图片，因此EntryFormAbility每次传递过来的imgName都需要不同，连续传递两个相同的imgName时，图片不会刷新。 在卡片上展示的图片，大小需要控制在2MB以内。 
