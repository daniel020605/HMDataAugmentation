@Styles装饰器：定义组件重用样式
如果每个组件的样式都需要单独设置，在开发过程中会出现大量代码在进行重复样式设置，虽然可以复制粘贴，但为了代码简洁性和后续方便维护，我们推出了可以提炼公共样式进行复用的装饰器@Styles。
@Styles装饰器可以将多条样式设置提炼成一个方法，直接在组件声明的位置调用。通过@Styles装饰器可以快速定义并复用自定义样式。
从API version 9开始，该装饰器支持在ArkTS卡片中使用。
从API version 11开始，该装饰器支持在元服务中使用。
装饰器使用说明
 当前@Styles仅支持通用属性和通用事件。 @Styles可以定义在组件内或全局，在全局定义时需在方法名前面添加function关键字，组件内定义时则不需要添加function关键字。 
只能在当前文件内使用，不支持export。
如果想实现export功能，推荐使用AttributeModifier
// 全局\n@Styles function functionName() { ... }\n\n// 在组件内\n@Component\nstruct FancyUse {\n  @Styles fancy() {\n    .height(100)\n  }\n}
如果要实现跨文件操作的功能，可以参考使用动态属性设置。
// index.ets\nimport { MyButtonModifier } from './setAttribute'\n\n@Entry\n@Component\nstruct AttributeDemo {\n  @State modifier: MyButtonModifier = new MyButtonModifier();\n\n  build() {\n    Row() {\n      Column() {\n        Button(\"Button\")\n          .attributeModifier(this.modifier)\n          .onClick(() => {\n            this.modifier.isDark = !this.modifier.isDark\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
// setAttribute.ets\nexport class MyButtonModifier implements AttributeModifier<ButtonAttribute> {\n  isDark: boolean = false;\n  applyNormalAttribute(instance: ButtonAttribute): void {\n    if (this.isDark) {\n      instance.backgroundColor(Color.Black)\n    } else {\n      instance.backgroundColor(Color.Red)\n    }\n  }\n}
 定义在组件内的@Styles可以通过this访问组件的常量和状态变量，并可以在@Styles里通过事件来改变状态变量的值，示例如下： @Entry\n@Component\nstruct FancyUse {\n  @State heightValue: number = 100;\n  @Styles fancy() {\n    .height(this.heightValue)\n    .backgroundColor(Color.Yellow)\n    .onClick(() => {\n      this.heightValue = 200;\n    })\n  }\n} 组件内@Styles的优先级高于全局@Styles。 框架优先找当前组件内的@Styles，如果找不到，则会全局查找。 
限制条件
 @Styles方法不能有参数，编译期会报错，提醒开发者@Styles方法不支持参数。 // 错误写法： @Styles不支持参数，编译期报错\n@Styles function globalFancy (value: number) {\n  .width(value)\n}\n\n// 正确写法\n@Styles function globalFancy () {\n  .width(value)\n} 不支持在@Styles方法内使用逻辑组件，在逻辑组件内的属性不生效。 // 错误写法\n@Styles function backgroundColorStyle() {\n  if (true) {\n    .backgroundColor(Color.Red)\n  }\n}\n\n// 正确写法\n@Styles function backgroundColorStyle() {\n  .backgroundColor(Color.Red)\n} 
使用场景
以下示例中演示了组件内@Styles和全局@Styles的用法。
// 定义在全局的@Styles封装的样式\n@Styles function globalFancy  () {\n  .width(150)\n  .height(100)\n  .backgroundColor(Color.Pink)\n}\n\n@Entry\n@Component\nstruct FancyUse {\n  @State heightValue: number = 100;\n  // 定义在组件内的@Styles封装的样式\n  @Styles fancy() {\n    .width(200)\n    .height(this.heightValue)\n    .backgroundColor(Color.Yellow)\n    .onClick(() => {\n      this.heightValue = 200\n    })\n  }\n\n  build() {\n    Column({ space: 10 }) {\n      // 使用全局的@Styles封装的样式\n      Text('FancyA')\n        .globalFancy()\n        .fontSize(30)\n      // 使用组件内的@Styles封装的样式\n      Text('FancyB')\n        .fancy()\n        .fontSize(30)\n    }\n  }\n}
