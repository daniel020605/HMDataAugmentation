使用相机预配置(C/C++)
相机预配置（Preconfig），对常用的场景和分辨率进行了预配置集成，可简化开发相机应用流程，提高应用的开发效率。
开发者在开发相机应用时，在获取到CameraDevice之后，如果遵循通用流程开发，步骤较为繁琐。需要先查询当前相机在指定模式下所支持的各类输出的配置信息，拿到Camera_OutputCapability之后，应用开发者还需要对里面的各类数据进行解析，筛选，找到自己需要的配置数据Camera_Profile和Camera_VideoProfile。最后使用对应的Profile以及VideoProfile创建对应的Camera_PreviewOutput、Camera_PhotoOutput以及Camera_VideoOutput。
为了解决上述问题，优化应用开发流程，系统针对拍照、录像两类场景（即Camera_SceneMode为NORMAL_PHOTO或NORMAL_VIDEO），提供了OH_CameraManager_CreatePreviewOutputUsedInPreconfig、OH_CameraManager_CreatePhotoOutputUsedInPreconfig、OH_CameraManager_CreateVideoOutputUsedInPreconfig接口帮助开发者快速完成相机参数配置。推荐仅需要自定义拍照界面的无需开发专业相机应用的开发者，使用相机预配置功能快速开发应用。
规格说明
系统提供了4种预配置类型（Camera_PreconfigType），分别为PRECONFIG_720P、PRECONFIG_1080P、PRECONFIG_4K、PRECONFIG_HIGH_QUALITY。以及3种画幅比例规格（Camera_PreconfigRatio），1:1画幅（PRECONFIG_RATIO_1_1）、4:3画幅（PRECONFIG_RATIO_4_3）、16:9画幅（PRECONFIG_RATIO_16_9）。
由于不同的设备所支持的能力不同。使用相机预配置（preconfig）功能时，需要先调用OH_CaptureSession_CanPreconfig或OH_CaptureSession_CanPreconfigWithRatio检查对应的PreconfigType和PreconfigRatio的组合在当前设备上是否支持。
在不同的画幅比例下，其分辨率规格不同，详见下表。
普通拍照模式下的预览输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  1080x1080  1440x1080  1920x1080   PRECONFIG_HIGH_QUALITY  1440x1440  1920x1440  2560x1440     普通拍照模式下的拍照输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  2160x2160  2880x2160  3840x2160   PRECONFIG_HIGH_QUALITY  跟随Sensor最大能力  跟随Sensor最大能力  跟随Sensor最大能力     普通录像模式下的预览输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  1080x1080  1440x1080  1920x1080   PRECONFIG_HIGH_QUALITY  1080x1080  1440x1080  1920x1080     普通录像模式下的录像输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  2160x2160  2880x2160  3840x2160   PRECONFIG_HIGH_QUALITY  2160x2160  2880x2160  3840x2160     普通录像模式下的拍照输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  跟随Sensor最大能力  跟随Sensor最大能力  跟随Sensor最大能力   PRECONFIG_1080P  跟随Sensor最大能力  跟随Sensor最大能力  跟随Sensor最大能力   PRECONFIG_4K  跟随Sensor最大能力  跟随Sensor最大能力  跟随Sensor最大能力   PRECONFIG_HIGH_QUALITY  跟随Sensor最大能力  跟随Sensor最大能力  跟随Sensor最大能力     
开发示例
在CMake脚本中链接相关动态库。 target_link_libraries(entry PUBLIC libohcamera.so libhilog_ndk.z.so) cpp侧导入NDK接口，并根据传入的SurfaceId进行拍照。 #include \"hilog/log.h\"\n#include \"ohcamera/camera.h\"\n#include \"ohcamera/camera_input.h\"\n#include \"ohcamera/capture_session.h\"\n#include \"ohcamera/photo_output.h\"\n#include \"ohcamera/preview_output.h\"\n#include \"ohcamera/video_output.h\"\n#include \"ohcamera/camera_manager.h\"\nclass NDKCamera {\npublic:\n    NDKCamera(char *previewId, char *photoId);\n};\n\nvoid CaptureSessionOnFocusStateChange(Camera_CaptureSession *session, Camera_FocusState focusState) {\n    OH_LOG_INFO(LOG_APP, \"CaptureSessionOnFocusStateChange\");\n}\n\nvoid CaptureSessionOnError(Camera_CaptureSession *session, Camera_ErrorCode errorCode) {\n    OH_LOG_INFO(LOG_APP, \"CaptureSessionOnError = %{public}d\", errorCode);\n}\n\nCaptureSession_Callbacks *GetCaptureSessionRegister(void) {\n    static CaptureSession_Callbacks captureSessionCallbacks = {.onFocusStateChange = CaptureSessionOnFocusStateChange,\n                                                               .onError = CaptureSessionOnError};\n    return &captureSessionCallbacks;\n}\n\nvoid PreviewOutputOnFrameStart(Camera_PreviewOutput *previewOutput) {\n    OH_LOG_INFO(LOG_APP, \"PreviewOutputOnFrameStart\");\n}\n\nvoid PreviewOutputOnFrameEnd(Camera_PreviewOutput *previewOutput, int32_t frameCount) {\n    OH_LOG_INFO(LOG_APP, \"PreviewOutputOnFrameEnd = %{public}d\", frameCount);\n}\n\nvoid PreviewOutputOnError(Camera_PreviewOutput *previewOutput, Camera_ErrorCode errorCode) {\n    OH_LOG_INFO(LOG_APP, \"PreviewOutputOnError = %{public}d\", errorCode);\n}\n\nPreviewOutput_Callbacks *GetPreviewOutputListener(void) {\n    static PreviewOutput_Callbacks previewOutputListener = {.onFrameStart = PreviewOutputOnFrameStart,\n                                                            .onFrameEnd = PreviewOutputOnFrameEnd,\n                                                            .onError = PreviewOutputOnError};\n    return &previewOutputListener;\n}\n\nvoid OnCameraInputError(const Camera_Input *cameraInput, Camera_ErrorCode errorCode) {\n    OH_LOG_INFO(LOG_APP, \"OnCameraInput errorCode = %{public}d\", errorCode);\n}\n\nCameraInput_Callbacks *GetCameraInputListener(void) {\n    static CameraInput_Callbacks cameraInputCallbacks = {.onError = OnCameraInputError};\n    return &cameraInputCallbacks;\n}\n\nvoid CameraManagerStatusCallback(Camera_Manager *cameraManager, Camera_StatusInfo *status) {\n    OH_LOG_INFO(LOG_APP, \"CameraManagerStatusCallback is called\");\n}\n\nCameraManager_Callbacks *GetCameraManagerListener() {\n    static CameraManager_Callbacks cameraManagerListener = {.onCameraStatus = CameraManagerStatusCallback};\n    return &cameraManagerListener;\n}\n\nNDKCamera::NDKCamera(char *previewId, char *photoId) {\n    Camera_Manager *cameraManager = nullptr;\n    Camera_Device *cameras = nullptr;\n    Camera_CaptureSession *captureSession = nullptr;\n    Camera_PreviewOutput *previewOutput = nullptr;\n    Camera_PhotoOutput *photoOutput = nullptr;\n    Camera_Input *cameraInput = nullptr;\n    uint32_t size = 0;\n    uint32_t cameraDeviceIndex = 0;\n    char *previewSurfaceId = previewId;\n    char *photoSurfaceId = photoId;\n    // 创建CameraManager对象\n    Camera_ErrorCode ret = OH_Camera_GetCameraManager(&cameraManager);\n    if (cameraManager == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_Camera_GetCameraMananger failed.\");\n    }\n    // 监听相机状态变化\n    ret = OH_CameraManager_RegisterCallback(cameraManager, GetCameraManagerListener());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_RegisterCallback failed.\");\n    }\n\n    // 获取相机列表\n    ret = OH_CameraManager_GetSupportedCameras(cameraManager, &cameras, &size);\n    if (cameras == nullptr || size < 0 || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameras failed.\");\n    }\n\n    // 创建相机输入流\n    ret = OH_CameraManager_CreateCameraInput(cameraManager, &cameras[cameraDeviceIndex], &cameraInput);\n    if (cameraInput == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreateCameraInput failed.\");\n    }\n\n    // 监听cameraInput错误信息\n    ret = OH_CameraInput_RegisterCallback(cameraInput, GetCameraInputListener());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_RegisterCallback failed.\");\n    }\n\n    // 打开相机\n    ret = OH_CameraInput_Open(cameraInput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_Open failed.\");\n    }\n\n    // 创建会话\n    ret = OH_CameraManager_CreateCaptureSession(cameraManager, &captureSession);\n    if (captureSession == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreateCaptureSession failed.\");\n    }\n\n    // 监听session错误信息\n    ret = OH_CaptureSession_RegisterCallback(captureSession, GetCaptureSessionRegister());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_RegisterCallback failed.\");\n    }\n\n    // 查询Preconfig能力\n    bool canPreconfigResult = false;\n    ret = OH_CaptureSession_CanPreconfig(captureSession, PRECONFIG_1080P, &canPreconfigResult);\n    if (ret != CAMERA_OK || !canPreconfigResult) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_CanPreconfig failed.\");\n    }\n\n    // 配置Preconfig\n    ret = OH_CaptureSession_Preconfig(captureSession, PRECONFIG_1080P);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Preconfig failed.\");\n    }\n\n    // 创建预览输出流,其中参数 previewSurfaceId 参考上文 XComponent 组件，预览流为XComponent组件提供的surface\n    ret = OH_CameraManager_CreatePreviewOutputUsedInPreconfig(cameraManager, previewSurfaceId, &previewOutput);\n    if (previewOutput == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreatePreviewOutput failed.\");\n    }\n\n    // 监听预览输出错误信息\n    ret = OH_PreviewOutput_RegisterCallback(previewOutput, GetPreviewOutputListener());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_PreviewOutput_RegisterCallback failed.\");\n    }\n\n    // 创建拍照输出流，其中参数 photoSurfaceId 参考上文 ImageReceiver获取的surface\n    ret = OH_CameraManager_CreatePhotoOutputUsedInPreconfig(cameraManager, photoSurfaceId, &photoOutput);\n    if (photoOutput == nullptr || ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreatePhotoOutput failed.\");\n    }\n\n    // 开始配置会话\n    ret = OH_CaptureSession_BeginConfig(captureSession);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_BeginConfig failed.\");\n    }\n\n    // 向会话中添加相机输入流\n    ret = OH_CaptureSession_AddInput(captureSession, cameraInput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_AddInput failed.\");\n    }\n\n    // 向会话中添加预览输出流\n    ret = OH_CaptureSession_AddPreviewOutput(captureSession, previewOutput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_AddPreviewOutput failed.\");\n    }\n\n    // 向会话中添加拍照输出流\n    ret = OH_CaptureSession_AddPhotoOutput(captureSession, photoOutput);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_AddPhotoOutput failed.\");\n    }\n\n    // 提交会话配置\n    ret = OH_CaptureSession_CommitConfig(captureSession);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_CommitConfig failed.\");\n    }\n\n    // 启动会话\n    ret = OH_CaptureSession_Start(captureSession);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Start failed.\");\n    }\n\n    // 判断设备是否支持闪光灯\n    Camera_FlashMode flashMode = FLASH_MODE_AUTO;\n    bool hasFlash = false;\n    ret = OH_CaptureSession_HasFlash(captureSession, &hasFlash);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_HasFlash failed.\");\n    }\n    if (hasFlash) {\n        OH_LOG_INFO(LOG_APP, \"hasFlash success\");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"hasFlash fail\");\n    }\n    // 检测闪光灯模式是否支持\n    bool isSupported = false;\n    ret = OH_CaptureSession_IsFlashModeSupported(captureSession, flashMode, &isSupported);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_IsFlashModeSupported failed.\");\n    }\n    if (isSupported) {\n        OH_LOG_INFO(LOG_APP, \"isFlashModeSupported success\");\n        // 设置闪光灯模式\n        ret = OH_CaptureSession_SetFlashMode(captureSession, flashMode);\n        if (ret == CAMERA_OK) {\n            OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_SetFlashMode success.\");\n        } else {\n            OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_SetFlashMode failed. %{public}d \", ret);\n        }\n        // 获取当前设备的闪光灯模式\n        ret = OH_CaptureSession_GetFlashMode(captureSession, &flashMode);\n        if (ret == CAMERA_OK) {\n            OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_GetFlashMode success. flashMode：%{public}d \", flashMode);\n        } else {\n            OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_GetFlashMode failed. %d \", ret);\n        }\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"isFlashModeSupported fail\");\n    }\n\n    // 判断是否支持连续自动变焦模式\n    Camera_FocusMode focusMode = FOCUS_MODE_CONTINUOUS_AUTO;\n    bool isFocusModeSupported = false;\n    ret = OH_CaptureSession_IsFocusModeSupported(captureSession, focusMode, &isFocusModeSupported);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_IsFocusModeSupported failed.\");\n    }\n    if (isFocusModeSupported) {\n        OH_LOG_INFO(LOG_APP, \"isFocusModeSupported success\");\n        ret = OH_CaptureSession_SetFocusMode(captureSession, focusMode);\n        if (ret != CAMERA_OK) {\n            OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_SetFocusMode failed. %{public}d \", ret);\n        }\n        ret = OH_CaptureSession_GetFocusMode(captureSession, &focusMode);\n        if (ret == CAMERA_OK) {\n            OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_GetFocusMode success. focusMode%{public}d \", focusMode);\n        } else {\n            OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_GetFocusMode failed. %d \", ret);\n        }\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"isFocusModeSupported fail\");\n    }\n\n    // 获取相机支持的可变焦距比范围\n    float minZoom;\n    float maxZoom;\n    ret = OH_CaptureSession_GetZoomRatioRange(captureSession, &minZoom, &maxZoom);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_GetZoomRatioRange failed.\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_GetZoomRatioRange success. minZoom: %{public}f, maxZoom:%{public}f\",\n                    minZoom, maxZoom);\n    }\n    // 设置变焦\n    ret = OH_CaptureSession_SetZoomRatio(captureSession, maxZoom);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_SetZoomRatio success.\");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_SetZoomRatio failed. %{public}d \", ret);\n    }\n    // 获取当前设备的变焦值\n    ret = OH_CaptureSession_GetZoomRatio(captureSession, &maxZoom);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_GetZoomRatio success. zoom：%{public}f \", maxZoom);\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_GetZoomRatio failed. %{public}d \", ret);\n    }\n\n    // 无拍照设置进行拍照\n    ret = OH_PhotoOutput_Capture(photoOutput);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_PhotoOutput_Capture success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_PhotoOutput_Capture failed. %d \", ret);\n    }\n\n    // 停止当前会话\n    ret = OH_CaptureSession_Stop(captureSession);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_Stop success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Stop failed. %d \", ret);\n    }\n\n    // 释放相机输入流\n    ret = OH_CameraInput_Close(cameraInput);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CameraInput_Close success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_Close failed. %d \", ret);\n    }\n\n    // 释放预览输出流\n    ret = OH_PreviewOutput_Release(previewOutput);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_PreviewOutput_Release success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_PreviewOutput_Release failed. %d \", ret);\n    }\n\n    // 释放拍照输出流\n    ret = OH_PhotoOutput_Release(photoOutput);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_PhotoOutput_Release success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_PhotoOutput_Release failed. %d \", ret);\n    }\n\n    // 释放会话\n    ret = OH_CaptureSession_Release(captureSession);\n    if (ret == CAMERA_OK) {\n        OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_Release success \");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_Release failed. %d \", ret);\n    }\n\n    // 资源释放\n    ret = OH_CameraManager_DeleteSupportedCameras(cameraManager, cameras, size);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"Delete Cameras failed.\");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_DeleteSupportedCameras. ok\");\n    }\n\n    ret = OH_Camera_DeleteCameraManager(cameraManager);\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"Delete Cameras failed.\");\n    } else {\n        OH_LOG_ERROR(LOG_APP, \"OH_Camera_DeleteCameraManager. ok\");\n    }\n} 
