动态订阅公共事件
场景介绍
动态订阅是指当应用在运行状态时对某个公共事件进行订阅，在运行期间如果有订阅的事件发布那么订阅了这个事件的应用将会收到该事件及其传递的参数。
例如，某应用希望在其运行期间收到电量过低的事件，并根据该事件降低其运行功耗，那么该应用便可动态订阅电量过低事件，收到该事件后关闭一些非必要的任务来降低功耗。
订阅部分系统公共事件需要先申请权限，订阅这些事件所需要的权限请见公共事件权限列表。
接口说明
详细接口见接口文档。
开发步骤
 导入模块。 import { BusinessError, commonEventManager } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'ProcessModel';\nconst DOMAIN_NUMBER: number = 0xFF00; 创建订阅者信息，详细的订阅者信息数据类型及包含的参数请见CommonEventSubscribeInfo文档介绍。 // 用于保存创建成功的订阅者对象，后续使用其完成订阅及退订的动作\nlet subscriber: commonEventManager.CommonEventSubscriber | null = null;\n// 订阅者信息，其中的event字段需要替换为实际的事件名称。\nlet subscribeInfo: commonEventManager.CommonEventSubscribeInfo = {\n    events: ['event'], // 订阅灭屏公共事件\n}; 创建订阅者，保存返回的订阅者对象subscriber，用于执行后续的订阅、退订等操作。 // 创建订阅者回调\ncommonEventManager.createSubscriber(subscribeInfo, (err: BusinessError, data: commonEventManager.CommonEventSubscriber) => {\n  if (err) {\n    hilog.error(DOMAIN_NUMBER, TAG, `Failed to create subscriber. Code is ${err.code}, message is ${err.message}`);\n    return;\n  }\n  hilog.info(DOMAIN_NUMBER, TAG, 'Succeeded in creating subscriber.');\n  subscriber = data;\n}) 创建订阅回调函数，订阅回调函数会在接收到事件时触发。订阅回调函数返回的data内包含了公共事件的名称、发布者携带的数据等信息，公共事件数据的详细参数和数据类型请见CommonEventData文档介绍。 // 订阅公共事件回调\nif (subscriber !== null) {\n  commonEventManager.subscribe(subscriber, (err: BusinessError, data: commonEventManager.CommonEventData) => {\n    if (err) {\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to subscribe common event. Code is ${err.code}, message is ${err.message}`);\n      return;\n    }\n    // ...\n  })\n} else {\n  hilog.error(DOMAIN_NUMBER, TAG, `Need create subscriber`);\n} 
示例代码
 公共事件的订阅和发布 
