@performance/lottie-animation-destroy-check
该规则检测使用lottie加载的动画是否都正确销毁。
当使用lottie加载动画时，一般需要先通过lottie.loadAnimation将动画加载到内存，动画执行完毕后需要在合适的时机（例如：onDisAppear，onPageHide，aboutToDisappear）通过调用animationItem的destroy方法将单个动画销毁或者调用lottie.destroy()方法将当前页面所有动画销毁，如果动画未被销毁就会造成资源浪费，影响应用性能体验。
内存优化场景下，建议优先修改。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/lottie-animation-destroy-check\": \"suggestion\",\n  }\n}
选项
该规则无需配置额外选项。
正例1
import lottie from '@ohos/lottie';\nimport { AnimationItem } from '@ohos/lottie';\n\nconst FRAME_START: number = 60;\nconst FRAME_END: number = 120;\n\n@Entry\n@Component\nstruct LottieAnimation1 {\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\n  private politeChicky: string = 'politeChicky';\n  private politeChickyPath: string = 'media/politeChicky.json';\n  private animateItem?: AnimationItem;\n\n  build() {\n    Canvas(this.politeChickyController)\n      .width(160)\n      .height(160)\n      .borderRadius(3)\n      .onReady(() => {\n        this.animateItem = lottie.loadAnimation({\n          container: this.politeChickyController,\n          renderer: 'canvas',\n          loop: true,\n          autoplay: true,\n          name: this.politeChicky,\n          path: this.politeChickyPath,\n          initialSegment: [FRAME_START, FRAME_END]\n        })\n      })\n      .onDisAppear(() => {\n        this.animateItem?.destroy();//只加载了一个Animation，可以使用animateItem的destroy接口\n      })\n  }\n}
正例2
import lottie from '@ohos/lottie';\nimport { AnimationItem } from '@ohos/lottie';\n\n// 动画播放的起始帧\nconst FRAME_START: number = 60; \n// 动画播放的终止帧\nconst FRAME_END: number = 120; \n\n@Entry\n@Component\nstruct LottieAnimation2 {\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\n  // 动画名称\n  private politeChicky: string = 'politeChicky'; \n  // hap包内动画资源文件路径，仅支持json格式\n  private politeChickyPath: string = 'media/politeChicky.json'; \n  private animateItem: AnimationItem | null = null;\n\n  build() {\n    Canvas(this.politeChickyController)\n      .width(160)\n      .height(160)\n      .borderRadius(3)\n      .onReady(() => {\n        this.animateItem = lottie.loadAnimation({\n          container: this.politeChickyController,\n          renderer: 'canvas',\n          loop: true,\n          autoplay: true,\n          name: 'anim_name1',\n          path: this.politeChickyPath,\n          initialSegment: [FRAME_START, FRAME_END]\n        })\n      })\n      .onClick(() => {\n        this.animateItem = lottie.loadAnimation({\n          container: this.politeChickyController,\n          renderer: 'canvas',\n          loop: true,\n          autoplay: true,\n          name: 'anim_name2',\n          path: this.politeChickyPath,\n          initialSegment: [FRAME_START, FRAME_END]\n        })\n      })\n  }\n\n  onPageHide(): void {\n    lottie.destroy();\n  }\n}\n
反例1
import lottie from '@ohos/lottie';\nimport { AnimationItem } from '@ohos/lottie';\n\nconst FRAME_START: number = 60;\nconst FRAME_END: number = 120;\n\n@Entry\n@Component\nstruct LottieAnimation1 {\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\n  private politeChicky: string = 'politeChicky';\n  private politeChickyPath: string = 'media/politeChicky.json';\n  private animateItem?: AnimationItem;\n\n  build() {\n    Canvas(this.politeChickyController)\n      .width(160)\n      .height(160)\n      .backgroundColor(Color.Gray)\n      .borderRadius(3)\n      .onReady(() => {\n        //告警\n        this.animateItem = lottie.loadAnimation({\n          container: this.politeChickyController,\n          renderer: 'canvas',\n          loop: true,\n          autoplay: true,\n          name: this.politeChicky,\n          path: this.politeChickyPath,\n          initialSegment: [FRAME_START, FRAME_END]\n        })\n      })\n  }\n}\n
反例2
import lottie from '@ohos/lottie';\nimport { AnimationItem } from '@ohos/lottie';\n\n// 动画播放的起始帧\nconst FRAME_START: number = 60; \n// 动画播放的终止帧\nconst FRAME_END: number = 120; \n\n//调用多次loadAnimation，但是只在onDisAppear销毁一次\n@Entry\n@Component\nstruct LottieAnimation4 {\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\n  // 动画名称  \n  private politeChicky: string = 'politeChicky'; \n  // hap包内动画资源文件路径，仅支持json格式\n  private politeChickyPath: string = 'media/politeChicky.json'; \n  private animateItem: AnimationItem | null = null;\n  // 初始化点击次数 \n  @State times: number = 0; \n\n  build() {\n    Stack({ alignContent: Alignment.TopStart }) {\n      // 动画\n      Canvas(this.politeChickyController)\n        .width(160)\n        .height(160)\n        .backgroundColor(Color.Gray)\n        .borderRadius(3)\n        .onReady(() => {\n          this.animateItem = lottie.loadAnimation({\n            container: this.politeChickyController,\n            renderer: 'canvas',\n            loop: true,\n            autoplay: true,\n            name: this.politeChicky,\n            path: this.politeChickyPath,\n            initialSegment: [FRAME_START, FRAME_END]\n          })\n        })\n        .onClick(() => {\n          this.animateItem = lottie.loadAnimation({\n            container: this.politeChickyController,\n            renderer: 'canvas',\n            loop: true,\n            autoplay: true,\n            name: this.politeChicky,\n            path: this.politeChickyPath,\n            initialSegment: [FRAME_START, FRAME_END]\n          })\n          this.times++;\n        })\n        .onDisAppear(()=> {\n          //上报此处animateItem，描述description不一样，如果无法找到动画名称，则直接建议用lottie.destory\n          this.animateItem?.destroy();\n        })\n      // 响应动画的文本\n      Text('text')\n        .fontSize(16)\n        .margin(10)\n        .fontColor(Color.White)\n    }.margin({ top: 20 })\n  }\n}\n
反例3
import lottie from '@ohos/lottie';\nimport { AnimationItem } from '@ohos/lottie';\n\n// 动画播放的起始帧\nconst FRAME_START: number = 60; \n// 动画播放的终止帧\nconst FRAME_END: number = 120; \n\n//调用了销毁，但是不是全部销毁，上报\n@Entry\n@Component\nstruct LottieAnimation5 {\n  private politeChickyController: CanvasRenderingContext2D = new CanvasRenderingContext2D();\n  // 动画名称 \n  private politeChicky: string = 'politeChicky'; \n  // hap包内动画资源文件路径，仅支持json格式\n  private politeChickyPath: string = 'media/politeChicky.json'; \n  private animateItem: AnimationItem | null = null;\n\n  build() {\n    Canvas(this.politeChickyController)\n      .width(160)\n      .height(160)\n      .backgroundColor(Color.Gray)\n      .borderRadius(3)\n      .onReady(() => {\n        this.animateItem = lottie.loadAnimation({\n          container: this.politeChickyController,\n          renderer: 'canvas',\n          loop: true,\n          autoplay: true,\n          name: 'anim_name1',\n          path: this.politeChickyPath,\n          initialSegment: [FRAME_START, FRAME_END]\n        })\n      })\n      .onClick(()=> {\n        this.animateItem = lottie.loadAnimation({\n          container: this.politeChickyController,\n          renderer: 'canvas',\n          loop: true,\n          autoplay: true,\n          name: 'anim_name2',\n          path: this.politeChickyPath,\n          initialSegment: [FRAME_START, FRAME_END]\n        })\n      })\n      .onDisAppear(()=>{\n        //上报lottie,只销毁一个\n        lottie.destroy('anim_name2');\n      })\n  }\n}\n
规则集
plugin:@performance/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
