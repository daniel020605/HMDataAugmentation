更新安全管控策略
场景介绍
Enterprise Data Guard Kit为应用提供下发管控策略的能力，相关策略会被分发到内核各管控模块中执行。
接口说明
详细接口说明可参考接口文档。
接口名
描述
updatePolicy(policy: string, callback: AsyncCallback<void>): void
使用Callback方式更新安全管控策略。
updatePolicy(policy: string): Promise<void>
使用Promise方式更新安全管控策略。
开发步骤
 导入模块。import { fileGuard } from '@kit.EnterpriseDataGuardKit'; 初始化FileGuard对象guard，调用接口updatePolicy，更新安全管控策略。        通过回调函数方式，更新安全管控策略。  import { BusinessError } from '@kit.BasicServicesKit';\n\nfunction updatePolicyCallback() {\n  let guard: fileGuard.FileGuard = new fileGuard.FileGuard();\n  let policy: string = '{' +\n    '\"net_intercept_toggle\":0,' +\n    '\"boundary\":[\"10.10.0.0-10.10.255.255.255\",\"0.0.0.0-1.1.1.1\"],' +\n    '\"netsegment_trustlist\":[\"10.10.0.0-10.10.255.255.255\"],' +\n    '\"netsegment_blocklist\":[\"0.0.0.0-1.1.1.1\"],' +\n    '\"default_policy\":0' +\n    '}';\n  guard.updatePolicy(policy, (err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to update policy. Code: ${err.code}, message: ${err.message}.`);\n    } else {\n      console.info(`Succeeded in updating policy.`);\n    }\n  });\n}  通过Promise方式，更新安全管控策略。  import { BusinessError } from '@kit.BasicServicesKit';\n\nfunction updatePolicyPromise() {\n  let guard: fileGuard.FileGuard = new fileGuard.FileGuard();\n  let policy: string = '{' +\n    '\"net_intercept_toggle\":0,' +\n    '\"boundary\":[\"10.10.0.0-10.10.255.255.255\",\"0.0.0.0-1.1.1.1\"],' +\n    '\"netsegment_trustlist\":[\"10.10.0.0-10.10.255.255.255\"],' +\n    '\"netsegment_blocklist\":[\"0.0.0.0-1.1.1.1\"],' +\n    '\"default_policy\":0' +\n    '}';\n  guard.updatePolicy(policy).then(() => {\n    console.info(`Succeeded in updating policy.`);\n  }).catch((err: BusinessError) => {\n    console.error(`Failed to update policy. Code: ${err.code}, message: ${err.message}.`);\n  });\n} 调用函数，查看打印信息。 
