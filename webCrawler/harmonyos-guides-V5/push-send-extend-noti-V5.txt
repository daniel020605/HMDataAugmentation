发送通知扩展消息
场景介绍
当用户终端收到您发送的通知扩展消息时：
 若您的应用进程不在前台，Push Kit会将消息内容传递给通知扩展进程，您可以在该进程中自行完成业务处理（例如：语音播报、消息内容解密等）后，返回自定义消息内容，Push Kit将弹出通知提醒。您需要在10秒内返回消息内容，否则Push Kit将默认展示原有的消息内容。 若您的应用进程在前台，则不弹出通知提醒，您可以在应用进程中获取通知扩展消息内容并自行完成业务处理。 
开通权益
 推送通知扩展消息当前支持的消息自分类类别为EXPRESS（订单&物流），需要申请对应的消息自分类权益，请参见申请通知消息自分类权益。 推送通知扩展消息需要申请推送通知扩展消息权益，请参见申请推送通知扩展消息权益。 
频控规则
调测阶段，每个项目每日全网最多可推送1000条测试消息。发送测试消息需设置testMessage为true。
正式发布阶段，单设备单应用下每日推送消息总条数受设备消息频控限制，所有场景化消息发送条数不超过3000条。
开发步骤
 参见指导获取Push Token。 为确保应用可正常收到消息，建议应用发送通知前调用requestEnableNotification()方法弹出提醒，告知用户需要允许接收通知消息。详情请参见Notification Kit-请求通知授权。 在您的工程内创建一个ExtensionAbility类型的组件并且继承RemoteNotificationExtensionAbility，完成onReceiveMessage()方法的覆写，代码示例如下：import { pushCommon, RemoteNotificationExtensionAbility } from '@kit.PushKit';\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { resourceManager } from '@kit.LocalizationKit';\nimport { common } from '@kit.AbilityKit';\n\nexport default class RemoteNotificationExtAbility extends RemoteNotificationExtensionAbility {\n  async onReceiveMessage(remoteNotificationInfo: pushCommon.RemoteNotificationInfo): Promise<pushCommon.RemoteNotificationContent> {\n    hilog.info(0x0000, 'testTag', 'RemoteNotificationExtAbility onReceiveMessage, remoteNotificationInfo');\n\n    // Read the pixel map object\n    const resourceMgr: resourceManager.ResourceManager = (this.context as common.UIExtensionContext).resourceManager;\n    const fileData: Uint8Array = await resourceMgr.getMediaContent($r('app.media.icon'));\n    const buffer = fileData.buffer;\n    const imageSource: image.ImageSource = image.createImageSource(buffer as ArrayBuffer);\n    const pixelMap: image.PixelMap = await imageSource.createPixelMap();\n    if (pixelMap) {\n      pixelMap.getImageInfo((err, imageInfo) => {\n        if (imageInfo) {\n          hilog.info(0x0000, 'testTag', `imageInfo ${imageInfo.size.width} * ${imageInfo.size.height}`);\n        }\n      });\n    }\n\n    // Return the replaced message content.\n    return {\n      title: 'Default replace title.',\n      text: 'Default replace text.',\n      badgeNumber: 1,\n      setBadgeNumber: 2,\n      overlayIcon: pixelMap,\n      wantAgent: {\n        abilityName: 'DemoAbility',\n        parameters: {\n          key: 'Default value'\n        }\n      }\n    }\n  }\n\n  onDestroy(): void {\n    hilog.info(0x0000, 'testTag', 'RemoteNotificationExtAbility onDestroy.');\n  }\n}  函数的返回值用于替换最终展示在终端的通知，title和text代表您要展示的通知标题与通知内容。 badgeNumber字段为展示通知时增加的角标数量，setBadgeNumber字段为展示通知时显示的角标数量，两者同时返回时，setBadgeNumber优先于badgeNumber。详情请参见RemoteNotificationContent。 overlayIcon字段为展示通知时的叠加图标。详情请参见RemoteNotificationContent。 wantAgent.abilityName字段为需要替换的点击拉起的落地页abilityName（例如DemoAbility），DemoAbility需要您自行适配开发。详情请参见RemoteWantAgent。 wantAgent.parameters字段表示拉起落地页透传参数。详情请参见RemoteWantAgent。   在项目工程的src/main/module.json5文件的extensionAbilities模块中配置RemoteNotificationExtAbility的type和actions信息（定义该type和actions的ExtensionAbility有且只能有一个，配置如下，若同时添加uris参数，则uris内容需为空）：\"extensionAbilities\": [\n  {\n    \"name\": \"RemoteNotificationExtAbility\",\n    \"type\": \"remoteNotification\",\n    \"srcEntry\": \"./ets/entryability/RemoteNotificationExtAbility.ets\",\n    \"description\": \"RemoteNotificationExtAbility test\",\n    \"exported\": false,\n    \"skills\": [\n      {\n        \"actions\": [\"action.hms.push.extension.remotenotification\"]\n      }\n    ]\n  }\n]  type：固定值为remoteNotification，表示通知扩展的ExtensionAbility类型。 actions：固定值为action.hms.push.extension.remotenotification，用于接收通知扩展消息。   应用服务端调用REST API推送消息，消息详情可参见场景化消息API接口功能介绍，请求示例如下：// Request URL \nPOST https://push-api.cloud.huawei.com/v3/[projectId]/messages:send\n \n// Request Header \nContent-Type: application/json\nAuthorization: Bearer eyJr*****OiIx---****.eyJh*****iJodHR--***.QRod*****4Gp---**** \npush-type: 2\n\n// Request Body\n{ \n  \"payload\": { \n    \"extraData\": \"通知扩展场景携带的额外数据\", \n    \"notification\": { \n      \"category\": \"EXPRESS\",  \n      \"title\": \"通知标题\", \n      \"body\": \"通知内容\", \n      \"clickAction\": { \n        \"actionType\": 0 \n      },\n      \"notifyId\": 12345,\n      \"image\": \"https://***.png\"\n    }\n  }, \n  \"target\": { \n    \"token\": [\"IQAAAACy0tEjCgBijrEB3************8o0m5EdTXbdlhiIiX_vNGQ5Ic5rXWmw\"] \n  }, \n  \"pushOptions\": { \n    \"testMessage\": true,\n    \"ttl\": 86400\n  } \n}  [projectId]：项目ID，登录AppGallery Connect网站，选择“我的项目”，在项目列表中选择对应的项目，左侧导航栏选择“项目设置”，在该页面获取。 Authorization：JWT格式字符串，可参见Authorization获取。 push-type：2表示通知扩展场景。 category：消息自分类类别，当前支持设置为EXPRESS，请参见参数说明，发送消息前请确保您已申请通知消息自分类权益。 actionType：0表示点击消息打开应用首页。 token：Push Token，可参见获取Push Token获取。 extraData：通知扩展场景可携带的额外数据，字符串类型。详情参见ExtensionPayload 通知扩展消息。 testMessage：测试消息标识，true表示测试消息。每个项目每天限制发送1000条测试消息，单次推送可发送Token数不超过10个。详情请参见testMessage。 ttl：消息缓存时间，详见ttl。 notifyId：（选填）自定义消息标识字段，仅支持数字，范围 [0, 2147483647]，若要用于消息撤回则必填。详情请参见notifyId。 image：（选填）通知右侧大图标URL，URL使用的协议必须是HTTPS协议。             推送服务禁止推送包含敏感信息的图片。     发送消息后，若您的应用进程不在前台，Push Kit会将通知消息内容传递给通知扩展进程，您在该进程中自行完成语音播报业务处理，并返回特定的消息内容（例如title、body等）后，Push Kit将弹出通知提醒。若您的应用进程在前台，则不弹出通知提醒，您可以通过receiveMessage()方法实时获取通知扩展消息数据。示例代码如下：import { UIAbility } from '@kit.AbilityKit';\nimport { pushService } from '@kit.PushKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n/**\n * 此处以PushMessageAbility为例，接收通知扩展消息内容\n */\nexport default class PushMessageAbility extends UIAbility {\n  // onCreate()为同步接口，不支持异步回调\n  onCreate(): void {\n    try {\n      // receiveMessage()不能放在异步方法之后，否则可能影响执行\n      // receiveMessage中的参数固定为IM\n      pushService.receiveMessage('IM', this, (data) => {\n        // process message，并建议对Callback进行try-catch\n        try {\n          hilog.info(0x0000, 'testTag', 'Receive im message');\n        } catch (e) {\n          let errRes: BusinessError = e as BusinessError;\n          hilog.error(0x0000, 'testTag', 'Failed to process data: %{public}d %{public}s', errRes.code, errRes.message);\n        }\n      });\n    } catch (err) {\n      let e: BusinessError = err as BusinessError;\n      hilog.error(0x0000, 'testTag', 'Failed to get message: %{public}d %{public}s', e.code, e.message);\n    }\n  }\n} 并且在项目模块的src/main/module.json5文件的abilities模块中配置skills标签的actions属性内容为 action.ohos.push.listener（有且只能有一个ability定义该action，若同时添加uris参数，则uris内容需为空）： {\n  \"name\": \"PushMessageAbility\",\n  \"srcEntry\": \"./ets/abilities/PushMessageAbility.ets\",\n  \"launchType\": \"singleton\",\n  \"startWindowIcon\": \"$media:startIcon\",\n  \"startWindowBackground\": \"$color:start_window_background\",\n  \"exported\": false,\n  \"skills\": [\n    {\n      \"actions\": [\n        \"action.ohos.push.listener\"\n      ]\n    }\n  ]\n}  
