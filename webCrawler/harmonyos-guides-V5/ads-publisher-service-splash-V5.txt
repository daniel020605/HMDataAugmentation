开屏广告
场景介绍
开屏广告是一种在应用启动时且在应用主界面显示之前需要被展示的广告。您需要预先为App设计一张开屏默认的Slogan图片，确保在未获得到开屏广告之前展示默认的Slogan，提供良好的用户体验。
开屏广告分为全屏开屏广告、半屏开屏广告，其中全屏开屏广告展示形式为广告铺满整个页面；半屏开屏广告展示形式会根据媒体页面自定义布局渲染广告、icon和版权信息，一般情况下建议将icon和版权信息展示在广告下方。
接口说明
接口名
描述
loadAd(adParam: AdRequestParams, adOptions: AdOptions, listener: AdLoadListener): void
请求单广告位广告，通过AdRequestParams、AdOptions进行广告请求参数设置，通过AdLoadListener监听广告请求回调。
AdComponent(ads: advertising.Advertisement[], displayOptions: advertising.AdDisplayOptions, interactionListener: advertising.AdInteractionListener, @BuilderParam adRenderer?: () => void): void
展示广告，通过AdDisplayOptions进行广告展示参数设置，通过AdInteractionListener监听广告状态回调。
为了保证广告能正确展示，该接口必须和请求广告接口配套使用。
开发步骤
获取OAID。如果想要为用户更精准的推送广告，可以在请求参数AdRequestParams中添加oaid属性。 如何获取OAID参见获取OAID信息。  使用以下示例中提供的测试广告位必须先获取OAID信息。  请求单广告位广告。需要创建一个AdLoader对象，通过AdLoader的loadAd方法请求广告，最后通过AdLoadListener来监听广告的加载状态。测试开屏广告时，需要使用专门的测试广告位来获取测试开屏广告，示例代码中提供了两种开屏广告类型对应的广告位：半屏开屏（图片）（testq6zq98hecj）和全屏开屏（视频）（testd7c5cewoj6），测试广告位ID仅作为调试使用，不可用于广告变现。 请求广告关键参数如下所示： 请求广告参数名  类型  必填  说明    adType  number  是  请求广告类型，开屏广告类型为1。   adId  string  是  广告位ID。 如果仅调测广告，可使用测试广告位ID：testq6zq98hecj半屏开屏（图片）和testd7c5cewoj6全屏开屏（视频）。如果要接入正式广告，则需要申请正式的广告位ID。可在应用发布前进入流量变现官网，点击“开始变现”，登录鲸鸿动能媒体服务平台进行申请，具体操作详情请参见展示位创建。   adCount  number  否  广告数量。     返回广告参数名  类型  说明    isFullScreen  boolean  标识返回的广告是否为全屏，true为全屏广告，false为半屏广告。     示例代码如下所示：  1. 请求广告之前需要展示默认的Slogan图片，在请求广告时，在onAdLoadSuccess回调中切换展示广告页面。如果超时没有请求到广告，应用自行跳到默认首页。 2. 为保证开屏展示效果，建议开发者在请求广告前，设置屏幕方向为竖屏。  import { router, Prompt } from '@kit.ArkUI';\nimport { advertising, identifier } from '@kit.AdsKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n@Entry\n@Component\nstruct Index {\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  private oaid: string = '';\n  private isTimeOut: boolean = false;\n  // 超时时间(单位毫秒)，开发者可根据实际情况修改\n  private timeOutDuration: number = 1 * 1000;\n  // 超时index\n  private timeOutIndex: number = -1;\n  // 广告展示参数\n  private adDisplayOptions: advertising.AdDisplayOptions = {\n    // 是否静音，默认不静音\n    mute: false\n  }\n  // 广告配置\n  private adOptions: advertising.AdOptions = {\n    // 是否允许流量下载0：不允许，1：允许，不设置以广告主设置为准\n    allowMobileTraffic: 0,\n    // 是否希望根据 COPPA 的规定将您的内容视为面向儿童的内容: -1默认值，不确定 0不希望 1希望\n    tagForChildProtection: -1,\n    // 是否希望按适合未达到法定承诺年龄的欧洲经济区 (EEA) 用户的方式处理该广告请求： -1默认值，不确定 0不希望 1希望\n    tagForUnderAgeOfPromise: -1,\n    // 设置广告内容分级上限: W: 3+,所有受众 PI: 7+,家长指导 J:12+,青少年 A: 16+/18+，成人受众\n    adContentClassification: 'A'\n  }\n  // 开屏视频广告请求参数\n  private splashVideoAdReqParams: advertising.AdRequestParams = {\n    // 'testd7c5cewoj6'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n    adId: 'testd7c5cewoj6',\n    adType: AdType.SPLASH_AD,\n    adCount: 1,\n    oaid: this.oaid\n  }\n  // 开屏图片广告请求参数\n  private splashImageAdReqParams: advertising.AdRequestParams = {\n    // 'testq6zq98hecj'为测试专用的广告位ID，App正式发布时需要改为正式的广告位ID\n    adId: 'testq6zq98hecj',\n    adType: AdType.SPLASH_AD,\n    adCount: 1,\n    oaid: this.oaid\n  }\n\n  aboutToAppear() {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Start to aboutToAppear');\n    try {\n      // 使用Promise回调方式获取OAID\n      identifier.getOAID().then((data: string) => {\n        this.oaid = data;\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in getting adsIdentifierInfo by promise');\n      }).catch((error: BusinessError) => {\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to get adsIdentifierInfo, code: ${error.code}, message: ${error.message}`);\n      })\n    } catch (error) {\n      hilog.error(0x0000, 'testTag', '%{public}s', `Catch err, code: ${error.code}, message: ${error.message}`);\n    }\n  }\n\n  build() {\n    Column() {\n      Column() {\n        // 跳转到开屏全屏视频广告展示页面\n        CustomButton({\n          mText: 'splash full screen request', mOnClick: () => {\n            this.requestAd(this.splashVideoAdReqParams, this.adOptions);\n          }\n        });\n\n        // 跳转到开屏半屏图片广告展示页面\n        CustomButton({\n          mText: 'splash half screen request', mOnClick: () => {\n            this.requestAd(this.splashImageAdReqParams, this.adOptions);\n          }\n        });\n      }.width('100%').height('80%').justifyContent(FlexAlign.Center)\n    }\n    .width('100%')\n    .height('100%')\n  }\n\n  private requestAd(adReqParams: advertising.AdRequestParams, adOptions: advertising.AdOptions): void {\n    // 广告请求回调监听\n    const adLoaderListener: advertising.AdLoadListener = {\n      // 广告请求失败回调\n      onAdLoadFailure: (errorCode: number, errorMsg: string) => {\n        clearTimeout(this.timeOutIndex);\n        if (this.isTimeOut) {\n          return;\n        }\n        hilog.error(0x0000, 'testTag', '%{public}s',\n          `Failed to request ad. errorCode is: ${errorCode}, errorMsg is: ${errorMsg}`);\n        Prompt.showToast({\n          message: `Failed to request ad, code is:  ${errorCode} , errorMsg is: ${errorMsg}`,\n          duration: 1000\n        });\n      },\n      // 广告请求成功回调\n      onAdLoadSuccess: (ads: Array<advertising.Advertisement>) => {\n        clearTimeout(this.timeOutIndex);\n        if (this.isTimeOut) {\n          return;\n        }\n        hilog.info(0x0000, 'testTag', '%{public}s', 'Succeeded in requesting ad!');\n        // 保存请求到的广告内容用于展示\n        hilog.info(0x0000, 'testTag', '%{public}s', `ads[0].adType is : ${ads[0].adType}`);\n        if (canIUse(\"SystemCapability.Advertising.Ads\")) {\n          if (ads[0].adType === AdType.SPLASH_AD) {\n            // 调用开屏广告展示页面\n            if (ads[0]?.isFullScreen === true) {\n              routePage('pages/SplashFullScreenAdPage', ads, this.adDisplayOptions);\n            } else {\n              routePage('pages/SplashHalfScreenAdPage', ads, this.adDisplayOptions);\n            }\n          } else {\n            hilog.error(0x0000, 'testTag', '%{public}s', 'Error adType');\n          }\n        }\n      }\n    };\n    // 创建AdLoader广告对象\n    const load: advertising.AdLoader = new advertising.AdLoader(this.context);\n    // 调用广告请求接口\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Request ad!');\n    adReqParams.oaid = this.oaid;\n    this.timeOutHandler();\n    load.loadAd(adReqParams, adOptions, adLoaderListener);\n  }\n\n  private timeOutHandler(): void {\n    this.isTimeOut = false;\n    // 超时处理\n    this.timeOutIndex = setTimeout(() => {\n      this.isTimeOut = true;\n      const options: router.RouterOptions = {\n        // 开发者可根据项目实际情况修改超时之后要跳转的目标页面\n        url: 'pages/Index',\n      };\n      router.pushUrl(options);\n      hilog.error(0x0000, 'testTag', '%{public}s', 'load ad time out');\n    }, this.timeOutDuration);\n  }\n}\n\nasync function routePage(pageUri: string, ads: Array<advertising.Advertisement | null>,\n  displayOptions: advertising.AdDisplayOptions) {\n  let options: router.RouterOptions = {\n    url: pageUri,\n    params: {\n      ads: ads,\n      displayOptions: displayOptions\n    }\n  }\n  try {\n    hilog.info(0x0000, 'testTag', '%{public}s', `RoutePage: ${pageUri}`);\n    router.pushUrl(options);\n  } catch (error) {\n    hilog.error(0x0000, 'testTag', '%{public}s',\n      `Failed to routePage callback, code: ${error.code}, msg: ${error.message}`);\n  }\n}\n\nexport enum AdType {\n  // 开屏广告的类型\n  SPLASH_AD = 1\n}\n\n@Component\nexport struct CustomButton {\n  private mText: string | Resource = '';\n  private mHeight: number = 40;\n  private mOnClick: (event?: ClickEvent) => void = (): void => {\n  };\n\n  build() {\n    Column() {\n      Button(this.mText)\n        .backgroundColor('#d3d4d6')\n        .fontSize(20)\n        .fontColor('#000')\n        .fontWeight(FontWeight.Normal)\n        .align(Alignment.Center)\n        .type(ButtonType.Capsule)\n        .width('90%')\n        .height(this.mHeight)\n        .margin({ top: 10, bottom: 5 })\n        .onClick(this.mOnClick);\n    }\n  }\n} 展示广告。 1、由在步骤2请求广告中获取的isFullScreen参数判断展示全屏或者半屏广告，同时媒体可在AdComponent中绘制自身的半屏部分，可参考展示半屏代码。 2、在枚举的AdStatus状态中，媒体可根据各种状态来进行下一步操作，如在AD_CLOSED时展示首页。 3、目前只支持展示竖屏广告。  在您的页面中使用AdComponent组件展示开屏广告。示例代码如下所示： 您需要在entry/src/main/resources/base/profile/main_pages.json文件中添加页面，如下图所示。  展示半屏广告： import { Prompt, router } from '@kit.ArkUI';\nimport { advertising, AdComponent } from '@kit.AdsKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct SplashHalfScreenAdPage {\n  private ads: Array<advertising.Advertisement> = [];\n  private displayOptions?: advertising.AdDisplayOptions;\n\n  aboutToAppear() {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Start to splashHalfScreenAdPage aboutToAppear');\n    const params: Record<string, Object> = router.getParams() as Record<string, Object>;\n    if (params && params.ads as Array<advertising.Advertisement> &&\n      params.displayOptions as advertising.AdDisplayOptions) {\n      this.ads = params.ads as Array<advertising.Advertisement>;\n      this.displayOptions = params.displayOptions as advertising.AdDisplayOptions;\n    } else {\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Router params are empty');\n    }\n  }\n\n  build() {\n    Column() {\n      // 运行在提供方进程里\n      AdComponent({\n        ads: this.ads, displayOptions: this.displayOptions,\n        interactionListener: {\n          onStatusChanged: (status: string, ad: advertising.Advertisement, data: string) => {\n            switch (status) {\n              case AdStatus.AD_OPEN:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdOpen');\n                Prompt.showToast({\n                  message: 'splash ad open',\n                  duration: 1000\n                });\n                break;\n              case AdStatus.AD_CLICKED:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClick');\n                Prompt.showToast({\n                  message: 'splash ad click',\n                  duration: 1000\n                });\n                break;\n              case AdStatus.AD_CLOSED:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClose');\n                Prompt.showToast({\n                  message: 'splash ad close',\n                  duration: 1000\n                });\n                router.replaceUrl({\n                  url: 'pages/Index',\n                })\n                break;\n            }\n          }\n        }\n      })\n        .width('100%')\n        .height('87%')\n\n      // 展示媒体自定义icon、应用名称、版权信息\n      Column({}) {\n        Row() {\n          Image($r('app.media.video')).width(24).height(24).margin({ right: 8 })\n          Text($r('app.string.video')).fontColor('#1A1A1A').fontSize(16).width(32).height(21)\n        }.margin({ bottom: 8 })\n\n        Column() {\n          Text($r('app.string.copyright')).fontColor('#1A1A1A').fontSize(9).height(15)\n        }\n      }.width('100%').height('100%')\n    }\n  }\n}\n\nexport enum AdStatus {\n  AD_OPEN = 'onAdOpen',\n  AD_CLICKED = 'onAdClick',\n  AD_CLOSED = 'onAdClose'\n}  展示全屏广告： import { Prompt, router } from '@kit.ArkUI';\nimport { advertising, AdComponent } from '@kit.AdsKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'Ads Demo-SplashFullScreenAdPage';\n\n@Entry\n@Component\nstruct SplashFullScreenAdPage {\n  private ads: Array<advertising.Advertisement> = [];\n  private displayOptions?: advertising.AdDisplayOptions;\n\n  aboutToAppear() {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Start to splashFullScreenAdPage aboutToAppear');\n    const params: Record<string, Object> = router.getParams() as Record<string, Object>;\n    if (params && params.ads as Array<advertising.Advertisement> &&\n      params.displayOptions as advertising.AdDisplayOptions) {\n      this.ads = params.ads as Array<advertising.Advertisement>;\n      this.displayOptions = params.displayOptions as advertising.AdDisplayOptions;\n    } else {\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Router params are empty');\n    }\n  }\n\n  build() {\n    Column() {\n      // 运行在提供方进程里\n      AdComponent({\n        ads: this.ads, displayOptions: this.displayOptions,\n        interactionListener: {\n          onStatusChanged: (status: string, ad: advertising.Advertisement, data: string) => {\n            switch (status) {\n              case AdStatus.AD_OPEN:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdOpen');\n                Prompt.showToast({\n                  message: 'splash ad open',\n                  duration: 1000\n                });\n                break;\n              case AdStatus.AD_CLICKED:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClick');\n                Prompt.showToast({\n                  message: 'splash ad click',\n                  duration: 1000\n                });\n                break;\n              case AdStatus.AD_CLOSED:\n                hilog.info(0x0000, 'testTag', '%{public}s', 'Status is onAdClose');\n                Prompt.showToast({\n                  message: 'splash ad close',\n                  duration: 1000\n                });\n                router.replaceUrl({\n                  url: 'pages/Index',\n                })\n                break;\n            }\n          }\n        }\n      })\n        .width('100%')\n        .height('100%')\n\n    }.width('100%').height('100%')\n  }\n}\n\nexport enum AdStatus {\n  AD_OPEN = 'onAdOpen',\n  AD_CLICKED = 'onAdClick',\n  AD_CLOSED = 'onAdClose'\n} 
