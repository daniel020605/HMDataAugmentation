保存媒体库资源
当用户需要保存图片、视频等用户文件到图库时，无需在应用中申请相册管理模块权限'ohos.permission.WRITE_IMAGEVIDEO'，应用可以通过安全控件或授权弹窗的方式，将用户指定的媒体资源保存到图库中。
使用安全控件保存媒体库资源
安全控件的介绍可参考安全控件的保存控件。
下面以使用安全控件创建一张图片资源为例。
开发步骤
 设置安全控件按钮属性。 创建安全控件按钮。 调用MediaAssetChangeRequest.createImageAssetRequest和PhotoAccessHelper.applyChanges接口创建图片资源。 
import { photoAccessHelper } from '@kit.MediaLibraryKit';\n\n@Entry\n@Component\nstruct Index {\n    saveButtonOptions: SaveButtonOptions = {\n    icon: SaveIconStyle.FULL_FILLED,\n    text: SaveDescription.SAVE_IMAGE,\n    buttonType: ButtonType.Capsule\n  } // 设置安全控件按钮属性\n\n  build() {\n    Row() {\n      Column() {\n        SaveButton(this.saveButtonOptions) // 创建安全控件按钮\n          .onClick(async (event, result: SaveButtonOnClickResult) => {\n             if (result == SaveButtonOnClickResult.SUCCESS) {\n               try {\n                 let context = getContext();\n                 let phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n                 // 需要确保fileUri对应的资源存在\n                 let fileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/test.jpg';\n                 let assetChangeRequest: photoAccessHelper.MediaAssetChangeRequest = photoAccessHelper.MediaAssetChangeRequest.createImageAssetRequest(context, fileUri);\n                 await phAccessHelper.applyChanges(assetChangeRequest);\n                 console.info('createAsset successfully, uri: ' + assetChangeRequest.getAsset().uri);\n               } catch (err) {\n                 console.error(`create asset failed with error: ${err.code}, ${err.message}`);\n               }\n             } else {\n               console.error('SaveButtonOnClickResult create asset failed');\n             }\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
除了上述通过fileUri从应用沙箱指定资源内容的方式，开发者还可以通过ArrayBuffer的方式添加资源内容，详情请参考addResource接口。
使用弹窗授权保存媒体库资源
下面以弹窗授权的方式保存一张图片资源为例。
开发步骤
 指定待保存到媒体库的位于应用沙箱的应用文件图片uri。 指定待保存照片的创建选项，包括文件后缀和照片类型，标题和照片子类型可选。 调用showAssetsCreationDialog，基于弹窗授权的方式获取的目标媒体文件uri。 将来源于应用沙箱的照片内容写入媒体库的目标uri。 
import { photoAccessHelper } from '@kit.MediaLibraryKit';\nimport { fileIo } from '@kit.CoreFileKit';\n\nlet context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  try {\n    // 指定待保存到媒体库的位于应用沙箱的图片uri\n    let srcFileUri = 'file://com.example.temptest/data/storage/el2/base/haps/entry/files/test.jpg';\n    let srcFileUris: Array<string> = [\n      srcFileUri\n    ];\n    // 指定待保存照片的创建选项，包括文件后缀和照片类型，标题和照片子类型可选\n    let photoCreationConfigs: Array<photoAccessHelper.PhotoCreationConfig> = [\n      {\n        title: 'test', // 可选\n        fileNameExtension: 'jpg',\n        photoType: photoAccessHelper.PhotoType.IMAGE,\n        subtype: photoAccessHelper.PhotoSubtype.DEFAULT, // 可选\n      }\n    ];\n    // 基于弹窗授权的方式获取媒体库的目标uri\n    let desFileUris: Array<string> = await phAccessHelper.showAssetsCreationDialog(srcFileUris, photoCreationConfigs);\n    // 将来源于应用沙箱的照片内容写入媒体库的目标uri\n    let desFile: fileIo.File = await fileIo.open(desFileUris[0], fileIo.OpenMode.WRITE_ONLY);\n    let srcFile: fileIo.File = await fileIo.open(srcFileUri, fileIo.OpenMode.READ_ONLY);\n    await fileIo.copyFile(srcFile.fd, desFile.fd);\n    fileIo.closeSync(srcFile);\n    fileIo.closeSync(desFile);\n    console.info('create asset by dialog successfully');\n  } catch (err) {\n    console.error(`failed to create asset by dialog successfully errCode is: ${err.code}, ${err.message}`);\n  }\n}
