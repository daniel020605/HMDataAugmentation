手电筒使用(ArkTS)
手电筒模式的使用是通过操作手机启用手电筒功能，使设备的手电筒功能持续保持常亮状态。
在使用相机应用并操作手电筒功能时，存在以下几种情况说明：
 当使用后置摄像头并设置闪光灯模式FlashMode关闭时，手电筒功能无法启用。 当使用前置摄像头时，手电筒可以正常启用并保持常亮状态。 从前置摄像头切换至后置摄像头时，如果手电筒原本处于开启状态，它将会被自动关闭。 
开发步骤
详细的API说明请参考Camera API参考。
 导入camera接口，接口中提供了相机相关的属性和方法，导入方法如下。 import { camera } from '@kit.CameraKit';\nimport { BusinessError } from '@kit.BasicServicesKit'; 通过CameraManager类中的isTorchSupported方法，检测当前设备是否支持手电筒功能。 function isTorchSupported(cameraManager: camera.CameraManager) : boolean {\n    let torchSupport: boolean = false;\n    try {\n        torchSupport = cameraManager.isTorchSupported();\n    } catch (error) {\n        let err = error as BusinessError;\n        console.error('Failed to torch. errorCode = ' + err.code);\n    }\n    console.info('Returned with the torch support status:' + torchSupport);\n    return torchSupport;\n} 通过CameraManager类中的isTorchModeSupported方法，检测是否支持指定的手电筒模式TorchMode。 function isTorchModeSupported(cameraManager: camera.CameraManager, torchMode: camera.TorchMode) : boolean {\n    let isTorchModeSupport: boolean = false;\n    try {\n        isTorchModeSupport = cameraManager.isTorchModeSupported(torchMode);\n    } catch (error) {\n        let err = error as BusinessError;\n        console.error('Failed to set the torch mode. errorCode = ' + err.code);\n    }\n    return isTorchModeSupport;\n} 通过CameraManager类中的setTorchMode方法，设置当前设备的手电筒模式。以及通过CameraManager类中的getTorchMode方法，获取当前设备的手电筒模式。     在使用getTorchMode方法前，需要先注册监听手电筒的状态变化，请参考状态监听。   function setTorchModeSupported(cameraManager: camera.CameraManager, torchMode: camera.TorchMode) : void {\n    cameraManager.setTorchMode(torchMode);\n    let isTorchMode = cameraManager.getTorchMode();\n    console.info(`Returned with the torch mode supportd mode: ${isTorchMode}`);\n} 
状态监听
在相机应用开发过程中，可以随时监听手电筒状态，包括手电筒打开、手电筒关闭、手电筒不可用、手电筒恢复可用。手电筒状态发生变化，可通过回调函数获取手电筒模式的变化。
通过注册torchStatusChange事件，通过回调返回监听结果，callback返回TorchStatusInfo参数，参数的具体内容可参考相机管理器回调接口实例TorchStatusInfo。
function onTorchStatusChange(cameraManager: camera.CameraManager): void {\n    cameraManager.on('torchStatusChange', (err: BusinessError, torchStatusInfo: camera.TorchStatusInfo) => {\n        if (err !== undefined && err.code !== 0) {\n            console.error(`Callback Error, errorCode: ${err.code}`);\n            return;\n        }\n        console.info(`onTorchStatusChange, isTorchAvailable: ${torchStatusInfo.isTorchAvailable}, isTorchActive: ${torchStatusInfo.\n            isTorchActive}, level: ${torchStatusInfo.torchLevel}`);\n    });\n}
