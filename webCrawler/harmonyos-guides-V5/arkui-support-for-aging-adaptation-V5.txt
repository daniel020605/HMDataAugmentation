支持适老化
基本概念
适老化提供了一种通过鼠标或手指长按的方法来放大所选区域或组件，即如果系统字体大小大于1倍，当用户使用鼠标或手指长按装配了适老化方法的组件，需要从所选区域的组件中提取数据，并放入另一个弹窗组件中展示。该方法的目的在于使组件和组件内部数据（子组件）放大，同时将整体组件在屏幕中央显示，让用户能够更好的观察该组件。
使用约束
 适老化规则 由于在系统字体大于1倍时，组件并没有默认放大，需要通过配置configuration标签，实现组件放大的适老化功能。 如何开启适老化 进入手机设置，点击辅助功能，开启关怀模式。 适老化操作 在已经支持适老化能力的组件上长按组件，能够触发弹窗，当用户释放时，适老化操作结束。当设置系统字体大于1倍时，组件自动放大，当系统字体恢复至1倍时组件恢复正常状态。 适老化对象 触发适老化操作并提供数据的组件。 适老化弹窗目标 可接收并处理适老化数据的组件。 弹窗限制 当用户将系统字体设置为2倍以上时，弹窗内容包括icon和文字的放大倍数固定为2倍。 联合其他能力 适老化能力可以适配其他能力（如：滑动拖拽）。底部页签（tabBar）组件在触发适老化时，如果用户滑动手指或鼠标可以触发底部页签其他子组件的适老化功能。 
适配适老化的组件及触发方式
示例
SideBarContainer组件通过长按控制按钮触发适老化弹窗。在系统字体为1倍的情况下，长按控制按钮不能弹窗。在系统字体大于1倍的情况下，长按控制按钮可以弹窗。
@Entry\n@Component\nstruct SideBarContainerExample {\n  @State currentFontSizeScale: number = 1\n  normalIcon: Resource = $r(\"app.media.icon\")\n  selectedIcon: Resource = $r(\"app.media.icon\")\n  @State arr: number[] = [1, 2, 3]\n  @State current: number = 1\n  @State title: string = 'Index01';\n\n  build() {\n    SideBarContainer(SideBarContainerType.Embed) {\n      Column() {\n        ForEach(this.arr, (item: number) => {\n          Column({ space: 5 }) {\n            Image(this.current === item ? this.selectedIcon : this.normalIcon).width(64).height(64)\n            Text(\"0\" + item)\n              .fontSize(25)\n              .fontColor(this.current === item ? '#0A59F7' : '#999')\n              .fontFamily('source-sans-pro,cursive,sans-serif')\n          }\n          .onClick(() => {\n            this.current = item;\n            this.title = \"Index0\" + item;\n          })\n        }, (item: string) => item)\n      }.width('100%')\n      .justifyContent(FlexAlign.SpaceEvenly)\n      .backgroundColor($r('sys.color.mask_fifth'))\n    }\n    .controlButton({\n      icons: {\n        hidden: $r('sys.media.ohos_ic_public_drawer_open_filled'),\n        shown: $r('sys.media.ohos_ic_public_drawer_close')\n      }\n    })\n    .sideBarWidth(150)\n    .minSideBarWidth(50)\n    .maxSideBarWidth(300)\n    .minContentWidth(0)\n    .onChange((value: boolean) => {\n      console.info('status:' + value)\n    })\n    .divider({ strokeWidth: '1vp', color: Color.Gray, startMargin: '4vp', endMargin: '4vp' })\n  }\n}
切换系统字体前后长按已经支持适老化能力的组件，有如下效果：
TextPickerDialog组件通过设置系统字体大小触发适老化弹窗。在系统字体为1倍的情况下，适老化不触发；在系统字体大于1倍的情况下，适老化触发。
@Entry\n@Component\nstruct TextPickerExample {\n  private select: number | number[] = 0;\n  private cascade: TextCascadePickerRangeContent[] = [\n    {\n      text: '辽宁省',\n      children: [{ text: '沈阳市', children: [{ text: '沈河区' }, { text: '和平区' }, { text: '浑南区' }] },\n        { text: '大连市', children: [{ text: '中山区' }, { text: '金州区' }, { text: '长海县' }] }]\n    },\n    {\n      text: '吉林省',\n      children: [{ text: '长春市', children: [{ text: '南关区' }, { text: '宽城区' }, { text: '朝阳区' }] },\n        { text: '四平市', children: [{ text: '铁西区' }, { text: '铁东区' }, { text: '梨树县' }] }]\n    },\n    {\n      text: '黑龙江省',\n      children: [{ text: '哈尔滨市', children: [{ text: '道里区' }, { text: '道外区' }, { text: '南岗区' }] },\n        { text: '牡丹江市', children: [{ text: '东安区' }, { text: '西安区' }, { text: '爱民区' }] }]\n    }\n  ]\n  @State v: string = '';\n  @State showTriggered: string = '';\n  private triggered: string = '';\n  private maxLines: number = 3;\n\n  linesNum(max: number): void {\n    let items: string[] = this.triggered.split('').filter(item => item != '');\n    if (items.length > max) {\n      this.showTriggered = items.slice(-this.maxLines).join('');\n    } else {\n      this.showTriggered = this.triggered;\n    }\n  }\n\n  build() {\n    Column() {\n      Button(\"TextPickerDialog.show:\" + this.v)\n        .onClick(() => {\n          TextPickerDialog.show({\n            range: this.cascade,\n            selected: this.select,\n            onAccept: (value: TextPickerResult) => {\n              this.select = value.index\n              console.log(this.select + '')\n              this.v = value.value as string\n              console.info(\"TextPickerDialog:onAccept()\" + JSON.stringify(value))\n              if (this.triggered != '') {\n                this.triggered += `onAccept(${JSON.stringify(value)})`;\n              } else {\n                this.triggered = `onAccept(${JSON.stringify(value)})`;\n              }\n              this.linesNum(this.maxLines);\n            },\n            onCancel: () => {\n              console.info(\"TextPickerDialog:onCancel()\")\n              if (this.triggered != '') {\n                this.triggered += `onCancel()`;\n              } else {\n                this.triggered = `onCancel()`;\n              }\n              this.linesNum(this.maxLines);\n            },\n            onChange: (value: TextPickerResult) => {\n              console.info(\"TextPickerDialog:onChange()\" + JSON.stringify(value))\n              if (this.triggered != '') {\n                this.triggered += `onChange(${JSON.stringify(value)})`;\n              } else {\n                this.triggered = `onChange(${JSON.stringify(value)})`;\n              }\n              this.linesNum(this.maxLines);\n            },\n          })\n        })\n        .margin({ top: 60 })\n    }\n  }\n}
