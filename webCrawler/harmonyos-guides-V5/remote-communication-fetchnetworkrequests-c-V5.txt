使用fetchsync发送同步网络请求 (C/C++)
场景介绍
发送一个同步HTTP请求，也可以设置请求头和请求体等参数，并返回来自服务器的HTTP响应。常用于获取资源，支持通过拦截器来处理请求和响应。
接口说明
具体API说明详见接口文档。
接口名
描述
Rcp_Response *HMS_Rcp_FetchSync(Rcp_Session *session, Rcp_Request *request, uint32_t *errCode);
发送一个HTTP请求，并直接返回来自服务器的HTTP响应。
使用示例
 CPP侧导入模块。#include \"RemoteCommunicationKit/rcp.h\"\n#include <stdio.h>  CMakeLists.txt中添加以下lib。（具体请见C API开发准备）。librcp_c.so  创建Request对象。\"https://www.example.com\"请根据实际情况替换为想要请求的URL地址。（实际使用时请将该代码块放入main函数或者其他函数区域内）。const char *kHttpServerAddress = \"http://www.example.com\";\nRcp_Request *request = HMS_Rcp_CreateRequest(kHttpServerAddress);  创建会话。（实际使用时请将该代码块放入main函数或者其他函数区域内）。uint32_t errCode = 0;\nRcp_Session *session = HMS_Rcp_CreateSession(NULL, &errCode);  发起请求，并处理返回结果。（实际使用时请将该代码块放入main函数或者其他函数区域内）。Rcp_Response *response = HMS_Rcp_FetchSync(session, request, &errCode);\nif (response != NULL) {\n    printf(\"Response status: %d\\n\", response->statusCode);\n} else {\n    printf(\"Fetch failed: errCode: %u\\n\", errCode);\n}  清理response响应和request请求。最后关闭session。（实际使用时请将该代码块放入main函数或者其他函数区域内）。// 清理request\nHMS_Rcp_DestroyRequest(request);\n// 处理response，并清理response\nif (response != NULL) {\n    response->destroyResponse(response);\n}\n// 关闭session\nerrCode = HMS_Rcp_CloseSession(&session);\n// 处理errCode  
