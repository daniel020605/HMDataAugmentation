使用动画
使用属性动画
ArkUI开发框架在NDK接口主要提供属性动画，实现组件出现/消失转场。同时，可以通过Node-API桥接ArkTS侧帧动画能力，实现Native侧的动画效果。
 需要从ArkTS侧获取this.getUIContext()，传入到Native侧。 在Native侧通过OH_ArkUI_GetContextFromNapiValue方法获取context。 需要执行的动画属性变化必须写在ArkUI_ContextCallback中callback中。 需要执行的动画属性,必须在执行动画之前设置过。 
提供全局animateTo显式动画接口，来指定由于闭包代码导致的状态变化插入过渡动效。同属性动画，布局类改变宽高的动画，内容都是直接到终点状态。
 在.ets文件中获取UIContext，把this.getUIContext()当做参数输出到Native方法中。 // createNativeNode是Native侧暴露的方法\nnativeNode.createNativeNode(\"xcomponentId\", this.getUIContext()); 解析UIContext转换C中的context对象。 // 获取ets测传入的context\nArkUI_ContextHandle context = nullptr;\n// 通过code 判断是否获取成功\nauto code = OH_ArkUI_GetContextFromNapiValue(env, args[1], &context); 获取ArkUI_NativeAnimateAPI_1 对象。 // 获取ArkUI_NativeAnimateAPI接口\nArkUI_NativeAnimateAPI_1 *animateApi = nullptr;\nOH_ArkUI_GetModuleInterface(ARKUI_NATIVE_ANIMATE, ArkUI_NativeAnimateAPI_1, animateApi); 设置 ArkUI_AnimateOption参数，通过提供的C方法设置对应的参数。 ArkUI_AnimateOption *option = OH_ArkUI_AnimateOption_Create();\nOH_ArkUI_AnimateOption_SetDuration(option, 2000);\nOH_ArkUI_AnimateOption_SetTempo(option, 1.1);\nOH_ArkUI_AnimateOption_SetCurve(option, ARKUI_CURVE_EASE);\nOH_ArkUI_AnimateOption_SetDelay(option, 20);\nOH_ArkUI_AnimateOption_SetIterations(option, 1);\nOH_ArkUI_AnimateOption_SetPlayMode(option, ARKUI_ANIMATION_PLAY_MODE_REVERSE);\nArkUI_ExpectedFrameRateRange *range = new ArkUI_ExpectedFrameRateRange;\nrange->min = 10;\nrange->max = 120;\nrange->expected = 60;\nOH_ArkUI_AnimateOption_SetExpectedFrameRateRange(option, range); 设置回调参数。 // 用户自定义参数\nstruct UserData{\n    int32_t data;\n};\nUserData *onFinishUser = new UserData;\nonFinishUser->data= 101;\n// 设置完成的回调\nArkUI_AnimateCompleteCallback *completeCallback = new ArkUI_AnimateCompleteCallback;\ncompleteCallback->userData = onFinishUser;\ncompleteCallback->type = ARKUI_FINISH_CALLBACK_REMOVED;\ncompleteCallback->callback = [](void *userData) {\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"Manager\", \"CreateNativeNode  onFinishCallback %{public}d\",\n                 reinterpret_cast<AA *>(userData)->a);\n};\n// 用户自定义参数\nUserData *eventUser = new UserData ;\neventUser->data= 201;\nstatic bool isback = true;\nArkUI_ContextCallback *update = new ArkUI_ContextCallback;\nupdate->userData = eventUser;\nupdate->callback = [](void *user) {\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"Manager\", \"CreateNativeNode  animateTo %{public}d\",\n                 reinterpret_cast<UserData*>(user)->data);\n    // 对应的属性变化 width height\n    if (isback) {\n        ArkUI_NumberValue custom_widthValue[] = {200};\n        ArkUI_AttributeItem custom_widthItem = {custom_widthValue, 1};\n        ArkUI_NumberValue custom_heightValue1[] = {80};\n        ArkUI_AttributeItem custom_heightItem1 = {custom_heightValue1, 1};\n        nodeAPI->setAttribute(textInput, NODE_WIDTH, &custom_widthItem);\n        nodeAPI->setAttribute(textInput, NODE_HEIGHT, &custom_heightItem1);\n    } else {\n        ArkUI_NumberValue custom_widthValue[] = {100};\n        ArkUI_AttributeItem custom_widthItem = {custom_widthValue, 1};\n        ArkUI_NumberValue custom_heightValue1[] = {40};\n        ArkUI_AttributeItem custom_heightItem1 = {custom_heightValue1, 1};\n        nodeAPI->setAttribute(textInput, NODE_WIDTH, &custom_widthItem);\n        nodeAPI->setAttribute(textInput, NODE_HEIGHT, &custom_heightItem1);\n    }\n};\n// 执行对应的动画\nanimateApi->animateTo(context, option, update, completeCallback);  
组件出现/消失转场
组件内转场通过NODE_XX_TRANSITION属性（XX包括：OPACITY、TRANSLATE、SCALE、ROTATE、MOVE）配置转场参数，在组件插入和删除时显示过渡动效（通过NODE_TRANSFORM_CENTER属性设置NODE_SCALE_TRANSITION和NODE_ROTATE_ROTATE动效的中心点坐标）。主要用于容器组件中子组件插入和删除时，提升用户体验。
 创建可交互界面，界面中包含Button，点击可以控制转场节点的添加和移除。其中 ArkUI_NodeContentHandle 类型节点的获取与使用可参考接入ArkTS页面。 constexpr int32_t BUTTON_CLICK_ID = 1;\nbool flag = false;\nArkUI_NodeHandle parrentNode;\nArkUI_NodeHandle childNode;\nArkUI_NodeHandle buttonNode;\n\nvoid mainViewMethod(ArkUI_NodeContentHandle handle)\n{\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \"ArkUI_NativeNodeAPI_1\"));\n    ArkUI_NodeHandle column = nodeAPI->createNode(ARKUI_NODE_COLUMN);\n    ArkUI_NumberValue widthValue[] = {{.f32 = 500}};\n    ArkUI_AttributeItem widthItem = {.value = widthValue, .size = sizeof(widthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(column, NODE_WIDTH, &widthItem);\n    ArkUI_NumberValue heightValue[] = {{.f32 = 500}};\n    ArkUI_AttributeItem heightItem = {.value = heightValue, .size = sizeof(heightValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(column, NODE_HEIGHT, &heightItem);\n    ArkUI_NodeHandle buttonShow = nodeAPI->createNode(ARKUI_NODE_BUTTON);\n    ArkUI_NumberValue buttonWidthValue[] = {{.f32 = 200}};\n    ArkUI_AttributeItem buttonWidthItem = {.value = buttonWidthValue,\n                                           .size = sizeof(buttonWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(buttonShow, NODE_WIDTH, &buttonWidthItem);\n    ArkUI_NumberValue buttonHeightValue[] = {{.f32 = 50}};\n    ArkUI_AttributeItem buttonHeightItem = {.value = buttonHeightValue,\n                                            .size = sizeof(buttonHeightValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(buttonShow, NODE_HEIGHT, &buttonHeightItem);\n    ArkUI_AttributeItem labelItem = {.string = \"show\"};\n    nodeAPI->setAttribute(buttonShow, NODE_BUTTON_LABEL, &labelItem);\n    ArkUI_NumberValue buttonOpenTypeValue[] = {{.i32 = static_cast<int32_t>(ARKUI_BUTTON_TYPE_NORMAL)}};\n    ArkUI_AttributeItem buttonOpenTypeItem = {.value = buttonOpenTypeValue,\n                                              .size = sizeof(buttonOpenTypeValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(buttonShow, NODE_BUTTON_TYPE, &buttonOpenTypeItem);\n    ArkUI_NumberValue buttonShowMarginValue[] = {{.f32 = 20}};\n    ArkUI_AttributeItem buttonShowMarginItem = {.value = buttonShowMarginValue,\n                                                 .size = sizeof(buttonShowMarginValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(buttonShow, NODE_MARGIN, &buttonShowMarginItem);\n    nodeAPI->registerNodeEvent(buttonShow, NODE_ON_CLICK, BUTTON_CLICK_ID, nullptr);\n    nodeAPI->addNodeEventReceiver(buttonShow, OnButtonShowClicked);\n    parrentNode = column;\n    buttonNode = buttonShow;\n    nodeAPI->addChild(column, buttonShow);\n    OH_ArkUI_NodeContent_AddNode(handle, column);\n} 创建一个设置了Transition属性的节点，当目标节点上下树时会播放转场动画。 ArkUI_NodeHandle CreateChildNode() {\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \"ArkUI_NativeNodeAPI_1\"));\n    ArkUI_NodeHandle image = nodeAPI->createNode(ARKUI_NODE_IMAGE);\n    ArkUI_AttributeItem imageSrcItem = {.string = \"/pages/common/scenery.jpg\"};\n    nodeAPI->setAttribute(image, NODE_IMAGE_SRC, &imageSrcItem);\n    ArkUI_NumberValue textWidthValue[] = {{.f32 = 300}};\n    ArkUI_AttributeItem textWidthItem = {.value = textWidthValue,\n                                         .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(image, NODE_WIDTH, &textWidthItem);\n    ArkUI_NumberValue textHeightValue[] = {{.f32 = 300}};\n    ArkUI_AttributeItem textHeightItem = {.value = textHeightValue,\n                                          .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(image, NODE_HEIGHT, &textHeightItem);\n    ArkUI_NumberValue transformCenterValue[] = {0.0f, 0.0f, 0.0f, 0.5f, 0.5f};\n    ArkUI_AttributeItem transformCenterItem = {.value = transformCenterValue,\n                                          .size = sizeof(transformCenterValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(image, NODE_TRANSFORM_CENTER, &transformCenterItem);\n    ArkUI_NumberValue rotateAnimationValue[] = {0.0f, 0.0f, 1.0f, 360.0f, 0.0f, {.i32 = 500}, {.i32 = static_cast<int32_t>(ARKUI_CURVE_SHARP)}};\n    ArkUI_AttributeItem rotateAnimationItem = {.value = rotateAnimationValue,\n                                               .size = sizeof(rotateAnimationValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(image, NODE_ROTATE_TRANSITION, &rotateAnimationItem);\n    ArkUI_NumberValue scaleAnimationValue[] = {\n        0.0f, 0.0f, 0.0f, {.i32 = 500}, {.i32 = static_cast<int32_t>(ARKUI_CURVE_SHARP)}};\n    ArkUI_AttributeItem scaleAnimationItem = {.value = scaleAnimationValue,\n                                               .size = sizeof(scaleAnimationValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(image, NODE_SCALE_TRANSITION, &scaleAnimationItem);\n    ArkUI_NumberValue translateAnimationValue[] = {\n        200, 200, 0.0f, {.i32 = 500}, {.i32 = static_cast<int32_t>(ARKUI_CURVE_SHARP)}};\n    ArkUI_AttributeItem translateAnimationItem = {.value = translateAnimationValue,\n                                              .size = sizeof(translateAnimationValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(image, NODE_TRANSLATE_TRANSITION, &translateAnimationItem);\n    return image;\n} 在Button的监听回调里添加转场节点上下树逻辑，以此控制转场节点的入场和出场。 void OnButtonShowClicked(ArkUI_NodeEvent* event)\n{\n    if (!event) {\n        return;\n    }\n    if (!childNode) {\n        childNode = CreateChildNode();\n    }\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \"ArkUI_NativeNodeAPI_1\"));\n    if (flag) {\n        flag = false;\n        ArkUI_AttributeItem labelItem = {.string = \"show\"};\n        nodeAPI->setAttribute(buttonNode, NODE_BUTTON_LABEL, &labelItem);\n        nodeAPI->removeChild(parrentNode, childNode);\n    } else {\n        flag = true;\n        ArkUI_AttributeItem labelItem = {.string = \"hide\"};\n        nodeAPI->setAttribute(buttonNode, NODE_BUTTON_LABEL, &labelItem);\n        nodeAPI->addChild(parrentNode, childNode);\n    }\n}  
