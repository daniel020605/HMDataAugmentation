NativeDisplaySoloist开发指导 (C/C++)
如果开发者想在独立线程中进行帧率控制的Native侧业务，可以通过DisplaySoloist来实现，如游戏、自绘制UI框架对接等场景。
开发者可以选择多个DisplaySoloist实例共享一个线程，也可以选择每个DisplaySoloist实例独占一个线程。
接口说明
开发示例
 本范例是通过Drawing在Native侧实现图形的绘制，通过异步线程设置期望的帧率，再根据帧率进行图形的绘制并将其呈现在NativeWindow上，图形绘制部分可参考使用Drawing实现图形绘制与显示。
[h2]添加开发依赖
添加动态链接库
CMakeLists.txt中添加以下lib。
libace_napi.z.so\nlibace_ndk.z.so\nlibnative_window.so\nlibnative_drawing.so\nlibnative_display_soloist.so
头文件
#include <ace/xcomponent/native_interface_xcomponent.h>\n#include \"napi/native_api.h\"\n#include <native_display_soloist/native_display_soloist.h>\n#include <native_drawing/drawing_bitmap.h>\n#include <native_drawing/drawing_color.h>\n#include <native_drawing/drawing_canvas.h>\n#include <native_drawing/drawing_pen.h>\n#include <native_drawing/drawing_brush.h>\n#include <native_drawing/drawing_path.h>\n#include <native_window/external_window.h>\n#include <cmath>\n#include <algorithm>\n#include <stdint.h>\n#include <sys/mman.h>
[h2]开发步骤
定义ArkTS接口文件XComponentContext.ts，用来对接Native层。 export default interface XComponentContext {\n  register(): void;\n  unregister(): void;\n  destroy(): void;\n}; 定义演示页面，包含两个XComponent组件。 import XComponentContext from \"../interface/XComponentContext\";\n\n@Entry\n@Component\nstruct Index {\n  private xComponentContext1: XComponentContext | undefined = undefined;\n  private xComponentContext2: XComponentContext | undefined = undefined;\n\n  build() {\n    Column() {\n      Row() {\n        XComponent({ id: 'xcomponentId30', type: 'surface', libraryname: 'entry' })\n          .onLoad((xComponentContext) => {\n            this.xComponentContext1 = xComponentContext as XComponentContext;\n          }).width('640px')\n      }.height('40%')\n\n      Row() {\n        XComponent({ id: 'xcomponentId120', type: 'surface', libraryname: 'entry' })\n          .onLoad((xComponentContext) => {\n            this.xComponentContext2 = xComponentContext as XComponentContext;\n          }).width('640px') // 64的倍数\n      }.height('40%')\n    }\n  }\n} 在 Native C++层获取NativeXComponent。建议使用单例模式保存XComponent。此步骤需要在napi_init的过程中处理。  创建一个PluginManger单例类，用于管理NativeXComponent。 class PluginManager {\npublic:\n    ~PluginManager();\n\n    static PluginManager *GetInstance();\n\n    void SetNativeXComponent(std::string &id, OH_NativeXComponent *nativeXComponent);\n    SampleBitMap *GetRender(std::string &id);\n    void Export(napi_env env, napi_value exports);\nprivate:\n\n    std::unordered_map<std::string, OH_NativeXComponent *> nativeXComponentMap_;\n    std::unordered_map<std::string, SampleXComponent *> pluginRenderMap_;\n};  SampleXComponent类会在后面的绘制图形中创建。 void PluginManager::Export(napi_env env, napi_value exports) {\n    nativeXComponentMap_.clear();\n    pluginRenderMap_.clear();\n    if ((env == nullptr) || (exports == nullptr)) {\n        DRAWING_LOGE(\"Export: env or exports is null\");\n        return;\n    }\n\n    napi_value exportInstance = nullptr;\n    if (napi_get_named_property(env, exports, OH_NATIVE_XCOMPONENT_OBJ, &exportInstance) != napi_ok) {\n        DRAWING_LOGE(\"Export: napi_get_named_property fail\");\n        return;\n    }\n\n    OH_NativeXComponent *nativeXComponent = nullptr;\n    if (napi_unwrap(env, exportInstance, reinterpret_cast<void **>(&nativeXComponent)) != napi_ok) {\n        DRAWING_LOGE(\"Export: napi_unwrap fail\");\n        return;\n    }\n\n    char idStr[OH_XCOMPONENT_ID_LEN_MAX + 1] = {'\\0'};\n    uint64_t idSize = OH_XCOMPONENT_ID_LEN_MAX + 1;\n    if (OH_NativeXComponent_GetXComponentId(nativeXComponent, idStr, &idSize) != OH_NATIVEXCOMPONENT_RESULT_SUCCESS) {\n        DRAWING_LOGE(\"Export: OH_NativeXComponent_GetXComponentId fail\");\n        return;\n    }\n\n    std::string id(idStr);\n    auto context = PluginManager::GetInstance();\n    if ((context != nullptr) && (nativeXComponent != nullptr)) {\n        context->SetNativeXComponent(id, nativeXComponent);\n        auto render = context->GetRender(id);\n        if (render != nullptr) {\n            render->RegisterCallback(nativeXComponent);\n            render->Export(env, exports);\n        } else {\n            DRAWING_LOGE(\"render is nullptr\");\n        }\n    }\n} Native层配置帧率和注册回调函数。 定义每帧回调函数内容。 static void TestCallback(long long timestamp, long long targetTimestamp, void *data) \n{\n   // ...\n   // 获取对应的XComponent\n    OH_NativeXComponent *component = nullptr;\n    component = static_cast<OH_NativeXComponent *>(data);\n    if (component == nullptr) {\n       SAMPLE_LOGE(\"TestCallback: component is null\");\n       return;\n    }\n    char idStr[OH_XCOMPONENT_ID_LEN_MAX + 1] = {'\\0'};\n    uint64_t idSize = OH_XCOMPONENT_ID_LEN_MAX + 1;\n    if (OH_NativeXComponent_GetXComponentId(component, idStr, &idSize) != OH_NATIVEXCOMPONENT_RESULT_SUCCESS) {\n       SAMPLE_LOGE(\"TestCallback: Unable to get XComponent id\");\n       return;\n    }\n \n    std::string id(idStr);\n    auto render = SampleXComponent::GetInstance(id);\n    OHNativeWindow *nativeWindow = render->GetNativeWindow();\n    uint64_t width;\n    uint64_t height;\n    // 获取XComponent的surface大小\n    int32_t xSize = OH_NativeXComponent_GetXComponentSize(component, nativeWindow, &width, &height);\n    if ((xSize == OH_NATIVEXCOMPONENT_RESULT_SUCCESS) && (render != nullptr)) {\n        render->Prepare();\n        render->Create();\n        if (id == \"xcomponentId30\") {\n            // 30Hz绘制时,每帧移动的距离为16像素\n            render->ConstructPath(16, 16, render->defaultOffsetY);\n        }\n        if (id == \"xcomponentId120\") {\n            // 120Hz绘制时，每帧移动的距离为4像素\n            render->ConstructPath(4, 4, render->defaultOffsetY);\n        }\n       // ...\n    }\n} 使用DisplaySoloist接口配置帧率和注册每帧回调函数。   实例在调用NapiRegister后，在不需要进行帧率控制时，应进行NapiUnregister操作，避免内存泄漏问题。在页面跳转时，应进行NapiUnregister和NapiDestroy操作，避免内存泄漏问题。  static std::unordered_map<std::string, OH_DisplaySoloist *> g_displaySync;\n\nnapi_value SampleXComponent::NapiRegister(napi_env env, napi_callback_info info)\n{\n    // ...\n    // 获取对应的XComponent\n    napi_value thisArg;\n    if (napi_get_cb_info(env, info, nullptr, nullptr, &thisArg, nullptr) != napi_ok) {\n       SAMPLE_LOGE(\"NapiRegister: napi_get_cb_info fail\");\n       return nullptr;\n    }\n\n    napi_value exportInstance;\n    if (napi_get_named_property(env, thisArg, OH_NATIVE_XCOMPONENT_OBJ, &exportInstance) != napi_ok) {\n       SAMPLE_LOGE(\"NapiRegister: napi_get_named_property fail\");\n       return nullptr;\n    }\n\n    OH_NativeXComponent *nativeXComponent = nullptr;\n    if (napi_unwrap(env, exportInstance, reinterpret_cast<void **>(&nativeXComponent)) != napi_ok) {\n       SAMPLE_LOGE(\"NapiRegister: napi_unwrap fail\");\n       return nullptr;\n    }\n\n    char idStr[OH_XCOMPONENT_ID_LEN_MAX + 1] = {'\\0'};\n    uint64_t idSize = OH_XCOMPONENT_ID_LEN_MAX + 1;\n    if (OH_NativeXComponent_GetXComponentId(nativeXComponent, idStr, &idSize) != OH_NATIVEXCOMPONENT_RESULT_SUCCESS) {\n       SAMPLE_LOGE(\"NapiRegister: Unable to get XComponent id\");\n       return nullptr;\n    }\n    SAMPLE_LOGI(\"RegisterID = %{public}s\", idStr);\n    std::string id(idStr);\n    SampleXComponent *render = SampleXComponent().GetInstance(id);\n    if (render != nullptr) {\n       OH_DisplaySoloist *nativeDisplaySoloist = nullptr;\n       if (g_displaySync.find(id) == g_displaySync.end()) {\n          // 创建OH_DisplaySoloist实例\n          // true表示OH_DisplaySoloist实例独占一个线程，false则表示共享一个线程\n          g_displaySync[id] = OH_DisplaySoloist_Create(true);\n       }\n       nativeDisplaySoloist = g_displaySync[id];\n       // 设置期望帧率范围\n       // 此结构体成员变量分别为帧率范围的最小值、最大值以及期望帧率\n       DisplaySoloist_ExpectedRateRange range;\n       if (id == \"xcomponentId30\") {\n          // 第一个XComponent期望帧率为30Hz\n          range = {30, 120, 30};\n       }\n       if (id == \"xcomponentId120\") {\n          // 第二个XComponent期望帧率为120Hz\n          range = {30, 120, 120};\n       }\n       OH_DisplaySoloist_SetExpectedFrameRateRange(nativeDisplaySoloist, &range);\n       // 注册回调与使能每帧回调\n       OH_DisplaySoloist_Start(nativeDisplaySoloist, TestCallback, nativeXComponent);\n    }\n    // ...\n}\n\nnapi_value SampleXComponent::NapiUnregister(napi_env env, napi_callback_info info)\n{\n    // ...\n    // 取消注册每帧回调\n    OH_DisplaySoloist_Stop(g_displaySync[id]);; \n    // ...\n}\n\nnapi_value SampleXComponent::NapiDestroy(napi_env env, napi_callback_info info)\n{\n    // ...\n    // 销毁OH_DisplaySoloist实例\n    OH_DisplaySoloist_Destroy(g_displaySync[id]);\n    g_displaySync.erase(id);       \n    // ...\n}\n\n// 实现XComponentContext.ts中ArkTS接口与C++接口的绑定和映射。\nvoid SampleXComponent::Export(napi_env env, napi_value exports) {\n if ((env == nullptr) || (exports == nullptr)) {\n     SAMPLE_LOGE(\"Export: env or exports is null\");\n     return;\n }\n napi_property_descriptor desc[] = {\n     {\"register\", nullptr, SampleXComponent::NapiRegister, nullptr, nullptr, nullptr, napi_default, nullptr},\n     {\"unregister\", nullptr, SampleXComponent::NapiUnregister, nullptr, nullptr, nullptr, napi_default, nullptr},\n     {\"destroy\", nullptr, SampleXComponent::NapiDestroy, nullptr, nullptr, nullptr, napi_default, nullptr}};\n\n napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n if (napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc) != napi_ok) {\n     SAMPLE_LOGE(\"Export: napi_define_properties failed\");\n }\n} TS层注册和取消注册每帧回调，销毁OH_DisplaySoloist实例。 // 离开页面时，取消回调注册与销毁OH_DisplaySoloist实例\naboutToDisappear(): void {\n  if (this.xComponentContext1) {\n    this.xComponentContext1.unregister();\n    this.xComponentContext1.destroy();\n  }\n  if (this.xComponentContext2) {\n    this.xComponentContext2.unregister();\n    this.xComponentContext2.destroy();\n  }\n}\n\nRow() {\n    Button('Start')\n      .id('Start')\n      .fontSize(14)\n      .fontWeight(500)\n      .margin({ bottom: 20, right: 6, left: 6 })\n      .onClick(() => {\n        if (this.xComponentContext1) {\n          this.xComponentContext1.register();\n        }\n        if (this.xComponentContext2) {\n          this.xComponentContext2.register();\n        }\n      })\n      .width('30%')\n      .height(40)\n      .shadow(ShadowStyle.OUTER_DEFAULT_LG)\n    \n    Button('Stop')\n      .id('Stop')\n      .fontSize(14)\n      .fontWeight(500)\n      .margin({ bottom: 20, left: 6 })\n      .onClick(() => {\n        if (this.xComponentContext1) {\n          this.xComponentContext1.unregister();\n        }\n        if (this.xComponentContext2) {\n          this.xComponentContext2.unregister();\n        }\n      })\n      .width('30%')\n      .height(40)\n      .shadow(ShadowStyle.OUTER_DEFAULT_LG)\n} 
