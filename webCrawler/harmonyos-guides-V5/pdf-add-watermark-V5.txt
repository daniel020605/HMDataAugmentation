添加、删除水印
对指定页面添加水印，包括文本水印或图片水印。
 文本水印可以设置字体、大小、旋转，位置等属性。 图片水印可以设置缩放、旋转、透明度和位置等属性。 
接口说明
接口名
描述
addWatermark(info: WatermarkInfo, startIndex: number, endIndex: number, oddPages: boolean, evenPages: boolean): void
插入水印到PDF文档。如果插入的是图片，支持的图片格式参考ImageFormat，文本字符无限制。
removeWatermark(): boolean
删除PDF文档水印。
addWatermark方法属于耗时业务，需要遍历每一页去添加水印，添加页面较多时建议放到线程里去处理。
示例代码
[h2]添加文本水印
 调用loadDocument方法，加载PDF文档。 实例化文本水印TextWatermarkInfo类，并设置相关属性，包括字体、大小、旋转，位置等。 调用addWatermark或removeWatermark，添加或删除文本水印。 保存PDF文档到应用沙箱。 
import { pdfService } from '@kit.PDFKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { font } from '@kit.ArkUI';\n\n@Entry\n@Component\nstruct PdfPage {\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\n  private context = getContext() as common.UIAbilityContext;\n\n  build() {\n    Column() {\n      Button('addTextWatermark').onClick(async () => {\n        // 确保沙箱目录有input.pdf文档\n        let filePath = this.context.filesDir + '/input.pdf';\n        let res = this.pdfDocument.loadDocument(filePath);\n        if (res === pdfService.ParseResult.PARSE_SUCCESS) {\n          let wminfo: pdfService.TextWatermarkInfo = new pdfService.TextWatermarkInfo();\n          wminfo.watermarkType = pdfService.WatermarkType.WATERMARK_TEXT;\n          wminfo.content = 'This is Watermark';\n          wminfo.textSize = 30;\n          wminfo.textColor = 200;\n          wminfo.fontInfo = new pdfService.FontInfo();\n          // 确保字体路径存在\n          wminfo.fontInfo.fontPath = font.getFontByName('HarmonyOS Sans').path;\n          wminfo.opacity = 0.5;\n          wminfo.isOnTop = true;\n          wminfo.rotation = 45;\n          wminfo.scale = 1.5;\n          wminfo.opacity = 0.5;\n          wminfo.verticalAlignment = pdfService.WatermarkAlignment.WATERMARK_ALIGNMENT_TOP;\n          wminfo.horizontalAlignment = pdfService.WatermarkAlignment.WATERMARK_ALIGNMENT_LEFT;\n          wminfo.horizontalSpace = 1.0;\n          wminfo.verticalSpace = 1.0;\n          this.pdfDocument.addWatermark(wminfo, 0, 5, true, true);\n          let outPdfPath = this.context.filesDir + '/testTextWatermark.pdf';\n          let result = this.pdfDocument.saveDocument(outPdfPath);\n          hilog.info(0x0000, 'PdfPage', 'addTextWatermark %{public}s!', result ? 'success' : 'fail');\n        }\n        this.pdfDocument.releaseDocument();\n      })\n      Button('removeTextWatermark').onClick(async () => {\n        let filePath = this.context.filesDir + '/testTextWatermark.pdf';\n        let res = this.pdfDocument.loadDocument(filePath);\n        if (res === pdfService.ParseResult.PARSE_SUCCESS && this.pdfDocument.hasWatermark()) {\n          let removeResult = this.pdfDocument.removeWatermark();\n          if (removeResult) {\n            let outPdfPath = this.context.filesDir + '/removeWatermark.pdf';\n            let result = this.pdfDocument.saveDocument(outPdfPath);\n            hilog.info(0x0000, 'PdfPage', 'removeWatermark %{public}s!', result ? 'success' : 'fail');\n          }\n        }\n        this.pdfDocument.releaseDocument();\n      })\n    }\n  }\n}
[h2]添加图片水印
 调用loadDocument方法加载PDF文档。 实例化图片水印ImageWatermarkInfo类，并设置相关属性，包括缩放、旋转、透明度和位置等。 调用addWatermark或removeWatermark添加或删除图片水印。 保存PDF文档到应用沙箱。 
import { pdfService } from '@kit.PDFKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct PdfPage {\n  private pdfDocument: pdfService.PdfDocument = new pdfService.PdfDocument();\n  private context = getContext() as common.UIAbilityContext;\n\n  build() {\n    Column() {\n      Button('addImageWatermark').onClick(async () => {\n        let filePath = this.context.filesDir + '/input.pdf';\n        let res = this.pdfDocument.loadDocument(filePath);\n        if (res === pdfService.ParseResult.PARSE_SUCCESS) {\n          let wminfo: pdfService.ImageWatermarkInfo = new pdfService.ImageWatermarkInfo();\n          wminfo.watermarkType = pdfService.WatermarkType.WATERMARK_IMAGE;\n          // 确保沙箱目录有img.jpg文档\n          wminfo.imagePath = this.context.filesDir + '/img.jpg';\n          wminfo.opacity = 0.5;\n          wminfo.isOnTop = true;\n          wminfo.rotation = 45;\n          wminfo.scale = 0.5;\n          wminfo.opacity = 0.5;\n          wminfo.verticalAlignment = pdfService.WatermarkAlignment.WATERMARK_ALIGNMENT_TOP;\n          wminfo.horizontalAlignment = pdfService.WatermarkAlignment.WATERMARK_ALIGNMENT_LEFT;\n          wminfo.horizontalSpace = 1.0;\n          wminfo.verticalSpace = 1.0;\n          this.pdfDocument.addWatermark(wminfo, 0, 5, true, true);\n          let outPdfPath = this.context.filesDir + '/testImageWatermark.pdf';\n          let result = this.pdfDocument.saveDocument(outPdfPath);\n          hilog.info(0x0000, 'PdfPage', 'addImageWatermark %{public}s!', result ? 'success' : 'fail');\n        }\n        this.pdfDocument.releaseDocument();\n      })\n      Button('removeImageWatermark').onClick(async () => {\n        let filePath = this.context.filesDir + '/testImageWatermark.pdf';\n        let res = this.pdfDocument.loadDocument(filePath);\n        if (res === pdfService.ParseResult.PARSE_SUCCESS && this.pdfDocument.hasWatermark()) {\n          let removeResult = this.pdfDocument.removeWatermark();\n          if (removeResult) {\n            let outPdfPath = this.context.filesDir + '/removeImageWatermark.pdf';\n            let result = this.pdfDocument.saveDocument(outPdfPath);\n            hilog.info(0x0000, 'PdfPage', 'removeImageWatermark %{public}s!', result ? 'success' : 'fail');\n          }\n        }\n        this.pdfDocument.releaseDocument();\n      })\n    }\n  }\n}
