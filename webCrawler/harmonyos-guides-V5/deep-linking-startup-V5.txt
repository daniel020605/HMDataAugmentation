使用Deep Linking实现应用间跳转
采用Deep Linking进行跳转时，系统会根据接口中传入的uri信息，在本地已安装的应用中寻找到符合条件的应用并进行拉起。当匹配到多个应用时，会拉起应用选择框。
实现原理
Deep Linking基于隐式Want匹配机制中的uri匹配来查询、拉起目标应用。隐式Want的uri匹配规则详见uri匹配规则。
目标应用操作指导
[h2]配置module.json5文件
为了能够支持被其他应用访问，目标应用需要在module.json5配置文件中配置skills标签。
skills标签下默认包含一个skill对象，用于标识应用入口。应用跳转链接不能在该skill对象中配置，需要创建独立的skill对象。如果存在多个跳转场景，需要在skills标签下创建不同的skill对象，否则会导致配置无法生效。
Deep Linking中的scheme取值支持自定义，可以为任意不包含特殊字符、非ohos开头的字符串。通常不为https、http、file，否则会拉起默认的系统浏览器。
配置示例如下：
{\n  \"module\": {\n    // ...\n    \"abilities\": [\n      {\n        // ...\n        \"skills\": [\n          {\n            \"entities\": [\n              \"entity.system.home\"\n            ],\n            \"actions\": [\n              \"action.system.home\"\n            ]\n          },\n          {\n            \"actions\": [\n              // actions不能为空，actions为空会造成目标方匹配失败。\n              \"ohos.want.action.viewData\"\n            ],\n            \"uris\": [\n              {\n                // scheme必选，可以自定义，以link为例，需要替换为实际的scheme\n                \"scheme\": \"link\",\n                // host必选，配置待匹配的域名\n                \"host\": \"www.example.com\"\n              }\n            ]\n          } // 新增一个skill对象，用于跳转场景。如果存在多个跳转场景，需配置多个skill对象。\n        ]\n      }\n    ]\n  }\n}
[h2]获取并解析拉起方传入的应用链接
在目标应用的UIAbility的onCreate()或者onNewWant()生命周期回调中，获取、解析拉起方传入的应用链接。
// 以EntryAbility.ets为例\nimport { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\nimport { url } from '@kit.ArkTS';\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    // 从want中获取传入的链接信息。\n    // 如传入的url为：link://www.example.com/programs?action=showall\n    let uri = want?.uri;\n    if (uri) {\n      // 从链接中解析query参数，拿到参数后，开发者可根据自己的业务需求进行后续的处理。\n      let urlObject = url.URL.parseURL(want?.uri);\n      let action = urlObject.params.get('action');\n      // 例如，当action为showall时，展示所有的节目。\n      if (action === \"showall\") {\n         // ...\n      }\n    }\n  }\n}
拉起方应用实现应用跳转
下面通过三个案例，分别介绍如何使用openLink()与startAbility()接口实现应用跳转，以及如何在Web组件中实现应用跳转。
[h2]使用openLink实现应用跳转
在openLink接口的link字段中传入目标应用的URL信息，并将options字段中的appLinkingOnly配置为false。
示例代码如下：
import { common, OpenLinkOptions } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = '[UIAbilityComponentsOpenLink]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Button('start link', { type: ButtonType.Capsule, stateEffect: true })\n      .width('87%')\n      .height('5%')\n      .margin({ bottom: '12vp' })\n      .onClick(() => {\n        let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n        let link: string = \"link://www.example.com\";\n        let openLinkOptions: OpenLinkOptions = {\n          appLinkingOnly: false\n        };\n\n        try {\n          context.openLink(link, openLinkOptions)\n            .then(() => {\n              hilog.info(DOMAIN_NUMBER, TAG, 'open link success.');\n            }).catch((err: BusinessError) => {\n              hilog.error(DOMAIN_NUMBER, TAG, `open link failed. Code is ${err.code}, message is ${err.message}`);\n            });\n        } catch (paramError) {\n          hilog.error(DOMAIN_NUMBER, TAG, `Failed to start link. Code is ${paramError.code}, message is ${paramError.message}`);\n        }\n      })\n  }\n}
[h2]使用startAbility实现应用跳转
startAbility接口是将应用链接放入want中，通过调用隐式want匹配的方法触发应用跳转。通过startAbility接口启动时，还需要调用方传入待匹配的action和entity。
示例代码如下：
import { common, Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = '[UIAbilityComponentsOpenLink]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\n@Entry\n@Component\nstruct Index {\n  build() {\n    Button('start ability', { type: ButtonType.Capsule, stateEffect: true })\n      .width('87%')\n      .height('5%')\n      .margin({ bottom: '12vp' })\n      .onClick(() => {\n        let context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n        let want: Want = {\n            uri: \"link://www.example.com\"\n        };\n\n        try {\n          context.startAbility(want).then(() => {\n            hilog.info(DOMAIN_NUMBER, TAG, 'start ability success.');\n          }).catch((err: BusinessError) => {\n            hilog.error(DOMAIN_NUMBER, TAG, `start ability failed. Code is ${err.code}, message is ${err.message}`);\n          });\n        } catch (paramError) {\n          hilog.error(DOMAIN_NUMBER, TAG, `Failed to start ability. Code is ${paramError.code}, message is ${paramError.message}`);\n        }\n      })\n  }\n}
[h2]使用Web组件实现应用跳转
Web组件需要跳转DeepLink链接应用时，可通过拦截回调onLoadIntercept中对定义的事件进行处理，实现应用跳转。
示例代码如下：
// index.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { common } from '@kit.AbilityKit';\n\n@Entry\n@Component\nstruct WebComponent {\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Web({ src: $rawfile('index.html'), controller: this.controller })\n        .onLoadIntercept((event) => {\n          const url: string = event.data.getRequestUrl();\n          if (url === 'link://www.example.com') {\n            (getContext() as common.UIAbilityContext).openLink(url)\n              .then(() => {\n                console.log('openLink success');\n              }).catch((err: BusinessError) => {\n                console.error('openLink failed, err:' + JSON.stringify(err));\n              });\n            return true;\n          }\n          // 返回true表示阻止此次加载，否则允许此次加载\n          return false;\n        })\n    }\n  }\n}
前端页面代码：
// index.html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n</head>\n<body>\n<h1>Hello World</h1>\n<!--方式一、通过绑定事件window.open方法实现跳转-->\n<button class=\"doOpenLink\" onclick=\"doOpenLink()\">跳转其他应用一</button>\n<!--方式二、通过超链接实现跳转-->\n<a href=\"link://www.example.com\">跳转其他应用二</a>\n</body>\n</html>\n<script>\n    function doOpenLink() {\n        window.open(\"link://www.example.com\")\n    }\n</script>
