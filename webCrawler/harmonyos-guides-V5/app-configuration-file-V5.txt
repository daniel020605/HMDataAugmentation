app.json5配置文件
配置文件示例
先通过一个示例，整体认识一下app.json5配置文件。
{\n  \"app\": {\n    \"bundleName\": \"com.application.myapplication\",\n    \"vendor\": \"example\",\n    \"versionCode\": 1000000,\n    \"versionName\": \"1.0.0\",\n    \"icon\": \"$media:layered-image\",\n    \"label\": \"$string:app_name\",\n    \"description\": \"$string:description_application\",\n    \"minAPIVersion\": 9,\n    \"targetAPIVersion\": 9,\n    \"apiReleaseType\": \"Release\",\n    \"debug\": false,\n    \"car\": {\n      \"minAPIVersion\": 8\n    },\n    \"targetBundleName\": \"com.application.test\",\n    \"targetPriority\": 50,\n    \"appEnvironments\": [\n      {\n        \"name\":\"name1\",\n        \"value\": \"value1\"\n      }\n    ],\n    \"maxChildProcess\": 5,\n    \"multiAppMode\": {\n      \"multiAppModeType\": \"multiInstance\",\n      \"maxCount\": 5\n    },\n    \"cloudFileSyncEnabled\": false,\n    \"configuration\": \"$profile:configuration\"\n  },\n}
配置文件标签
app.json5配置文件包含以下标签。
表1 app.json5配置文件标签说明
标识应用的Bundle名称，用于标识应用的唯一性。命名规则如下 ：
- 由字母、数字、下划线和符号“.”组成，且必须以字母开头。
- 字符串最小长度为7字节，最大长度128字节。
- 推荐采用反域名形式命名（如“com.example.demo”，建议第一级为域名后缀com，第二级为厂商/个人名，第三级为应用名，也可以多级）。
对于随系统源码编译的应用，建议命名为“com.ohos.demo”形式，其中的ohos标识系统应用。
标识应用的Bundle类型，用于区分应用或者元服务。支持的取值如下：
- app：当前Bundle为应用。
- atomicService：当前Bundle为元服务。
- shared：当前Bundle为共享库应用，预留字段。
- appService：当前Bundle为系统级共享库应用，仅供系统应用使用。
标识应用是否可调试。
- true：可调试，一般用于开发阶段。
- false：不可调试，一般用于发布阶段。
标识应用的版本号，取值为小于2^31次方的正整数。此数字仅用于确定某个版本是否比另一个版本更新，数值越大表示版本越高。
开发者可以将该值设置为任何正整数，但是必须确保应用的新版本都使用比旧版本更大的值。
标识向用户展示的应用版本号。
取值为长度不超过127字节的字符串，仅由数字和点构成，推荐采用“A.B.C.D”四段式的形式。四段式推荐的含义如下所示。
第一段：主版本号/Major，范围0~99，重大修改的版本，如实现新的大功能或重大变化。
第二段：次版本号/Minor，范围0~99，表示实现较突出的特点，如新功能添加或大问题修复。
第三段：特性版本号/Feature，范围0~99，标识规划的新版本特性。
第四段：修订版本号/Patch，范围0~999，表示维护版本，如修复bug。
标识应用运行需要的API目标版本的类型，采用字符串类型表示。取值为“CanaryN”、“BetaN”或者“Release”，其中，N代表大于零的整数。
- Canary：受限发布的版本。
- Beta：公开发布的Beta版本。
- Release：公开发布的正式版本。
标识当前工程是否支持多个工程的联合开发。
- true：当前工程支持多个工程的联合开发。多工程开发可参考多工程构建。
- false：当前工程不支持多个工程的联合开发。
标识应用程序是否开启asan检测，用于辅助定位buffer越界造成的crash问题。
- true：当前工程开启asan检测。
- false：当前工程不开启asan检测。
标识对tablet设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。
如果使用该属性对tablet设备做了特殊配置，则应用在tablet设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。
标识对tv设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。
如果使用该属性对tv设备做了特殊配置，则应用在tv设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。
标识对wearable设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。
如果使用该属性对wearable设备做了特殊配置，则应用在wearable设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。
标识对car设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。
如果使用该属性对car设备做了特殊配置，则应用在car设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。
标识对default设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。
如果使用该属性对default设备做了特殊配置，则应用在default设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。
标识当前应用的所有HAP和HSP是否由打包工具生成哈希值。
该字段配置为true时，该应用下的所有HAP和HSP都会由打包工具生成对应的哈希值。系统OTA升级时，若应用的versionCode保持不变，可根据哈希值判断应用是否需要升级。
说明：
该字段仅对预置应用生效。
标识应用程序是否开启GWP-asan堆内存检测工具，用于对内存越界、内存释放后使用等内存破坏问题进行分析。
- true：当前工程开启GWP-asan检测。
- false：当前工程不开启GWP-asan检测。
标识当前应用是否启用端云文件同步能力。
- true：当前应用启用端云文件同步能力。
- false：当前应用不启用端云文件同步能力。
标识当前应用字体大小跟随系统配置的能力。
该标签是一个profile文件资源，用于指定描述应用字体大小跟随系统变更的配置文件。
icon标签
此标签标识应用的图标和对分层图标配置文件的索引。
支持分层图标的配置，具体方式如下：
 将图标的前景资源和背景资源放在AppScope/resources/base/media目录下。 在上述media目录下创建一个json文件（例如：layered-image.json），在文件中引用前景资源和背景资源，详见图标资源规范。 
分层图标资源文件示例：
{\n  \"layered-image\"：\n    {\n      \"background\":\"$media:background\", //背景资源\n      \"foreground\":\"$media:foreground\" //前景资源 \n    }    \n}
icon标签示例：
{\n  \"app\":{\n    \"icon\":\"$media:layered-image\"\n  }\n}
appEnvironments标签
此标签标识应用配置的环境变量。应用运行时有时会依赖一些三方库，这些三方库会使用到一些自定义的环境变量，为了不修改三方库的实现逻辑，可以在工程的配置文件中设置自定义的环境变量，以供运行时期使用。
表2 appEnvironments标签说明
appEnvironments标签示例：
{\n  \"app\": {\n    \"appEnvironments\": [\n      {\n        \"name\":\"name1\",\n        \"value\": \"value1\"\n      }\n    ]\n  }\n}
multiAppMode标签
应用多开模式。
表3 multiAppMode标签说明
标识应用多开模式类型，支持的取值如下：
- multiInstance：多实例模式。该字段仅支持2in1设备。
- appClone：应用分身模式。
标识最大允许的应用多开个数，支持的取值如下：
- multiInstance模式：取值范围1~10。
- appClone模式：取值范围1~5。
multiAppMode标签示例：
{\n  \"app\": {\n    \"multiAppMode\": {\n      \"multiAppModeType\": \"appClone\",\n      \"maxCount\": 5\n    }\n  }\n}
configuration标签
该标签是一个profile文件资源，用于指定描述应用字体大小跟随系统变更的配置文件。
configuration标签示例：
{\n  \"app\": {\n    \"configuration\": \"$profile:configuration\"  \n  }\n}
在开发视图的AppScope/resources/base/profile下面定义配置文件configuration.json，其中文件名\"configuration\"可自定义，需要和configuration标签指定的信息对应。配置文件中列举了当前应用字体大小跟随系统变化的属性。
表4 configuration标签说明
应用字体大小是否跟随系统，支持的取值如下：
- followSystem：跟随系统。
- nonFollowSystem：不跟随系统。
应用字体大小选择跟随系统后，配置的最大比例，支持的取值：1、1.15、1.3、1.45、1.75、2、3.2。
fontSizeScale为nonFollowSystem时，该项不生效。
configuration标签示例：
{\n  \"configuration\": {\n    \"fontSizeScale\": \"followSystem\",\n    \"fontSizeMaxScale\": \"3.2\"\n  }\n}
