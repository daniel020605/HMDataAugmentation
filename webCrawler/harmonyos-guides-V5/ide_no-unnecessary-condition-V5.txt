@typescript-eslint/no-unnecessary-condition
不允许使用类型始终为真或始终为假的表达式作为判断条件。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unnecessary-condition\": \"error\"\n  }\n}
选项
详情请参考@typescript-eslint/no-unnecessary-condition选项。
正例
const index = 0;\nexport function head(items: readonly string[]): string {\n  // Necessary, since items.length might be 0\n  if (items.length) {\n    return items[index].toUpperCase();\n  } else {\n    return '';\n  }\n}\n\nexport function foo(arg: string): void {\n  // Necessary, since foo might be ''.\n  if (arg) {\n  }\n}\n\nexport function bar(arg?: string | null) {\n  // Necessary, since arg might be nullish\n  return arg?.length;\n}
反例
const index = 0;\nexport function head(items: readonly string[]) {\n  // items can never be nullable, so this is unnecessary\n  if (items) {\n    return items[index].toUpperCase();\n  } else {\n    return '';\n  }\n}\n\nexport function foo(arg: 'bar' | 'baz') {\n  // arg is never nullable or empty string, so this is unnecessary\n  if (arg) {\n  }\n}\n\nexport function bar(arg: string) {\n  // arg can never be nullish, so ?. is unnecessary\n  return arg?.length;\n}
规则集
plugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
