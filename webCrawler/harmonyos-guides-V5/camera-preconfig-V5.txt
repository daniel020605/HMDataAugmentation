使用相机预配置(ArkTS)
相机预配置（Preconfig），对常用的场景和分辨率进行了预配置集成，可简化开发相机应用流程，提高应用的开发效率。
开发者在开发相机应用时，在获取到CameraDevice之后，如果遵循通用流程开发，步骤较为繁琐。需要先调用CameraManager的getSupportedOutputCapability来查询当前相机在指定模式下所支持的各类输出的配置信息，拿到CameraOutputCapability之后，应用开发者还需要对里面的各类数据进行解析，筛选，找到自己需要的配置数据Profile以及VideoProfile。最后使用对应的Profile以及VideoProfile创建对应的PreviewOutput、PhotoOutput以及VideoOutput。
为了解决上述问题，优化应用开发流程，系统针对拍照（PhotoSession）、录像（VideoSession）两类场景，提供了preconfig接口帮助开发者快速完成相机参数配置。推荐仅需要自定义拍照界面的无需开发专业相机应用的开发者，使用相机预配置功能快速开发应用。
以拍照（PhotoSession）为例，与遵循通用流程开发，有以下差异：
其他相关能力：
CameraPicker：无需开发相机功能，拉起系统相机获取照片或视频。调用全量相机接口开发：可开发自定义界面、分辨率、图像效果的专业相机应用。
规格说明
系统提供了4种预配置类型（PreconfigType），分别为PRECONFIG_720P、PRECONFIG_1080P、PRECONFIG_4K、PRECONFIG_HIGH_QUALITY。以及3种画幅比例规格（PreconfigRatio），1:1画幅（PRECONFIG_RATIO_1_1）、4:3画幅（PRECONFIG_RATIO_4_3）、16:9画幅（PRECONFIG_RATIO_16_9）。
由于不同的设备所支持的能力不同。使用相机预配置（preconfig）功能时，需要先调用canPreconfig检查对应的PreconfigType和PreconfigRatio的组合在当前设备上是否支持。
在不同的画幅比例下，其分辨率规格不同，详见下表。
普通拍照模式下的预览输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  1080x1080  1440x1080  1920x1080   PRECONFIG_HIGH_QUALITY  1440x1440  1920x1440  2560x1440     普通拍照模式下的拍照输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  2160x2160  2880x2160  3840x2160   PRECONFIG_HIGH_QUALITY  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力     普通录像模式下的预览输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  1080x1080  1440x1080  1920x1080   PRECONFIG_HIGH_QUALITY  1080x1080  1440x1080  1920x1080     普通录像模式下的录像输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  720x720  960x720  1280x720   PRECONFIG_1080P  1080x1080  1440x1080  1920x1080   PRECONFIG_4K  2160x2160  2880x2160  3840x2160   PRECONFIG_HIGH_QUALITY  2160x2160  2880x2160  3840x2160     普通录像模式下的拍照输出 预配置类型PreconfigType  PRECONFIG_RATIO_1_1  PRECONFIG_RATIO_4_3  PRECONFIG_RATIO_16_9    PRECONFIG_720P  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力   PRECONFIG_1080P  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力   PRECONFIG_4K  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力   PRECONFIG_HIGH_QUALITY  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力  跟随Sensor（镜头）最大能力     
开发步骤
详细的API说明请参考Camera API参考。
导入相关接口。 import { camera } from '@kit.CameraKit';\nimport { BusinessError } from '@kit.BasicServicesKit'; 创建输出流Output。 此处以创建预览流和拍照流为例。 创建预览输出流时，涉及参数surfaceId。XComponent组件为预览流提供Surface（获取surfaceId请参考getXcomponentSurfaceId方法），而XComponent的能力由UI提供，相关介绍可参考XComponent组件参考。// 创建预览输出流\nlet previewOutput: camera.PreviewOutput | undefined = undefined;\ntry {\n  previewOutput = cameraManager.createPreviewOutput(surfaceId);\n} catch (error) {\n  let err = error as BusinessError;\n  console.error(`Failed to create the PreviewOutput instance. error code: ${err.code}`);\n}\nif (previewOutput === undefined) {\n  return;\n}\n\n// 创建拍照输出流\nlet photoOutput: camera.PhotoOutput | undefined = undefined;\ntry {\n  photoOutput = cameraManager.createPhotoOutput();\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to createPhotoOutput errorCode = ' + err.code);\n}\nif (photoOutput === undefined) {\n  return;\n}  调用CameraManager类中的createCameraInput方法，创建输入流Input。 let cameraInput: camera.CameraInput | undefined = undefined;\ntry {\n  cameraInput = cameraManager.createCameraInput(cameraArray[0]);\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to createCameraInput errorCode = ' + err.code);\n}\nif (cameraInput === undefined) {\n  return;\n}\n// 打开相机\nawait cameraInput.open(); 调用createSession创建会话（Session）。  SceneMode需要指定为NORMAL_PHOTO或NORMAL_VIDEO，对应拍照场景PhotoSession和录像场景VideoSession。  //创建会话\nlet photoSession: camera.PhotoSession | undefined = undefined;\ntry {\n  photoSession = cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO) as camera.PhotoSession;\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to create the session instance. errorCode = ' + err.code);\n}\nif (photoSession === undefined) {\n  return;\n} 调用canPreconfig检查对应的PreconfigType和PreconfigRatio的组合在当前设备上是否支持。确认支持后，调用preconfig启用Preconfig配置。// 查询Preconfig能力\ntry {\n  let isPreconfigSupport = photoSession.canPreconfig(camera.PreconfigType.PRECONFIG_1080P);\n  if (!isPreconfigSupport) {\n    console.error('PhotoSession canPreconfig check fail.');\n    return;\n  }\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to call canPreconfig. errorCode = ' + err.code);\n  return;\n}\n\n// 配置Preconfig\ntry {\n  photoSession.preconfig(camera.PreconfigType.PRECONFIG_1080P);\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to call preconfig. errorCode = ' + err.code);\n  return;\n}  Session添加Input和Output。  Session调用preconfig接口成功之后，Session内部会将预置数据准备好，如果向Session中进行添加未配置Profile的Output，Session则会对相应的Output进行配置对应Profile。如果向Session中添加已配置Profile的Output，则Session的预配置数据不生效。  // 开始配置会话\ntry {\n  photoSession.beginConfig();\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to beginConfig. errorCode = ' + err.code);\n}\n\n// 向会话中添加相机输入流\ntry {\n  photoSession.addInput(cameraInput);\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to addInput. errorCode = ' + err.code);\n}\n\n// 向会话中添加预览输出流\ntry {\n  photoSession.addOutput(previewOutput);\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to addOutput(previewOutput). errorCode = ' + err.code);\n}\n\n// 向会话中添加拍照输出流\ntry {\n  photoSession.addOutput(photoOutput);\n} catch (error) {\n  let err = error as BusinessError;\n  console.error('Failed to addOutput(photoOutput). errorCode = ' + err.code);\n}\n\n// 提交会话配置\nawait photoSession.commitConfig(); 启动Session。 // 启动会话\nawait photoSession.start().then(() => {\n  console.info('Promise returned to indicate the session start success.');\n}); 
完整示例
Context获取方式请参考：获取UIAbility的上下文信息。
import { camera } from '@kit.CameraKit';\nimport { image } from '@kit.ImageKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { common } from '@kit.AbilityKit';\nimport { fileIo as fs } from '@kit.CoreFileKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\n\nlet context = getContext(this);\n\nasync function savePicture(buffer: ArrayBuffer, img: image.Image): Promise<void> {\n  let accessHelper: photoAccessHelper.PhotoAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n  let options: photoAccessHelper.CreateOptions = {\n    title: Date.now().toString()\n  };\n  let photoUri: string = await accessHelper.createAsset(photoAccessHelper.PhotoType.IMAGE, 'jpg', options);\n  let file: fs.File = fs.openSync(photoUri, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\n  await fs.write(file.fd, buffer);\n  fs.closeSync(file);\n  img.release();\n}\n\nfunction setPhotoOutputCb(photoOutput: camera.PhotoOutput): void {\n  //设置回调之后，调用photoOutput的capture方法，就会将拍照的buffer回传到回调中\n  photoOutput.on('photoAvailable', (errCode: BusinessError, photo: camera.Photo): void => {\n    console.info('getPhoto start');\n    console.info(`err: ${JSON.stringify(errCode)}`);\n    if (errCode || photo === undefined) {\n      console.error('getPhoto failed');\n      return;\n    }\n    let imageObj = photo.main;\n    imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n      console.info('getComponent start');\n      if (errCode || component === undefined) {\n        console.error('getComponent failed');\n        return;\n      }\n      let buffer: ArrayBuffer;\n      if (component.byteBuffer) {\n        buffer = component.byteBuffer;\n      } else {\n        console.error('byteBuffer is null');\n        return;\n      }\n      savePicture(buffer, imageObj);\n    });\n  });\n}\n\nasync function cameraShootingCase(baseContext: common.BaseContext, surfaceId: string): Promise<void> {\n  // 创建CameraManager对象\n  let cameraManager: camera.CameraManager = camera.getCameraManager(baseContext);\n  if (!cameraManager) {\n    console.error(\"camera.getCameraManager error\");\n    return;\n  }\n  // 监听相机状态变化\n  cameraManager.on('cameraStatus', (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      console.error('cameraStatus with errorCode = ' + err.code);\n      return;\n    }\n    console.info(`camera : ${cameraStatusInfo.camera.cameraId}`);\n    console.info(`status: ${cameraStatusInfo.status}`);\n  });\n\n  // 获取相机列表\n  let cameraArray: Array<camera.CameraDevice> = cameraManager.getSupportedCameras();\n  if (cameraArray.length <= 0) {\n    console.error(\"cameraManager.getSupportedCameras error\");\n    return;\n  }\n\n  for (let index = 0; index < cameraArray.length; index++) {\n    console.info('cameraId : ' + cameraArray[index].cameraId); // 获取相机ID\n    console.info('cameraPosition : ' + cameraArray[index].cameraPosition); // 获取相机位置\n    console.info('cameraType : ' + cameraArray[index].cameraType); // 获取相机类型\n    console.info('connectionType : ' + cameraArray[index].connectionType); // 获取相机连接类型\n  }\n\n  // 创建相机输入流\n  let cameraInput: camera.CameraInput | undefined = undefined;\n  try {\n    cameraInput = cameraManager.createCameraInput(cameraArray[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to createCameraInput errorCode = ' + err.code);\n  }\n  if (cameraInput === undefined) {\n    return;\n  }\n\n  // 监听cameraInput错误信息\n  let cameraDevice: camera.CameraDevice = cameraArray[0];\n  cameraInput.on('error', cameraDevice, (error: BusinessError) => {\n    console.error(`Camera input error code: ${error.code}`);\n  })\n\n  // 打开相机\n  await cameraInput.open();\n\n  // 获取支持的模式类型\n  let sceneModes: Array<camera.SceneMode> = cameraManager.getSupportedSceneModes(cameraArray[0]);\n  let isSupportPhotoMode: boolean = sceneModes.indexOf(camera.SceneMode.NORMAL_PHOTO) >= 0;\n  if (!isSupportPhotoMode) {\n    console.error('photo mode not support');\n    return;\n  }\n\n  //创建会话\n  let photoSession: camera.PhotoSession | undefined = undefined;\n  try {\n    photoSession = cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO) as camera.PhotoSession;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to create the session instance. errorCode = ' + err.code);\n  }\n  if (photoSession === undefined) {\n    return;\n  }\n\n  // 监听session错误信息\n  photoSession.on('error', (error: BusinessError) => {\n    console.error(`Capture session error code: ${error.code}`);\n  });\n\n  // 查询Preconfig能力\n  try {\n    let isPreconfigSupport = photoSession.canPreconfig(camera.PreconfigType.PRECONFIG_1080P);\n    if (!isPreconfigSupport) {\n      console.error('PhotoSession canPreconfig check fail.');\n      return;\n    }\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to call canPreconfig. errorCode = ' + err.code);\n    return;\n  }\n\n  // 配置Preconfig\n  try {\n    photoSession.preconfig(camera.PreconfigType.PRECONFIG_1080P);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to call preconfig. errorCode = ' + err.code);\n    return;\n  }\n\n  // 创建预览输出流,其中参数 surfaceId 参考上文 XComponent 组件，预览流为XComponent组件提供的surface\n  let previewOutput: camera.PreviewOutput | undefined = undefined;\n  try {\n    previewOutput = cameraManager.createPreviewOutput(surfaceId);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to create the PreviewOutput instance. error code: ${err.code}`);\n  }\n  if (previewOutput === undefined) {\n    return;\n  }\n  // 监听预览输出错误信息\n  previewOutput.on('error', (error: BusinessError) => {\n    console.error(`Preview output error code: ${error.code}`);\n  });\n\n  // 创建拍照输出流\n  let photoOutput: camera.PhotoOutput | undefined = undefined;\n  try {\n    photoOutput = cameraManager.createPhotoOutput();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to createPhotoOutput errorCode = ' + err.code);\n  }\n  if (photoOutput === undefined) {\n    return;\n  }\n\n  //调用上面的回调函数来保存图片\n  setPhotoOutputCb(photoOutput);\n\n  // 开始配置会话\n  try {\n    photoSession.beginConfig();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to beginConfig. errorCode = ' + err.code);\n  }\n\n  // 向会话中添加相机输入流\n  try {\n    photoSession.addInput(cameraInput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to addInput. errorCode = ' + err.code);\n  }\n\n  // 向会话中添加预览输出流\n  try {\n    photoSession.addOutput(previewOutput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to addOutput(previewOutput). errorCode = ' + err.code);\n  }\n\n  // 向会话中添加拍照输出流\n  try {\n    photoSession.addOutput(photoOutput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to addOutput(photoOutput). errorCode = ' + err.code);\n  }\n\n  // 提交会话配置\n  await photoSession.commitConfig();\n\n  // 启动会话\n  await photoSession.start().then(() => {\n    console.info('Promise returned to indicate the session start success.');\n  });\n  // 判断设备是否支持闪光灯\n  let flashStatus: boolean = false;\n  try {\n    flashStatus = photoSession.hasFlash();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to hasFlash. errorCode = ' + err.code);\n  }\n  console.info('Returned with the flash light support status:' + flashStatus);\n\n  if (flashStatus) {\n    // 判断是否支持自动闪光灯模式\n    let flashModeStatus: boolean = false;\n    try {\n      let status: boolean = photoSession.isFlashModeSupported(camera.FlashMode.FLASH_MODE_AUTO);\n      flashModeStatus = status;\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error('Failed to check whether the flash mode is supported. errorCode = ' + err.code);\n    }\n    if(flashModeStatus) {\n      // 设置自动闪光灯模式\n      try {\n        photoSession.setFlashMode(camera.FlashMode.FLASH_MODE_AUTO);\n      } catch (error) {\n        let err = error as BusinessError;\n        console.error('Failed to set the flash mode. errorCode = ' + err.code);\n      }\n    }\n  }\n\n  // 判断是否支持连续自动变焦模式\n  let focusModeStatus: boolean = false;\n  try {\n    let status: boolean = photoSession.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n    focusModeStatus = status;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to check whether the focus mode is supported. errorCode = ' + err.code);\n  }\n\n  if (focusModeStatus) {\n    // 设置连续自动变焦模式\n    try {\n      photoSession.setFocusMode(camera.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error('Failed to set the focus mode. errorCode = ' + err.code);\n    }\n  }\n\n  // 获取相机支持的可变焦距比范围\n  let zoomRatioRange: Array<number> = [];\n  try {\n    zoomRatioRange = photoSession.getZoomRatioRange();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to get the zoom ratio range. errorCode = ' + err.code);\n  }\n  if (zoomRatioRange.length <= 0) {\n    return;\n  }\n  // 设置可变焦距比\n  try {\n    photoSession.setZoomRatio(zoomRatioRange[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to set the zoom ratio value. errorCode = ' + err.code);\n  }\n  let photoCaptureSetting: camera.PhotoCaptureSetting = {\n    quality: camera.QualityLevel.QUALITY_LEVEL_HIGH, // 设置图片质量高\n    rotation: camera.ImageRotation.ROTATION_0 // 设置图片旋转角度0\n  }\n  // 使用当前拍照设置进行拍照\n  photoOutput.capture(photoCaptureSetting, (err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to capture the photo ${err.message}`);\n      return;\n    }\n    console.info('Callback invoked to indicate the photo capture request success.');\n  });\n\n  // 需要在拍照结束之后调用以下关闭摄像头和释放会话流程，避免拍照未结束就将会话释放。\n  // 停止当前会话\n  await photoSession.stop();\n\n  // 释放相机输入流\n  await cameraInput.close();\n\n  // 释放预览输出流\n  await previewOutput.release();\n\n  // 释放拍照输出流\n  await photoOutput.release();\n\n  // 释放会话\n  await photoSession.release();\n\n  // 会话置空\n  photoSession = undefined;\n}
