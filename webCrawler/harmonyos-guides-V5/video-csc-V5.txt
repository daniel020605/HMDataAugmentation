视频色彩空间转换
开发者可以调用本模块提供的C API接口，实现HDR2SDR、HDR2HDR、SDR2SDR的色彩空间转换。
该能力常用于视频编辑和视频分享中：
视频编辑 视频分享  
规格说明
支持的转换规格：
视频色彩空间转换算法为SDR2SDR： 输入ColorSpace  OH_COLORSPACE_BT601_EBU_LIMIT  OH_COLORSPACE_BT601_SMPTE_C_LIMIT   输入MetadataType  -1  -1   输入pixelFormat  NATIVEBUFFER_PIXEL_FMT_YCBCR_420_SP, NATIVEBUFFER_PIXEL_FMT_YCRCB_420_SP, NATIVEBUFFER_PIXEL_FMT_RGBA_8888  NATIVEBUFFER_PIXEL_FMT_YCBCR_420_SP, NATIVEBUFFER_PIXEL_FMT_YCRCB_420_SP, NATIVEBUFFER_PIXEL_FMT_RGBA_8888   输出ColorSpace  OH_COLORSPACE_BT709_LIMIT  OH_COLORSPACE_BT709_LIMIT   输出MetadataType  -1  -1   输出pixelFormat  NATIVEBUFFER_PIXEL_FMT_YCBCR_420_SP, NATIVEBUFFER_PIXEL_FMT_YCRCB_420_SP, NATIVEBUFFER_PIXEL_FMT_RGBA_8888  NATIVEBUFFER_PIXEL_FMT_YCBCR_420_SP, NATIVEBUFFER_PIXEL_FMT_YCRCB_420_SP, NATIVEBUFFER_PIXEL_FMT_RGBA_8888     视频色彩空间转换算法为HDR2SDR： 输入ColorSpace  OH_COLORSPACE_BT2020_PQ_LIMIT  OH_COLORSPACE_BT2020_HLG_LIMIT   输入MetadataType  OH_VIDEO_HDR_VIVID  OH_VIDEO_HDR_VIVID   输入pixelFormat  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102   输出ColorSpace  OH_COLORSPACE_BT709_LIMIT  OH_COLORSPACE_BT709_LIMIT   输出MetadataType  -1  -1   输出pixelFormat  NATIVEBUFFER_PIXEL_FMT_YCBCR_420_SP, NATIVEBUFFER_PIXEL_FMT_YCRCB_420_SP, NATIVEBUFFER_PIXEL_FMT_RGBA_8888  NATIVEBUFFER_PIXEL_FMT_YCBCR_420_SP, NATIVEBUFFER_PIXEL_FMT_YCRCB_420_SP, NATIVEBUFFER_PIXEL_FMT_RGBA_8888     视频色彩空间转换算法为HDR2HDR： 输入ColorSpace  OH_COLORSPACE_BT2020_PQ_LIMIT  OH_COLORSPACE_BT2020_PQ_LIMIT  OH_COLORSPACE_BT2020_PQ_LIMIT  OH_COLORSPACE_BT2020_HLG_LIMIT   输入MetadataType  OH_VIDEO_HDR_VIVID  OH_VIDEO_HDR_HDR10  OH_VIDEO_HDR_VIVID  OH_VIDEO_HDR_VIVID   输入pixelFormat  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102   输出ColorSpace  OH_COLORSPACE_BT2020_HLG_LIMIT  OH_COLORSPACE_BT2020_HLG_LIMIT  OH_COLORSPACE_BT2020_HLG_LIMIT  OH_COLORSPACE_BT2020_PQ_LIMIT   输出MetadataType  OH_VIDEO_HDR_VIVID  OH_VIDEO_HDR_HLG  OH_VIDEO_HDR_HLG  OH_VIDEO_HDR_VIVID   输出pixelFormat  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102  NATIVEBUFFER_PIXEL_FMT_YCBCR_P010, NATIVEBUFFER_PIXEL_FMT_YCRCB_P010, NATIVEBUFFER_PIXEL_FMT_RGBA_1010102     
支持的分辨率规格：
最小分辨率（单位：像素）
最大分辨率（单位：像素）
32*32
8192*8192
约束与限制
不支持在转换过程中切换分辨率。不支持在转换过程中修改色彩空间（ColorSpace）、像素格式（pixelFormat）。不允许在视频处理回调函数中，直接调用视频处理相关接口或其他耗时操作，请在应用自己的线程中调用。
开发指导
[h2]在 CMake 脚本中链接动态库
target_link_libraries(sample PUBLIC libvideo_processing.so)
[h2]开发步骤
添加头文件。#include <multimedia/video_processing_engine/video_processing.h>\n#include <multimedia/video_processing_engine/video_processing_types.h>\n#include <native_window/external_window.h>\n#include <native_buffer/native_buffer.h>\n#include <ace/xcomponent/native_interface_xcomponent.h> （可选）初始化环境。一般在进程内第一次使用时调用，可提前完成部分耗时操作。OH_VideoProcessing_InitializeEnvironment();  （可选）查询能力支持。建议在使用对应能力前调用。//输入输出格式\nVideoProcessing_ColorSpaceInfo inputFormat;\nVideoProcessing_ColorSpaceInfo outputFormat;\ninputFormat.metadataType = OH_VIDEO_HDR_HDR10;\ninputFormat.colorSpace = OH_COLORSPACE_BT2020_PQ_LIMIT;\ninputFormat.pixelFormat = NATIVEBUFFER_PIXEL_FMT_YCBCR_P010;\noutputFormat.metadataType = OH_VIDEO_HDR_HLG;\noutputFormat.colorSpace = OH_COLORSPACE_BT2020_HLG_LIMIT;\noutputFormat.pixelFormat = NATIVEBUFFER_PIXEL_FMT_YCBCR_P010;\n\n//能力查询\nbool isSupport = OH_VideoProcessing_IsColorSpaceConversionSupported(&inputFormat, &outputFormat); 创建色彩空间转换模块。应用可以通过视频处理引擎模块类型来创建色彩空间转换模块。示例中的变量说明如下： videoProcessor：色彩空间转换模块实例。VIDEO_PROCESSING_TYPE_COLOR_SPACE_CONVERSION：色彩空间转换类型。预期返回值：VIDEO_PROCESSING_SUCCESS // 通过指定视频处理引擎类型创建色彩空间转换模块实例\nOH_VideoProcessing* videoProcessor = nullptr;\nVideoProcessing_ErrorCode ret = OH_VideoProcessing_Create(&videoProcessor, VIDEO_PROCESSING_TYPE_COLOR_SPACE_CONVERSION); 配置异步回调函数。// 回调函数声明（其中userData会传递注册回调时传入的用户数据，如：this指针）\nvoid OnError(OH_VideoProcessing* videoProcessor, VideoProcessing_ErrorCode error, void* userData);\nvoid OnState(OH_VideoProcessing* videoProcessor, VideoProcessing_State state, void* userData);\nvoid OnNewOutputBuffer(OH_VideoProcessing* videoProcessor, uint32_t index, void* userData);\n\n// 创建回调实例\nVideoProcessing_Callback* callback = nullptr;\nret = OH_VideoProcessingCallback_Create(&callback);\n// 绑定回调函数\nOH_VideoProcessingCallback_BindOnError(callback, OnError);\nOH_VideoProcessingCallback_BindOnState(callback, OnState);\nOH_VideoProcessingCallback_BindOnNewOutputBuffer(callback, OnNewOutputBuffer);\n// 注册回调函数\nret = OH_VideoProcessing_RegisterCallback(videoProcessor, callback, this); 获取Surface。//获取输入surface\nOHNativeWindow *inWindow = nullptr;\nret = OH_VideoProcessing_GetSurface(videoProcessor, &inWindow); 设置Surface。 可以通过XComponent等其他方式获取OHNativeWindow实例，具体参见NativeWindows开发指导。 视频处理引擎的SetSurface的windowOut从xcomponent的OnSurfaceCreatedCB回调函数获取，需要对windowOut设置元数据类型、数据格式和颜色空间等参数。  // 设置元数据类型、数据格式、颜色空间\nuint8_t metadataType = OH_VIDEO_HDR_HLG;\nOH_NativeWindow_SetMetadataValue(windowOut, OH_HDR_METADATA_TYPE, sizeof(uint8_t), &metadataType);\nOH_NativeBuffer_Format format = NATIVEBUFFER_PIXEL_FMT_YCBCR_P010;\nOH_NativeWindow_NativeWindowHandleOpt(windowOut, SET_FORMAT, format);\nOH_NativeBuffer_ColorSpace colorSpace = OH_COLORSPACE_BT2020_HLG_LIMIT;\nOH_NativeWindow_SetColorSpace(windowOut, colorSpace);\n// 设置输出surface\nVideoProcessing_ErrorCode ret = OH_VideoProcessing_SetSurface(videoProcessor, windowOut); 调用OH_VideoProcessing_Start()启动色彩空间转换处理。// 开始色彩空间转换处理\nret = OH_VideoProcessing_Start(videoProcessor); 调用OH_VideoProcessing_Stop()停止色彩空间转换处理。//停止色彩空间转换处理\nret = OH_VideoProcessing_Stop(videoProcessor); 释放处理实例。//停止色彩空间转换处理\nOH_VideoProcessingCallback_Destroy(callback);\nOH_VideoProcessing_Destroy(videoProcessor); 释放处理资源。OH_VideoProcessing_DeinitializeEnvironment(); 
