管理全局音频输出设备
有时设备同时连接多个音频输出设备，需要指定音频输出设备进行音频播放，此时需要使用AudioRoutingManager接口进行输出设备的管理，API说明可以参考AudioRoutingManager API文档。
创建AudioRoutingManager实例
在使用AudioRoutingManager管理音频设备前，需要先导入模块并创建实例。
import { audio } from '@kit.AudioKit';  // 导入audio模块\n\nlet audioManager = audio.getAudioManager();  // 需要先创建AudioManager实例\n\nlet audioRoutingManager = audioManager.getRoutingManager();  // 再调用AudioManager的方法创建AudioRoutingManager实例
支持的音频输出设备类型
目前支持的音频输出设备见下表：
获取输出设备信息
使用getDevices()方法可以获取当前所有输出设备的信息。
import { audio } from '@kit.AudioKit';\n\naudioRoutingManager.getDevices(audio.DeviceFlag.OUTPUT_DEVICES_FLAG).then((data: audio.AudioDeviceDescriptors) => {\n  console.info('Promise returned to indicate that the device list is obtained.');\n});
监听设备连接状态变化
可以设置监听事件来监听设备连接状态的变化，当有设备连接或断开时触发回调：
监听设备连接状态变化可以监听到全部的设备连接状态变化，不建议作为应用处理自动暂停的依据。应用如需处理自动暂停相关业务，可参考音频流输出设备变更原因。
import { audio } from '@kit.AudioKit';\n\n// 监听音频设备状态变化\naudioRoutingManager.on('deviceChange', audio.DeviceFlag.OUTPUT_DEVICES_FLAG, (deviceChanged: audio.DeviceChangeAction) => {\n  console.info(`device change type : ${deviceChanged.type}`);  // 设备连接状态变化，0为连接，1为断开连接\n  console.info(`device descriptor size : ${deviceChanged.deviceDescriptors.length}`);\n  console.info(`device change descriptor : ${deviceChanged.deviceDescriptors[0].deviceRole}`);  // 设备角色\n  console.info(`device change descriptor : ${deviceChanged.deviceDescriptors[0].deviceType}`);  // 设备类型\n});\n\n// 取消监听音频设备状态变化\naudioRoutingManager.off('deviceChange');
获取最高优先级输出设备信息
使用getPreferOutputDeviceForRendererInfo()方法, 可以获取当前最高优先级的输出设备。
最高优先级输出设备表示声音将在此设备输出的设备。
import { audio } from '@kit.AudioKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet rendererInfo: audio.AudioRendererInfo = {\n    usage : audio.StreamUsage.STREAM_USAGE_MUSIC,\n    rendererFlags : 0\n};\n\nasync function getPreferOutputDeviceForRendererInfo() {\n  audioRoutingManager.getPreferOutputDeviceForRendererInfo(rendererInfo).then((desc: audio.AudioDeviceDescriptors) => {\n    console.info(`device descriptor: ${desc}`);\n  }).catch((err: BusinessError) => {\n    console.error(`Result ERROR: ${err}`);\n  })\n}
监听最高优先级输出设备变化
import { audio } from '@kit.AudioKit';\n\nlet rendererInfo: audio.AudioRendererInfo = {\n    usage : audio.StreamUsage.STREAM_USAGE_MUSIC,\n    rendererFlags : 0\n};\n\n// 监听最高优先级输出设备变化\naudioRoutingManager.on('preferOutputDeviceChangeForRendererInfo', rendererInfo, (desc: audio.AudioDeviceDescriptors) => {\n    console.info(`device change descriptor : ${desc[0].deviceRole}`);  // 设备角色\n    console.info(`device change descriptor : ${desc[0].deviceType}`);  // 设备类型\n});\n\n// 取消监听最高优先级输出设备变化\naudioRoutingManager.off('preferOutputDeviceChangeForRendererInfo');
