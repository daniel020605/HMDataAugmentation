OpenGTX功能开发
概述
OpenGTX是GPU Turbo X的开放式入口，根据游戏开发者主动提供的游戏过程中的关键信息，使能LTPO（动态帧率/刷新率）等游戏加速方案，助力游戏开发者打造高画质、高流畅、低功耗极致体验。LTPO通过动态感知游戏渲染状态、游戏场景、设备状态等关键信息，动态调整游戏的帧率/刷新率以及设备的SOC/DDR频率。
业务流程
LTPO的主要业务流程如下：
 用户进入游戏。 游戏应用调用HMS_OpenGTX_CreateContext接口创建OpenGTX上下文实例。 游戏应用调用HMS_OpenGTX_SetConfiguration接口初始化配置实例属性，包含LTPO模式、目标帧率、包名、游戏类型、分辨率、游戏关键线程等属性。 游戏应用调用HMS_OpenGTX_Activate接口激活OpenGTX上下文实例。 游戏切换不同游戏场景后调用HMS_OpenGTX_DispatchGameSceneInfo接口发送游戏场景信息，包含场景类型、指定帧率、调度帧率范围、当前分辨率等信息。 游戏应用在每帧渲染前调用HMS_OpenGTX_DispatchFrameRenderInfo接口发送游戏帧渲染信息，包含游戏主相机的位置和欧拉角。 游戏应用在每帧渲染前如遇到网络时延档位变化，调用HMS_OpenGTX_DispatchNetworkInfo接口发送游戏网络信息，包含服务器IP地址、网络时延等信息。 游戏应用正常绘制。 一帧送显。 每帧结束，将帧尾决策帧率、决策设备频率通知到设备。 用户退出游戏。 游戏应用调用HMS_OpenGTX_DestroyContext接口销毁OpenGTX上下文实例并释放内存资源。 
开发步骤
本节介绍OpenGTX的开发接入，从流程上分别阐述每个步骤的实现和调用，详细代码请参考OpenGTX Sample。
[h2]设置项目配置项
在“src/main/module.json5”module层级中添加以下配置。
\"metadata\": [\n  {\n    \"name\": \"GraphicsAccelerateKit_LTPO\",\n    \"value\": \"true\"\n  }\n]
[h2]头文件引用
// 引用OpenGTX头文件 opengtx_base.h\n#include <graphics_game_sdk/opengtx_base.h>
[h2]编写CMakeLists.txt
find_library(\n    # Sets the name of the path variable.\n    opengtx-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    libopengtx.so\n)\nfind_library(\n    # Sets the name of the path variable.\n    GLES-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    GLESv3\n)\nfind_library(\n    # Sets the name of the path variable.\n    hilog-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    hilog_ndk.z\n)\n\ntarget_link_libraries(entry PUBLIC\n    ${opengtx-lib} ${GLES-lib} ${hilog-lib}\n)
[h2]OpenGTX初始化
在surface创建后，会触发其事件回调函数“Core::OnSurfaceCreated()”，在该函数中完成OpenGTX上下文实例创建、OpenGTX属性配置和功能激活。其中OpenGTX上下文实例负责管理OpenGTX整个生命周期。
 调用HMS_OpenGTX_CreateContext接口创建OpenGTX上下文实例。如果返回nullptr，则说明OpenGTX上下文实例创建失败，或当前硬件设备不支持开启OpenGTX。// 创建OpenGTX上下文实例\nOpenGTX_Context *context_ = HMS_OpenGTX_CreateContext(nullptr);\nif (context_ == nullptr) {\n    return false;\n} 调用HMS_OpenGTX_SetConfiguration接口属性配置，包含LTPO模式、目标帧率、包名、游戏类型、分辨率、游戏关键线程等属性。// 初始化OpenGTX接口调用错误码\nOpenGTX_ErrorCode errorCode = OPENGTX_SUCCESS;\n// OpenGTX属性配置结构体\nOpenGTX_ConfigDescription config;\n// LTPO调度模式\nconfig.mode = ADAPTIVE_MODE;\n// 游戏设置目标帧率\nconfig.targetFPS = 120;\n// 游戏包名\nconfig.packageName = (char*)\"OpenGTX\";\n// 游戏版本\nconfig.appVersion = (char*)\"1.1.0\";\n// 引擎类型\nconfig.engineType = UNREAL;\n// 引擎版本\nconfig.engineVersion = (char*)\"4.26.2\";\n// 游戏类别\nconfig.gameType = RPG;\n// 游戏最高画质等级\nconfig.pictureQualityMaxLevel = HD;\n// 游戏设置最大分辨率\nconfig.resolutionMaxValue = OpenGTX_ResolutionValue { 1280, 720};\n// 游戏逻辑线程\nconfig.gameMainThreadId = 11;\n// 游戏渲染线程\nconfig.gameRenderThreadId = 11;\n// 游戏运行其他关键线程\nconfig.gameKeyThreadIds[0] = 0;\nconfig.gameKeyThreadIds[1] = 0;\nconfig.gameKeyThreadIds[2] = 0;\nconfig.gameKeyThreadIds[3] = 0;\nconfig.gameKeyThreadIds[4] = 0;\n// 游戏图形API是否为Vulkan\nconfig.vulkanSupport = false;\n// 初始化OpenGTX实例，配置OpenGTX属性\nerrorCode = HMS_OpenGTX_SetConfiguration(context_, &config);\nif (errorCode != OPENGTX_SUCCESS) {\n    return false;\n} 调用HMS_OpenGTX_Activate接口激活OpenGTX上下文实例。// 激活OpenGTX上下文实例\nerrorCode = HMS_OpenGTX_Activate(context_);\nif (errorCode != OPENGTX_SUCCESS) {\n    return false;\n} 调用HMS_OpenGTX_Deactivate接口去激活OpenGTX上下文实例。（在需要关闭OpenGTX功能时调用此接口。去激活后，调用HMS_OpenGTX_DispatchGameSceneInfo等接口将不会生效）。// 去激活OpenGTX上下文实例\nerrorCode = HMS_OpenGTX_Deactivate(context_);\nif (errorCode != OPENGTX_SUCCESS) {\n    return false;\n} 
[h2]OpenGTX关键信息更新
 游戏切换不同游戏场景后调用HMS_OpenGTX_DispatchGameSceneInfo接口发送游戏场景信息，包含场景类型、指定帧率、调度帧率范围、当前分辨率等信息。// OpenGTX游戏场景信息结构体\nOpenGTX_GameSceneInfo gameSceneInfo;\n// 游戏场景类型ID\ngameSceneInfo.sceneID = OTHERS_SCENE;\n// 游戏场景描述\ngameSceneInfo.description = (char*)\"其他场景\";\n// 游戏场景推荐帧率\ngameSceneInfo.recommendFPS = 60;\n// 游戏场景最小帧率\ngameSceneInfo.minFPS = 30;\n// 游戏场景最大帧率\ngameSceneInfo.maxFPS = 90;\n// 屏幕分辨率 高度\ngameSceneInfo.resolutionCurValue.height = 360;\n// 屏幕分辨率 宽度\ngameSceneInfo.resolutionCurValue.width = 7680;\n// OpenGTX接收游戏场景信息\nerrorCode = HMS_OpenGTX_DispatchGameSceneInfo(context_, &gameSceneInfo); \nif (errorCode != OPENGTX_SUCCESS) {\n    return false;\n} 每帧渲染前调用HMS_OpenGTX_DispatchFrameRenderInfo接口发送游戏帧渲染信息，包含游戏主相机的位置和欧拉角。// OpenGTX游戏渲染信息结构体\nOpenGTX_FrameRenderInfo frameRenderInfo;\n// 主相机位置\nframeRenderInfo.mainCameraPosition = { 0.0f, 0.0f, 0.0f };\n// 主相机欧拉角\nframeRenderInfo.mainCameraRotate = { 0.0f, 0.0f, 0.0f };\n// OpenGTX接收游戏渲染信息\nerrorCode = HMS_OpenGTX_DispatchFrameRenderInfo(context_, &frameRenderInfo);\nif (errorCode != OPENGTX_SUCCESS) {\n    return false;\n} 每帧渲染前如遇到网络时延档位变化，调用HMS_OpenGTX_DispatchNetworkInfo接口发送游戏网络信息。包含服务器IP地址、网络时延等信息。// OpenGTX游戏网络信息结构体\nOpenGTX_NetworkInfo networkInfo;\n// OpenGTX游戏网络时延结构体\nOpenGTX_NetworkLatency networkLatency;\n// 网络总时延\nnetworkLatency.total = 50;\n// 网络上行时延\nnetworkLatency.up = 10;\n// 网络下行时延\nnetworkLatency.down = 40;\n// 游戏网络时延\nnetworkInfo.networkLatency = networkLatency;\n// 游戏服务器IP地址\nnetworkInfo.networkServerIP = (char*)\"10.10.10.10\";\n// OpenGTX接收游戏网络信息\nerrorCode = HMS_OpenGTX_DispatchNetworkInfo(context_, &networkInfo); \nif (errorCode != OPENGTX_SUCCESS) {\n    return false;\n} 
[h2]销毁OpenGTX实例
在surface销毁时，会触发其事件回调函数“Core::OnSurfaceDestroyed()”，在该函数中完成OpenGTX实例的销毁。
 调用HMS_OpenGTX_DestroyContext接口销毁OpenGTX实例，释放内存资源。// 销毁OpenGTX上下文实例并释放内存资源\nerrorCode = HMS_OpenGTX_DestroyContext(&context_);\nif (errorCode != OPENGTX_SUCCESS) {\n    return false;\n} 
