AudioVivid播放
在获取到解码后的Audio Vivid的PCM数据和元数据之后，可以调用OHAudio的相关播放接口，进行Audio Vivid格式音源的渲染播放。详细的API说明请参考OHAudio API参考。
在Cmake脚本中链接到动态库
target_link_libraries(sample PUBLIC libohaudio.so)
添加头文件
#include <ohaudio/native_audiorenderer.h>\n#include <ohaudio/native_audiostreambuilder.h>
开发步骤
开发者可以通过以下几个步骤来实现一个简单的播放功能。
创建构造器。OHAudio提供OH_AudioStreamBuilder接口，遵循构造器设计模式，用于构建音频流。在Audio Vivid播放场景下，需要选择OH_AudioStream_Type为AUDIOSTREAM_TYPE_RENDERER，创建一个渲染播放类型的音频构造器。 OH_AudioStreamBuilder* builder;\nOH_AudioStreamBuilder_Create(&builder, AUDIOSTREAM_TYPE_RENDERER); 配置音频流参数。创建音频播放构造器后，可以设置音频流所需要的参数，可以参考以下案例。 Audio Vivid音源搭配系统空间音频渲染算法，播放效果和体验最佳。系统会根据输出音频流的工作场景（OH_AudioStream_Usage），选择使用对应的空间音频渲染效果，当前支持的工作场景包括音乐、电影和有声读物。 // 设置音频采样率为48000Hz\nOH_AudioStreamBuilder_SetSamplingRate(builder, 48000);\n// 设置音频声道为10 （假定输入Audio Vivid音源是5.1.2声床 + 2对象格式）\nOH_AudioStreamBuilder_SetChannelCount(builder, 10);\n// 设置音频声道布局为5.1.2 （声道布局只考虑声床，若想使用默认声道布局，可以传入 CH_LAYOUT_UNKNOWN 参数）\nOH_AudioStreamBuilder_SetChannelLayout(builder, CH_LAYOUT_5POINT1POINT2);\n// 设置音频采样格式\nOH_AudioStreamBuilder_SetSampleFormat(builder, AUDIOSTREAM_SAMPLE_S16LE);\n// 设置音频流的编码类型为Audio Vivid编码类型\nOH_AudioStreamBuilder_SetEncodingType(builder, AUDIOSTREAM_ENCODING_TYPE_AUDIOVIVID);\n// 设置输出音频流的工作场景，根据实际工作场景选择音乐、电影、有声读物等类型\nOH_AudioStreamBuilder_SetRendererInfo(builder, AUDIOSTREAM_USAGE_MUSIC); 设置音频回调函数。OHAudio使用回调模式进行音频流数据的写入，以及各种音频事件的上报，应用可以按需选择需要监听的音频事件。 为了避免不可预期的行为，在设置音频回调函数时，请确认OH_AudioRenderer_Callbacks的每一个回调都被自定义的回调方法或空指针初始化。 对于Audio Vivid播放场景，需要另外使用OH_AudioRenderer_WriteDataWithMetadataCallback进行PCM和元数据的写入。 // 自定义音频流事件函数\nint32_t MyOnStreamEvent(\n    OH_AudioRenderer* renderer,\n    void* userData,\n    OH_AudioStream_Event event)\n{\n    // 根据event表示的音频流事件信息，更新播放器状态和界面\n    return 0;\n}\n// 自定义音频中断事件函数\nint32_t MyOnInterruptEvent(\n    OH_AudioRenderer* renderer,\n    void* userData,\n    OH_AudioInterrupt_ForceType type,\n    OH_AudioInterrupt_Hint hint)\n{\n    // 根据type和hint表示的音频中断信息，更新播放器状态和界面\n    return 0;\n}\n// 自定义异常回调函数\nint32_t MyOnError(\n    OH_AudioRenderer* renderer,\n    void* userData,\n    OH_AudioStream_Result error)\n{\n    // 根据error表示的音频异常信息，做出相应的处理\n    return 0;\n}\n// 配置回调函数\nOH_AudioRenderer_Callbacks callbacks;\n// Audio Vivid播放时，该回调可以置空，使用元数据回调方式进行数据写入\ncallbacks.OH_AudioRenderer_OnWriteData = nullptr;\n// 对音频流事件进行监听，如果不需要，可以使用 nullptr 赋值\ncallbacks.OH_AudioRenderer_OnStreamEvent = MyOnStreamEvent;\n// 对音频中断事件进行监听，如果不需要，可以使用 nullptr 赋值\ncallbacks.OH_AudioRenderer_OnInterruptEvent = MyOnInterruptEvent;\n// 对音频异常事件进行监听，如果不需要，可以使用 nullptr 赋值\ncallbacks.OH_AudioRenderer_OnError = MyOnError;\n\n//设置输出音频流的回调\nOH_AudioStreamBuilder_SetRendererCallback(builder, callbacks, nullptr);\n\n// 自定义同时写入PCM数据和元数据函数\nint32_t MyOnWriteDataWithMetadata(\n    OH_AudioRenderer* renderer,\n    void* userData,\n    void* audioData,\n    int32_t audioDataSize,\n    void* metadata,\n    int32_t metadataSize)\n{\n    // 将待播放的PCM数据和元数据，分别按audioDataSize和metadataSize写入buffer\n    return 0;\n}\n// 配置回调函数\nOH_AudioRenderer_WriteDataWithMetadataCallback metadataCallback = MyOnWriteDataWithMetadata;\n// 设置同时写入PCM数据和元数据的回调\nOH_AudioStreamBuilder_SetWriteDataWithMetadataCallback(builder, metadataCallback, nullptr); 使用配置好的构造器，构造播放音频流。OH_AudioRenderer* audioRenderer;\nOH_AudioStreamBuilder_GenerateRenderer(builder, &audioRenderer); 使用音频流。可以使用以下接口，实现对音频流的控制，完成开始播放、暂停播放、停止播放、清除缓存等基本操作。 在不再使用该条音频流时，可以释放播放实例，以便更好地管理内存。 接口  说明    OH_AudioRenderer_Start  开始播放   OH_AudioRenderer_Pause  暂停播放   OH_AudioRenderer_Stop  停止播放   OH_AudioRenderer_Flush  释放缓存数据   OH_AudioRenderer_Release  释放播放实例     释放构造器。当构造器不再使用时，需要释放相关资源。 OH_AudioStreamBuilder_Destroy(builder); 
