管理用户授权
场景介绍
应用拉起华为账号登录和授权界面，由用户授权相应的数据访问权限。用户可以自主选择授权的数据类型，可以只授权部分数据权限。
应用所能操作的用户数据，是用户授权和运动健康服务审批通过的数据权限的交集。
接口说明
接口名
描述
requestAuthorizations(context: common.UIAbilityContext, request: AuthorizationRequest): Promise<AuthorizationResponse>
用户授权，入参为UIAbility上下文和授权参数AuthorizationRequest，添加需要读写的数据类型，拉起账号授权页面，引导用户完成授权，返回结果中的数据类型列表，其对应权限在应用申请权限和用户授权权限的交集中。
getAuthorizations(request: AuthorizationRequest): Promise<AuthorizationResponse>
查询用户权限，入参为AuthorizationRequest，添加需要查询的数据类型，查询传入类型是否有权限，返回结果中的数据类型列表，其对应权限在应用申请权限和用户授权权限的交集中。
cancelAuthorizations(): Promise<void>
取消用户所有授权。
开发前检查
 完成申请运动健康服务与配置Client ID。 确保授权参数中的数据类型权限已在申请运动健康服务时勾选，权限说明参考权限说明。 接口需在页面或自定义组件生命周期内调用。接口首次调用前，需先使用init方法进行初始化。 错误码参考ArkTS API错误码，常见问题参考Health Service Kit常见问题。 
开发步骤
[h2]用户授权
1.导入运动健康功能模块及相关公共模块。
import { healthStore } from '@kit.HealthServiceKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';
2.创建授权请求。
let authorizationParameter: healthStore.AuthorizationRequest = {\n  readDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE],\n  writeDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE]\n}
try {\n  let authorizationResponse = await healthStore.requestAuthorizations(getContext(this) as common.UIAbilityContext, authorizationParameter);\n  hilog.info(0x0000, 'testTag', 'Succeeded in requesting authorization.');\n  authorizationResponse.writeDataTypes.forEach(dataType => {\n    hilog.info(0x0000, 'testTag', `grantedWriteDataType is : ${dataType.name}`);\n  });\n  authorizationResponse.readDataTypes.forEach(dataType => {\n    hilog.info(0x0000, 'testTag', `grantedReadDataTypes is : ${dataType.name}`);  \n  });\n} catch (err) {\n  hilog.error(0x0000, 'testTag', `Failed to request authorization. Code: ${err.code}, message: ${err.message}`);\n}
[h2]查询权限
1.导入运动健康服务功能模块及相关公共模块。
import { healthStore } from '@kit.HealthServiceKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';
2.创建查询权限请求。
let queryAuthorizationRequest: healthStore.AuthorizationRequest = {\n  readDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE],\n  writeDataTypes: [healthStore.exerciseSequenceHelper.DATA_TYPE, healthStore.samplePointHelper.heartRate.DATA_TYPE]\n}
try {\n  let queryAuthorizationResponse = await healthStore.getAuthorizations(queryAuthorizationRequest);\n  hilog.info(0x0000, 'testTag', 'Succeeded in getting authorization.');\n  queryAuthorizationResponse.writeDataTypes.forEach(dataType => {\n    hilog.info(0x0000, 'testTag', `grantedWriteDataType is : ${dataType.name}`);\n  });\n  queryAuthorizationResponse.readDataTypes.forEach(dataType => {\n    hilog.info(0x0000, 'testTag', `grantedReadDataTypes is : ${dataType.name}`);\n  });\n} catch (err) {\n  hilog.error(0x0000, 'testTag', `Failed to get authorization. Code: ${err.code}, message: ${err.message}`);\n}
[h2]取消授权
1.导入运动健康服务功能模块及相关公共模块。
import { healthStore } from '@kit.HealthServiceKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';
try {\n  await healthStore.cancelAuthorizations();\n  hilog.info(0x0000, 'testTag', 'Succeeded in cancelling authorization.');\n} catch (err) {\n  hilog.error(0x0000, 'testTag', `Failed to cancel authorization. Code: ${err.code}, message: ${err.message}`);\n}
