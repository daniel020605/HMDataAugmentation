从OpenSL ES切换到OHAudio(C/C++)
由于OpenSL ES无法满足音频系统的能力拓展，建议开发者使用OHAudio替代OpenSL ES开发音频业务。本文将介绍如何从使用OpenSL ES接口开发音频业务，切换为使用OHAudio接口。
支持的功能差异
两者支持的功能范围略有差异，OHAudio增加支持低时延播放/录制、监听业务变化等功能。
具体差异如下表所示。
开发模式差异
此小节将结合开发步骤，对比介绍OHAudio和OpenSL ES在开发模式上的差异。
音频播放和录制的实现类似，此处以音频播放为例说明。
[h2]构造实例
OpenSL ES:
通过全局接口获取到Engine对象，基于Engine结合不同输入输出配置参数，构造出不同音频播放对象。
// 生成Engine Inteface对象\nSLEngineItf engine;\n// ...\n\n// 按需配置音频输入slSource\nSLDataSource slSource;\n// ...\n\n// 按需配置音频输出slSink\nSLDataSink slSink;\n// ...\n\n// 生成音频播放对象\nSLObjectItf playerObject;\n(*engine)->CreateAudioPlayer(engine,\n                             &playerObject,\n                             &slSource,\n                             &slSink,\n                             0,\n                             nullptr,\n                             nullptr);\n\n(*playerObject)->Realize(playerObject,\n                         SL_BOOLEAN_FALSE);
OHAudio:
采用建造器模式，通过建造器，配合自定义参数设置，生成音频播放对象。
// 创建建造器\nOH_AudioStreamBuilder *builder;\nOH_AudioStreamBuilder_Create(&builder, AUDIOSTREAM_TYPE_RENDERER);\n\n// 设置自定义参数，否则会使用默认参数\nOH_AudioStreamBuilder_SetSamplingRate(builder, 48000);\nOH_AudioStreamBuilder_SetChannelCount(builder, 2);\nOH_AudioStreamBuilder_SetSampleFormat(builder, AUDIOSTREAM_SAMPLE_S16LE);\nOH_AudioStreamBuilder_SetEncodingType(builder, AUDIOSTREAM_ENCODING_TYPE_RAW);\n// 关键参数，仅OHAudio支持，根据音频用途设置，系统会根据此参数实现音频策略自适应\nOH_AudioStreamBuilder_SetRendererInfo(builder, AUDIOSTREAM_USAGE_MUSIC);\n// ...\n\n// 生成音频播放对象\nOH_AudioRenderer *audioRenderer;\nOH_AudioStreamBuilder_GenerateRenderer(builder, &audioRenderer);
[h2]状态切换
OpenSL ES:
基于Object获取状态切换Interface，使用Interface接口切换状态，只有SL_PLAYSTATE_STOPPED、SL_PLAYSTATE_PAUSED、SL_PLAYSTATE_PLAYING三种状态。
// 基于播放对象，获取播放操作Interface\nSLPlayItf playItf = nullptr;\n(*playerObject)->GetInterface(playerObject, SL_IID_PLAY, &playItf);\n// 状态切换\n(*playItf)->SetPlayState(playItf, SL_PLAYSTATE_PLAYING);\n(*playItf)->SetPlayState(playItf, SL_PLAYSTATE_PAUSED);\n(*playItf)->SetPlayState(playItf, SL_PLAYSTATE_STOPPED);
OHAudio:
有独立的状态切换接口，基于状态机进行状态切换，共6个OH_AudioStream_State状态，主要在AUDIOSTREAM_STATE_PREPARED、AUDIOSTREAM_STATE_RUNNING、AUDIOSTREAM_STATE_STOPPED、AUDIOSTREAM_STATE_PAUSED、AUDIOSTREAM_STATE_RELEASED状态间切换。
// 状态切换\nOH_AudioRenderer_Start(audioRenderer);\nOH_AudioRenderer_Pause(audioRenderer);\nOH_AudioRenderer_Stop(audioRenderer);
[h2]数据处理
OpenSL ES:
基于扩展的OHBufferQueue接口，通过注册自定义的Callback函数，根据数据请求时机，将待播放数据填入系统内提供的缓冲区中。
static void MyBufferQueueCallback(SLOHBufferQueueItf bufferQueueItf, void *pContext, SLuint32 size)\n{\n    SLuint8 *buffer = nullptr;\n    SLuint32 bufferSize;\n    // 获取系统内提供的buffer\n    (*bufferQueueItf)->GetBuffer(bufferQueueItf, &buffer, &bufferSize);\n    // 将待播放音频数据写入buffer\n    // ...\n    // 将buffer输入系统\n    (*bufferQueueItf)->Enqueue(bufferQueueItf, buffer, bufferSize);\n}\n\n// 获取OHBufferQueue接口\nSLOHBufferQueueItf bufferQueueItf;\n(*playerObject)->GetInterface(playerObject, SL_IID_OH_BUFFERQUEUE, &bufferQueueItf);\n// 可传入自定义的上下文信息，会在Callback内收到\nvoid *pContext;\n(*bufferQueueItf)->RegisterCallback(bufferQueueItf, MyBufferQueueCallback, pContext);
OHAudio:
统一使用回调模式，在构造时注册数据输入回调，实现自定义的数据填充函数，在播放过程中会跟随系统调度和时延配置情况，自动在合适时机触发数据请求回调。
static int32_t MyOnWriteData(\n    OH_AudioRenderer *renderer,\n    void *userData,\n    void *buffer,\n    int32_t bufferLen)\n{\n    // 将待播放数据按照请求的bufferLen长度，填入buffer\n    // 函数返回后，系统会自动从buffer取出数据输出\n}\n\nOH_AudioRenderer_Callbacks callbacks;\ncallbacks.OH_AudioRenderer_OnWriteData = MyOnWriteData;\n\n// 设置输出音频流的回调，在生成音频播放对象时自动注册\nvoid *userData = nullptr;\nOH_AudioStreamBuilder_SetRendererCallback(builder, callbacks, userData);
[h2]资源释放
OpenSL ES:
使用SLObjectItf接口实现对象资源释放。
// 释放播放对象资源\n(*playerObject)->Destroy(playerObject);
OHAudio:
使用对应模块的释放接口实现对象资源释放。
// 释放建造器资源\nOH_AudioStreamBuilder_Destroy(builder);\n\n// 释放播放对象资源\nOH_AudioRenderer_Release(audioRenderer);
