应用恢复开发指导
场景介绍
应用在运行中不可避免会产生一些非预期的行为，如运行时抛出未处理的异常和错误，违反框架的调用/运行约束等。
系统默认对异常的处理方式为进程退出，如果应用使用过程中产生了用户数据，直接退出可能会导致用户工作中断，数据丢失。
如果应用在AbilityStage中使能应用恢复功能，并对临时数据进行保存，应用非预期退出后的下一次启动会恢复先前的状态和数据，给用户更连贯的使用体验。这里状态包括应用的页面栈以及onSaveState接口中保存的数据。
API 9上的应用恢复接口支持单Ability的Stage模型应用开发。支持JsError故障时的状态保存与自动重启。
API 10在API 9的基础上新增支持多Ability的Stage模型应用开发。支持AppFreeze故障时的状态保存回调。支持应用被管控模式杀死后，下次启动的状态恢复。
接口说明
应用故障恢复接口由appRecovery模块提供，开发者可以通过import引入，详见开发示例。
[h2]应用恢复接口功能介绍
由于上述接口可能在故障处理时使用，所以不会返回异常，需要开发者熟悉使用的场景。
enableAppRecovery: 需要在应用初始化阶段调用，比如AbilityStage的OnCreate调用。具体其各参数定义详见参数说明。
saveAppState: 调用后框架会回调当前进程中所有支持恢复的Ability的onSaveState方法，如果在onSaveState方法中同意保存数据，则会将相关数据及Ability的页面栈持久化到应用的本地缓存。如果需要保存指定Ability，则需要指定Ability对应的Context。
setRestartWant: 指定由appRecovery发起重启的Ability。
restartApp: 调用后框架会杀死当前应用进程，并重新拉起由setRestartWant指定的Ability，其中启动原因为APP_RECOVERY。API 9以及未使用setRestartWant指定Ability的场景，会拉起最后一个支持恢复且在前台的Ability，如果当前前台的Ability不支持恢复，则应用表现闪退。如果重启的Ability存在已经保存的状态，这些状态数据会在Ability的OnCreate生命周期回调的want参数中作为wantParam属性传入。两次重启的间隔应大于一分钟，一分钟之内重复调用此接口只会退出应用不会重启应用。自动重启的行为与主动重启一致。
[h2]应用恢复状态管理示意
从API 10起，应用恢复的场景不仅局限于异常时自动重启。所以需要理解应用何时会加载恢复的状态。
一句话概括就是如果应用任务的上次退出不是由用户发起的，且应用存在用于恢复的状态，应用下一次由用户拉起时的启动原因会被设为APP_RECOVERY，并清理该任务的恢复状态。
应用恢复状态标识会在状态保存接口主动或者被动调用时设置。在该应用正常退出或者应用异常退出重启后使用了该状态时清理。正常退出目前包括用户按后退键退出以及用户清理最近任务。
[h2]应用卡死的状态保存及恢复
API 10开始支持应用卡死时的状态保存。JsError故障时，onSaveState接口在主线程进行回调。对于AppFreeze故障，主线程可能处于卡死的状态，onSaveState会在非主线程进行回调。其主要流程如下图：
由于卡死时的回调不在JS线程上执行，onSaveState回调中的代码建议不要使用import进来的Native动态库，禁止访问主线程创建的thread_local对象。
[h2]框架故障管理流程示意
故障管理是应用提升用户体验的重要手段。应用程序框架为开发者提供了故障监听、故障恢复、以及故障查询三种方式来管理应用的故障。
 故障监听指的是通过errorManager注册ErrorObserver，监听故障的发生，并通知到监听方。 故障恢复指的是appRecovery，及故障发生后，将应用重启恢复到故障之前的状态。 故障查询指的是faultLogger通过其查询接口获取当前的故障信息。 
下图中并没有标记faultLogger的调用时机，开发者可以根据应用启动时传入的LastExitReason来决定是否调用faultLogger查询上次的故障信息。
这里建议应用开发者使用errorManager对应用的异常进行处理，处理完成后开发者可以选择调用状态保存接口并主动重启应用。
如果开发者没有注册ErrorObserver也没有使能应用恢复，则按照系统的默认逻辑执行进程退出。用户可以选择从启动器再次打开应用。
如果开发者使能应用恢复，框架会首先检查当前故障是否支持状态保存以及开发者是否配置了状态保存，如果支持则会回调Ability的onSaveState的接口。最后重启应用。
[h2]应用故障管理接口支持场景
通常的故障类型有JS程序Crash、应用程序卡死、C++程序Crash。Crash故障时应用一般都会被关闭。Freeze故障为应用无响应卡屏场景。应用上层无需关注故障类型，底层恢复框架会根据故障类型来实现不同场景的故障管理。
这里状态保存指的是故障时状态保存，对于应用卡死场景，开发者可以采用定时保存状态或者在Ability切入后台后自动保存的方式最大限度的保护用户数据。
开发示例
[h2]使能开启自恢复特性
开发者需要在应用模块初始化时使能appRecovery功能。下面为示例的AbilityStage。
import { AbilityStage, appRecovery } from '@kit.AbilityKit';\n\nexport default class MyAbilityStage extends AbilityStage {\n    onCreate() {\n        console.info(\"[Demo] MyAbilityStage onCreate\");\n        appRecovery.enableAppRecovery(appRecovery.RestartFlag.ALWAYS_RESTART,\n            appRecovery.SaveOccasionFlag.SAVE_WHEN_ERROR | appRecovery.SaveOccasionFlag.SAVE_WHEN_BACKGROUND,\n            appRecovery.SaveModeFlag.SAVE_WITH_FILE);\n    }\n}
[h2]配置支持恢复的Ability
Ability的配置清单一般的名字为module.json5。
{\n    \"abilities\": [\n      {\n        \"name\": \"EntryAbility\",\n        \"recoverable\": true,\n      }]\n}
[h2]数据保存和恢复
在使能appRecovery功能后，开发者可以在Ability中采用主动保存状态，主动恢复或者选择被动恢复的方式使用appRecovery功能。
下面为示例的EntryAbility。
导包
import { AbilityConstant, appRecovery, errorManager } from '@kit.AbilityKit';
主动触发保存和恢复
 定义和注册ErrorObserver callback，具体可参考errorManager里的使用方法。 
import { appRecovery, errorManager, UIAbility } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\n\nlet registerId = -1;\nlet callback: errorManager.ErrorObserver = {\n    onUnhandledException(errMsg) {\n    console.log(errMsg);\n    appRecovery.saveAppState();\n    appRecovery.restartApp();\n    }\n}\n\nexport default class EntryAbility extends UIAbility {\n    onWindowStageCreate(windowStage: window.WindowStage) {\n    // Main window is created, set main page for this ability\n    console.log(\"[Demo] EntryAbility onWindowStageCreate\");\n    registerId = errorManager.on('error', callback);\n\n    windowStage.loadContent(\"pages/index\", (err, data) => {\n        if (err.code) {\n        console.error('Failed to load the content. Cause:' + JSON.stringify(err));\n        return;\n        }\n        console.info('Succeeded in loading the content. Data: ' + JSON.stringify(data));\n    })\n    }\n}
 数据保存 
callback触发appRecovery.saveAppState()调用后，会触发EntryAbility的onSaveState(state, wantParams)函数回调。
import { AbilityConstant, UIAbility } from '@kit.AbilityKit';\n\nexport default class EntryAbility extends UIAbility {\n    onSaveState(state:AbilityConstant.StateType, wantParams: Record<string, Object>) {\n        // Ability has called to save app data\n        console.log(\"[Demo] EntryAbility onSaveState\");\n        wantParams[\"myData\"] = \"my1234567\";\n        return AbilityConstant.OnSaveResult.ALL_AGREE;\n    }\n}
 数据恢复 
callback触发后appRecovery.restartApp()调用后，应用会重启，重启后会走到EntryAbility的onCreate(want, launchParam)函数，保存的数据会在want参数的parameters里。
import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\n\nlet abilityWant: Want;\n\nexport default class EntryAbility extends UIAbility {\n    storage: LocalStorage | undefined = undefined;\n\n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n        console.log(\"[Demo] EntryAbility onCreate\");\n        abilityWant = want;\n        if (launchParam.launchReason == AbilityConstant.LaunchReason.APP_RECOVERY) {\n            this.storage = new LocalStorage();\n            if (want.parameters) {\n                let recoveryData = want.parameters[\"myData\"];\n                this.storage.setOrCreate(\"myData\", recoveryData);\n                this.context.restoreWindowStage(this.storage);\n            }\n        }\n    }\n}
 取消注册ErrorObserver callback 
import { errorManager, UIAbility } from '@kit.AbilityKit';\n\nlet registerId = -1;\n\nexport default class EntryAbility extends UIAbility {\n    onWindowStageDestroy() {\n        // Main window is destroyed, release UI related resources\n        console.log(\"[Demo] EntryAbility onWindowStageDestroy\");\n\n        errorManager.off('error', registerId, (err) => {\n            console.error(\"[Demo] err:\", err);\n        });\n    }\n}
被动保存和恢复
被动保存和恢复依赖恢复框架底层触发，无需注册监听ErrorObserver callback，只需实现Ability的onSaveState接口数据保存和onCreate接口数据恢复流程即可。
import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\n\nlet abilityWant: Want;\n\nexport default class EntryAbility extends UIAbility {\n    storage: LocalStorage | undefined = undefined\n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n    console.log(\"[Demo] EntryAbility onCreate\");\n        abilityWant = want;\n        if (launchParam.launchReason == AbilityConstant.LaunchReason.APP_RECOVERY) {\n            this.storage = new LocalStorage();\n            if (want.parameters) {\n                let recoveryData = want.parameters[\"myData\"];\n                this.storage.setOrCreate(\"myData\", recoveryData);\n                this.context.restoreWindowStage(this.storage);\n            }\n        }\n    }\n\n    onSaveState(state:AbilityConstant.StateType, wantParams: Record<string, Object>) {\n        // Ability has called to save app data\n        console.log(\"[Demo] EntryAbility onSaveState\");\n        wantParams[\"myData\"] = \"my1234567\";\n        return AbilityConstant.OnSaveResult.ALL_AGREE;\n    }\n}
故障Ability的重启恢复标记
发生故障的Ability再次重新启动时，在调度onCreate生命周期里，参数want的parameters成员会有ABILITY_RECOVERY_RESTART标记数据，并且值为true。
import { AbilityConstant, UIAbility, Want, wantConstant } from '@kit.AbilityKit';\n\nexport default class EntryAbility extends UIAbility {\n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n        if (want.parameters === undefined) {\n            return;\n        }\n        if (want.parameters[wantConstant.Params.ABILITY_RECOVERY_RESTART] != undefined &&\n            want.parameters[wantConstant.Params.ABILITY_RECOVERY_RESTART] == true) {\n            console.log(\"This ability need to recovery\");\n        }\n    }\n}
