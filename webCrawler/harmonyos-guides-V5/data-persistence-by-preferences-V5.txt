通过用户首选项实现数据持久化
场景介绍
用户首选项为应用提供Key-Value键值型的数据处理能力，支持应用持久化轻量级数据，并对其修改和查询。当用户希望有一个全局唯一存储的地方，可以采用用户首选项来进行存储。Preferences会将该数据缓存在内存中，当用户读取的时候，能够快速从内存中获取数据，当需要持久化时可以使用flush接口将内存中的数据写入持久化文件中。Preferences会随着存放的数据量越多而导致应用占用的内存越大，因此，Preferences不适合存放过多的数据，也不支持通过配置加密，适用的场景一般为应用保存用户的个性化设置（字体大小，是否开启夜间模式）等。
运作机制
如图所示，用户程序通过ArkTS接口调用用户首选项读写对应的数据文件。开发者可以将用户首选项持久化文件的内容加载到Preferences实例，每个文件唯一对应到一个Preferences实例，系统会通过静态容器将该实例存储在内存中，直到主动从内存中移除该实例或者删除该文件。
应用首选项的持久化文件保存在应用沙箱内部，可以通过context获取其路径。具体可见获取应用文件路径。
图1 用户首选项运作机制
约束限制
 首选项无法保证进程并发安全，会有文件损坏和数据丢失的风险，不支持在多进程场景下使用。 Key键为string类型，要求非空且长度不超过1024个字节。 如果Value值为string类型，请使用UTF-8编码格式，可以为空，不为空时长度不超过16MB。 当存储的数据中包含非UTF-8格式的字符串时，请使用Uint8Array类型存储，否则会造成持久化文件出现格式错误造成文件损坏。 当调用removePreferencesFromCache或者deletePreferences后，订阅的数据变更会主动取消订阅，重新getPreferences后需要重新订阅数据变更。 不允许deletePreferences与其他接口多线程、多进程并发调用，否则会发生不可预期行为。 内存会随着存储数据量的增大而增大，所以存储的数据量应该是轻量级的，建议存储的数据不超过一万条，否则会在内存方面产生较大的开销。 
接口说明
以下是用户首选项持久化功能的相关接口，更多接口及使用方式请见用户首选项。
开发步骤
 导入@kit.ArkData模块。 import { preferences } from '@kit.ArkData'; 获取Preferences实例。 import { UIAbility } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { window } from '@kit.ArkUI';\n\nlet dataPreferences: preferences.Preferences | null = null;\n\nclass EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    let options: preferences.Options = { name: 'myStore' };\n    dataPreferences = preferences.getPreferencesSync(this.context, options);\n  }\n} 写入数据。 使用putSync()方法保存数据到缓存的Preferences实例中。在写入数据后，如有需要，可使用flush()方法将Preferences实例的数据存储到持久化文件。     当对应的键已经存在时，putSync()方法会覆盖其值。可以使用hasSync()方法检查是否存在对应键值对。   示例代码如下所示： import { util } from '@kit.ArkTS';\nif (dataPreferences.hasSync('startup')) {\n  console.info(\"The key 'startup' is contained.\");\n} else {\n  console.info(\"The key 'startup' does not contain.\");\n  // 此处以此键值对不存在时写入数据为例\n  dataPreferences.putSync('startup', 'auto');\n  // 当字符串有特殊字符时，需要将字符串转为Uint8Array类型再存储\n  let uInt8Array1 = new util.TextEncoder().encodeInto(\"~！@#￥%……&*（）——+？\");\n  dataPreferences.putSync('uInt8', uInt8Array1);\n} 读取数据。 使用getSync()方法获取数据，即指定键对应的值。如果值为null或者非默认值类型，则返回默认数据。 示例代码如下所示： let val = dataPreferences.getSync('startup', 'default');\nconsole.info(\"The 'startup' value is \" + val);\n// 当获取的值为带有特殊字符的字符串时，需要将获取到的Uint8Array转换为字符串\nlet uInt8Array2 : preferences.ValueType = dataPreferences.getSync('uInt8', new Uint8Array(0));\nlet textDecoder = util.TextDecoder.create('utf-8');\nval = textDecoder.decodeToString(uInt8Array2 as Uint8Array);\nconsole.info(\"The 'uInt8' value is \" + val); 删除数据。 使用deleteSync()方法删除指定键值对，示例代码如下所示： dataPreferences.deleteSync('startup'); 数据持久化。 应用存入数据到Preferences实例后，可以使用flush()方法实现数据持久化。示例代码如下所示： dataPreferences.flush((err: BusinessError) => {\n  if (err) {\n    console.error(`Failed to flush. Code:${err.code}, message:${err.message}`);\n    return;\n  }\n  console.info('Succeeded in flushing.');\n}) 订阅数据变更。 应用订阅数据变更需要指定observer作为回调方法。订阅的Key值发生变更后，当执行flush()方法时，observer被触发回调。示例代码如下所示： let observer = (key: string) => {\n  console.info('The key' + key + 'changed.');\n}\ndataPreferences.on('change', observer);\n// 数据产生变更，由'auto'变为'manual'\ndataPreferences.put('startup', 'manual', (err: BusinessError) => {\n  if (err) {\n    console.error(`Failed to put the value of 'startup'. Code:${err.code},message:${err.message}`);\n    return;\n  }\n  console.info(\"Succeeded in putting the value of 'startup'.\");\n  if (dataPreferences !== null) {\n    dataPreferences.flush((err: BusinessError) => {\n      if (err) {\n        console.error(`Failed to flush. Code:${err.code}, message:${err.message}`);\n        return;\n      }\n      console.info('Succeeded in flushing.');\n    })\n  }\n}) 删除指定文件。 使用deletePreferences()方法从内存中移除指定文件对应的Preferences实例，包括内存中的数据。若该Preference存在对应的持久化文件，则同时删除该持久化文件，包括指定文件及其备份文件、损坏文件。      调用该接口后，应用不允许再使用该Preferences实例进行数据操作，否则会出现数据一致性问题。 成功删除后，数据及文件将不可恢复。    示例代码如下所示： preferences.deletePreferences(this.context, options, (err: BusinessError) => {\n  if (err) {\n    console.error(`Failed to delete preferences. Code:${err.code}, message:${err.message}`);\n      return;\n  }\n  console.info('Succeeded in deleting preferences.');\n}) 
示例代码
 首选项 
