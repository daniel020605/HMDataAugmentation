文档扫描
场景介绍
文档扫描控件提供拍摄文档并转换为高清扫描件的服务。仅需使用手机拍摄文档，即可自动裁剪和优化，并支持图片保存和分享；同时支持拍摄或从图库选择图片识别表格，生成表格文档。
可广泛用于教育办公场景，扫描文档、票据、课堂PPT和书籍等输出图片供用户完成发送、存档等操作。
约束与限制
该能力当前不支持模拟器。
开发步骤
将文档扫描控件相关的类添加至工程。import { DocType, DocumentScanner, DocumentScannerConfig, SaveOption, FilterId, ShootingMode } from \"@kit.VisionKit\"; 配置布局，根据业务场景配置文档扫描控件的相关属性，获取返回的文档图片uri列表。import { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG = 'DocumentScanner'\n\n@Entry\n@Component\nstruct Index {\n  private docScanConfig = new DocumentScannerConfig()\n\n  aboutToAppear() {\n    this.docScanConfig.supportType = [DocType.DOC, DocType.SHEET]\n    this.docScanConfig.isGallerySupported = true\n    this.docScanConfig.editTabs = []\n    this.docScanConfig.maxShotCount = 3\n    this.docScanConfig.defaultFilterId = FilterId.ORIGINAL\n    this.docScanConfig.defaultShootingMode = ShootingMode.MANUAL\n    this.docScanConfig.isShareable = true\n    this.docScanConfig.originalUris = []\n  }\n\n  build() {\n    Column() {\n      DocumentScanner({\n        scannerConfig: this.docScanConfig,\n        onResult: (code: number, saveType: SaveOption, uris: string[]) => {\n          hilog.info(0x0001, TAG, `result code: ${code}, save: ${saveType}`)\n          uris.forEach(uriString => {\n            hilog.info(0x0001, TAG, `uri: ${uriString}`)\n          })\n        }\n      }).size({ width: '100%', height: '100%' })\n    }\n    .height('100%')\n    .width('100%')\n  }\n} 
开发实例
//开发实例分两页实现，一页为文档扫描入口页，一页为文档扫描实现页 \n//文档扫描入口页，需引入文档扫描实现页，以下文实例为例，实现页文件名为DocDemoPage\nimport { DocDemoPage } from './DocDemoPage'\n\n@Entry\n@Component\nstruct MainPage {\n  @Provide('pathStack') pathStack: NavPathStack = new NavPathStack()\n\n  @Builder\n  PageMap(name: string) {\n    if (name === 'documentScanner') {\n      DocDemoPage()\n    }\n  }\n\n  //文档扫描入口按钮，可替换为业务入口\n  build() {\n    Navigation(this.pathStack) {\n      Button('DocumentScanner', { stateEffect: true, type: ButtonType.Capsule })\n        .width('50%')\n        .height(40)\n        .onClick(() => {\n          this.pathStack.pushPath({ name: 'documentScanner' })\n        })\n    }.title('文档扫描控件demo').navDestination(this.PageMap)\n    .mode(NavigationMode.Stack)\n  }\n}
//文档扫描实现页，文件名为DocDemoPage，需被引入至入口页\nimport {\n  DocType,\n  DocumentScanner,\n  DocumentScannerConfig,\n  SaveOption,\n  FilterId,\n  ShootingMode\n} from \"@kit.VisionKit\"\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = 'DocDemoPage'\n\n//文档扫描页，用于加载uiExtensionAbility\n@Entry\n@Component\nexport struct DocDemoPage {\n  @State docImageUris: string[] = []\n  @Consume('pathStack') pathStack: NavPathStack\n  private docScanConfig = new DocumentScannerConfig()\n\n  aboutToAppear() {\n    this.docScanConfig.supportType = [DocType.DOC, DocType.SHEET]\n    this.docScanConfig.isGallerySupported = true\n    this.docScanConfig.editTabs = []\n    this.docScanConfig.maxShotCount = 3\n    this.docScanConfig.defaultFilterId = FilterId.ORIGINAL\n    this.docScanConfig.defaultShootingMode = ShootingMode.MANUAL\n    this.docScanConfig.isShareable = true\n    this.docScanConfig.originalUris = []\n  }\n\n  build() {\n    NavDestination() {\n      Stack({ alignContent: Alignment.Top }) {\n      //展示文档扫描结果\n        List() {\n          ForEach(this.docImageUris, (uri: string) => {\n            ListItem() {\n              Image(uri)\n                .objectFit(ImageFit.Contain)\n                .width(100)\n                .height(100)\n            }\n          })\n        }\n        .listDirection(Axis.Vertical)\n        .alignListItem(ListItemAlign.Center)\n        .margin({\n          top: 50\n        })\n        .width('80%')\n        .height('80%')\n        \n        //文档扫描\n        DocumentScanner({\n          scannerConfig: this.docScanConfig,\n          onResult: (code: number, saveType: SaveOption, uris: string[]) => {\n            hilog.info(0x0001, TAG, `result code: ${code}, save: ${saveType}`)\n            if (code === -1) {\n              this.pathStack.pop()\n            }\n            uris.forEach(uriString => {\n              hilog.info(0x0001, TAG, `uri: ${uriString}`)\n            })\n            this.docImageUris = uris\n          }\n        })\n          .size({ width: '100%', height: '100%' })\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .width('100%')\n    .height('100%')\n    .hideTitleBar(true)\n  }\n}
