使用post发送网络请求 (C/C++)
场景介绍
发送一个带有默认HTTP参数的HTTP  POST请求，并返回来自服务器的HTTP响应。使用异步回调。常用于向服务器提交数据。与GET请求不同，POST请求将参数包含在请求主体中，适用于创建新资源、提交表单数据或执行某些操作。
使用示例
CPP侧导入模块。#include \"RemoteCommunicationKit/rcp.h\"\n#include <cstdlib>\n#include <cstring>\n#include <stdio.h>\n#include <unistd.h> CMakeLists.txt中添加以下lib。（具体请见C API开发准备）。librcp_c.so 创建会话，会话发起post请求。“http://www.example.com”请根据实际情况替换为想要请求的URL地址。等待响应返回后，销毁request并关闭session。bool g_callback = false;\nvoid ResponseCallback(void *usrCtx, Rcp_Response *response, uint32_t errCode)\n{\n    (void *)usrCtx;\n    if (response != NULL) {\n        printf(\"Response status: %d\\n\", response->statusCode);\n    } else {\n        printf(\"Fetch failed: errCode: %u\\n\", errCode);\n    }\n    // 注意清理响应\n    if (response != NULL) {\n        response->destroyResponse(response);\n    }\n    g_callback = true;\n}\n\nint main() {\n    const char *kHttpServerAddress = \"http://www.example.com\";\n    const char *content = \"content\";\n    Rcp_Request *request = HMS_Rcp_CreateRequest(kHttpServerAddress);\n    // 设置request参数\n    request->method = RCP_METHOD_POST;\n    request->content = (Rcp_RequestContent *)calloc(1, sizeof(Rcp_RequestContent));\n    request->content->type = RCP_CONTENT_TYPE_STRING;\n    request->content->data.contentStr.buffer = content;\n    request->content->data.contentStr.length = strlen(content);\n    uint32_t errCode = 0;\n    // 创建session\n    Rcp_Session *session = HMS_Rcp_CreateSession(NULL, &errCode);\n    // 配置请求回调\n    Rcp_ResponseCallbackObject responseCallback = {ResponseCallback, NULL};\n    // 发起请求\n    errCode = HMS_Rcp_Fetch(session, request, &responseCallback);\n    // 处理errCode\n    // 等待fetch结果\n    int timeout = 100;\n    while (timeout-- > 0 && !g_callback) {\n        usleep(1000);\n    }\n    // 清理request\n    HMS_Rcp_DestroyRequest(request);\n    // 清理request->content\n    free(request->content);\n    // 关闭session\n    errCode = HMS_Rcp_CloseSession(&session);\n    // 处理errCode\n    return 0;\n} 
