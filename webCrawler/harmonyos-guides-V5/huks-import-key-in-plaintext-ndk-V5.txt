明文导入密钥(C/C++)
以明文导入ECC密钥为例。具体的场景介绍及支持的算法规格，请参考密钥导入的支持的算法。
在CMake脚本中链接相关动态库
target_link_libraries(entry PUBLIC libhuks_ndk.z.so)
开发步骤
 指定密钥别名keyAlias。 密钥别名的最大长度为64字节。 封装密钥属性集和密钥材料。通过OH_Huks_InitParamSet、OH_Huks_AddParams、OH_Huks_BuildParamSet构造密钥属性集paramSet。  密钥属性集中必须包含OH_Huks_KeyAlg、OH_Huks_KeySize、OH_Huks_KeyPurpose属性。 密钥材料须符合HUKS密钥材料格式。  调用OH_Huks_ImportKeyItem，传入密钥别名和密钥属性集，导入密钥。 
/* 以下以明文导入ECC密钥为例 */\n#include \"huks/native_huks_api.h\"\n#include \"huks/native_huks_param.h\"\n#include \"napi/native_api.h\"\n#include <string.h>\nOH_Huks_Result InitParamSet(struct OH_Huks_ParamSet **paramSet, const struct OH_Huks_Param *params,\n                            uint32_t paramCount) {\n    OH_Huks_Result ret = OH_Huks_InitParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        return ret;\n    }\n    ret = OH_Huks_AddParams(*paramSet, params, paramCount);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    ret = OH_Huks_BuildParamSet(paramSet);\n    if (ret.errorCode != OH_HUKS_SUCCESS) {\n        OH_Huks_FreeParamSet(paramSet);\n        return ret;\n    }\n    return ret;\n}\nstruct OH_Huks_Param g_testImportKeyParam[] = {{.tag = OH_HUKS_TAG_ALGORITHM, .uint32Param = OH_HUKS_ALG_ECC},\n                                                 {.tag = OH_HUKS_TAG_PURPOSE, .uint32Param = OH_HUKS_KEY_PURPOSE_AGREE},\n                                                 {.tag = OH_HUKS_TAG_KEY_SIZE, .uint32Param = OH_HUKS_ECC_KEY_SIZE_256},\n                                                 {.tag = OH_HUKS_TAG_DIGEST, .uint32Param = OH_HUKS_DIGEST_NONE}};\n\nstatic napi_value ImportKey(napi_env env, napi_callback_info info) {\n    const char *alias = \"test_import\";\n    struct OH_Huks_Blob aliasBlob = {.size = (uint32_t)strlen(alias), .data = (uint8_t *)alias};\n    /* DER格式的公钥，用于后续导入密钥 */\n    uint8_t pubKey[OH_HUKS_ECC_KEY_SIZE_256] = {\n        0x30, 0x2A, 0x30, 0x05, 0x06, 0x03, 0x2B, 0x65, 0x6E, 0x03, 0x21, 0x00, 0xD2, 0x36, 0x9E, 0xCF,\n        0xF0, 0x61, 0x5B, 0x73, 0xCE, 0x4F, 0xF0, 0x40, 0x2B, 0x89, 0x18, 0x3E, 0x06, 0x33, 0x60, 0xC6\n    };\n    struct OH_Huks_Blob publicKey = {OH_HUKS_ECC_KEY_SIZE_256, pubKey};\n    struct OH_Huks_ParamSet *testImportKeyParamSet = nullptr;\n    struct OH_Huks_Result ohResult;\n    do {\n        ohResult = InitParamSet(&testImportKeyParamSet, g_testImportKeyParam,\n                                sizeof(g_testImportKeyParam) / sizeof(OH_Huks_Param));\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n        /* 4. Import Key */\n        char newKey[] = \"test_import\";\n        struct OH_Huks_Blob newKeyAlias = {.size = (uint32_t)strlen(newKey), .data = (uint8_t *)newKey};\n        ohResult = OH_Huks_ImportKeyItem(&newKeyAlias, testImportKeyParamSet, &publicKey);\n    } while (0);\n    OH_Huks_FreeParamSet(&testImportKeyParamSet);\n    napi_value ret;\n    napi_create_int32(env, ohResult.errorCode, &ret);\n    return ret;\n}
