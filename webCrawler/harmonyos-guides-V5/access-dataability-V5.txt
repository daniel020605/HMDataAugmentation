访问DataAbility
访问DataAbility需导入基础依赖包，以及获取与DataAbility子模块通信的URI字符串。
其中，基础依赖包包括：
 @ohos.ability.featureAbility @ohos.data.dataAbility 
访问DataAbility的示例代码如下：
 创建工具接口类对象。 import featureAbility from '@ohos.ability.featureAbility';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport ability from '@ohos.ability.ability';\n// 作为参数传递的URI,与config中定义的URI的区别是多了一个\"/\",有三个\"/\"\nlet uri: string = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\nlet DAHelper: ability.DataAbilityHelper = featureAbility.acquireDataAbilityHelper(uri); 构建数据库相关的RDB数据。 import ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nlet valuesBucket_insert: rdb.ValuesBucket = { name: 'Rose', introduction: 'insert' };\nlet valuesBucket_update: rdb.ValuesBucket = { name: 'Rose', introduction: 'update' };\nlet crowd = new Array({ name: 'Rose', introduction: 'batchInsert_one' } as rdb.ValuesBucket,\n  { name: 'Rose', introduction: 'batchInsert_two' } as rdb.ValuesBucket);\nlet columnArray = new Array('id', 'name', 'introduction');\nlet predicates = new ohos_data_ability.DataAbilityPredicates(); 注：关于DataAbilityPredicates的详细内容，请参考DataAbility谓词。 调用insert方法向指定的DataAbility子模块插入数据。 import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\n\n// callback方式调用:\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private valuesBucket_insert: rdb.ValuesBucket = { name: 'Rose', introduction: 'insert' };\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // callback方式调用:\n              this.DAHelper.insert(this.uri, this.valuesBucket_insert, (error: BusinessError, data: number) => {\n                if (error && error.code !== 0) {\n                  promptAction.showToast({\n                    message: 'insert_failed_toast'\n                  });\n                } else {\n                  promptAction.showToast({\n                    message: 'insert_success_toast'\n                  });\n                }\n                hilog.info(domain, TAG, 'DAHelper insert result: ' + data + ', error: ' + JSON.stringify(error));\n              }\n              );\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private valuesBucket_insert: rdb.ValuesBucket = { name: 'Rose', introduction: 'insert' };\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // promise方式调用(await需要在async方法中使用):\n              this.DAHelper.insert(this.uri, this.valuesBucket_insert).then((datainsert) => {\n                promptAction.showToast({\n                  message: 'insert_success_toast'\n                });\n                hilog.info(domain, TAG, 'DAHelper insert result: ' + datainsert);\n              }).catch((error: BusinessError) => {\n                promptAction.showToast({\n                  message: 'insert_failed_toast'\n                });\n                hilog.error(domain, TAG, `DAHelper insert failed. Cause: ${error.message}`);\n              });\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} 调用delete方法删除DataAbility子模块中指定的数据。 import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // callback方式调用:\n              this.DAHelper.delete(this.uri, this.predicates, (error, data) => {\n                if (error && error.code !== 0) {\n                  promptAction.showToast({\n                    message: 'delete_failed_toast'\n                  });\n                } else {\n                  promptAction.showToast({\n                    message: 'delete_success_toast'\n                  });\n                }\n                hilog.info(domain, TAG, 'DAHelper delete result: ' + data + ', error: ' + JSON.stringify(error));\n              }\n              );\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // promise方式调用(await需要在async方法中使用):\n              this.DAHelper.delete(this.uri, this.predicates).then((datadelete) => {\n                promptAction.showToast({\n                  message: 'delete_success_toast'\n                });\n                hilog.info(domain, TAG, 'DAHelper delete result: ' + datadelete);\n              }).catch((error: BusinessError) => {\n                promptAction.showToast({\n                  message: 'delete_failed_toast'\n                });\n                hilog.error(domain, TAG, `DAHelper delete failed. Cause: ${error.message}`);\n              });\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} 调用update方法更新指定DataAbility子模块中的数据。 import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private valuesBucket_update: rdb.ValuesBucket = { name: 'Rose', introduction: 'update' };\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // callback方式调用:\n              this.predicates.equalTo('name', 'Rose');\n              this.DAHelper.update(this.uri, this.valuesBucket_update, this.predicates, (error, data) => {\n                if (error && error.code !== 0) {\n                  promptAction.showToast({\n                    message: 'update_failed_toast'\n                  });\n                } else {\n                  promptAction.showToast({\n                    message: 'update_success_toast'\n                  });\n                }\n                hilog.info(domain, TAG, 'DAHelper update result: ' + data + ', error: ' + JSON.stringify(error));\n              }\n              );\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private valuesBucket_update: rdb.ValuesBucket = { name: 'Rose', introduction: 'update' };\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // promise方式调用(await需要在async方法中使用):\n              this.predicates.equalTo('name', 'Rose');\n              this.DAHelper.update(this.uri, this.valuesBucket_update, this.predicates).then((dataupdate) => {\n                promptAction.showToast({\n                  message: 'update_success_toast'\n                });\n                hilog.info(domain, TAG, 'DAHelper update result: ' + dataupdate);\n              }).catch((error: BusinessError) => {\n                promptAction.showToast({\n                  message: 'update_failed_toast'\n                });\n                hilog.error(domain, TAG, `DAHelper update failed. Cause: ${error.message}`);\n              });\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} 调用query方法在指定的DataAbility子模块中查找数据。 import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private columnArray = new Array('id', 'name', 'introduction');\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // callback方式调用:\n              this.predicates.equalTo('name', 'Rose');\n              this.DAHelper.query(this.uri, this.columnArray, this.predicates, (error, data) => {\n                if (error && error.code !== 0) {\n                  promptAction.showToast({\n                    message: 'query_failed_toast'\n                  });\n                  hilog.error(domain, TAG, `DAHelper query failed. Cause: ${error.message}`);\n                } else {\n                  promptAction.showToast({\n                    message: 'query_success_toast'\n                  });\n                }\n                // ResultSet是一个数据集合的游标，默认指向第-1个记录，有效的数据从0开始。\n                while (data.goToNextRow()) {\n                  const id = data.getLong(data.getColumnIndex('id'));\n                  const name = data.getString(data.getColumnIndex('name'));\n                  const introduction = data.getString(data.getColumnIndex('introduction'));\n                  hilog.info(domain, TAG, `DAHelper query result:id = [${id}], name = [${name}], introduction = [${introduction}]`);\n                }\n                // 释放数据集的内存\n                data.close();\n              }\n              );\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private columnArray = new Array('id', 'name', 'introduction');\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // promise方式调用(await需要在async方法中使用):\n              this.predicates.equalTo('name', 'Rose');\n              this.DAHelper.query(this.uri, this.columnArray, this.predicates).then((dataquery) => {\n                promptAction.showToast({\n                  message: 'query_success_toast'\n                });\n                // ResultSet是一个数据集合的游标，默认指向第-1个记录，有效的数据从0开始。\n                while (dataquery.goToNextRow()) {\n                  const id = dataquery.getLong(dataquery.getColumnIndex('id'));\n                  const name = dataquery.getString(dataquery.getColumnIndex('name'));\n                  const introduction = dataquery.getString(dataquery.getColumnIndex('introduction'));\n                  hilog.info(domain, TAG, `DAHelper query result:id = [${id}], name = [${name}], introduction = [${introduction}]`);\n                }\n                // 释放数据集的内存\n                dataquery.close();\n              }).catch((error: BusinessError) => {\n                promptAction.showToast({\n                  message: 'query_failed_toast'\n                });\n                hilog.error(domain, TAG, `DAHelper query failed. Cause: ${error.message}`);\n              });\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} 调用batchInsert方法向指定的DataAbility子模块批量插入数据。 import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private crowd = new Array({ name: 'Rose', introduction: 'batchInsert_one' } as rdb.ValuesBucket,\n    { name: 'Rose', introduction: 'batchInsert_two' } as rdb.ValuesBucket);\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // callback方式调用:\n              this.DAHelper.batchInsert(this.uri, this.crowd, (error, data) => {\n                if (error && error.code !== 0) {\n                  promptAction.showToast({\n                    message: 'batchInsert_failed_toast'\n                  });\n                } else {\n                  promptAction.showToast({\n                    message: 'batchInsert_success_toast'\n                  });\n                }\n                hilog.info(domain, TAG, 'DAHelper batchInsert result: ' + data + ', error: ' + JSON.stringify(error));\n              }\n              );\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private crowd = new Array({ name: 'Rose', introduction: 'batchInsert_one' } as rdb.ValuesBucket,\n    { name: 'Rose', introduction: 'batchInsert_two' } as rdb.ValuesBucket);\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // promise方式调用(await需要在async方法中使用):\n              this.DAHelper.batchInsert(this.uri, this.crowd).then((databatchInsert) => {\n                promptAction.showToast({\n                  message: 'batchInsert_success_toast'\n                });\n                hilog.info(domain, TAG, 'DAHelper batchInsert result: ' + databatchInsert);\n              }).catch((error: BusinessError) => {\n                promptAction.showToast({\n                  message: 'batchInsert_failed_toast'\n                });\n                hilog.error(domain, TAG, `DAHelper batchInsert failed. Cause: ${error.message}`);\n              });\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} 调用executeBatch方法向指定的DataAbility子模块进行数据的批量处理。 import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // callback方式调用:\n              let operations: Array<ability.DataAbilityOperation> = [{\n                uri: this.uri,\n                type: featureAbility.DataAbilityOperationType.TYPE_INSERT,\n                valuesBucket: { name: 'Rose', introduction: 'executeBatch' },\n                predicates: this.predicates,\n                expectedCount: 0,\n                predicatesBackReferences: undefined,\n                interrupted: true,\n              }];\n              this.DAHelper.executeBatch(this.uri, operations, (error, data) => {\n                if (error && error.code !== 0) {\n                  promptAction.showToast({\n                    message: 'executeBatch_failed_toast'\n                  });\n                } else {\n                  promptAction.showToast({\n                    message: 'executeBatch_success_toast'\n                  });\n                }\n                hilog.info(domain, TAG, `DAHelper executeBatch, result: ` + JSON.stringify(data) + ', error: ' + JSON.stringify(error));\n              });\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n    }\n  } import ability from '@ohos.ability.ability';\nimport featureAbility from '@ohos.ability.featureAbility';\nimport { BusinessError } from '@ohos.base';\nimport ohos_data_ability from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport promptAction from '@ohos.promptAction';\nimport hilog from '@ohos.hilog';\n\nconst TAG: string = 'PageDataAbility';\nconst domain: number = 0xFF00;\n\n@Entry\n@Component\nstruct PageDataAbility {\n  private predicates = new ohos_data_ability.DataAbilityPredicates();\n  private uri = 'dataability:///com.samples.famodelabilitydevelop.DataAbility';\n  private DAHelper = featureAbility.acquireDataAbilityHelper(this.uri);\n\n  build() {\n    Column() {\n      // ...\n      List({ initialIndex: 0 }) {\n        // ...\n        ListItemGroup() {\n          ListItem() {\n            Flex({ justifyContent: FlexAlign.SpaceBetween, alignContent: FlexAlign.Center }) {\n              // ...\n            }\n            .onClick(() => {\n              // promise方式调用(await需要在async方法中使用):\n              let operations: Array<ability.DataAbilityOperation> = [{\n                uri: this.uri,\n                type: featureAbility.DataAbilityOperationType.TYPE_INSERT,\n                valuesBucket: { name: 'Rose', introduction: 'executeBatch' },\n                predicates: this.predicates,\n                expectedCount: 0,\n                predicatesBackReferences: undefined,\n                interrupted: true,\n              }];\n              this.DAHelper.executeBatch(this.uri, operations).then((dataquery) => {\n                promptAction.showToast({\n                  message: 'executeBatch_success_toast'\n                });\n                hilog.info(domain, TAG, 'DAHelper executeBatch result: ' + JSON.stringify(dataquery));\n              }).catch((error: BusinessError) => {\n                promptAction.showToast({\n                  message: 'executeBatch_failed_toast'\n                });\n                hilog.error(domain, TAG, `DAHelper executeBatch failed. Cause: ${error.message}`);\n              });\n            })\n          }\n          // ...\n        }\n        // ...\n      }\n      // ...\n    }\n    // ...\n  }\n} 
DataAbility的客户端的接口是由工具接口类对象DataAbilityHelper向外提供，相关接口可参考DataAbilityHelper模块。
