使用Image处理PixelMap数据
开发者可以通过本指导了解如何使用Native Image的接口。
开发步骤
添加依赖
在进行应用开发之前，开发者需要打开native工程的src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加image的libace_napi.z.so、libpixelmap_ndk.z.so以及日志依赖libhilog_ndk.z.so。
target_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so libpixelmap_ndk.z.so)
添加接口映射
打开src/main/cpp/hello.cpp文件，在Init函数中添加接口映射如下：
EXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"createPixelMapTest\", nullptr, CreatePixelMapTest, nullptr, nullptr, nullptr, napi_default, nullptr },\n        { \"createAlphaPixelMap\", nullptr, CreateAlphaPixelMap, nullptr, nullptr, nullptr, napi_default, nullptr },\n        { \"transform\", nullptr, Transform, nullptr, nullptr, nullptr, napi_default, nullptr },\n    };\n\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END
Native接口调用
具体接口说明请参考API文档。
在hello.cpp文件中获取JS的资源对象，并转为Native的资源对象，即可调用Native接口，调用方式示例代码如下：
添加引用文件
#include <multimedia/image_framework/image_mdk_common.h>\n#include <multimedia/image_framework/image_pixel_map_mdk.h>\n#include <stdlib.h>
 创建一个 PixelMap 对象。 napi_value CreatePixelMapTest(napi_env env, napi_callback_info info) {\n    napi_value udfVar = nullptr;\n    napi_value pixelMap = nullptr;\n\n    struct OhosPixelMapCreateOps createOps;\n    createOps.width = 4;\n    createOps.height = 6;\n    createOps.pixelFormat = 4;\n    createOps.alphaType = 0;\n    size_t bufferSize = createOps.width * createOps.height * 4;\n    void *buff = malloc(bufferSize);\n    if (buff == nullptr) {\n        return udfVar;\n    }\n\n    char *cc = (char *)buff;\n    for (int i = 0; i < 96; i++) {\n        *(cc++) = (char)i;\n    }\n    int32_t res = OH_PixelMap_CreatePixelMap(env, createOps, (uint8_t *)buff, bufferSize, &pixelMap);\n    free(buff);\n    if (res != IMAGE_RESULT_SUCCESS || pixelMap == nullptr) {\n        return udfVar;\n    }\n    return pixelMap;\n} 根据Alpha通道的信息，来生成一个仅包含Alpha通道信息的 PixelMap 对象。 napi_value CreateAlphaPixelMap(napi_env env, napi_callback_info info) {\n    napi_value udfVar = nullptr;\n    napi_value thisVar = nullptr;\n    napi_value argValue[1] = {0};\n    size_t argCount = 1;\n\n    napi_value alphaPixelMap = nullptr;\n\n    napi_get_undefined(env, &udfVar);\n\n    if (napi_get_cb_info(env, info, &argCount, argValue, &thisVar, nullptr) != napi_ok || argCount < 1 ||\n        argValue[0] == nullptr) {\n        return udfVar;\n    }\n    int32_t res = OH_PixelMap_CreateAlphaPixelMap(env, argValue[0], &alphaPixelMap);\n    if (res != IMAGE_RESULT_SUCCESS || alphaPixelMap == nullptr) {\n        return udfVar;\n    }\n    return alphaPixelMap;\n} 对 PixelMap 数据进行处理。 napi_value Transform(napi_env env, napi_callback_info info) {\n    napi_value thisVar = nullptr;\n    napi_value argValue[1] = {0};\n    size_t argCount = 1;\n\n    if (napi_get_cb_info(env, info, &argCount, argValue, &thisVar, nullptr) != napi_ok || argCount < 1 ||\n        argValue[0] == nullptr) {\n        return nullptr;\n    }\n    napi_value result = nullptr;\n    napi_get_undefined(env, &result);\n    \n    // 初始化NativePixelMap对象。\n    NativePixelMap *native = OH_PixelMap_InitNativePixelMap(env, argValue[0]);\n    if (native == nullptr) {\n        return result;\n    }\n\n    // 获取图片信息。\n    struct OhosPixelMapInfos pixelMapInfo;\n    OH_PixelMap_GetImageInfo(native, &pixelMapInfo);\n\n    // 获取PixelMap对象每行字节数。\n    int32_t rowBytes;\n    OH_PixelMap_GetBytesNumberPerRow(native, &rowBytes);\n\n    // 获取PixelMap对象是否可编辑的状态。\n    int32_t editable = 0;\n    OH_PixelMap_GetIsEditable(native, &editable);\n\n    // 获取PixelMap对象是否支持Alpha通道。\n    int32_t supportAlpha = 0;\n    OH_PixelMap_IsSupportAlpha(native, &supportAlpha);\n\n    // 设置PixelMap对象的Alpha通道。\n    int32_t alphaAble = 0;\n    OH_PixelMap_SetAlphaAble(native, alphaAble);\n\n    // 获取PixelMap对象像素密度。\n    int32_t densityG;\n    OH_PixelMap_GetDensity(native, &densityG);\n\n    // 设置PixelMap对象像素密度。\n    int32_t densityS = 100;\n    OH_PixelMap_SetDensity(native, densityS);\n\n    // 设置PixelMap对象的透明度。\n    float opacity = 0.5;\n    OH_PixelMap_SetOpacity(native, opacity);\n\n    // 设置缩放比例。\n    // scaleX: 宽为原来的0.5。\n    // scaleY: 高为原来的0.5。\n    float scaleX = 0.5;\n    float scaleY = 0.5;\n    OH_PixelMap_Scale(native, scaleX, scaleY);\n\n    // 设置偏移。\n    // translateX: 向下偏移50。\n    // translateY: 向右偏移50。\n    float translateX = 50;\n    float translateY = 50;\n    OH_PixelMap_Translate(native, translateX, translateY);\n\n    // 设置顺时针旋转90度。\n    float angle = 90;\n    OH_PixelMap_Rotate(native, angle);\n\n    // 设置翻转\n    // flipX: 水平翻转，0为不翻转，1为翻转。\n    // flipY: 垂直翻转，0为不翻转，1为翻转。\n    int32_t flipX = 0;\n    int32_t flipY = 1;\n    OH_PixelMap_Flip(native, flipX, flipY);\n\n    // 设置裁剪区域。\n    // cropX: 裁剪起始点横坐标。\n    // cropY: 裁剪起始点纵坐标。\n    // cropH: 裁剪高度10，方向为从上往下（裁剪后的图片高度为10）。\n    // cropW: 裁剪宽度10，方向为从左到右（裁剪后的图片宽度为10）。\n    int32_t cropX = 1;\n    int32_t cropY = 1;\n    int32_t cropW = 10;\n    int32_t cropH = 10;\n    OH_PixelMap_Crop(native, cropX, cropY, cropW, cropH);\n\n    // 获取PixelMap对象数据的内存地址，并锁定该内存。\n    void *pixelAddr = nullptr;\n    OH_PixelMap_AccessPixels(native, &pixelAddr);\n\n    // 释放PixelMap对象数据的内存锁。\n    OH_PixelMap_UnAccessPixels(native);\n\n    return result;\n} 
JS侧调用
 打开src\\main\\cpp\\types\\libentry\\index.d.ts（其中libentry根据工程名生成），导入如下引用文件: import { image } from '@kit.ImageKit';\n\nexport const createPixelMapTest: () => image.PixelMap;\nexport const transform: (a: image.PixelMap) => void; 打开src\\main\\ets\\pages\\index.ets, 导入\"libentry.so\"(根据工程名生成)，调用Native接口，传入JS的资源对象。示例如下: import testNapi from 'libentry.so';\nimport { image } from '@kit.ImageKit';\n\n@Entry\n@Component\nstruct Index {\n@State _pixelMap : image.PixelMap | undefined = undefined;\n\nbuild() {\n    Row() {\n        Column() {\n            Button(\"PixelMap\")\n            .width(100)\n            .height(100)\n            .onClick(() => {\n                console.log(\"com.example.native_ndk_api10 button click in\");\n                this._pixelMap = testNapi.createPixelMapTest();\n                testNapi.transform(this._pixelMap);\n            })\n            Image(this._pixelMap)\n            .width(500)\n            .height(500)\n            .objectFit(ImageFit.Cover)\n            .border({width: 1, color: Color.Blue})\n            }\n            .width('100%')\n        }\n        .height('100%')\n    }\n} 
