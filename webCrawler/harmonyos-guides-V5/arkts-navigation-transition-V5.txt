导航转场
导航转场是页面的路由转场方式，也就是一个界面消失，另外一个界面出现的动画效果。开发者也可以自定义导航转场的动画效果，具体请参考Navigation示例3。
导航转场推荐使用Navigation组件实现，可搭配NavDestination组件实现导航功能。
完整的代码示例和效果如下。
创建导航页
实现步骤为：
1.使用Navigation创建导航主页，并创建路由栈NavPathStack以此来实现不同页面之间的跳转。
2.在Navigation中增加List组件，来定义导航主页中不同的一级界面。
3.在List内的组件添加onClick方法，并在其中使用路由栈NavPathStack的pushPathByName方法，使组件可以在点击之后从当前页面跳转到输入参数name在路由表内对应的页面。
//PageOne.ets\n@Entry\n@Component\nstruct NavigationDemo {\n  @Provide('pathInfos') pathInfos: NavPathStack = new NavPathStack();\n  private listArray: Array<string> = ['WLAN', 'Bluetooth', 'Personal Hotpot', 'Connect & Share'];\n\n  build() {\n    Column() {\n      Navigation(this.pathInfos) {\n        TextInput({ placeholder: '输入关键字搜索' })\n          .width('90%')\n          .height(40)\n          .margin({ bottom: 10 })\n\n        // 通过List定义导航的一级界面\n        List({ space: 12, initialIndex: 0 }) {\n          ForEach(this.listArray, (item: string) => {\n            ListItem() {\n              Row() {\n                Row() {\n                  Text(`${item.slice(0, 1)}`)\n                    .fontColor(Color.White)\n                    .fontSize(14)\n                    .fontWeight(FontWeight.Bold)\n                }\n                .width(30)\n                .height(30)\n                .backgroundColor('#a8a8a8')\n                .margin({ right: 20 })\n                .borderRadius(20)\n                .justifyContent(FlexAlign.Center)\n\n                Column() {\n                  Text(item)\n                    .fontSize(16)\n                    .margin({ bottom: 5 })\n                }\n                .alignItems(HorizontalAlign.Start)\n\n                Blank()\n\n                Row()\n                  .width(12)\n                  .height(12)\n                  .margin({ right: 15 })\n                  .border({\n                    width: { top: 2, right: 2 },\n                    color: 0xcccccc\n                  })\n                  .rotate({ angle: 45 })\n              }\n              .borderRadius(15)\n              .shadow({ radius: 100, color: '#ededed' })\n              .width('90%')\n              .alignItems(VerticalAlign.Center)\n              .padding({ left: 15, top: 15, bottom: 15 })\n              .backgroundColor(Color.White)\n            }\n            .width('100%')\n            .onClick(() => {\n              this.pathInfos.pushPathByName(`${item}`, '详情页面参数')//将name指定的NaviDestination页面信息入栈,传递的参数为param\n            })\n          }, (item: string): string => item)\n        }\n        .listDirection(Axis.Vertical)\n        .edgeEffect(EdgeEffect.Spring)\n        .sticky(StickyStyle.Header)\n        .chainAnimation(false)\n        .width('100%')\n      }\n      .width('100%')\n      .mode(NavigationMode.Auto)\n      .title('设置') // 设置标题文字\n    }\n    .size({ width: '100%', height: '100%' })\n    .backgroundColor(0xf4f4f5)\n  }\n}
创建导航子页
导航子页1实现步骤为：
1.使用NavDestination，来创建导航子页CommonPage。
2.创建路由栈NavPathStack并在onReady时进行初始化，获取当前所在的页面栈，以此来实现不同页面之间的跳转。
3.在子页面内的组件添加onClick，并在其中使用路由栈NavPathStack的pop方法，使组件可以在点击之后弹出路由栈栈顶元素实现页面的返回。
//PageOne.ets\n\n@Builder\nexport function MyCommonPageBuilder(name: string, param: string) {\n  MyCommonPage({ name: name, value: param })\n}\n\n@Component\nexport struct MyCommonPage {\n  pathInfos: NavPathStack = new NavPathStack();\n  name: String = '';\n  @State value: String = '';\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(`${this.name}设置页面`)\n          .width('100%')\n          .fontSize(20)\n          .fontColor(0x333333)\n          .textAlign(TextAlign.Center)\n          .textShadow({\n            radius: 2,\n            offsetX: 4,\n            offsetY: 4,\n            color: 0x909399\n          })\n          .padding({ top: 30 })\n        Text(`${JSON.stringify(this.value)}`)\n          .width('100%')\n          .fontSize(18)\n          .fontColor(0x666666)\n          .textAlign(TextAlign.Center)\n          .padding({ top: 45 })\n        Button('返回')\n          .width('50%')\n          .height(40)\n          .margin({ top: 50 })\n          .onClick(() => {\n            //弹出路由栈栈顶元素，返回上个页面\n            this.pathInfos.pop();\n          })\n      }\n      .size({ width: '100%', height: '100%' })\n    }.title(`${this.name}`)\n    .onReady((ctx: NavDestinationContext) => {\n      //NavDestinationContext获取当前所在的页面栈\n      this.pathInfos = ctx.pathStack;\n    }) \n\n  }\n}\n
导航子页2实现步骤为：
1.使用NavDestination，来创建导航子页SharePage。
2.创建路由栈NavPathStack并在onReady时进行初始化，获取当前所在的页面栈，以此来实现不同页面之间的跳转。
3.在子页面内的组件添加onClick，并在其中使用路由栈NavPathStack的pushPathByName方法，使组件可以在点击之后从当前页面跳转到输入参数name在路由表内对应的页面。
//PageTwo.ets\n@Builder\nexport function MySharePageBuilder(name: string, param: string) {\n  MySharePage({ name: name })\n}\n\n@Component\nexport struct MySharePage {\n  pathInfos: NavPathStack = new NavPathStack();\n  name: String = '';\n  private listArray: Array<string> = ['Projection', 'Print', 'VPN', 'Private DNS', 'NFC'];\n\n  build() {\n    NavDestination() {\n      Column() {\n        List({ space: 12, initialIndex: 0 }) {\n          ForEach(this.listArray, (item: string) => {\n            ListItem() {\n              Row() {\n                Row() {\n                  Text(`${item.slice(0, 1)}`)\n                    .fontColor(Color.White)\n                    .fontSize(14)\n                    .fontWeight(FontWeight.Bold)\n                }\n                .width(30)\n                .height(30)\n                .backgroundColor('#a8a8a8')\n                .margin({ right: 20 })\n                .borderRadius(20)\n                .justifyContent(FlexAlign.Center)\n\n                Column() {\n                  Text(item)\n                    .fontSize(16)\n                    .margin({ bottom: 5 })\n                }\n                .alignItems(HorizontalAlign.Start)\n\n                Blank()\n\n                Row()\n                  .width(12)\n                  .height(12)\n                  .margin({ right: 15 })\n                  .border({\n                    width: { top: 2, right: 2 },\n                    color: 0xcccccc\n                  })\n                  .rotate({ angle: 45 })\n              }\n              .borderRadius(15)\n              .shadow({ radius: 100, color: '#ededed' })\n              .width('90%')\n              .alignItems(VerticalAlign.Center)\n              .padding({ left: 15, top: 15, bottom: 15 })\n              .backgroundColor(Color.White)\n            }\n            .width('100%')\n            .onClick(() => {\n              this.pathInfos.pushPathByName(`${item}`, '页面设置参数')\n            })\n          }, (item: string): string => item)\n        }\n        .listDirection(Axis.Vertical)\n        .edgeEffect(EdgeEffect.Spring)\n        .sticky(StickyStyle.Header)\n        .width('100%')\n      }\n      .size({ width: '100%', height: '100%' })\n    }.title(`${this.name}`)\n    .onReady((ctx: NavDestinationContext) => {\n      //NavDestinationContext获取当前所在的页面栈\n      this.pathInfos = ctx.pathStack;\n    }) \n  }\n}
创建路由跳转
实现步骤为：
1.工程配置文件module.json5中配置 {\"routerMap\": \"$profile:route_map\"}。
2.route_map.json中配置全局路由表，路由栈NavPathStack可根据路由表中的name将对应页面信息入栈。
{\n  \"routerMap\" : [\n    {\n      \"name\" : \"WLAN\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    },\n    {\n      \"name\" : \"Bluetooth\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    },\n    {\n      \"name\" : \"Personal Hotpot\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    },\n    {\n      \"name\" : \"Connect & Share\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageTwo.ets\",\n      \"buildFunction\" : \"MySharePageBuilder\"\n    },\n    {\n      \"name\" : \"Projection\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    },\n    {\n      \"name\" : \"Print\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    },\n    {\n      \"name\" : \"VPN\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    },\n    {\n      \"name\" : \"Private DNS\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    },\n    {\n      \"name\" : \"NFC\",\n      \"pageSourceFile\"  : \"src/main/ets/pages/PageOne.ets\",\n      \"buildFunction\" : \"MyCommonPageBuilder\"\n    }\n  ]\n}
