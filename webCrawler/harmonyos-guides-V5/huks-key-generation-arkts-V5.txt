生成密钥(ArkTS)
以生成DH密钥为例，生成随机密钥。具体的场景介绍及支持的算法规格，请参考密钥生成支持的算法。
密钥别名中禁止包含个人数据等敏感信息。
开发步骤
 指定待生成的密钥别名keyAlias。  密钥别名的最大长度为64字节。 对于不同业务间生成的密钥，HUKS将基于业务身份信息进行存储路径隔离，不会因为和其他业务密钥同名导致冲突。  初始化密钥属性集。通过HuksParam封装密钥属性，搭配Array组成密钥属性集，并赋值给HuksOptions中的properties字段。 密钥属性集中必须包含HuksKeyAlg、HuksKeySize、HuksKeyPurpose属性，即必传TAG，HUKS_TAG_ALGORITHM、HUKS_TAG_PURPOSE、HUKS_TAG_KEY_SIZE。注：一个密钥只能有一类PURPOSE，并且，生成密钥时指定的用途要与使用时的方式一致，否则会导致异常，请参考密钥用途。 调用huks.generateKeyItem，传入密钥别名和密钥属性集，生成密钥。 
如果业务再次使用相同别名调用HUKS生成密钥，HUKS将生成新密钥并直接覆盖历史的密钥文件。
/* 以下以生成DH密钥为例 */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\n/* 1.确定密钥别名 */\nlet keyAlias = 'dh_key';\n/* 2.初始化密钥属性集 */\nlet properties1: Array<huks.HuksParam> = [\n  {\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_DH\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_AGREE\n  },\n  {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_DH_KEY_SIZE_2048\n  }\n];\nlet huksOptions: huks.HuksOptions = {\n  properties: properties1,\n  inData: new Uint8Array(new Array())\n}\n\n/* 3.生成密钥 */\nfunction generateKeyItem(keyAlias: string, huksOptions: huks.HuksOptions) {\n  return new Promise<void>((resolve, reject) => {\n    try {\n      huks.generateKeyItem(keyAlias, huksOptions, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    } catch (error) {\n      throw (error as Error);\n    }\n  });\n}\n\nasync function publicGenKeyFunc(keyAlias: string, huksOptions: huks.HuksOptions) {\n  console.info(`enter promise generateKeyItem`);\n  try {\n    await generateKeyItem(keyAlias, huksOptions)\n      .then((data) => {\n        console.info(`promise: generateKeyItem success, data = ${JSON.stringify(data)}`);\n      })\n      .catch((error: Error) => {\n        console.error(`promise: generateKeyItem failed, ${JSON.stringify(error)}`);\n      });\n  } catch (error) {\n    console.error(`promise: generateKeyItem input arg invalid, ` + JSON.stringify(error));\n  }\n}\n\nasync function TestGenKey() {\n  await publicGenKeyFunc(keyAlias, huksOptions);\n}
