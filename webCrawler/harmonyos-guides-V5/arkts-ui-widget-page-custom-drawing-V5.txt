卡片使用自定义绘制能力
ArkTS卡片开放了自定义绘制的能力，在卡片上可以通过Canvas组件创建一块画布，然后通过CanvasRenderingContext2D对象在画布上进行自定义图形的绘制，如下示例代码实现了在画布的中心绘制了一个笑脸。
@Entry\n@Component\nstruct CustomCanvasDrawingCard {\n  private canvasWidth: number = 0;\n  private canvasHeight: number = 0;\n  // 初始化CanvasRenderingContext2D和RenderingContextSettings\n  private settings: RenderingContextSettings = new RenderingContextSettings(true);\n  private context: CanvasRenderingContext2D = new CanvasRenderingContext2D(this.settings);\n\n  build() {\n    Column() {\n      Row() {\n        Canvas(this.context)\n          .width('100%')\n          .height('100%')\n          .onReady(() => {\n            // 在onReady回调中获取画布的实际宽和高\n            this.canvasWidth = this.context.width;\n            this.canvasHeight = this.context.height;\n            // 绘制画布的背景\n            this.context.fillStyle = '#EEF0FF';\n            this.context.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n            // 在画布的中心绘制一个圆\n            this.context.beginPath();\n            let radius = this.context.width / 3;\n            let circleX = this.context.width / 2;\n            let circleY = this.context.height / 2;\n            this.context.moveTo(circleX - radius, circleY);\n            this.context.arc(circleX, circleY, radius, 2 * Math.PI, 0, true);\n            this.context.closePath();\n            this.context.fillStyle = '#5A5FFF';\n            this.context.fill();\n            // 绘制笑脸的左眼\n            let leftR = radius / 13;\n            let leftX = circleX - (radius / 2.3);\n            let leftY = circleY - (radius / 4.5);\n            this.context.beginPath();\n            this.context.arc(leftX, leftY, leftR, 0, 2 * Math.PI, true);\n            this.context.closePath();\n            this.context.strokeStyle = '#FFFFFF';\n            this.context.lineWidth = 15;\n            this.context.stroke();\n            // 绘制笑脸的右眼\n            let rightR = radius / 13;\n            let rightX = circleX + (radius / 2.3);\n            let rightY = circleY - (radius / 4.5);\n            this.context.beginPath();\n            this.context.arc(rightX, rightY, rightR, 0, 2 * Math.PI, true);\n            this.context.closePath();\n            this.context.strokeStyle = '#FFFFFF';\n            this.context.lineWidth = 15;\n            this.context.stroke();\n            // 绘制笑脸的鼻子\n            let startX = circleX;\n            let startY = circleY - 20;\n            this.context.beginPath();\n            this.context.moveTo(startX, startY);\n            this.context.lineTo(startX - 8, startY + 40);\n            this.context.lineTo(startX + 8, startY + 40);\n            this.context.strokeStyle = '#FFFFFF';\n            this.context.lineWidth = 15;\n            this.context.lineCap = 'round';\n            this.context.lineJoin = 'round';\n            this.context.stroke();\n            // 绘制笑脸的嘴巴\n            let mouthR = radius / 2;\n            let mouthX = circleX;\n            let mouthY = circleY + 10;\n            this.context.beginPath();\n            this.context.arc(mouthX, mouthY, mouthR, Math.PI / 1.4, Math.PI / 3.4, true);\n            this.context.strokeStyle = '#FFFFFF';\n            this.context.lineWidth = 15;\n            this.context.stroke();\n            this.context.closePath();\n          })\n      }\n    }.height('100%').width('100%')\n  }\n}
运行效果如下图所示。
