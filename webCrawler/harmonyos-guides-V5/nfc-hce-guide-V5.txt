HCE卡模拟开发指南
简介
近场通信(Near Field Communication，NFC)是一种短距高频的无线电技术，在13.56MHz频率运行，通信距离一般在10厘米距离内。HCE(Host Card Emulation)，称为基于主机的卡模拟，表示不依赖安全单元芯片，电子设备上的应用程序模拟NFC卡片和NFC读卡器通信，实现NFC刷卡业务。
场景介绍
应用程序模拟NFC卡片，和NFC读卡器通信完成NFC刷卡业务。从使用场景上，可以分成HCE应用前台刷卡，和HCE应用后台刷卡。
 HCE应用前台刷卡 前台刷卡是指在触碰NFC读卡器之前，用户先在电子设备上打开特定的应用程序，用户明确想使用所打开的应用程序和NFC读卡器进行刷卡操作。用户打开应用程序在前台，并且进入应用的刷卡页面之后，电子设备触碰NFC读卡器，只会把刷卡交易数据分发给前台应用。 HCE应用后台刷卡 后台刷卡是指不打开特定的HCE应用程序，电子设备触碰NFC读卡器后，根据NFC读卡器选择的应用ID（AID）匹配到HCE应用程序，并自动和匹配的HCE应用程序通信完成刷卡交易。如果匹配到多个HCE应用程序时，说明存在冲突，需要用户打开指定的应用才能完成刷卡。 HCE应用刷卡的约束条件 1、不管是HCE应用前台还是后台刷卡，能够完成HCE应用程序NFC刷卡的条件是电子设备需要亮屏解锁。 2、module.json5文件中需要声明nfc卡模拟权限，具体见示例。 3、前台应用时需要调用start和stop注册和去注册AID，具体见示例。 
接口说明
NFC卡模拟完整的JS API说明以及实例代码请参考：NFC卡模拟接口。
完成HCE卡模拟功能，可能使用到下面的接口。
开发步骤
[h2]HCE应用前台刷卡
 在module.json5文件中声明NFC卡模拟权限，以及声明HCE特定的action。 import需要的NFC卡模拟模块和其他相关的模块。 判断设备是否支持NFC能力和HCE能力。 使能前台HCE应用程序优先处理NFC刷卡功能。 订阅HCE APDU数据的接收。 完成HCE刷卡APDU数据的接收和发送。 退出应用程序NFC刷卡页面时，退出前台优先功能。 
    \"abilities\": [\n      {\n        \"name\": \"EntryAbility\",\n        \"srcEntry\": \"./ets/entryability/EntryAbility.ts\",\n        \"description\": \"$string:EntryAbility_desc\",\n        \"icon\": \"$media:icon\",\n        \"label\": \"$string:EntryAbility_label\",\n        \"startWindowIcon\": \"$media:icon\",\n        \"startWindowBackground\": \"$color:start_window_background\",\n        \"exported\": true,\n        \"skills\": [\n          {\n            \"entities\": [\n              \"entity.system.home\"\n            ],\n            \"actions\": [\n              \"action.system.home\",\n\n              // Add the nfc card emulation action to filter out for this application.\n              \"ohos.nfc.cardemulation.action.HOST_APDU_SERVICE\"\n            ]\n          }\n        ]\n      }\n    ],\n    \"requestPermissions\": [\n      {\n        // Add the permission for nfc card emulation.\n        \"name\": \"ohos.permission.NFC_CARD_EMULATION\",\n        \"reason\": \"$string:app_name\",\n      }\n    ]
import { cardEmulation } from '@kit.ConnectivityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit';\nimport { AbilityConstant, UIAbility, Want, bundleManager } from '@kit.AbilityKit';\n\nlet hceElementName: bundleManager.ElementName;\nlet hceService: cardEmulation.HceService;\n\nconst hceCommandCb : AsyncCallback<number[]> = (error : BusinessError, hceCommand : number[]) => {\n  if (!error) {\n    if (hceCommand == null || hceCommand == undefined) {\n      hilog.error(0x0000, 'testTag', 'hceCommandCb has invalid hceCommand.');\n      return;\n    }\n    // check the command, then transmit the response.\n    hilog.info(0x0000, 'testTag', 'hceCommand = %{public}s', JSON.stringify(hceCommand));\n    let responseData = [0x90, 0x00]; // change the response depend on different received command.\n    hceService.transmit(responseData).then(() => {\n      hilog.info(0x0000, 'testTag', 'hceService transmit Promise success.');\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, 'testTag', 'hceService transmit Promise error = %{public}s', JSON.stringify(err));\n    });\n  } else {\n    hilog.error(0x0000, 'testTag', 'hceCommandCb error %{public}s', JSON.stringify(error));\n  }\n}\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n\n    // 判断设备是否支持NFC能力和HCE能力\n    if (!canIUse(\"SystemCapability.Communication.NFC.Core\")) {\n      hilog.error(0x0000, 'testTag', 'nfc unavailable.');\n      return;\n    }\n    if (!cardEmulation.hasHceCapability()) {\n      hilog.error(0x0000, 'testTag', 'hce unavailable.');\n      return;\n    }\n\n    hceElementName = {\n      bundleName: want.bundleName ?? '',\n      abilityName: want.abilityName ?? '',\n      moduleName: want.moduleName,\n    }\n    hceService = new cardEmulation.HceService();\n  }\n\n  onForeground() {\n    // Ability has brought to foreground\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n    if (hceElementName != undefined) {\n      try {\n        // 调用接口使能前台HCE应用程序优先处理NFC刷卡功能\n        let aidList = [\"A0000000031010\", \"A0000000031011\"]; // change aid tobe correct.\n        hceService.start(hceElementName, aidList);\n\n        // 订阅HCE APDU数据的接收\n        hceService.on('hceCmd', hceCommandCb);\n      } catch (error) {\n        hilog.error(0x0000, 'testTag', 'hceService.start error = %{public}s', JSON.stringify(error));\n      }\n    }\n  }\n\n  onBackground() {\n    // Ability has back to background\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');\n    // 退出应用程序NFC标签页面时，调用tag模块退出前台优先功能\n    if (hceElementName != undefined) {\n      try {\n        hceService.stop(hceElementName);\n      } catch (error) {\n        hilog.error(0x0000, 'testTag', 'hceService.stop error = %{public}s', JSON.stringify(error));\n      }\n    }\n  }\n}
[h2]HCE应用后台刷卡
 在module.json5文件中声明NFC卡模拟权限，声明HCE特定的action，声明应用能够处理的AID。 import需要的NFC卡模拟模块和其他相关的模块。 判断设备是否支持NFC能力和HCE能力。 订阅HCE APDU数据的接收。 完成HCE刷卡APDU数据的接收和发送。 退出应用程序时，退出订阅功能。 
    \"abilities\": [\n      {\n        \"name\": \"EntryAbility\",\n        \"srcEntry\": \"./ets/entryability/EntryAbility.ts\",\n        \"description\": \"$string:EntryAbility_desc\",\n        \"icon\": \"$media:icon\",\n        \"label\": \"$string:EntryAbility_label\",\n        \"startWindowIcon\": \"$media:icon\",\n        \"startWindowBackground\": \"$color:start_window_background\",\n        \"exported\": true,\n        \"skills\": [\n          {\n            \"entities\": [\n              \"entity.system.home\"\n            ],\n            \"actions\": [\n              \"action.system.home\",\n\n              // Add the nfc card emulation action to filter out for this application.\n              \"ohos.nfc.cardemulation.action.HOST_APDU_SERVICE\"\n            ]\n          }\n        ],\n        \"metadata\": [\n          {\n            \"name\": \"payment-aid\",\n            \"value\": \"A0000000031010\" // change it tobe correct\n          },\n          {\n            \"name\": \"other-aid\",\n            \"value\": \"A0000000031011\" // change it tobe correct\n          }\n        ]\n      }\n    ],\n    \"requestPermissions\": [\n      {\n        // Add the permission for nfc card emulation.\n        \"name\": \"ohos.permission.NFC_CARD_EMULATION\",\n        \"reason\": \"$string:app_name\",\n      }\n    ]
import { cardEmulation } from '@kit.ConnectivityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { AsyncCallback } from '@kit.BasicServicesKit';\nimport { AbilityConstant, UIAbility, Want, bundleManager } from '@kit.AbilityKit';\n\nlet hceElementName : bundleManager.ElementName;\nlet hceService: cardEmulation.HceService;\n\nconst hceCommandCb : AsyncCallback<number[]> = (error : BusinessError, hceCommand : number[]) => {\n  if (!error) {\n    if (hceCommand == null || hceCommand == undefined) {\n      hilog.error(0x0000, 'testTag', 'hceCommandCb has invalid hceCommand.');\n      return;\n    }\n\n    // check the command, then transmit the response.\n    hilog.info(0x0000, 'testTag', 'hceCommand = %{public}s', JSON.stringify(hceCommand));\n    let responseData = [0x90, 0x00]; // change the response depend on different received command.\n    hceService.transmit(responseData).then(() => {\n      hilog.info(0x0000, 'testTag', 'hceService transmit Promise success.');\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, 'testTag', 'hceService transmit Promise error = %{public}s', JSON.stringify(err));\n    });\n  } else {\n    hilog.error(0x0000, 'testTag', 'hceCommandCb error %{public}s', JSON.stringify(error));\n  }\n}\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');\n\n    // 判断设备是否支持NFC能力和HCE能力\n    if (!canIUse(\"SystemCapability.Communication.NFC.Core\")) {\n      hilog.error(0x0000, 'testTag', 'nfc unavailable.');\n      return;\n    }\n    if (!cardEmulation.hasHceCapability()) {\n      hilog.error(0x0000, 'testTag', 'hce unavailable.');\n      return;\n    }\n\n    hceElementName = {\n      bundleName: want.bundleName ?? '',\n      abilityName: want.abilityName ?? '',\n      moduleName: want.moduleName,\n    }\n    hceService = new cardEmulation.HceService();\n    hceService.on('hceCmd', hceCommandCb);\n  }\n\n  onForeground() {\n    // Ability has brought to foreground\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');\n  }\n\n  onDestroy() {\n    // Ability has back to destroy\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');\n    // 退出应用程序NFC标签页面时，调用tag模块退出前台优先功能\n    if (hceElementName != undefined) {\n      try {\n        hceService.stop(hceElementName);\n      } catch (error) {\n        hilog.error(0x0000, 'testTag', 'hceService.stop error = %{public}s', JSON.stringify(error));\n      }\n    }\n  }\n}
