stepper开发指导
当一个任务需要多个步骤时，可以使用stepper组件展示当前进展。具体用法请参考stepper API。
创建stepper组件
在pages/index目录下的hml文件中创建一个stepper组件。
<!-- xxx.hml -->\n<div class=\"container\"> \n <stepper>    \n   <stepper-item>     \n     <text>Step 1</text>\n   </stepper-item> \n   <stepper-item>     \n     <text>Step 2</text>\n   </stepper-item> \n </stepper> \n</div>
/* xxx.css */\n.container {\n  width:100%;\n  height:100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}\ntext{\n  width: 100%;\n  height: 100%;\n  text-align: center;\n}
设置index属性
页面默认显示索引值为index的步骤。
<!-- xxx.hml -->\n<div class=\"container\"> \n <stepper index=\"2\">    \n   <stepper-item>     \n     <text>stepper-item1</text>\n   </stepper-item> \n   <stepper-item>     \n     <text>stepper-item2</text>\n   </stepper-item> \n   <stepper-item>     \n     <text>stepper-item3</text>\n   </stepper-item> \n  </stepper> \n</div>
/* xxx.css */\n.container {\n  width:100%;\n  height:100%;\n  flex-direction: column;\n  background-color: #F1F3F5;\n}\ntext{\n  width: 100%;\n  height: 100%;\n  text-align: center;\n}
通过设置label属性，自定义stepper-item的提示按钮。
<!-- xxx.hml -->\n<div class=\"container\"> \n <stepper index=\"1\">    \n   <stepper-item label=\"{{label_1}}\">     \n     <text>stepper-item1</text>\n   </stepper-item> \n   <stepper-item label=\"{{label_2}}\">     \n     <text>stepper-item2</text>\n   </stepper-item> \n   <stepper-item label=\"{{label_3}}\">     \n     <text>stepper-item3</text>\n   </stepper-item>\n   <stepper-item>     \n     <text>stepper-item4</text>\n   </stepper-item> \n </stepper> \n</div>
/* xxx.css */\n.container {  \n  width:100%;\n  height:100%;\n  flex-direction: column;\n  background-color: #F1F3F5;\n}\ntext{\n  width: 100%;\n  height: 100%;\n  text-align: center;\n}
// xxx.js\nexport default { \n  data: {\n    label_1:{\n      nextLabel: 'NEXT',      \n      status: 'normal'    \n    },\n    label_2:{\n      prevLabel: 'BACK',\n      nextLabel: 'NEXT',\n      status: 'normal'\n    },\n    label_3:{\n      prevLabel: 'BACK',\n      nextLabel: 'END',\n      status: 'disabled'\n    },\n  },\n}
设置样式
stepper组件默认填充父容器，通过border和background-color设置边框、背景色。
<!-- xxx.hml -->\n<div class=\"container\" > \n  <div class=\"stepperContent\">\n    <stepper class=\"stepperClass\">    \n      <stepper-item>     \n        <text>stepper-item1</text>\n      </stepper-item> \n    </stepper> \n  </div>\n</div>
/* xxx.css */\n.container {\n  width:100%;\n  height:100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color:#F1F3F5;\n}\n.stepperContent{\n  width: 300px;\n  height: 300px;\n}\n.stepperClass{\n  border:1px solid silver ;\n  background-color: white;\n}\ntext{\n  width: 100%;\n  height: 100%;\n  text-align: center;\n}
添加事件
stepper分别添加finish，change，next，back，skip事件。
 当change与next或back同时存在时，会先执行next或back事件再去执行change事件。 重新设置index属性值时要先清除index的值再重新设置，否则检测不到值的改变。 
<!-- xxx.hml -->\n<div class=\"container\"  style=\"background-color:#F1F3F5;\">\n  <div >\n    <stepper onfinish=\"stepperFinish\" onchange=\"stepperChange\" onnext=\"stepperNext\" onback=\"stepperBack\" onskip=\"stepperSkip\" id=\"stepperId\" index=\"{{index}}\">\n      <stepper-item>\n        <text>stepper-item1</text>\n        <button value=\"skip\" onclick=\"skipClick\"></button>\n      </stepper-item>\n      <stepper-item>\n         <text>stepper-item2</text>\n         <button value=\"skip\" onclick=\"skipClick\"></button>\n      </stepper-item>\n      <stepper-item>\n        <text>stepper-item3</text>\n      </stepper-item>\n    </stepper>\n  </div>\n</div>
/* xxx.css */\n.doc-page {\n  width:100%;\n  height:100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\nstepper-item{\n  width: 100%;\n  flex-direction: column;\n  align-self: center;\n  justify-content: center;\n}\ntext{\n  margin-top: 45%;\n  justify-content: center;\n  align-self: center;\n  margin-bottom: 50px;\n}\nbutton{\n  width: 80%;\n  height: 60px;\n  margin-top: 20px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction';\nexport default {\n  data: {\n    index:0,\n  },\n   stepperSkip(){\n    this.index = null;\n    this.index=2;\n  },\n   skipClick(){\n    this.$element('stepperId').setNextButtonStatus({status: 'skip', label: 'SKIP'});\n  },\n  stepperFinish(){\n    promptAction.showToast({\n      message: 'All Finished'\n    })\n  },\n  stepperChange(e){\n    console.log(\"stepperChange\"+e.index)\n    promptAction.showToast({\n      // index表示当前步骤的序号\n      message: 'Previous step: '+e.prevIndex+\"-------Current step:\"+e.index\n    })\n  },\n  stepperNext(e){\n    console.log(\"stepperNext\"+e.index)\n    promptAction.showToast({\n      // pendingIndex表示将要跳转的序号\n      message: 'Current step:'+e.index+\"-------Next step:\"+e.pendingIndex\n    })\n    var index = {pendingIndex:e.pendingIndex }\n    return index;\n  },\n  stepperBack(e){\n    console.log(\"stepperBack\"+e.index)\n    var index = {pendingIndex: e.pendingIndex }\n    return index;\n  }\n}
场景示例
在本场景中，开发者可以在界面上点击选择并实时显示选择结果，点击下一步按钮后可动态修改页面的字体颜色和字体大小。
用stepper组件实现分步，再创建Toggle组件实现选择显示功能，再使用Select组件实现改变选中值动态修改字体颜色或大小。
<!-- xxx.hml -->\n<div class=\"container\">\n  <stepper id=\"mystep\" index=\"0\" onfinish=\"back\" style=\"text-color: indigo;\">\n    <stepper-item label=\"{{label1}}\">\n      <div style=\"flex-direction: column;padding: 0px 10px;\">\n        <text class=\"text\" style=\"margin-top: 10%;text-align: center;width: 100%;\">Select error types:</text>\n        <text style=\"margin-top: 20px;padding: 10px\">\n          <span>{{error}}</span>\n        </text>\n        <div style=\"justify-content: space-around;flex-wrap: wrap;\">\n          <toggle for=\"{{togglelist1}}\" value=\"{{$item}}\" class=\"tog\" onchange=\"multiTog({{$item}})\"></toggle>\n        </div>\n      </div>\n    </stepper-item>\n    <stepper-item label=\"{{label2}}\">\n      <div style=\"flex-direction: column;align-items: center;\">\n        <text class=\"txt\" style=\"margin-top: 10%;\">Toggle</text>\n        <div style=\"justify-content: space-around;flex-wrap: wrap;;margin-top:10%\">\n          <toggle class=\"tog\" for=\"{{togglelist1}}\" value=\"{{$item}}\" style=\"text-color: {{tcolor}};font-size: {{tsize}}; font-style: {{tstyle}};font-weight: {{tweight}};font-family: {{tfamily}};\">\n          </toggle>\n        </div>\n        <div style=\"flex-wrap: wrap;width: 700px;margin-top:10%\">\n          <div style=\"flex-direction: column;width: 350px;height: 185px;align-items: center;\">\n            <text class=\"txt\">text-color</text>\n            <select onchange=\"settcolor\">\n              <option for=\"{{color_list}}\" value=\"{{$item}}\">{{$item}}</option>\n            </select>\n          </div>\n          <div style=\"flex-direction: column;width: 350px;height: 185px;align-items: center;\">\n            <text class=\"txt\">font-size</text>\n            <select onchange=\"settsize\">\n              <option for=\"{{size_list}}\" value=\"{{$item}}\">{{$item}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </stepper-item>\n  </stepper>\n</div>
/* xxx.css */\n.container {\n  width:100%;\n  height:100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color:#F1F3F5;\n}\n.dvd {\n  stroke-width: 8px;\n  color: orangered;\n  margin: 65px;\n}\n.tog{\n  margin-right: 20px;\n  margin-top: 30px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction';\nimport router from '@ohos.router';\nlet myset = new Set();\nexport default {\n  data: {\n    error: '',\n    tcolor:'#FF4500',\n    color_list:['#FF4500','#5F9EA0','#0000FF'],\n    tsize: '12px',\n    size_list: ['12px', '30px', '8px', '50px'],\n    label1: {\n      prevLabel: 'The text on the left of the starting step is invalid.',\n      nextLabel: 'Toggle'\n    },\n    label2: {\n      prevLabel: 'toggle',\n      nextLabel: 'END'\n    },\n    togglelist1:['Program error', 'Software', 'System', 'Application'],\n  },\n  multiTog(arg, e) {\n    this.error = ' '\n    if (e.checked) {\n      myset.add(arg)\n    } else {\n      myset.delete(arg)\n    }\n    for (let item of myset) {\n      this.error += item + ' '\n    }\n  },\n  settcolor(e) {\n    this.tcolor = e.newValue\n  },\n  settsize(e) {\n    this.tsize = e.newValue\n  }\n}
