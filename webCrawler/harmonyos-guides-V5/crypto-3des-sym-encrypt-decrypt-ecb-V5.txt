使用3DES对称密钥（ECB模式）加解密(ArkTS)
对应的算法规格请查看对称密钥加解密算法规格：3DES。
加密
 调用cryptoFramework.createSymKeyGenerator、SymKeyGenerator.convertKey，生成密钥算法为3DES、密钥长度为192位的对称密钥（SymKey）。 如何生成3DES对称密钥，开发者可参考下文示例，并结合对称密钥生成和转换规格：3DES和指定二进制数据转换对称密钥理解，参考文档与当前示例可能存在入参差异，请在阅读时注意区分。 调用cryptoFramework.createCipher，指定字符串参数'3DES192|ECB|PKCS7'，创建对称密钥类型为3DES192、分组模式为ECB、填充模式为PKCS7的Cipher实例，用于完成加解密操作。 调用Cipher.init，设置模式为加密（CryptoMode.ENCRYPT_MODE），指定加密密钥（SymKey），初始化加密Cipher实例。 ECB模式无加密参数，直接传入null。 调用Cipher.update，更新数据（明文）。  当数据量较小时，可以在init完成后直接调用doFinal。 当数据量较大时，可以多次调用update，即分段加解密。  调用Cipher.doFinal，获取加密后的数据。  由于已使用update传入数据，此处data传入null。 doFinal输出结果可能为null，在访问具体数据前，需要先判断结果是否为null，避免产生异常。  
解密
 调用Cipher.init，设置模式为解密（CryptoMode.DECRYPT_MODE），指定解密密钥（SymKey）初始化解密Cipher实例。ECB模式无加密参数，直接传入null。 调用Cipher.update，更新数据（密文）。 调用Cipher.doFinal，获取解密后的数据。 
 异步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\n// 加密消息\nasync function encryptMessagePromise(symKey: cryptoFramework.SymKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('3DES192|ECB|PKCS7');\n  await cipher.init(cryptoFramework.CryptoMode.ENCRYPT_MODE, symKey, null);\n  let encryptData = await cipher.doFinal(plainText);\n  return encryptData;\n}\n// 解密消息\nasync function decryptMessagePromise(symKey: cryptoFramework.SymKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('3DES192|ECB|PKCS7');\n  await decoder.init(cryptoFramework.CryptoMode.DECRYPT_MODE, symKey, null);\n  let decryptData = await decoder.doFinal(cipherText);\n  return decryptData;\n}\nasync function genSymKeyByData(symKeyData: Uint8Array) {\n  let symKeyBlob: cryptoFramework.DataBlob = { data: symKeyData };\n  let symGenerator = cryptoFramework.createSymKeyGenerator('3DES192');\n  let symKey = await symGenerator.convertKey(symKeyBlob);\n  console.info('convertKey success');\n  return symKey;\n}\nasync function main() {\n  let keyData = new Uint8Array([238, 249, 61, 55, 128, 220, 183, 224, 139, 253, 248, 239, 239, 41, 71, 25, 235, 206, 230, 162, 249, 27, 234, 114]);\n  let symKey = await genSymKeyByData(keyData);\n  let message = \"This is a test\";\n  let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n  let encryptText = await encryptMessagePromise(symKey, plainText);\n  let decryptText = await decryptMessagePromise(symKey, encryptText);\n  if (plainText.data.toString() === decryptText.data.toString()) {\n    console.info('decrypt ok');\n    console.info('decrypt plainText: ' + buffer.from(decryptText.data).toString('utf-8'));\n  } else {\n    console.error('decrypt failed');\n  }\n} 同步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\n// 加密消息\nfunction encryptMessage(symKey: cryptoFramework.SymKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('3DES192|ECB|PKCS7');\n  cipher.initSync(cryptoFramework.CryptoMode.ENCRYPT_MODE, symKey, null);\n  let encryptData = cipher.doFinalSync(plainText);\n  return encryptData;\n}\n// 解密消息\nfunction decryptMessage(symKey: cryptoFramework.SymKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('3DES192|ECB|PKCS7');\n  decoder.initSync(cryptoFramework.CryptoMode.DECRYPT_MODE, symKey, null);\n  let decryptData = decoder.doFinalSync(cipherText);\n  return decryptData;\n}\nfunction genSymKeyByData(symKeyData: Uint8Array) {\n  let symKeyBlob: cryptoFramework.DataBlob = { data: symKeyData };\n  let symGenerator = cryptoFramework.createSymKeyGenerator('3DES192');\n  let symKey = symGenerator.convertKeySync(symKeyBlob);\n  console.info('convertKeySync success');\n  return symKey;\n}\nfunction main() {\n  let keyData = new Uint8Array([238, 249, 61, 55, 128, 220, 183, 224, 139, 253, 248, 239, 239, 41, 71, 25, 235, 206, 230, 162, 249, 27, 234, 114]);\n  let symKey = genSymKeyByData(keyData);\n  let message = \"This is a test\";\n  let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n  let encryptText = encryptMessage(symKey, plainText);\n  let decryptText = decryptMessage(symKey, encryptText);\n  if (plainText.data.toString() === decryptText.data.toString()) {\n    console.info('decrypt ok');\n    console.info('decrypt plainText: ' + buffer.from(decryptText.data).toString('utf-8'));\n  } else {\n    console.error('decrypt failed');\n  }\n} 
