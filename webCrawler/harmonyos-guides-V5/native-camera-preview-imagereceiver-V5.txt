预览流二次处理(C/C++)
通过ImageReceiver创建预览输出，获取预览流实时数据，以供后续进行图像二次处理，比如应用可以对其添加滤镜算法等。
开发步骤
详细的API说明请参考Camera API参考。
 导入NDK接口，接口中提供了相机相关的属性和方法，导入方法如下。  // 导入NDK接口头文件\n#include <cstdlib>\n#include <hilog/log.h>\n#include <memory>\n#include <multimedia/image_framework/image/image_native.h>\n#include <multimedia/image_framework/image/image_receiver_native.h>\n#include \"ohcamera/camera.h\"\n#include \"ohcamera/camera_input.h\"\n#include \"ohcamera/capture_session.h\"\n#include \"ohcamera/preview_output.h\"\n#include \"ohcamera/camera_manager.h\" 在CMake脚本中链接相关动态库。 target_link_libraries(entry PUBLIC\n    libace_napi.z.so\n    libhilog_ndk.z.so\n    libohimage.so\n    libimage_receiver.so\n    libnative_image.so\n    libohcamera.so\n    libnative_buffer.so\n) 初始化图片接收器ImageReceiver实例，获取SurfaceId。 通过image的OH_ImageReceiverNative_Create方法创建OH_ImageReceiverNative实例，再通过实例的OH_ImageReceiverNative_GetReceivingSurfaceId方法获取SurfaceId。 void InitImageReceiver() {\n    OH_ImageReceiverOptions *options = nullptr;\n    // 注意捕获错误码处理异常及对象判空，当前示例仅展示调用流程\n    // 设置图片参数\n    Image_ErrorCode errCode = OH_ImageReceiverOptions_Create(&options);\n    Image_Size imgSize;\n    imgSize.width = 1080; // 创建预览流的宽\n    imgSize.height = 1080; // 创建预览流的高\n    int32_t capacity = 8; // BufferQueue里最大Image数量，推荐填写8\n    errCode = OH_ImageReceiverOptions_SetSize(options, imgSize);\n    errCode = OH_ImageReceiverOptions_SetCapacity(options, capacity);\n    // 创建OH_ImageReceiverNative对象\n    OH_ImageReceiverNative *receiver = nullptr;\n    errCode = OH_ImageReceiverNative_Create(options, &receiver);\n    // 获取OH_ImageReceiverNative对象的SurfaceId\n    uint64_t receiverSurfaceID = 0;\n    errCode = OH_ImageReceiverNative_GetReceivingSurfaceId(receiver, &receiverSurfaceID);\n    OH_LOG_INFO(LOG_APP, \"receiver surfaceID:%{public}%llu\", receiverSurfaceID);\n} 通过上一步获取到的SurfaceId创建预览流，参考预览(C/C++)步骤4。 创建会话，使能会话，参考会话管理(C/C++)。 注册ImageReceiver图片接收器的回调，监听获取每帧上报图像内容。 OH_ImageReceiverNative *receiver; // 步骤3创建的实例\n\n// 图像回调函数，参考媒体/Image Kit（图片处理服务）\nstatic void OnCallback(OH_ImageReceiverNative *receiver) {\n    OH_LOG_INFO(LOG_APP, \"ImageReceiverNativeCTest buffer available.\");\n    // 注意捕获错误码处理异常及对象判空，当前示例仅展示调用流程\n    OH_ImageNative *image = nullptr;\n    // 从bufferQueue中获取图像\n    Image_ErrorCode errCode = OH_ImageReceiverNative_ReadNextImage(receiver, &image);\n    // 读取图像宽高\n    Image_Size size;\n    errCode = OH_ImageNative_GetImageSize(image, &size);\n    OH_LOG_INFO(LOG_APP, \"OH_ImageNative_GetImageSize errCode:%{public}d width:%{public}d height:%{public}d\", errCode,\n        size.width, size.height);\n\n    // 获取图像ComponentType\n    size_t typeSize = 0;\n    OH_ImageNative_GetComponentTypes(image, nullptr, &typeSize);\n    uint32_t* types = new uint32_t[typeSize];\n    OH_ImageNative_GetComponentTypes(image, &types, &typeSize);\n    uint32_t component = types[0];\n    // 获取图像buffer\n    OH_NativeBuffer *imageBuffer = nullptr;\n    errCode = OH_ImageNative_GetByteBuffer(image, component, &imageBuffer);\n    size_t bufferSize = 0;\n    errCode = OH_ImageNative_GetBufferSize(image, component, &bufferSize);\n    OH_LOG_INFO(LOG_APP, \"ImageReceiverNativeCTest buffer component: %{public}d size:%{public}zu\", component, bufferSize);\n    // 获取图像行距\n    int32_t stride = 0;\n    errCode = OH_ImageNative_GetRowStride(image, component, &stride);\n    OH_LOG_INFO(LOG_APP, \"ImageReceiverNativeCTest buffer stride：%{public}d.\", stride);\n    void* srcVir = nullptr;\n    OH_NativeBuffer_Map(imageBuffer, &srcVir);\n    uint8_t* srcBuffer = static_cast<uint8_t*>(srcVir);\n    // 判断行距与预览流宽是否一致，如不一致，需要考虑stride对读取buffer的影响\n    if (stride == size.width) {\n        // 传给其他不需要stride的接口处理\n    } else {\n        // 传给其他支持stride的接口处理，或去除stride数据\n        // 去除stride数据示例:将byteBuffer中的数据去除stride，拷贝得到新的dstBuffer数据\n        size_t dstBufferSize = size.width * size.height * 1.5; // 相机预览流返回NV21格式\n        std::unique_ptr<uint8_t[]> dstBuffer = std::make_unique<uint8_t[]>(dstBufferSize);\n        uint8_t *dstPtr = dstBuffer.get();\n        for (int j = 0; j < size.height * 1.5; j++) {\n            memcpy(dstPtr, srcBuffer, size.width);\n            dstPtr += size.width;\n            srcBuffer += stride;\n        }\n        // 传给其他不需要stride的接口处理\n    }\n    // 释放资源\n    OH_NativeBuffer_Unmap(imageBuffer); // 释放buffer,保证bufferQueue正常轮转\n    errCode = OH_ImageNative_Release(image);\n    delete[] types;\n}\n\nvoid OnImageReceiver() {\n    // 注册图像回调事件，监听每帧上报的图像\n    Image_ErrorCode errCode = OH_ImageReceiverNative_On(receiver, OnCallback);\n} 
