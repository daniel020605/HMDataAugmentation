自定义组件
使用兼容JS的类Web开发范式的方舟开发框架支持自定义组件，用户可根据业务需求将已有的组件进行扩展，增加自定义的私有属性和事件，封装成新的组件，方便在工程中多次调用，提高页面布局代码的可读性。具体的封装方法示例如下：
 构建自定义组件 <!-- comp.hml -->\n <div class=\"item\"> \n   <text class=\"title-style\">{{title}}</text>\n   <text class=\"text-style\" onclick=\"childClicked\" focusable=\"true\">点击这里查看隐藏文本</text>\n   <text class=\"text-style\" if=\"{{showObj}}\">hello world</text>\n </div> /* comp.css */\n .item { \n   width: 700px;  \n   flex-direction: column;  \n   height: 300px;  \n   align-items: center;  \n   margin-top: 100px; \n }\n .text-style {\n   width: 100%;\n   text-align: center;\n   font-weight: 500;\n   font-family: Courier;\n   font-size: 36px;\n }\n .title-style {\n   font-weight: 500;\n   font-family: Courier;\n   font-size: 50px;\n   color: #483d8b;\n } // comp.js\n export default {\n   props: {\n     title: {\n       default: 'title',\n     },\n     showObject: {},\n   },\n   data() { \n     return {\n       showObj: this.showObject,\n     };\n   }, \n   childClicked () { \n     this.$emit('eventType1', {text: '收到子组件参数'});\n     this.showObj = !this.showObj; \n   }, \n } 引入自定义组件 <!-- xxx.hml -->\n <element name='comp' src='../../common/component/comp.hml'></element> \n <div class=\"container\"> \n   <text>父组件：{{text}}</text>\n   <comp title=\"自定义组件\" show-object=\"{{isShow}}\" @event-type1=\"textClicked\"></comp>\n </div> /* xxx.css */\n .container { \n   background-color: #f8f8ff; \n   flex: 1; \n   flex-direction: column; \n   align-content: center;\n }  // xxx.js\n export default { \n   data: {\n     text: '开始',\n     isShow: false,\n   },\n   textClicked (e) {\n     this.text = e.detail.text;\n   },\n } 
本示例中父组件通过添加自定义属性向子组件传递了名称为title的参数，子组件在props中接收。同时子组件也通过事件绑定向上传递了参数text，接收时通过e.detail获取。要绑定子组件事件，父组件事件命名必须遵循事件绑定规则，详见自定义组件的基本用法。自定义组件效果如下图所示：
图1 自定义组件的效果
