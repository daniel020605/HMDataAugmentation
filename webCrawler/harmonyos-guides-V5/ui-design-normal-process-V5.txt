单层图标处理
场景介绍
适用于图标为单层资源，且图标展示风格要与华为HarmonyOS Design System设计风格一致的应用场景，典型应用场景可参考分层图标场景介绍。
开发步骤
 将图标处理的相关类添加至工程。import { LayeredDrawableDescriptor, DrawableDescriptor } from '@kit.ArkUI';\nimport { hdsDrawable } from '@kit.UIDesignKit';\nimport { image } from '@kit.ImageKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { resourceManager } from '@kit.LocalizationKit';  
 简单配置页面的布局，调用单层图标接口获取处理后的图标信息，也可以调用异步批量处理接口。@Entry\n@Component\nstruct Index{\n  bundleName: string = 'com.example.uidesignkit';\n  resManager: resourceManager.ResourceManager | undefined = undefined;\n  layeredDrawableDescriptor: LayeredDrawableDescriptor | undefined = undefined;\n  drawableDescriptor: DrawableDescriptor | undefined = undefined;\n  @State iconsResult: Array<hdsDrawable.ProcessedIcon> = [];\n\n  build() {\n    Column() {\n      Column() {\n        Text('getHdsIcon')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(16)\n          .margin(5)\n\n        Image(this.getHdsIcon())\n          .width(48)\n          .height(48)\n      }\n      .margin(20)\n\n      Text('getHdsIcons')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(16)\n        .margin(5)\n\n      List() {\n        ForEach(this.iconsResult,\n          (item: hdsDrawable.ProcessedIcon, index?: number) => {\n            ListItem() {\n              Column() {\n                Text(item.bundleName)\n                  .fontWeight(FontWeight.Medium)\n                  .fontSize(16)\n                  .margin(5)\n\n                Image(item.pixelMap)\n                  .width(48)\n                  .height(48)\n              }\n              .margin(15)\n            }\n            .width('100%')\n          }, (item: string) => item.toString())\n      }\n      .scrollBar(BarState.On)\n      .height('60%')\n    }\n    .height('100%')\n    .width('100%')\n  }\n\n  aboutToAppear(): void {\n    this.resManager = getContext().resourceManager;\n    if (!this.resManager) {\n      return;\n    }\n\n    this.layeredDrawableDescriptor = (this.resManager.getDrawableDescriptor($r('app.media.drawable')\n      .id)) as LayeredDrawableDescriptor;\n\n    this.drawableDescriptor =\n      (this.resManager?.getDrawableDescriptor($r('app.media.normal_icon'))) as DrawableDescriptor;\n\n    this.getHdsIcons();\n  }\n\n  private getHdsIcon(): image.PixelMap | null {\n    try {\n      return hdsDrawable.getHdsIcon(this.bundleName, this.drawableDescriptor?.getPixelMap(), 48,\n        this.layeredDrawableDescriptor?.getMask().getPixelMap(), true);\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsIcon failed, code: ${code}, message: ${message}`);\n      return null;\n    }\n  }\n\n  getHdsIcons(): void {\n    if (!this.drawableDescriptor) {\n      console.error(`getHdsIcons drawableDescriptor is undefined.`);\n      return;\n    }\n\n    if (!this.layeredDrawableDescriptor) {\n      console.error(`getHdsIcons layeredDrawableDescriptor is undefined.`);\n      return;\n    }\n\n    let options: hdsDrawable.Options = {\n      size: 48,\n      hasBorder: true,\n      parallelNumber: 4\n    };\n\n    let icons: Array<hdsDrawable.Icon> = [];\n    for (let i = 0; i < 10; i++) {\n      icons.push({\n        bundleName: `${this.bundleName}-${i}`,\n        pixelMap: this.drawableDescriptor.getPixelMap()\n      })\n    }\n\n    try {\n      hdsDrawable.getHdsIcons(icons, this.layeredDrawableDescriptor.getMask().getPixelMap(), options)\n        .then((data: Array<hdsDrawable.ProcessedIcon>) => {\n          console.info(`getHdsIcons data size: ${data.length}`);\n          this.iconsResult = data;\n        })\n        .catch((err: BusinessError) => {\n          console.error(`getHdsIcons error, code: ${err.code}, msg: ${err.message}`);\n        });\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsIcons callback failed: ${message}, code: ${code}`);\n    }\n  }\n}  
开发实例
import { LayeredDrawableDescriptor, DrawableDescriptor } from '@kit.ArkUI';\nimport { hdsDrawable } from '@kit.UIDesignKit';\nimport { image } from '@kit.ImageKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { resourceManager } from '@kit.LocalizationKit';\n\n@Entry\n@Component\nstruct Index{\n  bundleName: string = 'com.example.uidesignkit';\n  resManager: resourceManager.ResourceManager | undefined = undefined;\n  layeredDrawableDescriptor: LayeredDrawableDescriptor | undefined = undefined;\n  drawableDescriptor: DrawableDescriptor | undefined = undefined;\n  @State iconsResult: Array<hdsDrawable.ProcessedIcon> = [];\n\n  build() {\n    Column() {\n      Column() {\n        Text('getHdsIcon')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(16)\n          .margin(5)\n\n        Image(this.getHdsIcon())\n          .width(48)\n          .height(48)\n      }\n      .margin(20)\n\n      Text('getHdsIcons')\n        .fontWeight(FontWeight.Bold)\n        .fontSize(16)\n        .margin(5)\n\n      List() {\n        ForEach(this.iconsResult,\n          (item: hdsDrawable.ProcessedIcon, index?: number) => {\n            ListItem() {\n              Column() {\n                Text(item.bundleName)\n                  .fontWeight(FontWeight.Medium)\n                  .fontSize(16)\n                  .margin(5)\n\n                Image(item.pixelMap)\n                  .width(48)\n                  .height(48)\n              }\n              .margin(15)\n            }\n            .width('100%')\n          }, (item: string) => item.toString())\n      }\n      .scrollBar(BarState.On)\n      .height('60%')\n    }\n    .height('100%')\n    .width('100%')\n  }\n\n  aboutToAppear(): void {\n    this.resManager = getContext().resourceManager;\n    if (!this.resManager) {\n      return;\n    }\n\n    this.layeredDrawableDescriptor = (this.resManager.getDrawableDescriptor($r('app.media.drawable')\n      .id)) as LayeredDrawableDescriptor;\n\n    this.drawableDescriptor =\n      (this.resManager?.getDrawableDescriptor($r('app.media.normal_icon'))) as DrawableDescriptor;\n\n    this.getHdsIcons();\n  }\n\n  private getHdsIcon(): image.PixelMap | null {\n    try {\n      return hdsDrawable.getHdsIcon(this.bundleName, this.drawableDescriptor?.getPixelMap(), 48,\n        this.layeredDrawableDescriptor?.getMask().getPixelMap(), true);\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsIcon failed, code: ${code}, message: ${message}`);\n      return null;\n    }\n  }\n\n  getHdsIcons(): void {\n    if (!this.drawableDescriptor) {\n      console.error(`getHdsIcons drawableDescriptor is undefined.`);\n      return;\n    }\n\n    if (!this.layeredDrawableDescriptor) {\n      console.error(`getHdsIcons layeredDrawableDescriptor is undefined.`);\n      return;\n    }\n\n    let options: hdsDrawable.Options = {\n      size: 48,\n      hasBorder: true,\n      parallelNumber: 4\n    };\n\n    let icons: Array<hdsDrawable.Icon> = [];\n    for (let i = 0; i < 10; i++) {\n      icons.push({\n        bundleName: `${this.bundleName}-${i}`,\n        pixelMap: this.drawableDescriptor.getPixelMap()\n      })\n    }\n\n    try {\n      hdsDrawable.getHdsIcons(icons, this.layeredDrawableDescriptor.getMask().getPixelMap(), options)\n        .then((data: Array<hdsDrawable.ProcessedIcon>) => {\n          console.info(`getHdsIcons data size: ${data.length}`);\n          this.iconsResult = data;\n        })\n        .catch((err: BusinessError) => {\n          console.error(`getHdsIcons error, code: ${err.code}, msg: ${err.message}`);\n        });\n    } catch (err) {\n      let message = (err as BusinessError).message;\n      let code = (err as BusinessError).code;\n      console.error(`getHdsIcons callback failed: ${message}, code: ${code}`);\n    }\n  }\n}
