Native子进程开发指导（C/C++)
本模块首批接口从API version 12开始支持，并对IPCKit存在依赖。
场景介绍
本章节介绍如何在主进程中创建Native子进程，并在父子进程间建立IPC通道，方便开发者在Native层进行多进程编程。
接口说明
当前仅支持2in1设备，且单个进程只能启动一个Native子进程。
开发步骤
基于已创建完成的Native应用开发工程，在此基础上介绍如何使用AbilityKit提供的C API接口，创建Native子进程，并同时在父子进程间建立IPC通道。
动态库文件
libipc_capi.so\nlibchild_process.so
头文件
#include <IPCKit/ipc_kit.h>\n#include <AbilityKit/native_child_process.h>
[h2]1. 子进程-实现必要的导出方法
在子进程中，实现必要的两个函数NativeChildProcess_OnConnect及NativeChildProcess_MainProc并导出（假设代码所在的文件名为ChildProcessSample.cpp）。其中NativeChildProcess_OnConnect方法返回的OHIPCRemoteStub对象负责主进程进行IPC通信，具体实现方法请参考IPC通信开发指导（C/C++)，本文不再赘述。子进程启动后会先调用NativeChildProcess_OnConnect获取IPC Stub对象，之后再调用NativeChildProcess_MainProc移交主线程控制权，该函数返回后子进程随即退出。
#include <IPCKit/ipc_kit.h>\n\nextern \"C\" {\n\nOHIPCRemoteStub* NativeChildProcess_OnConnect()\n{\n    // ipcRemoteStub指向子进程实现的ipc stub对象，用于接收来自主进程的IPC消息并响应\n    // 子进程根据业务逻辑控制其生命周期\n    return ipcRemoteStub;\n}\n\nvoid NativeChildProcess_MainProc()\n{\n    // 相当于子进程的Main函数，实现子进程的业务逻辑\n    // ...\n    // 函数返回后子进程随即退出\n}\n  \n} // extern \"C\"
[h2]2. 子进程-编译为动态链接库
修改CMakeList.txt文件，编译为动态链接库（假设需要编译出的库文件名称为libchildprocesssample.so），并添加IPC动态库依赖。
add_library(childprocesssample SHARED\n    # 实现必要导出方法的源文件\n    ChildProcessSample.cpp\n    \n    # 其它代码源文件\n    # ...\n)\n\ntarget_link_libraries(childprocesssample PUBLIC\n    # 添加依赖的IPC动态库\n    libipc_capi.so\n    \n    # 其它所依赖的动态库\n    # ...\n)
[h2]3. 主进程-实现子进程启动结果回调函数
#include <IPCKit/ipc_kit.h>\n\nstatic void OnNativeChildProcessStarted(int errCode, OHIPCRemoteProxy *remoteProxy)\n{\n    if (errCode != NCP_NO_ERROR) {\n        // 子进程未能正常启动时的异常处理\n        // ...\n        return;\n    }\n\n    // 保存remoteProxy对象，后续基于IPC Kit提供的API同子进程间进行IPC通信\n    // 耗时操作建议转移到独立线程去处理，避免长时间阻塞回调线程\n    // IPC对象使用完毕后，需要调用OH_IPCRemoteProxy_Destroy方法释放\n    // ...\n}
回调函数传递的第二个参数OHIPCRemoteProxy对象，会与子进程实现的NativeChildProcess_OnConnect方法返回的OHIPCRemoteStub对象间建立IPC通道，具体使用方法参考IPC通信开发指导（C/C++)，本文不再赘述；OHIPCRemoteProxy对象使用完毕后，需要调用OH_IPCRemoteProxy_Destroy函数释放。
[h2]4. 主进程-启动Native子进程
调用API启动Native子进程，需要注意返回值为NCP_NO_ERROR仅代表成功调用native子进程启动逻辑，实际的启动结果通过第二个参数中指定的回调函数异步通知。需注意仅允许在主进程中创建子进程。
#include <AbilityKit/native_child_process.h>\n\n// 第一个参数\"libchildprocesssample.so\"为实现了子进程必要导出方法的动态库文件名称\nint32_t ret = OH_Ability_CreateNativeChildProcess(\"libchildprocesssample.so\", OnNativeChildProcessStarted);\nif (ret != NCP_NO_ERROR) {\n    // 子进程未能正常启动时的异常处理\n    // ...\n}
[h2]5. 主进程-添加编译依赖项
修改CMaklist.txt添加必要的依赖库，假设主进程所在的so名称为libmainprocesssample.so（主进程和子进程的实现也可以选择编译到同一个动态库文件）。
target_link_libraries(mainprocesssample PUBLIC\n    # 添加依赖的IPC及元能力动态库\n    libipc_capi.so\n    libchild_process.so\n    \n    # 其它依赖的动态库\n    # ...\n)
