订阅应用事件（C/C++）
HiAppEvent提供了事件订阅接口，用于本地获取应用事件。
接口说明
API接口的具体使用说明（参数使用限制、具体取值范围等）请参考HiAppEvent。
打点接口功能介绍：
订阅接口功能介绍：
开发步骤
以实现对用户点击按钮行为的事件打点及订阅为例，说明开发步骤：
 新建Native C++工程，并将jsoncpp导入到新建工程内，目录结构如下： entry:\n  src:\n    main:\n      cpp:\n        - json:\n            - json.h\n            - json-forwards.h\n        - types:\n            libentry:\n              - index.d.ts\n        - CMakeLists.txt\n        - napi_init.cpp\n        - jsoncpp.cpp\n      ets:\n        - entryability:\n            - EntryAbility.ets\n        - pages:\n            - Index.ets 编辑\"CMakeLists.txt\"文件，添加源文件及动态库： # 新增jsoncpp.cpp(解析订阅事件中的json字符串)源文件\nadd_library(entry SHARED napi_init.cpp jsoncpp.cpp)\n# 新增动态库依赖libhiappevent_ndk.z.so和libhilog_ndk.z.so(日志输出)\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so libhiappevent_ndk.z.so) 编辑\"napi_init.cpp\"文件，导入依赖的文件，并定义LOG_TAG： #include \"napi/native_api.h\"\n#include \"json/json.h\"\n#include \"hilog/log.h\"\n#include \"hiappevent/hiappevent.h\"\n\n#undef LOG_TAG\n#define LOG_TAG \"testTag\" 订阅应用事件：  onReceive类型观察者： 编辑\"napi_init.cpp\"文件，定义onReceive类型观察者相关方法： static HiAppEvent_Watcher *appEventWatcher;\n\nstatic void OnReceive(const char *domain, const struct HiAppEvent_AppEventGroup *appEventGroups, uint32_t groupLen) {\n    for (int i = 0; i < groupLen; ++i) {\n        for (int j = 0; j < appEventGroups[i].infoLen; ++j) {\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.domain=%{public}s\", appEventGroups[i].appEventInfos[j].domain);\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.name=%{public}s\", appEventGroups[i].appEventInfos[j].name);\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.eventType=%{public}d\", appEventGroups[i].appEventInfos[j].type);\n            if (strcmp(appEventGroups[i].appEventInfos[j].domain, \"button\") == 0 &&\n                strcmp(appEventGroups[i].appEventInfos[j].name, \"click\") == 0) {\n                Json::Value params;\n                Json::Reader reader(Json::Features::strictMode());\n                if (reader.parse(appEventGroups[i].appEventInfos[j].params, params)) {\n                    auto time = params[\"click_time\"].asInt64();\n                    OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.click_time=%{public}lld\", time);\n                }\n            }\n        }\n    }\n}\n\nstatic napi_value RegisterWatcher(napi_env env, napi_callback_info info) {\n    // 开发者自定义观察者名称，系统根据不同的名称来识别不同的观察者。\n    appEventWatcher = OH_HiAppEvent_CreateWatcher(\"onReceiverWatcher\");\n    // 设置订阅的事件名称为click。\n    const char *names[] = {\"click\"};\n    // 开发者订阅感兴趣的应用事件，此处订阅了button相关事件。\n    OH_HiAppEvent_SetAppEventFilter(appEventWatcher, \"button\", 0, names, 1);\n    // 开发者设置已实现的回调函数，观察者接收到事件后回立即触发OnReceive回调。\n    OH_HiAppEvent_SetWatcherOnReceive(appEventWatcher, OnReceive);\n    // 使观察者开始监听订阅的事件。\n    OH_HiAppEvent_AddWatcher(appEventWatcher);\n    return {};\n} onTrigger类型观察者： 编辑\"napi_init.cpp\"文件，定义OnTrigger类型观察者相关方法： //定义一变量，用来缓存创建的观察者的指针。\nstatic HiAppEvent_Watcher *appEventWatcher;\n\n// 开发者可以自行实现获取已监听到事件的回调函数，其中events指针指向内容仅在该函数内有效。\nstatic void OnTake(const char *const *events, uint32_t eventLen) {\n    Json::Reader reader(Json::Features::strictMode());\n    for (int i = 0; i < eventLen; ++i) {\n        OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo=%{public}s\", events[i]);\n        Json::Value eventInfo;\n        if (reader.parse(events[i], eventInfo)) {\n            auto domain = eventInfo[\"domain_\"].asString();\n            auto name = eventInfo[\"name_\"].asString();\n            auto type = eventInfo[\"type_\"].asInt();\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.domain=%{public}s\", domain.c_str());\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.name=%{public}s\", name.c_str());\n            OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.eventType=%{public}d\", type);\n            if (domain == \"button\" && name == \"click\") {\n                auto clickTime = eventInfo[\"click_time\"].asInt64();\n                OH_LOG_INFO(LogType::LOG_APP, \"HiAppEvent eventInfo.params.click_time=%{public}lld\", clickTime);\n            }\n        }\n    }\n}\n\n// 开发者可以自行实现订阅回调函数，以便对获取到的事件打点数据进行自定义处理。\nstatic void OnTrigger(int row, int size) {\n    // 接收回调后，获取指定数量的已接收事件。\n    OH_HiAppEvent_TakeWatcherData(appEventWatcher, row, OnTake);\n}\n\nstatic napi_value RegisterWatcher(napi_env env, napi_callback_info info) {\n    // 开发者自定义观察者名称，系统根据不同的名称来识别不同的观察者。\n    appEventWatcher = OH_HiAppEvent_CreateWatcher(\"onTriggerWatcher\");\n    // 设置订阅的事件名称为click。\n    const char *names[] = {\"click\"};\n    // 开发者订阅感兴趣的应用事件，此处订阅了button相关事件。\n    OH_HiAppEvent_SetAppEventFilter(appEventWatcher, \"button\", 0, names, 1);\n    // 开发者设置已实现的回调函数，需OH_HiAppEvent_SetTriggerCondition设置的条件满足方可触发。\n    OH_HiAppEvent_SetWatcherOnTrigger(appEventWatcher, OnTrigger);\n    // 开发者可以设置订阅触发回调的条件，此处是设置新增事件打点数量为1个时，触发onTrigger回调。\n    OH_HiAppEvent_SetTriggerCondition(appEventWatcher, 1, 0, 0);\n    // 使观察者开始监听订阅的事件。\n    OH_HiAppEvent_AddWatcher(appEventWatcher);\n    return {};\n}  编辑\"napi_init.cpp\"文件，添加button事件打点接口： static napi_value WriteAppEvent(napi_env env, napi_callback_info info) {\n    auto params = OH_HiAppEvent_CreateParamList();\n    OH_HiAppEvent_AddInt64Param(params, \"click_time\", time(nullptr));\n    OH_HiAppEvent_Write(\"button\", \"click\", EventType::BEHAVIOR, params);\n    OH_HiAppEvent_DestroyParamList(params);\n    return {};\n} 编辑\"napi_init.cpp\"文件，将RegisterWatcher和WriteAppEvent注册为ArkTS接口： static napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        {\"registerWatcher\", nullptr, RegisterWatcher, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"writeAppEvent\", nullptr, WriteAppEvent, nullptr, nullptr, nullptr, napi_default, nullptr}\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n} 编辑\"index.d.ts\"文件，定义ArkTS接口： export const registerWatcher: () => void;\nexport const writeAppEvent: () => void; 编辑\"EntryAbility.ets\"文件，在onCreate()函数中新增接口调用： // 导入依赖模块\nimport testNapi from 'libentry.so'\n\n// 在onCreate()函数中新增接口调用\n// 启动时，注册应用事件观察者\ntestNapi.registerWatcher(); 编辑\"Index.ets\"文件，新增按钮触发打点事件： import testNapi from 'libentry.so'\n\nButton(\"button_click\").onClick(() => {\n  testNapi.writeAppEvent();\n}) 可以在Log窗口看到对应用事件数据的处理日志： HiAppEvent eventInfo.domain=button\nHiAppEvent eventInfo.name=click\nHiAppEvent eventInfo.eventType=4\nHiAppEvent eventInfo.params.click_time=1502031843 移除应用事件观察者： static napi_value RemoveWatcher(napi_env env, napi_callback_info info) {\n    // 使观察者停止监听事件\n    OH_HiAppEvent_RemoveWatcher(appEventWatcher);\n    return {};\n} 销毁应用事件观察者： static napi_value DestroyWatcher(napi_env env, napi_callback_info info) {\n    // 销毁创建的观察者，并置appEventWatcher为nullptr。\n    OH_HiAppEvent_DestroyWatcher(appEventWatcher);\n    appEventWatcher = nullptr;\n    return {};\n} 
