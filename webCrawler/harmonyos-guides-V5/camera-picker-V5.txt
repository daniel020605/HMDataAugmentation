通过系统相机拍照和录像(ArkTS)
应用可调用CameraPicker拍摄照片或录制视频，无需申请相机权限。
CameraPicker的相机交互界面由系统提供，在用户点击拍摄和确认按钮后，调用CameraPicker的应用获取对应的照片或者视频。
应用开发者如果只是需要获取即时拍摄的照片或者视频，则可以使用CameraPicker能力来轻松实现。
由于照片的拍摄和确认都是由用户进行主动确认，因此应用开发者可以不用申请操作相机的相关权限。
约束与限制
在应用调试时，开发者需在release模式下调用系统相机（CameraPicker）。
由于系统限制了debug模式下不允许调试release应用，在debug模式下调用系统相机，将导致异常。
开发步骤
详细的API说明请参考CameraPicker API参考。
 导入相关接口，导入方法如下。 import { camera, cameraPicker as picker } from '@kit.CameraKit'\nimport { fileIo, fileUri } from '@kit.CoreFileKit' 配置PickerProfile。     PickerProfile的saveUri为可选参数，如果未配置该项，拍摄的照片和视频默认存入媒体库中。 如果不想将照片和视频存入媒体库，请自行配置应用沙箱内的文件路径。 应用沙箱内的这个文件必须是一个存在的、可写的文件。这个文件的uri传入picker接口之后，相当于应用给系统相机授权该文件的读写权限。系统相机在拍摄结束之后，会对此文件进行覆盖写入。   let pathDir = getContext().filesDir;\nlet fileName = `${new Date().getTime()}`\nlet filePath = pathDir + `/${fileName}.tmp`\nfileIo.createRandomAccessFileSync(filePath, fileIo.OpenMode.CREATE);\n\nlet uri = fileUri.getUriFromPath(filePath);\nlet pickerProfile: picker.PickerProfile = {\n  cameraPosition: camera.CameraPosition.CAMERA_POSITION_BACK,\n  saveUri: uri\n}; 调用picker拍摄接口获取拍摄的结果。 let result: picker.PickerResult =\n  await picker.pick(getContext(), [picker.PickerMediaType.PHOTO, picker.PickerMediaType.VIDEO],\n    pickerProfile);\nconsole.info(`picker resultCode: ${result.resultCode},resultUri: ${result.resultUri},mediaType: ${result.mediaType}`); 
完整示例
import { camera, cameraPicker as picker } from '@kit.CameraKit'\nimport { fileIo, fileUri } from '@kit.CoreFileKit'\n\n@Entry\n@Component\nstruct Index {\n  @State imgSrc: string = '';\n  @State videoSrc: string = '';\n\n  build() {\n    RelativeContainer() {\n      Column() {\n        Image(this.imgSrc).width(200).height(200).backgroundColor(Color.Black).margin(5);\n        Video({ src: this.videoSrc}).width(200).height(200).autoPlay(true);\n        Button(\"Test Picker Photo&Video\").fontSize(20)\n          .fontWeight(FontWeight.Bold)\n          .onClick(async () => {\n            let pathDir = getContext().filesDir;\n            let fileName = `${new Date().getTime()}`\n            let filePath = pathDir + `/${fileName}.tmp`\n            fileIo.createRandomAccessFileSync(filePath, fileIo.OpenMode.CREATE);\n\n            let uri = fileUri.getUriFromPath(filePath);\n            let pickerProfile: picker.PickerProfile = {\n              cameraPosition: camera.CameraPosition.CAMERA_POSITION_BACK,\n              saveUri: uri\n            };\n            let result: picker.PickerResult =\n              await picker.pick(getContext(), [picker.PickerMediaType.PHOTO, picker.PickerMediaType.VIDEO],\n                pickerProfile);\n            console.info(`picker resultCode: ${result.resultCode},resultUri: ${result.resultUri},mediaType: ${result.mediaType}`);\n            if (result.resultCode == 0) {\n              if (result.mediaType === picker.PickerMediaType.PHOTO) {\n                this.imgSrc = result.resultUri;\n              } else {\n                this.videoSrc = result.resultUri;\n              }\n            }\n          }).margin(5);\n\n      }.alignRules({\n        center: { anchor: '__container__', align: VerticalAlign.Center },\n        middle: { anchor: '__container__', align: HorizontalAlign.Center }\n      });\n    }\n    .height('100%')\n    .width('100%')\n  }\n}
