创建DataAbility
实现DataAbility中Insert、Query、Update、Delete接口的业务内容。保证能够满足数据库存储业务的基本需求。BatchInsert与ExecuteBatch接口已经在系统中实现遍历逻辑，依赖Insert、Query、Update、Delete接口逻辑，来实现数据的批量处理。
创建DataAbility的代码示例如下：
import featureAbility from '@ohos.ability.featureAbility';\nimport type common from '@ohos.app.ability.common';\nimport type Want from '@ohos.app.ability.Want';\nimport type { AsyncCallback, BusinessError } from '@ohos.base';\nimport dataAbility from '@ohos.data.dataAbility';\nimport rdb from '@ohos.data.rdb';\nimport hilog from '@ohos.hilog';\n\nlet TABLE_NAME = 'book';\nlet STORE_CONFIG: rdb.StoreConfig = { name: 'book.db' };\nlet SQL_CREATE_TABLE = 'CREATE TABLE IF NOT EXISTS book(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, introduction TEXT NOT NULL)';\nlet rdbStore: rdb.RdbStore | undefined = undefined;\nconst TAG: string = '[Sample_FAModelAbilityDevelop]';\nconst domain: number = 0xFF00;\n\nclass DataAbility {\n  onInitialized(want: Want): void {\n    hilog.info(domain, TAG, 'DataAbility onInitialized, abilityInfo:' + want.bundleName);\n    let context: common.BaseContext = { stageMode: featureAbility.getContext().stageMode };\n    rdb.getRdbStore(context, STORE_CONFIG, 1, (err, store) => {\n      hilog.info(domain, TAG, 'DataAbility getRdbStore callback');\n      store.executeSql(SQL_CREATE_TABLE, []);\n      rdbStore = store;\n    });\n  }\n\n  insert(uri: string, valueBucket: rdb.ValuesBucket, callback: AsyncCallback<number>): void {\n    hilog.info(domain, TAG, 'DataAbility insert start');\n    if (rdbStore) {\n      rdbStore.insert(TABLE_NAME, valueBucket, callback);\n    }\n  }\n\n  batchInsert(uri: string, valueBuckets: Array<rdb.ValuesBucket>, callback: AsyncCallback<number>): void {\n    hilog.info(domain, TAG, 'DataAbility batch insert start');\n    if (rdbStore) {\n      for (let i = 0; i < valueBuckets.length; i++) {\n        hilog.info(domain, TAG, 'DataAbility batch insert i=' + i);\n        if (i < valueBuckets.length - 1) {\n          rdbStore.insert(TABLE_NAME, valueBuckets[i], (err: BusinessError, num: number) => {\n            hilog.info(domain, TAG, 'DataAbility batch insert ret=' + num);\n          });\n        } else {\n          rdbStore.insert(TABLE_NAME, valueBuckets[i], callback);\n        }\n      }\n    }\n  }\n\n  query(uri: string, columns: Array<string>, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<rdb.ResultSet>): void {\n    hilog.info(domain, TAG, 'DataAbility query start');\n    let rdbPredicates = dataAbility.createRdbPredicates(TABLE_NAME, predicates);\n    if (rdbStore) {\n      rdbStore.query(rdbPredicates, columns, callback);\n    }\n  }\n\n  update(uri: string, valueBucket: rdb.ValuesBucket, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void {\n    hilog.info(domain, TAG, 'DataAbility update start');\n    let rdbPredicates = dataAbility.createRdbPredicates(TABLE_NAME, predicates);\n    if (rdbStore) {\n      rdbStore.update(valueBucket, rdbPredicates, callback);\n    }\n  }\n\n  delete(uri: string, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void {\n    hilog.info(domain, TAG, 'DataAbility delete start');\n    let rdbPredicates = dataAbility.createRdbPredicates(TABLE_NAME, predicates);\n    if (rdbStore) {\n      rdbStore.delete(rdbPredicates, callback);\n    }\n  }\n}\n\nexport default new DataAbility();
