对焦(C/C++)
相机框架提供对设备对焦的能力，业务应用可以根据使用场景进行对焦模式和对焦点的设置。
开发步骤
详细的API说明请参考Camera API参考。
导入NDK接口，导入方法如下。  // 导入NDK接口头文件\n #include \"hilog/log.h\"\n #include \"ohcamera/camera.h\"\n #include \"ohcamera/camera_input.h\"\n #include \"ohcamera/capture_session.h\"\n #include \"ohcamera/photo_output.h\"\n #include \"ohcamera/preview_output.h\"\n #include \"ohcamera/video_output.h\"\n #include \"ohcamera/camera_manager.h\" 在CMake脚本中链接相关动态库。  target_link_libraries(entry PUBLIC libohcamera.so libhilog_ndk.z.so) 调用OH_CaptureSession_SetFocusMode设置对焦模式。  需要先调用OH_CaptureSession_IsFocusModeSupported检查设备是否支持指定的焦距模式。需要在Session调用OH_CaptureSession_CommitConfig完成配流之后调用。   Camera_ErrorCode SetFocusMode(Camera_CaptureSession *captureSession, uint32_t mode)\n {\n     bool isFocusModeSupported = false;\n     Camera_FocusMode focusMode = static_cast<Camera_FocusMode>(mode);\n     Camera_ErrorCode ret = OH_CaptureSession_IsFocusModeSupported(captureSession, focusMode, &isFocusModeSupported);\n     if (&isFocusModeSupported == nullptr || ret != CAMERA_OK) {\n         OH_LOG_ERROR(LOG_APP, \"IsFocusModeSupported failed.\");\n         return CAMERA_INVALID_ARGUMENT;\n     }\n\n     if (!isFocusModeSupported) {\n         OH_LOG_INFO(LOG_APP, \"current focusMode(%{public}d) is not supported.\", focusMode);\n         return CAMERA_OK;\n     }\n\n     OH_LOG_INFO(LOG_APP, \"OH_CaptureSession_SetFocusMode focusMode(%{public}d).\", focusMode);\n     ret = OH_CaptureSession_SetFocusMode(captureSession, focusMode);\n     if (ret != CAMERA_OK) {\n         OH_LOG_ERROR(LOG_APP, \"SetFocusMode failed.\");\n         return CAMERA_INVALID_ARGUMENT;\n     }\n     return ret;\n } 调用OH_CaptureSession_SetFocusMode设置对焦模式。 若设置为自动对焦模式，支持调用OH_CaptureSession_SetFocusPoint设置对焦点，根据对焦点执行一次自动对焦。 需要在Session调用OH_CaptureSession_CommitConfig完成配流之后调用。   Camera_ErrorCode SetFocusPoint(Camera_CaptureSession *captureSession, float x, float y)\n {\n     Camera_Point focusPoint;\n     focusPoint.x = x;\n     focusPoint.y = y;\n     Camera_ErrorCode ret = OH_CaptureSession_SetFocusPoint(captureSession, focusPoint);\n     if (ret != CAMERA_OK) {\n         OH_LOG_ERROR(LOG_APP, \"SetFocusPoint failed.\");\n         return CAMERA_INVALID_ARGUMENT;\n     }\n     return ret;\n }  
状态监听
在相机应用开发过程中，可以随时监听相机聚焦的状态变化。
通过注册focusStateChange的回调函数获取监听结果，仅当自动对焦模式时，且相机对焦状态发生改变时触发该事件。
    Camera_ErrorCode ret = OH_CaptureSession_RegisterCallback(captureSession, GetCaptureSessionRegister());\n    if (ret != CAMERA_OK) {\n        OH_LOG_ERROR(LOG_APP, \"OH_CaptureSession_RegisterCallback failed.\");\n    }
    void CaptureSessionOnFocusStateChange(Camera_CaptureSession* captureSession, Camera_FocusState focusState)\n    {\n        OH_LOG_INFO(LOG_APP, \"CaptureSession_Callbacks CaptureSessionOnFocusStateChange\");\n        OH_LOG_INFO(LOG_APP, \"CaptureSession focusState = %{public}d\", focusState);\n        // 为保证对焦功能的用户体验，在自动对焦成功后，可将对焦模式设置为连续自动对焦\n        if (focusState == Camera_FocusState::FOCUS_STATE_FOCUSED) {\n            Camera_ErrorCode ret = SetFocusMode(captureSession, Camera_FocusMode::FOCUS_MODE_CONTINUOUS_AUTO);\n        }\n    }\n\n    void CaptureSessionOnError(Camera_CaptureSession* captureSession, Camera_ErrorCode errorCode)\n    {\n        OH_LOG_INFO(LOG_APP, \"CaptureSession_Callbacks CaptureSessionOnError\");\n        OH_LOG_INFO(LOG_APP, \"CaptureSession errorCode = %{public}d\", errorCode);\n    }\n\n    CaptureSession_Callbacks* GetCaptureSessionRegister(void)\n    {\n        static CaptureSession_Callbacks captureSessionCallbacks = {\n            .onFocusStateChange = CaptureSessionOnFocusStateChange,\n            .onError = CaptureSessionOnError\n        };\n        return &captureSessionCallbacks;\n    }
