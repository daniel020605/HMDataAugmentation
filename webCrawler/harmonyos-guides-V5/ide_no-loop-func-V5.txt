@typescript-eslint/no-loop-func
禁止在循环语句内包含不安全引用的函数声明。
该规则仅支持对.js/.ts文件进行检查。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/no-loop-func\": \"error\"\n  }\n}
选项
该规则无需配置额外选项。
正例
const a = function(): void {\n  console.info('hello');\n};\n\nfor (let i = 10; i; i--) {\n  a();\n}\n\nfor (let i = 10; i; i--) {\n  const b = function(): void {\n    a();\n  }; // OK, no references to variables in the outer scopes.\n  b();\n}
反例
const num = 10;\nfor (let i = num; i; i--) {\n  // 变量i是不安全的引用\n  (function(): number {\n    return i;\n  })();\n}\n\nlet i1 = 0;\nwhile (i1 < num) {\n  // 变量i是不安全的引用\n  const a = function(): number {\n    return i1;\n  };\n  a();\n\n  i1++;\n}\n\nlet i2 = 0;\ndo {\n  // 变量i是不安全的引用\n  function a(): number {\n    return i2;\n  }\n  a();\n\n  i2++;\n} while (i2 < num);
规则集
plugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
