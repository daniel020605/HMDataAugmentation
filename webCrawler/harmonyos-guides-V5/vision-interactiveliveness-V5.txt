人脸活体检测
场景介绍
人脸活体检测支持动作活体检测模式。
活体检测是一项纯端侧算法、试用期免费的系统基础服务，推荐开发者使用在考勤打卡、辅助登录和实名认证等低危业务场景中。
端侧算法在HarmonyOS NEXT/5.0.x已完成权威机构（CFCA）检测认证。鉴于支付和金融应用的高风险性，建议开发者基于现有的安全性，针对不同的功能场景进行风险评估和风控策略评估，并采取必要的安全措施。
约束与限制
该能力当前不支持模拟器。
接口说明
以下仅列出demo中调用的部分主要接口，具体API说明详见API参考。
接口名
描述
startLivenessDetection(config: InteractiveLivenessConfig): Promise<boolean>;
跳转到人脸活体检测页面的入口
getInteractiveLivenessResult(): Promise<InteractiveLivenessResult>
获取人脸活体检测的结果。使用Promise异步回调
开发步骤
 将实现人脸活体检测相关的类添加至工程。import { interactiveLiveness } from '@kit.VisionKit';  在module.json5文件中添加CAMERA权限，其中reason，abilities标签必填，配置方式参见requestPermissions标签说明。\"requestPermissions\":[\n  {\n    \"name\": \"ohos.permission.CAMERA\",\n    \"reason\": \"$string:camera_desc\",\n    \"usedScene\": {\"abilities\": []}\n  }\n]  简单配置页面的布局，选择人脸活体检测验证完后的跳转模式。如果使用back跳转模式，表示的是在检测结束后使用router.back()返回。如果使用replace跳转模式，表示的是检测结束后使用router.replaceUrl()去跳转相应页面。默认选择的是replace跳转模式。Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n  Text(\"验证完的跳转模式：\")\n    .fontSize(18)\n    .width(\"25%\")\n  Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n    Row() {\n      Radio({ value: \"replace\", group: \"routeMode\" }).checked(true)\n        .height(24)\n        .width(24)\n        .onChange((isChecked: boolean) => {\n          this.routeMode = \"replace\"\n        })\n      Text(\"replace\")\n        .fontSize(16)\n    }\n    .margin({ right: 15 })\n\n    Row() {\n      Radio({ value: \"back\", group: \"routeMode\" }).checked(false)\n        .height(24)\n        .width(24)\n        .onChange((isChecked: boolean) => {\n          this.routeMode = \"back\";\n        })\n      Text(\"back\")\n        .fontSize(16)\n    }\n  }\n  .width(\"75%\")\n}  填写验证的动作个数。Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n  Text(\"动作数量：\")\n    .fontSize(18)\n    .width(\"25%\")\n  TextInput({\n    placeholder: this.actionsNum != 0 ? this.actionsNum.toString() : \"动作数量为3或4个\"\n  })\n    .type(InputType.Number)\n    .placeholderFont({\n      size: 18,\n      weight: FontWeight.Normal,\n      family: \"HarmonyHeiTi\",\n      style: FontStyle.Normal\n    })\n    .fontSize(18)\n    .fontWeight(FontWeight.Bold)\n    .fontFamily(\"HarmonyHeiTi\")\n    .fontStyle(FontStyle.Normal)\n    .width(\"65%\")\n    .onChange((value: string) => {\n      this.actionsNum = Number(value) as interactiveLiveness.ActionsNumber;\n    })\n}  点击“开始检测“按钮，触发点击事件。Button(\"开始检测\", { type: ButtonType.Normal, stateEffect: true })\n  .width(192)\n  .height(40)\n  .fontSize(16)\n  .backgroundColor(0x317aff)\n  .borderRadius(20)\n  .margin({\n    bottom: 56\n  })\n  .onClick(() => {\n    this.privateStartDetection();\n  })  触发CAMERA权限校验。// 校验CAMERA权限\nprivate privateStartDetection() {\n  abilityAccessCtrl.createAtManager().requestPermissionsFromUser(this.context, this.array).then((res) => {\n    for (let i = 0; i < res.permissions.length; i++) {\n      if (res.permissions[i] === \"ohos.permission.CAMERA\" && res.authResults[i] === 0) {\n        this.privateRouterLibrary();\n      }\n    }\n  }).catch((err: BusinessError) => {\n    hilog.error(0x0001, \"LivenessCollectionIndex\", `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);\n  })\n}  配置人脸活体检测控件的配置项InteractiveLivenessConfig，用于跳转到人脸活体检测控件。         配置中具体的参数可参考API文档。        let routerOptions: interactiveLiveness.InteractiveLivenessConfig = {\n  isSilentMode: this.isSilentMode as interactiveLiveness.DetectionMode,\n  routeMode: this.routeMode as interactiveLiveness.RouteRedirectionMode,\n  actionsNum: this.actionsNum\n};   调用interactiveLiveness的startLivenessDetection接口，判断跳转到人脸活体检测控件是否成功。// 跳转到人脸活体检测控件\nprivate privateRouterLibrary() {\n  if (canIUse(\"SystemCapability.AI.Component.LivenessDetect\")) {\n    interactiveLiveness.startLivenessDetection(routerOptions).then((DetectState: boolean) => {\n      hilog.info(0x0001, \"LivenessCollectionIndex\", `Succeeded in jumping.`);\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0001, \"LivenessCollectionIndex\", `Failed to jump. Code：${err.code}，message：${err.message}`);\n    })\n  } else {\n    hilog.error(0x0001, \"LivenessCollectionIndex\", 'this api is not supported on this device');\n  }\n}  检测结束后回到当前界面，可调用interactiveLiveness的getInteractiveLivenessResult接口，验证人脸活体检测的结果。// 获取验证结果\nprivate getDetectionResultInfo() {\n  // getInteractiveLivenessResult接口调用完会释放资源\n  if (canIUse(\"SystemCapability.AI.Component.LivenessDetect\")) {\n    let resultInfo = interactiveLiveness.getInteractiveLivenessResult();\n    resultInfo.then(data => {\n      this.resultInfo = data;\n    }).catch((err: BusinessError) => {\n      this.failResult = {\n        \"code\": err.code,\n        \"message\": err.message\n      }\n    })\n  } else {\n    hilog.error(0x0001, \"LivenessCollectionIndex\", 'this api is not supported on this device');\n  }\n}  
开发实例
import { common, abilityAccessCtrl, Permissions } from '@kit.AbilityKit';\nimport { interactiveLiveness } from '@kit.VisionKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct LivenessIndex {\n  private context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  private array: Array<Permissions> = [\"ohos.permission.CAMERA\"];\n  @State actionsNum: number = 0;\n  @State isSilentMode: string = \"INTERACTIVE_MODE\";\n  @State routeMode: string = \"replace\";\n  @State resultInfo: interactiveLiveness.InteractiveLivenessResult = {\n    livenessType: 0\n  };\n  @State failResult: Record<string, number | string> = {\n    \"code\": 1008302000,\n    \"message\": \"\"\n  };\n\n  build() {\n    Stack({\n      alignContent: Alignment.Top\n    }) {\n      Column() {\n        Row() {\n          Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n            Text(\"验证完的跳转模式：\")\n              .fontSize(18)\n              .width(\"25%\")\n            Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n              Row() {\n                Radio({ value: \"replace\", group: \"routeMode\" }).checked(true)\n                  .height(24)\n                  .width(24)\n                  .onChange((isChecked: boolean) => {\n                    this.routeMode = \"replace\"\n                  })\n                Text(\"replace\")\n                  .fontSize(16)\n              }\n              .margin({ right: 15 })\n\n              Row() {\n                Radio({ value: \"back\", group: \"routeMode\" }).checked(false)\n                  .height(24)\n                  .width(24)\n                  .onChange((isChecked: boolean) => {\n                    this.routeMode = \"back\";\n                  })\n                Text(\"back\")\n                  .fontSize(16)\n              }\n            }\n            .width(\"75%\")\n          }\n        }\n        .margin({ bottom: 30 })\n\n          Row() {\n            Flex({ direction: FlexDirection.Row, justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {\n              Text(\"动作数量：\")\n                .fontSize(18)\n                .width(\"25%\")\n              TextInput({\n                placeholder: this.actionsNum != 0 ? this.actionsNum.toString() : \"动作数量为3或4个\"\n              })\n                .type(InputType.Number)\n                .placeholderFont({\n                  size: 18,\n                  weight: FontWeight.Normal,\n                  family: \"HarmonyHeiTi\",\n                  style: FontStyle.Normal\n                })\n                .fontSize(18)\n                .fontWeight(FontWeight.Bold)\n                .fontFamily(\"HarmonyHeiTi\")\n                .fontStyle(FontStyle.Normal)\n                .width(\"65%\")\n                .onChange((value: string) => {\n                  this.actionsNum = Number(value) as interactiveLiveness.ActionsNumber;\n                })\n            }\n          }\n      }\n      .margin({ left: 24, top: 80 })\n      .zIndex(1)\n\n      Stack({\n        alignContent: Alignment.Bottom\n      }) {\n        if (this.resultInfo?.mPixelMap) {\n          Image(this.resultInfo?.mPixelMap)\n            .width(260)\n            .height(260)\n            .align(Alignment.Center)\n            .margin({ bottom: 260 })\n          Circle()\n            .width(300)\n            .height(300)\n            .fillOpacity(0)\n            .strokeWidth(60)\n            .stroke(Color.White)\n            .margin({ bottom: 250, left: 0 })\n        }\n\n        Text(this.resultInfo.mPixelMap ?\n          \"检测成功\" :\n          this.failResult.code != 1008302000 ?\n            \"检测失败\" :\n            \"\")\n          .width(\"100%\")\n          .height(26)\n          .fontSize(20)\n          .fontColor(\"#000000\")\n          .fontFamily(\"HarmonyHeiTi\")\n          .margin({ top: 50 })\n          .textAlign(TextAlign.Center)\n          .fontWeight(\"Medium\")\n          .margin({ bottom: 240 })\n\n        if(this.failResult.code != 1008302000) {\n          Text(this.failResult.message as string)\n            .width(\"100%\")\n            .height(26)\n            .fontSize(16)\n            .fontColor(Color.Gray)\n            .textAlign(TextAlign.Center)\n            .fontFamily(\"HarmonyHeiTi\")\n            .fontWeight(\"Medium\")\n            .margin({ bottom: 200 })\n        }\n\n        Button(\"开始检测\", { type: ButtonType.Normal, stateEffect: true })\n          .width(192)\n          .height(40)\n          .fontSize(16)\n          .backgroundColor(0x317aff)\n          .borderRadius(20)\n          .margin({\n            bottom: 56\n          })\n          .onClick(() => {\n            this.privateStartDetection();\n          })\n      }\n      .height(\"100%\")\n    }\n  }\n\n  onPageShow() {\n    this.resultRelease();\n    this.getDetectionResultInfo();\n  }\n\n  // 跳转到人脸活体检测控件\n  private privateRouterLibrary() {\n    let routerOptions: interactiveLiveness.InteractiveLivenessConfig = {\n      isSilentMode: this.isSilentMode as interactiveLiveness.DetectionMode,\n      routeMode: this.routeMode as interactiveLiveness.RouteRedirectionMode,\n      actionsNum: this.actionsNum\n    }\n\n    if (canIUse(\"SystemCapability.AI.Component.LivenessDetect\")) {\n      interactiveLiveness.startLivenessDetection(routerOptions).then((DetectState: boolean) => {\n        hilog.info(0x0001, \"LivenessCollectionIndex\", `Succeeded in jumping.`);\n      }).catch((err: BusinessError) => {\n        hilog.error(0x0001, \"LivenessCollectionIndex\", `Failed to jump. Code：${err.code}，message：${err.message}`);\n      })\n    } else {\n      hilog.error(0x0001, \"LivenessCollectionIndex\", 'this api is not supported on this device');\n    }\n  }\n\n  // 校验CAMERA权限\n  private privateStartDetection() {\n    abilityAccessCtrl.createAtManager().requestPermissionsFromUser(this.context, this.array).then((res) => {\n      for (let i = 0; i < res.permissions.length; i++) {\n        if (res.permissions[i] === \"ohos.permission.CAMERA\" && res.authResults[i] === 0) {\n        this.privateRouterLibrary();\n      }\n     }\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0001, \"LivenessCollectionIndex\", `Failed to request permissions from user. Code is ${err.code}, message is ${err.message}`);\n    })\n  }\n\n  // 获取验证结果\n  private getDetectionResultInfo() {\n    // getInteractiveLivenessResult接口调用完会释放资源\n    if (canIUse(\"SystemCapability.AI.Component.LivenessDetect\")) {\n      let resultInfo = interactiveLiveness.getInteractiveLivenessResult();\n      resultInfo.then(data => {\n        this.resultInfo = data;\n      }).catch((err: BusinessError) => {\n        this.failResult = {\n          \"code\": err.code,\n          \"message\": err.message\n        }\n      })\n    } else {\n      hilog.error(0x0001, \"LivenessCollectionIndex\", 'this api is not supported on this device');\n    }\n  }\n\n  // result release\n  private resultRelease() {\n    this.resultInfo = {\n      livenessType: 0\n    }\n    this.failResult = {\n      \"code\": 1008302000,\n      \"message\": \"\"\n    }\n  }\n}
