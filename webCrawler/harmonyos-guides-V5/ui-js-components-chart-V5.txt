chart开发指导
chart为图表组件，用于呈现线形图、柱状图和量规图界面。具体用法请参考chart。
创建chart组件
在pages/index目录下的hml文件中创建一个chart组件。
<!-- xxx.hml -->\n<div class=\"container\">\n  <chart class=\"chart-data\" type=\"line\" options=\"{{lineOps}}\" datasets=\"{{lineData}}\"></chart>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}\n.chart-data {\n  width: 700px;\n  height: 600px;\n}
// xxx.js\nexport default {\n  data: {\n    lineData: [\n      {\n        data: [763, 550, 551, 554, 731, 654, 525, 696, 595, 628, 791, 505, 613, 575, 475, 553, 491, 680, 657, 716]\n      }\n    ],\n    lineOps: {\n      xAxis: {\n        min: 0,\n        max: 20,\n        display: false,\n      },\n      yAxis: {\n        min: 0,\n        max: 1000,\n        display: false,\n      },\n      series: {\n        lineStyle: {\n          width: 15,\n        },\n      }\n    },\n  }\n}
设置图表类型
chart组件通过设置type属性定义图表类型，如将图表设置为柱状图。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"container\">\n    <div class=\"switch-block\">\n      <text class=\"title\">\n        {{ title }}\n      </text>\n    </div>\n    <tabs class=\"tabs\" index=\"0\" vertical=\"false\" onchange=\"changes\">\n      <tab-content class=\"tabcontent\" scrollable=\"true\">\n        <tabs >\n          <tab-bar class=\"tab-bar\" mode=\"fixed\"style=\"margin-bottom: 50px;\">\n            <text class=\"tab-text\">线形图</text>\n            <text class=\"tab-text\">柱状图</text>\n            <text class=\"tab-text\">量规图</text>\n          </tab-bar>\n          <tab-content>\n            <div class=\"bar-block\" style=\"margin-left: 30px;\">\n              <chart class=\"chart-data\" type=\"line\" ref=\"linechart\" options=\"{{ lineOps }}\" datasets=\"{{ lineData }}\">\n              </chart>\n            </div>\n            <div class=\"bar-block\">\n              <chart class=\"data-bar\" type=\"bar\" id=\"bar-chart\" options=\"{{ barOps }}\" datasets=\"{{ barData }}\">\n              </chart>\n            </div>\n            <div class=\"chart-block\">\n              <chart type=\"gauge\" ></chart>\n            </div>\n          </tab-content>\n        </tabs>\n      </tab-content>\n    </tabs>\n  </div>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  background-color: #F1F3F5;\n}\n.tab-bar{\n  background-color: #F1F3F5;\n}\n.chart-data {\n  width: 700px;\n  height: 600px;\n}\n.title{\n  margin-left: 50px;\n  margin-top: 50px;\n  font-size: 50px;\n}\n.line-block{\n  align-items: center;\n  justify-content: center;\n}\n.bar-block{\n  align-items: center;\n  justify-content: center;\n}\n.chart-block{\n  width: 90%;\n  margin-left: 30px;\n}
// xxx.js\nexport default {\n  data: {\n    title: \"类型展示\",\n    barData: [\n      {\n        fillColor: '#3848e8',\n        data: [763, 550, 551, 554, 731, 654, 525, 696, 595],\n      }\n    ],\n    lineData: [\n      {\n        strokeColor: '#0081ff',\n        fillColor: '#cce5ff',\n        data: [763, 550, 551, 554, 731, 654, 525, 696, 595, 628, 791, 505, 613, 575, 475, 553, 491, 680, 657, 716],\n        gradient: true,\n      }\n    ],\n    lineOps: {\n      xAxis: {\n        min: 0,\n        max: 20,\n        display: false,\n      },\n      yAxis: {\n        min: 0,\n        max: 1000,\n        display: false,\n      },\n      series:{\n        lineStyle: {\n          width: \"5px\",\n          smooth: true,\n        },\n        headPoint: {\n          shape:\"circle\",\n          size: 20,\n          strokeWidth: 5,\n          fillColor: '#ffffff',\n          strokeColor: '#007aff',\n          display: true,\n        },\n        loop:{\n          margin: 2,\n          gradient: true\n        }\n      },\n    },\n    barOps: {\n      xAxis: {\n        min: 0,\n        max: 20,\n        display: false,\n        axisTick: 10,\n      },\n      yAxis: {\n        min: 0,\n        max: 1000,\n      },\n    },\n  },\n}
chart不支持显示每个点的值。
设置图表属性
chart组件在options属性中设置对x轴、y轴和数据序列参数的设置，在datasets属性里添加对线条颜色、填充颜色、填充渐变颜色和绘制点集的设置。
<!-- xxx.hml -->\n<div class=\"container\">\n  <chart class=\"chart-data\" type=\"line\" options=\"{{lineOps}}\" datasets=\"{{lineData}}\"></chart>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}\n.chart-data {\n  width: 700px;\n  height: 600px;\n}
// xxx.js\nexport default {\n  data: {\n    //线形图数据\n    lineData: [\n      {\n        strokeColor: '#0081ff',\n        fillColor: '#cce5ff',  //填充色\n        data: [463, 250, 251, 254, 431, 354, 225, 396, 295, 328, 491, 205, 313, 275, 475, 553, 491, 380, 357, 416],\n        gradient: true,\n      }\n    ],\n    lineOps: {\n     //x轴参数设置\n      xAxis: {\n        min: 0,\n        max: 20,\n        display: false,\n      },\n     //y轴参数设置\n      yAxis: {\n        min: 0,\n        max: 1000,\n        display: false,\n      },\n     //数据序列参数设置\n      series: {\n        //线样式设置\n        lineStyle: {\n          width: \"5px\",\n          smooth: true,\n        },\n        //线最前端位置白点的样式和大小\n        headPoint: {\n          shape: \"circle\",\n          size: 20,\n          strokeWidth: 5,\n          fillColor: '#ffffff',\n          strokeColor: '#007aff',\n          display: true,\n        },\n        //设置屏幕显示满时，是否需要重头开始绘制\n        loop: {\n          margin: 2,\n          gradient: true\n        }\n      }\n    },\n  },\n}
 options只支持柱状图和线形图设置参数，量规图不生效。 datasets只支持柱状图和线形图设置数据集合，量规图不生效。 series只有线形图支持。 
添加数据
通过chart组件的append方法，实现动态添加数据。
<!-- xxx.hml -->\n<div class=\"container\">\n  <stack class=\"chart-region\">\n    <chart class=\"chart-data\" type=\"line\" ref=\"linechart\" options=\"{{lineOps}}\" datasets=\"{{lineData}}\"></chart>\n  </stack>\n  <button value=\"Add data\" onclick=\"addData\"></button>\n</div>
/* xxx.css */\n.container {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: #F1F3F5;\n}\n.chart-region {\n  height: 400px;\n  width: 700px;\n}\n.chart-data {\n  width: 700px;\n  height: 600px;\n}\nbutton {\n  width: 100%;\n  height: 50px;\n  background-color: #F4F2F1;\n  text-color: #0C81F3;\n  margin-top: 30px;\n}
// xxx.js\nexport default {\n  data: {\n    lineData: [\n      {\n        strokeColor: '#de0b6e',\n        fillColor: '#bb09a3',\n        data: [763, 550, 551, 554, 731, 654, 525, 696, 595, 628, 791, 505, 613, 575, 475, 553, 491, 680, 657, 716],\n        gradient: true,\n      }\n    ],\n    lineOps: {\n      xAxis: {\n      min: 0,\n      max: 20,\n      display: false,\n      },\n      yAxis: {\n        min: 0,\n        max: 1000,\n        display: false,\n      },\n      series: {\n        lineStyle: {\n          width: \"5px\",\n          smooth: true,\n        },\n        headPoint: {\n          shape: \"circle\",\n          size: 20,\n          strokeWidth: 5,\n          fillColor: '#ffffff',\n          strokeColor: '#f8145c',\n          display: true,\n        },\n        loop: {\n          margin: 2,\n          gradient: true,\n        }\n      }\n    },\n  },\n  addData() {    \n    this.$refs.linechart.append({      \n    serial: 0,        \n      data: [Math.floor(Math.random() * 400) + 200]    \n    })  \n  }\n}
场景示例
开发者可以根据开关Switch的状态来选择数据展示的状态，当Switch状态为true时，通过定时器来实现数据的动态展示。
<!-- xxx.hml -->\n<div class=\"container\">\n  <div class=\"container\">\n    <div class=\"switch-block\">\n      <text class=\"title\">{{ title }} </text>\n      <switch class=\"switch\" showtext=\"{{ showText }}\" allow-scale=\"{{ allowScale }}\"onchange=\"change\">\n      </switch>\n    </div>\n    <tabs class=\"tabs\" index=\"0\" vertical=\"false\" onchange=\"changes\">\n      <tab-content class=\"tabcontent\" scrollable=\"true\">\n        <div>\n          <tabs class=\"tabs\" index=\"0\" vertical=\"false\" onchange=\"changes\">\n            <tab-content class=\"tabcontent\" scrollable=\"true\">\n              <div class=\"line-class\">\n                <div class=\"bar-block\">\n                  <chart class=\"chart-data\" type=\"line\" ref=\"linechart\" options=\"{{ lineOps }}\"   \n                  datasets=\"{{ lineData }}\">\n                  </chart>\n                </div>\n                <div class=\"bar-block\">\n                  <chart class=\"data-bar\" type=\"bar\" id=\"bar-chart\" options=\"{{ barOps }}\"datasets=\"{{ barData }}\">\n                  </chart>\n                </div>\n             </div>\n           </tab-content>\n         </tabs>\n       </div>\n       <div>\n         <div class=\"container\">\n           <list class=\"todo-wrapper\">\n             <list-item for=\"{{ barData }}\" class=\"todo-item\">\n               <text class=\"todo-title\">{{ $item.data }}</text>\n             </list-item>\n           </list>\n           <list class=\"todo-wrapper\">\n             <list-item for=\"{{ lineData.data }}\" class=\"todo-item\">\n               <text class=\"todo-title\">{{ $item.value }}</text>\n             </list-item>\n           </list>\n         </div>\n       </div>\n      </tab-content>\n    </tabs>\n  </div>\n</div>
/* xxx.css */\n.container{\n  display:flex;\n  flex-direction:column;\n  background-color: #F1F3F5;\n}\n.line-class{\n  display: flex;\n  flex-direction: column;\n}\n.title{\n  font-size: 40px;\n  margin-left: 40px;\n}\n.switch-block {\n  margin-top: 30px;\n  width: 98%;\n  height: 80px;\n  display: flex;\n  justify-content: space-between;\n}\n.switch{\n  font-size: 40px;\n}\n.bar-block {\n  margin-top: 80px;\n  margin-left: 40px;\n  position: relative;\n  width: 90%;\n  border-radius: 10px;\n  background-color: #25FAB27B;\n  height: 40%;\n  justify-content: center;\n}
// xxx.js\nexport default {\n  data: {\n    interval: null,\n    title: \"数据展示\",\n    allowScale: true,\n    dataLength: 30,\n    barGroup: 3,\n    lineData: null,\n    lineOps: {\n      xAxis: {\n        min: 0,\n        max: 5\n      },\n      yAxis: {\n        min: 0,\n        max: 100\n      },\n      series: {\n        lineStyle: {\n        width: '1px',\n      },\n        headPoint: {\n          shape: 'circle',\n          size: 10,\n          strokeWidth: 2,\n          fillColor: '#ffffff',\n          strokeColor: '#8477DF'\n        },\n        loop: {\n          margin: 2\n        }\n      }\n    },\n    barData: [\n      {\n        fillColor: '#97CF0A2C',\n        data: [20, 20,40, 56]\n      },\n      {\n        fillColor: '#6D0A7ACF',\n        data: [52, 40, 2, 67]\n      },\n      {\n        fillColor: '#6A0ACFA1',\n        data: [56, 2, 77, 40]\n      }\n    ],\n    barOps: {\n      xAxis: {\n        min: 0,\n        max: 20,\n        axisTick: 5\n      },\n      yAxis: {\n        min: 0,\n        max: 100\n      }\n    }\n  },\n  onInit() {\n    this.changeLine();\n  },\n  change(e) {\n    if (e.checked) {\n      this.interval = setInterval(() => {\n        this.changeLine();\n        this.changeBar();\n      }, 1000)\n    } else {\n      clearInterval(this.interval);\n    }\n  },\n  changeLine() {\n    var dataArray = [];\n    for (var i = 0; i < this.dataLength; i++) {\n      var nowValue = Math.floor(Math.random() * 99 + 1);\n      var obj = {\n        \"value\": nowValue,\n        \"description\": nowValue + \"\",\n        \"textLocation\": \"top\",\n        \"textColor\": \"#CDCACA\",\n        \"pointStyle\": {\n          \"shape\": \"circle\",\n          \"size\": 5,\n          \"fillColor\": \"#CF0A2C\",\n          \"strokeColor\": \"#CF0A2C\"\n        }\n      };\n      dataArray.push(obj);\n    }\n    this.lineData = [\n      {\n        strokeColor: '#0081ff',\n        fillColor: '#FF07CDC4',\n        data: dataArray,\n        gradient: true,\n      }\n    ]\n  },\n  changeBar() {\n    for (var i = 0;i < this.barGroup; i++) {\n      var dataArray = this.barData[i].data;\n      for (var j = 0;j < 4; j++) {\n        dataArray[j] = Math.floor(Math.random() * 99 + 1);\n      }\n    }\n    this.barData = this.barData.splice(0, this.barGroup + 1);\n  },\n  changes(e) {\n    console.log(\"Tab index: \" + e.index);\n  },\n}\n\n\n\n
