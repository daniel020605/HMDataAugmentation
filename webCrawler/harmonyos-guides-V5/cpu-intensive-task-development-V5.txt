CPU密集型任务开发指导 (TaskPool和Worker)
CPU密集型任务是指需要占用系统资源处理大量计算能力的任务，需要长时间运行，这段时间会阻塞线程其它事件的处理，不适宜放在UI主线程进行。例如图像处理、视频编码、数据分析等。
基于多线程并发机制处理CPU密集型任务可以提高CPU利用率，提升应用程序响应速度。
当任务不需要长时间（3分钟）占据后台线程，而是一个个独立的任务时，推荐使用TaskPool，反之推荐使用Worker。
接下来将以图像直方图处理以及后台长时间的模型预测任务分别进行举例。
使用TaskPool进行图像直方图处理
 实现图像处理的业务逻辑。 数据分段，通过任务组发起关联任务调度。 创建TaskGroup并通过addTask()添加对应的任务，通过execute()执行任务组，并指定为高优先级，在当前任务组所有任务结束后，会将直方图处理结果同时返回。 结果数组汇总处理。 
import { taskpool } from '@kit.ArkTS';\n\n@Concurrent\nfunction imageProcessing(dataSlice: ArrayBuffer): ArrayBuffer {\n  // 步骤1: 具体的图像处理操作及其他耗时操作\n  return dataSlice;\n}\n\nfunction histogramStatistic(pixelBuffer: ArrayBuffer): void {\n  // 步骤2: 分成三段并发调度\n  let number: number = pixelBuffer.byteLength / 3;\n  let buffer1: ArrayBuffer = pixelBuffer.slice(0, number);\n  let buffer2: ArrayBuffer = pixelBuffer.slice(number, number * 2);\n  let buffer3: ArrayBuffer = pixelBuffer.slice(number * 2);\n\n  let group: taskpool.TaskGroup = new taskpool.TaskGroup();\n  group.addTask(imageProcessing, buffer1);\n  group.addTask(imageProcessing, buffer2);\n  group.addTask(imageProcessing, buffer3);\n\n  taskpool.execute(group, taskpool.Priority.HIGH).then((ret: Object) => {\n    // 步骤3: 结果数组汇总处理\n  })\n}\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World'\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            let buffer: ArrayBuffer = new ArrayBuffer(24);\n            histogramStatistic(buffer);\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
使用Worker进行长时间数据分析
本文通过某地区提供的房价数据训练一个简易的房价预测模型，该模型支持通过输入房屋面积和房间数量去预测该区域的房价，模型需要长时间运行，房价预测需要使用前面的模型运行结果，因此需要使用Worker。
 DevEco Studio提供了Worker创建的模板，新建一个Worker线程，例如命名为“MyWorker”。  在宿主线程中通过调用ThreadWorker的constructor()方法创建Worker对象。 // Index.ets\nimport { worker } from '@kit.ArkTS';\n\nconst workerInstance: worker.ThreadWorker = new worker.ThreadWorker('entry/ets/workers/MyWorker.ts'); 在宿主线程中通过调用onmessage()方法接收Worker线程发送过来的消息，并通过调用postMessage()方法向Worker线程发送消息。 例如向Worker线程发送训练和预测的消息，同时接收Worker线程发送回来的消息。 // Index.ets\nlet done = false;\n\n// 接收Worker子线程的结果\nworkerInstance.onmessage = (() => {\n  console.info('MyWorker.ts onmessage');\n  if (!done) {\n    workerInstance.postMessage({ 'type': 1, 'value': 0 });\n    done = true;\n  }\n})\n\nworkerInstance.onerror = (() => {\n  // 接收Worker子线程的错误信息\n})\n\n// 向Worker子线程发送训练消息\nworkerInstance.postMessage({ 'type': 0 }); 在MyWorker.ts文件中绑定Worker对象，当前线程为Worker线程。 // MyWorker.ts\nimport { worker, ThreadWorkerGlobalScope, MessageEvents, ErrorEvent } from '@kit.ArkTS';\n\nlet workerPort: ThreadWorkerGlobalScope = worker.workerPort; 在Worker线程中通过调用onmessage()方法接收宿主线程发送的消息内容，并通过调用postMessage()方法向宿主线程发送消息。 例如在Worker线程中定义预测模型及其训练过程，同时与宿主线程进行信息交互。 // MyWorker.ts\n// 定义训练模型及结果\nlet result: Array<number>;\n// 定义预测函数\nfunction predict(x: number): number {\n return result[x];\n}\n// 定义优化器训练过程\nfunction optimize(): void {\n result = [0];\n}\n// Worker线程的onmessage逻辑\nworkerPort.onmessage = (e: MessageEvents): void => {\n // 根据传输的数据的type选择进行操作\n switch (e.data.type as number) {\n  case 0:\n  // 进行训练\n   optimize();\n  // 训练之后发送宿主线程训练成功的消息\n   workerPort.postMessage({ type: 'message', value: 'train success.' });\n   break;\n  case 1:\n  // 执行预测\n   const output: number = predict(e.data.value as number);\n  // 发送宿主线程预测的结果\n   workerPort.postMessage({ type: 'predict', value: output });\n   break;\n  default:\n   workerPort.postMessage({ type: 'message', value: 'send message is invalid' });\n   break;\n }\n} 在Worker线程中完成任务之后，执行Worker线程销毁操作。销毁线程的方式主要有两种：根据需要可以在宿主线程中对Worker线程进行销毁；也可以在Worker线程中主动销毁Worker线程。 在宿主线程中通过调用onexit()方法定义Worker线程销毁后的处理逻辑。 // Worker线程销毁后，执行onexit回调方法\nworkerInstance.onexit = (): void => {\n console.info(\"main thread terminate\");\n} 方式一：在宿主线程中通过调用terminate()方法销毁Worker线程，并终止Worker接收消息。 // 销毁Worker线程\nworkerInstance.terminate(); 方式二：在Worker线程中通过调用close()方法主动销毁Worker线程，并终止Worker接收消息。 // 销毁线程\nworkerPort.close(); 
