状态管理合理使用开发指导
由于对状态管理当前的特性并不了解，许多开发者在使用状态管理进行开发时会遇到UI不刷新、刷新性能差的情况。对此，本篇将从两个方向，对一共五个典型场景进行分析，同时提供相应的正例和反例，帮助开发者学习如何合理使用状态管理进行开发。
合理使用属性
[h2]将简单属性数组合并成对象数组
在开发过程中，我们经常会需要设置多个组件的同一种属性，比如Text组件的内容、组件的宽度、高度等样式信息等。将这些属性保存在一个数组中，配合ForEach进行使用是一种简单且方便的方法。
@Entry\n@Component\nstruct Index {\n  @State items: string[] = [];\n  @State ids: string[] = [];\n  @State age: number[] = [];\n  @State gender: string[] = [];\n\n  aboutToAppear() {\n    this.items.push(\"Head\");\n    this.items.push(\"List\");\n    for (let i = 0; i < 20; i++) {\n      this.ids.push(\"id: \" + Math.floor(Math.random() * 1000));\n      this.age.push(Math.floor(Math.random() * 100 % 40));\n      this.gender.push(Math.floor(Math.random() * 100) % 2 == 0 ? \"Male\" : \"Female\");\n    }\n  }\n\n  isRenderText(index: number) : number {\n    console.log(`index ${index} is rendered`);\n    return 1;\n  }\n\n  build() {\n    Row() {\n      Column() {\n        ForEach(this.items, (item: string) => {\n          if (item == \"Head\") {\n            Text(\"Personal Info\")\n              .fontSize(40)\n          } else if (item == \"List\") {\n            List() {\n              ForEach(this.ids, (id: string, index) => {\n                ListItem() {\n                  Row() {\n                    Text(id)\n                      .fontSize(20)\n                      .margin({\n                        left: 30,\n                        right: 5\n                      })\n                    Text(\"age: \" + this.age[index as number])\n                      .fontSize(20)\n                      .margin({\n                        left: 5,\n                        right: 5\n                      })\n                      .position({x: 100})\n                      .opacity(this.isRenderText(index))\n                      .onClick(() => {\n                        this.age[index]++;\n                      })\n                    Text(\"gender: \" + this.gender[index as number])\n                      .margin({\n                        left: 5,\n                        right: 5\n                      })\n                      .position({x: 180})\n                      .fontSize(20)\n                  }\n                }\n                .margin({\n                  top: 5,\n                  bottom: 5\n                })\n              })\n            }\n          }\n        })\n      }\n    }\n  }\n}
上述代码运行效果如下。
页面内通过ForEach显示了20条信息，当点击某一条信息中age的Text组件时，可以通过日志发现其他的19条信息中age的Text组件也进行了刷新(这体现在日志上，所有的age的Text组件都打出了日志)，但实际上其他19条信息的age的数值并没有改变，也就是说其他19个Text组件并不需要刷新。
这是因为当前状态管理的一个特性。假设存在一个被@State修饰的number类型的数组Num[]，其中有20个元素，值分别为0到19。这20个元素分别绑定了一个Text组件，当改变其中一个元素，例如第0号元素的值从0改成1，除了0号元素绑定的Text组件会刷新之外，其他的19个Text组件也会刷新，即使1到19号元素的值并没有改变。
这个特性普遍的出现在简单类型数组的场景中，当数组中的元素够多时，会对UI的刷新性能有很大的负面影响。这种“不需要刷新的组件被刷新”的现象即是“冗余刷新”，当“冗余刷新”的节点过多时，UI的刷新效率会大幅度降低，因此需要减少“冗余刷新”，也就是做到精准控制组件的更新范围。
为了减少由简单的属性相关的数组引起的“冗余刷新”，需要将属性数组转变为对象数组，配合自定义组件，实现精准控制更新范围。下面为修改后的代码。
@Observed\nclass InfoList extends Array<Info> {\n};\n@Observed\nclass Info {\n  ids: number;\n  age: number;\n  gender: string;\n\n  constructor() {\n    this.ids = Math.floor(Math.random() * 1000);\n    this.age = Math.floor(Math.random() * 100 % 40);\n    this.gender = Math.floor(Math.random() * 100) % 2 == 0 ? \"Male\" : \"Female\";\n  }\n}\n@Component\nstruct Information {\n  @ObjectLink info: Info;\n  @State index: number = 0;\n  isRenderText(index: number) : number {\n    console.log(`index ${index} is rendered`);\n    return 1;\n  }\n\n  build() {\n    Row() {\n      Text(\"id: \" + this.info.ids)\n        .fontSize(20)\n        .margin({\n          left: 30,\n          right: 5\n        })\n      Text(\"age: \" + this.info.age)\n        .fontSize(20)\n        .margin({\n          left: 5,\n          right: 5\n        })\n        .position({x: 100})\n        .opacity(this.isRenderText(this.index))\n        .onClick(() => {\n          this.info.age++;\n        })\n      Text(\"gender: \" + this.info.gender)\n        .margin({\n          left: 5,\n          right: 5\n        })\n        .position({x: 180})\n        .fontSize(20)\n    }\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State infoList: InfoList = new InfoList();\n  @State items: string[] = [];\n  aboutToAppear() {\n    this.items.push(\"Head\");\n    this.items.push(\"List\");\n    for (let i = 0; i < 20; i++) {\n      this.infoList.push(new Info());\n    }\n  }\n\n  build() {\n    Row() {\n      Column() {\n        ForEach(this.items, (item: string) => {\n          if (item == \"Head\") {\n            Text(\"Personal Info\")\n              .fontSize(40)\n          } else if (item == \"List\") {\n            List() {\n              ForEach(this.infoList, (info: Info, index) => {\n                ListItem() {\n                  Information({\n                    info: info,\n                    index: index\n                  })\n                }\n                .margin({\n                  top: 5,\n                  bottom: 5\n                })\n              })\n            }\n          }\n        })\n      }\n    }\n  }\n}
上述代码的运行效果如下。
修改后的代码使用对象数组代替了原有的多个属性数组，能够避免数组的“冗余刷新”的情况。这是因为对于数组来说，对象内的变化是无法感知的，数组只能观测数组项层级的变化，例如新增数据项，修改数据项（普通数组是直接修改数据项的值，在对象数组的场景下是整个对象被重新赋值，改变某个数据项对象中的属性不会被观测到）、删除数据项等。这意味着当改变对象内的某个属性时，对于数组来说，对象是没有变化的，也就不会去刷新。在当前状态管理的观测能力中，除了数组嵌套对象的场景外，对象嵌套对象的场景也是无法观测到变化的，这一部分内容将在将复杂对象拆分成多个小对象的集合中讲到。同时修改代码时使用了自定义组件与ForEach的结合，这一部分内容将在在ForEach中使用自定义组件搭配对象数组讲到。
[h2]将复杂大对象拆分成多个小对象的集合
从API version 11开始，推荐优先使用@Track装饰器解决该场景的问题。
在开发过程中，我们有时会定义一个大的对象，其中包含了很多样式相关的属性，并且在父子组件间传递这个对象，将其中的属性绑定在组件上。
@Observed\nclass UIStyle {\n  translateX: number = 0;\n  translateY: number = 0;\n  scaleX: number = 0.3;\n  scaleY: number = 0.3;\n  width: number = 336;\n  height: number = 178;\n  posX: number = 10;\n  posY: number = 50;\n  alpha: number = 0.5;\n  borderRadius: number = 24;\n  imageWidth: number = 78;\n  imageHeight: number = 78;\n  translateImageX: number = 0;\n  translateImageY: number = 0;\n  fontSize: number = 20;\n}\n@Component\nstruct SpecialImage {\n  @ObjectLink uiStyle: UIStyle;\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\n    console.log(\"SpecialImage is rendered\");\n    return 1;\n  }\n  build() {\n    Image($r('app.media.icon')) // 在API12及以后的工程中使用app.media.app_icon\n      .width(this.uiStyle.imageWidth)\n      .height(this.uiStyle.imageHeight)\n      .margin({ top: 20 })\n      .translate({\n        x: this.uiStyle.translateImageX,\n        y: this.uiStyle.translateImageY\n      })\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\n  }\n}\n@Component\nstruct PageChild {\n  @ObjectLink uiStyle: UIStyle\n  // 下面的函数用于显示组件是否被渲染\n  private isRenderColumn() : number {\n    console.log(\"Column is rendered\");\n    return 1;\n  }\n  private isRenderStack() : number {\n    console.log(\"Stack is rendered\");\n    return 1;\n  }\n  private isRenderImage() : number {\n    console.log(\"Image is rendered\");\n    return 1;\n  }\n  private isRenderText() : number {\n    console.log(\"Text is rendered\");\n    return 1;\n  }\n  build() {\n    Column() {\n      SpecialImage({\n        uiStyle: this.uiStyle\n      })\n      Stack() {\n        Column() {\n            Image($r('app.media.icon')) // 在API12及以后的工程中使用app.media.app_icon\n              .opacity(this.uiStyle.alpha)\n              .scale({\n                x: this.uiStyle.scaleX,\n                y: this.uiStyle.scaleY\n              })\n              .padding(this.isRenderImage())\n              .width(300)\n              .height(300)\n        }\n        .width('100%')\n        .position({ y: -80 })\n        Stack() {\n          Text(\"Hello World\")\n            .fontColor(\"#182431\")\n            .fontWeight(FontWeight.Medium)\n            .fontSize(this.uiStyle.fontSize)\n            .opacity(this.isRenderText())\n            .margin({ top: 12 })\n        }\n        .opacity(this.isRenderStack())\n        .position({\n          x: this.uiStyle.posX,\n          y: this.uiStyle.posY\n        })\n        .width('100%')\n        .height('100%')\n      }\n      .margin({ top: 50 })\n      .borderRadius(this.uiStyle.borderRadius)\n      .opacity(this.isRenderStack())\n      .backgroundColor(\"#FFFFFF\")\n      .width(this.uiStyle.width)\n      .height(this.uiStyle.height)\n      .translate({\n        x: this.uiStyle.translateX,\n        y: this.uiStyle.translateY\n      })\n      Column() {\n        Button(\"Move\")\n          .width(312)\n          .fontSize(20)\n          .backgroundColor(\"#FF007DFF\")\n          .margin({ bottom: 10 })\n          .onClick(() => {\n            animateTo({\n              duration: 500\n            },() => {\n              this.uiStyle.translateY = (this.uiStyle.translateY + 180) % 250;\n            })\n          })\n        Button(\"Scale\")\n          .borderRadius(20)\n          .backgroundColor(\"#FF007DFF\")\n          .fontSize(20)\n          .width(312)\n          .onClick(() => {\n            this.uiStyle.scaleX = (this.uiStyle.scaleX + 0.6) % 0.8;\n          })\n      }\n      .position({\n        y:666\n      })\n      .height('100%')\n      .width('100%')\n\n    }\n    .opacity(this.isRenderColumn())\n    .width('100%')\n    .height('100%')\n\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State uiStyle: UIStyle = new UIStyle();\n  build() {\n    Stack() {\n      PageChild({\n        uiStyle: this.uiStyle\n      })\n    }\n    .backgroundColor(\"#F1F3F5\")\n  }\n}
上述代码的运行效果如下。
优化前点击move按钮的脏节点更新耗时如下图：
在上面的示例中，UIStyle定义了多个属性，并且这些属性分别被多个组件关联。当点击任意一个按钮更改其中的某些属性时，会导致所有这些关联uiStyle的组件进行刷新，虽然它们其实并不需要进行刷新（因为组件的属性都没有改变）。通过定义的一系列isRender函数，可以观察到这些组件的刷新。当点击“move”按钮进行平移动画时，由于translateY的值的多次改变，会导致每一次都存在“冗余刷新”的问题，这对应用的性能有着很大的负面影响。
这是因为当前状态管理的一个刷新机制，假设定义了一个有20个属性的类，创建类的对象实例，将20个属性绑定到组件上，这时修改其中的某个属性，除了这个属性关联的组件会刷新之外，其他的19个属性关联的组件也都会刷新，即使这些属性本身并没有发生变化。
这个机制会导致在使用一个复杂大对象与多个组件关联时，刷新性能的下降。对此，推荐将一个复杂大对象拆分成多个小对象的集合，在保留原有代码结构的基础上，减少“冗余刷新”，实现精准控制组件的更新范围。
@Observed\nclass NeedRenderImage { // 在同一组件中使用的属性可以划分为相同的类\n  public translateImageX: number = 0;\n  public translateImageY: number = 0;\n  public imageWidth:number = 78;\n  public imageHeight:number = 78;\n}\n@Observed\nclass NeedRenderScale { // 在一起使用的属性可以划分为相同的类\n  public scaleX: number = 0.3;\n  public scaleY: number = 0.3;\n}\n@Observed\nclass NeedRenderAlpha { // 在不同地方使用的属性可以划分为相同的类\n  public alpha: number = 0.5;\n}\n@Observed\nclass NeedRenderSize { // 在一起使用的属性可以划分为相同的类\n  public width: number = 336;\n  public height: number = 178;\n}\n@Observed\nclass NeedRenderPos { // 在一起使用的属性可以划分为相同的类\n  public posX: number = 10;\n  public posY: number = 50;\n}\n@Observed\nclass NeedRenderBorderRadius { // 在不同地方使用的属性可以划分为相同的类\n  public borderRadius: number = 24;\n}\n@Observed\nclass NeedRenderFontSize { // 在不同地方使用的属性可以划分为相同的类\n  public fontSize: number = 20;\n}\n@Observed\nclass NeedRenderTranslate { // 在一起使用的属性可以划分为相同的类\n  public translateX: number = 0;\n  public translateY: number = 0;\n}\n@Observed\nclass UIStyle {\n  // 使用NeedRenderxxx类\n  needRenderTranslate: NeedRenderTranslate = new NeedRenderTranslate();\n  needRenderFontSize: NeedRenderFontSize = new NeedRenderFontSize();\n  needRenderBorderRadius: NeedRenderBorderRadius = new NeedRenderBorderRadius();\n  needRenderPos: NeedRenderPos = new NeedRenderPos();\n  needRenderSize: NeedRenderSize = new NeedRenderSize();\n  needRenderAlpha: NeedRenderAlpha = new NeedRenderAlpha();\n  needRenderScale: NeedRenderScale = new NeedRenderScale();\n  needRenderImage: NeedRenderImage = new NeedRenderImage();\n}\n@Component\nstruct SpecialImage {\n  @ObjectLink uiStyle : UIStyle;\n  @ObjectLink needRenderImage: NeedRenderImage // 从其父组件接收新类\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\n    console.log(\"SpecialImage is rendered\");\n    return 1;\n  }\n  build() {\n    Image($r('app.media.icon')) // 在API12及以后的工程中使用app.media.app_icon\n      .width(this.needRenderImage.imageWidth) // 使用this.needRenderImage.xxx\n      .height(this.needRenderImage.imageHeight)\n      .margin({top:20})\n      .translate({\n        x: this.needRenderImage.translateImageX,\n        y: this.needRenderImage.translateImageY\n      })\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\n  }\n}\n@Component\nstruct PageChild {\n  @ObjectLink uiStyle: UIStyle;\n  @ObjectLink needRenderTranslate: NeedRenderTranslate; // 从其父组件接收新定义的NeedRenderxxx类的实例\n  @ObjectLink needRenderFontSize: NeedRenderFontSize;\n  @ObjectLink needRenderBorderRadius: NeedRenderBorderRadius;\n  @ObjectLink needRenderPos: NeedRenderPos;\n  @ObjectLink needRenderSize: NeedRenderSize;\n  @ObjectLink needRenderAlpha: NeedRenderAlpha;\n  @ObjectLink needRenderScale: NeedRenderScale;\n  // 下面的函数用于显示组件是否被渲染\n  private isRenderColumn() : number {\n    console.log(\"Column is rendered\");\n    return 1;\n  }\n  private isRenderStack() : number {\n    console.log(\"Stack is rendered\");\n    return 1;\n  }\n  private isRenderImage() : number {\n    console.log(\"Image is rendered\");\n    return 1;\n  }\n  private isRenderText() : number {\n    console.log(\"Text is rendered\");\n    return 1;\n  }\n  build() {\n    Column() {\n      SpecialImage({\n        uiStyle: this.uiStyle,\n        needRenderImage: this.uiStyle.needRenderImage // 传递给子组件\n      })\n      Stack() {\n        Column() {\n          Image($r('app.media.icon')) // 在API12及以后的工程中使用app.media.app_icon\n            .opacity(this.needRenderAlpha.alpha)\n            .scale({\n              x: this.needRenderScale.scaleX, // 使用this.needRenderXxx.xxx\n              y: this.needRenderScale.scaleY\n            })\n            .padding(this.isRenderImage())\n            .width(300)\n            .height(300)\n        }\n        .width('100%')\n        .position({ y: -80 })\n\n        Stack() {\n          Text(\"Hello World\")\n            .fontColor(\"#182431\")\n            .fontWeight(FontWeight.Medium)\n            .fontSize(this.needRenderFontSize.fontSize)\n            .opacity(this.isRenderText())\n            .margin({ top: 12 })\n        }\n        .opacity(this.isRenderStack())\n        .position({\n          x: this.needRenderPos.posX,\n          y: this.needRenderPos.posY\n        })\n        .width('100%')\n        .height('100%')\n      }\n      .margin({ top: 50 })\n      .borderRadius(this.needRenderBorderRadius.borderRadius)\n      .opacity(this.isRenderStack())\n      .backgroundColor(\"#FFFFFF\")\n      .width(this.needRenderSize.width)\n      .height(this.needRenderSize.height)\n      .translate({\n        x: this.needRenderTranslate.translateX,\n        y: this.needRenderTranslate.translateY\n      })\n\n      Column() {\n        Button(\"Move\")\n          .width(312)\n          .fontSize(20)\n          .backgroundColor(\"#FF007DFF\")\n          .margin({ bottom: 10 })\n          .onClick(() => {\n            animateTo({\n              duration: 500\n            }, () => {\n              this.needRenderTranslate.translateY = (this.needRenderTranslate.translateY + 180) % 250;\n            })\n          })\n        Button(\"Scale\")\n          .borderRadius(20)\n          .backgroundColor(\"#FF007DFF\")\n          .fontSize(20)\n          .width(312)\n          .margin({ bottom: 10 })\n          .onClick(() => {\n            this.needRenderScale.scaleX = (this.needRenderScale.scaleX + 0.6) % 0.8;\n          })\n        Button(\"Change Image\")\n          .borderRadius(20)\n          .backgroundColor(\"#FF007DFF\")\n          .fontSize(20)\n          .width(312)\n          .onClick(() => { // 在父组件中，仍使用 this.uiStyle.endRenderXxx.xxx 更改属性\n            this.uiStyle.needRenderImage.imageWidth = (this.uiStyle.needRenderImage.imageWidth + 30) % 160;\n            this.uiStyle.needRenderImage.imageHeight = (this.uiStyle.needRenderImage.imageHeight + 30) % 160;\n          })\n      }\n      .position({\n        y: 616\n      })\n      .height('100%')\n      .width('100%')\n    }\n    .opacity(this.isRenderColumn())\n    .width('100%')\n    .height('100%')\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State uiStyle: UIStyle = new UIStyle();\n  build() {\n    Stack() {\n      PageChild({\n        uiStyle: this.uiStyle,\n        needRenderTranslate: this.uiStyle.needRenderTranslate, // 传递needRenderxxx类给子组件\n        needRenderFontSize: this.uiStyle.needRenderFontSize,\n        needRenderBorderRadius: this.uiStyle.needRenderBorderRadius,\n        needRenderPos: this.uiStyle.needRenderPos,\n        needRenderSize: this.uiStyle.needRenderSize,\n        needRenderAlpha: this.uiStyle.needRenderAlpha,\n        needRenderScale: this.uiStyle.needRenderScale\n      })\n    }\n    .backgroundColor(\"#F1F3F5\")\n  }\n}
上述代码的运行效果如下。
优化后点击move按钮的脏节点更新耗时如下图：
修改后的代码将原来的大类中的十五个属性拆成了八个小类，并且在绑定的组件上也做了相应的适配。属性拆分遵循以下几点原则：
只作用在同一个组件上的多个属性可以被拆分进同一个新类，即示例中的NeedRenderImage。适用于组件经常被不关联的属性改变而引起刷新的场景，这个时候就要考虑拆分属性，或者重新考虑ViewModel设计是否合理。经常被同时使用的属性可以被拆分进同一个新类，即示例中的NeedRenderScale、NeedRenderTranslate、NeedRenderPos、NeedRenderSize。适用于属性经常成对出现，或者被作用在同一个样式上的情况，例如.translate、.position、.scale等（这些样式通常会接收一个对象作为参数）。可能被用在多个组件上或相对较独立的属性应该被单独拆分进一个新类，即示例中的NeedRenderAlpha，NeedRenderBorderRadius、NeedRenderFontSize。适用于一个属性作用在多个组件上或者与其他属性没有联系的情况，例如.opacity、.borderRadius等（这些样式通常相对独立）。
属性拆分的原理和属性合并类似，都是在嵌套场景下，状态管理无法观测二层以上的属性变化，所以不会因为二层的数据变化导致一层关联的其他属性被刷新，同时利用@Observed和@ObjectLink在父子节点间传递二层的对象，从而在子组件中正常的观测二层的数据变化，实现精准刷新。
使用@Track装饰器则无需做属性拆分，也能达到同样控制组件更新范围的作用。
@Observed\nclass UIStyle {\n  @Track translateX: number = 0;\n  @Track translateY: number = 0;\n  @Track scaleX: number = 0.3;\n  @Track scaleY: number = 0.3;\n  @Track width: number = 336;\n  @Track height: number = 178;\n  @Track posX: number = 10;\n  @Track posY: number = 50;\n  @Track alpha: number = 0.5;\n  @Track borderRadius: number = 24;\n  @Track imageWidth: number = 78;\n  @Track imageHeight: number = 78;\n  @Track translateImageX: number = 0;\n  @Track translateImageY: number = 0;\n  @Track fontSize: number = 20;\n}\n@Component\nstruct SpecialImage {\n  @ObjectLink uiStyle: UIStyle;\n  private isRenderSpecialImage() : number { // 显示组件是否渲染的函数\n    console.log(\"SpecialImage is rendered\");\n    return 1;\n  }\n  build() {\n    Image($r('app.media.icon')) // 在API12及以后的工程中使用app.media.app_icon\n      .width(this.uiStyle.imageWidth)\n      .height(this.uiStyle.imageHeight)\n      .margin({ top: 20 })\n      .translate({\n        x: this.uiStyle.translateImageX,\n        y: this.uiStyle.translateImageY\n      })\n      .opacity(this.isRenderSpecialImage()) // 如果Image重新渲染，该函数将被调用\n  }\n}\n@Component\nstruct PageChild {\n  @ObjectLink uiStyle: UIStyle\n  // 下面的函数用于显示组件是否被渲染\n  private isRenderColumn() : number {\n    console.log(\"Column is rendered\");\n    return 1;\n  }\n  private isRenderStack() : number {\n    console.log(\"Stack is rendered\");\n    return 1;\n  }\n  private isRenderImage() : number {\n    console.log(\"Image is rendered\");\n    return 1;\n  }\n  private isRenderText() : number {\n    console.log(\"Text is rendered\");\n    return 1;\n  }\n  build() {\n    Column() {\n      SpecialImage({\n        uiStyle: this.uiStyle\n      })\n      Stack() {\n        Column() {\n            Image($r('app.media.icon')) // 在API12及以后的工程中使用app.media.app_icon\n              .opacity(this.uiStyle.alpha)\n              .scale({\n                x: this.uiStyle.scaleX,\n                y: this.uiStyle.scaleY\n              })\n              .padding(this.isRenderImage())\n              .width(300)\n              .height(300)\n        }\n        .width('100%')\n        .position({ y: -80 })\n        Stack() {\n          Text(\"Hello World\")\n            .fontColor(\"#182431\")\n            .fontWeight(FontWeight.Medium)\n            .fontSize(this.uiStyle.fontSize)\n            .opacity(this.isRenderText())\n            .margin({ top: 12 })\n        }\n        .opacity(this.isRenderStack())\n        .position({\n          x: this.uiStyle.posX,\n          y: this.uiStyle.posY\n        })\n        .width('100%')\n        .height('100%')\n      }\n      .margin({ top: 50 })\n      .borderRadius(this.uiStyle.borderRadius)\n      .opacity(this.isRenderStack())\n      .backgroundColor(\"#FFFFFF\")\n      .width(this.uiStyle.width)\n      .height(this.uiStyle.height)\n      .translate({\n        x: this.uiStyle.translateX,\n        y: this.uiStyle.translateY\n      })\n      Column() {\n        Button(\"Move\")\n          .width(312)\n          .fontSize(20)\n          .backgroundColor(\"#FF007DFF\")\n          .margin({ bottom: 10 })\n          .onClick(() => {\n            animateTo({\n              duration: 500\n            },() => {\n              this.uiStyle.translateY = (this.uiStyle.translateY + 180) % 250;\n            })\n          })\n        Button(\"Scale\")\n          .borderRadius(20)\n          .backgroundColor(\"#FF007DFF\")\n          .fontSize(20)\n          .width(312)\n          .onClick(() => {\n            this.uiStyle.scaleX = (this.uiStyle.scaleX + 0.6) % 0.8;\n          })\n      }\n      .position({\n        y:666\n      })\n      .height('100%')\n      .width('100%')\n\n    }\n    .opacity(this.isRenderColumn())\n    .width('100%')\n    .height('100%')\n\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State uiStyle: UIStyle = new UIStyle();\n  build() {\n    Stack() {\n      PageChild({\n        uiStyle: this.uiStyle\n      })\n    }\n    .backgroundColor(\"#F1F3F5\")\n  }\n}
[h2]使用@Observed装饰或被声明为状态变量的类对象绑定组件
在开发过程中，会有“重置数据”的场景，将一个新创建的对象赋值给原有的状态变量，实现数据的刷新。如果不注意新创建对象的类型，可能会出现UI不刷新的现象。
@Observed\nclass Child {\n  count: number;\n  constructor(count: number) {\n    this.count = count\n  }\n}\n@Observed\nclass ChildList extends Array<Child> {\n};\n@Observed\nclass Ancestor {\n  childList: ChildList;\n  constructor(childList: ChildList) {\n    this.childList = childList;\n  }\n  public loadData() {\n    let tempList = [new Child(1), new Child(2), new Child(3), new Child(4), new Child(5)];\n    this.childList = tempList;\n  }\n\n  public clearData() {\n    this.childList = []\n  }\n}\n@Component\nstruct CompChild {\n  @Link childList: ChildList;\n  @ObjectLink child: Child;\n\n  build() {\n    Row() {\n      Text(this.child.count+'')\n        .height(70)\n        .fontSize(20)\n        .borderRadius({\n          topLeft: 6,\n          topRight: 6\n        })\n        .margin({left: 50})\n      Button('X')\n        .backgroundColor(Color.Red)\n        .onClick(()=>{\n          let index = this.childList.findIndex((item) => {\n            return item.count === this.child.count\n          })\n          if (index !== -1) {\n            this.childList.splice(index, 1);\n          }\n        })\n        .margin({\n          left: 200,\n          right:30\n        })\n    }\n    .margin({\n      top:15,\n      left: 15,\n      right:10,\n      bottom:15\n    })\n    .borderRadius(6)\n    .backgroundColor(Color.Grey)\n  }\n}\n@Component\nstruct CompList {\n  @ObjectLink@Watch('changeChildList') childList: ChildList;\n\n  changeChildList() {\n    console.log('CompList ChildList change');\n  }\n\n  isRenderCompChild(index: number) : number {\n    console.log(\"Comp Child is render\" + index);\n    return 1;\n  }\n\n  build() {\n    Column() {\n      List() {\n        ForEach(this.childList, (item: Child, index) => {\n          ListItem() {\n            CompChild({\n              childList: this.childList,\n              child: item\n            })\n              .opacity(this.isRenderCompChild(index))\n          }\n\n        })\n      }\n      .height('70%')\n    }\n  }\n}\n@Component\nstruct CompAncestor {\n  @ObjectLink ancestor: Ancestor;\n\n  build() {\n    Column() {\n      CompList({ childList: this.ancestor.childList })\n      Row() {\n        Button(\"Clear\")\n          .onClick(() => {\n            this.ancestor.clearData()\n          })\n          .width(100)\n          .margin({right: 50})\n        Button(\"Recover\")\n          .onClick(() => {\n            this.ancestor.loadData()\n          })\n          .width(100)\n      }\n    }\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\n  @State ancestor: Ancestor = new Ancestor(this.childList)\n\n  build() {\n    Column() {\n      CompAncestor({ ancestor: this.ancestor})\n    }\n  }\n}
上述代码运行效果如下。
上述代码维护了一个ChildList类型的数据源，点击\"X\"按钮删除一些数据后再点击Recover进行恢复ChildList，发现再次点击\"X\"按钮进行删除时，UI并没有刷新，同时也没有打印出“CompList ChildList change”的日志。
代码中对数据源childList重新赋值时，是通过Ancestor对象的方法loadData。
  public loadData() {\n    let tempList = [new Child(1), new Child(2), new Child(3), new Child(4), new Child(5)];\n    this.childList = tempList;\n  }
在loadData方法中，创建了一个临时的Child类型的数组tempList，并且将Ancestor对象的成员变量的childList指向了tempList。但是这里创建的Child[]类型的数组tempList其实并没有能被观测的能力（也就说它的变化无法主动触发UI刷新）。当它被赋值给childList之后，触发了ForEach的刷新，使得界面完成了重建，但是再次点击删除时，由于此时的childList已经指向了新的tempList代表的数组，并且这个数组并没有被观测的能力，是个静态的量，所以它的更改不会被观测到，也就不会引起UI的刷新。实际上这个时候childList里的数据已经减少了，只是UI没有刷新。
有些开发者会注意到，在Page中初始化定义childList的时候，也是以这样一种方法去进行初始化的。
@State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\n@State ancestor: Ancestor = new Ancestor(this.childList)
但是由于这里的childList实际上是被@State装饰了，根据当前状态管理的观测能力，尽管右边赋值的是一个Child[]类型的数据，它并没有被@Observed装饰，这里的childList却依然具备了被观测的能力，所以能够正常的触发UI的刷新。当去掉childList的@State的装饰器后，不去重置数据源，也无法通过点击“X”按钮触发刷新。
因此，需要将具有观测能力的类对象绑定组件，来确保当改变这些类对象的内容时，UI能够正常的刷新。
@Observed\nclass Child {\n  count: number;\n  constructor(count: number) {\n    this.count = count\n  }\n}\n@Observed\nclass ChildList extends Array<Child> {\n};\n@Observed\nclass Ancestor {\n  childList: ChildList;\n  constructor(childList: ChildList) {\n    this.childList = childList;\n  }\n  public loadData() {\n    let tempList = new ChildList();\n    for (let i = 1; i < 6; i ++) {\n      tempList.push(new Child(i));\n    }\n    this.childList = tempList;\n  }\n\n  public clearData() {\n    this.childList = []\n  }\n}\n@Component\nstruct CompChild {\n  @Link childList: ChildList;\n  @ObjectLink child: Child;\n\n  build() {\n    Row() {\n      Text(this.child.count+'')\n        .height(70)\n        .fontSize(20)\n        .borderRadius({\n          topLeft: 6,\n          topRight: 6\n        })\n        .margin({left: 50})\n      Button('X')\n        .backgroundColor(Color.Red)\n        .onClick(()=>{\n          let index = this.childList.findIndex((item) => {\n            return item.count === this.child.count\n          })\n          if (index !== -1) {\n            this.childList.splice(index, 1);\n          }\n        })\n        .margin({\n          left: 200,\n          right:30\n        })\n    }\n    .margin({\n      top:15,\n      left: 15,\n      right:10,\n      bottom:15\n    })\n    .borderRadius(6)\n    .backgroundColor(Color.Grey)\n  }\n}\n@Component\nstruct CompList {\n  @ObjectLink@Watch('changeChildList') childList: ChildList;\n\n  changeChildList() {\n    console.log('CompList ChildList change');\n  }\n\n  isRenderCompChild(index: number) : number {\n    console.log(\"Comp Child is render\" + index);\n    return 1;\n  }\n\n  build() {\n    Column() {\n      List() {\n        ForEach(this.childList, (item: Child, index) => {\n          ListItem() {\n            CompChild({\n              childList: this.childList,\n              child: item\n            })\n              .opacity(this.isRenderCompChild(index))\n          }\n\n        })\n      }\n      .height('70%')\n    }\n  }\n}\n@Component\nstruct CompAncestor {\n  @ObjectLink ancestor: Ancestor;\n\n  build() {\n    Column() {\n      CompList({ childList: this.ancestor.childList })\n      Row() {\n        Button(\"Clear\")\n          .onClick(() => {\n            this.ancestor.clearData()\n          })\n          .width(100)\n          .margin({right: 50})\n        Button(\"Recover\")\n          .onClick(() => {\n            this.ancestor.loadData()\n          })\n          .width(100)\n      }\n    }\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State childList: ChildList = [new Child(1), new Child(2), new Child(3), new Child(4),new Child(5)];\n  @State ancestor: Ancestor = new Ancestor(this.childList)\n\n  build() {\n    Column() {\n      CompAncestor({ ancestor: this.ancestor})\n    }\n  }\n}
上述代码运行效果如下。
核心的修改点是将原本Child[]类型的tempList修改为具有被观测能力的ChildList类。
public loadData() {\n    let tempList = new ChildList();\n    for (let i = 1; i < 6; i ++) {\n      tempList.push(new Child(i));\n    }\n    this.childList = tempList;\n  }
ChildList类型在定义的时候使用了@Observed进行装饰，所以用new创建的对象tempList具有被观测的能力，因此在点击“X”按钮删除其中一条内容时，变量childList就能够观测到变化，所以触发了ForEach的刷新，最终UI渲染刷新。
合理使用ForEach/LazyForEach
[h2]减少使用LazyForEach的重建机制刷新UI
开发过程中通常会将LazyForEach和状态变量结合起来使用。
class BasicDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n  private originDataArray: StringData[] = [];\n\n  public totalCount(): number {\n    return 0;\n  }\n\n  public getData(index: number): StringData {\n    return this.originDataArray[index];\n  }\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n    if (this.listeners.indexOf(listener) < 0) {\n      console.info('add listener');\n      this.listeners.push(listener);\n    }\n  }\n\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      console.info('remove listener');\n      this.listeners.splice(pos, 1);\n    }\n  }\n\n  notifyDataReload(): void {\n    this.listeners.forEach(listener => {\n      listener.onDataReloaded();\n    })\n  }\n\n  notifyDataAdd(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataAdd(index);\n    })\n  }\n\n  notifyDataChange(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataChange(index);\n    })\n  }\n\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataDelete(index);\n    })\n  }\n\n  notifyDataMove(from: number, to: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataMove(from, to);\n    })\n  }\n}\n\nclass MyDataSource extends BasicDataSource {\n  private dataArray: StringData[] = [];\n\n  public totalCount(): number {\n    return this.dataArray.length;\n  }\n\n  public getData(index: number): StringData {\n    return this.dataArray[index];\n  }\n\n  public addData(index: number, data: StringData): void {\n    this.dataArray.splice(index, 0, data);\n    this.notifyDataAdd(index);\n  }\n\n  public pushData(data: StringData): void {\n    this.dataArray.push(data);\n    this.notifyDataAdd(this.dataArray.length - 1);\n  }\n\n  public reloadData(): void {\n    this.notifyDataReload();\n  }\n}\n\nclass StringData {\n  message: string;\n  imgSrc: Resource;\n  constructor(message: string, imgSrc: Resource) {\n    this.message = message;\n    this.imgSrc = imgSrc;\n  }\n}\n\n@Entry\n@Component\nstruct MyComponent {\n  private data: MyDataSource = new MyDataSource();\n\n  aboutToAppear() {\n    for (let i = 0; i <= 9; i++) {\n      this.data.pushData(new StringData(`Click to add ${i}`, $r('app.media.icon'))); // 在API12及以后的工程中使用app.media.app_icon\n    }\n  }\n\n  build() {\n    List({ space: 3 }) {\n      LazyForEach(this.data, (item: StringData, index: number) => {\n        ListItem() {\n          Column() {\n            Text(item.message).fontSize(20)\n              .onAppear(() => {\n                console.info(\"text appear:\" + item.message);\n              })\n            Image(item.imgSrc)\n              .width(100)\n              .height(100)\n              .onAppear(() => {\n                console.info(\"image appear\");\n              })\n          }.margin({ left: 10, right: 10 })\n        }\n        .onClick(() => {\n          item.message += '0';\n          this.data.reloadData();\n        })\n      }, (item: StringData, index: number) => JSON.stringify(item))\n    }.cachedCount(5)\n  }\n}
上述代码运行效果如下。
可以观察到在点击更改message之后，图片“闪烁”了一下，同时输出了组件的onAppear日志，这说明组件进行了重建。这是因为在更改message之后，导致LazyForEach中这一项的key值发生了变化，使得LazyForEach在reloadData的时候将这一项ListItem进行了重建。Text组件仅仅更改显示的内容却发生了重建，而不是更新。而尽管Image组件没有需要重新绘制的内容，但是因为触发LazyForEach的重建，会使得同样位于ListItem下的Image组件重新创建。
当前LazyForEach与状态变量都能触发UI的刷新，两者的性能开销是不一样的。使用LazyForEach刷新会对组件进行重建，如果包含了多个组件，则会产生比较大的性能开销。使用状态变量刷新会对组件进行刷新，具体到状态变量关联的组件上，相对于LazyForEach的重建来说，范围更小更精确。因此，推荐使用状态变量来触发LazyForEach中的组件刷新，这就需要使用自定义组件。
class BasicDataSource implements IDataSource {\n  private listeners: DataChangeListener[] = [];\n  private originDataArray: StringData[] = [];\n\n  public totalCount(): number {\n    return 0;\n  }\n\n  public getData(index: number): StringData {\n    return this.originDataArray[index];\n  }\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n    if (this.listeners.indexOf(listener) < 0) {\n      console.info('add listener');\n      this.listeners.push(listener);\n    }\n  }\n\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n    const pos = this.listeners.indexOf(listener);\n    if (pos >= 0) {\n      console.info('remove listener');\n      this.listeners.splice(pos, 1);\n    }\n  }\n\n  notifyDataReload(): void {\n    this.listeners.forEach(listener => {\n      listener.onDataReloaded();\n    })\n  }\n\n  notifyDataAdd(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataAdd(index);\n    })\n  }\n\n  notifyDataChange(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataChange(index);\n    })\n  }\n\n  notifyDataDelete(index: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataDelete(index);\n    })\n  }\n\n  notifyDataMove(from: number, to: number): void {\n    this.listeners.forEach(listener => {\n      listener.onDataMove(from, to);\n    })\n  }\n}\n\nclass MyDataSource extends BasicDataSource {\n  private dataArray: StringData[] = [];\n\n  public totalCount(): number {\n    return this.dataArray.length;\n  }\n\n  public getData(index: number): StringData {\n    return this.dataArray[index];\n  }\n\n  public addData(index: number, data: StringData): void {\n    this.dataArray.splice(index, 0, data);\n    this.notifyDataAdd(index);\n  }\n\n  public pushData(data: StringData): void {\n    this.dataArray.push(data);\n    this.notifyDataAdd(this.dataArray.length - 1);\n  }\n}\n\n@Observed\nclass StringData {\n  @Track message: string;\n  @Track imgSrc: Resource;\n  constructor(message: string, imgSrc: Resource) {\n    this.message = message;\n    this.imgSrc = imgSrc;\n  }\n}\n\n@Entry\n@Component\nstruct MyComponent {\n  @State data: MyDataSource = new MyDataSource();\n\n  aboutToAppear() {\n    for (let i = 0; i <= 9; i++) {\n      this.data.pushData(new StringData(`Click to add ${i}`, $r('app.media.icon'))); // 在API12及以后的工程中使用app.media.app_icon\n    }\n  }\n\n  build() {\n    List({ space: 3 }) {\n      LazyForEach(this.data, (item: StringData, index: number) => {\n        ListItem() {\n          ChildComponent({data: item})\n        }\n        .onClick(() => {\n          item.message += '0';\n        })\n      }, (item: StringData, index: number) => index.toString())\n    }.cachedCount(5)\n  }\n}\n\n@Component\nstruct ChildComponent {\n  @ObjectLink data: StringData\n  build() {\n    Column() {\n      Text(this.data.message).fontSize(20)\n        .onAppear(() => {\n          console.info(\"text appear:\" + this.data.message)\n        })\n      Image(this.data.imgSrc)\n        .width(100)\n        .height(100)\n    }.margin({ left: 10, right: 10 })\n  }\n}
上述代码运行效果如下。
可以观察到UI能够正常刷新，图片没有“闪烁”，且没有输出日志信息，说明没有对Text组件和Image组件进行重建。
这是因为使用自定义组件之后，可以通过@Observed和@ObjectLink配合去直接更改自定义组件内的状态变量实现刷新，而不需要利用LazyForEach进行重建。使用@Track装饰器分别装饰StringData类型中的message和imgSrc属性可以使更新范围进一步缩小到指定的Text组件。
[h2]在ForEach中使用自定义组件搭配对象数组
开发过程中经常会使用对象数组和ForEach结合起来使用，但是写法不当的话会出现UI不刷新的情况。
@Observed\nclass StyleList extends Array<TextStyles> {\n};\n@Observed\nclass TextStyles {\n  fontSize: number;\n\n  constructor(fontSize: number) {\n    this.fontSize = fontSize;\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State styleList: StyleList = new StyleList();\n  aboutToAppear() {\n    for (let i = 15; i < 50; i++)\n    this.styleList.push(new TextStyles(i));\n  }\n  build() {\n    Column() {\n      Text(\"Font Size List\")\n        .fontSize(50)\n        .onClick(() => {\n          for (let i = 0; i < this.styleList.length; i++) {\n            this.styleList[i].fontSize++;\n          }\n          console.log(\"change font size\");\n        })\n      List() {\n        ForEach(this.styleList, (item: TextStyles) => {\n          ListItem() {\n            Text(\"Hello World\")\n              .fontSize(item.fontSize)\n          }\n        })\n      }\n    }\n  }\n}
上述代码运行效果如下。
由于ForEach中生成的item是一个常量，因此当点击改变item中的内容时，没有办法观测到UI刷新，尽管日志表面item中的值已经改变了(这体现在打印了“change font size”的日志)。因此，需要使用自定义组件，配合@ObjectLink来实现观测的能力。
@Observed\nclass StyleList extends Array<TextStyles> {\n};\n@Observed\nclass TextStyles {\n  fontSize: number;\n\n  constructor(fontSize: number) {\n    this.fontSize = fontSize;\n  }\n}\n@Component\nstruct TextComponent {\n  @ObjectLink textStyle: TextStyles;\n  build() {\n    Text(\"Hello World\")\n      .fontSize(this.textStyle.fontSize)\n  }\n}\n@Entry\n@Component\nstruct Page {\n  @State styleList: StyleList = new StyleList();\n  aboutToAppear() {\n    for (let i = 15; i < 50; i++)\n      this.styleList.push(new TextStyles(i));\n  }\n  build() {\n    Column() {\n      Text(\"Font Size List\")\n        .fontSize(50)\n        .onClick(() => {\n          for (let i = 0; i < this.styleList.length; i++) {\n            this.styleList[i].fontSize++;\n          }\n          console.log(\"change font size\");\n        })\n      List() {\n        ForEach(this.styleList, (item: TextStyles) => {\n          ListItem() {\n            TextComponent({ textStyle: item})\n          }\n        })\n      }\n    }\n  }\n}
上述代码的运行效果如下。
使用@ObjectLink接受传入的item后，使得TextComponent组件内的textStyle变量具有了被观测的能力。在父组件更改styleList中的值时，由于@ObjectLink是引用传递，所以会观测到styleList每一个数据项的地址指向的对应item的fontSize的值被改变，因此触发UI的刷新。
这是一个较为实用的使用状态管理进行刷新的开发方式。
