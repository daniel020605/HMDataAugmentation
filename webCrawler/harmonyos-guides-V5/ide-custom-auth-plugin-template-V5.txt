模板文件
模板文件中包含自定义auth插件需要的两个文件：CustomAuth.ts和tsconfig.json。
插件模板CustomAuth.ts
import {AuthPlugin} from '../libs/plugins/auth/AuthPlugin';  // 插件文件CustomAuth.ts存储在默认位置（ohpm-repo解压根目录的plugins文件夹内），默认引用地址\nexport class CustomAuth implements AuthPlugin {\n  /**\n   * 用户认证:根据accessToken的值，返回用户的数据:用户的id，用户的名字，用户所属的组织，用户所创建的组织\n   * @param accessToken 用户的accessToken\n   */\n  async auth(accessToken: string): Promise<{\n    id: string;                         // 用户的id，保证唯一性\n    name: string;                       // 用户的名字，保证唯一性\n    belongGroupList: Array<string>;     // 用户所在的组织，具有发指定组织包的权限\n    groupAdminList: Array<string>;      // 用户所管理的组织，具有删除指定组织内包的权限\n  }> {\n    let id: string, name: string, belongGroupList: Array<string>, groupAdminList: Array<string>;\n    return {id, name, belongGroupList, groupAdminList};\n  }\n\n  /**\n   * 根据用户id,返回用户的名字\n   * @param id 用户的id值\n   */\n  async getUserInfo(id: string): Promise<string> {\n    let name: string;\n    return name;\n  }\n}
ts编译的配置文件tsconfig.json
// tsconfig.json 文件指定了编译项目所需的根目录下的文件以及编译选项，编译自定义插件文件.ts为.js文件。\n{\n  \"include\": [\n    \"plugins/*\" // 插件文件的位置\n  ],\n  \"compilerOptions\": {\n    \"target\": \"es2016\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"module\": \"commonjs\",\n    \"rootDirs\": [\n      \"./src\",\n      \"./test\"\n    ],\n    \"typeRoots\": [\n      \"./node_modules/@types\"\n    ],\n    \"types\": [\n      \"node\",\n    ],\n    \"resolveJsonModule\": true,\n    \"outDir\": \"./plugins/outDir\",   // 编译后文件输出的位置\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"alwaysStrict\": true,\n    \"noImplicitReturns\": true,\n    \"skipLibCheck\": true\n  }\n}
