@Track装饰器：class对象属性级更新
@Track应用于class对象的属性级更新。@Track装饰的属性变化时，只会触发该属性关联的UI更新。
在阅读本文档之前，建议开发者对状态管理基本观察能力有基本的了解。建议提前阅读：@State。
从API version 11开始，该装饰器支持在ArkTS卡片中使用。
概述
@Track是class对象的属性装饰器。当一个class对象是状态变量时，@Track装饰的属性发生变化，只会触发该属性关联的UI更新；如果class类中使用了@Track装饰器，则未被@Track装饰器装饰的属性不能在UI中使用，如果使用，会发生运行时报错。
装饰器说明
观察变化和行为表现
当一个class对象是状态变量时，@Track装饰的属性发生变化，该属性关联的UI触发更新。
当class对象中没有一个属性被标记@Track，行为与原先保持不变。@Track没有深度观测的功能。
使用@Track装饰器可以避免冗余刷新。
class LogTrack {\n  @Track str1: string;\n  @Track str2: string;\n\n  constructor(str1: string) {\n    this.str1 = str1;\n    this.str2 = 'World';\n  }\n}\n\nclass LogNotTrack {\n  str1: string;\n  str2: string;\n\n  constructor(str1: string) {\n    this.str1 = str1;\n    this.str2 = '世界';\n  }\n}\n\n@Entry\n@Component\nstruct AddLog {\n  @State logTrack: LogTrack = new LogTrack('Hello');\n  @State logNotTrack: LogNotTrack = new LogNotTrack('你好');\n\n  isRender(index: number) {\n    console.log(`Text ${index} is rendered`);\n    return 50;\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.logTrack.str1) // Text1\n          .fontSize(this.isRender(1))\n          .fontWeight(FontWeight.Bold)\n        Text(this.logTrack.str2) // Text2\n          .fontSize(this.isRender(2))\n          .fontWeight(FontWeight.Bold)\n        Button('change logTrack.str1')\n          .onClick(() => {\n            this.logTrack.str1 = 'Bye';\n          })\n        Text(this.logNotTrack.str1) // Text3\n          .fontSize(this.isRender(3))\n          .fontWeight(FontWeight.Bold)\n        Text(this.logNotTrack.str2) // Text4\n          .fontSize(this.isRender(4))\n          .fontWeight(FontWeight.Bold)\n        Button('change logNotTrack.str1')\n          .onClick(() => {\n            this.logNotTrack.str1 = '再见';\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
在上面的示例中：
类LogTrack中的属性均被@Track装饰器装饰，点击按钮\"change logTrack.str1\"，此时Text1刷新，Text2不刷新，只有一条日志输出，避免了冗余刷新。 Text 1 is rendered 类logNotTrack中的属性均未被@Track装饰器装饰，点击按钮\"change logNotTrack.str1\"，此时Text3、Text4均会刷新，有两条日志输出，存在冗余刷新。 Text 3 is rendered\nText 4 is rendered 
限制条件
如果class类中使用了@Track装饰器，那么该class类中非@Track装饰的属性不能在UI中使用，包括不能绑定在组件上、不能用于初始化子组件，错误的使用将导致运行时报错，详见在UI中使用非@Track装饰的属性发生运行时报错；可以在非UI中使用非@Track装饰的属性，如事件回调函数中、生命周期函数中等。 建议开发者不要混用包含@Track的class对象和不包含@Track的class对象，如联合类型中、类继承中等。 
使用场景
[h2]@Track和自定义组件更新
以下示例展示组件更新和@Track的处理步骤。对象log是@State装饰的状态变量，logInfo是@Track的成员属性，其余成员属性都是非@Track装饰的，而且也不准备在UI中更新它们的值。
class Log {\n  @Track logInfo: string;\n  owner: string;\n  id: number;\n  time: Date;\n  location: string;\n  reason: string;\n\n  constructor(logInfo: string) {\n    this.logInfo = logInfo;\n    this.owner = 'OH';\n    this.id = 0;\n    this.time = new Date();\n    this.location = 'CN';\n    this.reason = 'NULL';\n  }\n}\n\n@Entry\n@Component\nstruct AddLog {\n  @State log: Log = new Log('origin info.');\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.log.logInfo)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            // 没有被@Track装饰的属性可以在点击事件中使用。\n            console.log('owner: ' + this.log.owner +\n              ' id: ' + this.log.id +\n              ' time: ' + this.log.time +\n              ' location: ' + this.log.location +\n              ' reason: ' + this.log.reason);\n            this.log.time = new Date();\n            this.log.id++;\n\n            this.log.logInfo += ' info.';\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
处理步骤：
AddLog自定义组件的Text.onClick点击事件自增字符串' info.'。 由于@State log变量的@Track属性logInfo更改，Text重新渲染。 
常见问题
[h2]在UI中使用非@Track装饰的属性发生运行时报错
在UI中使用非@Track装饰的属性，运行时会报错。
class Person {\n  // id被@Track装饰\n  @Track id: number;\n  // age未被@Track装饰\n  age: number;\n\n  constructor(id: number, age: number) {\n    this.id = id;\n    this.age = age;\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State parent: Person = new Person(2, 30);\n\n  build() {\n    // 没有被@Track装饰的属性不可以在UI中使用，运行时会报错\n    Text(`Parent id is: ${this.parent.id} and Parent age is: ${this.parent.age}`)\n  }\n}
