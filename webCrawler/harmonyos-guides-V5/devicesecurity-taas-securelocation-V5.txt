安全地理位置场景
场景介绍
在安全地理位置场景中，通过创建证明密钥、打开证明会话的方式，对从GPS硬件或网络位置获取到的地理位置信息进行签名，确保地理位置信息的真实性和完整性。
业务流程
应用获取安全地理位置的优先级策略有两种，分别是精度优先和速度优先。如果选择精度优先策略，可信应用服务会优先返回GPS的结果，GPS获取超时后返回网络地理位置；而如果选择速度优先策略，可信应用服务会返回从二者中最先获取到的结果。
接口说明
接口名
描述
getCurrentSecureLocation(timeout: number, priority: LocatingPriority): Promise<SecureLocation>
获取安全地理位置信息。
开发步骤
 申请位置权限，权限名称为“ohos.permission.APPROXIMATELY_LOCATION”和“ohos.permission.LOCATION”，具体请参考向用户申请授权。 导入可信应用服务模块。import { trustedAppService } from '@kit.DeviceSecurityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';  创建证明密钥并初始化证明会话，流程说明请参考安全摄像头场景。// 创建证明密钥的参数\nconst createProperties: Array<trustedAppService.AttestParam> = [\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_ALGORITHM,\n    value: trustedAppService.AttestKeyAlg.ATTEST_ALG_ECC\n  },\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_KEY_SIZE,\n    value: trustedAppService.AttestKeySize.ATTEST_ECC_KEY_SIZE_256\n  }\n];\nconst createOptions: trustedAppService.AttestOptions = {\n  properties: createProperties\n};\n// 初始化证明会话的参数\nconst userData = \"trusted_app_service_demo\" // 示例值，实际值请自行生成，长度在16到128字符之间\nconst initProperties: Array<trustedAppService.AttestParam> = [\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_TYPE,\n    value: trustedAppService.AttestType.ATTEST_TYPE_LOCATION\n  },\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_ID,\n    value: BigInt(0) // 此参数在安全地理位置场景下不生效\n  }\n];\nconst initOptions: trustedAppService.AttestOptions = {\n  properties: initProperties\n};\n// 创建证明密钥并打开证明会话\nlet certChainList: Array<string>;\ntry {\n  await trustedAppService.createAttestKey(createOptions);\n  const result = await trustedAppService.initializeAttestContext(userData, initOptions);\n  certChainList = result.certChains;\n} catch (err) {\n  const error = err as BusinessError;\n  console.error(`Failed to initialize attest context, message:${error.message}, code:${error.code}`);\n}     使用安全地理位置服务时，需要保证系统时间与网络时间同步。    获取安全地理位置信息，以精度优先为例。const timeout = 5000; // 获取安全地理位置的超时时间，单位为毫秒\nconst priority = trustedAppService.LocatingPriority.PRIORITY_ACCURACY; // 采用精度优先策略\nlet secureLocation: trustedAppService.SecureLocation;\n// 获取当前安全地理位置信息\ntry {\n  secureLocation = await trustedAppService.getCurrentSecureLocation(timeout, priority);\n} catch (err) {\n  const error = err as BusinessError;\n  console.error(`Failed to get current secure location, message:${error.message}, code:${error.code}`);\n}  结束证明会话，详细说明请参考安全摄像头场景。// 结束证明会话的参数\nconst finalProperties: Array<trustedAppService.AttestParam> = [\n  {\n    tag: trustedAppService.AttestTag.ATTEST_TAG_DEVICE_TYPE,\n    value: trustedAppService.AttestType.ATTEST_TYPE_LOCATION\n  }\n];\nconst finalOptions: trustedAppService.AttestOptions = {\n  properties: finalProperties,\n};\n// 结束证明会话\ntry {\n  await trustedAppService.finalizeAttestContext(finalOptions);\n} catch (err) {\n  const error = err as BusinessError;\n  console.error(`Failed to finalize attest context, message:${error.message}, code:${error.code}`);\n}  
