使用JSVM-API接口处理异步操作
简介
使用JSVM-API接口处理异步操作。异步操作是指需要一定时间才能完成的操作，例如从网络下载数据或读取大型文件。与同步操作不同，异步操作不会阻塞主线程，而是会在后台执行。当异步操作完成后，事件循环将把它放入任务队列中，等待主线程空闲时执行。
基本概念
Promise是JavaScript中用来处理异步操作的对象，Promise有pending（待定）、fulfilled（已兑现）和rejected（已拒绝）三种状态，Promise的初始状态是pending，resolve函数可以使其状态从pending变为fulfilled（已兑现），reject函数可以使其状态从pending变为rejected(已拒绝)，一旦兑现或拒绝Promise的状态将不能更改。下面是一些基本概念：
同步： 同步是指代码按照顺序一行一行地执行，每行代码的执行都会等待上一行代码执行完成后再继续执行。在同步执行中，如果某个操作需要花费较长时间，那么整个程序的执行就会被阻塞，直到该操作完成才能继续执行后续代码。异步：异步是指任务可以同时执行，不需要等待上一个任务结束。在JavaScript中，常见的异步操作包括定时器、事件监听、网络请求等。异步任务不会阻塞后续任务的执行，而是通过回调函数或Promise对象来处理任务的结果。Promise：Promise是一个JavaScript对象，用于处理异步操作。Promise作用于外部，通常通过then、catch和finally方法暴露给外部以添加自定义逻辑。deferred：deferred是延迟对象，它可以与Promise对象关联，设置Promise的回调函数resolve和reject。deferred作用于内部，维护异步模型的状态并设置回调函数resolve和reject。resolve：此函数可以将Promise的状态从pending（待定）改为fulfilled（已兑现），向resolve中传入的参数可以在Promise对象的then方法中获取。reject：此函数可以将Promise的状态从pending（待定）改为rejected（已拒绝），向reject中传入的参数可以在Promise对象的catch方法中获取。
这些基本概念在处理异步操作中非常重要，开发者需要通过适当的方法来处理异步操作，Promise可以链式调用多个异步操作，使代码清晰整洁，便于维护。JSVM-API提供的方法可以帮助开发者在JSVM模块中处理JavaScript中的异步操作。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]OH_JSVM_IsPromise
判断给定的JSVM_Value是否表示一个Promise对象。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// IsPromise注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = IsPromise},\n};\nstatic JSVM_CallbackStruct *method = param;\n// IsPromise方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"isPromise\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_IsPromise的样例方法\nstatic JSVM_Value IsPromise(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    bool isPromise = false;\n    JSVM_Status status = OH_JSVM_IsPromise(env, args[0], &isPromise);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_IsPromise fail\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_IsPromise success:%{public}d\", isPromise);\n    }\n    JSVM_Value result = nullptr;\n    OH_JSVM_GetBoolean(env, isPromise, &result);\n    return result;\n}
ArkTS侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\nlet script: string = `\n          let value = Promise.resolve();\n          isPromise(value);\n        `;\ntry {\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'IsPromise: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'IsPromise: %{public}s', error.message);\n}
[h2]OH_JSVM_CreatePromise
OH_JSVM_CreatePromise用于创建一个Promise对象。
[h2]OH_JSVM_ResolveDeferred & OH_JSVM_RejectDeferred
用于对Promise关联的deferred对象进行解析，OH_JSVM_ResolveDeferred将其从挂起状态转换为已兑现状态，OH_JSVM_RejectDeferred将其从挂起状态转换为已拒绝状态。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// CreatePromise,ResolveRejectDeferred注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CreatePromise},\n    {.data = nullptr, .callback = ResolveRejectDeferred},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CreatePromise,ResolveRejectDeferred方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"createPromise\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n    {\"resolveRejectDeferred\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_CreatePromise、OH_JSVM_ResolveDeferred、OH_JSVM_RejectDeferred的样例方法\nstatic JSVM_Value CreatePromise(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    JSVM_Deferred defer = nullptr;\n    JSVM_Value promise = nullptr;\n    JSVM_Status status = OH_JSVM_CreatePromise(env, &defer, &promise);\n    bool isPromise = false;\n    JSVM_Value returnIsPromise = nullptr;\n    OH_JSVM_IsPromise(env, promise, &isPromise);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM CreatePromise fail\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM CreatePromise success:%{public}d\", isPromise);\n    }\n    // 将布尔值转为可以返回的JSVM_Value\n    OH_JSVM_GetBoolean(env, isPromise, &returnIsPromise);\n    return returnIsPromise;\n}\n\nstatic JSVM_Value ResolveRejectDeferred(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获得并解析参数\n    size_t argc = 3;\n    JSVM_Value args[3] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 第一个参数为向resolve传入的信息，第二个参数为向reject传入的信息，第三个参数为Promise的状态\n    bool status = false;\n    OH_JSVM_GetValueBool(env, args[2], &status);\n    // 创建Promise对象\n    JSVM_Deferred deferred = nullptr;\n    JSVM_Value promise = nullptr;\n    JSVM_Status createStatus = OH_JSVM_CreatePromise(env, &deferred, &promise);\n    if (createStatus != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"Create promise failed\");\n        return nullptr;\n    }\n    // 根据第三个参数设置resolve或reject\n    if (status) {\n        OH_JSVM_ResolveDeferred(env, deferred, args[0]);\n        OH_LOG_INFO(LOG_APP, \"OH_JSVM_ResolveDeferred resolve\");\n    } else {\n        OH_JSVM_RejectDeferred(env, deferred, args[1]);\n        OH_LOG_INFO(LOG_APP, \"OH_JSVM_RejectDeferred reject\");\n    }\n    JSVM_Value result = nullptr;\n    OH_JSVM_GetBoolean(env, true, &result);\n    return result;\n}
ArkTS侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\nlet createPromiseScript: string = `createPromise();`;\nlet createPromiseresult = napitest.runJsVm(createPromiseScript);\nhilog.info(0x0000, 'JSVM', 'CreatePromise: %{public}s', createPromiseresult);\n// 这里传入的第三个参数，表示Promise已将其从挂起状态设置为已兑现状态\nlet resolveScript: string = `resolveRejectDeferred('success','fail', true);`;\nlet result = napitest.runJsVm(resolveScript);\nhilog.info(0x0000, 'JSVM', 'ResolveRejectDeferred: %{public}s', result);\n// 这里传入的第三个参数，表示Promise将其从挂起状态设置为已拒绝状态\nlet rejectScript: string = `resolveRejectDeferred('success','fail', false);`;\nlet rejectResult = napitest.runJsVm(rejectScript);\nhilog.info(0x0000, 'JSVM', 'ResolveRejectDeferred: %{public}s', rejectResult);
