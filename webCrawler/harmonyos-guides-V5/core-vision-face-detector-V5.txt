人脸检测
适用场景
检测图片中的人脸，返回高精度人脸矩形框坐标、人脸五官位置、人脸朝向、人脸置信度。可通过对人脸的定位，实现对人脸特定位置的美化修饰。广泛应用于各类人脸识别场景，如人脸解锁、人脸聚类、美颜等场景中。
约束与限制
该能力当前不支持模拟器。
世界坐标系
以下方图片指示坐标系辅助表示人脸朝向。
开发步骤
 在使用人脸检测时，将实现人脸检测相关的类添加至工程。import { faceDetector } from '@kit.CoreVisionKit';  简单配置页面的布局，并在Button组件添加点击事件，拉起图库，选择图片。Button('选择图片')\n  .type(ButtonType.Capsule)\n  .fontColor(Color.White)\n  .alignSelf(ItemAlign.Center)\n  .width('80%')\n  .margin(10)\n  .onClick(() => {\n    // 拉起图库，获取图片资源\n    this.selectImage();\n  })  通过图库获取图片资源，将图片转换为PixelMap。private async selectImage() {\n  let uri = await this.openPhoto()\n  if (uri === undefined) {\n    hilog.error(0x0000, 'faceDetector', \"Failed to get uri.\");\n  }\n  this.loadImage(uri)\n}\n\nprivate openPhoto(): Promise<string> {\n  return new Promise<string>((resolve) => {\n    let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n    photoPicker.select({\n      MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE, \n      maxSelectNumber: 1\n    }).then(res => {\n      resolve(res.photoUris[0])\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, 'faceDetector', `Failed to get photo image uri.code：${err.code}，message：${err.message}`);\n      resolve('');\n    })\n  })\n}\n\nprivate loadImage(name: string) {\n  setTimeout(async () => {\n    let imageSource: image.ImageSource | undefined = undefined;\n    let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\n    imageSource = image.createImageSource(fileSource.fd);\n    this.chooseImage = await imageSource.createPixelMap();\n    this.dataValues = \"\";\n    hilog.info(0x0000, 'faceDetectorSample', 'this.chooseImage:', this.chooseImage);\n  }, 100\n  )\n}  实例化VisionInfo对象，并传入待检测图片的PixelMap，实现人脸检测功能。// 初始化并调用人脸检测接口\nfaceDetector.init();\nlet visionInfo: faceDetector.VisionInfo = {\n  pixelMap: this.chooseImage,\n};\nlet data:faceDetector.Face[] = await faceDetector.detect(visionInfo);  （可选）如果需要将结果展示在界面上，可以使用下列代码。let data:faceDetector.Face[] = await faceDetector.detect(visionInfo);\nif (data.length === 0) {\n  this.dataValues = \"No face is detected in the image. Select an image that contains a face.\";\n} else {\n  let faceString = JSON.stringify(data);\n  hilog.info(0x0000, 'testTag', \"faceString data is \" + faceString);\n  this.dataValues = faceString;\n}  
开发实例
点击“选择图片”按钮，触发AI人脸检测功能。
import { faceDetector } from '@kit.CoreVisionKit';\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo } from '@kit.CoreFileKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\n\n@Entry\n@Component\nstruct Index {\n  @State chooseImage: PixelMap | undefined = undefined\n  @State dataValues: string = ''\n\n  build() {\n    Column() {\n      Image(this.chooseImage)\n        .objectFit(ImageFit.Fill)\n        .height('60%')\n      Text(this.dataValues)\n        .copyOption(CopyOptions.LocalDevice)\n        .height('15%')\n        .margin(10)\n        .width('60%')\n      Button('选择图片')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          // 拉起图库\n          this.selectImage()\n        })\n      Button('人脸检测')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          if(!this.chooseImage) {\n            hilog.error(0x0000, 'faceDetectorSample', \"Failed to detect face.\");\n            return;\n          }\n          // 调用人脸检测接口\n          faceDetector.init();\n          let visionInfo: faceDetector.VisionInfo = {\n            pixelMap: this.chooseImage,\n          };\n          faceDetector.detect(visionInfo)\n            .then((data: faceDetector.Face[]) => {\n              if (data.length === 0) {\n                this.dataValues = \"No face is detected in the image. Select an image that contains a face.\";\n              } else {\n                let faceString = JSON.stringify(data);\n                hilog.info(0x0000, 'faceDetectorSample', \"faceString data is \" + faceString);\n                this.dataValues = faceString;\n              }\n            })\n            .catch((error: BusinessError) => {\n              hilog.error(0x0000, 'faceDetectorSample', `Face detection failed. Code: ${error.code}, message: ${error.message}`);\n              this.dataValues = `Error: ${error.message}`;\n            });\n          faceDetector.release();\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  private async selectImage() {\n    let uri = await this.openPhoto()\n    if (uri === undefined) {\n      hilog.error(0x0000, 'faceDetectorSample', \"Failed to get uri.\");\n    }\n    this.loadImage(uri);\n  }\n\n  private openPhoto(): Promise<string> {\n    return new Promise<string>((resolve) => {\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n      photoPicker.select({\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\n        maxSelectNumber: 1\n      }).then(res => {\n        resolve(res.photoUris[0])\n      }).catch((err: BusinessError) => {\n        hilog.error(0x0000, 'faceDetectorSample', `Failed to get photo image uri.code：${err.code}，message：${err.message}`);\n        resolve('');\n      })\n    })\n  }\n\n  private loadImage(name: string) {\n    setTimeout(async () => {\n      let imageSource: image.ImageSource | undefined = undefined;\n      let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\n      imageSource = image.createImageSource(fileSource.fd);\n      this.chooseImage = await imageSource.createPixelMap();\n      this.dataValues = \"\";\n      hilog.info(0x0000, 'faceDetectorSample', 'this.chooseImage:', this.chooseImage);\n    }, 100\n    )\n  }\n}
