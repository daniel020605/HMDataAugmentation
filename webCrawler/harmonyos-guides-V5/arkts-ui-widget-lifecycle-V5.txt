卡片生命周期管理
创建ArkTS卡片，需实现FormExtensionAbility生命周期接口。
 在EntryFormAbility.ets中，导入相关模块。 import { formBindingData, FormExtensionAbility, formInfo, formProvider } from '@kit.FormKit';\nimport { Configuration, Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit'; 在EntryFormAbility.ets中，实现FormExtensionAbility生命周期接口，其中在onAddForm的入参want中可以通过FormParam取出卡片的相关信息。 const TAG: string = 'EntryFormAbility';\nconst DOMAIN_NUMBER: number = 0xFF00;\n \nexport default class EntryFormAbility extends FormExtensionAbility {\n  onAddForm(want: Want): formBindingData.FormBindingData {\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onAddForm');\n    hilog.info(DOMAIN_NUMBER, TAG, want.parameters?.[formInfo.FormParam.NAME_KEY] as string);\n \n    // ...\n    // 卡片使用方创建卡片时触发，提供方需要返回卡片数据绑定类\n    let obj: Record<string, string> = {\n      'title': 'titleOnAddForm',\n      'detail': 'detailOnAddForm'\n    };\n    let formData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\n    return formData;\n  }\n \n  onCastToNormalForm(formId: string): void {\n    // 卡片使用方将临时卡片转换为常态卡片触发，提供方需要做相应的处理。\n    // 1、临时卡、常态卡是卡片使用方的概念。\n    // 2、临时卡是短期存在的，在特定事件或用户行为后显示，完成后自动消失。\n    // 3、常态卡是持久存在的，在用户未进行清除或更改的情况下，会一直存在，平时开发的功能卡片属于常态卡。\n    // 4、目前手机上没有地方会使用临时卡。\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onCastToNormalForm');\n  }\n \n  onUpdateForm(formId: string): void {\n    // 若卡片支持定时更新/定点更新/卡片使用方主动请求更新功能，则提供方需要重写该方法以支持数据更新\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onUpdateForm');\n    let obj: Record<string, string> = {\n      'title': 'titleOnUpdateForm',\n      'detail': 'detailOnUpdateForm'\n    };\n    let formData: formBindingData.FormBindingData = formBindingData.createFormBindingData(obj);\n    formProvider.updateForm(formId, formData).catch((error: BusinessError) => {\n      hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] updateForm, error:' + JSON.stringify(error));\n    });\n  }\n \n  onChangeFormVisibility(newStatus: Record<string, number>): void {\n    // 卡片使用方发起可见或者不可见通知触发，提供方需要做相应的处理，仅系统应用生效\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onChangeFormVisibility');\n  }\n \n  onFormEvent(formId: string, message: string): void {\n    // 若卡片支持触发事件，则需要重写该方法并实现对事件的触发\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onFormEvent');\n    // ...\n  }\n \n  onRemoveForm(formId: string): void {\n    // 删除卡片实例数据\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onRemoveForm');\n    // 删除之前持久化的卡片实例数据\n    // 此接口请根据实际情况实现，具体请参考：FormExtAbility Stage模型卡片实例\n  }\n \n  onConfigurationUpdate(config: Configuration) {\n    // 当前formExtensionAbility存活时更新系统配置信息时触发的回调。\n    // 需注意：formExtensionAbility创建后10秒内无操作将会被清理。\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onConfigurationUpdate:' + JSON.stringify(config));\n  }\n \n  onAcquireFormState(want: Want) {\n    // 卡片提供方接收查询卡片状态通知接口，默认返回卡片初始状态。\n    return formInfo.FormState.READY;\n  }\n} 
FormExtensionAbility进程不能常驻后台，即在卡片生命周期回调函数中无法处理长时间的任务，在生命周期调度完成后会继续存在10秒，如10秒内没有新的生命周期回调触发则进程自动退出。针对可能需要10秒以上才能完成的业务逻辑，建议拉起主应用进行处理，处理完成后使用updateForm通知卡片进行刷新。
