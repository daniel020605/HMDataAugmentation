设备输入(C/C++)
在开发相机应用时，需要先参考开发准备申请相关权限。
相机应用通过调用和控制相机设备，完成预览、拍照和录像等基础操作。
开发步骤
详细的API说明请参考Camera API参考。
 导入NDK接口。选择系统提供的NDK接口能力，导入NDK接口的方法如下。  // 导入NDK接口头文件\n #include \"hilog/log.h\"\n #include \"ohcamera/camera.h\"\n #include \"ohcamera/camera_input.h\"\n #include \"ohcamera/capture_session.h\"\n #include \"ohcamera/photo_output.h\"\n #include \"ohcamera/preview_output.h\"\n #include \"ohcamera/video_output.h\"\n #include \"ohcamera/camera_manager.h\" 在CMake脚本中链接相关动态库。  target_link_libraries(entry PUBLIC libohcamera.so libhilog_ndk.z.so) 通过OH_CameraManager_CreateCameraInput()方法，获取cameraInput对象。 Camera_Manager *cameraManager = nullptr;\nCamera_Input* cameraInput = nullptr;\nCamera_Device* cameras = nullptr;\nCamera_OutputCapability* cameraOutputCapability = nullptr;\nconst Camera_Profile* previewProfile = nullptr;\nconst Camera_Profile* photoProfile = nullptr;\nuint32_t size = 0;\nuint32_t cameraDeviceIndex = 0;\n// 创建CameraManager对象\nCamera_ErrorCode ret = OH_Camera_GetCameraManager(&cameraManager);\nif (cameraManager == nullptr || ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_Camera_GetCameraMananger failed.\");\n}\n// 监听相机状态变化\nret = OH_CameraManager_RegisterCallback(cameraManager, GetCameraManagerListener());\nif (ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_RegisterCallback failed.\");\n}\n// 获取相机列表\n ret = OH_CameraManager_GetSupportedCameras(cameraManager, &cameras, &size);\n if (cameras == nullptr || size < 0 || ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameras failed.\");\n }\n// 创建相机输入流\nret = OH_CameraManager_CreateCameraInput(cameraManager, &cameras[cameraDeviceIndex], &cameraInput);\nif (cameraInput == nullptr || ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_CreateCameraInput failed.\");\n}\nret == OH_CameraInput_RegisterCallback(cameraInput, GetCameraInputListener());\nif (ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_RegisterCallback failed.\");\n}\n// 打开相机\nret = OH_CameraInput_Open(cameraInput);\nif (ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraInput_open failed.\");\n} // 监听cameraInput错误信息\nvoid OnCameraInputError(const Camera_Input* cameraInput, Camera_ErrorCode errorCode)\n{\n   OH_LOG_INFO(LOG_APP, \"OnCameraInput errorCode: %{public}d\", errorCode);\n}\n\nCameraInput_Callbacks* GetCameraInputListener(void)\n{\n   static CameraInput_Callbacks cameraInputCallbacks = {\n      .onError = OnCameraInputError\n   };\n   return &cameraInputCallbacks;\n}     在相机设备输入之前需要先完成相机管理，详细开发步骤请参考相机管理   通过OH_CameraManager_GetSupportedSceneModes()方法，获获取当前相机设备支持的模式列表，列表中存储了相机设备支持的所有模式Camera_SceneMode。 Camera_SceneMode* sceneModes = nullptr;\nuint32_t length = 0;\nuint32_t sceneModeIndex = 0;\nret = OH_CameraManager_GetSupportedSceneModes(&cameras[cameraDeviceIndex], &sceneModes, &length);\nif (sceneModes == nullptr || ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedSceneModes failed.\");\n}\nfor (int index = 0; index < length; index++) {\n   OH_LOG_INFO(LOG_APP, \"scene mode = %{public}s \", sceneModes[index]);    // 获取相机指定模式\n} 通过OH_CameraManager_GetSupportedCameraOutputCapabilityWithSceneMode()方法，获取当前设备支持的所有输出流，如预览流、拍照流等。输出流在CameraOutputCapability中的各个profile字段中。根据相机设备指定模式Camera_SceneMode的不同，需要添加不同类型的输出流。 // 获取相机设备支持的输出流能力\nCamera_OutputCapability* cameraOutputCapability = nullptr;\nconst Camera_Profile* previewProfile = nullptr;\nconst Camera_Profile* photoProfile = nullptr;\nret = OH_CameraManager_GetSupportedCameraOutputCapabilityWithSceneMode(cameraManager, &cameras[cameraDeviceIndex], sceneModes[sceneModeIndex]\n                                                               &cameraOutputCapability);\nif (cameraOutputCapability == nullptr || ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameraOutputCapability failed.\");\n}\n// 以NORMAL_PHOTO模式为例，需要添加预览流、拍照流\nif (cameraOutputCapability->previewProfilesSize < 0) {\n   OH_LOG_ERROR(LOG_APP, \"previewProfilesSize == null\");\n}\npreviewProfile = cameraOutputCapability->previewProfiles[0];\n\nif (cameraOutputCapability->photoProfilesSize < 0) {\n   OH_LOG_ERROR(LOG_APP, \"photoProfilesSize == null\");\n}\nphotoProfile = cameraOutputCapability->photoProfiles[0]; 
