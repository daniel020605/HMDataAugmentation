录像(ArkTS)
录像也是相机应用的最重要功能之一，录像是循环帧的捕获。对于录像的流畅度，开发者可以参考拍照中的步骤4，设置分辨率、闪光灯、焦距、照片质量及旋转角度等信息。
开发步骤
详细的API说明请参考Camera API参考。
 导入media模块。 创建录像输出流的SurfaceId以及录像输出的数据，都需要用到系统提供的media接口能力，导入media接口的方法如下。 import { BusinessError } from '@kit.BasicServicesKit';\nimport { camera } from '@kit.CameraKit';\nimport { media } from '@kit.MediaKit'; 创建Surface。 系统提供的media接口可以创建一个录像AVRecorder实例，通过该实例的getInputSurface方法获取SurfaceId，与录像输出流做关联，处理录像输出流输出的数据。 async function getVideoSurfaceId(aVRecorderConfig: media.AVRecorderConfig): Promise<string | undefined> {  // aVRecorderConfig可参考下一章节\n  let avRecorder: media.AVRecorder | undefined = undefined;\n  try {\n    avRecorder = await media.createAVRecorder();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`createAVRecorder call failed. error code: ${err.code}`);\n  }\n  if (avRecorder === undefined) {\n    return undefined;\n  }\n  avRecorder.prepare(aVRecorderConfig, (err: BusinessError) => {\n    if (err == null) {\n      console.info('prepare success');\n    } else {\n      console.error('prepare failed and error is ' + err.message);\n    }\n  });\n  let videoSurfaceId = await avRecorder.getInputSurface();\n  return videoSurfaceId;\n} 创建录像输出流。 通过CameraOutputCapability类中的videoProfiles属性，可获取当前设备支持的录像输出流。然后，定义创建录像的参数，通过createVideoOutput方法创建录像输出流。     预览流与录像输出流的分辨率的宽高比要保持一致，如示例代码中宽高比为640:480 = 4:3，则需要预览流中的分辨率的宽高比也为4:3，如分辨率选择640:480，或960:720，或1440:1080，以此类推 获取录像旋转角度的方法：通过VideoOutput类中的getVideoRotation方法获取rotation实际的值   async function getVideoOutput(cameraManager: camera.CameraManager, videoSurfaceId: string, cameraOutputCapability: camera.CameraOutputCapability): Promise<camera.VideoOutput | undefined> {\n  let videoProfilesArray: Array<camera.VideoProfile> = cameraOutputCapability.videoProfiles;\n  if (!videoProfilesArray) {\n    console.error(\"createOutput videoProfilesArray == null || undefined\");\n    return undefined;\n  }\n  // AVRecorderProfile\n  let aVRecorderProfile: media.AVRecorderProfile = {\n    fileFormat : media.ContainerFormatType.CFT_MPEG_4, // 视频文件封装格式，只支持MP4\n    videoBitrate : 100000, // 视频比特率\n    videoCodec : media.CodecMimeType.VIDEO_AVC, // 视频文件编码格式，支持avc格式\n    videoFrameWidth : 640,  // 视频分辨率的宽\n    videoFrameHeight : 480, // 视频分辨率的高\n    videoFrameRate : 30 // 视频帧率\n  };\n  // 创建视频录制的参数，预览流与录像输出流的分辨率的宽(videoFrameWidth)高(videoFrameHeight)比要保持一致\n  let aVRecorderConfig: media.AVRecorderConfig = {\n    videoSourceType: media.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV,\n    profile: aVRecorderProfile,\n    url: 'fd://35',\n    rotation: 90 // rotation的值90，是通过getPhotoRotation接口获取到的值，具体请参考说明中获取录像旋转角度的方法\n  };\n  // 创建avRecorder\n  let avRecorder: media.AVRecorder | undefined = undefined;\n  try {\n    avRecorder = await media.createAVRecorder();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`createAVRecorder call failed. error code: ${err.code}`);\n  }\n  if (avRecorder === undefined) {\n    return undefined;\n  }\n  // 设置视频录制的参数\n  avRecorder.prepare(aVRecorderConfig);\n  // 创建VideoOutput对象\n  let videoOutput: camera.VideoOutput | undefined = undefined;\n  // createVideoOutput传入的videoProfile对象的宽高需要和aVRecorderProfile保持一致。\n  let videoProfile: undefined | camera.VideoProfile = videoProfilesArray.find((profile: camera.VideoProfile) => {\n    return profile.size.width === aVRecorderProfile.videoFrameWidth && profile.size.height === aVRecorderProfile.videoFrameHeight;\n  });\n  if (!videoProfile) {\n    console.error('videoProfile is not found');\n    return;\n  }\n  try {\n    videoOutput = cameraManager.createVideoOutput(videoProfile, videoSurfaceId);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to create the videoOutput instance. errorCode = ' + err.code);\n  }\n  return videoOutput;\n} 开始录像。 先通过videoOutput的start方法启动录像输出流，再通过avRecorder的start方法开始录像。 async function startVideo(videoOutput: camera.VideoOutput, avRecorder: media.AVRecorder): Promise<void> {\n  videoOutput.start(async (err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to start the video output ${err.message}`);\n      return;\n    }\n    console.info('Callback invoked to indicate the video output start success.');\n  });\n  try {\n    await avRecorder.start();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`avRecorder start error: ${JSON.stringify(err)}`);\n  }\n} 停止录像。 先通过avRecorder的stop方法停止录像，再通过videoOutput的stop方法停止录像输出流。 async function stopVideo(videoOutput: camera.VideoOutput, avRecorder: media.AVRecorder): Promise<void> {\n  try {\n    await avRecorder.stop();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`avRecorder stop error: ${JSON.stringify(err)}`);\n  }\n  videoOutput.stop((err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to stop the video output ${err.message}`);\n      return;\n    }\n    console.info('Callback invoked to indicate the video output stop success.');\n  });\n} 
状态监听
在相机应用开发过程中，可以随时监听录像输出流状态，包括录像开始、录像结束、录像流输出的错误。
 通过注册固定的frameStart回调函数获取监听录像开始结果，videoOutput创建成功时即可监听，录像第一次曝光时触发，有该事件返回结果则认为录像开始。 function onVideoOutputFrameStart(videoOutput: camera.VideoOutput): void {\n  videoOutput.on('frameStart', (err: BusinessError) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info('Video frame started');\n  });\n} 通过注册固定的frameEnd回调函数获取监听录像结束结果，videoOutput创建成功时即可监听，录像完成最后一帧时触发，有该事件返回结果则认为录像流已结束。 function onVideoOutputFrameEnd(videoOutput: camera.VideoOutput): void {\n  videoOutput.on('frameEnd', (err: BusinessError) => {\n    if (err !== undefined && err.code !== 0) {\n      return;\n    }\n    console.info('Video frame ended');\n  });\n} 通过注册固定的error回调函数获取监听录像输出错误结果，callback返回预览输出接口使用错误时对应的错误码，错误码类型参见Camera错误码。 function onVideoOutputError(videoOutput: camera.VideoOutput): void {\n  videoOutput.on('error', (error: BusinessError) => {\n    console.error(`Video output error code: ${error.code}`);\n  });\n} 
示例代码
 基于CameraKit通过AVRecorder录像 
