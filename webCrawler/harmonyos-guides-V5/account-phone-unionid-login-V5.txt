华为账号一键登录（获取手机号和UnionID/OpenID）
概述
华为账号一键登录是基于OAuth 2.0协议标准和OpenID Connect协议标准构建的OAuth2.0 授权登录系统，应用可以通过华为账号一键登录能力方便地获取华为账号用户的身份标识和手机号，快速建立应用内的用户体系。
优势：
 利用系统账号的安全性和便利性，用户无需输入账号名和密码，无需复杂的安全验证，简化登录步骤，提高用户转化率。 提供系统验证过的手机号，关联应用已有用户。 实现手机、平板、2in1一致的登录体验。 
场景介绍
若应用需同时获取手机号和UnionID完成用户登录，Account Kit提供了同时获取手机号和UnionID的华为账号一键登录按钮。应用可以将华为账号一键登录按钮嵌入自有的登录页，使用登录按钮获取手机号和UnionID，实现用户登录。设备登录华为账号（该账号已绑定手机号）后，一键登录获取手机号可不依赖设备插SIM卡。华为账号一键登录详细接入体验可参考Account Kit提供的SampleCode示例工程。
手机号验证机制说明：
Account Kit调用系统能力获取华为账号登录设备上的手机号码，与华为账号绑定的手机号进行校验（有网络即可，无需使用SIM卡移动数据）。用户点击一键登录按钮后，结合华为账号使用过程中账号所绑定的手机号短信验证记录，90天内有验证通过的记录，则返回该华为账号绑定的手机号；若90天内没有验证通过的记录，则触发Account Kit默认提供的短信验证流程（Account Kit提供的验证页，暂不可自定义），确保返回的手机号经过验证。
约束与限制
1、应用满足《常见类型移动互联网应用程序必要个人信息范围规定》中使用手机号的必要业务场景。
2、使用华为账号一键登录功能用户必须同意《华为账号用户认证协议》，当用户点击《华为账号用户认证协议》，系统浅色模式下应用需跳转到如下链接https://privacy.consumer.huawei.com/legal/id/authentication-terms.htm?code=CN&language=zh-CN，系统深色模式下跳转到https://privacy.consumer.huawei.com/legal/id/authentication-terms.htm?code=CN&language=zh-CN&bgmode=black。
3、应用在用户同意后获取到手机号，需要根据自身业务场景判断使用的方式，必要时增加其他安全验证手段，比如对二次放号的判断。
4、华为账号一键登录服务当前仅限中国境内（不包含中国香港、中国澳门、中国台湾）用户可用。
5、应用服务器获取华为账号绑定号码时，该服务器必须部署在中国境内（不包含中国香港、中国澳门、中国台湾）。
用户体验设计
登录页面UX设计规范
一键登录按钮的用户体验和UX设计需符合【华为账号一键登录】按钮规范，用户体验设计图2中的华为标志按钮可参考华为账号登录视觉规范中的样式三。不符合规范的UX设计可能会对应用上架和用户体验带来影响。一键登录按钮的样式设计具体可以参考华为账号登录按钮类型。
用户场景设计
用户使用华为账号一键登录能力，注册/登录应用时，可能存在多种场景，应用可参考如下流程，根据自身业务场景进行设计。
将UnionID/OpenID和手机号同时与应用账号建立关联，可以为用户带来更多便利的功能。如：实现静默登录、获取华为账号用户信息等。实现免用户操作登录，获得安全快捷地应用登录体验。
业务流程
流程说明：
 用户打开应用后，应用传对应的scope调用AuthorizationWithHuaweiIDRequest请求获取AuthorizationWithHuaweiIDResponse响应结果。 通过响应结果判断系统华为账号是否已登录，如未登录，则应用需要展示其他登录方式；如已登录，则从响应结果中解析出UnionID、OpenID和匿名手机号。 应用查询UnionID、OpenID是否已关联用户。如已关联，结合风控、安全因素及自身业务场景判断，可展示已关联的账号，由用户选择是否使用华为账号登录应用，或免用户操作，静默登录应用；如未关联，则参考下面步骤继续开发。 判断匿名手机号是否为空，如为空，则应用需要展示其他登录方式；不为空，则设置相关参数调用LoginWithHuaweiIDButton组件拉起一键登录页面。 用户同意协议后，点击华为账号一键登录按钮，应用可以获取到Authorization Code等数据。 将获取的Authorization Code数据传给应用服务器，应用服务器通过调用获取用户级凭证接口和获取用户信息接口获取用户完整手机号和UnionID、OpenID。 应用通过用户手机号和UnionID、OpenID完成用户关联。 
接口说明
华为账号一键登录按钮关键接口如下表所示，具体API说明详见API参考。
接口名
描述
createAuthorizationWithHuaweiIDRequest(): AuthorizationWithHuaweiIDRequest
获取授权接口，通过AuthorizationWithHuaweiIDRequest传入一键登录的scope：quickLoginAnonymousPhone，即可在授权结果中获取到用户UnionID、OpenID、匿名化手机号。
constructor(context?: common.Context)
创建授权请求Controller。
executeRequest(request: AuthenticationRequest): Promise<AuthenticationResponse>
通过Promise方式执行授权操作。
LoginWithHuaweiIDButton
华为账号Button登录组件。
该组件仅纯文本样式支持华为账号一键登录功能。开发者可以通过调整按钮的大小、圆角等参数以适配HarmonyOS应用登录界面。如果仍然不能满足开发者的诉求，可以使用BUTTON_CUSTOM类型定义按钮的文字颜色和背景色。
onClickLoginWithHuaweiIDButton(callback: AsyncCallback<HuaweiIDCredential>): LoginWithHuaweiIDButtonController
注册华为账号一键登录按钮的结果回调。
setAgreementStatus(agreementStatus: AgreementStatus): LoginWithHuaweiIDButtonController
设置协议状态方法。用户未同意协议前设置协议状态为NOT_ACCEPTED，用户同意协议后设置协议状态为ACCEPTED，才可以完成华为账号登录。
onClickEvent(callback: AsyncCallback<ClickEvent>): LoginWithHuaweiIDButtonController
注册华为账号一键登录按钮的点击事件回调。
continueLogin(callback: AsyncCallback<void>): LoginWithHuaweiIDButtonController
用户点击协议弹框的同意并登录按钮结果回调。
上述接口需在页面或自定义组件生命周期内调用。
开发前提
 在进行代码开发前，请先确认已完成开发准备工作。 应用使用华为账号一键登录功能之前，需要完成quickLoginMobilePhone（华为账号一键登录）的scope权限申请，详情参见配置scope权限。scope权限申请审批未完成或未通过，将报错1001502014 应用未申请scopes或permissions权限。            细分场景 对应scope 权限名称 权限描述 权限是否需要申请    华为账号一键登录 quickLoginAnonymousPhone quickLoginMobilePhone 华为账号一键登录，包含获取完整手机号 是     
客户端开发
[h2]自行开发
 导入Account Kit的authentication模块及相关公共模块。import { authentication } from '@kit.AccountKit';\nimport { util } from '@kit.ArkTS';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit'; 调用authentication模块的AuthorizationWithHuaweiIDRequest请求获取华为账号用户的UnionID、OpenID、匿名手机号。匿名手机号用于登录页面展示。           该场景下forceAuthorization参数需设置为false。           根据获取的响应结果判断，可能存在以下场景：         已正确获取到用户身份标识UnionID、OpenID，应用可通过用户身份标识查询该用户是否已关联。1）如已关联，结合风控、安全因素及自身业务场景判断，可展示已关联的账号，由用户选择是否使用华为账号登录应用，或免用户操作，静默登录应用，客户端开发结束。 2）如未关联，再判断是否存在下面的异常场景，如无，则参考下面步骤3继续开发。 存在如下返回ArkTS错误码的异常场景：1）返回1001502001 用户未登录华为账号错误码，说明华为账号未登录。 2）返回1001500003 不支持该scopes或permissions错误码，说明华为账号用户注册地非中国境内（不包含中国香港、中国澳门、中国台湾）。 3）获取到的匿名手机号为空，说明华为账号没有绑定手机号、权限未申请或未生效、登录的华为账号是儿童账号或者开发者开启了代码混淆，quickLoginAnonymousPhone（匿名手机号）属性需要配置混淆白名单防止被混淆。            上述异常场景应用需要展示其他登录方式。             getQuickLoginAnonymousPhone() {\n    // 创建授权请求，并设置参数\n    const authRequest = new authentication.HuaweiIDProvider().createAuthorizationWithHuaweiIDRequest();\n    // 获取匿名手机号需传quickLoginAnonymousPhone这个scope，传参之前需要先申请“华为账号一键登录”权限\n    authRequest.scopes = ['quickLoginAnonymousPhone'];\n    // 用于防跨站点请求伪造\n    authRequest.state = util.generateRandomUUID();\n    // 一键登录场景该参数必须设置为false\n    authRequest.forceAuthorization = false;\n    const controller = new authentication.AuthenticationController();\n    try {\n      controller.executeRequest(authRequest).then((response: authentication.AuthorizationWithHuaweiIDResponse) => {\n        // 获取到UnionID、OpenID、匿名手机号\n        const unionID = response.data?.unionID;\n        const openID = response.data?.openID;\n        const anonymousPhone = response.data?.extraInfo?.quickLoginAnonymousPhone as string;\n        if (anonymousPhone) {\n          hilog.info(0x0000, 'testTag', 'Succeeded in authentication.');\n          const quickLoginAnonymousPhone: string = anonymousPhone;\n          return;\n        }\n        hilog.info(0x0000, 'testTag', 'Succeeded in authentication. AnonymousPhone is empty.');\n        // 未获取到匿名手机号需要跳转到应用自定义的登录页面\n      }).catch((error: BusinessError) => {\n        this.dealAllError(error);\n      })\n    } catch (error) {\n      this.dealAllError(error);\n    }\n  }\n\n  // 错误处理\n  dealAllError(error: BusinessError): void {\n    hilog.error(0x0000, 'testTag',\n      `Failed to get quickLoginAnonymousPhone, errorCode is ${error.code}, errorMessage is ${error.message}`);\n  }    将获取到的匿名手机号设置给下面QuickLoginButtonComponent组件示例代码中的quickLoginAnonymousPhone变量，调用LoginWithHuaweiIDButton组件，实现应用自己的登录页面，并展示华为账号一键登录按钮和华为账号用户认证协议（Account Kit提供跳转链接，应用需实现协议跳转，参见约束与限制第2点），用户同意协议并点击一键登录按钮后，可获取到Authorization Code，将该值传给应用服务器用于获取用户信息（完整手机号、UnionID、OpenID）。import { loginComponentManager, LoginWithHuaweiIDButton } from '@kit.AccountKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { promptAction, router } from '@kit.ArkUI';\nimport { connection } from '@kit.NetworkKit';\n\n@Component\nstruct QuickLoginButtonComponent {\n  logTag: string = 'QuickLoginButtonComponent';\n  domainId: number = 0x0000;\n  // 第二步获取的匿名化手机号传到此处\n  @State quickLoginAnonymousPhone: string = '';\n  // 是否勾选协议\n  @State isSelected: boolean = false;\n  // 华为账号用户认证协议链接，此处仅为示例，实际开发过程中，出于可维护性、安全性等方面考虑，域名不建议硬编码在本地\n  private static USER_AUTHENTICATION_PROTOCOL: string =\n    'https://privacy.consumer.huawei.com/legal/id/authentication-terms.htm?code=CN&language=zh-CN';\n  private static USER_SERVICE_TAG = '用户服务协议';\n  private static PRIVACY_TAG = '隐私协议';\n  private static USER_AUTHENTICATION_TAG = '华为账号用户认证协议';\n  // 定义LoginWithHuaweiIDButton展示的隐私文本，展示应用的用户服务协议、隐私协议和华为账号用户认证协议\n  privacyText: loginComponentManager.PrivacyText[] = [{\n    text: '已阅读并同意',\n    type: loginComponentManager.TextType.PLAIN_TEXT\n  }, {\n    text: '《用户服务协议》',\n    tag: QuickLoginButtonComponent.USER_SERVICE_TAG,\n    type: loginComponentManager.TextType.RICH_TEXT\n  }, {\n    text: '《隐私协议》',\n    tag: QuickLoginButtonComponent.PRIVACY_TAG,\n    type: loginComponentManager.TextType.RICH_TEXT\n  }, {\n    text: '和',\n    type: loginComponentManager.TextType.PLAIN_TEXT\n  }, {\n    text: '《华为账号用户认证协议》',\n    tag: QuickLoginButtonComponent.USER_AUTHENTICATION_TAG,\n    type: loginComponentManager.TextType.RICH_TEXT\n  }, {\n    text: '。',\n    type: loginComponentManager.TextType.PLAIN_TEXT\n  }];\n  // 构造LoginWithHuaweiIDButton组件的控制器\n  controller: loginComponentManager.LoginWithHuaweiIDButtonController =\n    new loginComponentManager.LoginWithHuaweiIDButtonController()\n      /**\n       * 当应用使用自定义的登录页时，如果用户未同意协议，需要设置协议状态为NOT_ACCEPTED，当用户同意协议后再设置\n       * 协议状态为ACCEPTED，才可以使用华为账号一键登录功能\n       */\n      .setAgreementStatus(loginComponentManager.AgreementStatus.NOT_ACCEPTED)\n      .onClickLoginWithHuaweiIDButton((error: BusinessError | undefined,\n        response: loginComponentManager.HuaweiIDCredential) => {\n        this.handleLoginWithHuaweiIDButton(error, response);\n      })\n      .onClickEvent((error: BusinessError, clickEvent: loginComponentManager.ClickEvent) => {\n        if (error) {\n          this.dealAllError(error);\n          return;\n        }\n        hilog.info(this.domainId, this.logTag, `onClickEvent clickEvent: ${clickEvent}`);\n      });\n  agreementDialog: CustomDialogController = new CustomDialogController({\n    builder: AgreementDialog({\n      privacyText: this.privacyText,\n      cancel: () => {\n        this.agreementDialog.close();\n        this.controller.setAgreementStatus(loginComponentManager.AgreementStatus.NOT_ACCEPTED);\n      },\n      confirm: () => {\n        this.agreementDialog.close();\n        this.isSelected = true;\n        this.controller.setAgreementStatus(loginComponentManager.AgreementStatus.ACCEPTED);\n        // 调用此方法，同意协议与登录一并完成，无需再次点击登录按钮\n        this.controller.continueLogin((error: BusinessError) => {\n          if (error) {\n            hilog.error(this.domainId, this.logTag,\n              `Failed to login with agreementDialog. errCode is ${error.code}, errMessage is ${error.message}`);\n          } else {\n            hilog.info(this.domainId, this.logTag,\n              'Succeeded in clicking agreementDialog continueLogin.');\n          }\n        });\n      },\n      clickHyperlinkText: () => {\n        this.agreementDialog.close();\n        this.jumpToPrivacyWebView();\n      }\n    }),\n    autoCancel: false,\n    alignment: DialogAlignment.Center,\n  });\n\n  // 传递页面渲染所需的数据，如匿名手机号等\n  aboutToAppear(): void {\n  }\n\n  // Toast提示\n  showToast(resource: string) {\n    try {\n      promptAction.showToast({\n        message: resource,\n        duration: 2000\n      });\n    } catch (error) {\n      const message = (error as BusinessError).message\n      const code = (error as BusinessError).code\n      hilog.error(this.domainId, this.logTag, `showToast args  errCode is ${code}, errMessage is ${message}`);\n    }\n  }\n\n  // 跳转华为账号用户认证协议页,该页面需在工程main_pages.json文件配置\n  jumpToPrivacyWebView() {\n    try {\n      // 需在module.json5中配置“ohos.permission.GET_NETWORK_INFO”权限\n      const checkNetConn = connection.hasDefaultNetSync();\n      if (!checkNetConn) {\n        this.showToast('服务或网络异常，请稍后重试');\n        return;\n      }\n    } catch (error) {\n      const message = error.message as string;\n      const code = error.code as string;\n      hilog.error(0x0000, 'testTag', `Failed to hasDefaultNetSync, errCode is ${code}, errMessage is ${message}`);\n    }\n    router.pushUrl({\n      // 需在module.json5配置“ohos.permission.INTERNET”网络权限\n      url: 'pages/WebPage',\n      params: {\n        isFromDialog: true,\n        url: QuickLoginButtonComponent.USER_AUTHENTICATION_PROTOCOL,\n      }\n    }, (err) => {\n      if (err) {\n        hilog.error(this.domainId, this.logTag,\n          `Failed to jumpToPrivacyWebView, errCode is ${err.code}, errMessage is ${err.message}`);\n      }\n    });\n  }\n\n  handleLoginWithHuaweiIDButton(error: BusinessError | undefined,\n    response: loginComponentManager.HuaweiIDCredential) {\n    if (error) {\n      hilog.error(this.domainId, this.logTag,\n        `Failed to login with LoginWithHuaweiIDButton. errCode is ${error.code}, errMessage is ${error.message}`);\n      if (error.code === ErrorCode.ERROR_CODE_NETWORK_ERROR) {\n        AlertDialog.show(\n          {\n            message: \"网络未连接，请检查网络设置。\",\n            offset: { dx: 0, dy: -12 },\n            alignment: DialogAlignment.Bottom,\n            autoCancel: false,\n            confirm: {\n              value: \"知道了\",\n              action: () => {\n              }\n            }\n          }\n        );\n      } else if (error.code === ErrorCode.ERROR_CODE_AGREEMENT_STATUS_NOT_ACCEPTED) {\n        // 未同意协议，弹出协议弹框，推荐使用该回调方式\n        this.agreementDialog.open();\n      } else if (error.code === ErrorCode.ERROR_CODE_LOGIN_OUT) {\n        // 华为账号未登录提示\n        this.showToast(\"华为账号未登录，请重试\");\n      } else if (error.code === ErrorCode.ERROR_CODE_NOT_SUPPORTED) {\n        // 不支持该scopes或permissions提示\n        this.showToast(\"该scopes或permissions不支持\");\n      } else if (error.code === ErrorCode.ERROR_CODE_PARAMETER_ERROR) {\n        // 参数错误提示\n        this.showToast(\"参数错误\");\n      } else {\n        // 其他提示系统或服务异常\n        this.showToast('服务或网络异常，请稍后重试');\n      }\n      return;\n    }\n    try {\n      if (this.isSelected) {\n        if (response) {\n          hilog.info(this.domainId, this.logTag, 'Succeeded in clicking LoginWithHuaweiIDButton.');\n          // 开发者根据实际业务情况使用以下信息\n          const authCode = response.authorizationCode;\n          const openID = response.openID;\n          const unionID = response.unionID;\n          const idToken = response.idToken;\n        }\n      } else {\n        this.agreementDialog.open();\n      }\n    } catch (err) {\n      hilog.error(this.domainId, this.logTag,\n        `Failed to login with LoginWithHuaweiIDButton, errCode: ${err.code}, errMessage: ${err.message}`);\n      AlertDialog.show(\n        {\n          message: '服务或网络异常，请稍后重试',\n          offset: { dx: 0, dy: -12 },\n          alignment: DialogAlignment.Bottom,\n          autoCancel: false,\n          confirm: {\n            value: '知道了',\n            action: () => {\n            }\n          }\n        }\n      );\n    }\n  }\n\n  // 错误处理\n  dealAllError(error: BusinessError): void {\n    hilog.error(this.domainId, this.logTag,\n      `Failed to login, errorCode is ${error.code}, errorMessage is ${error.message}`);\n  }\n\n  build() {\n    Scroll() {\n      Column() {\n        Column() {\n          Column() {\n            Image($r('app.media.app_icon'))\n              .width(48)\n              .height(48)\n              .draggable(false)\n              .copyOption(CopyOptions.None)\n              .onComplete(() => {\n                hilog.info(this.domainId, this.logTag, 'appIcon loading success.');\n              })\n              .onError(() => {\n                hilog.error(this.domainId, this.logTag, 'appIcon loading fail.');\n              })\n\n            Text($r('app.string.app_name'))\n              .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n              .fontWeight(FontWeight.Medium)\n              .fontWeight(FontWeight.Bold)\n              .maxFontSize($r('sys.float.ohos_id_text_size_headline8'))\n              .minFontSize($r('sys.float.ohos_id_text_size_body1'))\n              .maxLines(1)\n              .fontColor($r('sys.color.ohos_id_color_text_primary'))\n              .constraintSize({ maxWidth: '100%' })\n              .margin({\n                top: 12,\n              })\n\n            Text('应用描述')\n              .fontSize($r('sys.float.ohos_id_text_size_body2'))\n              .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n              .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n              .fontWeight(FontWeight.Regular)\n              .constraintSize({ maxWidth: '100%' })\n              .margin({\n                top: 8,\n              })\n          }.margin({\n            top: 100\n          })\n\n          Column() {\n            Text(this.quickLoginAnonymousPhone)\n              .fontSize(36)\n              .fontColor($r('sys.color.ohos_id_color_text_primary'))\n              .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n              .fontWeight(FontWeight.Bold)\n              .lineHeight(48)\n              .textAlign(TextAlign.Center)\n              .maxLines(1)\n              .constraintSize({ maxWidth: '100%', minHeight: 48 })\n\n            Text('华为账号绑定号码')\n              .fontSize($r('sys.float.ohos_id_text_size_body2'))\n              .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n              .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n              .fontWeight(FontWeight.Regular)\n              .lineHeight(19)\n              .textAlign(TextAlign.Center)\n              .maxLines(1)\n              .constraintSize({ maxWidth: '100%' })\n              .margin({\n                top: 8\n              })\n          }.margin({\n            top: 64\n          })\n\n          Column() {\n            LoginWithHuaweiIDButton({\n              params: {\n                // LoginWithHuaweiIDButton支持的样式\n                style: loginComponentManager.Style.BUTTON_RED,\n                // 账号登录按钮在登录过程中展示加载态\n                extraStyle: {\n                  buttonStyle: new loginComponentManager.ButtonStyle().loadingStyle({\n                    show: true\n                  })\n                },\n                // LoginWithHuaweiIDButton的边框圆角半径\n                borderRadius: 24,\n                // LoginWithHuaweiIDButton支持的登录类型\n                loginType: loginComponentManager.LoginType.QUICK_LOGIN,\n                // LoginWithHuaweiIDButton支持按钮的样式跟随系统深浅色模式切换\n                supportDarkMode: true,\n                // verifyPhoneNumber：如果华为账号用户在过去90天内未进行短信验证，是否拉起Account Kit提供的短信验证码页面\n                verifyPhoneNumber: true\n              },\n              controller: this.controller\n            })\n          }\n          .height(40)\n          .margin({\n            top: 56\n          })\n\n          Column() {\n            Button({\n              type: ButtonType.Capsule,\n              stateEffect: true\n            }) {\n              Text('其他方式登录')\n                .fontColor($r('sys.color.ohos_id_color_text_primary_activated'))\n                .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                .fontWeight(FontWeight.Medium)\n                .fontSize($r('sys.float.ohos_id_text_size_button1'))\n                .focusable(true)\n                .focusOnTouch(true)\n                .textOverflow({ overflow: TextOverflow.Ellipsis })\n                .maxLines(1)\n                .padding({ left: 8, right: 8 })\n            }\n            .fontColor($r('sys.color.ohos_id_color_text_primary_activated'))\n            .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n            .fontWeight(FontWeight.Medium)\n            .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n            .focusable(true)\n            .focusOnTouch(true)\n            .constraintSize({ minHeight: 40 })\n            .width('100%')\n            .onClick(() => {\n              hilog.info(this.domainId, this.logTag, 'click optionalLoginButton.');\n            })\n          }.margin({ top: 16 })\n        }.width('100%')\n\n        Row() {\n          Row() {\n            Checkbox({ name: 'privacyCheckbox', group: 'privacyCheckboxGroup' })\n              .width(24)\n              .height(24)\n              .focusable(true)\n              .focusOnTouch(true)\n              .margin({ top: 0 })\n              .select(this.isSelected)\n              .onChange((value: boolean) => {\n                if (value) {\n                  this.isSelected = true;\n                  this.controller.setAgreementStatus(loginComponentManager.AgreementStatus.ACCEPTED);\n                } else {\n                  this.isSelected = false;\n                  this.controller.setAgreementStatus(loginComponentManager.AgreementStatus.NOT_ACCEPTED);\n                }\n                hilog.info(this.domainId, this.logTag, `agreementChecked: ${value}`);\n              })\n          }\n\n          Row() {\n            Text() {\n              ForEach(this.privacyText, (item: loginComponentManager.PrivacyText) => {\n                if (item?.type === loginComponentManager.TextType.PLAIN_TEXT && item?.text) {\n                  Span(item?.text)\n                    .fontColor($r('sys.color.ohos_id_color_text_secondary'))\n                    .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n                    .fontWeight(FontWeight.Regular)\n                    .fontSize($r('sys.float.ohos_id_text_size_body3'))\n                } else if (item?.type === loginComponentManager.TextType.RICH_TEXT && item?.text) {\n                  Span(item?.text)\n                    .fontColor($r('sys.color.ohos_id_color_text_primary_activated'))\n                    .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                    .fontWeight(FontWeight.Medium)\n                    .fontSize($r('sys.float.ohos_id_text_size_body3'))\n                    .focusable(true)\n                    .focusOnTouch(true)\n                    .onClick(() => {\n                      // 应用需要根据item.tag实现协议页面的跳转逻辑\n                      hilog.info(this.domainId, this.logTag, `click privacy text tag: ${item.tag}`);\n                      // 华为账号用户认证协议\n                      if (item.tag === QuickLoginButtonComponent.USER_AUTHENTICATION_TAG) {\n                        this.jumpToPrivacyWebView();\n                      }\n                    })\n                }\n              }, (item: loginComponentManager.PrivacyText) => item.text.toString())\n            }\n            .width('100%')\n          }\n          .margin({ left: 12 })\n          .layoutWeight(1)\n          .constraintSize({ minHeight: 24 })\n        }\n        .alignItems(VerticalAlign.Top)\n        .margin({\n          top:16,\n          bottom: 16\n        })\n      }\n      .justifyContent(FlexAlign.SpaceBetween)\n      .constraintSize({ minHeight: '100%' })\n      .margin({\n        left: 16,\n        right: 16\n      })\n    }\n    .width('100%')\n    .height('100%')\n  }\n}\n\n@CustomDialog\nexport struct AgreementDialog {\n  logTag: string = 'AgreementDialog';\n  domainId: number = 0x0000;\n  dialogController?: CustomDialogController;\n  cancel: () => void = () => {\n  };\n  confirm: () => void = () => {\n  };\n  clickHyperlinkText: () => void = () => {\n  };\n  privacyText: loginComponentManager.PrivacyText[] = [];\n  private static USER_AUTHENTICATION_TAG = '华为账号用户认证协议';\n\n  build() {\n    Column() {\n      Row() {\n        Text('用户协议与隐私条款')\n          .id('loginPanel_agreement_dialog_privacy_title')\n          .maxFontSize($r('sys.float.ohos_id_text_size_headline8'))\n          .minFontSize($r('sys.float.ohos_id_text_size_body1'))\n          .fontColor($r('sys.color.ohos_id_color_text_primary'))\n          .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n          .fontWeight(FontWeight.Bold)\n          .textAlign(TextAlign.Center)\n          .textOverflow({ overflow: TextOverflow.Ellipsis })\n          .maxLines(2)\n      }\n      .alignItems(VerticalAlign.Center)\n      .constraintSize({ minHeight: 56, maxWidth: 400 })\n      .margin({\n        left: $r('sys.float.ohos_id_max_padding_start'),\n        right: $r('sys.float.ohos_id_max_padding_start')\n      })\n\n      Row() {\n        Text() {\n          ForEach(this.privacyText, (item: loginComponentManager.PrivacyText) => {\n            if (item?.type == loginComponentManager.TextType.PLAIN_TEXT && item?.text) {\n              Span(item?.text)\n                .fontSize($r('sys.float.ohos_id_text_size_body1'))\n                .fontColor($r('sys.color.ohos_id_color_text_primary'))\n                .fontFamily($r('sys.string.ohos_id_text_font_family_regular'))\n                .fontWeight(FontWeight.Regular)\n            } else if (item?.type == loginComponentManager.TextType.RICH_TEXT && item?.text) {\n              Span(item?.text)\n                .fontSize($r('sys.float.ohos_id_text_size_body1'))\n                .fontColor('#CE0E2D')\n                .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n                .fontWeight(FontWeight.Medium)\n                .focusable(true)\n                .focusOnTouch(true)\n                .onClick(() => {\n                  // 应用需要根据item.tag实现协议页面的跳转逻辑\n                  hilog.info(this.domainId, this.logTag, `click privacy text tag: ${item.tag}`);\n                  // 华为账号用户认证协议\n                  if (item.tag === AgreementDialog.USER_AUTHENTICATION_TAG) {\n                    hilog.info(this.domainId, this.logTag, 'AgreementDialog click.');\n                    this.clickHyperlinkText();\n                  }\n                })\n            }\n          }, (item: loginComponentManager.PrivacyText) => item.text.toString())\n        }\n        .width('100%')\n        .textOverflow({ overflow: TextOverflow.Ellipsis })\n        .maxLines(10)\n        .textAlign(TextAlign.Start)\n        .focusable(true)\n        .focusOnTouch(true)\n        .padding({ left: 24, right: 24 })\n      }.width('100%')\n\n      Flex({\n        direction: FlexDirection.Row\n      }) {\n        Button('取消',\n          { type: ButtonType.Capsule, stateEffect: true })\n          .id('loginPanel_agreement_cancel_btn')\n          .fontColor($r('sys.color.ohos_id_color_text_primary'))\n          .fontSize($r('sys.float.ohos_id_text_size_button1'))\n          .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n          .backgroundColor(Color.Transparent)\n          .fontWeight(FontWeight.Medium)\n          .focusable(true)\n          .focusOnTouch(true)\n          .constraintSize({ minHeight: 40, maxWidth: 400 })\n          .width('50%')\n          .onClick(() => {\n            hilog.info(this.domainId, this.logTag, 'AgreementDialog cancel.');\n            this.cancel();\n          })\n\n        Button('同意并登录',\n          { type: ButtonType.Capsule, stateEffect: true })\n          .id('loginPanel_agreement_dialog_huawei_id_login_btn')\n          .fontColor(Color.White)\n          .backgroundColor('#CE0E2D')\n          .fontSize($r('sys.float.ohos_id_text_size_button1'))\n          .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n          .fontWeight(FontWeight.Medium)\n          .focusable(true)\n          .focusOnTouch(true)\n          .constraintSize({ minHeight: 40, maxWidth: 400 })\n          .width('50%')\n          .onClick(() => {\n            hilog.info(this.domainId, this.logTag, 'AgreementDialog confirm.');\n            this.confirm();\n          })\n      }\n      .margin({\n        top: 8,\n        left: $r('sys.float.ohos_id_elements_margin_horizontal_l'),\n        right: $r('sys.float.ohos_id_elements_margin_horizontal_l'),\n        bottom: 16\n      })\n    }.backgroundColor($r('sys.color.ohos_id_color_dialog_default_bg'))\n    .padding({\n      left: 16,\n      right: 16\n    })\n  }\n}\n\nexport enum ErrorCode {\n  // 账号未登录\n  ERROR_CODE_LOGIN_OUT = 1001502001,\n  // 该账号不支持一键登录，如海外账号\n  ERROR_CODE_NOT_SUPPORTED = 1001500003,\n  // 网络错误\n  ERROR_CODE_NETWORK_ERROR = 1001502005,\n  // 用户未同意用户协议\n  ERROR_CODE_AGREEMENT_STATUS_NOT_ACCEPTED = 1005300001,\n  // 参数错误\n  ERROR_CODE_PARAMETER_ERROR = 401\n} 以下是华为账号用户认证协议展示页示例代码： import { webview } from '@kit.ArkWeb';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { router } from '@kit.ArkUI';\n\n// 华为账号用户认证协议展示页\n@Entry\n@Component\nstruct WebPage {\n  @State webUrl?: string = '';\n  @State progress: number = 0;\n  logTag: string = 'WebPage';\n  domainId: number = 0x0000;\n  controller: webview.WebviewController = new webview.WebviewController();\n\n  build() {\n    Column() {\n      Column() {\n        Button({ type: ButtonType.Normal }) {\n          Image($r('sys.media.ohos_ic_compnent_titlebar_back'))\n            .backgroundColor(Color.Transparent)\n            .borderRadius(20)\n            .width(24)\n            .height(24)\n            .draggable(false)\n            .autoResize(false)\n            .focusable(true)\n            .fillColor($r('sys.color.ohos_id_color_titlebar_icon'))\n            .matchTextDirection(true)\n        }\n        .alignSelf(ItemAlign.Start)\n        .backgroundColor($r('sys.color.ohos_id_color_button_normal'))\n        .borderRadius(20)\n        .width(40)\n        .height(40)\n        .onClick(() => {\n          router.back();\n        })\n      }\n      .height(56)\n      .width('100%')\n      .justifyContent(FlexAlign.Center)\n      .margin({\n        top: 36,\n        left: 16\n      })\n\n      Progress({ value: this.progress, type: ProgressType.Linear })\n        .width('100%')\n        .visibility(this.progress <= 99 ? Visibility.Visible : Visibility.None)\n\n      Web({ src: this.webUrl ?? '', controller: this.controller })\n        .backgroundColor(Color.Transparent)\n        .margin({ bottom: 60 })\n        .onProgressChange((event) => {\n          hilog.info(this.domainId, this.logTag,\n            'onProgressChange: ', (event ? event.newProgress : -1));\n          this.progress = event ? event.newProgress : 0;\n        })\n        .darkMode(WebDarkMode.Auto)\n        .forceDarkAccess(true)\n        .onLoadIntercept((event) => {\n          hilog.info(this.domainId, this.logTag, 'onLoadIntercept');\n          return false;\n        })\n        .onErrorReceive((event) => {\n          if (event) {\n            hilog.error(this.domainId, this.logTag, `onErrorReceive,errorInfo: ${event?.error?.getErrorInfo()}`);\n          }\n        })\n    }\n    .alignItems(HorizontalAlign.Start)\n    .padding({ left: 12, right: 12, bottom: 60 })\n    .width('100%')\n    .height('100%')\n  }\n\n  aboutToAppear(): void {\n    hilog.info(0x0000, 'testTag', 'aboutToAppear');\n    const params = router.getParams() as Record<string, string>;\n    this.webUrl = params.url ?? '';\n    hilog.info(0x0000, 'testTag', `webUrl: ${this.webUrl}`);\n  }\n\n  aboutToDisappear(): void {\n    hilog.info(0x0000, 'testTag', 'aboutToDisappear');\n    if (this.webUrl) {\n      this.controller.stop();\n    }\n  }\n} 
[h2]借助DevEco Studio辅助开发（可选）
 打开需要提供一键登录功能的页面，在页面的build()中创建一个容器（如Column）。 在DevEco Studio菜单栏点击View > Tool Windows > Kit Assistant，或使用快捷键Alt + K，进入Kit Assistant页面。 在左侧目录中点击选中AccountKit > QuickLoginButton，并拖拽至新创建的容器中。即可在当前位置插入相应的代码片段。 若代码片段插入失败，可查询快速插入场景化代码片段的说明排查原因。 在自动生成的代码段的getQuickLoginAnonymousPhone函数中，执行executeRequest函数可获取响应结果。               根据获取的响应结果判断，可能存在以下场景：         已正确获取到用户身份标识UnionID、OpenID，应用可通过用户身份标识查询该用户是否已关联。1）如已关联，结合风控、安全因素及自身业务场景判断，可展示已关联的账号，由用户选择是否使用华为账号登录应用，或免用户操作，静默登录应用，客户端开发结束。 2）如未关联，再判断是否存在下面的异常场景，如无，则参考下面步骤5继续开发。 存在如下返回ArkTS错误码的异常场景：1）返回1001502001 用户未登录华为账号错误码，说明华为账号未登录。 2）返回1001500003 不支持该scopes或permissions错误码，说明华为账号用户注册地非中国境内（不包含中国香港、中国澳门、中国台湾）。 3）获取到的匿名手机号为空，说明华为账号没有绑定手机号、权限未申请或未生效、登录的华为账号是儿童账号。 上述异常场景应用需要展示其他登录方式。   根据上述代码实现应用的登录页面，并展示华为账号一键登录按钮和华为账号用户认证协议（Account Kit提供跳转链接，应用需实现协议跳转，参见约束与限制第2点），用户同意协议并点击一键登录按钮后，可获取到Authorization Code，将该值传给应用服务器用于获取用户信息（完整手机号、UnionID、OpenID）。 
服务端开发
 应用服务器使用Client ID、Client Secret、Authorization Code调用获取用户级凭证的接口向华为账号服务器请求获取Access Token、Refresh Token。 使用Access Token调用获取用户信息接口获取用户信息，从用户信息中获取用户绑定的完整手机号和华为账号用户标识UnionID。Access Token过期处理         由于Access Token的有效期仅为60分钟，当Access Token失效或者即将失效时（可通过REST API错误码判断），可以使用Refresh Token（有效期180天）通过刷新凭证向华为账号服务器请求获取新的Access Token。             当Access Token失效时，若应用不使用Refresh Token向华为账号服务器请求获取新的Access Token，账号的授权信息将会失效，导致使用Access Token的功能都会失败。 当Access Token非正常失效（如修改密码、退出账号、删除设备）时，应用可重新登录授权获取Authorization Code，向华为账号服务器请求获取新的Access Token。     Refresh Token过期处理 由于Refresh Token的有效期为180天，当Refresh Token失效后（可通过REST API错误码判断），应用服务器需要通知客户端，重新调用授权接口，请求用户重新授权。 应用通过获取到的完整手机号或UnionID查询该用户是否已关联应用系统数据库。如已关联，则绑定获取的UnionID与手机号到已有用户上（如已绑定，则可忽略），完成用户登录；如未关联，则创建新用户并绑定手机号与UnionID到该用户上。 
客户端与服务端交互开发
[h2]应用客户端到应用服务端的开发
业务流程：
 准备： 
 请先完成应用客户端一键登录的相关开发，相关开发指导参考客户端开发； 参考使用fetch发送网络请求完成客户端到服务端的接口请求；        开发步骤：   在应用客户端调用应用服务端提供的接口，将Authorization Code传输给应用的服务端；             应用客户端与应用服务端的交互安全需要应用自行保证。    import { rcp } from '@kit.RemoteCommunicationKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { util } from '@kit.ArkTS';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\n// 客户端请求接口示例代码\nexport function rcpRequest(authCode: string) {\n  // 定义请求头\n  const headers: rcp.RequestHeaders = {\n    'accept': 'application/json'\n  };\n  // 定义要传递的参数\n  const postMessage: Record<string, string> = {\n    'authorizationCode': authCode\n  };\n  const securityConfig: rcp.SecurityConfiguration = {\n    tlsOptions: {\n      tlsVersion: 'TlsV1.3'\n    }\n  };\n  // 假设\"http://localhost:6687\"为应用服务器地址\n  const baseUrl = 'http://localhost:6687/account/login';\n  // 定义请求对象\n  const req = new rcp.Request(baseUrl, 'POST', headers, postMessage);\n  // 创建通信会话对象\n  const session = rcp.createSession({ requestConfiguration: { security: securityConfig } });\n  // 发起请求\n  session.fetch(req).then((response) => {\n    hilog.info(0x0000, 'getRcpResult', 'Succeeded in getting result from server.');\n    if (response.body) {\n      const decoder = util.TextDecoder.create('utf-8');\n      const result = JSON.parse(decoder.decodeToString(new Uint8Array(response.body))) as Record<string, Object>;\n      const phoneNumber: string = JSON.stringify(result['phone'] ?? '');\n      if (phoneNumber) {\n        // 应用处理相关逻辑\n      }\n    } else {\n      hilog.error(0x0000, 'getRcpResult', 'Failed to get response body.');\n    }\n  }).catch((err: BusinessError) => {\n    hilog.error(0x0000, 'getRcpResult', `err: err code is ${err.code}, err message is ${JSON.stringify(err)}`);\n  });\n}  应用服务端提供接口用于接收应用客户端获取到的Authorization Code；// 服务端接口示例代码（Java）\n@PostMapping(\"/login\")\npublic Response login(@RequestBody LoginRequestBody requestBody) throws IOException {\n  UserInfo userInfo = loginService.loginWithHuawei(requestBody.getAuthorizationCode());\n  return new Response(userInfo, 200, \"login success!\");\n} 应用服务端获取到Authorization Code之后，对接华为账号服务器，参考服务端开发，获取Access Token和Refresh Token，并调用获取用户信息接口获取用户信息； 根据获取的UnionID、OpenID、完整手机号，判断登录用户是否为新用户、是否已关联等等（根据实际业务开发）； 保存或更新用户信息到应用服务器，并可根据登录设计方案选择是否保存Refresh Token；完成处理后，返回登录用户的信息至应用客户端；/* \n * 服务端接口示例代码（Java）\n * 服务端使用Authorization Code获取Access Token，获取用户信息的示例代码\n*/\npublic UserInfo loginWithHuawei(String authorizationCode) {\n  AccessTokenRequestBody requestBody = new AccessTokenRequestBody();\n  requestBody.setClient_id(agcProperties.getClientId());\n  requestBody.setClient_secret(agcProperties.getClientSecret());\n  requestBody.setGrant_type(\"authorization_code\");\n  requestBody.setCode(authorizationCode);\n  /* \n    * 若使用refresh_token获取Access Token，则传refresh_code、grant_type设为\"refresh_token\"。\n    * requestBody.setRefresh_token(\"******\");\n  */\n  log.info(\"account rest api requestBody is : \" + requestBody.toString());\n\n  // 使用authCode获取Access Token\n  TokenEntity response = httpService.callHttpPost(\"https://oauth-login.cloud.huawei.com/oauth2/v3/token\", requestBody, TokenEntity.class).getBody();\n  log.info(\"the output of oauth2/v3/token Access_token is: \" + response.toString());\n\n  // 使用Access Token获取用户信息\n  AccountInfoRequestBody accountInfoBody = new AccountInfoRequestBody();\n  accountInfoBody.setAccess_token(response.getAccess_token());\n  accountInfoBody.setGetNickName(\"1\");\n  AccountInfoEntity accountInfo = httpService.callHttpPost(\"https://account.cloud.huawei.com/rest.php?nsp_svc=GOpen.User.getInfo\", accountInfoBody, AccountInfoEntity.class).getBody();\n  log.info(\"the output of rest.php?nsp_svc=GOpen.User.getInfo is: \" + accountInfo.toString());\n\n  // 组装用户信息，用于接口返回数据到客户端\n  UserInfo userInfo = new UserInfo();\n  userInfo.setPhone(accountInfo.getLoginMobileNumber());\n  /**\n   * 根据业务设计流程，在数据库中查询用户信息，比如：\n   * 1、使用UnionID查询用户，匹配到了则返回用户信息；\n   * 2、未匹配到则使用手机号查询用户，查到了则将华为账号UnionID关联到该用户，返回用户信息；\n   * 3、UnionID和手机号均没有匹配到，则进入注册流程\n   *\n   * （可选）保存Refresh Token\n   * 由于Access Token的有效期仅为60分钟，当Access Token失效或者即将失效时（可通过REST API错误码判断），\n   * 可以使用Refresh Token（有效期180天）通过获取凭证Access Token向华为账号服务器请求获取新的Access Token。\n   */\n  return userInfo;\n}  
[h2]客户端与服务端联调
前提：根据应用登录方案设计及实现，完成客户端和服务端开发，开发指导参见客户端开发、服务端开发和应用客户端到应用服务端的开发。
 在客户端获取到Authorization Code之后，传送给服务端接口；在服务端使用Authorization Code获取Access Token，再用Access Token获取华为账号绑定的手机号、UnionID、OpenID。 根据应用登录方案使用华为账号绑定的手机号、UnionID、OpenID登录成功后，应用服务器返回用户信息给应用客户端，应用客户端可根据需要进行本地持久化存储，例如：登录状态、用户账号名、手机号、用户唯一标识等。 在应用客户端首页或个人信息页等位置，对当前登录用户信息进行展示，举例如下图： 
开发后验证
[h2]集成华为账号一键登录能力应用用户体验质量建议
应用完成开发后，可参照以下标准检查集成华为账号一键登录后的用户体验是否符合预期：
标准编号
标准项名称
类型
标准详细描述
1
满足华为账号提供登录设计规范
规则
需满足华为账号开放登录中【华为账号一键登录】按钮规范，保障HarmonyOS应用拥有简单易用、高效一致、快速安全的登录体验；
2
用户交互体验原则
建议
（1）登录页面的用户协议与隐私协议、华为账号用户认证协议可展示、可点击；
（2）当用户点击协议后，回退页面，须回到点击前的页面；
（3）只有用户勾选并同意所有协议后，才可继续进行登录操作，若用户未勾选协议时直接点击华为账号登录按钮，须有明确的同意协议提醒；
（4）点击登录按钮须直接完成登录流程，可出现头像、昵称授权页，但取消场景须不影响登录流程；若出现处理异常，须及时终止页面，不应出现应用卡死无法操作；
3
登录页面内容用户体验原则
建议
（1）若未提供其他登录方式，不应显示“其他登录方式”的入口；
（2）若使用华为账号一键登录，页面匿名手机号须展示从华为账号侧获取的匿名手机号，不应展示其他来源的手机号；
（3）用户协议中，必须包含《华为账号用户认证协议》，且协议必须可点击、可加载，加载后支持回退页面，且回到点击前的页面；
4
异常处理用户体验原则
建议
登录页面需进行异常处理保证：
（1）若登录异常（如网络异常、海外账号不支持等情况），勿将错误码等原始信息直接透传给用户；
（2）若登录时触发了华为侧的短信验证码校验，则在校验成功之后，应用不应再展示额外的验证码验证页面；
5
应用生命周期变化的华为账号用户体验原则
建议
应用更新后，其登录状态须与更新前一致；
