动画
动画分为静态动画和连续动画。
静态动画
静态动画的核心是transform样式，主要可以实现以下三种变换类型，一次样式设置只能实现一种类型变换。
 translate：沿水平或垂直方向将指定组件移动所需距离。 scale：横向或纵向将指定组件缩小或放大到所需比例。 rotate：将指定组件沿横轴或纵轴或中心点旋转指定的角度。 
具体的使用示例如下，更多信息请参考组件方法。
<!-- xxx.hml -->\n<div class=\"container\">\n  <text class=\"translate\">hello</text>\n  <text class=\"rotate\">hello</text>\n  <text class=\"scale\">hello</text>\n</div>
/* xxx.css */\n.container {\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n}\n.translate {\n  height: 150px;\n  width: 300px;\n  margin: 50px;\n  font-size: 50px;\n  background-color: #008000;\n  transform: translate(200px);\n}\n.rotate {\n  height: 150px;\n  width: 300px;\n  margin: 50px;\n  font-size: 50px;\n  background-color: #008000;\n  transform-origin: 200px 100px;\n  transform: rotate(45deg);\n}\n.scale {\n  height: 150px;\n  width: 300px;\n  margin: 50px;\n  font-size: 50px;\n  background-color: #008000;\n  transform: scaleX(1.5);\n}
图1 静态动画效果图
连续动画
静态动画只有开始状态和结束状态，没有中间状态，如果需要设置中间的过渡状态和转换效果，需要使用连续动画实现。
连续动画的核心是animation样式，它定义了动画的开始状态、结束状态以及时间和速度的变化曲线。通过animation样式可以实现的效果有：
 animation-name：设置动画执行后应用到组件上的背景颜色、透明度、宽高和变换类型。 animation-delay和animation-duration：分别设置动画执行后元素延迟和持续的时间。 animation-timing-function：描述动画执行的速度曲线，使动画更加平滑。 animation-iteration-count：定义动画播放的次数。 animation-fill-mode：指定动画执行结束后是否恢复初始状态。 
animation样式需要在css文件中先定义keyframe，在keyframe中设置动画的过渡效果，并通过一个样式类型在hml文件中调用。animation-name的使用示例如下：
<!-- xxx.hml -->\n<div class=\"item-container\">\n    <div class=\"item {{colorParam}}\">\n        <text class=\"txt\">color</text>\n    </div>\n    <div class=\"item {{opacityParam}}\">\n        <text class=\"txt\">opacity</text>\n    </div>\n    <input class=\"button\" type=\"button\" name=\"\" value=\"show\" onclick=\"showAnimation\"/>\n</div>
/* xxx.css */\n.item-container {\n  margin: 60px;\n  flex-direction: column;\n}\n.item {\n  width: 80%;\n  background-color: #f76160;\n}\n.txt {\n  text-align: center;\n  width: 200px;\n  height: 100px;\n}\n.button {\n  width: 200px;\n  margin: 10px;\n  font-size: 30px;\n  background-color: #09ba07;\n}\n.color {\n  animation-name: Color;\n  animation-duration: 8000ms;\n}\n.opacity {\n  animation-name: Opacity;\n  animation-duration: 8000ms;\n}\n@keyframes Color {\n  from {\n    background-color: #f76160;\n  }\n  to {\n    background-color: #09ba07;\n  }\n}\n@keyframes Opacity {\n  from {\n    opacity: 0.9;\n  }\n  to {\n    opacity: 0.1;\n  }\n}
// xxx.js\nexport default {\n  data: {\n    colorParam: '',\n    opacityParam: '',\n  },\n  showAnimation: function () {\n    this.colorParam = '';\n    this.opacityParam = '';\n    this.colorParam = 'color';\n    this.opacityParam = 'opacity';\n  }\n}
图2 连续动画效果图
