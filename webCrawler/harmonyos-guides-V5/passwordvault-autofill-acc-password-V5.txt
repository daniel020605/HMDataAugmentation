账号密码填充
密码保险箱可以在登录或修改密码时，自动填充已保存的用户名和密码。
触发条件及注意事项：
已设置锁屏密码并且开启密码保险箱自动保存和填入账号和密码开关。界面中必须同时存在type为InputType.USER_NAME（表示用户名输入框）和InputType.Password（表示普通密码输入框）的TextInput输入框组件。具体类型请参考输入框类型说明。 TextInput组件的enableAutoFill属性的值为true（默认true）。密码保险箱中已保存过当前应用的用户名和密码。用户在界面中首次点击用户名输入框或密码输入框时触发自动填充弹窗。
登录
示例代码如下：
import router from '@ohos.router';\n\n@Entry\n@Component\nstruct LoginPage {\n  @State ReserveAccount: string = '';\n  @State ReservePassword: string = '';\n  private length: number = 0;\n\n  onBackPress() {\n    router.back();\n    return true;\n  }\n\n  build() {\n    Column() {\n      Text(\"账户登录\")\n        .fontSize(24)\n        .fontColor('#000000')\n        .fontWeight(FontWeight.Medium)\n        .textAlign(TextAlign.Start)\n        .width('100%')\n        .margin({ top: 18 })\n\n      TextInput({ placeholder: '用户名' })\n        .opacity(0.6)\n        .type(InputType.USER_NAME)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .margin({ top: 32, bottom: 8 })\n        .onChange((value: string) => {\n          this.ReserveAccount = value;\n          this.length = value.length;\n        })\n        .caretPosition(this.length)\n\n      TextInput({ placeholder: '密码' })\n        .type(InputType.Password)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .opacity(0.6)\n        .showPasswordIcon(true)\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .onChange((value: string) => {\n          this.ReservePassword = value;\n        })\n        .margin({ bottom: 36 })\n\n      Button('登录', { type: ButtonType.Capsule, stateEffect: false })\n        .borderRadius(20)\n        .width('100%')\n        .height(40)\n        .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\n        .onClick(() => {\n          router.pushUrl({\n            url: 'pages/Index', //此处pages/Index为跳转界面地址，请自行修改\n            params: {\n              src: '账户登录'\n            }\n          }, (err) => {\n            if (err) {\n              console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n              return;\n            }\n            console.info('Invoke pushUrl succeeded.');\n          })\n        })\n    }\n    .padding({ left: 24, right: 24 })\n    .height('100%')\n    .width('100%')\n  }\n}
修改密码
示例代码如下：
import router from '@ohos.router';\n\n@Entry\n@Component\nstruct RegisterPage {\n  @State ReserveAccount: string = '';\n  @State ReservePassword: string = '';\n  @State enAbleAutoFill: boolean = true;\n  private length: number = 0;\n\n  onBackPress() {\n    this.enAbleAutoFill = false;\n    router.back();\n    return true;\n  }\n\n  aboutToAppear() {\n  }\n\n  build() {\n    Column() {\n      Text('修改密码')\n        .fontSize(24)\n        .fontColor('#000000')\n        .fontWeight(FontWeight.Medium)\n        .textAlign(TextAlign.Center)\n        .width('100%')\n        .margin({ top: 18})\n\n      TextInput({ placeholder: '用户名' })\n        .opacity(0.6)\n        .type(InputType.USER_NAME)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .margin({ top: 32, bottom: 8 })\n        .onChange((value: string) => {\n          this.ReserveAccount = value;\n          this.length = value.length;\n        })\n        .caretPosition(this.length)\n\n      TextInput({ placeholder: '密码' })\n        .type(InputType.Password)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .opacity(0.6)\n        .showPasswordIcon(true)\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .onChange((value: string) => {\n          this.ReservePassword = value;\n        })\n        .margin({ bottom: 12 })\n\n      TextInput({ placeholder: '新密码' })\n        .enableAutoFill(this.enAbleAutoFill)\n        .type(InputType.NEW_PASSWORD)\n        .passwordRules('begin:[lower],special:[yes],len:[maxlen:32,minlen:12]')\n        .placeholderColor(0x182431)\n        .width('100%')\n        .opacity(0.6)\n        .showPasswordIcon(true)\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .onChange((value: string) => {\n          this.ReservePassword = value;\n        })\n        .margin({ bottom: 36 })\n\n      Button('页面跳转', { type: ButtonType.Capsule, stateEffect: false })\n        .borderRadius(20)\n        .width('80%')\n        .height(40)\n        .margin({ top: 24 })\n        .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\n        .onClick(() => {\n          router.pushUrl({\n            url: 'pages/Index', //此处pages/Index为跳转界面地址，请自行修改\n            params: {\n              src: '修改密码'\n            }\n          }, (err) => {\n            if (err) {\n              console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n              return;\n            }\n          })\n        })\n\n      Button('页面跳转(跳转前关闭autofill）', { type: ButtonType.Capsule, stateEffect: false })\n        .borderRadius(20)\n        .width('80%')\n        .height(40)\n        .margin({ top: 24 })\n        .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\n        .onClick(() => {\n          this.enAbleAutoFill = false;\n          router.pushUrl({\n            url: 'pages/Index', //此处pages/Index为跳转界面地址，请自行修改\n            params: {\n              src: '修改密码'\n            }\n          }, (err) => {\n            if (err) {\n              console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n              return;\n            }\n          })\n        })\n    }\n  }\n}
