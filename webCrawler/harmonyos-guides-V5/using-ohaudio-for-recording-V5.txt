使用OHAudio开发音频录制功能(C/C++)
OHAudio是系统在API version 10中引入的一套C API，此API在设计上实现归一，同时支持普通音频通路和低时延通路。仅支持PCM格式，适用于依赖Native层实现音频输入功能的场景。
OHAudio音频频录状态变化示意图：
使用入门
开发者要使用OHAudio提供的录制能力，需要添加对应的头文件。
[h2]在 CMake 脚本中链接动态库
target_link_libraries(sample PUBLIC libohaudio.so)
[h2]添加头文件
开发者通过引入<native_audiostreambuilder.h>和<native_audiocapturer.h>头文件，使用音频录制相关API。
#include <ohaudio/native_audiocapturer.h>\n#include <ohaudio/native_audiostreambuilder.h>
音频流构造器
OHAudio提供OH_AudioStreamBuilder接口，遵循构造器设计模式，用于构建音频流。开发者需要根据业务场景，指定对应的OH_AudioStream_Type 。
OH_AudioStream_Type包含两种类型：
 AUDIOSTREAM_TYPE_RENDERER AUDIOSTREAM_TYPE_CAPTURER 
使用OH_AudioStreamBuilder_Create创建构造器示例：
OH_AudioStreamBuilder* builder;\nOH_AudioStreamBuilder_Create(&builder, streamType);
在音频业务结束之后，开发者应该执行OH_AudioStreamBuilder_Destroy接口来销毁构造器。
OH_AudioStreamBuilder_Destroy(builder);
开发步骤及注意事项
详细的API说明请参考OHAudio API参考。
开发者可以通过以下几个步骤来实现一个简单的录制功能。
 创建构造器 OH_AudioStreamBuilder* builder;\nOH_AudioStreamBuilder_Create(&builder, AUDIOSTREAM_TYPE_CAPTURER); 配置音频流参数 创建音频录制构造器后，可以设置音频流所需要的参数，可以参考下面的案例。 // 设置音频采样率\nOH_AudioStreamBuilder_SetSamplingRate(builder, 48000);\n// 设置音频声道\nOH_AudioStreamBuilder_SetChannelCount(builder, 2);\n// 设置音频采样格式\nOH_AudioStreamBuilder_SetSampleFormat(builder, AUDIOSTREAM_SAMPLE_S16LE);\n// 设置音频流的编码类型\nOH_AudioStreamBuilder_SetEncodingType(builder, AUDIOSTREAM_ENCODING_TYPE_RAW);\n// 设置输入音频流的工作场景\nOH_AudioStreamBuilder_SetCapturerInfo(builder, AUDIOSTREAM_SOURCE_TYPE_MIC); 同样，音频录制的音频数据要通过回调接口读入，开发者要实现回调接口，使用OH_AudioStreamBuilder_SetCapturerCallback设置回调函数。回调函数的声明请查看OH_AudioCapturer_Callbacks 。 设置音频回调函数 多音频并发处理可参考文档处理音频焦点事件，仅接口语言差异。 // 自定义读入数据函数\nint32_t MyOnReadData(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    void* buffer,\n    int32_t length)\n{\n    // 从buffer中取出length长度的录音数据\n    return 0;\n}\n// 自定义音频流事件函数\nint32_t MyOnStreamEvent(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    OH_AudioStream_Event event)\n{\n    // 根据event表示的音频流事件信息，更新播放器状态和界面\n    return 0;\n}\n// 自定义音频中断事件函数\nint32_t MyOnInterruptEvent(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    OH_AudioInterrupt_ForceType type,\n    OH_AudioInterrupt_Hint hint)\n{\n    // 根据type和hint表示的音频中断信息，更新录制器状态和界面\n    return 0;\n}\n// 自定义异常回调函数\nint32_t MyOnError(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    OH_AudioStream_Result error)\n{\n    // 根据error表示的音频异常信息，做出相应的处理\n    return 0;\n}\n\nOH_AudioCapturer_Callbacks callbacks;\n\n// 配置回调函数\ncallbacks.OH_AudioCapturer_OnReadData = MyOnReadData;\ncallbacks.OH_AudioCapturer_OnStreamEvent = MyOnStreamEvent;\ncallbacks.OH_AudioCapturer_OnInterruptEvent = MyOnInterruptEvent;\ncallbacks.OH_AudioCapturer_OnError = MyOnError;\n\n// 设置音频输入流的回调\nOH_AudioStreamBuilder_SetCapturerCallback(builder, callbacks, nullptr); 为了避免不可预期的行为，在设置音频回调函数时，可以通过下面两种方式中的任意一种来设置音频回调函数：  请确保OH_AudioCapturer_Callbacks的每一个回调都被自定义的回调方法或空指针初始化。 // 自定义读入数据函数\nint32_t MyOnReadData(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    void* buffer,\n    int32_t length)\n{\n    // 从buffer中取出length长度的录音数据\n    return 0;\n}\n// 自定义音频中断事件函数\nint32_t MyOnInterruptEvent(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    OH_AudioInterrupt_ForceType type,\n    OH_AudioInterrupt_Hint hint)\n{\n    // 根据type和hint表示的音频中断信息，更新录制器状态和界面\n    return 0;\n}\nOH_AudioCapturer_Callbacks callbacks;\n\n// 配置回调函数，如果需要监听，则赋值\ncallbacks.OH_AudioCapturer_OnReadData = MyOnReadData;\ncallbacks.OH_AudioCapturer_OnInterruptEvent = MyOnInterruptEvent;\n\n// （必选）如果不需要监听，使用空指针初始化\ncallbacks.OH_AudioCapturer_OnStreamEvent = nullptr;\ncallbacks.OH_AudioCapturer_OnError = nullptr; 使用前，初始化并清零结构体。 // 自定义读入数据函数\nint32_t MyOnReadData(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    void* buffer,\n    int32_t length)\n{\n    // 从buffer中取出length长度的录音数据\n    return 0;\n}\n// 自定义音频中断事件函数\nint32_t MyOnInterruptEvent(\n    OH_AudioCapturer* capturer,\n    void* userData,\n    OH_AudioInterrupt_ForceType type,\n    OH_AudioInterrupt_Hint hint)\n{\n    // 根据type和hint表示的音频中断信息，更新录制器状态和界面\n    return 0;\n}\nOH_AudioCapturer_Callbacks callbacks;\n\n// 使用前，初始化并清零结构体\nmemset(&callbacks, 0, sizeof(OH_AudioCapturer_Callbacks));\n\n// 配置需要的回调函数\ncallbacks.OH_AudioCapturer_OnReadData = MyOnReadData;\ncallbacks.OH_AudioCapturer_OnInterruptEvent = MyOnInterruptEvent;  构造录制音频流 OH_AudioCapturer* audioCapturer;\nOH_AudioStreamBuilder_GenerateCapturer(builder, &audioCapturer); 使用音频流 录制音频流包含下面接口，用来实现对音频流的控制。     接口 说明    OH_AudioStream_Result OH_AudioCapturer_Start(OH_AudioCapturer* capturer) 开始录制   OH_AudioStream_Result OH_AudioCapturer_Pause(OH_AudioCapturer* capturer) 暂停录制   OH_AudioStream_Result OH_AudioCapturer_Stop(OH_AudioCapturer* capturer) 停止录制   OH_AudioStream_Result OH_AudioCapturer_Flush(OH_AudioCapturer* capturer) 释放缓存数据   OH_AudioStream_Result OH_AudioCapturer_Release(OH_AudioCapturer* capturer) 释放录制实例    释放构造器 构造器不再使用时，需要释放相关资源。 OH_AudioStreamBuilder_Destroy(builder); 
设置低时延模式
当设备支持低时延通路时，开发者可以使用低时延模式创建音频录制构造器，获得更高质量的音频体验。
开发流程与普通录制场景一致，仅需要在创建音频录制构造器时，调用OH_AudioStreamBuilder_SetLatencyMode()设置低时延模式。
当音频录制场景OH_AudioStream_SourceType为AUDIOSTREAM_SOURCE_TYPE_VOICE_COMMUNICATION时，不支持主动设置低时延模式，系统会根据设备的能力，决策输出的音频通路。
开发示例
OH_AudioStream_LatencyMode latencyMode = AUDIOSTREAM_LATENCY_MODE_FAST;\nOH_AudioStreamBuilder_SetLatencyMode(builder, latencyMode);
示例代码
 音频低时延录制与播放 
