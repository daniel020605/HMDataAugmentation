@typescript-eslint/no-confusing-non-null-assertion
不允许在可能产生混淆的位置使用非空断言。
在赋值或者等于旁边使用非空断言（!）会产生混淆，看起来类似于不等于，不建议这种写法。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/no-confusing-non-null-assertion\": \"error\"\n  }\n}
选项
该规则无需配置额外选项。
正例
interface Foo {\n  bar?: string;\n  num?: number;\n}\n\nfunction getFoo(): Foo {\n  return {\n    bar: 'bar',\n    num: Number.MAX_VALUE\n  };\n}\nconst foo: Foo = getFoo();\nexport const isEqualsBar = foo.bar === 'hello';
反例
interface Foo {\n  bar?: string;\n  num?: number;\n}\n\nfunction getFoo(): Foo {\n  return {\n    bar: 'bar',\n    num: Number.MAX_VALUE\n  };\n}\nconst foo: Foo = getFoo();\n// 可能会产生混淆，误以为是不等于\nexport const isEqualsBar = foo.bar! === 'hello';\n// 可能会产生混淆，误以为是不等于\nconst num = 2;\nexport const isEqualsNum = num + foo.num! === num;
规则集
plugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
