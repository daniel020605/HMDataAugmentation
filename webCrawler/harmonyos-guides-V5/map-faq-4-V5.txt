手势卡顿或者不生效
现象描述
地图页面操作手势卡顿或者不生效。
可能原因
手势遮盖或者手势冲突。手势遮盖：地图组件的上层存在没有做手势穿透的组件。手势冲突：以Swiper容器组件中使用地图组件为例，Swiper容器组件和地图组件手势会存在冲突。 主线程阻塞。应用主线程处理大批量逻辑时，存在主线程阻塞，此时进行地图手势操作，手势应答会变慢甚至手势响应失败。 
处理步骤
手势遮盖或者手势冲突。手势遮盖：参考触摸测试控制做手势穿透。手势冲突：以Swiper容器组件和地图组件手势存在冲突为例，解决方案参考如下代码：import { AsyncCallback, BusinessError } from '@kit.BasicServicesKit';\nimport { map, mapCommon, MapComponent } from '@kit.MapKit';\n\nclass MyDataSource implements IDataSource {\n  private list: number[] = [];\n\n  constructor(list: number[]) {\n    this.list = list;\n  }\n\n  totalCount(): number {\n    return this.list.length;\n  }\n\n  getData(index: number): number {\n    return this.list[index];\n  }\n\n  registerDataChangeListener(listener: DataChangeListener): void {\n  }\n\n  unregisterDataChangeListener(listener: DataChangeListener): void {\n  }\n}\n\n@Entry\n@Component\nstruct SwiperExample {\n  private swiperController: SwiperController = new SwiperController();\n  private data: MyDataSource = new MyDataSource([]);\n  private mapOptions?: mapCommon.MapOptions;\n  private callback?: AsyncCallback<map.MapComponentController>;\n  private mapController?: map.MapComponentController;\n  private mapEventManager?: map.MapEventManager;\n  @State mapPositionX: number = 0;\n  @State mapPositionY: number = 0;\n  @State mapHeight: number = 0;\n  @State mapWidth: number = 0;\n  @State index: number = 0;\n\n  // 判断坐标是否在地图矩形内\n  isMap(event: TouchEvent) {\n    if (event.changedTouches[0].displayX > this.mapPositionX\n      && event.changedTouches[0].displayX < this.mapPositionX + this.mapWidth\n      && event.changedTouches[0].displayY > this.mapPositionY\n      && event.changedTouches[0].displayY < this.mapPositionY + this.mapHeight) {\n      return true;\n    }\n    return false;\n  }\n\n  aboutToAppear(): void {\n    let list: number[] = [];\n    for (let i = 1; i <= 10; i++) {\n      list.push(i);\n    }\n    this.data = new MyDataSource(list);\n\n    this.mapOptions = {\n      position: {\n        target: {\n          latitude: 31.98441025,\n          longitude: 118.766253\n        },\n        zoom: 10,\n        tilt: 10,\n        bearing: 90\n      },\n      scaleControlsEnabled: true\n    }\n\n    this.callback = async (err, mapController) => {\n      if (!err) {\n        this.mapController = mapController;\n        this.mapEventManager = this.mapController.getEventManager();\n        let callback = () => {\n          console.info(`on-mapLoad`);\n        };\n        this.mapEventManager.on(\"mapLoad\", callback);\n      }\n    }\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      Swiper(this.swiperController) {\n        LazyForEach(this.data, (item: string) => {\n          if (item == \"3\") {\n            Column() {\n              Text(item.toString())\n                .width('90%')\n                .height(160)\n                .backgroundColor(0xAFEEEE)\n                .textAlign(TextAlign.Center)\n                .fontSize(30)\n              MapComponent({ mapOptions: this.mapOptions, mapCallback: this.callback })\n                // 获取MapComponent的位置和长宽\n                .width('100%')\n                .height('65%')\n                .onAreaChange((_oldValue: Area, newValue: Area) => {\n                  try {\n                    if (newValue.globalPosition.x !== undefined && newValue.globalPosition.y !== undefined) {\n                      this.mapPositionX = Number(newValue.globalPosition.x);\n                      this.mapPositionY = Number(newValue.globalPosition.y);\n                      this.mapHeight = Number(newValue.height);\n                      this.mapWidth = Number(newValue.width);\n                    }\n                  } catch (error) {\n                    let e: BusinessError = error as BusinessError;\n                    console.log(\"onAreaChange error code:\" + e.code + \"message:\" + e.message);\n                  }\n                })\n            }.height(\"100%\")\n          } else {\n            Text(item.toString())\n              .width('90%')\n              .height(160)\n              .backgroundColor(0xAFEEEE)\n              .textAlign(TextAlign.Center)\n              .fontSize(30)\n          }\n        }, (item: string) => item)\n      }\n      // 手势判断 当index为存在地图页面且点击在地图矩形内时为HitTestMode.None（不响应Swiper手势，响应子组件手势）\n      .onTouchIntercept((event: TouchEvent) => {\n        if (this.index === 2 && this.isMap(event)) {\n          return HitTestMode.None;\n        }\n        return HitTestMode.Transparent;\n      })\n      .cachedCount(2)\n      .index(1)\n      .loop(true)\n      .itemSpace(0)\n      // 设置圆点导航点样式\n      .indicator(\n        new DotIndicator()\n          .itemWidth(15)\n          .itemHeight(15)\n          .selectedItemWidth(15)\n          .selectedItemHeight(15)\n          .color(Color.Gray)\n          .selectedColor(Color.Blue))\n      .displayArrow({\n        // 设置导航点箭头样式\n        showBackground: true,\n        isSidebarMiddle: true,\n        backgroundSize: 24,\n        backgroundColor: Color.White,\n        arrowSize: 18,\n        arrowColor: Color.Blue\n      }, false)\n      .curve(Curve.Linear)\n      .onChange((index: number) => {\n        this.index = index;\n      })\n      .onGestureSwipe((index: number, extraInfo: SwiperAnimationEvent) => {\n        console.info(\"index: \" + index);\n        console.info(\"current offset: \" + extraInfo.currentOffset);\n      })\n\n      Row({ space: 12 }) {\n        Button('showNext')\n          .onClick(() => {\n            this.swiperController.showNext();\n          })\n        Button('showPrevious')\n          .onClick(() => {\n            this.swiperController.showPrevious();\n          })\n      }.margin(5)\n    }.width('100%')\n    .margin({ top: 5 })\n  }\n}  主线程阻塞。请分析应用的业务逻辑，将复杂逻辑放到子线程中处理。 
