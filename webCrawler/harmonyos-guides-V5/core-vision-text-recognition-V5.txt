通用文字识别
适用场景
通用文字识别，是通过拍照、扫描等光学输入方式，将各种票据、卡证、表格、报刊、书籍等印刷品文字转化为图像信息，再利用文字识别技术将图像信息转化为计算机等设备可以使用的字符信息的技术。
 可以对文档翻拍、街景翻拍等图片进行文字检测和识别，也可以集成于其他应用中，提供文字检测、识别的功能，并根据识别结果提供翻译、搜索等相关服务。 可以处理来自相机、图库等多种来源的图像数据，提供一个自动检测文本、识别图像中文本位置以及文本内容功能的开放能力。 支持特定角度范围内的文本倾斜、拍摄角度倾斜、复杂光照条件以及复杂文本背景等场景的文字识别。 
约束与限制
该能力当前不支持模拟器。
开发步骤
 在使用通用文字识别时，将实现文字识别的相关的类添加至工程。import { textRecognition } from '@kit.CoreVisionKit';  简单配置页面的布局，并在Button组件添加点击事件，拉起图库，选择图片。Button('选择图片')\n  .type(ButtonType.Capsule)\n  .fontColor(Color.White)\n  .alignSelf(ItemAlign.Center)\n  .width('80%')\n  .margin(10)\n  .onClick(() => {\n    // 拉起图库，获取图片资源\n    this.selectImage();\n  })  通过图库获取图片资源，将图片转换为PixelMap，并添加初始化和释放方法。async aboutToAppear(): Promise<void> {\n  const initResult = await textRecognition.init();\n  hilog.info(0x0000, 'OCRDemo', `OCR service initialization result:${initResult}`);\n}\n\nasync aboutToDisappear(): Promise<void> {\n  await textRecognition.release();\n  hilog.info(0x0000, 'OCRDemo', 'OCR service released successfully');\n}\n\nprivate async selectImage() {\n  let uri = await this.openPhoto();\n  if (uri === undefined) {\n    hilog.error(0x0000, 'OCRDemo', \"Failed to get uri.\");\n    return;\n  }\n  this.loadImage(uri);\n}\n\nprivate openPhoto(): Promise<string> {\n  return new Promise<string>((resolve) => {\n    let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n    photoPicker.select({\n      MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\n      maxSelectNumber: 1\n    }).then((res: photoAccessHelper.PhotoSelectResult) => {\n      resolve(res.photoUris[0]);\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, 'OCRDemo', `Failed to get photo image uri. code：${err.code}，message：${err.message}`);\n      resolve('');\n    })\n  })\n}\n\nprivate loadImage(name: string) {\n  setTimeout(async () => {\n    let imageSource: image.ImageSource | undefined = undefined;\n    let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\n    imageSource = image.createImageSource(fileSource.fd);\n    this.chooseImage = await imageSource.createPixelMap();\n  }, 100)\n}  实例化VisionInfo对象，并传入待检测图片的PixelMap。         VisionInfo为待OCR检测识别的入参项，目前仅支持PixelMap类型的视觉信息。        let visionInfo: textRecognition.VisionInfo = {\n  pixelMap: this.chooseImage\n};   配置通用文本识别的配置项TextRecognitionConfiguration，用于配置是否支持朝向检测。let textConfiguration: textRecognition.TextRecognitionConfiguration = {\n  isDirectionDetectionSupported: false\n};  调用textRecognition的recognizeText接口，对识别到的结果进行处理。当调用成功时，获取文字识别的结果；调用失败时，将返回对应错误码。         recognizeText接口提供了三种调用形式，当前以其中一种作为示例，其他方式可参考API文档。        textRecognition.recognizeText(visionInfo, textConfiguration)\n  .then((data: textRecognition.TextRecognitionResult) => {\n    // 识别成功，获取对应的结果\n    let recognitionString = JSON.stringify(data);\n    hilog.info(0x0000, 'OCRDemo', `Succeeded in recognizing text：${recognitionString}`);\n    // 将结果更新到Text中显示\n    this.dataValues = data.value;\n  })\n  .catch((error: BusinessError) => {\n    hilog.error(0x0000, 'OCRDemo', `Failed to recognize text. Code: ${error.code}, message: ${error.message}`);\n    this.dataValues = `Error: ${error.message}`;\n  });   
开发实例
import { textRecognition } from '@kit.CoreVisionKit'\nimport { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo } from '@kit.CoreFileKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\n\n@Entry\n@Component\nstruct Index {\n  private imageSource: image.ImageSource | undefined = undefined;\n  @State chooseImage: PixelMap | undefined = undefined;\n  @State dataValues: string = '';\n\n  async aboutToAppear(): Promise<void> {\n    const initResult = await textRecognition.init();\n    hilog.info(0x0000, 'OCRDemo', `OCR service initialization result:${initResult}`);\n  }\n\n  async aboutToDisappear(): Promise<void> {\n    await textRecognition.release();\n    hilog.info(0x0000, 'OCRDemo', 'OCR service released successfully');\n  }\n\n  build() {\n    Column() {\n      Image(this.chooseImage)\n        .objectFit(ImageFit.Fill)\n        .height('60%')\n\n      Text(this.dataValues)\n        .copyOption(CopyOptions.LocalDevice)\n        .height('15%')\n        .margin(10)\n        .width('60%')\n\n      Button('选择图片')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          // 拉起图库，获取图片资源\n          this.selectImage();\n        })\n\n      Button('开始识别')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(async () => {\n          this.textRecognitionTest();\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  private textRecognitionTest() {\n    if (!this.chooseImage) {\n      return;\n    }\n    // 调用文本识别接口\n    let visionInfo: textRecognition.VisionInfo = {\n      pixelMap: this.chooseImage\n    };\n    let textConfiguration: textRecognition.TextRecognitionConfiguration = {\n      isDirectionDetectionSupported: false\n    };\n    textRecognition.recognizeText(visionInfo, textConfiguration)\n      .then((data: textRecognition.TextRecognitionResult) => {\n        // 识别成功，获取对应的结果\n        let recognitionString = JSON.stringify(data);\n        hilog.info(0x0000, 'OCRDemo', `Succeeded in recognizing text：${recognitionString}`);\n        // 将结果更新到Text中显示\n        this.dataValues = data.value;\n      })\n      .catch((error: BusinessError) => {\n        hilog.error(0x0000, 'OCRDemo', `Failed to recognize text. Code: ${error.code}, message: ${error.message}`);\n        this.dataValues = `Error: ${error.message}`;\n      });\n  }\n\n  private async selectImage() {\n    let uri = await this.openPhoto();\n    if (uri === undefined) {\n      hilog.error(0x0000, 'OCRDemo', \"Failed to get uri.\");\n      return;\n    }\n    this.loadImage(uri);\n  }\n\n  private openPhoto(): Promise<string> {\n    return new Promise<string>((resolve) => {\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n      photoPicker.select({\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE,\n        maxSelectNumber: 1\n      }).then((res: photoAccessHelper.PhotoSelectResult) => {\n        resolve(res.photoUris[0]);\n      }).catch((err: BusinessError) => {\n        hilog.error(0x0000, 'OCRDemo', `Failed to get photo image uri. Code：${err.code}，message：${err.message}`);\n        resolve('');\n      })\n    })\n  }\n\n  private loadImage(name: string) {\n    setTimeout(async () => {\n      let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\n      this.imageSource = image.createImageSource(fileSource.fd);\n      this.chooseImage = await this.imageSource.createPixelMap();\n    }, 100)\n  }\n}
