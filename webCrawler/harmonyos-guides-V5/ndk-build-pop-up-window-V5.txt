构建弹窗
通过弹窗控制器显示自定义弹窗，可以设置自定义弹窗的样式和内容。
弹窗接口集合定义在结构体里，命名为ArkUI_NativeDialogAPI_x （x表示版本），这些接口围绕弹窗控制器实现各种弹窗控制。
创建和销毁弹窗控制器
 创建弹窗控制器 ArkUI_NativeDialogHandle表示指向弹窗控制器的指针，可以通过调用ArkUI_NativeDialogAPI_x 的create接口创建一个弹窗控制器。 该方法返回ArkUI_NativeDialogHandle类型的数据。 ArkUI_NativeDialogAPI_1 *dialogAPI = reinterpret_cast<ArkUI_NativeDialogAPI_1 *>(\n    OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_DIALOG, \"ArkUI_NativeDialogAPI_1\"));\nauto dialogController = dialogAPI->create(); 销毁弹窗控制器 当不再需要弹窗操作时，需要主动调用dispose接口销毁弹窗控制器对象。 ArkUI_NativeDialogAPI_1 *dialogAPI = reinterpret_cast<ArkUI_NativeDialogAPI_1 *>(\n    OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_DIALOG, \"ArkUI_NativeDialogAPI_1\"));\ndialogAPI->dispose(dialogController); 
设置弹窗样式
可以设置弹窗对齐方式、偏移量，弹窗背板圆角弧度、背景色、蒙层颜色以及区域等。
 创建弹窗内容节点。 ArkUI_NodeHandle CreateDialogContent() {\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \"ArkUI_NativeNodeAPI_1\"));\n    ArkUI_NodeHandle text = nodeAPI->createNode(ARKUI_NODE_TEXT);\n    ArkUI_NumberValue textWidthValue[] = {{.f32 = 300}};\n    ArkUI_AttributeItem textWidthItem = {.value = textWidthValue,\n                                         .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(text, NODE_WIDTH, &textWidthItem);\n    ArkUI_NumberValue textHeightValue[] = {{.f32 = 300}};\n    ArkUI_AttributeItem textHeightItem = {.value = textHeightValue,\n                                          .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(text, NODE_HEIGHT, &textHeightItem);\n    ArkUI_NodeHandle span = nodeAPI->createNode(ARKUI_NODE_SPAN);\n    ArkUI_AttributeItem spanItem = {.string = \"这是一个弹窗\"};\n    nodeAPI->setAttribute(span, NODE_SPAN_CONTENT, &spanItem);\n    ArkUI_NodeHandle imageSpan = nodeAPI->createNode(ARKUI_NODE_IMAGE_SPAN);\n    ArkUI_AttributeItem imageSpanItem = {.string = \"/pages/common/sky.jpg\"};\n    nodeAPI->setAttribute(imageSpan, NODE_IMAGE_SPAN_SRC, &imageSpanItem);\n    ArkUI_NumberValue imageSpanWidthValue[] = {{.f32 = 300}};\n    ArkUI_AttributeItem imageSpanWidthItem = {.value = imageSpanWidthValue,\n                                              .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(imageSpan, NODE_WIDTH, &imageSpanWidthItem);\n    ArkUI_NumberValue imageSpanHeightValue[] = {{.f32 = 200}};\n    ArkUI_AttributeItem imageSpanHeightItem = {.value = imageSpanHeightValue,\n                                               .size = sizeof(textWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(imageSpan, NODE_HEIGHT, &imageSpanHeightItem);\n    nodeAPI->addChild(text, span);\n    nodeAPI->addChild(text, imageSpan);\n    return text;\n} 通过controller控制弹窗样式。弹窗接口清单和描述可查看native_dialog.h。 void ShowDialog() {\n    ArkUI_NativeDialogAPI_1 *dialogAPI = reinterpret_cast<ArkUI_NativeDialogAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_DIALOG, \"ArkUI_NativeDialogAPI_1\"));\n    if (!dialogController) {\n        dialogController = dialogAPI->create();\n    }\n    auto contentNode = CreateDialogContent();\n    dialogAPI->setContent(dialogController, contentNode);\n    dialogAPI->setContentAlignment(dialogController, static_cast<int32_t>(ARKUI_ALIGNMENT_BOTTOM), 0, 0);\n    dialogAPI->setBackgroundColor(dialogController, 0xffffffff);\n    dialogAPI->setCornerRadius(dialogController, 6, 6, 6, 6);\n    dialogAPI->setModalMode(dialogController, false);\n    dialogAPI->setAutoCancel(dialogController, true);\n    dialogAPI->show(dialogController, false);\n} 不需要弹窗时关闭弹窗。 void CloseDialog() {\n    ArkUI_NativeDialogAPI_1 *dialogAPI = reinterpret_cast<ArkUI_NativeDialogAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_DIALOG, \"ArkUI_NativeDialogAPI_1\"));\n    dialogAPI->close(dialogController);\n} 
弹窗的交互
可创建交互页面，打开或关闭弹窗。
 创建一个可交互的界面，点击Button之后可以弹窗。其中 ArkUI_NodeContentHandle 类型节点的获取与使用可参考接入ArkTS页面。 constexpr int32_t BUTTON_CLICK_ID = 1;\nbool isShown = false;\nArkUI_NativeDialogHandle dialogController;\nArkUI_NodeHandle buttonNode;\n\nvoid MainViewMethod(ArkUI_NodeContentHandle handle) {\n    ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \"ArkUI_NativeNodeAPI_1\"));\n    ArkUI_NodeHandle column = nodeAPI->createNode(ARKUI_NODE_COLUMN);\n    ArkUI_NumberValue widthValue[] = {{.f32 = 300}};\n    ArkUI_AttributeItem widthItem = {.value = widthValue, .size = sizeof(widthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(column, NODE_WIDTH, &widthItem);\n    ArkUI_NumberValue heightValue[] = {{.f32 = 300}};\n    ArkUI_AttributeItem heightItem = {.value = heightValue, .size = sizeof(heightValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(column, NODE_HEIGHT, &heightItem);\n    \n    buttonNode = nodeAPI->createNode(ARKUI_NODE_BUTTON);\n    ArkUI_NumberValue buttonWidthValue[] = {{.f32 = 200}};\n    ArkUI_AttributeItem buttonWidthItem = {.value = buttonWidthValue,\n                                           .size = sizeof(buttonWidthValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(buttonNode, NODE_WIDTH, &buttonWidthItem);\n    ArkUI_NumberValue buttonHeightValue[] = {{.f32 = 50}};\n    ArkUI_AttributeItem buttonHeightItem = {.value = buttonHeightValue,\n                                            .size = sizeof(buttonHeightValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(buttonNode, NODE_HEIGHT, &buttonHeightItem);\n    ArkUI_AttributeItem labelItem = {.string = \"点击弹窗\"};\n    nodeAPI->setAttribute(buttonNode, NODE_BUTTON_LABEL, &labelItem);\n    ArkUI_NumberValue buttonTypeValue[] = {{.i32 = static_cast<int32_t>(ARKUI_BUTTON_TYPE_NORMAL)}};\n    ArkUI_AttributeItem buttonTypeItem = {.value = buttonTypeValue,\n                                          .size = sizeof(buttonTypeValue) / sizeof(ArkUI_NumberValue)};\n    nodeAPI->setAttribute(buttonNode, NODE_BUTTON_TYPE, &buttonTypeItem);\n    nodeAPI->registerNodeEvent(buttonNode, NODE_ON_CLICK, BUTTON_CLICK_ID, nullptr);\n    nodeAPI->addNodeEventReceiver(buttonNode, OnButtonClicked);\n    nodeAPI->addChild(column, buttonNode);\n    OH_ArkUI_NodeContent_AddNode(handle, column);\n} 创建Button事件的回调函数，当Button点击时触发弹窗显示或关闭。 void OnButtonClicked(ArkUI_NodeEvent *event) {\n    if (!event || !buttonNode) {\n        return;\n    }\n    auto eventId = OH_ArkUI_NodeEvent_GetTargetId(event);\n    if (eventId == BUTTON_CLICK_ID) {\n        ArkUI_NativeNodeAPI_1 *nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\n            OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \"ArkUI_NativeNodeAPI_1\"));\n        if (isShown) {\n            isShown = false;\n            ArkUI_AttributeItem labelItem = {.string = \"显示弹窗\"};\n            nodeAPI->setAttribute(buttonNode, NODE_BUTTON_LABEL, &labelItem);\n            CloseDialog();\n        } else {\n            isShown = true;\n            ArkUI_AttributeItem labelItem = {.string = \"关闭弹窗\"};\n            nodeAPI->setAttribute(buttonNode, NODE_BUTTON_LABEL, &labelItem);\n            ShowDialog();\n        }\n    }\n}  
