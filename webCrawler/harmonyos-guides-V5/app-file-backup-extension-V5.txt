应用接入数据备份恢复
应用接入数据备份恢复需要通过BackupExtensionAbility实现。
BackupExtensionAbility，是Stage模型中扩展组件ExtensionAbility的派生类。开发者可以通过修改配置文件定制备份恢复框架的行为，包括是否允许备份恢复，备份哪些文件等。
接口说明
备份恢复扩展能力API的接口使用指导请参见BackupExtensionAbility API参考和BackupExtensionContext API参考。
约束与限制
 当备份恢复时，所有待备份文件及目录的路径不得超过4095字节，否则将导致未定义行为。 当备份目录时，应用进程必须拥有读取该目录及其所有子目录的权限（DAC中的r），否则将导致备份失败。 当备份文件时，应用进程必须拥有搜索该文件所有祖父级目录的权限（DAC中的x），否则将导致备份失败。 当备份恢复时，所有待备份恢复的文件及目录不支持相对路径(../)和软链接。 
开发步骤
 在应用配置文件module.json5中注册extensionAbilities相关配置 新增\"extensionAbilities\"字段，其中注册类型\"type\"设置为\"backup\"，元数据信息\"metadata\"新增一个\"name\"为\"ohos. extension. backup\"的条目。 BackupExtensionAbility配置文件示例： {\n    \"extensionAbilities\": [\n        {\n            \"description\": \"$string:ServiceExtAbility\",\n            \"icon\": \"$media:icon\",\n            \"name\": \"BackupExtensionAbility\",\n            \"type\": \"backup\",\n            \"exported\": false,\n            \"metadata\": [\n                {\n                    \"name\": \"ohos.extension.backup\",\n                    \"resource\": \"$profile:backup_config\"\n                }\n            ],\n            // 在BackupExtension.ets文件里自定义继承BackupExtensionAbility，重写其中的onBackup/onBackupEx和\n            // onRestore/onRestoreEx方法，推荐使用onBackupEx/onRestoreEx。\n            // 如果没有特殊要求可以空实现，则备份恢复服务会按照统一的备份恢复数据规则进行备份恢复。\n            \"srcEntry\": \"./ets/BackupExtension/BackupExtension.ets\", \n        }      \n    ]\n} 新增元数据资源配置文件 在元数据资源配置文件中，定义备份恢复时需要传输的文件。元数据资源配置文件名称需要与module.json5中\"metadata.resource\"例如\"backup_config.json\"名称保持一致，其保存位置在工程的resources/base/profile文件夹下。 元数据资源配置文件示例： {\n    \"allowToBackupRestore\": true,\n    \"includes\": [\n        \"/data/storage/el2/base/files/users/\"\n    ],\n    \"excludes\": [\n        \"/data/storage/el2/base/files/users/hidden/\"\n    ],\n    \"fullBackupOnly\": false,\n    \"restoreDeps\": \"\"\n} 开发者可以在BackupExtension.ets文件中自定义类继承的BackupExtensionAbility，通过重写其onBackup/onBackupEx和onRestore/onRestoreEx方法，使其达到在备份预加工应用数据或者在恢复阶段加工待恢复文件。 如果没有特殊要求可以空实现，则备份恢复服务会按照统一的备份恢复数据规则进行备份恢复。 下面的示例展示了一个空实现的BackupExtension.ets文件： //onBackup && onRestore\nimport { BackupExtensionAbility, BundleVersion } from '@kit.CoreFileKit';\nimport {hilog} from '@kit.PerformanceAnalysisKit';\n\nconst TAG = `FileBackupExtensionAbility`;\nexport default class BackupExtension extends  BackupExtensionAbility {\n  //onBackup\n  async onBackup ()   {\n    hilog.info(0x0000, TAG, `onBackup ok`);\n  }\n  //onRestore\n  async onRestore (bundleVersion : BundleVersion) {\n    hilog.info(0x0000, TAG, `onRestore ok ${JSON.stringify(bundleVersion)}`);\n    hilog.info(0x0000, TAG, `onRestore end`);\n  }\n} //onBackupEx && onRestoreEx\nimport { BackupExtensionAbility, BundleVersion } from '@kit.CoreFileKit';\n\ninterface ErrorInfo {\n  type: string,\n  errorCode: number,\n  errorInfo: string\n}\n\nclass BackupExt extends BackupExtensionAbility {\n  //onBackupEx\n  async onBackupEx(backupInfo: string): Promise<string> {\n    console.log(`onBackupEx ok`);\n    let errorInfo: ErrorInfo = {\n      type: \"ErrorInfo\",\n      errorCode: 0,\n      errorInfo: \"app diy error info\"       \n    }\n    return JSON.stringify(errorInfo);\n  }\n\n  // onRestoreEx\n  async onRestoreEx(bundleVersion : BundleVersion, restoreInfo: string): Promise<string> {\n    console.log(`onRestoreEx ok ${JSON.stringify(bundleVersion)}`);\n    let errorInfo: ErrorInfo = {\n      type: \"ErrorInfo\",\n      errorCode: 0,\n      errorInfo: \"app diy error info\"\n    }\n    return JSON.stringify(errorInfo);\n  }\n} 
[h2]元数据资源配置文件说明
应用沙箱中需要备份的文件和目录。
当模式串以非/开始时，表示一个相对于根路径的相对路径。
includes支持的路径清单列表如下述代码段内容所示，当配置includes时请确保配置路径范围包含在其中。
当includes已配置时，备份恢复框架会采用开发者配置的模式串，否则将会采用下述代码段内容作为默认值。
includes中无需备份的例外项。格式同includes。
在配置excludes时，请确保其范围在includes的子集中。
当excludes已配置时，备份恢复框架会采用开发者配置的模式串，否则将会采用空数组作为默认值。
1、有关fullBackupOnly字段的说明
 当fullBackupOnly为false时，恢复数据会以 / 为根目录解压数据，同路径下的同名文件会被覆盖。 当fullBackupOnly为true时，恢复数据会以临时目录为根目录解压数据，开发者需要在OnRestore/OnRestoreEx内自行实现恢复数据的逻辑，进行最终的恢复。 
开发者可根据自身的业务场景，选择对应的恢复数据方式。
示例：
假设应用的数据备份路径为：data/storage/el2/base/files/A/ 。那么在恢复时，如果配置了fullBackupOnly为false，数据会被直接解压到：**/data/storage/el2/base/files/A/**目录下，如果配置了fullBackupOnly为true，数据则会被解压到：临时路径backupDir + /restore/data/storage/el2/base/files/A/ 目录下。
includes支持的路径清单列表如下：
{\n    \"includes\": [\n    \"data/storage/el1/database/\",\n    \"data/storage/el1/base/files/\",\n    \"data/storage/el1/base/preferences/\",\n    \"data/storage/el1/base/haps/*/files/\",\n    \"data/storage/el1/base/haps/*/preferences/\",\n    \"data/storage/el2/database/\",\n    \"data/storage/el2/base/files/\",\n    \"data/storage/el2/base/preferences/\",\n    \"data/storage/el2/base/haps/*/files/\",\n    \"data/storage/el2/base/haps/*/preferences/\",\n    \"data/storage/el2/distributedfiles/\",\n    \"data/storage/el5/database/\",\n    \"data/storage/el5/base/files/\",\n    \"data/storage/el5/base/preferences/\",\n    \"data/storage/el5/base/haps/*/files/\",\n    \"data/storage/el5/base/haps/*/preferences/\"\n    ]\n}
