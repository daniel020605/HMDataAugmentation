module对象内部结构
module对象包含HAP的配置信息。
表1 module对象内部结构说明
标识应用自身的颜色模式，目前支持如下三种模式：
- dark：表示按照深色模式选取资源。
- light：表示按照浅色模式选取资源。
- auto：表示跟随系统的颜色模式值选取资源。
注：该字段仅对预置应用生效。
用于区分同应用不同hap下的so文件，以防止so冲突。
- true：当前hap的so会储存在libs目录中以Module名命名的路径下。
- false：当前hap的so会直接储存在libs目录中。
module示例：
{\n  \"module\": {\n    \"mainAbility\": \".EntryAbility\",\n    \"deviceType\": [\n      \"default\",\n      \"tablet\"\n    ],\n    \"abilities\": [\n      {\n        \"skills\": [\n          {\n            \"entities\": [\n              \"entity.system.home\"\n            ],\n            \"actions\": [\n              \"action.system.home\"\n            ]\n          }\n        ],\n        \"orientation\": \"unspecified\",\n        \"visible\": true,\n        \"srcPath\": \"EntryAbility\",\n        \"name\": \".EntryAbility\",\n        \"srcLanguage\": \"ets\",\n        \"icon\": \"$media:icon\",\n        \"description\": \"$string:MainAbility_desc\",\n        \"formsEnabled\": false,\n        \"label\": \"$string:MainAbility_label\",\n        \"type\": \"page\",\n        \"launchType\": \"multiton\"\n      }\n    ],\n    \"distro\": {\n      \"moduleType\": \"entry\",\n      \"installationFree\": false,\n      \"deliveryWithInstall\": true,\n      \"moduleName\": \"entry\"\n    },\n    \"package\": \"com.example.entry\",\n    \"srcPath\": \"\",\n    \"name\": \".entry\",\n    \"js\": [\n      {\n        \"mode\": {\n          \"syntax\": \"ets\",\n          \"type\": \"pageAbility\"\n        },\n        \"pages\": [\n          \"pages/Index\"\n        ],\n        \"name\": \".EntryAbility\",\n        \"window\": {\n          \"designWidth\": 720,\n          \"autoDesignWidth\": false\n        }\n      }\n    ]\n  }\n}
distro对象内部结构
表2 distro对象内部结构说明
distro示例：
\"distro\": {\n  \"moduleName\": \"ohos_entry\",\n  \"moduleType\": \"entry\",\n  \"installationFree\": true,\n  \"deliveryWithInstall\": true\n}
metadata对象内部结构
表3 metadata对象内部结构说明
parameters对象内部结构
表4 parameters对象内部结构说明
results对象内部结构
表5 results对象内部结构说明
customizeData对象的内部结构
表6 customizeData对象的内部结构说明
metadata对象示例：
\"metaData\": {\n  \"parameters\" : [{\n    \"name\" : \"a test for metadata parameter\",\n    \"type\" : \"Float\",\n    // \"$string:parameters_description\"为文件资源索引值\n    \"description\" : \"$string:parameters_description\"\n  }],\n  \"results\" : [{\n    \"name\" : \"a test for metadata result\",\n    \"type\" : \"Float\",\n    \"description\" : \"$string:results_description\"\n  }],\n  \"customizeData\" : [{\n    \"name\" : \"a customizeData\",\n    \"value\" : \"string\",\n    \"extra\" : \"$string:customizeData_description\"\n  }]\n}
deviceType标签
表7 deviceType标签配置说明
abilities对象的内部结构
表8 abilities对象的内部结构说明
标识Ability名称。取值可采用反向域名方式表示，由包名和类名组成，如\"com.example.myapplication.EntryAbility\"；也可采用\".\"开头的类名方式表示，如\".EntryAbility\"。
Ability的名称，需在一个应用的范围内保证唯一。说明：在使用DevEco Studio新建项目时，默认生成首个Ability的配置，即\"config.json\"中\"EntryAbility\"的配置。如使用其他IDE工具，可自定义名称。该标签最大长度为127个字节。
标识Ability图标资源文件的索引。取值示例：$media:ability_icon。如果在该Ability的skills属性中，actions的取值包含 \"action.system.home\"，entities取值中包含\"entity.system.home\"，则该Ability的icon将同时作为应用的icon。如果存在多个符合条件的Ability，则取位置靠前的Ability的icon作为应用的icon。
说明：应用的\"icon\"和\"label\"是用户可感知配置项，需要区别于当前所有已有的应用\"icon\"或\"label\"（至少有一个不同）。
标识Ability对用户显示的名称。取值是对该名称的资源索引，支持多语言，例：$string:ability_label。如果在该Ability的skills属性中，actions的取值包含 \"action.system.home\"，entities取值中包含\"entity.system.home\"，则该Ability的label将同时作为应用的label。如果存在多个符合条件的Ability，则取位置靠前的Ability的label作为应用的label。
说明： 应用的\"icon\"和\"label\"是用户可感知配置项，需要区别于当前所有已有的应用\"icon\"或\"label\"（至少有一个不同）。该标签为资源文件中定义的字符串的引用，或以\"{}\"包括的字符串。该标签最大长度为255个字节。
标识Ability的启动模式，支持\"multiton\"和\"singleton\"两种模式：
multiton：表示该Ability可以有多实例。该模式适用于大多数应用场景。
singleton：表示该Ability在所有任务栈中仅可以有一个实例。例如，具有全局唯一性的呼叫来电界面即采用\"singleton\"模式。该标签仅适用于默认设备、平板、智慧屏、车机、智能穿戴。
标识Ability是否可以被其他应用调用。
true：可以被其他应用调用。
false：不能被其他应用调用，包括无法被aa工具命令拉起应用。
标识Ability的类型。取值范围如下：
page：表示基于Page模板开发的FA，用于提供与用户交互的能力。
service：表示基于Service模板开发的PA，用于提供后台运行任务的能力。
data：表示基于Data模板开发的PA，用于对外部提供统一的数据访问对象。
CA：表示支持其他应用以窗口方式调起该Ability。
标识该Ability的显示模式。该标签仅适用于page类型的Ability。取值范围如下：
unspecified：由系统自动判断显示方向。
landscape：横屏模式。
portrait：竖屏模式。
followRecent：跟随栈中最近的应用。
标识后台服务的类型，可以为一个服务配置多个后台服务类型。该标签仅适用于service类型的Ability。取值范围如下：
dataTransfer：通过网络/对端设备进行数据下载、备份、分享、传输等。
audioPlayback：音频播放。
audioRecording：录音。
pictureInPicture：画中画、小窗口播放视频。
voip：音视频电话、VOIP。
location：定位、导航。
bluetoothInteraction：蓝牙扫描、连接、传输。
wifiInteraction：Wi-Fi扫描、连接、传输。
screenFetch：录屏、截屏。
multiDeviceConnection：多设备互联。
标识Ability关注的系统配置集合。当已关注的配置发生变更后，Ability会收到onConfigurationUpdated回调。取值范围：
mcc：表示IMSI移动设备国家/地区代码（MCC）发生变更。典型场景：检测到SIM并更新MCC。
mnc：IMSI移动设备网络代码（MNC）发生变更。典型场景：检测到SIM并更新MNC。
locale：表示语言区域发生变更。典型场景：用户已为设备文本的文本显示选择新的语言类型。
layout：表示屏幕布局发生变更。典型场景：当前有不同的显示形态都处于活跃状态。
fontSize：表示字号发生变更。典型场景：用户已设置新的全局字号。
orientation：表示屏幕方向发生变更。典型场景：用户旋转设备。
density：表示显示密度发生变更。典型场景：用户可能指定不同的显示比例，或当前有不同的显示形态同时处于活跃状态。
size：显示窗口大小发生变更。
smallestSize：显示窗口较短边的边长发生变更。
colorMode：颜色模式发生变更。
标识Ability是否支持卡片（forms）功能。该标签仅适用于page类型的Ability。
true：支持卡片能力。
false：不支持卡片能力。
不允许应用隐藏入口图标
系统对无图标应用实施严格管控，防止一些恶意应用故意配置无入口图标，导致用户找不到软件所在的位置，无法操作卸载应用，在一定程度上保证用户终端设备的安全。
入口图标的设置: 需要在配置文件（config.json）中abilities配置下设置icon，label以及skills，而且skills的配置下必须同时包含“ohos.want.action.home” 和 “entity.system.home”。
{\n  \"module\":{\n\n    ...\n\n    \"abilities\": [{\n      \"icon\": \"$media:icon\",\n      \"label\": \"Login\",\n      \"skills\": [{\n        \"actions\": [\"ohos.want.action.home\"],\n        \"entities\": [\"entity.system.home\"],\n        \"uris\": []\n      }]\n    }],\n\n    ...\n\n  }\n}
如果应用确需隐藏入口图标，需要配置AllowAppDesktopIconHide应用特权。详细的入口图标及入口标签的显示规则如下。
 HAP中包含Page类型的PageAbility        配置文件（config.json）中abilities配置中设置了入口图标          该应用没有隐藏图标的特权            系统将使用该PageAbility配置的icon作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到该PageAbility首页。 系统将使用该PageAbility配置的label作为入口标签，并显示在桌面上（如果没有配置label，返回包名）。  该应用具有隐藏图标的特权            桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。   配置文件（config.json）中abilities配置中未设置入口图标          该应用没有隐藏图标的特权            系统将使用系统默认图标作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到应用管理中对应的应用详情页面（参考下图）。 系统将使用应用的包名作为入口标签，并显示在桌面上。  该应用具有隐藏图标的特权            桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。    HAP中不包含Page类型的PageAbility        该应用没有隐藏图标的特权          系统将使用系统默认图标作为入口图标，并显示在桌面上。用户点击该图标，页面跳转到应用管理中对应的应用详情页面（参考下图）。 系统将使用应用的包名作为入口标签，并显示在桌面上。  该应用具有隐藏图标的特权          桌面查询时不返回应用信息，不会在桌面上显示对应的入口图标和标签。   
图1 应用的详情页示意图
注：应用详情页面中显示的label可能与桌面上显示的不同。如果非Page类型的PageAbility配置了入口图标和label，那么详情页中显示的即为配置的。
uriPermission对象的内部结构
表9 uriPermission对象的内部结构说明
abilities示例：
\"abilities\": [\n  {\n    \"name\": \".EntryAbility\",\n    \"description\": \"test main ability\",\n    // $media:ic_launcher 为媒体类资源\n    \"icon\": \"$media:ic_launcher\",\n    // $string:example 为字符串类资源\n    \"label\": \"$string:example\",\n    \"launchType\": \"multiton\",\n    \"orientation\": \"unspecified\",\n    \"permissions\": [],\n    \"visible\": true,\n    \"skills\": [\n      {\n        \"actions\": [\n          \"action.system.home\"\n        ],\n        \"entities\": [\n          \"entity.system.home\"\n        ]\n      }\n    ],\n    \"configChanges\": [\n      \"locale\",\n      \"layout\",\n      \"fontSize\",\n      \"orientation\"\n    ],\n    \"type\": \"page\",\n    \"startWindowIcon\": \"$media:icon\",\n    \"startWindowBackground\": \"$color:red\",\n    \"removeMissionAfterTerminate\": true\n  },\n  {\n    \"name\": \".PlayService\",\n    \"description\": \"example play ability\",\n    \"icon\": \"$media:ic_launcher\",\n    \"label\": \"$string:example\",\n    \"launchType\": \"multiton\",\n    \"orientation\": \"unspecified\",\n    \"visible\": false,\n    \"skills\": [\n      {\n        \"actions\": [\n          \"action.play.music\",\n          \"action.stop.music\"\n        ],\n        \"entities\": [\n          \"entity.audio\"\n        ]\n      }\n    ],\n    \"type\": \"service\",\n    \"backgroundModes\": [\n      \"audioPlayback\"\n    ]\n  },\n  {\n    \"name\": \".UserADataAbility\",\n    \"type\": \"data\",\n    \"uri\": \"dataability://com.example.world.test.UserADataAbility\",\n    \"visible\": true\n  }\n]
skills对象的内部结构
表10 skills对象的内部结构说明
该标签标识向want过滤器添加数据规范集合。该规范可以是只有数据类型（mimeType属性），可以是只有URI，也可以是既有数据类型又有URI。
URI由其各个部分的单独属性指定：<scheme>://<host>:<port>[<path>|<pathStartWith>|<pathRegex>]。该标签可缺省，缺省值为空。
其中，scheme字段配置为uri时必配；当只设置数据类型（mimeType）时，则scheme字段为非必配项。
uris对象的内部结构
表11 uris对象的内部结构说明
标识uri的type值。type为MIME-TYPE属性，为资源的媒体类型，常见的类型有\"audio/aac\"，\"text/css\"等。
注意：只支持*/*、mainType/*的通配符格式，不支持mainType/subType.*的通配符格式，mainType为标准媒体类型。
skills示例：
\"skills\": [\n  {\n    \"actions\": [\n      \"action.system.home\"\n    ],\n    \"entities\": [\n      \"entity.system.home\"\n    ],\n    \"uris\": [\n      {\n        \"scheme\": \"http\",\n        \"host\": \"www.example.com\",\n        \"port\": \"8080\",\n        \"path\": \"query/student/name\",\n        \"type\": \"text/*\"\n      }\n    ]\n  }\n]
reqPermissions权限申请
表12 reqPermissions权限申请字段说明
描述权限使用的场景和时机。场景类型如下两种：
- ability：ability的名称，可配置多个。
- when：调用时机，可填的值有inuse（使用时）、always（始终）。
可缺省，缺省值为空。
when可缺省，缺省值为\"inuse\"
usedScene对象内部结构
表13 usedScene对象内部结构说明
标识此权限的使用时间：
inuse: 使用时需要此权限。
always: 所有时间都需要此权限。
js对象的内部结构
表14 js对象的内部结构说明
标识JS应用的类型。取值范围如下：
normal：标识该JS Component为应用实例。
form：标识该JS Component为卡片实例。
window对象的内部结构
表15 window对象的内部结构说明
mode对象的内部结构
表16 mode对象的内部结构说明
js示例：
\"js\": [\n  {\n    \"name\": \".EntryAbility\",\n    \"pages\": [\n      \"pages/index\",\n      \"pages/detail/detail\"\n    ],\n    \"window\": {\n      \"designWidth\": 720,\n      \"autoDesignWidth\": false\n    },\n    \"type\": \"form\",\n    \"mode\": {\n      \"syntax\": \"ets\",\n      \"type\": \"pageAbility\"\n    }\n  }\n]
shortcuts对象的内部结构
表17 shortcuts对象的内部结构说明
intents对象的内部结构
表18 intents对象的内部结构说明
shortcuts示例：
\"shortcuts\": [\n  {\n    \"shortcutId\": \"id\",\n    // $string:shortcut 为配置的字符串资源值\n    \"label\": \"$string:shortcut\",\n    \"intents\": [\n      {\n        \"targetBundle\": \"com.example.world.test\",\n        \"targetClass\": \"com.example.world.test.entry.EntryAbility\"\n      }\n    ]\n  }\n]
forms对象的内部结构
表19 forms对象的内部结构说明
标识该卡片是否为默认卡片，每个Ability有且只有一个默认卡片。
true：默认卡片。
false：非默认卡片。
标识卡片的类型。取值范围如下：
JS：JS卡片。
Java：Java卡片。
标识卡片的主题样式，取值范围如下：
auto：自适应。
dark：深色主题。
light：浅色主题。
标识卡片支持的外观规格，取值范围：
1 * 2：表示1行2列的二宫格。
2 * 1：表示2行1列的二宫格。
2 * 2：表示2行2列的四宫格。
2 * 4：表示2行4列的八宫格。
4 * 4：表示4行4列的十六宫格。
标识卡片是否支持周期性刷新，取值范围：
true：表示支持周期性刷新，可以在定时刷新（updateDuration）和定点刷新（scheduledUpdateTime）两种方式任选其一，优先选择定时刷新。
false：表示不支持周期性刷新。
标识卡片定时刷新的更新周期，单位为30分钟，取值为自然数。
当取值为0时，表示该参数不生效。
当取值为正整数N时，表示刷新周期为30*N分钟。
标识是否允许卡片使用卡片可见性通知。
true：允许。
false：不允许。
customizeData对象内部结构
表20 customizeData对象内部结构说明
forms示例：
\"forms\": [\n  {\n    \"name\": \"Form_Js\",\n    \"description\": \"It's Js Form\",\n    \"type\": \"JS\",\n    \"jsComponentName\": \"card\",\n    \"colorMode\": \"auto\",\n    \"isDefault\": true,\n    \"updateEnabled\": true,\n    \"scheduledUpdateTime\": \"11:00\",\n    \"updateDuration\": 1,\n    \"defaultDimension\": \"2*2\",\n    \"supportDimensions\": [\n      \"2*2\",\n      \"2*4\",\n      \"4*4\"\n    ]\n  },\n  {\n    \"name\": \"Form_Js\",\n    \"description\": \"It's JS Form\",\n    \"type\": \"Js\",\n    \"colorMode\": \"auto\",\n    \"isDefault\": false,\n    \"updateEnabled\": true,\n    \"scheduledUpdateTime\": \"21:05\",\n    \"updateDuration\": 1,\n    \"defaultDimension\": \"1*2\",\n    \"supportDimensions\": [\n      \"1*2\"\n    ],\n    \"landscapeLayouts\": [\n      \"$layout:ability_form\"\n    ],\n    \"portraitLayouts\": [\n      \"$layout:ability_form\"\n    ],\n    \"formConfigAbility\": \"ability://com.example.myapplication.fa/.EntryAbility\",\n    \"metaData\": {\n      \"customizeData\": [\n        {\n          \"name\": \"originWidgetName\",\n          \"value\": \"com.example.weather.testWidget\"\n        }\n      ]\n    }\n  }\n]
distroFilter对象的内部结构
表21 distroFilter对象的内部结构说明
apiVersion对象的内部结构
表22 apiVersion对象的内部结构说明
标识该子属性取值规则。配置为“exclude”或“include”。
- exclude：表示需要排除的value属性。
- include：表示需要包含的value属性。
screenShape对象的内部结构
表23 screenShape对象的内部结构说明
标识该子属性取值规则。配置为“exclude”或“include”。
- exclude：表示需要排除的value属性。
- include：表示需要包含的value属性。
screenWindow对象的内部结构
表24 screenWindow对象的内部结构说明
标识该子属性取值规则。配置为“exclude”或“include”。
- exclude：表示需要排除的value属性。
- include：表示需要包含的value属性。
screenDensity对象的内部结构
表25 screenDensity对象的内部结构说明
标识该子属性取值规则。配置为“exclude”或“include”。
- exclude：表示需要排除的value属性。
- include：表示需要包含的value属性。
取值范围如下：
sdpi：表示小规模的屏幕密度（Small-scale Dots Per Inch），适用于dpi取值为（0,120]的设备。
mdpi：表示中规模的屏幕密度(Medium-scale Dots Per Inch)，适用于dpi取值为（120,160]的设备。
ldpi：表示大规模的屏幕密度(Large-scale Dots Per Inch)，适用于dpi取值为（160,240]的设备。
xldpi：表示特大规模的屏幕密度(Extra Large-scale Dots Per Inch)，适用于dpi取值为（240,320]的设备。
xxldpi：表示超大规模的屏幕密度(Extra Extra Large-scale Dots Per Inch)，适用于dpi取值为（320,480]的设备。
xxxldpi：表示超特大规模的屏幕密度(Extra Extra Extra Large-scale Dots Per Inch)，适用于dpi取值为（480,640]的设备。
countryCode对象的内部结构
表26 countryCode对象的内部结构说明
标识该子属性取值规则。配置为“exclude”或“include”。
- exclude：表示需要排除的value属性。
- include：表示需要包含的value属性。
distroFilter示例：
\"distroFilter\":  {\n  \"apiVersion\": {\n    \"policy\": \"include\",\n    \"value\": [4,5]\n  },\n  \"screenShape\": {\n    \"policy\": \"include\",\n    \"value\": [\"circle\",\"rect\"]\n  },\n  \"screenWindow\": {\n    \"policy\": \"include\",\n    \"value\": [\"454*454\",\"466*466\"]\n  },\n  \"screenDensity\":{\n    \"policy\": \"exclude\",\n    \"value\": [\"ldpi\",\"xldpi\"]\n  },\n  \"countryCode\": {\n    \"policy\":\"include\",\n    \"value\":[\"CN\",\"HK\"]\n  }\n}
commonEvents对象的内部结构
表27 commonEvents对象的内部结构说明
commonEvents示例：
\"commonEvents\": [\n  {\n    \"name\": \".EntryAbility\",\n    \"permission\": \"ohos.permission.GET_BUNDLE_INFO\",\n    \"data\": [\n      \"com.example.demo\",\n      \"100\"\n    ],\n    \"events\": [\n      \"install\",\n      \"update\"\n    ]\n  }\n]
testRunner对象的内部结构
表28 testRunner对象的内部结构说明
\"testRunner\": {\n  \"name\": \"myTestRunnerName\",\n  \"srcPath\": \"etc/test/TestRunner.ts\"\n}
definePermission仅支持系统应用配置，三方应用配置不生效。
definePermissions对象内部结构
表29 definePermissions对象内部结构说明
标识权限的授予方式，支持如下两种授予模式如下：
- system_grant：安装后系统自动授予该权限。
- user_grant：使用时动态申请，用户授权后才可使用。
标识权限限制类别，可选值如下：
- system_core：系统核心权限。
- system_basic：系统基础权限。
- normal：普通权限。所有应用允许申请的权限。
