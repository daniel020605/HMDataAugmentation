签名/验签(ArkTS)
当前指导共提供四种示例，供开发者参考完成签名、验签开发：
 密钥算法为ECC256、摘要算法为SHA256 密钥算法为SM2、摘要算法为SM3 密钥算法为RSA、摘要算法为SHA256、填充模式为PSS 密钥算法为RSA、摘要算法为SHA256、填充模式为PKCS1_V1_5 
具体的场景介绍及支持的算法规格，请参考签名/验签支持的算法。
开发步骤
生成密钥
 指定密钥别名。 初始化密钥属性集。 调用generateKeyItem生成密钥，具体请参考密钥生成。 
除此之外，开发者也可以参考密钥导入，导入已有的密钥。
签名
 获取密钥别名。 指定待签名的明文数据。 获取属性参数HuksOptions，包括两个字段properties和inData。 inData传入明文数据，properties传入算法参数配置。 调用initSession初始化密钥会话，并获取会话的句柄handle。 调用finishSession结束密钥会话，获取签名signature。 
验签
 获取密钥别名。 获取待验证的签名signature。 获取属性参数HuksOptions，包括两个字段properties和inData。 inData传入签名signature，properties传入算法参数配置。 调用initSession初始化密钥会话，并获取会话的句柄handle。 调用updateSession更新密钥会话。 调用finishSession结束密钥会话，验证签名。 
删除密钥
当密钥废弃不用时，需要调用deleteKeyItem删除密钥，具体请参考密钥删除。
开发案例
[h2]ECC256/SHA256
/*\n * 密钥算法为ECC256、摘要算法为SHA256\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet keyAlias = 'test_eccKeyAlias';\nlet handle: number;\nlet plaintext = '123456';\nlet signature: Uint8Array;\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetEccGenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_ECC\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nfunction GetEccSignProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_ECC\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nfunction GetEccVerifyProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_ECC\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nasync function GenerateEccKey(keyAlias: string) {\n  let genProperties = GetEccGenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  await huks.generateKeyItem(keyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate ECC Key success, data = ${JSON.stringify(data)}`);\n    }).catch((err: Error) => {\n      console.error(`promise: generate ECC Key failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function Sign(keyAlias: string, plaintext: string) {\n  let signProperties = GetEccSignProperties();\n  let options: huks.HuksOptions = {\n    properties: signProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init sign failed, error: ` + JSON.stringify(err));\n    })\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: sign success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      signature = data.outData as Uint8Array;\n    }).catch((err: Error) => {\n      console.error(`promise: sign failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function Verify(keyAlias: string, plaintext: string, signature: Uint8Array) {\n  let verifyProperties = GetEccVerifyProperties()\n  let options: huks.HuksOptions = {\n    properties: verifyProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init verify failed, error: ` + JSON.stringify(err));\n    })\n  await huks.updateSession(handle, options)\n    .then((data) => {\n      console.info(`promise: update verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((err: Error) => {\n      console.error(`promise: update verify failed, error: ` + JSON.stringify(err));\n    })\n  options.inData = signature;\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((err: Error) => {\n      console.error(`promise: verify failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function DeleteEccKey(keyAlias: string) {\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  await huks.deleteKeyItem(keyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((err: Error) => {\n      console.error(`promise: delete data failed`);\n    })\n}\n\nasync function testSignVerify() {\n  await GenerateEccKey(keyAlias);\n  await Sign(keyAlias, plaintext);\n  await Verify(keyAlias, plaintext, signature);\n  await DeleteEccKey(keyAlias);\n}
[h2]SM2/SM3
/*\n * 密钥算法为SM2、摘要算法为SM3\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet keyAlias = 'test_sm2KeyAlias';\nlet handle: number;\nlet plaintext = '123456';\nlet signature: Uint8Array;\n\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\n\nfunction GetSm2GenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_SM2\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SM3\n  }];\n  return properties;\n}\n\nfunction GetSm2SignProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_SM2\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SM3\n  }];\n  return properties;\n}\n\nfunction GetSm2VerifyProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_SM2\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SM3\n  }];\n  return properties;\n}\n\nasync function GenerateSm2Key(keyAlias: string) {\n  let genProperties = GetSm2GenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  await huks.generateKeyItem(keyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate Sm2 Key success, data = ${JSON.stringify(data)}`);\n    }).catch((err: Error) => {\n      console.error(`promise: generate Sm2 Key failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function Sign(keyAlias: string, plaintext: string) {\n  let signProperties = GetSm2SignProperties();\n  let options: huks.HuksOptions = {\n    properties: signProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init sign failed, error: ` + JSON.stringify(err));\n    })\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: sign success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      signature = data.outData as Uint8Array;\n    }).catch((err: Error) => {\n      console.error(`promise: sign failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function Verify(keyAlias: string, plaintext: string, signature: Uint8Array) {\n  let verifyProperties = GetSm2VerifyProperties()\n  let options: huks.HuksOptions = {\n    properties: verifyProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init verify failed, error: ` + JSON.stringify(err));\n    })\n  await huks.updateSession(handle, options)\n    .then((data) => {\n      console.info(`promise: update verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((err: Error) => {\n      console.error(`promise: update verify failed, error: ` + JSON.stringify(err));\n    })\n  options.inData = signature;\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((err: Error) => {\n      console.error(`promise: verify failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function DeleteSm2Key(keyAlias: string) {\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  await huks.deleteKeyItem(keyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((err: Error) => {\n      console.error(`promise: delete data failed`);\n    })\n}\n\nexport async function testSignVerify() {\n  await GenerateSm2Key(keyAlias);\n  await Sign(keyAlias, plaintext);\n  await Verify(keyAlias, plaintext, signature);\n  await DeleteSm2Key(keyAlias);\n}
[h2]RSA/SHA256/PSS
/*\n * 密钥算法为RSA，摘要算法为SHA256，填充模式为PSS\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet keyAlias = 'test_rsaKeyAlias';\nlet handle: number;\nlet plaintext = '123456';\nlet signature: Uint8Array;\n\nfunction StringToUint8Array(str: string) {\n  let arr: number[] = [];\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetRsaGenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PSS\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nfunction GetRsaSignProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PSS\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN\n  }];\n  return properties;\n}\n\nfunction GetRsaVerifyProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PSS\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  }];\n  return properties;\n}\n\nasync function GenerateRsaKey(keyAlias: string) {\n  let genProperties = GetRsaGenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  };\n  await huks.generateKeyItem(keyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate RSA Key success, data = ${JSON.stringify(data)}`);\n    }).catch((err: Error) => {\n      console.error(`promise: generate RSA Key failed, error: ` + JSON.stringify(err));\n    });\n}\n\nasync function Sign(keyAlias: string, plaintext: string) {\n  let signProperties = GetRsaSignProperties();\n  let options: huks.HuksOptions = {\n    properties: signProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init sign failed, error: ` + JSON.stringify(err));\n      return;\n    });\n\n  if (handle !== undefined) {\n    await huks.finishSession(handle, options)\n      .then((data) => {\n        console.info(`promise: sign success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n        signature = data.outData as Uint8Array;\n      }).catch((err: Error) => {\n        console.error(`promise: sign failed, error: ` + JSON.stringify(err));\n      });\n  }\n}\n\nasync function Verify(keyAlias: string, plaintext: string, signature: Uint8Array) {\n  let verifyProperties = GetRsaVerifyProperties();\n  let options: huks.HuksOptions = {\n    properties: verifyProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init verify failed, error: ` + JSON.stringify(err));\n      return;\n    });\n\n  if (handle !== undefined) {\n    await huks.updateSession(handle, options)\n      .then((data) => {\n        console.info(`promise: update verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      }).catch((err: Error) => {\n        console.error(`promise: update verify failed, error: ` + JSON.stringify(err));\n      });\n\n    options.inData = signature;\n    await huks.finishSession(handle, options)\n      .then((data) => {\n        console.info(`promise: verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      }).catch((err: Error) => {\n        console.error(`promise: verify failed, error: ` + JSON.stringify(err));\n      });\n  }\n}\n\nasync function DeleteRsaKey(keyAlias: string) {\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  await huks.deleteKeyItem(keyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((err: Error) => {\n      console.error(`promise: delete data failed`);\n    });\n}\n\nexport async function testSignVerify() {\n  await GenerateRsaKey(keyAlias);\n  await Sign(keyAlias, plaintext);\n  await Verify(keyAlias, plaintext, signature);\n  await DeleteRsaKey(keyAlias);\n}
[h2]RSA/SHA256/PKCS1_V1_5
/*\n * 密钥算法为RSA，摘要算法为SHA256，填充模式为PKCS1_V1_5\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet keyAlias = 'test_rsaKeyAlias';\nlet handle: number;\nlet plaintext = '123456';\nlet signature: Uint8Array;\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetRsaGenerateProperties() {\n  let properties: Array<huks.HuksParam> = [\n    { tag: huks.HuksTag.HUKS_TAG_ALGORITHM, value: huks.HuksKeyAlg.HUKS_ALG_RSA },\n    { tag: huks.HuksTag.HUKS_TAG_KEY_SIZE, value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048 },\n    {\n      tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n      value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN | huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n    },\n    { tag: huks.HuksTag.HUKS_TAG_PADDING, value: huks.HuksKeyPadding.HUKS_PADDING_PKCS1_V1_5 },\n    { tag: huks.HuksTag.HUKS_TAG_DIGEST, value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256 }\n  ];\n  return properties;\n}\n\nfunction GetRsaSignProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_SIGN\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PKCS1_V1_5\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nfunction GetRsaVerifyProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_VERIFY\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PKCS1_V1_5\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nasync function GenerateRsaKey(keyAlias: string) {\n  let genProperties = GetRsaGenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  await huks.generateKeyItem(keyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate RSA Key success, data = ${JSON.stringify(data)}`);\n    }).catch((err: Error) => {\n      console.error(`promise: generate RSA Key failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function Sign(keyAlias: string, plaintext: string) {\n  let signProperties = GetRsaSignProperties();\n  let options: huks.HuksOptions = {\n    properties: signProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init sign failed, error: ` + JSON.stringify(err));\n    })\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: sign success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      signature = data.outData as Uint8Array;\n    }).catch((err: Error) => {\n      console.error(`promise: sign failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function Verify(keyAlias: string, plaintext: string, signature: Uint8Array) {\n  let verifyProperties = GetRsaVerifyProperties()\n  let options: huks.HuksOptions = {\n    properties: verifyProperties,\n    inData: StringToUint8Array(plaintext)\n  }\n  await huks.initSession(keyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((err: Error) => {\n      console.error(`promise: init verify failed, error: ` + JSON.stringify(err));\n    })\n  await huks.updateSession(handle, options)\n    .then((data) => {\n      console.info(`promise: update verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((err: Error) => {\n      console.error(`promise: update verify failed, error: ` + JSON.stringify(err));\n    })\n  options.inData = signature;\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: verify success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((err: Error) => {\n      console.error(`promise: verify failed, error: ` + JSON.stringify(err));\n    })\n}\n\nasync function DeleteRsaKey(keyAlias: string) {\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  await huks.deleteKeyItem(keyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((err: Error) => {\n      console.error(`promise: delete data failed`);\n    })\n}\n\nexport async function testSignVerify() {\n  await GenerateRsaKey(keyAlias);\n  await Sign(keyAlias, plaintext);\n  await Verify(keyAlias, plaintext, signature);\n  await DeleteRsaKey(keyAlias);\n}
