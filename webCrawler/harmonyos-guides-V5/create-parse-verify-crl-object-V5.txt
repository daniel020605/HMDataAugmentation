证书吊销列表对象的创建、解析和校验
以校验证书是否已吊销为例，完成证书吊销列表对象的创建、解析和校验。若证书已被吊销，将打印被吊销日期。
开发步骤
 导入证书算法库框架模块和加解密算法库模块。 import { cert } from '@kit.DeviceCertificateKit';\nimport { cryptoFramework } from '@kit.CryptoArchitectureKit'; 基于已有的CRL数据，调用cert.createX509CRL创建X509证书吊销列表的对象。 解析证书吊销列表信息。 此处以获取证书吊销列表版本、证书吊销列表类型为例，更多字段信息获取接口请查看API参考文档。 基于已有公钥信息，创建PublicKey公钥对象。 具体可参考加解密算法库框架-指定二进制数据生成非对称密钥对。 调用X509CRL.verify校验签名合法性。 基于已有的X509证书数据，调用cert.createX509Cert创建证书对象。 调用X509CRL.isRevoked判断X509证书是否已被吊销。 调用X509CRL.getRevokedCert获取被吊销证书对象。 调用X509CRLEntry.getRevocationDate获取被吊销日期。 
import { cert } from '@kit.DeviceCertificateKit';\nimport { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { util } from '@kit.ArkTS';\n\n// CRL数据，以下只是一个示例，需要根据具体业务来赋值\nlet crlData = '-----BEGIN X509 CRL-----\\n' +\n  'MIHzMF4CAQMwDQYJKoZIhvcNAQEEBQAwFTETMBEGA1UEAxMKQ1JMIGlzc3VlchcN\\n' +\n  'MTcwODA3MTExOTU1WhcNMzIxMjE0MDA1MzIwWjAVMBMCAgPoFw0zMjEyMTQwMDUz\\n' +\n  'MjBaMA0GCSqGSIb3DQEBBAUAA4GBACEPHhlaCTWA42ykeaOyR0SGQIHIOUR3gcDH\\n' +\n  'J1LaNwiL+gDxI9rMQmlhsUGJmPIPdRs9uYyI+f854lsWYisD2PUEpn3DbEvzwYeQ\\n' +\n  '5SqQoPDoM+YfZZa23hoTLsu52toXobP74sf/9K501p/+8hm4ROMLBoRT86GQKY6g\\n' +\n  'eavsH0Q3\\n' +\n  '-----END X509 CRL-----\\n'\n\nlet certData = '-----BEGIN CERTIFICATE-----\\n' +\n  'MIIBLzCB1QIUO/QDVJwZLIpeJyPjyTvE43xvE5cwCgYIKoZIzj0EAwIwGjEYMBYG\\n' +\n  'A1UEAwwPRXhhbXBsZSBSb290IENBMB4XDTIzMDkwNDExMjAxOVoXDTI2MDUzMDEx\\n' +\n  'MjAxOVowGjEYMBYGA1UEAwwPRXhhbXBsZSBSb290IENBMFkwEwYHKoZIzj0CAQYI\\n' +\n  'KoZIzj0DAQcDQgAEHjG74yMIueO7z3T+dyuEIrhxTg2fqgeNB3SGfsIXlsiUfLTa\\n' +\n  'tUsU0i/sePnrKglj2H8Abbx9PK0tsW/VgqwDIDAKBggqhkjOPQQDAgNJADBGAiEA\\n' +\n  '0ce/fvA4tckNZeB865aOApKXKlBjiRlaiuq5mEEqvNACIQDPD9WyC21MXqPBuRUf\\n' +\n  'BetUokslUfjT6+s/X4ByaxycAA==\\n' +\n  '-----END CERTIFICATE-----\\n';\n\nlet pubKeyData = new Uint8Array([\n  0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01,\n  0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xDC, 0x4C, 0x2D,\n  0x57, 0x49, 0x3D, 0x42, 0x52, 0x1A, 0x09, 0xED, 0x3E, 0x90, 0x29, 0x51, 0xF7, 0x70, 0x15, 0xFE,\n  0x76, 0xB0, 0xDB, 0xDF, 0xA1, 0x2C, 0x6C, 0x67, 0x95, 0xDA, 0x63, 0x3D, 0x4F, 0x71, 0x48, 0x8C,\n  0x3E, 0xFA, 0x24, 0x79, 0xE9, 0xF2, 0xF2, 0x20, 0xCB, 0xF1, 0x59, 0x6B, 0xED, 0xC8, 0x72, 0x66,\n  0x6E, 0x31, 0xD4, 0xF3, 0xCE, 0x0B, 0x12, 0xC4, 0x17, 0x39, 0xB4, 0x52, 0x16, 0xD3, 0xE3, 0xC0,\n  0xF8, 0x48, 0xB3, 0xF6, 0x40, 0xD5, 0x47, 0x23, 0x30, 0x7F, 0xA7, 0xC5, 0x5A, 0x5A, 0xBB, 0x5C,\n  0x7B, 0xEF, 0x69, 0xE2, 0x74, 0x35, 0x24, 0x22, 0x25, 0x45, 0x7E, 0xFC, 0xE8, 0xC4, 0x52, 0x65,\n  0xA0, 0x4E, 0xBC, 0xFD, 0x3F, 0xD9, 0x85, 0x14, 0x8A, 0x5A, 0x93, 0x02, 0x24, 0x6C, 0x19, 0xBA,\n  0x81, 0xBE, 0x65, 0x2E, 0xCB, 0xBB, 0xE9, 0x91, 0x7B, 0x7C, 0x47, 0xC2, 0x61, 0x02, 0x03, 0x01,\n  0x00, 0x01\n]);\n\n// CRL示例\nfunction crlSample(): void {\n  let textEncoder = new util.TextEncoder();\n  let encodingBlob: cert.EncodingBlob = {\n    // 将CRL数据从string转为Unit8Array\n    data: textEncoder.encodeInto(crlData),\n    // CRL格式，仅支持PEM和DER格式。在这个例子中，CRL用的是PEM格式\n    encodingFormat: cert.EncodingFormat.FORMAT_PEM\n  };\n\n  // 创建X509CRL实例\n  cert.createX509CRL(encodingBlob, (err, x509Crl) => {\n    if (err != null) {\n      // 创建X509CRL实例失败\n      console.error(`createX509Crl failed, errCode: ${err.code}, errMsg:${err.message} `);\n      return;\n    }\n    // 创建X509CRL实例成功\n    console.log('createX509CRL success');\n\n    // 获取CRL的版本\n    let version = x509Crl.getVersion();\n    let revokedType = x509Crl.getType();\n    console.log(`X509 CRL version: ${version}, type :${revokedType}`);\n\n    // 公钥的二进制数据需要传入@ohos.security.cryptoFramework的convertKey()方法去获取公钥对象\n    try {\n      let keyGenerator = cryptoFramework.createAsyKeyGenerator('RSA1024|PRIMES_3');\n      console.log('createAsyKeyGenerator success');\n      let pubEncodingBlob: cryptoFramework.DataBlob = {\n        data: pubKeyData,\n      };\n      keyGenerator.convertKey(pubEncodingBlob, null, (e, keyPair) => {\n        if (e == null) {\n          console.log('convert key success');\n          x509Crl.verify(keyPair.pubKey, (err, data) => {\n            if (err == null) {\n              // 签名验证成功\n              console.log('verify success');\n            } else {\n              // 签名验证失败\n              console.error(`verify failed, errCode: ${err.code}, errMsg: ${err.message}`);\n            }\n          });\n        } else {\n          console.error(`convert key failed, message: ${e.message}, code: ${e.code} `);\n        }\n      })\n    } catch (error) {\n      let e: BusinessError = error as BusinessError;\n      console.error(`get pubKey failed, errCode: ${e.code}, errMsg: ${e.message}` );\n    }\n\n    // 使用certFramework的createX509Cert()方法创建一个X509Cert实例\n    let certBlob: cert.EncodingBlob = {\n      data: textEncoder.encodeInto(certData),\n      encodingFormat: cert.EncodingFormat.FORMAT_PEM\n    };\n    let revokedFlag = true;\n    let serial:bigint = BigInt('0');\n    cert.createX509Cert(certBlob, (err, cert) => {\n      serial = cert.getCertSerialNumber();\n      if (err == null) {\n        try {\n          // 检查证书是否被吊销\n          revokedFlag = x509Crl.isRevoked(cert);\n          console.log(`revokedFlag is: ${revokedFlag}`);\n        } catch (error) {\n          let e: BusinessError = error as BusinessError;\n          console.error(`isRevoked failed, errCode: ${e.code}, errMsg:${e.message}`);\n        }\n      } else {\n        console.error(`create x509 cert failed, errCode: ${err.code}, errMsg: ${err.message}`);\n      }\n    })\n    if (!revokedFlag) {\n        console.log('the given cert is not revoked.');\n        return;\n    }\n\n    // 根据序列号来获取被吊销的证书\n    try {\n      let crlEntry = x509Crl.getRevokedCert(serial);\n      console.log('get getRevokedCert success');\n      let serialNumber = crlEntry.getSerialNumber();\n      console.log(`crlEntry serialNumber is: ${serialNumber}`);\n\n      // 获取被吊销证书的吊销日期\n      let date = crlEntry.getRevocationDate();\n      console.log(`revocation date is: ${date}`);\n    } catch (error) {\n      let e: BusinessError = error as BusinessError;\n      console.error(`getRevokedCert failed, errCode: ${e.code}, errMsg: ${e.message}`);\n    }\n  });\n}
