模态转场
模态转场是新的界面覆盖在旧的界面上，旧的界面不消失的一种转场方式。
表1 模态转场接口
使用bindContentCover构建全屏模态转场效果
bindContentCover接口用于为组件绑定全屏模态页面，在组件出现和消失时可通过设置转场参数ModalTransition添加过渡动效。
 定义全屏模态转场效果bindContentCover。 定义模态展示界面。 // 通过@Builder构建模态展示界面\n@Builder MyBuilder() {\n  Column() {\n    Text('my model view')\n  }\n  // 通过转场动画实现出现消失转场动画效果，transition需要加在builder下的第一个组件 \n  .transition(TransitionEffect.translate({ y: 1000 }).animation({ curve: curves.springMotion(0.6, 0.8) }))\n} 通过模态接口调起模态展示界面，通过转场动画或者共享元素动画去实现对应的动画效果。 // 模态转场控制变量\n@State isPresent: boolean = false;\n\nButton('Click to present model view')\n  // 通过选定的模态接口，绑定模态展示界面，ModalTransition是内置的ContentCover转场动画类型，这里选择None代表系统不加默认动画，通过onDisappear控制状态变量变换\n  .bindContentCover(this.isPresent, this.MyBuilder(), {\n            modalTransition: ModalTransition.NONE,\n            onDisappear: () => {\n              if (this.isPresent) {\n                this.isPresent = !this.isPresent;\n              }\n            }\n          })\n  .onClick(() => {\n    // 改变状态变量，显示模态界面\n    this.isPresent = !this.isPresent;\n  }) 
完整示例代码和效果如下。
import { curves } from '@kit.ArkUI';\n\ninterface PersonList {\n  name: string,\n  cardnum: string\n}\n\n@Entry\n@Component\nstruct BindContentCoverDemo {\n  private personList: Array<PersonList> = [\n    { name: '王**', cardnum: '1234***********789' },\n    { name: '宋*', cardnum: '2345***********789' },\n    { name: '许**', cardnum: '3456***********789' },\n    { name: '唐*', cardnum: '4567***********789' }\n  ];\n  // 第一步：定义全屏模态转场效果bindContentCover\n  // 模态转场控制变量\n  @State isPresent: boolean = false;\n\n  // 第二步：定义模态展示界面\n  // 通过@Builder构建模态展示界面\n  @Builder\n  MyBuilder() {\n    Column() {\n      Row() {\n        Text('选择乘车人')\n          .fontSize(20)\n          .fontColor(Color.White)\n          .width('100%')\n          .textAlign(TextAlign.Center)\n          .padding({ top: 30, bottom: 15 })\n      }\n      .backgroundColor(0x007dfe)\n\n      Row() {\n        Text('+ 添加乘车人')\n          .fontSize(16)\n          .fontColor(0x333333)\n          .margin({ top: 10 })\n          .padding({ top: 20, bottom: 20 })\n          .width('92%')\n          .borderRadius(10)\n          .textAlign(TextAlign.Center)\n          .backgroundColor(Color.White)\n      }\n\n      Column() {\n        ForEach(this.personList, (item: PersonList, index: number) => {\n          Row() {\n            Column() {\n              if (index % 2 == 0) {\n                Column()\n                  .width(20)\n                  .height(20)\n                  .border({ width: 1, color: 0x007dfe })\n                  .backgroundColor(0x007dfe)\n              } else {\n                Column()\n                  .width(20)\n                  .height(20)\n                  .border({ width: 1, color: 0x007dfe })\n              }\n            }\n            .width('20%')\n\n            Column() {\n              Text(item.name)\n                .fontColor(0x333333)\n                .fontSize(18)\n              Text(item.cardnum)\n                .fontColor(0x666666)\n                .fontSize(14)\n            }\n            .width('60%')\n            .alignItems(HorizontalAlign.Start)\n\n            Column() {\n              Text('编辑')\n                .fontColor(0x007dfe)\n                .fontSize(16)\n            }\n            .width('20%')\n          }\n          .padding({ top: 10, bottom: 10 })\n          .border({ width: { bottom: 1 }, color: 0xf1f1f1 })\n          .width('92%')\n          .backgroundColor(Color.White)\n        })\n      }\n      .padding({ top: 20, bottom: 20 })\n\n      Text('确认')\n        .width('90%')\n        .height(40)\n        .textAlign(TextAlign.Center)\n        .borderRadius(10)\n        .fontColor(Color.White)\n        .backgroundColor(0x007dfe)\n        .onClick(() => {\n          this.isPresent = !this.isPresent;\n        })\n    }\n    .size({ width: '100%', height: '100%' })\n    .backgroundColor(0xf5f5f5)\n    // 通过转场动画实现出现消失转场动画效果\n    .transition(TransitionEffect.translate({ y: 1000 }).animation({ curve: curves.springMotion(0.6, 0.8) }))\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Text('确认订单')\n          .fontSize(20)\n          .fontColor(Color.White)\n          .width('100%')\n          .textAlign(TextAlign.Center)\n          .padding({ top: 30, bottom: 60 })\n      }\n      .backgroundColor(0x007dfe)\n\n      Column() {\n        Row() {\n          Column() {\n            Text('00:25')\n            Text('始发站')\n          }\n          .width('30%')\n\n          Column() {\n            Text('G1234')\n            Text('8时1分')\n          }\n          .width('30%')\n\n          Column() {\n            Text('08:26')\n            Text('终点站')\n          }\n          .width('30%')\n        }\n      }\n      .width('92%')\n      .padding(15)\n      .margin({ top: -30 })\n      .backgroundColor(Color.White)\n      .shadow({ radius: 30, color: '#aaaaaa' })\n      .borderRadius(10)\n\n      Column() {\n        Text('+ 选择乘车人')\n          .fontSize(18)\n          .fontColor(Color.Orange)\n          .fontWeight(FontWeight.Bold)\n          .padding({ top: 10, bottom: 10 })\n          .width('60%')\n          .textAlign(TextAlign.Center)\n          .borderRadius(15)// 通过选定的模态接口，绑定模态展示界面，ModalTransition是内置的ContentCover转场动画类型，这里选择DEFAULT代表设置上下切换动画效果，通过onDisappear控制状态变量变换。\n          .bindContentCover(this.isPresent, this.MyBuilder(), {\n            modalTransition: ModalTransition.DEFAULT,\n            onDisappear: () => {\n              if (this.isPresent) {\n                this.isPresent = !this.isPresent;\n              }\n            }\n          })\n          .onClick(() => {\n            // 第三步：通过模态接口调起模态展示界面，通过转场动画或者共享元素动画去实现对应的动画效果\n            // 改变状态变量，显示模态界面\n            this.isPresent = !this.isPresent;\n          })\n      }\n      .padding({ top: 60 })\n    }\n  }\n}
使用bindSheet构建半模态转场效果
bindSheet属性可为组件绑定半模态页面，在组件出现时可通过设置自定义或默认的内置高度确定半模态大小。构建半模态转场动效的步骤基本与使用bindContentCover构建全屏模态转场动效相同。
完整示例和效果如下。
@Entry\n@Component\nstruct BindSheetDemo {\n  // 半模态转场显示隐藏控制\n  @State isShowSheet: boolean = false;\n  private menuList: string[] = ['不要辣', '少放辣', '多放辣', '不要香菜', '不要香葱', '不要一次性餐具', '需要一次性餐具'];\n\n  // 通过@Builder构建半模态展示界面\n  @Builder\n  mySheet() {\n    Column() {\n      Flex({ direction: FlexDirection.Row, wrap: FlexWrap.Wrap }) {\n        ForEach(this.menuList, (item: string) => {\n          Text(item)\n            .fontSize(16)\n            .fontColor(0x333333)\n            .backgroundColor(0xf1f1f1)\n            .borderRadius(8)\n            .margin(10)\n            .padding(10)\n        })\n      }\n      .padding({ top: 18 })\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(Color.White)\n  }\n\n  build() {\n    Column() {\n      Text('口味与餐具')\n        .fontSize(28)\n        .padding({ top: 30, bottom: 30 })\n      Column() {\n        Row() {\n          Row()\n            .width(10)\n            .height(10)\n            .backgroundColor('#a8a8a8')\n            .margin({ right: 12 })\n            .borderRadius(20)\n\n          Column() {\n            Text('选择点餐口味和餐具')\n              .fontSize(16)\n              .fontWeight(FontWeight.Medium)\n          }\n          .alignItems(HorizontalAlign.Start)\n\n          Blank()\n\n          Row()\n            .width(12)\n            .height(12)\n            .margin({ right: 15 })\n            .border({\n              width: { top: 2, right: 2 },\n              color: 0xcccccc\n            })\n            .rotate({ angle: 45 })\n        }\n        .borderRadius(15)\n        .shadow({ radius: 100, color: '#ededed' })\n        .width('90%')\n        .alignItems(VerticalAlign.Center)\n        .padding({ left: 15, top: 15, bottom: 15 })\n        .backgroundColor(Color.White)\n        // 通过选定的半模态接口，绑定模态展示界面，style中包含两个参数，一个是设置半模态的高度，不设置时默认高度是Large，一个是是否显示控制条DragBar，默认是true显示控制条，通过onDisappear控制状态变量变换。\n        .bindSheet(this.isShowSheet, this.mySheet(), {\n          height: 300,\n          dragBar: false,\n          onDisappear: () => {\n            this.isShowSheet = !this.isShowSheet;\n          }\n        })\n        .onClick(() => {\n          this.isShowSheet = !this.isShowSheet;\n        })\n      }\n      .width('100%')\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(0xf1f1f1)\n  }\n}
使用bindMenu实现菜单弹出效果
bindMenu为组件绑定弹出式菜单，通过点击触发。完整示例和效果如下。
class BMD{\n  value:ResourceStr = ''\n  action:() => void = () => {}\n}\n@Entry\n@Component\nstruct BindMenuDemo {\n\n  // 第一步: 定义一组数据用来表示菜单按钮项\n  @State items:BMD[] = [\n    {\n      value: '菜单项1',\n      action: () => {\n        console.info('handle Menu1 select')\n      }\n    },\n    {\n      value: '菜单项2',\n      action: () => {\n        console.info('handle Menu2 select')\n      }\n    },\n  ]\n\n  build() {\n    Column() {\n      Button('click')\n        .backgroundColor(0x409eff)\n        .borderRadius(5)\n          // 第二步: 通过bindMenu接口将菜单数据绑定给元素\n        .bindMenu(this.items)\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height(437)\n  }\n}
使用bindContextMenu实现菜单弹出效果
bindContextMenu为组件绑定弹出式菜单，通过长按或右键点击触发。
完整示例和效果如下。
@Entry\n@Component\nstruct BindContextMenuDemo {\n  private menu: string[] = ['保存图片', '收藏', '搜一搜'];\n  private pics: Resource[] = [$r('app.media.icon_1'), $r('app.media.icon_2')];\n\n  // 通过@Builder构建自定义菜单项\n  @Builder myMenu() {\n    Column() {\n      ForEach(this.menu, (item: string) => {\n        Row() {\n          Text(item)\n            .fontSize(18)\n            .width('100%')\n            .textAlign(TextAlign.Center)\n        }\n        .padding(15)\n        .border({ width: { bottom: 1 }, color: 0xcccccc })\n      })\n    }\n    .width(140)\n    .borderRadius(15)\n    .shadow({ radius: 15, color: 0xf1f1f1 })\n    .backgroundColor(0xf1f1f1)\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Text('查看图片')\n          .fontSize(20)\n          .fontColor(Color.White)\n          .width('100%')\n          .textAlign(TextAlign.Center)\n          .padding({ top: 20, bottom: 20 })\n      }\n      .backgroundColor(0x007dfe)\n\n      Column() {\n        ForEach(this.pics, (item: Resource) => {\n          Row(){\n            Image(item)\n              .width('100%')\n              .draggable(false)\n          }\n          .padding({ top: 20, bottom: 20, left: 10, right: 10 })\n          .bindContextMenu(this.myMenu, ResponseType.LongPress)\n        })\n      }\n    }\n    .width('100%')\n    .alignItems(HorizontalAlign.Center)\n  }\n}
使用bindPopUp实现气泡弹窗效果
bindpopup属性可为组件绑定弹窗，并设置弹窗内容，交互逻辑和显示状态。
完整示例和代码如下。
@Entry\n@Component\nstruct BindPopupDemo {\n\n  // 第一步：定义变量控制弹窗显示\n  @State customPopup: boolean = false;\n\n  // 第二步：popup构造器定义弹框内容\n  @Builder popupBuilder() {\n    Column({ space: 2 }) {\n      Row().width(64)\n        .height(64)\n        .backgroundColor(0x409eff)\n      Text('Popup')\n        .fontSize(10)\n        .fontColor(Color.White)\n    }\n    .justifyContent(FlexAlign.SpaceAround)\n    .width(100)\n    .height(100)\n    .padding(5)\n  }\n\n  build() {\n    Column() {\n\n      Button('click')\n        // 第四步：创建点击事件，控制弹窗显隐\n        .onClick(() => {\n          this.customPopup = !this.customPopup;\n        })\n        .backgroundColor(0xf56c6c)\n          // 第三步：使用bindPopup接口将弹窗内容绑定给元素\n        .bindPopup(this.customPopup, {\n          builder: this.popupBuilder,\n          placement: Placement.Top,\n          maskColor: 0x33000000,\n          popupColor: 0xf56c6c,\n          enableArrow: true,\n          onStateChange: (e) => {\n            if (!e.isVisible) {\n              this.customPopup = false;\n            }\n          }\n        })\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height(437)\n  }\n}
使用if实现模态转场
上述模态转场接口需要绑定到其他组件上，通过监听状态变量改变调起模态界面。同时，也可以通过if范式，通过新增/删除组件实现模态转场效果。
完整示例和代码如下。
@Entry\n@Component\nstruct ModalTransitionWithIf {\n  private listArr: string[] = ['WLAN', '蓝牙', '个人热点', '连接与共享'];\n  private shareArr: string[] = ['投屏', '打印', 'VPN', '私人DNS', 'NFC'];\n  // 第一步：定义状态变量控制页面显示\n  @State isShowShare: boolean = false;\n  private shareFunc(): void {\n    this.getUIContext()?.animateTo({ duration: 500 }, () => {\n      this.isShowShare = !this.isShowShare;\n    })\n  }\n\n  build(){\n    // 第二步：定义Stack布局显示当前页面和模态页面\n    Stack() {\n      Column() {\n        Column() {\n          Text('设置')\n            .fontSize(28)\n            .fontColor(0x333333)\n        }\n        .width('90%')\n        .padding({ top: 30, bottom: 15 })\n        .alignItems(HorizontalAlign.Start)\n\n        TextInput({ placeholder: '输入关键字搜索' })\n          .width('90%')\n          .height(40)\n          .margin({ bottom: 10 })\n          .focusable(false)\n\n        List({ space: 12, initialIndex: 0 }) {\n          ForEach(this.listArr, (item: string, index: number) => {\n            ListItem() {\n              Row() {\n                Row() {\n                  Text(`${item.slice(0, 1)}`)\n                    .fontColor(Color.White)\n                    .fontSize(14)\n                    .fontWeight(FontWeight.Bold)\n                }\n                .width(30)\n                .height(30)\n                .backgroundColor('#a8a8a8')\n                .margin({ right: 12 })\n                .borderRadius(20)\n                .justifyContent(FlexAlign.Center)\n\n                Column() {\n                  Text(item)\n                    .fontSize(16)\n                    .fontWeight(FontWeight.Medium)\n                }\n                .alignItems(HorizontalAlign.Start)\n\n                Blank()\n\n                Row()\n                  .width(12)\n                  .height(12)\n                  .margin({ right: 15 })\n                  .border({\n                    width: { top: 2, right: 2 },\n                    color: 0xcccccc\n                  })\n                  .rotate({ angle: 45 })\n              }\n              .borderRadius(15)\n              .shadow({ radius: 100, color: '#ededed' })\n              .width('90%')\n              .alignItems(VerticalAlign.Center)\n              .padding({ left: 15, top: 15, bottom: 15 })\n              .backgroundColor(Color.White)\n            }\n            .width('100%')\n            .onClick(() => {\n              // 第五步：改变状态变量，显示模态页面\n              if(item.slice(-2) === '共享'){\n                this.shareFunc();\n              }\n            })\n          }, (item: string): string => item)\n        }\n        .width('100%')\n      }\n      .width('100%')\n      .height('100%')\n      .backgroundColor(0xfefefe)\n\n      // 第三步：在if中定义模态页面，显示在最上层，通过if控制模态页面出现消失\n      if(this.isShowShare){\n        Column() {\n          Column() {\n            Row() {\n              Row() {\n                Row()\n                  .width(16)\n                  .height(16)\n                  .border({\n                    width: { left: 2, top: 2 },\n                    color: 0x333333\n                  })\n                  .rotate({ angle: -45 })\n              }\n              .padding({ left: 15, right: 10 })\n              .onClick(() => {\n                this.shareFunc();\n              })\n              Text('连接与共享')\n                .fontSize(28)\n                .fontColor(0x333333)\n            }\n            .padding({ top: 30 })\n          }\n          .width('90%')\n          .padding({bottom: 15})\n          .alignItems(HorizontalAlign.Start)\n\n          List({ space: 12, initialIndex: 0 }) {\n            ForEach(this.shareArr, (item: string) => {\n              ListItem() {\n                Row() {\n                  Row() {\n                    Text(`${item.slice(0, 1)}`)\n                      .fontColor(Color.White)\n                      .fontSize(14)\n                      .fontWeight(FontWeight.Bold)\n                  }\n                  .width(30)\n                  .height(30)\n                  .backgroundColor('#a8a8a8')\n                  .margin({ right: 12 })\n                  .borderRadius(20)\n                  .justifyContent(FlexAlign.Center)\n\n                  Column() {\n                    Text(item)\n                      .fontSize(16)\n                      .fontWeight(FontWeight.Medium)\n                  }\n                  .alignItems(HorizontalAlign.Start)\n\n                  Blank()\n\n                  Row()\n                    .width(12)\n                    .height(12)\n                    .margin({ right: 15 })\n                    .border({\n                      width: { top: 2, right: 2 },\n                      color: 0xcccccc\n                    })\n                    .rotate({ angle: 45 })\n                }\n                .borderRadius(15)\n                .shadow({ radius: 100, color: '#ededed' })\n                .width('90%')\n                .alignItems(VerticalAlign.Center)\n                .padding({ left: 15, top: 15, bottom: 15 })\n                .backgroundColor(Color.White)\n              }\n              .width('100%')\n            }, (item: string): string => item)\n          }\n          .width('100%')\n        }\n        .width('100%')\n        .height('100%')\n        .backgroundColor(0xffffff)\n        // 第四步：定义模态页面出现消失转场方式\n        .transition(TransitionEffect.OPACITY\n          .combine(TransitionEffect.translate({ x: '100%' }))\n          .combine(TransitionEffect.scale({ x: 0.95, y: 0.95 })))\n      }\n    }\n  }\n}
