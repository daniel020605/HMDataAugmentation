实现一个输入法应用
InputMethodExtensionAbility提供了onCreate()和onDestroy()生命周期回调，根据需要重写对应的回调方法。InputMethodExtensionAbility的生命周期如下：
 onCreate() 服务被首次创建时触发该回调，开发者可以在此进行一些初始化的操作，例如注册公共事件监听等。     如果服务已创建，再次启动该InputMethodExtensionAbility不会触发onCreate()回调。   onDestroy() 当不再使用服务且准备将该实例销毁时，触发该回调。开发者可以在该回调中清理资源，如注销监听等。 
开发步骤
开发者在实现一个输入法应用时，需要在DevEco Studio工程中新建一个InputMethodExtensionAbility，具体步骤如下：
 在工程Module对应的ets目录下，右键选择“New > Directory”，新建一个目录，并命名为InputMethodExtensionAbility。 在InputMethodExtensionAbility目录下，右键选择“New > File”，新建四个文件，分别为KeyboardController.ts、InputMethodService.ts、Index.ets以及KeyboardKeyData.ts。目录如下： 
/src/main/\n├── ets/InputMethodExtensionAbility\n│       └──model/KeyboardController.ts\t\t\t# 显示键盘\n│       └──InputMethodService.ts\t\t\t\t# 自定义类继承InputMethodExtensionAbility并加上需要的生命周期回调\n│       └──pages\n│         └── Index.ets\t\t\t\t\t\t# 绘制键盘，添加输入删除功能\n│         └── KeyboardKeyData.ts\t\t\t    # 键盘属性定义\n├── resources/base/profile/main_pages.json  
文件介绍
 InputMethodService.ts文件。 在InputMethodService.ts文件中，增加导入InputMethodExtensionAbility的依赖包，自定义类继承InputMethodExtensionAbility并加上需要的生命周期回调。 import { Want } from '@kit.AbilityKit';\nimport keyboardController from './model/KeyboardController';\nimport { InputMethodExtensionAbility } from '@kit.IMEKit';\n\nexport default class InputDemoService extends InputMethodExtensionAbility {\n\n  onCreate(want: Want): void {\n    keyboardController.onCreate(this.context); // 初始化窗口并注册对输入法框架的事件监听\n  }\n\n  onDestroy(): void {\n    console.log(\"onDestroy.\");\n    keyboardController.onDestroy(); // 销毁窗口并去注册事件监听\n  }\n} KeyboardController.ts文件。 import { display } from '@kit.ArkUI';\nimport { inputMethodEngine, InputMethodExtensionContext } from '@kit.IMEKit';\n\n// 调用输入法框架的getInputMethodAbility方法获取实例，并由此实例调用输入法框架功能接口\nconst inputMethodAbility: inputMethodEngine.InputMethodAbility = inputMethodEngine.getInputMethodAbility();\n\nexport class KeyboardController {\n  private mContext: InputMethodExtensionContext | undefined = undefined; // 保存InputMethodExtensionAbility中的context属性\n  private panel: inputMethodEngine.Panel | undefined = undefined; \n  private textInputClient: inputMethodEngine.InputClient | undefined = undefined; \n  private keyboardController: inputMethodEngine.KeyboardController | undefined = undefined;\n\n  constructor() {\n  }\n\n  public onCreate(context: InputMethodExtensionContext): void\n  {\n    this.mContext = context;\n    this.initWindow(); // 初始化窗口\n    this.registerListener(); // 注册对输入法框架的事件监听\n  }\n\n  public onDestroy(): void // 应用生命周期销毁\n  {\n    this.unRegisterListener(); // 去注册事件监听\n    if(this.panel) { // 销毁窗口\n      inputMethodAbility.destroyPanel(this.panel);\n    }\n    if(this.mContext) {\n      this.mContext.destroy();\n    }\n  }\n\n  public insertText(text: string): void {\n    if(this.textInputClient) {\n      this.textInputClient.insertText(text);\n    }\n  }\n\n  public deleteForward(length: number): void {\n    if(this.textInputClient) {\n      this.textInputClient.deleteForward(length);\n    }\n  }\n\n  private initWindow(): void // 初始化窗口\n  {\n    if(this.mContext === undefined) {\n      return;\n    }\n    let dis = display.getDefaultDisplaySync();\n    let dWidth = dis.width;\n    let dHeight = dis.height;\n    let keyHeightRate = 0.47;\n    let keyHeight = dHeight * keyHeightRate;\n    let nonBarPosition = dHeight - keyHeight;\n    let panelInfo: inputMethodEngine.PanelInfo = {\n      type: inputMethodEngine.PanelType.SOFT_KEYBOARD,\n      flag: inputMethodEngine.PanelFlag.FLG_FIXED\n    };\n    inputMethodAbility.createPanel(this.mContext, panelInfo).then(async (inputPanel: inputMethodEngine.Panel) => {\n      this.panel = inputPanel;\n      if(this.panel) {\n        await this.panel.resize(dWidth, keyHeight);\n        await this.panel.moveTo(0, nonBarPosition);\n        await this.panel.setUiContent('InputMethodExtensionAbility/pages/Index');\n      }\n    });\n  }\n\n  private registerListener(): void\n  {\n    this.registerInputListener(); // 注册对输入法框架服务的监听\n    // 注册隐藏键盘事件监听等\n  }\n\n  private registerInputListener(): void { // 注册对输入法框架服务的开启及停止事件监听\n    inputMethodAbility.on('inputStart', (kbController, textInputClient) => {\n      this.textInputClient = textInputClient; // 此为输入法客户端实例，由此调用输入法框架提供给输入法应用的功能接口\n      this.keyboardController = kbController;\n    })\n    inputMethodAbility.on('inputStop', () => {\n      this.onDestroy(); // 销毁KeyboardController\n    });\n  }\n\n  private unRegisterListener(): void\n  {\n    inputMethodAbility.off('inputStart');\n    inputMethodAbility.off('inputStop', () => {});\n  }\n}\n\nconst keyboardController = new KeyboardController();\n\nexport default keyboardController; KeyboardKeyData.ts文件。 定义软键盘的按键显示内容。 export interface sourceListType {\n  content: string,\n}\n\nexport let numberSourceListData: sourceListType[] = [\n  {\n    content: '1'\n  },\n  {\n    content: '2'\n  },\n  {\n    content: '3'\n  },\n  {\n    content: '4'\n  },\n  {\n    content: '5'\n  },\n  {\n    content: '6'\n  },\n  {\n    content: '7'\n  },\n  {\n    content: '8'\n  },\n  {\n    content: '9'\n  },\n  {\n    content: '0'\n  }\n] Index.ets文件。 主要描绘了具体按键功能。如按下数字键，就会将数字内容在输入框中打印出来，按下删除键，就会将内容删除。 同时在resources/base/profile/main_pages.json文件的src字段中添加此文件路径。 import { numberSourceListData, sourceListType } from './KeyboardKeyData';\nimport keyboardController from '../model/KeyboardController';\n\n@Component\nstruct keyItem {\n  private keyValue: sourceListType = numberSourceListData[0];\n  @State keyBgc: string = \"#fff\"\n  @State keyFontColor: string = \"#000\"\n\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column,\n        alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n        Text(this.keyValue.content).fontSize(20).fontColor(this.keyFontColor)\n      }\n    }\n    .backgroundColor(this.keyBgc)\n    .borderRadius(6)\n    .width(\"8%\")\n    .height(\"65%\")\n    .onClick(() => {\n      keyboardController.insertText(this.keyValue.content);\n    })\n  }\n}\n\n// 删除组件\n@Component\nexport struct deleteItem {\n  @State keyBgc: string = \"#fff\"\n  @State keyFontColor: string = \"#000\"\n\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column,\n        alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {\n        Text(\"删除\").fontSize(20).fontColor(this.keyFontColor)\n      }\n    }\n    .backgroundColor(this.keyBgc)\n    .width(\"13%\")\n    .borderRadius(6)\n    .onClick(() => {\n      keyboardController.deleteForward(1);\n    })\n  }\n}\n\n// 数字键盘\n@Component\nstruct numberMenu {\n  private numberList: sourceListType[] = numberSourceListData;\n\n  build() {\n    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center, justifyContent: FlexAlign.SpaceEvenly }) {\n      Flex({ justifyContent: FlexAlign.SpaceBetween }) {\n        ForEach(this.numberList, (item: sourceListType) => { // 数字键盘第一行\n          keyItem({ keyValue: item })\n        }, (item: sourceListType) => item.content);\n      }\n      .padding({ top: \"2%\" })\n      .width(\"96%\")\n      .height(\"25%\")\n\n      Flex({ justifyContent: FlexAlign.SpaceBetween }) {\n        deleteItem()\n      }\n      .width(\"96%\")\n      .height(\"25%\")\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  private numberList: sourceListType[] = numberSourceListData\n\n  build() {\n    Stack() {\n      Flex({\n        direction: FlexDirection.Column,\n        alignItems: ItemAlign.Center,\n        justifyContent: FlexAlign.End\n      }) {\n            Flex({\n              direction: FlexDirection.Column,\n              alignItems: ItemAlign.Center,\n              justifyContent: FlexAlign.SpaceBetween\n            }) {\n              numberMenu({\n                numberList: this.numberList\n              })\n            }\n            .align(Alignment.End)\n            .width(\"100%\")\n            .height(\"75%\")\n          }\n      .height(\"100%\").align(Alignment.End).backgroundColor(\"#cdd0d7\")\n    }\n    .position({ x: 0, y: 0 }).zIndex(99999)\n  }\n} 在工程Module对应的module.json5配置文件中注册InputMethodExtensionAbility，type标签需要设置为“inputMethod”，srcEntry标签表示当前InputMethodExtensionAbility组件所对应的代码路径。 {\n  \"module\": {\n    ...\n    \"extensionAbilities\": [\n      {\n        \"description\": \"inputMethod\",\n        \"name\": \"InputMethodExtensionAbility\",       \n        \"icon\": \"$media:app_icon\",\n        \"srcEntry\": \"./ets/InputMethodExtensionAbility/InputMethodService.ts\",\n        \"type\": \"inputMethod\",\n        \"exported\": true,\n      }\n    ]\n  }\n} 
验证方法
 在应用中通过接口拉起输入法切换列表弹窗。 
import { inputMethod } from '@kit.IMEKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n \nlet inputMethodSetting = inputMethod.getSetting();\ntry {\n  inputMethodSetting.showOptionalInputMethods((err: BusinessError, data: boolean) => {\n    if (err) {\n      console.error(`Failed to showOptionalInputMethods: ${JSON.stringify(err)}`);\n      return;\n    }\n    console.log('Succeeded in showing optionalInputMethods.');\n  });\n} catch (err) {\n  console.error(`Failed to showOptionalInputMethods: ${JSON.stringify(err)}`);\n}
 在弹窗上显示的输入法应用列表中，选择并点击demo应用，将demo应用切换为当前输入法。 点击任意编辑框，即可拉起输入法demo。 
约束与限制
为了降低InputMethodExtensionAbility能力被三方应用滥用的风险，现通过基础访问模式的功能约束对输入法应用进行安全管控。
 严格遵从基础访问模式的功能约束。在此模式下，开发者应仅提供基础打字功能，不应提供任何形式与网络交互相关的功能。系统会逐步增加基础访问模式的安全管控能力，包括但不限于：以独立进程和沙箱的方式运行Extension进程；禁止Extension进程创建子进程；进程间通信与网络访问等。因此未遵从此约定可能会导致功能异常。 
