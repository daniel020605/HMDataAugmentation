拉起文件处理类应用（startAbility）
使用场景
开发者可以通过调用startAbility接口，由系统从已安装的应用中寻找符合要求的应用，打开特定文件。
例如，浏览器下应用下载PDF文件，可以调用此接口选择文件处理应用打开此PDF文件。开发者需要在请求中设置待打开文件的URI路径（uri）、文件格式（type）等字段，以便系统能够识别，直接拉起文件打开应用或弹出一个选择框，让用户选择合适的应用来打开文件，效果示意如下图所示。
图1 效果示意图
接口关键参数说明
开发者通过调用startAbility接口即可实现由已安装的垂域应用来打开文件。
表1 startAbility请求中want相关参数说明
表示待打开文件的URI路径，一般配合type使用。
uri格式为：file://bundleName/path
- file：文件URI的标志。
- bundleName：该文件资源的属主。
- path：文件资源在应用沙箱中的路径。
表示打开文件的类型，推荐使用UTD类型，比如：'general.plain-text'、'general.image'。目前也可以兼容使用MIME type类型，如：'text/xml' 、 'image/*'等。
说明：
1. type为可选字段，如果不传type，系统会尝试根据uri后缀名判断文件类型进行匹配；如果传入type，必须确保与uri的文件类型一致，否则会导致无法匹配到合适的应用。文件后缀与文件类型的映射关系参见Uniform Type Descriptor(UTD)预置列表。
2. 不支持传*/*。
表2 parameters相关参数说明
表示是否强制展示文件打开方式的选择弹框，缺省为false。
- false：表示由系统策略或默认应用设置决定直接拉起文件打开应用还是展示弹框。
- true：表示始终展示弹框。
表示调用方本身是否作为目标方应用之一参与匹配，缺省为false。
- false：不参与匹配。
- true：参与匹配。
表3 flags相关参数说明
接入步骤
[h2]调用方接入步骤
 导入相关模块。 // xxx.ets\nimport { fileUri } from '@kit.CoreFileKit';\nimport { UIAbility, Want, common, wantConstant } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { window } from '@kit.ArkUI'; 获取应用文件路径。 // xxx.ets\n// 假设应用bundleName值为com.example.demo\nexport default class EntryAbility extends UIAbility {\n    onWindowStageCreate(windowStage: window.WindowStage) {\n        // 获取文件沙箱路径\n        let filePath = this.context.filesDir + '/test1.txt';\n        // 将沙箱路径转换为uri\n        let uri = fileUri.getUriFromPath(filePath);\n        // 获取的uri为\"file://com.example.demo/data/storage/el2/base/files/test.txt\"\n    }\n    // ...\n} 构造请求数据。 // xxx.ets\nexport default class EntryAbility extends UIAbility {\n    onWindowStageCreate(windowStage: window.WindowStage) {\n        // 获取文件沙箱路径\n        let filePath = this.context.filesDir + '/test.txt';\n        // 将沙箱路径转换为uri\n        let uri = fileUri.getUriFromPath(filePath);\n        // 构造请求数据\n        let want: Want = {\n        action: 'ohos.want.action.viewData', // 表示查看数据的操作，文件打开场景固定为此值\n        uri: uri,\n        type: 'general.plain-text', // 表示待打开文件的类型\n        // 配置被分享文件的读写权限，例如对文件打开应用进行读写授权\n        flags: wantConstant.Flags.FLAG_AUTH_WRITE_URI_PERMISSION | wantConstant.Flags.FLAG_AUTH_READ_URI_PERMISSION\n        };\n    }\n    // ...\n} 调用接口启动。 // xxx.ets\nexport default class EntryAbility extends UIAbility {\n    onWindowStageCreate(windowStage: window.WindowStage) {\n        // 获取文件沙箱路径\n        let filePath = this.context.filesDir + '/test.txt';\n        // 将沙箱路径转换为uri\n        let uri = fileUri.getUriFromPath(filePath);\n        // 构造请求数据\n        let want: Want = {\n        action: 'ohos.want.action.viewData', // 表示查看数据的操作，文件打开场景固定为此值\n        uri: uri,\n        type: 'general.plain-text', // 表示待打开文件的类型\n        // 配置被分享文件的读写权限，例如对文件打开应用进行读写授权\n        flags: wantConstant.Flags.FLAG_AUTH_WRITE_URI_PERMISSION | wantConstant.Flags.FLAG_AUTH_READ_URI_PERMISSION\n        };\n        // 调用接口启动\n        this.context.startAbility(want)\n        .then(() => {\n            console.info('Succeed to invoke startAbility.');\n        })\n        .catch((err: BusinessError) => {\n            console.error(`Failed to invoke startAbility, code: ${err.code}, message: ${err.message}`);\n        });\n    }\n    // ...\n} 
[h2]目标方接入步骤
 声明文件打开能力。 支持打开文件的应用需要在module.json5配置文件中声明文件打开能力。其中uris字段表示接收URI的类型，其中scheme固定为file。type字段表示支持打开的文件类型（参见UTD类型（推荐）或MIME type类型），如下举例中类型为txt文件。 {\n\"module\": {\n    // ...\n    \"abilities\": [\n    {\n        // ...\n        \"skills\": [\n        {\n            \"actions\": [\n            \"ohos.want.action.viewData\" // 必填，声明数据处理能力\n            ],\n            \"uris\": [\n            {\n                // 允许打开uri中以file://协议开头标识的本地文件\n                \"scheme\": \"file\", // 必填，声明协议类型为文件\n                \"type\": \"general.plain-text\", // 必填，表示支持打开的文件类型\n                \"linkFeature\": \"FileOpen\" // 必填且大小写敏感，表示此URI的功能为文件打开\n            }\n            // ...\n            ]\n            // ...\n        }\n        ]\n    }\n    ]\n}\n} 应用处理待打开文件。 声明了文件打开的应用在被拉起后，获取传入的Want参数信息，从中获取待打开文件的URI，在打开文件并获取对应的file对象后，可对文件进行读写操作。 // xxx.ets\nimport fs from '@ohos.file.fs';\nimport { Want, AbilityConstant } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nexport default class EntryAbility extends UIAbility {\n    onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {\n        // 从want信息中获取uri字段\n        let uri = want.uri;\n        if (uri == null || uri == undefined) {\n            console.info('uri is invalid');\n            return;\n        }\n        try {\n            // 根据待打开文件的URI进行相应操作。例如同步读写的方式打开URI获取file对象\n            let file = fs.openSync(uri, fs.OpenMode.READ_WRITE);\n            console.info('Succeed to open file.');\n        } catch (err) {\n            let error: BusinessError = err as BusinessError;\n            console.error(`Failed to open file openSync, code: ${error.code}, message: ${error.message}`);\n        }\n    }\n} 
