ContentSlot：混合开发
用于渲染并管理Native层使用C-API创建的组件。
支持混合模式开发，当容器是ArkTS组件，子组件在Native侧创建时，推荐使用ContentSlot占位组件。
接口
[h2]ArkTS侧接口
abstract class Content {\n}
[h2]Native侧接口
typedef enum {
NOTE_CONTENT_EVENT_ON_ATTACH_TO_WINDOW = 0,
NOTE_CONTENT_EVENT_ON_DETACH_FROM_WINDOW = 1,
} ArkUI_NodeContentEventType
开发实现
[h2]ArkTS侧代码实现
import { nativeNode } from 'libNativeNode.so' // 开发者自己实现的so\nimport { NodeContent } from '@kit.ArkUI'\n\n@Entry\n@Component\nstruct Parent {\n    private nodeContent: Content = new NodeContent();\n\n    aboutToAppear() {\n        // 通过C-API创建节点，并添加到管理器nodeContent上\n        nativeNode.createNativeNode(this.nodeContent);\n    }\n\n    build() {\n        Column() {\n            // 显示nodeContent管理器里存放的Native侧的组件\n            ContentSlot(this.nodeContent)\n        }\n    }\n}
[h2]Native侧代码实现
Napi的基础开发知识请查看以下文档：开发导读。
本章节仅描述实现ContentSlot相关逻辑代码。创建C侧组件，具体请查看使用NDK接口构建UI。
#include \"napi/native_api.h\"\n#include \"arkui/native_type.h\"\n#include \"arkui/native_node.h\"\n#include \"arkui/native_node_napi.h\"\n#include \"arkui/native_interface.h\"\n#include \"hilog/log.h\"\n\nArkUI_NodeContentHandle nodeContentHandle_ = nullptr;\nArkUI_NativeNodeAPI_1 *nodeAPI;\nconst unsigned int LOG_PRINT_DOMAIN = 0xFF00;\n\n// Manager为应用定义的NativeNode管理类\nnapi_value Manager::CreateNativeNode(napi_env env, napi_callback_info info) {\n    // napi相关处理空指针&数据越界等问题\n    if ((env == nullptr) || (info == nullptr)) {\n        return nullptr;\n    }\n\n    size_t argc = 1;\n    napi_value args[1] = { nullptr };\n    if (napi_get_cb_info(env, info, &argc, args, nullptr, nullptr) != napi_ok) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"Manager\", \"CreateNativeNode napi_get_cb_info failed\");\n    }\n\n    if (argc != 1) {\n        return nullptr;\n    }\n\n    nodeAPI = reinterpret_cast<ArkUI_NativeNodeAPI_1 *>(\n        OH_ArkUI_QueryModuleInterfaceByName(ARKUI_NATIVE_NODE, \"ArkUI_NativeNode_API_1\"));\n\n    // 将nodeContentHandle_指向ArkTS侧传入的nodeContent\n    OH_ArkUI_GetNodeContentFromNapiValue(env, args[0], &nodeContentHandle_);\n\n    if (nodeAPI != nullptr) {\n        if (nodeAPI->createNode != nullptr && nodeAPI->addChild != nullptr) {\n            ArkUI_NodeHandle component;\n            // 创建C侧组件，具体请查看ArkUI api文档的Capi章节\n            component = CreateNodeHandle();\n            // 将组件添加到nodeContent管理器中\n            OH_ArkUI_NodeContent_AddNode(nodeContentHandle_, component);\n        }\n    }\n}
注册上下树事件，并通过事件获取对应的Content对象
auto nodeContentEvent = [](ArkUI_NodeContentEvent *event) {\n    ArkUI_NodeContentHandle content = OH_ArkUI_NodeContentEvent_GetNodeContentHandle(event);\n    // 针对不同content需要额外做的逻辑\n    if (OH_ArkUINodeContentEvent_GetEventType(event) = NODE_CONTENT_EVENT_ON_ATTACH_TO_WINDOW) {\n        // ContentSlot上树时需要触发的逻辑\n    } else if (OH_ArkUINodeContentEvent_GetEventType(event) = NODE_CONTENT_EVENT_ON_DETACH_FROM_WINDOW) {\n        // ContentSlot下树时需要触发的逻辑\n    };\n};\n// 将该事件注册到nodeContent上\nOH_ArkUI_NodeContent_RegisterCallback(nodeContentHandle_, nodeContentEvent);
添加子组件
ArkUINodeHandle component;\ncomponent = CreateNodeHandle();\n// 将组件添加到nodeContent管理器中\nOH_ArkUI_NodeContent_AddNode(nodeContentHandle_, component);
插入子组件
ArkUINodeHandle component;\ncomponent = CreateNodeHandle();\n// 将组件插入nodeContent管理器对应位置\nOH_ArkUI_NodeContent_InsertNode(nodeContentHandle_, component, position);
删除子组件
// 在nodeContent中移除对应组件\nOH_ArkUI_NodeContent_RemoveNode(nodeContentHandle_, component);
设置自定义属性
// 创建需要定义的自定义数据\nvoid *userData = CreateUserData();\nOH_ArkUI_NodeContent_SetUserData(nodeContentHandle_, userData);
获取自定义属性
void *userData = OH_ArkUI_NodeContent_GetUserData(nodeContentHandle_);
