游戏场景感知功能开发（可选）
功能说明
游戏场景感知提供API接口，帮助开发者快速实现游戏与系统的交互，开发者通过游戏场景感知，可以完成向系统发送游戏数据以及从系统获取设备状态信息两大动作。
场景介绍
游戏场景感知主要服务于游戏场景优化，其特点是可以通过感知游戏场景和运行状态的不同，使用不同策略调度系统资源以达到更精细化的优化效果。
业务流程
 游戏启动后调用gamePerformance.init接口对游戏场景感知进行初始化。 游戏场景感知向华为服务器进行鉴权，对当前游戏进行合法性校验。 初始化成功后，游戏调用gamePerformance.on接口注册设备状态变化事件监听，订阅设备状态变化通知。 游戏调用gamePerformance.updateGameInfo接口向游戏场景感知上报游戏信息（包信息、配置信息、场景信息和网络信息）。 游戏场景感知广播游戏信息给终端系统。 终端系统根据游戏信息进行系统资源调度。 终端系统会将设备状态变化通知游戏场景感知。 游戏场景感知向游戏客户端反馈设备状态变化。 如不再需要订阅，游戏可调用gamePerformance.off接口取消设备状态变化事件监听。 
接口说明
具体API说明详见接口文档。
接口名
描述
init(gamePackageInfo: GamePackageInfo): Promise<void>
游戏初始化接口，对游戏场景感知进行初始化，通过Promise对象获取返回值。
on(type: 'deviceStateChanged', callback: Callback<DeviceInfo>): void
订阅设备状态变化接口，主要用于监听deviceStateChanged（设备状态变化）事件。
updateGameInfo<T extends BaseGameInfo>(gameInfo: T): Promise<void>
更新游戏信息接口，主要用于上报游戏信息（包信息、配置信息、场景信息和网络信息），通过Promise对象获取返回值。
off(type: 'deviceStateChanged', callback?: Callback<DeviceInfo>): void
取消订阅设备状态变化接口，主要用于取消监听deviceStateChanged（设备状态变化）事件。
开发步骤
本功能涉及的关键开发步骤如下：
[h2]导入模块
导入Game Service Kit及公共模块。
import { gamePerformance } from '@kit.GameServiceKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';
[h2]初始化
导入相关模块后，需先调用init接口对游戏场景感知进行初始化。
 init接口是调用其他接口的前提，如果未初始化或初始化失败，将无法调用其他接口。 首次调用init接口时，需确保连接网络，否则会导致鉴权失败。 
let gamePackageInfo: gamePerformance.GamePackageInfo = {\n    messageType: 0,\n    bundleName: \"com.example.demo\", // 仅示例，请替换为实际的游戏包名\n    appVersion: \"1.0\"\n}\ntry {\n  gamePerformance.init(gamePackageInfo).then(() => {\n    // 初始化成功\n    hilog.info(0x0001, 'demo', `Succeeded in initing.`);\n  })\n} catch (error) {\n  // 初始化失败\n  let err = error as BusinessError;\n  hilog.error(0x0001, 'demo', `Failed to init. Code: ${err.code}, message: ${err.message}`);\n}
[h2]订阅设备状态变化
调用on接口可以订阅设备状态变化事件，获取设备状态变化的通知（如设备温控档位）。
function onDeviceStateChange(data:gamePerformance.DeviceInfo) {\n  // 设备信息详情\n  hilog.info(0x0001, 'demo', `device state changed.`);\n}\n\n// 订阅deviceStateChanged事件\ntry {\n  gamePerformance.on('deviceStateChanged', onDeviceStateChange);\n} catch (error) {\n  // 订阅失败\n  let err = error as BusinessError;\n  hilog.error(0x0001, 'demo', `Failed to subscribe. Code: ${err.code}, message: ${err.message}`);\n}
[h2]上报游戏信息
初始化成功后，可以通过调用updateGameInfo接口上报游戏信息（包信息、配置信息、场景信息和网络信息）。
// 以更新游戏场景信息为例\nlet gameSceneInfo: gamePerformance.GameSceneInfo = {\n\tmessageType: 2,\n\tsceneID: 7,\n\timportanceLevel: 4\n}\ntry {\n    gamePerformance.updateGameInfo(gameSceneInfo).then(() => {\n        // 更新游戏场景信息成功\n        hilog.info(0x0001, 'demo', `Succeeded in updating.`);\n    });\n} catch (error) {\n    // 更新游戏场景信息失败\n    let err = error as BusinessError;\n    hilog.error(0x0001, 'demo', `Failed to update. Code: ${err.code}, message: ${err.message}`);\n}
[h2]取消订阅设备状态
如不再需要订阅，则可以通过调用off接口取消订阅设备状态。
function onDeviceStateChange(data:gamePerformance.DeviceInfo) {\n  // 设备信息详情\n  hilog.info(0x0001, 'demo', `device state changed.`);\n}\n\n// 取消订阅deviceStateChanged事件\ntry {\n  gamePerformance.off('deviceStateChanged', onDeviceStateChange);\n} catch (error) {\n  // 取消订阅失败\n  let err = error as BusinessError;\n  hilog.error(0x0001, 'demo', `Failed to unsubscribe. Code: ${err.code}, message: ${err.message}`);\n}\n\n// 取消deviceStateChanged事件的全部订阅\ntry {\n  gamePerformance.off(\"deviceStateChanged\");\n} catch (error) {\n  // 取消订阅失败\n  let err = error as BusinessError;\n  hilog.error(0x0001, 'demo', `Failed to unsubscribe. Code: ${err.code}, message: ${err.message}`);\n}
