共享容器
ArkTS容器集
ArkTS共享容器（@arkts.collections (ArkTS容器集)）是一种在并发任务间共享传输的容器类，可以用于并发场景下的高性能数据传递。功能与Ecmascript262规范定义的容器类似，但仍然有部分差异，具体可见共享容器与原生API方法的行为差异对比。
ArkTS共享容器在多个并发任务间传递时，其默认行为是引用传递，支持多个并发任务可以操作同一个容器实例。另外，也支持拷贝传递，即每个并发任务持有一个ArkTS容器实例。
ArkTS共享容器并不是线程安全的，内部使用了fail-fast（快速失败）机制，即当检测多个并发实例同时对容器进行结构性改变时，会触发异常。因此，在容器内修改属性的场景下，开发者需要使用ArkTS提供的异步锁机制保证ArkTS容器的安全访问。
ArkTS共享容器包含如下几种：Array、Map、Set、TypedArray（Int8Array、Uint8Array、Int16Array、Uint16Array、Int32Array、Uint32Array、Uint8ClampedArray、Float32Array）、ArrayBuffer等，具体可见@arkts.collections (ArkTS容器集)。
容器集使用示例如下：
import { ArkTSUtils, collections, taskpool } from '@kit.ArkTS';\n\n@Concurrent\nasync function add(arr: collections.Array<number>, lock: ArkTSUtils.locks.AsyncLock) {\n await lock.lockAsync(() => {  // 如果不添加异步锁，任务会因为数据竞争冲突，导致抛异常失败\n   arr[0]++;\n })\n}\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    RelativeContainer() {\n      Text(this.message)\n        .id('HelloWorld')\n        .fontSize(50)\n        .fontWeight(FontWeight.Bold)\n        .alignRules({\n          center: { anchor: '__container__', align: VerticalAlign.Center },\n          middle: { anchor: '__container__', align: HorizontalAlign.Center }\n        })\n        .onClick(() => {\n          let taskGroup = new taskpool.TaskGroup();\n          let lock = new ArkTSUtils.locks.AsyncLock();\n          let arr = collections.Array.create<number>(1, 0);\n          let count = 1000;\n          while (count--) {\n            taskGroup.addTask(add, arr, lock);\n          }\n          taskpool.execute(taskGroup).then(() => {\n            console.info(`Return success: ${arr[0]} === ${count}`);\n          }).catch((e: Error) => {\n            console.error(\"Return error.\");\n          })\n        })\n    }\n    .height('100%')\n    .width('100%')\n  }\n}
共享容器与原生API方法的行为差异对比
ArkTS提供了Sendable数据相关的共享容器集，接口行为与原生API存在部分差异，具体可见下文对比。
ArkTS共享容器的类型与Ecmascript262规范定义的原生容器的类型不一致，因此采用原生容器Array的isArray()方法判断collections.Array实例对象会返回false。
[h2]Array
支持原生容器Array通过collections.Array.from方法转换为ArkTS Array容器；支持通过原生容器Array的from方法将ArkTS Array容器转换为原生容器Array。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作，否则会抛出异常。
2. 继承场景下，无法获得实际类型的返回值。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作，否则会抛出异常。
2. 继承场景下，无法获得实际类型的返回值。
[h2]ArrayBuffer
[h2]TypedArray（以Int8Array为例）
支持原生容器TypedArray通过collections.TypedArray.from方法转换为ArkTS TypedArray容器；支持通过原生容器TypedArray的from方法将ArkTS TypedArray容器转换为原生容器TypedArray。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. ArkTS不支持this，因此不支持thisArg参数。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. ArkTS不支持this，因此不支持thisArg参数。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. ArkTS不支持this，因此不支持thisArg参数。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. ArkTS不支持this，因此不支持thisArg参数。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. ArkTS不支持this，因此不支持thisArg参数。
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. 继承场景下，无法获得实际类型的返回值。
[h2]Map
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. ArkTS不支持this，因此不支持thisArg参数。
[h2]Set
1. 不允许在遍历、访问过程中进行元素的增、删、改操作否则会抛出异常。
2. ArkTS不支持this，因此不支持thisArg参数。
