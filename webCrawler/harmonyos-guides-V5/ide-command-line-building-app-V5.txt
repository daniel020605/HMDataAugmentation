搭建流水线
除了使用DevEco Studio一键式构建应用/元服务外，还可以使用命令行工具来调用Hvigor任务进行构建。通过命令行的方式构建应用或元服务，可用于构筑CI（Continuous Integration）流水线，按照计划时间自动化的构建HAP/APP、签名、安装运行等操作。
通过命令行方式构建应用或元服务，可在Windows、Linux和macOS下调用相应命令来执行，本文将以Linux系统为例进行讲解，包括准备构建环境、构建HAP、签名运行等操作。在调用命令行任务上，Windows/macOS系统与Linux系统没有区别，仅在搭建构建环境上存在差异。
 如果开发者所使用的电脑处于完全无网络的环境中，请参考无网络流水线搭建。 HarmonyOS SDK已嵌入命令行工具中，无需额外下载配置。 请在执行命令行之前，保证当前工程是可信任的，确保安全编译。 
系统平台要求
 Linux：64位操作系统 GLIBC：2.28或更高版本 内存：推荐使用16GB及以上，最小8GB 硬盘：100GB及以上 
预置条件
[h2]配置JDK
 下载JDK，只支持JDK 17版本。 在Terminal里，进入JDK软件包目录，执行如下命令，解压已经下载好的安装包，其中jdk-17.0.6_linux-x64_bin.tar.gz为软件包名称，请根据实际配置进行修改。tar -xvf jdk-17.0.6_linux-x64_bin.tar.gz  配置JDK环境变量。#jdk\nexport JAVA_HOME=/opt/jdk-17.0.6_linux-x64_bin\nexport PATH=$PATH:$JAVA_HOME/bin  执行如下命令，检查JDK安装结果。java -version   
[h2]获取命令行工具
 命令行工具获取。其他系统(Windows/macOS)请根据实际情况下载对应版本。 解压该压缩包，在sdk-linux-xxx/commandline目录下找到命令行工具压缩包commandline-tools-linux-xxx.zip。 执行如下命令，解压命令行工具，工具名称请根据实际情况进行修改。unzip commandline-tools-linux-x64-5.0.3.XXX.zip  将解压后所在的路径定义为COMMANDLINE_TOOL_DIR，在后续配置hdc、hvigor、ohpm工具环境变量时使用。  
[h2]配置hdc环境变量
hdc命令行工具用于HarmonyOS应用/元服务调试所需的工具，该工具存放在命令行工具自带的sdk下的toolchains目录中。为方便使用hdc命令行工具，请将其添加到环境变量中。
 请先完成获取命令行工具。 添加hdc路径到环境变量，指令如下。         hdc工具存放路径示例：${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains。        export HDC_HOME=${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains\nexport PATH=$PATH:$HDC_HOME   
[h2]配置hvigor环境变量
 请先完成获取命令行工具。 添加hvigorw路径到环境变量，指令如下。export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH  切换到工程根目录，执行如下命令，查询hvigor版本信息，确认安装成功。hvigorw -v  
[h2]配置npm镜像仓库
若您的工程在hvigor/hvigor-config.json5文件中依赖npm三方组件，流水线中则需要配置npm镜像地址，编译时才能正确地下载它。
npm config set registry https://repo.huaweicloud.com/repository/npm/\nnpm config set \"@ohos:registry\" https://repo.harmonyos.com/npm/
[h2]安装ohpm
 请先完成获取命令行工具。 添加ohpm路径到环境变量，指令如下。export PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH  执行如下命令，查询ohpm版本信息，确认安装成功。ohpm -v  配置仓库地址（可指定多个地址，','号分割），指令如下。ohpm config set registry https://ohpm.openharmony.cn/ohpm/\nohpm config set strict_ssl false  
[h2]安装libGL1库
在linux系统的构建场景下，使用纹理压缩功能需要安装libGL1库。
 请先完成获取命令行工具。 执行以下命令安装libGL1库。apt install -y libgl1-mesa-dev  
构建应用
[h2]安装工程及模块依赖
使用命令行进行构建前，需要分别进入工程及各个模块下执行ohpm install命令，安装工程及各个模块依赖的三方库。
 定义ohpm安装函数，示例如下。# 切换到指定目录$1并执行ohpm install指令\nfunction ohpm_install() {     \n    cd $1              # $1：函数第一个参数, 必须是路径     \n    ohpm install --all # 安装所有依赖\n}  定义变量 PROJECT_PATH, 表示工程目录路径，示例如下。PROJECT_PATH=xxx/xxx/project_name  # 工程路径  安装工程及各个模块的三方库依赖，示例如下。# 根据业务情况安装ohpm三方库依赖\nohpm_install \"${PROJECT_PATH}\"\n...  
[h2]执行hvigor命令进行构建
 使用hvigorw命令行工具执行构建命令。      如果在非daemon模式下，需要修改node内存配置，可在hvigorw文件中取消第15行的注释，并配置对应的数值。如将node内存配置为10240，示例如下：NODE_OPTS=\"--max-old-space-size=10240\" 如果是在daemon模式下，hvigorw会自动读取hvigor-config.json5文件中\"nodeOptions\"的配置。// hvigor-config.json5文件\n{  \n  ...\n  \"nodeOptions\": {\n     \"maxOldSpaceSize\": 10240                  /* Enable nodeOptions maxOldSpaceSize compilation. Unit M. Used for the daemon process */\n  }\n} 本文使用Linux作为流水线构建环境，Linux环境会对大小写敏感，如果您的代码引用中有大小写错误（例如代码中import funcA form './aaa'，而实际文件为AAA.ets），而且开发环境是Windows或者Mac，那么有可能出现Windows或者Mac环境下编译通过，而Linux环境下编译不通过的现象。通过在项目级的build-profile.json5文件中配置caseSensitiveCheck为true来打开大小写敏感，保持Windows或者Mac环境编译与Linux环境编译结果一致。// build-profile.json5文件\n{\n    \"name\": \"default\",\n    \"compatibleSdkVersion\": \"5.0.0(12)\",\n    \"targetSdkVersion\": \"5.0.0(12)\",\n    \"runtimeOS\": \"HarmonyOS\",\n    \"buildOption\": {\n      \"strictMode\": {\n        \"caseSensitiveCheck\" : true\n      }\n    }\n}    # 根据业务情况，执行相应的构建命令, 示例如下\n\n# clean工程\nhvigorw clean --no-daemon\n\n# 构建Hap, 生成产物：${PROJECT_PATH}/{moduleName}/build/{productName}/outputs/{targetName}/xxx.hap\nhvigorw assembleHap --mode module -p product=default -p buildMode=debug --no-daemon\n\n# 构建Hsp, 生成产物：${PROJECT_PATH}/{moduleName}/build/{productName}/outputs/{targetName}/(xxx.har | xxx.hsp)\nhvigorw assembleHsp --mode module -p module=library@default -p product=default --no-daemon\n\n# 构建Har, 生成产物：${PROJECT_PATH}/{moduleName}/build/{productName}/outputs/{targetName}/outputs/xxx.har\nhvigorw assembleHar --mode module -p module=library1@default -p product=default --no-daemon\n\n# 构建App, 生成产物: ${PROJECT_PATH}/build/outputs/{productName}/xxx.app\nhvigorw assembleApp --mode project -p product=default -p buildMode=debug --no-daemon   构建命令完成后，工程或模块下build目录中会生成相应的hap/hsp/har/app编译产物。 
补充说明：
选项
说明
-p buildMode={debug | release}
采用debug/release模式进行编译构建。
缺省时：构建Hap/Hsp/Har时为debug模式，构建App时为release模式。
关于构建模式的详细说明，请参考灵活定制编译选项。针对HAR构建，请参考构建HAR。
-p product={ProductName}
指定product进行编译, 编译product下配置的module target。
缺省时：默认为default。
-p module={ModuleName}@{TargetName}
指定模块及target进行编译，可指定多个相同类型的模块进行编译以逗号分割；TargetName不指定时默认为default。
限制：此参数需要与--mode module参数搭配使用。
缺省时：执行AssembleHap任务会编译工程下所有模块，默认指定target为default。
-p ohos-test-coverage={true | false}
执行测试框架代码覆盖率插桩编译。
选项
说明
clean
清理构建产物
assembleHap
构建Hap应用
assembleApp
构建App应用
assembleHsp
构建Hsp包
assembleHar
构建Har包
附：hvigor命令行参数详见：常用命令。
运行应用
[h2]准备申请签名所需文件
准备好申请签名所需3个文件：密钥（.p12文件）、数字证书（.cer文件）、Profile（.p7b文件）。
生成密钥和证书请求文件
使用Open JDK携带的Keytool工具生成密钥和证书请求文件。
 使用管理员身份运行命令行工具。  切换到keytool工具所在路径，路径为DevEco Studio安装目录下的jbr\\bin目录。 执行如下命令，生成公私钥文件。例如，生成的密钥库名称为idedemokey.p12，存储到D盘根目录下。keytool -genkeypair -alias \"ide_demo_app\" -keyalg EC -sigalg SHA256withECDSA -dname \"C=CN,O=HUAWEI,OU=HUAWEI IDE,CN=ide_demo_app\"  -keystore d:\\\\idedemokey.p12 -storetype pkcs12 -validity 9125 -storepass 123456Abc -keypass 123456Abc 生成公私钥文件的参数说明如下：  alias：密钥的别名信息，用于标识密钥名称。 sigalg：签名算法，固定为SHA256withECDSA。 dname：按照操作界面提示进行输入。          C：国家/地区代码，如CN。 O：组织名称，如HUAWEI。 OU：组织单位名称，如HUAWEI IDE。 CN：名字与姓氏，建议与别名一致。  validity：证书有效期，建议设置为9125（25年）。 storepass：设置密钥库密码，必须由大写字母、小写字母、数字和特殊符号中的两种以上字符的组合，长度至少为8位。请记住该密码，后续签名配置需要使用。 keypass：设置密钥的密码，请与storepass保持一致。   执行如下命令，执行后需要输入storepass密码，生成密钥和证书请求文件。keytool -certreq -alias \"ide_demo_app\" -keystore d:\\\\idedemokey.p12 -storetype pkcs12 -file d:\\\\idedemokey.csr 生成证书请求文件的参数说明如下：  alias：与上一步骤中输入的alias保持一致。 file：生成的证书请求文件名称，后缀为.csr。   
申请调试数字证书和Profile文件
生成证书请求文件后，在AppGallery Connect中申请、下载调试数字证书和Profile文件，具体请参考申请调试证书和Profile文件。
[h2]对HAP进行签名
通过hvigor打包生成的HAP不会携带签名信息，如果要在真机设备上运行HAP，需要使用命令行工具对HAP进行签名。
 准备好HAP签名工具hap_sign_tool.jar（在${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains/lib下）。 使用如下命令对HAP进行签名。详细的签名工具指导请参考Hap包签名工具。java -jar hap-sign-tool.jar sign-app -keyAlias \"key0\" -signAlg \"SHA256withECDSA\" -mode \"localSign\" -appCertFile \"test.cer\" -profileFile \"test.p7b\" -inFile \"hap-unsigned.hap\" -keystoreFile \"test.p12\" -outFile \"result\\hap-signed.hap\" -keyPwd \"123456\" -keystorePwd \"123456\" -signCode \"1\" 关于该命令中需要修改的参数说明如下，其余参数不需要修改：  keyAlias：密钥别名。 appCertFile：申请的调试证书文件，格式为.cer。 profileFile：申请的调试Profile文件，格式为.p7b。 inFile：通过hvigor打包生成的未携带签名信息的HAP。 keystoreFile：密钥库文件，格式为.p12。 outFile：经过签名后生成的携带签名信息的HAP。 keyPwd：密钥口令。 keystorePwd：密钥库口令。 signCode：是否开启代码签名，缺省为开启。1表示开启，0表示不开启。从5.0.0 Release版本开始，需开启代码签名，否则将导致构建出的包无法安装到设备上。   
[h2]运行应用
通过HDC工具将HAP推送到真机设备上进行安装，需要注意的是，推送的HAP必须是携带签名信息的，否则会导致HAP安装失败。
# 将打包好的hap包推送至设备中\nhdc file send \"{PROJECT_PATH}/entry/build/default/outputs/default/entry-default-signed.hap\" \"data/local/tmp/entry-default-signed.hap\"\n# 安装hap包\nhdc shell bm install -p \"data/local/tmp/entry-default-signed.hap\"\n# 删除hap包\nhdc shell rm -rf \"data/local/tmp/entry-default-signed.hap\"
在设备上运行HAP的命令如下：
hdc shell aa start -a EntryAbility -b com.example.myapplication -m entry
示例脚本
#!/bin/bash\nset -ex\n\nJAVA_HOME=xxx #指定JDK的安装目录\nCOMMANDLINE_TOOL_DIR=xxx #命令行工具的安装目录\n\n#配置hvigor、ohpm环境变量\nexport PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH\n\n#下载并配置JDK\nfunction init_JDK() {\n  if [ ! -d \"${JAVA_HOME}\" ]; then \n     mkdir \"${JAVA_HOME}\"\n  fi\n  cd ${JAVA_HOME}\n  wget --no-check-certificate -q \"${jdk下载路径}\" -O jdk-linux.tar.xz #下载jdk，需要替换jdk下载路径\n  tar -vxf jdk-linux.tar.xz\n  JDK_DIR=xxx #jdk压缩包文件里面的目录\n  cd ${JDK_DIR}\n  mv -f ./* .[^.]* ../\n  cd ..\n  rm -rf JDK_DIR jdk-linux.tar.xz\n  export JAVA_HOME=${JAVA_HOME}\n  export PATH=$JAVA_HOME/bin:$PATH\n  java -version\n}\n\n#配置hdc环境变量\nfunction init_hdc() {\n  export HDC_HOME=${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains #设置hdc工具的环境变量，hdc工具在toolchains所在路径下\n  export PATH=$HDC_HOME:$PATH\n}\n\n# 安装ohpm, 若镜像中已存在ohpm，则无需重新安装\nfunction init_ohpm() {\n    ohpm -v\n    # 配置ohpm仓库地址\n    ohpm config set registry https://ohpm.openharmony.cn/ohpm/\n}\n\n# 初始化相关路径\nPROJECT_PATH=xxx  # 工程目录\n# 进入package目录安装依赖\nfunction ohpm_install {\n    cd $1\n    ohpm install\n}\n# 环境适配\nfunction buildHAP() {\n    # 根据业务情况安装ohpm三方库依赖\n    ohpm_install \"${PROJECT_PATH}\"\n    ohpm_install \"${PROJECT_PATH}/entry\"\n    ohpm_install \"${PROJECT_PATH}/xxx\"\n    # 根据业务情况，采用对应的构建命令，可以参考IDE构建日志中的命令\n    cd ${PROJECT_PATH}\n    hvigorw clean --no-daemon\n    hvigorw assembleHap --mode module -p product=default -p debuggable=false --no-daemon # 流水线构建命令建议末尾加上--no-daemon\n}\nfunction install_hap() {\n    hdc file send \"${PROJECT_PATH}/entry/build/default/outputs/default/entry-default-signed.hap\" \"data/local/tmp/entry-default-signed.hap\"\n    hdc shell bm install -p \"data/local/tmp/entry-default-signed.hap\" \n    hdc shell rm -rf \"data/local/tmp/entry-default-signed.hap\"\n    hdc shell aa start -a MainAbility -b com.example.myapplication -m entry\n}\n\n# 使用ohpm发布har\nfunction upload_har {\n  ohpm publish pkg.har\n}\n\nfunction main {\n  local startTime=$(date '+%s')\n  init_JDK\n  init_hdc\n  init_ohpm\n  buildHAP\n  install_hap\n  upload_har\n  local endTime=$(date '+%s')\n  local elapsedTime=$(expr $endTime - $startTime)\n  echo \"build success in ${elapsedTime}s...\"\n}\nmain
