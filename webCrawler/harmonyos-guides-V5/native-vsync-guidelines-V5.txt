NativeVSync开发指导 (C/C++)
场景介绍
NativeVSync模块用来获取系统VSync信号，提供了OH_NativeVSync实例的创建、销毁以及设置VSync回调函数的能力，VSync信号到来时会调用已设置的VSync回调函数。
接口说明
详细的接口说明请参考native_vsync。
开发步骤
以下步骤描述了如何使用NativeVSync提供的Native API接口，创建和销毁OH_NativeVSync实例，以及如何设置VSync回调函数。
添加动态链接库
CMakeLists.txt中添加以下lib。
libnative_vsync.so
头文件
#include <native_vsync/native_vsync.h>
 首先需要准备一个VSync回调函数。 #include <iostream>\n\nstatic bool flag = false;\nstatic void OnVSync(long long timestamp, void* data)\n{\n    flag = true;\n    std::cout << \"OnVSync: \" << timestamp << std::endl;\n}\nOH_NativeVSync_FrameCallback callback = OnVSync; // 回调函数必须是OH_NativeVSync_FrameCallback类型 创建OH_NativeVSync实例。 char name[] = \"hello_vsync\";\nOH_NativeVSync* nativeVSync = OH_NativeVSync_Create(name, strlen(name)); 通过OH_NativeVSync实例设置VSync回调函数。 #include <unistd.h>\n#include <iostream>\n\nOH_NativeVSync_RequestFrame(nativeVSync, callback, nullptr);\nwhile (!flag) { // 判断flag值，上面的VSync回调函数被执行后才会跳出while循环，表示已经接收到VSync信号\n    std::cout << \"wait for vsync!\\n\";\n    sleep(1);\n}\nstd::cout << \"vsync come, end this thread\\n\"; 销毁OH_NativeVSync实例。 OH_NativeVSync_Destroy(nativeVSync); // 如不需要接收VSync信号，请及时销毁OH_NativeVSync实例\nnativeVSync = nullptr; // 销毁后需要及时将OH_NativeVSync实例指针变量置空，避免销毁后继续使用导致野指针异常 
