Rawfile开发指导
场景介绍
开发者可以通过本指导了解在HarmonyOS应用中，如何使用Native Rawfile接口操作Rawfile目录和文件。功能包括文件列表遍历、文件打开、搜索、读取和关闭Rawfile。
64后缀相关接口属于新增接口，新接口支持打开更大的rawfile文件(超过2G以上建议使用)，具体请参考：Rawfile接口介绍。64相关的开发步骤和非64一致，将非64接口替换为64接口即可，例如：OH_ResourceManager_OpenRawFile替换为OH_ResourceManager_OpenRawFile64。
接口说明
详细的接口说明请参考rawfile函数说明。
开发步骤
以ArkTS侧获取rawfile文件列表、rawfile文件内容、rawfile描述符{fd, offset, length}三种调用方式为例。
1. 创建工程
2. 添加依赖
创建完成后，IDE会在工程生成cpp目录，目录有libentry/index.d.ts、hello.cpp、CMakeLists.txt等文件。
 打开src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加资源的librawfile.z.so以及日志依赖libhilog_ndk.z.so。 target_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so librawfile.z.so) 打开src/main/cpp/types/libentry/index.d.ts文件，此文件声明了应用侧函数getFileList、getRawFileContent、getRawFileDescriptor。 import resourceManager from '@ohos.resourceManager';\nexport const getFileList: (resmgr: resourceManager.ResourceManager, path: string) => Array<String>;\nexport const getRawFileContent: (resmgr: resourceManager.ResourceManager, path: string) => Uint8Array;\nexport const getRawFileDescriptor: (resmgr: resourceManager.ResourceManager, path: string) => resourceManager.RawFileDescriptor;\nexport const isRawDir: (resmgr: resourceManager.ResourceManager, path: string) => Boolean; 
3. 修改源文件
 打开src/main/cpp/hello.cpp文件，文件Init会对当前方法进行初始化映射，这里定义对外接口为getFileList、getRawFileContent、getRawFileDescriptor，映射C++接口分别为GetFileList、GetRawFileContent、GetRawFileDescriptor。 EXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"getFileList\", nullptr, GetFileList, nullptr, nullptr, nullptr, napi_default, nullptr },\n        { \"getRawFileContent\", nullptr, GetRawFileContent, nullptr, nullptr, nullptr, napi_default, nullptr },\n        { \"getRawFileDescriptor\", nullptr, GetRawFileDescriptor, nullptr, nullptr, nullptr, napi_default, nullptr },\n        { \"isRawDir\", nullptr, IsRawDir, nullptr, nullptr, nullptr, napi_default, nullptr }\n    };\n\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END 把src/main/cpp/hello.cpp文件中，增加对应的三个方法，如下所示 static napi_value GetFileList(napi_env env, napi_callback_info info)\nstatic napi_value GetRawFileContent(napi_env env, napi_callback_info info)\nstatic napi_value GetRawFileDescriptor(napi_env env, napi_callback_info info)\nstatic napi_value IsRawDir(napi_env env, napi_callback_info info) 在hello.cpp文件中获取Js的资源对象，并转为Native的资源对象，即可调用资源的Native接口，获取rawfile列表、rawfile文件内容以及rawfile描述符{fd, offset, length}三种调用方式示例代码如下： #include <rawfile/raw_file.h>\n#include <rawfile/raw_dir.h>\n#include <rawfile/raw_file_manager.h>\n\n// 示例一：获取rawfile文件列表 GetFileList\nstatic napi_value GetFileList(napi_env env, napi_callback_info info)\n{\n    OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"NDKTest Begin\");\n    size_t requireArgc = 3;\n    size_t argc = 2;\n    napi_value argv[2] = { nullptr };\n    // 获取参数信息\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n\n    // argv[0]即为函数第一个参数Js资源对象，OH_ResourceManager_InitNativeResourceManager转为Native对象。\n    NativeResourceManager *mNativeResMgr = OH_ResourceManager_InitNativeResourceManager(env, argv[0]);\n\n    // 获取函数argv[1]，此为为rawfile相对路径\n    size_t strSize;\n    char strBuf[256];\n    napi_get_value_string_utf8(env, argv[1], strBuf, sizeof(strBuf), &strSize);\n    std::string dirName(strBuf, strSize);\n\n    // 获取对应的rawDir指针对象\n    RawDir* rawDir = OH_ResourceManager_OpenRawDir(mNativeResMgr, dirName.c_str());\n\n    // 获取rawDir下文件及文件夹数量\n    int count = OH_ResourceManager_GetRawFileCount(rawDir);\n\n    // 遍历获取文件名称，并保存\n    std::vector<std::string> tempArray;\n    for(int i = 0; i < count; i++) {\n        std::string filename = OH_ResourceManager_GetRawFileName(rawDir, i);\n        tempArray.emplace_back(filename);\n    }\n\n    napi_value fileList;\n    napi_create_array(env, &fileList);\n    for (size_t i = 0; i < tempArray.size(); i++) {\n        napi_value jsString;\n        napi_create_string_utf8(env, tempArray[i].c_str(), NAPI_AUTO_LENGTH, &jsString);\n        napi_set_element(env, fileList, i, jsString);\n    }\n\n    // 关闭打开的指针对象\n    OH_ResourceManager_CloseRawDir(rawDir);\n    OH_ResourceManager_ReleaseNativeResourceManager(mNativeResMgr);\n    return fileList;\n}\n\n// 示例二：获取rawfile文件内容 GetRawFileContent\nnapi_value CreateJsArrayValue(napi_env env, std::unique_ptr<uint8_t[]> &data, long length)\n{\n    napi_value buffer;\n    napi_status status = napi_create_external_arraybuffer(env, data.get(), length,\n            [](napi_env env, void *data, void *hint) {\n                delete[] static_cast<char*>(data);\n            }, nullptr, &buffer);\n    if (status != napi_ok) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"Failed to create external array buffer\");\n        return nullptr;\n    }\n    napi_value result = nullptr;\n    status = napi_create_typedarray(env, napi_uint8_array, length, buffer, 0, &result);\n    if (status != napi_ok) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"Failed to create media typed array\");\n        return nullptr;\n    }\n    data.release();\n    return result;\n}\nstatic napi_value GetRawFileContent(napi_env env, napi_callback_info info)\n{\n    OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"GetFileContent Begin\");\n    size_t requireArgc = 3;\n    size_t argc = 2;\n    napi_value argv[2] = { nullptr };\n    // 获取参数信息\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n\n    // argv[0]即为函数第一个参数Js资源对象，OH_ResourceManager_InitNativeResourceManager转为Native对象。\n    NativeResourceManager *mNativeResMgr = OH_ResourceManager_InitNativeResourceManager(env, argv[0]);\n    size_t strSize;\n    char strBuf[256];\n    napi_get_value_string_utf8(env, argv[1], strBuf, sizeof(strBuf), &strSize);\n    std::string filename(strBuf, strSize);\n\n    // 获取rawfile指针对象\n    RawFile *rawFile = OH_ResourceManager_OpenRawFile(mNativeResMgr, filename.c_str());\n    if (rawFile != nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"OH_ResourceManager_OpenRawFile success\");\n    }\n    // 获取rawfile大小并申请内存\n    long len = OH_ResourceManager_GetRawFileSize(rawFile);\n    std::unique_ptr<uint8_t[]> data= std::make_unique<uint8_t[]>(len);\n\n    // 一次性读取rawfile全部内容\n    int res = OH_ResourceManager_ReadRawFile(rawFile, data.get(), len);\n\n    // 多次部分读取rawfile, 每次读取100 Bytes。获取全部内容\n    // long offset = 0;\n    // while (OH_ResourceManager_GetRawFileRemainingLength(rawFile) > 0) {\n    //     OH_ResourceManager_ReadRawFile(rawFile, data.get() + offset, 100);\n    //     offset += 100;\n    // }\n\n    // 关闭打开的指针对象\n    OH_ResourceManager_CloseRawFile(rawFile);\n    OH_ResourceManager_ReleaseNativeResourceManager(mNativeResMgr);\n    // 转为js对象\n    return CreateJsArrayValue(env, data, len);\n}\n\n// 示例三：获取rawfile文件描述符 GetRawFileDescriptor\nnapi_value createJsFileDescriptor(napi_env env, RawFileDescriptor &descriptor)\n{\n    napi_value result;\n    napi_status status = napi_create_object(env, &result);\n    if (status != napi_ok) {\n        return result;\n    }\n\n    napi_value fd;\n    status = napi_create_int32(env, descriptor.fd, &fd);\n    if (status != napi_ok) {\n        return result;\n    }\n    status = napi_set_named_property(env, result, \"fd\", fd);\n    if (status != napi_ok) {\n        return result;\n    }\n\n    napi_value offset;\n    status = napi_create_int64(env, descriptor.start, &offset);\n    if (status != napi_ok) {\n        return result;\n    }\n    status = napi_set_named_property(env, result, \"offset\", offset);\n    if (status != napi_ok) {\n        return result;\n    }\n\n    napi_value length;\n    status = napi_create_int64(env, descriptor.length, &length);\n    if (status != napi_ok) {\n        return result;\n    }\n    status = napi_set_named_property(env, result, \"length\", length);\n    if (status != napi_ok) {\n        return result;\n    }\n    return result;\n}\nstatic napi_value GetRawFileDescriptor(napi_env env, napi_callback_info info)\n{\n    OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"NDKTest GetRawFileDescriptor Begin\");\n    size_t requireArgc = 3;\n    size_t argc = 2;\n    napi_value argv[2] = { nullptr };\n    // 获取参数信息\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    \n    napi_valuetype valueType;\n    napi_typeof(env, argv[0], &valueType);\n    // 获取native的resourceManager对象\n    NativeResourceManager *mNativeResMgr = OH_ResourceManager_InitNativeResourceManager(env, argv[0]);\n    size_t strSize;\n    char strBuf[256];\n    napi_get_value_string_utf8(env, argv[1], strBuf, sizeof(strBuf), &strSize);\n    std::string filename(strBuf, strSize);\n    // 获取rawfile指针对象\n    RawFile *rawFile = OH_ResourceManager_OpenRawFile(mNativeResMgr, filename.c_str());\n    if (rawFile != nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"OH_ResourceManager_OpenRawFile success\");\n    }\n    // 获取rawfile的描述符RawFileDescriptor {fd, offset, length}\n    RawFileDescriptor descriptor;\n    OH_ResourceManager_GetRawFileDescriptor(rawFile, descriptor);\n    // 关闭打开的指针对象\n    OH_ResourceManager_CloseRawFile(rawFile);\n    OH_ResourceManager_ReleaseNativeResourceManager(mNativeResMgr);\n    // 转为js对象\n    return createJsFileDescriptor(env,descriptor);\n}\nnapi_value CreateJsBool(napi_env env, bool &bValue)\n{\n    napi_value jsValue = nullptr;\n    if (napi_get_boolean(env, bValue, &jsValue) != napi_ok) {\n        return nullptr;\n    }\n    return jsValue;\n}\nstatic napi_value IsRawDir(napi_env env, napi_callback_info info)\n{\n    OH_LOG_Print(LOG_APP, LOG_ERROR, GLOBAL_RESMGR, tag, \"NDKTest IsRawDir Begin\");\n    size_t requireArgc = 3;\n    size_t argc = 2;\n    napi_value argv[2] = { nullptr };\n    // 获取参数信息\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n\n    napi_valuetype valueType;\n    napi_typeof(env, argv[0], &valueType);\n    // 获取native的resourceManager对象\n    NativeResourceManager *mNativeResMgr = OH_ResourceManager_InitNativeResourceManager(env, argv[0]);\n\n    napi_valuetype valueType1;\n    napi_typeof(env, argv[1], &valueType);\n    if (valueType1 == napi_undefined || valueType1 == napi_null) {\n        bool temp = false;\n        return CreateJsBool(env, temp);\n    }\n    size_t strSize;\n    char strBuf[256];\n    napi_get_value_string_utf8(env, argv[1], strBuf, sizeof(strBuf), &strSize);\n    std::string filename(strBuf, strSize);\n    // 获取rawfile指针对象\n    bool result = OH_ResourceManager_OpenRawFile(mNativeResMgr, filename.c_str());\n    OH_ResourceManager_ReleaseNativeResourceManager(mNativeResMgr);\n    return CreateJsBool(env, result);\n} 
4. Js侧调用
 打开src\\main\\ets\\pages\\index.ets, 导入\"libentry.so\"; 资源获取包括获取本应用包资源、应用内跨包资源、跨应用包资源。 获取本应用包resourceManager对象，通过.context().resourceManager方法。 获取应用内跨包resourceManager对象，通过.context().createModuleContext().resourceManager 方法。 获取跨应用包resourceManager对象，通过.context.createModuleContext(bundleName:'bundleName name',moduleName:'module name').resourceManager方法，该方法仅支持系统应用使用。 Context的更多使用信息请参考应用上下文Context。 调用Native接口getFileList即为src/main/cpp/types/libentry/index.d.ts中声明的接口，传入js的资源对象，以及rawfile文件夹的相对路径。 获取本应用包资源resourceManager对象的示例如下: import hilog from '@ohos.hilog';\nimport testNapi from 'libentry.so'  // 导入so\n@Entry\n@Component\nstruct Index {\n    @State message: string = 'Hello World'\n    private resmgr = getContext().resourceManager;  // 获取本应用包的资源对象\n    build() {\n        Row() {\n        Column() {\n            Text(this.message)\n            .fontSize(50)\n            .fontWeight(FontWeight.Bold)\n            .onClick(() => {\n                hilog.isLoggable(0x0000, 'testTag', hilog.LogLevel.INFO);\n                let rawfilelist = testNapi.getFileList(this.resmgr, \"\"); //传入资源对象，以及访问的rawfile文件夹名称\n                console.log(\"rawfilelist\" + rawfilelist);\n                let rawfileContet = testNapi.getRawFileContent(this.resmgr, \"rawfile1.txt\");\n                console.log(\"rawfileContet\" + rawfileContet);\n                let rawfileDescriptor = testNapi.getRawFileDescriptor(this.resmgr, \"rawfile1.txt\");\n                console.log(\"getRawFileDescriptor\" + rawfileDescriptor.fd, rawfileDescriptor.offset, rawfileDescriptor.length);\n                let ret = testNapi.isRawDir(this.resmgr, \"rawfile1.txt\");\n            })\n        }\n        .width('100%')\n        }\n        .height('100%')\n    }\n} 
