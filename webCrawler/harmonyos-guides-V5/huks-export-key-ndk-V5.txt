密钥导出(C/C++)
业务需要获取持久化存储的非对称密钥的公钥时使用，当前支持ECC/RSA/ED25519/X25519/SM2的公钥导出。
轻量级设备仅支持RSA公钥导出。
在CMake脚本中链接相关动态库
target_link_libraries(entry PUBLIC libhuks_ndk.z.so)
开发步骤
 构造对应参数。  keyAlias：密钥别名，封装成OH_Huks_Blob结构，密钥别名最大长度为64字节。 paramSetIn：预留参数，暂不需要处理，传空即可。 key：用于放置导出的公钥，为OH_Huks_Blob类型对象，需要业务提前申请好内存，需申请足够容纳获取到的密钥属性集的内存大小。  调用接口OH_Huks_GetKeyItemParamSet，传入上述参数。 返回值为成功码/错误码，导出公钥以标准的X.509规范的DER格式封装在参数key中，具体请参考公钥材料格式。 
#include \"huks/native_huks_api.h\"\n#include \"huks/native_huks_param.h\"\n#include \"napi/native_api.h\"\n#include <string.h>\nstatic napi_value ExportKey(napi_env env, napi_callback_info info)\n{\n    /* 1. 参数构造：确定密钥别名 */\n    const char *alias = \"test_key\";\n    struct OH_Huks_Blob aliasBlob = { .size = (uint32_t)strlen(alias), .data = (uint8_t *)alias };\n    /* 构造参数：为待导出公钥申请内存 */\n    uint8_t *pubKey = (uint8_t *)malloc(512); // 请业务按实际密钥大小评估申请\n    if (pubKey == nullptr) {\n        return nullptr;\n    }\n    struct OH_Huks_Blob keyBlob = { 256, pubKey };\n    struct OH_Huks_Result ohResult;\n    do {\n        ohResult = OH_Huks_ExportPublicKeyItem(&aliasBlob, nullptr, &keyBlob);\n        if (ohResult.errorCode != OH_HUKS_SUCCESS) {\n            break;\n        }\n    } while (0);\n    free(pubKey);\n    napi_value ret;\n    napi_create_int32(env, ohResult.errorCode, &ret);\n    return ret;\n}
