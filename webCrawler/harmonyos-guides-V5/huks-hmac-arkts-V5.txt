HMAC(ArkTS)
HMAC是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）。具体的场景介绍及支持的算法规格，请参考HMAC介绍与算法规格。
开发步骤
生成密钥
 指定密钥别名。 初始化密钥属性集。 调用generateKeyItem生成密钥，HMAC支持的规格请参考密钥生成。 
除此之外，开发者也可以参考密钥导入的规格介绍，导入已有的密钥。
执行HMAC
 获取密钥别名。 获取待运算的数据。 调用initSession初始化密钥会话，并获取会话的句柄handle。 调用finishSession结束密钥会话，获取哈希后的数据。 
/*\n * 以下以HMAC密钥的Promise操作使用为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet HmackeyAlias = 'test_HMAC';\nlet handle: number;\nlet plainText = '123456';\nlet hashData: Uint8Array;\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetHMACProperties() {\n  const properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_HMAC\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_MAC\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA384,\n  }];\n  return properties;\n}\n\nasync function GenerateHMACKey() {\n  /*\n  * 模拟生成密钥场景\n  * 1. 确定密钥别名\n  */\n  /*\n  * 2. 获取生成密钥算法参数配置\n  */\n  let genProperties = GetHMACProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  /*\n  * 3. 调用generateKeyItem\n  */\n  await huks.generateKeyItem(HmackeyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate HMAC Key success`);\n    }).catch((error: Error) => {\n      console.error(`promise: generate HMAC Key failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function HMACData() {\n  /*\n  * 模拟HMAC场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待哈希的数据\n  */\n  /*\n  * 3. 获取HMAC算法参数配置\n  */\n  let hmacProperties = GetHMACProperties();\n  let options: huks.HuksOptions = {\n    properties: hmacProperties,\n    inData: StringToUint8Array(plainText)\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(HmackeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init EncryptData failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取HMAC的结果\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: HMAC data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      hashData = data.outData as Uint8Array;\n    }).catch((error: Error) => {\n      console.error(`promise: HMAC data failed, ${JSON.stringify(error)}`);\n    })\n}
