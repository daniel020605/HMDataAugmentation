附录
标准化事件信息
定义值
回传值
含义说明
激活应用
1
历史首次激活应用
启动应用
2
打开应用
次日留存
3
次日仍然使用应用
付费
4
在应用内发生付费
提交表单
5
在应用内提交表单
授权
6
发生应用的授权
注册
7
注册应用或服务
关键页面访问
9
发生关键页面浏览行为
申请
14
申请服务
下单
18
将购物清单正式生成订单
预约
21
预约商品、内容或服务
归因来源签名计算规则
1.按照如下规则（字段顺序及分隔符）拼接待签名的字符串：
adTechId+ '\\u2063' + campaignId+ '\\u2063'  + destinationId+ '\\u2063' + serviceTag+ '\\u2063' + mmpIdStr + '\\u2063' + nonce + '\\u2063' + timestamp
其中，mmpIdStr生成规则为：
若监测平台的数组不为空，则将监测平台中的元素以'\\u2063'为连接符进行拼接，假设mmpIds中有两个监测平台，拼接示例：
mmpIdStr = mmpId1 + '\\u2063' + mmpId2
2.使用分发平台在应用归因服务云侧注册角色时，提供的公钥所对应的私钥，对步骤1拼接的字符串进行签名计算（签名算法：SHA256WithRSA/PSS；生成密钥位数：RSA3072）。
3.接口中字段不为空则参与签名/验签，否则不参与签名/验签。
生成签名方法
您可以参考如下代码生成签名，也可以自行生成签名。
import { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { promptAction } from '@kit.ArkUI';\nimport { AegRsaSign } from \"@hms-security/agoh-crypto\";  //具体引用方法参考本示例代码底部说明\n\n\nconst TAG: string = 'SignUtil';\nconst SEPARATOR: string = '\\u2063';\n\nexport class SignUtil {\n  public static genSignContent(adTechId: string, campaignId: string, destinationId: string, mmpIds: string[], serviceTag: string, nonce: string, timestamp: number) {\n    // mmpIdStr = mmpId1 + '\\u2063' + mmpId2\n    // signContent:string= adTechId+ '\\u2063' + campaignId+ '\\u2063'  + destinationId+ '\\u2063' + serviceTag+ '\\u2063' + mmpIdStr + '\\u2063' + nonce + '\\u2063' + timestamp\n    let content = SignUtil.addSeparator(adTechId)\n      + SignUtil.addSeparator(campaignId)\n      + SignUtil.addSeparator(destinationId)\n      + SignUtil.addSeparator(serviceTag)\n      + SignUtil.genMmpIds(mmpIds)\n      + SignUtil.addSeparator(nonce)\n      + timestamp;\n    hilog.info(0,TAG,`content = ${JSON.stringify(content)}`);\n    return content;\n  }\n\n  private static addSeparator(value: string | undefined): string {\n    return value ? value + SEPARATOR : '';\n  }\n\n  private static genMmpIds(mmpIds: string[]) {\n    let result: string = '';\n    for (let mmpId of mmpIds) {\n      if (mmpId) {\n        result += SignUtil.addSeparator(mmpId);\n      }\n    }\n    return result;\n  }\n\n  public static getSign(content: string, privateKey: string): Promise<string> {\n    return new Promise<string>((resolve) => {\n      AegRsaSign.ohAegSignRSAWithPSSTextBase64(content, privateKey).then(async (sign: string) => {\n        hilog.info(0, TAG, \"getSign success.\");\n        resolve(sign);\n      }).catch((error: BusinessError) => {\n        hilog.error(0, TAG, `getSign failed. code is ${error.code}, message is ${error.message}`);\n        promptAction.showToast({\n          message: `getSign failed.`\n        })\n      });\n    })\n  }\n}
其中import {AegRsaSign} from \"@hms-security/agoh-crypto\" ， 使用AegRsaSign.ohAegSignRSAWithPSSTextBase64生成签名，使用方法如下:
执行安装命令：ohpm i @hms-security/agoh-crypto
具体的接口使用方法，请参见ohAegSignRSAWithPSSTextBase64
