通用属性协议开发指导
简介
通用属性协议是GATT（Generic Attribute）的缩写，它是一种用于在蓝牙低功耗设备之间传输数据的协议，定义了一套通用的属性和服务框架。通过GATT协议，蓝牙设备可以向其他设备提供服务，也可以从其他设备获取服务。
场景介绍
主要场景有：
 连接server端读取和写入信息。 server端操作services和通知客户端信息。 
接口说明
完整的 JS API 说明以及实例代码请参考：GATT 接口。
具体接口说明如下表。
主要场景开发步骤
[h2]连接server端读取和写入信息
 import需要的ble模块。 创建gattClient实例对象。 连接gattServer。 读取gattServer的特征值和描述符。 向gattServer写入特征值和描述符。 断开连接，销毁gattClient实例。 示例代码: import { ble } from '@kit.ConnectivityKit';\nimport { constant } from '@kit.ConnectivityKit';\nimport { AsyncCallback, BusinessError } from '@kit.BasicServicesKit';\n\nconst TAG: string = 'GattClientManager';\n\nexport class GattClientManager {\n  device: string | undefined = undefined;\n  gattClient: ble.GattClientDevice | undefined = undefined;\n  connectState: ble.ProfileConnectionState = constant.ProfileConnectionState.STATE_DISCONNECTED;\n  myServiceUuid: string = '00001810-0000-1000-8000-00805F9B34FB';\n  myCharacteristicUuid: string = '00001820-0000-1000-8000-00805F9B34FB';\n  myFirstDescriptorUuid: string = '00002902-0000-1000-8000-00805F9B34FB'; // 2902一般用于notification或者indication\n  mySecondDescriptorUuid: string = '00002903-0000-1000-8000-00805F9B34FB';\n  found: boolean = false;\n\n  // 构造BLEDescriptor\n  private initDescriptor(des: string, value: ArrayBuffer): ble.BLEDescriptor {\n    let descriptor: ble.BLEDescriptor = {\n      serviceUuid: this.myServiceUuid,\n      characteristicUuid: this.myCharacteristicUuid,\n      descriptorUuid: des,\n      descriptorValue: value\n    };\n    return descriptor;\n  }\n\n  // 构造BLECharacteristic\n  private initCharacteristic(): ble.BLECharacteristic {\n    let descriptors: Array<ble.BLEDescriptor> = [];\n    let descBuffer = new ArrayBuffer(2);\n    let descValue = new Uint8Array(descBuffer);\n    descValue[0] = 11;\n    descValue[1] = 12;\n    descriptors[0] = this.initDescriptor(this.myFirstDescriptorUuid, new ArrayBuffer(2));\n    descriptors[1] = this.initDescriptor(this.mySecondDescriptorUuid, descBuffer);\n    let charBuffer = new ArrayBuffer(2);\n    let charValue = new Uint8Array(charBuffer);\n    charValue[0] = 1;\n    charValue[1] = 2;\n    let characteristic: ble.BLECharacteristic = {\n      serviceUuid: this.myServiceUuid,\n      characteristicUuid: this.myCharacteristicUuid,\n      characteristicValue: charBuffer,\n      descriptors: descriptors\n    };\n    return characteristic;\n  }\n\n  private logCharacteristic(char: ble.BLECharacteristic) {\n    let message = 'logCharacteristic uuid:' + char.characteristicUuid + '\\n';\n    let value = new Uint8Array(char.characteristicValue);\n    message += 'logCharacteristic value: ';\n    for (let i = 0; i < char.characteristicValue.byteLength; i++) {\n      message += value[i] + ' ';\n    }\n    console.info(TAG, message);\n  }\n\n  private logDescriptor(des: ble.BLEDescriptor) {\n    let message = 'logDescriptor uuid:' + des.descriptorUuid + '\\n';\n    let value = new Uint8Array(des.descriptorValue);\n    message += 'logDescriptor value: ';\n    for (let i = 0; i < des.descriptorValue.byteLength; i++) {\n      message += value[i] + ' ';\n    }\n    console.info(TAG, message);\n  }\n\n  private checkService(services: Array<ble.GattService>): boolean {\n    for (let i = 0; i < services.length; i++) {\n      if (services[i].serviceUuid != this.myServiceUuid) {\n        continue;\n      }\n      for (let j = 0; j < services[i].characteristics.length; j++) {\n        if (services[i].characteristics[j].characteristicUuid != this.myCharacteristicUuid) {\n          continue;\n        }\n        for (let k = 0; k < services[i].characteristics[j].descriptors.length; k++) {\n          if (services[i].characteristics[j].descriptors[k].descriptorUuid == this.myFirstDescriptorUuid) {\n            console.info(TAG, 'find expected service from server');\n            return true;\n          }\n        }\n      }\n    }\n    console.error(TAG, 'no expected service from server');\n    return false;\n  }\n\n  // 1. 订阅连接状态变化事件\n  public onGattClientStateChange() {\n    if (!this.gattClient) {\n      console.error(TAG, 'no gattClient');\n      return;\n    }\n    try {\n      this.gattClient.on('BLEConnectionStateChange', (stateInfo: ble.BLEConnectionChangeState) => {\n        let state = '';\n        switch (stateInfo.state) {\n          case 0:\n            state = 'DISCONNECTED';\n            break;\n          case 1:\n            state = 'CONNECTING';\n            break;\n          case 2:\n            state = 'CONNECTED';\n            break;\n          case 3:\n            state = 'DISCONNECTING';\n            break;\n          default:\n            state = 'undefined';\n            break;\n        }\n        console.info(TAG, 'onGattClientStateChange: device=' + stateInfo.deviceId + ', state=' + state);\n        if (stateInfo.deviceId == this.device) {\n          this.connectState = stateInfo.state;\n        }\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 2. client端主动连接时调用\n  public startConnect(peerDevice: string) { // 对端设备一般通过ble scan获取到\n    if (this.connectState != constant.ProfileConnectionState.STATE_DISCONNECTED) {\n      console.error(TAG, 'startConnect failed');\n      return;\n    }\n    console.info(TAG, 'startConnect ' + peerDevice);\n    this.device = peerDevice;\n    // 2.1 使用device构造gattClient，后续的交互都需要使用该实例\n    this.gattClient = ble.createGattClientDevice(peerDevice);\n    try {\n      this.onGattClientStateChange(); // 2.2 订阅连接状态\n      this.gattClient.connect(); // 2.3 发起连接\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 3. client端连接成功后，需要进行服务发现\n  public discoverServices() {\n    if (!this.gattClient) {\n      console.info(TAG, 'no gattClient');\n      return;\n    }\n    console.info(TAG, 'discoverServices');\n    try {\n      this.gattClient.getServices().then((result: Array<ble.GattService>) => {\n        console.info(TAG, 'getServices success: ' + JSON.stringify(result));\n        this.found = this.checkService(result); // 要确保server端的服务内容有业务所需要的服务\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 4. 在确保拿到了server端的服务结果后，读取server端特定服务的特征值时调用\n  public readCharacteristicValue() {\n    if (!this.gattClient || this.connectState != constant.ProfileConnectionState.STATE_CONNECTED) {\n      console.error(TAG, 'no gattClient or not connected');\n      return;\n    }\n    if (!this.found) { // 要确保server端有对应的characteristic\n      console.error(TAG, 'no characteristic from server');\n      return;\n    }\n\n    let characteristic = this.initCharacteristic();\n    console.info(TAG, 'readCharacteristicValue');\n    try {\n      this.gattClient.readCharacteristicValue(characteristic).then((outData: ble.BLECharacteristic) => {\n        this.logCharacteristic(outData);\n      })\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 5. 在确保拿到了server端的服务结果后，写入server端特定服务的特征值时调用\n  public writeCharacteristicValue() {\n    if (!this.gattClient || this.connectState != constant.ProfileConnectionState.STATE_CONNECTED) {\n      console.error(TAG, 'no gattClient or not connected');\n      return;\n    }\n    if (!this.found) { // 要确保server端有对应的characteristic\n      console.error(TAG, 'no characteristic from server');\n      return;\n    }\n\n    let characteristic = this.initCharacteristic();\n    console.info(TAG, 'writeCharacteristicValue');\n    try {\n      this.gattClient.writeCharacteristicValue(characteristic, ble.GattWriteType.WRITE, (err) => {\n        if (err) {\n          console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n          return;\n        }\n        console.info(TAG, 'writeCharacteristicValue success');\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 6. 在确保拿到了server端的服务结果后，读取server端特定服务的描述符时调用\n  public readDescriptorValue() {\n    if (!this.gattClient || this.connectState != constant.ProfileConnectionState.STATE_CONNECTED) {\n      console.error(TAG, 'no gattClient or not connected');\n      return;\n    }\n    if (!this.found) { // 要确保server端有对应的descriptor\n      console.error(TAG, 'no descriptor from server');\n      return;\n    }\n\n    let descBuffer = new ArrayBuffer(0);\n    let descriptor = this.initDescriptor(this.mySecondDescriptorUuid, descBuffer);\n    console.info(TAG, 'readDescriptorValue');\n    try {\n      this.gattClient.readDescriptorValue(descriptor).then((outData: ble.BLEDescriptor) => {\n        this.logDescriptor(outData);\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 7. 在确保拿到了server端的服务结果后，写入server端特定服务的描述符时调用\n  public writeDescriptorValue() {\n    if (!this.gattClient || this.connectState != constant.ProfileConnectionState.STATE_CONNECTED) {\n      console.error(TAG, 'no gattClient or not connected');\n      return;\n    }\n    if (!this.found) { // 要确保server端有对应的descriptor\n      console.error(TAG, 'no descriptor from server');\n      return;\n    }\n\n    let descBuffer = new ArrayBuffer(2);\n    let descValue = new Uint8Array(descBuffer);\n    descValue[0] = 11;\n    descValue[1] = 12;\n    let descriptor = this.initDescriptor(this.mySecondDescriptorUuid, descBuffer);\n    console.info(TAG, 'writeDescriptorValue');\n    try {\n      this.gattClient.writeDescriptorValue(descriptor, (err) => {\n        if (err) {\n          console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n          return;\n        }\n        console.info(TAG, 'writeDescriptorValue success');\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 8.client端主动断开时调用\n  public stopConnect() {\n    if (!this.gattClient || this.connectState != constant.ProfileConnectionState.STATE_CONNECTED) {\n      console.error(TAG, 'no gattClient or not connected');\n      return;\n    }\n\n    console.info(TAG, 'stopConnect ' + this.device);\n    try {\n      this.gattClient.disconnect(); // 8.1 断开连接\n      this.gattClient.off('BLEConnectionStateChange', (stateInfo: ble.BLEConnectionChangeState) => {\n      });\n      this.gattClient.close() // 8.2 如果不再使用此gattClient，则需要close\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n}\n\nlet gattClientManager = new GattClientManager();\nexport default gattClientManager as GattClientManager; 错误码请参见蓝牙服务子系统错误码。 
[h2]server端操作services和通知客户端信息
 import需要的ble模块。 创建gattServer实例对象。 添加services信息。 当向gattServer写入特征值通知gattClient。 移除services信息。 注销gattServer实例。 示例代码: import { ble } from '@kit.ConnectivityKit';\nimport { constant } from '@kit.ConnectivityKit';\nimport { AsyncCallback, BusinessError } from '@kit.BasicServicesKit';\n\nconst TAG: string = 'GattServerManager';\n\nexport class GattServerManager {\n  gattServer: ble.GattServer | undefined = undefined;\n  connectState: ble.ProfileConnectionState = constant.ProfileConnectionState.STATE_DISCONNECTED;\n  myServiceUuid: string = '00001810-0000-1000-8000-00805F9B34FB';\n  myCharacteristicUuid: string = '00001820-0000-1000-8000-00805F9B34FB';\n  myFirstDescriptorUuid: string = '00002902-0000-1000-8000-00805F9B34FB'; // 2902一般用于notification或者indication\n  mySecondDescriptorUuid: string = '00002903-0000-1000-8000-00805F9B34FB';\n\n  // 构造BLEDescriptor\n  private initDescriptor(des: string, value: ArrayBuffer): ble.BLEDescriptor {\n    let descriptor: ble.BLEDescriptor = {\n      serviceUuid: this.myServiceUuid,\n      characteristicUuid: this.myCharacteristicUuid,\n      descriptorUuid: des,\n      descriptorValue: value\n    };\n    return descriptor;\n  }\n\n  // 构造BLECharacteristic\n  private initCharacteristic(): ble.BLECharacteristic {\n    let descriptors: Array<ble.BLEDescriptor> = [];\n    let descBuffer = new ArrayBuffer(2);\n    let descValue = new Uint8Array(descBuffer);\n    descValue[0] = 31;\n    descValue[1] = 32;\n    descriptors[0] = this.initDescriptor(this.myFirstDescriptorUuid, new ArrayBuffer(2));\n    descriptors[1] = this.initDescriptor(this.mySecondDescriptorUuid, descBuffer);\n    let charBuffer = new ArrayBuffer(2);\n    let charValue = new Uint8Array(charBuffer);\n    charValue[0] = 21;\n    charValue[1] = 22;\n    let characteristic: ble.BLECharacteristic = {\n      serviceUuid: this.myServiceUuid,\n      characteristicUuid: this.myCharacteristicUuid,\n      characteristicValue: charBuffer,\n      descriptors: descriptors\n    };\n    return characteristic;\n  }\n\n  // 1. 订阅连接状态变化事件\n  public onGattServerStateChange() {\n    if (!this.gattServer) {\n      console.error(TAG, 'no gattServer');\n      return;\n    }\n    try {\n      this.gattServer.on('connectionStateChange', (stateInfo: ble.BLEConnectionChangeState) => {\n        let state = '';\n        switch (stateInfo.state) {\n          case 0:\n            state = 'DISCONNECTED';\n            break;\n          case 1:\n            state = 'CONNECTING';\n            break;\n          case 2:\n            state = 'CONNECTED';\n            break;\n          case 3:\n            state = 'DISCONNECTING';\n            break;\n          default:\n            state = 'undefined';\n            break;\n        }\n        console.info(TAG, 'onGattServerStateChange: device=' + stateInfo.deviceId + ', state=' + state);\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 2. server端注册服务时调用\n  public registerServer() {\n    let characteristics: Array<ble.BLECharacteristic> = [];\n    let characteristic = this.initCharacteristic();\n    characteristics.push(characteristic);\n    let gattService: ble.GattService = {\n      serviceUuid: this.myServiceUuid,\n      isPrimary: true,\n      characteristics: characteristics\n    };\n\n    console.info(TAG, 'registerServer ' + this.myServiceUuid);\n    try {\n      this.gattServer = ble.createGattServer(); // 2.1 构造gattServer，后续的交互都需要使用该实例\n      this.onGattServerStateChange(); // 2.2 订阅连接状态\n      this.gattServer.addService(gattService);\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 3. 订阅来自gattClient的读取特征值请求时调用\n  public onCharacteristicRead() {\n    if (!this.gattServer) {\n      console.error(TAG, 'no gattServer');\n      return;\n    }\n\n    console.info(TAG, 'onCharacteristicRead');\n    try {\n      this.gattServer.on('characteristicRead', (charReq: ble.CharacteristicReadRequest) => {\n        let deviceId: string = charReq.deviceId;\n        let transId: number = charReq.transId;\n        let offset: number = charReq.offset;\n        console.info(TAG, 'receive characteristicRead');\n        let rspBuffer = new ArrayBuffer(2);\n        let rspValue = new Uint8Array(rspBuffer);\n        rspValue[0] = 21;\n        rspValue[1] = 22;\n        let serverResponse: ble.ServerResponse = {\n          deviceId: deviceId,\n          transId: transId,\n          status: 0, // 0表示成功\n          offset: offset,\n          value: rspBuffer\n        };\n\n        try {\n          this.gattServer.sendResponse(serverResponse);\n        } catch (err) {\n          console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n        }\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 4. 订阅来自gattClient的写入特征值请求时调用\n  public onCharacteristicWrite() {\n    if (!this.gattServer) {\n      console.error(TAG, 'no gattServer');\n      return;\n    }\n\n    console.info(TAG, 'onCharacteristicWrite');\n    try {\n      this.gattServer.on('characteristicWrite', (charReq: ble.CharacteristicWriteRequest) => {\n        let deviceId: string = charReq.deviceId;\n        let transId: number = charReq.transId;\n        let offset: number = charReq.offset;\n        console.info(TAG, 'receive characteristicWrite: needRsp=' + charReq.needRsp);\n        if (!charReq.needRsp) {\n          return;\n        }\n        let rspBuffer = new ArrayBuffer(0);\n        let serverResponse: ble.ServerResponse = {\n          deviceId: deviceId,\n          transId: transId,\n          status: 0, // 0表示成功\n          offset: offset,\n          value: rspBuffer\n        };\n\n        try {\n          this.gattServer.sendResponse(serverResponse);\n        } catch (err) {\n          console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n        }\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 5. 订阅来自gattClient的读取描述符请求时调用\n  public onDescriptorRead() {\n    if (!this.gattServer) {\n      console.error(TAG, 'no gattServer');\n      return;\n    }\n\n    console.info(TAG, 'onDescriptorRead');\n    try {\n      this.gattServer.on('descriptorRead', (desReq: ble.DescriptorReadRequest) => {\n        let deviceId: string = desReq.deviceId;\n        let transId: number = desReq.transId;\n        let offset: number = desReq.offset;\n        console.info(TAG, 'receive descriptorRead');\n        let rspBuffer = new ArrayBuffer(2);\n        let rspValue = new Uint8Array(rspBuffer);\n        rspValue[0] = 31;\n        rspValue[1] = 32;\n        let serverResponse: ble.ServerResponse = {\n          deviceId: deviceId,\n          transId: transId,\n          status: 0, // 0表示成功\n          offset: offset,\n          value: rspBuffer\n        };\n\n        try {\n          this.gattServer.sendResponse(serverResponse);\n        } catch (err) {\n          console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n        }\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 6. 订阅来自gattClient的写入描述符请求时调用\n  public onDescriptorWrite() {\n    if (!this.gattServer) {\n      console.error(TAG, 'no gattServer');\n      return;\n    }\n\n    console.info(TAG, 'onDescriptorWrite');\n    try {\n      this.gattServer.on('descriptorWrite', (desReq: ble.DescriptorWriteRequest) => {\n        let deviceId: string = desReq.deviceId;\n        let transId: number = desReq.transId;\n        let offset: number = desReq.offset;\n        console.info(TAG, 'receive descriptorWrite: needRsp=' + desReq.needRsp);\n        if (!desReq.needRsp) {\n          return;\n        }\n        let rspBuffer = new ArrayBuffer(0);\n        let serverResponse: ble.ServerResponse = {\n          deviceId: deviceId,\n          transId: transId,\n          status: 0, // 0表示成功\n          offset: offset,\n          value: rspBuffer\n        };\n\n        try {\n          this.gattServer.sendResponse(serverResponse);\n        } catch (err) {\n          console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n        }\n      });\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n\n  // 7. server端删除服务，不再使用时调用\n  public unRegisterServer() {\n    if (!this.gattServer) {\n      console.error(TAG, 'no gattServer');\n      return;\n    }\n\n    console.info(TAG, 'unRegisterServer ' + this.myServiceUuid);\n    try {\n      this.gattServer.removeService(this.myServiceUuid); // 7.1 删除服务\n      this.gattServer.off('connectionStateChange', (stateInfo: ble.BLEConnectionChangeState) => { // 7.2 取消订阅连接状态\n      });\n      this.gattServer.close() // 7.3 如果不再使用此gattServer，则需要close\n    } catch (err) {\n      console.error(TAG, 'errCode: ' + (err as BusinessError).code + ', errMessage: ' + (err as BusinessError).message);\n    }\n  }\n}\n\nlet gattServerManager = new GattServerManager();\nexport default gattServerManager as GattServerManager; 错误码请参见蓝牙服务子系统错误码。 
