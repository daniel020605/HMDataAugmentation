应用文件分享
应用文件分享是应用之间通过分享URI（Uniform Resource Identifier）或文件描述符FD（File Descriptor）的方式，进行文件共享的过程。
 基于URI分享方式，应用可分享单个文件，通过ohos.app.ability.wantConstant的wantConstant.Flags接口以只读或读写权限授权给其他应用。应用可通过ohos.file.fs的fs.open打开URI，并进行读写操作。当前仅支持临时授权，分享给其他应用的文件在被分享应用退出时权限被收回。 基于FD分享方式，应用可分享单个文件，通过ohos.file.fs的open接口以指定权限授权给其他应用。应用从want中解析拿到FD后可通过ohos.file.fs的读写接口对文件进行读写。 由于FD分享的文件关闭FD后，无法再打开分享文件，因此不推荐使用，本文重点介绍基于URI分享文件给其他应用或使用其他应用分享的文件。 
应用可分享目录
文件URI规范
文件URI的格式为：
格式为file://<bundleName>/<path>
 file：文件URI的标志。 bundleName：该文件资源的属主。 path：文件资源在应用沙箱中的路径。 
分享文件给其他应用
在分享文件给其他应用前，开发者需要先获取应用文件路径。
 获取文件在应用沙箱中的路径，并转换为文件URI。 import { UIAbility } from '@kit.AbilityKit';\nimport { fileUri } from '@kit.CoreFileKit';\nimport { window } from '@kit.ArkUI';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    // 获取文件的沙箱路径\n    let pathInSandbox = this.context.filesDir + \"/test1.txt\";\n    // 将沙箱路径转换为uri\n    let uri = fileUri.getUriFromPath(pathInSandbox);\n    // 获取的uri为\"file://com.example.demo/data/storage/el2/base/files/test1.txt\"\n  }\n} 设置获取文件的权限以及选择要分享的应用。 分享文件给其他应用需要使用startAbility接口，将获取到的URI填充在want的参数URI中，标注URI的文件类型，type字段可参考want属性，并通过设置want的flag来设置对应的读写权限，action字段配置为\"ohos.want.action.sendData\"表示进行应用文件分享，开发示例如下。     写权限分享时，同时授予读权限。   import { fileUri } from '@kit.CoreFileKit';\nimport { window } from '@kit.ArkUI';\nimport { wantConstant } from '@kit.AbilityKit';\nimport { UIAbility } from '@kit.AbilityKit';\nimport { Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage) {\n    // 获取文件沙箱路径\n    let filePath = this.context.filesDir + '/test1.txt';\n    // 将沙箱路径转换为uri\n    let uri = fileUri.getUriFromPath(filePath);\n    let want: Want  = {\n      // 配置被分享文件的读写权限，例如对被分享应用进行读写授权\n      flags: wantConstant.Flags.FLAG_AUTH_WRITE_URI_PERMISSION | wantConstant.Flags.FLAG_AUTH_READ_URI_PERMISSION,\n      // 配置分享应用的隐式拉起规则\n      action: 'ohos.want.action.sendData',\n      uri: uri,\n      type: 'text/plain'\n    }\n    this.context.startAbility(want)\n      .then(() => {\n        console.info('Invoke getCurrentBundleStats succeeded.');\n      })\n      .catch((err: BusinessError) => {\n        console.error(`Invoke startAbility failed, code is ${err.code}, message is ${err.message}`);\n      });\n  }\n  // ...\n} 
图1 效果示意图：
使用其他应用分享的文件
被分享应用需要在module.json5配置文件的actions标签的值配置为\"ohos.want.action.sendData\"，表示接收应用分享文件，配置uris字段，表示接收URI的类型，即只接收其他应用分享该类型的URI，如下表示本应用只接收scheme为file，类型为txt的文件，示例如下。
{\n  \"module\": {\n    //...\n    \"abilities\": [\n      {\n        //...\n        \"skills\": [\n          {\n            //...\n            \"actions\": [\n              \"ohos.want.action.sendData\"\n            ],\n            \"uris\": [\n              {\n                \"scheme\": \"file\",\n                \"type\": \"text/plain\"\n              }\n           ]\n          }\n        ]\n      }\n    ]\n  }\n}
被分享方的UIAbility被启动后，可以在其onCreate()或者onNewWant回调中获取传入的want参数信息。
通过接口want的参数获取分享文件的URI，获取文件URI后通过fs.open接口打开文件，获取对应的file对象后，可对文件进行读写操作。
// xxx.ets\nimport { fileIo as fs } from '@kit.CoreFileKit';\nimport { Want } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nfunction getShareFile() {\n  try {\n    let want: Want = {}; // 此处实际使用时应该修改为获取到的分享方传递过来的want信息\n\n    // 从want信息中获取uri字段\n    let uri = want.uri;\n    if (uri == null || uri == undefined) {\n      console.info('uri is invalid');\n      return;\n    }\n    try {\n      // 根据需要对被分享文件的URI进行相应操作。例如读写的方式打开URI获取file对象\n      let file = fs.openSync(uri, fs.OpenMode.READ_WRITE);\n      console.info('open file successfully!');\n    } catch (err) {\n      let error: BusinessError = err as BusinessError;\n      console.error(`Invoke openSync failed, code is ${error.code}, message is ${error.message}`);\n    }\n  } catch (error) {\n    let err: BusinessError = error as BusinessError;\n    console.error(`Invoke openSync failed, code is ${err.code}, message is ${err.message}`);\n  }\n}
