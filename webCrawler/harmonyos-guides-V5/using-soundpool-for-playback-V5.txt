使用SoundPool播放短音频(ArkTS)
使用SoundPool（音频池）提供的接口，可以实现低时延短音播放。
当应用开发时，经常需要使用一些急促简短的音效（如相机快门音效、系统通知音效等），此时建议调用SoundPool，实现一次加载，多次低时延播放。
SoundPool当前支持播放1MB以下的音频资源，大小超过1MB的长音频将截取1MB大小数据进行播放。
本开发指导将以SoundPool进行一次低时延播放音频的过程为例，向开发者讲解如何使用SoundPool。详细的API声明请参考SoundPool API参考。
过程包括：创建SoundPool实例，加载音频资源（包括资源的解封装与解码:解码格式参考音频解码支持），设置播放参数（循环模式/播放优先级等），播放控制（播放/停止），释放资源。
在应用开发过程中，开发者应通过监听方法检查当前播放状态并按照一定顺序调用接口，执行对应操作，否则系统可能会抛出异常或生成其他未定义的行为。具体顺序可参考下列开发步骤及对应说明。
使用SoundPool播放短音频时，涉及音频焦点管控策略的问题，请参考音频焦点指南。
开发步骤及注意事项
 调用createSoundPool方法创建SoundPool实例。 import { media } from '@kit.MediaKit';\nimport { audio } from '@kit.AudioKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet soundPool: media.SoundPool;\n// audioRenderInfo中的参数usage取值为STREAM_USAGE_UNKNOWN，STREAM_USAGE_MUSIC，STREAM_USAGE_MOVIE，\n// STREAM_USAGE_AUDIOBOOK时，SoundPool播放短音时为混音模式，不会打断其他音频播放。\nlet audioRendererInfo: audio.AudioRendererInfo = {\n  usage : audio.StreamUsage.STREAM_USAGE_MUSIC,\n  rendererFlags : 0\n};\n\nmedia.createSoundPool(5, audioRendererInfo).then((soundpool_: media.SoundPool) => {\n  if (soundpool_ != null) {\n    soundPool = soundpool_;\n    console.info('create SoundPool success');\n  } else {\n    console.error('create SoundPool fail');\n  }\n}).catch((error: BusinessError) => {\n  console.error(`soundpool catchCallback, error message:${error.message}`);\n}); 调用on('loadComplete')方法，用于监听“资源加载完成”。 soundPool.on('loadComplete', (soundId: number) => {\n  console.info('loadComplete, soundId: ' + soundId);\n}); 调用on('playFinished')方法，用于监听“播放完成”。 soundPool.on('playFinished', () => {\n  console.info(\"receive play finished message\");\n}); 调用on('error')方法，设置错误类型监听。 soundPool.on('error', (error: BusinessError) => {\n  console.info('error happened,message is :' + error.message);\n}); 调用load方法进行音频资源加载。 可以传入uri或fd加载资源，此处使用传入uri的方式为例，更多方法请参考API文档。 当系统加载完毕音频资源文件的时候，会通过loadComplete回调，通知用户资源加载完成，请在收到回调之后，再进行后续的play操作。 import { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo as fs } from '@kit.CoreFileKit';\n\nlet soundID: number;\nlet uri: string;\nasync function load() {\n  await fs.open('/test_01.mp3', fs.OpenMode.READ_ONLY).then((file: fs.File) => {\n    console.info(\"file fd: \" + file.fd);\n    uri = 'fd://' + (file.fd).toString()\n  }); // '/test_01.mp3' 作为样例，使用时需要传入文件对应路径。\n  soundPool.load(uri).then((soundId: number) => {\n    console.info('soundPool load uri success');\n    soundID = soundId;\n  }).catch((err: BusinessError) => {\n    console.error('soundPool load failed and catch error is ' + err.message);\n  })\n} 配置播放参数PlayParameters，并在收到loadComplete回调通知之后，调用play方法播放音频。多次调用play播放同一个soundID，只会播放一次。 let soundID: number;\nlet streamID: number;\nlet playParameters: media.PlayParameters = {\n    loop: 0, // 循环0次\n    rate: 2, // 2倍速\n    leftVolume: 0.5, // range = 0.0-1.0\n    rightVolume: 0.5, // range = 0.0-1.0\n    priority: 0, // 最低优先级\n  };\nsoundPool.play(soundID, playParameters, (error: BusinessError, streamId: number) => {\n  if (error) {\n    console.info(`play sound Error: errCode is ${error.code}, errMessage is ${error.message}`)\n  } else {\n    streamID = streamId;\n    console.info('play success soundid:' + streamId);\n  }\n}); 调用setLoop方法设置循环次数。 import { BusinessError } from '@kit.BasicServicesKit';\n\nlet streamID: number;\nsoundPool.setLoop(streamID, 1).then(() => {\n  console.info('setLoop success streamID:' + streamID);\n}).catch((err: BusinessError) => {\n  console.error('soundpool setLoop failed and catch error is ' + err.message);\n}); 调用setPriority方法设置优先级。 let streamID: number;\nsoundPool.setPriority(streamID, 1); 调用setVolume方法设置音量。 import { BusinessError } from '@kit.BasicServicesKit';\n\nlet streamID: number;\n// 先调用play方法获取到对应资源的streamID\n\nsoundPool.setVolume(streamID, 0.5, 0.5).then(() => {\n  console.info('setVolume success');\n}).catch((err: BusinessError) => {\n  console.error('soundpool setVolume failed and catch error is ' + err.message);\n}); 调用stop方法终止指定流的播放。 import { BusinessError } from '@kit.BasicServicesKit';\n\nlet streamID: number;\n//先调用play方法给拿到对应的streamID\n\nsoundPool.stop(streamID).then(() => {\n  console.info('stop success');\n}).catch((err: BusinessError) => {\n  console.error('soundpool load stop and catch error is ' + err.message);\n}); 调用unload方法卸载音频资源。 import { BusinessError } from '@kit.BasicServicesKit';\n\nlet soundID: number;\n// 先调用load方法获取到对应资源的soundID\n\nsoundPool.unload(soundID).then(() => {\n  console.info('unload success');\n}).catch((err: BusinessError) => {\n  console.error('soundpool unload failed and catch error is ' + err.message);\n}); 调用off('loadComplete')方法注销加载完成监听。 soundPool.off('loadComplete'); 调用off('playFinished')方法注销播放完成监听。 soundPool.off('playFinished'); 调用off('error')方法注销错误错误类型监听。 soundPool.off('error'); 调用release方法释放SoundPool实例。 import { BusinessError } from '@kit.BasicServicesKit';\n\nsoundPool.release().then(() => {\n  console.info('release success');\n}).catch((err: BusinessError) => {\n  console.error('soundpool release failed and catch error is ' + err.message);\n}); 
完整示例
下面展示了使用SoundPool进行低时延播放的完整示例代码。
import { audio } from '@kit.AudioKit';\nimport { media } from '@kit.MediaKit';\nimport { fileIo as fs } from '@kit.CoreFileKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nlet soundPool: media.SoundPool;\nlet streamId: number = 0;\nlet soundId: number = 0;\n// audioRenderInfo中的参数usage取值为STREAM_USAGE_UNKNOWN，STREAM_USAGE_MUSIC，STREAM_USAGE_MOVIE，\n// STREAM_USAGE_AUDIOBOOK时，SoundPool播放短音时为混音模式，不会打断其他音频播放。\nlet audioRendererInfo: audio.AudioRendererInfo = {\n  usage: audio.StreamUsage.STREAM_USAGE_MUSIC,\n  rendererFlags: 1\n};\nlet playParameters: media.PlayParameters = {\n  loop: 3, // 循环4次\n  rate: audio.AudioRendererRate.RENDER_RATE_NORMAL, // 正常倍速\n  leftVolume: 0.5, // range = 0.0-1.0\n  rightVolume: 0.5, // range = 0.0-1.0\n  priority: 0, // 最低优先级\n};\nlet uri: string = \"\";\nasync function create() {\n  //创建soundPool实例\n  soundPool = await media.createSoundPool(5, audioRendererInfo);\n  //注册监听\n  loadCallback();\n  finishPlayCallback();\n  setErrorCallback();\n  // 加载音频资源\n  await fs.open('/test_01.mp3', fs.OpenMode.READ_ONLY).then((file: fs.File) => {\n    console.info(\"file fd: \" + file.fd);\n    uri = 'fd://' + (file.fd).toString()\n  }); // '/test_01.mp3' 作为样例，使用时需要传入文件对应路径。\n  soundId = await soundPool.load(uri);\n}\nfunction loadCallback() {\n  // 加载完成回调\n  soundPool.on('loadComplete', (soundId_: number) => {\n    console.info('loadComplete, soundId: ' + soundId_);\n  })\n}\n//设置播放完成监听\nfunction finishPlayCallback() {\n  // 播放完成回调\n  soundPool.on('playFinished', () => {\n    console.info(\"receive play finished message\");\n    // 可进行下次播放\n  })\n}\n//设置错误类型监听\nfunction setErrorCallback() {\n  soundPool.on('error', (error: BusinessError) => {\n    console.info('error happened,message is :' + error.message);\n  })\n}\nasync function PlaySoundPool() {\n  // 开始播放，这边play也可带播放播放的参数PlayParameters，请在音频资源加载完毕，即收到loadComplete回调之后再执行play操作\n  soundPool.play(soundId, playParameters, (error, streamID: number) => {\n    if (error) {\n      console.info(`play sound Error: errCode is ${error.code}, errMessage is ${error.message}`)\n    } else {\n      streamId = streamID;\n      console.info('play success soundid:' + streamId);\n    }\n  });\n  // 设置循环播放次数\n  await soundPool.setLoop(streamId, 2); // 播放3次\n  // 设置对应流的优先级\n  await soundPool.setPriority(streamId, 1);\n  // 设置音量\n  await soundPool.setVolume(streamId, 0.5, 0.5);\n}\nasync function release() {\n  // 终止指定流的播放\n  await soundPool.stop(streamId);\n  // 卸载音频资源\n  await soundPool.unload(soundId);\n  //关闭监听\n  setOffCallback();\n  // 释放SoundPool\n  await soundPool.release();\n}\n//关闭监听\nfunction setOffCallback() {\n  soundPool.off('loadComplete');\n  soundPool.off('playFinished');\n  soundPool.off('error');\n}
