使用TaskPool执行独立的耗时任务
对于一个独立运行的耗时任务，只需要在任务执行完毕后将结果返回给宿主线程，没有上下文依赖，可以通过以下方式实现。
下面以图片加载为例进行说明。
实现子线程需要执行的任务。 // IconItemSource.ets\nexport class IconItemSource {\n  image: string | Resource = '';\n  text: string | Resource = '';\n\n  constructor(image: string | Resource = '', text: string | Resource = '') {\n    this.image = image;\n    this.text = text;\n  }\n} // IndependentTask.ets\nimport { IconItemSource } from './IconItemSource';\n \n// 在Task中执行的方法，需要添加@Concurrent注解，否则无法正常调用。\n@Concurrent\nexport function loadPicture(count: number): IconItemSource[] {\n  let iconItemSourceList: IconItemSource[] = [];\n  // 遍历添加6*count个IconItem的数据\n  for (let index = 0; index < count; index++) {\n    const numStart: number = index * 6;\n    // 此处循环使用6张图片资源\n    iconItemSourceList.push(new IconItemSource('$media:startIcon', `item${numStart + 1}`));\n    iconItemSourceList.push(new IconItemSource('$media:background', `item${numStart + 2}`));\n    iconItemSourceList.push(new IconItemSource('$media:foreground', `item${numStart + 3}`));\n    iconItemSourceList.push(new IconItemSource('$media:startIcon', `item${numStart + 4}`));\n    iconItemSourceList.push(new IconItemSource('$media:background', `item${numStart + 5}`));\n    iconItemSourceList.push(new IconItemSource('$media:foreground', `item${numStart + 6}`));\n  }\n  return iconItemSourceList;\n} 通过TaskPool中的execute方法执行上述任务，即加载图片。 // Index.ets\nimport { taskpool } from '@kit.ArkTS';\nimport { IconItemSource } from './IconItemSource';\nimport { loadPicture } from './IndependentTask';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            let iconItemSourceList: IconItemSource[] = [];\n            // 创建Task\n            let lodePictureTask: taskpool.Task = new taskpool.Task(loadPicture, 30);\n            // 执行Task，并返回结果\n            taskpool.execute(lodePictureTask).then((res: object) => {\n              // loadPicture方法的执行结果\n              iconItemSourceList = res as IconItemSource[];\n            })\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n} 
