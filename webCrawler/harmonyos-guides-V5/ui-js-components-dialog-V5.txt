dialog开发指导
dialog组件用于创建自定义弹窗，通常用来展示用户当前需要或用户必须关注的信息或操作。具体用法请参考dialog API。
创建dialog组件
在pages/index目录下的hml文件中创建一个dialog组件，并添加Button组件来触发dialog。dialog组件仅支持width、height、margin、margin-[left|top|right|bottom]、margin-[start|end]样式。
<!-- xxx.hml -->\n<div class=\"doc-page\">\n  <dialog class=\"dialogClass\" id=\"dialogId\" dragable=\"true\">\n    <div class=\"content\">\n      <text>this is a dialog</text>\n    </div>\n  </dialog>\n  <button value=\"click me\" onclick=\"opendialog\"></button>\n</div>
/* xxx.css */\n.doc-page {\n  width:100%;\n  height:100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #F1F3F5;\n}\n.dialogClass{\n  width: 80%;\n  height: 250px;\n  margin-start: 1%;\n}\n.content{\n  width: 100%;\n  height: 250px;\n  justify-content: center;\n  background-color: #e8ebec;\n  border-radius: 20px;\n}\ntext{\n  width: 100%;\n  height: 100%;\n  text-align: center;\n}\nbutton{\n  width: 70%;\n  height: 60px;\n}
// xxx.js\nexport default {\n  //Touch to open the dialog box.\n  opendialog(){\n    this.$element('dialogId').show()\n  },\n}
设置弹窗响应
开发者点击页面上非dialog的区域时，将触发cancel事件而关闭弹窗。同时也可以通过对dialog添加show和close方法来显示和关闭弹窗。
<!-- xxx.hml -->\n<div class=\"doc-page\">\n  <dialog class=\"dialogClass\" id=\"dialogId\" oncancel=\"canceldialog\">\n    <div class=\"dialogDiv\">\n      <text>dialog</text>\n      <button value=\"confirm\" onclick=\"confirmClick\"></button>\n    </div>\n  </dialog>\n  <button value=\"click me\" onclick=\"opendialog\"></button>\n</div>
/* xxx.css */\n.doc-page {\n  width:100%;\n  height:100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #F1F3F5;\n}\n.dialogClass{\n  width: 80%;\n  height: 300px;\n  margin-start: 1%;\n}\n.dialogDiv{\n  width: 100%;\n  flex-direction: column;\n  justify-content: center;\n  align-self: center;\n}\ntext{\n  height: 100px;\n  align-self: center;\n}\nbutton{\n  align-self: center;\n  margin-top: 20px;\n  width: 60%;\n  height: 80px;\n}
// xxx.js\nimport promptAction from '@ohos.promptAction';\nexport default {\n  canceldialog(e){\n    promptAction.showToast({\n      message: 'dialogCancel'\n    })\n  },\n  opendialog(){\n    this.$element('dialogId').show()\n     promptAction.showToast({\n      message: 'dialogShow'\n    })\n  },\n  confirmClick(e) {\n    this.$element('dialogId').close()\n    promptAction.showToast({\n      message: 'dialogClose'\n    })\n  },\n}
 仅支持单个子组件。 dialog属性、样式均不支持动态更新。 dialog组件不支持focusable、click-effect属性。 
场景示例
在本场景中，开发者可以通过dialog组件实现一个日程表。弹窗在打开状态下，利用Textarea组件输入当前日程，点击确认按钮后获取当前时间并保存输入文本。最后以列表形式将各日程进行展示。
<!-- xxx.hml -->\n<div class=\"doc-page\">\n  <text style=\"margin-top: 60px;margin-left: 30px;\">\n    <span>{{date}} events</span>\n  </text>\n  <div class=\"btndiv\">\n    <button type=\"circle\" class=\"btn\" onclick=\"addschedule\">+</button>\n  </div>\n<!--  for Render events data  -->\n  <list style=\"width: 100%;\">\n    <list-item type=\"item\" for=\"schedulelist\" style=\"width:100%;height: 200px;\">\n      <div class=\"schedulediv\">\n        <text class=\"text1\">{{date}}  event</text>\n        <text class=\"text2\">{{$item.schedule}}</text>\n      </div>\n    </list-item>\n  </list>\n  <dialog id=\"datedialog\" oncancel=\"canceldialog\" >\n    <div class=\"dialogdiv\">\n      <div class=\"innertxt\">\n        <text class=\"text3\">{{date}}</text>\n        <text class=\"text4\">New event</text>\n      </div>\n      <textarea placeholder=\"Event information\" onchange=\"getschedule\" class=\"area\" extend=\"true\"></textarea>\n      <div class=\"innerbtn\">\n        <button type=\"text\" value=\"Cancel\" onclick=\"cancelschedule\" class=\"btntxt\"></button>\n        <button type=\"text\" value=\"OK\" onclick=\"setschedule\" class=\"btntxt\"></button>\n      </div>\n    </div>\n  </dialog>\n</div>
/* xxx.css */\n.doc-page {\n  flex-direction: column;\n  background-color: #F1F3F5;\n}\n.btndiv {\n  width: 100%;\n  height: 200px;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n.btn {\n  radius:60px;\n  font-size: 100px;\n  background-color: #1E90FF;\n}\n.schedulediv {\n  width: 100%;\n  height: 200px;\n  flex-direction: column;\n  justify-content: space-around;\n  padding-left: 55px;\n}\n.text1 {\n  color: #000000;\n  font-weight: bold;\n  font-size: 39px;\n}\n.text2 {\n  color: #a9a9a9;\n  font-size: 30px;\n}\n.dialogdiv {\n  flex-direction: column;\n  align-items: center;\n}\n.innertxt {\n  width: 320px;\n  height: 160px;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n}\n.text3 {\n  font-family: serif;\n  color: #1E90FF;\n  font-size: 38px;\n}\n.text4 {\n  color: #a9a9a9;\n  font-size: 33px;\n}\n.area {\n  width: 320px;\n  border-bottom: 1px solid #1E90FF;\n}\n.innerbtn {\n  width: 320px;\n  height: 120px;\n  justify-content: space-around;\n}\n.btntxt {\n  text-color: #1E90FF;\n}
// xxx.js\nvar info = null;\nimport promptAction from '@ohos.promptAction';\nexport default {\n  data: {\n    curYear:'',\n    curMonth:'',\n    curDay:'',\n    date:'',\n    schedule:'',\n    schedulelist:[]\n  },\n  onInit() {\n    // Obtain the current date. \n    var date = new Date();\n    this.curYear = date.getFullYear();\n    this.curMonth = date.getMonth() + 1;\n    this.curDay = date.getDate();\n    this.date = this.curYear + '-' + this.curMonth + '-' + this.curDay;\n    this.schedulelist = []\n  },\n  addschedule(e) {\n    this.$element('datedialog').show()\n  },\n  canceldialog(e) {\n    promptAction.showToast({\n      message: 'Event setting canceled.'\n    })\n  },\n  getschedule(e) {\n    info = e.value\n  },\n  cancelschedule(e) {\n    this.$element('datedialog').close()\n    promptAction.showToast({\n      message: 'Event setting canceled.'\n    })\n  },\n//    Touch OK to save the data.\n  setschedule(e) {\n    if (e.text === '') {\n      this.schedule = info\n    } else {\n      this.schedule = info\n      var addItem =  {schedule: this.schedule,}\n      this.schedulelist.push(addItem)\n    }\n    this.$element('datedialog').close()\n  }\n}
