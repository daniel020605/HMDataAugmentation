拨打电话
场景介绍
开发者可以通过以下方式实现拨打电话的功能：
 对于三方应用，开发者可以使用makeCall接口，拉起系统电话应用，用户可以自行呼出通话。 
基本概念
 通话状态码 将当前的通话状态上报给app，可以根据当前的通话状态去做一些逻辑处理。例如在当前没有正在进行呼叫的时候，可以正常拨打新的一通电话。     名称 值 说明    CALL_STATE_UNKNOWN -1 无效状态，当获取呼叫状态失败时返回。   CALL_STATE_IDLE 0 表示没有正在进行的呼叫。   CALL_STATE_RINGING 1 表示来电正在振铃或等待。   CALL_STATE_OFFHOOK 2 表示至少有一个呼叫处于拨号、通话中或呼叫保持状态，并且没有新的来电振铃或等待。    
约束与限制
 仅支持在标准系统上运行。 设备需插入可用的SIM卡。 
接口说明
为了保证应用的运行效率，大部分API调用都是异步的，对于异步调用的API均提供了callback和Promise两种方式，以下示例均采用callback函数，更多方式可以查阅API参考。
observer模块为开发者提供订阅和取消订阅通话业务状态的功能。具体API说明详见接口文档。
开发步骤
[h2]使用makeCall拨打电话
 导入call和observer模块。 调用hasVoiceCapability，确认当前设备是否支持拨号。 调用makeCall接口，跳转到拨号界面并显示待拨号的号码。 （可选）订阅通话业务状态变化。  // import需要的模块\n import { call, observer } from '@kit.TelephonyKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n // 调用查询能力接口\n let isSupport = call.hasVoiceCapability();\n if (isSupport) {\n     // 如果设备支持呼叫能力，则继续跳转到拨号界面，并显示拨号的号码\n     call.makeCall(\"13xxxx\", (err: BusinessError) => {\n         if (!err) {\n             console.log(\"make call success.\");\n         } else {\n             console.log(\"make call fail, err is:\" + JSON.stringify(err));\n         }\n     });\n     // 订阅通话业务状态变化（可选）\n     class SlotId {slotId: number = 0}\n     class CallStateCallback {\n         state: call.CallState = call.CallState.CALL_STATE_UNKNOWN;\n         number: string = \"\";\n     }\n     let slotId: SlotId = {slotId: 0}\n     observer.on(\"callStateChange\", slotId, (data: CallStateCallback) => {\n         console.log(\"call state change, data is:\" + JSON.stringify(data));\n     });\n } 
