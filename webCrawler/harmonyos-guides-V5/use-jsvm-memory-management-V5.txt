使用JSVM-API进行内存管理
简介
JSVM-API提供了一组用于管理JavaScript虚拟机内存的API，可以更好地控制JavaScript代码使用的内存，并优化内存管理和垃圾回收机制。
基本概念
在JavaScript中，内存管理和垃圾回收是自动进行的。JavaScript虚拟机负责跟踪对象的分配和释放，并在必要时回收不再使用的内存。但是，在某些情况下，JSVM可能会消耗大量的内存，这可能会导致内存不足的错误。为了避免这种情况，JSVM-API提供了一些接口，以便更好地控制内存管理和垃圾回收机制。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]OH_JSVM_AdjustExternalMemory
设置JavaScript对象保持活动状态的外部分配内存的数量
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// OH_JSVM_AdjustExternalMemory的样例方法\nstatic JSVM_Value AdjustExternalMemory(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 分配1MB的内存\n    int64_t change = 1024 * 1024;\n    int64_t adjustedValue = 0;\n    JSVM_Status status = OH_JSVM_AdjustExternalMemory(env, change, &adjustedValue);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_AdjustExternalMemory: failed\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_AdjustExternalMemory: success\");\n        OH_LOG_INFO(LOG_APP, \"JSVM Allocate memory size: %{public}d\", adjustedValue);\n    }\n    JSVM_Value checked;\n    OH_JSVM_GetBoolean(env, true, &checked);\n    return checked;\n}\n// AdjustExternalMemory注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = AdjustExternalMemory},\n};\nstatic JSVM_CallbackStruct *method = param;\n// AdjustExternalMemory方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"adjustExternalMemory\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};
// 样例测试JS
const char *srcCallNative = R\"JS(adjustExternalMemory())JS\";
输出结果
在LOG中输出下面的信息：
JSVM OH_JSVM_AdjustExternalMemory: success
JSVM Allocate memory size: 1048576
[h2]OH_JSVM_MemoryPressureNotification
通知虚拟机系统内存不足并有选择地触发垃圾回收
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// OH_JSVM_MemoryPressureNotification的样例方法\nstatic JSVM_Value MemoryPressureNotification(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 设置当前JSVM的内存压力级别\n    JSVM_Status status = OH_JSVM_MemoryPressureNotification(env, JSVM_MEMORY_PRESSURE_LEVEL_CRITICAL);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_MemoryPressureNotification: failed\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_MemoryPressureNotification: success\");\n        OH_LOG_INFO(LOG_APP, \"JSVM Current JSVM memory pressure level: %{public}d\", JSVM_MEMORY_PRESSURE_LEVEL_CRITICAL);\n    }\n    return nullptr;\n}\n// MemoryPressureNotification注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = MemoryPressureNotification},\n};\nstatic JSVM_CallbackStruct *method = param;\n// MemoryPressureNotification方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"memoryPressureNotification\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};
// 样例测试JS
const char *srcCallNative = R\"JS(memoryPressureNotification())JS\";
输出结果
在LOG中输出下面的信息：
JSVM OH_JSVM_MemoryPressureNotification: success
JSVM Current JSVM memory pressure level: 2
