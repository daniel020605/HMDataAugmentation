Disassembler反汇编工具
简介
Disassembler是ArkTS反汇编工具，如果开发者需要分析方舟字节码文件（*.abc）相关问题，可使用Disassembler将字节数据反汇编成可阅读的汇编指令。
工具随DevEco Studio SDK发布，以windows平台为例，Disassembler工具位置为：[DevEco Studio安装目录]\\sdk[SDK版本]\\HarmonyOS\\toolchains\\ark_disasm.exe。
命令行说明
反汇编命令：
ark_disasm.exe [options] input_file output_file
参数说明：
options选项说明：
使用示例
假设已存在方舟字节码文件：test.abc，其源代码如下：
let i = 99;\nfunction show(){return i;}\nshow();
执行如下命令，就能生成反汇编文件：test.txt。生成的反汇编文件内带有操作码及格式等信息。
ark_disasm.exe test.abc test.txt
查看反汇编文件的内容。
cat test.txt
内容如下
# source binary: test.abc                                                    // 反汇编的方舟字节码文件\n\n.language ECMAScript\n\n# ====================\n# LITERALS                                                                   // 字面量数据\n\n0 0x203 { 0 [\n    MODULE_REQUEST_ARRAY: {\n    };\n]}\n\n# ====================\n# RECORDS                                                                    // 模块定义数据\n\n.record _ESConcurrentModuleRequestsAnnotation {                              // _开头这些都是固定的模块数据\n}\n\n.record test {                                                               // 一个js文件对应一个模块数据，包含了模块的相关信息（在方舟字节码文件中的位置，是否是commonjs ...）\n    u8 isCommonjs = 0x0\n    u32 moduleRecordIdx = 0x203\n    ......\n}\n\n# ====================\n# METHODS                                                                    // 方法定义数据\n\nL_ESSlotNumberAnnotation:\n    u32 slotNumberIdx { 0x0 }\n.function any test.#*#show(any a0, any a1, any a2) <static> {                // 此方法源码中的show方法，同时这里也说明了，它属于test模块\n    ldlexvar 0x0, 0x0\n    ......\n}\n\nL_ESSlotNumberAnnotation:\n    u32 slotNumberIdx { 0x3 }\n.function any test.func_main_0(any a0, any a1, any a2) <static> {            // 此方法是自动生成的，可以理解成整个js文件就是一个方法，方法名为func_main_0\n    newlexenv 0x1\n    ......\n}\n\n# ====================\n# STRING                                                                     // 符号表信息\n\n[offset:0x88, name_value:i]
使用参数--verbose，可打印偏移量等更多详细信息。
ark_disasm.exe --verbose test.abc test.txt
此处列出部分示例。
.record _ESSlotNumberAnnotation { # offset: 0x00cd, size: 0x0026 (38)                                  // 这里打印了模块在方舟字节码文件中具体的位置和大小\n}\n\n.record test { # offset: 0x00f3, size: 0x0098 (152)                                                    // 这里打印了模块在方舟字节码文件中具体的位置\n    u32 moduleRecordIdx = 0x203 # offset: 0x0144                                                   // 这里打印了模块信息的位置\n}\n......\n.function any test.#*#show(any a0, any a1, any a2) <static> { # offset: 0x0153, code offset: 0x0245    // 这里打印了方法信息具体的位置和方法中指令的具体位置\n#   CODE:\n    ldlexvar 0x0, 0x0 # offset: 0x0249, [IMM4_IMM4].........[0x3c 0x00]                            // 这里打印了每条指令的具体位置\n    ......\n}
