Repeat：子组件复用
Repeat从API version 12开始支持。
本文档仅为开发者指南。API参数说明见：Repeat API参数说明。
Repeat组件non-virtualScroll场景（不开启virtualScroll开关）中，Repeat基于数据源进行循环渲染，需要与容器组件配合使用，且接口返回的组件应当是允许包含在Repeat父容器组件中的子组件，例如，ListItem组件要求Repeat的父容器组件必须为List组件。Repeat循环渲染和ForEach相比有两个区别，一是优化了部分更新场景下的渲染性能，二是组件生成函数的索引index由框架侧来维护。
Repeat组件virtualScroll场景中，Repeat将从提供的数据源中按需迭代数据，并在每次迭代过程中创建相应的组件，必须与滚动类容器组件配合使用。当在滚动类容器组件中使用了Repeat，框架会根据滚动容器可视区域按需创建组件，当组件滑出可视区域外时，框架会缓存组件，并在下一次迭代中使用。
使用限制
 Repeat使用键值作为标识，因此键值生成函数key()必须针对每个数据生成唯一的值。 Repeat virtualScroll场景必须在滚动类容器组件内使用，仅有List、Grid、Swiper以及WaterFlow组件支持virtualScroll场景（此时配置cachedCount会生效）。其它容器组件只适用于non-virtualScroll场景。 Repeat开启virtualScroll后，在每次迭代中，必须创建且只允许创建一个子组件。不开启virtualScroll没有该限制。生成的子组件必须是允许包含在Repeat父容器组件中的子组件。 当Repeat与自定义组件/@Builder函数混用时，必须将RepeatItem类型整体进行传参，组件才能监听到数据变化，如果只传递RepeatItem.item或RepeatItem.index，将会出现UI渲染异常。 template模板目前只支持virtualScroll场景。当多个template type相同时，Repeat会覆盖旧的template()函数，仅生效最新的template()。 totalCount > array.length时，在父组件容器滚动过程中，应用需要保证列表即将滑动到数据源末尾时请求后续数据，直到数据源全部加载完成，否则列表滑动的过程中会出现滚动效果异常。解决方案见totalCount值大于数据源长度。 在滚动容器组件（List、Grid、Swiper、WaterFlow）内使用Repeat的时候，只能包含一个Repeat。以List为例，同时包含ListItem、ForEach、LazyForEach的场景是不推荐的；同时包含多个Repeat也是不推荐的。 Repeat组件的virtualScroll场景不支持V1装饰器，使用V1装饰器存在渲染异常，不建议开发者同时使用。 
键值生成规则
键值生成函数key()的目的是允许Repeat识别数组更改的细节：添加了哪些数据、删除了哪些数据，以及哪些数据改变了位置（索引）。
开发者使用建议：
 即使数据项有重复，开发者也必须保证键值key唯一（即使数据源发生变化）。 每次执行key()函数时，使用相同的数据项作为输入，输出必须是一致的。 key()中使用index是允许的，但不建议这样使用。原因是数据项移动时索引发生变化，即键值发生变化。因此Repeat会认为数据项发生了变化，并触发UI重新渲染，会降低性能表现。 推荐将简单类型数组转换为类对象数组，并添加一个readonly id属性，在构造函数中给它赋一个唯一的值。 
[h2]non-virtualScroll规则
key()可以缺省，Repeat会生成默认key值。
[h2]virtualScroll规则
和non-virtualScroll的键值生成规则基本一致，key()可以缺省。
组件生成及复用规则
[h2]non-virtualScroll规则
子组件在Repeat首次渲染时全部创建，在数据更新时会对原组件进行复用。
在Repeat组件进行数据更新时，它会依次对比上次的所有键值和本次更新之后的区别。若当前键值和上次的某一项键值相同，Repeat会直接复用子组件并对RepeatItem.index索引做对应的更新。
当Repeat将所有重复的键值对比完并做了相应的复用后，若上次的键值有不重复的且本次更新之后有新的键值生成需要新建子组件时，Repeat会复用上次多余的子组件并更新RepeatItem.item数据源和RepeatItem.index索引并刷新UI。
若上次的剩余>=本次新更新的数量，则组件完全复用并释放多余的未被复用的组件。若上次的剩余小于本次新更新的数量，将剩余的组件复用完后，Repeat会新建多出来的数据项对应的组件。
[h2]virtualScroll规则
子组件在Repeat首次渲染只生成当前需要的组件，在滑动和数据更新时会缓存下屏的节点，在需要生成新的组件时，对缓存里的组件进行复用。
滑动场景
滑动前节点现状如下图所示
当前Repeat组件template type有a和b两种，template type等于a对应的缓存池，其最大缓存值为3，template type等于b对应的缓存池，其最大缓存值为4，其父组件默认预加载节点1个。这时，我们将屏幕向右滑动，Repeat将开始复用缓存池中的节点。
index=18的数据进入屏幕及父组件预加载的范围内，此时计算出其template type等于b，这时Repeat会从template type等于b的缓存池中取出一个节点进行复用，更新它的key&index&data，该子节点内部使用了该项数据及索引的其他孙子节点会根据V2状态管理的规则做同步更新。
index=10的节点划出了屏幕及父组件预加载的范围。当UI主线程空闲时，会去检测template type等于a的缓存池是否还有空间，此时缓存池中有四个节点，超过了额定的3个，Repeat会释放掉最后一个节点。
数据更新场景
此时我们做如下更新操作，删除index=12节点，更新index=13节点的数据，更新index=14节点的template type为a，更新index=15节点的key。
此时Repeat会通知父组件重新布局，逐一对比template type值，若和原节点template type值相同，则复用该节点，更新key、index和data，若template type值发生变化，则复用相应template type的缓存池中的节点，并更新key、index和data。
上图显示node13节点更新了数据data和index；node14更新了template type和index，于是从缓存池中取走一个复用；node15由于key值发生变化并且template type不变，复用自身节点并同步更新key、index、data；node16和node17均只更新index。index=17的节点是新的，从缓存池中复用。
totalCount规则
数据源的总长度，可以大于已加载数据项的数量。令arr.length表示数据源长度，以下为totalCount的处理规则：
 totalCount缺省/非自然数时，totalCount默认为arr.length，列表正常滚动。 0 <= totalCount < arr.length时，界面中只渲染“totalCount”个数据。 totalCount > arr.length时，代表Repeat将渲染totalCount个数据，滚动条样式根据totalCount值变化。 
当totalCount > arr.length时，在父组件容器滚动过程中，应用需要保证列表即将滑动到数据源末尾时请求后续数据，开发者需要对数据请求的错误场景（如网络延迟）进行保护操作，直到数据源全部加载完成，否则列表滑动的过程中会出现滚动效果异常。
cachedCount规则
cachedCount是当前模板在Repeat的缓存池中可缓存子节点的最大数量，仅在virtualScroll场景下生效。
首先需要明确滚动类容器组件 .cachedCount()属性方法和Repeat cachedCount的区别。这两者都是为了平衡性能和内存，但是其含义是不同的。
 滚动类容器组件 .cachedCount()：是指在可见范围外预加载的节点，这些节点会位于组件树上，但不是可见范围内，List/Grid等容器组件会额外渲染这些可见范围外的节点，从而达到其性能收益。Repeat会将这些节点视为“可见”的。 Repeat cachedCount: 是指Repeat视为“不可见”的节点，这些节点是空闲的，框架会暂时保存，在需要使用的时候更新这些节点，从而实现复用。 
将cachedCount设置为当前模板的节点在屏上可能出现的最大数量时，Repeat可以做到尽可能多的复用。但后果是当屏上没有当前模板的节点时，缓存池也不会释放，应用内存会增大。需要开发者依据具体情况自行把控。
 cachedCount缺省时，框架会分别对不同template，根据屏上节点+预加载的节点个数来计算cachedCount。当屏上节点+预加载的节点个数变多时，cachedCount也会对应增长。需要注意cachedCount数量不会减少。 显式指定cachedCount，推荐设置成和屏幕上节点个数一致。需要注意，不推荐设置cachedCount小于2，因为这会导致在快速滑动场景下创建新的节点，从而导致性能劣化。 
使用场景
[h2]non-virtualScroll数据展示&操作
数据源变化
@Entry\n@ComponentV2\nstruct Parent {\n  @Local simpleList: Array<string> = ['one', 'two', 'three'];\n\n  build() {\n    Row() {\n      Column() {\n        Text('点击修改第3个数组项的值')\n          .fontSize(24)\n          .fontColor(Color.Red)\n          .onClick(() => {\n            this.simpleList[2] = 'new three';\n          })\n\n        Repeat<string>(this.simpleList)\n            .each((obj: RepeatItem<string>)=>{\n              ChildItem({ item: obj.item })\n                .margin({top: 20})\n            })\n            .key((item: string) => item)\n      }\n      .justifyContent(FlexAlign.Center)\n      .width('100%')\n      .height('100%')\n    }\n    .height('100%')\n    .backgroundColor(0xF1F3F5)\n  }\n}\n\n@ComponentV2\nstruct ChildItem {\n  @Param @Require item: string;\n\n  build() {\n    Text(this.item)\n      .fontSize(30)\n  }\n}
第三个数组项重新渲染时会复用之前的第三项的组件，仅对数据做了刷新。
索引值变化
下方例子当交换数组项1和2时，若键值和上次保持一致，Repeat会复用之前的组件，仅对使用了index索引值的组件做数据刷新。
@Entry\n@ComponentV2\nstruct Parent {\n  @Local simpleList: Array<string> = ['one', 'two', 'three'];\n\n  build() {\n    Row() {\n      Column() {\n        Text('交换数组项1，2')\n          .fontSize(24)\n          .fontColor(Color.Red)\n          .onClick(() => {\n            let temp: string = this.simpleList[2]\n            this.simpleList[2] = this.simpleList[1]\n            this.simpleList[1] = temp\n          })\n          .margin({bottom: 20})\n\n        Repeat<string>(this.simpleList)\n          .each((obj: RepeatItem<string>)=>{\n            Text(\"index: \" + obj.index)\n              .fontSize(30)\n            ChildItem({ item: obj.item })\n              .margin({bottom: 20})\n          })\n          .key((item: string) => item)\n      }\n      .justifyContent(FlexAlign.Center)\n      .width('100%')\n      .height('100%')\n    }\n    .height('100%')\n    .backgroundColor(0xF1F3F5)\n  }\n}\n\n@ComponentV2\nstruct ChildItem {\n  @Param @Require item: string;\n\n  build() {\n    Text(this.item)\n      .fontSize(30)\n  }\n}
[h2]virtualScroll数据展示&操作
本小节将展示virtualScroll场景下，Repeat的实际使用场景和组件节点的复用情况。根据复用规则可以衍生出大量的测试场景，篇幅原因，只对典型的数据变化进行解释。
一个template
下面的代码设计了Repeat组件的virtualScroll场景典型数据源操作，包括插入数据、修改数据、删除数据、交换数据。点击下拉框选择index值，点击相应的按钮即可进行数据修改操作。依次点击数据项可以交换被点击的两个数据项。
@ObservedV2\nclass Repeat005Clazz {\n  @Trace message: string = '';\n\n  constructor(message: string) {\n    this.message = message;\n  }\n}\n\n@Entry\n@ComponentV2\nstruct RepeatVirtualScroll {\n  @Local simpleList: Array<Repeat005Clazz> = [];\n  private exchange: number[] = [];\n  private counter: number = 0;\n  @Local selectOptions: SelectOption[] = [];\n  @Local selectIdx: number = 0;\n\n  @Monitor(\"simpleList\")\n  reloadSelectOptions(): void {\n    this.selectOptions = [];\n    for (let i = 0; i < this.simpleList.length; ++i) {\n      this.selectOptions.push({ value: i.toString() });\n    }\n    if (this.selectIdx >= this.simpleList.length) {\n      this.selectIdx = this.simpleList.length - 1;\n    }\n  }\n\n  aboutToAppear(): void {\n    for (let i = 0; i < 100; i++) {\n      this.simpleList.push(new Repeat005Clazz(`item_${i}`));\n    }\n    this.reloadSelectOptions();\n  }\n\n  handleExchange(idx: number): void { // 点击交换子组件\n    this.exchange.push(idx);\n    if (this.exchange.length === 2) {\n      let _a = this.exchange[0];\n      let _b = this.exchange[1];\n      let temp: Repeat005Clazz = this.simpleList[_a];\n      this.simpleList[_a] = this.simpleList[_b];\n      this.simpleList[_b] = temp;\n      this.exchange = [];\n    }\n  }\n\n  build() {\n    Column({ space: 10 }) {\n      Text('virtualScroll each()&template() 1t')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n      Text('Select an index and press the button to update data.')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      Select(this.selectOptions)\n        .selected(this.selectIdx)\n        .value(this.selectIdx.toString())\n        .key('selectIdx')\n        .onSelect((index: number) => {\n          this.selectIdx = index;\n        })\n      Row({ space: 5 }) {\n        Button('Add No.' + this.selectIdx)\n          .onClick(() => {\n            this.simpleList.splice(this.selectIdx, 0, new Repeat005Clazz(`${this.counter++}_add_item`));\n            this.reloadSelectOptions();\n          })\n        Button('Modify No.' + this.selectIdx)\n          .onClick(() => {\n            this.simpleList.splice(this.selectIdx, 1, new Repeat005Clazz(`${this.counter++}_modify_item`));\n          })\n        Button('Del No.' + this.selectIdx)\n          .onClick(() => {\n            this.simpleList.splice(this.selectIdx, 1);\n            this.reloadSelectOptions();\n          })\n      }\n      Button('Update array length to 5.')\n        .onClick(() => {\n          this.simpleList = this.simpleList.slice(0, 5);\n          this.reloadSelectOptions();\n        })\n\n      Text('Click on two items to exchange.')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      List({ space: 10 }) {\n        Repeat<Repeat005Clazz>(this.simpleList)\n          .each((obj: RepeatItem<Repeat005Clazz>) => {\n            ListItem() {\n              Text(`[each] index${obj.index}: ${obj.item.message}`)\n                .fontSize(25)\n                .onClick(() => {\n                  this.handleExchange(obj.index);\n                })\n            }\n          })\n          .key((item: Repeat005Clazz, index: number) => {\n            return item.message;\n          })\n          .virtualScroll({ totalCount: this.simpleList.length })\n          .templateId(() => \"a\")\n          .template('a', (ri) => {\n            Text(`[a] index${ri.index}: ${ri.item.message}`)\n              .fontSize(25)\n              .onClick(() => {\n                this.handleExchange(ri.index);\n              })\n          }, { cachedCount: 3 })\n      }\n      .cachedCount(2)\n      .border({ width: 1 })\n      .width('95%')\n      .height('40%')\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height('100%')\n  }\n}
该应用列表内容为100项自定义类RepeatClazz的message字符串属性，List组件的cachedCount设为2，模板'a'的缓存池大小设为3。应用界面如下图所示：
多个template
@ObservedV2\nclass Repeat006Clazz {\n  @Trace message: string = '';\n\n  constructor(message: string) {\n    this.message = message;\n  }\n}\n\n@Entry\n@ComponentV2\nstruct RepeatVirtualScroll2T {\n  @Local simpleList: Array<Repeat006Clazz> = [];\n  private exchange: number[] = [];\n  private counter: number = 0;\n  @Local selectOptions: SelectOption[] = [];\n  @Local selectIdx: number = 0;\n\n  @Monitor(\"simpleList\")\n  reloadSelectOptions(): void {\n    this.selectOptions = [];\n    for (let i = 0; i < this.simpleList.length; ++i) {\n      this.selectOptions.push({ value: i.toString() });\n    }\n    if (this.selectIdx >= this.simpleList.length) {\n      this.selectIdx = this.simpleList.length - 1;\n    }\n  }\n\n  aboutToAppear(): void {\n    for (let i = 0; i < 100; i++) {\n      this.simpleList.push(new Repeat006Clazz(`item_${i}`));\n    }\n    this.reloadSelectOptions();\n  }\n\n  handleExchange(idx: number): void { // 点击交换子组件\n    this.exchange.push(idx);\n    if (this.exchange.length === 2) {\n      let _a = this.exchange[0];\n      let _b = this.exchange[1];\n      let temp: Repeat006Clazz = this.simpleList[_a];\n      this.simpleList[_a] = this.simpleList[_b];\n      this.simpleList[_b] = temp;\n      this.exchange = [];\n    }\n  }\n\n  build() {\n    Column({ space: 10 }) {\n      Text('virtualScroll each()&template() 2t')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n      Text('Select an index and press the button to update data.')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      Select(this.selectOptions)\n        .selected(this.selectIdx)\n        .value(this.selectIdx.toString())\n        .key('selectIdx')\n        .onSelect((index: number) => {\n          this.selectIdx = index;\n        })\n      Row({ space: 5 }) {\n        Button('Add No.' + this.selectIdx)\n          .onClick(() => {\n            this.simpleList.splice(this.selectIdx, 0, new Repeat006Clazz(`${this.counter++}_add_item`));\n            this.reloadSelectOptions();\n          })\n        Button('Modify No.' + this.selectIdx)\n          .onClick(() => {\n            this.simpleList.splice(this.selectIdx, 1, new Repeat006Clazz(`${this.counter++}_modify_item`));\n          })\n        Button('Del No.' + this.selectIdx)\n          .onClick(() => {\n            this.simpleList.splice(this.selectIdx, 1);\n            this.reloadSelectOptions();\n          })\n      }\n      Button('Update array length to 5.')\n        .onClick(() => {\n          this.simpleList = this.simpleList.slice(0, 5);\n          this.reloadSelectOptions();\n        })\n\n      Text('Click on two items to exchange.')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      List({ space: 10 }) {\n        Repeat<Repeat006Clazz>(this.simpleList)\n          .each((obj: RepeatItem<Repeat006Clazz>) => {\n            ListItem() {\n              Text(`[each] index${obj.index}: ${obj.item.message}`)\n                .fontSize(25)\n                .onClick(() => {\n                  this.handleExchange(obj.index);\n                })\n            }\n          })\n          .key((item: Repeat006Clazz, index: number) => {\n            return item.message;\n          })\n          .virtualScroll({ totalCount: this.simpleList.length })\n          .templateId((item: Repeat006Clazz, index: number) => {\n            return (index % 2 === 0) ? 'odd' : 'even';\n          })\n          .template('odd', (ri) => {\n            Text(`[odd] index${ri.index}: ${ri.item.message}`)\n              .fontSize(25)\n              .fontColor(Color.Blue)\n              .onClick(() => {\n                this.handleExchange(ri.index);\n              })\n          }, { cachedCount: 3 })\n          .template('even', (ri) => {\n            Text(`[even] index${ri.index}: ${ri.item.message}`)\n              .fontSize(25)\n              .fontColor(Color.Green)\n              .onClick(() => {\n                this.handleExchange(ri.index);\n              })\n          }, { cachedCount: 1 })\n      }\n      .cachedCount(2)\n      .border({ width: 1 })\n      .width('95%')\n      .height('40%')\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height('100%')\n  }\n}
[h2]Repeat嵌套
Repeat支持嵌套使用。示例代码：
// Repeat嵌套\n@Entry\n@ComponentV2\nstruct RepeatNest {\n  @Local outerList: string[] = [];\n  @Local innerList: number[] = [];\n\n  aboutToAppear(): void {\n    for (let i = 0; i < 20; i++) {\n      this.outerList.push(i.toString());\n      this.innerList.push(i);\n    }\n  }\n\n  build() {\n    Column({ space: 20 }) {\n      Text('Repeat virtualScroll嵌套')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n      List() {\n        Repeat<string>(this.outerList)\n          .each((obj) => {\n            ListItem() {\n              Column() {\n                Text('outerList item: ' + obj.item)\n                  .fontSize(30)\n                List() {\n                  Repeat<number>(this.innerList)\n                    .each((subObj) => {\n                      ListItem() {\n                        Text('innerList item: ' + subObj.item)\n                          .fontSize(20)\n                      }\n                    })\n                    .key((item) => \"innerList_\" + item)\n                }\n                .width('80%')\n                .border({ width: 1 })\n                .backgroundColor(Color.Orange)\n              }\n              .height('30%')\n              .backgroundColor(Color.Pink)\n            }\n            .border({ width: 1 })\n          })\n          .key((item) => \"outerList_\" + item)\n      }\n      .width('80%')\n      .border({ width: 1 })\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('90%')\n    .height('80%')\n  }\n}
运行效果：
父容器组件应用场景
[h2]与List组合使用
在List容器组件中使用Repeat的virtualScroll模式，示例如下：
class DemoListItemInfo {\n  name: string;\n  icon: Resource;\n\n  constructor(name: string, icon: Resource) {\n    this.name = name;\n    this.icon = icon;\n  }\n}\n\n@Entry\n@ComponentV2\nstruct DemoList {\n  @Local videoList: Array<DemoListItemInfo> = [];\n\n  aboutToAppear(): void {\n    for (let i = 0; i < 10; i++) {\n      // 此处app.media.listItem0、app.media.listItem1、app.media.listItem2仅作示例，请开发者自行替换\n      this.videoList.push(new DemoListItemInfo('视频' + i,\n        i % 3 == 0 ? $r(\"app.media.listItem0\") :\n        i % 3 == 1 ? $r(\"app.media.listItem1\") : $r(\"app.media.listItem2\")));\n    }\n  }\n\n  @Builder\n  itemEnd(index: number) {\n    Button('删除')\n      .backgroundColor(Color.Red)\n      .onClick(() => {\n        this.videoList.splice(index, 1);\n      })\n  }\n\n  build() {\n    Column({ space: 10 }) {\n      Text('List容器组件中包含Repeat组件')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      List({ space: 5 }) {\n        Repeat<DemoListItemInfo>(this.videoList)\n          .each((obj: RepeatItem<DemoListItemInfo>) => {\n            ListItem() {\n              Column() {\n                Image(obj.item.icon)\n                  .width('80%')\n                  .margin(10)\n                Text(obj.item.name)\n                  .fontSize(20)\n              }\n            }\n            .swipeAction({\n              end: {\n                builder: () => {\n                  this.itemEnd(obj.index);\n                }\n              }\n            })\n            .onAppear(() => {\n              console.info('AceTag', obj.item.name);\n            })\n          })\n          .key((item: DemoListItemInfo) => item.name)\n          .virtualScroll()\n      }\n      .cachedCount(2)\n      .height('90%')\n      .border({ width: 1 })\n      .listDirection(Axis.Vertical)\n      .alignListItem(ListItemAlign.Center)\n      .divider({\n        strokeWidth: 1,\n        startMargin: 60,\n        endMargin: 60,\n        color: '#ffe9f0f0'\n      })\n\n      Row({ space: 10 }) {\n        Button('删除第1项')\n          .onClick(() => {\n            this.videoList.splice(0, 1);\n          })\n        Button('删除第5项')\n          .onClick(() => {\n            this.videoList.splice(4, 1);\n          })\n      }\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}
右滑并点击按钮，或点击底部按钮，可删除视频卡片：
[h2]与Grid组合使用
在Grid容器组件中使用Repeat的virtualScroll模式，示例如下：
class DemoGridItemInfo {\n  name: string;\n  icon: Resource;\n\n  constructor(name: string, icon: Resource) {\n    this.name = name;\n    this.icon = icon;\n  }\n}\n\n@Entry\n@ComponentV2\nstruct DemoGrid {\n  @Local itemList: Array<DemoGridItemInfo> = [];\n  @Local isRefreshing: boolean = false;\n  private layoutOptions: GridLayoutOptions = {\n    regularSize: [1, 1],\n    irregularIndexes: [10]\n  }\n  private GridScroller: Scroller = new Scroller();\n  private num: number = 0;\n\n  aboutToAppear(): void {\n    for (let i = 0; i < 10; i++) {\n      // 此处app.media.gridItem0、app.media.gridItem1、app.media.gridItem2仅作示例，请开发者自行替换\n      this.itemList.push(new DemoGridItemInfo('视频' + i,\n        i % 3 == 0 ? $r(\"app.media.gridItem0\") :\n        i % 3 == 1 ? $r(\"app.media.gridItem1\") : $r(\"app.media.gridItem2\")));\n    }\n  }\n\n  build() {\n    Column({ space: 10 }) {\n      Text('Grid容器组件中包含Repeat组件')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      Refresh({ refreshing: $$this.isRefreshing }) {\n        Grid(this.GridScroller, this.layoutOptions) {\n          Repeat<DemoGridItemInfo>(this.itemList)\n            .each((obj: RepeatItem<DemoGridItemInfo>) => {\n              if (obj.index === 10 ) {\n                GridItem() {\n                  Text('先前浏览至此，点击刷新')\n                    .fontSize(20)\n                }\n                .height(30)\n                .border({ width: 1 })\n                .onClick(() => {\n                  this.GridScroller.scrollToIndex(0);\n                  this.isRefreshing = true;\n                })\n                .onAppear(() => {\n                  console.info('AceTag', obj.item.name);\n                })\n              } else {\n                GridItem() {\n                  Column() {\n                    Image(obj.item.icon)\n                      .width('100%')\n                      .height(80)\n                      .objectFit(ImageFit.Cover)\n                      .borderRadius({ topLeft: 16, topRight: 16 })\n                    Text(obj.item.name)\n                      .fontSize(15)\n                      .height(20)\n                  }\n                }\n                .height(100)\n                .borderRadius(16)\n                .backgroundColor(Color.White)\n                .onAppear(() => {\n                  console.info('AceTag', obj.item.name);\n                })\n              }\n            })\n            .key((item: DemoGridItemInfo) => item.name)\n            .virtualScroll()\n        }\n        .columnsTemplate('repeat(auto-fit, 150)')\n        .cachedCount(4)\n        .rowsGap(15)\n        .columnsGap(10)\n        .height('100%')\n        .padding(10)\n        .backgroundColor('#F1F3F5')\n      }\n      .onRefreshing(() => {\n        setTimeout(() => {\n          this.itemList.splice(10, 1);\n          this.itemList.unshift(new DemoGridItemInfo('refresh', $r('app.media.gridItem0'))); // 此处app.media.gridItem0仅作示例，请开发者自行替换\n          for (let i = 0; i < 10; i++) {\n            // 此处aapp.media.gridItem0、app.media.gridItem1、app.media.gridItem2仅作示例，请开发者自行替换\n            this.itemList.unshift(new DemoGridItemInfo('新视频' + this.num,\n              i % 3 == 0 ? $r(\"app.media.gridItem0\") :\n              i % 3 == 1 ? $r(\"app.media.gridItem1\") : $r(\"app.media.gridItem2\")));\n            this.num++;\n          }\n          this.isRefreshing = false;\n        }, 1000);\n        console.info('AceTag', 'onRefreshing');\n      })\n      .refreshOffset(64)\n      .pullToRefresh(true)\n      .width('100%')\n      .height('85%')\n\n      Button('刷新')\n        .onClick(() => {\n          this.GridScroller.scrollToIndex(0);\n          this.isRefreshing = true;\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n}
下拉屏幕，或点击刷新按钮，或点击“先前浏览至此，点击刷新”，可加载新的视频内容：
[h2]与Swiper组合使用
在Swiper容器组件中使用Repeat的virtualScroll模式，示例如下：
const remotePictures: Array<string> = [\n  'https://www.example.com/xxx/0001.jpg', // 请填写具体的网络图片地址\n  'https://www.example.com/xxx/0002.jpg',\n  'https://www.example.com/xxx/0003.jpg',\n  'https://www.example.com/xxx/0004.jpg',\n  'https://www.example.com/xxx/0005.jpg',\n  'https://www.example.com/xxx/0006.jpg',\n  'https://www.example.com/xxx/0007.jpg',\n  'https://www.example.com/xxx/0008.jpg',\n  'https://www.example.com/xxx/0009.jpg',\n]\n\n@ObservedV2\nclass DemoSwiperItemInfo {\n  id: string;\n  @Trace url: string = 'default';\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\n@Entry\n@ComponentV2\nstruct DemoSwiper {\n  @Local pics: Array<DemoSwiperItemInfo> = [];\n\n  aboutToAppear(): void {\n    for (let i = 0; i < 9; i++) {\n      this.pics.push(new DemoSwiperItemInfo('pic' + i));\n    }\n    setTimeout(() => {\n      this.pics[0].url = remotePictures[0];\n    }, 1000);\n  }\n\n  build() {\n    Column() {\n      Text('Swiper容器组件中包含Repeat组件')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      Stack() {\n        Text('图片加载中')\n          .fontSize(15)\n          .fontColor(Color.Gray)\n        Swiper() {\n          Repeat(this.pics)\n            .each((obj: RepeatItem<DemoSwiperItemInfo>) => {\n              Image(obj.item.url)\n                .onAppear(() => {\n                  console.info('AceTag', obj.item.id);\n                })\n            })\n            .key((item: DemoSwiperItemInfo) => item.id)\n            .virtualScroll()\n        }\n        .cachedCount(9)\n        .height('50%')\n        .loop(false)\n        .indicator(true)\n        .onChange((index) => {\n          setTimeout(() => {\n            this.pics[index].url = remotePictures[index];\n          }, 1000);\n        })\n      }\n      .width('100%')\n      .height('100%')\n      .backgroundColor(Color.Black)\n    }\n  }\n}
定时1秒后加载图片，模拟网络延迟：
常见问题
[h2]屏幕外的列表数据发生变化时，保证滚动条位置不变
在List组件中声明Repeat组件，实现key值生成逻辑和each逻辑（如下示例代码），点击按钮“insert”，在屏幕显示的第一个元素前面插入一个元素，屏幕出现向下滚动。
// 定义一个类，标记为可观察的\n// 类中自定义一个数组，标记为可追踪的\n@ObservedV2\nclass ArrayHolder {\n  @Trace arr: Array<number> = [];\n\n  // constructor，用于初始化数组个数\n  constructor(count: number) {\n    for (let i = 0; i < count; i++) {\n      this.arr.push(i);\n    }\n  }\n}\n\n@Entry\n@ComponentV2\nstruct RepeatTemplateSingle {\n  @Local arrayHolder: ArrayHolder = new ArrayHolder(100);\n  @Local totalCount: number = this.arrayHolder.arr.length;\n  scroller: Scroller = new Scroller();\n\n  build() {\n    Column({ space: 5 }) {\n      List({ space: 20, initialIndex: 19, scroller: this.scroller }) {\n        Repeat(this.arrayHolder.arr)\n          .virtualScroll({ totalCount: this.totalCount })\n          .templateId((item, index) => {\n            return 'number';\n          })\n          .template('number', (r) => {\n            ListItem() {\n              Text(r.index! + \":\" + r.item + \"Reuse\");\n            }\n          })\n          .each((r) => {\n            ListItem() {\n              Text(r.index! + \":\" + r.item + \"eachMessage\");\n            }\n          })\n      }\n      .height('30%')\n\n      Button(`insert totalCount ${this.totalCount}`)\n        .height(60)\n        .onClick(() => {\n          // 插入元素，元素位置为屏幕显示的前一个元素\n          this.arrayHolder.arr.splice(18, 0, this.totalCount);\n          this.totalCount = this.arrayHolder.arr.length;\n        })\n    }\n    .width('100%')\n    .margin({ top: 5 })\n  }\n}
运行效果：
在一些场景中，我们不希望屏幕外的数据源变化影响屏幕中List列表Scroller停留的位置，可以通过List组件的onScrollIndex事件对列表滚动动作进行监听，当列表发生滚动时，获取列表滚动位置。使用Scroller组件的scrollToIndex特性，滑动到指定index位置，实现屏幕外的数据源增加/删除数据时，Scroller停留的位置不变的效果。
示例代码仅对增加数据的情况进行展示。
// ...ArrayHolder的定义和上述demo代码一致\n\n@Entry\n@ComponentV2\nstruct RepeatTemplateSingle {\n  @Local arrayHolder: ArrayHolder = new ArrayHolder(100);\n  @Local totalCount: number = this.arrayHolder.arr.length;\n  scroller: Scroller = new Scroller();\n\n  private start: number = 1;\n  private end: number = 1;\n\n  build() {\n    Column({ space: 5 }) {\n      List({ space: 20, initialIndex: 19, scroller: this.scroller }) {\n        Repeat(this.arrayHolder.arr)\n          .virtualScroll({ totalCount: this.totalCount })\n          .templateId((item, index) => {\n            return 'number';\n          })\n          .template('number', (r) => {\n            ListItem() {\n              Text(r.index! + \":\" + r.item + \"Reuse\");\n            }\n          })\n          .each((r) => {\n            ListItem() {\n              Text(r.index! + \":\" + r.item + \"eachMessage\");\n            }\n          })\n      }\n      .onScrollIndex((start, end) => {\n        this.start = start;\n        this.end = end;\n      })\n      .height('30%')\n\n      Button(`insert totalCount ${this.totalCount}`)\n        .height(60)\n        .onClick(() => {\n          // 插入元素，元素位置为屏幕显示的前一个元素\n          this.arrayHolder.arr.splice(18, 0, this.totalCount);\n          let rect = this.scroller.getItemRect(this.start); // 获取子组件的大小位置\n          this.scroller.scrollToIndex(this.start + 1); // 滑动到指定index\n          this.scroller.scrollBy(0, -rect.y); // 滑动指定距离\n          this.totalCount = this.arrayHolder.arr.length;\n        })\n    }\n    .width('100%')\n    .margin({ top: 5 })\n  }\n}
运行效果：
[h2]totalCount值大于数据源长度
当数据源总长度很大时，会使用懒加载的方式先加载一部分数据，为了使Repeat显示正确的滚动条样式，需要将数据总长度赋值给totalCount，即数据源全部加载完成前，totalCount大于array.length。
totalCount > array.length时，在父组件容器滚动过程中，应用需要保证列表即将滑动到数据源末尾时请求后续数据，开发者需要对数据请求的错误场景（如网络延迟）进行保护操作，直到数据源全部加载完成，否则列表滑动的过程中会出现滚动效果异常。
上述规范可以通过实现父组件List/Grid的onScrollIndex属性的回调函数完成。示例代码如下：
@ObservedV2\nclass VehicleData {\n  @Trace name: string;\n  @Trace price: number;\n\n  constructor(name: string, price: number) {\n    this.name = name;\n    this.price = price;\n  }\n}\n\n@ObservedV2\nclass VehicleDB {\n  public vehicleItems: VehicleData[] = [];\n\n  constructor() {\n    // init data size 20\n    for (let i = 1; i <= 20; i++) {\n      this.vehicleItems.push(new VehicleData(`Vehicle${i}`, i));\n    }\n  }\n}\n\n@Entry\n@ComponentV2\nstruct entryCompSucc {\n  @Local vehicleItems: VehicleData[] = new VehicleDB().vehicleItems;\n  @Local listChildrenSize: ChildrenMainSize = new ChildrenMainSize(60);\n  @Local totalCount: number = this.vehicleItems.length;\n  scroller: Scroller = new Scroller();\n\n  build() {\n    Column({ space: 3 }) {\n      List({ scroller: this.scroller }) {\n        Repeat(this.vehicleItems)\n          .virtualScroll({ totalCount: 50 }) // total data size 50\n          .templateId(() => 'default')\n          .template('default', (ri) => {\n            ListItem() {\n              Column() {\n                Text(`${ri.item.name} + ${ri.index}`)\n                  .width('90%')\n                  .height(this.listChildrenSize.childDefaultSize)\n                  .backgroundColor(0xFFA07A)\n                  .textAlign(TextAlign.Center)\n                  .fontSize(20)\n                  .fontWeight(FontWeight.Bold)\n              }\n            }.border({ width: 1 })\n          }, { cachedCount: 5 })\n          .each((ri) => {\n            ListItem() {\n              Text(\"Wrong: \" + `${ri.item.name} + ${ri.index}`)\n                .width('90%')\n                .height(this.listChildrenSize.childDefaultSize)\n                .backgroundColor(0xFFA07A)\n                .textAlign(TextAlign.Center)\n                .fontSize(20)\n                .fontWeight(FontWeight.Bold)\n            }.border({ width: 1 })\n          })\n          .key((item, index) => `${index}:${item}`)\n      }\n      .height('50%')\n      .margin({ top: 20 })\n      .childrenMainSize(this.listChildrenSize)\n      .alignListItem(ListItemAlign.Center)\n      .onScrollIndex((start, end) => {\n        console.log('onScrollIndex', start, end);\n        // lazy data loading\n        if (this.vehicleItems.length < 50) {\n          for (let i = 0; i < 10; i++) {\n            if (this.vehicleItems.length < 50) {\n              this.vehicleItems.push(new VehicleData(\"Vehicle_loaded\", i));\n            }\n          }\n        }\n      })\n    }\n  }\n}
示例代码运行效果：
[h2]Repeat与@Builder混用的限制
当Repeat与@Builder混用时，必须将RepeatItem类型整体进行传参，组件才能监听到数据变化，如果只传递RepeatItem.item或RepeatItem.index，将会出现UI渲染异常。
示例代码如下：
@Entry\n@ComponentV2\nstruct RepeatBuilderPage {\n  @Local simpleList1: Array<number> = [];\n  @Local simpleList2: Array<number> = [];\n\n  aboutToAppear(): void {\n    for (let i = 0; i < 100; i++) {\n      this.simpleList1.push(i)\n      this.simpleList2.push(i)\n    }\n  }\n\n  build() {\n    Column({ space: 20 }) {\n      Text('Repeat与@Builder混用，左边是异常场景，右边是正常场景，向下滑动一段距离可以看出差别')\n        .fontSize(15)\n        .fontColor(Color.Gray)\n\n      Row({ space: 20 }) {\n        List({ initialIndex: 5, space: 20 }) {\n          Repeat<number>(this.simpleList1)\n            .each((ri) => {})\n            .virtualScroll({ totalCount: this.simpleList1.length })\n            .templateId((item: number, index: number) => \"default\")\n            .template('default', (ri) => {\n              ListItem() {\n                Column() {\n                  Text('Text id = ' + ri.item)\n                    .fontSize(20)\n                  this.buildItem1(ri.item) // 修改为：this.buildItem1(ri)\n                }\n              }\n              .border({ width: 1 })\n            }, { cachedCount: 3 })\n        }\n        .cachedCount(1)\n        .border({ width: 1 })\n        .width('45%')\n        .height('60%')\n\n        List({ initialIndex: 5, space: 20 }) {\n          Repeat<number>(this.simpleList2)\n            .each((ri) => {})\n            .virtualScroll({ totalCount: this.simpleList2.length })\n            .templateId((item: number, index: number) => \"default\")\n            .template('default', (ri) => {\n              ListItem() {\n                Column() {\n                  Text('Text id = ' + ri.item)\n                    .fontSize(20)\n                  this.buildItem2(ri)\n                }\n              }\n              .border({ width: 1 })\n            }, { cachedCount: 3 })\n        }\n        .cachedCount(1)\n        .border({ width: 1 })\n        .width('45%')\n        .height('60%')\n      }\n    }\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  @Builder\n  // @Builder参数必须传RepeatItem类型才能正常渲染\n  buildItem1(item: number) {\n    Text('Builder1 id = ' + item)\n      .fontSize(20)\n      .fontColor(Color.Red)\n      .margin({ top: 2 })\n  }\n\n  @Builder\n  buildItem2(ri: RepeatItem<number>) {\n    Text('Builder2 id = ' + ri.item)\n      .fontSize(20)\n      .fontColor(Color.Red)\n      .margin({ top: 2 })\n  }\n}
界面展示如下图，进入页面后向下滑动一段距离可以看出差别，左边是错误用法，右边是正确用法（Text组件为黑色，Builder组件为红色）。上述代码展示了开发过程中易出错的场景，即在@Builder构造函数中传参方式为值传递。
