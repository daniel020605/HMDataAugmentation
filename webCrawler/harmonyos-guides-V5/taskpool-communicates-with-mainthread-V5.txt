TaskPool任务与宿主线程通信
如果一个Task，不仅需要返回最后的执行结果，而且需要定时通知宿主线程状态、数据的变化，或者需要分段返回数量级较大的数据（比如从数据库中读取大量数据），可以通过下面这种方式实现。
下面以多个图片加载任务结果实时返回为例进行说明。
首先，实现一个方法，用来接收Task发送的消息。 // TaskSendDataUsage.ets\nfunction notice(data: number): void {\n  console.info(\"子线程任务已执行完，共加载图片: \", data);\n} 然后，在Task需要执行的任务中，添加sendData()接口将消息发送给宿主线程。 // IconItemSource.ets\nexport class IconItemSource {\n  image: string | Resource = '';\n  text: string | Resource = '';\n\n  constructor(image: string | Resource = '', text: string | Resource = '') {\n    this.image = image;\n    this.text = text;\n  }\n} // TaskSendDataUsage.ets\nimport { taskpool } from '@kit.ArkTS';\nimport { IconItemSource } from './IconItemSource';\n\n// 通过Task的sendData方法，即时通知宿主线程信息\n@Concurrent\nexport function loadPictureSendData(count: number): IconItemSource[] {\n  let iconItemSourceList: IconItemSource[] = [];\n  // 遍历添加6*count个IconItem的数据\n  for (let index = 0; index < count; index++) {\n    const numStart: number = index * 6;\n    // 此处循环使用6张图片资源\n    iconItemSourceList.push(new IconItemSource('$media:startIcon', `item${numStart + 1}`));\n    iconItemSourceList.push(new IconItemSource('$media:background', `item${numStart + 2}`));\n    iconItemSourceList.push(new IconItemSource('$media:foreground', `item${numStart + 3}`));\n    iconItemSourceList.push(new IconItemSource('$media:startIcon', `item${numStart + 4}`));\n    iconItemSourceList.push(new IconItemSource('$media:background', `item${numStart + 5}`));\n    iconItemSourceList.push(new IconItemSource('$media:foreground', `item${numStart + 6}`));\n\n    taskpool.Task.sendData(iconItemSourceList.length);\n  }\n  return iconItemSourceList;\n} 最后，在宿主线程通过onReceiveData()接口接收消息。 这样宿主线程就可以通过notice()接口接收到Task发送的数据。 // TaskSendDataUsage.ets\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n          .onClick(() => {\n            let iconItemSourceList: IconItemSource[];\n            let lodePictureTask: taskpool.Task = new taskpool.Task(loadPictureSendData, 30);\n            // 设置notice方法接收Task发送的消息\n            lodePictureTask.onReceiveData(notice);\n            taskpool.execute(lodePictureTask).then((res: object) => {\n              iconItemSourceList = res as IconItemSource[];\n            })\n          })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n} 
