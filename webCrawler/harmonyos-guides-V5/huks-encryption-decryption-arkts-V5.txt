加解密(ArkTS)
以AES 128、RSA 2048和SM2为例，完成加解密。具体的场景介绍及支持的算法规格，请参考密钥生成支持的算法。
开发步骤
生成密钥
 指定密钥别名。 初始化密钥属性集。 调用generateKeyItem生成密钥，具体请参考密钥生成。 
除此之外，开发者也可以参考密钥导入，导入已有的密钥。
加密
 获取密钥别名。 获取待加密的数据。 获取加密算法参数配置。 文档中提供多个示例，当使用不同算法时，请注意配置对应参数。  使用AES算法加密，用例中选取的分组模式为CBC、填充模式为PKCS7时，必须要填参数IV，请见开发案例：AES/CBC/PKCS7。 使用AES算法加密，用例中选取的分组模式为GCM时，必须要填参数NONCE，AAD可选，请见开发案例：AES/GCM/NoPadding。 使用RSA算法加密，需要选择其对应分组模式以及填充模式和摘要算法DIGEST，请见开发案例：RSA/ECB/PKCS1_V1_5和开发案例：RSA/ECB/OAEP/SHA256。 使用SM2算法加密，摘要算法DIGEST需要指定为SM3，请见开发案例：SM2。  详细规格请参考加密/解密介绍及算法规格。 调用initSession初始化密钥会话，并获取会话的句柄handle。 调用finishSession结束密钥会话，获取加密后的密文。 
解密
 获取密钥别名。 获取待解密的密文。 获取解密算法参数配置。 文档中提供多个示例，当使用不同算法时，请注意配置对应参数。  使用AES算法解密，用例中选取的分组模式为GCM时，必须要填参数NONCE和参数AEAD，AAD可选，请见开发案例：AES/GCM/NoPadding。 其余示例参数与加密要求一致。  详细规格请参考加密/解密介绍及算法规格。 调用initSession初始化密钥会话，并获取会话的句柄handle。 调用finishSession结束密钥会话，获取解密后的数据。 
删除密钥
当密钥废弃不用时，需要调用deleteKeyItem删除密钥，具体请参考密钥删除。
开发案例
[h2]AES/CBC/PKCS7
/*\n * 以下以AES/CBC/PKCS7的Promise操作使用为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet aesKeyAlias = 'test_aesKeyAlias';\nlet handle: number;\nlet plainText = '123456';\nlet IV = '001122334455';\nlet cipherData: Uint8Array;\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetAesGenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_AES\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_128\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }];\n  return properties;\n}\n\nfunction GetAesEncryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_AES\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_128\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PKCS7\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_CBC\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_IV,\n    value: StringToUint8Array(IV)\n  }];\n  return properties;\n}\n\nfunction GetAesDecryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_AES\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_128\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PKCS7\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_CBC\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_IV,\n    value: StringToUint8Array(IV)\n  }];\n  return properties;\n}\n\nasync function GenerateAesKey() {\n  /*\n  * 模拟生成密钥场景\n  * 1. 确定密钥别名\n  */\n  /*\n  * 2. 获取生成密钥算法参数配置\n  */\n  let genProperties = GetAesGenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  /*\n  * 3. 调用generateKeyItem\n  */\n  await huks.generateKeyItem(aesKeyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate AES Key success, data = ${JSON.stringify(data)}`);\n    }).catch((error: Error) => {\n      console.error(`promise: generate AES Key failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function EncryptData() {\n  /*\n  * 模拟加密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待加密的数据\n  */\n  /*\n  * 3. 获取加密算法参数配置\n  */\n  let encryptProperties = GetAesEncryptProperties();\n  let options: huks.HuksOptions = {\n    properties: encryptProperties,\n    inData: StringToUint8Array(plainText)\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(aesKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init EncryptData failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取加密后的密文\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: encrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      cipherData = data.outData as Uint8Array;\n    }).catch((error: Error) => {\n      console.error(`promise: encrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DecryptData() {\n  /*\n  * 模拟解密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待解密的密文\n  */\n  /*\n  * 3. 获取解密算法参数配置\n  */\n  let decryptOptions = GetAesDecryptProperties()\n  let options: huks.HuksOptions = {\n    properties: decryptOptions,\n    inData: cipherData\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(aesKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init DecryptData failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取解密后的数据\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: decrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((error: Error) => {\n      console.error(`promise: decrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DeleteKey() {\n  /*\n  * 模拟删除密钥场景\n  * 1. 获取密钥别名\n  */\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  /*\n  * 2. 调用deleteKeyItem删除密钥\n  */\n  await huks.deleteKeyItem(aesKeyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((error: Error) => {\n      console.error(`promise: delete data failed, ${JSON.stringify(error)}`);\n    })\n}
[h2]AES/GCM/NoPadding
/*\n * 以下以AES/GCM/NoPadding的Promise操作使用为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet aesKeyAlias = 'test_aesKeyAlias';\nlet handle: number;\nlet plainText = '123456';\nlet cipherData: Uint8Array;\nlet AAD = '1234567890123456';\nlet NONCE = '001122334455';\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetAesGenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_AES\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_128\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }];\n  return properties;\n}\n\nfunction GetAesGcmEncryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_AES\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_128\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_NONE\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_GCM\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_NONCE,\n    value: StringToUint8Array(NONCE)\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_ASSOCIATED_DATA,\n    value: StringToUint8Array(AAD)\n  }];\n  return properties;\n}\n\nfunction GetAesGcmDecryptProperties(cipherData:Uint8Array) {\n  let properties: Array<huks.HuksParam> = [\n    {\n      tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n      value: huks.HuksKeyAlg.HUKS_ALG_AES\n    }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_AES_KEY_SIZE_128\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_NONE\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_GCM\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_NONCE,\n    value: StringToUint8Array(NONCE)\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_ASSOCIATED_DATA,\n    value: StringToUint8Array(AAD)\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_AE_TAG,\n    value: cipherData.slice(cipherData.length-16)\n  }];\n  return properties;\n}\n\nasync function GenerateAesKey() {\n  /*\n  * 模拟生成密钥场景\n  * 1. 确定密钥别名\n  */\n  /*\n  * 2. 获取生成密钥算法参数配置\n  */\n  let genProperties = GetAesGenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  /*\n  * 3. 调用generateKeyItem\n  */\n  await huks.generateKeyItem(aesKeyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate AES Key success, data = ${JSON.stringify(data)}`);\n    }).catch((error: Error) => {\n      console.error(`promise: generate AES Key failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function EncryptData() {\n  /*\n  * 模拟加密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待加密的数据\n  */\n  /*\n  * 3. 获取加密算法参数配置\n  */\n  let encryptProperties = GetAesGcmEncryptProperties();\n  let options: huks.HuksOptions = {\n    properties: encryptProperties,\n    inData: StringToUint8Array(plainText)\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(aesKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init EncryptDataGcm failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取加密后的密文\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: encrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      cipherData = data.outData as Uint8Array;\n    }).catch((error: Error) => {\n      console.error(`promise: encrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DecryptData() {\n  /*\n  * 模拟解密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待解密的密文\n  */\n  /*\n  * 3. 获取解密算法参数配置\n  */\n  let decryptOptions = GetAesGcmDecryptProperties(cipherData)\n  let options: huks.HuksOptions = {\n    properties: decryptOptions,\n    inData: cipherData.slice(0, cipherData.length-16)\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(aesKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init DecryptDataGcm failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取解密后的数据\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: decrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((error: Error) => {\n      console.error(`promise: decrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DeleteKey() {\n  /*\n  * 模拟删除密钥场景\n  * 1. 获取密钥别名\n  */\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  /*\n  * 2. 调用deleteKeyItem删除密钥\n  */\n  await huks.deleteKeyItem(aesKeyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((error: Error) => {\n      console.error(`promise: delete data failed, ${JSON.stringify(error)}`);\n    })\n}
[h2]RSA/ECB/PKCS1_V1_5
/*\n * 以下以RSA/ECB/PKCS1_V1_5模式的Promise操作使用为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet rsaKeyAlias = 'test_rsaKeyAlias';\nlet handle: number;\nlet plainText = '123456';\nlet cipherData: Uint8Array;\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetRsaGenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }];\n  return properties;\n}\n\nfunction GetRsaEncryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PKCS1_V1_5\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_ECB\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_NONE\n  }];\n  return properties;\n}\n\nfunction GetRsaDecryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_PKCS1_V1_5\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_ECB\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_NONE\n  }];\n  return properties;\n}\n\nasync function GenerateRsaKey() {\n  /*\n  * 模拟生成密钥场景\n  * 1. 确定密钥别名\n  */\n  /*\n  * 2. 获取生成密钥算法参数配置\n  */\n  let genProperties = GetRsaGenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  /*\n  * 3. 调用generateKeyItem\n  */\n  await huks.generateKeyItem(rsaKeyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate RSA Key success, data = ${JSON.stringify(data)}`);\n    }).catch((error: Error) => {\n      console.error(`promise: generate RSA Key failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function EncryptData() {\n  /*\n  * 模拟加密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待加密的数据\n  */\n  /*\n  * 3. 获取加密算法参数配置\n  */\n  let encryptProperties = GetRsaEncryptProperties();\n  let options: huks.HuksOptions = {\n    properties: encryptProperties,\n    inData: StringToUint8Array(plainText)\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(rsaKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init EncryptDataRsa failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取加密后的密文\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: encrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      cipherData = data.outData as Uint8Array;\n    }).catch((error: Error) => {\n      console.error(`promise: encrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DecryptData() {\n  /*\n  * 模拟解密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待解密的密文\n  */\n  /*\n  * 3. 获取解密算法参数配置\n  */\n  let decryptOptions = GetRsaDecryptProperties()\n  let options: huks.HuksOptions = {\n    properties: decryptOptions,\n    inData: cipherData\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(rsaKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init DecryptDataRsa failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取解密后的数据\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: decrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((error: Error) => {\n      console.error(`promise: decrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DeleteKey() {\n  /*\n  * 模拟删除密钥场景\n  * 1. 获取密钥别名\n  */\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  /*\n  * 2. 调用deleteKeyItem删除密钥\n  */\n  await huks.deleteKeyItem(rsaKeyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((error: Error) => {\n      console.error(`promise: delete data failed, ${JSON.stringify(error)}`);\n    })\n}
[h2]RSA/ECB/OAEP/SHA256
/*\n * 以下以RSA/ECB/OAEP/SHA256模式的Promise操作使用为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet rsaKeyAlias = 'test_rsaKeyAlias';\nlet handle: number;\nlet plainText = '123456';\nlet cipherData: Uint8Array;\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetRsaGenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }];\n  return properties;\n}\n\nfunction GetRsaEncryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_OAEP\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_ECB\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nfunction GetRsaDecryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_RSA\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_RSA_KEY_SIZE_2048\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PADDING,\n    value: huks.HuksKeyPadding.HUKS_PADDING_OAEP\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_BLOCK_MODE,\n    value: huks.HuksCipherMode.HUKS_MODE_ECB\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SHA256\n  }];\n  return properties;\n}\n\nasync function GenerateRsaKey() {\n  /*\n  * 模拟生成密钥场景\n  * 1. 确定密钥别名\n  */\n  /*\n  * 2. 获取生成密钥算法参数配置\n  */\n  let genProperties = GetRsaGenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  /*\n  * 3. 调用generateKeyItem\n  */\n  await huks.generateKeyItem(rsaKeyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate RSA Key success, data = ${JSON.stringify(data)}`);\n    }).catch((error: Error) => {\n      console.error(`promise: generate RSA Key failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function EncryptData() {\n  /*\n  * 模拟加密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待加密的数据\n  */\n  /*\n  * 3. 获取加密算法参数配置\n  */\n  let encryptProperties = GetRsaEncryptProperties();\n  let options: huks.HuksOptions = {\n    properties: encryptProperties,\n    inData: StringToUint8Array(plainText)\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(rsaKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init EncryptDataRsa failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取加密后的密文\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: encrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      cipherData = data.outData as Uint8Array;\n    }).catch((error: Error) => {\n      console.error(`promise: encrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DecryptData() {\n  /*\n  * 模拟解密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待解密的密文\n  */\n  /*\n  * 3. 获取解密算法参数配置\n  */\n  let decryptOptions = GetRsaDecryptProperties()\n  let options: huks.HuksOptions = {\n    properties: decryptOptions,\n    inData: cipherData\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(rsaKeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init DecryptDataRsa failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取解密后的数据\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: decrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((error: Error) => {\n      console.error(`promise: decrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DeleteKey() {\n  /*\n  * 模拟删除密钥场景\n  * 1. 获取密钥别名\n  */\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  /*\n  * 2. 调用deleteKeyItem删除密钥\n  */\n  await huks.deleteKeyItem(rsaKeyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((error: Error) => {\n      console.error(`promise: delete data failed, ${JSON.stringify(error)}`);\n    })\n}
[h2]SM2
/*\n * 以下以SM2模式的Promise操作使用为例\n */\nimport { huks } from '@kit.UniversalKeystoreKit';\n\nlet sm2KeyAlias = 'test_sm2KeyAlias';\nlet handle: number;\nlet plainText = '123456';\nlet cipherData: Uint8Array;\n\nfunction StringToUint8Array(str: String) {\n  let arr: number[] = new Array();\n  for (let i = 0, j = str.length; i < j; ++i) {\n    arr.push(str.charCodeAt(i));\n  }\n  return new Uint8Array(arr);\n}\n\nfunction Uint8ArrayToString(fileData: Uint8Array) {\n  let dataString = '';\n  for (let i = 0; i < fileData.length; i++) {\n    dataString += String.fromCharCode(fileData[i]);\n  }\n  return dataString;\n}\n\nfunction GetSm2GenerateProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_SM2\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_SM2_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT |\n    huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }];\n  return properties;\n}\n\nfunction GetSm2EncryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_SM2\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_SM2_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_ENCRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SM3\n  }];\n  return properties;\n}\n\nfunction GetSm2DecryptProperties() {\n  let properties: Array<huks.HuksParam> = [{\n    tag: huks.HuksTag.HUKS_TAG_ALGORITHM,\n    value: huks.HuksKeyAlg.HUKS_ALG_SM2\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_KEY_SIZE,\n    value: huks.HuksKeySize.HUKS_SM2_KEY_SIZE_256\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_PURPOSE,\n    value: huks.HuksKeyPurpose.HUKS_KEY_PURPOSE_DECRYPT\n  }, {\n    tag: huks.HuksTag.HUKS_TAG_DIGEST,\n    value: huks.HuksKeyDigest.HUKS_DIGEST_SM3\n  }];\n  return properties;\n}\n\nasync function GenerateSm2Key() {\n  /*\n  * 模拟生成密钥场景\n  * 1. 确定密钥别名\n  */\n  /*\n  * 2. 获取生成密钥算法参数配置\n  */\n  let genProperties = GetSm2GenerateProperties();\n  let options: huks.HuksOptions = {\n    properties: genProperties\n  }\n  /*\n  * 3. 调用generateKeyItem\n  */\n  await huks.generateKeyItem(sm2KeyAlias, options)\n    .then((data) => {\n      console.info(`promise: generate SM2 Key success, data = ${JSON.stringify(data)}`);\n    }).catch((error: Error) => {\n      console.error(`promise: generate SM2 Key failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function EncryptDataSm2() {\n  /*\n  * 模拟加密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待加密的数据\n  */\n  /*\n  * 3. 获取加密算法参数配置\n  */\n  let encryptProperties = GetSm2EncryptProperties();\n  let options: huks.HuksOptions = {\n    properties: encryptProperties,\n    inData: StringToUint8Array(plainText)\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(sm2KeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init EncryptDataSm2 failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取加密后的密文\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: encrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n      cipherData = data.outData as Uint8Array;\n    }).catch((error: Error) => {\n      console.error(`promise: encrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DecryptDataSm2() {\n  /*\n  * 模拟解密场景\n  * 1. 获取密钥别名\n  */\n  /*\n  * 2. 获取待解密的密文\n  */\n  /*\n  * 3. 获取解密算法参数配置\n  */\n  let decryptOptions = GetSm2DecryptProperties()\n  let options: huks.HuksOptions = {\n    properties: decryptOptions,\n    inData: cipherData\n  }\n  /*\n  * 4. 调用initSession获取handle\n  */\n  await huks.initSession(sm2KeyAlias, options)\n    .then((data) => {\n      handle = data.handle;\n    }).catch((error: Error) => {\n      console.error(`promise: init DecryptDataSm2 failed, ${JSON.stringify(error)}`);\n    })\n  /*\n  * 5. 调用finishSession获取解密后的数据\n  */\n  await huks.finishSession(handle, options)\n    .then((data) => {\n      console.info(`promise: decrypt data success, data is ` + Uint8ArrayToString(data.outData as Uint8Array));\n    }).catch((error: Error) => {\n      console.error(`promise: decrypt data failed, ${JSON.stringify(error)}`);\n    })\n}\n\nasync function DeleteKey() {\n  /*\n  * 模拟删除密钥场景\n  * 1. 获取密钥别名\n  */\n  let emptyOptions: huks.HuksOptions = {\n    properties: []\n  }\n  /*\n  * 2. 调用deleteKeyItem删除密钥\n  */\n  await huks.deleteKeyItem(sm2KeyAlias, emptyOptions)\n    .then((data) => {\n      console.info(`promise: delete data success`);\n    }).catch((error: Error) => {\n      console.error(`promise: delete data failed, ${JSON.stringify(error)}`);\n    })\n}
示例代码
 通用密钥库功能合集 
