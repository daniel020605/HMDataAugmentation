使用SM2密钥对验签(C/C++)
对应的算法规格请查看验签算法规格：SM2。
在CMake脚本中链接相关动态库
   target_link_libraries(entry PUBLIC libohcrypto.so)
开发步骤
 调用OH_CryptoVerify_Create，指定字符串参数'SM2_256|SM3'，创建非对称密钥类型为SM2_256、摘要算法为SM3的Verify实例，用于完成验签操作。 调用OH_CryptoVerify_Init，使用公钥（OH_CryptoPubKey）初始化Verify实例。 调用OH_CryptoVerify_Update，传入待验证的数据。 当前单次update长度没有限制，开发者可以根据数据量判断如何调用update，如果数据量较小，可以直接调用OH_CryptoVerify_Final接口一次性传入。 调用OH_CryptoVerify_Final，对数据进行验签。 
#include \"CryptoArchitectureKit/crypto_common.h\"\n#include \"CryptoArchitectureKit/crypto_signature.h\"\n#include \"CryptoArchitectureKit/crypto_asym_key.h\"\n\nstatic bool doTestSm2Signature()\n{\n   OH_CryptoAsymKeyGenerator *keyCtx = nullptr;\n   OH_CryptoKeyPair *keyPair = nullptr;\n   OH_CryptoVerify *verify = nullptr;\n\n   uint8_t plainText[] = {\n      0x96, 0x46, 0x2e, 0xde, 0x3f, 0x47, 0xbf, 0xd6, 0x87, 0x48, 0x36, 0x1d, 0x75, 0x35, 0xbd, 0xbc,\n      0x6b, 0x06, 0xe8, 0xb3, 0x68, 0x91, 0x53, 0xce, 0x76, 0x5d, 0x24, 0xda, 0xdc, 0xc4, 0x9f, 0x94,\n   };\n   Crypto_DataBlob msgBlob = {\n      .data = reinterpret_cast<uint8_t *>(plainText),\n      .len = sizeof(plainText)\n   };\n\n   uint8_t pubKeyText[] = {\n      0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,\n      0x81, 0x1c, 0xcf, 0x55, 0x01, 0x82, 0x2d, 0x03, 0x42, 0x00, 0x04, 0x80, 0x5b, 0x78, 0x04, 0xd7,\n      0xcf, 0xc3, 0x99, 0x63, 0xae, 0x88, 0xcd, 0xfc, 0xd6, 0x18, 0xf4, 0x08, 0xe8, 0xe3, 0x68, 0x47,\n      0x4f, 0x44, 0x0e, 0xb2, 0xba, 0x3a, 0xb3, 0x10, 0xf1, 0xc9, 0xd0, 0x84, 0xe2, 0xa4, 0x47, 0xbe,\n      0x72, 0xae, 0xf8, 0x6a, 0xeb, 0x6e, 0x10, 0xab, 0x52, 0x6b, 0x6a, 0x58, 0xc6, 0xb5, 0x78, 0xaa,\n      0x70, 0xe5, 0x58, 0x20, 0x4e, 0x34, 0x42, 0x77, 0x08, 0x27, 0x11,\n   };\n\n   Crypto_DataBlob keyBlob = {\n      .data = reinterpret_cast<uint8_t *>(pubKeyText),\n      .len = sizeof(pubKeyText)\n   };\n\n   uint8_t signText[] = {\n      0x30, 0x45, 0x02, 0x21, 0x00, 0xf4, 0xe7, 0x9d, 0x35, 0x33, 0xa6, 0x86, 0x2e, 0x2a, 0x97, 0x72,\n      0xc9, 0x46, 0x79, 0x65, 0xca, 0x4a, 0x71, 0x34, 0xca, 0xf7, 0x58, 0xb3, 0x26, 0xa5, 0xdb, 0xfa,\n      0x8b, 0xbe, 0xbf, 0x5f, 0x90, 0x02, 0x20, 0x53, 0xb4, 0x23, 0xb1, 0xe2, 0x8f, 0x2f, 0xe9, 0xc8,\n      0x22, 0xef, 0xab, 0x9b, 0x13, 0x08, 0x75, 0x8e, 0xb1, 0x9c, 0x59, 0xe5, 0xd6, 0x64, 0x35, 0xf5,\n      0xd1, 0xde, 0xfa, 0xfe, 0x80, 0x37, 0x1a,\n   };\n\n   Crypto_DataBlob signBlob = {\n      .data = reinterpret_cast<uint8_t *>(signText),\n      .len = sizeof(signText)\n   };\n   \n   // keypair\n   OH_Crypto_ErrCode ret = CRYPTO_SUCCESS;\n   ret = OH_CryptoAsymKeyGenerator_Create((const char *)\"SM2_256\", &keyCtx);\n   if (ret != CRYPTO_SUCCESS) {\n      return false;\n   }\n   ret = OH_CryptoAsymKeyGenerator_Convert(keyCtx, CRYPTO_DER, &keyBlob, nullptr, &keyPair);\n   if (ret != CRYPTO_SUCCESS) {\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n   OH_CryptoPubKey *pubKey = OH_CryptoKeyPair_GetPubKey(keyPair);\n   // verify\n   ret = OH_CryptoVerify_Create((const char *)\"SM2_256|SM3\", &verify);\n   if (ret != CRYPTO_SUCCESS) {\n      OH_CryptoVerify_Destroy(verify);\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n   ret = OH_CryptoVerify_Init(verify, pubKey);\n   if (ret != CRYPTO_SUCCESS) {\n      OH_CryptoVerify_Destroy(verify);\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n   bool res = OH_CryptoVerify_Final(verify, &msgBlob, &signBlob);\n   if (res != true) {\n      OH_CryptoVerify_Destroy(verify);\n      OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n      return false;\n   }\n\n   OH_CryptoVerify_Destroy(verify);\n   OH_CryptoAsymKeyGenerator_Destroy(keyCtx);\n   OH_CryptoKeyPair_Destroy(keyPair);\n   return res;\n}
