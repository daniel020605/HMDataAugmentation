联合登录
Game Service Kit提供了联合登录能力，允许玩家在登录游戏时，向玩家展示联合登录框。您需通过联合登录接口和华为账号相关方法，完成联合登录能力接入及玩家信息校验。
玩家选择登录方式后，再次进入游戏默认不再弹出联合登录框，因此请在游戏页面上自行增加“切换账号”按钮，玩家点击按钮后强制弹出联合登录框，支持玩家重新选择游戏的登录方式。游戏强制弹出联合登录框仅需在调用unionLogin接口时将loginParam中的showLoginDialog字段设置为true。
前提条件
已实现初始化。
联合登录
初始化成功后，游戏可调用unionLogin接口进行联合登录，Game Service Kit向玩家展示联合登录弹框。
 accountName为“hw_account”时，通过Account Kit对应的创建授权/登录请求接口，获取用于服务器校验的Authorization Code信息。 accountName为unionLogin接口传入的thirdAccountInfo.accountName或“official_account”时，游戏官方账号自行登录处理。 
let context = getContext(this) as common.UIAbilityContext;\nlet thirdAccountInfo1: gamePlayer.ThirdAccountInfo = {\n  'accountName': 'testName1', // 游戏开放给玩家接入的账号类型名字，例如“官方账号”、“xx账号”等，并不是具体某个玩家ID或开发者ID。\n  'accountIcon': $r('app.media.icon') // 游戏官方账号图标资源信息\n};\nlet request: gamePlayer.UnionLoginParam = {\n  showLoginDialog: true,\n  thirdAccountInfos: [\n    thirdAccountInfo1    \n  ]\n};\ntry {\n  gamePlayer.unionLogin(context, request).then((result: gamePlayer.UnionLoginResult) => {\n    hilog.info(0x0000, 'testTag', `Succeeded in logining: ${result?.accountName}`);\n  }).catch((error: BusinessError) => {\n    hilog.error(0x0000, 'testTag', `Failed to login. Code: ${error.code}, message: ${error.message}`);\n  });\n} catch (error) {\n  let err = error as BusinessError;\n  hilog.error(0x0000, 'testTag', `Failed to login. Code: ${err.code}, message: ${err.message}`);\n}
华为账号认证与授权
游戏判断accountName为“hw_account”时，可根据needBinding值选择通过Account Kit对应的创建授权/登录请求接口，获取用于服务器校验的Authorization Code信息。
 需要华为玩家标识与游戏官方账号绑定（needBinding为true）  调用createAuthorizationWithHuaweiIDRequest创建授权请求并设置参数。             如需授权获取用户手机号，应先完成配置scope权限，并在authRequest.scopes中传入\"phone\"。如scope审批未完成或未通过，将无法正常展示和获取用户授权手机号。   // 创建授权请求，并设置参数\nlet authRequest = new authentication.HuaweiIDProvider().createAuthorizationWithHuaweiIDRequest();\n// 获取头像、昵称以及手机号授权需要传如下scope\nauthRequest.scopes = ['profile', 'phone'];\n// 若开发者需要进行服务端开发，则需传如下permission获取authorizationCode\nauthRequest.permissions = ['serviceauthcode'];\n// 用户是否需要登录授权，该值为true且用户未登录或未授权时，会拉起用户登录或授权页面\nauthRequest.forceAuthorization = true;\nauthRequest.state = util.generateRandomUUID();   调用AuthenticationController对象的executeRequest方法执行授权请求，并在Callback中处理授权结果，从授权结果中解析出头像昵称。// 执行授权请求\ntry {\n  let controller = new authentication.AuthenticationController(getContext(this));\n  controller.executeRequest(authRequest, (err, data) => {\n    if (err) {\n      hilog.error(0x0000, 'testTag', `Failed to authenticate. Code: ${err.code}, message: ${err.message}`);\n      return;\n    }\n    let authorizationWithHuaweiIDResponse = data as authentication.AuthorizationWithHuaweiIDResponse;\n    let state = authorizationWithHuaweiIDResponse.state;\n    if (state != undefined && authRequest.state != state) {\n      hilog.error(0x0000, 'testTag', `Failed to authenticate. State is different.`);\n      return;\n    }\n    hilog.info(0x0000, 'testTag', `Succeeded in authenticating.`);\n    let authorizationWithHuaweiIDCredential = authorizationWithHuaweiIDResponse.data!;\n    let avatarUri = authorizationWithHuaweiIDCredential.avatarUri;\n    let nickName = authorizationWithHuaweiIDCredential.nickName;\n    let authorizationCode = authorizationWithHuaweiIDCredential.authorizationCode;\n    // 开发者处理vatarUri, nickName, authorizationCode信息\n  });\n} catch (error) {\n  let err = error as BusinessError;\n  hilog.error(0x0000, 'testTag', `Failed to authenticate. Code: ${err.code}, message: ${err.message}`);\n}  
 不需要华为玩家标识与游戏官方账号绑定（即needBinding为false）  调用createLoginWithHuaweiIDRequest创建登录请求并设置参数。// 创建登录请求，并设置参数\nlet loginRequest = new authentication.HuaweiIDProvider().createLoginWithHuaweiIDRequest();\n// 当用户未登录华为账号时，是否强制拉起华为账号登录界面\nloginRequest.forceLogin = true;\nloginRequest.state = util.generateRandomUUID(); 调用AuthenticationController对象的executeRequest方法执行登录请求，并在Callback中处理登录结果，获取到Authorization Code。// 执行登录请求\ntry {\n  let controller = new authentication.AuthenticationController(getContext(this));\n  controller.executeRequest(loginRequest, (err, data) => {\n    if (err) {\n      hilog.error(0x0000, 'testTag', `Failed to login. Code: ${err.code}, message: ${err.message}`);\n      return;\n    }\n    let loginWithHuaweiIDResponse = data as authentication.LoginWithHuaweiIDResponse;\n    let state = loginWithHuaweiIDResponse.state;\n    if (state != undefined && loginRequest.state != state) {\n      hilog.error(0x0000, 'testTag', `Failed to login. State is different.`);\n      return;\n    }\n    hilog.info(0x0000, 'testTag', `Succeeded in logining.`);\n\n    let loginWithHuaweiIDCredential = loginWithHuaweiIDResponse.data!;\n    let authorizationCode = loginWithHuaweiIDCredential.authorizationCode;\n    // 开发者处理authorizationCode\n  });\n} catch (error) {\n  let err = error as BusinessError;\n  hilog.error(0x0000, 'testTag', `Failed to login. Code: ${err.code}, message: ${err.message}`);\n}  
通过Authorization Code获取Access Token
华为账号授权成功并获取Authorization Code后，请参考获取用户级凭证使用Authorization Code获取Access Token。
由于Access Token的有效期仅为60分钟，当Access Token失效或者即将失效时（可通过NSP_STATUS错误码判断），可以使用Refresh Token（有效期180天）通过获取用户级凭证向华为账号服务器请求获取新的Access Token。
通过Access Token获取手机号
先配置scope权限，再调用createAuthorizationWithHuaweiIDRequest接口授权手机号并获取Access Token，最后调用获取用户信息接口获取已授权的手机号。
玩家信息核验
为了保证玩家标识的安全性，游戏可以调用获取玩家标识接口，根据通过Authorization Code获取Access Token的方式获取的Access Token向华为游戏服务器请求获取服务器侧的玩家标识，再与unionLogin接口获取的玩家标识进行比对，完成玩家信息的校验。玩家标识校验通过后，您可以允许玩家进入游戏。
为了保证安全性，如果您有自己的服务器，强烈建议您在服务器侧验证玩家标识。
