OpenGL ES平台
业务流程
基于OpenGL ES图形API平台，集成超帧内插模式的主要业务流程如下：
 用户进入超帧适用的游戏场景。 游戏应用调用HMS_FG_CreateContext_GLES接口创建超帧上下文实例。如超帧上下文实例创建失败，则无需进入步骤5到步骤9的预测帧、真实帧交替渲染送显的循环流程，只需逐帧对场景进行渲染送显即可。 游戏应用调用接口配置超帧实例属性。包括调用HMS_FG_SetAlgorithmMode_GLES（必选）设置超帧算法模式并选择内插模式；调用HMS_FG_SetResolution_GLES（必选）设置超帧输入输出图像分辨率；调用HMS_FG_SetCvvZSemantic_GLES（可选）设置齐次裁剪空间Z/W范围及深度测试函数；调用HMS_FG_SetImageFormat_GLES（可选）设置真实渲染帧颜色缓冲区图像格式；如果颜色缓冲区相对深度模板缓冲区基于y轴翻转180度，则调用HMS_FG_SetDepthStencilYDirectionInverted_GLES（可选）设置翻转状态。 游戏应用调用HMS_FG_Activate_GLES接口激活超帧上下文实例。 游戏应用调用HMS_FG_Dispatch_GLES接口并传入历史真实渲染帧颜色信息、深度信息、相机矩阵信息，生成预测帧，并更新预测帧缓冲区。当相机视图投影矩阵的平移分量非常大时（如超过10W），预测帧效果下降，画面易出现闪烁。此时可在HMS_FG_Dispatch_GLES接口调用前调用HMS_FG_SetExtendedCameraInfo_GLES设置相机扩展信息，从而获取精度更高的预测帧效果。 预测帧绘制UI并送显。 绘制缓存中的上一帧真实渲染帧，并绘制UI。 上一帧真实渲染帧送显。 渲染游戏场景获取真实渲染帧，缓存真实渲染帧颜色信息、深度信息、相机矩阵等信息，用于后续超帧预测。由于内插模式真实帧需要等待前一帧预测帧绘制并送显后再送显，因此此处缓存一帧真实帧信息。跳转至序号5继续执行，直到退出游戏场景。 用户退出超帧适用的游戏场景。 游戏应用调用HMS_FG_DestroyContext_GLES接口销毁超帧上下文实例并释放内存资源。 
开发步骤
本节阐述基于OpenGL ES图形API平台的超帧调用示例，详细代码请参考图形开发Sample（超帧GLES）。
 引用Graphics Accelerate Kit超帧头文件：frame_generation_gles.h。// 引用超帧frame_generation_gles.h头文件\n#include <graphics_game_sdk/frame_generation_gles.h> 编写CMakeLists.txt。find_library(\n    # Sets the name of the path variable.\n    framegeneration-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    libframegeneration.so\n)\n\ntarget_link_libraries(entry PUBLIC\n    ${framegeneration-lib}\n) 调用HMS_FG_CreateContext_GLES接口创建超帧上下文实例。如果返回nullptr，则说明超帧上下文实例创建失败，或当前硬件设备不支持开启超帧。// 创建超帧上下文实例\nFG_Context_GLES* context_ = HMS_FG_CreateContext_GLES();\nif (context_ == nullptr) {\n    return false;\n} 调用超帧实例属性配置接口，超帧算法模式选择内插模式。// 初始化超帧接口调用错误码\nFG_ErrorCode errorCode = FG_SUCCESS;\n\n// 超帧算法模式\nFG_AlgorithmModeInfo aInfo{};\naInfo.predictionMode = FG_PREDICTION_MODE_INTERPOLATION;                  // 内插模式\naInfo.meMode = FG_ME_MODE_BASIC;                                          // 运动估计基础模式\nerrorCode = HMS_FG_SetAlgorithmMode_GLES(context_, &aInfo);               // [必选] 设置超帧算法模式\nif (errorCode != FG_SUCCESS) {\n    return false;\n}\n\n// 真实帧颜色缓冲区分辨率\nFG_Dimension2D inputColorResolution{};                                    \ninputColorResolution.width = 1280;                                        // 真实帧颜色缓冲区图像宽度\ninputColorResolution.height = 720;                                        // 真实帧颜色缓冲区图像高度\n// 真实帧深度模板缓冲区分辨率\nFG_Dimension2D inputDepthStencilResolution{};                             \ninputDepthStencilResolution.width = 1280;                                 // 真实帧深度模板缓冲区图像宽度\ninputDepthStencilResolution.height = 720;                                 // 真实帧深度模板缓冲区图像高度\n// 预测帧分辨率\nFG_Dimension2D outputColorResolution{};                                    \noutputColorResolution.width = 1280;                                       // 预测帧图像宽度\noutputColorResolution.height = 720;                                       // 预测帧图像高度\n// 超帧输入输出图像分辨率\nFG_ResolutionInfo rInfo{};\nrInfo.inputColorResolution = inputColorResolution;\nrInfo.inputDepthStencilResolution = inputDepthStencilResolution;\nrInfo.outputColorResolution = outputColorResolution;\nerrorCode = HMS_FG_SetResolution_GLES(context_, &rInfo);                  // [必选] 设置超帧输入输出图像分辨率\nif (errorCode != FG_SUCCESS) {\n    return false;\n}\n\n// [可选] 设置齐次裁剪空间Z/W范围及深度测试模式，接口不调用时默认为FG_CVV_Z_SEMANTIC_MINUS_ONE_TO_ONE_FORWARD_Z\nerrorCode = HMS_FG_SetCvvZSemantic_GLES(context_, FG_CVV_Z_SEMANTIC_MINUS_ONE_TO_ONE_FORWARD_Z);\nif (errorCode != FG_SUCCESS) {\n    return false;\n}\n\n// [可选] 设置真实渲染帧颜色缓冲区图像格式，接口不调用时默认为FG_FORMAT_R8G8B8A8_UNORM\nerrorCode = HMS_FG_SetImageFormat_GLES(context_, FG_FORMAT_R8G8B8A8_UNORM);\nif (errorCode != FG_SUCCESS) {\n    return false;\n}\n\n// [可选] 当颜色缓冲区相对深度模板缓冲区基于y轴翻转180度时，设置第二个参数为true，接口不调用时默认为false\nerrorCode = HMS_FG_SetDepthStencilYDirectionInverted_GLES(context_, true);\nif (errorCode != FG_SUCCESS) {\n    return false;\n} 调用HMS_FG_Activate_GLES接口激活超帧上下文实例。// 激活超帧上下文实例\nerrorCode = HMS_FG_Activate_GLES(context_);\nif (errorCode != FG_SUCCESS) {\n    return false;\n} 游戏运行中，真实帧和预测帧交替渲染并送显。渲染真实帧时，缓存颜色信息、深度信息和相机矩阵等属性信息。渲染预测帧时，需调用HMS_FG_Dispatch_GLES接口并传入上一帧真实帧属性信息，指定预测帧缓冲区索引，生成预测帧，最终更新预测帧缓冲区内存。// 帧计数\nuint32_t frameNum = 0;\n// 帧生成属性配置结构体\nFG_DispatchDescription_GLES dispatchDescriptionData_ {\n    .inputColor = 0U, \n    .inputDepthStencil = 0U, \n    .viewProj{}, \n    .invViewProj{}, \n    .outputColor = 0U\n};\n\n// 变量声明\nuint32_t inputColor = 0;\nuint32_t inputDepthStencil = 0;\nuint32_t outputColor = 0;\nFG_Mat4x4 preViewProj;\nFG_Mat4x4 preInvViewProj;\n\n// 帧循环\nwhile (true) {\n    frameNum += 1;\n    if ((frameNum & 1) != 0) { // 预测帧渲染阶段    \n        // 传入上一帧真实渲染帧颜色缓冲区索引\n        dispatchDescriptionData_.inputColor = inputColor;\n        // 传入上一帧真实渲染帧深度模板缓冲区索引\n        dispatchDescriptionData_.inputDepthStencil = inputDepthStencil;\n        // 传入预测帧缓冲区索引\n        dispatchDescriptionData_.outputColor = outputColor;\n        // 传入上一帧真实渲染帧视图投影矩阵\n        dispatchDescriptionData_.viewProj = preViewProj;\n        // 传入上一帧真实渲染帧视图投影逆矩阵\n        dispatchDescriptionData_.invViewProj= preInvViewProj;\n\n        // [可选] 当视图投影矩阵的平移分量非常大时，可提供相机扩展属性信息获得更加准确的超帧效果\n        FG_PerFrameExtendedCameraInfo info;\n        errorCode = HMS_FG_SetExtendedCameraInfo_GLES(context_, &info);\n\n        // 生成预测帧，更新预测帧缓冲区的内存\n        errorCode = HMS_FG_Dispatch_GLES(context_, &dispatchDescriptionData_);\n        switch (errorCode) {\n            case FG_SUCCESS: { // 生成预测帧成功\n                // 绘制预测帧\n                // ...\n\n                // 绘制UI\n                // ...\n\n                // 预测帧送显\n                // ...\n                break;\n            }\n            case FG_COLLECTING_PREVIOUS_FRAMES:\n                // 传入真实帧数量未达到固定阈值，无预测帧生成，基础内插模式传入真实帧数量<2时返回该状态码，此时不要将预测帧送显\n                break;\n            default:\n                // 预测帧生成失败\n                return false;\n        }\n    } else { // 真实帧渲染阶段            \n        // 绘制缓存中的上一帧真实帧\n        // ...\n\n        // 绘制UI\n        // ...\n        \n        // 渲染当前帧渲染画面，缓存颜色、深度、相机矩阵等信息，用于下一帧预测帧生成\n        // ...\n       \n        // 送显缓存中的上一帧真实帧\n        // ...\n    }\n} 调用HMS_FG_DestroyContext_GLES接口销毁超帧实例，释放内存资源。// 销毁超帧上下文实例并释放内存资源\nerrorCode = HMS_FG_DestroyContext_GLES(&context_);\nif (errorCode != FG_SUCCESS) {\n    return false;\n} 
