使用ImageSource完成图片解码
图片解码指将所支持格式的存档图片解码成统一的PixelMap，以便在应用或系统中进行图片显示或图片处理。当前支持的存档图片格式包括JPEG、PNG、GIF、WebP、BMP、SVG、ICO、DNG、HEIF(不同硬件设备支持情况不同)。
开发步骤
图片解码相关API的详细介绍请参见：图片解码接口说明。
 全局导入Image模块。 import { image } from '@kit.ImageKit'; 获取图片。  方法一：获取沙箱路径。具体请参考获取应用文件路径。应用沙箱的介绍及如何向应用沙箱推送文件，请参考文件管理。 const context : Context = getContext(this);\nconst filePath : string = context.cacheDir + '/test.jpg'; 方法二：通过沙箱路径获取图片的文件描述符。具体请参考file.fs API参考文档。 该方法需要先导入@kit.CoreFileKit模块。 import { fileIo as fs } from '@kit.CoreFileKit'; 然后调用fs.openSync()获取文件描述符。 const context = getContext(this);\nconst filePath = context.cacheDir + '/test.jpg';\nconst file : fs.File = fs.openSync(filePath, fs.OpenMode.READ_WRITE);\nconst fd : number = file?.fd; 方法三：通过资源管理器获取资源文件的ArrayBuffer。具体请参考ResourceManager API参考文档。 // 导入resourceManager资源管理器\nimport { resourceManager } from '@kit.LocalizationKit';\n\nconst context : Context = getContext(this);\n// 获取resourceManager资源管理器\nconst resourceMgr : resourceManager.ResourceManager = context.resourceManager; 不同模型获取资源管理器的方式不同，获取资源管理器后，再调用resourceMgr.getRawFileContent()获取资源文件的ArrayBuffer。 resourceMgr.getRawFileContent('test.jpg').then((fileData : Uint8Array) => {\n   console.log(\"Succeeded in getting RawFileContent\")\n   // 获取图片的ArrayBuffer\n   const buffer = fileData.buffer.slice(0);\n}).catch((err : BusinessError) => {\n   console.error(\"Failed to get RawFileContent\")\n}); 方法四：通过资源管理器获取资源文件的RawFileDescriptor。具体请参考ResourceManager API参考文档。 // 导入resourceManager资源管理器\nimport { resourceManager } from '@kit.LocalizationKit';\n\nconst context : Context = getContext(this);\n// 获取resourceManager资源管理器\nconst resourceMgr : resourceManager.ResourceManager = context.resourceManager; 不同模型获取资源管理器的方式不同，获取资源管理器后，再调用resourceMgr.getRawFd()获取资源文件的RawFileDescriptor。 resourceMgr.getRawFd('test.jpg').then((rawFileDescriptor : resourceManager.RawFileDescriptor) => {\n   console.log(\"Succeeded in getting RawFileDescriptor\")\n}).catch((err : BusinessError) => {\n   console.error(\"Failed to get RawFileDescriptor\")\n});  创建ImageSource实例。  方法一：通过沙箱路径创建ImageSource。沙箱路径可以通过步骤2的方法一获取。 // path为已获得的沙箱路径\nconst imageSource : image.ImageSource = image.createImageSource(filePath); 方法二：通过文件描述符fd创建ImageSource。文件描述符可以通过步骤2的方法二获取。 // fd为已获得的文件描述符\nconst imageSource : image.ImageSource = image.createImageSource(fd); 方法三：通过缓冲区数组创建ImageSource。缓冲区数组可以通过步骤2的方法三获取。 const imageSource : image.ImageSource = image.createImageSource(buffer); 方法四：通过资源文件的RawFileDescriptor创建ImageSource。RawFileDescriptor可以通过步骤2的方法四获取。 const imageSource : image.ImageSource = image.createImageSource(rawFileDescriptor);  设置解码参数DecodingOptions，解码获取pixelMap图片对象。  设置期望的format进行解码：import { BusinessError } from '@kit.BasicServicesKit';\nimport { image } from '@kit.ImageKit';\n\nlet img = await getContext(this).resourceManager.getMediaContent($r('app.media.image'));\nlet imageSource:image.ImageSource = image.createImageSource(img.buffer.slice(0));\nlet decodingOptions : image.DecodingOptions = {\n   editable: true,\n   desiredPixelFormat: 3,\n}\n// 创建pixelMap\nimageSource.createPixelMap(decodingOptions).then((pixelMap : image.PixelMap) => {\n   console.log(\"Succeeded in creating PixelMap\")\n}).catch((err : BusinessError) => {\n   console.error(\"Failed to create PixelMap\")\n}); HDR图片解码import { BusinessError } from '@kit.BasicServicesKit';\nimport { image } from '@kit.ImageKit';\n\nlet img = await getContext(this).resourceManager.getMediaContent($r('app.media.CUVAHdr'));\nlet imageSource:image.ImageSource = image.createImageSource(img.buffer.slice(0));\nlet decodingOptions : image.DecodingOptions = {\n   //设置为AUTO会根据图片资源格式解码，如果图片资源为HDR资源则会解码为HDR的pixelmap。\n   desiredDynamicRange: image.DecodingDynamicRange.AUTO,\n}\n// 创建pixelMap\nimageSource.createPixelMap(decodingOptions).then((pixelMap : image.PixelMap) => {\n   console.log(\"Succeeded in creating PixelMap\")\n   // 判断pixelmap是否为hdr内容\n   let info = pixelMap.getImageInfoSync();\n   console.log(\"pixelmap isHdr:\" + info.isHdr);\n}).catch((err : BusinessError) => {\n   console.error(\"Failed to create PixelMap\")\n});  解码完成，获取到pixelMap对象后，可以进行后续图片处理。 释放pixelMap和imageSource。 需确认pixelMap和imageSource异步方法已经执行完成，不再使用该变量后可按需手动调用下面方法释放。 pixelMap.release();\nimageSource.release(); 
开发示例-对资源文件中的图片进行解码
 获取resourceManager资源管理。 // 导入resourceManager资源管理器\nimport { resourceManager } from '@kit.LocalizationKit';\n\nconst context : Context = getContext(this);\n// 获取resourceManager资源管理\nconst resourceMgr : resourceManager.ResourceManager = context.resourceManager; 创建ImageSource。  方式一：通过rawfile文件夹下test.jpg的ArrayBuffer创建。  import { BusinessError } from '@kit.BasicServicesKit';\n\n resourceMgr.getRawFileContent('test.jpg').then((fileData : Uint8Array) => {\n    console.log(\"Succeeded in getting RawFileContent\")\n    // 获取图片的ArrayBuffer\n    const buffer = fileData.buffer.slice(0);\n    const imageSource : image.ImageSource = image.createImageSource(buffer);\n }).catch((err : BusinessError) => {\n    console.error(\"Failed to get RawFileContent\")\n }); 方式二：通过rawfile文件夹下test.jpg的RawFileDescriptor创建。  import { BusinessError } from '@kit.BasicServicesKit';\n\n resourceMgr.getRawFd('test.jpg').then((rawFileDescriptor : resourceManager.RawFileDescriptor) => {\n    console.log(\"Succeeded in getting RawFd\")\n    const imageSource : image.ImageSource = image.createImageSource(rawFileDescriptor);\n }).catch((err : BusinessError) => {\n    console.error(\"Failed to get RawFd\")\n });  创建pixelMap。 imageSource.createPixelMap().then((pixelMap: image.PixelMap) => {\n   console.log(\"Succeeded in creating PixelMap\")\n}).catch((err : BusinessError) => {\n   console.error(\"Failed to creating PixelMap\")\n}); 释放pixelMap和imageSource。 需确认pixelMap和imageSource异步方法已经执行完成，不再使用该变量后可按需手动调用下面方法释放。 pixelMap.release();\nimageSource.release(); 
示例代码
 水印添加能力 
