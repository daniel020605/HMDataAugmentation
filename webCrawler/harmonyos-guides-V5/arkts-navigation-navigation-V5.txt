组件导航 (Navigation)(推荐)
组件导航（Navigation）主要用于实现页面间以及组件内部的页面跳转，支持在不同组件间传递跳转参数，提供灵活的跳转栈操作，从而更便捷地实现对不同页面的访问和复用。本文将从组件导航（Navigation）的显示模式、路由操作、子页面管理、跨包跳转以及跳转动效等几个方面进行详细介绍。
Navigation是路由导航的根视图容器，一般作为页面（@Entry）的根容器，包括单栏（Stack）、分栏（Split）和自适应（Auto）三种显示模式。Navigation组件适用于模块内和跨模块的路由切换，通过组件级路由能力实现更加自然流畅的转场体验，并提供多种标题栏样式来呈现更好的标题和内容联动效果。一次开发，多端部署场景下，Navigation组件能够自动适配窗口显示大小，在窗口较大的场景下自动切换分栏展示效果。
Navigation组件主要包含​导航页和子页。导航页由标题栏（包含菜单栏）、内容区和工具栏组成，可以通过hideNavBar属性进行隐藏，导航页不存在页面栈中，与子页，以及子页之间可以通过路由操作进行切换。
在API Version 9上，Navigation需要配合NavRouter组件实现页面路由。从API Version 10开始，更推荐使用NavPathStack实现页面路由。
设置页面显示模式
Navigation组件通过mode属性设置页面的显示模式。
 自适应模式 Navigation组件默认为自适应模式，此时mode属性为NavigationMode.Auto。自适应模式下，当页面宽度大于等于一定阈值( API version 9及以前：520vp，API version 10及以后：600vp )时，Navigation组件采用分栏模式，反之采用单栏模式。 Navigation() {\n  // ...\n}\n.mode(NavigationMode.Auto) 单页面模式 图1 单页面布局示意图  将mode属性设置为NavigationMode.Stack，Navigation组件即可设置为单页面显示模式。 Navigation() {\n  // ...\n}\n.mode(NavigationMode.Stack)  分栏模式 图2 分栏布局示意图  将mode属性设置为NavigationMode.Split，Navigation组件即可设置为分栏显示模式。 @Entry\n@Component\nstruct NavigationExample {\n  @State TooTmp: ToolbarItem = {\n    'value': \"func\", 'icon': \"./image/ic_public_highlights.svg\", 'action': () => {\n    }\n  }\n  @Provide('pageInfos') pageInfos: NavPathStack = new NavPathStack()\n  private arr: number[] = [1, 2, 3];\n\n  @Builder\n  PageMap(name: string) {\n    if (name === \"NavDestinationTitle1\") {\n      pageOneTmp()\n    } else if (name === \"NavDestinationTitle2\") {\n      pageTwoTmp()\n    } else if (name === \"NavDestinationTitle3\") {\n      pageThreeTmp()\n    }\n  }\n\n  build() {\n    Column() {\n      Navigation(this.pageInfos) {\n        TextInput({ placeholder: 'search...' })\n          .width(\"90%\")\n          .height(40)\n          .backgroundColor('#FFFFFF')\n\n        List({ space: 12 }) {\n          ForEach(this.arr, (item: number) => {\n            ListItem() {\n              Text(\"Page\" + item)\n                .width(\"100%\")\n                .height(72)\n                .backgroundColor('#FFFFFF')\n                .borderRadius(24)\n                .fontSize(16)\n                .fontWeight(500)\n                .textAlign(TextAlign.Center)\n                .onClick(() => {\n                  this.pageInfos.pushPath({ name: \"NavDestinationTitle\" + item })\n                })\n            }\n          }, (item: number) => item.toString())\n        }\n        .width(\"90%\")\n        .margin({ top: 12 })\n      }\n      .title(\"主标题\")\n      .mode(NavigationMode.Split)\n      .navDestination(this.PageMap)\n      .menus([\n        {\n          value: \"\", icon: \"./image/ic_public_search.svg\", action: () => {\n          }\n        },\n        {\n          value: \"\", icon: \"./image/ic_public_add.svg\", action: () => {\n          }\n        },\n        {\n          value: \"\", icon: \"./image/ic_public_add.svg\", action: () => {\n          }\n        },\n        {\n          value: \"\", icon: \"./image/ic_public_add.svg\", action: () => {\n          }\n        },\n        {\n          value: \"\", icon: \"./image/ic_public_add.svg\", action: () => {\n          }\n        }\n      ])\n      .toolbarConfiguration([this.TooTmp, this.TooTmp, this.TooTmp])\n    }\n    .height('100%')\n    .width('100%')\n    .backgroundColor('#F1F3F5')\n  }\n}\n\n// PageOne.ets\n@Component\nexport struct pageOneTmp {\n  @Consume('pageInfos') pageInfos: NavPathStack;\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(\"NavDestinationContent1\")\n      }.width('100%').height('100%')\n    }.title(\"NavDestinationTitle1\")\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pageInfos.pop() // 弹出路由栈栈顶元素\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    })\n  }\n}\n\n// PageTwo.ets\n@Component\nexport struct pageTwoTmp {\n  @Consume('pageInfos') pageInfos: NavPathStack;\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(\"NavDestinationContent2\")\n      }.width('100%').height('100%')\n    }.title(\"NavDestinationTitle2\")\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pageInfos.pop() // 弹出路由栈栈顶元素\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    })\n  }\n}\n\n// PageThree.ets\n@Component\nexport struct pageThreeTmp {\n  @Consume('pageInfos') pageInfos: NavPathStack;\n\n  build() {\n    NavDestination() {\n      Column() {\n        Text(\"NavDestinationContent3\")\n      }.width('100%').height('100%')\n    }.title(\"NavDestinationTitle3\")\n    .onBackPressed(() => {\n      const popDestinationInfo = this.pageInfos.pop() // 弹出路由栈栈顶元素\n      console.log('pop' + '返回值' + JSON.stringify(popDestinationInfo))\n      return true\n    })\n  }\n}  
设置标题栏模式
标题栏在界面顶部，用于呈现界面名称和操作入口，Navigation组件通过titleMode属性设置标题栏模式。
Navigation或NavDestination未设置主副标题并且没有返回键时，不显示标题栏。
 Mini模式 普通型标题栏，用于一级页面不需要突出标题的场景。 图3 Mini模式标题栏  Navigation() {\n  // ...\n}\n.titleMode(NavigationTitleMode.Mini) Full模式 强调型标题栏，用于一级页面需要突出标题的场景。 图4 Full模式标题栏  Navigation() {\n  // ...\n}\n.titleMode(NavigationTitleMode.Full) 
设置菜单栏
菜单栏位于Navigation组件的右上角，开发者可以通过menus属性进行设置。menus支持Array<NavigationMenuItem>和CustomBuilder两种参数类型。使用Array<NavigationMenuItem>类型时，竖屏最多支持显示3个图标，横屏最多支持显示5个图标，多余的图标会被放入自动生成的更多图标。
图5 设置了3个图标的菜单栏
let TooTmp: NavigationMenuItem = {'value': \"\", 'icon': \"./image/ic_public_highlights.svg\", 'action': ()=> {}}\nNavigation() {\n  // ...\n}\n.menus([TooTmp,\n  TooTmp,\n  TooTmp])
图片也可以引用resources中的资源。
let TooTmp: NavigationMenuItem = {'value': \"\", 'icon': \"resources/base/media/ic_public_highlights.svg\", 'action': ()=> {}}\nNavigation() {\n  // ...\n}\n.menus([TooTmp,\n  TooTmp,\n  TooTmp])
图6 设置了4个图标的菜单栏
let TooTmp: NavigationMenuItem = {'value': \"\", 'icon': \"./image/ic_public_highlights.svg\", 'action': ()=> {}}\nNavigation() {\n  // ...\n}\n// 竖屏最多支持显示3个图标，多余的图标会被放入自动生成的更多图标。\n.menus([TooTmp,\n  TooTmp,\n  TooTmp,\n  TooTmp])
设置工具栏
工具栏位于Navigation组件的底部，开发者可以通过toolbarConfiguration属性进行设置。
图7 工具栏
let TooTmp: ToolbarItem = {'value': \"func\", 'icon': \"./image/ic_public_highlights.svg\", 'action': ()=> {}}\nlet TooBar: ToolbarItem[] = [TooTmp,TooTmp,TooTmp]\nNavigation() {\n  // ...\n}\n.toolbarConfiguration(TooBar)
路由操作
Navigation路由相关的操作都是基于页面栈NavPathStack提供的方法进行，每个Navigation都需要创建并传入一个NavPathStack对象，用于管理页面。主要涉及页面跳转、页面返回、页面替换、页面删除、参数获取、路由拦截等功能。
从API version 12开始，页面栈允许被继承。开发者可以在派生类中自定义属性和方法，也可以重写父类的方法。派生类对象可以替代基类NavPathStack对象使用。具体示例代码参见：页面栈继承示例代码。
不建议开发者通过监听生命周期的方式管理自己的页面栈。
@Entry\n@Component\nstruct Index {\n  // 创建一个页面栈对象并传入Navigation\n  pageStack: NavPathStack = new NavPathStack()\n\n  build() {\n    Navigation(this.pageStack) {\n    }\n    .title('Main')\n  }\n}
[h2]页面跳转
NavPathStack通过Push相关的接口去实现页面跳转的功能，主要分为以下三类:
 普通跳转，通过页面的name去跳转，并可以携带param。 this.pageStack.pushPath({ name: \"PageOne\", param: \"PageOne Param\" })\nthis.pageStack.pushPathByName(\"PageOne\", \"PageOne Param\") 带返回回调的跳转，跳转时添加onPop回调，能在页面出栈时获取返回信息，并进行处理。 this.pageStack.pushPathByName('PageOne', \"PageOne Param\", (popInfo) => {\n  console.log('Pop page name is: ' + popInfo.info.name + ', result: ' + JSON.stringify(popInfo.result))\n}); 带错误码的跳转，跳转结束会触发异步回调，返回错误码信息。 this.pageStack.pushDestination({name: \"PageOne\", param: \"PageOne Param\"})\n  .catch((error: BusinessError) => {\n    console.error(`Push destination failed, error code = ${error.code}, error.message = ${error.message}.`);\n  }).then(() => {\n    console.info('Push destination succeed.');\n  });\nthis.pageStack.pushDestinationByName(\"PageOne\", \"PageOne Param\")\n  .catch((error: BusinessError) => {\n    console.error(`Push destination failed, error code = ${error.code}, error.message = ${error.message}.`);\n  }).then(() => {\n    console.info('Push destination succeed.');\n  }); 
[h2]页面返回
NavPathStack通过Pop相关接口去实现页面返回功能。
// 返回到上一页\nthis.pageStack.pop()\n// 返回到上一个PageOne页面\nthis.pageStack.popToName(\"PageOne\")\n// 返回到索引为1的页面\nthis.pageStack.popToIndex(1)\n// 返回到根首页（清除栈中所有页面）\nthis.pageStack.clear()
[h2]页面替换
NavPathStack通过Replace相关接口去实现页面替换功能。
// 将栈顶页面替换为PageOne\nthis.pageStack.replacePath({ name: \"PageOne\", param: \"PageOne Param\" })\nthis.pageStack.replacePathByName(\"PageOne\", \"PageOne Param\")\n// 带错误码的替换，跳转结束会触发异步回调，返回错误码信息\nthis.pageStack.replaceDestination({name: \"PageOne\", param: \"PageOne Param\"})\n  .catch((error: BusinessError) => {\n    console.error(`Replace destination failed, error code = ${error.code}, error.message = ${error.message}.`);\n  }).then(() => {\n    console.info('Replace destination succeed.');\n  })
[h2]页面删除
NavPathStack通过Remove相关接口去实现删除页面栈中特定页面的功能。
// 删除栈中name为PageOne的所有页面\nthis.pageStack.removeByName(\"PageOne\")\n// 删除指定索引的页面\nthis.pageStack.removeByIndexes([1,3,5])\n// 删除指定id的页面\nthis.pageStack.removeByNavDestinationId(\"1\");
[h2]移动页面
NavPathStack通过Move相关接口去实现移动页面栈中特定页面到栈顶的功能。
// 移动栈中name为PageOne的页面到栈顶\nthis.pageStack.moveToTop(\"PageOne\");\n// 移动栈中索引为1的页面到栈顶\nthis.pageStack.moveIndexToTop(1);
[h2]参数获取
NavPathStack通过Get相关接口去获取页面的一些参数。
// 获取栈中所有页面name集合\nthis.pageStack.getAllPathName()\n// 获取索引为1的页面参数\nthis.pageStack.getParamByIndex(1)\n// 获取PageOne页面的参数\nthis.pageStack.getParamByName(\"PageOne\")\n// 获取PageOne页面的索引集合\nthis.pageStack.getIndexByName(\"PageOne\")
[h2]路由拦截
NavPathStack提供了setInterception方法，用于设置Navigation页面跳转拦截回调。该方法需要传入一个NavigationInterception对象，该对象包含三个回调函数：
无论是哪个回调，在进入回调时页面栈都已经发生了变化。
开发者可以在willShow回调中通过修改路由栈来实现路由拦截重定向的能力。
this.pageStack.setInterception({\n  willShow: (from: NavDestinationContext | \"navBar\", to: NavDestinationContext | \"navBar\",\n    operation: NavigationOperation, animated: boolean) => {\n    if (typeof to === \"string\") {\n      console.log(\"target page is navigation home page.\");\n      return;\n    }\n    // 将跳转到PageTwo的路由重定向到PageOne\n    let target: NavDestinationContext = to as NavDestinationContext;\n    if (target.pathInfo.name === 'PageTwo') {\n      target.pathStack.pop();\n      target.pathStack.pushPathByName('PageOne', null);\n    }\n  }\n})
子页面
NavDestination是Navigation子页面的根容器，用于承载子页面的一些特殊属性以及生命周期等。NavDestination可以设置独立的标题栏和菜单栏等属性，使用方法与Navigation相同。NavDestination也可以通过mode属性设置不同的显示类型，用于满足不同页面的诉求。
[h2]页面显示类型
 标准类型 NavDestination组件默认为标准类型，此时mode属性为NavDestinationMode.STANDARD。标准类型的NavDestination的生命周期跟随其在NavPathStack页面栈中的位置变化而改变。 弹窗类型 NavDestination设置mode为NavDestinationMode.DIALOG弹窗类型，此时整个NavDestination默认透明显示。弹窗类型的NavDestination显示和消失时不会影响下层标准类型的NavDestination的显示和生命周期，两者可以同时显示。 // Dialog NavDestination\n@Entry\n@Component\n struct Index {\n   @Provide('NavPathStack') pageStack: NavPathStack = new NavPathStack()\n\n   @Builder\n   PagesMap(name: string) {\n     if (name == 'DialogPage') {\n       DialogPage()\n     }\n   }\n\n   build() {\n     Navigation(this.pageStack) {\n       Button('Push DialogPage')\n         .margin(20)\n         .width('80%')\n         .onClick(() => {\n           this.pageStack.pushPathByName('DialogPage', '');\n         })\n     }\n     .mode(NavigationMode.Stack)\n     .title('Main')\n     .navDestination(this.PagesMap)\n   }\n }\n\n @Component\n export struct DialogPage {\n   @Consume('NavPathStack') pageStack: NavPathStack;\n\n   build() {\n     NavDestination() {\n       Stack({ alignContent: Alignment.Center }) {\n         Column() {\n           Text(\"Dialog NavDestination\")\n             .fontSize(20)\n             .margin({ bottom: 100 })\n           Button(\"Close\").onClick(() => {\n             this.pageStack.pop()\n           }).width('30%')\n         }\n         .justifyContent(FlexAlign.Center)\n         .backgroundColor(Color.White)\n         .borderRadius(10)\n         .height('30%')\n         .width('80%')\n       }.height(\"100%\").width('100%')\n     }\n     .backgroundColor('rgba(0,0,0,0.5)')\n     .hideTitleBar(true)\n     .mode(NavDestinationMode.DIALOG)\n   }\n }  
[h2]页面生命周期
Navigation作为路由容器，其生命周期承载在NavDestination组件上，以组件事件的形式开放。
其生命周期大致可分为三类，自定义组件生命周期、通用组件生命周期和自有生命周期。其中，aboutToAppear和aboutToDisappear是自定义组件的生命周期(NavDestination外层包含的自定义组件)，OnAppear和OnDisappear是组件的通用生命周期。剩下的六个生命周期为NavDestination独有。
生命周期时序如下图所示：
 aboutToAppear：在创建自定义组件后，执行其build()函数之前执行（NavDestination创建之前），允许在该方法中改变状态变量，更改将在后续执行build()函数中生效。 onWillAppear：NavDestination创建后，挂载到组件树之前执行，在该方法中更改状态变量会在当前帧显示生效。 onAppear：通用生命周期事件，NavDestination组件挂载到组件树时执行。 onWillShow：NavDestination组件布局显示之前执行，此时页面不可见（应用切换到前台不会触发）。 onShown：NavDestination组件布局显示之后执行，此时页面已完成布局。 onWillHide：NavDestination组件触发隐藏之前执行（应用切换到后台不会触发）。 onHidden：NavDestination组件触发隐藏后执行（非栈顶页面push进栈，栈顶页面pop出栈或应用切换到后台）。 onWillDisappear：NavDestination组件即将销毁之前执行，如果有转场动画，会在动画前触发（栈顶页面pop出栈）。 onDisappear：通用生命周期事件，NavDestination组件从组件树上卸载销毁时执行。 aboutToDisappear：自定义组件析构销毁之前执行，不允许在该方法中改变状态变量。 
[h2]页面监听和查询
为了方便组件跟页面解耦，在NavDestination子页面内部的自定义组件可以通过全局方法监听或查询到页面的一些状态信息。
 页面信息查询 自定义组件提供queryNavDestinationInfo方法，可以在NavDestination内部查询到当前所属页面的信息，返回值为NavDestinationInfo，若查询不到则返回undefined。  import { uiObserver } from '@kit.ArkUI';\n\n // NavDestination内的自定义组件\n @Component\n struct MyComponent {\n   navDesInfo: uiObserver.NavDestinationInfo | undefined\n\n   aboutToAppear(): void {\n     this.navDesInfo = this.queryNavDestinationInfo();\n   }\n\n   build() {\n       Column() {\n         Text(\"所属页面Name: \" + this.navDesInfo?.name)\n       }.width('100%').height('100%')\n   }\n } 页面状态监听 通过observer.on('navDestinationUpdate')提供的注册接口可以注册NavDestination生命周期变化的监听，使用方式如下： uiObserver.on('navDestinationUpdate', (info) => {\n     console.info('NavDestination state update', JSON.stringify(info));\n }); 也可以注册页面切换的状态回调，能在页面发生路由切换的时候拿到对应的页面信息NavDestinationSwitchInfo，并且提供了UIAbilityContext和UIContext不同范围的监听：  // 在UIAbility中使用\n import { UIContext, uiObserver } from '@kit.ArkUI';\n\n // callBackFunc 是开发者定义的监听回调函数\n function callBackFunc(info: uiObserver.NavDestinationSwitchInfo) {}\n uiObserver.on('navDestinationSwitch', this.context, callBackFunc);\n\n // 可以通过窗口的getUIContext()方法获取对应的UIContent\n uiContext: UIContext | null = null;\n uiObserver.on('navDestinationSwitch', this.uiContext, callBackFunc); 
页面转场
Navigation默认提供了页面切换的转场动画，通过页面栈操作时，会触发不同的转场效果（Dialog类型的页面默认无转场动画），Navigation也提供了关闭系统转场、自定义转场以及共享元素转场的能力。
[h2]关闭转场
 全局关闭 Navigation通过NavPathStack中提供的disableAnimation方法可以在当前Navigation中关闭或打开所有转场动画。 pageStack: NavPathStack = new NavPathStack()\n\naboutToAppear(): void {\n  this.pageStack.disableAnimation(true)\n} 单次关闭 NavPathStack中提供的Push、Pop、Replace等接口中可以设置animated参数，默认为true表示有转场动画，需要单次关闭转场动画可以置为false，不影响下次转场动画。 pageStack: NavPathStack = new NavPathStack()\n\nthis.pageStack.pushPath({ name: \"PageOne\" }, false)\nthis.pageStack.pop(false) 
[h2]自定义转场
Navigation通过customNavContentTransition事件提供自定义转场动画的能力，通过如下三步可以定义一个自定义的转场动画。
 构建一个自定义转场动画工具类CustomNavigationUtils，通过一个Map管理各个页面自定义动画对象CustomTransition，页面在创建的时候将自己的自定义转场动画对象注册进去，销毁的时候解注册； 实现一个转场协议对象NavigationAnimatedTransition，其中timeout属性表示转场结束的超时时间，默认为1000ms，transition属性为自定义的转场动画方法，开发者要在这里实现自己的转场动画逻辑，系统会在转场开始时调用该方法，onTransitionEnd为转场结束时的回调。 调用customNavContentTransition方法，返回实现的转场协议对象，如果返回undefined，则使用系统默认转场。 
具体示例代码可以参考Navigation自定义转场示例。
[h2]共享元素转场
NavDestination之间切换时可以通过geometryTransition实现共享元素转场。配置了共享元素转场的页面同时需要关闭系统默认的转场动画。
 为需要实现共享元素转场的组件添加geometryTransition属性，id参数必须在两个NavDestination之间保持一致。 // 起始页配置共享元素id\nNavDestination() {\n  Column() {\n    // ...\n    Image($r('app.media.startIcon'))\n    .geometryTransition('sharedId')\n    .width(100)\n    .height(100)\n  }\n}\n.title('FromPage')\n\n// 目的页配置共享元素id\nNavDestination() {\n  Column() {\n    // ...\n    Image($r('app.media.startIcon'))\n    .geometryTransition('sharedId')\n    .width(200)\n    .height(200)\n  }\n}\n.title('ToPage') 将页面路由的操作，放到animateTo动画闭包中，配置对应的动画参数以及关闭系统默认的转场。 NavDestination() {\n  Column() {\n    Button('跳转目的页')\n    .width('80%')\n    .height(40)\n    .margin(20)\n    .onClick(() => {\n        this.getUIContext()?.animateTo({ duration: 1000 }, () => {\n          this.pageStack.pushPath({ name: 'ToPage' }, false)\n        })\n    })\n  }\n}\n.title('FromPage') 
跨包动态路由
通过静态import页面再进行路由跳转的方式会造成不同模块之间的依赖耦合，以及首页加载时间长等问题。
动态路由设计的初衷旨在解决多个模块（HAR/HSP）能够复用相同的业务逻辑，实现各业务模块间的解耦，同时支持路由功能的扩展与整合。
动态路由的优势：
 路由定义除了跳转的URL以外，可以丰富的配置扩展信息，如横竖屏默认模式，是否需要鉴权等等，做路由跳转时统一处理。 给每个路由页面设置一个名字，按照名称进行跳转而不是文件路径。 页面的加载可以使用动态import（按需加载），防止首个页面加载大量代码导致卡顿。 
动态路由提供系统路由表和自定义路由表两种实现方式。
 系统路由表相对自定义路由表，使用更简单，只需要添加对应页面跳转配置项，即可实现页面跳转。 自定义路由表使用起来更复杂，但是可以根据应用业务进行定制处理。 
支持自定义路由表和系统路由表混用。
[h2]系统路由表
从API version 12开始，Navigation支持使用系统路由表的方式进行动态路由。各业务模块（HSP/HAR）中需要独立配置route_map.json文件，在触发路由跳转时，应用只需要通过NavPathStack提供的路由方法，传入需要路由的页面配置名称，此时系统会自动完成路由模块的动态加载、页面组件构建，并完成路由跳转，从而实现了开发层面的模块解耦。系统路由表不支持预览器，跨平台及模拟器。其主要步骤如下：
 在跳转目标模块的配置文件module.json5添加路由表配置：   {\n    \"module\" : {\n      \"routerMap\": \"$profile:route_map\"\n    }\n  } 添加完路由配置文件地址后，需要在工程resources/base/profile中创建route_map.json文件。添加如下配置信息：   {\n    \"routerMap\": [\n      {\n        \"name\": \"PageOne\",\n        \"pageSourceFile\": \"src/main/ets/pages/PageOne.ets\",\n        \"buildFunction\": \"PageOneBuilder\",\n        \"data\": {\n          \"description\" : \"this is PageOne\"\n        }\n      }\n    ]\n  } 配置说明如下：     配置项 说明    name 跳转页面名称。   pageSourceFile 跳转目标页在包内的路径，相对src目录的相对路径。   buildFunction 跳转目标页的入口函数名称，必须以@Builder修饰。   data 应用自定义字段。可以通过配置项读取接口getConfigInRouteMap获取。    在跳转目标页面中，需要配置入口Builder函数，函数名称需要和route_map.json配置文件中的buildFunction保持一致，否则在编译时会报错。   // 跳转页面入口函数\n  @Builder\n  export function PageOneBuilder() {\n    PageOne()\n  }\n\n  @Component\n  struct PageOne {\n    pathStack: NavPathStack = new NavPathStack()\n\n    build() {\n      NavDestination() {\n      }\n      .title('PageOne')\n      .onReady((context: NavDestinationContext) => {\n         this.pathStack = context.pathStack\n      })\n    }\n  } 通过pushPathByName等路由接口进行页面跳转。(注意：此时Navigation中可以不用配置navDestination属性)。   @Entry\n  @Component\n  struct Index {\n    pageStack : NavPathStack = new NavPathStack();\n\n    build() {\n      Navigation(this.pageStack){\n      }.onAppear(() => {\n        this.pageStack.pushPathByName(\"PageOne\", null, false);\n      })\n      .hideNavBar(true)\n    }\n  } 
[h2]自定义路由表
开发者可以通过自定义路由表的方式来实现跨包动态路由，具体实现方法请参考Navigation自定义动态路由 示例。
实现方案：
 定义页面跳转配置项。        使用资源文件进行定义，通过资源管理@ohos.resourceManager在运行时对资源文件解析。 在ets文件中配置路由加载配置项，一般包括路由页面名称（即pushPath等接口中页面的别名），文件所在模块名称（hsp/har的模块名），加载页面在模块内的路径（相对src目录的路径）。  加载目标跳转页面，通过动态import将跳转目标页面所在的模块在运行时加载, 在模块加载完成后，调用模块中的方法，通过import在模块的方法中加载模块中显示的目标页面，并返回页面加载完成后定义的Builder函数。 触发页面跳转，在Navigation的navDestination属性执行步骤2中加载的Builder函数，即可跳转到目标页面。 
示例代码
 Navigation系统路由 
