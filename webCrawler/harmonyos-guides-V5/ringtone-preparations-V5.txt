设置铃声
 导入ringtone模块和相关公共模块。import { ringtone } from '@kit.RingtoneKit'\nimport { uniformTypeDescriptor } from '@kit.ArkData';\nimport { JSON } from '@kit.ArkTS';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nconst APP_TAG = \"Msc_Demo\"\nconst DOMAIN = 0x0001  调用ringtone.getSupportedRingtoneTypes接口，查询支持设置的铃声类型。let ringtoneTypeList: Array<ringtone.RingtoneType> = ringtone.getSupportedRingtoneTypes();\nhilog.info(DOMAIN, APP_TAG,'getSupportedRingtoneTypes : ' + JSON.stringify(ringtoneTypeList));  调用ringtone.getSupportedDataTypes接口，查询支持的数据类型。// 其中 ringtone.RingtoneType.NOTIFICATION 为通知铃声\nlet dataTypeList: Array<uniformTypeDescriptor.UniformDataType> = ringtone.getSupportedDataTypes(ringtone.RingtoneType.NOTIFICATION);\nhilog.info(DOMAIN, APP_TAG,'getSupportedDataTypes: ' + JSON.stringify(dataTypeList));  调用ringtone.startRingtoneSetting接口拉起设置弹窗，用户设置铃声后返回设置的铃声类型。        通过promise异步方式：       // 详细代码参考API参考\nlet audioPath: string = (getContext(this) as common.UIAbilityContext).filesDir + '/' + this.buttonText;\nlet fileName: string = audioPath.substring(audioPath.lastIndexOf('/') + 1, audioPath.lastIndexOf('.'));\nawait ringtone.startRingtoneSetting(this.context, audioPath, fileName).then(res => {\n  hilog.info(DOMAIN, APP_TAG,'setFlag :' + res);\n});  通过callback异步方式： // 详细代码参考API参考\nlet audioPath: string = (getContext(this) as common.UIAbilityContext).filesDir + '/' + this.buttonText;\nlet fileName: string = audioPath.substring(audioPath.lastIndexOf('/') + 1, audioPath.lastIndexOf('.'));\nringtone.startRingtoneSetting(this.context, audioPath, fileName, (err, data) => {\n  hilog.info(DOMAIN, APP_TAG,'setFlag :' + data);\n});  调用ringtone.getSupportedMaxDuration接口，获取当前铃声支持的最大时长。// 其中 ringtone.RingtoneType.MESSAGE 为短信铃声\nlet maxDuration: number =\n                ringtone.getSupportedMaxDuration(ringtone.RingtoneType.MESSAGE, uniformTypeDescriptor.UniformDataType.MP3)\nhilog.info(DOMAIN, APP_TAG,'getSupportedMaxDuration: ' + maxDuration);  
