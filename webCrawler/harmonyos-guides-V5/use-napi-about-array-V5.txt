使用Node-API接口进行array相关开发
简介
使用Node-API接口进行array相关开发时，调用相关接口可以在Node-API模块中直接操作和处理ArkTS中的数组。
基本概念
使用Node-API接口进行数组（array）相关开发时，涉及的基本概念主要包括数组的创建、访问、修改、遍历以及与数组相关的操作。这些概念对于理解如何在Node-API模块中与ArkTS数组交互非常重要。以下是一些关键概念：
数组的创建：在Node-API模块中需要创建一个新的ArkTS数组，可以使用napi_create_array接口创建数组，将数组传递给ArkTS层。数组相关操作：在Node-API模块中通过对应的接口获取ArkTS数组的长度、检索指定索引处的元素以及设置指定索引处的元素值，从而实现Node-API模块与ArkTS数组的交互。TypedArray：ArkTS中的TypedArray是一种用来描述二进制数据的类数组数据视图，可以简单理解为一种指定元素类型的数组，TypedArray没有直接构造器，但是可以用它的子类构造器构造TypedArray类型的数据。TypedArray的子类有：Int8Array、Uint8Array、Uint8ClampedArray、Int16Array、Int32Array等。DataView：DataView是ArkTS中的一种视图，是可以从ArrayBuffer对象中读写多种数值类型的底层接口。ArrayBuffer：ArrayBuffer是固定长度的二进制数据缓冲区。
场景和功能介绍
使用Node-API接口进行数组相关开发时，可以处理各种涉及ArkTS数组的操作和交互场景。以下是几个具体的使用场景介绍：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。具体使用见示例。
[h2]napi_create_array
用于在Node-API模块中创建一个ArkTS数组。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateArray(napi_env env, napi_callback_info info)\n{\n    // 创建一个空数组\n    napi_value jsArray = nullptr;\n    napi_create_array(env, &jsArray);\n    // 将创建好的数组进行赋值\n    for (int i = 0; i < 5; i++) {\n        napi_value element;\n        napi_create_int32(env, i, &element);\n        napi_set_element(env, jsArray, i, element);\n    }\n    // 返回已创建好的数组\n    return jsArray;\n}
接口声明
// index.d.ts\nexport const createArray: () => number[];
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_create_array:%{public}s', JSON.stringify(testNapi.createArray()));
[h2]napi_create_array_with_length
用于在Node-API模块中创建一个具有指定长度的ArkTS数组。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateArrayWithLength(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 1;\n    napi_value argv[1] = {nullptr};\n    napi_value jsArray = nullptr;\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 获取传递的数组长度\n    int32_t length = 0;\n    napi_get_value_int32(env, argv[0], &length);\n    // 使用napi_create_array_with_length创建指定长度的数组\n    napi_create_array_with_length(env, length, &jsArray);\n    // 返回数组\n    return jsArray;\n}
接口声明
// index.d.ts\nexport const createArrayWithLength: (length: number) => void[];
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet array = testNapi.createArrayWithLength(6);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_create_array_with_length:%{public}d', array.length);
[h2]napi_get_array_length
获取给定array的长度。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetArrayLength(napi_env env, napi_callback_info info) \n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_value result;\n    uint32_t length;\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 检查参数是否为数组\n    bool is_array;\n    napi_is_array(env, args[0], &is_array);\n    if (!is_array) {\n        napi_throw_type_error(env, nullptr, \"Argument must be an array\");\n        return nullptr;\n    }\n    napi_get_array_length(env, args[0], &length);\n    // 创建返回值\n    napi_create_uint32(env, length, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const getArrayLength: (arr: Array<any>) => number | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nconst arr = [0, 1, 2, 3, 4, 5];\nhilog.info(0x0000, 'testTag', 'Test Node-API get_array_length:%{public}d', testNapi.getArrayLength(arr));
[h2]napi_is_array
判断给定ArkTS值是否为数组。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value IsArray(napi_env env, napi_callback_info info) \n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 调用napi_is_array接口判断给定入参是否为array数组\n    bool result;\n    napi_status status;\n    status = napi_is_array(env, args[0], &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_is_array fail\");\n        return nullptr;\n    }\n    // 将结果转成napi_value类型返回\n    napi_value returnValue;\n    napi_get_boolean(env, result, &returnValue);\n\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const isArray: <T>(data: Array<T> | T) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  let value = new Array<number>(1);\n  let data = \"123\";\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_array: %{public}s', testNapi.isArray<number>(value));\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_array: %{public}s', testNapi.isArray<string>(data));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_array error: %{public}s', error.message);\n}
[h2]napi_set_element
用于在ArkTS数组中设置指定索引位置的元素。
对于以索引值为键的object，可以使用napi_set_element来设置属性值。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiSetElement(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 3;\n    napi_value args[3] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 检查第一个参数是否为数组\n    bool isArr = false;\n    napi_is_array(env, args[0], &isArr);\n    if (!isArr) {\n        napi_throw_type_error(env, nullptr, \"Argument should be an object of type array\");\n        return nullptr;\n    }\n    // 获取要设置的元素索引\n    double index = 0;\n    napi_get_value_double(env, args[1], &index);\n    // 将传入的值设置到数组指定索引位置\n    napi_set_element(env, args[0], static_cast<uint32_t>(index), args[2]);\n\n    return nullptr;\n}
接口声明
export const napiSetElement: <T>(arr: Array<T>, index: number, value: T) => void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nlet arr = [10, 20, 30];\ntestNapi.napiSetElement<number | string>(arr, 1, 'newElement');\ntestNapi.napiSetElement<number | string>(arr, 2, 50);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_set_element arr: %{public}s', arr.toString());\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_set_element arr[3]: %{public}s', arr[3]);\ninterface MyObject {\n  first: number;\n  second: number;\n}\nlet obj: MyObject = {\n  first: 1,\n  second: 2\n};\ntestNapi.napiSetElement<number | string | Object>(arr, 4, obj);\nlet objAsString = JSON.stringify(arr[4]);\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_set_element arr[4]: %{public}s', objAsString);
[h2]napi_get_element
用于从ArkTS数组中获取请求索引位置的元素值。请求索引值应在数组的有效范围内，如果索引超出数组长度，函数会返回undefined。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiGetElement(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 获取请求元素的索引值\n    uint32_t index;\n    napi_get_value_uint32(env, args[1], &index);\n    // 获取请求索引位置的元素值并存储在result中\n    napi_value result;\n    napi_get_element(env, args[0], index, &result);\n\n    return result;\n}
接口声明
// index.d.ts\nexport const napiGetElement: <T>(arr: Array<T>, index: number) => number | string | Object | boolean | undefined;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\ninterface MyObject {\n  first: number;\n  second: number;\n}\nlet obj: MyObject = {\n  first: 1,\n  second: 2\n};\nlet arr = [10, 'hello', null, obj];\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_element arr[0]: %{public}d', testNapi.napiGetElement<number | string | null | Object>(arr, 0));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_element arr[1]: %{public}s', testNapi.napiGetElement<number | string | null | Object>(arr, 1));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_element arr[2]: %{public}s', testNapi.napiGetElement<number | string | null | Object>(arr, 2));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_element arr[3]: %{public}s', testNapi.napiGetElement<number | string | null | Object>(arr, 3));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_element arr[4]: %{public}s', JSON.stringify(testNapi.napiGetElement(arr, 4)));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_element arr[null]: %{public}s', testNapi.napiGetElement<number | string | null | Object>(arr, 5));
[h2]napi_has_element
用于判断ArkTS数组是否具有指定索引的元素。如果索引超出了对象的有效范围，函数返回false，表示没有元素。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiHasElement(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 获取要判断的元素的索引\n    uint32_t index;\n    napi_get_value_uint32(env, args[1], &index);\n    // 判断指定索引位置的元素是否存在\n    bool hasElement = true;\n    napi_has_element(env, args[0], index, &hasElement);\n    // 将bool结果转换为napi_value并返回\n    napi_value result;\n    napi_get_boolean(env, hasElement, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const napiHasElement: <T>(arr: Array<T>, index: number) => boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet arr = [10, 'hello', null, 'world'];\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_element arr[0]: %{public}s', testNapi.napiHasElement<number | string | null>(arr, 0));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_element arr[7]: %{public}s', testNapi.napiHasElement<number | string | null>(arr, 7));
[h2]napi_delete_element
用于从ArkTS数组对象中删除请求索引的元素。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value NapiDeleteElement(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 获取要删除的元素的索引\n    uint32_t index;\n    napi_get_value_uint32(env, args[1], &index);\n    // 尝试删除请求索引位置的元素\n    bool deleted = true;\n    napi_delete_element(env, args[0], index, &deleted);\n    // 将bool结果转换为napi_value并返回\n    napi_value result;\n    napi_get_boolean(env, deleted, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const napiDeleteElement: <T>(arr: Array<T>, index: number) => boolean;
ArkTS侧示例代码
// 需要同时导入前文示例代码中的napiHasElement、napiGetElement接口\nimport hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nlet arr = [10, 'hello', null, 'world'];\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_element arr[0]: %{public}s', testNapi.napiHasElement<number | string | null>(arr, 0));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_delete_element arr[0]: %{public}s', testNapi.napiDeleteElement<number | string | null>(arr, 0));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_has_element deleted arr[0]: %{public}s', testNapi.napiHasElement<number | string | null>(arr, 0));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_element arr[0]: %{public}d', testNapi.napiGetElement<number | string | null>(arr, 0));
[h2]napi_create_typedarray
用于在Node-API模块中通过现有的ArrayBuffer创建指定类型的ArkTS TypedArray。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateTypedArray(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    int32_t typeNum = 0;\n    napi_get_value_int32(env, args[0], &typeNum);\n    napi_typedarray_type arrayType;\n    // 用于存储每个元素的大小\n    size_t elementSize = 0;\n    // 根据传递的类型值选择创建对应的类型数组\n    arrayType = static_cast<napi_typedarray_type>(typeNum);\n        switch (typeNum) {\n    case napi_int8_array:\n    case napi_uint8_array:\n    case napi_uint8_clamped_array:\n        elementSize = sizeof(int8_t);\n        break;\n    case napi_int16_array:\n    case napi_uint16_array:\n        elementSize = sizeof(int16_t);\n        break;\n    case napi_int32_array:\n    case napi_uint32_array:\n        elementSize = sizeof(int32_t);\n        break;\n    case napi_float32_array:\n        elementSize = sizeof(float);\n        break;\n    case napi_float64_array:\n        elementSize = sizeof(double);\n        break;\n    case napi_bigint64_array:\n    case napi_biguint64_array:\n        elementSize = sizeof(int64_t);\n        break;\n    default:\n    // 默认创建napi_int8_array类型\n        arrayType = napi_int8_array;\n        elementSize = sizeof(int8_t);\n        break;\n    }\n    size_t length = 3;\n    napi_value arrayBuffer = nullptr;\n    napi_value typedArray = nullptr;\n    void *data;\n    // 创建一个ArrayBuffer\n    napi_create_arraybuffer(env, length * elementSize, (void **)&data, &arrayBuffer);\n    // 根据给定类型创建TypedArray\n    napi_create_typedarray(env, arrayType, length, arrayBuffer, 0, &typedArray);\n    return typedArray;\n}
接口声明
// index.d.ts\nexport const enum TypedArrayTypes {\n  INT8_ARRAY = 0,\n  UINT8_ARRAY,\n  UINT8_CLAMPED_ARRAY,\n  INT16_ARRAY,\n  UINT16_ARRAY,\n  INT32_ARRAY,\n  UINT32_ARRAY,\n  FLOAT32_ARRAY,\n  FLOAT64_ARRAY,\n  BIGINT64_ARRAY,\n  BIGuINT64_ARRAY,\n}\nexport const createTypedArray: <T>(type: TypedArrayTypes) => T;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\n// 传递要创建的类型值\nlet typedArray = testNapi.createTypedArray<Int8Array>(testNapi.TypedArrayTypes[\"INT8_ARRAY\"]);\nif (typedArray instanceof Int8Array) {\n    hilog.info(0x0000, 'testTag', ' Node-API napi_create_typedarray: Int8Array');\n}\nlet uint8Array = testNapi.createTypedArray<Uint8Array>(testNapi.TypedArrayTypes[\"UINT8_ARRAY\"]);\nif (uint8Array instanceof Uint8Array) {\n    hilog.info(0x0000, 'testTag', ' Node-API napi_create_typedarray: Uint8Array');\n}
需要对use-napi-process.md中的模块初始化部分进行修改，具体见如下：
#include <string>\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    // 定义的TypedArray类型供ArkTS侧使用，用于存放typedArrayTypes类型，使用示例见ArkTS侧的createTypedArray函数\n    napi_value typedArrayTypes;\n    napi_create_object(env, &typedArrayTypes);\n    napi_value typeIndex;\n    std::string typeKeys[] = {\n        \"INT8_ARRAY\",   \"UINT8_ARRAY\",   \"UINT8_CLAMPED_ARRAY\", \"INT16_ARRAY\",      \"UINT16_ARRAY\",    \"INT32_ARRAY\",\n        \"UINT32_ARRAY\", \"FLOAT32_ARRAY\", \"FLOAT64_ARRAY\",       \"BIGINT64_ARRAY\", \"BIGUINT64_ARRAY\",\n    };\n    for (int32_t i = 0; i < sizeof(typeKeys) / sizeof(typeKeys[0]); i++) {\n        napi_create_int32(env, i, &typeIndex);\n        napi_set_named_property(env, typedArrayTypes, typeKeys[i].c_str(), typeIndex);\n    }\n    napi_property_descriptor desc[] = {\n        {\"createTypedArray\", nullptr, CreateTypedArray, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"TypedArrayTypes\", nullptr, nullptr, nullptr, nullptr, typedArrayTypes, napi_default, nullptr}\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END
[h2]napi_is_typedarray
用于在Node-API模块中判断ArkTS侧给定的napi_value是否为TypedArray对象。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value IsTypedarray(napi_env env, napi_callback_info info) \n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 调用napi_is_typedarray接口判断给定入参类型是否为TypedArray。\n    bool result = false;\n        napi_status status;\n    status = napi_is_typedarray(env, args[0], &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_is_typedarray fail\");\n        return nullptr;\n    }\n    // 将结果转成napi_value类型返回。\n    napi_value returnValue = nullptr;\n    napi_get_boolean(env, result, &returnValue);\n\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const isTypedarray: (data: Object) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  let value = new Uint8Array([1, 2, 3, 4]);\n  let data = \"123\";\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_typedarray: %{public}s', testNapi.isTypedarray(value));\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_typedarray: %{public}s', testNapi.isTypedarray(data));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_typedarray error: %{public}s', error.message);\n}
[h2]napi_get_typedarray_info
获取给定TypedArray的各种属性。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetTypedarrayInfo(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数，第一个参数为需要获得的信息的TypedArray类型数据，第二个参数为需要获得的信息类型的枚举值\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将第二个参数转为int32类型便于比较\n    int32_t infoTypeParam;\n    napi_get_value_int32(env, args[1], &infoTypeParam);\n    // 定义枚举类型与ArkTS侧枚举类型InfoType顺序含义一致\n    enum InfoType { INFO_TYPE = 1, INFO_LENGTH, INFO_ARRAY_BUFFER, INFO_BYTE_OFFSET };\n    void *data;\n    napi_typedarray_type type;\n    size_t byteOffset, length;\n    napi_value arraybuffer;\n    // 调用接口napi_get_typedarray_info获得TypedArray类型数据的信息\n    napi_get_typedarray_info(env, args[0], &type, &length, &data, &arraybuffer, &byteOffset);\n    napi_value result;\n    // 根据属性名，返回TypedArray对应的属性值\n    switch (infoTypeParam) {\n    case INFO_TYPE:\n        // 如果传入的参数是int8类型的TypedArray数据，它的类型（type）为napi_int8_array\n        napi_value int8_type;\n        napi_get_boolean(env, type == napi_int8_array, &int8_type);\n        result = int8_type;\n        break;\n    case INFO_LENGTH:\n        // TypedArray中的元素数\n        napi_value napiLength;\n        napi_create_int32(env, length, &napiLength);\n        result = napiLength;\n        break;\n    case INFO_BYTE_OFFSET:\n        // TypedArray数组的第一个元素所在的基础原生数组中的字节偏移量\n        napi_value napiByteOffset;\n        napi_create_int32(env, byteOffset, &napiByteOffset);\n        result = napiByteOffset;\n        break;\n    case INFO_ARRAY_BUFFER:\n        // TypedArray下的ArrayBuffer\n        result = arraybuffer;\n        break;\n    default:\n        break;\n    }\n    return result;\n}
接口声明
// index.d.ts\nexport const getTypedarrayInfo: <T>(typeArray: T, infoType: number) => ArrayBuffer | number | boolean;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\n// 传入TypedArray类型数据。TypedArray是一种用来描述二进制数据的类数组数据视图，没有直接构造器，可以用其子类构造类数组\n// TypedArray的子类有: Int8Array Uint8Array Uint8ClampedArray Int16Array Int32Array等\nlet int8Array = new Int8Array([15, 7]);\n// 定义枚举类型 这些都是TypedArray的属性\nenum InfoType {\n    TYPE = 1, // 传入的TypedArray的类型\n    LENGTH = 2, // 传入的TypedArray的长度\n    ARRAY_BUFFER = 3, // TypedArray下的ArrayBuffer\n    BYTE_OFFSET = 4 // 数组的第一个元素所在的基础原生数组中的字节偏移量\n};\nlet arrbuff = testNapi.getTypedarrayInfo(int8Array, InfoType.ARRAY_BUFFER) as ArrayBuffer;\n// 将arraybuffer转为数组\nlet arr = new Array(new Int8Array(arrbuff));\nhilog.info(0x0000, 'Node-API', 'get_typedarray_info_arraybuffer: %{public}s', arr.toString());\nhilog.info(0x0000, 'Node-API', 'get_typedarray_info_isIn8Array: %{public}s', testNapi.getTypedarrayInfo(int8Array, InfoType.TYPE).toString());\nhilog.info(0x0000, 'Node-API', 'get_typedarray_info_length: %{public}d', testNapi.getTypedarrayInfo(int8Array, InfoType.LENGTH));\nhilog.info(0x0000, 'Node-API', 'get_typedarray_info_byte_offset: %{public}d', testNapi.getTypedarrayInfo(int8Array, InfoType.BYTE_OFFSET));
[h2]napi_create_dataview
创建dataview对象，便于访问和操作二进制数据，需要提供一个指向二进制数据的缓冲区，并指定要包含的字节数。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CreateDataView(napi_env env, napi_callback_info info) \n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_value arraybuffer = nullptr;\n    napi_value result = nullptr;\n    // DataView的字节长度\n    size_t byteLength = 12;\n    // 字节偏移量\n    size_t byteOffset = 4;\n    // 获取回调函数的参数信息\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将参数转换为对象类型\n    napi_coerce_to_object(env, args[0], &arraybuffer);\n    // 创建一个数据视图对象，并指定字节长度和字节偏移量\n    napi_status status = napi_create_dataview(env, byteLength, arraybuffer, byteOffset, &result);\n    if (status != napi_ok) {\n        // 抛出创建DataView内容失败的错误\n        napi_throw_error(env, nullptr, \"Failed to create DataView\");\n        return nullptr;\n    }\n    // 获取DataView的指针和长度信息\n    uint8_t *data = nullptr;\n    size_t length = 0;\n    napi_get_dataview_info(env, result, &length, (void **)&data, nullptr, nullptr);\n    // 为DataView赋值\n    for (size_t i = 0; i < length; i++) {\n        data[i] = static_cast<uint8_t>(i + 1);\n    }\n    return result;\n}
接口声明
// index.d.ts\nexport const createDataView: (arraybuffer:ArrayBuffer) => DataView | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nconst arrayBuffer = new ArrayBuffer(16);\nconst dataView = testNapi.createDataView(arrayBuffer) as DataView;\nhilog.info(0x0000, 'testTag', 'Test Node-API dataView：%{public}d', dataView.byteLength);\nhilog.info(0x0000, 'testTag', 'Test Node-API dataView第一个数据：%{public}d', dataView.getInt8(0));
[h2]napi_is_dataview
用于在Node-API模块中判断ArkTS侧给定的napi_value是否为DataView。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value IsDataView(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传入的参数\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 调用napi_is_dataview接口判断给定入参是否为DataView数据。\n    bool result;\n    napi_status status;\n    status = napi_is_dataview(env, args[0], &result);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"Node-API napi_is_dataview fail\");\n        return nullptr;\n    }\n    // 将结果转成napi_value类型返回。\n    napi_value returnValue;\n    napi_get_boolean(env, result, &returnValue);\n\n    return returnValue;\n}
接口声明
// index.d.ts\nexport const isDataView: (date: DataView | string) => boolean | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  let buffer = new ArrayBuffer(16);\n  let dataView = new DataView(buffer);\n  let data = \"123\";\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_dataview: %{public}s', testNapi.isDataView(dataView));\n  hilog.info(0x0000, 'testTag', 'Test Node-API napi_is_dataview: %{public}s', testNapi.isDataView(data));\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API napi_is_dataview error: %{public}s', error.message);\n}
[h2]napi_get_dataview_info
获取给定DataView的各种属性。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value GetDataViewInfo(napi_env env, napi_callback_info info)\n{ \n    // 获取ArkTS侧传入的参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 将第二个参数转为int32类型的数字\n    int32_t infoType;\n    napi_get_value_int32(env, args[1], &infoType);\n    size_t byteLength;\n    void *data;\n    napi_value arrayBuffer;\n    size_t byteOffset;\n    // 定义枚举类型与ArkTS侧枚举类型InfoType顺序含义一致\n    enum InfoType { BYTE_LENGTH = 0, ARRAY_BUFFER, BYTE_OFFSET };\n    // 获取dataview信息\n    napi_get_dataview_info(env, args[0], &byteLength, &data, &arrayBuffer, &byteOffset);\n    napi_value result;\n    switch (infoType) {\n        case BYTE_LENGTH:\n            // 返回查询DataView的字节数\n            napi_value napiByteLength;\n            napi_create_int32(env, byteLength, &napiByteLength);\n            result = napiByteLength;\n            break;\n        case ARRAY_BUFFER:\n            // 返回查询DataView的arraybuffer\n            result = arrayBuffer;\n            break;\n        case BYTE_OFFSET:\n            // 返回查询DataView的偏移字节量\n            napi_value napiByteOffset;\n            napi_create_int32(env, byteOffset, &napiByteOffset);\n            result = napiByteOffset;\n            break;\n        default:\n            break;\n    }\n    return result;\n}
接口声明
// index.d.ts\nexport const getDataViewInfo: (dataView: DataView, infoType: number) => ArrayBuffer | number;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\n// 创建一个ArrayBuffer\nlet arrayBuffer = new Int8Array([2, 5]).buffer;\n// 使用arrayBuffer创建一个dataView\nlet dataView = new DataView(arrayBuffer);\n// 定义一个枚举类型\nenum InfoType {\n    BYTE_LENGTH = 0,\n    ARRAY_BUFFER = 1,\n    BYTE_OFFSET = 2,\n};\n// 传入DataView类型参数查询DataView的字节数\nhilog.info(0x0000, 'Node-API', 'get_dataview_info_bytelength %{public}d', testNapi.getDataViewInfo(dataView, InfoType.BYTE_LENGTH));\n// 传入DataView类型参数查询DataView的ArrayBuffer\nlet arrbuff = testNapi.getDataViewInfo(dataView, InfoType.ARRAY_BUFFER) as ArrayBuffer;\n// 将arraybuffer转为数组\nlet arr = Array.from(new Int8Array(arrbuff));\nhilog.info(0x0000, 'Node-API', 'get_dataview_info_arraybuffer %{public}s', arr.toString());\n// 传入DataView类型参数查询DataView开始投影的数据缓冲区中的字节偏移量\nhilog.info(0x0000, 'Node-API', 'get_dataview_info_byteoffset %{public}d', testNapi.getDataViewInfo(dataView, InfoType.BYTE_OFFSET));
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
