使用JSVM-API接口获取JSVM API的版本号
简介
用于获取当前版本信息。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++相关代码进行展示。
[h2]OH_JSVM_GetVersion && OH_JSVM_GetVMInfo
获取当前环境支持的JSVM API的最高版本号和当前虚拟机的信息。
cpp部分代码
// hello.cpp\n#include <string.h>\n\n// 待执行的js代码\nstatic const char *STR_TASK = R\"JS(getVersion();getVMInfo();)JS\";\n\n// GetVersion, GetVMInfo注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetVersion},\n    {.data = nullptr, .callback = GetVMInfo},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetVersion, GetVMInfo方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getVersion\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n    {\"getVMInfo\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_GetVersion的样例方法\nstatic JSVM_Value GetVersion(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    uint32_t jsVersion = 0;\n    // 调用接口，获取当前JSVM运行时支持的最高JSVM API版本\n    JSVM_CALL(OH_JSVM_GetVersion(env, &jsVersion));\n    int value = static_cast<int>(jsVersion);\n    OH_LOG_INFO(LOG_APP, \"JSVM GetVersion success:%{public}d\", value);\n    return nullptr;\n}\n\n// OH_JSVM_GetVMInfo的样例方法\n// 打印JSVM（JavaScript虚拟机）的各项信息\nvoid PrintVmInfo(JSVM_VMInfo vmInfo) {\n    OH_LOG_INFO(LOG_APP, \"JSVM API apiVersion: %{public}d\", vmInfo.apiVersion);\n    OH_LOG_INFO(LOG_APP, \"JSVM API engine: %{public}s\", vmInfo.engine);\n    OH_LOG_INFO(LOG_APP, \"JSVM API version: %{public}s\", vmInfo.version);\n    OH_LOG_INFO(LOG_APP, \"JSVM API cachedDataVersionTag: 0x%{public}x\", vmInfo.cachedDataVersionTag);\n}\n\nstatic JSVM_Value GetVMInfo(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 调用接口，获取虚拟机的信息\n    JSVM_VMInfo result;\n    JSVM_CALL(OH_JSVM_GetVMInfo(&result));\n    // 输出VM虚拟机信息\n    PrintVmInfo(result);\n    return nullptr;\n}
