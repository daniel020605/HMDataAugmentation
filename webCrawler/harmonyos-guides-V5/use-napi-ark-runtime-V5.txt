使用Node-API接口创建ArkTS运行时环境
场景介绍
开发者通过pthread_create创建新线程后，可以通过napi_create_ark_runtime来创建一个新的ArkTS基础运行时环境，并通过该运行时环境加载ArkTS模块。当使用结束后，开发者需要通过napi_destroy_ark_runtime来销毁所创建的ArkTS基础运行时环境。
约束限制
一个进程最多只能创建16个运行时环境。
使用示例
接口声明、编译配置以及模块注册。 接口声明 // index.d.ts\nexport const createArkRuntime: () => object; 编译配置 // CMakeLists.txt\n# the minimum version of CMake.\ncmake_minimum_required(VERSION 3.4.1)\nproject(MyApplication)\n\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\n\ninclude_directories(${NATIVERENDER_ROOT_PATH}\n                    ${NATIVERENDER_ROOT_PATH}/include)\nadd_library(entry SHARED create_ark_runtime.cpp)\ntarget_link_libraries(entry PUBLIC libace_napi.z.so libhilog_ndk.z.so) 在当前模块的build-profile.json5文件中进行以下配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"sources\": [\n                    \"./src/main/ets/pages/ObjectUtils.ets\"\n                ]\n            }\n        }\n    }\n} 模块注册 // create_ark_runtime.cpp\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n        { \"createArkRuntime\", nullptr, CreateArkRuntime, nullptr, nullptr, nullptr, napi_default, nullptr }\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END\n\nstatic napi_module nativeModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = nullptr,\n    .reserved = { 0 },\n};\n\nextern \"C\" __attribute__((constructor)) void RegisterQueueWorkModule()\n{\n    napi_module_register(&nativeModule);\n} 新建线程并创建ArkTS基础运行时环境，加载自定义模块请参考napi_load_module_with_info。 // create_ark_runtime.cpp\n#include <pthread.h>\n#include \"napi/native_api.h\"\n\nstatic void *CreateArkRuntimeFunc(void *arg)\n{\n    // 1. 创建基础运行环境\n    napi_env env;\n    napi_status ret = napi_create_ark_runtime(&env);\n    if (ret != napi_ok) {\n        return nullptr;\n    }\n\n    // 2. 加载自定义模块\n    napi_value objUtils;\n    ret = napi_load_module_with_info(env, \"entry/src/main/ets/pages/ObjectUtils\", \"com.example.myapplication/entry\", &objUtils);\n    if (ret != napi_ok) {\n        return nullptr;\n    }\n\n    // 3. 使用ArkTS中的logger\n    napi_value logger;\n    ret = napi_get_named_property(env, objUtils, \"Logger\", &logger);\n    if (ret != napi_ok) {\n        return nullptr;\n    }\n    ret = napi_call_function(env, objUtils, logger, 0, nullptr, nullptr);\n\n    // 4. 销毁ArkTS环境\n    ret = napi_destroy_ark_runtime(&env);\n    return nullptr;\n}\n\nstatic napi_value CreateArkRuntime(napi_env env, napi_callback_info info)\n{\n    pthread_t tid;\n    pthread_create(&tid, nullptr, CreateArkRuntimeFunc, nullptr);\n    pthread_join(tid, nullptr);\n    return nullptr;\n} 编写ArkTS侧示例代码。 // ObjectUtils.ets\nexport function Logger() {\n    console.log(\"print log\");\n}\n\n// ArkTS侧调用接口\nimport testNapi from 'libentry.so';\n\ntestNapi.createArkRuntime(); 
