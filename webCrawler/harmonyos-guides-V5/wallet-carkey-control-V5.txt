车控
数字车钥匙开通完成后，车主APP可以通过车控指令远程控制车辆的开门等操作。
典型的交互流程如下:
 通过queryICCEConnectionState接口检查车控蓝牙的链接状态，如果未链接则使用startICCEConnection主动链接。 通过registerICCEListener注册监听，接收华为钱包发送的消息。 车主APP可以通过sendICCERKEMessage接口发送车控指令。 用户退出数字钥匙车控页面，通过unregisterICCEListener接口取消监听。 
开发步骤
 车主APP使用创建Wallet Kit服务时注册的服务号和申请钥匙卡片时定义的卡券唯一标识，通过queryICCEConnectionState判断车钥匙的蓝牙链路状态。import { common } from '@kit.AbilityKit';\nimport { walletPass } from '@kit.WalletKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nprivate walletPassClient: walletPass.WalletPassClient = new walletPass.WalletPassClient(getContext(this) as common.UIAbilityContext);\n// 创建Wallet Kit服务时注册的服务号\nprivate passType: string = ''; \n// 申请钥匙卡片时定义的卡券唯一标识\nprivate serialNumber: string = ''; \n\nasync queryICCEConnectionState() {\n  let passStr = JSON.stringify({\n    passType: this.passType,\n    serialNumber: this.serialNumber\n  });\n  this.walletPassClient.queryICCEConnectionState(passStr).then((result: string) => {\n    console.info(`Succeeded in querying ICCEConnectionState, result: ${result}`);\n  }).catch((err: BusinessError) => {\n    console.error(`Failed to query ICCEConnectionState, code:${err.code}, message:${err.message}`);\n  })\n}  如果queryICCEConnectionState接口返回连接状态connectionState为未配对0时，需要调用startICCEConnection主动创建蓝牙链接。import { common } from '@kit.AbilityKit';\nimport { walletPass } from '@kit.WalletKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nprivate walletPassClient: walletPass.WalletPassClient = new walletPass.WalletPassClient(getContext(this) as common.UIAbilityContext);\n// 创建Wallet Kit服务时注册的服务号\nprivate passType: string = ''; \n// 申请钥匙卡片时定义的卡券唯一标识\nprivate serialNumber: string = ''; \n\nasync startICCEConnection() {\n  let passStr = JSON.stringify({\n    passType: this.passType,\n    serialNumber: this.serialNumber\n  });\n  this.walletPassClient.startICCEConnection(passStr).then((result: string) => {\n    console.info(`Succeeded in starting ICCEConnection, result: ${result}`);\n  }).catch((err: BusinessError) => {\n    console.error(`Failed to start ICCEConnection, code:${err.code}, message:${err.message}`);\n  })\n}  车主APP通过registerICCEListener注册监听华为钱包发送的消息。import { common } from '@kit.AbilityKit';\nimport { walletPass } from '@kit.WalletKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { rpc } from '@kit.IPCKit';\n\nprivate walletPassClient: walletPass.WalletPassClient = new walletPass.WalletPassClient(getContext(this) as common.UIAbilityContext);\nprivate callback: rpc.RemoteObject | null = null;\n// 创建Wallet Kit服务时注册的服务号\nprivate passType: string = ''; \n// 注册监听的应用名称，一般为包名\nprivate registerName: string = '';  \n\nasync registerICCEListener() {\n  let passStr = JSON.stringify({\n     passType: this.passType,\n     registerName: this.registerName\n  });\n  this.callback = new ICCECallBack();\n  this.walletPassClient.registerICCEListener(passStr, this.callback).then((result: string) => {\n    console.info(`Succeeded in registering ICCEListener, result: ${result}`);\n   }).catch((err: BusinessError) => {\n    console.error(`Failed to register ICCEListener, code:${err.code}, message:${err.message}`);\n  })\n}\n\nclass ICCECallBack extends rpc.RemoteObject {\n  constructor() {\n    super('ICCECallBack');\n  }\n\n  async onRemoteMessageRequest(code: number, data: rpc.MessageSequence, reply: rpc.MessageSequence, option: rpc.MessageOption): Promise<boolean> {\n    // 根据code来匹配data数据信息\n    let codeInt = data.readInt();\n    return true;\n  }\n}  车主APP通过sendICCERKEMessage接口发送车控指令。import { common } from '@kit.AbilityKit';\nimport { walletPass } from '@kit.WalletKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nprivate walletPassClient: walletPass.WalletPassClient = new walletPass.WalletPassClient(getContext(this) as common.UIAbilityContext);\n// 创建Wallet Kit服务时注册的服务号\nprivate passType: string = '';  \n// 申请钥匙卡片时定义的卡券唯一标识\nprivate serialNumber: string = ''; \n// 车控指令\nprivate rkeCommand: string = '';  \n\nasync sendICCERKEMessage() {\n  let passStr = JSON.stringify({\n    passType: this.passType,\n    serialNumber: this.serialNumber,\n    rkeCommand: this.rkeCommand,\n    encryptFlag: '0',\n    directionFlag: '1'\n  });\n  this.walletPassClient.sendICCERKEMessage(passStr).then((result: string) => {\n    console.info(`Succeeded in sending ICCERKEMessage, result: ${result}`);\n  }).catch((err: BusinessError) => {\n    console.error(`Failed to send ICCERKEMessage, code:${err.code}, message:${err.message}`);\n  })\n}  用户退出数字钥匙车控页面，车主APP通过unregisterICCEListener接口取消监听。import { common } from '@kit.AbilityKit';\nimport { walletPass } from '@kit.WalletKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nprivate walletPassClient: walletPass.WalletPassClient = new walletPass.WalletPassClient(getContext(this) as common.UIAbilityContext);\nprivate callback: rpc.RemoteObject | null = null;\n// 创建Wallet Kit服务时注册的服务号\nprivate passType: string = ''; \n// 注册监听的应用名称，一般为包名\nprivate registerName: string = ''; \n\nasync unregisterICCEListener() {\n  let passStr = JSON.stringify({\n    passType: this.passType,\n    registerName: this.registerName\n  });\n\n  this.walletPassClient.unregisterICCEListener(passStr).then((result: string) => {\n    console.info(`Succeeded in unregistering ICCEListener, result: ${result}`);\n    this.callback = null;\n  }).catch((err: BusinessError) => {\n    console.error(`Failed to unregister ICCEListener, code:${err.code}, message:${err.message}`);\n  })\n}  
