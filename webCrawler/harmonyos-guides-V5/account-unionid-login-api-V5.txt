使用自定义按钮登录
场景介绍
应用应遵照【华为账号登录】按钮使用规则在登录页面嵌入自定义华为账号登录按钮，通过自定义按钮触发调用华为账号登录API获取UnionID、OpenID，通过UnionID、OpenID完成用户登录；或者与应用账号完成绑定，绑定后用于登录或者验证。
业务流程
流程说明：
 应用传forceLogin等参数后调用华为账号登录API。 应用调用华为账号登录API成功后返回Authorization Code、UnionID等参数。 通过UnionID判断用户是否已关联应用系统数据库，如已关联，则完成用户登录；如未关联，则创建新用户，绑定UnionID，服务端进行安全认证后完成用户登录。 
接口说明
使用API获取UnionID登录关键接口如下表所示，具体API说明详见API参考。
接口名
描述
createLoginWithHuaweiIDRequest(): LoginWithHuaweiIDRequest
创建账号登录请求。LoginWithHuaweiIDRequest中的forceLogin参数用来控制当用户未登录华为账号时，是否强制拉起华为账号登录界面。
constructor(context?: common.Context)
创建登录请求Controller。
executeRequest(request: AuthenticationRequest): Promise<AuthenticationResponse>
通过Promise方式执行登录操作。
上述接口需在页面或自定义组件生命周期内调用。
开发前提
在进行代码开发前，请先确认您已完成配置Client ID工作。该场景无需申请scope权限。
客户端开发
 根据【华为账号登录】按钮规范开发自定义登录图标按钮，参考如下步骤在点击事件中完成华为账号登录API调用。 导入authentication模块及相关公共模块。import { authentication } from '@kit.AccountKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { util } from '@kit.ArkTS';\nimport { BusinessError } from '@kit.BasicServicesKit'; 创建登录请求并设置参数。// 创建登录请求，并设置参数\nconst loginRequest = new authentication.HuaweiIDProvider().createLoginWithHuaweiIDRequest();\n// 用户是否需要登录授权，该值为true且用户未登录或未授权时，会拉起用户登录或授权页面\nloginRequest.forceLogin = true;\n// 用于防跨站点请求伪造\nloginRequest.state = util.generateRandomUUID(); 调用AuthenticationController对象的executeRequest方法执行登录请求，并处理登录结果，获取到UnionID、OpenID、Authorization Code及ID Token。之后将Authorization Code传给应用服务器处理，可参考客户端与服务端交互开发的开发步骤a和b。应用可以通过公开的网址获取到华为账号服务器发布的公钥，对签名和ID Token中的必要信息进行验证，以证明其没有被篡改过。解析ID Token可参考ID Token解析与验证。// 执行登录请求\ntry {\n  const controller = new authentication.AuthenticationController(getContext(this));\n  controller.executeRequest(loginRequest).then((response: authentication.LoginWithHuaweiIDResponse) => {\n    const loginWithHuaweiIDResponse = response as authentication.LoginWithHuaweiIDResponse;\n    const state = loginWithHuaweiIDResponse.state;\n    if (state && loginRequest.state !== state) {\n      hilog.error(0x0000, 'testTag', `Failed to login. The state is different, response state: ${state}`);\n      return;\n    }\n    hilog.info(0x0000, 'testTag', 'Succeeded in logging in.');\n    const loginWithHuaweiIDCredential = loginWithHuaweiIDResponse.data!;\n    const code = loginWithHuaweiIDCredential.authorizationCode;\n    const idToken = loginWithHuaweiIDCredential.idToken;\n    const openID = loginWithHuaweiIDCredential.openID;\n    const unionID = loginWithHuaweiIDCredential.unionID;\n    // 开发者处理code, idToken, openID, unionID\n  }).catch((error: BusinessError) => {\n    this.dealAllError(error);\n  })\n} catch (error) {\n  this.dealAllError(error);\n}  // 错误处理\ndealAllError(error: BusinessError): void {\n  hilog.error(0x0000, 'testTag', 'Failed to login, errorCode=%{public}d, errorMsg=%{public}s', error.code,\n    error.message);\n} 
服务端开发
 应用服务器使用Client ID、Client Secret、Authorization Code调用获取用户级凭证的接口向华为账号服务器请求获取Access Token、Refresh Token。 使用Access Token调用解析凭证接口获取用户的UnionID。Access Token过期处理         由于Access Token的有效期仅为60分钟，当Access Token失效或者即将失效时（可通过REST API错误码判断），可以使用Refresh Token（有效期180天）通过刷新凭证向华为账号服务器请求获取新的Access Token。             当Access Token失效时，若应用不使用Refresh Token向华为账号服务器请求获取新的Access Token，账号的授权信息将会失效，导致使用Access Token的功能都会失败。 当Access Token非正常失效（如修改密码、退出账号、删除设备）时，应用可重新登录授权获取Authorization Code，向华为账号服务器请求获取新的Access Token。     Refresh Token过期处理 由于Refresh Token的有效期为180天，当Refresh Token失效后（可通过REST API错误码判断），应用服务器需要通知客户端，重新调用授权接口，请求用户重新授权。 应用在自己的用户体系通过查询获取的UnionID判断该用户是否已关联。如已关联，则完成用户登录；如未关联，则创建新用户，绑定UnionID，完成用户登录。 
