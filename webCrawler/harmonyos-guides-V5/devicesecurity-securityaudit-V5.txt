安全审计
场景介绍
提供统一的安全审计数据订阅与取消订阅接口，应用可以获取设备上的安全审计数据（如下表），以支撑审计相关业务。
审计事件ID
说明
0x027000000
剪切板复制粘贴事件
0x810800800
账号登录登出事件
0x007000000
窗口截屏录屏投屏事件
0x00F000000
USB插拔事件
0x02E000000
打印机事件
0x01C000007
文件事件
0x01C000008
进程创建退出事件
0x01C000009
网络事件
0x01C00000A
KIA文件拦截事件
0x02D000000
相机事件
0x010000000
应用事件
0x014000000
鼠标事件
0x014000001
键盘事件
0x011000000
edm事件
0x012003000
证书操作事件
0x01C00000B
KIA文件新增事件
0x01C00000C
KIA文件变种事件
约束与限制
当前能力仅支持2in1设备。
业务流程
流程说明：
 开发者应用订阅安全审计数据。 Device Security Kit调用回调函数通知开发者应用，开发者应用根据审计数据进行业务处理。 当开发者应用不需要使用该审计数据时，取消订阅安全审计数据。 
接口说明
以下是安全审计数据订阅与取消订阅接口，更多接口及使用方法请参见API参考。
接口名
描述
on(type: 'auditEventOccur', auditEventInfo: AuditEventInfo, callback: Callback<AuditEvent>): void
订阅安全审计数据
off(type: 'auditEventOccur', auditEventInfo: AuditEventInfo, callback?: Callback<AuditEvent>): void
取消订阅安全审计数据
开发步骤
 在开发准备过程中，需要申请权限：ohos.permission.QUERY_AUDIT_EVENT。 只允许清单内的应用申请该权限，申请方式请参考：申请使用受限权限 开发者需向用户说明数据使用的目的、方式和范围。 
 导入Device Security Kit模块及相关公共模块。import { securityAudit } from '@kit.DeviceSecurityKit';\nimport { BusinessError} from '@kit.BasicServicesKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';  订阅安全审计事件。const TAG = \"SecurityAuditJsTest\";\nconst callback = (event: securityAudit.AuditEvent) => {\n  hilog.info(0x0000, TAG, '%{public}s', 'Security_SecurityAudit_JsApi_Func eventId= ' + event.eventId);\n  hilog.info(0x0000, TAG, '%{public}s', 'Security_SecurityAudit_JsApi_Func version= ' + event.version);\n  hilog.info(0x0000, TAG, '%{public}s', 'Security_SecurityAudit_JsApi_Func content= ' + event.content);\n  hilog.info(0x0000, TAG, '%{public}s', 'Security_SecurityAudit_JsApi_Func timestamp= ' + event.timestamp);\n  hilog.info(0x0000, TAG, '%{public}s', 'Security_SecurityAudit_JsApi_Func userId= ' + event.userId);\n  hilog.info(0x0000, TAG, '%{public}s', 'Security_SecurityAudit_JsApi_Func deviceId= ' + event.deviceId);\n};\nlet auditEventInfo: securityAudit.AuditEventInfo = {\n   eventId: 0x810800800\n};\n\ntry {\n  hilog.info(0x0000, TAG, 'on begin.');\n  securityAudit.on('auditEventOccur', auditEventInfo, callback);\n  hilog.info(0x0000, TAG, 'Succeeded in on.');\n} catch (err) {\n  let e: BusinessError = err as BusinessError;\n  hilog.error(0x0000, TAG, 'on failed: %{public}d %{public}s', e.code, e.message);\n}  取消订阅安全审计事件。try {\n  hilog.info(0x0000, TAG, 'off begin.');\n  securityAudit.off('auditEventOccur', auditEventInfo, callback);\n  hilog.info(0x0000, TAG, 'Succeeded in off.');\n} catch (err) {\n  let e: BusinessError = err as BusinessError;\n  hilog.error(0x0000, TAG, 'off failed: %{public}d %{public}s', e.code, e.message);\n}  
