振动开发指导(C/C++)
场景介绍
当设备需要设置不同的振动效果时，可以调用Vibrator模块，例如：设备的按键可以设置不同强度和不同时长的振动，闹钟和来电可以设置不同强度和时长的单次或周期振动。
详细的接口介绍请参考Vibrator接口。
函数说明
振动效果说明
目前支持两类振动效果，如下所示。
[h2]固定时长振动
传入一个固定时长，马达按照默认强度和频率触发振动。
[h2]自定义振动
自定义振动提供给用户设计自己所需振动效果的能力，用户可通过自定义振动配置文件，并遵循相应规则编排所需振动形式，使能更加开放的振感交互体验。
开发步骤
 新建一个Native C++工程。  控制设备上的振动器，需要申请权限ohos.permission.VIBRATE。具体配置方式请参考声明权限。 \"requestPermissions\": [\n      {\n        \"name\": \"ohos.permission.VIBRATE\",\n      },\n    ] CMakeLists.txt文件中引入动态依赖库。 target_link_libraries(entry PUBLIC libace_napi.z.so)\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)\ntarget_link_libraries(entry PUBLIC libohvibrator.z.so) 导入模块。 #include <sensors/vibrator.h>\n#include \"napi/native_api.h\"\n#include \"hilog/log.h\"\n#include <thread>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/stat.h> 定义常量。 const int GLOBAL_RESMGR = 0xFF00;\nconst char *TAG = \"[NativeVibratorTest]\";\nconstexpr int32_t TIME_WAIT_FOR_OP = 2; 控制马达在指定时间内持续振动和停止马达振动。 static napi_value Vibration_Test(napi_env env, napi_callback_info info)\n{\n    Vibrator_Attribute vibrateAttribute;\n    vibrateAttribute.usage = VIBRATOR_USAGE_ALARM;\n\n    int32_t ret = OH_Vibrator_PlayVibration(0, vibrateAttribute); // 控制马达在指定时间内持续振动。\n    OH_LOG_Print(LOG_APP, LOG_INFO, GLOBAL_RESMGR, TAG, \"Vibration successful\");\n    if (ret != PARAMETER_ERROR) {\n        return nullptr;\n    }\n    std::this_thread::sleep_for(std::chrono::milliseconds(TIME_WAIT_FOR_OP));\n    ret = OH_Vibrator_Cancel(); // 停止马达振动。\n    if (ret == 0) {\n        return nullptr;\n    }\n} 播放自定义振动序列。 static napi_value VibrationCustom_Test(napi_env env, napi_callback_info info)\n{\n    int32_t fd = open(\"/data/test/vibrator/coin_drop.json\", O_RDONLY);\n    OH_LOG_Print(LOG_APP, LOG_INFO, GLOBAL_RESMGR, TAG, \"Test fd:%{public}d\", fd);\n    struct stat64 statbuf = { 0 };\n    if (fd == 0) {\n        close(fd);\n        return nullptr;\n    }\n    if (fstat64(fd, &statbuf) == 0) {\n        Vibrator_FileDescription fileDescription = {\n            .fd = fd,\n            .offset = 0,\n            .length = statbuf.st_size\n        };\n        Vibrator_Attribute vibrateAttribute = {\n            .usage = VIBRATOR_USAGE_RING\n        };\n        int32_t ret = OH_Vibrator_PlayVibrationCustom(fileDescription, vibrateAttribute); // 播放自定义振动序列。\n        OH_LOG_Print(LOG_APP, LOG_INFO, GLOBAL_RESMGR, TAG, \"Vibratecustom successful\");\n        bool isSuccess = ((ret == 0) || (ret == UNSUPPORTED));\n        if (isSuccess == true) {\n            close(fd);\n            return nullptr;\n        }\n    }\n    std::this_thread::sleep_for(std::chrono::milliseconds(TIME_WAIT_FOR_OP));\n    close(fd);\n    OH_Vibrator_Cancel(); // 停止马达振动。\n} 在types/libentry路径下index.d.ts文件中引入Napi接口。 export const vibration_Test: () => number;\nexport const vibrationCustom_Test: () => number; 编写Js用例调用接口。 
