使用TSan检测线程错误
TSan（ThreadSanitizer）是一个检测数据竞争的工具。它包含一个编译器插桩模块和一个运行时库。TSan开启后，会使性能降低5到15倍，同时使内存占用率提高5到10倍。
功能介绍
[h2]应用场景
TSan能够检测出如下问题：
数据竞争检测数据竞争（Data Race）是指两个或多个线程在没有适当的同步机制情况下同时访问相同的内存位置，其中至少有一个线程在写入。数据竞争是导致多线程程序行为不可预测的主要原因之一。 
锁错误检测TSan 不仅能检测数据竞争，还能检测与锁相关的错误： 死锁（Deadlock）：死锁是指两个或多个线程互相等待对方释放锁，导致程序无法继续执行。双重解锁（Double Unlock）：同一线程尝试解锁已经解锁的锁。未持有锁解锁：一个线程尝试解锁一个它未持有的锁。 
条件变量错误检测条件变量用于线程之间的通信和同步，常见错误包括： 未持有锁等待：一个线程在未持有相关锁的情况下调用 wait。未持有锁唤醒：一个线程在未持有相关锁的情况下调用 signal 或 broadcast。 
[h2]错误报告
当 TSan 检测到错误时，它会生成详细的报告，包括：
错误类型：例如数据竞争、死锁等。内存地址：涉及的内存地址。线程信息：涉及的线程ID和线程创建的堆栈跟踪。源代码位置：每一个内存访问的源代码位置和堆栈跟踪。上下文信息：访问类型（读/写）、访问大小等。
使用约束
TSan仅支持API 12及以上版本。TSan与ASan不可同时开启。TSan开启后会申请大量虚拟内存，其他申请大虚拟内存的功能（如gpu图形渲染）可能会受影响。TSan不支持静态链接libc或libc++库。开启TSan后会监测多线程共享内存数据访问，需要排布地址空间实现用户内存到shadow的映射，与ArkWeb组件初始化Chromium内核时预先分配虚存存在规格冲突。目前使用ArkWeb组件的应用打开TSan检测后，启动时会因虚存分配不足失败。
使能TSan
可通过以下两种方式使能TSan。
[h2]方式一
点击Run > Edit Configurations > Diagnostics，勾选Thread Sanitizer。 如果有引用本地library，需在library模块的build-profile.json5文件中，配置arguments字段值为“-DOHOS_ENABLE_TSAN=ON”，表示以TSan模式编译so文件。 
[h2]方式二
修改工程目录下AppScope/app.json5，添加TSan配置开关。 \"tsanEnabled\": true  设置模块级构建TSan插桩。在需要使能TSan的模块中，通过添加构建参数开启TSan检测插桩，在对应模块的模块级build-profile.json5中添加命令参数： \"arguments\": \"-DOHOS_ENABLE_TSAN=ON\"  
启用TSan
运行或调试当前应用。当程序出现线程错误时，弹出TSan log信息，点击信息中的链接即可跳转至引起线程错误的代码处。 当前使用call_once接口会存在TSan误报的现象，开发者可以在调用该接口的函数前添加__attribute__((no_sanitize(\"thread\")))来屏蔽该问题。   
