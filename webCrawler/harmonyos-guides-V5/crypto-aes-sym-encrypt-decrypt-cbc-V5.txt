使用AES对称密钥（CBC模式）加解密(ArkTS)
对应的算法规格请查看对称密钥加解密算法规格：AES。
加密
 调用cryptoFramework.createSymKeyGenerator、SymKeyGenerator.generateSymKey，生成密钥算法为AES、密钥长度为128位的对称密钥（SymKey）。 如何生成AES对称密钥，开发者可参考下文示例，并结合对称密钥生成和转换规格：AES和随机生成对称密钥理解，参考文档与当前示例可能存在入参差异，请在阅读时注意区分。 调用cryptoFramework.createCipher，指定字符串参数'AES128|CBC|PKCS7'，创建对称密钥类型为AES128、分组模式为CBC、填充模式为PKCS7的Cipher实例，用于完成加解密操作。 调用Cipher.init，设置模式为加密（CryptoMode.ENCRYPT_MODE），指定加密密钥（SymKey）和CBC模式对应的加密参数（IvParamsSpec），初始化加密Cipher实例。 加密内容较短时，可以不调用update，直接调用Cipher.doFinal，获取加密后的数据。 
解密
 调用Cipher.init，设置模式为解密（CryptoMode.DECRYPT_MODE），指定解密密钥（SymKey）和CBC模式对应的解密参数（IvParamsSpec），初始化解密Cipher实例。 解密内容较短时，可以不调用update，直接调用Cipher.doFinal，获取解密后的数据。 
 异步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\nfunction generateRandom(len: number) {\n  let rand = cryptoFramework.createRandom();\n  let generateRandSync = rand.generateRandomSync(len);\n  return generateRandSync;\n}\n\nfunction genIvParamsSpec() {\n  let ivBlob = generateRandom(16);\n  let ivParamsSpec: cryptoFramework.IvParamsSpec = {\n    algName: \"IvParamsSpec\",\n    iv: ivBlob\n  };\n  return ivParamsSpec;\n}\nlet iv = genIvParamsSpec();\n// 加密消息\nasync function encryptMessagePromise(symKey: cryptoFramework.SymKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('AES128|CBC|PKCS7');\n  await cipher.init(cryptoFramework.CryptoMode.ENCRYPT_MODE, symKey, iv);\n  let cipherData = await cipher.doFinal(plainText);\n  return cipherData;\n}\n// 解密消息\nasync function decryptMessagePromise(symKey: cryptoFramework.SymKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('AES128|CBC|PKCS7');\n  await decoder.init(cryptoFramework.CryptoMode.DECRYPT_MODE, symKey, iv);\n  let decryptData = await decoder.doFinal(cipherText);\n  return decryptData;\n}\n\nasync function genSymKeyByData(symKeyData: Uint8Array) {\n  let symKeyBlob: cryptoFramework.DataBlob = { data: symKeyData };\n  let aesGenerator = cryptoFramework.createSymKeyGenerator('AES128');\n  let symKey = await aesGenerator.convertKey(symKeyBlob);\n  console.info('convertKey success');\n  return symKey;\n}\n\nasync function aesCBC() {\n  try {\n    let keyData = new Uint8Array([83, 217, 231, 76, 28, 113, 23, 219, 250, 71, 209, 210, 205, 97, 32, 159]);\n    let symKey = await genSymKeyByData(keyData);\n    let message = \"This is a test\";\n    let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n    let encryptText = await encryptMessagePromise(symKey, plainText);\n    let decryptText = await decryptMessagePromise(symKey, encryptText);\n    if (plainText.data.toString() === decryptText.data.toString()) {\n      console.info('decrypt ok');\n      console.info('decrypt plainText: ' + buffer.from(decryptText.data).toString('utf-8'));\n    } else {\n      console.error('decrypt failed');\n    }\n  } catch (error) {\n    console.error(`AES CBC “${error}“, error code: ${error.code}`);\n  }\n} 同步方法示例： import { cryptoFramework } from '@kit.CryptoArchitectureKit';\nimport { buffer } from '@kit.ArkTS';\n\nfunction generateRandom(len: number) {\n  let rand = cryptoFramework.createRandom();\n  let generateRandSync = rand.generateRandomSync(len);\n  return generateRandSync;\n}\n\nfunction genIvParamsSpec() {\n  let ivBlob = generateRandom(16);\n  let ivParamsSpec: cryptoFramework.IvParamsSpec = {\n    algName: \"IvParamsSpec\",\n    iv: ivBlob\n  };\n  return ivParamsSpec;\n}\nlet iv = genIvParamsSpec();\n// 加密消息\nfunction encryptMessage(symKey: cryptoFramework.SymKey, plainText: cryptoFramework.DataBlob) {\n  let cipher = cryptoFramework.createCipher('AES128|CBC|PKCS7');\n  cipher.initSync(cryptoFramework.CryptoMode.ENCRYPT_MODE, symKey, iv);\n  let cipherData = cipher.doFinalSync(plainText);\n  return cipherData;\n}\n// 解密消息\nfunction decryptMessage(symKey: cryptoFramework.SymKey, cipherText: cryptoFramework.DataBlob) {\n  let decoder = cryptoFramework.createCipher('AES128|CBC|PKCS7');\n  decoder.initSync(cryptoFramework.CryptoMode.DECRYPT_MODE, symKey, iv);\n  let decryptData = decoder.doFinalSync(cipherText);\n  return decryptData;\n}\n\nfunction genSymKeyByData(symKeyData: Uint8Array) {\n  let symKeyBlob: cryptoFramework.DataBlob = { data: symKeyData };\n  let aesGenerator = cryptoFramework.createSymKeyGenerator('AES128');\n  let symKey = aesGenerator.convertKeySync(symKeyBlob);\n  console.info('convertKeySync success');\n  return symKey;\n}\n\nfunction main() {\n  try {\n    let keyData = new Uint8Array([83, 217, 231, 76, 28, 113, 23, 219, 250, 71, 209, 210, 205, 97, 32, 159]);\n    let symKey = genSymKeyByData(keyData);\n    let message = \"This is a test\";\n    let plainText: cryptoFramework.DataBlob = { data: new Uint8Array(buffer.from(message, 'utf-8').buffer) };\n    let encryptText = encryptMessage(symKey, plainText);\n    let decryptText = decryptMessage(symKey, encryptText);\n    if (plainText.data.toString() === decryptText.data.toString()) {\n      console.info('decrypt ok');\n      console.info('decrypt plainText: ' + buffer.from(decryptText.data).toString('utf-8'));\n    } else {\n      console.error('decrypt failed');\n    }\n  } catch (error) {\n    console.error(`AES CBC “${error}“, error code: ${error.code}`);\n  }\n} 
