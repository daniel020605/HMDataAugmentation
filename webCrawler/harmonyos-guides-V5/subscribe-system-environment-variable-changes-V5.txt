订阅系统环境变量的变化
系统环境变量是指：在应用程序运行期间，终端设备的系统设置（例如系统的语言环境、屏幕方向等）发生变化。
开发者通过订阅系统环境变化，可以使应用程序及时感知这种变化，并作出相应处理，从而提供更好的用户体验。例如，用户更改系统语言设置时，应用程序可以自动根据新的语言设置更新用户界面的语言；当用户将设备旋转到横屏或者竖屏时，应用程序可以重新布局用户界面，以适应屏幕方向和尺寸。
系统配置的变化通常由“设置”中的选项或“控制中心”中的图标触发。订阅系统环境变量变化，可以使应用程序更加智能地响应系统环境变化，从而提供更好的用户体验。查看当前支持订阅变化的系统环境变量，请参见Configuration。
基于当前的应用模型，可以通过以下几种方式来实现订阅系统环境变量的变化。
 使用ApplicationContext订阅回调 在AbilityStage组件容器中订阅回调 在UIAbility组件中订阅回调 在ExtensionAbility组件中订阅回调 
使用ApplicationContext订阅回调
ApplicationContext提供了注册回调函数以订阅系统环境变量的变化，并且可以通过调用相应的方法来撤销该回调。这有助于在资源不再需要时释放相关资源，从而提高系统的可靠性和性能。
 使用on方法，应用程序可以通过在非应用组件模块中订阅系统环境变量的变化来动态响应这些变化。例如，使用该方法在页面中监测系统语言的变化。 import { common, EnvironmentCallback, Configuration } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nconst TAG: string = '[CollaborateAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\n@Entry\n@Component\nstruct Index {\n  private context = getContext(this) as common.UIAbilityContext;\n  private callbackId: number = 0; // 注册订阅系统环境变化的ID\n\n  subscribeConfigurationUpdate(): void {\n    let systemLanguage: string | undefined = this.context.config.language; // 获取系统当前语言\n\n    // 1.获取ApplicationContext\n    let applicationContext = this.context.getApplicationContext();\n\n    // 2.通过applicationContext订阅环境变量变化\n    let environmentCallback: EnvironmentCallback = {\n      onConfigurationUpdated(newConfig: Configuration) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n        if (systemLanguage !== newConfig.language) {\n          hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n          systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n        }\n      },\n      onMemoryLevel(level) {\n        hilog.info(DOMAIN_NUMBER, TAG, `onMemoryLevel level: ${level}`);\n      }\n    }\n    try {\n      this.callbackId = applicationContext.on('environment', environmentCallback);\n    } catch (err) {\n      let code = (err as BusinessError).code;\n      let message = (err as BusinessError).message;\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to register applicationContext. Code is ${code}, message is ${message}`);\n    }\n  }\n\n  // 页面展示\n  build() {\n    //...\n  }\n} 在资源使用完成之后，可以通过调用off方法释放相关资源。 import { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nconst TAG: string = '[CollaborateAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\n@Entry\n@Component\nstruct Index {\n  private context = getContext(this) as common.UIAbilityContext;\n  private callbackId: number = 0; // 注册订阅系统环境变化的ID\n\n  unsubscribeConfigurationUpdate() {\n    let applicationContext = this.context.getApplicationContext();\n    try {\n      applicationContext.off('environment', this.callbackId);\n    } catch (err) {\n      let code = (err as BusinessError).code;\n      let message = (err as BusinessError).message;\n      hilog.error(DOMAIN_NUMBER, TAG, `Failed to unregister applicationContext. Code is ${code}, message is ${message}`);\n    }\n  }\n\n  // 页面展示\n  build() {\n    //...\n  }\n} 
在AbilityStage组件容器中订阅回调
使用AbilityStage.onConfigurationUpdate()回调方法订阅系统环境变量的变化。当系统环境变量发生变化时，会调用该回调方法。在该方法中，通过Configuration对象获取最新的系统环境配置信息。可以进行相应的界面适配等操作，从而提高系统的灵活性和可维护性。
 DevEco Studio默认工程中未自动生成AbilityStage，AbilityStage文件的创建请参见AbilityStage组件容器。 当使用回调方法订阅系统环境变量的变化时，该回调方法会随着AbilityStage的生命周期而存在，在Module销毁时一并销毁。 
例如，在AbilityStage.onConfigurationUpdate()回调方法中实现监测系统语言的变化。
import { AbilityStage, Configuration } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = '[MyAbilityStage]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet systemLanguage: string | undefined; // 系统当前语言\n\nexport default class MyAbilityStage extends AbilityStage {\n  onCreate(): void {\n    systemLanguage = this.context.config.language; // Module首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n    //...\n  }\n\n  onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdate, language: ${newConfig.language}`);\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }\n}
在UIAbility组件中订阅回调
UIAbility组件提供了UIAbility.onConfigurationUpdate()回调方法用于订阅系统环境变量的变化。当系统环境变量发生变化时，会调用该回调方法。在该方法中，通过Configuration对象获取最新的系统环境配置信息，而无需重启UIAbility。
当使用回调方法订阅系统环境变量的变化时，该回调方法会随着UIAbility的生命周期而存在，在UIAbility销毁时一并销毁。
例如，在onConfigurationUpdate()回调方法中实现监测系统语言的变化。
import { AbilityConstant, Configuration, UIAbility, Want } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = '[EntryAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nlet systemLanguage: string | undefined; // 系统当前语言\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    systemLanguage = this.context.config.language; // UIAbility实例首次加载时，获取系统当前语言\n    hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage is ${systemLanguage}`);\n  }\n\n  onConfigurationUpdate(newConfig: Configuration): void {\n    hilog.info(DOMAIN_NUMBER, TAG, `onConfigurationUpdated systemLanguage is ${systemLanguage}, newConfig: ${JSON.stringify(newConfig)}`);\n\n    if (systemLanguage !== newConfig.language) {\n      hilog.info(DOMAIN_NUMBER, TAG, `systemLanguage from ${systemLanguage} changed to ${newConfig.language}`);\n      systemLanguage = newConfig.language; // 将变化之后的系统语言保存，作为下一次变化前的系统语言\n    }\n  }\n  // ...\n}
在ExtensionAbility组件中订阅回调
ExtensionAbility组件提供了onConfigurationUpdate()回调方法用于订阅系统环境变量的变化。当系统环境变量发生变化时，会调用该回调方法。在该方法中，通过Configuration对象获取最新的系统环境配置信息。
当使用回调方法订阅系统环境变量的变化时，该回调方法会随着ExtensionAbility的生命周期而存在，在ExtensionAbility销毁时一并销毁。
以FormExtensionAbility为例说明。例如，在onConfigurationUpdate()回调方法中实现系统环境变量的变化。
import { FormExtensionAbility } from '@kit.FormKit';\nimport { Configuration } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\nconst TAG: string = '[EntryAbility]';\nconst DOMAIN_NUMBER: number = 0xFF00;\n\nexport default class EntryFormAbility extends FormExtensionAbility {\n  onConfigurationUpdate(config: Configuration) {\n    hilog.info(DOMAIN_NUMBER, TAG, '[EntryFormAbility] onConfigurationUpdate:' + JSON.stringify(config));\n  }\n  // ...\n}
