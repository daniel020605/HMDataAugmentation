元数据(C/C++)
元数据（Metadata）是对相机返回的图像信息数据的描述和上下文，针对图像信息，提供的更详细的数据，如照片或视频中，识别人像的取景框坐标等信息。
Metadata主要是通过一个TAG（Key），去找对应的Data，用于传递参数和配置信息，减少内存拷贝操作。
开发步骤
详细的API说明请参考Camera API参考。
 导入NDK接口，导入方法如下。  // 导入NDK接口头文件\n #include \"hilog/log.h\"\n #include \"ohcamera/camera.h\"\n #include \"ohcamera/camera_input.h\"\n #include \"ohcamera/capture_session.h\"\n #include \"ohcamera/photo_output.h\"\n #include \"ohcamera/preview_output.h\"\n #include \"ohcamera/video_output.h\"\n #include \"ohcamera/camera_manager.h\" 在CMake脚本中链接相关动态库。  target_link_libraries(entry PUBLIC libohcamera.so libhilog_ndk.z.so) 调用OH_CameraManager_GetSupportedCameraOutputCapability()方法，获取当前设备支持的元数据类型metaDataObjectType，并通过OH_CameraManager_CreateMetadataOutput()方法创建元数据输出流。  Camera_Manager *cameraManager = nullptr;\n Camera_Device* cameras = nullptr;\n Camera_OutputCapability* cameraOutputCapability = nullptr;\n Camera_MetadataOutput* metadataOutput = nullptr;\n const Camera_MetadataObjectType* metaDataObjectType;\n uint32_t size = 0;\n uint32_t cameraDeviceIndex = 0;\n char* previewSurfaceId = nullptr;\n Camera_ErrorCode ret = OH_Camera_GetCameraManager(&cameraManager);\n if (cameraManager == nullptr || ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"OH_Camera_GetCameraManager failed.\");\n }\n ret = OH_CameraManager_GetSupportedCameras(cameraManager, &cameras, &size);\n if (cameras == nullptr || size < 0 || ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameras failed.\");\n }\n ret = OH_CameraManager_GetSupportedCameraOutputCapability(cameraManager, &cameras[cameraDeviceIndex],\n                                                                   &cameraOutputCapability);\n if (cameraOutputCapability == nullptr || ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameraOutputCapability failed.\");\n }\n if (cameraOutputCapability->previewProfilesSize < 0) {\n     OH_LOG_ERROR(LOG_APP, \"previewProfilesSize == null\");\n }\n metaDataObjectType = cameraOutputCapability->supportedMetadataObjectTypes[2]; // 2:camera metedata types\n if (metaDataObjectType == nullptr) {\n     OH_LOG_ERROR(LOG_APP, \"Get metaDataObjectType failed.\");\n }\n \n ret = OH_CameraManager_CreateMetadataOutput(cameraManager, metaDataObjectType, &metadataOutput);\n if (metadataOutput == nullptr || ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"CreateMetadataOutput failed.\");\n } 调用start()方法输出metadata数据，接口调用失败时，会返回相应错误码。  ret = OH_MetadataOutput_Start(metadataOutput);\n if (ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"OH_MetadataOutput_Start failed.\");\n } 调用stop()方法停止输出metadata数据，接口调用失败会返回相应错误码。  ret = OH_MetadataOutput_Stop(metadataOutput);\n if (ret != CAMERA_OK) {\n     OH_LOG_ERROR(LOG_APP, \"OH_MetadataOutput_Stop failed.\");\n } 
状态监听
在相机应用开发过程中，可以随时监听metadata数据以及输出流的状态。
 通过注册监听获取metadata对象，监听事件固定为metadataObjectsAvailable。检测到有效metadata数据时，callback返回相应的metadata数据信息，metadataOutput创建成功时可监听。   ret = OH_MetadataOutput_RegisterCallback(metadataOutput, GetMetadataOutputListener());\n  if (ret != CAMERA_OK) {\n    OH_LOG_ERROR(LOG_APP, \"OH_MetadataOutput_RegisterCallback failed.\");\n  }   void OnMetadataObjectAvailable(Camera_MetadataOutput* metadataOutput,\n      Camera_MetadataObject* metadataObject, uint32_t size)\n  {\n      OH_LOG_INFO(LOG_APP, \"size = %{public}d\", size);\n  }\n\n  MetadataOutput_Callbacks* GetMetadataOutputListener(void)\n  {\n      static MetadataOutput_Callbacks metadataOutputListener = {\n          .onMetadataObjectAvailable = OnMetadataObjectAvailable,\n          .onError = OnMetadataOutputError\n      };\n      return &metadataOutputListener;\n  }     当前的元数据类型仅支持人脸检测（FACE_DETECTION）功能。元数据信息对象为识别到的人脸区域的矩形信息（Rect），包含矩形区域的左上角x坐标、y坐标和矩形的宽高数据。   通过注册回调函数，获取监听metadata流的错误结果，callback返回metadata输出接口使用错误时返回的错误码，错误码类型参见Camera_ErrorCode。   void OnMetadataOutputError(Camera_MetadataOutput* metadataOutput, Camera_ErrorCode errorCode)\n  {\n      OH_LOG_INFO(LOG_APP, \"OnMetadataOutput errorCode = %{public}d\", errorCode);\n  } 
