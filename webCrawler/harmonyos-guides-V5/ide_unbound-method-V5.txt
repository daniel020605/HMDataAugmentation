@typescript-eslint/unbound-method
强制类作用域中的方法在预期范围内调用。
类方法作为独立变量传递时，不会保留类作用域，“this”不再指代当前类。解决方法是定义为“this: void”或者使用箭头函数。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/unbound-method\": \"error\"\n  }\n}
选项
详情请参考@typescript-eslint/unbound-method选项。
正例
class MyClass {\n  public logUnbound(): void {\n    this.logUnbound();\n  }\n\n  public logBound = () => {\n    this.logUnbound();\n  };\n}\n\nconst instance = new MyClass();\n\n// logBound will always be bound with the correct scope\nconst logBound = instance.logBound;\nlogBound();
反例
class MyClass {\n  public logUnbound(): void {\n    this.logUnbound();\n  }\n\n  public logBound = () => {\n    this.logUnbound();\n  };\n}\n\nconst instance = new MyClass();\n\n// logBound will always be bound with the correct scope\nconst logUnbound = instance.logUnbound;\nlogUnbound();
规则集
plugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
