相机管理 (C/C++)
在开发一个相机应用前，需要先通过调用相机接口来创建一个独立的相机设备。
开发步骤
详细的API说明请参考Camera API参考。
 导入NDK接口。选择系统提供的NDK接口能力，导入NDK接口的方法如下。  // 导入NDK接口头文件\n #include \"hilog/log.h\"\n #include \"ohcamera/camera.h\"\n #include \"ohcamera/camera_input.h\"\n #include \"ohcamera/capture_session.h\"\n #include \"ohcamera/photo_output.h\"\n #include \"ohcamera/preview_output.h\"\n #include \"ohcamera/video_output.h\"\n #include \"ohcamera/camera_manager.h\" 在CMake脚本中链接相关动态库。  target_link_libraries(entry PUBLIC libohcamera.so libhilog_ndk.z.so) 通过OH_Camera_GetCameraManager()方法，获取cameraManager对象。 Camera_Manager *cameraManager = nullptr;\nCamera_Input* cameraInput = nullptr;\nCamera_Device* cameras = nullptr;\nuint32_t size = 0;\nuint32_t cameraDeviceIndex = 0;\n// 创建CameraManager对象\nCamera_ErrorCode ret = OH_Camera_GetCameraManager(&cameraManager);\nif (cameraManager == nullptr || ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_Camera_GetCameraManager failed.\");\n}     如果获取对象失败，说明相机可能被占用或无法使用。如果被占用，须等到相机被释放后才能重新获取。   通过OH_CameraManager_GetSupportedCameras()方法，获取当前设备支持的相机列表，列表中存储了设备支持的所有相机ID。若列表不为空，则说明列表中的每个ID都支持独立创建相机对象；否则，说明当前设备无可用相机，不可继续后续操作。 // 获取相机列表\nret = OH_CameraManager_GetSupportedCameras(cameraManager, &cameras, &size);\nif (cameras == nullptr || size < 0 || ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_GetSupportedCameras failed.\");\n}\nfor (int index = 0; index < size; index++) {\n   OH_LOG_INFO(LOG_APP, \"cameraId  =  %{public}s \", cameras[index].cameraId);              // 获取相机ID\n   OH_LOG_INFO(LOG_APP, \"cameraPosition  =  %{public}d \", cameras[index].cameraPosition);  // 获取相机位置\n   OH_LOG_INFO(LOG_APP, \"cameraType  =  %{public}d \", cameras[index].cameraType);          // 获取相机类型\n   OH_LOG_INFO(LOG_APP, \"connectionType  =  %{public}d \", cameras[index].connectionType);  // 获取相机连接类型\n} 
状态监听
在相机应用开发过程中，可以随时监听相机状态，包括新相机的出现、相机的移除、相机的可用状态。在回调函数中，通过相机ID、相机状态这两个参数进行监听，如当有新相机出现时，可以将新相机加入到应用的备用相机中。
通过注册cameraStatus事件，通过回调返回监听结果，callback返回Camera_StatusInfo参数，参数的具体内容可参考相机管理器回调接口实例Camera_StatusInfo。
ret = OH_CameraManager_RegisterCallback(cameraManager, GetCameraManagerListener());\nif (ret != CAMERA_OK) {\n   OH_LOG_ERROR(LOG_APP, \"OH_CameraManager_RegisterCallback failed.\");\n}
void CameraManagerStatusCallback(Camera_Manager* cameraManager, Camera_StatusInfo* status)\n{\n   OH_LOG_INFO(LOG_APP, \"CameraManagerStatusCallback is called\");\n}\nCameraManager_Callbacks* GetCameraManagerListener()\n{\n   static CameraManager_Callbacks cameraManagerListener = {\n      .onCameraStatus = CameraManagerStatusCallback\n   };\n   return &cameraManagerListener;\n}
