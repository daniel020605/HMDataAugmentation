使用Image_NativeModule完成位图操作
创建位图，获取位图的宽、高、pixelFormat、alphaType、rowStride信息、对位图进行操作以及释放位图实例。
开发步骤
[h2]添加链接库
在进行应用开发之前，开发者需要打开native工程的src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加libpixelmap.so以及日志依赖libhilog_ndk.z.so。
target_link_libraries(entry PUBLIC libhilog_ndk.z.so libpixelmap.so)
[h2]Native接口调用
具体接口说明请参考API文档。
在hello.cpp中实现C API接口调用逻辑，示例代码如下：
位图接口使用示例
在初始化参数后创建Pixelmap实例，进行图片像素数据的读写，对图片进行缩放、位置变换、反转、旋转、裁剪等操作。
   #include <linux/kd.h>\n   #include <string>\n\n   #include <hilog/log.h>\n   #include <multimedia/image_framework/image/pixelmap_native.h>\n\n   #undef LOG_DOMAIN\n   #undef LOG_TAG\n   #define LOG_DOMAIN 0x3200\n   #define LOG_TAG \"MY_TAG\"\n\n   Image_ErrorCode PixelmapTest()\n   {\n       uint8_t data[96];\n       size_t dataSize = 96;\n       for (int i = 0; i < dataSize; i++) {\n           data[i] = i + 1;\n       }\n\n       //创建参数结构体实例，并设置参数\n       OH_Pixelmap_InitializationOptions *createOpts;\n       OH_PixelmapInitializationOptions_Create(&createOpts);\n       OH_PixelmapInitializationOptions_SetWidth(createOpts, 6);\n       OH_PixelmapInitializationOptions_SetHeight(createOpts, 4);\n       OH_PixelmapInitializationOptions_SetPixelFormat(createOpts, PIXEL_FORMAT_RGBA_8888);\n       OH_PixelmapInitializationOptions_SetAlphaType(createOpts, PIXELMAP_ALPHA_TYPE_UNKNOWN);\n\n       //创建Pixelmap实例\n       OH_PixelmapNative *pixelmap = nullptr;\n       Image_ErrorCode errCode = OH_PixelmapNative_CreatePixelmap(data, dataSize, createOpts, &pixelmap);\n\n       //读取图像像素数据，结果写入数组里\n       uint8_t destination[96];\n       size_t destinationSize = 96;\n       errCode = OH_PixelmapNative_ReadPixels(pixelmap, destination, &destinationSize);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_ReadPixels failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //读取缓冲区中的图片数据，结果写入Pixelmap中\n       uint8_t source[96];\n       size_t sourceSize = 96;\n       for (int i = 0; i < sourceSize; i++) {\n           source[i] = i + 1;\n       }\n       errCode = OH_PixelmapNative_WritePixels(pixelmap, source, sourceSize);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_WritePixels failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //创建图片信息实例，并获取图像像素信息\n       OH_Pixelmap_ImageInfo *imageInfo;\n       OH_PixelmapImageInfo_Create(&imageInfo);\n       errCode = OH_PixelmapNative_GetImageInfo(pixelmap, imageInfo);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_GetImageInfo failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //获取图片的宽，高，pixel格式，透明度等信息\n       uint32_t width, height, rowStride;\n       int32_t pixelFormat, alphaType;\n       OH_PixelmapImageInfo_GetWidth(imageInfo, &width);\n       OH_PixelmapImageInfo_GetHeight(imageInfo, &height);\n       OH_PixelmapImageInfo_GetRowStride(imageInfo, &rowStride);\n       OH_PixelmapImageInfo_GetPixelFormat(imageInfo, &pixelFormat);\n       OH_PixelmapImageInfo_GetAlphaType(imageInfo, &alphaType);\n       OH_PixelmapImageInfo_Release(imageInfo);\n       OH_LOG_INFO(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest GetImageInfo success, width: %{public}d, height: %{public}d, rowStride: %{public}d, pixelFormat: %{public}d, alphaType: %{public}d.\", width, height, rowStride, pixelFormat, alphaType);\n\n       //设置透明比率来让Pixelap达到对应的透明效果\n       errCode = OH_PixelmapNative_Opacity(pixelmap, 0.5);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_Opacity failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //对图片进行缩放\n       errCode = OH_PixelmapNative_Scale(pixelmap, 2.0, 1.0);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_Scale failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //对图片进行位置变换\n       errCode = OH_PixelmapNative_Translate(pixelmap, 50.0, 10.0);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_Translate failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //对图片进行旋转\n       errCode = OH_PixelmapNative_Rotate(pixelmap, 90.0);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_Rotate failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //对图片进行翻转\n       errCode = OH_PixelmapNative_Flip(pixelmap, true, true);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_Flip failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //对图片进行裁剪\n       Image_Region region;\n       region.x = 100;\n       region.y = 100;\n       region.width = 6;\n       region.height = 4;\n       errCode = OH_PixelmapNative_Crop(pixelmap, &region);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImagePixelmapNativeCTest pixelmapTest OH_PixelmapNative_Crop failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //释放Pixelmap, InitializationOptions实例\n       OH_PixelmapNative_Release(pixelmap);\n       OH_PixelmapInitializationOptions_Release(createOpts);\n       return IMAGE_SUCCESS;\n   }
