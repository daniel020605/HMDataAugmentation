使用Node-API接口进行模块加载
Node-API中的napi_load_module_with_info接口的功能是进行模块的加载，当模块加载出来之后，可以使用函数napi_get_property获取模块导出的变量，也可以使用napi_get_named_property获取模块导出的函数，该函数可以在新创建的ArkTS基础运行时环境中使用。
函数说明
napi_status napi_load_module_with_info(napi_env env,\n                                       const char* path,\n                                       const char* module_info,\n                                       napi_value* result);
bundleName表示AppScope/app.json5中配置的工程名；moduleName指的是待加载模块所在的HAP下module.json5中配置的名字；napi_load_module只局限于在主线程中进行模块加载。
napi_load_module_with_info支持的场景
加载一个模块名，实际的行为是加载该模块的入口文件，一般为index.ets/ts。如果在HAR中加载另外一个HAR，需要确保module_info的配置正确，尤其注意moduleName应为HAP的moduleName。如果在HAP/HSP中直接或间接使用了三方包，该三方包中使用napi_load_module_with_info接口加载其他模块A，则需要在HAP/HSP中也添加A的依赖。
异常场景
加载hsp失败，返回错误码napi_generic_failure。模块加载过程中，发生链接关系出错、包内找不到对应文件等问题时，该API将抛出referenceError异常，并返回错误码napi_pending_exception。系统侧发生非预期行为导致加载无法正常执行，将抛出cppcrash。
使用示例
加载模块内文件路径
当加载文件中的模块时，如以下ArkTS代码：
//./src/main/ets/Test.ets\nlet value = 123;\nfunction test() {\n  console.log(\"Hello HarmonyOS\");\n}\nexport {value, test};
需要当前模块的build-profile.json5文件中进行以下配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"sources\": [\n                    \"./src/main/ets/Test.ets\"\n                ]\n            }\n        }\n    }\n} 使用napi_load_module_with_info加载Test文件，调用函数test以及获取变量value。   开启useNormalizedOHMUrl后(即将工程目录中与entry同级别的应用级build-profile.json5文件中strictMode属性的useNormalizedOHMUrl字段配置为true)，加载模块内文件路径时：1、bundleName不会影响最终加载逻辑，会智能通过module名索引进程内对应的hap，例如：工程的bundleName为com.example.application，实际入参时填写为 com.example.application1，模块也能正常加载。2、路径需要以packageName开头，packageName指的是模块的oh-package.json5中配置的name字段。  static napi_value loadModule(napi_env env, napi_callback_info info) {\n    napi_value result;\n    // 1. 使用napi_load_module_with_info加载Test文件中的模块\n    napi_status status = napi_load_module_with_info(env, \"entry/src/main/ets/Test\", \"com.example.application/entry\", &result);\n    if (status != napi_ok) {\n       return nullptr;\n    }\n\n    napi_value testFn;\n    // 2. 使用napi_get_named_property获取test函数\n    napi_get_named_property(env, result, \"test\", &testFn);\n    // 3. 使用napi_call_function调用函数test\n    napi_call_function(env, result, testFn, 0, nullptr, nullptr);\n\n    napi_value value;\n    napi_value key;\n    std::string keyStr = \"value\";\n    napi_create_string_utf8(env, keyStr.c_str(), keyStr.size(), &key);\n    // 4. 使用napi_get_property获取变量value\n    napi_get_property(env, result, key, &value);\n    return result;\n} 
加载HAR模块名
HAR包Index.ets文件如下：
//library Index.ets\nlet value = 123;\nfunction test() {\n  console.log(\"Hello HarmonyOS\");\n}\nexport {value, test};
在oh-package.json5文件中配置dependencies项。 {\n    \"dependencies\": {\n        \"library\": \"file:../library\"\n    }\n} 在使用library的模块中，对build-profile.json5进行配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"packages\": [\n                    \"library\"\n                ]\n            }\n        }\n    }\n} 用napi_load_module_with_info加载library，调用函数test以及获取变量value。 static napi_value loadModule(napi_env env, napi_callback_info info) {\n    napi_value result;\n    // 1. 使用napi_load_module_with_info加载library\n    napi_status status = napi_load_module_with_info(env, \"library\", \"com.example.application/entry\", &result);\n    if (status != napi_ok) {\n       return nullptr;\n    }\n\n    napi_value testFn;\n    // 2. 使用napi_get_named_property获取test函数\n    napi_get_named_property(env, result, \"test\", &testFn);\n    // 3. 使用napi_call_function调用函数test\n    napi_call_function(env, result, testFn, 0, nullptr, nullptr);\n\n    napi_value value;\n    napi_value key;\n    std::string keyStr = \"value\";\n    napi_create_string_utf8(env, keyStr.c_str(), keyStr.size(), &key);\n    // 4. 使用napi_get_property获取变量value\n    napi_get_property(env, result, key, &value);\n    return result;\n} 
加载远程HAR模块名
在oh-package.json5文件中配置dependencies项。 {\n    \"dependencies\": {\n        \"@ohos/hypium\": \"1.0.16\"\n    }\n} 在使用@ohos/hypium的模块中，对build-profile.json5进行配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"packages\": [\n                    \"@ohos/hypium\"\n                ]\n            }\n        }\n    }\n} 用napi_load_module_with_info加载@ohos/hypium，获取DEFAULT变量。 static napi_value loadModule(napi_env env, napi_callback_info info) {\n    napi_value result;\n    // 1. 使用napi_load_module_with_info加载@ohos/hypium\n    napi_status status = napi_load_module_with_info(env, \"@ohos/hypium\", \"com.example.application/entry\", &result);\n    if (status != napi_ok) {\n       return nullptr;\n    }\n\n    napi_value key;\n    std::string keyStr = \"DEFAULT\";\n    napi_create_string_utf8(env, keyStr.c_str(), keyStr.size(), &key);\n    // 2. 使用napi_get_property获取DEFAULT变量\n    napi_value defaultValue;\n    napi_get_property(env, result, key, &defaultValue);\n    return result;\n} 
加载ohpm包名
在oh-package.json5文件中配置dependencies项。 {\n    \"dependencies\": {\n        \"json5\": \"^2.2.3\"\n    }\n} 在使用json5的模块中，对build-profile.json5进行配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"packages\": [\n                    \"json5\"\n                ]\n            }\n        }\n    }\n} 用napi_load_module_with_info加载json5，调用函数stringify。 static napi_value loadModule(napi_env env, napi_callback_info info) {\n    napi_value result;\n    // 1. 使用napi_load_module_with_info加载json5\n    napi_status status = napi_load_module_with_info(env, \"json5\", \"com.example.application/entry\", &result);\n    if (status != napi_ok) {\n       return nullptr;\n    }\n\n    napi_value key;\n    std::string keyStr = \"default\";\n    napi_create_string_utf8(env, keyStr.c_str(), keyStr.size(), &key);\n    // 2. 使用napi_get_property获取default对象\n    napi_value defaultValue;\n    napi_get_property(env, result, key, &defaultValue);\n\n    napi_value stringifyFn;\n    // 3. 使用napi_get_named_property获取stringify函数\n    napi_get_named_property(env, defaultValue, \"stringify\", &stringifyFn);\n    // 4. 使用napi_call_function调用函数stringify\n    napi_value argStr;\n    std::string text = \"call json5 stringify\";\n    napi_create_string_utf8(env, text.c_str(), text.size(), &argStr);\n    napi_value args[1] = {argStr};\n\n    napi_value returnValue;\n    napi_call_function(env, defaultValue, stringifyFn, 1, args, &returnValue);\n    return result;\n} 
加载API模块
static napi_value loadModule(napi_env env, napi_callback_info info) {\n    // 1. 使用napi_load_module_with_info加载模块@ohos.hilog\n    napi_value result;\n    napi_status status = napi_load_module_with_info(env, \"@ohos.hilog\", nullptr, &result);\n    if (status != napi_ok) {\n        return nullptr;\n    }\n\n    // 2. 使用napi_get_named_property获取info函数\n    napi_value infoFn;\n    napi_get_named_property(env, result, \"info\", &infoFn);\n    \n    napi_value tag;\n    std::string formatStr = \"test\";\n    napi_create_string_utf8(env, formatStr.c_str(), formatStr.size(), &tag);\n    \n    napi_value outputString;\n    std::string str = \"Hello HarmonyOS\";\n    napi_create_string_utf8(env, str.c_str(), str.size(), &outputString);\n    \n    napi_value flag;\n    napi_create_int32(env, 0, &flag);\n\n    napi_value args[3] = {flag, tag, outputString};\n    // 3. 使用napi_call_function调用info函数\n    napi_call_function(env, result, infoFn, 3, args, nullptr);\n    return result;\n}
加载Native库
libentry.so的index.d.ts文件如下
//index.d.ts\nexport const add: (a: number, b: number) => number;
在oh-package.json5文件中配置dependencies项。 {\n    \"dependencies\": {\n        \"libentry.so\": \"file:../src/main/cpp/types/libentry\"\n    }\n} 在使用libentry.so的模块中，对build-profile.json5进行配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"packages\": [\n                    \"libentry.so\"\n                ]\n            }\n        }\n    }\n} 用napi_load_module_with_info加载libentry.so，调用函数add。 static napi_value loadModule(napi_env env, napi_callback_info info) {\n    napi_value result;\n    // 1. 使用napi_load_module_with_info加载libentry.so\n    napi_status status = napi_load_module_with_info(env, \"libentry.so\", \"com.example.application/entry\", &result);\n    if (status != napi_ok) {\n        return nullptr;\n    }\n\n    napi_value addFn;\n    // 2. 使用napi_get_named_property获取add函数\n    napi_get_named_property(env, result, \"add\", &addFn);\n    \n    napi_value a;\n    napi_value b;\n    napi_create_int32(env, 2, &a);\n    napi_create_int32(env, 3, &b);\n    napi_value args[2] = {a, b};\n    // 3. 使用napi_call_function调用函数add\n    napi_value returnValue;\n    napi_call_function(env, result, addFn, 2, args, &returnValue);\n    return result;\n} 
HAR加载HAR模块名
场景为har1加载har2，har2中的Index.ets文件如下
//har2 Index.ets\nlet value = 123;\nfunction test() {\n  console.log(\"Hello HarmonyOS\");\n}\nexport {value, test};
在har1中的oh-package.json5文件中配置dependencies项。 {\n    \"dependencies\": {\n        \"har2\": \"file:../har2\"\n    }\n} 在har1的build-profile.json5文件中进行配置： {\n    \"buildOption\" : {\n        \"arkOptions\" : {\n            \"runtimeOnly\" : {\n                \"packages\": [\n                    \"har2\"\n                ]\n            }\n        }\n    }\n} 在har1中用napi_load_module_with_info加载har2，调用函数test以及获取变量value。 static napi_value loadModule(napi_env env, napi_callback_info info) {\n    napi_value result;\n    // 1. 使用napi_load_module_with_info加载har2，注意这里的moduleName为模块所在HAP包的moduleName\n    napi_status status = napi_load_module_with_info(env, \"har2\", \"com.example.application/entry\", &result);\n    if (status != napi_ok) {\n        return nullptr;\n    }\n\n    napi_value testFn;\n    // 2. 使用napi_get_named_property获取test函数\n    napi_get_named_property(env, result, \"test\", &testFn);\n    // 3. 使用napi_call_function调用函数test\n    napi_call_function(env, result, testFn, 0, nullptr, nullptr);\n\n    napi_value value;\n    napi_value key;\n    std::string keyStr = \"value\";\n    napi_create_string_utf8(env, keyStr.c_str(), keyStr.size(), &key);\n    // 4. 使用napi_get_property获取变量value\n    napi_get_property(env, result, key, &value);\n    return result;\n} 
