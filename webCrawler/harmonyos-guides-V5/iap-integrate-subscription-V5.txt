接入订阅
业务流程
如下业务流程对于单机应用同样适用。在单机应用中，应用服务器和应用客户端的交互放在应用客户端完成，应用服务器和IAP服务器交互的部分可不处理。
 应用客户端向IAP Kit发起queryEnvironmentStatus请求，检查当前用户登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，应用需隐藏相关IAP功能入口。 应用客户端向IAP Kit发起queryProducts请求来获取在AppGallery Connect上配置的商品信息。 应用客户端根据返回的商品信息展示可供购买的商品列表，包含商品名称、价格等信息。 
 应用客户端向IAP Kit发起queryPurchases请求，获取当前生效中的订阅列表。IAP Kit返回PurchaseData列表。PurchaseData为JWS格式的字符串，承载了相关的订阅信息。 应用客户端展示商品的订阅状态，需要屏蔽处于自动续期状态的商品的购买入口。同时处理商品的权益发放。 若商品未确认发货，需要在权益发放后，向IAP Kit发送finishPurchase请求，以此通知IAP服务器更新商品的发货状态，完成购买流程。应用成功执行finishPurchase之后，IAP服务器会将相应商品标记为已发货状态。此步骤也可放到应用服务器处理。应用服务器可通过请求服务端订阅确认发货接口来确认发货，完成购买流程。 
具体请参见对生效中的订阅发放权益。
 用户发起购买后，应用客户端向IAP Kit发起createPurchase购买请求，请求中携带商品ID、商品类型等信息。IAP Kit创建订单并展示收银台。 购买结果确认。如购买成功，可通过应用客户端或应用服务器接收购买结果，建议通过应用服务器接收购买结果。方式一：通过客户端接收购买结果  用户购买成功时，IAP Kit返回包含订阅状态信息的PurchaseData数据。 应用客户端向应用服务器上报PurchaseData数据。 应用服务器对PurchaseData.jwsSubscriptionStatus进行解码验签，成功后可得到SubGroupStatusPayload的JSON字符串。   （建议）方式二：通过服务器接收购买结果  为了提高安全性，开发者可以接入服务端关键事件通知，在用户购买成功时，IAP服务器将发送订单关键事件通知。 应用服务器可从NotificationPayload.NotificationMetaData中解析出purchaseToken和purchaseOrderId信息，并通过服务端订阅状态查询接口向IAP服务器查询最新的订阅状态信息，进一步确认订阅信息的准确性。 IAP服务器返回订阅组相关订阅状态数据jwsSubGroupStatus。 应用服务器对jwsSubGroupStatus进行解码验签，成功后可得到SubGroupStatusPayload的JSON字符串。   
如果购买失败，请参见确保权益发放处理，及时发放权益。
发放权益
 确认购买成功后，需要处理权益发放。检查SubGroupStatusPayload.lastSubscriptionStatus.lastPurchaseOrder是否已发放权益，未发放则需发放相关权益，并记录对应的订单信息（PurchaseOrderPayload），用于后续检查权益发放状态。           建议单机应用将用户权益和订阅状态关联。如果订阅处于生效状态，始终为用户发放权益。   应用客户端向应用服务器查询订单的发货状态。 应用服务器返回对应的发货状态以及订单信息（PurchaseOrderPayload）。 发货成功后应用客户端向IAP Kit发送finishPurchase请求，以此通知IAP服务器更新商品的发货状态，完成购买流程。应用成功执行finishPurchase之后，IAP服务器会将相应商品标记为已发货状态，后续该商品即可正常续期。此步骤也可放到应用服务器处理。应用服务器可通过请求服务端订阅确认发货接口来确认发货，完成购买流程。 
开发步骤
[h2]展示商品
 检查应用引入IAP Kit的可用性。在使用应用内支付之前，应用客户端需要向IAP Kit发送queryEnvironmentStatus请求，以此判断用户当前登录的华为账号所在的服务地是否在IAP Kit支持结算的国家/地区中。如请求失败，则隐藏相关IAP功能入口。     当前IAP Kit支持结算的国家/地区仅有中国大陆。   import { iap } from '@kit.IAPKit';\nimport { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nqueryEnvironmentStatus() {\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  iap.queryEnvironmentStatus(context).then(() => {\n    // 请求成功\n    console.info('Succeeded in querying environment status.');\n  }).catch((err: BusinessError) => {\n    // 请求失败\n    console.error(`Failed to query environment status. Code is ${err.code}, message is ${err.message}`);\n  });\n} 
 展示商品列表。应用客户端通过queryProducts来获取在AppGallery Connect上配置的商品信息。发起请求时，需在请求参数QueryProductsParameter中携带相关的商品ID，并指定其productType为iap.ProductType.AUTORENEWABLE。         当接口请求成功时，IAP Kit将返回商品信息Product的列表。 应用可以使用Product包含的商品价格、名称和描述等信息，向用户展示可供购买的商品列表。            queryProducts每次只能查询一种商品类型的商品，每次最多查询200个商品，否则请求将报错。    import { iap } from '@kit.IAPKit';\nimport { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nqueryProducts() {\n  const queryProductParam: iap.QueryProductsParameter = {\n    productType: iap.ProductType.AUTORENEWABLE,\n    // productIds中的商品需要替换成开发者在AppGallery Connect网站配置的商品\n    productIds: ['product1', 'product2', 'product3']\n  };\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  iap.queryProducts(context, queryProductParam).then((result) => {\n    // 请求成功\n    console.info('Succeeded in querying products.');\n    // 展示商品信息\n    // ...\n  }).catch((err: BusinessError) => {\n    // 请求失败\n    console.error(`Failed to query products. Code is ${err.code}, message is ${err.message}`);  \n  });\n} 
[h2]展示订阅状态、发放权益
 应用获取用户当前生效中的订阅列表。 应用客户端展示对应商品的订阅状态。此处需要屏蔽处于自动续期状态的商品的购买入口。 处理生效中的订阅的权益发放。 
具体可参见对生效中的订阅发放权益。
[h2]发起购买
用户发起购买时，应用可通过向IAP Kit发送createPurchase请求来拉起IAP Kit收银台。发起请求时，应用需在请求参数PurchaseParameter中携带此前已在华为AppGallery Connect网站上配置并生效的自动续期订阅的商品ID，并指定其productType为iap.ProductType.AUTORENEWABLE。
开发过程中易出现频繁调用接口的现象，建议控制接口调用频度，具体可参见1001860004 接口访问过频。
import { iap } from '@kit.IAPKit';\nimport { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nsubscribe() {\n  const createPurchaseParam: iap.PurchaseParameter = {\n    productType: iap.ProductType.AUTORENEWABLE,\n    // productId需要替换成开发者在AppGallery Connect网站配置商品信息时设置的“商品ID”\n    productId: 'test001'\n  };\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  iap.createPurchase(context, createPurchaseParam).then(async (result) => {\n    console.info('Succeeded in creating purchase.');\n    // 购买成功，处理购买结果\n    // dealPurchaseResult实现请参见下一步\n    this.dealPurchaseResult(result);\n  }).catch((err: BusinessError) => {\n    // 购买失败\n    console.error(`Failed to create purchase. Code is ${err.code}, message is ${err.message}`);\n    // dealPurchaseError实现请参见下一步\n    this.dealPurchaseError(err);\n  })\n}
[h2]购买结果处理
【结果1：购买成功】
 为了提高安全性，建议应用服务器接入服务端关键事件通知以接收购买成功结果并通过应用服务器来处理解码验签、完成购买等操作。 请务必确保发货成功后再执行完成购买步骤，本步骤可通过请求服务端订阅确认发货接口来确认发货，完成购买流程。 
以下内容为通过客户端接收购买结果及处理的步骤说明。
 当用户购买成功时，应用将接收到一个CreatePurchaseResult对象，其purchaseData字段包括了此次购买的结果信息。 对purchaseData.jwsSubscriptionStatus进行解码验签，验证成功可得到SubGroupStatusPayload的JSON字符串。建议应用客户端将purchaseData发送至应用服务器，在应用服务器执行此操作。 验签成功后，检查SubGroupStatusPayload.lastSubscriptionStatus.status是否为1（生效中），是则发放相关权益。建议先检查此笔订单权益的发放状态，未发放则发放权益，成功后记录SubGroupStatusPayload.lastSubscriptionStatus.lastPurchaseOrder等信息，用于后续检查权益发放状态。 完成购买。发放权益后，应用需发送finishPurchase请求确认发货，以此通知IAP服务器更新商品的发货状态，完成购买流程。发送finishPurchase请求时，需在请求参数FinishPurchaseParameter中携带PurchaseOrderPayload中的productType、purchaseToken、purchaseOrderId，其中PurchaseOrderPayload为SubGroupStatusPayload.lastSubscriptionStatus.lastPurchaseOrder。请求成功后，IAP服务器会将相应商品标记为已发货。 
import { iap } from '@kit.IAPKit';\nimport { common } from '@kit.AbilityKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n// JWSUtil为自定义类，可参见示例代码\nimport { JWSUtil } from '../common/JWSUtil';\n\ndealPurchaseResult(result: iap.CreatePurchaseResult) {\n  const jwsSubscriptionStatus: string = JSON.parse(result.purchaseData).jwsSubscriptionStatus;\n  if (!jwsSubscriptionStatus) {\n    return;\n  }\n  const subscriptionStatus: string = JWSUtil.decodeJwsObj(jwsSubscriptionStatus);\n  if (!subscriptionStatus) {\n    return;\n  }\n  // 需自定义SubGroupStatusPayload类，包含的信息请参见SubGroupStatusPayload\n  const subGroupStatusPayload: SubGroupStatusPayload = JSON.parse(subscriptionStatus);\n  const lastSubscriptionStatus = subGroupStatusPayload.lastSubscriptionStatus;\n  if (!lastSubscriptionStatus || lastSubscriptionStatus.status !== '1') {\n    return;\n  }\n  const purchaseOrderPayload = lastSubscriptionStatus.lastPurchaseOrder;\n  if (purchaseOrderPayload === undefined) {\n    return;\n  }\n  // 处理发货\n  // ...\n  // 发货成功后向IAP Kit发送finishPurchase请求，确认发货，完成购买\n  this.finishPurchase(purchaseOrderPayload);\n}\n\n/**\n * 确认发货，完成购买\n *\n * @param purchaseOrder 订单信息，来源于购买请求\n */\nfinishPurchase(purchaseOrder: PurchaseOrderPayload) {\n  const finishPurchaseParam: iap.FinishPurchaseParameter = {\n    productType: Number(purchaseOrder.productType),\n    purchaseToken: purchaseOrder.purchaseToken,\n    purchaseOrderId: purchaseOrder.purchaseOrderId\n  };\n  const context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext;\n  iap.finishPurchase(context, finishPurchaseParam).then(() => {\n    // 请求成功\n    console.info('Succeeded in finishing purchase.');\n  }).catch((err: BusinessError) => {\n    // 请求失败\n    console.error(`Failed to finish purchase. Code is ${err.code}, message is ${err.message}`);\n  });\n}
【结果2：购买失败】
当用户购买失败时，需要针对code为iap.IAPErrorCode.PRODUCT_OWNED和iap.IAPErrorCode.SYSTEM_ERROR的场景，检查是否需要补发货，确保权益发放，具体请参见确保权益发放。
import { iap } from '@kit.IAPKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\ndealPurchaseError(err: BusinessError) {\n  if (err.code === iap.IAPErrorCode.PRODUCT_OWNED || err.code === iap.IAPErrorCode.SYSTEM_ERROR) {\n    // 参见确保权益发放检查是否需要补发货，确保权益发放\n    // ...\n  }\n}
