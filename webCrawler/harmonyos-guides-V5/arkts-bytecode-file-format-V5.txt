方舟字节码文件格式
方舟字节码文件是ArkTS/TS/JS编译后的二进制产物。本文详细介绍了方舟字节码文件的格式，旨在帮助开发者深入了解构成字节码的各个部分，从而指导开发者进行字节码的分析和修改工作。
约束
本文仅适用于版本号为12.0.6.0的方舟字节码（版本号为方舟编译器内部保留字段，开发者无需关注）。
字节码文件数据类型
[h2]整型
[h2]字符串
对齐方式：单字节对齐格式：
[h2]TaggedValue
对齐方式：单字节对齐格式：
TypeDescriptor
TypeDescriptor是类(Class) 名称的格式，由'L'、'_'、ClassName和';'组成：L_ClassName;。其中，ClassName是类的全名，名字中的'.'会被替换为'/'。
字节码文件布局
字节码文件起始于Header结构。文件中的所有结构均可以从Header出发，直接或间接地访问到。字节码文件中结构的引用方式包括偏移量和索引。偏移量是一个32位长度的值，表示当前结构的起始位置在字节码文件中相对于文件头的距离，从0开始计算。索引是一个16位长度的值，表示当前结构在索引区域中的位置，此机制将在IndexSection章节描述。
字节码文件中所有的多字节值均采用小端字节序。
[h2]Header
对齐方式：单字节对齐格式：
[h2]Version
字节码版本号由4个部分组成，格式为：主版本号.次版本号.特性版本号.编译版本号。
[h2]ForeignClass
描述字节码文件中的外部类。外部类在其他文件中声明，并在当前字节码文件中被引用。
对齐方式：单字节对齐格式：
[h2]ForeignMethod
描述字节码文件中的外部方法。外部方法在其他文件中声明，并在当前字节码文件中被引用。
对齐方式：单字节对齐格式：
注意：
通过ForeignMethod的偏移量，可以找到适当的IndexHeader以解析class_idx。
[h2]ClassIndex
ClassIndex结构的作用是通过名称快速地定位到Class的定义。
对齐方式：4个字节格式：
[h2]Class
在字节码文件中，一个类可以表示方舟字节码的一个源代码文件或者一种内置的Annotation。当表示源代码文件时，类的方法对应源代码文件中的函数，类的字段对应源文件中的内部信息；当表示内置的Annotation时，类中不包含字段与方法。源代码文件中的一个类在字节码文件中表示为一个对应其构造函数的方法。
对齐方式：单字节对齐格式：
[h2]ClassAccessFlag
[h2]ClassTag
对齐方式：单字节对齐格式：
注意：
ClassTag是class_data中元素 (TaggedValue) 所具备的标记，表头中的“数量”指的是在某一个Class的class_data中拥有此标记的元素出现的次数。
[h2]Field
描述字节码文件中的字段。
对齐方式：单字节对齐格式：
注意：
通过Field的偏移量，可以找到适当的IndexHeader以解析class_idx和type_idx。
[h2]FieldTag
对齐方式：单字节对齐格式：
注意：
FieldTag是field_data中元素 (TaggedValue) 所具备的标记，表头中的“数量”指的是在某一个Field的field_data中拥有此标记的元素出现的次数。
[h2]Method
描述字节码文件中的方法。
对齐方式：单字节对齐格式：
注意：
通过Method的偏移量，可以找到适当的IndexHeader以解析class_idx。
[h2]MethodIndexData
MethodIndexData是一个无符号32位整数，划分为3个部分。
FunctionKind
[h2]MethodTag
注意：
MethodTag是method_data中元素 (TaggedValue) 所具备的标记，表头中的“数量”指的是在某一个Method的method_data中拥有此标记的元素出现的次数。
[h2]Code
对齐方式：单字节对齐格式：
[h2]TryBlock
对齐方式：单字节对齐格式：
[h2]CatchBlock
对齐方式：单字节对齐格式：
[h2]Annotation
描述一个注解结构。
对齐方式：单字节对齐格式：
注意：
通过Annotation的偏移量，可以找到适当的IndexHeader以解析class_idx。
[h2]AnnotationElementTag
[h2]AnnotationElement
对齐方式：单字节对齐格式：
[h2]Value formats
不同的值类型，有不同的值编码格式，包括INTEGER, LONG, FLOAT, DOUBLE, ID。
[h2]LineNumberProgramIndex
行号程序索引 (LineNumberProgramIndex) 结构是一个数组，便于使用更紧凑的索引访问行号程序 (Line number program) 。
对齐方式：4个字节格式：
[h2]DebugInfo
调试信息 (DebugInfo) 包含方法的程序计数器与源代码中的行列号之间的映射以及有关局部变量的信息。调试信息的格式由DWARF调试信息格式第3版（见第6.2项）的内容演变形成。基于状态机 (State machine) 的执行模型对行号程序 (Line number program)进行解释，可得到映射和局部变量信息编码。为对不同方法的相同行号程序进行去重，程序中引用的所有常量都被移动到了常量池 (Constant pool) 中。
对齐方式：单字节对齐格式：
Constant pool
常量池 (Constant pool) 是DebugInfo中存放常量的结构。很多方法都具有相似的行号程序，其区别仅在于变量名、变量类型和文件名。为了对这类行号程序进行去重，程序中引用的所有常量都存储在常量池。在解释程序时，状态机维护一个指向常量池的指针。当状态机解释一条需要常量参数的指令时，会从内存常量池指针指向的位置读取值，然后递增指针。
State machine
状态机 (State machine) 的作用是产生DebugInfo信息。状态机中有以下的寄存器：
Line number program
一个行号程序 (Line number program) 由指令组成。每条指令都包含一个字节的操作码以及可选参数。根据操作码的不同，参数的值可能被编码在指令中（称为指令参数），或者需要从常量池中获取（称为常量池参数）。
uleb128 name_idx
uleb128 type_idx
register_num：将包含局部变量的寄存器
name_idx：一个偏移量，指向字符串，表示变量的名称
type_idx：一个偏移量，指向字符串，表示变量的类型
uleb128 name_idx
uleb128 type_idx
uleb128 sig_idx
register_num：将包含局部变量的寄存器
name_idx：一个偏移量，指向字符串，表示变量的名称
type_idx：一个偏移量，指向字符串，表示变量的类型
sig_idx：一个偏移量，指向字符串，表示变量的签名
对于值在0x0c和0xff（含）之间的特殊操作码，状态机按照以下步骤将line和address寄存器移动一小部分，然后生成一个新的位置条目（参见DWARF调试信息格式第3版第6.2.5.1项 Special Opcodes）：
注意：
“特殊操作码”是通过此公式计算得到：(line_increment - LINE_BASE) + (address_increment * LINE_RANGE) + OPCODE_BASE。
[h2]IndexSection
通常情况下，字节码文件的各个结构使用32位偏移量来引用，当一个结构引用另一个结构时，需要在当前结构中记录被引用结构的32位偏移量。为了减小文件体积，字节码文件被分割成多个索引区域 (Index region)，每个索引区域内的结构使用16位索引。IndexSection结构描述了索引区域的集合。
对齐方式：4个字节格式：
[h2]IndexHeader
每个IndexHeader结构描述一个索引区域。每个索引区域都有两类索引：指向Type的索引和指向方法、字符串或者字面量数组的索引。
对齐方式：4个字节格式：
[h2]ClassRegionIndex
ClassRegionIndex结构的作用是允许通过更紧凑的索引，找到对应的Type。
对齐方式：4个字节格式：
[h2]Type
表示一个基本类型编码或一个指向Class的偏移量，是一个32位的值。
基本类型采用以下方式编码：
[h2]MethodStringLiteralRegionIndex
MethodStringLiteralRegionIndex结构的作用是允许通过更紧凑的索引，找到对应的方法、字符串或者字面量数组。
对齐方式：4个字节格式：
[h2]LiteralArray
描述字节码文件中的字面量数组。
对齐方式：单字节对齐格式：
[h2]Literal
描述字节码文件中的字面量，根据字面量值的字节数的不同，有四种编码格式。
