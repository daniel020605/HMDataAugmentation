媒体资源变更通知相关指导
photoAccessHelper提供监听媒体资源变更的接口，供开发者对指定媒体资源变更进行监听。
在进行功能开发前，请开发者查阅开发准备，了解如何获取相册管理模块实例和如何申请相册管理模块功能开发相关权限。
文档中使用到photoAccessHelper的地方默认为使用开发准备中获取的对象，如未添加此段代码报photoAccessHelper未定义的错误请自行添加。
媒体资源变更通知相关接口的异步调用仅支持使用callback方式。以下只列出部分接口使用方式，其他使用方式可以查阅API参考。
如无特别说明，文档中涉及的待获取的资源均视为已经预置且在数据库中存在相应数据。如出现按照示例代码执行出现获取资源为空的情况请确认文件是否已预置，数据库中是否存在该文件的数据。
监听指定URI
通过调用registerChange接口监听指定uri。当被监听对象发生变更时返回监听器回调函数的值。
[h2]对指定PhotoAsset注册监听
对指定PhotoAsset注册监听，当被监听的PhotoAsset发生变更时，返回监听回调。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以对一张图片注册监听，通过将这张图片删除触发监听回调为例。
开发步骤
 获取指定媒体资源。 对指定PhotoAsset注册监听。 将指定媒体资源删除。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  predicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, 'test.jpg');\n  let fetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: predicates\n  };\n  try {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = await phAccessHelper.getAssets(fetchOptions);\n    let photoAsset: photoAccessHelper.PhotoAsset = await fetchResult.getFirstObject();\n    console.info('getAssets photoAsset.uri : ' + photoAsset.uri);\n    let onCallback = (changeData: photoAccessHelper.ChangeData) => {\n      console.info('onCallback successfully, changData: ' + JSON.stringify(changeData));\n    }\n    phAccessHelper.registerChange(photoAsset.uri, false, onCallback);\n    await photoAccessHelper.MediaAssetChangeRequest.deleteAssets(context, [photoAsset]);\n    fetchResult.close();\n  } catch (err) {\n    console.error('onCallback failed with err: ' + err);\n  }\n}
[h2]对指定Album注册监听
对指定Album注册监听，当被监听的Album发生变更时，返回监听回调。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以对一个用户相册注册监听，通过重命名相册触发监听回调为例。
开发步骤
 获取用户相册。 对指定Album注册监听。 将指定用户相册重命名。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let albumName: photoAccessHelper.AlbumKeys = photoAccessHelper.AlbumKeys.ALBUM_NAME;\n  predicates.equalTo(albumName, 'albumName');\n  let fetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: predicates\n  };\n\n  try {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.Album> = await phAccessHelper.getAlbums(photoAccessHelper.AlbumType.USER, photoAccessHelper.AlbumSubtype.USER_GENERIC, fetchOptions);\n    let album: photoAccessHelper.Album = await fetchResult.getFirstObject();\n    console.info('getAlbums successfully, albumUri: ' + album.albumUri);\n\n    let onCallback = (changeData: photoAccessHelper.ChangeData) => {\n      console.info('onCallback successfully, changData: ' + JSON.stringify(changeData));\n    }\n    phAccessHelper.registerChange(album.albumUri, false, onCallback);\n    album.albumName = 'newAlbumName' + Date.now();\n    await album.commitModify();\n    fetchResult.close();\n  } catch (err) {\n    console.error('onCallback failed with err: ' + err);\n  }\n}
模糊监听
通过设置forChildUris值为true来注册模糊监听，uri为相册uri时，forChildUris为true能监听到相册中文件的变化，如果是false只能监听相册本身变化。uri为photoAsset时，forChildUris为true、false没有区别，uri为DefaultChangeUri时，forChildUris必须为true，如果为false将找不到该uri，收不到任何消息。
[h2]对所有PhotoAsset注册监听
对所有PhotoAsset注册监听，当有被监听的PhotoAsset发生变更时，返回监听回调。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以对所有PhotoAsset注册监听，通过将被监听的PhotoAsset删除触发监听回调为例。
开发步骤
 对所有PhotoAsset注册监听。 获取指定媒体资源。 将指定媒体资源删除。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let onCallback = (changeData: photoAccessHelper.ChangeData) => {\n    console.info('onCallback successfully, changData: ' + JSON.stringify(changeData));\n  }\n  phAccessHelper.registerChange(photoAccessHelper.DefaultChangeUri.DEFAULT_PHOTO_URI, true, onCallback);\n  let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  let fetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: predicates\n  };\n  try {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = await phAccessHelper.getAssets(fetchOptions);\n    let photoAsset: photoAccessHelper.PhotoAsset = await fetchResult.getFirstObject();\n    console.info('getAssets photoAsset.uri : ' + photoAsset.uri);\n    await photoAccessHelper.MediaAssetChangeRequest.deleteAssets(context, [photoAsset]);\n    fetchResult.close();\n  } catch (err) {\n    console.error('onCallback failed with err: ' + err);\n  }\n}
取消对指定URI的监听
取消对指定uri的监听，通过调用unRegisterChange接口取消对指定uri的监听。一个uri可以注册多个监听，存在多个callback监听时，可以取消指定注册的callback的监听；不指定callback时取消该uri的所有监听。
前提条件
 获取相册管理模块photoAccessHelper实例。 申请相册管理模块权限'ohos.permission.READ_IMAGEVIDEO'和'ohos.permission.WRITE_IMAGEVIDEO'。 
下面以取消对一张图片指定的监听为例，取消监听后，删除图片不再触发对应的监听回调。
开发步骤
 获取指定媒体资源。 取消对指定媒体资源uri的监听。 将指定媒体资源删除。 
import { dataSharePredicates } from '@kit.ArkData';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nconst context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function example() {\n  let predicates: dataSharePredicates.DataSharePredicates = new dataSharePredicates.DataSharePredicates();\n  predicates.equalTo(photoAccessHelper.PhotoKeys.DISPLAY_NAME, 'test.jpg');\n  let fetchOptions: photoAccessHelper.FetchOptions = {\n    fetchColumns: [],\n    predicates: predicates\n  };\n  try {\n    let fetchResult: photoAccessHelper.FetchResult<photoAccessHelper.PhotoAsset> = await phAccessHelper.getAssets(fetchOptions);\n    let photoAsset: photoAccessHelper.PhotoAsset = await fetchResult.getFirstObject();\n    console.info('getAssets photoAsset.uri : ' + photoAsset.uri);\n    let onCallback1 = (changeData: photoAccessHelper.ChangeData) => {\n      console.info('onCallback1, changData: ' + JSON.stringify(changeData));\n    }\n    let onCallback2 = (changeData: photoAccessHelper.ChangeData) => {\n      console.info('onCallback2, changData: ' + JSON.stringify(changeData));\n    }\n    phAccessHelper.registerChange(photoAsset.uri, false, onCallback1);\n    phAccessHelper.registerChange(photoAsset.uri, false, onCallback2);\n    phAccessHelper.unRegisterChange(photoAsset.uri, onCallback1);\n    await photoAccessHelper.MediaAssetChangeRequest.deleteAssets(context, [photoAsset]);\n    fetchResult.close();\n  } catch (err) {\n    console.error('onCallback failed with err: ' + err);\n  }\n}
