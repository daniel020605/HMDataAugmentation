串行通信开发指导
简介
SPP是Serial Port Profile（串口协议）的缩写，是一种蓝牙协议，用于在蓝牙设备之间建立串行通信连接。通过SPP，蓝牙设备可以像使用串口一样进行数据传输，例如传输文件、文本等。
场景介绍
主要场景有：
 服务端向客户端写入数据。 通过socket连接对端设备。 
接口说明
完整的 JS API 说明以及实例代码请参考：SPP 接口。
具体接口说明如下表。
主要场景开发步骤
[h2]服务端向客户端写入数据
 import需要的socket模块。 需要SystemCapability.Communication.Bluetooth.Core系统能力。 开启设备蓝牙。 创建服务端socket，返回serverId。 服务端等待客户端连接，返回clientId。 服务端向客户端写入数据。 （可选）服务端订阅客户端写入的数据。 注销服务端socket。 注销客户端socket。 示例代码： import { socket } from '@kit.ConnectivityKit';\nimport { AsyncCallback, BusinessError } from '@kit.BasicServicesKit';\n\n// 创建服务器监听Socket, 返回serverId\nlet serverNumber = -1;\nlet sppOption: socket.SppOptions = {\n  uuid: '00001101-0000-1000-8000-00805f9b34fb',\n  secure: true,\n  type: 0\n};\nsocket.sppListen('server1', sppOption, (code, serverSocketID) => {\n  if (code != null) {\n    console.error('sppListen error, code is ' + (code as BusinessError).code);\n    return;\n  } else {\n    serverNumber = serverSocketID;\n    console.info('sppListen success, serverNumber = ' + serverNumber);\n  }\n});\n\n// socket等待客户端连接，连接成功返回clientId\nlet clientNumber = -1;\nsocket.sppAccept(serverNumber, (code, clientSocketID) => {\n  if (code != null) {\n    console.error('sppAccept error, code is ' + (code as BusinessError).code);\n    return;\n  } else {\n    clientNumber = clientSocketID;\n    console.info('accept the client success');\n  }\n})\nconsole.info('waiting for client connection');\n\n// 向客户端写入数据\nlet array = new Uint8Array(990);\narray[0] = 'A'.charCodeAt(0);\narray[1] = 'B'.charCodeAt(0);\narray[2] = 'C'.charCodeAt(0);\narray[3] = 'D'.charCodeAt(0);\nsocket.sppWrite(clientNumber, array.buffer);\nconsole.info('sppWrite success');\n\n// 订阅读请求事件\nsocket.on('sppRead', clientNumber, (dataBuffer: ArrayBuffer) => {\n  const data = new Uint8Array(dataBuffer);\n  if (data != null) {\n    console.info('sppRead success, data = ' + JSON.stringify(data));\n  } else {\n    console.error('sppRead error, data is null');\n  }\n});\n\n// 取消订阅读请求事件\nsocket.off('sppRead', clientNumber, (dataBuffer: ArrayBuffer) => {\n  const data = new Uint8Array(dataBuffer);\n  if (data != null) {\n    console.info('offSppRead success, data = ' + JSON.stringify(data));\n  } else {\n    console.error('offSppRead error, data is null');\n  }\n});\n\n// 注销服务端socket\nsocket.sppCloseServerSocket(serverNumber);\nconsole.info('sppCloseServerSocket success');\n\n// 注销客户端socket\nsocket.sppCloseClientSocket(clientNumber);\nconsole.info('sppCloseClientSocket success'); 错误码请参见蓝牙服务子系统错误码。 
[h2]通过socket连接对端设备
 import需要的socket模块。 需要SystemCapability.Communication.Bluetooth.Core系统能力。 开启设备蓝牙。 开启ble扫描，获取对端设备mac地址。 连接对端设备。 示例代码： import { socket } from '@kit.ConnectivityKit';\nimport { AsyncCallback, BusinessError } from '@kit.BasicServicesKit';\n\n// 开启ble扫描，获取对端设备mac地址\nlet deviceId = 'xx:xx:xx:xx:xx:xx';\n\n// 连接对端设备\nsocket.sppConnect(deviceId, {\n  uuid: '00001101-0000-1000-8000-00805f9b34fb',\n  secure: true,\n  type: 0\n}, (code, socketID) => {\n  if (code != null) {\n    console.error('sppConnect error, code = ' + (code as BusinessError).code);\n    return;\n  }\n  console.info('sppConnect success, socketId = ' + socketID);\n}) 错误码请参见蓝牙服务子系统错误码。 
