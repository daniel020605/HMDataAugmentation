自定义布局下的适配建议
登录
应用在设置“登录”页面时，需要“用户名/账号名”、“密码”在同一个界面，具体可参照账号密码保存-登录、账号密码填充-登录中的介绍。
注册
应用在设置“注册”页面时，需要“用户名/账号名”、“新密码”在同一个界面，具体可参照账号密码保存-注册、强密码填充-注册中的介绍。
修改密码
应用在设置“修改密码”页面时，需要“用户名/账号名”、“旧密码”、“新密码”在同一个界面，具体可参照账号密码更新-修改账号密码、账号密码填充-修改密码中的介绍。
登录、注册失败
当应用成功登录、成功注册后将账号密码保存至密码保险箱。但当应用没有成功登录或是没有成功注册时，通过页面路由（router）跳转返回，建议应用将enableAutofill属性为false，避免保存错误信息。
示例代码如下：
import router from '@ohos.router';\n\n@Entry\n@Component\nstruct LoginPage {\n  @State ReserveAccount: string = '';\n  @State ReservePassword: string = '';\n  // 保存填充功能初始值：true\n  @State enAbleAutoFill: boolean = true;\n  private length: number = 0;\n  onBackPress() {\n    // 当非成功登录、返回等页面跳转时将enAbleAutoFill设置为false，密码保险箱不使能\n    this.enAbleAutoFill = false;\n    router.back();\n    return true;\n  }\n  build() {\n    Column() {\n      Text(\"账户登录\")\n        .fontSize(24)\n        .fontColor('#000000')\n        .fontWeight(FontWeight.Medium)\n        .textAlign(TextAlign.Start)\n        .width('100%')\n        .margin({ top: 18 })\n      TextInput({ placeholder: '账号' })\n        // 账号框使用USER_NAME属性\n        .type(InputType.USER_NAME)\n          // 保存填充功能属性\n        .enableAutoFill(this.enAbleAutoFill)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .opacity(0.6)\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .margin({ top: 32, bottom: 8 })\n        .onChange((value: string) => {\n          this.ReserveAccount = value;\n          this.length = value.length;\n        })\n        .caretPosition(this.length)\n      TextInput({ placeholder: '密码' })\n        // 密码框使用Password属性\n        .type(InputType.Password)\n          // 保存填充功能属性\n        .enableAutoFill(this.enAbleAutoFill)\n        .placeholderColor(0x182431)\n        .width('100%')\n        .opacity(0.6)\n        .showPasswordIcon(true)\n        .placeholderFont({ size: 16, weight: FontWeight.Regular })\n        .onChange((value: string) => {\n          this.ReservePassword = value;\n        })\n        .margin({ bottom: 36 })\n      Button('登录', { type: ButtonType.Capsule, stateEffect: false })\n        .borderRadius(20)\n        .width('100%')\n        .height(40)\n        .enabled((this.ReserveAccount !== '') && (this.ReservePassword !== ''))\n        .onClick(() => {\n          // 成功登录时页面跳转将enAbleAutoFill设置为true，密码保险箱使能\n          this.enAbleAutoFill = true;\n          router.pushUrl({\n            url: 'pages/Index', //此处pages/Index为跳转界面地址，请自行修改\n            params: {\n              src: '账号登录'\n            }\n          }, (err) => {\n            if (err) {\n              console.error(`Invoke pushUrl failed, code is ${err.code}, message is ${err.message}`);\n              return;\n            }\n            console.info('Invoke pushUrl succeeded.');\n          })\n        })\n    }\n    .padding({ left: 24, right: 24 })\n    .height('100%')\n    .width('100%')\n  }\n}
将导致功能受限的布局
除了上述介绍中的典型场景外，以下界面布局使用密码保险箱功能受限：
实现场景
布局情况
账号密码填充
强密码填充
自动保存
登录
用户名、密码不在同一界面
不支持
不支持
不支持
验证码登录
不支持
不支持
不支持
注册
用户名、密码不在同一界面
不支持
不支持
不支持
修改密码
界面只有用户名、新密码
不支持
支持
支持
界面只有旧密码、新密码
不支持
不支持
不支持
界面只有新密码
不支持
不支持
不支持
