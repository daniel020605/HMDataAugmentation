使用Node-API接口进行生命周期相关开发
简介
在Node-API中，napi_value是一个表示ArkTS值的抽象类型，它可以表示任何ArkTS值，包括基本类型（如数字、字符串、布尔值）和复杂对象类型（如数组、函数、对象等）。
napi_value的生命周期与其在ArkTS中的对应值的生命周期紧密相关。当ArkTS值被垃圾回收时，与之关联的napi_value也将不再有效。重要的是不要在ArkTS值不再存在时尝试使用napi_value。
框架层的scope通常用于管理napi_value的生命周期。在Node-API中，可以使用napi_open_handle_scope和napi_close_handle_scope函数来创建和销毁scope。通过在scope内创建napi_value，可以确保在scope结束时自动释放napi_value，避免内存泄漏。
napi_ref是一个Node-API类型，用于管理napi_value的生命周期。napi_ref允许您在napi_value的生命周期内保持对其的引用，即使它已经超出了其原始上下文的范围。这使得您可以在不同的上下文中共享napi_value，并确保在不再需要时正确释放其内存。
基本概念
Node-API提供了一组功能，使开发人员能够在Node-API模块中创建和操作ArkTS对象，管理引用和生命周期，并注册垃圾回收回调函数等。下面是一些基本概念：
作用域：用于创建一个范围，在范围内声明的引用在范围外部将不再生效。Node-API提供了创建、关闭普通和可逃逸的作用域的函数。引用管理：Node-API提供函数来创建、删除和管理对象的引用，以延长对象的生命周期，避免出现对象use-after-free的问题。同时也通过引用管理去避免发生内存泄漏的问题。可逃逸的作用域：允许在创建的作用域中声明的对象返回到父作用域，通过napi_open_escapable_handle_scope和napi_close_escapable_handle_scope进行管理。垃圾回收回调：允许注册回调函数，以便在ArkTS对象被垃圾回收时执行特定的清理操作。
这些基本概念使开发人员能够在Node-API模块中安全且有效地操作ArkTS对象，并确保正确管理对象的生命周期。
场景和功能介绍
以下Node-API接口主要用于ArkTS对象的引用管理，并确保在Node-API模块代码中正确地处理ArkTS对象的生命周期。使用场景如下：
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]napi_open_handle_scope、napi_close_handle_scope
通过接口napi_open_handle_scope创建一个上下文环境使用。需要使用napi_close_handle_scope进行关闭。用于管理ArkTS对象的生命周期确保在Node-API模块代码处理ArkTS对象时能够正确地管理其句柄，以避免出现对象错误回收的问题。
需要注意的是合理使用napi_open_handle_scope和napi_close_handle_scope管理napi_value的生命周期，做到生命周期最小化，避免发生内存泄漏问题。
代码部分也可参考下面链接：
生命周期管理
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value HandleScopeTest(napi_env env, napi_callback_info info)\n{\n    // 通过调用napi_open_handle_scope来创建一个句柄作用域\n    napi_handle_scope scope;\n    napi_open_handle_scope(env, &scope);\n    // 在句柄作用域内创建一个obj\n    napi_value obj = nullptr;\n    napi_create_object(env, &obj);\n    // 在对象中添加属性\n    napi_value value = nullptr;\n    napi_create_string_utf8(env, \"handleScope\", NAPI_AUTO_LENGTH, &value);\n    napi_set_named_property(env, obj, \"key\", value);\n    // 在作用域内获取obj的属性并返回\n    napi_value result = nullptr;\n    napi_get_named_property(env, obj, \"key\", &result);\n    // 关闭句柄作用域，自动释放在该作用域内创建的对象句柄\n    napi_close_handle_scope(env, scope);\n    // 此处的result能够得到值“handleScope”\n    return result;\n}\n\nstatic napi_value HandleScope(napi_env env, napi_callback_info info)\n{\n    // 通过调用napi_open_handle_scope来创建一个句柄作用域\n    napi_handle_scope scope;\n    napi_open_handle_scope(env, &scope);\n    // 在句柄作用域内创建一个obj\n    napi_value obj = nullptr;\n    napi_create_object(env, &obj);\n    // 在对象中添加属性\n    napi_value value = nullptr;\n    napi_create_string_utf8(env, \"handleScope\", NAPI_AUTO_LENGTH, &value);\n    napi_set_named_property(env, obj, \"key\", value);\n    // 关闭句柄作用域，自动释放在该作用域内创建的对象句柄\n    napi_close_handle_scope(env, scope);\n    // 在作用域外获取obj的属性并返回，此处只能得到“undefined”\n    napi_value result = nullptr;\n    napi_get_named_property(env, obj, \"key\", &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const handleScopeTest: () => string;\nexport const handleScope: () => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API handleScopeTest: %{public}s', testNapi.handleScopeTest());\n  hilog.info(0x0000, 'testTag', 'Test Node-API handleScope: %{public}s', testNapi.handleScope());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API handleScopeTest errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}
[h2]napi_open_escapable_handle_scope、napi_close_escapable_handle_scope、napi_escape_handle
通过接口napi_open_escapable_handle_scope创建出一个可逃逸的handel scope，可将范围内声明的值返回到父作用域。需要使用napi_close_escapable_handle_scope进行关闭。napi_escape_handle用于提升传入的ArkTS对象的生命周期到其父作用域。
通过上述接口可以更灵活的使用管理传入的ArkTS对象，特别是在处理跨作用域的值传递时非常有用。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value EscapableHandleScopeTest(napi_env env, napi_callback_info info)\n{\n    // 创建一个可逃逸的句柄作用域\n    napi_escapable_handle_scope scope;\n    napi_open_escapable_handle_scope(env, &scope);\n    // 在可逃逸的句柄作用域内创建一个obj\n    napi_value obj = nullptr;\n    napi_create_object(env, &obj);\n    // 在对象中添加属性\n    napi_value value = nullptr;\n    napi_create_string_utf8(env, \"Test napi_escapable_handle_scope\", NAPI_AUTO_LENGTH, &value);\n    napi_set_named_property(env, obj, \"key\", value);\n    // 调用napi_escape_handle将对象逃逸到作用域之外\n    napi_value escapedObj = nullptr;\n    napi_escape_handle(env, scope, obj, &escapedObj);\n    // 关闭可逃逸的句柄作用域，清理资源\n    napi_close_escapable_handle_scope(env, scope);\n    // 在获取逃逸后的obj：escapedObj的属性并返回，此处也能够得到“napi_escapable_handle_scope”\n    napi_value result = nullptr;\n    // 为了验证逃逸的实现，可以在此处获取obj的属性，此处会得到“undefined”\n    napi_get_named_property(env, escapedObj, \"key\", &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const escapableHandleScopeTest: () => string;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API EscapableHandleScopeTest: %{public}s', testNapi.escapableHandleScopeTest());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API EscapableHandleScopeTest errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}
[h2]napi_create_reference、napi_delete_reference
为Object创建一个reference，以延长其生命周期。调用者需要自己管理reference生命周期。可以调用napi_delete_reference删除传入的reference。
[h2]napi_reference_ref、napi_reference_unref
增加/减少传入的reference的引用计数，并获取新的计数。
[h2]napi_get_reference_value
获取与reference相关联的ArkTS Object。
由于弱引用（引用计数为0的napi_ref）的释放与gc回收js对象并非同时发生。
因此可能在弱引用被释放前，js对象已经被回收。
这意味着你可能在napi_ref有效的情况下，通过本接口获取到一个空指针。
[h2]napi_add_finalizer
当ArkTS Object中的对象被垃圾回收时调用注册的napi_add_finalizer回调。
cpp部分代码
// log.h用于C++中日志打印\n#include \"hilog/log.h\"\n#include \"napi/native_api.h\"\n// 创建一个指向napi_ref类型的指针，用于存储创建的引用。在调用napi_create_reference函数之前，你需要分配一个napi_ref类型的变量，并将其地址传递给result位置的参数\nnapi_ref g_ref;\n\nvoid Finalizer(napi_env env, void *data, void *hint)\n{\n    // 执行资源清理操作\n    OH_LOG_INFO(LOG_APP, \"Node-API: Use terminators to release resources.\");\n}\n\nstatic napi_value CreateReference(napi_env env, napi_callback_info info)\n{\n    napi_value obj = nullptr;\n    napi_create_object(env, &obj);\n    napi_value value = nullptr;\n    napi_create_string_utf8(env, \"CreateReference\", NAPI_AUTO_LENGTH, &value);\n    // 将键值对添加到对象中\n    napi_set_named_property(env, obj, \"key\", value);\n    // 创建对ArkTS对象的引用\n    napi_status status = napi_create_reference(env, obj, 1, &g_ref);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_create_reference fail\");\n        return nullptr;\n    }\n    // 添加终结器\n    void *data = {};\n    napi_add_finalizer(env, obj, data, Finalizer, nullptr, &g_ref);\n    // 增加传入引用的引用计数并返回生成的引用计数\n    uint32_t result = 0;\n    napi_reference_ref(env, g_ref, &result);\n    OH_LOG_INFO(LOG_APP, \"napi_reference_ref, count = %{public}d.\", result);\n    if (result != 2) {\n        // 若传入引用的引用计数未增加，则抛出错误\n        napi_throw_error(env, nullptr, \"napi_reference_ref fail\");\n        return nullptr;\n    }\n    return obj;\n}\n\nstatic napi_value UseReference(napi_env env, napi_callback_info info)\n{\n    napi_value obj = nullptr;\n    // 通过调用napi_get_reference_value获取引用的ArkTS对象\n    napi_status status = napi_get_reference_value(env, g_ref, &obj);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_get_reference_value fail\");\n        return nullptr;\n    }\n    // 将获取到的对象返回\n    return obj;\n}\n\nstatic napi_value DeleteReference(napi_env env, napi_callback_info info)\n{\n    // 减少传入引用的引用计数并返回生成的引用计数\n    uint32_t result = 0;\n    napi_value count = nullptr;\n    napi_reference_unref(env, g_ref, &result);\n    OH_LOG_INFO(LOG_APP, \"napi_reference_ref, count = %{public}d.\", result);\n    if (result != 1) {\n        // 若传入引用的引用计数未减少，则抛出错误\n        napi_throw_error(env, nullptr, \"napi_reference_unref fail\");\n        return nullptr;\n    }\n    // 通过调用napi_delete_reference删除对ArkTS对象的引用\n    napi_status status = napi_delete_reference(env, g_ref);\n    if (status != napi_ok) {\n        napi_throw_error(env, nullptr, \"napi_delete_reference fail\");\n        return nullptr;\n    }\n    napi_value returnResult = nullptr;\n    napi_create_string_utf8(env, \"napi_delete_reference success\", NAPI_AUTO_LENGTH, &returnResult);\n    return returnResult;\n}
接口声明
// index.d.ts\nexport const createReference: () => Object | void;\nexport const useReference: () => Object | void;\nexport const deleteReference: () => string | void;
ArkTS侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\ntry {\n  hilog.info(0x0000, 'testTag', 'Test Node-API createReference: %{public}s', JSON.stringify(testNapi.createReference()));\n  hilog.info(0x0000, 'testTag', 'Test Node-API useReference: %{public}s', JSON.stringify(testNapi.useReference()));\n  hilog.info(0x0000, 'testTag', 'Test Node-API deleteReference: %{public}s', testNapi.deleteReference());\n} catch (error) {\n  hilog.error(0x0000, 'testTag', 'Test Node-API ReferenceTest errorCode: %{public}s, errorMessage: %{public}s', error.code, error.message);\n}
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
