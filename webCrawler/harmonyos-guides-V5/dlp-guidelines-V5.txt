数据防泄漏服务开发指导
DLP是系统提供的系统级的数据防泄漏解决方案，提供一种称为DLP的文件格式。后缀格式为“原始文件名（包含原始文件后缀）.dlp”，例如“test.docx.dlp”，文件由授权凭证和原始文件密文组成。
通过端云协同认证（需要联网）来获取文件的访问授权，授权类型包含只读、编辑、文件拥有者三种。
只读：能读取文件内容但不能修改。编辑：能够读写文件内容，但不能修改文件权限配置。文件拥有者：可读写文件、修改权限配置、恢复原始原始文件等。
应用需要访问DLP文件时，系统会自动安装应用的DLP沙箱分身应用，相当于完全独立的应用，数据和配置会继承原应用，但相互之间并不共享。分身应用在运行时会处于DLP沙箱环境中，访问外部的权限会被限制，以防止数据的泄漏。每当打开一个新的DLP文件会生成一个应用沙箱分身，沙箱应用之间也是相互隔离的，当应用关闭后应用分身会自动卸载，沙箱期间产生的临时数据也会丢弃。
正常情况下，应用不会感知到沙箱的存在，访问的也是解密后的明文，和访问普通文件没有区别，但由于DLP沙箱会限制其访问外部的权限（例如网络、剪切板、截屏、录屏、蓝牙等）。为了更好的用户体验，需要应用进行适配，例如文件只读的情况下，不应显示“保存”按钮，不应主动联网等。
沙箱限制
当应用进入DLP沙箱状态时，可以申请的权限将受到限制，根据DLP文件授权类型不同，限制也不相同，如下表：
权限名
说明
授权类型：只读
授权类型：编辑/文件拥有者
ohos.permission.USE_BLUETOOTH
允许应用使用蓝牙。
禁止
禁止
ohos.permission.INTERNET
允许应用访问网络。
禁止
禁止
ohos.permission.DISTRIBUTED_DATASYNC
允许应用与远程设备交换用户数据（如图片、音乐、视频、及应用数据等）。
禁止
禁止
ohos.permission.WRITE_MEDIA
应用读写用户媒体文件，如视频、音频、图片等，需要申请此权限。
禁止
允许
ohos.permission.NFC_TAG
允许应用使用NFC。
禁止
允许
接口说明
接口名
描述
isDLPFile(fd: number): Promise<boolean>
isDLPFile(fd: number, callback: AsyncCallback<boolean>): void
判断是否是dlp文件。
getDLPPermissionInfo(): Promise<DLPPermissionInfo>
getDLPPermissionInfo(callback: AsyncCallback<DLPPermissionInfo>): void
获取当前沙箱应用的权限类型。
getOriginalFileName(fileName: string): string
获取dlp文件原始文件名。
getDLPSuffix(): string
获取dlp文件dlp后缀名。
on(type: 'openDLPFile', listener: Callback<AccessedDLPFileInfo>): void
注册dlp文件打开事件监听，用于原始应用获取dlp文件打开事件。
off(type: 'openDLPFile', listener?: Callback<AccessedDLPFileInfo>): void
取消dlp文件打开事件监听。
isInSandbox(): Promise<boolean>
isInSandbox(callback: AsyncCallback<boolean>): void
判断当前是否是dlp沙箱应用。
getDLPSupportedFileTypes(): Promise<Array<string>>
getDLPSupportedFileTypes(callback: AsyncCallback<Array<string>>): void
获取当前系统支持添加权限保护的文件格式类型。
setRetentionState(docUris: Array<string>): Promise<void>
setRetentionState(docUris: Array<string>, callback: AsyncCallback<void>): void
设置dlp分身应用保留状态。
cancelRetentionState(docUris: Array<string>): Promise<void>
cancelRetentionState(docUris: Array<string>, callback: AsyncCallback<void>): void
取消dlp分享应用保留状态。
getRetentionSandboxList(bundleName?: string): Promise<Array<RetentionSandboxInfo>>
getRetentionSandboxList(bundleName: string, callback: AsyncCallback<Array<RetentionSandboxInfo>>): void
getRetentionSandboxList(callback: AsyncCallback<Array<RetentionSandboxInfo>>): void
获取当前保留沙箱列表。
getDLPFileAccessRecords(): Promise<Array<AccessedDLPFileInfo>>
getDLPFileAccessRecords(callback: AsyncCallback<Array<AccessedDLPFileInfo>>): void
获取dlp文件访问记录。
setSandboxAppConfig(configInfo: string): Promise<void>
设置沙箱应用配置信息。
getSandboxAppConfig(): Promise<string>
查询沙箱应用配置信息。
cleanSandboxAppConfig(): Promise<void>
清理沙箱应用配置信息。
startDLPManagerForResult(context: common.UIAbilityContext, want: Want): Promise<DLPManagerResult>
在当前UIAbility界面以无边框形式打开DLP权限管理应用（只支持Stage模型）。
开发步骤
DLP作为HarmonyOS系统级数据防泄漏方案，可以让应用在零适配或低代码适配的情况下接入DLP能力，打开DLP文件。
当用户使用默认应用或指定应用打开DLP文件时，DLP框架将会完成：
安装此应用的DLP沙箱分身应用。为这个DLP文件绑定一个FUSE文件。将FUSE文件分享给DLP沙箱分身应用。
实现DLP沙箱分身在无感加解密流程下访问DLP文件解密后的内容。
当三方应用接入DLP（支持打开DLP文件）时，为了更优的体验，可从以下方面完成适配。
[h2]预置操作
应用接入DLP能力，支持被安装为DLP沙箱分身应用，打开DLP文件，需要具备以下条件：
应用需要支持打开以下文件类型中的其中一种或几种，也就是当前DLP支持的文件类型。包括：  \".doc\", \".docm\", \".docx\", \".dot\", \".dotm\", \".dotx\", \".odp\", \".odt\", \".pdf\", \".pot\", \".potm\", \".potx\", \".ppa\",\n  \".ppam\", \".pps\", \".ppsm\", \".ppsx\", \".ppt\", \".pptm\", \".pptx\", \".rtf\", \".txt\", \".wps\", \".xla\", \".xlam\", \".xls\",\n  \".xlsb\", \".xlsm\", \".xlsx\", \".xlt\", \".xltm\", \".xltx\", \".xlw\", \".xml\", \".xps\" 
应用需要具备ohos.want.action.viewData或ohos.want.action.editData的skills，可在module.json5文件中增加相应配置：  \"skills\":[\n    {\n      \"entities\":[\n        ...\n      ],\n      \"actions\":[\n        ...\n        \"ohos.want.action.viewData\"\n      ]\n    }\n  ] 
使用的设备需要具备域账号环境。 
[h2]导入模块
引入dlpPermission模块。
import { dlpPermission } from '@kit.DataProtectionKit';
[h2]应用支持打开DLP文件绑定的FUSE文件
一般情况下，应用如果支持打开预置操作中指定文件类型的文件，没有对传入的Want做特定限制的情况下，不需要适配即可打开FUSE文件。
打开DLP文件时，应用被安装为DLP沙箱分身应用（后续简称为分身），分身会收到want请求，分身可以对其中一些字段进行解析：
 import Want from '@ohos.app.ability.Want';\n\n interface DLPUriObj {\n   name: string\n };\n\n interface DLPWriteable {\n   name:boolean\n };\n\n interface DLPNameObj {\n   dateModified: string,\n   displayName: string,\n   relativePath: string,\n };\n\n interface DLPLinkNameObj {\n   name: string\n };\n\n function getParams(want: Want) {\n   // 接收打开DLP文件传过来的参数\n   let dlpFuseUri: string = want.uri? want.uri : '';  // FUSE文件的uri, 存放解密后的明文\n   let dlpFuseWriteable: boolean = (want.parameters?.linkFileWriteable as DLPWriteable).name; // 对FUSE文件是否有写权限\n   let dlpUri: string = (want.parameters?.dlpUri as DLPUriObj).name; // DLP文件的uri\n   let dlpName: string = (want.parameters?.fileAsset as DLPNameObj).displayName; // DLP文件的文件名\n   let dlpFuseName: string = (want.parameters?.linkFileName as DLPLinkNameObj).name; // FUSE文件的文件名\n }
分身可以通过把want.uri打开为fd，获取FUSE文件的内容：
 import fileIo from '@ohos.fileio';\n import fs from '@ohos.file.fs';\n import util from '@ohos.util';\n\n function readFileContent(dlpFuseUri:string): string {\n   let content: string = '';\n   let file: fs.File;\n   try {\n     file = fs.openSync(dlpFuseUri, fs.OpenMode.READ_ONLY); // 打开FUSE文件获取fd\n     this.commonFd = file.fd;\n   } catch (err) {\n     console.error('openSync failed. ' + err);\n     return content;\n   }\n\n   try {\n     let buffer = new ArrayBuffer(4096);\n     let readOut = fs.readSync(this.commonFd, buffer, { // 读取文件内容\n       offset: 0\n     });\n     content = bufferToString(buffer); // 文件内容转换成string类型\n   } catch (err) {\n     console.error('readSync failed. ' + err);\n   }\n   fileIo.closeSync(this.commonFd); // 关闭文件\n   return content;\n }\n\n function bufferToString(buffer: ArrayBuffer): string {\n   let textDecoder = new util.TextDecoder('utf-8', {\n     ignoreBOM: true\n   });\n   let resultPut = textDecoder.decodeWithStream(new Uint8Array(buffer), {\n     stream: true\n   });\n   return resultPut;\n }
如果有FUSE文件的读写权限，也可以更新FUSE文件内容：
import fs from '@ohos.file.fs';\n\nfunction writeFileContent(dlpFuseUri: string, content: string): void {\n  let file: fs.File = fs.openSync(dlpFuseUri, fs.OpenMode.READ_WRITE); // 以读写权限打开FUSE文件获取fd\n  let writeLen: number = fs.writeSync(file.fd, content);  // 把内容写回FUSE文件中\n  fs.closeSync(file); // 关闭文件\n}
[h2]应用根据DLP文件的权限对界面进行适配
DLP沙箱分身中可以调用getDLPPermissionInfo方法查询当前系统登陆的域账号用户对本DLP文件的用户权限和操作权限，不同用户权限可以对应不同的对文档的操作权限。
 import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n dlpPermission.getDLPPermissionInfo().then((data: dlpPermission.DLPPermissionInfo)=> {\n   let userAccess: dlpPermission.DLPPermissionInfo.DLPFileAccess = data.dlpFileAccess; // 用户对本DLP文件的用户权限\n   let isEditable: number = data.flags & dlpPermission.DLPPermissionInfo.ACTION_EDIT; // 用户对本DLP文件的操作权限\n }).catch((err: BusinessError) => {\n   console.error('getDLPPermissionInfo: ' + JSON.stringify(err));\n });
getDLPPermissionInfo返回的data为DLPPermissionInfo类型，其中dlpFileAccess表示用户权限，flags表示操作权限的按位组合的结果。可以根据返回的flags字段对照ActionFlagType判断DLP沙箱分身是否具有对应的操作权限，可以用于界面按钮置灰操作等。
[h2]应用与DLP沙箱分身数据共享
DLP沙箱分身是普通应用的分身，所有数据都是全新的，如果二者之间有些数据需要实现共享，可以通过DLP框架提供的应用与DLP沙箱分身数据共享机制实现。一种典型的使用场景是原应用与DLP沙箱分身之间共用是否已经弹出过隐私声明弹框的配置信息。
一般包括下面四种读写配置信息前后顺序组合：
原应用写配置，原应用读配置。原应用写配置，DLP沙箱分身读配置。DLP沙箱分身写配置，DLP沙箱分身读配置。DLP沙箱分身写配置，原应用读配置。
约束与限制
每次调用设置配置信息接口会覆盖上次调用的设置内容。出于数据防泄漏考虑，DLP沙箱分身写配置需要在读取FUSE文件内容之前完成。
具体步骤
设置配置信息。把需要保存的配置信息转成string类型，调用setSandboxAppConfig接口设置配置信息。 普通应用和DLP沙箱分身都可以调用该接口，但DLP沙箱分身必须在读取DLP文件内容之前才允许调用。  import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n async function setSandboxAppConfig() {\n   try {\n     await dlpPermission.setSandboxAppConfig('configInfo'); // 设置配置信息\n   } catch (err) {\n     console.error('setSandboxAppConfig error, ', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n   }\n } 清理配置信息。调用cleanSandboxAppConfig接口清理该应用的所有配置信息。 该接口只允许普通应用中调用。  import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n async function cleanSandboxAppConfig() {\n   try {\n     await dlpPermission.cleanSandboxAppConfig(); // 清理配置信息\n   } catch (err) {\n     console.error('cleanSandboxAppConfig error, ', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n   }\n } 获取配置信息。调用getSandboxAppConfig查询该应用的所有配置信息。 普通应用和DLP沙箱分身都可以调用。  import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n async function getSandboxAppConfig() {\n   try {\n     let res:string = await dlpPermission.getSandboxAppConfig(); // 查询配置信息\n   } catch (err) {\n     console.error('getSandboxAppConfig error, ', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n   }\n } 
[h2]应用支持更新最近打开记录
当应用有最近打开记录场景时，可以使用DLP框架提供的接口适配最近打开记录。可从以下场景适配：
普通应用未启动，无法感知到DLP沙箱分身打开的DLP文件。仅有DLP沙箱分身有打开DLP文件场景：普通应用启动时，可以通过接口获取到历史通过本应用的DLP沙箱分身打开的DLP文件。     import { dlpPermission } from '@kit.DataProtectionKit';\n    import { BusinessError } from '@kit.BasicServicesKit';\n\n    async function getDLPFileAccessRecords() {\n      try {\n        let res:Array<dlpPermission.AccessedDLPFileInfo> = await dlpPermission.getDLPFileAccessRecords(); // 获取DLP访问列表\n        console.info('res', JSON.stringify(res))\n      } catch (err) {\n        console.error('error', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n      }\n    } 普通应用已启动，可以感知到DLP沙箱分身打开的DLP文件。DLP沙箱分身有打开DLP文件场景：普通应用可以订阅本应用的DLP沙箱分身打开DLP文件的事件。  import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';\n import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n export default class TestAbility extends UIAbility {\n   onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n     this.subscribe();\n   }\n\n   onDestroy(): void {\n     this.unSubscribe();\n   }\n\n   event(info: dlpPermission.AccessedDLPFileInfo) {\n     console.info('openDlpFile event', info.uri, info.lastOpenTime)\n   }\n\n   unSubscribe() {\n     try {\n       dlpPermission.off('openDLPFile', this.event); // 取消订阅\n     } catch (err) {\n       console.error('error', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n     }\n   }\n\n   subscribe() {\n     try {\n       dlpPermission.on('openDLPFile', this.event); // 订阅\n     } catch (err) {\n       console.error('error', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n     }\n   }\n } 
[h2]应用内支持打开选定的DLP文件
应用可以支持从最近打开列表、文件选择器中选择DLP文件，打开DLP文件的场景，按如下流程适配：
设置Want参数，指定action为\"ohos.want.action.viewData\"，bundleName、abilityName分别为选择打开DLP文件的应用的bundleName、abilityName，uri为需要打开的DLP文件的uri，在parameters中设置fileName的name值为DLP文件的文件名。 获取UIAbilityContext的context。 调用context的startAbility方法传入want参数，打开dlp文件。 
 import { Want } from '@kit.AbilityKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n import common from '@ohos.app.ability.common';\n\n function openDlpFile(dlpUri: string, fileName: string) {\n   let want: Want = {\n     \"action\": \"ohos.want.action.viewData\",\n     \"bundleName\": \"com.example.example_bundle_name\",\n     \"abilityName\": \"exampleAbility\",\n     \"uri\": dlpUri,\n     \"parameters\": {\n       \"fileName\": {\n         \"name\": fileName\n       }\n     }\n   }\n   let context = getContext() as common.UIAbilityContext; // 获取当前UIAbilityContext\n   try {\n     console.log('openDLPFile:' + JSON.stringify(want));\n     console.log('openDLPFile: delegator:' + JSON.stringify(context));\n     context.startAbility(want);\n   } catch (err) {\n     console.error('openDLPFile startAbility failed', (err as BusinessError).code, (err as BusinessError).message);\n     return;\n   }\n }
[h2]应用内支持对DLP文件权限设置
应用内可以集成权限设置按钮，当已打开一个普通文件后，点击权限设置按钮，拉起DLP管理应用的模态设置权限页面，生成DLP文件。也可以在DLP沙箱分身中查看当前正在打开的DLP文件的操作权限。
普通应用内权限设置以无边框形式打开DLP权限管理应用。 此方法只能在UIAbility上下文中调用，只支持Stage模式。 want参数中uri的值为普通文件uri，parameters.displayName为文件名，这两个值为必传参数。 调用dlpPermission.startDLPManagerForResult拉起DLP管理应用的设置权限页面，输入相关的域账号信息，点击保存，在拉起的filepicker中选择DLP文件的保存路径，保存DLP文件。  调用以下代码：  import { common, Want } from '@kit.AbilityKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n import { dlpPermission } from '@kit.DataLossPreventionKit';\n\n try {\n   let fileUri: string = \"file://docs/storage/Users/currentUser/test.txt\";\n   let fileName: string = \"test.txt\";\n   let context = getContext() as common.UIAbilityContext; // 获取当前UIAbilityContext\n   let want: Want = {\n     'uri': fileUri,\n     'parameters': {\n       'displayName': fileName\n     }\n   }; // 请求参数\n   dlpPermission.startDLPManagerForResult(context, want).then((res: dlpPermission.DLPManagerResult) => {\n     console.info('startDLPManagerForResult res.resultCode:' + res.resultCode);\n     console.info('startDLPManagerForResult res.want:' + JSON.stringify(res.want));\n   }); // 拉起DLP权限管理应用 设置权限\n } catch (err) {\n   console.error('startDLPManagerForResult error:' + (err as BusinessError).code + (err as BusinessError).message);\n } DLP沙箱分身内权限修改，查看和解除如果当前的账号是DLP文档的创建者，则该用户拥有修改这个DLP文件权限或者解除这个DLP文档权限还原为普通文件的能力，调用以下代码，拉起DLP管理应用的设置权限页面，在该页面中选择更改加密进行权限修改或者解除加密；如果当前账号拥有DLP文档只读或者编辑权限，调用以下代码则可以查看当前用户权限内容。 import { common, Want } from '@kit.AbilityKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n import { dlpPermission } from '@kit.DataLossPreventionKit';\n\n try {\n   let fileUri: string = \"file://docs/storage/Users/currentUser/test.txt.dlp\";// DLP文件的uri\n   let fileName: string = \"test.txt.dlp\";\n   let context = getContext() as common.UIAbilityContext; // 获取当前UIAbilityContext\n   let want: Want = {\n     'uri': fileUri,\n     'parameters': {\n       'displayName': fileName\n     }\n   }; // 请求参数\n   dlpPermission.startDLPManagerForResult(context, want).then((res: dlpPermission.DLPManagerResult) => {\n     console.info('startDLPManagerForResult res.resultCode:' + res.resultCode);\n     console.info('startDLPManagerForResult res.want:' + JSON.stringify(res.want));\n   }); // 拉起DLP权限管理应用 设置权限\n } catch (err) {\n   console.error('startDLPManagerForResult error:' + (err as BusinessError).code + (err as BusinessError).message);\n }  DLP沙箱分身中可以调用getDLPPermissionInfo方法查询当前用户DLP文件权限，DLP沙箱分身的权限限制，参考沙箱限制。 import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n dlpPermission.getDLPPermissionInfo().then((data:dlpPermission.DLPPermissionInfo)=> {\n   console.log('getDLPPermissionInfo, result: ' + JSON.stringify(data));\n }).catch((err: BusinessError) => {\n   console.error('getDLPPermissionInfo: ' + JSON.stringify(err));\n });  
[h2]其他DLP能力增强
判断一个文件是否是DLP文件传入文件的fd查询对应文件是否是DLP文件，是DLP文件则按文档指导打开该文件。  import { dlpPermission } from '@kit.DataProtectionKit';\n import { fileIo } from '@kit.CoreFileKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n let uri = \"file://docs/storage/Users/currentUser/Desktop/test.txt.dlp\";\n let file = fileIo.openSync(uri);\n try {\n   let res: boolean = dlpPermission.isDLPFile(file.fd); // 是否加密DLP文件\n   console.info('res', res);\n } catch (err) {\n   console.error('error', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n }\n fileIo.closeSync(file); 判断当前所在应用是否是DLP沙箱分身在应用中调用isInSandbox接口判断当前是否是DLP沙箱分身，如果是DLP沙箱分身则可以结合调用接口查询权限的结果进行对应功能按钮的置灰或屏蔽。比如：如果只有只读权限，则编辑保存入口可以置灰，如果是只读或者编辑权限，则修改权限入口可以置灰。  import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n dlpPermission.isInSandbox().then((data: boolean)=> {\n   console.log('isInSandbox, result: ' + JSON.stringify(data));\n }).catch((err: BusinessError) => {\n   console.error('isInSandbox: ' + JSON.stringify(err));\n }); 保留沙箱。DLP沙箱分身关闭后会进行沙箱卸载，如果不希望DLP沙箱分身关闭时卸载该沙箱可以在沙箱中调用设置保留沙箱接口，只有当再次调用取消保留沙箱接口并关闭DLP沙箱分身才会触发沙箱的卸载。 调用接口setRetentionState设置保留沙箱，传入参数为本沙箱内打开的dlp文件的uri列表，该接口只允许在沙箱中调用。 import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n async function setRetentionSandboxList() {\n   let docUris: Array<string>=[\"file://docs/storage/Users/currentUser/Desktop/test.txt.dlp\"]\n   try {\n     await dlpPermission.setRetentionState(docUris); // 设置沙箱保留\n   } catch (err) {\n     console.error('error', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n   }\n } 调用接口cancelRetentionState取消保留沙箱，该接口只允许沙箱中调用。 import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n async function setRetentionSandboxList() {\n   let docUris: Array<string>=[\"file://docs/storage/Users/currentUser/Desktop/test.txt.dlp\"]\n   try {\n     await dlpPermission.cancelRetentionState(docUris); // 取消保留沙箱\n   } catch (err) {\n     console.error('error', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n   }\n } 调用接口getRetentionSandboxList获取保留沙箱记录，该接口允许原应用和DLP沙箱分身中调用。 import { dlpPermission } from '@kit.DataProtectionKit';\n import { BusinessError } from '@kit.BasicServicesKit';\n\n async function getRetentionSandboxList() {\n   try {\n     let res:Array<dlpPermission.RetentionSandboxInfo> = await dlpPermission.getRetentionSandboxList(); // 获取保留沙箱记录\n     console.info('res', JSON.stringify(res))\n   } catch (err) {\n     console.error('error', (err as BusinessError).code, (err as BusinessError).message); // 失败报错\n   }\n }  
典型问题自排查
[h2]应用可以打开正常文件，无法打开FUSE文件
排查是否对want做了特定限制，导致DLP沙箱分身无法获取到FUSE文件。排查是否以读写权限打开了只读的FUSE文件。
