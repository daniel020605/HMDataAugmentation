使用剪贴板的延迟复制粘贴功能
场景介绍
剪贴板服务主要提供管理系统剪贴板的能力，为系统复制、粘贴功能提供支持。
反复执行复制操作时，剪贴板缓存中会存储多余数据从而导致内存增加，为了优化内存以及后续支持指定数据类型粘贴，剪贴板提供了延迟复制粘贴的功能。
用户复制使用延迟粘贴技术的应用内的数据时，该条真实数据不会立即写入剪贴板服务的缓存中，而是等需要粘贴时，再从应用获取数据。
约束限制
 剪贴板内容大小<128MB时支持使用。 
接口说明
开发步骤
 导入pasteboard,unifiedDataChannel和uniformTypeDescriptor模块。 import {unifiedDataChannel, uniformTypeDescriptor} from '@kit.ArkData';\nimport {BusinessError, pasteboard} from '@kit.BasicServicesKit' 构造一条PlainText数据,并书写获取延时数据的函数。 let plainTextData = new unifiedDataChannel.UnifiedData();\nlet GetDelayPlainText = ((dataType:string) => {\n  let plainText = new unifiedDataChannel.PlainText();\n  plainText.details = {\n    Key: 'delayPlaintext',\n    Value: 'delayPlaintext',\n  };\n  plainText.textContent = 'delayTextContent';\n  plainText.abstract = 'delayTextContent';\n  plainTextData.addRecord(plainText);\n  return plainTextData;\n}); 向系统剪贴板中存入一条PlainText数据。 let SetDelayPlainText = (() => {\n  plainTextData.properties.shareOptions = unifiedDataChannel.ShareOptions.CROSS_APP;\n  // 跨应用使用时设置为CROSS_APP，本应用内使用时设置为IN_APP\n  plainTextData.properties.getDelayData = GetDelayPlainText;\n  pasteboard.getSystemPasteboard().setUnifiedData(plainTextData).then(()=>{\n    // 存入成功，处理正常场景\n  }).catch((error: BusinessError) => {\n    // 处理异常场景\n  });\n}) 从系统剪贴板中读取这条text数据 let GetPlainTextUnifiedData = (() => {\n  pasteboard.getSystemPasteboard().getUnifiedData().then((data) => {\n    let outputData = data;\n    let records = outputData.getRecords();\n    if (records[0].getType() == uniformTypeDescriptor.UniformDataType.PLAIN_TEXT) {\n      let record = records[0] as unifiedDataChannel.PlainText;\n      console.log('GetPlainText success, type:' + records[0].getType + ', details:' +\n      JSON.stringify(record.details) + ', textContent:' + record.textContent + ', abstract:' + record.abstract);\n    } else {\n      console.log('Get Plain Text Data No Success, Type is: ' + records[0].getType());\n    }\n  }).catch((error: BusinessError) => {\n    //处理异常场景\n  })\n}) 
