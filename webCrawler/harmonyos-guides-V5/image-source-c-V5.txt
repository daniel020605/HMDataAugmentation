使用Image_NativeModule完成图片解码
创建图片源，获取位图的宽、高信息，以及释放图片源实例。
开发步骤
[h2]添加链接库
在进行应用开发之前，开发者需要打开native工程的src/main/cpp/CMakeLists.txt，在target_link_libraries依赖中添加libimage_source.so 以及日志依赖libhilog_ndk.z.so。
target_link_libraries(entry PUBLIC libhilog_ndk.z.so libimage_source.so)
[h2]Native接口调用
具体接口说明请参考API文档。
在hello.cpp中实现C API接口调用逻辑，示例代码如下：
解码接口使用示例
在创建ImageSource实例后，进行指定属性值的获取和修改、通过解码参数创建PixelMap对象、获取图像帧数等操作。
   #include <linux/kd.h>\n   #include <string>\n\n   #include <hilog/log.h>\n   #include <multimedia/image_framework/image/image_source_native.h>\n\n   #undef LOG_DOMAIN\n   #undef LOG_TAG\n   #define LOG_DOMAIN 0x3200\n   #define LOG_TAG \"MY_TAG\"\n\n   #define NUM_0 0\n   #define NUM_1 1\n\n   static napi_value sourceTest(napi_env env, napi_callback_info info)\n   {\n       napi_value argValue[NUM_1] = {0};\n       size_t argCount = NUM_1;\n       if (napi_get_cb_info(env, info, &argCount, argValue, nullptr, nullptr) != napi_ok || argCount < NUM_1 ||\n           argValue[NUM_0] == nullptr) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest napi_get_cb_info failed, argCount: %{public}d.\", argCount);\n           return getJsResult(env, IMAGE_BAD_PARAMETER);\n       }\n       char name[1024];\n       size_t nameSize = 1024;\n       napi_get_value_string_utf8(env, argValue[NUM_0], name, 1024, &nameSize);\n\n       //创建ImageSource实例\n       OH_ImageSourceNative *source = nullptr;\n       Image_ErrorCode errCode = OH_ImageSourceNative_CreateFromUri(name, nameSize, &source);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_CreateFromUri failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //创建定义图片信息的结构体对象，并获取图片信息\n       OH_ImageSource_Info *imageInfo;\n       OH_ImageSourceInfo_Create(&imageInfo);\n       errCode = OH_ImageSourceNative_GetImageInfo(source, 0, imageInfo);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_GetImageInfo failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //获取指定属性键的值\n       uint32_t width, height;\n       OH_ImageSourceInfo_GetWidth(imageInfo, &width);\n       OH_ImageSourceInfo_GetHeight(imageInfo, &height);\n       OH_ImageSourceInfo_Release(imageInfo);\n       OH_LOG_INFO(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_GetImageInfo success, width: %{public}d, height: %{public}d.\", width, height);\n       Image_String getKey;\n       const std::string PIXEL_X_DIMENSION = \"PixelXDimension\";\n       getKey.data = (char *)PIXEL_X_DIMENSION.c_str();\n       getKey.size = PIXEL_X_DIMENSION.length();\n       Image_String getValue;\n       errCode = OH_ImageSourceNative_GetImageProperty(source, &getKey, &getValue);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_GetImageProperty failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //修改指定属性键的值\n       Image_String setKey;\n       const std::string ORIENTATION = \"Orientation\";\n       setKey.data = (char *)ORIENTATION.c_str();\n       setKey.size = ORIENTATION.length();\n       Image_String setValue;\n       setValue.data = (char *)\"4\";\n       setValue.size = 1;\n       errCode = OH_ImageSourceNative_ModifyImageProperty(source, &setKey, &setValue);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_ModifyImageProperty failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //通过图片解码参数创建PixelMap对象\n       OH_DecodingOptions *ops = nullptr;\n       OH_DecodingOptions_Create(&ops);\n       //设置为AUTO会根据图片资源格式解码，如果图片资源为HDR资源则会解码为HDR的pixelmap。\n       OH_DecodingOptions_SetDesiredDynamicRange(ops, IMAGE_DYNAMIC_RANGE_AUTO);\n       OH_PixelmapNative *resPixMap = nullptr;\n\n       //ops参数支持传入nullptr, 当不需要设置解码参数时，不用创建\n       errCode = OH_ImageSourceNative_CreatePixelmap(source, ops, &resPixMap);\n       OH_DecodingOptions_Release(ops);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_CreatePixelmap failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //判断pixelmap是否为hdr内容\n       OH_Pixelmap_ImageInfo *pixelmapImageInfo = nullptr;\n       OH_PixelmapImageInfo_Create(&pixelmapImageInfo);\n       OH_PixelmapNative_GetImageInfo(resPixMap, pixelmapImageInfo);\n       bool pixelmapIsHdr;\n       OH_PixelmapImageInfo_GetDynamicRange(pixelmapImageInfo, &pixelmapIsHdr);\n       OH_PixelmapImageInfo_Release(pixelmapImageInfo);\n\n       //获取图像帧数\n       uint32_t frameCnt = 0;\n       errCode = OH_ImageSourceNative_GetFrameCount(source, &frameCnt);\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_GetFrameCount failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //通过图片解码参数创建Pixelmap列表\n       OH_DecodingOptions *opts = nullptr;\n       OH_DecodingOptions_Create(&opts);\n       OH_PixelmapNative **resVecPixMap = new OH_PixelmapNative*[frameCnt];\n       size_t outSize = frameCnt;\n       errCode = OH_ImageSourceNative_CreatePixelmapList(source, opts, resVecPixMap, outSize);\n       OH_DecodingOptions_Release(opts);\n       delete[] resVecPixMap;\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_CreatePixelmapList failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //获取图像延迟时间列表\n       int32_t *delayTimeList = new int32_t[frameCnt];\n       size_t size = frameCnt;\n       errCode = OH_ImageSourceNative_GetDelayTimeList(source, delayTimeList, size);\n       delete[] delayTimeList;\n       if (errCode != IMAGE_SUCCESS) {\n           OH_LOG_ERROR(LOG_APP, \"ImageSourceNativeCTest sourceTest OH_ImageSourceNative_GetDelayTimeList failed, errCode: %{public}d.\", errCode);\n           return errCode;\n       }\n\n       //释放ImageSource实例\n       OH_ImageSourceNative_Release(source);\n       OH_LOG_INFO(LOG_APP, \"ImageSourceNativeCTest sourceTest success.\");\n       return IMAGE_SUCCESS;\n   }
