拍照实现方案(ArkTS)
在开发相机应用时，需要先参考开发准备申请相关权限。
当前示例提供完整的拍照流程介绍，方便开发者了解完整的接口调用顺序。
在参考以下示例前，建议开发者查看相机开发指导(ArkTS)的具体章节，了解设备输入、会话管理、拍照等单个流程。
开发流程
在获取到相机支持的输出流能力后，开始创建拍照流，开发流程如下。
完整示例
Context获取方式请参考：获取UIAbility的上下文信息。
如需要在图库中看到所保存的图片、视频资源，需要将其保存到媒体库，保存方式请参考：保存媒体库资源。
需要在photoOutput.on('photoAvailable')接口获取到buffer时，将buffer在安全控件中保存到媒体库。
import { camera } from '@kit.CameraKit';\nimport { image } from '@kit.ImageKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { common } from '@kit.AbilityKit';\nimport { fileIo as fs } from '@kit.CoreFileKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\n\nlet context = getContext(this);\n\nfunction setPhotoOutputCb(photoOutput: camera.PhotoOutput): void {\n  //设置回调之后，调用photoOutput的capture方法，就会将拍照的buffer回传到回调中\n  photoOutput.on('photoAvailable', (errCode: BusinessError, photo: camera.Photo): void => {\n    console.info('getPhoto start');\n    console.info(`err: ${JSON.stringify(errCode)}`);\n    if (errCode || photo === undefined) {\n      console.error('getPhoto failed');\n      return;\n    }\n    let imageObj = photo.main;\n    imageObj.getComponent(image.ComponentType.JPEG, (errCode: BusinessError, component: image.Component): void => {\n      console.info('getComponent start');\n      if (errCode || component === undefined) {\n        console.error('getComponent failed');\n        return;\n      }\n      let buffer: ArrayBuffer;\n      if (component.byteBuffer) {\n        buffer = component.byteBuffer;\n      } else {\n        console.error('byteBuffer is null');\n        return;\n      }\n\n      // 如需要在图库中看到所保存的图片、视频资源，请使用用户无感的安全控件创建媒体资源。\n\n      // buffer处理结束后需要释放该资源，如果未正确释放资源会导致后续拍照获取不到buffer\n      imageObj.release(); \n    });\n  });\n}\n\nasync function cameraShootingCase(baseContext: common.BaseContext, surfaceId: string): Promise<void> {\n  // 创建CameraManager对象\n  let cameraManager: camera.CameraManager = camera.getCameraManager(baseContext);\n  if (!cameraManager) {\n    console.error(\"camera.getCameraManager error\");\n    return;\n  }\n  // 监听相机状态变化\n  cameraManager.on('cameraStatus', (err: BusinessError, cameraStatusInfo: camera.CameraStatusInfo) => {\n    if (err !== undefined && err.code !== 0) {\n      console.error('cameraStatus with errorCode = ' + err.code);\n      return;\n    }\n    console.info(`camera : ${cameraStatusInfo.camera.cameraId}`);\n    console.info(`status: ${cameraStatusInfo.status}`);\n  });\n\n  // 获取相机列表\n  let cameraArray: Array<camera.CameraDevice> = cameraManager.getSupportedCameras();\n  if (cameraArray.length <= 0) {\n    console.error(\"cameraManager.getSupportedCameras error\");\n    return;\n  }\n\n  for (let index = 0; index < cameraArray.length; index++) {\n    console.info('cameraId : ' + cameraArray[index].cameraId);                          // 获取相机ID\n    console.info('cameraPosition : ' + cameraArray[index].cameraPosition);              // 获取相机位置\n    console.info('cameraType : ' + cameraArray[index].cameraType);                      // 获取相机类型\n    console.info('connectionType : ' + cameraArray[index].connectionType);              // 获取相机连接类型\n  }\n\n  // 创建相机输入流\n  let cameraInput: camera.CameraInput | undefined = undefined;\n  try {\n    cameraInput = cameraManager.createCameraInput(cameraArray[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to createCameraInput errorCode = ' + err.code);\n  }\n  if (cameraInput === undefined) {\n    return;\n  }\n\n  // 监听cameraInput错误信息\n  let cameraDevice: camera.CameraDevice = cameraArray[0];\n  cameraInput.on('error', cameraDevice, (error: BusinessError) => {\n    console.error(`Camera input error code: ${error.code}`);\n  })\n\n  // 打开相机\n  await cameraInput.open();\n\n  // 获取支持的模式类型\n  let sceneModes: Array<camera.SceneMode> = cameraManager.getSupportedSceneModes(cameraArray[0]);\n  let isSupportPhotoMode: boolean = sceneModes.indexOf(camera.SceneMode.NORMAL_PHOTO) >= 0;\n  if (!isSupportPhotoMode) {\n    console.error('photo mode not support');\n    return;\n  }\n  // 获取相机设备支持的输出流能力\n  let cameraOutputCap: camera.CameraOutputCapability = cameraManager.getSupportedOutputCapability(cameraArray[0], camera.SceneMode.NORMAL_PHOTO);\n  if (!cameraOutputCap) {\n    console.error(\"cameraManager.getSupportedOutputCapability error\");\n    return;\n  }\n  console.info(\"outputCapability: \" + JSON.stringify(cameraOutputCap));\n\n  let previewProfilesArray: Array<camera.Profile> = cameraOutputCap.previewProfiles;\n  if (!previewProfilesArray) {\n    console.error(\"createOutput previewProfilesArray == null || undefined\");\n  }\n\n  let photoProfilesArray: Array<camera.Profile> = cameraOutputCap.photoProfiles;\n  if (!photoProfilesArray) {\n    console.error(\"createOutput photoProfilesArray == null || undefined\");\n  }\n\n  // 创建预览输出流,其中参数 surfaceId 参考上文 XComponent 组件，预览流为XComponent组件提供的surface\n  let previewOutput: camera.PreviewOutput | undefined = undefined;\n  try {\n    previewOutput = cameraManager.createPreviewOutput(previewProfilesArray[0], surfaceId);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to create the PreviewOutput instance. error code: ${err.code}`);\n  }\n  if (previewOutput === undefined) {\n    return;\n  }\n  // 监听预览输出错误信息\n  previewOutput.on('error', (error: BusinessError) => {\n    console.error(`Preview output error code: ${error.code}`);\n  });\n\n  // 创建拍照输出流\n  let photoOutput: camera.PhotoOutput | undefined = undefined;\n  try {\n    photoOutput = cameraManager.createPhotoOutput(photoProfilesArray[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to createPhotoOutput errorCode = ' + err.code);\n  }\n  if (photoOutput === undefined) {\n    return;\n  }\n\n    //调用上面的回调函数来保存图片\n  setPhotoOutputCb(photoOutput);\n\n  //创建会话\n  let photoSession: camera.PhotoSession | undefined = undefined;\n  try {\n    photoSession = cameraManager.createSession(camera.SceneMode.NORMAL_PHOTO) as camera.PhotoSession;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to create the session instance. errorCode = ' + err.code);\n  }\n  if (photoSession === undefined) {\n    return;\n  }\n  // 监听session错误信息\n  photoSession.on('error', (error: BusinessError) => {\n    console.error(`Capture session error code: ${error.code}`);\n  });\n\n  // 开始配置会话\n  try {\n    photoSession.beginConfig();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to beginConfig. errorCode = ' + err.code);\n  }\n\n  // 向会话中添加相机输入流\n  try {\n    photoSession.addInput(cameraInput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to addInput. errorCode = ' + err.code);\n  }\n\n  // 向会话中添加预览输出流\n  try {\n    photoSession.addOutput(previewOutput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to addOutput(previewOutput). errorCode = ' + err.code);\n  }\n\n  // 向会话中添加拍照输出流\n  try {\n    photoSession.addOutput(photoOutput);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to addOutput(photoOutput). errorCode = ' + err.code);\n  }\n\n  // 提交会话配置\n  await photoSession.commitConfig();\n\n  // 启动会话\n  await photoSession.start().then(() => {\n    console.info('Promise returned to indicate the session start success.');\n  });\n  // 判断设备是否支持闪光灯\n  let flashStatus: boolean = false;\n  try {\n    flashStatus = photoSession.hasFlash();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to hasFlash. errorCode = ' + err.code);\n  }\n  console.info('Returned with the flash light support status:' + flashStatus);\n\n  if (flashStatus) {\n    // 判断是否支持自动闪光灯模式\n    let flashModeStatus: boolean = false;\n    try {\n      let status: boolean = photoSession.isFlashModeSupported(camera.FlashMode.FLASH_MODE_AUTO);\n      flashModeStatus = status;\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error('Failed to check whether the flash mode is supported. errorCode = ' + err.code);\n    }\n    if(flashModeStatus) {\n      // 设置自动闪光灯模式\n      try {\n        photoSession.setFlashMode(camera.FlashMode.FLASH_MODE_AUTO);\n      } catch (error) {\n        let err = error as BusinessError;\n        console.error('Failed to set the flash mode. errorCode = ' + err.code);\n      }\n    }\n  }\n\n  // 判断是否支持连续自动变焦模式\n  let focusModeStatus: boolean = false;\n  try {\n    let status: boolean = photoSession.isFocusModeSupported(camera.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n    focusModeStatus = status;\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to check whether the focus mode is supported. errorCode = ' + err.code);\n  }\n\n  if (focusModeStatus) {\n    // 设置连续自动变焦模式\n    try {\n      photoSession.setFocusMode(camera.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n    } catch (error) {\n      let err = error as BusinessError;\n      console.error('Failed to set the focus mode. errorCode = ' + err.code);\n    }\n  }\n\n  // 获取相机支持的可变焦距比范围\n  let zoomRatioRange: Array<number> = [];\n  try {\n    zoomRatioRange = photoSession.getZoomRatioRange();\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to get the zoom ratio range. errorCode = ' + err.code);\n  }\n  if (zoomRatioRange.length <= 0) {\n    return;\n  }\n  // 设置可变焦距比\n  try {\n    photoSession.setZoomRatio(zoomRatioRange[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error('Failed to set the zoom ratio value. errorCode = ' + err.code);\n  }\n  let photoCaptureSetting: camera.PhotoCaptureSetting = {\n    quality: camera.QualityLevel.QUALITY_LEVEL_HIGH, // 设置图片质量高\n    rotation: camera.ImageRotation.ROTATION_0 // 设置图片旋转角度0\n  }\n  // 使用当前拍照设置进行拍照\n  photoOutput.capture(photoCaptureSetting, (err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to capture the photo ${err.message}`);\n      return;\n    }\n    console.info('Callback invoked to indicate the photo capture request success.');\n  });\n\n  // 需要在拍照结束之后调用以下关闭摄像头和释放会话流程，避免拍照未结束就将会话释放。\n  // 停止当前会话\n  await photoSession.stop();\n\n  // 释放相机输入流\n  await cameraInput.close();\n\n  // 释放预览输出流\n  await previewOutput.release();\n\n  // 释放拍照输出流\n  await photoOutput.release();\n\n  // 释放会话\n  await photoSession.release();\n\n  // 会话置空\n  photoSession = undefined;\n}
