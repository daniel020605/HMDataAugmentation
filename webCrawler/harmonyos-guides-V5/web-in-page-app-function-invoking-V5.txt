前端页面调用应用侧函数
开发者使用Web组件将应用侧代码注册到前端页面中，注册完成之后，前端页面中使用注册的对象名称就可以调用应用侧的函数，实现在前端页面中调用应用侧方法。
注册应用侧代码有两种方式，一种在Web组件初始化调用，使用javaScriptProxy()接口。另外一种在Web组件初始化完成后调用，使用registerJavaScriptProxy()接口，需要和deleteJavaScriptRegister接口配合使用，防止内存泄漏。
在下面的示例中，将test()方法注册在前端页面中， 该函数可以在前端页面触发运行。
 javaScriptProxy()接口使用示例如下。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass testClass {\n  constructor() {\n  }\n\n  test(): string {\n    return 'ArkTS Hello World!';\n  }\n}\n\n@Entry\n@Component\nstruct WebComponent {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  // 声明需要注册的对象\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      // Web组件加载本地index.html页面\n      Web({ src: $rawfile('index.html'), controller: this.webviewController})\n        // 将对象注入到web端\n        .javaScriptProxy({\n          object: this.testObj,\n          name: \"testObjName\",\n          methodList: [\"test\"],\n          controller: this.webviewController,\n          // 可选参数\n          asyncMethodList: [],\n          permission: '{\"javascriptProxyPermission\":{\"urlPermissionList\":[{\"scheme\":\"resource\",\"host\":\"rawfile\",\"port\":\"\",\"path\":\"\"},' +\n                      '{\"scheme\":\"e\",\"host\":\"f\",\"port\":\"g\",\"path\":\"h\"}],\"methodList\":[{\"methodName\":\"test\",\"urlPermissionList\":' +\n                      '[{\"scheme\":\"https\",\"host\":\"xxx.com\",\"port\":\"\",\"path\":\"\"},{\"scheme\":\"resource\",\"host\":\"rawfile\",\"port\":\"\",\"path\":\"\"}]},' +\n                      '{\"methodName\":\"test11\",\"urlPermissionList\":[{\"scheme\":\"q\",\"host\":\"r\",\"port\":\"\",\"path\":\"t\"},' +\n                      '{\"scheme\":\"u\",\"host\":\"v\",\"port\":\"\",\"path\":\"\"}]}]}}'\n        })\n    }\n  }\n} 应用侧使用registerJavaScriptProxy()接口注册。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass testClass {\n  constructor() {\n  }\n\n  test(): string {\n    return \"ArkUI Web Component\";\n  }\n\n  toString(): void {\n    console.log('Web Component toString');\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"],\n                    // 可选参数, asyncMethodList\n                    [],\n                    // 可选参数, permission\n                    '{\"javascriptProxyPermission\":{\"urlPermissionList\":[{\"scheme\":\"resource\",\"host\":\"rawfile\",\"port\":\"\",\"path\":\"\"},' +\n                    '{\"scheme\":\"e\",\"host\":\"f\",\"port\":\"g\",\"path\":\"h\"}],\"methodList\":[{\"methodName\":\"test\",\"urlPermissionList\":' +\n                    '[{\"scheme\":\"https\",\"host\":\"xxx.com\",\"port\":\"\",\"path\":\"\"},{\"scheme\":\"resource\",\"host\":\"rawfile\",\"port\":\"\",\"path\":\"\"}]},' +\n                    '{\"methodName\":\"test11\",\"urlPermissionList\":[{\"scheme\":\"q\",\"host\":\"r\",\"port\":\"\",\"path\":\"t\"},' +\n                    '{\"scheme\":\"u\",\"host\":\"v\",\"port\":\"\",\"path\":\"\"}]}]}}'\n            );\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n}      使用registerJavaScriptProxy()接口注册方法时，注册后需调用refresh()接口生效。    可选参数permission是一个json字符串，示例如下： {\n  \"javascriptProxyPermission\": {\n    \"urlPermissionList\": [       // Object级权限，如果匹配，所有Method都授权\n      {\n        \"scheme\": \"resource\",    // 精确匹配，不能为空\n        \"host\": \"rawfile\",       // 精确匹配，不能为空\n        \"port\": \"\",              // 精确匹配，为空不检查\n        \"path\": \"\"               // 前缀匹配，为空不检查\n      },\n      {\n        \"scheme\": \"https\",       // 精确匹配，不能为空\n        \"host\": \"xxx.com\",       // 精确匹配，不能为空\n        \"port\": \"8080\",          // 精确匹配，为空不检查\n        \"path\": \"a/b/c\"          // 前缀匹配，为空不检查\n      }\n    ],\n    \"methodList\": [\n      {\n        \"methodName\": \"test\",\n        \"urlPermissionList\": [   // Method级权限\n          {\n            \"scheme\": \"https\",   // 精确匹配，不能为空\n            \"host\": \"xxx.com\",   // 精确匹配，不能为空\n            \"port\": \"\",          // 精确匹配，为空不检查\n            \"path\": \"\"           // 前缀匹配，为空不检查\n          },\n          {\n            \"scheme\": \"resource\",// 精确匹配，不能为空\n            \"host\": \"rawfile\",   // 精确匹配，不能为空\n            \"port\": \"\",          // 精确匹配，为空不检查\n            \"path\": \"\"           // 前缀匹配，为空不检查\n          }\n        ]\n      },\n      {\n        \"methodName\": \"test11\",\n        \"urlPermissionList\": [   // Method级权限\n          {\n            \"scheme\": \"q\",       // 精确匹配，不能为空\n            \"host\": \"r\",         // 精确匹配，不能为空\n            \"port\": \"\",          // 精确匹配，为空不检查\n            \"path\": \"t\"          // 前缀匹配，为空不检查\n          },\n          {\n            \"scheme\": \"u\",       // 精确匹配，不能为空\n            \"host\": \"v\",         // 精确匹配，不能为空\n            \"port\": \"\",          // 精确匹配，为空不检查\n            \"path\": \"\"           // 前缀匹配，为空不检查\n          }\n        ]\n      }\n    ]\n  }\n} index.html前端页面触发应用侧代码。 <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    function callArkTS() {\n        let str = testObjName.test();\n        document.getElementById(\"demo\").innerHTML = str;\n        console.info('ArkTS Hello World! :' + str);\n    }\n</script>\n</body>\n</html> 
复杂类型使用方法
 应用侧和前端页面之间传递Array。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass testClass {\n  constructor() {\n  }\n\n  test(): Array<Number> {\n    return [1, 2, 3, 4]\n  }\n\n  toString(param: String): void {\n    console.log('Web Component toString' + param);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"]);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    function callArkTS() {\n        testObjName.toString(testObjName.test());\n    }\n</script>\n</body>\n</html> 应用侧和前端页面之间传递基础类型，非Function等复杂类型。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass student {\n  name: string = '';\n  age: string = '';\n}\n\nclass testClass {\n  constructor() {\n  }\n\n  // 传递的基础类型name:\"jeck\", age:\"12\"。\n  test(): student {\n    let st: student = { name: \"jeck\", age: \"12\" };\n    return st;\n  }\n\n  toString(param: ESObject): void {\n    console.log('Web Component toString' + param[\"name\"]);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"]);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    function callArkTS() {\n        testObjName.toString(testObjName.test());\n    }\n</script>\n</body>\n</html> 应用侧调用前端页面的Callback。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass testClass {\n  constructor() {\n  }\n\n  test(param: Function): void {\n    param(\"call callback\");\n  }\n\n  toString(param: String): void {\n    console.log('Web Component toString' + param);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"]);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    function callArkTS() {\n        testObjName.test(function(param){testObjName.toString(param)});\n    }\n</script>\n</body>\n</html> 应用侧调用前端页面Object里的Function。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass testClass {\n  constructor() {\n  }\n\n  test(param: ESObject): void {\n    param.hello(\"call obj func\");\n  }\n\n  toString(param: String): void {\n    console.log('Web Component toString' + param);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"]);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    // 写法1\n    class Student {\n        constructor(nameList) {\n            this.methodNameListForJsProxy = nameList;\n        }\n\n        hello(param) {\n            testObjName.toString(param)\n        }\n    }\n    var st = new Student([\"hello\"])\n\n    // 写法2\n    //创建一个构造器，构造函数首字母大写\n    function Obj1(){\n        this.methodNameListForJsProxy=[\"hello\"];\n        this.hello=function(param){\n            testObjName.toString(param)\n        };\n    }\n    //利用构造器，通过new关键字生成对象\n    var st1 = new Obj1();\n\n    function callArkTS() {\n        testObjName.test(st);\n        testObjName.test(st1);\n    }\n</script>\n</body>\n</html> 前端页面调用应用侧Object里的Function。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass ObjOther {\n  methodNameListForJsProxy: string[]\n\n  constructor(list: string[]) {\n    this.methodNameListForJsProxy = list\n  }\n\n  testOther(json: string): void {\n    console.info(json)\n  }\n}\n\nclass testClass {\n  ObjReturn: ObjOther\n\n  constructor() {\n    this.ObjReturn = new ObjOther([\"testOther\"]);\n  }\n\n  test(): ESObject {\n    return this.ObjReturn\n  }\n\n  toString(param: string): void {\n    console.log('Web Component toString' + param);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"]);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    function callArkTS() {\n      testObjName.test().testOther(\"call other object func\");\n    }\n</script>\n</body>\n</html> Promise场景。 第一种使用方法，在应用侧new Promise。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass testClass {\n  constructor() {\n  }\n\n  test(): Promise<string> {\n    let p: Promise<string> = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('执行完成');\n        reject('fail');\n      }, 10000);\n    });\n    return p;\n  }\n\n  toString(param: String): void {\n    console.log(\" \" + param);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"]);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    function callArkTS() {\n      testObjName.test().then((param)=>{testObjName.toString(param)}).catch((param)=>{testObjName.toString(param)})\n    }\n</script>\n</body>\n</html> 第二种使用方法，在前端页面new Promise。 // xxx.ets\nimport { webview } from '@kit.ArkWeb';\nimport { BusinessError } from '@kit.BasicServicesKit';\n\nclass testClass {\n  constructor() {\n  }\n\n  test(param:Function): void {\n    setTimeout( () => { param(\"suc\") }, 10000)\n  }\n\n  toString(param:String): void {\n    console.log(\" \" + param);\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  webviewController: webview.WebviewController = new webview.WebviewController();\n  @State testObj: testClass = new testClass();\n\n  build() {\n    Column() {\n      Button('refresh')\n        .onClick(() => {\n          try {\n            this.webviewController.refresh();\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('Register JavaScript To Window')\n        .onClick(() => {\n          try {\n            this.webviewController.registerJavaScriptProxy(this.testObj, \"testObjName\", [\"test\", \"toString\"]);\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Button('deleteJavaScriptRegister')\n        .onClick(() => {\n          try {\n            this.webviewController.deleteJavaScriptRegister(\"testObjName\");\n          } catch (error) {\n            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n          }\n        })\n      Web({ src: $rawfile('index.html'), controller: this.webviewController })\n    }\n  }\n} <!-- index.html -->\n<!DOCTYPE html>\n<html>\n<body>\n<button type=\"button\" onclick=\"callArkTS()\">Click Me!</button>\n<p id=\"demo\"></p>\n<script>\n    function callArkTS() {\n      let funpromise\n      var p = new Promise(function(resolve, reject){funpromise=(param)=>{resolve(param)}})\n      testObjName.test(funpromise)\n      p.then((param)=>{testObjName.toString(param)})\n    }\n</script>\n</body>\n</html> 
