动态照片(ArkTS)
相机框架提供动态照片拍摄能力，业务应用可以类似拍摄普通照片一样，一键式拍摄得到动态照片。
应用开发动态照片主要分为以下步骤：
 查询当前设备的当前模式是否支持拍摄动态照片。 如果支持动态照片，可以调用相机框架提供的使能接口使能动态照片能力。 监听照片回调，将照片存入媒体库。可参考MediaLibrary Kit-访问和管理动态照片资源。 
开发步骤
详细的API说明请参考Camera API参考。
 使能动态照片前需要使能分段式拍照能力。 拍摄动态照片需要麦克风权限ohos.permission.MICROPHONE，权限申请和校验的方式请参考开发准备。否则拍摄的照片没有声音。 
 导入依赖，需要导入相机框架、媒体库、图片相关领域依赖。 import { camera } from '@kit.CameraKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\nimport { BusinessError } from '@kit.BasicServicesKit'; 确定拍照输出流。 通过CameraOutputCapability类中的photoProfiles属性，可获取当前设备支持的拍照输出流，通过createPhotoOutput方法创建拍照输出流。 function getPhotoOutput(cameraManager: camera.CameraManager, \n                        cameraOutputCapability: camera.CameraOutputCapability): camera.PhotoOutput | undefined {\n  let photoProfilesArray: Array<camera.Profile> = cameraOutputCapability.photoProfiles;\n  if (!photoProfilesArray) {\n    console.error(\"createOutput photoProfilesArray == null || undefined\");\n  }\n  let photoOutput: camera.PhotoOutput | undefined = undefined;\n  try {\n    photoOutput = cameraManager.createPhotoOutput(photoProfilesArray[0]);\n  } catch (error) {\n    let err = error as BusinessError;\n    console.error(`Failed to createPhotoOutput. error: ${JSON.stringify(err)}`);\n  }\n  return photoOutput;\n} 查询当前设备当前模式是否支持动态照片能力。     查询是否支持动态照片前需要先完成相机会话配置、提交和启动会话，详细开发步骤请参考会话管理。   function isMovingPhotoSupported(photoOutput: camera.PhotoOutput): boolean {\n  let isSupported: boolean = false;\n  try {\n    isSupported = photoOutput.isMovingPhotoSupported();\n  } catch (error) {\n    // 失败返回错误码error.code并处理\n    let err = error as BusinessError;\n    console.error(`The isMovingPhotoSupported call failed. error code: ${err.code}`);\n  }\n  return isSupported;\n} 使能动态照片拍照能力。 function enableMovingPhoto(photoOutput: camera.PhotoOutput): void {\n  try {\n    photoOutput.enableMovingPhoto(true);\n  } catch (error) {\n    // 失败返回错误码error.code并处理\n    let err = error as BusinessError;\n    console.error(`The enableMovingPhoto call failed. error code: ${err.code}`);\n  }\n} 触发拍照，与普通拍照方式相同，请参考拍照。 
状态监听
在相机应用开发过程中，可以随时监听动态照片拍照输出流状态。通过注册photoAsset的回调函数获取监听结果，photoOutput创建成功时即可监听。
let context = getContext(this);\nlet phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);\n\nasync function mediaLibSavePhoto(photoAsset: photoAccessHelper.PhotoAsset): Promise<void> {\n  try {\n    let assetChangeRequest: photoAccessHelper.MediaAssetChangeRequest = new photoAccessHelper.MediaAssetChangeRequest(photoAsset);\n    assetChangeRequest.saveCameraPhoto();\n    await phAccessHelper.applyChanges(assetChangeRequest);\n    console.info('apply saveCameraPhoto successfully');\n  } catch (err) {\n    console.error(`apply saveCameraPhoto failed with error: ${err.code}, ${err.message}`);\n  }\n}\n\nfunction onPhotoOutputPhotoAssetAvailable(photoOutput: camera.PhotoOutput): void {\n  photoOutput.on('photoAssetAvailable', (err: BusinessError, photoAsset: photoAccessHelper.PhotoAsset): void => {\n    if (err) {\n      console.info(`photoAssetAvailable error: ${JSON.stringify(err)}.`);\n      return;\n    }\n    console.info('photoOutPutCallBack photoAssetAvailable');\n    // 调用媒体库落盘接口保存一阶段图和动态照片视频\n    mediaLibSavePhoto(photoAsset);\n  });\n}
