建立应用侧与前端页面数据通道(C/C++)
前端页面和应用侧之间可以使用Native方法实现两端通信（以下简称Native PostWebMessage），可解决ArkTS环境的冗余切换，同时允许发送消息、回调在非UI线程上运行，避免造成UI阻塞。当前只支持string和buffer数据类型。
适用的应用架构
应用使用ArkTS、C++语言混合开发，或本身应用架构较贴近于小程序架构，自带C++侧环境，推荐使用ArkWeb在Native侧提供的ArkWeb_ControllerAPI、ArkWeb_WebMessageAPI、ArkWeb_WebMessagePortAPI实现PostWebMessage功能。
上图展示了具有普遍适用性的小程序的通用架构。在这一架构中，逻辑层依赖于应用程序自带的JavaScript运行时，该运行时在一个已有的C++环境中运行。通过Native接口，逻辑层能够直接在C++环境中与视图层（其中ArkWeb充当渲染器）进行通信，无需回退至ArkTS环境使用ArkTS PostWebMessage接口。
左图是使用ArkTS PostWebMessage接口构建小程序的方案，，如红框所示，应用需要先调用到ArkTS环境，再调用到C++环境。右图是使用Native PostWebMessage接口构建小程序的方案，不需要ArkTS环境和C++环境的切换，执行效率更高。
使用Native接口实现PostWebMessage通信
[h2]使用Native接口绑定ArkWeb
 ArkWeb组件声明在ArkTS侧，需要用户自定义一个标识webTag，并将webTag通过Node-API传至应用C++侧。后续ArkWeb Native接口使用时，均需webTag作为对应组件的唯一标识。 ArkTS侧 import { webview } from '@kit.ArkWeb';\n// 自定义webTag，在WebviewController创建时作为入参传入，建立controller与webTag的映射关系\nwebTag: string = 'ArkWeb1';\ncontroller: webview.WebviewController = new webview.WebviewController(this.webTag);\n...\n// aboutToAppear中将webTag通过Node-API接口传入C++侧，作为C++侧ArkWeb组件的唯一标识\naboutToAppear() {\n  console.info(\"aboutToAppear\")\n  // 初始化web ndk\n  testNapi.nativeWebInit(this.webTag);\n}\n... 
[h2]使用Native接口获取API结构体
ArkWeb Native侧得先获取API结构体，才能调用结构体里的Native API。ArkWeb Native侧API通过函数OH_ArkWeb_GetNativeAPI获取，根据入参type不同，可获取对应的函数指针结构体。其中本指导涉及ArkWeb_ControllerAPI、ArkWeb_WebMessageAPI、ArkWeb_WebMessagePortAPI。
static ArkWeb_ControllerAPI *controller = nullptr;\nstatic ArkWeb_WebMessagePortAPI *webMessagePort = nullptr;\nstatic ArkWeb_WebMessageAPI *webMessage = nullptr;\n...\ncontroller = reinterpret_cast<ArkWeb_ControllerAPI *>(OH_ArkWeb_GetNativeAPI(ARKWEB_NATIVE_CONTROLLER));\nwebMessagePort =\n    reinterpret_cast<ArkWeb_WebMessagePortAPI *>(OH_ArkWeb_GetNativeAPI(ARKWEB_NATIVE_WEB_MESSAGE_PORT));\nwebMessage = reinterpret_cast<ArkWeb_WebMessageAPI *>(OH_ArkWeb_GetNativeAPI(ARKWEB_NATIVE_WEB_MESSAGE));
[h2]完整示例
在调用API前建议通过ARKWEB_MEMBER_MISSING校验该函数结构体是否有对应函数指针，避免SDK与设备ROM不匹配导致crash问题。createWebMessagePorts、postWebMessage、close需运行在UI线程。
 前端页面代码 <!-- entry/src/main/resources/rawfile/index.html -->\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en-gb\">\n<body>\n<h1>etsRunJavaScriptExt测试demo</h1>\n<h1 id=\"h1\"></h1>\n<h3 id=\"msg\">Receive string:</h3>\n<h3 id=\"msg2\">Receive arraybuffer:</h3>\n\n</body>\n<script type=\"text/javascript\">\nvar h5Port;\n\nwindow.addEventListener('message', function (event) {\n    if (event.data == 'init_web_messageport') {\n        const port = event.ports.at(0); // 1. 保存从应用侧发送过来的端口。\n        if (port) {\n            console.log(\"hwd In html got message\");\n            h5Port = port;\n            port.onmessage = function (event) {\n                console.log(\"hwd In html got message\");\n                // 2. 接收应用侧发送过来的消息.\n                var result = event.data;\n                var type_s = typeof (result)\n                switch (type_s) {\n                    case \"object\":\n                        if (result instanceof ArrayBuffer) {\n                            type_s = \"ArrayBuffer\";\n                            var view = new Uint8Array(result);\n                            const decoder = new TextDecoder('utf-8');\n                            result = decoder.decode(result);\n                        } else if (result instanceof Error) {\n                            type_s = \"Error\";\n                        } else if (result instanceof Array) {\n                            type_s = \"Array\";\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                console.log(\"H5 recv type: \" + type_s + \"\\nH5 recv result: \" + result)\n                document.getElementById(\"msg\").innerHTML = \"recv type: \" + type_s;\n                document.getElementById(\"msg2\").innerHTML = \"recv value: \" + result;\n            }\n            h5Port.onmessageerror = (event) => {\n                console.error(`hwd In html Error receiving message: ${event}`);\n            };\n        }\n    }\n})\nwindow.onerror = function(message, url, line, column, error) {\n  console.log(\"JavaScript Error: \" + message + \" on line \" + line + \" in \" + url);\n  document.getElementById(\"h1\").innerHTML = \"执行函数失败\"\n};\n\n// 3. 使用h5Port向应用侧发送消息。\nfunction postStringToApp() {\n    if (h5Port) {\n        h5Port.postMessage(\"send string from H5\");\n    } else {\n        console.error(\"In html h5port is null, please init first\");\n    }\n}\nfunction postBufferToApp() {\n    if (h5Port) {\n        const str = \"Hello, World!\";\n        const encoder = new TextEncoder();\n        const uint8Array = encoder.encode(str);\n        h5Port.postMessage(uint8Array.buffer);\n    } else {\n        console.error(\"In html h5port is null, please init first\");\n    }\n}\n\nfunction postJsonToApp() {\n    if (h5Port) {\n        var e = {\"json\": \"json\"};\n        h5Port.postMessage(e);\n    } else {\n        console.error(\"In html h5port is null, please init first\");\n    }\n}\n\nfunction postArrayStringToApp() {\n    if (h5Port) {\n        h5Port.postMessage([\"1\", \"2\", \"3\"]);\n    } else {\n        console.error(\"In html h5port is null, please init first\");\n    }\n}\n\nfunction postNumberToApp() {\n    if (h5Port) {\n        h5Port.postMessage(123);\n    } else {\n        console.error(\"In html h5port is null, please init first\");\n    }\n}\nclass MyClass {\n  constructor() {\n    // 构造器\n    this.myProperty = 'Hello, World!';\n  }\n\n  myMethod() {\n    // 实例方法\n    console.log(this.myProperty);\n  }\n\n  static myStaticMethod() {\n    // 静态方法\n    console.log('This is a static method.');\n  }\n}\nfunction postObjectToApp() {\n    if (h5Port) {\n        h5Port.postMessage(new MyClass());\n    } else {\n        console.error(\"In html h5port is null, please init first\");\n    }\n}\n\n</script>\n</html> ArkTS侧代码 // entry/src/main/ets/pages/Index.ets\nimport testNapi from 'libentry.so'\nimport web_webview from '@ohos.web.webview';\nimport { BusinessError } from '@ohos.base';\n\n@Entry\n@Component\nstruct Index {\n  @State webTag: string = 'postMessage';\n  controller: web_webview.WebviewController = new web_webview.WebviewController(this.webTag);\n  @State h5Log: string = 'Display received message send from HTML';\n\n  aboutToAppear() {\n    web_webview.WebviewController.setWebDebuggingAccess(true);\n    // 初始化web ndk\n    testNapi.nativeWebInit(this.webTag);\n  }\n\n  aboutToDisAppear() {\n    console.error(\"aboutToDisAppear\")\n  }\n\n  build() {\n    Scroll() {\n      Column({ space: 10 }) {\n        // 展示H5接收到的内容\n        Text(\"H5侧接收到应用侧发送消息展示\")\n        TextArea({text: this.h5Log})\n          .id(\"log_area\")\n          .width(\"100%\")\n          .height(100)\n          .border({ width: 1 })\n        Text(\"应用侧按钮\")\n        Row() {\n          Button('createNoControllerTagPort')\n            .id(\"create_no_tag_btn\")\n            .onClick(() => {\n              try {\n                testNapi.createWebMessagePorts(\"noTag\");\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n          Button('createPort')\n            .id(\"create_port_btn\")\n            .onClick(() => {\n              try {\n                testNapi.createWebMessagePorts(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n        }\n\n        Row({ space: 10 }) {\n\n          Button('setHandler')\n            .id(\"set_handler_btn\")\n            .onClick(() => {\n              try {\n                testNapi.setMessageEventHandler(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n\n          Button('setHandlerThread')\n            .id(\"set_handler_thread_btn\")\n            .onClick(() => {\n              try {\n                testNapi.setMessageEventHandlerThread(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n        }\n\n        Row({ space: 10 }) {\n          Button('SendString')\n            .id(\"send_string_btn\")\n            .onClick(() => {\n              try {\n                this.h5Log = \"\"\n                testNapi.postMessage(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n          Button('SendStringThread')\n            .id(\"send_string_thread_btn\")\n            .onClick(() => {\n              try {\n                this.h5Log = \"\"\n                testNapi.postMessageThread(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n        }\n\n        Row({ space: 10 }) {\n          Button('SendBuffer')\n            .id(\"send_buffer_btn\")\n            .onClick(() => {\n              try {\n                this.h5Log = \"\"\n                testNapi.postBufferMessage(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n          Button('SendNone')\n            .id(\"send_none_btn\")\n            .onClick(() => {\n              try {\n                this.h5Log = \"\"\n                testNapi.postNoneMessage(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n        }\n\n        Row({ space: 10 }) {\n\n          Button('closePort')\n            .id(\"close_port_btn\")\n            .onClick(() => {\n              try {\n                testNapi.closeMessagePort(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n          Button('destroyNullPort')\n            .id(\"destroy_null_btn\")\n            .onClick(() => {\n              try {\n                testNapi.destroyNullMessagePort(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n          Button('destroyPort')\n            .id(\"destroy_port_btn\")\n            .onClick(() => {\n              try {\n                testNapi.destroyMessagePort(this.webTag);\n              } catch (error) {\n                console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n              }\n            })\n        }\n        .width(\"100%\")\n        .padding(10)\n        .border({ width: 1 })\n\n        Column({ space: 10 }) {\n          Text(\"H5侧发送按钮\")\n          Row({ space: 10 }) {\n            Button('H5String')\n              .id(\"h5_send_string_btn\")\n              .onClick(() => {\n                try {\n                  this.controller.runJavaScript(\"for(var i = 0; i < 2000; i++) postStringToApp()\")\n                } catch (error) {\n                  console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n                }\n              })\n            Button('H5Buffer')\n              .id(\"h5_send_buffer_btn\")\n              .onClick(() => {\n                try {\n                  this.controller.runJavaScript(\"postBufferToApp()\")\n                } catch (error) {\n                  console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n                }\n              })\n            Button('H5Number')\n              .id(\"h5_send_number_btn\")\n              .onClick(() => {\n                try {\n                  this.controller.runJavaScript(\"postNumberToApp()\")\n                } catch (error) {\n                  console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n                }\n              })\n          }\n\n          Row({ space: 10 }) {\n            Button('H5Json')\n              .id(\"h5_send_json_btn\")\n              .onClick(() => {\n                try {\n                  this.controller.runJavaScript(\"postJsonToApp()\")\n                } catch (error) {\n                  console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n                }\n              })\n            Button('H5Array')\n              .id(\"h5_send_array_btn\")\n              .onClick(() => {\n                try {\n                  this.controller.runJavaScript(\"postArrayStringToApp()\")\n                } catch (error) {\n                  console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n                }\n              })\n            Button('H5Object')\n              .id(\"h5_send_object_btn\")\n              .onClick(() => {\n                try {\n                  this.controller.runJavaScript(\"postObjectToApp()\")\n                } catch (error) {\n                  console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);\n                }\n              })\n          }\n        }\n        .width(\"100%\")\n        .margin(10)\n        .padding(10)\n        .border({ width: 1 })\n\n        Web({ src: $rawfile('index.html'), controller: this.controller })\n          .onConsole((event) => {\n            if (event) {\n              let msg = event.message.getMessage()\n              if (msg.startsWith(\"H5\")) {\n                this.h5Log = event.message.getMessage() + \"\\n\" + this.h5Log\n              }\n            }\n            return false;\n          })\n      }\n    }.height('100%')\n    .scrollable(ScrollDirection.Vertical)\n    .scrollBar(BarState.Off)\n    .edgeEffect(EdgeEffect.Spring)\n  }\n} Node-API侧暴露ArkTS接口 // entry/src/main/cpp/types/libentry/index.d.ts\nexport const nativeWebInit: (webName: string) => void;\nexport const createWebMessagePorts: (webName: string) => void;\nexport const postMessage: (webName: string) => void;\nexport const postNoneMessage: (webName: string) => void;\nexport const setMessageEventHandler: (webName: string) => void;\nexport const closeMessagePort: (webName: string) => void;\nexport const destroyMessagePort: (webName: string) => void;\nexport const postBufferMessage: (webName: string) => void;\nexport const destroyNullMessagePort: (webName: string) => void;\nexport const setMessageEventHandlerThread: (webName: string) => void;\nexport const postMessageThread: (webName: string) => void; Node-API侧编译配置 # entry/src/main/cpp/CMakeLists.txt\n# the minimum version of CMake.\ncmake_minimum_required(VERSION 3.4.1)\nproject(NDKPostMessage)\n\nset(NATIVERENDER_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})\n\nif(DEFINED PACKAGE_FIND_FILE)\n    include(${PACKAGE_FIND_FILE})\nendif()\n\ninclude_directories(${NATIVERENDER_ROOT_PATH}\n                    ${NATIVERENDER_ROOT_PATH}/include)\n\nadd_library(entry SHARED hello.cpp)\n\nfind_library(\n    # Sets the name of the path variable.\n    hilog-lib\n    # Specifies the name of the NDK library that\n    # you want CMake to locate.\n    hilog_ndk.z\n)\n\ntarget_link_libraries(entry PUBLIC libace_napi.z.so ${hilog-lib} libohweb.so) Node-API层代码 // entry/src/main/cpp/hello.cpp\n#include \"napi/native_api.h\"\n#include <bits/alltypes.h>\n#include <memory>\n#include <string>\n#include <sys/types.h>\n#include <iostream>\n#include <map>\n#include \"hilog/log.h\"\n#include \"web/arkweb_interface.h\"\n#include <thread>\n\nconstexpr unsigned int LOG_PRINT_DOMAIN = 0xFF00;\nArkWeb_ControllerAPI *controller = nullptr;\n\nArkWeb_WebMessagePortAPI *webMessagePort = nullptr;\nArkWeb_WebMessageAPI *webMessage = nullptr;\nsize_t web_message_port_size = 0;\nArkWeb_WebMessagePortPtr *g_web_message_port_arr = nullptr;\n\nstatic void WebMessagePortCallback(const char *webTag, const ArkWeb_WebMessagePortPtr port,\n                                  const ArkWeb_WebMessagePtr message, void *userData) {\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                \"ndk WebMesagePortCallback webTag:%{public}s,messageType:%{public}d\", webTag,\n                webMessage->getType(message));\n    size_t len = 0;\n    void *back = webMessage->getData(message, &len);\n    if (webMessage->getType(message) == ArkWeb_WebMessageType::ARKWEB_STRING) {\n        OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                    \"ndk WebMesagePortCallback message:%{public}s,messageSize:%{public}d\", back, len);\n    } else if (webMessage->getType(message) == ArkWeb_WebMessageType::ARKWEB_BUFFER) {\n        OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                    \"ndk WebMesagePortCallback messageSize:%{public}d\", len);\n    }\n}\n\nstatic napi_value NativeWebInit(napi_env env, napi_callback_info info) {\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk NativeWebInit start\");\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk NativeWebInit webTag:%{public}s\", webTagValue);\n\n    controller = reinterpret_cast<ArkWeb_ControllerAPI *>(OH_ArkWeb_GetNativeAPI(ARKWEB_NATIVE_CONTROLLER));\n    if (controller)\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"get ArkWeb_ControllerAPI success\");\n\n    webMessagePort =\n        reinterpret_cast<ArkWeb_WebMessagePortAPI *>(OH_ArkWeb_GetNativeAPI(ARKWEB_NATIVE_WEB_MESSAGE_PORT));\n    if (webMessagePort)\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"get ArkWeb_WebMessagePortAPI success\");\n\n    webMessage = reinterpret_cast<ArkWeb_WebMessageAPI *>(OH_ArkWeb_GetNativeAPI(ARKWEB_NATIVE_WEB_MESSAGE));\n    if (webMessage)\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"get ArkWeb_WebMessageAPI success\");\n\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk NativeWebInit end\");\n\n    return nullptr;\n}\n\nstatic napi_value createWebMessagePorts(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 初始化端口\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk createWebMessagePorts begin\");\n    g_web_message_port_arr = controller->createWebMessagePorts(webTagValue, &web_message_port_size);\n    // 把其中一个端口发送给HTML\n    ArkWeb_ErrorCode code =\n        controller->postWebMessage(webTagValue, \"init_web_messageport\", g_web_message_port_arr, 1, \"*\");\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postWebMessage ArkWeb_ErrorCode:%{public}d\", code);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                \"ndk createWebMessagePorts end, web message port size:%{public}d\", web_message_port_size);\n    return nullptr;\n}\n\nstatic napi_value postMessage(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 发送消息\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage begin\");\n\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    ArkWeb_WebMessagePtr message = webMessage->createWebMessage();\n    webMessage->setType(message, ArkWeb_WebMessageType::ARKWEB_STRING);\n    std::string str = \"send string from native\";\n    webMessage->setData(message, (void *)str.c_str(), str.length() + 1);\n    ArkWeb_ErrorCode code = webMessagePort->postMessage(g_web_message_port_arr[1], webTagValue, message);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage ArkWeb_ErrorCode:%{public}d\", code);\n    webMessage->destroyWebMessage(&message);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage end, web message port size:%{public}d\",\n                web_message_port_size);\n    return nullptr;\n}\n\n\n// 在线程中发消息\nvoid sendMessage(const char *webTag, const ArkWeb_WebMessagePtr message) {\n    // 发送1000次\n    for (int i = 0; i < 1000; i++) {\n        OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"sendMessage in thread %{public}d\", i);\n        if (g_web_message_port_arr && webTag && message) {\n          webMessagePort->postMessage(g_web_message_port_arr[1], webTag, message);\n        }\n    }\n}\nstatic napi_value postMessageThread(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 构造消息\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage begin\");\n\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    ArkWeb_WebMessagePtr message = webMessage->createWebMessage();\n    webMessage->setType(message, ArkWeb_WebMessageType::ARKWEB_STRING);\n    std::string str = \"thread message\";\n    webMessage->setData(message, (void *)str.c_str(), str.length() + 1);\n    const int numThreads = 5;\n    std::thread threads[numThreads];\n\n    // 创建线程\n    for (int i = 0; i < numThreads; ++i) {\n        threads[i] = std::thread(sendMessage, webTagValue, message);\n    }\n\n    // 等待所有线程完成\n    for (int i = 0; i < numThreads; ++i) {\n        threads[i].detach();\n    }\n    return nullptr;\n}\n\n// 在线程中注册回调\nvoid setHandler(const char *webTag) {\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"setMessageEventHandler in thread\");\n    webMessagePort->setMessageEventHandler(g_web_message_port_arr[1], webTag, WebMessagePortCallback, NULL);\n}\n\nstatic napi_value setMessageEventHandlerThread(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 注册回调\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk SetMessageEventHandler begin\");\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    std::thread thread(setHandler, webTagValue);\n    thread.detach();\n    webMessagePort->setMessageEventHandler(g_web_message_port_arr[1], webTagValue, WebMessagePortCallback, NULL);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                \"ndk SetMessageEventHandler end, web message port size:%{public}d\", web_message_port_size);\n    return nullptr;\n}\nstatic napi_value postNoneMessage(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 发送消息\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage begin\");\n\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    ArkWeb_WebMessagePtr message = webMessage->createWebMessage();\n    webMessage->setType(message, ArkWeb_WebMessageType::ARKWEB_NONE);\n    std::string str = \"send string from native\";\n    webMessage->setData(message, (void *)str.c_str(), str.length() + 1);\n    webMessagePort->postMessage(g_web_message_port_arr[1], webTagValue, message);\n    webMessage->destroyWebMessage(&message);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage end, web message port size:%{public}d\",\n                web_message_port_size);\n    return nullptr;\n}\n\nstatic napi_value postBufferMessage(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 发送消息\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage begin\");\n\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    ArkWeb_WebMessagePtr message1 = webMessage->createWebMessage();\n    webMessage->setType(message1, ArkWeb_WebMessageType::ARKWEB_BUFFER);\n    std::string str1 = \"send buffer from native\";\n    webMessage->setData(message1, (void *)str1.c_str(), str1.length());\n    webMessagePort->postMessage(g_web_message_port_arr[1], webTagValue, message1);\n    webMessage->destroyWebMessage(&message1);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk postMessage end, web message port size:%{public}d\",\n                web_message_port_size);\n    return nullptr;\n}\n\nstatic napi_value setMessageEventHandler(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 注册回调\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk SetMessageEventHandler begin\");\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    webMessagePort->setMessageEventHandler(g_web_message_port_arr[1], webTagValue, WebMessagePortCallback, NULL);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                \"ndk SetMessageEventHandler end, web message port size:%{public}d\", web_message_port_size);\n    return nullptr;\n}\n\nstatic napi_value closeMessagePort(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 关闭端口，先调用close，再调用destroyWebMessagePorts\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk SetMessageEventHandler begin\");\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    webMessagePort->close(g_web_message_port_arr[0], webTagValue);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                \"ndk SetMessageEventHandler end, web message port size:%{public}d\", web_message_port_size);\n    controller->refresh(webTagValue);\n    return nullptr;\n}\n\nstatic napi_value destroyMessagePort(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 释放内存，先调用close，再调用destroyWebMessagePorts\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk SetMessageEventHandler begin\");\n    if (g_web_message_port_arr == nullptr) {\n        OH_LOG_Print(LOG_APP, LOG_ERROR, LOG_PRINT_DOMAIN, \"ArkWeb\", \"webMessagePort is nullptr\");\n        return nullptr;\n    }\n    controller->destroyWebMessagePorts(&g_web_message_port_arr, web_message_port_size);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                \"ndk SetMessageEventHandler end, web message port size:%{public}d\", web_message_port_size);\n    return nullptr;\n}\n\nstatic napi_value destroyNullMessagePort(napi_env env, napi_callback_info info) {\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n\n    // 获取第一个参数webTag\n    size_t webTagSize = 0;\n    napi_get_value_string_utf8(env, args[0], nullptr, 0, &webTagSize);\n    char *webTagValue = new (std::nothrow) char[webTagSize + 1];\n    size_t webTagLength = 0;\n    napi_get_value_string_utf8(env, args[0], webTagValue, webTagSize + 1, &webTagLength);\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk Refresh webTag:%{public}s\", webTagValue);\n\n    // 释放内存，先调用close，再调用destroyWebMessagePorts\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\", \"ndk SetMessageEventHandler begin\");\n\n    controller->destroyWebMessagePorts(&g_web_message_port_arr, web_message_port_size);\n\n    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_PRINT_DOMAIN, \"ArkWeb\",\n                \"ndk SetMessageEventHandler end, web message port size:%{public}d\", web_message_port_size);\n    return nullptr;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_property_descriptor desc[] = {\n        {\"nativeWebInit\", nullptr, NativeWebInit, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"createWebMessagePorts\", nullptr, createWebMessagePorts, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"postMessage\", nullptr, postMessage, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"postNoneMessage\", nullptr, postNoneMessage, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"postBufferMessage\", nullptr, postBufferMessage, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"setMessageEventHandler\", nullptr, setMessageEventHandler, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"closeMessagePort\", nullptr, closeMessagePort, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"destroyMessagePort\", nullptr, destroyMessagePort, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"postMessageThread\", nullptr, postMessageThread, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"setMessageEventHandlerThread\", nullptr, setMessageEventHandlerThread, nullptr, nullptr, nullptr, napi_default,\n        nullptr},\n        {\"destroyNullMessagePort\", nullptr, destroyNullMessagePort, nullptr, nullptr, nullptr, napi_default, nullptr},\n    };\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END\n\nstatic napi_module demoModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = ((void *)0),\n    .reserved = {0},\n};\n\nextern \"C\" __attribute__((constructor)) void RegisterEntryModule(void) { napi_module_register(&demoModule); } 
