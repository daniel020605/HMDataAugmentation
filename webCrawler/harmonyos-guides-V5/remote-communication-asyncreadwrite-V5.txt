同步读写流
本协议栈框架支持流式的同步读写。
开发步骤
导包。import { rcp } from '@kit.RemoteCommunicationKit';\nimport { expect } from '@ohos/hypium'; 同步写。const testNetworkInputQueue = async (done: Function): Promise<void> => {\n  const NetworkInputQueue = rcp.NetworkInputQueue;\n  const networkInputQueue = new NetworkInputQueue();\n\n  let counter = 0;\n  const interval = setInterval(() => {\n    networkInputQueue.write('a counter ' + counter++);\n    if (counter === 10) {\n      clearInterval(interval);\n      networkInputQueue.close();\n    }\n  }, 100);\n\n  const session = rcp.createSession({\n    requestConfiguration: {\n      security: {\n        remoteValidation: 'skip',\n      },\n    },\n  });\n\n  const response = await session.post('https://example.org/post', networkInputQueue);\n  expect(response.statusCode).assertEqual(200);\n  const obj = response.toJSON();\n  if (obj) {\n    expect(obj['data']).assertEqual(\n      'a counter 0a counter 1a counter 2a counter 3a counter 4a counter 5a counter 6a counter 7a counter 8a counter 9',\n    );\n  } else {\n    expect().assertFail();\n  }\n\n  session.close();\n  done();\n} 同步读。const testNetworkOutputQueue = async (done: Function): Promise<void> => {\n  const NetworkOutputQueue = rcp.NetworkOutputQueue;\n  const session = rcp.createSession();\n  const networkOutputQueue = new NetworkOutputQueue();\n  const numOfChunks = 10;\n  const chunkLength = 1000;\n  const totalBytes = numOfChunks * chunkLength;\n  const resp = await session.get('https://httpbin.org/bytes/' + totalBytes.toString(), networkOutputQueue);\n\n  for (let i = 0; i < numOfChunks; i++) {\n    const chunk = networkOutputQueue.read(chunkLength);\n  }\n\n  session.close();\n  done();\n} 
