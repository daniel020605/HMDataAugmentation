栅格布局
栅格布局容器根节点，使用grid-row与grid-col进行栅格布局。具体请参考Grid-container。
创建grid-container组件
在pages/index目录下的hml文件中创建一个grid-container组件，并添加Grid-row子组件。
<!-- index.hml -->\n<div class=\"container\">\n  <grid-container id=\"mygrid\" gutter=\"20px\" style=\"background-color: pink;\">\n    <grid-row style=\"height:100px;justify-content:space-around;width: 80%;background-color: #f67002;margin-left: \n      10%;\"></grid-row>\n    <grid-row style=\"height:300px;justify-content:space-around;background-color: #ffcf00;width: 100%;\"></grid-row>\n    <grid-row style=\"height:150px;justify-content:space-around;background-color: #032cf8;width: 100%;\"></grid-row>\n  </grid-container>\n</div>
/* xxx.css */\n.container{\n  flex-direction: column;\n  background-color: #F1F3F5;\n  margin-top: 500px;\n  justify-content: center;\n  align-items: center;\n}
grid-container仅支持grid-row为子组件。
调用方法
grid-container点击组件调用getColumns、getColumnWidth、getGutterWidth方法，返回栅格容器列数、column宽度及gutter宽度。长按调用getSizeType方法返回当前容器响应尺寸类型（xs|sm|md|lg）。
<!-- index.hml -->\n<div class=\"container\">\n  <grid-container id=\"mygrid\" gutter=\"20px\" style=\"background-color: pink;padding-top: 100px;\" \n    onclick=\"getColumns\" onlongpress=\"getSizeType\">\n    <grid-row style=\"height:100px;justify-content:space-around;background-color: #4cedf3;width: 20%;margin-left: \n      40%;\"></grid-row>\n    <grid-row style=\"height:150px;justify-content:space-around;background-color: #4cbff3;width: 50%;margin-left:\n      25%;\"></grid-row>\n    <grid-row style=\"height:200px;justify-content:space-around;background-color: #465ff6;width: 80%;margin-left: \n      10%;\"></grid-row>\n    <grid-row style=\"height:200px;justify-content:space-around;background-color: #5011ec;width: 100%;\"></grid-row>\n  </grid-container>\n</div>
/* xxx.css */\n.container{\n  flex-direction: column;\n  background-color: #F1F3F5;\n  margin-top: 400px;\n  justify-content: center;\n  align-items: center;\n}
// index.js\nimport promptAction from '@ohos.promptAction';\nexport default {\n  data:{\n    gutterWidth:'',\n    columnWidth:'',\n    columns:'',\n  },\n  getColumns(){\n    this.$element('mygrid').getColumnWidth((result)=>{\n      this.columnWidth = result;\n    })\n    this.$element('mygrid').getGutterWidth((result)=>{\n      this.gutterWidth = result;\n    })\n    this.$element('mygrid').getColumns((result)=>{\n      this.columns= result;\n    }) \n    setTimeout(()=>{              \n      promptAction.showToast({duration:5000,message:'columnWidth:'+this.columnWidth+',gutterWidth:'+\n      this.gutterWidth+',getColumns:'+this.columns})\n    })\n  },\n  getSizeType(){\n      this.$element('mygrid').getSizeType((result)=>{\n      promptAction.showToast({duration:2000,message:'get size type:'+result})\n    })\n  },\n}
添加grid-col
创建grid-container组件并添加grid-row，在grid-row组件内添加grid-col组件形成布局。
<!-- index.hml -->\n<div class=\"container\">\n  <grid-container id=\"mygrid\" columns=\"4\" gutter=\"0\" style=\"background-color: pink;\" onclick=\"getColumns\" onlongpress=\"getSizeType\">\n    <grid-row style=\"height: 100px;justify-content: space-around;background-color: #4cbff3;width: 100%;\">\n      <grid-col span=\"0\">\n        <div style=\"align-items: center;justify-content: center;height: 100%;width: 100%;\">\n          <text style=\"color: dodgerblue;\" onclick=\"getCol\">top</text>\n        </div>\n      </grid-col>\n    </grid-row>\n    <grid-row style=\"height:500px;justify-content:space-around;background-color: #3b55ef;width: 100%;\">\n      <grid-col span=\"0\" style=\"width: 20%;\">\n        <div style=\"align-items: center;justify-content: center;height: 100%;width: 100%;\">\n          <text style=\"color: dodgerblue;\">left</text>\n        </div>\n      </grid-col>\n      <grid-col span=\"0\" style=\"background-color:orange;width: 80%;\">\n        <div style=\"width: 100%;height: 100%;align-items: center;justify-content: center;\">\n          <text>right</text>\n        </div>\n      </grid-col>\n    </grid-row>\n    <grid-row style=\"height: 100px;justify-content: space-around;background-color: #4cbff3;width: 100%;\">\n      <grid-col style=\"background-color:#c075ef;\" span=\"0\">\n        <div style=\"width: 100%;height: 100%;padding: 20px;align-items: center;justify-content: center;\">\n          <text>bottom</text>\n        </div>\n      </grid-col>\n    </grid-row>\n  </grid-container>\n</div>
/* xxx.css */\n.container{\n  flex-direction: column;\n  background-color: #F1F3F5;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n}\ntext{\n  color: white;\n  font-size: 40px;\n}
grid-row仅支持grid-col为子组件，只能在grid-col组件中添加填充的内容。
场景示例
本场景中循环输出list中的内容，创建出网格布局。进行下拉操时触发refresh（刷新页面）方法，这时会向list数组中添加一条数据并设置setTimeout（延迟触发），达到刷新请求数据的效果。
<!-- index.hml -->\n<div class=\"container\">\n  <refresh refreshing=\"{{fresh}}\" onrefresh=\"refresh\">\n    <grid-container id=\"mygrid\" gutter=\"20\" style=\"margin: 10px;\">\n      <grid-row style=\"height:200px;width: 100%;background-color: #e7e7e2;margin-top: 50px; padding: 0px 20px;border-radius: 15px;\" for=\"item in list\">\n        <grid-col span=\"0\" style=\"width: 40%;\">\n          <div style=\"align-items: center;justify-content: center\">\n            <image src=\"{{item.src}}\" style=\"object-fit: contain;border-radius: 30px;\"></image>\n          </div>\n        </grid-col>\n        <grid-col span=\"0\" style=\"width: 60%;\">\n          <div style=\"align-items: center;justify-content: center;width: 100%;height: 100%;text-align: center;\">\n            <text>image{{item.id}}</text>\n          </div>\n        </grid-col>\n      </grid-row>\n    </grid-container>\n  </refresh>\n</div>
/* xxx.css */\n.container{\n  flex-direction: column;\n  background-color: #F1F3F5;\n  width: 100%;\n  height: 100%;\n}\ntext{\n  color: #0a0aef;\n  font-size: 60px;\n}
// index.js\nimport promptAction from '@ohos.promptAction';\nexport default {\n  data:{\n    list:[\n      {src:'common/images/1.png',id:'1'},\n      {src:'common/images/2.png',id:'2'},\n      {src:'common/images/3.png',id:'3'}\n    ],\n    fresh:false\n  },\n  refresh(e) {\n    promptAction.showToast({\n      message: 'refreshing'\n    })\n    var that = this;\n    that.fresh = e.refreshing;\n    setTimeout(function () {\n      that.fresh = false;\n      that.list.unshift({src: 'common/images/4.png',id:'4'});\n      promptAction.showToast({\n        message: 'succeed'\n      })\n    }, 2000)\n  }\n}
