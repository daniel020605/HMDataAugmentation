使用typeNode实现画中画功能开发
该方式适用于任意场景下应用接入画中画功能，以下根据实际开发场景提供四个示例，分别介绍对应场景下画中画功能的实现步骤：
应用使用typeNode自由节点（不添加到布局）实现画中画功能。应用使用router导航时通过typeNode实现画中画功能。应用使用Navigation导航时通过typeNode实现画中画功能。应用使用单界面Ability时通过typeNode实现画中画功能。
本文以视频播放为例，介绍通过typeNode实现画中画功能的基本开发步骤。
示例中的视频播放器简易实现参考：
// model/AVPlayer.ets\n// 简易播放器实现\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { common } from '@kit.AbilityKit';\nimport { media } from '@kit.MediaKit';\n\nexport class AVPlayer {\n  private avPlayer?: media.AVPlayer;\n  surfaceID: string = '';\n  \n  setAVPlayerCallback() {\n    this.avPlayer?.on('seekDone', (seekDoneTime: number) => {\n      console.info(`AVPlayer seek succeeded, seek time is ${seekDoneTime}`);\n    })\n    this.avPlayer?.on('stateChange', async (state, reason) => {\n      if (!this.avPlayer) {\n        return;\n      }\n      switch (state) {\n        case 'idle':\n          this.avPlayer.release();\n          break;\n        case 'initialized':\n          this.avPlayer.surfaceId = this.surfaceID;\n          this.avPlayer.prepare().then(() => {\n            console.info('AVPlayer prepare succeeded.');\n          }, (err: BusinessError) => {\n            console.error(`Invoke prepare failed, code is ${err.code}, message is ${err.message}`);\n          });\n          break;\n        case 'prepared':\n          this.avPlayer.play();\n          break;\n        case 'stopped':\n          this.avPlayer.reset();\n          break;\n        default:\n          break;\n      }\n    })\n  }\n\n  async avPlayerFdSrc() {\n    this.avPlayer = await media.createAVPlayer();\n    this.setAVPlayerCallback();\n    let context = getContext(this) as common.UIAbilityContext;\n    let fileDescriptor = await context.resourceManager.getRawFd('xxx.mp4');\n    this.avPlayer.fdSrc = fileDescriptor;\n  }\n}
约束与限制
构造PiPConfiguration参数时，建议传入contentWidth和contentHeight参数用以计算画中画初始比例，否则系统将以16:9的比例呈现画中画窗口。contentNode支持XComponentType.SURFACE类型，且创建typeNode时必须指定为\"XComponent\"类型。
应用使用typeNode自由节点（不添加到布局）实现画中画功能
创建画中画控制器，注册生命周期事件以及控制事件回调。通过主窗口UIContext创建typeNode节点。通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。 启动画中画。创建画中画控制器实例后，通过startPiP接口启动画中画。 更新媒体源尺寸信息。画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。 关闭画中画。当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画。 
// EntryAbility.ets\nimport { UIAbility } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\nimport { PipManager } from '../model/PipManager';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    windowStage.loadContent('pages/Index', (err) => {\n      // ...\n    });\n    windowStage.getMainWindow().then((window) => {\n      let ctx = window.getUIContext();\n      // 通过主窗口UIContext创建typeNode节点\n      PipManager.getInstance().makeTypeNode(ctx);\n    })\n  }\n}
// Index.ets\n// 该页面用于展示应用布局文件，创建的typeNode节点不会添加到该布局中\nimport { PipManager } from '../model/PipManager';\n\nconst TAG = 'Index'\n@Entry\n@Component\nstruct Index {\n  build() {\n    Column() {\n      Text('This is MainPage')\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n        .margin({ bottom: 20 })\n\n      Text('This is not typeNode')\n        .size({ width: '100%', height: '800px' })\n        .fontSize(30)\n        .textAlign(TextAlign.Center)\n        .fontWeight(FontWeight.Bold)\n        .backgroundColor('#4d5b5858')\n\n      Row({ space: 20 }) {\n        Button('startPip') // 启动画中画\n          .onClick(() => {\n            PipManager.getInstance().startPip();\n          })\n\n        Button('stopPip') // 停止画中画\n          .onClick(() => {\n            PipManager.getInstance().stopPip();\n          })\n\n        Button('updateSize') // 更新视频尺寸\n          .onClick(() => {\n            PipManager.getInstance().updateContentSize(900, 1600);\n          })\n      }\n      .backgroundColor('#4da99797')\n      .size({ width: '100%', height: 60 })\n      .justifyContent(FlexAlign.SpaceAround)\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height('100%')\n  }\n\n  aboutToDisappear(): void {\n    PipManager.getInstance().unregisterPipStateChangeListener(); // 解注册画中画生命周期及状态回调\n  }\n\n  onPageShow(): void {\n    console.info(TAG, 'onPageShow')\n    PipManager.getInstance().init(getContext(this)); // 创建画中画控制器\n    PipManager.getInstance().setAutoStart(true); // 设置应用退后台时自动启动画中画\n  }\n\n  onPageHide(): void {\n    console.info(TAG, 'onPageHide')\n    PipManager.getInstance().setAutoStart(false);\n  }\n}
// model/PipManager.ets\n// 画中画控制器单例\nimport { PiPWindow, typeNode } from '@kit.ArkUI'; // 引入PiPWindow模块\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { AVPlayer} from '../model/AVPlayer'\n\n// 自定义XComponentController\nclass CustomXComponentController extends XComponentController {\n  // 监听onSurfaceCreated，并将surfaceId设置给播放器\n  onSurfaceCreated(surfaceId: string): void {\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\n      return;\n    }\n    PipManager.getInstance().player.surfaceID = surfaceId;\n    PipManager.getInstance().player.avPlayerFdSrc();\n  }\n\n  onSurfaceDestroyed(surfaceId: string): void {\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\n  }\n}\n\nconst TAG = 'PipManager';\n\nexport class PipManager {\n  player: AVPlayer;\n  private static instance: PipManager = new PipManager();\n  private pipController?: PiPWindow.PiPController = undefined;\n  private mXComponentController: XComponentController;\n  private xComponent: typeNode.XComponent| null = null; // typeNode节点\n\n  public static getInstance(): PipManager {\n    return PipManager.instance;\n  }\n\n  constructor() {\n    this.player = new AVPlayer();\n    this.mXComponentController = new CustomXComponentController();\n  }\n\n  onActionEvent(control: PiPWindow.ControlEventParam) {\n    switch (control.controlType) {\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\n          //停止视频\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\n          //播放视频\n        }\n        break;\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\n        // 切换到下一个视频\n        break;\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\n        // 切换到上一个视频\n        break;\n      case PiPWindow.PiPControlType.FAST_FORWARD:\n        // 视频进度快进\n        break;\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\n        // 视频进度后退\n        break;\n      default:\n        break;\n    }\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\n  }\n\n  // 监听画中画生命周期\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\n    let curState: string = '';\n    switch (state) {\n      case PiPWindow.PiPState.ABOUT_TO_START:\n        curState = \"ABOUT_TO_START\";\n        break;\n      case PiPWindow.PiPState.STARTED:\n        curState = \"STARTED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\n        curState = \"ABOUT_TO_STOP\";\n        break;\n      case PiPWindow.PiPState.STOPPED:\n        curState = \"STOPPED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\n        curState = \"ABOUT_TO_RESTORE\";\n        break;\n      case PiPWindow.PiPState.ERROR:\n        curState = \"ERROR\";\n        break;\n      default:\n        break;\n    }\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\n  }\n\n  // 解注册监听\n  unregisterPipStateChangeListener() {\n    console.info(TAG, 'aboutToDisappear');\n    this.pipController?.off('stateChange');\n    this.pipController?.off('controlEvent');\n  }\n\n  getXComponentController(): CustomXComponentController {\n    return this.mXComponentController;\n  }\n\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\n  init(ctx: Context) {\n    if (this.pipController !== null && this.pipController != undefined) {\n      return;\n    }\n    console.info(TAG, 'onPageShow');\n    if (!PiPWindow.isPiPEnabled()) {\n      console.error(TAG, `picture in picture disabled for current OS`);\n      return;\n    }\n\n    let config: PiPWindow.PiPConfiguration = {\n      context: ctx,\n      componentController: this.getXComponentController(),\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则将设置为16:9默认比例\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则将设置为16:9默认比例\n    };\n    // 通过create接口创建画中画控制器实例\n    let promise: Promise<PiPWindow.PiPController> = PiPWindow.create(config, this.xComponent);\n    promise.then((controller: PiPWindow.PiPController) => {\n      this.pipController = controller;\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\n      this.pipController.setAutoStartEnabled(true);\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) => {\n        this.onStateChange(state, reason);\n      });\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) => {\n        this.onActionEvent(control);\n      });\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤2：创建画中画控制器实例后，通过startPiP接口启动画中画\n  startPip() {\n    this.pipController?.startPiP().then(() => {\n      console.info(TAG, `Succeeded in starting pip.`);\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤3：更新媒体源尺寸信息\n  updateContentSize(width: number, height: number) {\n    if (this.pipController) {\n      this.pipController.updateContentSize(width, height);\n    }\n  }\n\n  // 步骤4：关闭画中画\n  stopPip() {\n    if (this.pipController === null || this.pipController === undefined) {\n      return;\n    }\n    let promise: Promise<void> = this.pipController.stopPiP();\n    promise.then(() => {\n      console.info(TAG, `Succeeded in stopping pip.`);\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  setAutoStart(autoStart: boolean): void {\n    this.pipController?.setAutoStartEnabled(autoStart);\n  }\n\n  // 创建typeNode节点\n  makeTypeNode(ctx: UIContext) {\n    if (this.xComponent === null || this.xComponent === undefined) {\n      // 创建typeNode\n      // let xc_options: XComponentOptions = {\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      // }\n      // this.xComponent = typeNode.createNode(ctx, \"XComponent\", xc_options);\n\n      // 创建XComponent类型的typeNode\n      this.xComponent = typeNode.createNode(ctx, \"XComponent\", {\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      });\n    }\n  }\n}
以上示例代码对应的示意图如下所示：
应用使用router导航时通过typeNode实现画中画功能
创建画中画控制器，注册生命周期事件以及控制事件回调。创建自定义NodeController，实现makeNode方法，在该方法中创建typeNode。通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。 启动画中画。创建画中画控制器实例后，通过startPiP接口启动画中画，在画中画ABOUT_TO_START生命周期将typeNode节点从布局移除，并返回上级界面（可选）。如果启动画中画时返回了上级界面，需要在画中画ABOUT_TO_RESTORE（还原）时重新push原界面。 更新媒体源尺寸信息。画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。 关闭画中画。当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画，在画中画ABOUT_TO_STOP生命周期将typeNode节点重新添加到布局中。 
// EntryAbility.ets\nimport { UIAbility } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    windowStage.loadContent('pages/Index', (err) => {\n     // ...\n    });\n  }\n}
// pages/Index.ets\nimport { PipManager } from '../model/PipManager';\nimport { PiPWindow, router, Router } from '@kit.ArkUI'; // 引入PiPWindow模块\n\nconst TAG = 'Index'\n@Entry\n@Component\nstruct Index {\n  private page1: string = 'pages/Page1';\n  private pageRouter: Router | null = null;\n\n  // 画中画生命周期事件监听，用于页面及节点操作\n  private callback: Function = (state: PiPWindow.PiPState) => {\n    console.info(TAG, `pipStateChange: state ${state}`);\n    if (state === PiPWindow.PiPState.ABOUT_TO_START) {\n      // 返回到上级页面（可选）\n      this.pageRouter?.back();\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_STOP) {\n      // 重新将typeNode节点添加到布局中，例如还原场景\n      PipManager.getInstance().addNode();\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_RESTORE) {\n      // 如果在ABOUT_TO_START时返回了上级界面，需要还原时push到原界面\n      this.jumpNext();\n    }\n  };\n\n  aboutToAppear(): void {\n    this.pageRouter = this.getUIContext().getRouter();\n    PipManager.getInstance().registerLifecycleCallback(this.callback);\n  }\n\n  aboutToDisappear(): void {\n    PipManager.getInstance().unregisterPipStateChangeListener();\n    PipManager.getInstance().unRegisterLifecycleCallback(this.callback);\n  }\n\n  jumpNext(): void {\n    let topPage = this.pageRouter?.getState();\n    if (topPage !== undefined && (this.page1.toString() === topPage.path + topPage.name)) {\n      console.info(TAG, `page1 aready at top`)\n      return;\n    }\n    this.pageRouter?.pushUrl({\n      url: this.page1 // 目标url\n    }, router.RouterMode.Standard, (err) => {\n      if (err) {\n        console.error(TAG, `Invoke pushUrl failed, code is ${err.code}: ${err.message}`);\n        return;\n      }\n      console.info(TAG, 'Invoke pushUrl succeeded.');\n    });\n  }\n\n  build() {\n    Row() {\n      Column() {\n        Text('Main Page')\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n\n        Button('Jump Next')\n          .onClick(() => {\n            this.jumpNext();\n          })\n          .margin({ top: 16, bottom: 16 })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}
// pages/Page1.ets\nimport { PipManager } from '../model/PipManager';\n\nconst TAG = 'Page1';\n\n@Component\nexport struct Page1 {\n  build() {\n    Column() {\n      Text('This is Page1')\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n        .margin({bottom: 20})\n\n      // 将typeNode添加到页面布局中\n      NodeContainer(PipManager.getInstance().getNodeController())\n        .size({ width: '100%', height: '800px' })\n\n      Row({ space: 20 }) {\n        Button('startPip')// 启动画中画\n          .onClick(() => {\n            PipManager.getInstance().startPip();\n          })\n\n        Button('stopPip')// 停止画中画\n          .onClick(() => {\n            PipManager.getInstance().stopPip();\n          })\n\n        Button('updateSize')// 更新视频尺寸\n          .onClick(() => {\n            // 此处设置的宽高应为媒体内容宽高，需要通过媒体相关接口或回调获取\n            // 例如使用AVPlayer播放视频时，可通过videoSizeChange回调获取媒体源更新后的尺寸\n            PipManager.getInstance().updateContentSize(900, 1600);\n          })\n      }\n      .backgroundColor('#4da99797')\n      .size({ width: '100%', height: 60 })\n      .justifyContent(FlexAlign.SpaceAround)\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height('100%')\n  }\n\n  onPageShow(): void {\n    console.info(TAG, 'onPageShow')\n    PipManager.getInstance().initPipController(getContext(this));\n    PipManager.getInstance().setAutoStart(true);\n  }\n\n  onPageHide(): void {\n    console.info(TAG, 'onPageHide')\n    PipManager.getInstance().setAutoStart(false);\n    PipManager.getInstance().removeNode();\n  }\n}
// model/PipManager.ets\nimport { PiPWindow, typeNode } from '@kit.ArkUI'; // 引入PiPWindow模块\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { XCNodeController } from './XCNodeController';\nimport { AVPlayer } from './AVPlayer';\n\nexport class CustomXComponentController extends XComponentController {\n  onSurfaceCreated(surfaceId: string): void {\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\n      return;\n    }\n    // 将surfaceId设置给媒体源\n    PipManager.getInstance().player.surfaceID = surfaceId;\n    PipManager.getInstance().player.avPlayerFdSrc();\n  }\n\n  onSurfaceDestroyed(surfaceId: string): void {\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\n  }\n}\n\nconst TAG = 'PipManager';\n\nexport class PipManager {\n  private static instance: PipManager = new PipManager();\n  private pipController?: PiPWindow.PiPController = undefined;\n  private xcNodeController: XCNodeController;\n  private mXComponentController: XComponentController;\n  private lifeCycleCallback: Set<Function> = new Set();\n  player: AVPlayer;\n\n  public static getInstance(): PipManager {\n    return PipManager.instance;\n  }\n\n  constructor() {\n    this.xcNodeController = new XCNodeController();\n    this.player = new AVPlayer();\n    this.mXComponentController = new CustomXComponentController();\n  }\n\n  public registerLifecycleCallback(callBack: Function) {\n    this.lifeCycleCallback.add(callBack);\n  }\n\n  public unRegisterLifecycleCallback(callBack: Function): void {\n    this.lifeCycleCallback.delete(callBack);\n  }\n\n  getNode(): typeNode.XComponent | null {\n    return this.xcNodeController.getNode();\n  }\n\n  onActionEvent(control: PiPWindow.ControlEventParam) {\n    switch (control.controlType) {\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\n          //停止视频\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\n          //播放视频\n        }\n        break;\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\n        // 切换到下一个视频\n        break;\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\n        // 切换到上一个视频\n        break;\n      case PiPWindow.PiPControlType.FAST_FORWARD:\n        // 视频进度快进\n        break;\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\n        // 视频进度后退\n        break;\n      default:\n        break;\n    }\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\n  }\n\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\n    let curState: string = '';\n    this.xcNodeController.setCanAddNode(\n      state === PiPWindow.PiPState.ABOUT_TO_STOP || state === PiPWindow.PiPState.STOPPED)\n    if (this.lifeCycleCallback !== null) {\n      this.lifeCycleCallback.forEach((fun) => {\n        fun(state)\n      });\n    }\n    switch (state) {\n      case PiPWindow.PiPState.ABOUT_TO_START:\n        curState = \"ABOUT_TO_START\";\n        // 将typeNode节点从布局移除\n        this.xcNodeController.removeNode();\n        break;\n      case PiPWindow.PiPState.STARTED:\n        curState = \"STARTED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\n        curState = \"ABOUT_TO_STOP\";\n        break;\n      case PiPWindow.PiPState.STOPPED:\n        curState = \"STOPPED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\n        curState = \"ABOUT_TO_RESTORE\";\n        break;\n      case PiPWindow.PiPState.ERROR:\n        curState = \"ERROR\";\n        break;\n      default:\n        break;\n    }\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\n  }\n\n  unregisterPipStateChangeListener() {\n    console.info(`${TAG} aboutToDisappear`)\n    this.pipController?.off('stateChange');\n    this.pipController?.off('controlEvent');\n  }\n\n  getXComponentController(): CustomXComponentController {\n    return this.mXComponentController;\n  }\n\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\n  initPipController(ctx: Context) {\n    if (this.pipController !== null && this.pipController != undefined) {\n      return;\n    }\n    console.info(`${TAG} onPageShow`)\n    if (!PiPWindow.isPiPEnabled()) {\n      console.error(TAG, `picture in picture disabled for current OS`);\n      return;\n    }\n    let config: PiPWindow.PiPConfiguration = {\n      context: ctx,\n      componentController: this.getXComponentController(),\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则创建画中画失败\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则创建画中画失败\n    };\n    // 通过create接口创建画中画控制器实例\n    let promise: Promise<PiPWindow.PiPController> = PiPWindow.create(config, this.getNode());\n    promise.then((controller: PiPWindow.PiPController) => {\n      this.pipController = controller;\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\n      this.pipController.setAutoStartEnabled(true)\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) => {\n        this.onStateChange(state, reason);\n      });\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) => {\n        this.onActionEvent(control);\n      });\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤2：启动画中画\n  startPip() {\n    this.pipController?.startPiP().then(() => {\n      console.info(TAG, `Succeeded in starting pip.`);\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤3：更新媒体源尺寸信息\n  updateContentSize(width: number, height: number) {\n    if (this.pipController) {\n      this.pipController.updateContentSize(width, height);\n    }\n  }\n\n  // 步骤4：关闭画中画\n  stopPip() {\n    if (this.pipController) {\n      let promise: Promise<void> = this.pipController.stopPiP();\n      promise.then(() => {\n        console.info(TAG, `Succeeded in stopping pip.`);\n      }).catch((err: BusinessError) => {\n        console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\n      });\n    }\n  }\n\n  getNodeController(): XCNodeController {\n    console.info(TAG, `getNodeController.`);\n    return this.xcNodeController;\n  }\n\n  setAutoStart(autoStart: boolean): void {\n    this.pipController?.setAutoStartEnabled(autoStart);\n  }\n\n  removeNode(): void {\n    this.xcNodeController.removeNode();\n  }\n\n  addNode(): void {\n    this.xcNodeController.addNode();\n  }\n}
// model/XCNodeController.ets\nimport { FrameNode, NodeController, typeNode } from '@kit.ArkUI';\nimport { PipManager } from './PipManager';\n\nconst TAG = 'XCNodeController';\n// 创建自定义NodeController\nexport class XCNodeController extends NodeController {\n  xComponent: typeNode.XComponent | null = null;\n  private node: FrameNode | null = null;\n  private canAddNode: boolean = true;\n\n  // 设置是否可以添加节点\n  setCanAddNode(canAddNode: boolean) {\n    this.canAddNode = canAddNode;\n  }\n\n  // 实现makeNode方法，当自定义NodeController被添加到布局时，该方法会被调用\n  makeNode(context: UIContext): FrameNode | null {\n    this.node = new FrameNode(context);\n    this.node.commonAttribute\n    if (this.xComponent === null || this.xComponent === undefined) {\n      // 创建typeNode\n      // let xc_options: XComponentOptions = {\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      // }\n      // this.xComponent = typeNode.createNode(context, \"XComponent\", xc_options);\n\n      // 创建XComponent类型的typeNode\n      this.xComponent = typeNode.createNode(context, \"XComponent\", {\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      });\n    }\n    if (this.canAddNode) {\n      this.xComponent.getParent()?.removeChild(this.xComponent);\n      this.node.appendChild(this.xComponent);\n    }\n    return this.node;\n  }\n\n  // 重新添加typeNode节点\n  addNode() {\n    if (this.node !== null && this.node !== undefined) {\n      console.info(TAG, \"addNode\");\n      this.node.appendChild(this.xComponent);\n    }\n  }\n\n  // 移除typeNode节点\n  removeNode() {\n    if (this.node !== null && this.node !== undefined) {\n      console.info(TAG, \"removeNode\");\n      this.node.removeChild(this.xComponent);\n    }\n  }\n\n  getNode(): typeNode.XComponent | null {\n    console.info(TAG, \"getNode is null:\"+ (this.xComponent === null || this.xComponent === undefined))\n    return this.xComponent;\n  }\n}
以上示例代码对应的示意图如下所示：
应用使用Navigation导航时通过typeNode实现画中画功能
创建画中画控制器，注册生命周期事件以及控制事件回调。创建自定义NodeController，实现makeNode方法，在该方法中创建typeNode。通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。 启动画中画。创建画中画控制器实例后，通过startPiP接口启动画中画，在画中画ABOUT_TO_START生命周期将typeNode节点从布局移除，并返回上级界面（可选）。如果启动画中画时返回了上级界面，需要在画中画ABOUT_TO_RESTORE（还原）时重新跳转到原界面。 更新媒体源尺寸信息。画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。 关闭画中画。当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画，在画中画ABOUT_TO_STOP生命周期将typeNode节点重新添加到布局中。 
// EntryAbility.ets\nimport { UIAbility } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    windowStage.loadContent('pages/Index', (err) => {\n      // ...\n    });\n  }\n}
// pages/Index.ets\nimport { PipManager } from '../model/PipManager';\nimport { Page1 } from \"../pages/Page1\"\nimport { PiPWindow } from '@kit.ArkUI';\n\nconst TAG = 'Index1';\n\n@Entry\n@Component\nstruct Index {\n  @Provide('pageInfos') pageInfos: NavPathStack = new NavPathStack();\n  // 画中画生命周期事件监听，用于页面及节点操作\n  private callback: Function = (state: PiPWindow.PiPState) => {\n    console.info(TAG, `pipStateChange: state ${state}`);\n    if (state === PiPWindow.PiPState.ABOUT_TO_START) {\n      // 返回到上级页面（可选）\n      this.pageInfos.pop();\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_STOP) {\n      // 重新将typeNode节点添加到布局中，例如还原场景\n      PipManager.getInstance().addNode();\n    } else if (state === PiPWindow.PiPState.ABOUT_TO_RESTORE) {\n      // 如果在ABOUT_TO_START时返回了上级界面，需要还原时push到原界面\n      this.jumpNext();\n    }\n  };\n\n  jumpNext() {\n    if (this.pageInfos.getAllPathName()[0] === 'Page1') {\n      console.log(TAG, 'Page1 already at top');\n      return;\n    }\n    this.pageInfos.pushPath({ name: 'Page1' });\n  }\n\n  aboutToAppear(): void {\n    PipManager.getInstance().registerLifecycleCallback(this.callback);\n  }\n\n  aboutToDisappear(): void {\n    PipManager.getInstance().unregisterPipStateChangeListener();\n    PipManager.getInstance().unRegisterLifecycleCallback(this.callback);\n  }\n\n  @Builder\n  PageMap(name: string) {\n    if (name === 'Page1') {\n      Page1();\n    }\n  }\n\n  build() {\n    Navigation(this.pageInfos) {\n      Column() {\n        Text(\"This is Main Page\")\n        Column()\n          .height('200px')\n        Row({ space: 12 }) {\n          Button(\"Jump Page1\")\n            .width('80%')\n            .height(40)\n            .margin(20)\n            .onClick(() => {\n              this.jumpNext();\n            })\n        }\n      }\n      .height(\"100%\")\n      .width(\"100%\")\n      .justifyContent(FlexAlign.Center)\n      .backgroundColor(\"#DCDCDC\")\n    }.title('MainTitle')\n    .navDestination(this.PageMap)\n  }\n}
// pages/Page1.ets\nimport { PipManager } from '../model/PipManager';\n\nconst TAG = 'Page1';\n\n@Component\nexport struct Page1 {\n  build() {\n    NavDestination() {\n      Column() {\n        Text('This is Page1')\n          .fontSize(30)\n          .fontWeight(FontWeight.Bold)\n          .margin({bottom: 20})\n\n        // 将typeNode添加到页面布局中\n        NodeContainer(PipManager.getInstance().getNodeController())\n          .size({ width: '100%', height: '800px' })\n\n        Row({ space: 20 }) {\n          Button('startPip') // 启动画中画\n            .onClick(() => {\n              PipManager.getInstance().startPip();\n            })\n          Button('stopPip') // 停止画中画\n            .onClick(() => {\n              PipManager.getInstance().stopPip();\n            })\n          Button('updateSize') // 更新视频尺寸\n            .onClick(() => {\n              // 此处设置的宽高应为媒体内容宽高，需要通过媒体相关接口或回调获取\n              // 例如使用AVPlayer播放视频时，可通过videoSizeChange回调获取媒体源更新后的尺寸\n              PipManager.getInstance().updateContentSize(900, 1600);\n            })\n        }\n        .backgroundColor('#4da99797')\n        .size({ width: '100%', height: 60 })\n        .justifyContent(FlexAlign.SpaceAround)\n      }\n      .justifyContent(FlexAlign.Center)\n      .width('100%')\n      .height('100%')\n    }\n    .title('page1')\n    .onShown(()=>{\n      console.info(TAG, 'onShown')\n      PipManager.getInstance().init(getContext(this));\n      PipManager.getInstance().setAutoStart(true);\n    })\n    .onHidden(()=>{\n      console.info(TAG, 'onHidden')\n      PipManager.getInstance().setAutoStart(false);\n      PipManager.getInstance().removeNode();\n    })\n  }\n}
// model/XCNodeController.ets\nimport { FrameNode, NodeController, typeNode } from '@kit.ArkUI';\nimport { PipManager } from './PipManager';\n\nconst TAG = 'XCNodeController';\n\n// 创建自定义NodeController\nexport class XCNodeController extends NodeController {\n  xComponent: typeNode.XComponent| null = null;\n  private node: FrameNode | null = null;\n  private canAddNode: boolean = true;\n\n  // 设置是否可以添加节点\n  setCanAddNode(canAddNode: boolean) {\n    this.canAddNode = canAddNode;\n  }\n\n  // 实现makeNode方法，当自定义NodeController被添加到布局时，该方法会被调用\n  makeNode(context: UIContext): FrameNode | null {\n    console.info(TAG, \"makeNode\");\n    this.node = new FrameNode(context);\n    if (this.xComponent === null || this.xComponent === undefined) {\n      // 创建typeNode\n      // let xc_options: XComponentOptions = {\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      // }\n      // this.xComponent = typeNode.createNode(context, \"XComponent\", xc_options);\n\n      // 创建XComponent类型的typeNode\n      this.xComponent = typeNode.createNode(context, \"XComponent\", {\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      });\n    }\n    if (this.canAddNode) {\n      this.xComponent.getParent()?.removeChild(this.xComponent);\n      this.node.appendChild(this.xComponent);\n    }\n    return this.node;\n  }\n\n  // 重新添加typeNode节点\n  addNode() {\n    if (this.node !== null && this.node !== undefined) {\n      console.info(TAG, \"addNode id:\"+(this.node?.getUniqueId())+\" \"+this.xComponent?.getUniqueId());\n      this.node.appendChild(this.xComponent);\n    }\n  }\n\n  // 移除typeNode节点\n  removeNode() {\n    if (this.node !== null && this.node !== undefined) {\n      console.info(TAG, \"removeNode\");\n      this.node.removeChild(this.xComponent);\n    }\n  }\n\n  getNode(): typeNode.XComponent | null {\n    console.info(TAG, \"getNode is null:\"+ (this.xComponent === null || this.xComponent === undefined))\n    return this.xComponent;\n  }\n}
// model/PipManager.ets\nimport { PiPWindow, typeNode } from '@kit.ArkUI';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { XCNodeController } from './XCNodeController';\nimport { AVPlayer } from './AVPlayer'\n\nexport class CustomXComponentController extends XComponentController {\n  onSurfaceCreated(surfaceId: string): void {\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\n      return;\n    }\n    // 将surfaceId设置给媒体源\n    PipManager.getInstance().player.surfaceID = surfaceId;\n    PipManager.getInstance().player.avPlayerFdSrc();\n  }\n\n  onSurfaceDestroyed(surfaceId: string): void {\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\n  }\n}\n\nconst TAG = 'PipManager';\n\nexport class PipManager {\n  private static instance: PipManager = new PipManager();\n  private pipController?: PiPWindow.PiPController = undefined;\n  private xcNodeController: XCNodeController;\n  private mXComponentController: XComponentController;\n  private lifeCycleCallback: Set<Function> = new Set();\n  player: AVPlayer;\n\n  public static getInstance(): PipManager {\n    return PipManager.instance;\n  }\n\n  constructor() {\n    this.xcNodeController = new XCNodeController();\n    this.player = new AVPlayer();\n    this.mXComponentController = new CustomXComponentController();\n  }\n\n  public registerLifecycleCallback(callBack: Function) {\n    this.lifeCycleCallback.add(callBack);\n  }\n\n  public unRegisterLifecycleCallback(callBack: Function): void {\n    this.lifeCycleCallback.delete(callBack);\n  }\n\n  getNode(): typeNode.XComponent | null {\n    return this.xcNodeController.getNode();\n  }\n\n  onActionEvent(control: PiPWindow.ControlEventParam) {\n    switch (control.controlType) {\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\n          //停止视频\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\n          //播放视频\n        }\n        break;\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\n        // 切换到下一个视频\n        break;\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\n        // 切换到上一个视频\n        break;\n      case PiPWindow.PiPControlType.FAST_FORWARD:\n        // 视频进度快进\n        break;\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\n        // 视频进度后退\n        break;\n      default:\n        break;\n    }\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\n  }\n\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\n    let curState: string = '';\n    this.xcNodeController.setCanAddNode(\n      state === PiPWindow.PiPState.ABOUT_TO_STOP || state === PiPWindow.PiPState.STOPPED)\n    if (this.lifeCycleCallback !== null) {\n      this.lifeCycleCallback.forEach((fun) => {\n        fun(state);\n      });\n    }\n    switch (state) {\n      case PiPWindow.PiPState.ABOUT_TO_START:\n        curState = \"ABOUT_TO_START\";\n        // 将typeNode节点从布局移除\n        this.xcNodeController.removeNode();\n        break;\n      case PiPWindow.PiPState.STARTED:\n        curState = \"STARTED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\n        curState = \"ABOUT_TO_STOP\";\n        break;\n      case PiPWindow.PiPState.STOPPED:\n        curState = \"STOPPED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\n        curState = \"ABOUT_TO_RESTORE\";\n        break;\n      case PiPWindow.PiPState.ERROR:\n        curState = \"ERROR\";\n        break;\n      default:\n        break;\n    }\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\n  }\n\n  unregisterPipStateChangeListener() {\n    console.info(`${TAG} aboutToDisappear`);\n    this.pipController?.off('stateChange');\n    this.pipController?.off('controlEvent');\n  }\n\n  getXComponentController(): CustomXComponentController {\n    return this.mXComponentController;\n  }\n\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\n  init(ctx: Context) {\n    if (this.pipController !== null && this.pipController != undefined) {\n      return;\n    }\n    console.info(`${TAG} onPageShow`)\n    if (!PiPWindow.isPiPEnabled()) {\n      console.error(TAG, `picture in picture disabled for current OS`);\n      return;\n    }\n\n    let config: PiPWindow.PiPConfiguration = {\n      context: ctx,\n      componentController: this.getXComponentController(),\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则创建画中画失败\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则创建画中画失败\n    };\n    // 通过create接口创建画中画控制器实例\n    let promise: Promise<PiPWindow.PiPController> = PiPWindow.create(config, this.xcNodeController.getNode());\n    promise.then((controller: PiPWindow.PiPController) => {\n      this.pipController = controller;\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\n      this.pipController?.setAutoStartEnabled(true);\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) => {\n        this.onStateChange(state, reason);\n      });\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) => {\n        this.onActionEvent(control);\n      });\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤2：启动画中画\n  startPip() {\n    this.pipController?.startPiP().then(() => {\n      console.info(TAG, `Succeeded in starting pip.`);\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤3：更新媒体源尺寸信息\n  updateContentSize(width: number, height: number) {\n    if (this.pipController) {\n      this.pipController.updateContentSize(width, height);\n    }\n  }\n\n  // 步骤4：关闭画中画\n  stopPip() {\n    if (this.pipController === null || this.pipController === undefined) {\n      return;\n    }\n    let promise: Promise<void> = this.pipController.stopPiP();\n    promise.then(() => {\n      console.info(TAG, `Succeeded in stopping pip.`);\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  getNodeController(): XCNodeController {\n    console.info(TAG, `getNodeController.`);\n    return this.xcNodeController;\n  }\n\n  setAutoStart(autoStart: boolean): void {\n    this.pipController?.setAutoStartEnabled(autoStart);\n  }\n\n  removeNode() {\n    this.xcNodeController.removeNode();\n  }\n\n  addNode(): void {\n    this.xcNodeController.addNode();\n  }\n}
以上示例代码对应的示意图如下所示：
应用使用单界面Ability时通过typeNode实现画中画功能
创建画中画控制器，注册生命周期事件以及控制事件回调。创建自定义NodeController，实现makeNode方法，在该方法中创建typeNode。通过create(config: PiPConfiguration, contentNode: typeNode.XComponent)接口创建画中画控制器实例。通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画。通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调。通过画中画控制器实例的on('controlEvent')接口注册控制事件回调。 启动画中画。创建画中画控制器实例后，通过startPiP接口启动画中画，在画中画ABOUT_TO_START生命周期将typeNode节点从布局移除。 更新媒体源尺寸信息。画中画媒体源更新后（如切换视频），通过画中画控制器实例的updateContentSize接口更新媒体源尺寸信息，以调整画中画窗口比例。 关闭画中画。当不再需要显示画中画时，可根据业务需要，通过画中画控制器实例的stopPiP接口关闭画中画，在画中画ABOUT_TO_STOP生命周期将typeNode节点重新添加到布局中。 
// EntryAbility.ets\nimport { UIAbility } from '@kit.AbilityKit';\nimport { window } from '@kit.ArkUI';\n\nexport default class EntryAbility extends UIAbility {\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    windowStage.loadContent('pages/Index', (err) => {\n      // ...\n    });\n  }\n}
// pages/Index.ets\nimport { PipManager } from '../model/PipManager';\nimport { PiPWindow } from '@kit.ArkUI'; // 引入PiPWindow模块\n\nconst TAG = 'Index'\n@Entry\n@Component\nstruct Index {\n  private callback: Function = (state: PiPWindow.PiPState) => {\n    if (state === PiPWindow.PiPState.ABOUT_TO_STOP) {\n      // 画中画关闭或还原时触发ABOUT_TO_STOP生命周期，此时需要重新添加节点\n      PipManager.getInstance().addNode();\n    }\n  };\n\n  build() {\n    Column() {\n      Text('This is MainPage')\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n        .margin({ bottom: 20 })\n\n      // 将typeNode添加到页面布局中\n      NodeContainer(PipManager.getInstance().getNodeController())\n        .size({ width: '100%', height: '800px' })\n\n      Row({ space: 20 }) {\n        Button('startPip') // 启动画中画\n          .onClick(() => {\n            PipManager.getInstance().startPip();\n          })\n\n        Button('stopPip') // 停止画中画\n          .onClick(() => {\n            PipManager.getInstance().stopPip();\n          })\n\n        Button('updateSize') // 更新视频尺寸\n          .onClick(() => {\n            // 此处设置的宽高应为媒体内容宽高，需要通过媒体相关接口或回调获取\n            // 例如使用AVPlayer播放视频时，可通过videoSizeChange回调获取媒体源更新后的尺寸\n            PipManager.getInstance().updateContentSize(900, 1600);\n          })\n      }\n      .backgroundColor('#4da99797')\n      .size({ width: '100%', height: 60 })\n      .justifyContent(FlexAlign.SpaceAround)\n    }\n    .justifyContent(FlexAlign.Center)\n    .width('100%')\n    .height('100%')\n  }\n\n  aboutToAppear(): void {\n    PipManager.getInstance().registerLifecycleCallback(this.callback);\n  }\n\n  aboutToDisappear(): void {\n    PipManager.getInstance().unregisterPipStateChangeListener();\n    PipManager.getInstance().unRegisterLifecycleCallback(this.callback);\n  }\n\n  onPageShow(): void {\n    console.info(TAG, 'onPageShow')\n    PipManager.getInstance().init(getContext(this));\n    PipManager.getInstance().setAutoStart(true);\n  }\n\n  onPageHide(): void {\n    console.info(TAG, 'onPageHide')\n    PipManager.getInstance().setAutoStart(false);\n  }\n}
// model/XCNodeController.ets\nimport { FrameNode, NodeController, typeNode } from '@kit.ArkUI';\nimport { PipManager } from './PipManager';\n\nconst TAG = 'XCNodeController';\n\n// 创建自定义NodeController\nexport class XCNodeController extends NodeController {\n  xComponent: typeNode.XComponent | null = null;\n  private node: FrameNode | null = null;\n  private canAddNode: boolean = true;\n\n  // 设置是否可以添加节点\n  setCanAddNode(canAddNode: boolean) {\n    this.canAddNode = canAddNode;\n  }\n\n  // 实现makeNode方法，当自定义NodeController被添加到布局时，该方法会被调用\n  makeNode(context: UIContext): FrameNode | null {\n    this.node = new FrameNode(context);\n    this.node.commonAttribute\n    if (this.xComponent === null || this.xComponent === undefined) {\n      // 创建typeNode\n      // let xc_options: XComponentOptions = {\n      //   type: XComponentType.TEXTURE, // 类型设置为TEXTURE\n      //   controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      // }\n      // this.xComponent = typeNode.createNode(context, \"XComponent\", xc_options);\n\n      // 创建XComponent类型的typeNode\n      this.xComponent = typeNode.createNode(context, \"XComponent\", {\n        type: XComponentType.SURFACE, // 类型设置为SURFACE\n        controller: PipManager.getInstance().getXComponentController(), // 设置XComponentController\n      });\n    }\n    if (this.canAddNode) {\n      this.xComponent.getParent()?.removeChild(this.xComponent);\n      this.node.appendChild(this.xComponent);\n    }\n    return this.node;\n  }\n\n  // 重新添加typeNode节点\n  addNode() {\n    if (this.node !== null && this.node !== undefined) {\n      console.info(TAG, \"addNode\");\n      this.node.appendChild(this.xComponent);\n    }\n  }\n\n  // 移除typeNode节点\n  removeNode() {\n    if (this.node !== null && this.node !== undefined) {\n      console.info(TAG, \"removeNode\");\n      this.node.removeChild(this.xComponent);\n    }\n  }\n\n  getNode(): typeNode.XComponent | null {\n    console.info(TAG, \"getNode is null: \"+ (this.xComponent === null || this.xComponent === undefined));\n    return this.xComponent;\n  }\n}
// model/PipManager.ets\nimport { PiPWindow, typeNode } from '@kit.ArkUI'; // 引入PiPWindow模块\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { XCNodeController } from './XCNodeController';\nimport { AVPlayer} from '../model/AVPlayer'\n\n// 自定义XComponentController\nexport class CustomXComponentController extends XComponentController {\n  onSurfaceCreated(surfaceId: string): void {\n    console.log(TAG, `onSurfaceCreated surfaceId: ${surfaceId}`);\n    if (PipManager.getInstance().player.surfaceID === surfaceId) {\n      return;\n    }\n    PipManager.getInstance().player.surfaceID = surfaceId;\n    PipManager.getInstance().player.avPlayerFdSrc();\n  }\n\n  onSurfaceDestroyed(surfaceId: string): void {\n    console.log(TAG, `onSurfaceDestroyed surfaceId: ${surfaceId}`);\n  }\n}\n\nconst TAG = 'PipManager';\n\nexport class PipManager {\n  private static instance: PipManager = new PipManager();\n  private pipController?: PiPWindow.PiPController = undefined;\n  private xcNodeController: XCNodeController;\n  private mXComponentController: XComponentController;\n  private lifeCycleCallback: Set<Function> = new Set();\n  player: AVPlayer;\n\n  public static getInstance(): PipManager {\n    return PipManager.instance;\n  }\n\n  constructor() {\n    this.xcNodeController = new XCNodeController();\n    this.player = new AVPlayer();\n    this.mXComponentController = new CustomXComponentController();\n  }\n\n  public registerLifecycleCallback(callBack: Function) {\n    this.lifeCycleCallback.add(callBack);\n  }\n\n  public unRegisterLifecycleCallback(callBack: Function): void {\n    this.lifeCycleCallback.delete(callBack);\n  }\n\n  getNode(): typeNode.XComponent | null {\n    return this.xcNodeController.getNode();\n  }\n\n  onActionEvent(control: PiPWindow.ControlEventParam) {\n    switch (control.controlType) {\n      case PiPWindow.PiPControlType.VIDEO_PLAY_PAUSE:\n        if (control.status === PiPWindow.PiPControlStatus.PAUSE) {\n          //停止视频\n        } else if (control.status === PiPWindow.PiPControlStatus.PLAY) {\n          //播放视频\n        }\n        break;\n      case PiPWindow.PiPControlType.VIDEO_NEXT:\n        // 切换到下一个视频\n        break;\n      case PiPWindow.PiPControlType.VIDEO_PREVIOUS:\n        // 切换到上一个视频\n        break;\n      case PiPWindow.PiPControlType.FAST_FORWARD:\n        // 视频进度快进\n        break;\n      case PiPWindow.PiPControlType.FAST_BACKWARD:\n        // 视频进度后退\n        break;\n      default:\n        break;\n    }\n    console.info('onActionEvent, controlType:' + control.controlType + ', status' + control.status);\n  }\n\n  onStateChange(state: PiPWindow.PiPState, reason: string) {\n    let curState: string = '';\n    this.xcNodeController.setCanAddNode(\n      state === PiPWindow.PiPState.ABOUT_TO_STOP || state === PiPWindow.PiPState.STOPPED);\n    if (this.lifeCycleCallback !== null) {\n      this.lifeCycleCallback.forEach((fun) => {\n        fun(state);\n      });\n    }\n    switch (state) {\n      case PiPWindow.PiPState.ABOUT_TO_START:\n        curState = \"ABOUT_TO_START\";\n        // 将typeNode节点从布局移除\n        this.xcNodeController.removeNode();\n        break;\n      case PiPWindow.PiPState.STARTED:\n        curState = \"STARTED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_STOP:\n        curState = \"ABOUT_TO_STOP\";\n        break;\n      case PiPWindow.PiPState.STOPPED:\n        curState = \"STOPPED\";\n        break;\n      case PiPWindow.PiPState.ABOUT_TO_RESTORE:\n        curState = \"ABOUT_TO_RESTORE\";\n        break;\n      case PiPWindow.PiPState.ERROR:\n        curState = \"ERROR\";\n        break;\n      default:\n        break;\n    }\n    console.info(`[${TAG}] onStateChange: ${curState}, reason: ${reason}`);\n  }\n\n  unregisterPipStateChangeListener() {\n    console.info(`${TAG} aboutToDisappear`);\n    this.pipController?.off('stateChange');\n    this.pipController?.off('controlEvent');\n  }\n\n  getXComponentController(): CustomXComponentController {\n    return this.mXComponentController;\n  }\n\n  // 步骤1：创建画中画控制器，注册生命周期事件以及控制事件回调\n  init(ctx: Context) {\n    if (this.pipController !== null && this.pipController != undefined) {\n      return;\n    }\n    console.info(`${TAG} onPageShow`)\n    if (!PiPWindow.isPiPEnabled()) {\n      console.error(TAG, `picture in picture disabled for current OS`);\n      return;\n    }\n    let config: PiPWindow.PiPConfiguration = {\n      context: ctx,\n      componentController: this.getXComponentController(),\n      templateType: PiPWindow.PiPTemplateType.VIDEO_PLAY,\n      contentWidth: 1920, // 使用typeNode启动画中画时，contentWidth需设置为大于0的值，否则创建画中画失败\n      contentHeight: 1080, // 使用typeNode启动画中画时，contentHeight需设置为大于0的值，否则创建画中画失败\n    };\n    // 通过create接口创建画中画控制器实例\n    let promise: Promise<PiPWindow.PiPController> = PiPWindow.create(config, this.xcNodeController.getNode());\n    promise.then((controller: PiPWindow.PiPController) => {\n      this.pipController = controller;\n      // 通过画中画控制器实例的setAutoStartEnabled接口设置是否需要在应用返回桌面时自动启动画中画\n      this.pipController?.setAutoStartEnabled(true);\n      // 通过画中画控制器实例的on('stateChange')接口注册生命周期事件回调\n      this.pipController.on('stateChange', (state: PiPWindow.PiPState, reason: string) => {\n        this.onStateChange(state, reason);\n      });\n      // 通过画中画控制器实例的on('controlEvent')接口注册控制事件回调\n      this.pipController.on('controlEvent', (control: PiPWindow.ControlEventParam) => {\n        this.onActionEvent(control);\n      });\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to create pip controller. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤2：启动画中画\n  startPip() {\n    this.pipController?.startPiP().then(() => {\n      console.info(TAG, `Succeeded in starting pip.`);\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to start pip. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  // 步骤3：更新媒体源尺寸信息\n  updateContentSize(width: number, height: number) {\n    if (this.pipController) {\n      this.pipController.updateContentSize(width, height);\n    }\n  }\n\n  // 步骤4：关闭画中画\n  stopPip() {\n    if (this.pipController === null || this.pipController === undefined) {\n      return;\n    }\n    let promise: Promise<void> = this.pipController.stopPiP();\n    promise.then(() => {\n      console.info(TAG, `Succeeded in stopping pip.`);\n    }).catch((err: BusinessError) => {\n      console.error(TAG, `Failed to stop pip. Cause:${err.code}, message:${err.message}`);\n    });\n  }\n\n  getNodeController(): XCNodeController {\n    console.info(TAG, `getNodeController.`);\n    return this.xcNodeController;\n  }\n\n  setAutoStart(autoStart: boolean): void {\n    this.pipController?.setAutoStartEnabled(autoStart);\n  }\n\n  // 将typeNode节点添加到原父节点\n  addNode(): void {\n    this.xcNodeController.addNode();\n  }\n}
以上示例代码对应的示意图如下所示：
