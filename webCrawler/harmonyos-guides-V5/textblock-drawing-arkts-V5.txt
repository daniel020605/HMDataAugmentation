字块绘制（ArkTS）
场景介绍
字块（TextBlob）是指文本的集合。无论是单个的文字还是大块的文本，都可以通过字块来绘制。
本节聚焦于文字的绘制效果，除了基本的字块绘制之外，还可以给文字添加各种绘制效果。常见的字块绘制场景包括文字描边、文字渐变等，更多效果请见绘制效果。
基本字块绘制
Canvas通过drawTextBlob()来绘制字块。函数接受三个参数：TextBlob字块对象，以及文字基线左端点的x坐标和y坐标。
画布Canvas对象具体可见画布的获取与绘制结果的显示（ArkTS）。
字块对象可以通过多种方式创建得到，详细的字块创建方式和接口使用请参考TextBlob。
此处以使用makeFromString()接口创建字块为例，接口接受3个参数，分别为：
 需要显示的字符串text。 font字型对象。其中font用于设置和获取字体的各种属性，如字体大小、文本样式、字体对齐方式、字体渲染方式、字体描边方式等，详细的API介绍请参考Font。 文本编码方式。当前支持的文本编码方式如下：  TEXT_ENCODING_UTF8：使用1个字节表示UTF-8或ASCII； TEXT_ENCODING_UTF16：使用2个字节表示大部分unicode； TEXT_ENCODING_UTF32：使用4个字节表示全部unicode； TEXT_ENCODING_GLYPH_ID：使用2个字节表示glyph index。  
基本效果的示例代码和效果图如下：
// 创建字型对象\nconst font = new drawing.Font();\n// 设置字体大小\nfont.setSize(100);\n// 创建字块对象\nconst textBlob = drawing.TextBlob.makeFromString(\"Hello world\", font, drawing.TextEncoding.TEXT_ENCODING_UTF8);\n// 绘制字块\ncanvas.drawTextBlob(textBlob, 200, 300);
文字描边
基于基本的字块绘制，还可以通过画笔实现文字描边效果，描边效果的更多介绍请参考描边效果。
文字描边的简要示例和示意图如下：
// 创建画笔\nlet pen = new drawing.Pen();\n// 设置抗锯齿\npen.setAntiAlias(true);\n// 设置描边线宽\npen.setStrokeWidth(3.0);\n// 设置描边颜色\npen.setColor(0xFF, 0xFF,  0x00, 0x00);\n// 创建字型对象\nconst font = new drawing.Font();\n// 设置字体大小\nfont.setSize(100);\n// 添加画笔描边效果\ncanvas.attachPen(pen);\n// 创建字块对象\nconst textBlob = drawing.TextBlob.makeFromString(\"Hello world\", font, drawing.TextEncoding.TEXT_ENCODING_UTF8);\n// 绘制字块\ncanvas.drawTextBlob(textBlob, 200, 300);\n// 去除描边效果\ncanvas.detachPen();
文字渐变
基于基本字块绘制，还可以通过着色器实现文字渐变的效果，着色器的更多介绍请参考着色器效果。
以下为文字添加了线性渐变着色器效果的简要示例和示意图：
let startPt: common2D.Point = { x: 100, y: 100 };\nlet endPt: common2D.Point = { x: 900, y: 900 };\nlet colors = [0xFFFFFF00, 0xFFFF0000, 0xFF0000FF];\n// 创建线性渐变着色器\nlet shaderEffect = drawing.ShaderEffect.createLinearGradient(startPt, endPt, colors, drawing.TileMode.CLAMP);\n// 创建画刷\nlet brush = new drawing.Brush();\n// 设置着色器\nbrush.setShaderEffect(shaderEffect);\n// 添加画刷填充效果\ncanvas.attachBrush(brush);\n// 创建字型\nconst font = new drawing.Font();\n// 设置字体大小\nfont.setSize(200);\n// 创建字块\nconst textBlob = drawing.TextBlob.makeFromString(\"Hello world\", font, drawing.TextEncoding.TEXT_ENCODING_UTF8);\n// 绘制字块\ncanvas.drawTextBlob(textBlob, 100, 300);\n// 去除填充效果\ncanvas.detachBrush();
