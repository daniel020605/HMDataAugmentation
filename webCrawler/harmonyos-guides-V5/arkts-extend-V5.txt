@Extend装饰器：定义扩展组件样式
在前文的示例中，可以使用@Styles用于样式的重用，在@Styles的基础上，我们提供了@Extend，用于扩展原生组件样式。
从API version 9开始，该装饰器支持在ArkTS卡片中使用。
从API version 11开始，该装饰器支持在元服务中使用。
装饰器使用说明
[h2]语法
@Extend(UIComponentName) function functionName { ... }
[h2]使用规则
 和@Styles不同，@Extend支持封装指定组件的私有属性、私有事件和自身定义的全局方法。 // @Extend(Text)可以支持Text的私有属性fontColor\n@Extend(Text) function fancy () {\n  .fontColor(Color.Red)\n}\n// superFancyText可以调用预定义的fancy\n@Extend(Text) function superFancyText(size:number) {\n    .fontSize(size)\n    .fancy()\n} 和@Styles不同，@Extend装饰的方法支持参数，开发者可以在调用时传递参数，调用遵循TS方法传值调用。 // xxx.ets\n@Extend(Text) function fancy (fontSize: number) {\n  .fontColor(Color.Red)\n  .fontSize(fontSize)\n}\n\n@Entry\n@Component\nstruct FancyUse {\n  build() {\n    Row({ space: 10 }) {\n      Text('Fancy')\n        .fancy(16)\n      Text('Fancy')\n        .fancy(24)\n    }\n  }\n} @Extend装饰的方法的参数可以为function，作为Event事件的句柄。 @Extend(Text) function makeMeClick(onClick: () => void) {\n  .backgroundColor(Color.Blue)\n  .onClick(onClick)\n}\n\n@Entry\n@Component\nstruct FancyUse {\n  @State label: string = 'Hello World';\n\n  onClickHandler() {\n    this.label = 'Hello ArkUI';\n  }\n\n  build() {\n    Row({ space: 10 }) {\n      Text(`${this.label}`)\n        .makeMeClick(() => {this.onClickHandler()})\n    }\n  }\n} @Extend的参数可以为状态变量，当状态变量改变时，UI可以正常的被刷新渲染。 @Extend(Text) function fancy (fontSize: number) {\n  .fontColor(Color.Red)\n  .fontSize(fontSize)\n}\n\n@Entry\n@Component\nstruct FancyUse {\n  @State fontSizeValue: number = 20\n  build() {\n    Row({ space: 10 }) {\n      Text('Fancy')\n        .fancy(this.fontSizeValue)\n        .onClick(() => {\n          this.fontSizeValue = 30\n        })\n    }\n  }\n} 
限制条件
 和@Styles不同，@Extend仅支持在全局定义，不支持在组件内部定义。 
只能在当前文件内使用，不支持export。
如果想实现export功能，推荐使用AttributeModifier。
【反例】
@Entry\n@Component\nstruct FancyUse {\n  // 错误写法，@Extend仅支持在全局定义，不支持在组件内部定义\n  @Extend(Text) function fancy (fontSize: number) {\n    .fontSize(fontSize)\n  }\n\n  build() {\n    Row({ space: 10 }) {\n      Text('Fancy')\n        .fancy(16)\n    }\n  }\n}
【正例】
// 正确写法\n@Extend(Text) function fancy (fontSize: number) {\n  .fontSize(fontSize)\n}\n\n@Entry\n@Component\nstruct FancyUse {\n\n  build() {\n    Row({ space: 10 }) {\n      Text('Fancy')\n        .fancy(16)\n    }\n  }\n}
使用场景
以下示例声明了3个Text组件，每个Text组件均设置了fontStyle、fontWeight和backgroundColor样式。
@Entry\n@Component\nstruct FancyUse {\n  @State label: string = 'Hello World'\n\n  build() {\n    Row({ space: 10 }) {\n      Text(`${this.label}`)\n        .fontStyle(FontStyle.Italic)\n        .fontWeight(100)\n        .backgroundColor(Color.Blue)\n      Text(`${this.label}`)\n        .fontStyle(FontStyle.Italic)\n        .fontWeight(200)\n        .backgroundColor(Color.Pink)\n      Text(`${this.label}`)\n        .fontStyle(FontStyle.Italic)\n        .fontWeight(300)\n        .backgroundColor(Color.Orange)\n    }.margin('20%')\n  }\n}
@Extend将样式组合复用，示例如下。
@Extend(Text) function fancyText(weightValue: number, color: Color) {\n  .fontStyle(FontStyle.Italic)\n  .fontWeight(weightValue)\n  .backgroundColor(color)\n}
通过@Extend组合样式后，使得代码更加简洁，增强可读性。
@Entry\n@Component\nstruct FancyUse {\n  @State label: string = 'Hello World'\n\n  build() {\n    Row({ space: 10 }) {\n      Text(`${this.label}`)\n        .fancyText(100, Color.Blue)\n      Text(`${this.label}`)\n        .fancyText(200, Color.Pink)\n      Text(`${this.label}`)\n        .fancyText(300, Color.Orange)\n    }.margin('20%')\n  }\n}
