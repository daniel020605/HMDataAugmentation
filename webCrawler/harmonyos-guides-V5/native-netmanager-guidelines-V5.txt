NetConnection开发指导
场景介绍
NetConnection模块提供了常用网络信息查询的能力。
接口说明
NetConnection常用接口如下表所示，详细的接口说明请参考NetConnection
网络管理接口开发示例
[h2]开发步骤
使用本文档涉及接口获取网络相关信息时，需先创建Native C++工程，在源文件中将相关接口封装，再在ArkTs层对封装的接口进行调用，使用hilog或者console.log等手段选择打印在控制台或者生成设备日志。
本文以实现获取默认激活的数据网络为例，给出具体的开发指导。
[h2]添加开发依赖
添加动态链接库
CMakeLists.txt中添加以下lib:
libace_napi.z.so\nlibnet_connection.so
头文件
#include \"napi/native_api.h\"\n#include \"network/netmanager/net_connection.h\"\n#include \"network/netmanager/net_connection_type.h\"
[h2]构建工程
1、在源文件中编写调用该API的代码，并将结果封装成一个napi_value类型的值返回给 Node.js 环境。
// Get the execution results of the default network connection.\nstatic napi_value GetDefaultNet(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    int32_t param;\n    napi_get_value_int32(env, args[0], &param);\n\n    NetConn_NetHandle netHandle;\n    if (param== 0) {\n        param= OH_NetConn_GetDefaultNet(NULL);\n    } else {\n        param= OH_NetConn_GetDefaultNet(&netHandle);\n    }\n    \n    napi_value result;\n    napi_create_int32(env, param, &result);\n    return result;\n}\n\n// Get the ID of the default network connection.\nstatic napi_value NetId(napi_env env, napi_callback_info info) {\n    int32_t defaultNetId;\n\n    NetConn_NetHandle netHandle;\n    OH_NetConn_GetDefaultNet(&netHandle);\n    defaultNetId = netHandle.netId; // Get the default netId\n\n    napi_value result;\n    napi_create_int32(env, defaultNetId, &result);\n\n    return result;\n}
简要说明：这两个函数是用于获取系统默认网络连接的相关信息的。其中，GetDefaultNet是接收ArkTs端传入的测试参数，返回调用接口后对应的返回值，param可以自行调整；如果返回值为0，代表获取成功，401代表参数错误，201代表没有权限；而NetId函数则用于获取默认网络连接的ID。这些信息可以用于进一步的网络操作。
2、将通过napi封装好的napi_value类型对象初始化导出，通过外部函数接口，将以上两个函数暴露给JavaScript使用。
EXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    // Information used to describe an exported attribute. Two properties are defined here: `GetDefaultNet` and `NetId`.\n    napi_property_descriptor desc[] = {\n        {\"GetDefaultNet\", nullptr, GetDefaultNet, nullptr, nullptr, nullptr, napi_default, nullptr},\n        {\"NetId\", nullptr, NetId, nullptr, nullptr, nullptr, napi_default, nullptr}};\n    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\n    return exports;\n}\nEXTERN_C_END
3、将上一步中初始化成功的对象通过RegisterEntryModule函数，使用napi_module_register函数将模块注册到 Node.js 中。
static napi_module demoModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = ((void*)0),\n    .reserved = { 0 },\n};\n\nextern \"C\" __attribute__((constructor)) void RegisterEntryModule(void)\n{\n    napi_module_register(&demoModule);\n}
4、在工程的index.d.ts文件中定义两个函数的类型。
 GetDefaultNet 函数接受一个数字参数 code，返回一个数字类型的值。 NetId 函数不接受参数，返回一个数字类型的值。 
export const GetDefaultNet: (code: number) => number;\nexport const NetId: () => number;
5、在index.ets文件中对上述封装好的接口进行调用。
import testNetManager from 'libentry.so';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = '';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        Button('GetDefaultNet').onClick(event => {\n          this.GetDefaultNet();\n        })\n        Button('CodeNumber').onClick(event =>{\n          this.CodeNumber();\n        })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n\n  GetDefaultNet() {\n    let netid = testNetManager.NetId();\n    console.log(\"The defaultNetId is [\" + netid + \"]\");\n  }\n\n  CodeNumber() {\n    let testParam = 0;\n    let codeNumber = testNetManager.GetDefaultNet(testParam);\n    if (codeNumber === 0) {\n      console.log(\"Test success. [\" + codeNumber + \"]\");\n    } else if (codeNumber === 201) {\n      console.log(\"Missing permissions. [\" + codeNumber + \"]\");\n    } else if (codeNumber === 401) {\n      console.log(\"Parameter error. [\" + codeNumber + \"]\");\n    }\n  }\n}
6、配置CMakeLists.txt，本模块需要用到的共享库是libnet_connection.so，在工程自动生成的CMakeLists.txt中的target_link_libraries中添加此共享库。
注意：如图所示，在add_library中的entry是工程自动生成的modename，若要做修改，需和步骤3中.nm_modname保持一致；
经过以上步骤，整个工程的搭建已经完成，接下来就可以连接设备运行工程进行日志查看了。
测试步骤
1、连接设备，使用DevEco Studio打开搭建好的工程。
2、运行工程，设备上会弹出以下所示图片：
简要说明：
 在点击 GetDefaultNet 时，获取的是默认网络ID。 在点击 codeNumber 时，获取的是接口返回的响应状态码。 
3、点击 GetDefaultNet 按钮，控制台会打印日志：
4、点击 codeNumber 按钮，控制台会打印相应的响应状态码：
