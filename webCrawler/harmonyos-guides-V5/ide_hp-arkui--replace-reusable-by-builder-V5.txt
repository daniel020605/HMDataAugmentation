@performance/hp-arkui-replace-nested-reusable-component-by-builder
建议使用@Builder替代嵌套的自定义组件。
通用丢帧场景下，建议优先修改。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@performance/hp-arkui-replace-nested-reusable-component-by-builder\": \"warn\",\n  }\n}
选项
该规则无需配置额外选项。
正例
// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\n\n@Entry\n@Component\nstruct MyComponent{\n  private data: MyDataSource = new MyDataSource();\n\n  aboutToAppear(): void {\n    for (let index = 0; index < 30; index++) {\n      this.data.pushData(index.toString())\n    }\n  }\n\n  build() {\n    Column() {\n      List() {\n        LazyForEach(this.data, (item: string) => {\n          ListItem() {\n            //  正例\n            ChildComponent({ desc: item })\n          }\n        }, (item: string) => item)\n      }\n      .height('100%')\n      .width('100%')\n    }\n    .width('100%')\n  }\n}\n\n// 正例 使用组件复用\n@Reusable\n@Component\nstruct ChildComponent {\n  @State desc: string = '';\n\n  aboutToReuse(params: Record<string, Object>): void {\n    this.desc = params.desc as string;\n  }\n\n  build() {\n    Column() {\n      // 使用@Builder，可以减少自定义组件创建和渲染的耗时\n      ChildComponentBuilder({ paramA: this.desc })\n    }\n    .width('100%')\n  }\n}\n\nclass Temp {\n  paramA: string = '';\n}\n\n@Builder\nfunction ChildComponentBuilder($$: Temp) {\n  Column() {\n    // 此处使用`${}`来进行按引用传递，让@Builder感知到数据变化，进行UI刷新\n    Text(`子组件 + ${$$.paramA}`)\n      .fontSize(30)\n      .fontWeight(30)\n  }\n  .width('100%')\n}
反例
// 源码文件，请以工程实际为准\nimport { MyDataSource } from './MyDataSource';\n\n@Entry\n@Component\nstruct MyComponent{\n  private data: MyDataSource = new MyDataSource();\n\n  aboutToAppear(): void {\n    for (let index = 0; index < 30; index++) {\n      this.data.pushData(index.toString())\n    }\n  }\n\n  build() {\n    Column() {\n      List() {\n        LazyForEach(this.data, (item: string) => {\n          ListItem() {\n            //反例 使用自定义组件\n            ComponentA({ desc: item })\n          }\n        }, (item: string) => item)\n      }\n      .height('100%')\n      .width('100%')\n    }\n  }\n}\n\n@Reusable\n@Component\nstruct ComponentA {\n  @State desc: string = '';\n\n  aboutToReuse(params: ESObject): void {\n    this.desc = params.desc as string;\n  }\n\n  build() {\n    // 在复用组件中嵌套使用自定义组件\n    ComponentB({ desc: this.desc })\n  }\n}\n\n\n@Component\nstruct ComponentB {\n  @State desc: string = '';\n\n  // 嵌套的组件中也需要实现aboutToReuse来进行UI的刷新\n  aboutToReuse(params: ESObject): void {\n    this.desc = params.desc as string;\n  }\n\n  build() {\n    Column() {\n      Text('子组件' + this.desc)\n        .fontSize(30)\n        .fontWeight(30)\n    }\n    .width('100%')\n  }\n}
规则集
plugin:@performance/recommended
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
