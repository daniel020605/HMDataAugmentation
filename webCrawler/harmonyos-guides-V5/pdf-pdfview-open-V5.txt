打开和保存PDF文档
场景介绍
通过加载本地路径的PDF文档，实现打开PDF文档的预览功能。当PDF文档做了批注等相关的信息时，可以使用保存功能。
和pdfService的打开和保存能力相同，具体区别查看pdfService的打开和保存PDF文档的场景介绍。
接口说明
接口名
描述
loadDocument(path: string, password?: string, initPageIndex?: number, onProgress?: Callback<number>): Promise<ParseResult>
加载PDF文档。
saveDocument(path: string, onProgress?: Callback<number>): Promise<number>
保存PDF文档，使用Promise异步回调。
示例代码
 在aboutToAppear函数里面加载PDF文档。 调用PdfView预览组件，渲染显示。 在【savePdfDocument】按钮中调用saveDocument方法另存PDF文档。 
import { pdfService, PdfView, pdfViewManager } from '@kit.PDFKit';\nimport { common } from '@kit.AbilityKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\n\n@Entry\n@Component\nstruct PdfPage {\n  private controller: pdfViewManager.PdfController = new pdfViewManager.PdfController();\n  private context = getContext() as common.UIAbilityContext;\n  private loadResult: pdfService.ParseResult = pdfService.ParseResult.PARSE_ERROR_FORMAT;\n\n  aboutToAppear(): void {\n    // 确保沙箱目录有input.pdf文档\n    let filePath = this.context.filesDir + '/input.pdf';\n    (async () => {\n      this.loadResult = await this.controller.loadDocument(filePath);     \n    })()\n  }\n\n  build() {\n    Column() {    \n      // 保存Pdf文档\n      Button('savePdfDocument').onClick(async () => {\n        if (this.loadResult === pdfService.ParseResult.PARSE_SUCCESS) {\n          let savePath = this.context.filesDir + '/savePdfDocument.pdf';\n          let result = await this.controller.saveDocument(savePath);\n          hilog.info(0x0000, 'PdfPage', 'savePdfDocument %{public}s!', result ? 'success' : 'fail');\n        }\n      })\n      PdfView({\n        controller: this.controller,\n        pageFit: pdfService.PageFit.FIT_WIDTH,\n        showScroll: true\n      })\n        .id('pdfview_app_view')\n        .layoutWeight(1);\n    }\n    .width('100%')\n    .height('100%')\n  }\n}
