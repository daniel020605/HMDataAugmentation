使用JSVM-API接口进行primitive类相关开发
简介
在使用JSVM-API接口时，开发人员可以实现在JSVM模块中与JavaScript对象的交互，并进行数据转换和获取特定对象的操作，它们在不同的场景中发挥着重要的作用，使开发人员能够更灵活地处理JavaScript值和对象。
基本概念
在使用JSVM操作JavaScript对象时，有一些基本概念需要了解：
JavaScript值到C/C++类型的转换： 在JSVM模块中，可以使用JSVM函数将JavaScript值转换为C/C++的数据类型，如将JavaScript数值转换为C/C++的整数、将JavaScript字符串转换为C/C++的字符数组等。同样，也可以将C/C++的数据类型转换为JavaScript值，以便将结果返回给JavaScript代码。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。
[h2]OH_JSVM_CoerceToBool
用于将一个给定的JavaScript值强制转为JavaScript boolean值。
cpp 部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// CoerceToBool注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CoerceToBool},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CoerceToBool方法别名，ArkTS侧调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"coerceToBool\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_CoerceToBool的样例方法\nstatic JSVM_Value CoerceToBool(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    JSVM_Value boolean = nullptr;\n    JSVM_Status status = OH_JSVM_CoerceToBool(env, args[0], &boolean);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_CoerceToBool failed\");\n    } else {\n        bool result = false;\n        OH_JSVM_GetValueBool(env, boolean, &result);\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CoerceToBool success:%{public}d\", result);\n    }\n    return boolean;\n}
ArkTS 侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\nlet script: string = `coerceToBool(\"123\")`;\ntry {\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'CoerceToBool: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'CoerceToBool: %{public}s', error.message);\n}
[h2]OH_JSVM_CoerceToNumber
用于将给定的JavaScript value强转为JavaScript number。
cpp 部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// CoerceToNumber注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CoerceToNumber},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CoerceToNumber方法别名，ArkTS侧调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"coerceToNumber\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_CoerceToNumber的样例方法\nstatic JSVM_Value CoerceToNumber(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    JSVM_Value number = nullptr;\n    JSVM_Status status = OH_JSVM_CoerceToNumber(env, args[0], &number);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_CoerceToNumber failed\");\n    } else {\n        int32_t result = 0;\n        OH_JSVM_GetValueInt32(env, number, &result);\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CoerceToNumber success:%{public}d\", result);\n    }\n    return number;\n}
ArkTS 侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\nlet script: string = `coerceToNumber(true)`;\ntry {\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'CoerceToNumber: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'CoerceToNumber: %{public}s', error.message);\n}
[h2]OH_JSVM_CoerceToObject
用于将给定的JavaScript value强转为JavaScript Object类型。
cpp 部分代码：
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// CoerceToObjec注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CoerceToObject},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CoerceToObject方法别名，ArkTS侧调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"coerceToObject\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_CoerceToObject的样例方法\nstatic JSVM_Value CoerceToObject(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    JSVM_Value obj = nullptr;\n    JSVM_Status status = OH_JSVM_CoerceToObject(env, args[0], &obj);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_CoerceToObject failed\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CoerceToObject success\");\n    }\n    return obj;\n}
ArkTS侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\nlet script: string = `coerceToObject(123)`;\ntry {\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'CoerceToObject001: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'CoerceToObject001: %{public}s', error.message);\n}
[h2]OH_JSVM_CoerceToString
用于将给定的JavaScript value强转为JavaScript string类型。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// CoerceToString注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = CoerceToString},\n};\nstatic JSVM_CallbackStruct *method = param;\n// CoerceToString方法别名，ArkTS侧调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"coerceToString\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_CoerceToString的样例方法\nstatic JSVM_Value CoerceToString(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    JSVM_Value str = nullptr;\n    JSVM_Status status = OH_JSVM_CoerceToString(env, args[0], &str);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_CoerceToString fail\");\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CoerceToString success\");\n    }\n    return str;\n}
ArkTS侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\nlet script: string = `coerceToString(22222)`;\ntry {\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'CoerceToString: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'CoerceToString: %{public}s', error.message);\n}
[h2]OH_JSVM_GetBoolean
获取给定布尔值的JavaScript单例对象。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// GetBoolean注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetBoolean},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetBoolean方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getBoolean\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_GetBoolean的样例方法\nstatic JSVM_Value GetBoolean(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 传入两个参数并解析\n    size_t argc = 2;\n    JSVM_Value argv[2] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, argv, nullptr, nullptr);\n    int32_t paramData = 0;\n    OH_JSVM_GetValueInt32(env, argv[0], &paramData);\n    int32_t paramValue = 0;\n    OH_JSVM_GetValueInt32(env, argv[1], &paramValue);\n    JSVM_Value returnValue = nullptr;\n    bool type = false;\n    if (paramData == paramValue) {\n        OH_LOG_INFO(LOG_APP, \"JSVM resultType equal\");\n        type = true;\n    }\n    JSVM_Status status = OH_JSVM_GetBoolean(env, type, &returnValue);\n    if (status != JSVM_OK) {\n        OH_JSVM_ThrowError(env, nullptr, \"JSVM OH_JSVM_CoerceToNumber fail\");\n    } else {\n        bool result = false;\n        OH_JSVM_GetValueBool(env, returnValue, &result);\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_CoerceToNumber success:%{public}d\", result);\n    }\n    // 返回结果\n    return returnValue;\n}
ArkTS 侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\ntry {\n  let data = 1;\n  let compareData = 2;\n  let script: string = `getBoolean(${data}, ${compareData})`;\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetBoolean: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetBoolean: %{public}s', error.message);\n}\ntry {\n  let data = 1;\n  let compareData = 1;\n  let script: string = `getBoolean(${data}, ${compareData})`;\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetBoolean: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetBoolean: %{public}s', error.message);\n}
[h2]OH_JSVM_GetValueBool
使用这个函数将JavaScript中的布尔值转为等价的C布尔值。
cpp 部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// GetValueBool注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetValueBool},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetValueBool方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getValueBool\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_GetValueBool的样例方法\nstatic JSVM_Value GetValueBool(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    bool result = false;\n    JSVM_Status status = OH_JSVM_GetValueBool(env, args[0], &result);\n    if (status == JSVM_BOOLEAN_EXPECTED || status != JSVM_OK) {\n        // 如果OH_JSVM_GetValueBool成功会返回JSVM_OK，如果传入一个非布尔值则会返回JSVM_BOOLEAN_EXPECTED\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_GetValueBool fail:%{public}d\", status);\n        return nullptr;\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetValueBool success:%{public}d\", result);\n    }\n    JSVM_Value boolJv = nullptr;\n    OH_JSVM_GetBoolean(env, result, &boolJv);\n    return boolJv;\n}
ArkTS 侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\n// 分别传入布尔值和非布尔值检测接口,传入布尔值将返回原布尔值,传入其他类型返回undefined\ntry {\n  let data = `\"abc\"`;\n  let script: string = `getValueBool(${data})`;\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetValueBool: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetValueBool: %{public}s', error.message);\n}\ntry {\n  let data = true;\n  let script: string = `getValueBool(${data})`;\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetValueBool: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetValueBool: %{public}s', error.message);\n}\ntry {\n  let data = false;\n  let script: string = `getValueBool(${data})`;\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetValueBool: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetValueBool: %{public}s', error.message);\n}
[h2]OH_JSVM_GetGlobal
用于获取全局JavaScript对象。该函数的主要作用是获取表示JavaScript全局对象的JSVM_Value，使得JSVM模块能够与JavaScript运行时的全局对象进行交互。
cpp 部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// GetGlobal注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetGlobal},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetGlobal方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getGlobal\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_GetGlobal的样例方法\nstatic JSVM_Value GetGlobal(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获取全局对象\n    JSVM_Value value = nullptr;\n    JSVM_Value global = nullptr;\n    OH_JSVM_CreateInt32(env, 1, &value);\n    JSVM_Status status = OH_JSVM_GetGlobal(env, &global);\n    OH_JSVM_SetNamedProperty(env, global, \"Row\", value);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_GetGlobal fail\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetGlobal success\");\n    }\n    return global;\n}
ArkTS 侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\nlet script: string = `getGlobal()`\ntry {\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetGlobal: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetGlobal: %{public}s', error.message);\n}
[h2]OH_JSVM_GetNull
用于获取JavaScript null
cpp 部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// GetNull注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetNull},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetNull方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getNull\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_GetNull的样例方法\nstatic JSVM_Value GetNull(JSVM_Env env, JSVM_CallbackInfo info) {\n    JSVM_Value nullValue = nullptr;\n    JSVM_Status status = OH_JSVM_GetNull(env, &nullValue);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_GetNull fail\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetNull success\");\n    }\n    return nullValue;\n}
ArkTS 侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\ntry {\n  let script: string = `getNull()`;\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetNull: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetNull: %{public}s', error.message);\n}
[h2]OH_JSVM_GetUndefined
用于获取JavaScript undefined
cpp 部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// GetUndefined注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = GetUndefined},\n};\nstatic JSVM_CallbackStruct *method = param;\n// GetUndefined方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"getUndefined\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// OH_JSVM_GetUndefined的样例方法\nstatic JSVM_Value GetUndefined(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 获取并解析传进的参数\n    size_t argc = 1;\n    JSVM_Value args[1] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 创建一个undefined值\n    JSVM_Value value = nullptr;\n    JSVM_Status status = OH_JSVM_GetUndefined(env, &value);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_GetUndefined failed\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_GetUndefined success\");\n    }\n    return value;\n}
接口声明
ArkTS 侧示例代码
import hilog from \"@ohos.hilog\"\n// 通过import的方式，引入Native能力。\nimport napitest from \"libentry.so\"\ntry {\n  let script: string = `getUndefined()`;\n  let result = napitest.runJsVm(script);\n  hilog.info(0x0000, 'JSVM', 'GetUndefined: %{public}s', result);\n} catch (error) {\n  hilog.error(0x0000, 'JSVM', 'GetUndefined: %{public}s', error.message);\n}
