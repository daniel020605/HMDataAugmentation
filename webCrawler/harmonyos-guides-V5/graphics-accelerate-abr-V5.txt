ABR功能开发
业务流程
基于相机运动感知策略的ABR主要业务流程如下：
 用户进入ABR适用的游戏场景。 游戏应用调用HMS_ABR_CreateContext接口并指定图形API类型，创建ABR上下文实例。 游戏应用调用HMS_ABR_SetTargetFps接口初始化ABR实例，配置目标帧率属性，ABR结合目标帧率属性实时感知GPU负载状态。 游戏应用调用HMS_ABR_SetScaleRange接口初始化ABR实例，配置Buffer分辨率因子范围属性。 游戏应用调用HMS_ABR_Activate接口激活ABR上下文实例。 游戏应用调用HMS_ABR_UpdateCameraData接口并传入相机运动信息，包含相机旋转、位移信息。 游戏应用在使能ABR的Buffer渲染前调用HMS_ABR_MarkFrameBuffer_GLES接口，对Buffer进行标记。 Buffer渲染处理。 绘制UI。 一帧送显。 用户退出ABR适用的游戏场景。 游戏应用调用HMS_ABR_DestroyContext接口销毁ABR上下文实例并释放内存资源。 
开发步骤
本节阐述基于相机运动感知策略的ABR使用，从流程上分别阐述每个步骤的实现和调用，详细代码请参考图形开发Sample（ABR）。
[h2]设置项目配置项
在“src/main/module.json5”module层级中添加以下配置。
\"metadata\": [\n  {\n    \"name\": \"GraphicsAccelerateKit_ABR\",\n    \"value\": \"true\"\n  }\n]
[h2]头文件引用
// 引用ABR头文件 abr_gles.h\n#include <graphics_game_sdk/abr_gles.h>
[h2]编写CMakeLists.txt
find_library(\n    # Sets the name of the path variable.\n    abr-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    libabr.so\n)\nfind_library(\n    # Sets the name of the path variable.\n    GLES-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    GLESv3\n)\nfind_library(\n    # Sets the name of the path variable.\n    hilog-lib\n    # Specifies the name of the NDK library that you want CMake to locate.\n    hilog_ndk.z\n)\n\ntarget_link_libraries(entry PUBLIC\n    ${abr-lib} ${GLES-lib} ${hilog-lib}\n)
[h2]ABR初始化
在应用创建Surface后会触发其事件回调函数“Core::OnSurfaceCreated()”，在该函数中完成ABR上下文实例创建、ABR属性配置和功能激活。其中ABR上下文实例负责管理ABR整个生命周期。
 调用HMS_ABR_CreateContext接口创建ABR上下文实例，指定图形API类型。如果返回nullptr，则说明ABR上下文实例创建失败，或当前硬件设备不支持开启ABR。// 创建ABR上下文实例，指定图形API类型\nABR_Context *context_ = HMS_ABR_CreateContext(RENDER_API_GLES);\nif (context_ == nullptr) {\n    GOLOGE(\"HMS_ABR_CreateContext execution failed.\");\n    return false;\n} 调用HMS_ABR_SetTargetFps接口初始化ABR实例，根据游戏的目标帧率配置ABR的目标帧率属性。// 初始化ABR接口调用错误码\nABR_ErrorCode errorCode = ABR_SUCCESS;\n\n// 初始化ABR实例，配置ABR的目标帧率属性。例如游戏目标帧率为120fps，则配置ABR的目标帧率属性为120fps\nerrorCode = HMS_ABR_SetTargetFps(context_, 120);\nif (errorCode != ABR_SUCCESS) {\n    GOLOGE(\"HMS_ABR_SetTargetFps execution failed, error code: %d.\", errorCode);\n    return false;\n} 调用HMS_ABR_SetScaleRange接口初始化ABR实例，配置Buffer分辨率因子范围属性。// 初始化ABR实例，配置Buffer分辨率因子范围属性，结合具体游戏分辨率、画质设置合适的范围\n// 例如设置ABR对Buffer分辨率进行0.5~1.0倍的自适应调整\nerrorCode = HMS_ABR_SetScaleRange(context_, 0.5f, 1.0f);\nif (errorCode != ABR_SUCCESS) {\n    GOLOGE(\"HMS_ABR_SetScaleRange execution failed, error code: %d.\", errorCode);\n    return false;\n} 调用HMS_ABR_Activate接口激活ABR上下文实例。// 激活ABR上下文实例\nerrorCode = HMS_ABR_Activate(context_);\nif (errorCode != ABR_SUCCESS) {\n    GOLOGE(\"HMS_ABR_Activate execution failed, error code: %d.\", errorCode);\n    return false;\n} 
[h2]相机运动数据更新
在帧循环中，ABR根据获取的实时相机运动数据进行Buffer分辨率因子决策。
// 相机运动数据结构体，设置每帧实时相机运动数据\nABR_CameraData cameraData;\ncameraData.position = static_cast<ABR_Vector3>(camera_.GetPosition());\ncameraData.rotation = static_cast<ABR_Vector3>(camera_.GetRotation());\n\n// 每帧相机运动数据更新\nerrorCode = HMS_ABR_UpdateCameraData(context_, &cameraData);\nif (errorCode != ABR_SUCCESS) {\n    GOLOGE(\"HMS_ABR_UpdateCameraData execution failed, error code: %d.\", errorCode);\n    return false;\n}
[h2]自适应渲染
在帧循环中，ABR将对所标记的Buffer进行自适应渲染处理。
 选择着色器处理耗时较高的Buffer，并在Buffer渲染前绑定帧缓冲。// 创建帧缓冲对象\nGLuint fbo;\nglGenFramebuffers(1, &fbo);\n// 绑定帧缓冲\nglBindFramebuffer(GL_FRAMEBUFFER, fbo); 调用HMS_ABR_MarkFrameBuffer_GLES接口对Buffer进行标记。// 在Buffer渲染前调用，执行失败不影响Buffer正常渲染\nerrorCode = HMS_ABR_MarkFrameBuffer_GLES(context_);\nif (errorCode != ABR_SUCCESS) {\n    GOLOGE(\"HMS_ABR_MarkFrameBuffer_GLES execution failed, error code: %d.\", errorCode);\n} 执行Buffer原有渲染流程。 
[h2]销毁ABR实例
在Surface销毁时，会触发其事件回调函数“Core::OnSurfaceDestroyed()”，在该函数中完成ABR实例的销毁。
// 销毁ABR上下文实例并释放内存资源\nABR_ErrorCode errorCode = HMS_ABR_DestroyContext(&context_);\nif (errorCode != ABR_SUCCESS) {\n    GOLOGE(\"HMS_ABR_DestroyContext execution failed, error code: %d.\", errorCode);\n    return false;\n}
