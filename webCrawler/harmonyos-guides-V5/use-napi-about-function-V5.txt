使用Node-API接口进行函数创建和调用
简介
函数调用允许开发者从Node-API模块中调用ArkTS函数，并传递参数进行调用，或者直接在Node-API模块中创建一个ArkTS方法。
基本概念
函数是一种非常重要的编程概念，可以执行特定的任务或操作、提高代码的可读性、把复杂任务简化、提高代码复用性以及支持代码的组织与管理。每个函数可以负责不同的功能，提供一种将代码模块化和组织结构化的方式，使其更易于理解、维护和重用。
场景和功能介绍
使用示例
Node-API接口开发流程参考使用Node-API实现跨语言交互开发流程，本文仅对接口对应C++及ArkTS相关代码进行展示。napi_create_function方法除外，具体使用见示例。
napi_get_cb_info
获取有关函数调用的详细信息。
cpp部分代码
#include \"napi/native_api.h\"\n// 获取ArkTS侧入参的的参数信息\nstatic napi_value GetCbArgs(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value args[1] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n    return args[0];\n}\n// 获取ArkTS侧入参的参数个数\nstatic napi_value GetCbArgQuantity(napi_env env, napi_callback_info info)\n{\n    size_t argc = 0;\n    napi_value result = nullptr;\n    napi_get_cb_info(env, info, &argc, nullptr, nullptr, nullptr);\n    napi_create_int32(env, argc, &result);\n    return result;\n}\n// 获取ArkTS侧this参数\nstatic napi_value GetCbContext(napi_env env, napi_callback_info info)\n{\n    napi_value thisArg = nullptr;\n    napi_get_cb_info(env, info, nullptr, nullptr, &thisArg, nullptr);\n    return thisArg;\n}
接口声明
// index.d.ts\nexport const getCbArgs: <T>(arg: T) => T;\n// getCbArgQuantity的入参由用户自定义，在此用例中，我们用两个入参，一个是string，一个是number\nexport const getCbArgQuantity: (str: string, num: number) => number;\nexport const getCbContext: () => Object;
ArkTS 侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\nfunction summation(arr: Array<number>) {\n  let sum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\nconst str = 'message';\nconst arr = [0, 1, 2, 3, 4, 5];\nconst num = 526;\nclass Student {\n  name: string;\n  age: number;\n  score: number;\n  constructor(name: string, age: number, score: number) {\n    this.name = name;\n    this.age = age;\n    this.score = score;\n  }\n}\nlet student = new Student('Alice', 18, 100);\n// 获取参数\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get string arg:%{public}s', testNapi.getCbArgs(str));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get array arg:%{public}s ', testNapi.getCbArgs(arr).toString());\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get num arg:%{public}d ', testNapi.getCbArgs(num));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get undefined arg:%{public}s ', testNapi.getCbArgs(undefined));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get object arg:%{public}s ', JSON.stringify(testNapi.getCbArgs(student)));\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get function arg:%{public}d ', testNapi.getCbArgs(summation(arr)));\n// 获取参数个数\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get arg quantity:%{public}d ', testNapi.getCbArgQuantity(str, num));\n// 获取上下文\nhilog.info(0x0000, 'testTag', 'Test Node-API napi_get_cb_info get thisArg:%{public}s ', testNapi.getCbContext().toString());
napi_call_function
在C/C++侧对ArkTS函数进行调用。
注意事项：napi_call_function传入的argv的长度必须大于等于argc声明的数量，且被初始化成nullptr。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CallFunction(napi_env env, napi_callback_info info)\n{\n    size_t argc = 1;\n    napi_value argv[1] = {nullptr};\n    // 获取ArkTS侧入参\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 获取全局对象，这里用global是因为napi_call_function的第二个参数是JS函数的this入参。\n    napi_value global = nullptr;\n    napi_get_global(env, &global);\n    // 调用ArkTS方法\n    napi_value result = nullptr;\n    // 调用napi_call_function时传入的argv的长度必须大于等于argc声明的数量，且被初始化成nullptr\n    napi_call_function(env, global, argv[0], argc, argv, &result);\n    return result;\n}\n\nstatic napi_value ObjCallFunction(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传递的两个参数\n    size_t argc = 2;\n    napi_value argv[2] = {nullptr};\n    // 获取ArkTS侧入参\n    napi_get_cb_info(env, info, &argc, argv, nullptr, nullptr);\n    // 调用ArkTS方法\n    napi_value result = nullptr;\n    // 调用napi_call_function时传入的argv的长度必须大于等于argc声明的数量，且被初始化成nullptr\n    napi_call_function(env, argv[0], argv[1], argc, argv, &result);\n    return result;\n}
接口声明
// index.d.ts\nexport const callFunction: (func: Function) => number;\nexport const objCallFunction: (obj: Object, func: Function) => number;
ArkTS 侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nfunction returnNumber() {\n  return 10;\n}\nclass Person {\n  age(): number {\n    return 11;\n  }\n}\nconst person = new Person();\nhilog.info(0x0000, 'testTag', 'Test Node-API call_function:%{public}d', testNapi.callFunction(returnNumber));\nhilog.info(0x0000, 'testTag', 'Test Node-API call_function:%{public}d', testNapi.objCallFunction(person,person.age));
napi_create_function
将一个C/C++函数包装为可在ArkTS中调用的函数，并返回一个表示该函数的napi_value。
cpp部分代码
#include \"napi/native_api.h\"\n\nstatic napi_value CalculateArea(napi_env env, napi_callback_info info)\n{\n    // 获取ArkTS侧传递的两个参数\n    size_t argc = 2;\n    napi_value args[2] = {nullptr};\n    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);\n    double width = 0;\n    napi_get_value_double(env, args[0], &width);\n    double height = 0;\n    napi_get_value_double(env, args[1], &height);\n    napi_value area = nullptr;\n    napi_create_double(env, width * height, &area);\n    return area;\n}\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports) {\n    napi_value fn = nullptr;\n    napi_create_function(env, nullptr, 0, CalculateArea, nullptr, &fn);\n    napi_set_named_property(env, exports, \"calculateArea\", fn);\n    return exports;\n}\nEXTERN_C_END
接口声明
// index.d.ts\nexport const calculateArea: (width: number, height: number) => number;
ArkTS 侧示例代码
import hilog from '@ohos.hilog'\nimport testNapi from 'libentry.so'\n\nhilog.info(0x0000, 'testTag', 'Test Node-API create_function:%{public}d ', testNapi.calculateArea(1.2, 4));
以上代码如果要在native cpp中打印日志，需在CMakeLists.txt文件中添加以下配置信息（并添加头文件：#include \"hilog/log.h\"）：
// CMakeLists.txt\nadd_definitions( \"-DLOG_DOMAIN=0xd0d0\" )\nadd_definitions( \"-DLOG_TAG=\\\"testTag\\\"\" )\ntarget_link_libraries(entry PUBLIC libhilog_ndk.z.so)
