使用JSVM-API判断给定的两个JS value是否严格相等
简介
JSVM-API中用于判断给定的两个JavaScript值是否严格相等，类似于JavaScript中的===操作符。使用这个函数可以避免类型转换和松散相等性比较，确保两个值不仅在值上相等，而且在类型上也相等。
基本概念
比较两个JavaScript值是否严格相等。严格相等比较不会进行类型转换，它要求两个值的类型和值完全相同才会返回true。
接口说明
使用示例
JSVM-API接口开发流程参考使用JSVM-API实现JS与C/C++语言交互开发流程，本文仅对接口对应C++相关代码进行展示。
[h2]OH_JSVM_StrictEquals
判断给定的两个JS value是否严格相等。
cpp部分代码
// hello.cpp\n#include \"napi/native_api.h\"\n#include \"ark_runtime/jsvm.h\"\n#include <hilog/log.h>\n// OH_JSVM_StrictEquals的样例方法\nstatic JSVM_Value IsStrictEquals(JSVM_Env env, JSVM_CallbackInfo info)\n{\n    // 接受两个入参\n    size_t argc = 2;\n    JSVM_Value args[2] = {nullptr};\n    OH_JSVM_GetCbInfo(env, info, &argc, args, nullptr, nullptr);\n    // 调用OH_JSVM_StrictEquals接口判断给定的两个JavaScript value是否严格相等\n    bool result = false;\n    JSVM_Status status = OH_JSVM_StrictEquals(env, args[0], args[1], &result);\n    if (status != JSVM_OK) {\n        OH_LOG_ERROR(LOG_APP, \"JSVM OH_JSVM_StrictEquals: failed\");\n    } else {\n        OH_LOG_INFO(LOG_APP, \"JSVM OH_JSVM_StrictEquals: success: %{public}d\", result);\n    }\n    JSVM_Value isStrictEqual;\n    OH_JSVM_GetBoolean(env, result, &isStrictEqual);\n    return isStrictEqual;\n}\n// IsStrictEquals注册回调\nstatic JSVM_CallbackStruct param[] = {\n    {.data = nullptr, .callback = IsStrictEquals},\n};\nstatic JSVM_CallbackStruct *method = param;\n// IsStrictEquals方法别名，供JS调用\nstatic JSVM_PropertyDescriptor descriptor[] = {\n    {\"isStrictEquals\", nullptr, method++, nullptr, nullptr, nullptr, JSVM_DEFAULT},\n};\n// 样例测试js\nconst char* srcCallNative = R\"JS(data = '123';value = '123';isStrictEquals(data,value);)JS\";
预期的输出结果
JSVM OH_JSVM_StrictEquals: success: 1
