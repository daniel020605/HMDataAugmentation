LLDB高性能调试器
概述
LLDB（Low Level Debugger）是新一代高性能调试器。详细说明参考LLDB官方文档。
当前HarmonyOS中的LLDB工具是在llvm15.0.4基础上适配演进出来的工具，是HUAWEI DevEco Studio工具中默认的调试器，支持调试C和C++应用。
工具获取
可通过HUAWEI DevEco Studio下载SDK获取LLDB调试工具。
以Windows平台为例，lldb.exe的存放路径为sdk\\[HarmonyOS版本]\\openharmony\\native\\llvm\\bin。例如“sdk\\HarmonyOS-NEXT-DP1\\openharmony\\native\\llvm\\bin”。
路径
说明
sdk\\[HarmonyOS版本]\\hms\\native\\lldb\\aarch64-linux-ohos\\lldb-server
适用于aarch64-linux-ohos架构的lldb-server
sdk\\[HarmonyOS版本]\\hms\\native\\lldb\\arm-linux-ohos\\lldb-server
适用于arm-linux-ohos架构的lldb-server
sdk\\[HarmonyOS版本]\\hms\\native\\lldb\\x86_64-linux-ohos\\lldb-server
适用于x86_64-linux-ohos架构的lldb-server
功能列表
此处列举LLDB调试器支持的部分功能，更多命令参考：LLDB工具使用指导和LLDB官网手册。Windows、Linux x86_64和Mac平台的LLDB工具有些许差异，以实际应用为准。
记录日志 断点管理 观察点管理 表达式处理 查看变量 进程/线程管理 汇编处理 源码信息获取 信号处理 进程启动 attach进程 
应用场景
本地调试Linux x86_64本地调试。 LLDB支持在Linux x86_64环境上调试C和C++应用。 Mac桌面本地调试。 LLDB支持在Mac桌面（包括Mac x86_64和M1系统）调试C和C++应用。  远程调试基于HUAWEI DevEco Studio的远程调试。 LLDB支持基于HUAWEI DevEco Studio在Windows和Mac桌面连接HarmonyOS设备或模拟器远程调试Native C++应用，即使用HUAWEI DevEco Studio的Debug调试功能。 桌面连接HarmonyOS设备远程调试。 HarmonyOS设备为root镜像，SELinux关闭：LLDB支持在Windows、Mac桌面和Linux x86_64环境直连HarmonyOS设备远程调试C和C++应用以及可执行二进制。 HarmonyOS设备为root镜像，SELinux开启：LLDB支持在Windows、Mac桌面和Linux x86_64环境直连HarmonyOS设备远程调试C和C++应用以及可执行二进制，但是lldb-server和要调试的应用或可执行二进制只能放在/data/local/tmp/debugserver目录内。 HarmonyOS设备是user镜像，SELinux开启：LLDB支持在Windows、Mac桌面和Linux x86_64环境直连HarmonyOS设备远程调试基于HUAWEI DevEco Studio编译的带签名的debug版本的hap包，目前仅支持此类调试。  root镜像：使用hdc shell id命令查询到“uid=0(root)”，或执行hdc shell进入交互命令环境，提示符为“#”。 user镜像：使用hdc shell id命令查询到“uid=2000(shell)”，或执行hdc shell进入交互命令环境，提示符为“$”。 SELinux开启模式：使用hdc shell getenforce命令查询到“Enforcing”。 SELinux关闭模式：使用hdc shell getenforce命令查询到“Permissive”。   
使用指导-本地调试
Linux x86_64或Mac本地调试步骤一致。
[h2]使用LLDB工具启动并调试应用
此处以在Linux x86_64环境调试一个使用clang编译器生成的带有调试信息的可执行文件a.out为例。
源文件：hello.cpp
#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"hello world!\" <<endl;\n    return 0;\n}
编译：
<clang distribution>/bin/clang++ -g hello.cpp -o a.out
获取到与LLDB同一版本的clang编译器生成的带有调试信息的可执行文件a.out。运行LLDB工具，并指定要调试的文件为a.out。./lldb a.out 在代码中main函数处设置断点。(lldb) b main 运行应用，使其停在断点处。(lldb) run 继续运行应用。(lldb) continue 列出所有断点。(lldb) breakpoint list 显示当前帧的参数和局部变量。(lldb) frame variable 按需执行调试命令进行后续调试操作。退出调试。(lldb) quit 
[h2]使用LLDB工具调试已经启动的应用
此处以在Mac环境调试一个使用clang编译器生成的带有调试信息和用户输入的可执行文件a.out为例。
源文件：hello.cpp
#include <iostream>\nusing namespace std;\n\nint main() {\n    int i = 0, j = 5, sum = 0;\n    cout << \"Please input a number of type int”\" <<endl;\n    cin >> i;\n    cout << i;\n    sum = i + j;\n    cout << sum <<endl;\n    return 0;\n}
编译：
<clang distribution>/bin/clang++ -g hello.cpp -o a.out
在终端窗口1启动应用。（窗口会返回一条信息“Please input a number of type int”）./a.out 在终端窗口2运行LLDB工具。./lldb attach应用。(lldb) process attach --name a.out 在hello.cpp的第10行设置断点。(lldb) breakpoint set --file hello.cpp --line 10 在终端窗口1，输入一个int类型的数。88 在终端行窗口2继续运行应用，使应用停在断点处。(lldb) continue 按需执行调试命令进行后续调试操作。detach应用。(lldb) detach 退出调试。(lldb) quit 
步骤attach应用和设置断点可以调换顺序执行。
使用指导-远程调试
远程调试是指使用lldb进行跨端调试。本章节主要针对开发者跨平台调试HarmonyOS设备的应用进行说明。基于HUAWEI DevEco Studio的远程调试参考官方调试指导远程调试时需要lldb-server和lldb配合使用。Windows，Linux x86_64和Mac远程调试步骤一致。
[h2]root镜像远程调试
支持调试的应用或二进制是aarch64-linux-ohos架构的native C++工程。为了方便调试建议调试时关闭SELinux。
源文件：hello.cpp
#include <iostream>\nusing namespace std;\nint main() {\n    cout << \"hello world!\" <<endl;\n    return 0;\n}
编译：
<clang distribution>/bin/clang++ --target=aarch64-linux-ohos --sysroot=<sysroot distribution> -g hello.cpp -o a.out
打开命令行窗口1，关闭SELinux。hdc shell setenforce 0 在命令行窗口1，将lldb-server和可执行文件a.out推送到设备。hdc file send lldb-server /data/local/tmp\nhdc file send a.out /data/local/tmp\nhdc shell chmod 755 /data/local/tmp/lldb-server /data/local/tmp/a.out 运行lldb-server。(8080为有效且当前未被占用的端口号，用户可自定义）hdc shell ./data/local/tmp/lldb-server p --server --listen \"*:8080\" 打开命令行窗口2，运行二进制文件lldb。lldb 在LLDB命令行窗口进行远端选择与连接。(lldb) platform select remote-ohos\n(lldb) platform connect connect://localhost:8080  指定要调试的设备上的二进制文件a.out。(lldb) target create /data/local/tmp/a.out 在代码中main函数处设置断点。(lldb) b main 启动应用。(lldb) run 查看当前目标进程的源码。(lldb) source list 按需执行调试命令进行后续调试操作。退出调试。(lldb) quit 
[h2]user镜像远程调试
user镜像SELinux默认开启，无法关闭。建议基于HUAWEI DevEco Studio调试user镜像SELinux开启的HarmonyOS设备的hap包。lldb-server需推送至指定的目录/data/local/tmp/debugserver。如：/data/local/tmp/debugserver/lldb-server或/data/local/tmp/debugserver/com.example.myapplication/lldb-server。lldb-server在aarch64-linux-ohos架构目录获取。详情参考表1 lldb-server工具目录此案例中的hap包为基于HUAWEI DevEco Studio创建的native C++默认工程编译的带debug信息的hap包。调试过程中需保持设备在非锁屏状态，锁屏不允许启动调试器调试。
打开命令行窗口1，将lldb-server和hap包推送到设备。hdc shell mkdir data/local/tmp/debugserver/com.example.myapplication\nhdc file send lldb-server data/local/tmp/debugserver/com.example.myapplication\nhdc shell chmod 755 data/local/tmp/debugserver/com.example.myapplication/lldb-server\nhdc shell mkdir data/local/tmp/d333e74fe3ab488aad622a7055fbf396\nhdc file send C:\\Users\\xxx\\DevEcoStudioProjects\\MyApplication\\entry\\build\\default\\outputs\\default\\entry-default-signed.hap data/local/tmp/d333e74fe3ab488aad622a7055fbf396 hap包安装运行，关闭appfreeze。hdc shell bm install -p data/local/tmp/d333e74fe3ab488aad622a7055fbf396\nhdc shell aa start -a EntryAbility -b com.example.myapplication\nhdc shell aa attach -b com.example.myapplication 运行lldb-server。hdc shell aa process -a EntryAbility -b com.example.myapplication -D \"/data/local/tmp/debugserver/com.example.myapplication/lldb-server platform --listen unix-abstract:///lldb-server/platform.sock\" 打开命令行窗口2，运行二进制文件lldb。lldb 在LLDB命令行窗口进行远端选择与连接。(lldb) platform select remote-ohos \n(lldb) platform connect unix-abstract-connect:///lldb-server/platform.sock 添加目标可执行文件搜索路径。(lldb) settings append target.exec-search-paths \"C:\\Users\\xxx\\DevEcoStudioProjects\\MyApplication \\entry\\build\\default\\intermediates\\cmake\\default\\obj\\arm64-v8a\" 在源代码第6行处设置断点。(lldb) breakpoint set --file \"C:/Users/xxx/DevEcoStudioProjects/MyApplication/entry/src/main/cpp/napi_init.cpp\" --line 6 指定要调试的设备上的hap包对应的应用pid。(lldb) attach <pid> 点击设备应用，使其继续响应，并停止在断点处。继续调试。(lldb) continue 显示当前线程的堆栈回溯。(lldb) bt 按需执行调试命令进行后续调试操作。退出调试。(lldb) quit 
FAQ
当在lldb命令行窗口执行run返回信息为：“error：'A' packet returned an error: 8”或类似信息，则意味着不允许调试器启动用于调试的进程，一般都是因为没有权限导致的，请确认调试设备是否限制调试。
运行lldb-server，报错“Permission denied”。一般是lldb-server无可执行文件导致的，添加权限即可。
