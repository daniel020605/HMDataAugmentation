@typescript-eslint/no-unsafe-argument
不允许将any类型的值作为函数的参数传入。
该规则仅支持对.js/.ts文件进行检查。
规则配置
// code-linter.json5\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unsafe-argument\": \"error\"\n  }\n}
选项
该规则无需配置额外选项。
正例
declare function foo(arg1: string, arg2: number, arg3: string): void;\n\nfoo('a', Number.MAX_VALUE, 'b');\n\nconst tuple1 = ['a', Number.MAX_VALUE, 'b'] as const;\nfoo(...tuple1);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: readonly string[]): void;\nconst array: string[] = ['a'];\nbar('a', Number.MAX_VALUE, ...array);\n\ndeclare function baz(arg1: Readonly<Set<string>>, arg2: Readonly<Map<string, string>>): void;\nbaz(new Set<string>(), new Map<string, string>());
反例
declare function foo(arg1: string, arg2: number, arg3: string): void;\n\nconst anyTyped = Number.MAX_VALUE as any;\n// 变量anyTyped是any类型，不允许作为参数传入函数中\nfoo(...anyTyped);\n// 变量anyTyped是any类型，不允许作为参数传入函数中\nfoo(anyTyped, Number.MAX_VALUE, 'a');\n\nconst anyArray: any[] = [];\n// 变量anyArray是any类型数组，不允许将数组元素作为参数传入函数中\nfoo(...anyArray);\n\nconst tuple1 = ['a', anyTyped, 'b'] as const;\n// 变量anyTyped是any类型数组，不允许将数组元素作为参数传入函数中\nfoo(...tuple1);
规则集
plugin:@typescript-eslint/recommended\nplugin:@typescript-eslint/all
Code Linter代码检查规则的配置指导请参考代码Code Linter检查。
