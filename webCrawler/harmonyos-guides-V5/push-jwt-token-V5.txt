基于服务账号生成鉴权令牌
概述
服务账号（Service Account）是一种可实现服务器与服务器之间接口鉴权的账号，在华为开发者联盟的API Console上创建服务账号，您可根据返回的公私钥在业务应用中生成鉴权令牌，调用支持此类鉴权的华为公开API。
服务账号令牌为JWT（JSON Web Token）格式字符串，JWT数据格式包括三个部分：
Header（头部）Payload（负载）Signature（签名）
这三个部分通过“.”进行连接，其中Signature为通过SHA256withRSA/PSS算法对Header与Payload拼接的字符串签名生成的字符串。
示例
eyJra*****JjNjBjMXXX.\neyJhd*****JodHRXXX.\nBRNss*****7az5oU7-Zp5g9X2WJVXXX
更多JWT的相关知识请参见Introduction to JSON Web Tokens。
开发步骤
创建服务账号密钥文件。您需要在华为开发者联盟的API Console上创建并下载推送服务API的服务账号密钥文件，相关创建步骤请参见API Console操作指南-服务账号密钥。 您申请后的服务账号密钥样例文件形式可参考（文件内容已经经过脱敏处理）： {\n    \"project_id\": \"*****\",\n    \"key_id\": \"*****\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQCKw6kJKtCh7qmMvp1u1dI27z2TKZrPOzHbQaXO/Eez0AWZ2EN+ouF496R3pfo7fQXC1XOT/YTbVC4DNZwWSMA54fu3/AOCY9Zzyi46OK*****==\\n-----END PRIVATE KEY-----\\n\",\n    \"sub_account\": \"*****\",\n    \"auth_uri\": \"https://oauth-login.cloud.huawei.com/oauth2/v3/authorize\",\n    \"token_uri\": \"https://oauth-login.cloud.huawei.com/oauth2/v3/token\",\n    \"auth_provider_cert_uri\": \"https://oauth-login.cloud.huawei.com/oauth2/v3/certs\",\n    \"client_cert_uri\": \"https://oauth-login.cloud.huawei.com/oauth2/v3/x509?client_id=*****\"\n} 生成JWT Header数据。根据服务账号密钥文件中的key_id字段拼接以下JSON体，对JSON体进行BASE64编码。 示例 {\n  \"kid\": \"*****\",\n  \"typ\": \"JWT\",\n  \"alg\": \"PS256\"\n} 字段名  描述    kid  服务账号密钥文件中key_id字段。   typ  数据类型，固定为：JWT。   alg  算法类型，固定为：PS256。     生成JWT Payload数据。根据服务账号密钥文件中的sub_account字段拼接以下JSON体，对JSON体进行BASE64编码。 示例 {\n  \"aud\": \"https://oauth-login.cloud.huawei.com/oauth2/v3/token\",\n  \"iss\": \"*****\",\n  \"exp\": 1581410664,\n  \"iat\": 1581407064\n} 字段名  描述    iss  服务账号密钥文件中sub_account字段，标识数据生成者。   aud  固定为：https://oauth-login.cloud.huawei.com/oauth2/v3/token。   iat  JWT签发UTC时间戳，为自UTC时间1970年1月1日00:00:00的秒数（您的服务器时间需要校准为标准时间）。   exp  JWT到期UTC时间戳，比iat晚3600秒。     生成JWT。将完成BASE64编码后的Header字符串与Payload字符串，通过“.”进行连接，您可在业务应用中，通过服务账号密钥文件中的private_key（华为不进行存储，请您妥善保管），使用SHA256withRSA/PSS算法对拼接的字符串签名。 至此，您已经完成服务账号鉴权令牌JWT的生成。 
在线生成服务账号鉴权令牌
若您想在正式开发前调试功能，可使用在线生成工具获取JWT Token。
请注意，生成JWT Token时Algorithm请选择PS256。
调用推送服务REST API
您的应用调用推送服务REST API时，需要把已获得的服务账号鉴权令牌放在Authorization头部来进行鉴权。
示例
POST https://push-api.cloud.huawei.com/v3/3158882***52863/messages:send\nAuthorization: Bearer eyJr*****OiIx---****.eyJh*****iJodHR--***.QRod*****4Gp---****\npush-type:0
Authorization格式：Bearer后面拼接空格，再拼接获取的鉴权信息。
示例代码
为了方便您生成服务账号鉴权令牌，我们提供了Java语言的示例代码，请按照说明替换参数运行。
如果您使用其他开发语言，请选择对应的JWT开源组件进行开发。
“Java”\n/* 推荐的java版本为java8，maven依赖如下：\n  <dependency>\n   <groupId>com.fasterxml.jackson.core</groupId>\n   <artifactId>jackson-databind</artifactId>\n   <version>2.15.2</version>\n  </dependency>\n  <dependency>\n   <groupId>io.jsonwebtoken</groupId>\n   <artifactId>jjwt-api</artifactId>\n   <version>0.11.5</version>\n  </dependency>\n  <dependency>\n   <groupId>io.jsonwebtoken</groupId>\n   <artifactId>jjwt-impl</artifactId>\n   <version>0.11.5</version>\n   <scope>runtime</scope>\n  </dependency>\n  <dependency>\n   <groupId>io.jsonwebtoken</groupId>\n   <artifactId>jjwt-jackson</artifactId>\n   <version>0.11.5</version>\n   <scope>runtime</scope>\n  </dependency>\n  <dependency>\n   <groupId>org.bouncycastle</groupId>\n   <artifactId>bcprov-jdk18on</artifactId>\n   <version>1.78.1</version>\n   <scope>runtime</scope>\n  </dependency>\n*/\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.lang.Maps;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.KeyFactory;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PrivateKey;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.util.Base64;\nimport java.util.Map;\n\npublic class JsonWebTokenFactory {\n    // 实际开发时请从服务账号密钥文件中读取private_key\n    // 请在代码中加密私钥，仅获取 '-----BEGIN PRIVATE KEY-----\\n' 和 '\\n-----END PRIVATE KEY-----\\n'之间的字符\n    private static final String PRIVATE_KEY = \"MIIJQgIBADANBgkq******************ggEAJ6mWem20h4vmzzcQOuewG==\";\n\n    // 实际开发时请从服务账号密钥文件中读取sub_account\n    private static final String ISS = \"101****33\";\n\n    // 实际开发时请从服务账号密钥文件中读取key_id\n    private static final String KID = \"18366**********04704f\";\n\n    // 实际开发时请将公网地址存储在配置文件或数据库\n    private static final String AUD = \"https://oauth-login.cloud.huawei.com/oauth2/v3/token\";\n\n    public static String createJwt() throws NoSuchAlgorithmException, InvalidKeySpecException, JsonProcessingException {\n        RSAPrivateKey privateKey = (RSAPrivateKey) generatePrivateKey(PRIVATE_KEY);\n        long iat = System.currentTimeMillis() / 1000;\n        long exp = iat + 3600;\n\n        Map<String, Object> header = Maps.<String, Object>of(JwsHeader.KEY_ID, KID)\n            .and(JwsHeader.TYPE, JwsHeader.JWT_TYPE)\n            .and(JwsHeader.ALGORITHM, SignatureAlgorithm.PS256.getValue())\n            .build();\n\n        Map<String, Object> payload = Maps.<String, Object>of(Claims.ISSUER, ISS)\n            .and(Claims.ISSUED_AT, iat)\n            .and(Claims.EXPIRATION, exp)\n            .and(Claims.AUDIENCE, AUD)\n            .build();\n\n        return Jwts.builder()\n            .setHeader(header)\n            .setPayload(new ObjectMapper().writeValueAsString(payload))\n            .signWith(privateKey, SignatureAlgorithm.PS256)\n            .compact();\n    }\n\n    private static PrivateKey generatePrivateKey(String base64Key) throws NoSuchAlgorithmException, InvalidKeySpecException {\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(base64Key.getBytes(StandardCharsets.UTF_8)));\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        return keyFactory.generatePrivate(keySpec);\n    }\n\n    public static void main(String args[]) throws InvalidKeySpecException, NoSuchAlgorithmException, JsonProcessingException {\n        JsonWebTokenFactory jsonWebTokenFactory = new JsonWebTokenFactory();\n        jsonWebTokenFactory.createJwt(); // 获取鉴权令牌\n    }\n}
“Node.js”\n// 依赖：npm i jsonwebtoken\n\nconst jwt = require('jsonwebtoken');\nconst fs = require('fs');\n// 加载RSA私钥\n// 实际开发时请从服务账号密钥文件中读取private_key保存在.pem中，参考“基于服务账号生成鉴权令牌中创建服务账号密钥文件。\nconst PRIVATE_KEY = fs.readFileSync('./private_key.pem', 'utf8');\n// 实际开发时请从服务账号密钥文件中读取sub_account\nconst ISS = '101****33';\n// 实际开发时请从服务账号密钥文件中读取key_id\nconst KID = '18366**********04704f';\n// 实际开发时请将公网地址存储在配置文件或数据库\nconst AUD = 'https://oauth-login.cloud.huawei.com/oauth2/v3/token';\n// 自定义Header\nconst header = {\n  alg: 'PS256', // 建议使用PS256算法\n  kid: KID,\n  typ: 'JWT'    // 类型为JWT\n};\n// 创建JWT载荷\nconst payload = {\n    iss: ISS, // 实际开发时请从服务账号密钥文件中读取sub_account\n    aud: AUD, // 实际开发时请将公网地址存储在配置文件或数据库\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + 3600\n};\n// 签署JWT\nconst token = jwt.sign(payload, PRIVATE_KEY, { algorithm: 'PS256',header:header });\nconsole.log(\"Generated JWT:\", token);
