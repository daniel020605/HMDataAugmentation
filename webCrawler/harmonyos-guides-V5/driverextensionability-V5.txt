外设扩展驱动开发指导
场景介绍
DriverExtensionAbility是Driver类型的ExtensionAbility组件，提供驱动相关扩展框架能力。对于部分设备，支持插入外接的硬件模块来扩展设备能力， 此时可以以应用方式安装该硬件模块的驱动程序。通过DriverExtensionAbility可实现此类应用的开发。
DriverExtensionAbility可以通过DriverExtensionManager被应用绑定，并根据应用的请求信息在后台处理相关事务。
每个类型的ExtensionAbility都有自己的Context，DriverExtensionAbility通过DriverExtensionContext提供相关能力。
环境搭建
请参考外设扩展驱动客户端开发指导中的环境搭建。
其中SDK版本配置的要求如下：
开发步骤
开发者在实现一个驱动时，需要在DevEco Studio工程中手动新建一个DriverExtensionAbility，具体步骤如下：
 在工程Module对应的ets目录下，右键选择“New > Directory”，新建一个目录并命名为driverextability。 在driverextability目录，右键选择“New > ArkTS File”，新建一个文件并命名为DriverExtAbility.ets。 在文件中导入相关Kit，并定义请求Code。 import { DriverExtensionAbility } from '@kit.DriverDevelopmentKit';\nimport { Want } from '@kit.AbilityKit';\nimport { rpc } from '@kit.IPCKit';\n\nconst REQUEST_CODE = 99; // 与扩展外设客户端约定请求码 打开DriverExtAbility.ets文件，导入RPC通信模块，重载onRemoteMessageRequest()方法，接收应用传递过来的消息，并将处理的结果返回给应用。REQUEST_VALUE用于校验应用发送的服务请求码。 class StubTest extends rpc.RemoteObject {\n  // 接收应用传递过来的消息处理，以及将处理的结果返回给客户端\n  onRemoteMessageRequest(code: number, data: rpc.MessageSequence, reply: rpc.MessageSequence,\n    option: rpc.MessageOption) {\n    if (code === REQUEST_CODE) {\n      // 接收应用传递过来的数据\n      // 应用使用多次调用data.writeString()写入多个数据时，驱动可以通过多次调用data.readString()方法接收对应的数据\n      let optFir: string = data.readString();\n      // 驱动将数据的处理结果返回给应用\n      // 示例中为接收了\"Hello\"，并将\"Hello World\"返回给应用\n      reply.writeString(optFir + ` World`);\n    }\n    return true;\n  }\n} 在DriverExtAbility.ets文件中，增加导入DriverExtensionAbility的依赖包，该包提供了onInit()、onRelease()、onConnect()和onDisconnect()生命周期回调，自定义类继承DriverExtensionAbility并根据需要重写需要的生命周期回调。 export default class DriverExtAbility extends DriverExtensionAbility {\n  onInit(want: Want) {\n    console.info('testTag', `onInit, want: ${want.abilityName}`);\n  }\n\n  onRelease() {\n    console.info('testTag', `onRelease`);\n  }\n\n  onConnect(want: Want) {\n    console.info('testTag', `onConnect, want: ${want.abilityName}`);\n    return new StubTest(\"test\");\n  }\n\n  onDisconnect(want: Want) {\n    console.info('testTag', `onDisconnect, want: ${want.abilityName}`);\n  }\n\n  onDump(params: Array<string>) {\n    console.info('testTag', `onDump, params:` + JSON.stringify(params));\n    return ['params'];\n  }\n} 在工程Module对应的module.json5配置文件中注册DriverExtensionAbility，type标签需要设置为“driver”，srcEntry标签表示当前ExtensionAbility组件所对应的代码路径。 {\n  \"module\": {\n    \"name\": \"entry\",\n    \"type\": \"entry\",\n    \"description\": \"$string:module_desc\",\n    \"mainElement\": \"EntryAbility\",\n    \"deviceTypes\": [\n      \"default\",\n      \"tablet\"\n    ],\n    \"requestPermissions\": [\n      {\n        \"name\": \"ohos.permission.ACCESS_EXTENSIONAL_DEVICE_DRIVER\" // 此处为扩展外设相关权限，必须配置\n      }\n    ],\n    \"deliveryWithInstall\": true,\n    \"installationFree\": false,\n    \"pages\": \"$profile:main_pages\",\n    \"abilities\": [\n      {\n        \"name\": \"EntryAbility\",\n        \"srcEntry\": \"./ets/entryability/EntryAbility.ets\",\n        \"description\": \"$string:EntryAbility_desc\",\n        \"icon\": \"$media:startIcon\",\n        \"label\": \"$string:EntryAbility_label\",\n        \"startWindowIcon\": \"$media:startIcon\",\n        \"startWindowBackground\": \"$color:start_window_background\",\n        \"exported\": true,\n        \"skills\": [\n          {\n            \"entities\": [\n              \"entity.system.home\"\n            ],\n            \"actions\": [\n              \"action.system.home\"\n            ]\n          }\n        ]\n      }\n    ],\n    \"extensionAbilities\": [\n      {\n        \"name\": \"DriverExtAbility\",\n        \"icon\": \"$media:startIcon\",\n        \"description\": \"driver\",\n        \"type\": \"driver\",\n        \"exported\": true,\n        \"srcEntry\": \"./ets/driverextability/DriverExtAbility.ets\",\n        \"metadata\": [\n          {\n            \"name\": \"bus\", // 必填项，所属总线\n            \"value\": \"USB\"\n          },\n          {\n            \"name\": \"desc\", // 选填项，必要的驱动描述\n            \"value\": \"the sample of driverExtensionAbility\"\n          },\n          {\n            \"name\": \"vendor\", // 选填项，驱动厂商名称\n            \"value\": \"string\"\n          },\n          {\n            \"name\": \"vid\", // 支持 USB vendor id 列表，填写16进制，此处为4817的16进制\n            \"value\": \"0x12D1\"\n          },\n          {\n            \"name\": \"pid\", // 支持的 USB product id 列表，填写16进制，此处为4258的16进制\n            \"value\": \"0x10A2\"\n          }\n        ]\n      }\n    ]\n  }\n} 完成客户端和驱动示例代码开发后，请参考使用本地真机运行应用/元服务，将Hap导入设备中，并点击hap中的Hello，查看是否会转变为Hello world，即实现ipc通信功能。 
扩展设备能力
扩展外设管理提供了HID DDK和USB DDK两种能力，用于驱动开发；
具体使用方法，请参考：
 HID DDK开发指导 USB DDK开发指导 
应用签名
应用需要配置签名文件才能在设备上运行，并且扩展外设管理客户端开发，需要配置扩展外设的权限：ohos.permission.ACCESS_EXTENSIONAL_DEVICE_DRIVER。
如果使用HID/USB DDK请添加对应权限，具体权限请查看上方开发指导。
自动签名方法： 请参考自动签名。
权限配置方法： 请参考使用ACL的签名配置指导。
