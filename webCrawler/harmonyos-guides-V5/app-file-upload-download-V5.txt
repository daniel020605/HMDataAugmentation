应用文件上传下载
应用可以将应用文件上传到网络服务器，也可以从网络服务器下载网络资源文件到本地应用文件目录。
上传应用文件
开发者可以使用上传下载模块（ohos.request）的上传接口将本地文件上传。文件上传过程使用系统服务代理完成，在api12中request.agent.create接口增加了设置代理地址参数，支持用户设置自定义代理地址。
当前上传应用文件功能，仅支持上传应用缓存文件路径（cacheDir）下的文件。
使用上传下载模块，需声明权限：ohos.permission.INTERNET。
以下示例代码演示两种将应用缓存文件路径下的文件上传至网络服务器的方式:
// 方式一:request.uploadFile\n// pages/xxx.ets\nimport { common } from '@kit.AbilityKit';\nimport fs from '@ohos.file.fs';\nimport { BusinessError, request } from '@kit.BasicServicesKit';\n\n// 获取应用文件路径\nlet context = getContext(this) as common.UIAbilityContext;\nlet cacheDir = context.cacheDir;\n\n// 新建一个本地应用文件\nlet file = fs.openSync(cacheDir + '/test.txt', fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\nfs.writeSync(file.fd, 'upload file test');\nfs.closeSync(file);\n\n// 上传任务配置项\nlet files: Array<request.File> = [\n//uri前缀internal://cache 对应cacheDir目录\n  { filename: 'test.txt', name: 'test', uri: 'internal://cache/test.txt', type: 'txt' }\n]\nlet data: Array<request.RequestData> = [{ name: 'name', value: 'value' }];\nlet uploadConfig: request.UploadConfig = {\n  url: 'https://xxx',\n  header: {\n    'key1':'value1',\n    'key2':'value2'\n  },\n  method: 'POST',\n  files: files,\n  data: data\n}\n\n// 将本地应用文件上传至网络服务器\ntry {\n  request.uploadFile(context, uploadConfig)\n    .then((uploadTask: request.UploadTask) => {\n      uploadTask.on('complete', (taskStates: Array<request.TaskState>) => {\n        for (let i = 0; i < taskStates.length; i++) {\n          console.info(`upload complete taskState: ${JSON.stringify(taskStates[i])}`);\n        }\n      });\n    })\n    .catch((err: BusinessError) => {\n      console.error(`Invoke uploadFile failed, code is ${err.code}, message is ${err.message}`);\n    })\n} catch (error) {\n  let err: BusinessError = error as BusinessError;\n  console.error(`Invoke uploadFile failed, code is ${err.code}, message is ${err.message}`);\n}
// 方式二:request.agent\n// pages/xxx.ets\nimport { common } from '@kit.AbilityKit';\nimport fs from '@ohos.file.fs';\nimport { BusinessError, request } from '@kit.BasicServicesKit';\n// 获取应用文件路径\nlet context = getContext(this) as common.UIAbilityContext;\nlet cacheDir = context.cacheDir;\n\n// 新建一个本地应用文件\nlet file = fs.openSync(cacheDir + '/test.txt', fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE);\nfs.writeSync(file.fd, 'upload file test');\nfs.closeSync(file);\nlet attachments: Array<request.agent.FormItem> = [{\n  name: \"test\",\n  value: [\n    {\n      filename: \"test.txt\",\n      path: \"./test.txt\",\n    },\n  ]\n}];\nlet config: request.agent.Config = {\n  action: request.agent.Action.UPLOAD,\n  url: 'http://xxx',\n  mode: request.agent.Mode.FOREGROUND,\n  overwrite: true,\n  method: \"POST\",\n  headers: {\n    'key1':'value1',\n    'key2':'value2'\n  },\n  data: attachments,\n  saveas: \"./\"\n};\nrequest.agent.create(getContext(), config).then((task: request.agent.Task) => {\n  task.start((err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to start the upload task, Code: ${err.code}  message: ${err.message}`);\n      return;\n    }\n  });\n  task.on('progress', async(progress) => {\n    console.warn(`/Request upload status ${progress.state}, uploaded ${progress.processed}`);\n  })\n  task.on('completed', async() => {\n    console.warn(`/Request upload completed`);\n    //该方法需用户管理任务生命周期，任务结束后调用remove释放task对象\n    request.agent.remove(task.tid);\n  })\n}).catch((err: BusinessError) => {\n  console.error(`Failed to create a upload task, Code: ${err.code}, message: ${err.message}`);\n});
下载网络资源文件至应用文件目录
开发者可以使用上传下载模块（ohos.request）的下载接口将网络资源文件下载到应用文件目录。对已下载的网络资源文件，开发者可以使用基础文件IO接口（ohos.file.fs）对其进行访问，使用方式与应用文件访问一致。文件下载过程使用系统服务代理完成，在api12中request.agent.create接口增加了设置代理地址参数，支持用户设置自定义代理地址。
当前网络资源文件仅支持下载至应用文件目录。
使用上传下载模块，需声明权限：ohos.permission.INTERNET。
以下示例代码演示两种将网络资源文件下载到应用文件目录的方式：
// 方式一:request.downloadFile\n// pages/xxx.ets\n// 将网络资源文件下载到应用文件目录并读取一段内容\nimport { common } from '@kit.AbilityKit';\nimport fs from '@ohos.file.fs';\nimport { BusinessError, request } from '@kit.BasicServicesKit';\nimport { buffer } from '@kit.ArkTS';\n\n// 获取应用文件路径\nlet context = getContext(this) as common.UIAbilityContext;\nlet filesDir = context.filesDir;\n\ntry {\n  request.downloadFile(context, {\n    url: 'https://xxxx/xxxx.txt',\n    filePath: filesDir + '/xxxx.txt'\n  }).then((downloadTask: request.DownloadTask) => {\n    downloadTask.on('complete', () => {\n      console.info('download complete');\n      let file = fs.openSync(filesDir + '/xxxx.txt', fs.OpenMode.READ_WRITE);\n      let arrayBuffer = new ArrayBuffer(1024);\n      let readLen = fs.readSync(file.fd, arrayBuffer);\n      let buf = buffer.from(arrayBuffer, 0, readLen);\n      console.info(`The content of file: ${buf.toString()}`);\n      fs.closeSync(file);\n    })\n  }).catch((err: BusinessError) => {\n    console.error(`Invoke downloadTask failed, code is ${err.code}, message is ${err.message}`);\n  });\n} catch (error) {\n  let err: BusinessError = error as BusinessError;\n  console.error(`Invoke downloadFile failed, code is ${err.code}, message is ${err.message}`);\n}
// 方式二:request.agent\n// pages/xxx.ets\n// 将网络资源文件下载到应用文件目录并读取一段内容\nimport { BusinessError, request } from '@kit.BasicServicesKit';\nlet context = getContext(this) as common.UIAbilityContext;\nlet filesDir = context.filesDir;\n\nlet config: request.agent.Config = {\n  action: request.agent.Action.DOWNLOAD,\n  url: 'https://xxxx/test.txt',\n  saveas: 'xxxx.txt',\n  gauge: true,\n  overwrite: true,\n  network: request.agent.Network.WIFI,\n};\nrequest.agent.create(context, config).then((task: request.agent.Task) => {\n  task.start((err: BusinessError) => {\n    if (err) {\n      console.error(`Failed to start the download task, Code: ${err.code}  message: ${err.message}`);\n      return;\n    }\n  });\n  task.on('progress', async(progress) => {\n    console.warn(`/Request download status ${progress.state}, downloaded ${progress.processed}`);\n  })\n  task.on('completed', async() => {\n    console.warn(`/Request download completed`);\n    let file = fs.openSync(filesDir + '/xxxx.txt', fs.OpenMode.READ_WRITE);\n    let arrayBuffer = new ArrayBuffer(1024);\n    let readLen = fs.readSync(file.fd, arrayBuffer);\n    let buf = buffer.from(arrayBuffer, 0, readLen);\n    console.info(`The content of file: ${buf.toString()}`);\n    fs.closeSync(file);\n    //该方法需用户管理任务生命周期，任务结束后调用remove释放task对象\n    request.agent.remove(task.tid);\n  })\n}).catch((err: BusinessError) => {\n  console.error(`Failed to create a download task, Code: ${err.code}, message: ${err.message}`);\n});
