开发静态共享包
HAR(Harmony Archive）是静态共享包，可以包含代码、C++库、资源和配置文件。通过HAR可以实现多个模块或多个工程共享ArkUI组件、资源等相关代码。HAR不同于HAP，不能独立安装运行在设备上，只能作为应用模块的依赖项被引用。
接下来，将简单介绍库模块的工程结构，如下图所示：
相关字段的描述如下，其余字段与Entry或Feature模块相关字段相同，可参考工程介绍。
libs：用于存放.so文件。src > main > cpp > types：用于存放C++ API描述文件，子目录按照so维度进行划分。src > main > cpp > types > liblibrary > Index.d.ts：描述C++接口的方法名、入参、返回参数等信息。src > main > cpp > types > liblibrary > oh-package.json5：描述so三方包声明文件入口和so包名信息。src > main > cpp > CMakeLists.txt：CMake配置文件，提供CMake构建脚本。src > main > cpp > napi_init.cpp：共享包C++代码源文件。Index.ets：共享包导出声明的入口。
本文将介绍如何创建库模块、如何编译共享包、如何引用共享包资源，以及如何发布共享包。
创建库模块
鼠标移到工程目录顶部，单击右键，选择New > Module，在工程中添加模块。在Choose Your Ability Template界面中，选择Static Library，并单击Next。 在Configure New Module界面中，设置新添加的模块信息，设置完成后，单击Finish完成创建。Module name：新增模块的名称。Device type：支持的设备类型。Enable native：是否创建一个用于调用C++代码的模块。  创建完成后，会在工程目录中生成库模块及相关文件。  
编译库模块
开发完库模块后，选中模块名，然后通过DevEco Studio菜单栏的Build > Make Module ${libraryName}进行编译构建，生成HAR。HAR可用于工程其它模块的引用，或将HAR上传至ohpm仓库，供其他开发者下载使用。若部分源码文件不需要打包至HAR中，可通过创建.ohpmignore文件，配置打包时要忽略的文件/文件夹。
编译构建的HAR可在模块下的build目录下获取，包格式为*.har。
在编译构建HAR时，请注意以下事项：
编译构建HAR的过程中，不会将模块中的C++代码直接打包进.har文件中，而是将C++代码编译成动态依赖库.so文件放置在.har文件中的libs目录下。在编译构建HAR的过程中，会生成资源文件ResourceTable.txt，以便编辑器可以对HAR中的资源文件进行联想。因此，如果不使用DevEco Studio对HAR进行构建，则DevEco Studio的编辑器会无法联想HAR中的资源。如果使用的Hvigor为2.5.0-s及以上版本，在编译构建HAR的过程中，会将dependencies内处于本模块路径下的本地依赖也打包进.har文件中；如果在打包后发现缺少部分本地依赖（如cpp/types目录），请参见FAQ。
