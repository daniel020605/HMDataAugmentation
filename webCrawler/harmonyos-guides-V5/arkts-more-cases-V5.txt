适配指导案例
本文通过更多应用场景中的案例，提供在ArkTS语法规则下将TS代码适配成ArkTS代码的建议。各章以ArkTS语法规则英文名称命名，每个案例提供适配前的TS代码和适配后的ArkTS代码。
arkts-identifiers-as-prop-names
应用代码
interface W {\n  bundleName: string\n  action: string\n  entities: string[]\n}\n\nlet wantInfo: W = {\n  'bundleName': 'com.huawei.hmos.browser',\n  'action': 'ohos.want.action.viewData',\n  'entities': ['entity.system.browsable']\n}
建议改法
interface W {\n  bundleName: string\n  action: string\n  entities: string[]\n}\n\nlet wantInfo: W = {\n  bundleName: 'com.huawei.hmos.browser',\n  action: 'ohos.want.action.viewData',\n  entities: ['entity.system.browsable']\n}
arkts-no-any-unknown
[h2]按照业务逻辑，将代码中的any, unknown改为具体的类型
function printObj(obj: any) {\n  console.log(obj);\n}\n\nprintObj('abc');
建议改法
function printObj(obj: string) {\n  console.log(obj);\n}\n\nprintObj('abc');
[h2]标注JSON.parse返回值类型
应用代码
class A {\n  v: number = 0\n  s: string = ''\n  \n  foo(str: string) {\n    let tmpStr = JSON.parse(str);\n    if (tmpStr.add != undefined) {\n      this.v = tmpStr.v;\n      this.s = tmpStr.s;\n    }\n  }\n}
建议改法
class A {\n  v: number = 0\n  s: string = ''\n  \n  foo(str: string) {\n    let tmpStr: Record<string, Object> = JSON.parse(str);\n    if (tmpStr.add != undefined) {\n      this.v = tmpStr.v as number;\n      this.s = tmpStr.s as string;\n    }\n  }\n}
[h2]使用Record类型
应用代码
function printProperties(obj: any) {\n  console.log(obj.name);\n  console.log(obj.value);\n}
建议改法
function printProperties(obj: Record<string, Object>) {\n  console.log(obj.name as string);\n  console.log(obj.value as string);\n}
arkts-no-call-signature
使用函数类型来替代。
应用代码
interface I {\n  (value: string): void;\n}\n\nfunction foo(fn: I) {\n  fn('abc');\n}\n\nfoo((value: string) => {\n  console.log(value);\n})
建议改法
type I = (value: string) => void\n\nfunction foo(fn: I) {\n  fn('abc');\n}\n\nfoo((value: string) => {\n  console.log(value);\n})
arkts-no-ctor-signatures-type
应用代码
class Controller {\n  value: string = ''\n\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n\ntype ControllerConstructor = {\n  new (value: string): Controller;\n}\n\nclass Menu {\n  controller: ControllerConstructor = Controller\n  createController() {\n    if (this.controller) {\n      return new this.controller(123);\n    }\n    return null;\n  }\n}\n\nlet t = new Menu();\nconsole.log(t.createController()!.value);
建议改法
class Controller {\n  value: string = ''\n\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n\ntype ControllerConstructor = () => Controller;\n\nclass Menu {\n  controller: ControllerConstructor = () => {\n    return new Controller('abc');\n  }\n\n  createController() {\n    if (this.controller) {\n      return this.controller();\n    }\n    return null;\n  }\n}\n\nlet t: Menu = new Menu();\nconsole.log(t.createController()!.value);
arkts-no-indexed-signatures
使用Record类型来替代。
应用代码
function foo(data: { [key: string]: string }) {\n  data['a'] = 'a';\n  data['b'] = 'b';\n  data['c'] = 'c';\n}
建议改法
function foo(data: Record<string, string>) {\n  data['a'] = 'a';\n  data['b'] = 'b';\n  data['c'] = 'c';\n}
arkts-no-typing-with-this
应用代码
class C {\n  getInstance(): this {\n    return this;\n  }\n}
建议改法
class C {\n  getInstance(): C {\n    return this;\n  }\n}
arkts-no-ctor-prop-decls
应用代码
class Person {\n  constructor(readonly name: string) {}\n\n  getName(): string {\n    return this.name;\n  }\n}
建议改法
class Person {\n  name: string\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n}
arkts-no-ctor-signatures-iface
应用代码
class Controller {\n  value: string = ''\n\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n\ninterface ControllerConstructor {\n  new (value: string): Controller;\n}\n\nclass Menu {\n  controller: ControllerConstructor = Controller\n  createController() {\n    if (this.controller) {\n      return new this.controller('abc');\n    }\n    return null;\n  }\n}\n\nlet t = new Menu();\nconsole.log(t.createController()!.value);
建议改法
class Controller {\n  value: string = ''\n\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n\ntype ControllerConstructor = () => Controller;\n\nclass Menu {\n  controller: ControllerConstructor = () => {\n    return new Controller('abc');\n  }\n\n  createController() {\n    if (this.controller) {\n      return this.controller();\n    }\n    return null;\n  }\n}\n\nlet t: Menu = new Menu();\nconsole.log(t.createController()!.value);
arkts-no-props-by-index
可以转换成Record类型，用来访问对象的属性。
应用代码
import { router } from '@kit.ArkUI';\nlet params: Object = router.getParams();\nlet funNum: number = params['funNum'];\nlet target: string = params['target'];
建议改法
import { router } from '@kit.ArkUI';\nlet params = router.getParams() as Record<string, string | number>;\nlet funNum: number = params.funNum as number;\nlet target: string = params.target as string;
arkts-no-inferred-generic-params
应用代码
class A {\n  str: string = ''\n}\nclass B extends A {}\nclass C extends A {}\n\nlet arr: Array<A> = [];\n\nlet originMenusMap:Map<string, C> = new Map(arr.map(item => [item.str, (item instanceof C) ? item: null]));
建议改法
class A {\n  str: string = ''\n}\nclass B extends A {}\nclass C extends A {}\n\nlet arr: Array<A> = [];\n\nlet originMenusMap: Map<string, C | null> = new Map<string, C | null>(arr.map<[string, C | null]>(item => [item.str, (item instanceof C) ? item: null]));
原因
(item instanceof C) ? item: null 需要声明类型为C | null，由于编译器无法推导出map的泛型类型参数，需要显式标注。
arkts-no-regexp-literals
应用代码
let regex: RegExp = /\\s*/g;
建议改法
let regexp: RegExp = new RegExp('\\\\s*','g');
原因
如果正则表达式中使用了标志符，需要将其作为new RegExp()的参数。
arkts-no-untyped-obj-literals
[h2]从SDK中导入类型，标注object literal类型
应用代码
const area = {\n  pixels: new ArrayBuffer(8),\n  offset: 0,\n  stride: 8,\n  region: { size: { height: 1,width:2 }, x: 0, y: 0 }\n}
建议改法
import { image } from '@kit.ImageKit';\n\nconst area: image.PositionArea = {\n  pixels: new ArrayBuffer(8),\n  offset: 0,\n  stride: 8,\n  region: { size: { height: 1, width: 2 }, x: 0, y: 0 }\n}
[h2]用class为object literal标注类型，需要class的构造函数无参数
应用代码
class Test {\n  value: number = 1\n\n  constructor(value: number) {\n    this.value = value;\n  }\n}\n\nlet t: Test = { value: 2 };
建议改法1
// 去除构造函数\nclass Test {\n  value: number = 1\n}\n\nlet t: Test = { value: 2 };
建议改法2
// 使用new\nclass Test {\n  value: number = 1\n  \n  constructor(value: number) {\n    this.value = value;\n  }\n}\n\nlet t: Test = new Test(2);
原因
class C {\n  value: number = 1\n  \n  constructor(n: number) {\n    if (n < 0) {\n      throw new Error('Negative');\n    }\n    this.value = n;\n  }\n}\n\nlet s: C = new C(-2); \t//抛出异常\nlet t: C = { value: -2 };\t//ArkTS不支持
例如在上面的例子中，如果允许使用C来标注object literal的类型，那么上述代码中的变量t会导致行为的二义性。ArkTS禁止通过object literal来绕过这一行为。
[h2]用class/interface为object literal标注类型，需要使用identifier作为object literal的key
应用代码
class Test {\n  value: number = 0\n}\n\nlet arr: Test[] = [\n  {\n    'value': 1\n  },\n  {\n    'value': 2\n  },\n  {\n    'value': 3\n  }\n]
建议改法
class Test {\n  value: number = 0\n}\nlet arr: Test[] = [\n  {\n    value: 1\n  },\n  {\n    value: 2\n  },\n  {\n    value: 3\n  }\n]
[h2]使用Record为object literal标注类型，需要使用字符串作为object literal的key
应用代码
let obj: Record<string, number | string> = {\n  value: 123,\n  name: 'abc'\n}
建议改法
let obj: Record<string, number | string> = {\n  'value': 123,\n  'name': 'abc'\n}
[h2]函数参数类型包含index signature
应用代码
function foo(obj: { [key: string]: string}): string {\n  if (obj != undefined && obj != null) {\n    return obj.value1 + obj.value2;\n  }\n  return '';\n}
建议改法
function foo(obj: Record<string, string>): string {\n  if (obj != undefined && obj != null) {\n    return obj.value1 + obj.value2;\n  }\n  return '';\n}
[h2]函数实参使用了object literal
应用代码
(fn) => {\n  fn({ value: 123, name:'' });\n}
建议改法
class T {\n  value: number = 0\n  name: string = ''\n}\n\n(fn: (v: T) => void) => {\n  fn({ value: 123, name: '' });\n}
[h2]class/interface 中包含方法
应用代码
interface T {\n  foo(value: number): number\n}\n\nlet t:T = { foo: (value) => { return value } };
建议改法1
interface T {\n  foo: (value: number) => number\n}\n\nlet t:T = { foo: (value) => { return value } };
建议改法2
class T {\n  foo: (value: number) => number = (value: number) => {\n    return value;\n  }\n}\n\nlet t:T = new T();
原因
class/interface中声明的方法应该被所有class的实例共享。ArkTS不支持通过object literal改写实例方法。ArkTS支持函数类型的属性。
[h2]export default对象
应用代码
export default {\n  onCreate() {\n    // ...\n  },\n  onDestroy() {\n    // ...\n  }\n}
建议改法
class Test {\n  onCreate() {\n    // ...\n  }\n  onDestroy() {\n    // ...\n  }\n}\n\nexport default new Test()
[h2]通过导入namespace获取类型
应用代码
// test.d.ets\ndeclare namespace test {\n  interface I {\n    id: string;\n    type: number;\n  }\n\n  function foo(name: string, option: I): void;\n}\n\nexport default test;\n\n// app.ets\nimport { test } from 'test';\n\nlet option = { id: '', type: 0 };\ntest.foo('', option);
建议改法
// test.d.ets\ndeclare namespace test {\n  interface I {\n    id: string;\n    type: number;\n  }\n\n  function foo(name: string, option: I): void;\n}\n\nexport default test;\n\n// app.ets\nimport { test } from 'test';\n\nlet option: test.I = { id: '', type: 0 };\ntest.foo('', option);
原因
对象字面量缺少类型，根据test.foo分析可以得知，option的类型来源于声明文件，那么只需要将类型导入即可。
注意到在test.d.ets中，I是定义在namespace中的，所以在ets文件中，先导入namespace，再通过名称获取相应的类型。
[h2]object literal传参给Object类型
应用代码
function emit(event: string, ...args: Object[]): void {}\n\nemit('', {\n  'action': 11,\n  'outers': false\n});
建议改法
function emit(event: string, ...args: Object[]): void {}\n\nlet emitArg: Record<string, number | boolean> = {\n   'action': 11,\n   'outers': false\n}\n\nemit('', emitArg);
arkts-no-obj-literals-as-types
应用代码
type Person = { name: string, age: number }
建议改法
interface Person {\n  name: string,\n  age: number\n}
arkts-no-noninferrable-arr-literals
应用代码
let permissionList = [\n  { name: '设备信息', value: '用于分析设备的续航、通话、上网、SIM卡故障等' },\n  { name: '麦克风', value: '用于反馈问题单时增加语音' },\n  { name: '存储', value: '用于反馈问题单时增加本地文件附件' }\n]
建议改法
为对象字面量声明类型
class PermissionItem {\n  name?: string\n  value?: string\n}\n\nlet permissionList: PermissionItem[] = [\n  { name: '设备信息', value: '用于分析设备的续航、通话、上网、SIM卡故障等' },\n  { name: '麦克风', value: '用于反馈问题单时增加语音' },\n  { name: '存储', value: '用于反馈问题单时增加本地文件附件' }\n]
arkts-no-method-reassignment
应用代码
class C {\n  add(left: number, right: number): number {\n    return left + right;\n  }\n}\n\nfunction sub(left: number, right: number): number {\n  return left - right;\n}\n\nlet c1 = new C();\nc1.add = sub;
建议改法
class C {\n  add: (left: number, right: number) => number = \n    (left: number, right: number) => {\n      return left + right;\n    }\n}\n\nfunction sub(left: number, right: number): number {\n  return left - right;\n}\n\nlet c1 = new C();\nc1.add = sub;
arkts-no-polymorphic-unops
应用代码
let a = +'5';\nlet b = -'5';\nlet c = ~'5';\nlet d = +'string';
建议改法
let a = Number.parseInt('5');\nlet b = -Number.parseInt('5');\nlet c = ~Number.parseInt('5');\nlet d = new Number('string');
arkts-no-type-query
应用代码
// module1.ts\nclass C {\n  value: number = 0\n}\n\nexport let c = new C()\n\n// module2.ts\nimport { c } from './module1'\nlet t: typeof c = { value: 123 };
建议改法
// module1.ts\nclass C {\n  value: number = 0\n}\n\nexport { C }\n\n// module2.ts\nimport { C } from './module1'\nlet t: C = { value: 123 };
arkts-no-in
[h2]使用Object.keys判断属性是否存在
应用代码
function test(str: string, obj: Record<string, Object>) {\n  return str in obj;\n}
建议改法
function test(str: string, obj: Record<string, Object>) {\n  for (let i of Object.keys(obj)) {\n    if (i == str) {\n      return true;\n    }\n  }\n  return false;\n}
arkts-no-destruct-assignment
应用代码
let map = new Map<string, string>([['a', 'a'], ['b', 'b']]);\nfor (let [key, value] of map) {\n  console.log(key);\n  console.log(value);\n}
建议改法
使用数组
let map = new Map<string, string>([['a', 'a'], ['b', 'b']]);\nfor (let arr of map) {\n  let key = arr[0];\n  let value = arr[1];\n  console.log(key);\n  console.log(value);\n}
arkts-no-types-in-catch
应用代码
import { BusinessError } from '@kit.BasicServicesKit'\n\ntry {\n  // ...\n} catch (e: BusinessError) {\n  console.error(e.message, e.code);\n}
建议改法
import { BusinessError } from '@kit.BasicServicesKit'\n\ntry {\n  // ...\n} catch (error) {\n  let e: BusinessError = error as BusinessError;\n  console.error(e.message, e.code);\n}
arkts-no-for-in
应用代码
interface Person {\n  [name: string]: string\n}\nlet p: Person = {\n  name: 'tom',\n  age: '18'\n};\n\nfor (let t in p) {\n  console.log(p[t]);  // log: \"tom\", \"18\" \n}
建议改法
let p: Record<string, string> = {\n  'name': 'tom',\n  'age': '18'\n};\n\nfor (let ele of Object.entries(p)) {\n  console.log(ele[1]);  // log: \"tom\", \"18\" \n}
arkts-no-mapped-types
应用代码
class C {\n  a: number = 0\n  b: number = 0\n  c: number = 0\n}\ntype OptionsFlags = {\n  [Property in keyof C]: string\n}
建议改法
class C {\n  a: number = 0\n  b: number = 0\n  c: number = 0\n}\n\ntype OptionsFlags = Record<keyof C, string>
arkts-limited-throw
应用代码
import { BusinessError } from '@kit.BasicServicesKit'\n\nfunction ThrowError(error: BusinessError) {\n  throw error;\n}
建议改法
import { BusinessError } from '@kit.BasicServicesKit'\n\nfunction ThrowError(error: BusinessError) {\n  throw error as Error;\n}
原因
throw语句中值的类型必须为Error或者其继承类，如果继承类是一个泛型，会有编译期报错。建议使用as将类型转换为Error。
arkts-no-standalone-this
[h2]函数内使用this
应用代码
function foo() {\n  console.log(this.value);\n}\n\nlet obj = { value: 'abc' };\nfoo.apply(obj);
建议改法1
使用类的方法实现,如果该方法被多个类使用,可以考虑采用继承的机制
class Test {\n  value: string = ''\n  constructor (value: string) {\n    this.value = value\n  }\n  \n  foo() {\n    console.log(this.value);\n  }\n}\n\nlet obj: Test = new Test('abc');\nobj.foo();
建议改法2
将this作为参数传入
function foo(obj: Test) {\n  console.log(obj.value);\n}\n\nclass Test {\n  value: string = ''\n}\n\nlet obj: Test = { value: 'abc' };\nfoo(obj);
建议改法3
将属性作为参数传入
function foo(value: string) {\n  console.log(value);\n}\n\nclass Test {\n  value: string = ''\n}\n\nlet obj: Test = { value: 'abc' };\nfoo(obj.value);
[h2]class的静态方法内使用this
应用代码
class Test {\n  static value: number = 123\n  static foo(): number {\n    return this.value\n  }\n}
建议改法
class Test {\n  static value: number = 123\n  static foo(): number {\n    return Test.value\n  }\n}
arkts-no-spread
应用代码
// test.d.ets\ndeclare namespace test {\n  interface I {\n    id: string;\n    type: number;\n  }\n\n  function foo(): I;\n}\n\nexport default test\n\n// app.ets\nimport test from 'test';\n\nlet t: test.I = {\n  ...test.foo(),\n  type: 0\n}
建议改法
// test.d.ets\ndeclare namespace test {\n  interface I {\n    id: string;\n    type: number;\n  }\n\n  function foo(): I;\n}\n\nexport default test\n\n// app.ets\nimport test from 'test';\n\nlet t: test.I = test.foo();\nt.type = 0;
原因
ArkTS中，对象布局在编译期是确定的。如果需要将一个对象的所有属性展开赋值给另一个对象可以通过逐个属性赋值语句完成。在本例中，需要展开的对象和赋值的目标对象类型恰好相同，可以通过改变该对象属性的方式重构代码。
arkts-no-ctor-signatures-funcs
在class内声明属性，而不是在构造函数上。
应用代码
class Controller {\n  value: string = ''\n  constructor(value: string) {\n    this.value = value\n  }\n}\n\ntype ControllerConstructor = new (value: string) => Controller;\n\nclass Menu {\n  controller: ControllerConstructor = Controller\n  createController() {\n    if (this.controller) {\n      return new this.controller('abc');\n    }\n    return null;\n  }\n}\n\nlet t = new Menu()\nconsole.log(t.createController()!.value)
建议改法
class Controller {\n  value: string = ''\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n\ntype ControllerConstructor = () => Controller;\n\nclass Menu {\n  controller: ControllerConstructor = () => { return new Controller('abc') }\n  createController() {\n    if (this.controller) {\n      return this.controller();\n    }\n    return null;\n  }\n}\n\nlet t: Menu = new Menu();\nconsole.log(t.createController()!.value);
arkts-no-globalthis
由于无法为globalThis添加静态类型，只能通过查找的方式访问globalThis的属性，造成额外的性能开销。另外，无法为globalThis的属性标记类型，无法保证对这些属性操作的安全和高性能。因此ArkTS不支持globalThis。
建议按照业务逻辑根据import/export语法实现数据在不同模块的传递。 必要情况下，可以通过构造的单例对象来实现全局对象的功能。(说明： 不能在har中定义单例对象，har在打包时会在不同的hap中打包两份，无法实现单例。) 
构造单例对象
// 构造单例对象\nexport class GlobalContext {\n  private constructor() {}\n  private static instance: GlobalContext;\n  private _objects = new Map<string, Object>();\n\n  public static getContext(): GlobalContext {\n    if (!GlobalContext.instance) {\n      GlobalContext.instance = new GlobalContext();\n    }\n    return GlobalContext.instance;\n  }\n\n  getObject(value: string): Object | undefined {\n    return this._objects.get(value);\n  }\n\n  setObject(key: string, objectClass: Object): void {\n    this._objects.set(key, objectClass);\n  }\n}
应用代码
// file1.ts\n\nexport class Test {\n  value: string = '';\n  foo(): void {\n    globalThis.value = this.value;\n  }\n}\n\n// file2.ts\n\nglobalThis.value;
建议改法
// file1.ts\n\nimport { GlobalContext } from '../GlobalContext'\n\nexport class Test {\n  value: string = '';\n  foo(): void {\n    GlobalContext.getContext().setObject('value', this.value);\n  }\n}\n\n// file2.ts\n\nimport { GlobalContext } from '../GlobalContext'\n\nGlobalContext.getContext().getObject('value');
arkts-no-func-apply-bind-call
[h2]使用标准库中接口
应用代码
let arr: number[] = [1, 2, 3, 4];\nlet str = String.fromCharCode.apply(null, Array.from(arr));
建议改法
let arr: number[] = [1, 2, 3, 4];\nlet str = String.fromCharCode(...Array.from(arr));
[h2]bind定义方法
应用代码
class A {\n  value: string = ''\n  foo: Function = () => {}\n}\n\nclass Test {\n  value: string = '1234'\n  obj: A = {\n    value: this.value,\n    foo: this.foo.bind(this)\n  }\n  \n  foo() {\n    console.log(this.value);\n  }\n}
建议改法1
class A {\n  value: string = ''\n  foo: Function = () => {}\n}\n\nclass Test {\n  value: string = '1234'\n  obj: A = {\n    value: this.value,\n    foo: (): void => this.foo()\n  }\n  \n  foo() {\n    console.log(this.value);\n  }\n}
建议改法2
class A {\n  value: string = ''\n  foo: Function = () => {}\n}\n\nclass Test {\n  value: string = '1234'\n  foo: () => void = () => {\n    console.log(this.value);\n  }\n  obj: A = {\n    value: this.value,\n    foo: this.foo\n  }\n}
[h2]使用apply
应用代码
class A {\n  value: string;\n  constructor (value: string) {\n    this.value = value;\n  }\n\n  foo() {\n    console.log(this.value);\n  }\n}\n\nlet a1 = new A('1');\nlet a2 = new A('2');\n\na1.foo();\na1.foo.apply(a2);
建议改法
class A {\n  value: string;\n  constructor (value: string) {\n    this.value = value;\n  }\n\n  foo() {\n    this.fooApply(this);\n  }\n\n  fooApply(a: A) {\n    console.log(a.value);\n  }\n}\n\nlet a1 = new A('1');\nlet a2 = new A('2');\n\na1.foo();\na1.fooApply(a2);
arkts-limited-stdlib
[h2]Object.fromEntries()
应用代码
let entries = new Map([\n  ['foo', 123],\n  ['bar', 456]\n]);\n\nlet obj = Object.fromEntries(entries);
建议改法
let entries = new Map([\n  ['foo', 123],\n  ['bar', 456]\n]);\n\nlet obj: Record<string, Object> = {};\nentries.forEach((value, key) => {\n  if (key != undefined && key != null) {\n    obj[key] = value;\n  }\n})
[h2]使用Number的属性和方法
ArkTS不允许使用全局对象的属性和方法： Infinity, NaN, isFinite, isNaN, parseFloat, parseInt
可以使用Number的属性和方法： Infinity, NaN, isFinite, isNaN, parseFloat, parseInt
应用代码
NaN;\nisFinite(123);\nparseInt('123');
建议改法
Number.NaN;\nNumber.isFinite(123);\nNumber.parseInt('123');
arkts-strict-typing(StrictModeError)
[h2]strictPropertyInitialization
应用代码
interface I {\n  name:string\n}\n\nclass A {}\n\nclass Test {\n  a: number;\n  b: string;\n  c: boolean;\n  d: I;\n  e: A;\n}
建议改法
interface I {\n  name:string\n}\n\nclass A {}\n\nclass Test {\n  a: number;\n  b: string;\n  c: boolean;\n  d: I = { name:'abc' };\n  e: A | null = null;\n  constructor(a:number, b:string, c:boolean) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n  }\n}
[h2]Type *** | null is not assignable to type ***
应用代码
class A {\n  bar() {}\n}\nfunction foo(n: number) {\n  if (n === 0) {\n    return null;\n  }\n  return new A();\n}\nfunction getNumber() {\n  return 5;\n}\nlet a:A = foo(getNumber());\na.bar();
建议改法
class A {\n  bar() {}\n}\nfunction foo(n: number) {\n  if (n === 0) {\n    return null;\n  }\n  return new A();\n}\nfunction getNumber() {\n  return 5;\n}\n\nlet a: A | null = foo(getNumber());\na?.bar();
[h2]严格属性初始化检查
在class中，如果一个属性没有初始化，且没有在构造函数中被赋值，那么ArkTS将报错。
建议改法
1.一般情况下，建议按照业务逻辑在声明时初始化属性，或者在构造函数中为属性赋值。如：
//code with error\nclass Test {\n  value: number\n  flag: boolean\n}\n\n//方式一，在声明时初始化\nclass Test {\n  value: number = 0\n  flag: boolean = false\n}\n\n//方式二，在构造函数中赋值\nclass Test {\n  value: number\n  flag: boolean\n  constructor(value: number, flag: boolean) {\n    this.value = value;\n    this.flag = flag;\n  }\n}
2.对于对象类型（包括函数类型）A，如果不确定如何初始化，建议按照以下方式之一进行初始化
