动态加载
动态import支持条件延迟加载，支持部分反射功能，可以提升页面的加载速度；动态import支持加载HSP模块/HAR模块/OHPM包/Native库等，并且HAR模块间只有变量动态import时还可以进行模块解耦。
技术适用场景介绍
应用开发的有些场景中，如果希望根据条件导入模块或者按需导入模块，可以使用动态导入代替静态导入。下面是可能会需要动态导入的场景：
 当静态导入的模块很明显的降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它。 当静态导入的模块很明显的占用了大量的系统内存且被使用的可能性很低。 当被导入的模块，在加载时并不存在，需要异步获取。 当被导入的模块说明符，需要动态构建。静态导入只能使用静态说明符。 当被导入的模块有副作用（这里的副作用，可以理解为模块中会直接运行的代码），这些副作用只有在触发了某些条件才被需要时。 
业务扩展场景介绍
动态import在业务上除了能实现条件延迟加载，还可以实现部分反射功能。实例如下，HAP动态import HAR包harlibrary，并调用静态成员函数staticAdd()、成员函数instanceAdd()，以及全局方法addHarlibrary()。
// harlibrary's src/main/ets/utils/Calc.ets\nexport class Calc {\n  public static staticAdd(a:number, b:number):number {\n    let c = a + b;\n    console.info('DynamicImport I am harlibrary in staticAdd, %d + %d = %d', a, b, c);\n    return c;\n  }\n\n  public instanceAdd(a:number, b:number):number {\n    let c = a + b;\n    console.info('DynamicImport I am harlibrary in instanceAdd, %d + %d = %d', a, b, c);\n    return c;\n  }\n}\n\nexport function addHarlibrary(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am harlibrary in addHarlibrary, %d + %d = %d', a, b, c);\n  return c;\n}
// harlibrary's Index.ets\nexport { Calc, addHarlibrary } from './src/main/ets/utils/Calc'
// HAP's oh-package.json5\n\"dependencies\": {\n  \"harlibrary\": \"file:../harlibrary\"\n}
// HAP's src/main/ets/pages/Index.ets\nimport('harlibrary').then((ns:ESObject) => {\n  ns.Calc.staticAdd(8, 9);  // 调用静态成员函数staticAdd()\n  let calc:ESObject = new ns.Calc();  // 实例化类Calc\n  calc.instanceAdd(10, 11);  // 调用成员函数instanceAdd()\n  ns.addHarlibrary(6, 7);  // 调用全局方法addHarlibrary()\n\n  // 使用类、成员函数和方法的字符串名字进行反射调用\n  let className = 'Calc';\n  let methodName = 'instanceAdd';\n  let staticMethod = 'staticAdd';\n  let functionName = 'addHarlibrary';\n  ns[className][staticMethod](12, 13);  // 调用静态成员函数staticAdd()\n  let calc1:ESObject = new ns[className]();  // 实例化类Calc\n  calc1[methodName](14, 15);  // 调用成员函数instanceAdd()\n  ns[functionName](16, 17);  // 调用全局方法addHarlibrary()\n});
动态import实现方案介绍
动态import根据入参是常量还是变量，分成动态import常量表达式和动态import变量表达式两大特性规格。
以下是动态import支持的规格列表：
注：
 当前所有import中使用的模块名是依赖方oh-package.json5的dependencies中的别名； 本地模块在依赖方的dependencies中配置的别名建议与moduleName以及packageName三者一致。moduleName指的是被依赖的HSP/HAR的module.json5中配置的名字，packageName指的是被依赖的HSP/HAR的oh-package.json5中配置的名字。 import一个模块名，实际的行为是import该模块的入口文件，一般为index.ets/ts。 
动态import实现中的关键点
[h2]动态import常量表达式
动态import常量表达式是指动态import的入参为常量的场景。下面以HAP引用其他模块或API的示例来说明典型用法。
说明：本文示例代码中Index.ets等路径是按照当前DevEco Studio的模块配置设置，如后续发生变化，请调整位置及其他文件相对路径。
 HAP常量动态import HAR模块名 // HAR's Index.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HAR, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nimport('myHar').then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"myHar\": \"file:../myHar\"\n} HAP常量动态import HAR模块文件路径 // HAR's Index.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HAR, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nimport('myHar/Index').then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"myHar\": \"file:../myHar\"\n} HAP常量动态import HSP模块名 // HSP's Index.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HSP, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nimport('myHsp').then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"myHsp\": \"file:../myHsp\"\n} HAP常量动态import HSP模块名文件路径 // HSP's Index.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HSP, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nimport('myHsp/Index').then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"myHsp\": \"file:../myHsp\"\n} HAP常量动态import远程HAR模块名 // HAP's src/main/ets/pages/Index.ets\nimport('@ohos/crypto-js').then((ns:ESObject) => {\n  console.info('DynamicImport @ohos/crypto-js: ' + ns.CryptoJS.MD5(123456));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"@ohos/crypto-js\": \"2.0.3-rc.0\"\n} HAP常量动态import ohpm包 // HAP's src/main/ets/pages/Index.ets\nimport('json5').then((ns:ESObject) => {\n  console.info('DynamicImport json5');\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"json5\": \"1.0.2\"\n} HAP常量动态import自己的单文件 // HAP's src/main/ets/Calc.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HAP, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nimport('../Calc').then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); HAP常量动态import自己的Native库 // libnativeapi.so's index.d.ts\nexport const add: (a:number, b:number) => number; // HAP's src/main/ets/pages/Index.ets\nimport('libnativeapi.so').then((ns:ESObject) => {\n  console.info('DynamicImport libnativeapi.so: ' + ns.default.add(2, 3));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"libnativeapi.so\": \"file:./src/main/cpp/types/libnativeapi\"\n} HAP常量动态import加载API // HAP's src/main/ets/pages/Index.ets\nimport('@system.app').then((ns:ESObject) => { ns.default.terminate(); });\nimport('@system.router').then((ns:ESObject) => { ns.default.clear(); });\nimport('@ohos.curves').then((ns:ESObject) => { ns.default.springMotion(0.555, 0.75, 0.001); });\nimport('@ohos.matrix4').then((ns:ESObject) => { ns.default.identity(); });\nimport('@ohos.hilog').then((ns:ESObject) => { ns.default.info(0x0000, 'testTag', '%{public}s', 'DynamicImport @ohos.hilog.'); }); 
[h2]动态import变量表达式
DevEco Studio中模块间的依赖关系通过oh-package.json5中的dependencies进行配置。dependencies列表中所有模块默认都会进行安装（本地模块）或下载（远程模块），但是不会默认参与编译。HAP/HSP编译时会以入口文件（一般为Index.ets/ts）开始搜索依赖关系，搜索到的模块或文件才会加入编译。
在编译期，静态import和常量动态import可以被打包工具rollup及其插件识别解析，加入依赖树中，参与到编译流程，最终生成方舟字节码。但是如果是变量动态import，该变量值可能需要进行运算或者外部传入才能得到，在编译态无法解析出其内容，也就无法加入编译。为了将这部分模块/文件加入编译，还需要额外增加一个runtimeOnly的buildOption配置，用于配置动态import的变量实际的模块名或者文件路径。
1. runtimeOnly字段schema配置格式
在HAP/HSP/HAR的build-profile.json5中的buildOption中增加runtimeOnly配置项，仅在通过变量动态import时配置，静态import和常量动态import无需配置；并且，通过变量动态import加载API时也无需配置runtimeOnly。
如下实例说明如何配置通过变量动态import其他模块，以及变量动态import本模块自己的单文件：
// 变量动态import其他模块myHar\nlet harName = 'myHar';\nimport(harName).then(……);\n\n// 变量动态import本模块自己的单文件src/main/ets/index.ets\nlet filePath = './Calc';\nimport(filePath).then(……);
对应的runtimeOnly配置：
\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [ \"myHar\" ]  // 配置本模块变量动态import其他模块名，要求与dependencies中配置的名字一致。\n      \"sources\": [ \"./src/main/ets/utils/Calc.ets\" ]  // 配置本模块变量动态import自己的文件路径，路径相对于当前build-profile.json5文件。\n    }\n  }\n}
\"runtimeOnly\"的\"packages\"：用于配置本模块变量动态import其他模块名，要求与dependencies中配置的名字一致。
\"runtimeOnly\"的\"sources\"：用于配置本模块变量动态import自己的文件路径，路径相对于当前build-profile.json5文件。
2. 使用实例
 HAP变量动态import HAR模块名 // HAR's Index.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HAR, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nlet packageName = 'myHar';\nimport(packageName).then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"myHar\": \"file:../myHar\"\n} // HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"myHar\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n} HAP变量动态import HSP模块名 // HSP's Index.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HSP, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nlet packageName = 'myHsp';\nimport(packageName).then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"myHsp\": \"file:../myHsp\"\n} // HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"myHsp\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n} HAP变量动态import远程HAR模块名 // HAP's src/main/ets/pages/Index.ets\nlet packageName = '@ohos/crypto-js';\nimport(packageName).then((ns:ESObject) => {\n  console.info('DynamicImport @ohos/crypto-js: ' + ns.CryptoJS.MD5(123456));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"@ohos/crypto-js\": \"2.0.3-rc.0\"\n} // HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"@ohos/crypto-js\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n} HAP变量动态import ohpm包 // HAP's src/main/ets/pages/Index.ets\nlet packageName = 'json5';\nimport(packageName).then((ns:ESObject) => {\n  console.info('DynamicImport json5');\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"json5\": \"1.0.2\"\n} // HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"json5\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n} HAP变量动态import自己的单文件 // HAP's src/main/ets/Calc.ets\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am a HAP, %d + %d = %d', a, b, c);\n  return c;\n} // HAP's src/main/ets/pages/Index.ets\nlet filePath = '../Calc';\nimport(filePath).then((ns:ESObject) => {\n  console.info(ns.add(3, 5));\n}); // HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"sources\": [\n        \"./src/main/ets/Calc.ets\"  // 仅用于使用变量动态import模块自己单文件场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n} HAP变量动态import自己的Native库 // libnativeapi.so's index.d.ts\nexport const add: (a:number, b:number) => number; // HAP's src/main/ets/pages/Index.ets\nlet soName = 'libnativeapi.so';\nimport(soName).then((ns:ESObject) => {\n  console.info('DynamicImport libnativeapi.so: ' + ns.default.add(2, 3));\n}); // HAP's oh-package.json5\n\"dependencies\": {\n  \"libnativeapi.so\": \"file:./src/main/cpp/types/libnativeapi\"\n} // HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"libnativeapi.so\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n} HAP变量动态import加载API // HAP's src/main/ets/pages/Index.ets\nlet packageName = '@system.app';\nimport(packageName).then((ns:ESObject) => { ns.default.terminate(); });\npackageName = '@system.router';\nimport(packageName).then((ns:ESObject) => { ns.default.clear(); });\npackageName = '@ohos.curves';\nimport(packageName).then((ns:ESObject) => { ns.default.springMotion(0.555, 0.75, 0.001); });\npackageName = '@ohos.matrix4';\nimport(packageName).then((ns:ESObject) => { ns.default.identity(); });\npackageName = '@ohos.hilog';\nimport(packageName).then((ns:ESObject) => { ns.default.info(0x0000, 'testTag', '%{public}s', 'DynamicImport @ohos.hilog.'); }); 
变量动态import加载API时无需配置runtimeOnly。
[h2]HAR模块间动态import依赖解耦
当应用包含多个HAR包，且HAR包之间依赖关系比较复杂。在DevEco Studio中配置依赖关系时，可能会形成循环依赖。这时，如果HAR之间的依赖关系中仅有变量动态import，可以将HAR包之间直接依赖关系转移到HAP/HSP中配置，HAR包之间无需配置依赖关系，从而达到HAR包间依赖解耦的目的。如下示意图：
HAR之间依赖关系转移到HAP/HSP后：
1. 使用限制
 仅限本地源码HAR包之间形成循环依赖时可使用该规避方案。 被转移依赖的HAR之间只能通过变量动态import，不能有静态import或常量动态import。 转移依赖时，dependencies和runtimeOnly依赖配置要同时转移。 HSP不支持转移依赖。即：HAP->HSP1->HSP2->HSP3，这里的HSP2和HSP3不能转移到HAP上面。 转移依赖的整个链路上只能有HAR，不能跨越HSP转移。即：HAP->HAR1->HAR2->HSP->HAR3->HAR4。 HAR1对HAR2的依赖可以转移到HAP上，HAR3对HAR4的依赖可以转移到HSP上，但是，不能将HAR3或HAR4转移到HAP上。 
2. 使用实例
下面的实例HAP变量动态import HAR包har1，har1变量动态import另一个HAR包har2。
// HAP's oh-package.json5\n\"dependencies\": {\n  \"har1\": \"file:../har1\"\n}
// HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"har1\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n}
// HAP's src/main/ets/pages/Index.ets\nlet harName = 'har1';\nimport(harName).then((ns:ESObject) => {\n  console.info('DynamicImport addHar1 4 + 5 = ' + ns.addHar1(4, 5));\n});
// har1's oh-package.json5\n\"dependencies\": {\n  \"har2\": \"file:../har2\"\n}
// har1's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"har2\"  // 仅用于使用变量动态import其他模块名场景，静态import或常量动态import无需配置。\n      ]\n    }\n  }\n}
// har1's Index.ets\nexport { addHar1 } from './src/main/ets/utils/Calc'
// har1's src/main/ets/utils/Calc.ets\nexport function addHar1(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am har1, %d + %d = %d', a, b, c);\n\n  let harName = 'har2';\n  import(harName).then((ns:ESObject) => {\n    console.info('DynamicImport addHar2 4 + 5 = ' + ns.addHar2(4, 5));\n  });\n  return c;\n}
// har2's Index.ets\nexport { addHar2 } from './src/main/ets/utils/Calc'
// har2's src/main/ets/utils/Calc.ets\nexport function addHar2(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am har2, %d + %d = %d', a, b, c);\n  return c;\n}
har1对har2的依赖dependencies和runtimeOnly配置转移到HAP中，har1不需要配置对har2的dependencies和runtimeOnly配置：
// HAP's oh-package.json5\n\"dependencies\": {\n  \"har1\": \"file:../har1\",\n  \"har2\": \"file:../har2\"\n}
// HAP's build-profile.json5\n\"buildOption\": {\n  \"arkOptions\": {\n    \"runtimeOnly\": {\n      \"packages\": [\n        \"har1\",\n        \"har2\"\n      ]\n    }\n  }\n}
// HAP's src/main/ets/pages/Index.ets\nlet harName = 'har1';\nimport(harName).then((ns:ESObject) => {\n  console.info('DynamicImport addHar1 4 + 5 = ' + ns.addHar1(4, 5));\n});
// har1's Index.ets\nexport { addHar1 } from './src/main/ets/utils/Calc'
// har1's src/main/ets/utils/Calc.ets\nexport function addHar1(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am har1, %d + %d = %d', a, b, c);\n\n  let harName = 'har2';\n  import(harName).then((ns:ESObject) => {\n    console.info('DynamicImport addHar2 4 + 5 = ' + ns.addHar2(4, 5));\n  });\n  return c;\n}
// har2's Index.ets\nexport { addHar2 } from './src/main/ets/utils/Calc'
// har2's src/main/ets/utils/Calc.ets\nexport function addHar2(a:number, b:number):number {\n  let c = a + b;\n  console.info('DynamicImport I am har2, %d + %d = %d', a, b, c);\n  return c;\n}
