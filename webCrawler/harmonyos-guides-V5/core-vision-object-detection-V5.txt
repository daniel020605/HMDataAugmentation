多目标识别
适用场景
可同时检测出给定图片中的各种物体，包括风景、动物、植物、建筑、树、人脸、表格、文本等位置，并框选出物体。
约束与限制
该能力当前不支持模拟器。
开发步骤
在使用多目标识别时，将实现多目标识别相关的类添加至工程。import { BusinessError } from '@kit.BasicServicesKit';\nimport { objectDetection, visionBase } from '@kit.CoreVisionKit'; 简单配置页面的布局，并在Button组件添加点击事件，拉起图库，选择图片。Button('选择图片')\n  .type(ButtonType.Capsule)\n  .fontColor(Color.White)\n  .alignSelf(ItemAlign.Center)\n  .width('80%')\n  .margin(10)\n  .onClick(() => {\n    // 拉起图库，获取图片资源\n    this.selectImage();\n  }) 通过图库获取图片资源，将图片转换为PixelMap。private async selectImage() {\n  let uri = await this.openPhoto()\n  if (uri === undefined) {\n    hilog.error(0x0000, 'objectDetectSample', \"Failed to defined uri.\");\n  }\n  this.loadImage(uri)\n}\n\nprivate openPhoto(): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n    photoPicker.select({\n      MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE, maxSelectNumber: 1\n    }).then(res => {\n      resolve(res.photoUris[0])\n    }).catch((err: BusinessError) => {\n      hilog.error(0x0000, 'objectDetectSample', `Failed to get photo image uri. code：${err.code}，message：${err.message}`);\n      reject('')\n    })\n  })\n}\n\nprivate loadImage(name: string) {\n  setTimeout(async () => {\n    let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\n    this.imageSource = image.createImageSource(fileSource.fd);\n    this.chooseImage = await this.imageSource.createPixelMap();\n  }, 100)\n} 实例化Request对象，并传入待检测图片的PixelMap，调用多目标识别的实现多目标识别功能。// 调用多目标检测接口\nlet request: visionBase.Request = {\n  inputData: { pixelMap: this.chooseImage }\n};\nlet data: objectDetection.ObjectDetectionResponse = await (await objectDetection.ObjectDetector.create()).process(request); （可选）如果需要将结果展示在界面上，可以使用下列代码。let objectJson = JSON.stringify(data);\nhilog.info(0x0000, 'objectDetectSample', `Succeeded in face detect：${objectJson}`);\nthis.dataValues = objectJson; 
开发实例
点击“选择图片”按钮，触发AI多目标识别功能。
import { image } from '@kit.ImageKit';\nimport { hilog } from '@kit.PerformanceAnalysisKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { fileIo } from '@kit.CoreFileKit';\nimport { objectDetection, visionBase } from '@kit.CoreVisionKit';\nimport { photoAccessHelper } from '@kit.MediaLibraryKit';\n\n@Entry\n@Component\nstruct Index {\n  private imageSource: image.ImageSource | undefined = undefined;\n  @State chooseImage: PixelMap | undefined = undefined\n  @State dataValues: string = ''\n\n  build() {\n    Column() {\n      Image(this.chooseImage)\n        .objectFit(ImageFit.Fill)\n        .height('60%')\n\n      Text(this.dataValues)\n        .copyOption(CopyOptions.LocalDevice)\n        .height('15%')\n        .margin(10)\n        .width('60%')\n\n      Button('选择图片')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(() => {\n          // 拉起图库\n          this.selectImage()\n        })\n\n      Button('开始多目标识别')\n        .type(ButtonType.Capsule)\n        .fontColor(Color.White)\n        .alignSelf(ItemAlign.Center)\n        .width('80%')\n        .margin(10)\n        .onClick(async () => {\n          if(!this.chooseImage) {\n            hilog.error(0x0000, 'objectDetectSample', `Failed to choose image. chooseImage: ${this.chooseImage}`);\n            return;\n          }\n          let request: visionBase.Request = {\n            inputData: { pixelMap: this.chooseImage }\n          };\n          let data: objectDetection.ObjectDetectionResponse = await (await objectDetection.ObjectDetector.create()).process(request);\n          let objectJson = JSON.stringify(data);\n          hilog.info(0x0000, 'objectDetectSample', `Succeeded in face detect：${objectJson}`);\n          this.dataValues = objectJson;\n        })\n    }\n    .width('100%')\n    .height('100%')\n    .justifyContent(FlexAlign.Center)\n  }\n\n  private async selectImage() {\n    let uri = await this.openPhoto()\n    if (uri === undefined) {\n      hilog.error(0x0000, 'objectDetectSample', \"Failed to defined uri.\");\n    }\n    this.loadImage(uri)\n  }\n\n  private openPhoto(): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      let photoPicker: photoAccessHelper.PhotoViewPicker = new photoAccessHelper.PhotoViewPicker();\n      photoPicker.select({\n        MIMEType: photoAccessHelper.PhotoViewMIMETypes.IMAGE_TYPE, maxSelectNumber: 1\n      }).then(res => {\n        resolve(res.photoUris[0])\n      }).catch((err: BusinessError) => {\n        hilog.error(0x0000, 'objectDetectSample', `Failed to get photo image uri. code：${err.code}，message：${err.message}`);\n        reject('')\n      })\n    })\n  }\n\n  private loadImage(name: string) {\n    setTimeout(async () => {\n      let fileSource = await fileIo.open(name, fileIo.OpenMode.READ_ONLY);\n      this.imageSource = image.createImageSource(fileSource.fd);\n      this.chooseImage = await this.imageSource.createPixelMap();\n    }, 100)\n  }\n}
