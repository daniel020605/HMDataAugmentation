云侧服务准备
Payment Kit服务提供了支付系统相关的一系列API接口。为减小API接口的接入工作量，华为支付服务提供了java版本对应的Maven依赖用于云侧服务对接。
开发者可通过Maven集成来完成服务器开发环境的构建，以此来快速使用华为支付提供的API接口。
可下载示例代码支付-华为支付服务-服务端用以快速完成商户服务器接入。
约束与限制
商户使用提供的示例代码接入华为支付前请确保网络已正常连接，可以从华为支付仓库地址正常拉取Maven依赖。
开发环境：JDK 1.8及以上。
集成Maven依赖
在示例代码pom.xml文件中已配置仓库地址，如无法正常拉取依赖，可在Maven配置文件“settings.xml”中添加华为支付的Maven仓库地址。
<mirror>\n  <id>central</id>\n  <mirrorOf>central</mirrorOf>\n  <url>https://developer.huawei.com/repo/</url>\n</mirror>
在示例代码pom.xml文件中已引入jar包的Maven坐标。如商户自己构建工程则需在pom.xml文件中引入如下坐标：
<dependency>\n  <groupId>com.huawei.petalpay</groupId>\n  <artifactId>pay-java</artifactId>\n  <version>1.0.0.295</version>\n</dependency>
配置初始化
将以下商户相关配置添加到示例代码配置文件src/main/resources/petalpayconfig.properties。
 商户号，获取方式请参见查询商户号信息。 商户私钥，获取途径请参考证书准备。 商户私钥签名类型，RSA或SM2。 商户证书ID，获取方式请参见上传商户证书。 华为支付服务回调验签公钥，获取方式请参见下载华为支付证书。 华为支付服务回签公钥，涉及接口入参敏感字段（接口会做标注）加密时需配置。 商户号关联的APPID，获取方式请参见AppID管理及关联。 
配置内容示例如下：
# 商户号\nPETALPAY.MERC_NO=121540000***\n# 商户私钥\nPETALPAY.MERC_PRIVATE_KEY=MIIJQwIBADAN=9w0BAQEFAASCCS0wg******************************CldcDlDCSsdfDceCSDr+RyvJdfcXssdEA=\n# 商户证书ID\nPETALPAY.MERC_AUTH_ID=101540200089***\n# 商户私钥签名类型\nPETALPAY.SIGN_TYPE=RSA\n# 华为支付服务域名\nPETALPAY.SERVER_HOST=https://petalpay-developer.cloud.huawei.com.cn\n# 华为支付服务回调验签公钥\nPETALPAY.HW_PAY_PUBLIC_KEY_FOR_CALLBACK=6D015316F09CB747E4467******************************DB46DA4BD0960ADD500D84912\n# 华为支付服务验签公钥sessionkey（非必选）\nPETALPAY.HW_PUBLIC_KEY_FOR_SESSIONKEY=042A7D32FA19C29D3E722D6C4ACAC0B******************************E5A5B1C8120DAC9882E4B093B9CE7A38296F87F41747D319A\n# 商户号关联的APPID\nPETALPAY.APPID=111831***
业务接口请求
 获取发起请求客户端对象               可通过工具类MercConfigUtil提供的方法getMercConfig快速获取PetalPayConfig对象来构建请求客户端，对应配置项获取及配置参见配置初始化。        // 商户配置\npublic static PetalPayConfig getMercConfig() {\n    return PetalPayConfig.builder().callerId(MERC_NO) // (必填)商户号\n        .appId(APP_ID) // (必填) 商户号关联的APPID\n        .privateKey(MERC_PRIVATE_KEY) // (必填) 商户私钥\n        .authId(MERC_AUTH_ID) // (必填) 商户证书ID\n        .signType(SIGN_TYPE) // (选填) 商户公私钥类型，默认RSA加密\n        .petalpayPublicKey(HW_PAY_PUBLIC_KEY_FOR_CALLBACK) // (非必填) 验签公钥(和接口级配置needVerifyRsp对应，公钥和商户通知回调验签公钥同一个)\n        .domainHost(SERVER_HOST).build();\n}   方式一：使用默认实现的请求客户端工具类。通过PetalPayConfig构建请求客户端对象示例如下：        private static PetalPayClient payClient = new DefaultPetalPayClient(MercConfigUtil.getMercConfig());  方式二：自定义实现请求客户端工具类。开发者如果需要自定义接口请求的client，用于处理请求中的日志打印等操作，可以通过继承PetalPayClient 来实现。示例如下： public class MercPetalPayClient extends PetalPayClient {\n    public MercPetalPayClient(PetalPayConfig petalPayConfig) {\n        super(petalPayConfig);\n    }\n    @Override\n    public String doPost(String url, Map<String, String> headers, String requestBody) throws Exception {\n        // todo\n    }\n    @Override\n    public String doGet(String url, Map<String, String> headers, String requestBody) throws Exception {\n        // todo\n    }\n}      需要使用最新开放的API接口，如示例代码未及时更新，未找到默认提供用于接口请求的对象信息，可直接调用PetalPayClient的execute方法构建接口请求。 由于PetalPayClient.execute()方法中涉及通过SecureRandom.getInstanceStrong()获取安全随机数，如果服务器熵值不足，可能会导致请求阻塞，需补充服务器熵值。以下为通过haveged服务补充熵值参考：# 查看熵值 \ncat /proc/sys/kernel/random/entropy_avail\n# 安装haveged \nyum install haveged \n# 启动haveged\nsystemctl start haveged.service \n# 开启haveged服务开机自启动\nsystemctl enable haveged.service 也可以使用以下默认实现的请求客户端工具类方法并通过RequestConfig对象tranceId字段（建议每次请求都更新该字段）来主动传递tranceId，避免自动通过SecureRandom.getInstanceStrong()生成时导致请求阻塞。public <T> T execute(String httpMethod, String apiUrl, Class<T> rspType, RequestConfig requestConfig, Object requestObj) throws Exception;    组装请求参数               预下单请求参数组装示例如下：        public static PreOrderCreateRequestV2 getPreOrderCreateRequestV2() {\n    return PreOrderCreateRequestV2.builder()\n        .mercOrderNo(\"pay-example-\" + System.currentTimeMillis()) // 每次订单号都要变，请将pay-example-修改为商户自己的订单前缀\n        .appId(MercConfigUtil.APP_ID)  // appId，需要配置为与商户绑定的正确的appId\n        .mercNo(MercConfigUtil.MERC_NO) // 商户的商户号\n        .tradeSummary(\"请修改为对应的商品简称\") // 请修改为商品简称\n        .bizType(\"100002\") // (100001：虚拟商品购买,100002：实物商品购买,100004：航旅交通服务,100005：活动票务订购,100006：商业服务消费,100007：生活服务消费,100008：租金缴纳,100009：会员费缴纳,100011：其他商家消费,100037：公共便民服务)\n        .totalAmount(2L)\n        .callbackUrl(\"https://www.xxxxxx.com/hw/pay/callback\") //回调通知地址，通知URL必须为直接可访问的URL，要求为https地址。最大长度为512。请替换为格式正确的结果通知回调地址。\n        .build();\n}  请求业务接口不同API接口调用URI不一样，详情请参见API参考文档。         APP预下单请求示例如下：        public CommonResponse aggrPreOrderForAppV2() {\n    // 组装对象\n    PreOrderCreateRequestV2 preOrderReq = getPreOrderCreateRequestV2();\n    PreOrderCreateResponse response = null;\n    try {\n        response = payClient.execute(\"POST\", \"/api/v2/aggr/preorder/create/app\", PreOrderCreateResponse.class,\n            preOrderReq);\n    } catch (Exception e) {\n        // todo 异常处理\n        log.error(\"request error \", e);\n        return CommonResponse.buildErrorRsp(e.getMessage());\n    }\n    if (!validResponse(response)) {\n        // todo 异常处理\n        log.error(\"response is invalid \", response);\n        return CommonResponse.buildFailRsp(response);\n    }\n    // 获取prepayId构建orderStr返回\n    return CommonResponse.buildSuccessRsp(payClient.buildOrderStr(response.getPrepayId()));\n}\npublic static boolean validResponse(BaseGwRspWithSign rsp) {\n    return rsp != null && \"000000\".equals(rsp.getResultCode());\n}  
通知回调处理
可使用VerifyTools.getCallbackResult方法自动处理回调结果验签并返回响应给华为支付服务器以及实现CallBackHandleInterface接口来处理回调结果。
通知回调处理示例如下：
public CallBackBaseResponse transactionResultNotify(@RequestBody Object callbackRequest) {\n    String callbackStr = JSONObject.toJSONString(callbackRequest);\n    return VerifyTools.getCallbackResult(request, MercConfigUtil.HW_PAY_PUBLIC_KEY_FOR_CALLBACK, new CallBackHandleInterface() {\n        @Override\n         public void fail(CallBackBaseResponse response, String reqString) {\n              // 未获取到字节流或者验签失败\n              // 商户自己业务处理\n              log.error(\"CallBack failed {}\", response != null ? response.getResultCode() : null);\n         }\n         @Override\n         public void success(String reqString) {\n              NotifyPaymentReq callbackReq = JSONObject.parseObject(reqString, NotifyPaymentReq.class);\n              // 验签成功，商户自己业务处理\n         }\n    });\n}
关于通知回调更多具体要求可参考通知回调接口说明。
敏感信息处理
为了保证API接口请求通信过程中敏感信息字段（如用户的住址、银行卡号、手机号码等，对应字段会在具体API接口中标注）的机密性，Payment Kit要求加密上送，对应的接口调用方法参考示例如下：
import com.huawei.petalpay.paymentservice.apiservice.client.model.MgmtSubmercRsp;\nimport com.huawei.petalpay.paymentservice.core.client.DefaultPetalPayClient;\nimport com.huawei.petalpay.paymentservice.core.client.PetalPayClient;\nimport com.huawei.petalpay.paymentservice.core.config.RequestConfig;\nimport com.huawei.petalpay.paymentservice.core.tools.SM4Util;\nimport com.huawei.petalpay.paymentservice.example.common.MercConfigUtil;\n\npublic class SignRegister {\n    public static void main(String[] args) {\n        PetalPayClient payClient = new DefaultPetalPayClient(MercConfigUtil.getMercConfig());\n        String sessionKey = SM4Util.getSM4GCMSessionKey();\n        String message = \"xxxxxx\";\n        RegisterSubmercReq req = new RegisterSubmercReq(SM4Util.getSM4GCMContent(sessionKey, message));\n        RequestConfig config = RequestConfig.builder()\n            .publicKeyForSessionKey(MercConfigUtil.HW_PUBLIC_KEY_FOR_SESSIONKEY)\n            .sessionKey(sessionKey)\n            .build();\n        try {\n            MgmtSubmercRsp response = payClient.execute(\"POST\", \"/api/v1/partner/mgmt/submerc/register\", \n                MgmtSubmercRsp.class, config, req);\n        } catch (Exception e) {\n            // todo 异常处理\n        }\n    }\n    static class RegisterSubmercReq {\n        private String message;\n        public RegisterSubmercReq(String message) {\n            this.message = message;\n        }\n    }\n}
