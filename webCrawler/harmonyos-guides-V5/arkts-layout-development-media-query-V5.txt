媒体查询 (@ohos.mediaquery)
概述
媒体查询作为响应式设计的核心，在移动设备上应用十分广泛。媒体查询可根据不同设备类型或同设备不同状态修改应用的样式。媒体查询常用于下面两种场景：
 针对设备和应用的属性信息（比如显示区域、深浅色、分辨率），设计出相匹配的布局。 当屏幕发生动态改变时（比如分屏、横竖屏切换），同步更新应用的页面布局。 
引入与使用流程
媒体查询通过mediaquery模块接口，设置查询条件并绑定回调函数，任一媒体特征改变时，均会触发回调函数，返回匹配结果，根据返回值更改页面布局或者实现业务逻辑，实现页面的响应式设计。具体步骤如下：
首先导入媒体查询模块。
import { mediaquery } from '@kit.ArkUI';
通过matchMediaSync接口设置媒体查询条件，保存返回的条件监听句柄listener。例如监听横屏事件：
let listener: mediaquery.MediaQueryListener = this.getUIContext().getMediaQuery().matchMediaSync('(orientation: landscape)');
给条件监听句柄listener绑定回调函数onPortrait，当listener检测设备状态变化时执行回调函数。在回调函数内，根据不同设备状态更改页面布局或者实现业务逻辑。
onPortrait(mediaQueryResult: mediaquery.MediaQueryResult) {\n  if (mediaQueryResult.matches as boolean) {\n    // do something here\n  } else {\n    // do something here\n  }\n}\n\nlistener.on('change', onPortrait);
媒体查询条件
媒体查询条件由媒体类型、逻辑操作符、媒体特征组成，其中媒体类型可省略，逻辑操作符用于连接不同媒体类型与媒体特征，其中，媒体特征要使用“()”包裹且可以有多个。
[h2]语法规则
语法规则包括媒体类型（media-type）、媒体逻辑操作（media-logic-operations）和媒体特征（media-feature）。
[media-type] [media-logic-operations] [(media-feature)]
例如：
 screen and (round-screen: true) ：表示当设备屏幕是圆形时条件成立。 (max-height: 800px) ：表示当高度小于等于800px时条件成立。 (height <= 800px) ：表示当高度小于等于800px时条件成立。 screen and (device-type: tv) or (resolution < 2) ：表示包含多个媒体特征的多条件复杂语句查询，当设备类型为tv或设备分辨率小于2时条件成立。 (dark-mode: true) ：表示当系统为深色模式时成立。 
[h2]媒体类型（media-type）
查询条件未写媒体类型时，默认为screen。媒体类型必须写在查询条件开头。
[h2]媒体逻辑操作（media-logic-operations）
媒体逻辑操作符：and、or、not、only用于构成复杂媒体查询，也可以通过comma（, ）将其组合起来，详细解释说明如下表。
表1 媒体逻辑操作符
媒体范围操作符包括<=，>=，<，>，详细解释说明如下表。
表2 媒体逻辑范围操作符
[h2]媒体特征（media-feature）
媒体特征包括应用显示区域的宽高、设备分辨率以及设备的宽高等属性，详细说明如下表。
表3 媒体特征说明表
比较height、width等宽高尺寸时，支持vp和px单位，无单位默认为px。
设备的分辨率，支持dpi，dppx和dpcm单位。其中：
- dpi表示每英寸中物理像素个数，1dpi ≈ 0.39dpcm；
- dpcm表示每厘米上的物理像素个数，1dpcm ≈ 2.54dpi；
- dppx表示每个px中的物理像素数（此单位按96px = 1英寸为基准，与页面中的px单位计算方式不同），1dppx = 96dpi。
屏幕的方向。
可选值：
- orientation: portrait（设备竖屏）；
- orientation: landscape（设备横屏）。
设备的类型。
可选值：default、phone、tablet、tv、car、wearable、2in1。
系统当前的深浅模式。可选值：true、false。
深色模式为true，浅色模式为false。
目前在卡片中使用媒体查询，只支持height、width。
场景示例
下例中使用媒体查询，实现屏幕横竖屏切换时，给页面文本应用添加不同的内容和样式。
Stage模型下的示例：
import { mediaquery, window } from '@kit.ArkUI';\nimport { common } from '@kit.AbilityKit';\n\n@Entry\n@Component\nstruct MediaQueryExample {\n  @State color: string = '#DB7093';\n  @State text: string = 'Portrait';\n  // 当设备横屏时条件成立\n  listener:mediaquery.MediaQueryListener = this.getUIContext().getMediaQuery().matchMediaSync('(orientation: landscape)');\n\n  // 当满足媒体查询条件时，触发回调\n  onPortrait(mediaQueryResult:mediaquery.MediaQueryResult) {\n    if (mediaQueryResult.matches as boolean) { // 若设备为横屏状态，更改相应的页面布局\n      this.color = '#FFD700';\n      this.text = 'Landscape';\n    } else {\n      this.color = '#DB7093';\n      this.text = 'Portrait';\n    }\n  }\n\n  aboutToAppear() {\n    // 绑定当前应用实例\n    // 绑定回调函数\n    this.listener.on('change', (mediaQueryResult: mediaquery.MediaQueryResult) => {\n      this.onPortrait(mediaQueryResult)\n    });\n  }\n\n  aboutToDisappear() {\n    // 解绑listener中注册的回调函数\n    this.listener.off('change');\n  }\n\n  // 改变设备横竖屏状态函数\n  private changeOrientation(isLandscape: boolean) {\n    // 获取UIAbility实例的上下文信息\n    let context:common.UIAbilityContext = this.getUIContext().getHostContext() as common.UIAbilityContext;\n    // 调用该接口手动改变设备横竖屏状态\n    window.getLastWindow(context).then((lastWindow) => {\n      lastWindow.setPreferredOrientation(isLandscape ? window.Orientation.LANDSCAPE : window.Orientation.PORTRAIT)\n    });\n  }\n\n  build() {\n    Column({ space: 50 }) {\n      Text(this.text).fontSize(50).fontColor(this.color)\n      Text('Landscape').fontSize(50).fontColor(this.color).backgroundColor(Color.Orange)\n        .onClick(() => {\n          this.changeOrientation(true);\n        })\n      Text('Portrait').fontSize(50).fontColor(this.color).backgroundColor(Color.Orange)\n        .onClick(() => {\n          this.changeOrientation(false);\n        })\n    }\n    .width('100%').height('100%')\n  }\n}
FA模型下的示例：
import { mediaquery } from '@kit.ArkUI';\nimport { featureAbility } from '@kit.AbilityKit';\n\n@Entry\n@Component\nstruct MediaQueryExample {\n  @State color: string = '#DB7093';\n  @State text: string = 'Portrait';\n  listener:mediaquery.MediaQueryListener = mediaquery.matchMediaSync('(orientation: landscape)'); // 当设备横屏时条件成立\n\n  onPortrait(mediaQueryResult:mediaquery.MediaQueryResult) { // 当满足媒体查询条件时，触发回调\n    if (mediaQueryResult.matches as boolean) { // 若设备为横屏状态，更改相应的页面布局\n      this.color = '#FFD700';\n      this.text = 'Landscape';\n    } else {\n      this.color = '#DB7093';\n      this.text = 'Portrait';\n    }\n  }\n\n  aboutToAppear() {\n    // 绑定当前应用实例\n    this.listener.on('change', (mediaQueryResult:mediaquery.MediaQueryResult) => { this.onPortrait(mediaQueryResult) }); //绑定回调函数\n  }\n\n  aboutToDisappear() {\n    // 解绑listener中注册的回调函数\n    this.listener.off('change');\n  }\n\n  build() {\n    Column({ space: 50 }) {\n      Text(this.text).fontSize(50).fontColor(this.color)\n      Text('Landscape').fontSize(50).fontColor(this.color).backgroundColor(Color.Orange)\n        .onClick(() => {\n          let context = featureAbility.getContext();\n          context.setDisplayOrientation(0); //调用该接口手动改变设备横竖屏状态\n        })\n      Text('Portrait').fontSize(50).fontColor(this.color).backgroundColor(Color.Orange)\n        .onClick(() => {\n          let context = featureAbility.getContext();\n          context.setDisplayOrientation(1); //调用该接口手动改变设备横竖屏状态\n        })\n    }\n    .width('100%').height('100%')\n  }\n}
图1 竖屏
图2 横屏
