视频播放 (Video)
Video组件用于播放视频文件并控制其播放状态，常用于为短视频和应用内部视频的列表页面。当视频完整出现时会自动播放，用户点击视频区域则会暂停播放，同时显示播放进度条，通过拖动播放进度条指定视频播放到具体位置。具体用法请参考Video。
创建视频组件
Video通过调用接口来创建，接口调用形式如下：
Video(value: VideoOptions)
VideoOptions对象包含参数src、currentProgressRate、previewUri、controller。其中，src指定视频播放源的路径，加载方式请参考加载视频资源，currentProgressRate用于设置视频播放倍速，previewUri指定视频未播放时的预览图片路径，controller设置视频控制器，用于自定义控制视频。具体用法请参考VideoOptions对象说明。
加载视频资源
Video组件支持加载本地视频和网络视频。
[h2]加载本地视频
 普通本地视频。 加载本地视频时，首先在本地rawfile目录指定对应的文件，如下图所示。  再使用资源访问符$rawfile()引用视频资源。 // xxx.ets\n@Component\nexport struct VideoPlayer {\n  private controller: VideoController = new VideoController()\n  private previewUris: Resource = $r('app.media.preview')\n  private innerResource: Resource = $rawfile('videoTest.mp4')\n\n  build() {\n    Column() {\n      Video({\n        src: this.innerResource,\n        previewUri: this.previewUris,\n        controller: this.controller\n      })\n    }\n  }\n} Data Ability提供的视频路径带有dataability://前缀，使用时确保对应视频资源存在即可。 // xxx.ets\n@Component\nexport struct VideoPlayer {\n  private controller: VideoController = new VideoController()\n  private previewUris: Resource = $r('app.media.preview')\n  private videoSrc: string = 'dataability://device_id/com.domainname.dataability.videodata/video/10'\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc,\n        previewUri: this.previewUris,\n        controller: this.controller\n      })\n    }\n  }\n} 
[h2]加载沙箱路径视频
支持file:///data/storage路径前缀的字符串，用于读取应用沙箱路径内的资源，需要保证应用沙箱目录路径下的文件存在并且有可读权限。
// xxx.ets\n@Component\nexport struct VideoPlayer {\n  private controller: VideoController = new VideoController()\n  private videoSrc: string = 'file:///data/storage/el2/base/haps/entry/files/show.mp4'\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc,\n        controller: this.controller\n      })\n    }\n  }\n}
[h2]加载网络视频
加载网络视频时，需要申请权限ohos.permission.INTERNET，具体申请方式请参考声明权限。此时，Video的src属性为网络视频的链接。
// xxx.ets\n@Component\nexport struct VideoPlayer {\n  private controller: VideoController = new VideoController()\n  private previewUris: Resource = $r('app.media.preview')\n  private videoSrc: string = 'https://www.example.com/example.mp4' // 使用时请替换为实际视频加载网址\n\n  build() {\n    Column() {\n      Video({\n        src: this.videoSrc,\n        previewUri: this.previewUris,\n        controller: this.controller\n      })\n    }\n  }\n}
添加属性
Video组件属性主要用于设置视频的播放形式。例如设置视频播放是否静音、播放是否显示控制条等。
// xxx.ets\n@Component\nexport struct VideoPlayer {\n  private controller: VideoController = new VideoController()\n\n  build() {\n    Column() {\n      Video({\n        controller: this.controller\n      })\n        .muted(false) // 设置是否静音\n        .controls(false) // 设置是否显示默认控制条\n        .autoPlay(false) // 设置是否自动播放\n        .loop(false) // 设置是否循环播放\n        .objectFit(ImageFit.Contain) // 设置视频适配模式\n    }\n  }\n}
事件调用
Video组件回调事件主要为播放开始、暂停结束、播放失败、播放停止、视频准备和操作进度条等事件，除此之外，Video组件也支持通用事件的调用，如点击、触摸等事件的调用。详细事件请参考事件说明。
// xxx.ets\n@Entry\n@Component\nstruct VideoPlayer {\n  private controller: VideoController = new VideoController()\n  private previewUris: Resource = $r('app.media.preview')\n  private innerResource: Resource = $rawfile('videoTest.mp4')\n\n  build() {\n    Column() {\n      Video({\n        src: this.innerResource,\n        previewUri: this.previewUris,\n        controller: this.controller\n      })\n        .onUpdate((event) => { // 更新事件回调\n          console.info(\"Video update.\");\n        })\n        .onPrepared((event) => { // 准备事件回调\n          console.info(\"Video prepared.\");\n        })\n        .onError(() => { // 失败事件回调\n          console.info(\"Video error.\");\n        })\n        .onStop(() => { // 停止事件回调\n          console.info(\"Video stopped.\");\n        })\n    }\n  }\n}
Video控制器使用
Video控制器主要用于控制视频的状态，包括播放、暂停、停止以及设置进度等，详细使用请参考VideoController使用说明。
 默认控制器 默认的控制器支持视频的开始、暂停、进度调整、全屏显示四项基本功能。 // xxx.ets\n@Entry\n@Component\nstruct VideoGuide {\n  @State videoSrc: Resource = $rawfile('videoTest.mp4')\n  @State previewUri: string = 'common/videoIcon.png'\n  @State curRate: PlaybackSpeed = PlaybackSpeed.Speed_Forward_1_00_X\n\n  build() {\n    Row() {\n      Column() {\n        Video({\n          src: this.videoSrc,\n          previewUri: this.previewUri,\n          currentProgressRate: this.curRate\n        })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n} 自定义控制器 使用自定义的控制器，先将默认控制器关闭掉，之后可以使用button以及slider等组件进行自定义的控制与显示，适合自定义较强的场景下使用。 // xxx.ets\n@Entry\n@Component\nstruct VideoGuide {\n  @State videoSrc: Resource = $rawfile('videoTest.mp4')\n  @State previewUri: string = 'common/videoIcon.png'\n  @State curRate: PlaybackSpeed = PlaybackSpeed.Speed_Forward_1_00_X\n  @State isAutoPlay: boolean = false\n  @State showControls: boolean = true\n  @State sliderStartTime: string = ''\n  @State currentTime: number = 0\n  @State durationTime: number = 0\n  @State durationStringTime: string = ''\n  controller: VideoController = new VideoController()\n\n  build() {\n    Row() {\n      Column() {\n        Video({\n          src: this.videoSrc,\n          previewUri: this.previewUri,\n          currentProgressRate: this.curRate,\n          controller: this.controller\n        })\n          .controls(false)\n          .autoPlay(true)\n          .onPrepared((event) => {\n            if (event) {\n              this.durationTime = event.duration\n            }\n          })\n          .onUpdate((event) => {\n            if (event) {\n              this.currentTime = event.time\n            }\n          })\n        Row() {\n          Text(JSON.stringify(this.currentTime) + 's')\n          Slider({\n            value: this.currentTime,\n            min: 0,\n            max: this.durationTime\n          })\n            .onChange((value: number, mode: SliderChangeMode) => {\n              this.controller.setCurrentTime(value);\n            })\n            .width(\"90%\")\n          Text(JSON.stringify(this.durationTime) + 's')\n        }\n        .opacity(0.8)\n        .width(\"100%\")\n      }\n      .width('100%')\n    }\n    .height('40%')\n  }\n} 
其他说明
Video组件已经封装好了视频播放的基础能力，开发者无需进行视频实例的创建，视频信息的设置获取，只需要设置数据源以及基础信息即可播放视频，相对扩展能力较弱。如果开发者想自定义视频播放，请参考视频播放。
示例代码
 媒体库视频 
