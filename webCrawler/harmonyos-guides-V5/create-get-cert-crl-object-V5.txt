证书集合及证书吊销列表集合对象的创建和获取
从输入的证书集合和证书吊销列表集合中选择满足条件的证书或者证书吊销列表。
开发步骤
 导入证书算法库框架模块。 import { cert } from '@kit.DeviceCertificateKit'; 基于已有的证书数据，调用cert.createX509Cert创建X509证书的对象。 基于已有的CRL数据，调用cert.createX509CRL创建X509证书吊销列表的对象。 调用cert.createCertCRLCollection创建CertCRLCollection的对象，并返回相应的结果。 调用CertCRLCollection.selectCerts查找所有与X509CertMatchParameters匹配的证书对象数组，并返回结果。 调用CertCRLCollection.selectCRLs查找所有与X509CRLMatchParameters匹配的证书吊销列表数组，并返回结果。 
import { cert } from '@kit.DeviceCertificateKit';\nimport { BusinessError } from '@kit.BasicServicesKit';\nimport { util } from '@kit.ArkTS';\n\nasync function createX509CRL(): Promise<cert.X509CRL> {\n  let crlData = '-----BEGIN X509 CRL-----\\n' +\n    'MIHzMF4CAQMwDQYJKoZIhvcNAQEEBQAwFTETMBEGA1UEAxMKQ1JMIGlzc3VlchcN\\n' +\n    'MTcwODA3MTExOTU1WhcNMzIxMjE0MDA1MzIwWjAVMBMCAgPoFw0zMjEyMTQwMDUz\\n' +\n    'MjBaMA0GCSqGSIb3DQEBBAUAA4GBACEPHhlaCTWA42ykeaOyR0SGQIHIOUR3gcDH\\n' +\n    'J1LaNwiL+gDxI9rMQmlhsUGJmPIPdRs9uYyI+f854lsWYisD2PUEpn3DbEvzwYeQ\\n' +\n    '5SqQoPDoM+YfZZa23hoTLsu52toXobP74sf/9K501p/+8hm4ROMLBoRT86GQKY6g\\n' +\n    'eavsH0Q3\\n' +\n    '-----END X509 CRL-----\\n';\n\n  // 证书吊销列表二进制数据，需业务自行赋值\n  let textEncoder = new util.TextEncoder();\n  let encodingBlob: cert.EncodingBlob = {\n    data: textEncoder.encodeInto(crlData),\n    // 根据encodingData的格式进行赋值，支持FORMAT_PEM和FORMAT_DER\n    encodingFormat: cert.EncodingFormat.FORMAT_PEM\n  };\n  let x509CRL: cert.X509CRL = {} as cert.X509CRL;\n  try {\n    x509CRL = await cert.createX509CRL(encodingBlob);\n  } catch (err) {\n    let e: BusinessError = err as BusinessError;\n    console.error(`createX509CRL failed, errCode: ${e.code}, errMsg: ${e.message}`);\n  }\n  return x509CRL;\n}\n\nasync function createX509Cert(): Promise<cert.X509Cert> {\n  let certData = '-----BEGIN CERTIFICATE-----\\n' +\n    'MIIBHTCBwwICA+gwCgYIKoZIzj0EAwIwGjEYMBYGA1UEAwwPRXhhbXBsZSBSb290\\n' +\n    'IENBMB4XDTIzMDkwNTAyNDgyMloXDTI2MDUzMTAyNDgyMlowGjEYMBYGA1UEAwwP\\n' +\n    'RXhhbXBsZSBSb290IENBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEHjG74yMI\\n' +\n    'ueO7z3T+dyuEIrhxTg2fqgeNB3SGfsIXlsiUfLTatUsU0i/sePnrKglj2H8Abbx9\\n' +\n    'PK0tsW/VgqwDIDAKBggqhkjOPQQDAgNJADBGAiEApVZno/Z7WyDc/muRN1y57uaY\\n' +\n    'Mjrgnvp/AMdE8qmFiDwCIQCrIYdHVO1awaPgcdALZY+uLQi6mEs/oMJLUcmaag3E\\n' +\n    'Qw==\\n' +\n    '-----END CERTIFICATE-----\\n';\n\n  let textEncoder = new util.TextEncoder();\n  let encodingBlob: cert.EncodingBlob = {\n    data: textEncoder.encodeInto(certData),\n    // 根据encodingData的格式进行赋值，支持FORMAT_PEM和FORMAT_DER\n    encodingFormat: cert.EncodingFormat.FORMAT_PEM\n  };\n\n  let x509Cert: cert.X509Cert = {} as cert.X509Cert;\n  try {\n    x509Cert = await cert.createX509Cert(encodingBlob);\n  } catch (err) {\n    let e: BusinessError = err as BusinessError;\n    console.error(`createX509Cert failed, errCode: ${e.code}, errMsg: ${e.message}`);\n  }\n  return x509Cert;\n}\n\nasync function sample() {\n  const x509Cert = await createX509Cert();\n  const x509CRL = await createX509CRL();\n  let collection: cert.CertCRLCollection = {} as cert.CertCRLCollection;\n  try {\n    collection = cert.createCertCRLCollection([x509Cert], [x509CRL]);\n    console.log('createCertCRLCollection success');\n  } catch (err) {\n    console.error('createCertCRLCollection failed');\n  }\n\n  const certParam: cert.X509CertMatchParameters = {\n    validDate: '231128000000Z'\n  }\n  try {\n    let certs: cert.X509Cert[] = await collection.selectCerts(certParam);\n  } catch (err) {\n    console.error('selectCerts failed');\n  }\n\n  const crlParam: cert.X509CRLMatchParameters = {\n    x509Cert: x509Cert\n  }\n  try {\n    let crls: cert.X509CRL[] = await collection.selectCRLs(crlParam);\n    console.error('selectCRLs success');\n  } catch (err) {\n    console.error('selectCRLs failed');\n  }\n}
